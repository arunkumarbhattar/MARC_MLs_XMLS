<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20120117164139</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-17 16:41:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal 186: Multiple addresses for one OR or bridge</subject><body>

On Sun, Oct 23, 2011 at 1:26 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; [Quoting the original mail, but it's actually the file in git that I
&gt; read and am commenting on.]
&gt;
&gt; On Wed, Sep 21, 2011 at 02:13:18PM -0400, Nick Mathewson wrote:
&gt;&gt; =A0 The 'AllAddrs' option tells Tor that if no address is given in the
&gt;&gt; =A0 PortDescription part, we should bind/advertise every one of our
&gt;&gt; =A0 publicly visible unicast addresses; and that if a hostname address
&gt;&gt; =A0 is given in the PortDescription, we should bind/advertise every
&gt;&gt; =A0 publicly visible unicast address that the hostname resolves to.
&gt;&gt; =A0 (Q: Should this be on by default?)
&gt;
&gt; Yes, I think. And if it's on by default, does the option need to exist
&gt; at all?

I actually don't think it should be on-by-default at this point.  It'd
change the behavior of ORPort 9001 in a possibly surprising way that
I'm not sure we agree with.  See below.

[...]
&gt;&gt; =A0 Example: We have a dynamic DNS provider that maps
&gt;&gt; =A0 tornode.example.com to our current external IPv4 and IPv6
&gt;&gt; =A0 addresses. =A0Our firewall forwards port 443 on those address to our
&gt;&gt; =A0 port 1337.
&gt;&gt;
&gt;&gt; =A0 =A0 =A0ORPort 1337 no-advertise alladdrs
&gt;&gt; =A0 =A0 =A0ORPort tornode.example.com:443 no-bind alladdrs
&gt;
&gt; This drives home the issue with alladdrs: what would we do if that flag
&gt; isn't listed here?

The same as we currently do if you say "ORPort 1337": Try to figure
out a single value for "our address," and advertise that address with
that port, and not open or advertise any other ports.

&gt;&gt; =A0 (Q: Any reason to allow more than 2? =A0Multiple interfaces, I guess=
.)
&gt;
&gt; By the same logic that we chose not to allow bitmasks in addresses, it's
&gt; easy to argue that we shouldn't list more than 2 addresses (one ipv4,
&gt; one ipv6). But does limiting it to 2 in the spec simplify the design in
&gt; any way, or just constrain us down the road?

Hm. In practice, keeping track of an IPv4 address and an IPv6 address
seems to be enough for now.  I'm going to suggest that we remove port
ranges from the proposal too, and just have lists of ports, and start
by having servers only list up to two addresses with one port each,
but have clients able to parse more than that, in case we someday come
up with a better approach.

&gt;&gt; =A0 An authority shouldn't list a node as Running unless every
&gt;&gt; =A0 or-address line it advertises looks like it will work.
&gt;
&gt; This part makes me sad -- I worry that we'll end up with situations
&gt; where most addresses work but we discard the whole relay because of a
&gt; network hiccup somewhere (e.g. between the directory authority and one
&gt; of the relay's addresses). How much more would it complexify things if
&gt; we list the ones we think are up in the consensus, and then the voting
&gt; process decides which ones get advertised?

Well, it would complexify things somewhat, but I'm not so sure it's
avoidable: It seems like it'll be pretty common to autoconfig a
working ipv4 address but not a working ipv6 address, or vice versa.

But on the other hand, self-testing is *supposed* to prevent that.

&gt;&gt; Consensus directories and microdescriptors:
&gt;&gt;
&gt;&gt; =A0 We introduce a new line type for microdescriptors and consensuses,
&gt;&gt; =A0 "a". =A0Each "a" line has the same format as an or-address line.
&gt;&gt; =A0 The "a" lines (if any) appear immediately after the "r" line for a
&gt;&gt; =A0 router in the consensus, and immediately after the "onion-key"
&gt;&gt; =A0 entry in a microdescriptor.
&gt;
&gt; We should clarify which flavors we mean when we say consensuses. That is,
&gt; are we going to add "a" lines to the microdescriptor-flavor consensus
&gt; too, even though clients will soon find the same lines when they fetch
&gt; the microdescriptors? I think yes, on the theory that clients will find
&gt; the addresses useful in fetching microdescriptors. But it feels like a
&gt; shame to include this mostly static info in every consensus when it's
&gt; only really helpful for initial bootstrap for a tiny subset of users.

I think so; without them, ipv6-only clients just can't work.

&gt; I could imagine an ipv6-micro flavored consensus which includes ipv6
&gt; addresses for the clients who need that, and then those clients fetch
&gt; the normal consensus after that. But maybe I'm trying to optimize too
&gt; much for bandwidth.

Adding new flavors can totally happen after the first implementation here.

&gt;&gt; =A0We will have to define a new voting algorithm version; when using
&gt;&gt; =A0this version or later, votes should include a single "a" line for
&gt;&gt; =A0every relay that has an IPv6 address, to include the first IPv6
&gt;&gt; =A0line in its descriptor. =A0(If there are no or-address lines, then
&gt;
&gt; You meant "If there are no IPv6 or-address lines", yes?

yes.

&gt;&gt; =A0 As with other data in the vote derived from the descriptor,
&gt;&gt; =A0 the vote will include whichever set of "a" lines are given by the
&gt;&gt; =A0 most authorities who voted for the descriptor digest that will be
&gt;&gt; =A0 used for the router.
&gt;
&gt; Just to clarify, we treat the whole set of "a" lines for the router as
&gt; an atomic blob, and vote for the blob that is most common? We could also
&gt; do something more fine-grained, but I don't think we want to.

Hmmm.  I actually think being more fine-grained is right if we want to
be able to vote on individual addresses working or not.

[...]
&gt;&gt; Client behavior:
&gt;&gt;
&gt;&gt; =A0 I propose that initially we shouldn't change client behavior too
&gt;&gt; =A0 much here.
&gt;&gt;
&gt;&gt; =A0 (Q: Is there any advantage to having a client choose a random
&gt;&gt; =A0 address? =A0If so we can do it later. =A0If not, why list any more
&gt;&gt; =A0 than one IPv4 and one IPv6 address?)
&gt;&gt;
&gt;&gt; =A0 Tor clients not running with bridges, and running with IPv4
&gt;&gt; =A0 support, should still use the address and ORPort as advertised in
&gt;&gt; =A0 the router or r line of the appropriate directory object.
&gt;&gt;
&gt;&gt; =A0 Tor clients not running with bridges, and running without IPv4
&gt;&gt; =A0 support, should use the first listed IPv6 address for a node,
&gt;&gt; =A0 using the lowest-numbered listed port for that address. =A0They
&gt;&gt; =A0 should only connect to nodes with an IPv6 address.
&gt;
&gt; A) What's the recommended way for the Tor client to discover that it
&gt; doesn't have ipv4 support?

Not having a public unicast IPv4 address; having all attempts to
connect to IPv4 addresses fail pretty early on.

&gt; B) What if the client supports ipv4 and ipv6 yet the public ipv4 relays
&gt; are blocked? We need some way for the user to explicitly ask for ipv6,
&gt; and ideally some way to auto detect that Tor should try the other.

Good idea.

 [...]
&gt;&gt; =A0 We can make this work, though: let's allow nodes to list themselves
&gt;&gt; =A0 with a magic IPv4 address (say, 127.1.1.1) if they have
&gt;&gt; =A0 or-address entries containing only IPv6 address. =A0We could give
&gt;&gt; =A0 these nodes a new flag other than Running to indicate that they're
&gt;&gt; =A0 up, and not give them the Running flag. =A0That way, old clients
&gt;&gt; =A0 would never try to use them, but new clients could know to treat
&gt;&gt; =A0 the new flag as indicating that the node is running, and know not
&gt;&gt; =A0 to connect to a node listed with address 127.1.1.1.
&gt;
&gt; It would be nice to come up with a color for the fence that doesn't
&gt; involve forever maintaining a separate Running6 flag and forever including
&gt; a hack in the consensus. For example, what if we have an "r6" line that
&gt; is like an "r" line except its address is v6? I think we can't do that
&gt; because the "w", "p", etc lines in the r6 stanza would be interpreted by
&gt; old clients as part of the previous router's stanza. Does that realization
&gt; mean we should declare one of the lines in the router stanza "at end,
&gt; exactly once" in the spec, so in the future we can add new types of
&gt; stanzas? Does it mean we can't add a "w" line to the directory footer
&gt; stanza because it would confuse clients who don't know there's a directory
&gt; footer stanza? Whee.

I think that your long series of questions here basically comes out to
"yeah".  Did you have an idea on this point that _would_ work out?  I
guess we could do a new consensus flavor, but minimizing those is
probably smart.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117165530</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-17 16:55:30-0400</timestampReceived><subject>Re: [tor-dev] Proposal 186: Multiple addresses for one OR or bridge</subject><body>

On 1/17/12 5:41 PM, Nick Mathewson wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;      ORPort 1337 no-advertise alladdrs
&gt;&gt;&gt;      ORPort tornode.example.com:443 no-bind alladdrs
&gt;&gt;
&gt;&gt; This drives home the issue with alladdrs: what would we do if that flag
&gt;&gt; isn't listed here?

This feature would allow a single node, for example, to expose to the
internet 10.000 different IP:Port pairs?

For example think about a single node that have 10.000 different small
TCP forwarders around the internet.

Could it possible?

Fabio
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604045154</emailId><senderName>Felix Ker</senderName><senderEmail>felix@ker.sg</senderEmail><timestampReceived>2012-06-04 04:51:54-0400</timestampReceived><subject>[tor-dev] TorStatus</subject><body>

[Attachment #2 (multipart/alternative)]


I'm trying to use TorStatus and it took me almost 2 hours to set everything
up and able to run tns_update.pl smoothly with no error. However, I am
facing a problem that Google cannot help me.

[0] starting...
[0] mirror?
[0] connecting to Tor
[0] authenticating with Tor
[0] starting descriptions
*The TorStatus database was not updated properly.  An error has occured. I
will continue to try to update, however.*

It says an error has occured but I am unable to find any error logs. Anyone?
___

Best Regards,

Felix Ker

Mobile +65-91456635
Email felix@ker.sg

*IMPORTANT* Find out the best ways to get my attention:
http://protocol.by/felixker/

[Attachment #5 (text/html)]

I'm trying to use TorStatus and it took me almost 2 hours to set everything up \
and able to run &lt;a href="http://tns_update.pl"&gt;tns_update.pl&lt;/a&gt; smoothly with no \
error. However, I am facing a problem that Google cannot help me.&lt;div&gt;

&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;[0] starting...&lt;/div&gt;&lt;div&gt;[0] mirror?&lt;/div&gt;&lt;div&gt;[0] connecting to \
Tor&lt;/div&gt;&lt;div&gt;[0] authenticating with Tor&lt;/div&gt;&lt;div&gt;[0] starting \
descriptions&lt;/div&gt;&lt;div&gt;&lt;b&gt;The TorStatus database was not updated properly.   An error \
has occured. I will continue to try to update, however.&lt;/b&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It says an error has occured but I am unable to find any error \
logs. Anyone?&lt;/div&gt;___&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color:rgb(255,255,255)"&gt;&lt;font color="#888888" \
style="font-family:arial,sans-serif;font-size:13px"&gt;Best Regards,&lt;br&gt;

&lt;br&gt;&lt;/font&gt;&lt;font face="Arial, Helvetica, Geneva, Sans-Serif" size="2" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;span \
style="font-weight:bold"&gt;Felix Ker&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;br&gt;&lt;font size="1"&gt;&lt;font \
color="#f26522" face="Arial, Helvetica, Geneva, Sans-Serif" \
style="font-family:arial,sans-serif"&gt;Mobile&lt;/font&gt;&lt;font color="#000000" face="Arial, \
Helvetica, Geneva, Sans-Serif" style="font-family:arial,sans-serif"&gt;  &lt;a \
value="+6591456635" style="color:rgb(0,0,204)"&gt;+65-91456635&lt;/a&gt;&lt;/font&gt;&lt;br&gt;

&lt;font color="#f26522" face="Arial, Helvetica, Geneva, sans-serif"&gt;&lt;/font&gt;&lt;font \
color="#f26522" face="Arial, Helvetica, Geneva, Sans-Serif" \
style="font-family:arial,sans-serif"&gt;Email&lt;/font&gt;&lt;font color="#000000" face="Arial, \
Helvetica, Geneva, Sans-Serif" style="font-family:arial,sans-serif"&gt;  &lt;a \
href="mailto:felix@ker.sg" style="color:rgb(0,0,204)" \
target="_blank"&gt;felix@ker.sg&lt;/a&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style="background-color:rgb(255,255,255)"&gt;&lt;font \
size="1"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font size="1"&gt;&lt;span \
style="background-color:rgb(255,255,255)"&gt;*IMPORTANT* Find out the best ways to get \
my attention:  &lt;/span&gt;&lt;a href="http://protocol.by/felixker/" \
target="_blank"&gt;http://protocol.by/felixker/&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;

&lt;br&gt;
&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120604060448</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-04 06:04:48-0400</timestampReceived><subject>Re: [tor-dev] TorStatus</subject><body>

Hi Felix,

On 6/4/12 6:51 AM, Felix Ker wrote:
&gt; I'm trying to use TorStatus and it took me almost 2 hours to set everything
&gt; up and able to run tns_update.pl smoothly with no error. However, I am
&gt; facing a problem that Google cannot help me.
&gt; 
&gt; [0] starting...
&gt; [0] mirror?
&gt; [0] connecting to Tor
&gt; [0] authenticating with Tor
&gt; [0] starting descriptions
&gt; *The TorStatus database was not updated properly.  An error has occured. I
&gt; will continue to try to update, however.*
&gt; 
&gt; It says an error has occured but I am unable to find any error logs. Anyone?

TorStatus is, AFAIK, not maintained anymore.  But we developed Onionoo
[0] and Atlas [1] as a TorStatus replacement.  Onionoo provides Tor
status information in a JSON format and Atlas presents these data in a
nice human-readable format.  You could set up an Atlas mirror (which
only serves static content, because the heavy lifting is done via
JavaScript on the client) using the current Onionoo host as data source
or you could mirror both Onionoo and Atlas.  Happy to give you advice
how to set up Onionoo.  Bug reports, feature suggestions, and of course
patches would be highly appreciated.

Best,
Karsten


[0] https://www.torproject.org/projects/onionoo.html.en

[1] https://atlas.torproject.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604064045</emailId><senderName>Felix Ker</senderName><senderEmail>felix@ker.sg</senderEmail><timestampReceived>2012-06-04 06:40:45-0400</timestampReceived><subject>Re: [tor-dev] TorStatus</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Karsten

Thank you for sharing! Looks like there's too little information about how
Atlas can be used to list the servers. Would you be able to share any
documentation?

___

Best Regards,

Felix Ker

Mobile +65-91456635
Email felix@ker.sg

*IMPORTANT* Find out the best ways to get my attention:
http://protocol.by/felixker/



On Mon, Jun 4, 2012 at 2:04 PM, Karsten Loesing &lt;karsten@torproject.org&gt;wrote:

&gt; Hi Felix,
&gt;
&gt; On 6/4/12 6:51 AM, Felix Ker wrote:
&gt; &gt; I'm trying to use TorStatus and it took me almost 2 hours to set
&gt; everything
&gt; &gt; up and able to run tns_update.pl smoothly with no error. However, I am
&gt; &gt; facing a problem that Google cannot help me.
&gt; &gt;
&gt; &gt; [0] starting...
&gt; &gt; [0] mirror?
&gt; &gt; [0] connecting to Tor
&gt; &gt; [0] authenticating with Tor
&gt; &gt; [0] starting descriptions
&gt; &gt; *The TorStatus database was not updated properly.  An error has occured.
&gt; I
&gt; &gt; will continue to try to update, however.*
&gt; &gt;
&gt; &gt; It says an error has occured but I am unable to find any error logs.
&gt; Anyone?
&gt;
&gt; TorStatus is, AFAIK, not maintained anymore.  But we developed Onionoo
&gt; [0] and Atlas [1] as a TorStatus replacement.  Onionoo provides Tor
&gt; status information in a JSON format and Atlas presents these data in a
&gt; nice human-readable format.  You could set up an Atlas mirror (which
&gt; only serves static content, because the heavy lifting is done via
&gt; JavaScript on the client) using the current Onionoo host as data source
&gt; or you could mirror both Onionoo and Atlas.  Happy to give you advice
&gt; how to set up Onionoo.  Bug reports, feature suggestions, and of course
&gt; patches would be highly appreciated.
&gt;
&gt; Best,
&gt; Karsten
&gt;
&gt;
&gt; [0] https://www.torproject.org/projects/onionoo.html.en
&gt;
&gt; [1] https://atlas.torproject.org/
&gt;

[Attachment #5 (text/html)]

Hello Karsten&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you for sharing! Looks like there's too \
little information about how Atlas can be used to list the servers. Would you be able \
to share any documentation?&lt;/div&gt;&lt;div&gt;&lt;br clear="all"&gt;

___&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color:rgb(255,255,255)"&gt;&lt;font \
color="#888888" style="font-family:arial,sans-serif;font-size:13px"&gt;Best \
Regards,&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;font face="Arial, Helvetica, Geneva, Sans-Serif" size="2" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;span \
style="font-weight:bold"&gt;Felix Ker&lt;br&gt;

&lt;/span&gt;&lt;/font&gt;&lt;br&gt;&lt;font size="1"&gt;&lt;font color="#f26522" face="Arial, Helvetica, \
Geneva, Sans-Serif" style="font-family:arial,sans-serif"&gt;Mobile&lt;/font&gt;&lt;font \
color="#000000" face="Arial, Helvetica, Geneva, Sans-Serif" \
style="font-family:arial,sans-serif"&gt;  &lt;a value="+6591456635" \
style="color:rgb(0,0,204)"&gt;+65-91456635&lt;/a&gt;&lt;/font&gt;&lt;br&gt;

&lt;font color="#f26522" face="Arial, Helvetica, Geneva, sans-serif"&gt;&lt;/font&gt;&lt;font \
color="#f26522" face="Arial, Helvetica, Geneva, Sans-Serif" \
style="font-family:arial,sans-serif"&gt;Email&lt;/font&gt;&lt;font color="#000000" face="Arial, \
Helvetica, Geneva, Sans-Serif" style="font-family:arial,sans-serif"&gt;  &lt;a \
href="mailto:felix@ker.sg" style="color:rgb(0,0,204)" \
target="_blank"&gt;felix@ker.sg&lt;/a&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style="background-color:rgb(255,255,255)"&gt;&lt;font \
size="1"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font size="1"&gt;&lt;span \
style="background-color:rgb(255,255,255)"&gt;*IMPORTANT* Find out the best ways to get \
my attention:  &lt;/span&gt;&lt;a href="http://protocol.by/felixker/" \
target="_blank"&gt;http://protocol.by/felixker/&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;

&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Jun 4, 2012 at 2:04 PM, Karsten Loesing \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:karsten@torproject.org" \
target="_blank"&gt;karsten@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

Hi Felix,&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
On 6/4/12 6:51 AM, Felix Ker wrote:&lt;br&gt;
&gt; I'm trying to use TorStatus and it took me almost 2 hours to set \
everything&lt;br&gt; &gt; up and able to run &lt;a href="http://tns_update.pl" \
target="_blank"&gt;tns_update.pl&lt;/a&gt; smoothly with no error. However, I am&lt;br&gt; &gt; \
facing a problem that Google cannot help me.&lt;br&gt; &gt;&lt;br&gt;
&gt; [0] starting...&lt;br&gt;
&gt; [0] mirror?&lt;br&gt;
&gt; [0] connecting to Tor&lt;br&gt;
&gt; [0] authenticating with Tor&lt;br&gt;
&gt; [0] starting descriptions&lt;br&gt;
&lt;/div&gt;&gt; *The TorStatus database was not updated properly.   An error has occured. \
I&lt;br&gt; &gt; will continue to try to update, however.*&lt;br&gt;
&lt;div class="im"&gt;&gt;&lt;br&gt;
&gt; It says an error has occured but I am unable to find any error logs. Anyone?&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;TorStatus is, AFAIK, not maintained anymore.   But we developed Onionoo&lt;br&gt;
[0] and Atlas [1] as a TorStatus replacement.   Onionoo provides Tor&lt;br&gt;
status information in a JSON format and Atlas presents these data in a&lt;br&gt;
nice human-readable format.   You could set up an Atlas mirror (which&lt;br&gt;
only serves static content, because the heavy lifting is done via&lt;br&gt;
JavaScript on the client) using the current Onionoo host as data source&lt;br&gt;
or you could mirror both Onionoo and Atlas.   Happy to give you advice&lt;br&gt;
how to set up Onionoo.   Bug reports, feature suggestions, and of course&lt;br&gt;
patches would be highly appreciated.&lt;br&gt;
&lt;br&gt;
Best,&lt;br&gt;
Karsten&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
[0] &lt;a href="https://www.torproject.org/projects/onionoo.html.en" \
target="_blank"&gt;https://www.torproject.org/projects/onionoo.html.en&lt;/a&gt;&lt;br&gt; &lt;br&gt;
[1] &lt;a href="https://atlas.torproject.org/" \
target="_blank"&gt;https://atlas.torproject.org/&lt;/a&gt;&lt;br&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120604064740</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-04 06:47:40-0400</timestampReceived><subject>Re: [tor-dev] TorStatus</subject><body>

On 6/4/12 8:04 AM, Karsten Loesing wrote:
&gt; TorStatus is, AFAIK, not maintained anymore.  But we developed Onionoo
&gt; [0] and Atlas [1] as a TorStatus replacement.  Onionoo provides Tor
&gt; status information in a JSON format and Atlas presents these data in a
&gt; nice human-readable format.  You could set up an Atlas mirror (which
&gt; only serves static content, because the heavy lifting is done via
&gt; JavaScript on the client) using the current Onionoo host as data source
&gt; or you could mirror both Onionoo and Atlas.  Happy to give you advice
&gt; how to set up Onionoo.  Bug reports, feature suggestions, and of course
&gt; patches would be highly appreciated.
&gt; 
&gt; Best,
&gt; Karsten
&gt; 
&gt; 
&gt; [0] https://www.torproject.org/projects/onionoo.html.en
&gt;
&gt; [1] https://atlas.torproject.org/

I would suggest to rewrite onionoo in Python on the basis of STEM (or
extension of txtorcon):

https://gitweb.torproject.org/stem.git by atagar

It now have extensive parsers for Tor's cached-consensus i think it may
quickly provide the REST interface that Atlas need:
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py

That way you can have a "single package" with Python App + Atlas,
without the overhead of Java given by onionoo.


Felix, consider also if you have time and it match your goals, to try to
write a self-contained windows/osx application using APAF (Anonymous
Python Application Framework http://github.com/mmaker/APAF ) merging
Atlas+Server-Python-Code for a Desktop application bundling Tor .

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604071215</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-04 07:12:15-0400</timestampReceived><subject>Re: [tor-dev] TorStatus</subject><body>

On 6/4/12 8:40 AM, Felix Ker wrote:
&gt; Thank you for sharing! Looks like there's too little information about how
&gt; Atlas can be used to list the servers. Would you be able to share any
&gt; documentation?

Do you mean how Atlas can be used to display a list of the current
relays and/or bridges rather than providing a search function?

A full list of relays was practical when there were 300 relays in the
Tor network.  It isn't practical with the current 3000 relays and 1000
bridges, nor will it become any more practical when the Tor network
grows to 30000 relays and 10000 bridges.  The main reason why having a
full list is useful is that browsers has better search functionality
than the website.  We should rather go fix that and have the website
provide good search and sorting functions.

There's a new function in Onionoo that allows clients to use "order,"
"offset," and "limit" parameters [0] that can be used to display
ordered, paged results.  Atlas doesn't use these parameters yet, but it
could do so in the future.  If someone wants to add that feature, be
sure to talk to Arturo about the design; he may already have ideas for
supporting paged results.

Or did you mean something else?

Best,
Karsten

[0] https://onionoo.torproject.org/, scroll down to "Methods" section
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604073156</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-04 07:31:56-0400</timestampReceived><subject>Re: [tor-dev] TorStatus</subject><body>

On 6/4/12 8:47 AM, Fabio Pietrosanti (naif) wrote:
&gt; I would suggest to rewrite onionoo in Python on the basis of STEM (or
&gt; extension of txtorcon):
&gt; 
&gt; https://gitweb.torproject.org/stem.git by atagar
&gt; 
&gt; It now have extensive parsers for Tor's cached-consensus i think it may
&gt; quickly provide the REST interface that Atlas need:
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py

I agree that somebody should rewrite Onionoo in Python.  I expect that
to take a few months though.  I'm going to keep maintaining the Java
Onionoo until we have a stable and maintained Python replacement.  I'm
happy to guide people through the tricky parts of writing an Onionoo
kind of thing.

For example, being able to parse Tor descriptors is a great start for
writing a Python Onionoo.  But you'll also have to aggregate bandwidth
data in an efficient way.  The Java Onionoo uses flat files to store
bandwidth data and aggregate them more the higher they lie in the past.
 That code [0] wasn't exactly trivial to write, and it's also not the
most beautiful piece of code I ever wrote.  But it's efficient, which is
key.  Of course, you could start by porting the Java code 1:1 to Python
and think about optimizations later.

&gt; That way you can have a "single package" with Python App + Atlas,
&gt; without the overhead of Java given by onionoo.

I'd prefer keeping the (Python) Onionoo and Atlas in two distinct
packages.  Or rather, the REST interface should stay as open and
independent from Atlas as it is now.  The Atlas website isn't the only
client that could use Onionoo's data.  Think of non-JavaScript-based
websites that cache Onionoo data rather than letting the client do all
the work, mobile clients, Vidalia/arm extensions, tray icons, social
network site plugins, command-line tools, etc.

Best,
Karsten

[0]
https://gitweb.torproject.org/onionoo.git/blob/HEAD:/src/org/torproject/onionoo/BandwidthDataWriter.java
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120102193951</emailId><senderName>caine tighe</senderName><senderEmail>nil@opensesame.st</senderEmail><timestampReceived>2012-01-02 19:39:51-0400</timestampReceived><subject>[tor-dev] DuckDuckGo, iOS and other stuff.</subject><body>

tor-devers,

  So we are currently developing v2 of DDG applications and I'm
personally interested in getting you guys involved.  I think that
there is serious value in ensuring Tor is an option for both Android
and iOS.  Currently we support Tor via Orbot on Android via the HTTP/S
proxy method since the SOCKS method is known to have DNS leaks.

  Since the applications will be distributed via the respective
stores, and specifically in the case of iOS, we cannot rely on the
whole rooted / jailbroken methods.  I understand that there is an
application Covert Browser that claims to properly leverage Tor;
however, since the source is closed, I remain unconvinced.  This
application stands to be both an interface to DuckDuckGo for quick and
secure searching as well as a Tor enabled browser.

  We are always looking for other ways we can help, so let us know.
I'd also like to discuss donation and a few other administration
things off-list.

respectfully,

caine
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120126214253</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-26 21:42:53-0400</timestampReceived><subject>[tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

Hi,

I decided to give it a shot in implementing full DNS/DNSSEC resolution support
for Tor, here's the branch:

https://github.com/hiviah/tor

ATM the biggest limitation is that reply DNS packet must fit in a single cell
(i.e. max size is RELAY_PAYLOAD_SIZE).

How it's implemented:

There's new command SOCKS_COMMAND_RESOLVE_FULL for SOCKS interface and new cells
RELAY_COMMAND_RESOLVE(D)_FULL. The RESOLVE_FULL cell contains query string and
RR-type, RESOLVED_FULL just the DNS packet in wire format.

Resolving is implemented via libunbound on the relay's side, ldns parses packet
on client's side.

The tor-resolve now uses the new SOCKS command and accepts -t parameter with
RR-type (numeric, default 1 - RR-type 'A'), e.g.:

./src/tools/tor-resolve -t 28 lupa.cz localhost:10050

Packet size: 319
Flags: qr: 1, aa: 0, tc: 0, rd: 1, cd: 0, ra: 1, ad: 1
-- Rcode: NOERROR
-- Opcode: QUERY
-- Question section
lupa.cz.	IN	AAAA
-- Answer section
lupa.cz.	600	IN	AAAA	2001:67c:68::7b
lupa.cz.	600	IN	RRSIG	AAAA 5 2 600 20121022235305 20111023235305 8130 lupa.cz.
wFdVqKCEh4Nmac3v5K9y6HT+aIBAtF4Q9QIqHjlAl/ljp4m5TKkgKCF083zFTMh0LqfwdODfQdSNTKAwO55hyw==
-- Authority section
lupa.cz.	600	IN	NS	ns.iinfo.cz.
lupa.cz.	600	IN	NS	ns6.adminit.cz.
lupa.cz.	600	IN	RRSIG	NS 5 2 600 20121022235305 20111023235305 8130 lupa.cz.
SpqkpBlK1dzrfACHh3yfUp01Vr/w9qzVYQms4RDXNQZW1Hwr5WYMHIuGrFEgOOrjyg1vB01HENXJf4i2ISx51g==
-- Additional section


Other implementation notes:
- some checks like whether private address is resolved are missing (also a
whitelist of allowed RR-types might be implemented)
- in the SOCKS5 request, RR-type is hacked onto port number
- in SOCKS5 reply, high byte of length is hacked onto SOCKS5 reserved byte
- libunbound supports async resolving, for now synchronous is used
- there are more details, grep FIXDNS in code
- Makefile.am's have -lldns and -lunbound hardwired
- new code may not be pretty at some places (getting to know Tor code)


Also, this seems to be a bug in
relay.c:connection_edge_process_relay_cell_not_open(), the
RELAY_COMMAND_RESOLVED case:

    answer_len = cell-&gt;payload[RELAY_HEADER_SIZE+1];
    if (rh-&gt;length &lt; 2 || answer_len+2&gt;rh-&gt;length) {...}

Payload is accessed before checking bounds.


Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120302215804</emailId><senderName>Arturo_Filastò</senderName><senderEmail>hellais@torproject.org</senderEmail><timestampReceived>2012-03-02 21:58:04-0400</timestampReceived><subject>[tor-dev] Deployability of Python software.</subject><body>

We were discussing last night with George about deployability of python
application on multiple platforms. 

In particular how it would work out if there were to be a python port of obfsproxy
and we wanted to have it deployed inside of the Tor Browser bundle.

The issues that he said were raised in other discussions with Nick and Roger
are mainly the following:

- How do we get a good Windows binary of the Software?
- How do we keep the size down to an acceptable level?
- What kind of performance drawbacks would we be experiencing?
- Is it even secure to do crypto in python?

I will try and address these issues as they are something that I ran into
also while designing AWAF (Anonymous Web Application Framework):
http://wiki.globaleaks.org/index.php/Awaf and 
https://piratenpad.de/p/AnonymousWebApplicationFramework

For packaging python software on Windows and OSX, what is generally done is
shipped a precompiled python interpreter and bundle everything up with a nice bow.

This technique is already quite tested in real world applications: an example that I
particularly like is Tucan Manager (http://www.tucaneando.com/development.html).

This application is basically a download manager written in python and gtk. 
The final size of the packaged software is 20MB. If you remove gtk this size goes down
to around 10MB.

What they are using to bundle up the application for Windows is py2exe and py2app for
OSX.

Another very widely used solution for packaging python applications in PyInstaller and
that is probably the solution I would recommend. Quite a few open source software
uses it already:
http://www.pyinstaller.org/wiki/ProjectsUsingPyInstaller

George also mentioned to me pypy, though I don't think pypy is ready for building shippable
application just yet.

The issue of size is something that we should come to an agreement on what is acceptable.
What is the maximum size that we are comfortable with shipping? We are already shipping
a TBB that has 25 MB of QT libraries in it, I don't think a 13 MB Python interpreter is going to
be killer.

With respect to performance I don't think it is particularly an issue. Python is pretty fast and if
it is not fast enough for what needs to be done you can always rewrite the code in C and
integrate that piece of application logic as a python binding.

By talking to some of the core python developers my understanding is that there is a way of 
securely storing keys in memory and wiping that memory region in python. It involves using
bytearray. We you override a cell in a byte array you are not simply dereferencing the pointer
to the python struct, you are actually overwriting that portion of memory.
I think I might write a blog post about this and illustrate what other python crypto software is
using to solve this problem (PyCrypto etc.).

In conclusion having a python interpreter shipped as part of Tor would allow developers of
anonymity related software to integrate their "Tor add-ons" into a Tor bundle easily. I am thinking
of for example making a Tor IRCD bundle, a Tor HTTPD bundle, etc.

What do you think?

- Art.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120401224435</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-04-01 22:44:35-0400</timestampReceived><subject>[tor-dev] Google Summer of Code Proposal - PathSupport counterpart for Stem</subject><body>

Hello

I'm Ravi Chandra Padmala, a 20 year old computer programmer from India.

I want to apply to the Tor Project/EFF for Google's Summer of Code
program this summer. I would like to spend the summer building the
PathSupport counter part for Stem. I have submitted a work in progress
proposal at http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/neena/1

I've submitted a WIP proposal primarily because I need feedback on the
direction my API design is taking. I have only answered question (a)
from https://www.torproject.org/about/gsoc.html.en#Template . I will
be updating the proposal with the rest soon.

Any feedback will be greatly appreciated.

--
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120505133001</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-05-05 13:30:01-0400</timestampReceived><subject>[tor-dev] Win32/MSVC: tinytest.c problems</subject><body>

There are 2 problems with the use of 'stricmp()' (line 295) in tinytest.c.

1. As it is now, I'm getting an undefined reference to 'stricmp' when 
  linking tinytest.exe and using '-nodefault:oldnames' in the link-flags. 
  Can we please remove this lib from the requirements?

2. 'stricmp()' is used nowhere else in Tor. But rather 'strcasecmp()'.
  Can we use that for consistency instead? Need to include "or.h"
  to include src/compat.h.

Like the lines from src/compat.h says:
  /* Windows names string functions differently from most other platforms. */
  #define strncasecmp _strnicmp
  #define strcasecmp _stricmp

How about this little patch:

--- ..\..\Git-latest\src\test\tinytest.c        Wed Mar 21 10:16:58 2012
+++ tinytest.c  Fri May 04 14:07:55 2012
@@ -22,6 +22,9 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
+
+#include "or.h"
+
 #ifdef TINYTEST_LOCAL
 #include "tinytest_local.h"
 #endif
@@ -292,7 +295,7 @@
 #ifdef _WIN32
        const char *sp = strrchr(v[0], '.');
        const char *extension = "";
-       if (!sp || stricmp(sp, ".exe"))
+       if (!sp || strcasecmp(sp, ".exe"))
                extension = ".exe"; /* Add an exe so CreateProcess will work */
        snprintf(commandname, sizeof(commandname), "%s%s", v[0], extension);
        commandname[MAX_PATH]='\0';

-----------------

There are more MSVC-issues in other test/*.c files. I can get back to that.

--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120905185209</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-09-05 18:52:09-0400</timestampReceived><subject>[tor-dev] Tor bufferbloat</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi everyone,

I discovered, during a presentation at this year LinuxCon in San
Diego, the problem of "bufferbloat" which is encountered in network
bottlenecks.

https://en.wikipedia.org/wiki/Bufferbloat
http://www.bufferbloat.net/

There is been a good amount of work done so far to fix this problem
ending up with the CoDel algorithm
(http://queue.acm.org/detail.cfm?id=2209336). The Linux kernel is
about to accept this policy as default.

Anyhow, I looked around for some recent studies on the Tor network
about such congestion issues but I can't find any information on if
this phenomenon is observed on the Tor network.

Someone knows about that?

Thanks a lot!
David
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJQR59ZAAoJEELoaioR9I02nkkH/0NYYnaca6N5pbDDbu96klff
BGVmxcO8TEbbdI41HBWaJJHyUSi1CDbfZXcK6eaqRgDhj/yGcTN4YKgU/fP7LQFw
/rp+MnWxPt7uqfrso+jSgvpDX6FS8r9cXwG6aMd9V39CuLRoVHYnNAMQrwHMyXud
bMk0cHe71FGcyW+BGxZwrbjtvP3gcIZH9r/LNGaJepRzn+vB0NcwVpUG08D50Nxe
M/3Lhokrc/IqaFi0+FX5fUoc8TALsjgjPZ672DdsY1CMwxbPMxpBKadJ9TWA906U
QNxZb/lOa/fSWrnjY3nDaFJNppmyqYgoC1iJNJiCiJC8Jbxgj0/gyQjhY1d11Qc=
=yFyg
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120831155704</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-08-31 15:57:04-0400</timestampReceived><subject>[tor-dev] Parallel release series for directory authorities?</subject><body>

Hi, all!

Here's an idea I had for directory authorities and the 0.2.3 release series.

"As you know Bob," Tor 0.2.3 will be stable very soon, and I'm hoping
not to take any more patches for it except for important security
issues.  I want 0.2.4 to come out very early next year.  But in the
meantime, to support 0.2.4, and to deploy security/reliability
features to the network early, there are some directory consensus
features that we'd want to deploy before the rest of 0.2.4 is done and
stable.

In particular, I'd like directories to be able to reach consensus on
IPv6 addresses (6363), and I'd like to try out the code that Mike
wrote to make the bandwidth voting system more robust against
dishonest during its startup phase (2286).

So here's my plan: Make a "maint-0.2.3-da" branch based on 0.2.3, plus
feature patches for directory authorities.  It gets patches from the
stable series (0.2.3), plus directory-authority features under
development.  It would get merged-forward into 0.2.4, to make sure
that 0.2.3-da and 0.2.4 behavior stay in sync.

This way we can get new authority features working in time to support
0.2.4 clients, but without forcing too many authorities to run 0.2.4
before it's ready, and without forcing us to make feature changes in
0.2.3 proper.

Thoughts?

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120907160930</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-09-07 16:09:30-0400</timestampReceived><subject>[tor-dev] Tenative schedule for Tor 0.2.4 [Or, why I might reject your patches in November-&gt;March]</subject><body>

Hi, all!

Last year, I announced a tenative schedule for 0.2.3.x.  We didn't
stick to it, and things have gone a little pear-shaped with getting
0.2.3.x stabilized, but I think with a few tweaks we can use something
similar to get a good schedule out for 0.2.4.x.

My goals remain about what they were before: get release out faster by
getting better at saying "no" to features after a release window.  My
target is March or April 2013.

To that end:

October 10, 2012: Big feature proposal checkpoint.  Any large
complicated feature which requires a design proposal must have its
first design proposal draft by this date.

November 10, 2012: Big feature checkpoint.  If I don't know about a
large feature by this date, it might have to wait.
November 10, 2012: Big feature proposal freeze. Any small feature
which requires a design proposal must have its design proposal
finished by this date.

December 10, 2012: Big feature merge freeze. No big features will be
merged after this date.
December 10, 2012: Small feature proposal freeze. Any small feature
which requires a design proposal must have its design proposal
finished by this date.

January 10, 2013: Feature merge freeze. No features after this date. I mean it.

Feb 20, 2013: Buggy feature backout date. Any feature which seems
intractably buggy by this date may be disabled, deprecated, or removed
until the next release.

On the meaning of "feature": I'm probably going to argue that some
things that you think are bugfixes are features.  I'm probably going
to argue that your security bugfix is actually a security feature.
I'm probably even going to argue that most non-regression bugfixes are
features.  Let's try to get a release out *early* in 2013 this time,
come heck or high water.

(This is all subject to change, but let's not push it.)

[0] https://lists.torproject.org/pipermail/tor-dev/2011-July/002851.html

happy hacking,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910083330</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-09-10 08:33:30-0400</timestampReceived><subject>[tor-dev] [GSoC] [Stegotorus] Code submission and more curl</subject><body>

Hello Zack,

1) I would like to ask your permission to submit the whole code for
code submission. First because my task in the summer wasn't only to
write the parts that I wrote but also to read the code and debug it as
well. Secondly because the git log shows who wrote what. Thirdly, It's
easier.

2) I had more discussion on libcurl-dev with the libcurl main developer. He
thinks despite the fact my approach is working right now, it isn't
stable and can break down in a different environment. To solve this, I'm going
to let curl also read from the socket instead of libevent, this isn't
very hard (I'll disable both EV_READ and EV_WRITE as soon as I'm handing
the socket to curl). I confirmed with Nick that (unlike libcurl)
libevent support this.

3) Thank you for telling me about fts. I'm going to replace boost code with fts soon.

4)
&gt;I still don't see the problem.  If you do exactly that, and don't use
&gt;he DECLARE macros for http_apache_steg, what breaks?

If I don't use the DECLARE then I can't specify http_apache as the steg
protocol in the command line .

Best,
vmon

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910131034</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-09-10 13:10:34-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Code submission and more curl</subject><body>

On Mon, Sep 10, 2012 at 02:33:30AM -0600, vmon wrote:
&gt; 3) Thank you for telling me about fts. I'm going to replace boost code with fts soon.

What is fts?  This sounds potentially useful.

Thanks,

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910145303</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-09-10 14:53:03-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Code submission and more curl</subject><body>

On Mon, Sep 10, 2012 at 4:33 AM, vmon &lt;vmonmoonshine@gmail.com&gt; wrote:
&gt; Hello Zack,
&gt;
&gt; 1) I would like to ask your permission to submit the whole code for
&gt; code submission. First because my task in the summer wasn't only to
&gt; write the parts that I wrote but also to read the code and debug it as
&gt; well. Secondly because the git log shows who wrote what. Thirdly, It's
&gt; easier.

Yes, that seems reasonable.  In case Google decides they don't like
that, you could also send them the diff between master and your
branch.

&gt; 2) I had more discussion on libcurl-dev with the libcurl main developer. He
&gt; thinks despite the fact my approach is working right now, it isn't
&gt; stable and can break down in a different environment. To solve this, I'm going
&gt; to let curl also read from the socket instead of libevent, this isn't
&gt; very hard (I'll disable both EV_READ and EV_WRITE as soon as I'm handing
&gt; the socket to curl). I confirmed with Nick that (unlike libcurl)
&gt; libevent support this.

I don't know enough about libcurl to really grok the situation here,
but what you're doing sounds plausible.

&gt; 4)
&gt;&gt;I still don't see the problem.  If you do exactly that, and don't use
&gt;&gt;he DECLARE macros for http_apache_steg, what breaks?
&gt;
&gt; If I don't use the DECLARE then I can't specify http_apache as the steg
&gt; protocol in the command line .

Ah, so what you need to do is define a *new* DECLARE macro that
doesn't define all the boilerplate you don't want - let's call it
STEG_DECLARE_SUBMODULE - and modify genmodtable.sh to pick it up.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120907121702</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-07 12:17:02-0400</timestampReceived><subject>[tor-dev] Integration of Tor, Tor Browser, Tor IM, Tor Birdy, Vidalia, Tor Router, Tails, etc.</subject><body>

Hello,

the current integration has a lot open issues and feature requests. [2]

Because there might come a proposal [1] to solve this cleanly, I created
an overview of all related open issues. [2] There are just so many
issues I though it makes sense to create an overview so nothing gets
forgotten. Feel free to edit/correct/expand the wiki site. Add your wishes.

I cc'ed all effected people, if someone has been forgotten, feel free to
forward this mail.

Can we have this discussion on tor-dev?

Cheers,
adrelanos

[1] https://trac.torproject.org/projects/tor/ticket/5611#comment:43
[2] https://trac.torproject.org/projects/tor/wiki/doc/TB
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120701095821</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-01 09:58:21-0400</timestampReceived><subject>Re: [tor-dev] Open Proposals as of June 2012</subject><body>

On 6/19/12 2:30 AM, Jacob Appelbaum wrote:
&gt;&gt;    146  Add new flag to reflect long-term stability
&gt;&gt;
&gt;&gt;      From time to time we get the idea of having clients ship with a
&gt;&gt;      reasonably recent consensus (or a list of directory mirrors),
&gt;&gt;      so instead of bootstrapping from one of the authorities, they
&gt;&gt;      can bootstrap from a regular directory cache.  The problem here
&gt;&gt;      is that by the time the client is run, most of the directory
&gt;&gt;      mirrors will be down or will have changed their IP.  This
&gt;&gt;      proposal tries to address that.
&gt;&gt;
&gt;&gt;      It needs analysis based on behavior of actual routers on the
&gt;&gt;      network to see whether it could work, and what parameters might
&gt;&gt;      work.
&gt;&gt;
&gt;&gt;      Nevertheless, we should really do something like this, so that
&gt;&gt;      we can ship a list of initial directory mirrors with Tor
&gt;&gt;      (possibly via the "fallback consensus" deisgn), so that new
&gt;&gt;      bootstrapping Tor clients don't all hammer the directory
&gt;&gt;      authorities. (6/2012)
&gt; 
&gt; I almost wonder if the guard flag is essentially the same set of
&gt; constraints? I think we should discuss this at the TorDev in Italy if
&gt; possible...

A part from the performance reason that's also a censorship-bypass reason.

For example currently in China all the TorDA are fully "IP Filtered" (
not even ping are allowed to those IP addresses).

That means that even if we found a way to fuck the GFW
active-probe-filter for a while, the Tor clients already existing and
residing in china would not be able to connect because they cannot reach
the "software-hard-coded" tor directory authority.

Imho it would be also required to consider, within that proposal, a way
to "dynamically" append the latests network-map available when a user is
going to download Tor.

That way when a release X is done, it automatically get the map of the
build-time.

But if everytime a user download the software, the latests network map
is populated, it would increase the chance to bypass static ip filters.


-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120906162558</emailId><senderName>Kevin P Dyer</senderName><senderEmail>kpdyer@gmail.com</senderEmail><timestampReceived>2012-09-06 16:25:58-0400</timestampReceived><subject>[tor-dev] Format-Transforming Encryption for Censorship Circumvention</subject><body>

Following my email to this list, dated 29/07/2012, I direct your
attention to the IACR eprint document http://eprint.iacr.org/2012/494,
"Format-Transforming Encryption: More than Meets the DPI". In it, we
present our framework for steganographic encoding of messages using
regular languages, along with initial findings for a Python/C++ based
implementation.

To briefly highlight some of the main things we deliver:

* A record-layer, powered by format-transforming encryption, that can
tunnel arbitrary SOCKS streams.

* Algorithms that allow efficient and invertible mapping between bit
strings and elements of a regular language L. These allow us to encode
traditional encryptions of plaintexts into strings from L in a way
that maximizes the number of bits that are encoded.

* A framework for the creation of good regular languages, "good" with
respect to performance and security. In particular, our
language-learning framework produces sets of regular expressions
(compact representations of the languages) that are learned from real
traffic.  Our system also allows you to use off-the-shelf regular
expressions, like those from appid [1] and l7-filter [2] that are
designed to detect HTTP traffic.

We consider this preliminary technical report on a work-in-progress.
In fact, we can already do more than what is reported (e.g. greater
variety of languages, better system performance), but we will save
these advances for a future release.

Cheers,
Kevin P Dyer (and his co-authors)

[1] http://code.google.com/p/appid/
[2] http://l7-filter.sourceforge.net/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120906223054</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-09-06 22:30:54-0400</timestampReceived><subject>Re: [tor-dev] Format-Transforming Encryption for Censorship Circumvention</subject><body>

On Thu, Sep 06, 2012 at 09:25:58AM -0700, Kevin P Dyer wrote:
&gt; Following my email to this list, dated 29/07/2012, I direct your
&gt; attention to the IACR eprint document http://eprint.iacr.org/2012/494,
&gt; "Format-Transforming Encryption: More than Meets the DPI". In it, we
&gt; present our framework for steganographic encoding of messages using
&gt; regular languages, along with initial findings for a Python/C++ based
&gt; implementation.

Is there published source code for the implementation?

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120911163945</emailId><senderName>Kevin P Dyer</senderName><senderEmail>kpdyer@gmail.com</senderEmail><timestampReceived>2012-09-11 16:39:45-0400</timestampReceived><subject>Re: [tor-dev] Format-Transforming Encryption for Censorship Circumvention</subject><body>

On Thu, Sep 6, 2012 at 3:30 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; On Thu, Sep 06, 2012 at 09:25:58AM -0700, Kevin P Dyer wrote:
&gt;&gt; Following my email to this list, dated 29/07/2012, I direct your
&gt;&gt; attention to the IACR eprint document http://eprint.iacr.org/2012/494,
&gt;&gt; "Format-Transforming Encryption: More than Meets the DPI". In it, we
&gt;&gt; present our framework for steganographic encoding of messages using
&gt;&gt; regular languages, along with initial findings for a Python/C++ based
&gt;&gt; implementation.
&gt;
&gt; Is there published source code for the implementation?

The source is not publicly available, yet. Some of the main system
components are still being reworked to support more capabilities and
better overall performance.  We do, however, plan to make the source
available in the medium-term.

At this point, we would love feedback from the Tor development
community on our approach and techniques. While Tor is not the only
application for FTE, we certainly consider it a key one. We'll happily
consider your feedback as we move forward.

-Kevin P Dyer
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910145814</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-09-10 14:58:14-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Code submission and more curl</subject><body>

On Mon, Sep 10, 2012 at 9:10 AM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; On Mon, Sep 10, 2012 at 02:33:30AM -0600, vmon wrote:
&gt;&gt; 3) Thank you for telling me about fts. I'm going to replace boost code with fts soon.
&gt;
&gt; What is fts?  This sounds potentially useful.

It's a C API for directory tree walking.  Similar to the older ftw()
but iterator-style and more robust.  Unfortunately doesn't seem to
have made it into POSIX yet but is available on both Linux and OSX.

http://www.kernel.org/doc/man-pages/online/pages/man3/fts.3.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120907173554</emailId><senderName>Paul Syverson</senderName><senderEmail>syverson@itd.nrl.navy.mil</senderEmail><timestampReceived>2012-09-07 17:35:54-0400</timestampReceived><subject>Re: [tor-dev] Tenative schedule for Tor 0.2.4 [Or, why I might	reject your patches in November-&gt;Marc</subject><body>

Minor typo noted.
-Paul

On Fri, Sep 07, 2012 at 12:09:30PM -0400, Nick Mathewson wrote:
&gt; Hi, all!
&gt; 
&gt; Last year, I announced a tenative schedule for 0.2.3.x.  We didn't
&gt; stick to it, and things have gone a little pear-shaped with getting
&gt; 0.2.3.x stabilized, but I think with a few tweaks we can use something
&gt; similar to get a good schedule out for 0.2.4.x.
&gt; 
&gt; My goals remain about what they were before: get release out faster by
&gt; getting better at saying "no" to features after a release window.  My
&gt; target is March or April 2013.
&gt; 
&gt; To that end:
&gt; 
&gt; October 10, 2012: Big feature proposal checkpoint.  Any large
&gt; complicated feature which requires a design proposal must have its
&gt; first design proposal draft by this date.
&gt; 
&gt; November 10, 2012: Big feature checkpoint.  If I don't know about a
&gt; large feature by this date, it might have to wait.
&gt; November 10, 2012: Big feature proposal freeze. Any small feature

s/small/big/

&gt; which requires a design proposal must have its design proposal
&gt; finished by this date.
&gt; 
&gt; December 10, 2012: Big feature merge freeze. No big features will be
&gt; merged after this date.
&gt; December 10, 2012: Small feature proposal freeze. Any small feature
&gt; which requires a design proposal must have its design proposal
&gt; finished by this date.
&gt; 
&gt; January 10, 2013: Feature merge freeze. No features after this date. I mean it.
&gt; 
&gt; Feb 20, 2013: Buggy feature backout date. Any feature which seems
&gt; intractably buggy by this date may be disabled, deprecated, or removed
&gt; until the next release.
&gt; 
&gt; On the meaning of "feature": I'm probably going to argue that some
&gt; things that you think are bugfixes are features.  I'm probably going
&gt; to argue that your security bugfix is actually a security feature.
&gt; I'm probably even going to argue that most non-regression bugfixes are
&gt; features.  Let's try to get a release out *early* in 2013 this time,
&gt; come heck or high water.
&gt; 
&gt; (This is all subject to change, but let's not push it.)
&gt; 
&gt; [0] https://lists.torproject.org/pipermail/tor-dev/2011-July/002851.html
&gt; 
&gt; happy hacking,
&gt; -- 
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120601173118</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-06-01 17:31:18-0400</timestampReceived><subject>[tor-dev] [GSoC] Vidalia - Status Report</subject><body>

[Attachment #2 (multipart/alternative)]


I have completed the prototype for Torrc and I've tested it writing a
plugin. So far value(), setValue(), TorrcPath() functions are confirmed
working. I've still not been able to get clear() working and the execution
simple stops. I'm not sure if there is an error in the plugin or the
prototype without the debugger. I'm planning on integrating
QScriptEngineDebugger to help writing and testing plugins.

I didn't work in the first week during exams.

My commits - https://github.com/feroze/vidalia/commits/hiddenservice

[Attachment #5 (text/html)]

I have completed the prototype for Torrc and I've tested it writing a plugin. So \
far value(), setValue(), TorrcPath() functions are confirmed working. I've still \
not been able to get clear() working and the execution simple stops. I'm not sure \
if there is an error in the plugin or the prototype without the debugger. I'm \
planning on integrating QScriptEngineDebugger to help writing and testing \
plugins.&lt;br&gt; &lt;br&gt;I didn't work in the first week during exams.&lt;br&gt;&lt;br&gt;My commits \
- &lt;a href="https://github.com/feroze/vidalia/commits/hiddenservice"&gt;https://github.com/feroze/vidalia/commits/hiddenservice&lt;/a&gt;&lt;br&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120801065512</emailId><senderName>Erinn Clark</senderName><senderEmail>erinn@torproject.org</senderEmail><timestampReceived>2012-08-01 06:55:12-0400</timestampReceived><subject>Re: [tor-dev] How to best support tor 0.2.3.x in Tor Browser Bundle?</subject><body>

[Attachment #2 (multipart/signed)]


* Mike Perry &lt;mikeperry@torproject.org&gt; [2012:07:31 14:56 -0700]: 
&gt; Quick recap from #tor-dev IRC convo with Nick, Roger, and Andrew:
&gt; 
&gt; We need to get a usable tor 0.2.3.x-rc bundle out RSN so we can declare
&gt; it "stable", but there are concerns that using Firefox 14 with this will
&gt; continue to cause unexpected problems and otherwise scare people away
&gt; from testing tor 0.2.3.x enough.

How unstable is Firefox 14 though? It is Firefox's stable release, after all.
Are the recently-released bundles unusable?
 
&gt; However, I still need to have a place to commit TBB-alpha patches, and
&gt; have three bugfixes (including a fix for a FF14 crash bug that was
&gt; discovered by tor-qa) that I'd like to get into the alpha series. Also,
&gt; if we don't provide Firefox Rapid Release with regular alpha testing,
&gt; we're going to be really, really sad when everything breaks at once in
&gt; November with the next Firefox ESR.
&gt; 
&gt; One option is to create a temporary "rc" branch of torbrowser.git's
&gt; maint-2.2 to build tor 0.2.3.x but with the rest of a "TBB stable"
&gt; bundle with Vidalia 0.2.x and Firefox 10.x ESR, and leave maint-2.3 as
&gt; "TBB alpha".
&gt; 
&gt; A second option is to create a more permanent "TBB beta" series, with
&gt; whatever software smells like it is getting close to stable at a given
&gt; point in time.

Technically, this is what maint-2.3 should be.
 
&gt; A third option is to just keep doing English-only maint-2.3 builds
&gt; back-to-back until tor-qa stops reporting crash bugs or strange issues.

I think there's a fourth option, which is urge people on the blog, via twitter,
etc, to test the alpha/rc bundles, with me making a commitment to do frequent
releases for any issues that pop up. 

&gt; However, we need input from Erinn to decide the best approach. If the
&gt; "rc" fork (or a permanent beta branch) messes up the build process or
&gt; introduces issues with build automation work, perhaps it is not the
&gt; right way to go, and we should just keep doing english-only maint-2.3
&gt; releases back-to-back until FF14 is more stable (Note: it works OK for
&gt; me now in my test builds with the crash fix applied).

I don't think more bundles is the right answer, in most cases. But let's be
clear about the kind of testing we need first. I think Nick's going to say "ALL
the testing", but 0.2.3.x server-side is pretty well-tested on Linux by now,
fairly poorly tested on Windows, and more or less irrelevant on OSX, with
barely any testing for clients on all three platforms. Sound right?

So depending on the timeline people have in mind, my suggestion is to do a big
push on the aforementioned social networks and shake out as many bugs in the
next week as we can, then iterate. But my opinion depends a bit on how
severe you think the Firefox 14 problem is.

That's the short-term solution for getting 0.2.3.x stable though. Longer term,
I just can't let the alpha bundles lapse again -- it's my fault we're in this
position and I'm really sorry. I think we'll move to a true-experimental bundle
situation as outlined in the HACKING document in torbrowser.git where we can
keep things held up if they aren't going RC in the next 9 months (or at all) .
Then the "middle" branch of TBB can be used strictly for stabilizing.

Happy to hear more input.

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120801070648</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-08-01 07:06:48-0400</timestampReceived><subject>Re: [tor-dev] How to best support tor 0.2.3.x in Tor Browser Bundle?</subject><body>

On Wed, Aug 01, 2012 at 07:55:12AM +0100, Erinn Clark wrote:
&gt; &gt; We need to get a usable tor 0.2.3.x-rc bundle out RSN so we can declare
&gt; &gt; it "stable", but there are concerns that using Firefox 14 with this will
&gt; &gt; continue to cause unexpected problems and otherwise scare people away
&gt; &gt; from testing tor 0.2.3.x enough.
&gt; 
&gt; How unstable is Firefox 14 though? It is Firefox's stable release, after all.
&gt; Are the recently-released bundles unusable?

Alas, they do crash a lot, due to one of Mike's Firefox patches:
https://trac.torproject.org/projects/tor/ticket/6492

So, good that we found a problem, but bad that we don't have a TBB
suitable for testing the Tor 0.2.3 release candidate anymore. :)

Thanks,
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120801143820</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-01 14:38:20-0400</timestampReceived><subject>Re: [tor-dev] How to best support tor 0.2.3.x in Tor Browser Bundle?</subject><body>

On Wed, Aug 1, 2012 at 2:55 AM, Erinn Clark &lt;erinn@torproject.org&gt; wrote:

IMO this comes down to the question of: Can we make the alpha TBB
branch stable fast enough to have it be useful for testing?  The crash
bugs that Roger mentions make it less than useful anybody trying to
get good testing info for Tor.  So if we think that one can get fixed
in the next release, great, let's carry on.

But otherwise, I don't think it's a good idea to make Tor 0.2.3.x wait
until an unknown number of bugs are fixed on an unknown timeframe.

The reason had I suggested doing Tor 0.2.3.x releases with the stable
TBB for a while (not permanently) is that I personally don't have much
sense of how far the TBB alpha is from stability.  If, once #6492 etc
are solved, it's stable and pleasant to use, great -- but if the
browser remains crashy enough that folks can't actually use it, maybe
we should stick with pairing Tor 0.2.3.x with the current TBB stable,
and letting Tor 0.2.4.x and the alpha/experimental TBB stabilize
together.

This is of course all said without full knowledge of everything that's
going on; there are likely to be important facts here I don't know.

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120907201505</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-09-07 20:15:05-0400</timestampReceived><subject>Re: [tor-dev] Tenative schedule for Tor 0.2.4 [Or, why I might reject your patches in November-&gt;Marc</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@freehaven.net):

&gt; Last year, I announced a tenative schedule for 0.2.3.x.  We didn't
&gt; stick to it, and things have gone a little pear-shaped with getting
&gt; 0.2.3.x stabilized, but I think with a few tweaks we can use something
&gt; similar to get a good schedule out for 0.2.4.x.
&gt; 
&gt; My goals remain about what they were before: get release out faster by
&gt; getting better at saying "no" to features after a release window.  My
&gt; target is March or April 2013.
&gt; 
&gt; To that end:
&gt;
&gt; [*snip schedule dates I'm certain to forget anyways*]
&gt;
&gt; On the meaning of "feature": I'm probably going to argue that some
&gt; things that you think are bugfixes are features.  I'm probably going
&gt; to argue that your security bugfix is actually a security feature.
&gt; I'm probably even going to argue that most non-regression bugfixes are
&gt; features.  Let's try to get a release out *early* in 2013 this time,
&gt; come heck or high water.

For people who are only occasionally/tangentially involved in tor-core
development like myself, it might be useful to have some kind of active
ping/reminder on tickets with the Tor-0.2.4.x-final trac milestone
around the deadline deadline date(s) you deem applicable for that
ticket.

Unless it is way more work for you, I think I would prefer per-ticket
reminders on trac to blanket email announcements, so I know exactly what
and when I should care about getting something done if I really want it
done, and what deadline category you think each thing falls in to.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120907215344</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-09-07 21:53:44-0400</timestampReceived><subject>Re: [tor-dev] Tenative schedule for Tor 0.2.4 [Or, why I might reject your patches in November-&gt;Marc</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Mike Perry (mikeperry@torproject.org):

&gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt; 
&gt; &gt; Last year, I announced a tenative schedule for 0.2.3.x.  We didn't
&gt; &gt; stick to it, and things have gone a little pear-shaped with getting
&gt; &gt; 0.2.3.x stabilized, but I think with a few tweaks we can use something
&gt; &gt; similar to get a good schedule out for 0.2.4.x.
&gt; &gt; 
&gt; &gt; My goals remain about what they were before: get release out faster by
&gt; &gt; getting better at saying "no" to features after a release window.  My
&gt; &gt; target is March or April 2013.
&gt; &gt; 
&gt; &gt; To that end:
&gt; &gt;
&gt; &gt; [*snip schedule dates I'm certain to forget anyways*]
&gt; &gt;
&gt; &gt; On the meaning of "feature": I'm probably going to argue that some
&gt; &gt; things that you think are bugfixes are features.  I'm probably going
&gt; &gt; to argue that your security bugfix is actually a security feature.
&gt; &gt; I'm probably even going to argue that most non-regression bugfixes are
&gt; &gt; features.  Let's try to get a release out *early* in 2013 this time,
&gt; &gt; come heck or high water.
&gt; 
&gt; For people who are only occasionally/tangentially involved in tor-core
&gt; development like myself, it might be useful to have some kind of active
&gt; ping/reminder on tickets with the Tor-0.2.4.x-final trac milestone
&gt; around the deadline deadline date(s) you deem applicable for that
&gt; ticket.
&gt; 
&gt; Unless it is way more work for you, I think I would prefer per-ticket
&gt; reminders on trac to blanket email announcements, so I know exactly what
&gt; and when I should care about getting something done if I really want it
&gt; done, and what deadline category you think each thing falls in to.

Just saw that there's already 184 tickets currently in
Tor-0.2.4.x-final. Wow.

So maybe instead: We can all try to tag things in Tor-0.2.4.x-final with
the right deadline tag, and then you can just do announcement emails?
And/or the project coordinator can handle pinging people/tickets at the
deadline points?



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120831183137</emailId><senderName></senderName><senderEmail>andrea</senderEmail><timestampReceived>2012-08-31 18:31:37-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Aug 31, 2012 at 11:57:04AM -0400, Nick Mathewson wrote:
&gt; Hi, all!
&gt; 
&gt; Here's an idea I had for directory authorities and the 0.2.3 release series.
&gt; 
&gt; "As you know Bob," Tor 0.2.3 will be stable very soon, and I'm hoping
&gt; not to take any more patches for it except for important security
&gt; issues.  I want 0.2.4 to come out very early next year.  But in the
&gt; meantime, to support 0.2.4, and to deploy security/reliability
&gt; features to the network early, there are some directory consensus
&gt; features that we'd want to deploy before the rest of 0.2.4 is done and
&gt; stable.
&gt; 
&gt; In particular, I'd like directories to be able to reach consensus on
&gt; IPv6 addresses (6363), and I'd like to try out the code that Mike
&gt; wrote to make the bandwidth voting system more robust against
&gt; dishonest during its startup phase (2286).
&gt; 
&gt; So here's my plan: Make a "maint-0.2.3-da" branch based on 0.2.3, plus
&gt; feature patches for directory authorities.  It gets patches from the
&gt; stable series (0.2.3), plus directory-authority features under
&gt; development.  It would get merged-forward into 0.2.4, to make sure
&gt; that 0.2.3-da and 0.2.4 behavior stay in sync.
&gt; 
&gt; This way we can get new authority features working in time to support
&gt; 0.2.4 clients, but without forcing too many authorities to run 0.2.4
&gt; before it's ready, and without forcing us to make feature changes in
&gt; 0.2.3 proper.
&gt; 
&gt; Thoughts?

Sounds good to me.

-- 
Andrea Shepard
&lt;andrea@persephoneslair.org&gt;
PGP fingerprint: B593 78C9 DDEB 2DFE 2E29  FF59 D1D8 B7B1 6BFE F7CE

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120831223651</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-08-31 22:36:51-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

Nick Mathewson &lt;nickm@freehaven.net&gt; wrote
Fri, 31 Aug 2012 11:57:04 -0400:

| Hi, all!
| 
| Here's an idea I had for directory authorities and the 0.2.3 release series.
| 
| "As you know Bob," Tor 0.2.3 will be stable very soon, and I'm hoping
| not to take any more patches for it except for important security
| issues.  I want 0.2.4 to come out very early next year.  But in the
| meantime, to support 0.2.4, and to deploy security/reliability
| features to the network early, there are some directory consensus
| features that we'd want to deploy before the rest of 0.2.4 is done and
| stable.
| 
| In particular, I'd like directories to be able to reach consensus on
| IPv6 addresses (6363), and I'd like to try out the code that Mike
| wrote to make the bandwidth voting system more robust against
| dishonest during its startup phase (2286).
| 
| So here's my plan: Make a "maint-0.2.3-da" branch based on 0.2.3, plus
| feature patches for directory authorities.  It gets patches from the
| stable series (0.2.3), plus directory-authority features under
| development.  It would get merged-forward into 0.2.4, to make sure
| that 0.2.3-da and 0.2.4 behavior stay in sync.
| 
| This way we can get new authority features working in time to support
| 0.2.4 clients, but without forcing too many authorities to run 0.2.4
| before it's ready, and without forcing us to make feature changes in
| 0.2.3 proper.
| 
| Thoughts?

Sounds good to me.

Just a thought. A few of the directory authorities, I think at least
three, as well as the bridge authority run packages/ports only, not
builds from source. We'd have to package our -da branch ourselves for
those I guess. But that's probably a better option than the others.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120904155416</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-09-04 15:54:16-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>


On Sep 1, 2012, at 1:02 AM, Roger Dingledine wrote:

&gt; On Sat, Sep 01, 2012 at 12:36:51AM +0200, Linus Nordberg wrote:
&gt;&gt; Just a thought. A few of the directory authorities, I think at least
&gt;&gt; three, as well as the bridge authority run packages/ports only, not
&gt;&gt; builds from source. We'd have to package our -da branch ourselves for
&gt;&gt; those I guess. But that's probably a better option than the others.
&gt; 
&gt; Right. The people who are willing to run from git generally are fine
&gt; running master (and helping to find bugs), so it's really the people
&gt; who only run from packages that we need to consider here.
&gt; 
&gt; Maybe we should just enumerate the eight directory authorities and their
&gt; habits, rather than trying to generalize too early?
&gt; 
&gt; - I generally run moria1 from git master, to maximize the cool new bugs
&gt; I can find.
&gt; 
&gt; - I think weasel only runs tor26 from debs. I wonder what he would think
&gt; of us asking him to deb up a separate git branch for just a few people?
&gt; He says "I don't mind running 0.2.4 - it's not worse than running a fork
&gt; of 0.2.3."
&gt; 
&gt; - Linus runs maatuska from git, and is happy with git master too.
&gt; 
&gt; - I'm not sure about gabelmoo, dizum, dannenberg, turtles, and urras.

I run gabelmoo from git, typically not tip of master early in a release
series except when necessary.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120905025755</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-09-05 02:57:55-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

Nick Mathewson:
&gt; Hi, all!
&gt; 
&gt; Here's an idea I had for directory authorities and the 0.2.3 release series.
&gt; 
&gt; "As you know Bob," Tor 0.2.3 will be stable very soon, and I'm hoping
&gt; not to take any more patches for it except for important security
&gt; issues.  I want 0.2.4 to come out very early next year.  But in the
&gt; meantime, to support 0.2.4, and to deploy security/reliability
&gt; features to the network early, there are some directory consensus
&gt; features that we'd want to deploy before the rest of 0.2.4 is done and
&gt; stable.
&gt; 
&gt; In particular, I'd like directories to be able to reach consensus on
&gt; IPv6 addresses (6363), and I'd like to try out the code that Mike
&gt; wrote to make the bandwidth voting system more robust against
&gt; dishonest during its startup phase (2286).
&gt; 
&gt; So here's my plan: Make a "maint-0.2.3-da" branch based on 0.2.3, plus
&gt; feature patches for directory authorities.  It gets patches from the
&gt; stable series (0.2.3), plus directory-authority features under
&gt; development.  It would get merged-forward into 0.2.4, to make sure
&gt; that 0.2.3-da and 0.2.4 behavior stay in sync.
&gt; 
&gt; This way we can get new authority features working in time to support
&gt; 0.2.4 clients, but without forcing too many authorities to run 0.2.4
&gt; before it's ready, and without forcing us to make feature changes in
&gt; 0.2.3 proper.
&gt; 
&gt; Thoughts?
&gt; 
&gt; yrs,
&gt; 

I think this is a fine plan - my preference is generally to track git
tip for urras. I'm happy to track whatever branches need experimenting
or lots of use. I will need to acquire some IPv6 space for the machine
soon for it to be of maximal usefulness in the future....

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120905030708</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-09-05 03:07:08-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

Roger Dingledine:
&gt; On Sat, Sep 01, 2012 at 12:36:51AM +0200, Linus Nordberg wrote:
&gt;&gt; Just a thought. A few of the directory authorities, I think at least
&gt;&gt; three, as well as the bridge authority run packages/ports only, not
&gt;&gt; builds from source. We'd have to package our -da branch ourselves for
&gt;&gt; those I guess. But that's probably a better option than the others.
&gt; 
&gt; Right. The people who are willing to run from git generally are fine
&gt; running master (and helping to find bugs), so it's really the people
&gt; who only run from packages that we need to consider here.
&gt; 

I think one thing to consider is just making the building of deb
packages a bit easier. I did this with weasel in Italy and it wasn't
actually too painful; if I were to document those steps, would anyone
actually build debs for themselves? Or is the issue actually building
the debs more than anything else?

&gt; Maybe we should just enumerate the eight directory authorities and their
&gt; habits, rather than trying to generalize too early?
&gt; 
&gt; - I generally run moria1 from git master, to maximize the cool new bugs
&gt; I can find.

I do the same.

&gt; 
&gt; - I think weasel only runs tor26 from debs. I wonder what he would think
&gt; of us asking him to deb up a separate git branch for just a few people?
&gt; He says "I don't mind running 0.2.4 - it's not worse than running a fork
&gt; of 0.2.3."

It seems like it might be nice to have a deb that builds a deb with
custom options- sorta like the old djb packages. There are a lot of
variants that would be nice - arm, tor-fw-helper, a specific git rev,
etc. One package that generated a deb with your flavor of Tor would be
pretty neat. I think though, I just heard weasel's head explode... ;-)

&gt; 
&gt; - Linus runs maatuska from git, and is happy with git master too.
&gt; 
&gt; - I'm not sure about gabelmoo, dizum, dannenberg, turtles, and urras.
&gt; 

I run urras from a frequently updated git tip of master. It has a few
small patches but nothing major or of consequence.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120906183424</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-09-06 18:34:24-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

On Tue, Sep 4, 2012 at 10:57 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:

Hi, Jake!

&gt; I think this is a fine plan - my preference is generally to track git
&gt; tip for urras. I'm happy to track whatever branches need experimenting
&gt; or lots of use. I will need to acquire some IPv6 space for the machine
&gt; soon for it to be of maximal usefulness in the future....

What I really need to hear on this question is whether there are
directory authority operators who are *not* comfortable tracking
0.2.4.x-alpha, but who *would* be comfortable running a hypothetical
0.2.3-da series.

If there are are a significant number of such operators, it might be
worthwhile to make an 0.2.3-da.  But if everybody's happy tracking
0.2.4.x or tracking git, there's no real reason to put out an
0.2.3-da., I think.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120505134455</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-05-05 13:44:55-0400</timestampReceived><subject>Re: [tor-dev] Win32/MSVC: tinytest.c problems</subject><body>


On May 5, 2012, at 3:30 PM, Gisle Vanem wrote:

&gt; There are 2 problems with the use of 'stricmp()' (line 295) in tinytest.c.
&gt; 
&gt; 1. As it is now, I'm getting an undefined reference to 'stricmp' when  linking \
&gt; tinytest.exe and using '-nodefault:oldnames' in the link-flags.  Can we please \
&gt; remove this lib from the requirements? 
&gt; 2. 'stricmp()' is used nowhere else in Tor. But rather 'strcasecmp()'.
&gt; Can we use that for consistency instead? Need to include "or.h"
&gt; to include src/compat.h.
&gt; 
&gt; Like the lines from src/compat.h says:
&gt; /* Windows names string functions differently from most other platforms. */
&gt; #define strncasecmp _strnicmp
&gt; #define strcasecmp _stricmp
&gt; 
&gt; How about this little patch:

Tinytest is supposed to be an independent library, so including a
tor-specific header file doesn't work here.

&gt; There are more MSVC-issues in other test/*.c files. I can get back to that.

Please do, thanks.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120402062235</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-04-02 06:22:35-0400</timestampReceived><subject>Re: [tor-dev] Google Summer of Code Proposal - PathSupport counterpart for Stem</subject><body>

&gt; I want to apply to the Tor Project/EFF for Google's Summer of Code
&gt; program this summer. I would like to spend the summer building the
&gt; PathSupport counter part for Stem. I have submitted a work in progress
&gt; proposal at http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/neena/1

I'm sending the contents of my proposal here (with minor
modifications), since not everyone has access to that page. Not
everyone can comment on it even if I make it public, so, I would
prefer it if people with access to that page also commented here.


What project would you like to work on?
============

I would like to work on the PathSupport counterpart for Stem.


Apart from simply writing code, I want to focus on creating a well
designed API (during the community bonding period) and on writing
comprehensive documentation (very important for a library).

During the community bonding period, I will spend my time preparing a
proper API and interacting with the maintainers of projects which use
TorCtl and getting their feedback. Their feedback will ensure that the
API will be usable. I also will communicate with my mentor about my
progress and hopefully, will have an intuitive, easy to use API design
ready before the coding period starts.

As suggested, I will be coding iteratively, writing documentation and
tests as I write each class/function/module of the project.
Implementation implies writing the code, tests and the documentation.

Rough API Draft
---------------

Introducing a new submodule - stem.path

This submodule will contain all PathSupport specific code.

stem.path.PathController

    An amalgamation of the PathSupport.PathBuilder and the
PathSupport.ConsensusTracker classes. Justification:
PathSupport.ConsensusTracker can be merged because
TorCtl.PathSupport.ConsensusTracker isn't being used anywhere but as a
super class of TorCtl.PathSupport.PathBuilder. Among pytorctl, arm,
torbel and torflow the only other mention of ConsensusTracker is
TorCtl.SQLSupport.ConsensusTrackerListener which is used by Torflow
for storing stats and SQLSUPPORT.
    TorCtl.PathSupport.PathBuilder uses a
TorCtl.PathSupport.SelectionManager. A helper class for handling
(router) configuration updates. I will merge a part of this into
stem.path.PathController too, in particular, the configuration update
handling code. I will look into moving the NodeGenerator handling
functionality and the circuit generation functionality of
TorCtl.PathSupport.SelectionManager into stem.path.PathGenerator.
    In the process of merging these three classes together, if
stem.path.PathController grows too large or becomes unwieldy, I will
make helper classes as necessary.
    Is a direct subclass of stem.control.BaseController
    A major change would be to make PathController fully thread-safe
instead of an event/queue system. Stem's BaseController class prefers
locking and we will use the same approach.
    Handles tracking the NEWCONSENSUS and NEWDESC events just like
TorCtl.PathSupport.ConsensusTracker
    Write integration tests that check circuit construction and the
like, where possible.
    Write unit tests to ensure all the individual methods of the class
are working as expected.


The following classes will be renamed


    TorCtl.PathSupport.CircuitHandler -&gt; stem.path.CircuitController
        CircuitHandler gives the impression that the class 'handles' one Circuit
        CircuitManager is more appropriate since they 'control'
(multiple) Circuit building, and it is also what people should expect
since it is a subclass of stem.control.BaseController

    TorCtl.PathSupport.StreamHandler -&gt; stem.path.StreamController
        StreamHandler gives the impression that the class 'handles' one Stream
        StreamController is more appropriate since they 'control'
Stream-Circuit attachment, and it is also what people should expect
since it is a subclass of stem.control.BaseController.
        Torflow (OPAddon) has PingHandler which is a subclass of this.
Check how it is subclassing StreamHandler and if this can be made
easier to use.This will be done during the community bonding period.

    TorCtl.PathSelector -&gt; stem.path.PathGenerator
        Maintain naming consistency with NodeGenerator
        Merge parts of TorCtl.PathSupport.SelectionManager into this.
In particular, the NodeGenerator handling code.


stem.path.NodeRestriction
stem.path.PathRestriction

    Both of these Restriction classes have one restriction checking
function, r_is_ok and path_is_ok respectively. These will be renamed
to 'check'.


Implement the various NodeRestrictions and PathRestrictions available
in TorCtl.PathSupport

There's a TODO comment in PathSupport.py (also in torflow/TODO) which
mentions other NodeRestrictions and PathRestrictions. If time permits,
implement these Restrictions too.

Deliverables
------------

Mid term evaluation:

The following will be implemented as deliverables for the mid term evaluation


    Required base classes, such as the stem.path.Circuit class and the
stem.path.Stream class.
    NodeRestrictions and CircuitRestrictions currently available in
TorCtl.PathSupport.
    NodeGenerators and PathGenerators.
    stem.path.PathController (This might be split into 2 or more
classes, if the merge doesn't seem like the right thing to do)


Final evaluation:

The following will be implemented as deliverables for the final term evaluation


    stem.path.CircuitController
    stem.path.StreamController


The following will be ported to use Stem:


    Torflow


Note: Torflow is our main 'testbed' for testing the new API, since it
the only major codebase that uses PathSupport. Depending on how this
goes, I might refactor or make changes to the stem.path submodule.

Optional Deliverables:

In case I finish my deliverables with time to spare, I'll spend it
doing the following tasks


    Implementing the extra Restrictions mentioned in the TODO
    Porting Arm to use Stem
    Porting TorBEL to use Stem


Note: Neither TorBEL, nor Arm use PathSupport


Timeline
--------

April 23rd - May 20th Community bonding period

I will spend this time designing the final API for Stem's
TorCtl.PathSupport equivalent. I will be communicating with people in
the Tor community who have used TorCtl and TorCtl.PathSupport and
getting their feedback, thus ensuring that we have a nice API design
ready by the beginning of the coding period.

There are some unimplemented parts of the general controller class
that are required for the implementation of PathSupport, such as the
Router class. Atagar is currently working on this. I will help with
implementing these so that they will be ready before the coding period
begins.

May 20th - July 9th Coding Period (Pre-mid term evaluation)

The pre-mid term coding period  I will be implement the deliverables
for the mid term evaluation as follows:

Week 1 -

    Implement required base classes, such as the stem.path.Circuit
class and the stem.path.Stream class.


Week 2 -

    Implement NodeRestrictions and CircuitRestrictions currently
available in TorCtl.PathSupport.


Week 3 -

    Implement NodeGenerators and PathGenerators.


Week 4-7 -

    Implement stem.path.PathController.This might be split into 2 or
more classes, if the merge doesn't seem like the right thing to do.
This is a major chunk of the project and will take a significant
amount of time and might consume a part of week 8.

Note: The individual blocks that PathController is composed of make up
about 50% of the existing PathSupport.py code. I will also be writing
tests and documentation. This is why I have allocated 3 weeks to this.

Week 8 -

    Leaving this week free as buffer time. I have optional
deliverables that will be worked on if I have extra time.


July 9th - August 13th (Post-mid term evaluation)

Week 9 -

    Implement stem.path.CircuitController and stem.path.StreamController

Week 10 -

    Port Torflow to use Stem. This will consume a part of week 11,
since Torflow depends on Stem and PathSupport a fair bit. The codebase
itself consists of a variety of scripts and utilities and is
relatively large (compared to something like TorBEL).


Week 11 -

    More buffer time. Depending on the status of my work, I will spend
this time doing  the following things (In order of importance):
        Finishing stuff
        Write the additional Restrictions
        Begin porting Arm and TorBEL to Stem


August 13th - August 20th (Post-soft pencils down deadline)

Week 12 -

    The gsoc page suggests taking a week to scrub code, write tests,
improve documentation, etc. Since this is a library, documentation
takes priority. So, assuming the code is complete and assuming it has
sufficient test coverage I will spend this week writing and improving
the documentation. This will involve writing examples and
comprehensive documentation.

Point us to a code sample: something good and clean to demonstrate
that you know what you're doing, ideally from an existing project.

I have written a few patches for some Tor Project projects. #1667,
#5032. Two to Stem, which have been committed to the repository #5199
and #5472.


Why do you want to work with The Tor Project / EFF in particular?
===============

I began reading stuff about The Tor Project about 2 months ago after a
friend suggest that I contribute to it. Now, I love the internet, and
it is responsible for a large part who I am. The Tor Project and the
EFF work to defend the things that make the internet what it is, i.e.
(among other things) free speech.

I can relate with this goal very easily.


Tell us about your experiences in free software development
environments. We especially want to hear examples of how you have
collaborated with others rather than just working on a project by
yourself.
===============

Though I have been using Free software for a long time (I switched to
Linux about 7 years ago), I haven't made any significant contributions
to free software, apart from a few bugs reports and minor patches.
However, I am familiar with version control software, bug trackers
etc. I have used them while submitting the patches mentioned earlier.


Will you be working full-time on the project for the summer, or will
you have other commitments too (a second job, classes, etc)? If you
won't be available full-time, please explain, and list timing if you
know them for other major deadlines (e.g. exams). Having other
activities isn't a deal-breaker, but we don't want to be surprised.
===============

I have exams until the 29th of April, so I will be missing a few days
of the community bonding period, though, I hope to show up on the IRC
channels even then, albeit sporadically. I also might have to write an
exam either in july or august. Though, that depends on me flunking. It
won't cost me more than 2 days, and I will work extra during the
weekends to make up for it.


Will your project need more work and/or maintenance after the summer
ends? What are the chances you will stick around and help out with
that and other related projects?
===============

Stem, like all libraries implementing an API for a moving target
requires maintenance. I will co-maintain Stem in the future. By the
time I'm done with the SoC program, I would've also gained familiarity
with other related projects such as Torflow, TorBEL and Arm. I'll be
in a position where I can help out with those if there is a need.

Though, personally, I am interested in getting involved in Tor
development, and the re-implementation of Thandy (if/when it happens),
and that is what I'll do unless any other project requires more
attention.


What is your ideal approach to keeping everybody informed of your
progress, problems, and questions over the course of the project? Said
another way, how much of a "manager" will you need your mentor to be?
===============

IRC is my preferred mode of communication, and I will be using it to
ask questions and for help with my problems. If I'm unable to get the
answer I want on the IRC, I will ask them on the mailing list.

I will keep people informed about my progress by sending (probably
monthly, or as often as required) reports the mailing list.

What school are you attending? What year are you, and what's your
major/degree/focus? If you're part of a research group, which one?
===============

I'm an undergraduate student majoring in computer science studying at
GITAM University  I'm currently working on my final year project which
involves computer network modelling.


How can we contact you to ask you further questions? Google doesn't
share your contact details with us automatically, so you should
include that in your application. In addition, what's your IRC
nickname? Interacting with us on IRC will help us get to know you, and
help you get to know our community.
===============

I'm available via email at neenaoffline@gmail.com. I'm also subscribed
to many of the tor-* mailing lists, including tor-dev and tor-talk. My
nickname on OFTC is 'neena'. My email account also doubles up as my
Jabber account, though, I prefer IRC.

Are you applying to other projects for GSoC and, if so, what would be
your preference if you're accepted to both? Having a stated preference
helps with the deduplication process and will not impact if we accept
your application or not.
===============

I am not applying to any other projects for GSoC.

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120302223626</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-03-02 22:36:26-0400</timestampReceived><subject>Re: [tor-dev] Deployability of Python software.</subject><body>

On Fri, Mar 2, 2012 at 3:58 PM, Arturo Filastò &lt;hellais@torproject.org&gt; wrote:
&gt; We were discussing last night with George about deployability of python
&gt; application on multiple platforms.
[....]
&gt; By talking to some of the core python developers my understanding is that there is a way of
&gt; securely storing keys in memory and wiping that memory region in python. It involves using
&gt; bytearray. We you override a cell in a byte array you are not simply dereferencing the pointer
&gt; to the python struct, you are actually overwriting that portion of memory.
&gt; I think I might write a blog post about this and illustrate what other python crypto software is
&gt; using to solve this problem (PyCrypto etc.).

What's the threat model here? On a single-user machine access to
memory usually means game over anyway: you can be rooted and the keys
read out.  Or is this a matter of making 1 application that works for
all threat models so that we can discover and root out bugs faster?

Sincerely,
Watson Ladd


-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither   Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120306182437</emailId><senderName>Bernd</senderName><senderEmail>prof7bit@googlemail.com</senderEmail><timestampReceived>2012-03-06 18:24:37-0400</timestampReceived><subject>Re: [tor-dev] Deployability of Python software.</subject><body>

2012/3/2 Arturo Filastò &lt;hellais@torproject.org&gt;:

&gt; - How do we get a good Windows binary of the Software?
&gt; - How do we keep the size down to an acceptable level?
&gt; - What kind of performance drawbacks would we be experiencing?

I have used pyinstaller for the Windows builds of TorChat.
https://github.com/prof7bit/TorChat
my build script (its in the src directory) will first apply
pyinstaller to pack all required and imported python files along with
the python interpreter (python2.x.dll), the wxPython GUI toolkit along
with all needed dlls into one single executable .exe file, then
applies upx to it and finally bundles it all together with a copy of
tor.exe into a zip file of only 7MB.

There are no performance-drawbacks compared to running it the "normal"
way, the only confusing thing with pyinstaller is there will be two
processes running, one very small bootstrapper that will unpack before
running and clean-up afterwards and the actual application itself and
both have the same name. This is not a problem, only confusing.
Pyinstaller will temporarily unpack everything into a temp directory
and run it from there, so if it crashes it will leave files behind.

The other alternative is py2exe, this will do it all in memory without
temp files, produces similarly small exe files but older versions had
problems with properly bundling the msvc runtime dlls along with their
manifest files, pyinstaller solved this for me so I switched to
pyinstaller. If you checkout very early revisions of TorChat you will
find the old versions built with py2exe.

On Linux I let it run with the installed version of python (see my
.deb build script, also in the src folder, and also the starter script
that will try to find the newest installed 2.x version), there was a
time when this produced some difficulty with a wide range of available
python (and wx) versions and my limited resources to test them all,
but this is now consolidating towards 2.7 available everywhere and
these problems are gone. For the same reason you should not (not yet)
chose Python 3.x because then you will find yourself in the multiple
version hell soon again. Never use bleeding edge dependencies and
anything that is not found on debian stale has to be considered
bleeding edge. I'm using Windows XP to build the windows version.

Bernd
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120307082450</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-07 08:24:50-0400</timestampReceived><subject>Re: [tor-dev] Deployability of Python software.</subject><body>

On 3/3/12 12:58 AM, Arturo Filast=F2 wrote:
&gt; =

&gt; What do you think?

Additionally with the Awaf concept it would be possible to also have
Disaster Recovery for server applications, even running on windows PC
behind *DSL lines.

That's because if you make a copy of the TorHS key, the later one that
insert itself to the Directory Authority will be the "active one".
If we put into Awaf also an easy way to make data-replication among
different Awaf applications, it would be also very easy to make disaster
recovery and strong resiliency of data.

So two activists for example would be able to have a redundant,
anonymous, 0-maintenance, easy-to-be-setup web application server.

If you also consider the power of an Awaf based application when
thinking about the future diffusion and stabilization of Tor2web, then
things became even more challenging and interesting.

Anyone will be able to setup an anonymous web-server on the internet
with a couple of click on his own desktop computer (think about blog,
chat, webserver, email server, file exchange server, obviously
whistleblowing server, etc, etc).

If we create such a framework we would be able to "hide" the system
integration complexity that a general python web developer would need to
face in order to:
- Integrate different server software together (Tor, Tornadoweb, etc)
- Handle inbound/outbound anonymous connection
- Make cross-platform build-system
- Secure what can be secured (jailing, sandboxing, etc)
- Making it "easy" for end-user to deploy

There's a lot of complexity in doing that.

If we do it properly once, then web developers would be able to create a
new ecosystems of web application running inside the Tor network and
this could boost the use of Tor Hidden Service and Tor2web.

Inshalla it will be something very cool!

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120307102436</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-03-07 10:24:36-0400</timestampReceived><subject>Re: [tor-dev] Deployability of Python software.</subject><body>

Hi,

Fabio Pietrosanti (naif) wrote (07 Mar 2012 08:24:50 GMT) :
&gt; So two activists for example would be able to have a redundant,
&gt; anonymous, 0-maintenance, easy-to-be-setup web application server.

This rings a bell:

  https://www.torproject.org/getinvolved/volunteer.html.en#tailsServer
  https://tails.boum.org/todo/server_edition/ 

I'm sorry I did not read this thread, so this may be totally OT.

Cheers,
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
  | Did you exchange a walk on part in the war
  | for a lead role in the cage?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130063447</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 06:34:47-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Thu, Jan 26, 2012 at 10:42:53PM +0100, Ondrej Mikle wrote:
&gt; I decided to give it a shot in implementing full DNS/DNSSEC resolution support
&gt; for Tor, here's the branch:
&gt; 
&gt; https://github.com/hiviah/tor
&gt; 
&gt; ATM the biggest limitation is that reply DNS packet must fit in a single cell
&gt; (i.e. max size is RELAY_PAYLOAD_SIZE).

Hi Ondrej,

Neat stuff! It's always nice to see people show up with patches.

So it looks like Tor would get two new libraries linked in, and exit
relays would inherit whatever security/stability issues libunbound has
since clients can basically hand them packets that they have to parse
and deal with.

How to handle more of the dns protocol has always been a messy design
question for Tor. More people are getting interested in it as we add
more ipv6 support.

The previous hack recommendation had been for the client to use ttdnsd
to run dns queries as normal Tor TCP flows:
https://gitweb.torproject.org/ioerror/ttdnsd.git
https://gitweb.torproject.org/ioerror/ttdnsd.git/blob_plain/HEAD:/README.TorDNS
which resolves the "what about answers bigger than Tor's cell size"
question, as well as the "are we really sure we want a whole dns server
implementation inside Tor" question, but leaves such niggling issues as
"so do you direct the streams to 8.8.8.8, or what?" It also has the
advantage that 8.8.8.8 runs a single known version of its nameserver,
rather than a collection of exit relays that each offer whichever version
they linked.

What do you think about the tradeoffs here? I'd like Tor to support more
of dns, but I also think it's important to avoid needing exit relays to
know all the details.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130094534</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 09:45:34-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Thu, Jan 26, 2012 at 10:42:53PM +0100, Ondrej Mikle wrote:
&gt; Also, this seems to be a bug in
&gt; relay.c:connection_edge_process_relay_cell_not_open(), the
&gt; RELAY_COMMAND_RESOLVED case:
&gt; 
&gt;     answer_len = cell-&gt;payload[RELAY_HEADER_SIZE+1];
&gt;     if (rh-&gt;length &lt; 2 || answer_len+2&gt;rh-&gt;length) {...}
&gt; 
&gt; Payload is accessed before checking bounds.

cell-&gt;payload is a fixed-size array. It's going to be there no matter
what values are in it.

Unless I'm misunderstanding you?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131011109</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-31 01:11:09-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On 01/30/2012 07:34 AM, Roger Dingledine wrote:
&gt; On Thu, Jan 26, 2012 at 10:42:53PM +0100, Ondrej Mikle wrote:
&gt;&gt; I decided to give it a shot in implementing full DNS/DNSSEC resolution support
&gt;&gt; for Tor, here's the branch:
&gt;&gt;
&gt;&gt; https://github.com/hiviah/tor
&gt; 
&gt; So it looks like Tor would get two new libraries linked in, and exit
&gt; relays would inherit whatever security/stability issues libunbound has
&gt; since clients can basically hand them packets that they have to parse
&gt; and deal with.

In my implementation, client sends only query string and RR-type (16-bit
integer), relay builds the actual query packet. Thus no "funny multiple
queries", leaking of transaction IDs or other corner cases. Flags are set to
"default recursive query" when relay makes the query (if anyone wants to e.g.
query an authoritative server directly, he needs to make a "normal" TCP
connection over Tor). Note that libunbound links with ldns itself.

I understand your concern about adding additional binary dependencies. I can try
fuzzing libunbound and ldns - I've found some issues in Knot DNS server this
way. It's no model-checking, but it has the capacity to unveil weird bugs. (So
far I've "bent" libunbound quite hard while using in various tools and from
experience I can say it's pretty solid - not a single segfault or abort due to
memory corruption.)

&gt; The previous hack recommendation had been for the client to use ttdnsd
&gt; to run dns queries as normal Tor TCP flows:
&gt; https://gitweb.torproject.org/ioerror/ttdnsd.git
&gt; https://gitweb.torproject.org/ioerror/ttdnsd.git/blob_plain/HEAD:/README.TorDNS
&gt; which resolves the "what about answers bigger than Tor's cell size"
&gt; question, as well as the "are we really sure we want a whole dns server
&gt; implementation inside Tor" question, but leaves such niggling issues as
&gt; "so do you direct the streams to 8.8.8.8, or what?" It also has the
&gt; advantage that 8.8.8.8 runs a single known version of its nameserver,
&gt; rather than a collection of exit relays that each offer whichever version
&gt; they linked.

There are few open recursive DNS (also validating) resolvers besides Google's I
know of:

    149.20.64.20 (DNS-OARC)
    217.31.204.130 (CZ.NIC - my employer, just saying to get
conflict-of-interest out of the way)

Concerning Google's resolvers: I am pretty sure that there are many machines
running different software "hidden" behind a load-balancer of 8.8.8.8 and
8.8.4.4 IPs. While I was testing DNSSEC over Tor with unbound+socat, sometimes
validation worked and sometimes it didn't.

&gt; What do you think about the tradeoffs here? I'd like Tor to support more
&gt; of dns, but I also think it's important to avoid needing exit relays to
&gt; know all the details.

Short answer: at this point, I'd go for libunbound (seems good enough for the job).

Long answer: we need to gather all the requirements. The "Tor and DNS" thread
raised some important points, like masking client's transaction IDs.
(lib)unbound should employ randomized IDs (in my proto-design I accidentally
side-stepped the issue ;-) )

I looked at the proposals in torspec, references to DNS were mostly related to
IPv6. I can write new spec for DNS resolution, and also fix/rewrite the PoC code
to use begin_dns so that we can have responses longer than cell size.

Little over-engineering: Having unbound server running accessible as
exit-enclave in chroot on relay (with PIE, grsecurity/SELinux/AppArmor or other
hardening) would be really nice, but it would also be a major pain for operators.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131011610</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-31 01:16:10-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On 01/30/2012 10:45 AM, Roger Dingledine wrote:
&gt; On Thu, Jan 26, 2012 at 10:42:53PM +0100, Ondrej Mikle wrote:
&gt;&gt; Also, this seems to be a bug in
&gt;&gt; relay.c:connection_edge_process_relay_cell_not_open(), the
&gt;&gt; RELAY_COMMAND_RESOLVED case:
&gt;&gt;
&gt;&gt;     answer_len = cell-&gt;payload[RELAY_HEADER_SIZE+1];
&gt;&gt;     if (rh-&gt;length &lt; 2 || answer_len+2&gt;rh-&gt;length) {...}
&gt;&gt;
&gt;&gt; Payload is accessed before checking bounds.
&gt; 
&gt; cell-&gt;payload is a fixed-size array. It's going to be there no matter
&gt; what values are in it.
&gt; 
&gt; Unless I'm misunderstanding you?

You're right. For some reason I thought it was malloc-ed buffer, but it's not.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131150421</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 15:04:21-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Mon, Jan 30, 2012 at 1:34 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; So it looks like Tor would get two new libraries linked in, and exit
&gt; relays would inherit whatever security/stability issues libunbound has
&gt; since clients can basically hand them packets that they have to parse
&gt; and deal with.

FWIW, I'm okay thinking about adding new library dependencies so long
as the libraries are portable enough; libunbound and ldns have a
reasonably good reputation.  (And our friends at NLnet labs probably
wouldn't mind another bunch of users.)

I believe that as we add dnssec support, we are going to cross the
threshold of stuff we'd be willing to clone ourselves, since writing
our own dnssec code would be absurd.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131161706</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-01-31 16:17:06-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Thu, Jan 26, 2012 at 3:42 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt; Hi,
&gt;
&gt; I decided to give it a shot in implementing full DNS/DNSSEC resolution support
&gt; for Tor, here's the branch:
&gt;
&gt; https://github.com/hiviah/tor
&gt;
&gt; ATM the biggest limitation is that reply DNS packet must fit in a single cell
&gt; (i.e. max size is RELAY_PAYLOAD_SIZE).
&gt;
&gt; How it's implemented:
&gt;
&gt; There's new command SOCKS_COMMAND_RESOLVE_FULL for SOCKS interface and new cells
&gt; RELAY_COMMAND_RESOLVE(D)_FULL. The RESOLVE_FULL cell contains query string and
&gt; RR-type, RESOLVED_FULL just the DNS packet in wire format.
&gt;
&gt; Resolving is implemented via libunbound on the relay's side, ldns parses packet
&gt; on client's side.
&gt;
&gt; The tor-resolve now uses the new SOCKS command and accepts -t parameter with
&gt; RR-type (numeric, default 1 - RR-type 'A'), e.g.:
&gt;
&gt; ./src/tools/tor-resolve -t 28 lupa.cz localhost:10050
&gt;
&gt; Packet size: 319
&gt; Flags: qr: 1, aa: 0, tc: 0, rd: 1, cd: 0, ra: 1, ad: 1
&gt; -- Rcode: NOERROR
&gt; -- Opcode: QUERY
&gt; -- Question section
&gt; lupa.cz.        IN      AAAA
&gt; -- Answer section
&gt; lupa.cz.        600     IN      AAAA    2001:67c:68::7b
&gt; lupa.cz.        600     IN      RRSIG   AAAA 5 2 600 20121022235305 20111023235305 8130 lupa.cz.
&gt; wFdVqKCEh4Nmac3v5K9y6HT+aIBAtF4Q9QIqHjlAl/ljp4m5TKkgKCF083zFTMh0LqfwdODfQdSNTKAwO55hyw==
&gt; -- Authority section
&gt; lupa.cz.        600     IN      NS      ns.iinfo.cz.
&gt; lupa.cz.        600     IN      NS      ns6.adminit.cz.
&gt; lupa.cz.        600     IN      RRSIG   NS 5 2 600 20121022235305 20111023235305 8130 lupa.cz.
&gt; SpqkpBlK1dzrfACHh3yfUp01Vr/w9qzVYQms4RDXNQZW1Hwr5WYMHIuGrFEgOOrjyg1vB01HENXJf4i2ISx51g==
&gt; -- Additional section
&gt;
&gt;
&gt; Other implementation notes:
&gt; - some checks like whether private address is resolved are missing (also a
&gt; whitelist of allowed RR-types might be implemented)
&gt; - in the SOCKS5 request, RR-type is hacked onto port number
&gt; - in SOCKS5 reply, high byte of length is hacked onto SOCKS5 reserved byte
&gt; - libunbound supports async resolving, for now synchronous is used
&gt; - there are more details, grep FIXDNS in code
&gt; - Makefile.am's have -lldns and -lunbound hardwired
&gt; - new code may not be pretty at some places (getting to know Tor code)
I've got a more basic question: does the OP get enough information to
validate the DNSSEC data, or does it have to trust the OR? I don't
quite know enough to tell from the above.
Sincerely,
Watson Ladd



-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120131190827</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-31 19:08:27-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On 01/31/2012 05:17 PM, Watson Ladd wrote:
&gt; I've got a more basic question: does the OP get enough information to
&gt; validate the DNSSEC data, or does it have to trust the OR? I don't
&gt; quite know enough to tell from the above.

I forgot to mention: validation on the client side is not finished in the PoC
code. Both ldns and libunbound are capable of DNSSEC validation (libunbound has
simpler API, thus lower chance in making mistakes).

Trust anchors (for root zone and maybe others) would be simply in the
configuration file and distributed with Tor.

I don't know yet what the best API on the client side would be. For example,
there's an evdns server code in
connection_edge.c:connection_ap_handshake_socks_resolved() - the "if
(ENTRY_TO_EDGE_CONN(conn)-&gt;is_dns_request)" branch. Is the evdns server actively
used?

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131203533</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-31 20:35:33-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Tue, Jan 31, 2012 at 10:04:21AM -0500, Nick Mathewson wrote:
&gt; On Mon, Jan 30, 2012 at 1:34 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; &gt; So it looks like Tor would get two new libraries linked in, and exit
&gt; &gt; relays would inherit whatever security/stability issues libunbound has
&gt; &gt; since clients can basically hand them packets that they have to parse
&gt; &gt; and deal with.
&gt; 
&gt; FWIW, I'm okay thinking about adding new library dependencies so long
&gt; as the libraries are portable enough; libunbound and ldns have a
&gt; reasonably good reputation.  (And our friends at NLnet labs probably
&gt; wouldn't mind another bunch of users.)
&gt; 
&gt; I believe that as we add dnssec support, we are going to cross the
&gt; threshold of stuff we'd be willing to clone ourselves, since writing
&gt; our own dnssec code would be absurd.

I totally agree that writing our own dnssec code would be absurd.

But I'm confused here about why we're adding dns support to Tor itself.
Are we doing it to be able to proxy more requests from applications to
dns servers? Or are we doing it because the Tor client itself wants to
be able to learn the answers to dnssec questions?

If it's the former, then we should try as much as we can to *not* learn
the details of the protocol. After all, Tor doesn't have an ssh protocol
parser or validator, but it can proxy ssh traffic just fine.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120201012653</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-01 01:26:53-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On 01/31/2012 09:35 PM, Roger Dingledine wrote:
&gt; 
&gt; I totally agree that writing our own dnssec code would be absurd.
&gt; 
&gt; But I'm confused here about why we're adding dns support to Tor itself.
&gt; Are we doing it to be able to proxy more requests from applications to
&gt; dns servers? Or are we doing it because the Tor client itself wants to
&gt; be able to learn the answers to dnssec questions?
&gt; 
&gt; If it's the former, then we should try as much as we can to *not* learn
&gt; the details of the protocol. After all, Tor doesn't have an ssh protocol
&gt; parser or validator, but it can proxy ssh traffic just fine.

This question comes up very often when dnssec is considered: where should it be
implemented? At client program? A daemon in OS? A server on a network of an ISP?
There is never an unanimous agreement, dnssec just seems to "not exactly fit
anywhere" (it's not a transport protocol and it's not really an application
protocol; it's just at the same level as DNS).

I thought a bit about (dis)advantages of each, some key points:

1. open DNS resolver listening on TCP somewhere

+ works with current Tor implementation
- there is potential loss of anonymity - there are not many open resolvers and
the issue with transaction IDs was already mentioned
- bit worse performance (creating multiple connections when validating on
client's side)

2. unbound running locally on OR (as exit-enclave)

+ requires only change in packaging
- more code needs to be reviewed compared to libunbound (more code =&gt; higher
chance of bug)
- multiple connections when validating

3. libunbound in Tor

+ less code to review than complete unbound
- implementation is more complex

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120201014850</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-02-01 01:48:50-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Tue, Jan 31, 2012 at 2:57 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Tue, Jan 31, 2012 at 3:35 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt; On Tue, Jan 31, 2012 at 10:04:21AM -0500, Nick Mathewson wrote:
&gt;&gt;&gt; On Mon, Jan 30, 2012 at 1:34 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt;&gt; &gt; So it looks like Tor would get two new libraries linked in, and exit
&gt;&gt;&gt; &gt; relays would inherit whatever security/stability issues libunbound has
&gt;&gt;&gt; &gt; since clients can basically hand them packets that they have to parse
&gt;&gt;&gt; &gt; and deal with.
&gt;&gt;&gt;
&gt;&gt;&gt; FWIW, I'm okay thinking about adding new library dependencies so long
&gt;&gt;&gt; as the libraries are portable enough; libunbound and ldns have a
&gt;&gt;&gt; reasonably good reputation.  (And our friends at NLnet labs probably
&gt;&gt;&gt; wouldn't mind another bunch of users.)
&gt;&gt;&gt;
&gt;&gt;&gt; I believe that as we add dnssec support, we are going to cross the
&gt;&gt;&gt; threshold of stuff we'd be willing to clone ourselves, since writing
&gt;&gt;&gt; our own dnssec code would be absurd.
&gt;&gt;
&gt;&gt; I totally agree that writing our own dnssec code would be absurd.
&gt;&gt;
&gt;&gt; But I'm confused here about why we're adding dns support to Tor itself.
&gt;&gt; Are we doing it to be able to proxy more requests from applications to
&gt;&gt; dns servers? Or are we doing it because the Tor client itself wants to
&gt;&gt; be able to learn the answers to dnssec questions?
&gt;&gt;
&gt;&gt; If it's the former, then we should try as much as we can to *not* learn
&gt;&gt; the details of the protocol. After all, Tor doesn't have an ssh protocol
&gt;&gt; parser or validator, but it can proxy ssh traffic just fine.
&gt;
&gt; I guess it depends on what you think should happen for SOCKS+hostname
&gt; connections.
&gt;
&gt; One possibility is this:
&gt;
&gt; Browser -&gt; Tor Client: "SOCKS5: Connect to www.example.com,port 80"
&gt; Tor client -&gt; Tor net -&gt; Exit node: "BEGIN+: Connect to
&gt; www.example.com, port 80, and answer the following DNS questions about
&gt; it."
&gt; Exit node -&gt; Tor net-&gt; Tor Client: "CONNECTED+: Connection is open.
&gt; Here's a bunch of DNS replies for you."
&gt; Tor Client -&gt; Browser: "SOCKS5 connection complete."
This would also break things like DNSSEC certificate stapling without
some hackery or standards.
&gt;
&gt; But that would require that Tor recognize DNSSEC traffic.
&gt;
&gt; Another possibility is this:
&gt;
&gt; Browser's resolver -&gt; Tor Client (as DNSPort): "Resolve
&gt; www.example.com, give me an A, and give me DNSSec stuff too."
&gt; Tor Client-&gt; Tor net-&gt; Tor Exit: "Yeah, resolve that stuff."
&gt; Tor Exit -&gt; Tor net -&gt; Tor client: "Here's your answer."
&gt; Tor client -&gt; Browser's resolver: "Here's that A record you wanted,
&gt; and some dnssec stuff."
&gt; Browser -&gt; Tor client: "Okay, now connect there."
&gt; Tor client -&gt; Tor net -&gt; Tor exit: "Connect to &lt;ip address&gt;:80!"
&gt; Exit node -&gt; Tor net-&gt; Tor Client: "CONNECTED: Connection is open."
&gt; Tor Client -&gt; Browser: "SOCKS5 connection complete."
&gt;
&gt; But that would involve an extra round trip that I'd rather save if possible.
We could cross our fingers and be optimistic, opening a connection to
the server queried. Probably a bad idea.
&gt;
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120801202357</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-08-01 20:23:57-0400</timestampReceived><subject>[tor-dev] [GSoC] Vidalia Report - Week 10</subject><body>

[Attachment #2 (multipart/alternative)]


Hello there,

I have completed the hidden services plugin.

I rewrote the hidden service widget as a qwidget subclass and implemented
functionality
to browse for the hidden service directory. I spent the last week testing
the plugin and
fixing up port sanity check and UI issues. I have squashed the commits and
pushed it
to https://github.com/feroze/vidalia-plugins/tree/hiddenservice. It is
currently awaiting being
merged into the vidalia-plugins repo.

I'm working on the bandwidth scheduler's tablewidget UI to allow drag
selection similar to
uTorrent's (http://imgur.com/a/LLZdI).

[Attachment #5 (text/html)]

Hello there,&lt;br&gt;&lt;br&gt;I have completed the hidden services plugin. &lt;br&gt;&lt;br&gt;I rewrote \
the hidden service widget as a qwidget subclass and implemented functionality&lt;br&gt;to \
browse for the hidden service directory. I spent the last week testing the plugin \
and&lt;br&gt; fixing up port sanity check and UI issues. I have squashed the commits and \
pushed it &lt;br&gt;to &lt;a href="https://github.com/feroze/vidalia-plugins/tree/hiddenservice"&gt;https://github.com/feroze/vidalia-plugins/tree/hiddenservice&lt;/a&gt;. \
It is currently awaiting being&lt;br&gt; merged into the vidalia-plugins \
repo.&lt;br&gt;&lt;br&gt;I'm working on the bandwidth scheduler's tablewidget UI to allow \
drag selection similar to&lt;br&gt;uTorrent's (&lt;a \
href="http://imgur.com/a/LLZdI"&gt;http://imgur.com/a/LLZdI&lt;/a&gt;).&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120801205752</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-08-01 20:57:52-0400</timestampReceived><subject>[tor-dev]  TorExport with Unit Tests</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I have created a ticket on Trac that links to the code on my github, which
is ready for a code review.  This includes both TorExport
(stem/descriptor/export.py) which has already received a quick review and
the unit tests (test/unit/descriptor/export.py).

The ticket (#6512) can be found at
https://trac.torproject.org/projects/tor/ticket/6512.

-Erik &amp; Megan

[Attachment #5 (text/html)]

Hello, &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have created a ticket on Trac that links to the code on \
my github, which is ready for a code review.  This includes both TorExport \
(stem/descriptor/export.py) which has already received a quick review and the unit \
tests (test/unit/descriptor/export.py).&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The ticket (#6512) can be found at &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/6512"&gt;https://trac.torproject.org/projects/tor/ticket/6512&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Erik \
&amp; Megan&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120801213541</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-08-01 21:35:41-0400</timestampReceived><subject>Re: [tor-dev] How to best support tor 0.2.3.x in Tor Browser Bundle?</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Erinn Clark (erinn@torproject.org):

&gt; * Mike Perry &lt;mikeperry@torproject.org&gt; [2012:07:31 14:56 -0700]: 
&gt; &gt; Quick recap from #tor-dev IRC convo with Nick, Roger, and Andrew:
&gt; &gt; 
&gt; &gt; We need to get a usable tor 0.2.3.x-rc bundle out RSN so we can declare
&gt; &gt; it "stable", but there are concerns that using Firefox 14 with this will
&gt; &gt; continue to cause unexpected problems and otherwise scare people away
&gt; &gt; from testing tor 0.2.3.x enough.
&gt; 
&gt; How unstable is Firefox 14 though? It is Firefox's stable release, after all.
&gt; Are the recently-released bundles unusable?

Unclear, but probably OK now? I had to rewrite my pipelining patch at
the last minute due to massive changes in the Firefox 14 pipelining
code. That rewrite introduced the crash bug. Once fixed, my test Firefox
build behaved fine for a while. I will switch to using it as my main web
browser as well.
 
&gt; &gt; A third option is to just keep doing English-only maint-2.3 builds
&gt; &gt; back-to-back until tor-qa stops reporting crash bugs or strange issues.
&gt; 
&gt; I think there's a fourth option, which is urge people on the blog, via twitter,
&gt; etc, to test the alpha/rc bundles, with me making a commitment to do frequent
&gt; releases for any issues that pop up. 

Yes, this sounds great. I also commit to fixing reproducible crash bugs
immediately.

Roger also agrees that English-only builds are just fine for the
maint-2.3 bundles, at least until we get them to be more stable.

&gt; So depending on the timeline people have in mind, my suggestion is to do a big
&gt; push on the aforementioned social networks and shake out as many bugs in the
&gt; next week as we can, then iterate. But my opinion depends a bit on how
&gt; severe you think the Firefox 14 problem is.

I can fix reproducible crash bugs quickly, especially if a particular
website reliably (or even semi-reliably) triggers the crash.

If we have random instability that is hard to reproduce, that might be a
different story and may require dropping random suspicious patches.
I think we can just cross that bridge when it starts burning, though.

Therefore, as long as you're good building these English TBB alphas at a
pretty quick rate, I think we now have a plan.

I will commit my new FF14 patches, and let's start the builds!


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120801220738</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-08-01 22:07:38-0400</timestampReceived><subject>[tor-dev] George's status report: July 2012</subject><body>

Hi,

this is a list of some Tor stuff I did during July:

- Got #3589 merged in 0.2.4!

- Worked with Arturo on daphn3, an OONI plugin which, given a censored
  TCP conversation, tries to bruteforce the fingerprint used by the
  DPI box [0]. Unfortunately, it's still not quite ready for real life
  use!

- Helped around with the problem of measuring the safety of the Tor
  network [1].

- Helped Brandon with his GSoC project [2].

- Talked with George Danezis about anomaly detection and his automatic
  censorship detection tool [3]. He has many ideas on improving his
  current anomaly detection model but they don't seem to work well in
  practice. I will try to read some stuff about anomaly detection in
  case I can help out.

  Meanwhile, Philipp Winter is interested in applying a different
  anomaly detection model to censorship detection and seeing how well
  it will work.

[0]: https://speakerdeck.com/u/hellais/p/ooni-and-daphn3
[1]: https://blog.torproject.org/blog/research-problem-measuring-safety-tor-network
     https://trac.torproject.org/projects/tor/ticket/6460
[2]: http://stepthreeprivacy.org/
[3]: https://lists.torproject.org/pipermail/tor-dev/2011-September/002923.html
     https://trac.torproject.org/projects/tor/ticket/6067
     https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-censorship-events
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120802091831</emailId><senderName>Michele_OrrÃ¹</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-08-02 09:18:31-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] Pluggable Transports in Python Status Update - More Transports</subject><body>

&gt; http://github.com/blanu/py-obfsproxy
I took a quick look to the code. That's extremely well documented, and
this is awesome; but I have a few question/suggestions.
- Is there a reason for using src/ instead of the standard python
project structure ® ? [0]
- server.py:143[1]could be replaced with one line of code, using
str.join() and str.format (or the '%' operator). And it's quicker :D

[0] http://jcalderone.livejournal.com/39794.html
[1]  https://github.com/blanu/pyptlib/blob/master/src/pyptlib/server.py#L143


-- 
Ã¹
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120802194643</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-08-02 19:46:43-0400</timestampReceived><subject>[tor-dev] We have funding for another browser hacker</subject><body>

[Attachment #2 (multipart/signed)]


Hey everyone,

We're looking to add another Firefox developer to our team to help
improve Tor Browser.

For details on the position, experience needed, and how to apply, please
see the job posting:
https://www.torproject.org/about/jobs-browserhacker.html.en


--=20
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120803100739</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-03 10:07:39-0400</timestampReceived><subject>[tor-dev] Karsten's status report July 1--31</subject><body>

Hi all,

here's what I did in July.  The numbers in [] are the ticket number and
percentage of my total developer time in July.

Best,
Karsten


Briefly looked into Maxmind's GeoIP database that started labeling
relays as coming from the "A1 -- Anonymous Proxy" country.  We'll need
to fix that, or users won't be able to exclude relays by country, and
our country-based usage statistics will deteriorate.  We switched back
to the May database for now, but that's only a short-term solution.
[#6266, 2%]

Made the consensus-health script print out diffs of recommended version
sets.  [#6261, 1%]

Fixed a problem with Tomcat running out of memory on the metrics server,
which was related to Java's leap second bug.  [#6270, 2%]

Looked up the number of crypto operations on a typical relay for
designing a hardware Tor device.  [#6369, 5%]

Started converting the first five old tech reports to a common Tor Tech
Report format.  Zack was really helpful here by writing an improved
LaTeX template and tweaking the existing reports.  [#5405, 8%]

Helped delber write a Python script to compute statistics about current
relays.  This script is the second really useful front-end for the
Onionoo service.  [#6329, 12%]

Extracted probabilities of relays to be selected for a given position in
order to add more graphs to Onionoo.  The next step will be to extend
Atlas to display the new graph data.  [#5755, 31%]

Helped Sathya write a script to extract data on network entropy and
degree of anonymity over time.  Ran the script on local tiny number
cruncher, which kept it busy for 12 hours, and plotted graphs.  [#6232, 14%]

Fixed an issue with too frequent consensus-health messages reporting
expiring certs.  [N/A, 1%]

Extracted and graphed cumulative probabilities of clients selecting
among the biggest k exits.  [#6443, 13%]

Discussed and prepared removing GetTor statistics from all metrics
codebases.  [#6395, 3%]

Made metrics website graph colors easier to distinguish for people with
color-deficient vision.  [#6463, 2%]

Reviewed Walter's new interactive metrics graphs on
http://tigerpa.ws/tor_metrics/ and fixed a few metrics bugs while doing
so.  [N/A, 6%]
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120803111205</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-08-03 11:12:05-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report (Android?)</subject><body>

[Attachment #2 (multipart/alternative)]


I tried to run APAF on android during the last days. I am updating this
toping with what I've discovered so far.


2012/6/21 Fabio Pietrosanti (naif) &lt;lists
&lt;lists@infosecurity.ch&gt;@&lt;lists@infosecurity.ch&gt;
infosecurity.ch &lt;lists@infosecurity.ch&gt;&gt;:
&gt; On 6/21/12 7:28 AM, meejah wrote:
&gt;&gt; meejah &lt;meejah &lt;meejah@meejah.ca&gt;@ &lt;meejah@meejah.ca&gt;meejah.ca&lt;meejah@me=
ejah.ca&gt;&gt;
writes:
&gt;&gt;
&gt;&gt;&gt; That used to be an optional dependency, so I will put that code back
&gt;&gt;&gt; in (actually, probably just take out the dependency for psutils and
&gt;&gt;&gt; report PIDs instead). It's really just "nice to have" anyway and
&gt;&gt;&gt; users who want that could of course easily do it themselves.
&gt;&gt;
&gt;&gt; I've just pushed version 0.5 which removes psutil dependencies.
After removing psutil, txtorcon was successfully imported from python.

But I see another issue, not strictly related to txtorcon but to the
standard library's temp module. Here a screenshot.

http://imageshack.us/f/96/schermata2008245614120a.png/

Apparently what happens is that the tempfile module does not successfully
create the temporary directory for hosting the configuration.

Note: I am using the same tor binary of Orbot, placed in
data/data/org.torproject.android/app_bin/ as you can see from
https://github.com/mmaker/APAF/blob/master/scripts/python.sh

&gt;
&gt; Which maybe the relationship between APAF and Guardian Project's
&gt; ORLib/OrBot?
&gt;
&gt; I mean, we should not "reinvent the wheel", however APAF is going to
&gt; provide Python developers an easy way to build desktop/server
applications.

I think  we can discuss this on #tor-dev.

 --

=C3=B9

[Attachment #5 (text/html)]

&lt;p&gt;I tried to run APAF on android during the last days. I am updating this toping \
with what I've discovered so far.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;2012/6/21 Fabio Pietrosanti \
(naif) &lt;&lt;a href="mailto:lists@infosecurity.ch" target="_blank"&gt;lists&lt;/a&gt;&lt;a \
href="mailto:lists@infosecurity.ch" target="_blank"&gt;@&lt;/a&gt;&lt;a \
href="mailto:lists@infosecurity.ch" target="_blank"&gt;infosecurity.ch&lt;/a&gt;&gt;:&lt;br&gt;



&gt; On 6/21/12 7:28 AM, meejah wrote:&lt;br&gt;
&gt;&gt; meejah &lt;&lt;a href="mailto:meejah@meejah.ca" target="_blank"&gt;meejah&lt;/a&gt;&lt;a \
href="mailto:meejah@meejah.ca" target="_blank"&gt;@&lt;/a&gt;&lt;a href="mailto:meejah@meejah.ca" \
target="_blank"&gt;meejah.ca&lt;/a&gt;&gt; writes:&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&gt;&gt; That used to be an optional dependency, so I will put that code back&lt;br&gt;
&gt;&gt;&gt; in (actually, probably just take out the dependency for psutils and&lt;br&gt;
&gt;&gt;&gt; report PIDs instead). It's really just "nice to have" \
anyway and&lt;br&gt; &gt;&gt;&gt; users who want that could of course easily do it \
themselves.&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&gt; I've just pushed version 0.5 which removes psutil dependencies.&lt;br&gt;After \
removing psutil, txtorcon was successfully imported from python.&lt;/p&gt;&lt;p&gt;But I see \
another issue, not strictly related to txtorcon but to the standard library's \
temp module. Here a screenshot.  &lt;/p&gt;


&lt;p&gt;&lt;a href="http://imageshack.us/f/96/schermata2008245614120a.png/" \
target="_blank"&gt;http://imageshack.us/f/96/schermata2008245614120a.png/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Apparently \
what happens is that the tempfile module does not successfully create the temporary \
directory for hosting the configuration.  &lt;/p&gt;


&lt;p&gt;Note: I am using the same tor binary of Orbot, placed in \
data/data/org.torproject.android/app_bin/ as you can see from  &lt;a \
href="https://github.com/mmaker/APAF/blob/master/scripts/python.sh" \
target="_blank"&gt;https://github.com/mmaker/APAF/blob/master/scripts/python.sh&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;
&gt;&lt;br&gt;
&gt; Which maybe the relationship between APAF and Guardian Project's&lt;br&gt;
&gt; ORLib/OrBot?&lt;br&gt;
&gt;&lt;br&gt;
&gt; I mean, we should not "reinvent the wheel", however APAF is going \
to&lt;br&gt; &gt; provide Python developers an easy way to build desktop/server \
applications.&lt;/p&gt;&lt;p&gt;I think   we can discuss this on #tor-dev.&lt;/p&gt;&lt;p&gt;  --  &lt;/p&gt;&lt;p&gt; \
ù&lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120803204511</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-08-03 20:45:11-0400</timestampReceived><subject>[tor-dev] Ticket #5749</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I have attached a patch: 0001-Faravahar-added.patch.asc to this ticket.
Faravahar is very much ready!

The patch is gpg signed, let me know if there are any other actions
required on my part.

All the best,
SiNA

- -- 
"If I had eight hours to chop down a tree, I?d spend the first six of
them sharpening my axe." -Abraham Lincoln
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJQHDhXAAoJEJPBwXYLR9Vt2Q0P/jRRUvrjB0AcoFagw9rUZzFr
1Os0RYPk1j9HXz30xJy9u+3sLQAaRQovpgvRJJv6GY0Jb+RCI9A4k6ExaHO4nxHq
OJPhW6HcWa+w6QcFxIb4GizYVKthxcxcBPfVGPXvzH/U/gkGiuJYGNTXeCUhZNi9
JI5gtfOriwp7pspcXyufLZcAcjGE+8LKlwnEhqNeMhw6bGvqWFuueb5ZYLQwuOn/
ngtLFsD1NnAXgTAJY9wFS9tTmDX3wISKzMq726lKieOBqOH2v4+nkusoq8CUNfjK
NPq8MsrtHEtxsEdR5nMy2PDROKHsUNclO9mV8+W/K5nRDjJU9wzgBlX+fttNZ5H6
AH9+1f6Tr4Z1KzLfNfBrwoq4kCgkIIvCkYl4xL+0RboFuITZuqqKwE0tA0MDMh6X
uAKSkB7WsXrVbKpYVfppD9Z2blKmJ80gLvOWkuiptoe9mI/EhmfnzlwdGYzcp+80
A3ovAI7JADCQNYQjaVST1nudVy0nUGua957JKgry6P/GM83nj1p7krIKs0FzQtly
pG6tyuLySFKFyhfdZ3jkpi/fJwrffDgXVrT2yXh4hljTaHd5ym6WjFrHcnoBdLLx
895jZhaFh65rBpLpq1yYa4yoO0+J0MKTRy5qDEgzZoq6Y5TjagEk3tKCmIF62dW7
18iv/9Dp/+6eZbTOjnN4
=UQ4G
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120804061927</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-08-04 06:19:27-0400</timestampReceived><subject>[tor-dev] Sathya's status report - July 2012</subject><body>

July 2012

- Attended Tor dev meeting and hackfest in Florence in the first week of July.

- Talked to arma, Karsten and asn about helping out with certain
metrics tasks(#6460, #6232) to figure out the safety of the Tor
network. Hopefully, I can extend this to something bigger and hack on
it for my undergrad thesis.

- Hacked on a entropy-over-time script(#6232) with help from Karsten,
phw and asn.

- Pair programmed with neena, helping him with his GSoC work(the
consensus and votes descriptor parser).

- Discussed pyonionoo components on the tor-dev mailing list[0].

- Hacked on the web service for pyonionoo for a bit at the hackfest.
Megan is currently refactoring it and making it awesome.

- Started work on the  pyonionoo backend(#6452) -
  - Completed the network status document parser for summary documents
  - Taught pyonionoo about stem to parse server descriptors for
details documents
  - Next up - Refactor this and add bandwidth documents.

- Finished ExitPolicy parser for stem(#5454), which Damian ended up
rewriting mostly.

- Discussed the proper way to check if the Tor control socket is
closed or not(#6234) which led to "Tor should have a PING command to
check"(#6354), but arma and nickm are of the opinion that we shouldn't
have any more pre-auth commands since it makes Tor more complex / less
safe. Stem now makes a best-effort call (errors ignored) since we just
want the socket to shut down and we don't need the QUIT to succeed to
do that.

- Discussed about setting up a code review tool(#6402). I've set up an
ec2 instance with ReviewBoard and will hopefully set up the repos with
some help from Damian soon-ish.

[0] - https://lists.torproject.org/pipermail/tor-dev/2012-July/003731.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120804101009</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-08-04 10:10:09-0400</timestampReceived><subject>Re: [tor-dev] keep .onion address</subject><body>

On Sat, Aug 04, 2012 at 10:54:42AM +0200, Salva . wrote:
&gt; Hello, I have an .onion website, I need to format my HDD and I don't wanna to lose my .onion address.
&gt; How can I keep this address after formatting my HDD ?
&gt; Thanks u all guys 		 	   		  

In the future, this is a better question for tor-talk than for tor-dev.

The short answer is to keep the directory that the HiddenServiceDir line
in your torrc file points to. For convenience, I guess that means you
might want to keep your torrc file too.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120804123730</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-04 12:37:30-0400</timestampReceived><subject>Re: [tor-dev] OnionOO protocol questions</subject><body>



On 8/4/12 1:45 AM, Karsten Loesing wrote:
&gt; Hi Norman,
&gt;
&gt; On 8/3/12 9:42 PM, Norman Danner wrote:
&gt;&gt; If I understand the weights documents correctly, there is no one
&gt;&gt; consensus weight for a given router.  What exactly is the ordering we
&gt;&gt; should use when the request asks to order by consensus weight?
&gt;&gt;
&gt;&gt; It seems like determining the consensus weights of the selected relays
&gt;&gt; could be a relatively slow process, because at least with the
&gt;&gt; filesystem-backed approach we are using right now, each individual
&gt;&gt; weights file has to be opened and read.  Is this correct, or am I
&gt;&gt; missing something here?
&gt;
&gt; Ordering by consensus weight (or any other field) is independent of the
&gt; returned document type, like weights documents.  The fact that weights
&gt; documents contain consensus weight histories doesn't change that.  You'd
&gt; order by the latest known consensus weight of a relay.  You don't have
&gt; to open and parse all the weights files for that, which would be a
&gt; performance disaster.
&gt;
&gt; The way how the current Java Onionoo works is that we do the filtering
&gt; and ordering only based on the summary helper file.  The result is an
&gt; ordered list of fingerprints.  Only in the last step we look at the
&gt; requested document type and fetch documents from disk by fingerprint.
&gt;
&gt; The Python Onionoo should probably do the same thing but using a
&gt; database.  There would be a single database table that can be used to
&gt; filter and sort results.  Those results can then be joined with document
&gt; tables by fingerprint to fetch all the JSON strings to return.

This is the structure I was imagining we would follow.  Thanks.

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
  Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120801195656</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-08-01 19:56:56-0400</timestampReceived><subject>[tor-dev] [GSoC] Pluggable Transports in Python Status Update - More Transports</subject><body>

[Attachment #2 (multipart/alternative)]


So far I've implemented Dust and obfs3 and I'm putting the finishing
touches on obfs2. I've also rewritten the pluggable transport API and
rewritten the transport plugins to use this new API.

The API now provides 4 events: start, encodedReceived, decodedReceived, and
end. The plugins implement callbacks for these events as well as an
__init__(self, decodedSocket, encodedSocket) method that provides virtual
sockets to the plugins. The virtual sockets have read and write methods.
Control is transferred to the plugin when one of the event callbacks is
called, in at which time the plugin can read and write data to the socket
buffers. When the callback returns, control is transferred back to the
framework, which takes care of reading and writing between the buffers and
the actual sockets.

The next step is testing of all of the plugins and documenting the plugin
API. In particular I expect that the python obfs2 implementation will not
work with the C obfs2 implementation due to undocumented assumptions in the
protocol implementation, so these will need to be worked out.
Code: http://github.com/blanu/pyptlib and
http://github.com/blanu/py-obfsproxy
Blog: http://stepthreeprivacy.org/

[Attachment #5 (text/html)]

&lt;p style="color:rgb(0,0,0);font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;font-style:normal;font-v \
ariant:normal;font-weight:normal;letter-spacing:normal;line-height:18px;text-align:-we \
bkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt; \
So far I've implemented Dust and obfs3 and I'm putting the finishing touches \
on obfs2. I've also rewritten the pluggable transport API and rewritten the \
transport plugins to use this new API.&lt;/p&gt;&lt;p \
style="color:rgb(0,0,0);font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;font-style:normal;font-v \
ariant:normal;font-weight:normal;letter-spacing:normal;line-height:18px;text-align:-we \
bkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt; \
The API now provides 4 events: start, encodedReceived, decodedReceived, and end. The \
plugins implement callbacks for these events as well as an __init__(self, \
decodedSocket, encodedSocket) method that provides virtual sockets to the plugins. \
The virtual sockets have read and write methods. Control is transferred to the plugin \
when one of the event callbacks is called, in at which time the plugin can read and \
write data to the socket buffers. When the callback returns, control is transferred \
back to the framework, which takes care of reading and writing between the buffers \
and the actual sockets.&lt;/p&gt; &lt;p style="color:rgb(0,0,0);font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;font-style:normal;font-v \
ariant:normal;font-weight:normal;letter-spacing:normal;line-height:18px;text-align:-we \
bkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt; \
The next step is testing of all of the plugins and documenting the plugin API. In \
particular I expect that the python obfs2 implementation will not work with the C \
obfs2 implementation due to undocumented assumptions in the protocol implementation, \
                so these will need to be worked out.&lt;/p&gt;
Code: &lt;a href="http://github.com/blanu/pyptlib"&gt;http://github.com/blanu/pyptlib&lt;/a&gt; \
and &lt;a href="http://github.com/blanu/py-obfsproxy"&gt;http://github.com/blanu/py-obfsproxy&lt;/a&gt;&lt;br&gt;Blog: \
&lt;a href="http://stepthreeprivacy.org/"&gt;http://stepthreeprivacy.org/&lt;/a&gt;&lt;br&gt; &lt;br \
class="Apple-interchange-newline"&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120804085442</emailId><senderName>"Salva ."</senderName><senderEmail>cybero@hotmail.es</senderEmail><timestampReceived>2012-08-04 08:54:42-0400</timestampReceived><subject>[tor-dev] keep .onion address</subject><body>

[Attachment #2 (multipart/alternative)]


Hello=2C I have an .onion website=2C I need to format my HDD and I don't wa=
nna to lose my .onion address.
How can I keep this address after formatting my HDD ?
Thanks u all guys 		 	   		  =

[Attachment #5 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;style&gt;&lt;!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--&gt;&lt;/style&gt;&lt;/head&gt;
&lt;body class='hmmessage'&gt;&lt;div dir='ltr'&gt;
&lt;div&gt;Hello, I have an .onion website, I need to format my HDD and I don't wanna to \
lose my .onion address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How can I keep this address after \
formatting my HDD ?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks u all guys&lt;/div&gt; 		 	   		  \
&lt;/div&gt;&lt;/body&gt; &lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120803182239</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-03 18:22:39-0400</timestampReceived><subject>[tor-dev] OnionOO protocol questions</subject><body>

Hi Karsten,

A few questions on the Onionoo protocol specification:

If multiple parameters are specified in the GET request, does that imply 
a logical and or a logical or (or something else)?  E.g., suppose the 
GET request has type=relay and lookup=FFFF... .  To me it seems like 
that should return the relay with fingerprint FFFF..., if there is such 
a relay.  But it could also mean return all relays as well as the router 
with fingerprint FFFF... .

The search parameter is described as "Return only relays with the 
parameter value matching the beginning of a nickname, (possibly 
$-prefixed) fingerprint, or IP address..."  Do you mean that the 
parameter value matches the beginning of a nickname, the beginning of a 
(possibly $-prefixed) fingerprint, or is one of the relay IP addresses?

For ordering, what do you mean by "possible fields for ordering are: 
consensus_weight."  This is really two questions.  How is the 
consensus_weight ordering defined when producing a summary document 
(which doesn't include a consensus weight field)?  Can clients not 
request that summary documents be ordered by any of the 'n', 'f', 'a', 
or 'r' fields?

Thanks!

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120803193358</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-03 19:33:58-0400</timestampReceived><subject>Re: [tor-dev] OnionOO protocol questions</subject><body>

Hi Norman,

On 8/3/12 8:22 PM, Norman Danner wrote:
&gt; A few questions on the Onionoo protocol specification:
&gt; 
&gt; If multiple parameters are specified in the GET request, does that imply
&gt; a logical and or a logical or (or something else)?  E.g., suppose the
&gt; GET request has type=relay and lookup=FFFF... .  To me it seems like
&gt; that should return the relay with fingerprint FFFF..., if there is such
&gt; a relay.  But it could also mean return all relays as well as the router
&gt; with fingerprint FFFF... .

It's a logical and.  (Will clarify that in the spec.)

&gt; The search parameter is described as "Return only relays with the
&gt; parameter value matching the beginning of a nickname, (possibly
&gt; $-prefixed) fingerprint, or IP address..."  Do you mean that the
&gt; parameter value matches the beginning of a nickname, the beginning of a
&gt; (possibly $-prefixed) fingerprint, or is one of the relay IP addresses?

It's the beginning of any of the three.  (Will clarify that in the spec,
too.)

&gt; For ordering, what do you mean by "possible fields for ordering are:
&gt; consensus_weight."  This is really two questions.  How is the
&gt; consensus_weight ordering defined when producing a summary document
&gt; (which doesn't include a consensus weight field)?  Can clients not
&gt; request that summary documents be ordered by any of the 'n', 'f', 'a',
&gt; or 'r' fields?

The ordering is, like all parameters, defined independent of the
returned document type.  (Will try to clarify that in the spec, too.)

At the moment, clients can only request ordering by consensus weight,
because that's the first and only thing we needed so far.  In the
future, clients should be able to order by nickname, fingerprint,
address and maybe even the running bit.  Related to the first answer,
clients wouldn't request ordering by the "n" field, but by the
"nickname", regardless of the document they request.  Details documents
probably give a better idea of which fields could be used for ordering.

Hope that makes sense.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120803194203</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-03 19:42:03-0400</timestampReceived><subject>Re: [tor-dev] OnionOO protocol questions</subject><body>

Hi Karsten,

On 8/3/12 3:33 PM, Karsten Loesing wrote:

&gt;
&gt; At the moment, clients can only request ordering by consensus weight,
&gt; because that's the first and only thing we needed so far.  In the
&gt; future, clients should be able to order by nickname, fingerprint,
&gt; address and maybe even the running bit.  Related to the first answer,
&gt; clients wouldn't request ordering by the "n" field, but by the
&gt; "nickname", regardless of the document they request.  Details documents
&gt; probably give a better idea of which fields could be used for ordering.
&gt;
&gt; Hope that makes sense.

Yes, it does, though now I have a couple more questions.

If I understand the weights documents correctly, there is no one 
consensus weight for a given router.  What exactly is the ordering we 
should use when the request asks to order by consensus weight?

It seems like determining the consensus weights of the selected relays 
could be a relatively slow process, because at least with the 
filesystem-backed approach we are using right now, each individual 
weights file has to be opened and read.  Is this correct, or am I 
missing something here?

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120804054547</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-04 05:45:47-0400</timestampReceived><subject>Re: [tor-dev] OnionOO protocol questions</subject><body>

Hi Norman,

On 8/3/12 9:42 PM, Norman Danner wrote:
&gt; If I understand the weights documents correctly, there is no one
&gt; consensus weight for a given router.  What exactly is the ordering we
&gt; should use when the request asks to order by consensus weight?
&gt; 
&gt; It seems like determining the consensus weights of the selected relays
&gt; could be a relatively slow process, because at least with the
&gt; filesystem-backed approach we are using right now, each individual
&gt; weights file has to be opened and read.  Is this correct, or am I
&gt; missing something here?

Ordering by consensus weight (or any other field) is independent of the
returned document type, like weights documents.  The fact that weights
documents contain consensus weight histories doesn't change that.  You'd
order by the latest known consensus weight of a relay.  You don't have
to open and parse all the weights files for that, which would be a
performance disaster.

The way how the current Java Onionoo works is that we do the filtering
and ordering only based on the summary helper file.  The result is an
ordered list of fingerprints.  Only in the last step we look at the
requested document type and fetch documents from disk by fingerprint.

The Python Onionoo should probably do the same thing but using a
database.  There would be a single database table that can be used to
filter and sort results.  Those results can then be joined with document
tables by fingerprint to fetch all the JSON strings to return.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120701175357</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-07-01 17:53:57-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

On Sun, Jul 01, 2012 at 07:06:29PM +0200, Fabian Keil wrote:
&gt; I implemented (partial) optimistic data support for Privoxy about a year
&gt; ago. The code hasn't been committed to the official repository due to the
&gt; documentation challenge outlined above.

Fair enough.  It turns out it never hurts to have the SOCKS client
optimistically write the data to the OP.  As for the OP sending the data
optimistically along the circuit, I'd say "don't mess with the
OptimisticData default setting", but perhaps some Tor devs might chime
in.

[Though many will be travelling to Italy today for the dev meeting.]

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120702080422</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-07-02 08:04:22-0400</timestampReceived><subject>[tor-dev] [GSoC] Stegotorus status update</subject><body>

Hey Tor-devers,

I hope you are enjoying the summer as it's officially started and nobody
can deny that (unless you are on the wrong hemisphere). And sorry for
the delay, I was Internet deprived for a while.

So I'm here to tell you what I did in last two weeks.

Following the advice of Zack, I read the code in
steg directory, where the modules which embed the requested data in http
payloads live. It also deals with http details. I also looked into the
randomness algorithms in stegotorus. I suggested some ideas on improving the
code and I'm waiting for Zack to tell me what he thinks about them. It was a
good investment as now I have a good idea that what is happening where in
the code and it makes the task of applying after-forking obfproxy patches to
stegotorus more feasible.

I had a discussion in irc with the Roger and following the discussion
and sharing my idea with Zack, I
started developing a payload serving system that instead of using a static trace
file assumes that apache is installed on the system and query apache for
the payload. So far I have written the prototype of the class and have
shared my design with Zack.

I also looked into the problem that Polipo (as a typical http proxy)
had with Stegotorus that it does not allow any Stegotorus traffic
through. It turned out that Polipo thinks all Stegotorus GET request are
stored in the local hard drive (as they don't have server name and they
starts with /). Hence, it tries to serve them directly from the disk and
 fails. So I shared that with
Zack as well, and we'll discuss the possible solutions. Although, the
new apache payload system won't have that problem.

Hopefully in two weeks we will have the apache payload in
semi-functional condition.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120618212441</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-18 21:24:41-0400</timestampReceived><subject>[tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

Hi, all!

Since 0.2.3 just entered beta (and will be in release-candidate status
soon if I have anything to say about it!) I wanted to put out a
summary of the Tor proposals that got merged, to the best of my
knowledge, in the Tor 0.2.3.x series.

My next email will summarize still-open proposals.

(Note on credits: I'm copying the listed credits from the proposals,
their acknowledgments sections, and my incredibly lossy memory.  But
in every case, these designs were improved enormously through
feedback from the entire Tor community, including some design
stalwarts who take the time to give feedback on all nearly all the
proposals they see. Thanks to everyone, and apologies to everybody
whom I'm forgetting here.)

IMPLEMENTED IN 0.2.3.x

   110  Avoiding infinite length circuits

     We started this one a while ago back in 0.2.1.3-alpha.  It
     provides a mechanism to try to limit the resource-multiplier that
     a DOS attacker can get against the Tor network by building very
     long circuits, by limiting the maximum circuit length.  We
     had clients implement the new behavior in 0.2.1.3-alpha, and
     fixed some bugs related to it in the 0.2.2.x series.  It's only
     now that all of the older versions that don't support it are
     obsolete that we can actually turn on the attack prevention.

     (Proposal by Roger Dingledine based on ideas by Christian Grothoff.)

   158  Clients download consensus + microdescriptors
   162  Publish the consensus in multiple flavors

     In the "Microdescriptors" design, clients download a summary of
     router descriptors rather than the entire set of signed router
     descriptors.  This can save a large amount of directory
     bandwidth -- both because microdescriptors are smaller than
     router descriptors, and because they're designed to change much
     less frequently.

     Rather than being signed by the routers themselves,
     microdescriptors are listed by their digests in a consensus
     document signed by a threshold of directory authorities.  (This
     change doesn't change the threat model, since a successful
     attack against either system requires adversary who can subvert
     a majority of directory authorities.)

     We anticipate that we might want to serve the consensus in more
     than one format in the future, so proposal 162 introduces a
     notion of "consensus flavors" such that any every consensus
     vote produces a signed consensus in all the formats, caches
     cache all the formats, and clients download only those they
     need.

     (Proposal 158 by Roger Dingledine, revised a bunch by Nick
     Mathewson. Proposal 162 by Nick Mathewson, influenced by design
     discussions with Marian on IRC.)

   180  Pluggable transports for circumvention

     We introduce "Pluggable transports": a specified way for Tor
     bridges and Tor bridge users to configure external programs to
     obfuscate or re-route traffic to avoid censorship.

     This is a pretty big deal: it's what lets Tor integrate will
     with Obfsproxy and similar tools.  As we've hoped, having a
     specified way to integrate with Tor has encouraged others to
     work on obfuscation tools.  Having it ready to go has helped us
     deal with unexpected censorship events over the past year, and
     we think that having a couple of other obfuscators up our
     sleeve will help more in the future.

     (Proposal by Jacob Appelbaum and Nick Mathewson, with heavy
     revisions based on George Kadianakis's experience implementing
     it.)

   171  Separate streams across circuits by connection metadata

     Here's a big security improvement.

     In earlier versions of Tor, there wasn't a good way to force
     streams onto separate circuits.  This could make for trouble,
     since all streams sent over the same circuit are definitively
     linkable by the exit node, and probabilistically linkable by
     the destinations. (For example, if you make a connection to an
     SSH host and log into a website over the same circuit, the exit
     node can learn that the same person has accounts both at the
     SSH host and the website.  If the SSH host and website are
     colluding, then over time, they can become certain which
     account on the SSH host corresponds with which activities on
     the website.)

     Starting with Tor 0.2.3, we provide a number of ways for users
     and integrators to tell Tor not to put the two streams on the
     same circuit.  By default, two streams won't go on the same
     circuit if they arrive at different Tor client ports (one goes
     to SOCKSPort 9050 and one goes to SOCKSPort 9051); or if they
     come from different client addresses (one came from 127.0.0.1,
     the other from 10.0.10.10); or if they provide different
     username/password information in their SOCKS handshakes.
     Additionally, you can configure Tor to isolate connections by
     destination address, destination port, and chosen client
     protocol.  See the manual page for SOCKSPort for more
     information.

     (Proposal by Robert Hogan, Jacob Appelbaum, Damon McCoy, and
     Nick Mathewson, based on ideas from a whole bunch of people.)

   174  Optimistic Data for Tor: Server Side
   181  Optimistic Data for Tor: Client Side

     This one is a performance hack that hasn't seen its full impact
     yet.  Starting with Tor 0.2.3.x, clients MAY send data to the
     exit node before finding out whether the exit has been able to
     successfully connect to the destination server.  Previously, it
     took an extra round trip for clients to wait to see whether the
     exit said "Yes, I'm connected" before they were allowed to send
     data for the exit.

     This should make connection startup faster in many protocols
     where the client speaks first (http, https), as more and more
     client programs gain support for it.

     (Proposal by Ian Goldberg.)

   176  Proposed version-3 link handshake for Tor
   184  Miscellaneous changes for a v3 Tor link protocol
   187  Reserve a cell type to allow client authorization

     Here's the crypto-heavy one for 0.2.3.  In earlier Tors, we
     used two different link protocol variants to get the TLS
     authentication we wanted without being too fingerprintable.  In
     Tor before 0.2.0, we used a "v1" link protocol, where both
     sides swapped pretty stereotyped certificate chains in the
     initial handshake, and were as fingerprintable as all
     get-out. From 0.2.0 through 0.2.2, we've been using a "v2" link
     protocol, where the connection initiator launched a
     renegotiation immediately upon making a successful connection.
     But as anybody who's used TLS renegotiations knows, they are a
     pain to work with.  Moreover, their presence on the wire is
     visible, and provides another fingerprint for Tor connections.

     With the new "v3" link protocol, clients perform an initial TLS
     handshake, and then use that handshake to bootstrap the trust
     and authentication they wanted in a less fragile, less
     fingerprintable manner.

     Proposal 184 made variable-length cells more pratical, and
     added a variable-length padding type.

     Since proposal 176 introduced a requirement that no extraneous
     cells be sent during the handshake, proposal 187 reserves an
     extra cell type for future use in pre-handshake authentication.

     (Proposal 176 by Nick Mathewson, based on an earlier idea by
     Steven Murdoch, with feedback from Gladys Shufflebottom.
     Proposal 184 by Nick Mathewson. Proposal 187 by Nick Mathewson
     based on/influenced by discussions with George Kadianakis and
     Robert Ransom.)


   178  Require majority of authorities to vote for consensus parameters

     This one makes us more robust against a rogue directory
     authority.  Previously, a misbehaving authority could set an
     integer parameter unilaterally, so long as it was the first to
     hear of that parameter, or the only one to have an opinion.
     With this proposal implemented, a larger number of authorities
     must want to vote on a consensus parameter for any vote on that
     parameter to take place.

     (Proposal by Sebastian Hahn.)

   179  TLS certificate and parameter normalization

     This proposal made a bunch of small but important tweaks to try
     to emit more normal-looking TLS certificates, to help prevent
     certificate-based fingerprinting.  It didn't all get
     implemented and stable in time for 0.2.3.x; the remainder is
     now proposal 195.

     (Proposal by Jacob Appelbaum and Gladys Shufflebottom.)

   183  Refill Intervals

     Tor uses a token-bucket implementation for its rate- limiting
     strategy.  Previously, Tor refilled these token buckets once
     per second.  But this approach seems to have led to choppy
     behavior, where we exhaust our bandwidth early in the second,
     and spend the rest of the second sitting around.  The new
     default is 100 msec, but now it's configurable.

     (Proposal by Florian Tschorsch and Bjorn Scheuermann.)


PARTIALLY IMPLEMENTED IN 0.2.3.x

   186  Multiple addresses for one OR or bridge

     We've implemented this to the extent of letting a bridge have a
     single IPv6 address.  Supporting this for regular relays will
     need to wait for 0.2.4.x.  We're still deciding on whether it's
     worthwhile to allow more than one IPv4 and one IPv6 address.

     (Proposal by Nick Mathewson, revised based on extensive feeback
     by Roger Dingledine and Linus Nordberg.)

   198  Restore semantics of TLS ClientHello

     In an attempt to impersonate Firefox clients under the eyes of
     watchful censors, earlier versions of Tor would sometimes claim
     to support TLS ciphersuites that they didn't.  This would cause
     trouble if we ever wanted to negotiate a cipher other than
     those which we happen to know that all Tor clients support,
     since we can't count on the TLS ClientHello actually telling
     which ciphers are supported.

     This proposal provides us with a backward compatible way to
     migrate ciphersuite lists, emulate new browser fingerprints,
     and actually use ciphersuites that didn't exist in 2005.

     The client side of this proposal is implemented in 0.2.3; the
     server side will have to wait for 0.2.4.

     (Proposal by Nick Mathewson.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706145616</emailId><senderName>Jérémy Bobbio</senderName><senderEmail>lunar@debian.org</senderEmail><timestampReceived>2012-07-06 14:56:16-0400</timestampReceived><subject>[tor-dev] [PATCH] Implement proposal xxx: ignore subdomains in hidden service addresses</subject><body>

[Attachment #2 (multipart/signed)]


The implementation is pretty straightforward: parse_extended_hostname() is
modified to drop any leading components from an address like
'foo.aaaaaaaaaaaaaaaa.onion'.

---

Warning! Tests on this patch were limited to 'make check'.

 src/or/connection_edge.c |   10 +++++++++-
 src/test/test.c          |    4 ++++
 2 files changed, 13 insertions(+), 1 deletions(-)

diff --git a/src/or/connection_edge.c b/src/or/connection_edge.c
index 3c8b4bc..92a3dbe 100644
--- a/src/or/connection_edge.c
+++ b/src/or/connection_edge.c
@@ -3490,6 +3490,7 @@ hostname_type_t
 parse_extended_hostname(char *address)
 {
     char *s;
+    char *q;
     char query[REND_SERVICE_ID_LEN_BASE32+1];
 
     s = strrchr(address,'.');
@@ -3504,9 +3505,16 @@ parse_extended_hostname(char *address)
 
     /* so it is .onion */
     *s = 0; /* NUL-terminate it */
-    if (strlcpy(query, address, REND_SERVICE_ID_LEN_BASE32+1) &gt;=
+    /* if there is a 'sub-domain' component, just remove it
+     * (see proposal XXX) */
+    q = strrchr(address, '.');
+    q = (NULL == q) ? address : q + 1;
+    if (strlcpy(query, q, REND_SERVICE_ID_LEN_BASE32+1) &gt;=
         REND_SERVICE_ID_LEN_BASE32+1)
       goto failed;
+    if (q != address) {
+      memmove(address, q, strlen(q));
+    }
     if (rend_valid_service_id(query)) {
       return ONION_HOSTNAME; /* success */
     }
diff --git a/src/test/test.c b/src/test/test.c
index 454fc54..3edf02f 100644
--- a/src/test/test.c
+++ b/src/test/test.c
@@ -1289,11 +1289,15 @@ test_rend_fns(void)
   char address2[] = "aaaaaaaaaaaaaaaa.onion";
   char address3[] = "fooaddress.exit";
   char address4[] = "www.torproject.org";
+  char address5[] = "foo.aaaaaaaaaaaaaaaa.onion";
+  char address6[] = "foo.bar.aaaaaaaaaaaaaaaa.onion";
 
   test_assert(BAD_HOSTNAME == parse_extended_hostname(address1));
   test_assert(ONION_HOSTNAME == parse_extended_hostname(address2));
   test_assert(EXIT_HOSTNAME == parse_extended_hostname(address3));
   test_assert(NORMAL_HOSTNAME == parse_extended_hostname(address4));
+  test_assert(ONION_HOSTNAME == parse_extended_hostname(address5));
+  test_assert(ONION_HOSTNAME == parse_extended_hostname(address6));
 
   pk1 = pk_generate(0);
   pk2 = pk_generate(1);
-- 
1.7.2.5

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120703054112</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-03 05:41:12-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

On Mon, Jul 2, 2012 at 9:24 PM, Megan Chang &lt;mchang01@wesleyan.edu&gt; wrote:
&gt; Which descriptor parsers are you referring to, as some are already
&gt; implemented? A lot of what we're working on in Tor Export overlaps your work
&gt; regarding descriptor parsers.
According to my proposal, I was to implement the parsers for V3
network status documents and microdescriptor documents for the mid
term evaluation.

&gt; Do you mind if we take on the minor task of working on descriptor parsers?
Fine by me. What descriptors would you be working on?

&gt; Also, just for our reference, when is your mid-term evaluation?
July 9 - Mentors and students can begin submitting mid-term evaluations.
July 13 - Mid-term evaluations deadline

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120707170643</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-07 17:06:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal 204: Subdomain support for Hidden Service addresses</subject><body>

On Fri, Jul 6, 2012 at 10:23 AM,  &lt;ale@incal.net&gt; wrote:
&gt; Hello!
&gt;
&gt; As discussed with a few people at the Florence Hackfest, here's a quick proposal
&gt; for subdomain support on Hidden Service addresses. The implementation seems pretty
&gt; straightforward (a patch will follow).
&gt;
&gt; Please forgive me if the proposal is missing something, or isn't using the
&gt; proper Tor-specific technical terms, I'm kinda new to this :) -- I hope it is
&gt; understandable nevertheless.

Added as proposal 204: Thanks!

&gt;
&gt;
&gt; Title: Subdomain support for Hidden Service addresses
&gt; Author: Alessandro Preite Martinez
&gt; Created: 06-07-2012
&gt;
&gt;
&gt; 1. Overview
&gt;
&gt;   This proposal aims to extend the .onion naming scheme for Hidden
&gt;   Service addresses with sub-domain components, which will be ignored
&gt;   by the Tor layer but will appear in HTTP Host headers, allowing
&gt;   subdomain-based virtual hosting.
&gt;
&gt; 2. Motivation
&gt;
&gt;   Sites doing large-scale HTTP virtual hosting on subdomains currently
&gt;   do not have a good option for exposure via Hidden Services, short of
&gt;   creating a separate HS for every subdomain (which in some cases is
&gt;   simply not possible due to the subdomains not being fully known
&gt;   beforehand).
&gt;
&gt; 3. Implementation
&gt;
&gt;   Tor should ignore any subdomain components besides the Hidden
&gt;   Service key, i.e. "foo.aaaaaaaaaaaaaaaa.onion" should be treated
&gt;   simply as "aaaaaaaaaaaaaaaa.onion".
&gt;

The only part I'm worried about here is that we had once considered
doing authenticated hidden services or some other kind of wacky hidden
service with a design like "bbbbbbbbb.aaaaaaaaaaaaaaa.onion", where
bbbbbbbbb is some additional data to use in the protocol.

Still, we can still do the above proposal and save room to extend the
.onion address scheme: just reserve *.x.onion for all x of length
other than 16.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711205348</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-07-11 20:53:48-0400</timestampReceived><subject>[tor-dev]  Tor Export</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

Here is a first draft for the tor export module we have been discussing.  I
have attached the file as we were having some git issues and I am in a bit
of a rush right now.  We have been developing the file at
stem/descriptors/export.py.  Any suggestions or comments would be
appreciated -- we have done basic testing, and would be happy to implement
some unit &amp; integration tests if this implementation satisfies the needs of
the community.

Thanks,
Erik and Megan.

[Attachment #5 (text/html)]

Hi Damian,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a first draft for the tor export modu=
le we have been discussing. =A0I have attached the file as we were having s=
ome git issues and I am in a bit of a rush right now. =A0We have been devel=
oping the file at stem/descriptors/export.py. =A0Any suggestions or comment=
s would be appreciated -- we have done basic testing, and would be happy to=
 implement some unit &amp; integration tests if this implementation satisfi=
es the needs of the community.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;Erik and Megan.&lt;/div&gt;

--f46d044403a014261604c4940d76--
["export.py" (application/octet-stream)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120703233153</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-03 23:31:53-0400</timestampReceived><subject>[tor-dev] Flash proxy deployment</subject><body>

During the development meeting today, the group interested in pluggable
transports decided to begin to deploy the flash proxy transport in the
near future. As a reminder, flash proxies use a small JavaScript/WebSocket
program to run proxies in a web browser and provide a hard-to-block pool
of IP addresses. This message is a call for testing and comment, and a
list of known issues that we are working on. I get the impression that
some people have unresolved questions and concerns, and I will do my
best to answer those.

Here are links with some background information. The first URL here has
a proxy on it; it's the "I support Internet freedom" graphic at the
bottom of the page.

http://crypto.stanford.edu/flashproxy/
http://crypto.stanford.edu/flashproxy/flashproxy.pdf
https://gitweb.torproject.org/flashproxy.git/blob/HEAD:/README
https://lists.torproject.org/pipermail/tor-dev/2011-December/003135.html

You don't have to install anything nor configure port forwarding in
order to try the flash proxy transport using this command:

tor ClientTransportPlugin "websocket socks4 tor-facilitator.bamsoftware.com:9999" \
UseBridges 1 Bridge "websocket 127.0.0.1:9001"

If you're on the miserable hotel wi-fi, try adding:
	LearnCircuitBuildTimeout 0 CircuitBuildTimeout 1000

Since the last message on this topic, flash proxies no longer use Adobe
Flash. They are implemented in JavaScript with WebSocket. We now also
work as a pluggable transport.

Here is a list of known issues and things on which I especially invite
comment. (There is also a Flashproxy Trac ticket component at
https://trac.torproject.org/projects/tor/query?component=Flashproxy.)
* There is a central host (or hosts) that sees all proxy and client
  addresses. The facilitator is the component to which clients advertise
  their addresses and from which proxies pull addresses to connect to. A
  compromise of the facilitator would lead to disclosure of Tor users'
  addresses (and retroactively if logs are being kept).
* The censored client must be able to receive a TCP connection; i.e., it
  can't be behind NAT. There are potential avenues to investigate to
  remove this restriction, but none of them have been looked at. (The
  command I gave above works even behind NAT, because it is using a
  client transport plugin running on the public Internet.)
* Some of the infrastructure is running on domains other than
  torproject.org, namely stanford.edu and bamsoftware.com. The proxy
  badge itself is hosted at http://crypto.stanford.edu/flashproxy/embed.html.
  The facilitator is at tor-facilitator.bamsoftware.com. bamsoftware.com
  is mine and it's being used only because I have control of DNS for
  that domain. I think it would be more seemly for these to have
  torproject.org addresses (or maybe even just IP addresses). Also, the
  only relay that supports the websocket transport is mine,
  tor1.bamsoftware.com, and all flash proxy traffic will use this as a
  first hop until there are more.
* The flash proxy system is supposed to have a covert rendezvous method
  for the client to register its need for a connection. All we have now
  is a dumb blockable HTTP-based rendezvous. The plan is to use this
  until it is blocked and see what we can learn.

My idea of "deployment" is that we provide packages for download (with a
warning that they are only for testing), and make a blog post
publicizing them. The packages will contain the client transport plugin
program, a README, and a preconfigured torrc file (but not tor the
program nor a Tor Browser). My goal is to begin receiving bug reports
from users and other developers, and to begin collecting usage metrics.

I wish to enter upon this with due caution and slowness; but I don't
want to sit forever on something that could possibly help people. To
this purpose I'm trying to be very forthright about the abilities and
shortcomings of the flash proxy system. I do hope to receive your
consideration and honest feedback, positive and negative.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120707110912</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-07 11:09:12-0400</timestampReceived><subject>Re: [tor-dev] Flash proxy deployment</subject><body>

On Tue, Jul 03, 2012 at 04:31:53PM -0700, David Fifield wrote:
&gt; During the development meeting today, the group interested in pluggable
&gt; transports decided to begin to deploy the flash proxy transport in the
&gt; near future. As a reminder, flash proxies use a small JavaScript/WebSocket
&gt; program to run proxies in a web browser and provide a hard-to-block pool
&gt; of IP addresses. This message is a call for testing and comment, and a
&gt; list of known issues that we are working on. I get the impression that
&gt; some people have unresolved questions and concerns, and I will do my
&gt; best to answer those.
&gt; 
&gt; Here are links with some background information. The first URL here has
&gt; a proxy on it; it's the "I support Internet freedom" graphic at the
&gt; bottom of the page.
&gt; 
&gt; http://crypto.stanford.edu/flashproxy/
&gt; http://crypto.stanford.edu/flashproxy/flashproxy.pdf
&gt; https://gitweb.torproject.org/flashproxy.git/blob/HEAD:/README
&gt; https://lists.torproject.org/pipermail/tor-dev/2011-December/003135.html

I made packages containing the necessary client programs. If you are
going to test, please try these.

http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.0.zip
http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.0.zip.asc

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120713100951</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-07-13 10:09:51-0400</timestampReceived><subject>Re: [tor-dev] Flash proxy deployment</subject><body>

Perhaps, the flash proxy concept could also be used for bridge reachability
scanning [1].

Web sites could embed JavaScript code which tries to establish a connection to a
provided bridge. The result (reachable or not) is then sent back. When users
from different censoring countries visit one of these web sites, they scan the
given bridge and report whether it is reachable or not from their vantage point.
That way, we could get a more detailed idea of which bridges are blocked and
where. This would open the gates for reputation-based bridge distribution
strategies [3].

Naturally, there are problems:

- How do we give the bridges to be scanned to the web site visitors without
  making it easy to enumerate them?

- Bridges are not just blocked on the IP layer but also on the TCP layer or
  during the SSL handshake. Flash/WebSockets lack the flexibility to do
  fine-grained scanning across protocol layers. Maybe this problem could be
  solved by the web server impersonating proposal [2].

- Web site visitors need to get the script as well as the bridges to scan from
  somewhere. This "somewhere" can be blocked. In order to avoid that, the script
  could be hosted on a large provider which the censor is unwilling to block.

- Making web site visitors scan bridges without their knowledge or informed
  consent is problematic.

I don't have a lot of faith in this idea but I figured it would be worth posting
it here.

[1] https://blog.torproject.org/blog/research-problem-five-ways-test-bridge-reachability
[2] https://lists.torproject.org/pipermail/tor-dev/2012-June/003673.html
[3] http://freehaven.net/anonbib/#proximax11
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712161551</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-12 16:15:51-0400</timestampReceived><subject>Re: [tor-dev] Tor Export</subject><body>

Hi Erik. In addition to Norman's feedback...

&gt; def descriptor_csv_exp(descr, head=True, incl_fields=[], excl_fields=[]):

It's redundant to call this descriptor_csv_exp() since it's in
'stem.descriptor.*'. Lets just call it something simple like
export_csv(). Also, I still think that we should combine the
descriptor_csv_exp() and descriptors_csv_exp() in a similar fashion to
the reader and controller methods.

&gt; doc_loc = os.path.expanduser('~') + '/torexport.csv'
&gt; doc = open(doc_loc, 'w')

Obviously something to change. :)

We should have a function that returns us a csv string, and maybe
another that writes it to a file instead.

&gt; # define incl_fields, 4 cases where final case is incl_fields already
&gt; # defined and excl_fields left blank, so no action is necessary.
&gt; if not incl_fields and excl_fields:
&gt;   incl_fields = attr.keys()
&gt;   for f in excl_fields:
&gt;     if f in incl_fields:
&gt;       incl_fields.remove(f)

Alternatively you could just default incl_fields and excl_fields earlier...

if not descrs: return ""

# default to including all of the parameters
if incl_fields is None:
  incl_fields = vars(descrs[0]).keys()

if excl_fields is None:
  excl_fields = []

Also, lets fully spell these out (descriptors, include_fields,
exclude_fields) since this is exposed to our user via the keyword
parameter.

&gt; final = {}
&gt; for at in attr:
&gt;   if at in incl_fields:
&gt;     final[at] = attr[at]
&gt; dwriter.writerow(final)

You're relying on each of your vars(desr) calls to provide the same
ordering which, while probably safe, isn't something that we should
rely on. Lets iterate over incl_fields instead.

Also, you aren't checking that all of the descriptors are of the same
type. If you get a list with both server descriptors and extrainfo
descriptors then I'm not sure what this function will do, but it's
probably not what the user wants. Please include that use case while
writing unit tests.

For the future I would suggest opening a ticket on trac and asking for
a code review there. This is what Ravi does and it seems to work
pretty well - here's an example...
https://trac.torproject.org/6114

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120709154321</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-09 15:43:21-0400</timestampReceived><subject>[tor-dev] Onionoo in Python</subject><body>



On 7/6/12 10:34 AM, Sathyanarayanan Gunasekaran wrote:&gt;&gt; OK; Megan and 
Erik, after you incorporate the export function into
 &gt;&gt; Descriptor in stem, please start reading through the Django tutorial.
 &gt;
 &gt; I'm not sure if Django is a good choice for this project. We don't
 &gt; require such a heavy web framework with a templating engine, auth,
 &gt; etc. I'd rather use Tornado or Cyclone+Twisted. Since tor2web, APAF
 &gt; use Twisted, it would make sense to have onionoo use the same thing.
 &gt;
 &gt; I've been hacking on this since morning and I have a very simple
 &gt; prototype which uses Cyclone that parses only the summary documents
 &gt; and provides an API for that("/summary") - I will clean it up and put
 &gt; on github in a bit

Is this available yet?

 &gt;&gt; We'll start working out milestones on Monday (I'm away until Monday 
morning,
 &gt;&gt; but I'll probably have occasional e-mail access); Sathyanarayanan, you
 &gt;&gt; should probably chime in too.

So we need to decide on both some milestones and also what various 
people ought to work on so we avoid stepping on each other's toes.

It seems like a natural way to keep some of our work disjoint is to have 
us primarily work on the back end and Sathyanarayanan on the front end, 
or vice-versa.  Sathyanarayanan, does this sound reasonable to you?  Do 
you have a preference?  It sounds like you're already working on the 
front end, though I was hoping we'd have a chance to play with and learn 
twisted ourselves a bit.

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712010558</emailId><senderName>Daniel Dennis</senderName><senderEmail>sdjfjsdfiuhszduh@fastmail.fm</senderEmail><timestampReceived>2012-07-12 01:05:58-0400</timestampReceived><subject>[tor-dev] Encrypted PM site/hidden service</subject><body>

I have been brushing up on my crypto, security and studied/thought about
how tor works and the hidden services although i don't know too much
about this part.

Anyways so i was thinking i'd make an app that allows people to leave
other PMs using public keys. &lt;---- I want to absolutely make sure no one
has written or is writing code for anyone to leave anyone else PMs
anonymously.

The coding part i am not worried about. But the below is what I like to
know.

1) Are there still pretty good attacks on hidden services when used by
clients? If a user disconnects and connects everyday the hidden service
can be found pretty easily? (study clients online, offline and
availability of hidden service)

Because i don't think decentralize model is a good idea if participants
can be found i'm think i will need hosting.

2) Would anyone be willing to host a few static files for me and give me
access to update said files?
3) Would anyone be willing to host my service on their server? I'd be
using .NET/mono. I believe i can stick with .NET 3.5 (mono 2.6) if
needed.
4) Can i use one hidden service but more then one port? I somehow got
the impression i can only use 1 port per service but i havent looked
into it. This means i'll need a hidden service for the static files and
another for a central site.

I haven't gone over the numbers but traditionally mono memory footprint
is pretty good (i believe under 30mb) but i'll likely need a mysql
server however i can stick with files if that is all i have available. 

-- 
http://www.fastmail.fm - Access all of your messages and folders
                          wherever you are

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120713121452</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-07-13 12:14:52-0400</timestampReceived><subject>[tor-dev] Minimum required ciphers for running Tor as both client and router.</subject><body>

[Attachment #2 (multipart/alternative)]


Hi there,

First of all thanks for helping me last time with my mipsel build of Tor
with statically linked OpenSSL.
It's running fine and we're waiting for the last review of the
bandwith-checking scripts before they go live.

The second cluster we prepare will consist of low-powered PowerPC devices
250MHz/256MB Ram/8MB Flash.
This time Tor will dynamically link to OpenSSL (libcrypto.so.1.0.0 and
libssl.so.1.0.0) because there are also other programs depending on it.
Because the devices have very limited flash-space the binaries and
libraries have to be as small as possible.
Tor 0.2.3.19-rc is only 550KB with only libevent staticly linked in
(stripped and bz2 compressed).
When run, it will be extracted to /tmp, executed and then deleted (since
/tmp runs in RAM).

It runs very well so far :)

However the OpenSSL libraries are quite large for this system and they
don't fit in at the moment.
libcrypto.so.1.0.0 is 1.9MB and libssl.so.1.0.0 is 375KB (stripped).

Our goal is to run Tor both as client and router and therefor I'd like to
know the absolute minimum required ciphers for doing so.
We've currently compiled OpenSSL 1.0.1 with:

NM=powerpc-gnu-nm CC=powerpc-linux-gnu-gcc RANLIB=powerpc-linux-gnu-ranlib
AR=powerpc-linux-gnu-ar \
./Configure --prefix=/home/mastag/root
--openssldir=/home/mastag/root/lib/ssl \
shared threads zlib enable-tlsext no-ssl2 no-dso no-idea no-mdc2 no-rc5 \
no-engines no-hw linux-ppc \

From the OpenSSL documentation it seems that no-hw and no-engines leaves
out support for hardware crypto engines so those are safe to set (our
devices don't have them).

Could anybody provide us with more "no-" options for ciphers we can skip?
Thanks alot!

[Attachment #5 (text/html)]

Hi there,&lt;br&gt;&lt;br&gt;First of all thanks for helping me last time with my mipsel build of \
Tor with statically linked OpenSSL.&lt;br&gt;It's running fine and we're waiting \
for the last review of the bandwith-checking scripts before they go live.&lt;br&gt; &lt;br&gt;The \
second cluster we prepare will consist of low-powered PowerPC devices 250MHz/256MB \
Ram/8MB Flash.&lt;br&gt;This time Tor will dynamically link to OpenSSL (libcrypto.so.1.0.0 \
and libssl.so.1.0.0) because there are also other programs depending on it.&lt;br&gt; \
Because the devices have very limited flash-space the binaries and libraries have to \
be as small as possible.&lt;br&gt;Tor 0.2.3.19-rc is only 550KB with only libevent staticly \
linked in (stripped and bz2 compressed).&lt;br&gt;When run, it will be extracted to /tmp, \
executed and then deleted (since /tmp runs in RAM).&lt;br&gt; &lt;br&gt;It runs very well so far \
:)&lt;br&gt;&lt;br&gt;However the OpenSSL libraries are quite large for this system and they \
don't fit in at the moment.&lt;br&gt;libcrypto.so.1.0.0 is 1.9MB and libssl.so.1.0.0 is \
375KB (stripped).&lt;br&gt;&lt;br&gt; Our goal is to run Tor both as client and router and \
therefor I'd like to know the absolute minimum required ciphers for doing \
so.&lt;br&gt;We've currently compiled OpenSSL 1.0.1 with:&lt;br&gt;&lt;br&gt;NM=powerpc-gnu-nm \
CC=powerpc-linux-gnu-gcc RANLIB=powerpc-linux-gnu-ranlib AR=powerpc-linux-gnu-ar \
                \&lt;br&gt;
./Configure --prefix=/home/mastag/root --openssldir=/home/mastag/root/lib/ssl \
\&lt;br&gt;shared threads zlib enable-tlsext no-ssl2 no-dso no-idea no-mdc2 no-rc5 \
\&lt;br&gt;no-engines no-hw linux-ppc \&lt;br&gt;&lt;br&gt;From the OpenSSL documentation it seems that \
no-hw and no-engines leaves out support for hardware crypto engines so those are safe \
to set (our devices don't have them).&lt;br&gt; &lt;br&gt;Could anybody provide us with more \
"no-" options for ciphers we can skip?&lt;br&gt;Thanks alot!&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120713125248</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-13 12:52:48-0400</timestampReceived><subject>Re: [tor-dev] Minimum required ciphers for running Tor as both client and router.</subject><body>

On Fri, Jul 13, 2012 at 8:14 AM, Gino Badouri &lt;g.badouri@gmail.com&gt; wrote:

Hi!

&gt; From the OpenSSL documentation it seems that no-hw and no-engines leaves out
&gt; support for hardware crypto engines so those are safe to set (our devices
&gt; don't have them).
&gt;
&gt; Could anybody provide us with more "no-" options for ciphers we can skip?
&gt; Thanks alot!

The absolutely required cryptographic primitives for Tor are AES,
SHA1, SHA256, DH, and RSA.  This may grow in the future.

Be aware though that being unable to negotiate certain ciphersuites
might make your devices more fingerprintable, since starting in
0.2.3.x Tor will no longer advertise openssl-supported ciphersuites
that it doesn't have.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712171201</emailId><senderName>krugar</senderName><senderEmail>tor-admin@krugar.de</senderEmail><timestampReceived>2012-07-12 17:12:01-0400</timestampReceived><subject>Re: [tor-dev] Encrypted PM site/hidden service</subject><body>

take a look at https://anonbox.net/ for a similar service.

a few considerations: if you create an "app" that lives on a mobile
phone, are private keys stored on the phone? are they secured somehow
while the app is running / not running? which public keys will be stored
on the phone? will messages be stored on the phone?
will someone always know who sent a PM, or only if the sender so
chooses? how do you know how to reach someone on your service? are there
pseudonyms? how long to they last? what about key revocation?
what happens if the server is compromised somehow, will attackers be
able to look at the data and see who wrote messages to whom? for which
time period?

try to clearly define which privacy guarantees you try to achieve
against which type of attacker. the more precise you write this down,
the easier someone can help you spot weaknesses in your concept, and the
better for you and your users once the system is live.
http://dud.inf.tu-dresden.de/Anon_Terminology.shtml may help if you are
uncertain about wording.

cheers
-k


Daniel Dennis:
&gt; I have been brushing up on my crypto, security and studied/thought about
&gt; how tor works and the hidden services although i don't know too much
&gt; about this part.
&gt; 
&gt; Anyways so i was thinking i'd make an app that allows people to leave
&gt; other PMs using public keys. &lt;---- I want to absolutely make sure no one
&gt; has written or is writing code for anyone to leave anyone else PMs
&gt; anonymously.
&gt; 
&gt; The coding part i am not worried about. But the below is what I like to
&gt; know.
&gt; 
&gt; 1) Are there still pretty good attacks on hidden services when used by
&gt; clients? If a user disconnects and connects everyday the hidden service
&gt; can be found pretty easily? (study clients online, offline and
&gt; availability of hidden service)
&gt; 
&gt; Because i don't think decentralize model is a good idea if participants
&gt; can be found i'm think i will need hosting.
&gt; 
&gt; 2) Would anyone be willing to host a few static files for me and give me
&gt; access to update said files?
&gt; 3) Would anyone be willing to host my service on their server? I'd be
&gt; using .NET/mono. I believe i can stick with .NET 3.5 (mono 2.6) if
&gt; needed.
&gt; 4) Can i use one hidden service but more then one port? I somehow got
&gt; the impression i can only use 1 port per service but i havent looked
&gt; into it. This means i'll need a hidden service for the static files and
&gt; another for a central site.
&gt; 
&gt; I haven't gone over the numbers but traditionally mono memory footprint
&gt; is pretty good (i believe under 30mb) but i'll likely need a mysql
&gt; server however i can stick with files if that is all i have available. 
&gt; 


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120709162150</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya.ceg@gmail.com</senderEmail><timestampReceived>2012-07-09 16:21:50-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

&gt; Is this available yet?

Yep - https://github.com/gsathya/pyonionoo It's pretty hacky(it was
meant to be a prototype to see if Cyclone was a good idea - and well,
i like it) and will probably have to be refactored.

&gt; So we need to decide on both some milestones and also what various people
&gt; ought to work on so we avoid stepping on each other's toes.
&gt;
&gt; It seems like a natural way to keep some of our work disjoint is to have us
&gt; primarily work on the back end and Sathyanarayanan on the front end, or
&gt; vice-versa.  Sathyanarayanan, does this sound reasonable to you?  Do you
&gt; have a preference?  It sounds like you're already working on the front end,
&gt; though I was hoping we'd have a chance to play with and learn twisted
&gt; ourselves a bit.
&gt;

Either way works fine with me.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710153612</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-10 15:36:12-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>



On 7/9/12 12:09 PM, Sathyanarayanan Gunasekaran wrote:
&gt;&gt; Is this available yet?
&gt;
&gt; Yep - https://github.com/gsathya/pyonionoo It's pretty hacky(it was
&gt; meant to be a prototype to see if Cyclone was a good idea - and well,
&gt; i like it) and will probably have to be refactored.

Based on a quick look, it seems like Cyclone provides a slightly nicer 
way to specify how to handle the various requests than does a plain 
Twisted web application.  Are there any other advantages to using 
Cyclone as opposed to plain Twisted?

To me, there is a trade-off:

Cyclone+Twisted:  slightly nicer way to write the web application.  More 
dependencies for Onionoo.

Plain Twisted:  not quite as nice a way to write the application.  Fewer 
dependencies for Onionoo.

Also, the documentation for Cyclone seems...minimal.  It might be 
straightforward for someone used to using Tornado, but that doesn't 
describe us over here...

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710154218</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-10 15:42:18-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

On 7/10/12 5:36 PM, Norman Danner wrote:
&gt; 
&gt; 
&gt; On 7/9/12 12:09 PM, Sathyanarayanan Gunasekaran wrote:
&gt;&gt;&gt; Is this available yet?
&gt;&gt;
&gt;&gt; Yep - https://github.com/gsathya/pyonionoo It's pretty hacky(it was
&gt;&gt; meant to be a prototype to see if Cyclone was a good idea - and well,
&gt;&gt; i like it) and will probably have to be refactored.
&gt; 
&gt; Based on a quick look, it seems like Cyclone provides a slightly nicer
&gt; way to specify how to handle the various requests than does a plain
&gt; Twisted web application.  Are there any other advantages to using
&gt; Cyclone as opposed to plain Twisted?

On APAF (anonymous python application framework) GSoc project, to build
cross-platform Windows, OSX, Linux applications including Tor there is
the use of Twisted+Cyclone.

http://github.com/mmaker/APAF

If you use such kind of framework, it should be relatively easy to hook
them to APAF, to build your application and deliver it also for Windows
and OSX.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710161801</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-10 16:18:01-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

&gt; On APAF (anonymous python application framework) GSoc project, to build
&gt; cross-platform Windows, OSX, Linux applications including Tor there is
&gt; the use of Twisted+Cyclone.

I'm still not clear though - what is the advantage of providing
Onionoo as a hidden service? We shouldn't add dependencies, especially
on a new project like APAF, without clear and substantial benefits.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710162223</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-10 16:22:23-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

On 7/10/12 6:18 PM, Damian Johnson wrote:
&gt;&gt; On APAF (anonymous python application framework) GSoc project, to build
&gt;&gt; cross-platform Windows, OSX, Linux applications including Tor there is
&gt;&gt; the use of Twisted+Cyclone.
&gt; 
&gt; I'm still not clear though - what is the advantage of providing
&gt; Onionoo as a hidden service? We shouldn't add dependencies, especially
&gt; on a new project like APAF, without clear and substantial benefits.

The Tor Hidden Service support of APAF is just a "small part" of what it
does provide.

At first it does provide you an environment to build a Desktop
Applications, with an easy-build-system integrating Tor and nicely
looking UI elements for Windows and OSX, including an embedded browser.

So basically if you would like to make a desktop application including
Onionoo &amp; Atlas together to provide an end-user an application that he
can download to query/search/analyze the Consensus, APAF it's a good choice.
If you just need to do it for a single application that does not need to
be installed and/or distributed hundreds/thousands of time, then the
APAF framework may not be the right choice.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710165510</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya.ceg@gmail.com</senderEmail><timestampReceived>2012-07-10 16:55:10-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

&gt; So basically if you would like to make a desktop application including
&gt; Onionoo &amp; Atlas together to provide an end-user an application that he
&gt; can download to query/search/analyze the Consensus, APAF it's a good choice.
&gt; If you just need to do it for a single application that does not need to
&gt; be installed and/or distributed hundreds/thousands of time, then the
&gt; APAF framework may not be the right choice.
&gt;

I don't think APAF is a good choice for this. It's just a web service
that's going to run one of the Tor VM's. We're not going to bundle
this with Atlas as a desktop application.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710173546</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya.ceg@gmail.com</senderEmail><timestampReceived>2012-07-10 17:35:46-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

&gt; Based on a quick look, it seems like Cyclone provides a slightly nicer way
&gt; to specify how to handle the various requests than does a plain Twisted web
&gt; application.  Are there any other advantages to using Cyclone as opposed to
&gt; plain Twisted?

Cyclone provides a much nicer API than Twisted with routing done
right. I haven't played around with Twisted much, but I'm liking how
Cyclone works. Cyclone does a bunch of stuff like converting a dict to
a json and setting the proper response headers automagically(which was
a "Aha" moment for me, I'm not sure if Twisted does all this).

&gt; Cyclone+Twisted:  slightly nicer way to write the web application.  More
&gt; dependencies for Onionoo.
&gt;
&gt; Plain Twisted:  not quite as nice a way to write the application.  Fewer
&gt; dependencies for Onionoo.

I'd definitely prefer Cyclone+Twisted. Cyclone ships with a couple of
Debian scripts that make it easier to run as well.

&gt; Also, the documentation for Cyclone seems...minimal.  It might be
&gt; straightforward for someone used to using Tornado, but that doesn't describe
&gt; us over here...

Well, that's true. There isn't much documentation, but it uses almost
the same API as Tornado so you can pretty much use Tornado's docs. But
that isn't much either so I kinda ended up reading Cyclone's source
and that worked. It's actually pretty easy to follow. But, I can see
how this can become a real pain.

-Sathya
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710190419</emailId><senderName></senderName><senderEmail>meejah</senderEmail><timestampReceived>2012-07-10 19:04:19-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

Norman Danner &lt;ndanner@wesleyan.edu&gt; writes:

&gt; Based on a quick look, it seems like Cyclone provides a slightly
&gt; nicer way to specify how to handle the various requests than does a
&gt; plain Twisted web application.  Are there any other advantages to
&gt; using Cyclone as opposed to plain Twisted?

From what I understand of the two systems, Twisted's "web stuff" isn't
really intended as a "web application framework" (yet?) and you'd
probably want Nevow or Twisted.web2 for that anyway. Cyclone and
Tornado, OTOH, *are* Web frameworks. The advantage of Cyclone being
that it's based on the core Twisted async "stuff" rather than
Tornado's homebrew (and hence supports more things, has tests,
cross-platform support, etcetera).

Using Cyclone would also allow you to use txtorcon, as it's based on
Twisted too :)

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710204201</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-10 20:42:01-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

I agree, Twisted is not a web application framework.  So the question is 
this:  do we want/need a web application framework for Onionoo?  It 
seems like it is such a straightforward service (process one of a very 
few different request types, send back a JSON response) that maybe any 
web application framework is overkill.

According to Sathya, Cyclone does have some functionality for converting 
dicts to JSON (of course, so does the json standard library module) and 
sets response headers properly automatically.  So that also makes some 
of the coding easier and possibly more maintainable.  The latter is 
definitely not to be sneezed at; I just don't have enough experience 
with either Twisted or Cyclone to know whether it makes up for the 
additional dependency.

	- Norman

On 7/10/12 3:04 PM, meejah@meejah.ca wrote:
&gt; Norman Danner &lt;ndanner@wesleyan.edu&gt; writes:
&gt;
&gt;&gt; Based on a quick look, it seems like Cyclone provides a slightly
&gt;&gt; nicer way to specify how to handle the various requests than does a
&gt;&gt; plain Twisted web application.  Are there any other advantages to
&gt;&gt; using Cyclone as opposed to plain Twisted?
&gt;
&gt;  From what I understand of the two systems, Twisted's "web stuff" isn't
&gt; really intended as a "web application framework" (yet?) and you'd
&gt; probably want Nevow or Twisted.web2 for that anyway. Cyclone and
&gt; Tornado, OTOH, *are* Web frameworks. The advantage of Cyclone being
&gt; that it's based on the core Twisted async "stuff" rather than
&gt; Tornado's homebrew (and hence supports more things, has tests,
&gt; cross-platform support, etcetera).
&gt;
&gt; Using Cyclone would also allow you to use txtorcon, as it's based on
&gt; Twisted too :)
&gt;

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710215044</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-10 21:50:44-0400</timestampReceived><subject>[tor-dev] License for flash proxy software</subject><body>

I feel there should be a LICENSE file in the flash proxy client packages
currently at http://www.bamsoftware.com/dist/flashproxy/. What is the
recommended practice? Right now the files carry no license. I would be
happy with anything that is free software and convenient to the Tor
Project. For example the 3-clause BSD used by obfsproxy is fine. I am
pretty sure that I wrote all the code that is in use at this point.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711013445</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-11 01:34:45-0400</timestampReceived><subject>Re: [tor-dev] License for flash proxy software</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake David Fifield (david@bamsoftware.com):

&gt; I feel there should be a LICENSE file in the flash proxy client packages
&gt; currently at http://www.bamsoftware.com/dist/flashproxy/. What is the
&gt; recommended practice? Right now the files carry no license. I would be
&gt; happy with anything that is free software and convenient to the Tor
&gt; Project. For example the 3-clause BSD used by obfsproxy is fine. I am
&gt; pretty sure that I wrote all the code that is in use at this point.

I once wrote a whole article on choosing the best free software license
as an exercise, and then I heard Roger sum it up in exactly two point
five sentences:

"If your widget is the only thing of its kind in the world, and you
really want it to exist in any form no matter what, you should pick
BSD/MIT/X11. 

Otherwise, if your widget is merely a replacement widget for similar
closed source widgets, and you'd like to ensure that your widget always
remains in existence as the free one, choose GPL/MPL/etc.

[Also, GPL can be hella annoying to change in the future once you have
merged patches from other contributors. Make total destroy the Copyright
State.]"

Ok, so he didn't say that last bit in that exact way, but I think he
meant most of it. If your widget ends up being so awesome that you
exterminate all other things like it, you might end up wishing you
hadn't made it GPL... Of course though, then you might just end up
exploited by Steve Jobs once he (or his likeness) has been defrosted
from Alcor.. And nobody wants that...


Personally, I would go BSD/MIT/X11 and just know that if you ever made a
closed source version, nobody would or should trust it. Max freedom ftw?
YMMV.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120711152003</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-11 15:20:03-0400</timestampReceived><subject>Re: [tor-dev] License for flash proxy software</subject><body>

&gt; [Also, GPL can be hella annoying to change in the future once you have
&gt; merged patches from other contributors. Make total destroy the Copyright
&gt; State.]"

Personally I go with GPL for my projects. Here's how I'm trying to
address the above and keep the flexibility to change it in the
future...
https://trac.torproject.org/projects/tor/wiki/doc/stem#CopyrightforPatches
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120717042431</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-07-17 04:24:31-0400</timestampReceived><subject>[tor-dev] Clarification of prop 186</subject><body>

Hi,

Can votes and consensuses have more than one "a" line? Prop 186 says, on
one hand

  [...] votes should include a single "a" line for every relay that has
  an IPv6 address, to include the first IPv6 line in its
  descriptor. [...] The remaining or-address lines will turn into "a"
  lines in the microdescriptor.

I interpret this to mean that there is at most one "a" line in a status
vote or consensus.

On the other hand it also says

  Clients that use microdescriptors should consider a node's addresses
  to be the address:port listed in the "r" line of a consensus, plus all
  "a" lines for that node in the consensus, [...]

and

  the vote will include whichever set of "a" lines are given by the most
  authorities who voted for the descriptor digest that will be used for
  the router.

(Is "vote" a typo?  Should it read "consensus"?)

This makes me think there can be more than one "a" line in both votes
and consensuses.

-- 
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120717085419</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-07-17 08:54:19-0400</timestampReceived><subject>Re: [tor-dev] Clarification of prop 186</subject><body>

On 2012-07-17 06:24, Linus Nordberg wrote:
&gt; Hi,
&gt; 
&gt; Can votes and consensuses have more than one "a" line? Prop 186 says, on
&gt; one hand
&gt; 
&gt;   [...] votes should include a single "a" line for every relay that has
&gt;   an IPv6 address, to include the first IPv6 line in its
&gt;   descriptor. [...] The remaining or-address lines will turn into "a"
&gt;   lines in the microdescriptor.
&gt; 
&gt; I interpret this to mean that there is at most one "a" line in a status
&gt; vote or consensus.

I interpret this as:
 "a single "a" line for every relay that has an IPv6 address"
and:
 "the remaining or-address lines will turn into "a" lines in the ..."

Thus multiple "a" lines, only one single one with IPv6, the rest with IPv4.

I think that one should allow an arbitrary number though, with a limit
of course, eg that a relay is allowed to have max 8 "a" lines, be that
either IPv4 or IPv6 addresses along with their ports.

As such the "single" above should be taken out of the text and/or
rewritten to avoid the confusion that Linus notes here.

&gt; On the other hand it also says
&gt; 
&gt;   Clients that use microdescriptors should consider a node's addresses
&gt;   to be the address:port listed in the "r" line of a consensus, plus all
&gt;   "a" lines for that node in the consensus, [...]

Multiples here too ;)

&gt; and
&gt; 
&gt;   the vote will include whichever set of "a" lines are given by the most
&gt;   authorities who voted for the descriptor digest that will be used for
&gt;   the router.
&gt; 
&gt; (Is "vote" a typo?  Should it read "consensus"?)

Nope, that is a single vote by that authority, the result of all the
votes is the concensus.

&gt; This makes me think there can be more than one "a" line in both votes
&gt; and consensuses.

Yes, and there should be IMHO.

Greets,
 Jeroen
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120717133148</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-17 13:31:48-0400</timestampReceived><subject>Re: [tor-dev] Clarification of prop 186</subject><body>

On Tue, Jul 17, 2012 at 12:24 AM, Linus Nordberg &lt;linus@torproject.org&gt; wrote:
&gt; Hi,
&gt;
&gt; Can votes and consensuses have more than one "a" line? Prop 186 says, on
&gt; one hand
&gt;
&gt;   [...] votes should include a single "a" line for every relay that has
&gt;   an IPv6 address, to include the first IPv6 line in its
&gt;   descriptor. [...] The remaining or-address lines will turn into "a"
&gt;   lines in the microdescriptor.
&gt;
&gt; I interpret this to mean that there is at most one "a" line in a status
&gt; vote or consensus.
&gt;
&gt; On the other hand it also says
&gt;
&gt;   Clients that use microdescriptors should consider a node's addresses
&gt;   to be the address:port listed in the "r" line of a consensus, plus all
&gt;   "a" lines for that node in the consensus, [...]
&gt;
&gt; and
&gt;
&gt;   the vote will include whichever set of "a" lines are given by the most
&gt;   authorities who voted for the descriptor digest that will be used for
&gt;   the router.
&gt;
&gt; (Is "vote" a typo?  Should it read "consensus"?)
&gt;
&gt; This makes me think there can be more than one "a" line in both votes
&gt; and consensuses.

Ah; I should have made this point explicit.  Here's my current intent:

Everything that describes how these documents are formatted describes
them as containing multiple "a" lines.  Thus, anybody parsing a
consensus or microdescriptor MUST accept multiple "a" lines, even if
they ignore all but the first.

But everything that describes how these documents are *generated*
describes them as containing a single "a" line.  Thus, there doesn't
need a way to come up with a consensus containing multiple a lines.

In other words, I think that for now, one "a" line is fine.  But we
need to make sure that anything reading these documents can handle
more than one, in case we generate them differently later.

Does that make sense?

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711155143</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-11 15:51:43-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

(Side-conversation that got off of tor-dev@, bring it back.)

Based on what Sathya has to say, along with our own playing around with 
plain Twisted, I'm inclined to agree that Cyclone provides enough extra 
value to justify the additional dependency.

Sathya, do you want to work on the back-end while we work on the 
front-end (starting with the code you've already written)?

	- Norman

On 7/11/12 12:58 AM, Sathyanarayanan Gunasekaran wrote:
&gt; Also, the python version of Onionoo is going to use databases instead of
&gt; flat files and Cyclone has built in support for Redis and other databases.
&gt; On Jul 11, 2012 7:27 AM, "Sathyanarayanan Gunasekaran" &lt;
&gt; gsathya.ceg@gmail.com&gt; wrote:
&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; Too painful for a general web application?  Or just too painful overall?
&gt;&gt;&gt; Since we're only really serving three (parameterized) resources and have
&gt;&gt; one
&gt;&gt;&gt; kind of response (JSON), a web application framework might be overkill.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; I meant that Twisted is much more verbose, the API isn't as nice as
&gt;&gt; Cyclone, and we'll have to do a bit of work manually ourselves instead
&gt;&gt; of letting the framework do it(like routing, setting proper response
&gt;&gt; codes, etc). Hmm, I guess we could just use twisted since we are
&gt;&gt; serving just three resources, but if the application gets a little
&gt;&gt; more complex then things could tricky pretty fast with twisted.
&gt;&gt;
&gt;&gt; -Sathya
&gt;&gt;
&gt;

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711161821</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya.ceg@gmail.com</senderEmail><timestampReceived>2012-07-11 16:18:21-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

&gt; Sathya, do you want to work on the back-end while we work on the front-end
&gt; (starting with the code you've already written)?

Okay.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712210805</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-12 21:08:05-0400</timestampReceived><subject>Re: [tor-dev] Tor Export</subject><body>



On 7/12/12 12:15 PM, Damian Johnson wrote:
&gt; Also, you aren't checking that all of the descriptors are of the same
&gt; type. If you get a list with both server descriptors and extrainfo
&gt; descriptors then I'm not sure what this function will do, but it's
&gt; probably not what the user wants. Please include that use case while
&gt; writing unit tests.

Isn't this a bizarre use-case?  I.e., what is a use-case in which a 
client wants a csv of a ((ServerDescriptor + ExtraInfoDescriptor) list)? 
  I.e., a list of a disjoint union type?

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710112457</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-10 11:24:57-0400</timestampReceived><subject>Re: [tor-dev] Proposal 204: Subdomain support for Hidden Service addresses</subject><body>

On 7/7/12 7:06 PM, Nick Mathewson wrote:
&gt; The only part I'm worried about here is that we had once considered
&gt; doing authenticated hidden services or some other kind of wacky hidden
&gt; service with a design like "bbbbbbbbb.aaaaaaaaaaaaaaa.onion", where
&gt; bbbbbbbbb is some additional data to use in the protocol.
&gt; 
&gt; Still, we can still do the above proposal and save room to extend the
&gt; .onion address scheme: just reserve *.x.onion for all x of length
&gt; other than 16.

From proposal 121, written in December 2007:

"Currently, rend-spec contains the proposition to encode client-side
authorization data in the URL, like in x.y.z.onion. This was never used
and is also a bad idea, because in case of HTTP the requested URL may be
contained in the Host and Referer fields."

Current rend-spec.txt doesn't mention anything like *.*.onion anymore.
The way how additional data is provided is by using torrc options, not
as part of the URL.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711150915</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-11 15:09:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 204: Subdomain support for Hidden Service addresses</subject><body>

On Tue, Jul 10, 2012 at 7:24 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; On 7/7/12 7:06 PM, Nick Mathewson wrote:
&gt;&gt; The only part I'm worried about here is that we had once considered
&gt;&gt; doing authenticated hidden services or some other kind of wacky hidden
&gt;&gt; service with a design like "bbbbbbbbb.aaaaaaaaaaaaaaa.onion", where
&gt;&gt; bbbbbbbbb is some additional data to use in the protocol.
&gt;&gt;
&gt;&gt; Still, we can still do the above proposal and save room to extend the
&gt;&gt; .onion address scheme: just reserve *.x.onion for all x of length
&gt;&gt; other than 16.
&gt;
&gt; From proposal 121, written in December 2007:
&gt;
&gt; "Currently, rend-spec contains the proposition to encode client-side
&gt; authorization data in the URL, like in x.y.z.onion. This was never used
&gt; and is also a bad idea, because in case of HTTP the requested URL may be
&gt; contained in the Host and Referer fields."
&gt;
&gt; Current rend-spec.txt doesn't mention anything like *.*.onion anymore.
&gt; The way how additional data is provided is by using torrc options, not
&gt; as part of the URL.

Then I see no reason not to accept this proposal.  Does anyone else?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120703141520</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-03 14:15:20-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

&gt;&gt; Which descriptor parsers are you referring to, as some are already
&gt;&gt; implemented? A lot of what we're working on in Tor Export overlaps your work
&gt;&gt; regarding descriptor parsers.
&gt;
&gt; According to my proposal, I was to implement the parsers for V3
&gt; network status documents and microdescriptor documents for the mid
&gt; term evaluation.

Oops, sorry about that Megan. Forgot Ravi was gonna be tackling those
later (I'm trying to keep volunteers from stepping on each other's
toes but my miss this time). Here's Ravi's proposal...
https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706022507</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-06 02:25:07-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

OK, bringing back to tor-dev...

On 7/5/12 1:44 PM, Damian Johnson wrote:
&gt; Hi Norman.
&gt; 
&gt; &gt; (Taking this off tor-dev@ for the moment until we get things straightened out...)
&gt; 
&gt; Actually, this would have been an interesting discussion for the list.
&gt; Feel free to add it back in.
&gt; 
&gt; &gt; The TorExport functionality seems pretty straightforward, but the \
&gt; &gt; stem-interesting parts (new descriptor parsers) already seem to be on Ravi's \
&gt; &gt; punch-list.
&gt; 
&gt; My understanding is that the csv work is to add export (and maybe
&gt; import) functionality to the Descriptor class. This would provide
&gt; those capabilities to the current ServerDescriptor and
&gt; ExtraInfoDescriptor classes in addition to anything we add in the
&gt; future like consensus based entities. If it really isn't possible to
&gt; do in the Descriptor then it would be an abstract method that's
&gt; implemented by Descriptors as we go along.

OK, there's the first confusion on my part; I thought the export 
functionality was to be something like utility scripts rather than built 
into stem itself.

So is export intended to be an instance method of descriptor, one that 
just dumps a single csv line of the instance attributes (maybe subject 
to some selection of those attributes)?  Or a static method that takes a 
collection?

It seems like it might be awkward to have to hack stem itself to add a 
new export format (for example).  Is this a concern?

Actually, this makes me wonder a bit about what exactly stem is.  It 
seems like it is:

* stem the Tor Control Protocol interface,

and

* stem the (relay, network status,...) descriptor utility library.

It seems that the former is dependent upon the latter (for stem to 
provide a list of cached descriptor objects, it needs a descriptor 
utility library that defines those objects), but not the reverse (the 
utilities don't much care where the descriptors come from).  This isn't 
completely correct, since the descriptor utilities might provide APIs 
for parsing some source of descriptor(s) (Tor Control message, 
cached-consensus, metrics), but making the descriptor utility library 
one module among many in stem makes it seem like they are more 
intertwined than they appear.  Of course, you've been thinking about 
this a lot longer than have I.  Do all the known use-cases make need 
both an interface to Tor Control and a descriptor utility library?  I 
guess I'm not quite sure what the design philosophy for stem is.

&gt; &gt; Onionoo is always a possibility, though we'd probably need a bit more guidance on \
&gt; &gt; which part to work on (front end, back end, both?).  But regardless, it still \
&gt; &gt; seems like it depends on various parsers that Ravi is working on.
&gt; 
&gt; For an Onionoo project I would be the main mentor for stem based
&gt; parts, and Karsten would mentor the work on Onionoo itself since he
&gt; wrote the java version (though I'll still do the code reviews). First
&gt; step would be to start a thread with both of us (and tor-dev@) to
&gt; figure out milestones.
&gt; 
&gt; FYI: at the Tor dev meeting Sathyanarayanan (gsathya.ceg@gmail.com)
&gt; also expressed interest in taking on this project, though with his
&gt; summer internship I'm not sure how much time he'll have to help.

Do I understand Onionoo correctly to be basically a small webservice 
that returns a JSON formatted description of data read from a file based 
on the HTTP request parameters, along with a program that presumably 
runs with some frequency to create that file?  It seems that at least 
porting the webservice side to a Django webapp might be a reasonable 
project for the rest of our summer.

However, the little bit of software development that I learned does make 
me want to ask:  Why a Python port or this component?

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120706081013</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-06 08:10:13-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

On Fri, Jul 6, 2012 at 4:25 AM, Norman Danner &lt;ndanner@wesleyan.edu&gt; wrote:
&gt; Do I understand Onionoo correctly to be basically a small webservice that
&gt; returns a JSON formatted description of data read from a file based on the
&gt; HTTP request parameters, along with a program that presumably runs with some
&gt; frequency to create that file?

Yes, that pretty much describes it.

&gt; It seems that at least porting the
&gt; webservice side to a Django webapp might be a reasonable project for the
&gt; rest of our summer.

Sounds great!

Would it be possible for the Django webapp to offer the same protocol
(as in, GET requests) as the current Java servlet?

&gt; However, the little bit of software development that I learned does make me
&gt; want to ask:  Why a Python port or this component?

The main reason is that there are far more potential developers who
can maintain and extend the Python version of Onionoo than the Java
version of it.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706134143</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-06 13:41:43-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>


On 7/6/12 4:10 AM, Karsten Loesing wrote:
&gt; On Fri, Jul 6, 2012 at 4:25 AM, Norman Danner &lt;ndanner@wesleyan.edu&gt; wrote:
&gt;&gt; Do I understand Onionoo correctly to be basically a small webservice that
&gt;&gt; returns a JSON formatted description of data read from a file based on the
&gt;&gt; HTTP request parameters, along with a program that presumably runs with some
&gt;&gt; frequency to create that file?
&gt;
&gt; Yes, that pretty much describes it.
&gt;
&gt;&gt; It seems that at least porting the
&gt;&gt; webservice side to a Django webapp might be a reasonable project for the
&gt;&gt; rest of our summer.
&gt;
&gt; Sounds great!

OK; Megan and Erik, after you incorporate the export function into 
Descriptor in stem, please start reading through the Django tutorial.

We'll start working out milestones on Monday (I'm away until Monday 
morning, but I'll probably have occasional e-mail access); 
Sathyanarayanan, you should probably chime in too.

&gt; Would it be possible for the Django webapp to offer the same protocol
&gt; (as in, GET requests) as the current Java servlet?

 From what I remember of Django, I don't think this will be a problem.

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
  Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706143430</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya.ceg@gmail.com</senderEmail><timestampReceived>2012-07-06 14:34:30-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

&gt; OK; Megan and Erik, after you incorporate the export function into
&gt; Descriptor in stem, please start reading through the Django tutorial.

I'm not sure if Django is a good choice for this project. We don't
require such a heavy web framework with a templating engine, auth,
etc. I'd rather use Tornado or Cyclone+Twisted. Since tor2web, APAF
use Twisted, it would make sense to have onionoo use the same thing.

I've been hacking on this since morning and I have a very simple
prototype which uses Cyclone that parses only the summary documents
and provides an API for that("/summary") - I will clean it up and put
on github in a bit

&gt; We'll start working out milestones on Monday (I'm away until Monday morning,
&gt; but I'll probably have occasional e-mail access); Sathyanarayanan, you
&gt; should probably chime in too.

Sounds good.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706145326</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-07-06 14:53:26-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

Yes, I was wondering whether there would be something simpler than 
Django after I wrote that message.

Megan and Erik:  take a look through the websites for Django, Tornado, 
and Cyclone/Twisted to get a sense as to what each does.

	- Norman

On 7/6/12 10:34 AM, Sathyanarayanan Gunasekaran wrote:
&gt;&gt; OK; Megan and Erik, after you incorporate the export function into
&gt;&gt; Descriptor in stem, please start reading through the Django tutorial.
&gt;
&gt; I'm not sure if Django is a good choice for this project. We don't
&gt; require such a heavy web framework with a templating engine, auth,
&gt; etc. I'd rather use Tornado or Cyclone+Twisted. Since tor2web, APAF
&gt; use Twisted, it would make sense to have onionoo use the same thing.
&gt;
&gt; I've been hacking on this since morning and I have a very simple
&gt; prototype which uses Cyclone that parses only the summary documents
&gt; and provides an API for that("/summary") - I will clean it up and put
&gt; on github in a bit
&gt;
&gt;&gt; We'll start working out milestones on Monday (I'm away until Monday morning,
&gt;&gt; but I'll probably have occasional e-mail access); Sathyanarayanan, you
&gt;&gt; should probably chime in too.
&gt;
&gt; Sounds good.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
  Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706174947</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-06 17:49:47-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

&gt; So is export intended to be an instance method of descriptor, one that just dumps a \
&gt; single csv line of the instance attributes (maybe subject to some selection of \
&gt; those attributes)?  Or a static method that takes a collection?

Either would work fine. I was envisioning the former, though on
reflection stem/descriptor/export.py module would probably be better
since that localizes this functionality and allows for better
expansion in the future (other formats such as json, or the inclusion
of import functionality).

&gt; It seems like it might be awkward to have to hack stem itself to add a new export \
&gt; format (for example).  Is this a concern?

That depends on how useful users would find it to be. If researchers
commonly want csv export functionality then we might as well support
it. However, if it's a rarely desired feature then there's little
reason to clutter our API. My understanding is that this feature is
mostly for researchers and sysadmins, so as part of the target
audience I'm happy to defer to you on how we handle this.

&gt; Do all the known use-cases make need both an interface to Tor Control and a \
&gt; descriptor utility library?

No, you're completely right. Stem's controller functionality utilizes
its descriptor functionality but not vice versa. Another design that
we could go with is to make several smaller libraries (descriptors,
controller, response parsing, shared utilities, etc) if stem grows
unwieldy. However, we're nowhere near that yet and keeping stem as a
single library makes development, testing, installation and usage far
easier.

Stem is a library to make working with Tor easier for developers and
researchers, with the current scope of the Tor control and dir specs.
My plan is to complete that, release it to the community, then see
based on feedback where we should go from there.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120709154025</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-07-09 15:40:25-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

Megan and I have been working on the CSV export functionality that was
being discussed a little over a week ago, and given the recent discussion,
we would like to clarify the expected/desired implementation of this
feature.

We have created an export.py module within /stem/descriptor, which contains
a single method as of now that takes a descriptor object and two possible
lists of fields.  These lists are to be specified as either the explicitly
included attributes of the descriptor or the attributes to be excluded.  As
we continue to work on this code, Megan and I were wondering if it wouldn't
be better to accept a file object as well, in addition to accepting any
number of descriptor objects (i.e. def csv_exp(..., *descriptors)).  Or are
there other suggestions request concerning what sort of input such a method
should take?

-Erik &amp; Megan

On Fri, Jul 6, 2012 at 1:49 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; &gt; So is export intended to be an instance method of descriptor, one that
&gt; just dumps a single csv line of the instance attributes (maybe subject to
&gt; some selection of those attributes)?  Or a static method that takes a
&gt; collection?
&gt;
&gt; Either would work fine. I was envisioning the former, though on
&gt; reflection stem/descriptor/export.py module would probably be better
&gt; since that localizes this functionality and allows for better
&gt; expansion in the future (other formats such as json, or the inclusion
&gt; of import functionality).
&gt;
&gt; &gt; It seems like it might be awkward to have to hack stem itself to add a
&gt; new export format (for example).  Is this a concern?
&gt;
&gt; That depends on how useful users would find it to be. If researchers
&gt; commonly want csv export functionality then we might as well support
&gt; it. However, if it's a rarely desired feature then there's little
&gt; reason to clutter our API. My understanding is that this feature is
&gt; mostly for researchers and sysadmins, so as part of the target
&gt; audience I'm happy to defer to you on how we handle this.
&gt;
&gt; &gt; Do all the known use-cases make need both an interface to Tor Control
&gt; and a descriptor utility library?
&gt;
&gt; No, you're completely right. Stem's controller functionality utilizes
&gt; its descriptor functionality but not vice versa. Another design that
&gt; we could go with is to make several smaller libraries (descriptors,
&gt; controller, response parsing, shared utilities, etc) if stem grows
&gt; unwieldy. However, we're nowhere near that yet and keeping stem as a
&gt; single library makes development, testing, installation and usage far
&gt; easier.
&gt;
&gt; Stem is a library to make working with Tor easier for developers and
&gt; researchers, with the current scope of the Tor control and dir specs.
&gt; My plan is to complete that, release it to the community, then see
&gt; based on feedback where we should go from there.
&gt;

[Attachment #5 (text/html)]

&lt;div&gt;Hello,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Megan and I have been working on the CSV export \
functionality that was being discussed a little over a week ago, and given the recent \
discussion, we would like to clarify the expected/desired implementation of this \
feature.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We have created an export.py module within /stem/descriptor, \
which contains a single method as of now that takes a descriptor object and two \
possible lists of fields.  These lists are to be specified as either the explicitly \
included attributes of the descriptor or the attributes to be excluded.  As we \
continue to work on this code, Megan and I were wondering if it wouldn't be \
better to accept a file object as well, in addition to accepting any number of \
descriptor objects (i.e. def csv_exp(..., *descriptors)).  Or are there other \
suggestions request concerning what sort of input such a method should take?&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Erik &amp; Megan&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Jul \
6, 2012 at 1:49 PM, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="im"&gt;&gt; So is export intended to be an instance \
method of descriptor, one that just dumps a single csv line of the instance \
attributes (maybe subject to some selection of those attributes)?  Or a static method \
that takes a collection?&lt;br&gt;


&lt;br&gt;
&lt;/div&gt;Either would work fine. I was envisioning the former, though on&lt;br&gt;
reflection stem/descriptor/export.py module would probably be better&lt;br&gt;
since that localizes this functionality and allows for better&lt;br&gt;
expansion in the future (other formats such as json, or the inclusion&lt;br&gt;
of import functionality).&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; It seems like it might be awkward to have to hack stem itself to add a new \
export format (for example).  Is this a concern?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;That depends on how useful users would find it to be. If researchers&lt;br&gt;
commonly want csv export functionality then we might as well support&lt;br&gt;
it. However, if it's a rarely desired feature then there's little&lt;br&gt;
reason to clutter our API. My understanding is that this feature is&lt;br&gt;
mostly for researchers and sysadmins, so as part of the target&lt;br&gt;
audience I'm happy to defer to you on how we handle this.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Do all the known use-cases make need both an interface to Tor Control and a \
descriptor utility library?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;No, you're completely right. Stem's controller functionality \
utilizes&lt;br&gt; its descriptor functionality but not vice versa. Another design that&lt;br&gt;
we could go with is to make several smaller libraries (descriptors,&lt;br&gt;
controller, response parsing, shared utilities, etc) if stem grows&lt;br&gt;
unwieldy. However, we're nowhere near that yet and keeping stem as a&lt;br&gt;
single library makes development, testing, installation and usage far&lt;br&gt;
easier.&lt;br&gt;
&lt;br&gt;
Stem is a library to make working with Tor easier for developers and&lt;br&gt;
researchers, with the current scope of the Tor control and dir specs.&lt;br&gt;
My plan is to complete that, release it to the community, then see&lt;br&gt;
based on feedback where we should go from there.&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120709172253</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-09 17:22:53-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

On Mon, Jul 9, 2012 at 8:40 AM, Erik I Islo &lt;eislo@wesleyan.edu&gt; wrote:
&gt; Hello,
&gt;
&gt; Megan and I have been working on the CSV export functionality that was being
&gt; discussed a little over a week ago, and given the recent discussion, we
&gt; would like to clarify the expected/desired implementation of this feature.
&gt;
&gt; We have created an export.py module within /stem/descriptor, which contains
&gt; a single method as of now that takes a descriptor object and two possible
&gt; lists of fields.  These lists are to be specified as either the explicitly
&gt; included attributes of the descriptor or the attributes to be excluded.  As
&gt; we continue to work on this code, Megan and I were wondering if it wouldn't
&gt; be better to accept a file object as well, in addition to accepting any
&gt; number of descriptor objects (i.e. def csv_exp(..., *descriptors)).  Or are
&gt; there other suggestions request concerning what sort of input such a method
&gt; should take?
&gt;
&gt; -Erik &amp; Megan
&gt;
&gt; On Fri, Jul 6, 2012 at 1:49 PM, Damian Johnson &lt;atagar@torproject.org&gt;
&gt; wrote:
&gt;&gt;
&gt;&gt; &gt; So is export intended to be an instance method of descriptor, one that
&gt;&gt; &gt; just dumps a single csv line of the instance attributes (maybe subject to
&gt;&gt; &gt; some selection of those attributes)?  Or a static method that takes a
&gt;&gt; &gt; collection?
&gt;&gt;
&gt;&gt; Either would work fine. I was envisioning the former, though on
&gt;&gt; reflection stem/descriptor/export.py module would probably be better
&gt;&gt; since that localizes this functionality and allows for better
&gt;&gt; expansion in the future (other formats such as json, or the inclusion
&gt;&gt; of import functionality).
&gt;&gt;
&gt;&gt; &gt; It seems like it might be awkward to have to hack stem itself to add a
&gt;&gt; &gt; new export format (for example).  Is this a concern?
&gt;&gt;
&gt;&gt; That depends on how useful users would find it to be. If researchers
&gt;&gt; commonly want csv export functionality then we might as well support
&gt;&gt; it. However, if it's a rarely desired feature then there's little
&gt;&gt; reason to clutter our API. My understanding is that this feature is
&gt;&gt; mostly for researchers and sysadmins, so as part of the target
&gt;&gt; audience I'm happy to defer to you on how we handle this.
&gt;&gt;
&gt;&gt; &gt; Do all the known use-cases make need both an interface to Tor Control
&gt;&gt; &gt; and a descriptor utility library?
&gt;&gt;
&gt;&gt; No, you're completely right. Stem's controller functionality utilizes
&gt;&gt; its descriptor functionality but not vice versa. Another design that
&gt;&gt; we could go with is to make several smaller libraries (descriptors,
&gt;&gt; controller, response parsing, shared utilities, etc) if stem grows
&gt;&gt; unwieldy. However, we're nowhere near that yet and keeping stem as a
&gt;&gt; single library makes development, testing, installation and usage far
&gt;&gt; easier.
&gt;&gt;
&gt;&gt; Stem is a library to make working with Tor easier for developers and
&gt;&gt; researchers, with the current scope of the Tor control and dir specs.
&gt;&gt; My plan is to complete that, release it to the community, then see
&gt;&gt; based on feedback where we should go from there.
&gt;
&gt;

Naif: This was your feature request. Thoughts?

&gt; Megan and I were wondering if it wouldn't
&gt; be better to accept a file object as well, in addition to accepting any
&gt; number of descriptor objects (i.e. def csv_exp(..., *descriptors)).

If we can make it work then that would be nice, though having a *list
entry generally doesn't work well for optional keyword fields. Ie, if
you had the signature...

def csv_exp(include_fields = None, exclude_fields = None, destination
= None, *descriptors)

Then the caller needs to provide all of those keyword fields which
kinda defeats the purpose of them being optional. For instance, to
call it with the defaults and a single descriptor it would be...

csv_exp(None, None, None, my_descriptor)

My suggestion is to just accept a single argument that can either be a
single descriptor or a list of descriptors.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710152308</emailId><senderName>Megan Chang</senderName><senderEmail>mchang01@wesleyan.edu</senderEmail><timestampReceived>2012-07-10 15:23:08-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

After looking at possible use cases, wouldn't it make sense to allow the
caller to specify a file to be written to?  Regardless, we were thinking of
creating two methods, one that takes a list of descriptors, and one that
takes a single descriptor. This would remove the need to check for a list
versus an object, allowing more consistent typing.

Just to clarify, the include_fields and exclude_fields parameters would
have default values of none and since we are taking in descriptors are a
list rather than a *arg, we don't need to worry about specifying the
keyword parameters. That said, if a caller doesn't specify either, all
parameters would be returned. Otherwise, it is expected that only one of
these parameters would be specified by the caller.

Also, going back to features expected by the community, would users want a
csv header to be written? Or simply a csv file?

- Erik &amp; Megan

On Mon, Jul 9, 2012 at 1:22 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; On Mon, Jul 9, 2012 at 8:40 AM, Erik I Islo &lt;eislo@wesleyan.edu&gt; wrote:
&gt; &gt; Hello,
&gt; &gt;
&gt; &gt; Megan and I have been working on the CSV export functionality that was
&gt; being
&gt; &gt; discussed a little over a week ago, and given the recent discussion, we
&gt; &gt; would like to clarify the expected/desired implementation of this
&gt; feature.
&gt; &gt;
&gt; &gt; We have created an export.py module within /stem/descriptor, which
&gt; contains
&gt; &gt; a single method as of now that takes a descriptor object and two possible
&gt; &gt; lists of fields.  These lists are to be specified as either the
&gt; explicitly
&gt; &gt; included attributes of the descriptor or the attributes to be excluded.
&gt;  As
&gt; &gt; we continue to work on this code, Megan and I were wondering if it
&gt; wouldn't
&gt; &gt; be better to accept a file object as well, in addition to accepting any
&gt; &gt; number of descriptor objects (i.e. def csv_exp(..., *descriptors)).  Or
&gt; are
&gt; &gt; there other suggestions request concerning what sort of input such a
&gt; method
&gt; &gt; should take?
&gt; &gt;
&gt; &gt; -Erik &amp; Megan
&gt; &gt;
&gt; &gt; On Fri, Jul 6, 2012 at 1:49 PM, Damian Johnson &lt;atagar@torproject.org&gt;
&gt; &gt; wrote:
&gt; &gt;&gt;
&gt; &gt;&gt; &gt; So is export intended to be an instance method of descriptor, one that
&gt; &gt;&gt; &gt; just dumps a single csv line of the instance attributes (maybe
&gt; subject to
&gt; &gt;&gt; &gt; some selection of those attributes)?  Or a static method that takes a
&gt; &gt;&gt; &gt; collection?
&gt; &gt;&gt;
&gt; &gt;&gt; Either would work fine. I was envisioning the former, though on
&gt; &gt;&gt; reflection stem/descriptor/export.py module would probably be better
&gt; &gt;&gt; since that localizes this functionality and allows for better
&gt; &gt;&gt; expansion in the future (other formats such as json, or the inclusion
&gt; &gt;&gt; of import functionality).
&gt; &gt;&gt;
&gt; &gt;&gt; &gt; It seems like it might be awkward to have to hack stem itself to add a
&gt; &gt;&gt; &gt; new export format (for example).  Is this a concern?
&gt; &gt;&gt;
&gt; &gt;&gt; That depends on how useful users would find it to be. If researchers
&gt; &gt;&gt; commonly want csv export functionality then we might as well support
&gt; &gt;&gt; it. However, if it's a rarely desired feature then there's little
&gt; &gt;&gt; reason to clutter our API. My understanding is that this feature is
&gt; &gt;&gt; mostly for researchers and sysadmins, so as part of the target
&gt; &gt;&gt; audience I'm happy to defer to you on how we handle this.
&gt; &gt;&gt;
&gt; &gt;&gt; &gt; Do all the known use-cases make need both an interface to Tor Control
&gt; &gt;&gt; &gt; and a descriptor utility library?
&gt; &gt;&gt;
&gt; &gt;&gt; No, you're completely right. Stem's controller functionality utilizes
&gt; &gt;&gt; its descriptor functionality but not vice versa. Another design that
&gt; &gt;&gt; we could go with is to make several smaller libraries (descriptors,
&gt; &gt;&gt; controller, response parsing, shared utilities, etc) if stem grows
&gt; &gt;&gt; unwieldy. However, we're nowhere near that yet and keeping stem as a
&gt; &gt;&gt; single library makes development, testing, installation and usage far
&gt; &gt;&gt; easier.
&gt; &gt;&gt;
&gt; &gt;&gt; Stem is a library to make working with Tor easier for developers and
&gt; &gt;&gt; researchers, with the current scope of the Tor control and dir specs.
&gt; &gt;&gt; My plan is to complete that, release it to the community, then see
&gt; &gt;&gt; based on feedback where we should go from there.
&gt; &gt;
&gt; &gt;
&gt;
&gt; Naif: This was your feature request. Thoughts?
&gt;
&gt; &gt; Megan and I were wondering if it wouldn't
&gt; &gt; be better to accept a file object as well, in addition to accepting any
&gt; &gt; number of descriptor objects (i.e. def csv_exp(..., *descriptors)).
&gt;
&gt; If we can make it work then that would be nice, though having a *list
&gt; entry generally doesn't work well for optional keyword fields. Ie, if
&gt; you had the signature...
&gt;
&gt; def csv_exp(include_fields = None, exclude_fields = None, destination
&gt; = None, *descriptors)
&gt;
&gt; Then the caller needs to provide all of those keyword fields which
&gt; kinda defeats the purpose of them being optional. For instance, to
&gt; call it with the defaults and a single descriptor it would be...
&gt;
&gt; csv_exp(None, None, None, my_descriptor)
&gt;
&gt; My suggestion is to just accept a single argument that can either be a
&gt; single descriptor or a list of descriptors.
&gt;
&gt; Cheers! -Damian
&gt;

[Attachment #5 (text/html)]

Hi Damian,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;After looking at possible use cases, wouldn't it \
make sense to allow the caller to specify a file to be written to?  Regardless, we \
were thinking of creating two methods, one that takes a list of descriptors, and one \
that takes a single descriptor. This would remove the need to check for a list versus \
an object, allowing more consistent typing.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Just to clarify, the include_fields and exclude_fields parameters \
would have default values of none and since we are taking in descriptors are a list \
rather than a *arg, we don't need to worry about specifying the keyword \
parameters. That said, if a caller doesn't specify either, all parameters would \
be returned. Otherwise, it is expected that only one of these parameters would be \
specified by the caller.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, going back to features expected by the community, would \
users want a csv header to be written? Or simply a csv \
file?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Erik &amp; Megan&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On \
Mon, Jul 9, 2012 at 1:22 PM, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;On Mon, Jul 9, 2012 at \
8:40 AM, Erik I Islo &lt;&lt;a \
href="mailto:eislo@wesleyan.edu"&gt;eislo@wesleyan.edu&lt;/a&gt;&gt; wrote:&lt;br&gt;


&gt; Hello,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Megan and I have been working on the CSV export functionality that was being&lt;br&gt;
&gt; discussed a little over a week ago, and given the recent discussion, we&lt;br&gt;
&gt; would like to clarify the expected/desired implementation of this feature.&lt;br&gt;
&gt;&lt;br&gt;
&gt; We have created an export.py module within /stem/descriptor, which contains&lt;br&gt;
&gt; a single method as of now that takes a descriptor object and two possible&lt;br&gt;
&gt; lists of fields.  These lists are to be specified as either the explicitly&lt;br&gt;
&gt; included attributes of the descriptor or the attributes to be excluded.  As&lt;br&gt;
&gt; we continue to work on this code, Megan and I were wondering if it \
wouldn't&lt;br&gt; &gt; be better to accept a file object as well, in addition to \
accepting any&lt;br&gt; &gt; number of descriptor objects (i.e. def csv_exp(..., \
*descriptors)).  Or are&lt;br&gt; &gt; there other suggestions request concerning what sort \
of input such a method&lt;br&gt; &gt; should take?&lt;br&gt;
&gt;&lt;br&gt;
&gt; -Erik &amp; Megan&lt;br&gt;
&gt;&lt;br&gt;
&gt; On Fri, Jul 6, 2012 at 1:49 PM, Damian Johnson &lt;&lt;a \
href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;br&gt; &gt; wrote:&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; &gt; So is export intended to be an instance method of descriptor, one \
that&lt;br&gt; &gt;&gt; &gt; just dumps a single csv line of the instance attributes (maybe \
subject to&lt;br&gt; &gt;&gt; &gt; some selection of those attributes)?  Or a static method \
that takes a&lt;br&gt; &gt;&gt; &gt; collection?&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Either would work fine. I was envisioning the former, though on&lt;br&gt;
&gt;&gt; reflection stem/descriptor/export.py module would probably be better&lt;br&gt;
&gt;&gt; since that localizes this functionality and allows for better&lt;br&gt;
&gt;&gt; expansion in the future (other formats such as json, or the inclusion&lt;br&gt;
&gt;&gt; of import functionality).&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; &gt; It seems like it might be awkward to have to hack stem itself to add \
a&lt;br&gt; &gt;&gt; &gt; new export format (for example).  Is this a concern?&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; That depends on how useful users would find it to be. If researchers&lt;br&gt;
&gt;&gt; commonly want csv export functionality then we might as well support&lt;br&gt;
&gt;&gt; it. However, if it's a rarely desired feature then there's \
little&lt;br&gt; &gt;&gt; reason to clutter our API. My understanding is that this feature \
is&lt;br&gt; &gt;&gt; mostly for researchers and sysadmins, so as part of the target&lt;br&gt;
&gt;&gt; audience I'm happy to defer to you on how we handle this.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; &gt; Do all the known use-cases make need both an interface to Tor \
Control&lt;br&gt; &gt;&gt; &gt; and a descriptor utility library?&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; No, you're completely right. Stem's controller functionality \
utilizes&lt;br&gt; &gt;&gt; its descriptor functionality but not vice versa. Another design \
that&lt;br&gt; &gt;&gt; we could go with is to make several smaller libraries \
(descriptors,&lt;br&gt; &gt;&gt; controller, response parsing, shared utilities, etc) if \
stem grows&lt;br&gt; &gt;&gt; unwieldy. However, we're nowhere near that yet and \
keeping stem as a&lt;br&gt; &gt;&gt; single library makes development, testing, \
installation and usage far&lt;br&gt; &gt;&gt; easier.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Stem is a library to make working with Tor easier for developers and&lt;br&gt;
&gt;&gt; researchers, with the current scope of the Tor control and dir specs.&lt;br&gt;
&gt;&gt; My plan is to complete that, release it to the community, then see&lt;br&gt;
&gt;&gt; based on feedback where we should go from there.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;Naif: This was your feature request. Thoughts?&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Megan and I were wondering if it wouldn't&lt;br&gt;
&gt; be better to accept a file object as well, in addition to accepting any&lt;br&gt;
&gt; number of descriptor objects (i.e. def csv_exp(..., *descriptors)).&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;If we can make it work then that would be nice, though having a *list&lt;br&gt;
entry generally doesn't work well for optional keyword fields. Ie, if&lt;br&gt;
you had the signature...&lt;br&gt;
&lt;br&gt;
def csv_exp(include_fields = None, exclude_fields = None, destination&lt;br&gt;
= None, *descriptors)&lt;br&gt;
&lt;br&gt;
Then the caller needs to provide all of those keyword fields which&lt;br&gt;
kinda defeats the purpose of them being optional. For instance, to&lt;br&gt;
call it with the defaults and a single descriptor it would be...&lt;br&gt;
&lt;br&gt;
csv_exp(None, None, None, my_descriptor)&lt;br&gt;
&lt;br&gt;
My suggestion is to just accept a single argument that can either be a&lt;br&gt;
single descriptor or a list of descriptors.&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120707171352</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-07 17:13:52-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] Implement proposal xxx: ignore subdomains in hidden service addresses</subject><body>

Looks

On Fri, Jul 6, 2012 at 10:56 AM, J=E9r=E9my Bobbio &lt;lunar@debian.org&gt; wrote:
&gt; The implementation is pretty straightforward: parse_extended_hostna me() =
is
&gt; modified to drop any leading components from an address like
&gt; 'foo.aaaaaaaaaaaaaaaa.onion'.


Looks good except for a few things:

  * It needs a "changes" file; see doc/HACKING for the format there.
  * The documentation for the function doesn't say that it accepts the
new syntax, and doesn't say that it removes the leading material from
the hostname.
  * It considers .aaaaaaaaaaaaaaa.onion to be a valid hostname; is that wro=
ng?
  * The tests should probably make sure that it modifies the hostname
as expected

&gt; Warning! Tests on this patch were limited to 'make check'.

  * Somebody should run this to make sure that it works. :)

BTW, it's usually a good idea to put patches on the bugtracker at
trac.torproject.org: that way it is way harder for me to forget about
them, drop them on the floor, or anything like that.

cheers,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619002657</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-06-19 00:26:57-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; 180  Pluggable transports for circumvention

Happy to say that the trunk/master branch of Orbot supports obfsproxy bridges in the \
version we will push out this week to all .pf our users.

&gt; 171  Separate streams across circuits by connection metadata

Gibberbot v9, which is at rc4 now and will be final this week, supports this via \
random user/pwd values in the socks handshake. Thanks to Jake for the help on that \
one.

+n


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120630170319</emailId><senderName>Fabian Keil</senderName><senderEmail>freebsd-listen@fabiankeil.de</senderEmail><timestampReceived>2012-06-30 17:03:19-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

[Attachment #2 (multipart/signed)]


Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; IMPLEMENTED IN 0.2.3.x

&gt;    174  Optimistic Data for Tor: Server Side
&gt;    181  Optimistic Data for Tor: Client Side
&gt; 
&gt;      This one is a performance hack that hasn't seen its full impact
&gt;      yet.  Starting with Tor 0.2.3.x, clients MAY send data to the
&gt;      exit node before finding out whether the exit has been able to
&gt;      successfully connect to the destination server.  Previously, it
&gt;      took an extra round trip for clients to wait to see whether the
&gt;      exit said "Yes, I'm connected" before they were allowed to send
&gt;      data for the exit.
&gt; 
&gt;      This should make connection startup faster in many protocols
&gt;      where the client speaks first (http, https), as more and more
&gt;      client programs gain support for it.

Is optimistically sending data for non-testing purposes recommended?

The "Security implications" in 181 seem to imply that it isn't,
but the man page doesn't mention any risks. Is that because they
are considered obvious, or simply an oversight?

Fabian

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120701095433</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-01 09:54:33-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

On 6/18/12 11:24 PM, Nick Mathewson wrote:
&gt; PARTIALLY IMPLEMENTED IN 0.2.3.x
&gt; 
&gt;    186  Multiple addresses for one OR or bridge
&gt; 
&gt;      We've implemented this to the extent of letting a bridge have a
&gt;      single IPv6 address.  Supporting this for regular relays will
&gt;      need to wait for 0.2.4.x.  We're still deciding on whether it's
&gt;      worthwhile to allow more than one IPv4 and one IPv6 address.
&gt; 
&gt;      (Proposal by Nick Mathewson, revised based on extensive feeback
&gt;      by Roger Dingledine and Linus Nordberg.)

This maybe very important in order to be able to "separate" the
local-address from the IP address published  / announced.

It maybe valuable, very valuable, if for a specific single node i would
be able to add-up even 100 IP:Port pair, then using "third party system"
to redirect inbound sockets to that 100 IP:Port to the main one.

I mean, an IP:Port can also not be listening on the specific node but
also represent a remote tcp-port-forwarder that is forwarding incoming
TCP socket to the node OR's port.

It would be very interesting if this kind of setup could be done.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120701152904</emailId><senderName>Fabian Keil</senderName><senderEmail>freebsd-listen@fabiankeil.de</senderEmail><timestampReceived>2012-07-01 15:29:04-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

[Attachment #2 (multipart/signed)]


Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:

&gt; On Sat, Jun 30, 2012 at 07:03:19PM +0200, Fabian Keil wrote:
&gt; &gt; Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; IMPLEMENTED IN 0.2.3.x
&gt; &gt; 
&gt; &gt; &gt;    174  Optimistic Data for Tor: Server Side
&gt; &gt; &gt;    181  Optimistic Data for Tor: Client Side
&gt; &gt; &gt; 
&gt; &gt; &gt;      This one is a performance hack that hasn't seen its full impact
&gt; &gt; &gt;      yet.  Starting with Tor 0.2.3.x, clients MAY send data to the
&gt; &gt; &gt;      exit node before finding out whether the exit has been able to
&gt; &gt; &gt;      successfully connect to the destination server.  Previously, it
&gt; &gt; &gt;      took an extra round trip for clients to wait to see whether the
&gt; &gt; &gt;      exit said "Yes, I'm connected" before they were allowed to send
&gt; &gt; &gt;      data for the exit.
&gt; &gt; &gt; 
&gt; &gt; &gt;      This should make connection startup faster in many protocols
&gt; &gt; &gt;      where the client speaks first (http, https), as more and more
&gt; &gt; &gt;      client programs gain support for it.
&gt; &gt; 
&gt; &gt; Is optimistically sending data for non-testing purposes recommended?
&gt; &gt; 
&gt; &gt; The "Security implications" in 181 seem to imply that it isn't,
&gt; &gt; but the man page doesn't mention any risks. Is that because they
&gt; &gt; are considered obvious, or simply an oversight?
&gt; 
&gt; The issue is that an exit node that supports optimistic data can tell
&gt; when a client is using that feature.

I'm aware of that, additionally I would expect that webservers can
(with some probability) tell as well.

&gt;                                       So if only a handful of clients
&gt; have upgraded to a TBB that supports it (none does at this time),
&gt; they'll stand out.  That's why the default is "use the consensus value",
&gt; which is currently off.  The consensus value can be turned on later,
&gt; when "enough" people can support it.

The default can be changed, though, and while the man page
contains recommendations and even strong recommendation for
other parameter values, there's no recommendation for or against
changing the OptimisticData settings and the risks aren't
mentioned either.

The TorBrowser isn't the only client that could optimistically send
data and other clients (like Privoxy) will need an option for this,
that the user has to explicitly enable.

It's inappropriate for Privoxy's documentation to make recommendations
for or against modifications of Tor's OptimisticData option, therefore
it would be great if the Tor man page contained such a recommendation
so the Privoxy documentation can link to it without putting the user
at risk of changing the option after reading Tor's man page without
understanding the consequences.

Fabian

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120701162457</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-07-01 16:24:57-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

On Sun, Jul 01, 2012 at 05:29:04PM +0200, Fabian Keil wrote:
&gt; &gt;                                       So if only a handful of clients
&gt; &gt; have upgraded to a TBB that supports it (none does at this time),
&gt; &gt; they'll stand out.  That's why the default is "use the consensus value",
&gt; &gt; which is currently off.  The consensus value can be turned on later,
&gt; &gt; when "enough" people can support it.
&gt; 
&gt; The default can be changed, though, and while the man page
&gt; contains recommendations and even strong recommendation for
&gt; other parameter values, there's no recommendation for or against
&gt; changing the OptimisticData settings and the risks aren't
&gt; mentioned either.
&gt; 
&gt; The TorBrowser isn't the only client that could optimistically send
&gt; data and other clients (like Privoxy) will need an option for this,
&gt; that the user has to explicitly enable.
&gt; 
&gt; It's inappropriate for Privoxy's documentation to make recommendations
&gt; for or against modifications of Tor's OptimisticData option, therefore
&gt; it would be great if the Tor man page contained such a recommendation
&gt; so the Privoxy documentation can link to it without putting the user
&gt; at risk of changing the option after reading Tor's man page without
&gt; understanding the consequences.

Does Privoxy support optimistic data?  SOCKS clients (TBB, Privoxy, IM
clients, etc.) need to be modified in order to use this feature of Tor,
as it entails the client sending the data to the SOCKS proxy (the Tor
OP) *before* receiving the SOCKS connection response from it.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120701170629</emailId><senderName>Fabian Keil</senderName><senderEmail>freebsd-listen@fabiankeil.de</senderEmail><timestampReceived>2012-07-01 17:06:29-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

[Attachment #2 (multipart/signed)]


Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:

&gt; On Sun, Jul 01, 2012 at 05:29:04PM +0200, Fabian Keil wrote:
&gt; &gt; &gt;                                       So if only a handful of clients
&gt; &gt; &gt; have upgraded to a TBB that supports it (none does at this time),
&gt; &gt; &gt; they'll stand out.  That's why the default is "use the consensus value",
&gt; &gt; &gt; which is currently off.  The consensus value can be turned on later,
&gt; &gt; &gt; when "enough" people can support it.
&gt; &gt; 
&gt; &gt; The default can be changed, though, and while the man page
&gt; &gt; contains recommendations and even strong recommendation for
&gt; &gt; other parameter values, there's no recommendation for or against
&gt; &gt; changing the OptimisticData settings and the risks aren't
&gt; &gt; mentioned either.
&gt; &gt; 
&gt; &gt; The TorBrowser isn't the only client that could optimistically send
&gt; &gt; data and other clients (like Privoxy) will need an option for this,
&gt; &gt; that the user has to explicitly enable.
&gt; &gt; 
&gt; &gt; It's inappropriate for Privoxy's documentation to make recommendations
&gt; &gt; for or against modifications of Tor's OptimisticData option, therefore
&gt; &gt; it would be great if the Tor man page contained such a recommendation
&gt; &gt; so the Privoxy documentation can link to it without putting the user
&gt; &gt; at risk of changing the option after reading Tor's man page without
&gt; &gt; understanding the consequences.
&gt; 
&gt; Does Privoxy support optimistic data?  SOCKS clients (TBB, Privoxy, IM
&gt; clients, etc.) need to be modified in order to use this feature of Tor,
&gt; as it entails the client sending the data to the SOCKS proxy (the Tor
&gt; OP) *before* receiving the SOCKS connection response from it.

I implemented (partial) optimistic data support for Privoxy about a year
ago. The code hasn't been committed to the official repository due to the
documentation challenge outlined above.

Fabian

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120702120848</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-02 12:08:48-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem Controller Class</subject><body>

Hello.

The configuration related control methods get closer to merging each
day. I've been working on the control methods for the other control
commands. I will begin working on the event handling methods later
this week. I also found &amp; fixed(?) a tiny bug in the tests[1].

The deliverables for my mid term evaluation are:

* Implementation of a fully documented General controller class with sufficient
    test coverage.
* Implementation of parsers for parsing network status documents and
    microdescriptor documents with significant test coverage.
* Integrate the Safe Cookie authentication client into Stem. (Close #5262).

Safe cookie authentication support has been merged into master.

I am fairly certain I will be done coding (most, if not all of) the
general controller class before the mid-term evaluation, but, it's
unlikely that it will be merged into stem/master that soon.

It's highly unlikely that I'll be able to work on the descriptor
parsers before the mid-term evaluation. I do have a large amount of
buffer time at the end of the program which should be more than enough
to implement them, even after taking Hofstadter's law into account :/

1. https://trac.torproject.org/projects/tor/ticket/6248

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120702171235</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-07-02 17:12:35-0400</timestampReceived><subject>[tor-dev] [GSoC] Pluggable Transports in Python Status Update</subject><body>

[Attachment #2 (multipart/alternative)]


Status Update - Refactoring

There was a slight change in the schedule in that I moved refactoring up in
front of testing and debugging.

The major refactoring effort was in splitting the project into two parts.
The library for implementing the pluggable transport specification, with
environment variable parsing and printing of pluggable transport protocol
lines to stdout is now all that is included in pyptlib. The framework and
obfsproxy command line program replacement have been split off into
py-obfsproxy.

A high-level API has also been added to pyptlib which requires less
knowledge of the spec. It automatically parses environment variables and
generates protocol lines. The transport implementation just needs to get
the list of supported transports and then report success or failure for the
launch of each transport as well as the end of the transport launching
phase. Examples have been included in pyptlib for how to use the high-level
library and py-obfsproxy has been ported to the high-level library as well.

All of the code has also been reformatted according to PEP 8 guidelines.
Private methods have also been renamed to use the __foo syntax as specified
in the python style guidelines.

This week the focus is going to be on testing the framework and obfsproxy
command line replacement to get the dummy protocol working. One everything
is working the focus will shift to documenting the now hopefully stable
pyptlib API.

pyptlib: http://github.com/blanu/pyptlib

py-obfsproxy: http://github.com/blanu/py-obfsproxy

More posts on the blog: http://stepthreeprivacy.org/

[Attachment #5 (text/html)]

&lt;p style="outline:0px none;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-inden \
t:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 Status Update - Refactoring&lt;br&gt;&lt;/p&gt;&lt;p style="outline:none 0px;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 There was a slight change in the schedule in that I moved refactoring up in front of \
testing and debugging.&lt;/p&gt;&lt;p style="outline:none 0px;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 The major refactoring effort was in splitting the project into two parts. The \
library for implementing the pluggable transport specification, with environment \
variable parsing and printing of pluggable transport protocol lines to stdout is now \
all that is included in pyptlib. The framework and obfsproxy command line program \
replacement have been split off into py-obfsproxy.&lt;/p&gt; &lt;p style="outline:none \
0px;margin:10px 0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 A high-level API has also been added to pyptlib which requires less knowledge of the \
spec. It automatically parses environment variables and generates protocol lines. The \
transport implementation just needs to get the list of supported transports and then \
report success or failure for the launch of each transport as well as the end of the \
transport launching phase. Examples have been included in pyptlib for how to use the \
high-level library and py-obfsproxy has been ported to the high-level library as \
well.&lt;/p&gt; &lt;p style="outline:none 0px;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 All of the code has also been reformatted according to PEP 8 guidelines. Private \
methods have also been renamed to use the __foo syntax as specified in the python \
style guidelines.&lt;/p&gt;&lt;p style="outline:none 0px;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 This week the focus is going to be on testing the framework and obfsproxy command \
line replacement to get the dummy protocol working. One everything is working the \
focus will shift to documenting the now hopefully stable pyptlib API.&lt;/p&gt; &lt;p \
style="outline:none 0px;margin:10px \
0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-align \
:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 pyptlib:&lt;span class="Apple-converted-space"&gt; &lt;/span&gt;&lt;a \
href="http://github.com/blanu/pyptlib" style="outline:none \
0px;color:rgb(68,68,68);margin-top:0px!important;margin-bottom:0px!important"&gt;http://github.com/blanu/pyptlib&lt;/a&gt;&lt;/p&gt;
 &lt;p style="outline:0px \
none;margin-top:10px;margin-bottom:0px!important;margin-right:0px;margin-left:0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-inden \
t:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 py-obfsproxy:&lt;span class="Apple-converted-space"&gt; &lt;/span&gt;&lt;a \
href="http://github.com/blanu/py-obfsproxy" style="outline:0px \
none;color:rgb(68,68,68);margin-top:0px!important;margin-bottom:0px!important"&gt;http://github.com/blanu/py-obfsproxy&lt;/a&gt;&lt;/p&gt;
 &lt;p style="outline:0px \
none;margin-top:10px;margin-bottom:0px!important;margin-right:0px;margin-left:0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-inden \
t:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 More posts on the blog: &lt;a \
href="http://stepthreeprivacy.org/"&gt;http://stepthreeprivacy.org/&lt;/a&gt;&lt;/p&gt;&lt;p \
style="outline:0px none;margin-top:10px;margin-bottom:0px!important;margin-right:0px;margin-left:0px;color:rgb(68,68,68);font-family:'Helvetica \
Neue',HelveticaNeue,Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;fo \
nt-variant:normal;font-weight:normal;letter-spacing:normal;line-height:19px;text-inden \
t:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"&gt;
 &lt;br&gt;&lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120702195133</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-07-02 19:51:33-0400</timestampReceived><subject>[tor-dev] [GSoC] Vidalia - Week 6</subject><body>

[Attachment #2 (multipart/alternative)]


I have created the Hidden Service plugin. Currently, the plugin loads the
list of hidden services from the torrc file and displays it in a custom
widget consisting of line-edits and spinbox inside a groupbox. This is then
displayed in a vertical layout in the container widget's scroll-area.

The values of HiddenServiceDir and HiddenServicePort are displayed in
line-edits. If the Hidden Service had been activated previously, the
hostname string is fetched from the file and displayed inside the plugin.

The user can remove a service by selecting the corresponding checkbox and
clicking the "-" button. The user can also edit a service by changing the
values in line-edit and clicking the Apply button. This would change the
values in the torrc file.

I'm behind schedule by a few days. By this week, I will implement adding
new hidden services to the plugin. The UI needs more work. I had originally
alloted Week 7 for code cleanup.

I have linked to a screenshot of the existing UI below. The "-" button is
grayed out until a checkbox is selected. The Apply button is enabled only
if any text has been edited. The stray TextLabel will be removed. I'm just
using it for testing.

[1] http://i.imgur.com/SG6ea.png
[2] https://github.com/feroze/vidalia-plugins/tree/hiddenservice
[3] http://feroze.in/gsoc12.html

[Attachment #5 (text/html)]

I have created the Hidden Service plugin. Currently, the plugin loads the list of \
hidden services from the torrc file and displays it in a custom widget consisting of \
line-edits and spinbox inside a groupbox. This is then displayed in a vertical layout \
in the container widget's scroll-area.&lt;br&gt; &lt;br&gt;The values of HiddenServiceDir and \
HiddenServicePort are displayed in line-edits. If the Hidden Service had been \
activated previously, the hostname string is fetched from the file and displayed \
inside the plugin.&lt;br&gt;&lt;br&gt; The user can remove a service by selecting the \
corresponding checkbox and clicking the "-" button. The user can also edit \
a service by changing the values in line-edit and clicking the Apply button. This \
would change the values in the torrc file.&lt;br&gt; &lt;br&gt;I'm behind schedule by a few \
days. By this week, I will implement adding new hidden services to the plugin. The UI \
needs more work. I had originally alloted Week 7 for code cleanup.&lt;br&gt;&lt;br&gt;I have \
linked to a screenshot of the existing UI below. The "-" button is grayed \
out until a checkbox is selected. The Apply button is enabled only if any text has \
been edited. The stray TextLabel will be removed. I'm just using it for \
testing.&lt;br&gt; &lt;br&gt;[1] &lt;a \
href="http://i.imgur.com/SG6ea.png"&gt;http://i.imgur.com/SG6ea.png&lt;/a&gt;&lt;br&gt;[2] &lt;a \
href="https://github.com/feroze/vidalia-plugins/tree/hiddenservice"&gt;https://github.com/feroze/vidalia-plugins/tree/hiddenservice&lt;/a&gt;&lt;br&gt;
 [3] &lt;a href="http://feroze.in/gsoc12.html"&gt;http://feroze.in/gsoc12.html&lt;/a&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120703162636</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-03 16:26:36-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - June 2012</subject><body>

Hi all. This June I exchanged my developer hat to be a mentor instead,
spending more time reviewing code than writing it myself. Fingers
crossed that at least one or two of them stick around after the summer
ends!

As such, this status report is more about other people than me.
Apologies if I miss anything.

* Ravi (GSoC Student)

This month Ravi discovered a bug with Tor's GETCONF method [1] and
wrote numerous features including SAFECOOKIE support [2] and a GETCONF
method for the controller [3]. The GETCONF handling is complicated by
the accursed HiddenServiceOptions so it has needed several iterations,
but I plan to merge it this week. After that Ravi already has two more
feature branches lined up for me to review (*sob*)...

* Beck (Volunteer)

Somehow I've never been able to bring myself to do development on
Windows (if you haven't seen Neal Stephenson's Hole Hawg article then
I recommend it [4]). Fortunately Beck does, and has done a fantastic
job of fixing stem and its tests to work there [5][6]. He also added
get_version(), authenticate(), and protocolinfo() methods to the
controller.

* Erik and Megan (Wesleyan Students)

Erik and Megan have been focusing on stem's tests, first submitting a
couple fixes for the mocking module [7][8] then writing unit and
integration tests for the proc utilities [9]. Next they plan to
implement the CSV export functionality suggested by naif [10].

* Sathyanarayanan (Volunteer)

Though work has kept him pretty occupied, Sathyanarayanan has been
working on an ExitPolicy class [11] and is presently at the dev
meeting making plans to implement a python based Onionoo.

* Karsten

Though he isn't hacking on stem itself, Karsten has been helping by
reviewing its descriptor handling and suggesting improvements
[12][13].

Besides those, I implemented a few stem improvements too this month...

* Sphinx Documentation

At the start of June I rewrote stem's documentation into
reStructuredText so it could be compiled by Sphinx. The results are
very pretty...
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/

* Python 2.5 Compatibility

Stem aims to support python versions 2.5 and above (in the 2.x
series). However, most of our development has been on 2.7, letting
backward incompatible changes slip in inadvertently. This ended up
being a two week bug fixing odyssey, but now that it's done stem and
its tests should now work if users want an interpretor that harks back
to 2006...

* Test Freezing Issue on Mac OSX

Both Sathyanarayanan and Karsten reported that stem's integ tests
freeze on Mac OSX. After a dozen hours of hair pulling I've narrowed
it down to an issue where control sockets are left in a CLOSE_WAIT
state when closed, and eventually we lose the ability to make new
control sockets...
https://trac.torproject.org/6235

From what I can tell this is either an issue with Tor, Python, or Mac
OSX (my money's on the last). Help welcome if anyone has ideas.

Other random things from this month include going to the Fremont Fair,
attending a SEAPIG meeting (local python developer group) and making
travel arrangements to attend Defcon later in July.

Cheers! -Damian

[1] https://trac.torproject.org/6172
[2] https://trac.torproject.org/5262
[3] https://trac.torproject.org/6114
[4] http://www.team.net/mjb/hawg.html
[5] https://trac.torproject.org/5493
[6] https://trac.torproject.org/6205
[7] https://gitweb.torproject.org/stem.git/commitdiff/66376f5
[8] https://gitweb.torproject.org/stem.git/commitdiff/385b05b
[9] https://trac.torproject.org/6082
[10] https://trac.torproject.org/6171
[11] https://trac.torproject.org/5454
[12] https://lists.torproject.org/pipermail/tor-dev/2012-June/003608.html
[13] https://trac.torproject.org/6257
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120703175953</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-03 17:59:53-0400</timestampReceived><subject>[tor-dev] Fwd:  Stem Descriptor Parsers</subject><body>

Forwarding Megan's email because it looks like it's stuck in the
mailing list's moderation queue.


---------- Forwarded message ----------
From: Megan Chang &lt;mchang01@wesleyan.edu&gt;
Date: Mon, Jul 2, 2012 at 9:24 PM
Subject: [tor-dev] Stem Descriptor Parsers
To: neenaoffline@gmail.com
Cc: Erik I Islo &lt;eislo@wesleyan.edu&gt;, Norman Danner
&lt;ndanner@wesleyan.edu&gt;, tor-dev@lists.torproject.org


Hi Ravi,

We're currently working on data export for Stem and were wondering if
you could clarify the following paragraph from your recent email:

&gt; It's highly unlikely that I'll be able to work on the descriptor
parsers before the mid-term evaluation. I do have a large amount of
buffer time at the end of the program which should be more than enough
to implement them, even after taking Hofstadter's law into account

Which descriptor parsers are you referring to, as some are already
implemented? A lot of what we're working on in Tor Export overlaps
your work regarding descriptor parsers. Seeing that it is unlikely for
you to complete your work on them in the near future, do you mind if
we take on the minor task of working on descriptor parsers? Also, just
for our reference, when is your mid-term evaluation?

Thanks!
- Erik &amp; Megan


-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120706142331</emailId><senderName></senderName><senderEmail>ale</senderEmail><timestampReceived>2012-07-06 14:23:31-0400</timestampReceived><subject>[tor-dev] Proposal: Subdomain support for Hidden Service addresses</subject><body>

Hello!

As discussed with a few people at the Florence Hackfest, here's a quick proposal
for subdomain support on Hidden Service addresses. The implementation seems pretty
straightforward (a patch will follow).

Please forgive me if the proposal is missing something, or isn't using the
proper Tor-specific technical terms, I'm kinda new to this :) -- I hope it is
understandable nevertheless.



Title: Subdomain support for Hidden Service addresses
Author: Alessandro Preite Martinez
Created: 06-07-2012


1. Overview

  This proposal aims to extend the .onion naming scheme for Hidden
  Service addresses with sub-domain components, which will be ignored
  by the Tor layer but will appear in HTTP Host headers, allowing
  subdomain-based virtual hosting.

2. Motivation

  Sites doing large-scale HTTP virtual hosting on subdomains currently
  do not have a good option for exposure via Hidden Services, short of
  creating a separate HS for every subdomain (which in some cases is
  simply not possible due to the subdomains not being fully known
  beforehand).

3. Implementation

  Tor should ignore any subdomain components besides the Hidden
  Service key, i.e. "foo.aaaaaaaaaaaaaaaa.onion" should be treated
  simply as "aaaaaaaaaaaaaaaa.onion".



--
ale

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120707140930</emailId><senderName>after1990s</senderName><senderEmail>after1990s@gmail.com</senderEmail><timestampReceived>2012-07-07 14:09:30-0400</timestampReceived><subject>[tor-dev] unsubscript</subject><body>

[Attachment #2 (multipart/alternative)]



[Attachment #5 (text/html)]

&lt;br&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120708073835</emailId><senderName>Jérémy Bobbio</senderName><senderEmail>lunar@debian.org</senderEmail><timestampReceived>2012-07-08 07:38:35-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] Implement proposal xxx: ignore subdomains in hidden service addresses</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, Jul 07, 2012 at 01:13:52PM -0400, Nick Mathewson wrote:
&gt; Looks good except for a few things:
&gt; 
&gt;   * It needs a "changes" file; see doc/HACKING for the format there.
&gt;   * The documentation for the function doesn't say that it accepts the
&gt; new syntax, and doesn't say that it removes the leading material from
&gt; the hostname.
&gt;   * It considers .aaaaaaaaaaaaaaa.onion to be a valid hostname; is that wrong?
&gt;   * The tests should probably make sure that it modifies the hostname
&gt; as expected

v2 fixes all these issues.
 
&gt; &gt; Warning! Tests on this patch were limited to 'make check'.
&gt; 
&gt;   * Somebody should run this to make sure that it works. :)

Still not done. :D

&gt; BTW, it's usually a good idea to put patches on the bugtracker at
&gt; trac.torproject.org: that way it is way harder for me to forget about
&gt; them, drop them on the floor, or anything like that.

Done: &lt;https://trac.torproject.org/projects/tor/ticket/6344&gt;

I was waiting for the proposal to gets its number, I guess. Let's move
the discussion on the ticket from now on.

-- 
JÃ©rÃ©my Bobbio                        .''`. 
lunar@debian.org                    : :â’¶  :  # apt-get install anarchism
                                    `. `'` 
                                      `-   

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120708201808</emailId><senderName>Badoo</senderName><senderEmail>noreply+1693845210@badoo.com</senderEmail><timestampReceived>2012-07-08 20:18:08-0400</timestampReceived><subject>[tor-dev] One man left a message for you</subject><body>

[Attachment #2 (multipart/alternative)]


One man left a message for you

Only you can see the sender and content of your message, and you can delete it \
anytime. You can instantly reply using our message exchange system: \
http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da


Some other people in the area who are on Badoo
Segun (Ibadan, Nigeria)
Becky Jay (Ibadan, Nigeria)
Sarath Cristina (Ibadan, Nigeria)

http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da


If the link in this message does not work, try copying and pasting it into your \
browser.

This email is part of our delivery procedure for the message sent by One man. If you \
have received this email by mistake, please ignore it. The message will be deleted \
soon.

Have fun!
The Badoo Team

You have received this email from Badoo Trading Limited (postal address below).
http://eu1.badoo.com/impersonation.phtml?lang_id=3&amp;mail_code=63&amp;email=tor-dev%40lists.torproject.org&amp;block_code=f3ca20&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da
 Badoo Trading Limited is a limited company registered in England and Wales
under CRN 7540255 with its registered office at 12 Red Lion Square, London, WC1R 4QD.


[Attachment #5 (text/html)]

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" \
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html \
xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt;&lt;meta http-equiv="content-type" \
content="text/html; charset=UTF-8" /&gt;


&lt;title&gt;One man left a message for you&lt;/title&gt;
&lt;/head&gt;
&lt;body dir="ltr"&gt;
&lt;div style="max-width: 800px; margin: 0; padding: 15px 0; direction:ltr;"&gt;
&lt;table width="80%" border="0" cellpadding="0" cellspacing="0"&gt;
&lt;tr&gt;
&lt;td width="10%"&gt;&lt;/td&gt;
&lt;td align="left" width="90%" style="font: 13px/18px Arial, sans-serif;"&gt;
&lt;div style="color: #666; padding: 0 0 20px; font-size: 13px/18px; line-height: \
18px;"&gt;See this email in &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=5&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Deutsch&lt;/a&gt;, &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=6&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Français&lt;/a&gt;, &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=8&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Italiano&lt;/a&gt;, &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=7&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Español&lt;/a&gt;, &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=61&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Português&lt;/a&gt; or &lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;36 other languages&lt;/a&gt;.&lt;/div&gt; &lt;h2 style="font: normal \
24px/27px Arial, sans-serif; margin: 0; padding: 0 0 18px; color: black;"&gt;One man \
left a message for you&lt;/h2&gt; Only you can see the sender and content of your message, \
and you can delete it anytime. You can instantly reply using our message exchange \
system: &lt;br /&gt;&lt;br /&gt;
&lt;table style="border-collapse: collapse;" cellpadding="0" cellspacing="0"&gt;
&lt;tr&gt;
&lt;td style="padding-right: 22px;"&gt;&lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da"&gt;&lt;img \
src="http://p56.badoo.com/259/6/2/9/246897483/59833/t1319468267/59847_mmp.jpg" \
width="72" height="72" border="0" style="background-color: #ebeef1;" alt="" \
/&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;big style="font: 16px/18px Arial, sans-serif;"&gt;&lt;b&gt;&lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;Check your message&lt;/a&gt;&lt;/b&gt;&lt;/big&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;hr style="height: 1px; color: #e5e5e5;" /&gt;
&lt;br /&gt;
&lt;big style="font: 13px/18px Arial, sans-serif;"&gt;Some other people in the area who are \
on Badoo&lt;/big&gt;&lt;br /&gt; &lt;br /&gt;
&lt;table style="border-collapse: collapse;" cellpadding="0" cellspacing="0"&gt;
&lt;tr&gt;
&lt;td style="padding-right: 13px;"&gt;&lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da"&gt;&lt;img \
src="http://p67.badoo.com/239/0/6/7/153779526/291577/t1325518996/328749_mmp.jpg" \
width="72" height="72" border="0" style="background-color: #ebeef1;" alt="" \
/&gt;&lt;/a&gt;&lt;/td&gt; &lt;td style="font-size: 11px; padding-right: 35px; color: #999; \
vertical-align: middle;"&gt; &lt;span style="font-size: 14px; color: #333;"&gt;Segun&lt;/span&gt;&lt;br \
/&gt; Ibadan, Nigeria
&lt;/td&gt;
&lt;td style="padding-right: 13px;"&gt;&lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da"&gt;&lt;img \
src="http://p59.badoo.com/238/9/7/4/159445593/254068/t1276677253/254081_mmp.jpg" \
width="72" height="72" border="0" style="background-color: #ebeef1;" alt="" \
/&gt;&lt;/a&gt;&lt;/td&gt; &lt;td style="font-size: 11px; padding-right: 35px; color: #999; \
vertical-align: middle;"&gt; &lt;span style="font-size: 14px; color: #333;"&gt;Becky \
Jay&lt;/span&gt;&lt;br /&gt; Ibadan, Nigeria
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="height: 20px;" colspan="4" height="20px"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="padding-right: 13px;"&gt;&lt;a \
href="http://eu1.badoo.com/0246897483/in/EEdZpyZMo6Y/?lang_id=3&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da"&gt;&lt;img \
src="http://p517.badoo.com/558/2/2/8/1140149189/423336/t1303159145/428210_mmp.jpg" \
width="72" height="72" border="0" style="background-color: #ebeef1;" alt="" \
/&gt;&lt;/a&gt;&lt;/td&gt; &lt;td style="font-size: 11px; padding-right: 35px; color: #999; \
vertical-align: middle;"&gt; &lt;span style="font-size: 14px; color: #333;"&gt;Sarath \
Cristina&lt;/span&gt;&lt;br /&gt; Ibadan, Nigeria
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="height: 20px;" colspan="4" height="20px"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
This email is part of our delivery procedure for the message sent by One man. If you \
have received this email by mistake, please ignore it. The message will be deleted \
soon. &lt;br /&gt;
&lt;br /&gt;
Have fun!&lt;br /&gt;
The Badoo Team

&lt;br /&gt;&lt;br /&gt;
&lt;img src="http://eu1.badoocdn.com/4ff9eb000000000000030000003f-1693845210/4117/-/-/i/badoo.gif" \
width="80" height="23" alt="" /&gt; &lt;p \
style="margin-top:10px;color:#666666;font:13px/18px Arial,sans-serif;"&gt;You have \
received this email from Badoo Trading Limited (postal address below). If you do not \
wish to receive further email communications from Badoo, please &lt;a \
href="http://eu1.badoo.com/impersonation.phtml?lang_id=3&amp;mail_code=63&amp;email=to \
r-dev%40lists.torproject.org&amp;block_code=f3ca20&amp;m=63&amp;mid=4ff9eb00000000000003000064f606da" \
style="color: #3366cc;"&gt;click here&lt;/a&gt; to opt out.&lt;br /&gt; Badoo Trading Limited is a \
limited company registered in England and Wales under CRN 7540255 with its registered \
office at 12 Red Lion Square, London, WC1R 4QD.&lt;/p&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120709022123</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-09 02:21:23-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem 'stuff' - Progress report</subject><body>

Hello again

I am currently working on implementing the network status (v3) descriptor
parsers. I will implement the microdescriptor parsers after I'm done with that.
The Python Onionoo implementation requires them, so I have paused working
on the controller for now. I will resume working on the controller class once
I'm done implementing these descriptor parsers.

Damian reviewed and merged the setconf/reset methods into stem/master
earlier today[1]. I will also be getting some of the other controller methods
reviewed &amp; merged to master this week[2][3][4][5][6].

1. https://gitweb.torproject.org/stem.git/commit/6a91cda3db2a1ab1c4bf485fad03fd5cea24657a
2. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/takeownership-wrapper
3. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/signal-wrapper
4. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/usefeature-wrapper
5. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/saveconf-wrapper
6. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/loadconf-wrapper

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710155944</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-10 15:59:44-0400</timestampReceived><subject>Re: [tor-dev] Stem Descriptor Parsers</subject><body>

&gt; After looking at possible use cases, wouldn't it make sense to allow the
&gt; caller to specify a file to be written to?

Make sense, though via a convenience method. Libraries should provide
basic building blocks (such as 'give me the csv string for these
descriptors') in addition to less flexible but user friendly functions
('write the csv to path X or file Y').

&gt; Regardless, we were thinking of
&gt; creating two methods, one that takes a list of descriptors, and one that
&gt; takes a single descriptor.

The problem was using a *descriptors argument, not accepting a list
verses a single descriptor. Accepting either a single value or a list
can make things quite a bit nicer, for instance the 'target' argument
of the DescriptorReader...
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/reader.py#l198

That said, I haven't seen the code yet so do what you think is best.

&gt; Just to clarify, the include_fields and exclude_fields parameters would have
&gt; default values of none

I was just using that as an example since I didn't know what you were
defaulting it to. My assumption was that they'd both default to None
to indicate "user didn't provide anything" and the behavior was...
include_fields - default is to include everything (ie, all the fields
that a descriptor has)
exclude_fields - default is to exclude nothing

&gt; ... and since we are taking in descriptors are a list
&gt; rather than a *arg, we don't need to worry about specifying the keyword
&gt; parameters.

Sorry, I'm coming up with two interpretations of the sentence "we
don't need to worry about specifying the keyword parameters". If you
mean...

... "we don't need those parameters to have a keyword" then no, we
definitely want them to have keywords so users can pick and choose
what they want to set.

... "users don't need to supply those parameters" then yup, without a
*descriptors argument they'll be completely optional.

&gt; That said, if a caller doesn't specify either, all parameters
&gt; would be returned.

Yup, sounds good. Defaulting to "give me a csv with all of the
descriptor's attributes" makes sense.

&gt; Otherwise, it is expected that only one of these
&gt; parameters would be specified by the caller.

It would be weird if the user set both, but we can easily handle it.
Just remove anything in the exclude_fields from the include_fields.

&gt; Also, going back to features expected by the community, would users want a
&gt; csv header to be written? Or simply a csv file?

Yup. Users will need a header so they can figure out what the fields
are (otherwise adding new descriptor fields will break all of the old
csvs that were only based on position). However, we might as well
accept a 'header' boolean argument to let them turn it off if they
want.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120710223729</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-10 22:37:29-0400</timestampReceived><subject>[tor-dev] Mike's May 2012 Status Report</subject><body>

[Attachment #2 (multipart/signed)]


For comparison with June and to follow Roger's example, here's my May
status report.


----- Forwarded message from Mike Perry &lt;mikeperry@torproject.org&gt; -----

I fixed the following bugs in May: 
https://trac.torproject.org/projects/tor/query?keywords=~MikePerry201205

Exec Summary of Trac Tickets:

I designed a volunteer TBB testing program. We're still working out the
bumps, but I'm pretty confident that we'll be able to keep the overhead
at the level of "one email + an scp" for Erinn. I fixed several very
serious Tor Browser bugs, including a DNS leak, a disk leak, an
evercookie leak, and I released a Torbutton 1.4.6 using an offline
update signing key (no more remote code exec through arbitrary CA
compromise!). 

I also bumped the Torbutton useragent, clear search+find boxes on New
Identity, perform the TBB versioncheck regularly in the background,
updated the captcha redirect to startpage, fixed a window sizing issue,
synced some important Torbutton and TBB prefs with eachother, and did
some review + made some suggestions for Torbirdy.

Most notably from a support perspective, Torbutton 1.4.6 informs users
about TBB, and is no longer togglable (though you can re-enable toggle
if you uncheck a checkbox in the prefs).


Non-Trac Tasks:

I helped with the tor core interview process, determining stages,
reviewing resumes and phone screening candidates, and helping Nick with
the third round coding question. (20 points).

I reviewed a handful of trac tickets and did some triage. (3 points).

I made a first pass at a patch to detect path bias (2 points).

I reviewed another silly website fingerprinting attack paper. (2
points).

I spent a fair amount of time on email. It seems like it comes down to
about 6 points per week on average, with the exception of this last
week, where I spent an additional 16 points arguing about volunteer
processes and the benefits of involving the community in our work. (6*4
+ 16 = 40 points).


Time keeping notes:

I did 40 points of trac-recorded development activity this month. I did
67 points of non-trac work this month.

That's a total of 107 points, which is roughly 214 hours, give or take
about 20 hours for rounding error. I really failed at timeboxing work in
the last week, which is I think why this number is so high compared to
last month.


Trac workload stats:

I closed 14 tickets of major priority or above, yet there are still
currently 50 tickets of major priority or above opened against me. This
is one less than the number of tickets last month! I'm still making
steady progress at a rate of 1 major+ ticket per month (same rate as
last month)! I'll be done with them all in just a scant 50 more months!
&gt; )

https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status= \
needs_information&amp;status=needs_review&amp;status=needs_revision&amp;status=new&amp;status=reopened \
&amp;max=1000&amp;component=!Torbutton&amp;order=id&amp;priority=major&amp;priority=critical&amp;priority=bloc \
ker&amp;col=id&amp;col=summary&amp;col=priority&amp;col=status&amp;col=type&amp;col=milestone&amp;col=component&amp;owner=mikeperry&amp;desc=1
 https://bit.ly/KZcmA9


Next Month:
https://trac.torproject.org/projects/tor/query?keywords=~MikePerry201206

Exec Summary:

Fix TBB fingerprinting and linkability issues, updating the TBB design
doc, rebase Tor Browser to Firefox 10.x ESR, publish the relay best
practices doc + scripts, write a build security proposal outline, work
on the path bias issue. Probably also help smooth out tor-qa process a
bit more.
 

-- 
Mike Perry

----- End forwarded message -----

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120710223907</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-10 22:39:07-0400</timestampReceived><subject>[tor-dev] Mike's June 2012 Status Report</subject><body>

[Attachment #2 (multipart/signed)]


I fixed the following bugs in June:
https://trac.torproject.org/projects/tor/query?keywords=~MikePerry201206

Exec Summary of Trac Tickets:

I reviewed WebGL for fingerprinting issues as well as reviewed a
rendering-based fingerprinting vector and produced plans for next
steps/defenses on both fronts. I rebased our Firefox patches to both
10.x-ESR and 13.0, and wrote a script to immediately alert us of new
releases via email. I spent some time shepherding a Windows TBB patch by
Shondoit. I also commented a whole bunch of Torbutton code with priority
levels so that it may be ported over to Proxy Mobile or eliminated. The
future will run on a Proxy Mobile derivative.

Nick and I also worked on a Tor patch to help Tor clients defend against
"path bias"/"route capture" attacks, but we still need to tune the
parameters more. 


Non-trac tasks:

I made some progress on determining how to set optimal parameters for the
"path bias"/"route capture" defense (ticket #6138). I wrote a python
simulation and determined next steps (12 points, development).

I finished up the Tor core interview process by sending out "rejection"
letters suggesting specific areas where the applicants could apply their
skills in potential future positions at Tor, and at least volunteer in
those areas in the meantime (5 points).

I spent an unsettling amount of time on email, coordination, and general
conspiracy. It seems to have gone up from last month to about 8
points/week this month. (32 points).

I spent a day and some change with the EFF and working on HTTPS-Everywhere
issues (6 pts, development).

I did some postmortem on our first volunteer QA run, replying to results
and filing tickets about potential future tests. More postmortem is
needed.  Hopefully I can get to it before the next TBB release. (1
point).


Time Keeping Notes:

I did 31 points of trac-recorded development activity this month, in
addition to 18 more points of development on tickets not yet closed, for
a total of 49 points of development activity. I did 38 points of
non-development work this month. A bit more sane ratio than last month,
but man is email a time sink.


Trac Workload Stats:

I only closed 7 tickets of priority major and above in June. Sad. At the
beginning of June, 50 major+ tickets were opened against me. As of this
report, 54 major+ tickets are now opened against me. This means I've
lost roughly 4 months of forward progress against major issues (I had
previously been closing about 1 major+ ticket more per month than were
opened against me).

https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status= \
needs_information&amp;status=needs_review&amp;status=needs_revision&amp;status=new&amp;status=reopened \
&amp;max=1000&amp;component=!Torbutton&amp;order=id&amp;priority=major&amp;priority=critical&amp;priority=bloc \
ker&amp;col=id&amp;col=summary&amp;col=priority&amp;col=status&amp;col=type&amp;col=milestone&amp;col=component&amp;owner=mikeperry&amp;desc=1
 aka
https://bit.ly/KZcmA9


Next month:

https://trac.torproject.org/projects/tor/query?keywords=~MikePerry201207

Exec Summary:

I'm going to throw much less on the queue ahead of time this month, due
to a week being lost to fascistly shitty Internet access (yes,
fascistly. Adverbing is the new new hotness now. Verbing is so OVER)
during the dev meeting in Italy, as well as last month seeing way less
closed tickets than expected. There's also a lot more conspiring to be
done, as it turns out.



-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120710225900</emailId><senderName>Tomás_Touceda</senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-07-10 22:59:00-0400</timestampReceived><subject>[tor-dev] Tomas' June 2012 status report</subject><body>

[Attachment #2 (multipart/signed)]


Hi everyone,

Here's what I did for Vidalia in June:
- Reviewed a series of patches from other people: TorrcPrototype
implementation and some Torrc parsing fixes by feroze, the testing
framework by sebb, up to date country code/flags handling by sirop, a
Network Map stream traffic patch by an anonymous contributor.
- Improved Network Map by adding Entry/ExitNode handling, better display
of relays in the router list, better handling of microdescriptors,
improved performance in loading the whole router list, solved a couple
of crashes with certain edge cases.
- Fixed a couple of bugs regarding default values with DataDirectory.
- Improved bridge handling usability a little bit.
- I spent a couple of days trying to understand better qtscriptgenerator
so we can improve the plugin engine.
- I did a lot of testing in general and helped Erinn with the new
configurations for TBB.

Most of my work on June and on will be on the alpha branch, since it'll
be tagged as stable in not too long.

Regarding Vidalia Plugins:
- I did a lot of testing of the TorControl interface, now that Vidalia
uses the automatically generated extension by qtscriptgenerator. The
idea is to use this tool to create interfaces for everything we need.

I also helped Feroze with his GSoC goals. As he has said in his reports
in here, he's been working in the HiddenService configuration plugin.
Vidalia alpha doesn't have that tab in its configuration because it was
pretty problematic, so we decided to move it to a plugin.

Regards,
Tomas


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120711140655</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-07-11 14:06:55-0400</timestampReceived><subject>[tor-dev] Adding bridge support to chutney</subject><body>

Hi,

Chutney is a program created by Nick that can be used for setting up and
operate a test tor network.  

It can generate torrc files from a network configuration file and torrc
template files.  It can further start, hup and stop all the tor
processes needed to run the network.

I've added support for bridges to chutney.  It's in branch 'bridges' of
user/linus/chutney.git.

I will add support for bridge authorities handling IPv6 bridges, bridge
relays with an IPv6 OR port and clients using IPv6 bridges next.

-- 
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711141908</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-07-11 14:19:08-0400</timestampReceived><subject>[tor-dev] Arturo's June Status Report</subject><body>

# Summary

I worked mainly on documentation and specification tasks related to 
OONI. Did a bit of travelling and a bit of coding too.

# Documentation/Design related

The wiki is starting to look good. Most of the basic analysis required 
for moving on to implementing
OONI is in place. We still need to have some more discussion on a few 
design choices, but the overall
concept is in place.

In particular we have finished the analysis of Tests.

I created templates for the analysis of Censorship detection tools 
(https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionTools/Template)

did the analysis of Neubot: 
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionTools/NeuBot
and of Herdict: 
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionTools/Herdict

We created the methodology for specifying and writing OONI probe tests:
https://trac.torproject.org/projects/tor/wiki/doc/OONI/TestWritingMethodology

created a module view and a component and connector view and specified 
the overall
architecture of OONI: 
https://trac.torproject.org/projects/tor/wiki/doc/OONI/Architecture

I started defining the API for the backend system in particular the 
reporting mechanism:
https://trac.torproject.org/projects/tor/wiki/doc/OONI/Backend.

In the past days had some discussions with jake and isis if we should be 
using HTTP for reporting.
Jake suggested that we use rsync instead of HTTP. I will detail in a 
following mail the pro and cotra
of one solution over the other.

We finished specifying the basic set of Test for OONI here: 
https://trac.torproject.org/projects/tor/wiki/doc/OONI/Tests

The data collection scheme has been defined here: 
https://trac.torproject.org/projects/tor/wiki/doc/OONI/DataCollection.

I got a few good tips from Nick on the topic of design and specification 
of software. What I took from it is that in the end the design that you 
make will not be ultimate and you will end up changing it. For this 
reason it's good to start implementing some of the tests and that will 
allow you to understand what is the abstraction that fits all of them.
He used a very nice analogy, it's like having a set of points in N 
dimensional space and by designing an abstraction for it you are trying 
to find an hypercube that fits all of them (I may have a bit 
re-elaborated this).

# Coding

Implemented an HTTP utility library for writing HTTP based OONI tests 
and implemented a few of the using
such library.

Wrote a OONI scapy twisted library that replaces scapys send and receive 
functions with some based on
twisted. Wrote an OONI Test protocol for it.

Implemented based on OONI a test written by phw that does packet 
mutation to bissect censorship fingerprints.

Misc. code refactoring.

# Travel/Advocacy

Travelled to Madrid to do a talk on Tor and GlobaLeaks. Met there with 
Jillian York.

Went to hackmeeting in l'Aquila and did a talk about Tor and censorship 
( http://www.slideshare.net/hellais/tor-censorship-2012-ooni). I believe 
this talk went very well and everybody was very excited about Tor at the 
end of it.

# What I plan to do next

Work on drawing these N dots, by implementing test for OONI. I will 
finish one of the first fully client server tests based on OONI called 
b0wser (the server part is almost done). Figure out what should be done 
with the backend and start having a test backend deployment on ooni.nu.

- Art.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711215849</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2012-07-11 21:58:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal 203: Avoiding censorship by impersonating an HTTPS server</subject><body>

On 11 July 2012 14:43, Jens Kubieziel &lt;maillist@kubieziel.de&gt; wrote:
&gt; * Nick Mathewson schrieb am 2012-06-26 um 00:23 Uhr:
&gt;&gt; Side note: What to put on the webserver?
&gt;&gt;
&gt;&gt;    To credibly pretend not to be ourselves, we must pretend to be
&gt;&gt;    something else in particular -- and something not easily identifiable
&gt;&gt;    or inherently worthless.  We should not, for example, have all
&gt;
&gt;   We could also present some page which looks like a valid login page or
&gt;   a fresh installation (Apache, Mediawiki or something other popular).
&gt;   Another similar idea is it to deliver some error page, like a blank
&gt;   page with a MySQL-, PHP-, Tomcat or any other error message.

Or perhaps a 401 Authorization Required message, with a randomly
generated realm/name.  I think a lot of things would break if a censor
blocked all such prompts.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711231110</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-07-11 23:11:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal 204: Subdomain support for Hidden Service addresses</subject><body>

On Wed, Jul 11, 2012 at 11:09 AM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; Then I see no reason not to accept this proposal.  Does anyone else?
&gt;

Actually, there's a detail to think about: Isolation.  If I connect to
foo.aaaaa.onion bar.aaaaa.onion, should those streams be allowed to go
over the same circuit?  Right now I think they should not.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712173840</emailId><senderName>Daniel Dennis</senderName><senderEmail>sdjfjsdfiuhszduh@fastmail.fm</senderEmail><timestampReceived>2012-07-12 17:38:40-0400</timestampReceived><subject>[tor-dev] New Identity/Client attacks?</subject><body>

I'm doing a little brainstorming to properly secure my app specifically
made for tor.

I notice vidalia has a new identity button. I pressed it and couldn't
tell what it did. While looking at the network view i saw a few
connections get closed (but not all) and that was about it.

It appears every TCP connection creates a new circuit. Is this right?
Does this mean every connection i make cannot be associated with
another?

Finally my last question related to identities is. If a client connects
to a hidden service many times is it possible to discover who he is?
Perhaps by using timing attacks, cookies, looking at IPs connected to
the network etc? Where can i read about it? I don't believe relays know
when clients connect to the network unless the client connects to the
relay as its first node (is that relay called an entrance relay?)

-- 
http://www.fastmail.fm - Same, same, but different...

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712212951</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-12 21:29:51-0400</timestampReceived><subject>Re: [tor-dev] Tor Export</subject><body>

&gt; Maybe you could comment on the comments, or at least keep an eye on it

Replied. I clicked watch but I'm not familiar with how github code
reviews work so I might not notice updates.

&gt; Also, I don't suppose you know how to comment on the file, instead of on the diff?

I don't. Personally I do code reviews by pulling their changes and
diffing with where they branched off master. Github's new to me.

&gt; Isn't this a bizarre use-case?  I.e., what is a use-case in which a client wants a \
&gt; csv of a ((ServerDescriptor + ExtraInfoDescriptor) list)?  I.e., a list of a \
&gt; disjoint union type?

Agreed that it's weird which is why we need a test. I'm fine with
having the export function throw a ValueError if it gets mixed
descriptor types.

This issue is something that users of the descriptor reader are likely
to come across. For instance if you point the reader at tor's data
directory then it'll crawl over the cached-descriptors,
cached-extrainfo-descriptors, and cached-consensus, giving you a
generator for each of their contents.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120713110534</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-13 11:05:34-0400</timestampReceived><subject>Re: [tor-dev] Flash proxy deployment</subject><body>

On Fri, Jul 13, 2012 at 12:09:51PM +0200, Philipp Winter wrote:
&gt; - Web site visitors need to get the script as well as the bridges to scan from
&gt;   somewhere. This "somewhere" can be blocked. In order to avoid that, the script
&gt;   could be hosted on a large provider which the censor is unwilling to block.

This is a good point. With flash proxies, we want the JavaScript program
to be visible from the uncensored Internet. For bridge scanning, we want
just the opposite: the program has to be accessible from the censored
Internet.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120713131401</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-07-13 13:14:01-0400</timestampReceived><subject>Re: [tor-dev] Onionoo in Python</subject><body>

On 07/10/2012 05:36 PM, Norman Danner wrote:
&gt; Based on a quick look, it seems like Cyclone provides a slightly nicer 
&gt; way to specify how to handle the various requests than does a plain 
&gt; Twisted web application.  Are there any other advantages to using 
&gt; Cyclone as opposed to plain Twisted?
&gt;
&gt; To me, there is a trade-off:
&gt;
&gt; Cyclone+Twisted:  slightly nicer way to write the web application.  
&gt; More dependencies for Onionoo.
&gt;
&gt; Plain Twisted:  not quite as nice a way to write the application.  
&gt; Fewer dependencies for Onionoo.
&gt;

Maintaining a REST API in pure twisted is *very* painful. The syntax for 
defining the API in twisted
is very hackish and unclean. Using cyclone makes your code more 
structured and cleaner.
The hackiness is very clear if you are interested in doing things like 
matching to a certain functionality
based on a regexp. Cyclone makes this easy as it's based on tornado that 
was designed with the creation
of an API for friendfeed in mind.

&gt; Also, the documentation for Cyclone seems...minimal.  It might be 
&gt; straightforward for someone used to using Tornado, but that doesn't 
&gt; describe us over here...

The documentation of cyclone is the documentation of tornado. Cyclone is 
basically just a fork of it
so anything that you are used to doing in tornado you can do in cyclone.


- Art.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120713135742</emailId><senderName>Daniel Dennis</senderName><senderEmail>sdjfjsdfiuhszduh@fastmail.fm</senderEmail><timestampReceived>2012-07-13 13:57:42-0400</timestampReceived><subject>Re: [tor-dev] Encrypted PM site/hidden service</subject><body>

Because I don't have access to phones that may support this I will not
try. The code will be open sourced so anyone may port it. But however I
will now assume the app may not always be running on an encrypted
filesystem so i'll add some support for keeping the files private

Anonbox looks cool. It doesnt appear i can write emails? This isn't
meant for emails, just simple PMs which you cannot attach image nor need
to sign up for. Right now by design i cam PM someone w/o giving them a
way to know who i am (although if you want a discussion you should
attach your public key)

The tech used will be openssl, mono (or .NET) and sqlite. I can drop
openssl but i suspect people would prefer using openssl pem keys rather
then mono/.NET generated keys.

It sounds like you want to know how it works technically. Well, here are
some notes i written for myself. It may not make sense or be a little
incoherent but perhaps you can get an idea how secure it may be.


--What data we have (in the client sqlite db)--
-If app is encrypted, all data unless with a * is encrypted with the
symmetric key-
db version*, path to pem file*, symmetric key (encrypted with said pem
file or generated with PBKDF2 on the users password),
	misc options, server url, server public key
private keys, plain names, ids*, last ident
public  keys, plain names, ids*
association table: association value*, private key id*
 inbox: private key id*,  inmsg/timestamp/optional from     public key
 id
outbox: public  key id*, outmsg/timestamp/optional reply to public key
id
draft:  same fields as outbox

last ident is when the user last identify himself to the server. If user
marks server as untrusted this will prevent user from grabbing all his
msgs from the server using different keys. This is so the server is less
likely to associate a group of keys to one user
---
communication to server
Handshake with server: Client encrypts random data with server public
key, server sends it back plaintext
Register public key. Client gives user pub key, server reply's with an
encrypted block of random data, client decrypt it using private key then
sends it back plaintext
Unregister: delete all msgs and public key from user. Of course server
sends random data which will need to be sent back as plaintext to verify
the key is mine.
Send Message: Client send data which is encrypted with AES which key is
encrypted with the recipient pub key. The data is msg+optional my reply
to/identity pub key) + recipient pub key. This data is compressing with
DEFLATE.
	Server replies with success or error message. It makes sure
	recipient and your pub key is registered. Also replies with test
	to ensure the reply-to pub key is yours.
Get Messages: Send pubic key i'd like to get messages for. Server sends
me random data to send back in plaintext. Then receive all my data
(compressed with DEFLATE)
	Messages is msg + timestamp(UTC server date) + if available the
	reply to public key.

The client app will decrypt the messages and store it either compressed
or compressed/encrypted with the db AES key. Timestamp and reply-to pub
key are encrypted.


Messages are deleted from servers after 10days of retrieval (or
immediately). If pub key has not been seen &gt; 1 year he is unregister and
all messages are deleted




&gt; Date: Thu, 12 Jul 2012 17:12:01 +0000
&gt; From: krugar &lt;tor-admin@krugar.de&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Encrypted PM site/hidden service
&gt; Message-ID: &lt;4FFF0561.40906@krugar.de&gt;
&gt; Content-Type: text/plain; charset=ISO-8859-1
&gt; 
&gt; take a look at https://anonbox.net/ for a similar service.
&gt; 
&gt; a few considerations: if you create an "app" that lives on a mobile
&gt; phone, are private keys stored on the phone? are they secured somehow
&gt; while the app is running / not running? which public keys will be stored
&gt; on the phone? will messages be stored on the phone?
&gt; will someone always know who sent a PM, or only if the sender so
&gt; chooses? how do you know how to reach someone on your service? are there
&gt; pseudonyms? how long to they last? what about key revocation?
&gt; what happens if the server is compromised somehow, will attackers be
&gt; able to look at the data and see who wrote messages to whom? for which
&gt; time period?
&gt; 
&gt; try to clearly define which privacy guarantees you try to achieve
&gt; against which type of attacker. the more precise you write this down,
&gt; the easier someone can help you spot weaknesses in your concept, and the
&gt; better for you and your users once the system is live.
&gt; http://dud.inf.tu-dresden.de/Anon_Terminology.shtml may help if you are
&gt; uncertain about wording.
&gt; 
&gt; cheers
&gt; -k

-- 
http://www.fastmail.fm - Faster than the air-speed velocity of an
                          unladen european swallow

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120713140652</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-07-13 14:06:52-0400</timestampReceived><subject>Re: [tor-dev] Minimum required ciphers for running Tor as both client and router.</subject><body>

Thanks Nick for the fast answer.

I went trough the official OpenSSL cipher docs but also found a nice
(probably outdated) list on the stackoverflow.

Ciphers:

no-idea       -DOPENSSL_NO_IDEA
no-aes        -DOPENSSL_NO_AES
no-camellia   -DOPENSSL_NO_CAMELLIA
no-seed       -DOPENSSL_NO_SEED
no-bf         -DOPENSSL_NO_BF
no-cast       -DOPENSSL_NO_CAST
no-des        -DOPENSSL_NO_DES
no-rc2        -DOPENSSL_NO_RC2
no-rc4        -DOPENSSL_NO_RC4
no-rc5        -DOPENSSL_NO_RC5

no-md2        -DOPENSSL_NO_MD2
no-md4        -DOPENSSL_NO_MD4
no-md5        -DOPENSSL_NO_MD5
no-sha        -DOPENSSL_NO_SHA
no-ripemd     -DOPENSSL_NO_RIPEMD
no-mdc2       -DOPENSSL_NO_MDC2

no-rsa        -DOPENSSL_NO_RSA
no-dsa        -DOPENSSL_NO_DSA
no-dh         -DOPENSSL_NO_DH

no-ec         -DOPENSSL_NO_EC
no-ecdsa      -DOPENSSL_NO_ECDSA
no-ecdh       -DOPENSSL_NO_ECDH

Non-cipher functionality:

no-sock       -DOPENSSL_NO_SOCK         No socket code.
no-ssl2       -DOPENSSL_NO_SSL2         No SSLv2.
no-ssl3       -DOPENSSL_NO_SSL3         No SSLv3.
no-err        -DOPENSSL_NO_ERR          No error strings.
no-krb5       -DOPENSSL_NO_KRB5         No Kerberos v5.
no-engine     -DOPENSSL_NO_ENGINE       No dynamic engines.
no-hw         -DOPENSSL_NO_HW           No support for external hardware.

Not documented:

no-tlsext     -DOPENSSL_NO_TLSEXT
no-cms        -DOPENSSL_NO_CMS
no-jpake      -DOPENSSL_NO_JPAKE
no-capieng    -DOPENSSL_NO_CAPIENG


I recompiled OpenSSL with the following ciphers disabled:
no-krb5 no-ssl2 no-dso no-engines no-hw no-idea no-err \
no-mdc2 no-rc5 no-camellia no-seed no-des no-dsa no-ec  \
no-ecdsa no-ecdh no-ripemd no-md2 no-md4 no-cast no-bf \
no-cms no-jpake no-capieng

Enabled:
shared threads enable-tlxext zlib

That gets me a nice stripped 1.2MB libcrypto and 300KB libssl.

It does mention OpenSSL has been built with ciphers disabled:
Jul 13 15:55:54.000 [notice] We weren't able to find support for all
of the TLS ciphersuites that we wanted to advertise. This won't hurt
security, but it might make your Tor (if run as a client) more easy
for censors to block.

However it works very well, even after clearing the cache it connects
very fast, (faster than the mips build)
If you happen to know more ciphers that can be disabled (without using
router functionality) please let me know.


2012/7/13 Nick Mathewson &lt;nickm@alum.mit.edu&gt;
&gt;
&gt; On Fri, Jul 13, 2012 at 8:14 AM, Gino Badouri &lt;g.badouri@gmail.com&gt; wrote:
&gt;
&gt; Hi!
&gt;
&gt; &gt; From the OpenSSL documentation it seems that no-hw and no-engines leaves out
&gt; &gt; support for hardware crypto engines so those are safe to set (our devices
&gt; &gt; don't have them).
&gt; &gt;
&gt; &gt; Could anybody provide us with more "no-" options for ciphers we can skip?
&gt; &gt; Thanks alot!
&gt;
&gt; The absolutely required cryptographic primitives for Tor are AES,
&gt; SHA1, SHA256, DH, and RSA.  This may grow in the future.
&gt;
&gt; Be aware though that being unable to negotiate certain ciphersuites
&gt; might make your devices more fingerprintable, since starting in
&gt; 0.2.3.x Tor will no longer advertise openssl-supported ciphersuites
&gt; that it doesn't have.
&gt;
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120716014248</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-16 01:42:48-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem stuff - Progress report</subject><body>

Hello.

During the last week Damian merged my patches that implement loadconf &amp; saveconf
wrapper methods[1][2] in Stem. I am currently working on implementing the router
descriptors (from the network status documents). I should have
something ready for
review by tuesday. Once that is done, I'll work on implementing the
microdescriptor
parser. I will also be getting my remaining controller class patches
merged in parallel.

1. https://gitweb.torproject.org/stem.git/commit/6cc4e195452bc573e34f0b2de295b1028a20eb4a
2. https://gitweb.torproject.org/stem.git/commit/e68adb7fdd465e1780bc4ee1243e0c226add77d9

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120716135802</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-07-16 13:58:02-0400</timestampReceived><subject>[tor-dev] [GSoc] [Stegotorus] Progress report</subject><body>

Hello everybody,

Quick update on the progress of apache payload class for stegotorus:

  - https://github.com/vmon/payload_scraper/ is working now, checking
    apache document root dir, find all files usable as payload, compute
    their capacity and store them in a database. For now, I'm using the
    database in Stegotorus, but later the whole code is going to be part 
    of Stegotorus and Stegotorus runs it periodically to keep the
    database updated.

  - I've written the basic functionality of apache_payload_server class,
    i.e. get_payload function (and anything else it needs to work). In
    theory, we should be able to call apache_payload_server::get_payload
    instead of get_payload, and Stegotorus would request the payload
    from apache (or as a matter of fact, any http server running on
    localhost). In practice, it still has compiling error which I'm
    working on and I expect them to be solved today. 

  - I'm meeting Zack tomorrow to move my codes to his repo, so we have a
    unified repo from now on. Hopefully, I'll push the
    apache_payload_server on the new repo. 
    
  - Afterward, I'm going to incorporate the infranet code
    http://nms.csail.mit.edu/infranet/ into the apache_payload_server to
    improve the quality of the steg.

That is for now.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120716210745</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-16 21:07:45-0400</timestampReceived><subject>Re: [tor-dev] License for flash proxy software</subject><body>

On Tue, Jul 10, 2012 at 02:50:44PM -0700, David Fifield wrote:
&gt; I feel there should be a LICENSE file in the flash proxy client packages
&gt; currently at http://www.bamsoftware.com/dist/flashproxy/. What is the
&gt; recommended practice? Right now the files carry no license. I would be
&gt; happy with anything that is free software and convenient to the Tor
&gt; Project. For example the 3-clause BSD used by obfsproxy is fine. I am
&gt; pretty sure that I wrote all the code that is in use at this point.

I did the Expat license.

https://gitweb.torproject.org/flashproxy.git/commitdiff/ecf1bd0a
https://www.gnu.org/licenses/license-list.html#Expat

(This is what is usually referred to as the "MIT license," but I once
submitted a package to the Free Software Directory, and they said that
in order to avoid horrible confusion I shouldn't call it that.)

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120717151427</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-07-17 15:14:27-0400</timestampReceived><subject>Re: [tor-dev] Clarification of prop 186</subject><body>

Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote
Tue, 17 Jul 2012 09:31:48 -0400:

| Everything that describes how these documents are formatted describes
| them as containing multiple "a" lines.  Thus, anybody parsing a
| consensus or microdescriptor MUST accept multiple "a" lines, even if
| they ignore all but the first.
| 
| But everything that describes how these documents are *generated*
| describes them as containing a single "a" line.  Thus, there doesn't
| need a way to come up with a consensus containing multiple a lines.
| 
| In other words, I think that for now, one "a" line is fine.  But we
| need to make sure that anything reading these documents can handle
| more than one, in case we generate them differently later.
| 
| Does that make sense?

Indeed.  Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120601163822</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-01 16:38:22-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - May 2012</subject><body>

Hi all. As you may have noticed from the elevated traffic on this list
a few of us are trying to do more development discussions in public.
To that end I'm bucking tradition and sending my monthly status report
here too. They've always been public...
http://www.atagar.com/arm/log.php

... but since their initial emails have been on a closed list I doubt
that most people knew that they existed. On that note, if anyone wants
to hack on fun tor related python stuff then let me know! Stem is
always looking for new people that want to get involved.

========================================

Hi all. Spring is in the air, and with it many lovely things including
the UW Street Fair, Folklife, and an iSec Open Forum. It also included
a week of oncall but that doesn't count in the 'lovely things' column.
On the upside though, this time it was pleasantly light (first time
I've gone a whole week without being woken up by a pager at 3am!).

As a GSoC admin I don't have much to report besides a blog posting at
the start of the month [1]. However, as a mentor some neat things are
in the works...

* Ravi is adding SafeCookie support in stem [2]. I've code reviewed
the first couple iterations and it's looking great. Given some tests
and revising to fit with recent refactoring it should soon be ready to
merge.

After that he'll start working on the general controller. This last
weekend I refactored how response classes are organized and
implemented GETINFO as an example, so this will hopefully be an easy
project for him to start hacking on.

* Beck added descriptor validation to check that the signing key's
hash matches its fingerprint [3]. This is the first part of descriptor
integrity validation that Karsten suggested, however this project has
gotten stuck so he's moving on to other stem tasks.

* Investigated a couple issues brought up by Sathyanarayanan [4][5].

* Two Wesleyan students will start working on stem soon! [6]


Needless to say helping these projects has occupies much of my time,
and will take even more once the Wesleyan students get started.
However, after years of trying in vain to attract developers to my
projects I wouldn't have it any other way. :)

Other stem tasks I finished this month includes...

* ExtraInfo descriptor parsing. This took me a couple weeks since it
contains so many attributes, but I'm glad it's finished. Now all that
remains before we can port Onionoo are the consensus' network status
entries. That's now at the top of my todo list for descriptor work,
but I'm setting that list aside for now in favor of Sphinx and helping
Ravi and Beck with controller work.

* Improved the launch_tor() function, making the test instance easily
configurable via a temporary torrc (similar to what Vidalia does) and
adding integ tests. I also added a workaround so it'll work on Windows
[7][8].

* Updated the stem development wiki [9] so it'll be easier for new
volunteers to find tasks that interest them.

* Discussed descriptor type annotations with Karsten and implemented
stem's side of it [10]. We also discussed some changes to bridge
descriptor sanatization which led to some minor stem changes too.

Cheers! -Damian


[1] https://blog.torproject.org/blog/gsoc-2012-projects
[2] https://trac.torproject.org/5262
[3] https://trac.torproject.org/5810
[4] https://trac.torproject.org/5917
[5] https://trac.torproject.org/5918
[6] https://lists.torproject.org/pipermail/tor-dev/2012-May/003547.html
[7] https://trac.torproject.org/5783
[8] https://trac.torproject.org/5493
[9] https://trac.torproject.org/projects/tor/wiki/doc/stem
[10] https://trac.torproject.org/5651
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120601185007</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-06-01 18:50:07-0400</timestampReceived><subject>[tor-dev] [GSoC] Pluggable Transports in Python Status Report</subject><body>

[Attachment #2 (multipart/alternative)]


Deliverable #1 for this summer=92s project is this:

=93A library for parsing pluggable transport configuration options

This will be a python library that authors of SOCKS proxies can use to
integrate their proxies with Tor.=94

A first pass at this is available from github and pypi:
http://github.com/blanu/pyptlib
http://pypi.python.org/pypi/pyptlib/0.1

I tried to follow the spec very closely in developing the API.

Next steps for the library are testing, improvement documentation including
pydoc strings, and error checking for higher level protocol conformance,
for instance the order in which proxy reply lines are output.

After that, it will be time to use the library in building the pluggable
transport framework.

Status updates can also be read on my project blog:
http://stepthreeprivacy.org/

[Attachment #5 (text/html)]

Deliverable #1 for this summer’s project is this:&lt;br&gt;&lt;br&gt;“A library for parsing \
pluggable transport configuration options&lt;br&gt;&lt;br&gt;This will be a python library that \
authors of SOCKS proxies can use to integrate their proxies with Tor.”&lt;br&gt; &lt;br&gt;A \
first pass at this is available from github and pypi:&lt;br&gt;&lt;a \
href="http://github.com/blanu/pyptlib"&gt;http://github.com/blanu/pyptlib&lt;/a&gt;&lt;br&gt;&lt;a \
href="http://pypi.python.org/pypi/pyptlib/0.1"&gt;http://pypi.python.org/pypi/pyptlib/0.1&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;I tried to follow the spec very closely in developing the API.&lt;br&gt;&lt;br&gt;Next steps \
for the library are testing, improvement documentation including pydoc strings, and \
error checking for higher level protocol conformance, for instance the order in which \
proxy reply lines are output.&lt;br&gt; &lt;br&gt;After that, it will be time to use the library \
in building the pluggable transport framework.&lt;br&gt;&lt;br&gt;Status updates can also be read \
on my project blog: &lt;a \
href="http://stepthreeprivacy.org/"&gt;http://stepthreeprivacy.org/&lt;/a&gt;&lt;br&gt; &lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120602183430</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-06-02 18:34:30-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] Vidalia - Status Report</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry for not giving any context.

My first task is to create a plugin to configure hidden services through
Vidalia. This would be done by adding the correct strings to .torrc file.

Vidalia alpha handles the .torrc file directly to modify Tor settings. It
has a plugin framework to allow users to interact with Tor. The
TorrcPrototype allows plugins to modify the .torrc file. It acts as a sort
of "bridge" between the PluginEngine.cpp and Torrc.cpp (which modified
.torrc file). value(), setValue() and getTorrcPath() are functions of
Torrc.cpp which I've so far got it to work through the plugin.

QtScriptDebugger is included in QtScript tools. It can be used to debug the
plugin. Embedding it into the Vidalia plugin engine would make writing
plugins easier.

[Attachment #5 (text/html)]

Sorry for not giving any context.&lt;br&gt;&lt;br&gt;My first task is to create a plugi=
n to configure hidden services through Vidalia. This would be done by addin=
g the correct strings to .torrc file.&lt;br&gt;&lt;br&gt;Vidalia alpha handles the .tor=
rc file directly to modify Tor settings. It has a plugin framework to allow=
 users to interact with Tor. The TorrcPrototype allows plugins to modify th=
e .torrc file. It acts as a sort of "bridge" between the PluginEn=
gine.cpp and Torrc.cpp (which modified .torrc file). value(), setValue() an=
d getTorrcPath() are functions of Torrc.cpp which I've so far got it to=
 work through the plugin.&lt;br&gt;
&lt;br&gt;QtScriptDebugger is included in QtScript tools. It can be used to debug=
 the plugin. Embedding it into the Vidalia plugin engine would make writing=
 plugins easier.&lt;br&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120604152113</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-06-04 15:21:13-0400</timestampReceived><subject>Re: [tor-dev] GSoC Intro: Stegotorus</subject><body>

On Mon, Jun 4, 2012 at 6:29 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Mon, Jun 04, 2012 at 03:02:12PM +0200, Philipp Winter wrote:
&gt;&gt; Is there any technical documentation or paper regarding Stegotorus available? I
&gt;&gt; failed to find something on the Internet.
&gt;
&gt; There is a paper, but it's stuck in "under submission" limbo. I think
&gt; the paper is going to want some revisions before it settles down.
&gt;
&gt; We're working on getting the source tree up, and then I'll try to
&gt; encourage them to make a tech report version.

For the moment, the source tree is visible on Github:
&lt;https://github.com/zackw/stegotorus&gt;.  It is likely to move to
gitweb.torproject.org hosting in the near future.

I am happy to send drafts of the paper to anyone who is curious, but I
can't just send it to the list, because until it's accepted for
publication somewhere, we don't want the PDF where it'll get indexed
by search engines.  I am also working on opening up the version
control for the TeX sources -- that's a technical problem rather than
a bureaucratic one: someone (read "me") has gotta convert it out of
SVN.

On a related note, any cryptographers reading this message are invited
to review the code at &lt;https://github.com/zackw/moeller-ref&gt; -- this
is not currently used by StegoTorus but will be in the very near
future, and it's the first-ever implementation of a specialized
asymmetric cryptosystem, so it needs more eyes.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605024633</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-05 02:46:33-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 0.2</subject><body>

&gt; I was thinking about this a little last week -- it would certainly be
&gt; nice to abstract more of the "general parsing stuff".

We plan to put most of the parsing stuff into the stem.response
module, which txtorcon could use without touching any of the threading
stuff. For example...

https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/response/protocolinfo.py

There is not much there at present since I've been focused on other
areas. Ravi's GSoC project is to make this and our Controller class
cover the complete control spec.

One minor gotcha that I should sort out, if you want to use stem, is
for the ControlMessage class to have a simple string constructor
since, at present, it expects to get partly parsed content from the
socket...

https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/response/__init__.py

&gt; There are a few
&gt; gotchas since the threaded versus event-based way to get information
&gt; from the protocol is pretty different.

It is, but this just means that we'd have trouble sharing the
ControlSocket and BaseController subclasses. That's a fair bit
(including the stem.connection module), but still plenty that could be
shared.

&gt; I've tried to imagine a threaded-friendly wrapper around at least
&gt; txtorcon.TorControlProtocol which might not be hard for the simple
&gt; command-response things (but see below).

Great. If we could come up with a common interface for simply sending
a message and receiving its reply then the stem.connection module
would be no trouble.

&gt; *Ideally*, such a library could leverage the parsing code in Tor
&gt; itself -- if at least the "utility" methods in Tor could be published
&gt; as a shared library, a "ctypes" wrapper could easily be made with a
&gt; more-Pythonic interface around that.

Eek! I'd hate to have the distribution pains that any C component
would bring. If Tor does not conform with its spec and allow for
independent implementations in other languages then that's a Tor bug,
and testing that Tor conforms to its own spec is part of the goals for
the integ tests that I'm writing.

&gt; Another thing I think would be really nice is to be able to get
&gt; grouping and documentation information about config options from Tor

Do you mean if a particular config option belongs to Relays, Hidden
Services, etc? If so then this might interest you...

https://gitweb.torproject.org/arm.git/blob/HEAD:/src/resources/torConfigDesc.txt

Arm parses the tor man page when it starts up into files like these so
it can present the category of configuration options, and help text.
Here's the parsing code...

https://gitweb.torproject.org/arm.git/blob/HEAD:/src/util/torConfig.py#l97

I plan to clean it up and move those capabilities to stem, but that'll
be a while.

&gt; I'm mostly-away until around the 18th, but perhaps we could meet on
&gt; #tor-dev after that and discuss further?

Certainly.

&gt; Are there specific things
&gt; besides descriptors that you think could be easily abstracted out of
&gt; stem (and/or useful for txtorcon)?

Pretty much anything outside of stem.socket, stem.control, and maybe
stem.connection (depending on the common interface discussion above).

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605172430</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-05 17:24:30-0400</timestampReceived><subject>Re: [tor-dev] use sphinx on stem</subject><body>

&gt; Do you need any help on this, or you can
&gt; complete all the work by yourself and I should move to another task
&gt; (maybe events)?

Nope, I should be fine finishing this on my own. Events would be a
great thing to work on next. I haven't written any examples but
hopefully it won't be too hard to figure out - let me know if you have
any questions!

I'd suggest starting with BW events since they'll be the easiest to
test (due to being reliably emitted every second).

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605201529</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-06-05 20:15:29-0400</timestampReceived><subject>Re: [tor-dev] Stegotorus now available from gitweb.torproject.org</subject><body>

On Mon, Jun 04, 2012 at 09:35:10PM -0700, Zack Weinberg wrote:
&gt; On 2012-06-04 8:13 PM, David Fifield wrote:
&gt; &gt; 
&gt; &gt; $ git clone https://git.torproject.org/stegotorus.git
&gt; &gt; $ cd stegotorus
&gt; &gt; $ autoreconf -i
&gt; &gt; $ ./configure&amp;&amp;  make
&gt; &gt; $ ./stegotorus null socks 127.0.0.1:5000
&gt; &gt; [info] ./stegotorus process 28359 now initialized
&gt; &gt; $ tor ClientTransportPlugin "stegotorus socks4 127.0.0.1:5000" UseBridges 1 \
&gt; &gt; Bridge "stegotorus 87.73.82.145:8080" 
&gt; &gt; I found the bridge IP address in scripts/torrc. At this point stegotorus
&gt; &gt; printed out:
&gt; &gt; 
&gt; &gt; [info] 127.0.0.1:5000: new connection to socks client from 127.0.0.1:42233
&gt; &gt; [info]&lt;1&gt;  trying to connect to 87.73.82.145:8080
&gt; &gt; [info]&lt;1.1&gt;  network error in read: Connection reset by peer
&gt; &gt; 
&gt; &gt; [error] Segmentation fault at 0000000000000010
&gt; &gt; ./stegotorus[0x4054b6]
&gt; &gt; /lib/x86_64-linux-gnu/libc.so.6(+0x324f0)[0x7fcff4cee4f0]
&gt; &gt; ./stegotorus[0x40ec11]
&gt; &gt; ./stegotorus[0x405f7a]
&gt; &gt; /usr/lib/libevent-2.0.so.5(+0x1bc4a)[0x7fcff5df8c4a]
&gt; &gt; /usr/lib/libevent-2.0.so.5(event_base_loop+0x414)[0x7fcff5dee254]
&gt; &gt; ./stegotorus[0x404e76]
&gt; &gt; /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7fcff4cdaead]
&gt; &gt; ./stegotorus[0x405291]
&gt; &gt; Segmentation fault
&gt; 
&gt; This looks like a genuine bug - probably failure to handle
&gt; ECONNRESET correctly somewhere.  I'll see if I can reproduce it, but
&gt; it would be helpful to me if you changed your stegotorus invocation
&gt; to
&gt; 
&gt; ./stegotorus --log-min-severity=debug \
&gt; null socks 127.0.0.1:5000 &gt;&amp; stegotorus.log
&gt; 
&gt; and sent me (off-list) the log file.

So, I don't get the crash today, but also the bridge address is today
accepting my connections. So I can actually get Tor to build a circuit
and everything. This is in stegotorus-null.log.gz.

I also tried against a server that sends a RST to try to simulate what
happened yesterday, but it appears to be gracefully handled. That log is
stegotorus-rst.log.gz.

Sorry, I should have tried this again yesterday. Maybe I had a glibc
version skew or something that resolved itself upon rebooting.

David


["stegotorus-null.log.gz" (text/plain)]

��f�Ostegotorus.log���r����&lt;�NU�!^@e�mj6�$;W�EQ���t� ��"����,{��x��� \
�����O�{w��������M���h�Z���m��b�ZF�U��.�f5�u���u��/��z����\�7E�������|�r������]T� \
�w����:��^��j�{�Oo������)��+�y��T�����������b&gt;]����&lt;�-�����(f�WO�����~�2��~V���E \
����zu�hL:���������v^Lf�|Z�W����������m?l������b�y��Q=���+�M�)�%��7��rs7/�W�U����%Q \
���C6)�tS�c|�����|1�^�������E&gt;����J����|��~i�fi�~������|u���at�M���j�J��T�F�G��,y�WY/k��z�!������'�77������������7�����zC���*�h(i��&gt; \
�'������[�1�?�&amp;�lg�p�n�-O���?��&amp;�~���;���8��|ys���S5Y�������^ \
,���B��Y&gt;���&lt;;�@W�'_�]����s�wV��G"6g��O�$���c2��X�8�� \
G'�1�C�l�k����������L{i \
���#�8������Yd�@��Z��(D��1����!�������M&lt;&amp;��j��!/��W,�0	5���|[7x���k�~?U?�8��s� \
���8t�7C���#��(�$e=���y`�I���!�4�b+��|�w��!��x��f�K�*���'�-��C��$x���(��' \
�p����)S�jS�JN�H/�k�����;�������c9Xb��N2��/��-�g�c9%�����^����r�;&lt;�x8��M��3��!r \
Lg��a�"5P�#�4IC�l��(�~U�?��5?�{���5:�s�m��,��������Y��\��nw3��2c3����Z����?i�� \
�}�OX:���'	S�O�$f��}�{�I�k�	vC����No?�&lt;z�����c��m��m[�Y����4"���}�{�n�������m��I,�uqy��7:�7&lt;?&lt;-����|=D��|� \
PGr����`��p����nM9���=]�W��b9{%� \
�����������'���C�������;�8�Q���X�}��x����9ix�����?���I��w���_���Kf�����(WM�H��V'���Ny2y28�t7
 &amp;�&gt;�SL�i�N=&lt;�]�!'�~B3�g�3���q�U���U�	���O�{�;-���B�g����N8��N8���t�1�D���O \
����2_���������;P,)�$U�&gt;����^*��&amp;�Bfe�������p`=6�Bw�5C:�ijs.Lm��w��'��s�T?DS����,��g���J�yN2_�[����.B�M���Y��������hR�.'�p \
�G#U���r����	�� ����6���DK�f8��S��Y*b����da���������k�l&lt;��YM�:����-�_:�[W�������y���IY��L��@:�~UZN8iU'��yU4��
 �8��2'����2�p �;u���m�u�`���N8���C��o�&gt;yO�&amp;��'�����CM��C0J��^B�l��p���]��J&amp;�e��E=
 �����Z��6_��'��Gt��O��r�r�{��(�'���gAH��L��F�S����!����t�;�]�rE*�2qm�#��tB��}l��=�{"}�[},
 � ���U�X&gt;7��+��}b�0I��	���r���^��.#6�/����f��8�f��U�N
������p�u��������S��d$����X=V��G� \
�-{`	��&gt;���-�\m*�At-�w8���y`�,�H�I:����DIp�BY8���"�V]N]N���\[N������	E����g�&gt;_T \
^���w42K�HQM�&gt;H���s����;yy�p:���d'1O�D���RT��N8��S5]5]�Q�	N8���/&gt;n��W���S���4���&gt;�-'��G����i
 ��p )s�~=x��r��
N8�����I�
����N}�2�l���sR�``Au������\��L�Ly�x���&lt;\.Y�z�#��E2�rx�]N�.J�O�9��|�O�i�c \
�L+N8��8������S����)+S�ws�'6�Mh������������t����x��&gt;�'�'WjH�?R����x�.��x4 \
�E�!�P��"�'O��M���������{(	����_C�&lt;��#�#���n/�f����4�3�G&lt;�����6�x�#��L�����-{���6��=w��`�Yp
 v���%��as $�f[�H��G��~��,��l�&lt;V�H��e��B��4CZ"�v�{���p����Cxnv���D
��$H��y&amp;�9N�=�z�	�[�N��������x�(���!4	�r���S`A���������Wfj����f���q&gt;�}���p~2�F��t$���c����z��"I���*\��j�� \
��/��j��Yh��a�����S���+�43�O�}0M�4Ch+��d�yo������d��$���v]�o7W�_]�2���c$�{�I�&amp;Ih6^�UM����q&lt;J \
6��[�B�T�kk8���8�6���}_?�j� a�C \
6�w��pj��O��b����N�Q_������	4]���������4CdJ����I2U�^^�Bxq����t���32���~�VNu������-;t������������{r�����b,s��	;8�o��y���IY7��.��Ap)d�h��
                
*�ux�������S[��|8�*���v{� 8	?��0y��i]�O����a�V������n��~�������� ��u,Fp������
���b}}�7�4C0i��sP��`���4�N|zV
N8������Q\�����H&amp;���)�����,-�����{m����a�bm��k� \
���V��J�1%|���|`8�����|��(O�9����i�"MEI�9t3���������{�iT��Z��jy���y��f�!� \
&lt;�J��O��07����g�K���gl��~�/oW��u1�����h�Z�M������w�:�)��������E��h�Z.�Y1_-����g��+���t�����o�|��'��j�O���UT���A�_�w��f�5�q�������s
 ��g2�GI�����9��t]�|��F$��e�������{'(q�w����������OZU�(�6 \
u���$�ON���W��)�I���E&gt;+&amp;��v�� q���v���?F�3fX`*�� \
��2?g�pj9:��g��L�d����sl���C��aujd�y�����;��x��x����&amp;�r3^l.=���Y�Pe��������F�y=�Q�6&amp;���&gt;��wn�#���0��{�q��B�����9���'k3
 ���C�:�����O����m3�����D�s������:

s�,
ON���U���`�A�
j�X�va��u��;u�)[O��Ag��������&gt;����&gt;U�z�G�������C�������Q������o�k�S����?���x������-)lH�P�{����TC���?��z���3���J



["stegotorus-rst.log.gz" (application/octet-stream)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120606054347</emailId><senderName>"warms0x"</senderName><senderEmail>warms0x@riseup.net</senderEmail><timestampReceived>2012-06-06 05:43:47-0400</timestampReceived><subject>Re: [tor-dev] [GSoC]Tails-server</subject><body>


&gt; Hello,
&gt; the "community bonding period" is over for quite some time now,
&gt; but as I have previously said in my application,
&gt; I (unfortunately) won't be able to start my GSoC until the 8th of June.
&gt;
&gt; About the testing environment now:
&gt; It seems like liveCD testing is not something
&gt; that interest people very much. The autotesting repo[3]
&gt; of debian-live is a 404, and even if it wasn't,
&gt; the documentation is lacking.
&gt; The "mainstream way" for doing system-wide/vm/liveCD tests is
&gt; autotest[4], but it seems completely overkill to me.
&gt;
&gt; This is why I am currently playing around with lettuce[2],
&gt; a nice Python-powered BDD tool.


Interesting tool! I hadn't heard of Lettuce before. Unfortunately the
chaps in the Ruby community seem to have quite a few more tools than the
Python community.

You may find the steps defined by the Aruba gem[1] interesting, especially
when you consider combining something like that with Vagrant. If you take
the assumption that a Vagrant-based testing environment would have
scenarios such as (forgive my unfamiliarity with the project):

  Scenario: Explicitly persist a file between boots of Tails
    Given I am running tails
    And a file named "test.txt"
    When I explicitly persist "test.txt"
    And I reboot the machine
    Then "test.txt" should still be available


You may also find some interesting information in this[2] blog post about
testing with Vagrant. In the blog post, there's a Vagrant plugin "sahara"
[3] mentioned which you should look into regardless of what you're doing
to make sure you're not waiting too long for you tests to complete.

[1] https://github.com/cucumber/aruba
[2] http://paperairoplane.net/?p=240
[3] https://github.com/jedi4ever/sahara

Hope I could be of some help.

- warms0x
---
xmpp: warms0x@riseup.net
http: http://warms0x.github.com

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604123553</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-06-04 12:35:53-0400</timestampReceived><subject>[tor-dev] GSoC Intro: Stegotorus</subject><body>

Hello Tor-devers,

It is a beautiful spring/summer day and this is vmon. I m going spend my
summer with you guys. You might think that I m a bit off schedule with
such a late GSoCc intro, but till 2 days ago I didn't know what I was going to do \
this summer for tor, so I couldn't write much before.

I've been using tor for a long time. I don't remember exactly when was the first time \
I encountered Tor but I think it was somehow through JonDo. Being behind censor, you \
always desperately google the word "proxy", and "Java Anonymous Proxy" came up in \
once. Reading more about it, lead me to Tor.

So I was a Tor user for a while, when I heard of gsoc. I talked to a
friend of mine who had a gsoc experience before. He told me that Tor/EFF
have some slots. It was a very interesting for us as we were both
frustrated with our government behavior and we wanted to do something
about it. We kept submitting our idea for a while (OK, twice) and kept
getting rejected. So finally, I decided to deal with our concerns in a more \
"tor-friendly" way.

One of our concerns (which is getting more serious year after year) was that what if \
the government decides to close down any protocol that they don't like, and only let \
few common protocols, e.g. http, pass through. How useful would Tor be in such a \
situation? Around the same time, obfsproxy came out of no where, so I thought, one \
way to overcome this problem was to use obfsproxy to send tor over http.

After submitting my idea, I found out that at the end of the day, it wasn't *that* \
original. Zack/zwol had worked on it for a year. It is called Stegotorus. However, \
considering, the arm-race nature of the problem and the state of development of \
Stegotorus, tor people (specifically asn) suggested me to polish, improve and \
strengthen Stegotorus, instead of re-inventing the wheel. The final obstacle, that \
Stegotorus wasn't open, was resolved last week and I am very excited to deliver you a \
strong more robust Stegotorus by the end of the summer.

Zack is my primary mentor, followed by Steven (sjmurdoc1) and Roger
(armadev) (according to Tor blog). I'll be sticking around #tor-dev
(vmon) as much as possible and I'm happy to know, talk and learn from
everyone of you.

See you on #tor-dev

Cheers,
vmon

P.S. Dear GSoC Admin, I know I'm late on my first bi-weekly update but I thought my \
updates makes much more sense to people, If they are proceeded by an intro. I'll send \
my updates shortly. _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120601174739</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2012-06-01 17:47:39-0400</timestampReceived><subject>[tor-dev] txtorcon 0.2</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I have tagged txtorcon 0.2, which adds:

 . incremental parsing;
 . faster TorState startup;
 . SAFECOOKIE support;
 . several bug fixes;
 . options to circuit_failure_rates.py example to make it actually-useful;
 . include built documentation + sources in tarball;
 . include tests in tarball;
 . improved logging;
 . a few patches from mmaker and kneufeld

(If this type of mail isn't appropriate for tor-dev please let me
know...)

- --
mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJPyQB5AAoJEMJgKAMSgGmnVQMH/06rOeaIf3fUk42bqzM165sD
dSItGLmwTgFAtFT3OnWzwFtq/h47GFqgqVVG0Nhr2ZPsusf++vBCXLN2BGdC2Akb
poxdpN+QNRO0GeAtnM2Hr23UjUwz4jDysFY5Uqi5vYSm4uGPrmULDaAt8/hRCRYH
5pmpWxRweqc8+Y/qTzYr0+CbjuRdsdYJjZyVysP67K/W3tHZnHzBLtC5W3HJcOR3
FqzUMbJpcNK80HD25mX/wic/4giXy9OzAJXNRpTfGiKiKPIThgc3nbiMcvoVfmXj
Lhyjrg27o5y/GLLwM6tcDezRYpvRBd7ZR4CJ+PZkcpMNZDP7PS9v1IpCEPShxVg=
=U1ys
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605155148</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-06-05 15:51:48-0400</timestampReceived><subject>[tor-dev] use sphinx on stem</subject><body>

Hi Damian,

I explored sphinx and tried it on stem these days, and it seemed
pretty handy. I think a good way to produce nice documentation for
stem is to create a page for each module manually, write an
introduction by hand, and use autoclass / autofunction / autoexception
in the autodoc extension to create API docs. automodule seems too
general and does not work well with module's docstring in stem since
it is not written in reST format, so I don't like it. What do you
suggest? And how's your progress now?

Cheers,
Beck
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604230904</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-06-04 23:09:04-0400</timestampReceived><subject>[tor-dev] Stegotorus now available from gitweb.torproject.org</subject><body>

On Mon, Jun 4, 2012 at 8:21 AM, Zack Weinberg &lt;zackw@panix.com&gt; wrote:
&gt; For the moment, the source tree is visible on Github:
&gt; &lt;https://github.com/zackw/stegotorus&gt;.   It is likely to move to
&gt; gitweb.torproject.org hosting in the near future.

You can now clone {git,https}://git.torproject.org/stegotorus.git .
Be warned that due to a couple of very large files, a clone requires
approximately 350MB of disk space and 140MB transferred over the
network.  (The troublesome files are unlikely to change in the near
future, so this is a one-time cost.)  You should also assume that all
documentation is out of date until further notice.

Patches are welcome.  The TODO list currently exists only in my head,
but I'll be getting that updated in-repo Real Soon.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120604152009</emailId><senderName>jvoisin</senderName><senderEmail>julien.voisin@dustri.org</senderEmail><timestampReceived>2012-06-04 15:20:09-0400</timestampReceived><subject>[tor-dev] [GSoC]Tails-server</subject><body>

[Attachment #2 (multipart/signed)]


Hello,
the "community bonding period" is over for quite some time now,
but as I have previously said in my application,
I (unfortunately) won't be able to start my GSoC until the 8th of June.

So far, I managed to build Tails in a virtual machine,
in a tmpfs, using a proxy (to avoid spamming Debian's mirrors);
but also using vagrant[1]. It takes me only
a couple of minutes to build Tails on my machine, which
is a good news.

About the testing environment now:
It seems like liveCD testing is not something
that interest people very much. The autotesting repo[3]
of debian-live is a 404, and even if it wasn't,
the documentation is lacking.
The "mainstream way" for doing system-wide/vm/liveCD tests is
autotest[4], but it seems completely overkill to me.

This is why I am currently playing around with lettuce[2],
a nice Python-powered BDD tool.

Hopefully, my next status update will be more
consistent/interesting.

Have a nice day

1. https://tails.boum.org/contribute/build/#index1h1
2. http://lettuce.it/
3. http://git.debian.org/?p=3Ddebian-live/autotesting.git
4. http://autotest.github.com/

-- jvoisin




["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120606154919</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-06-06 15:49:19-0400</timestampReceived><subject>[tor-dev] Stats on Amazon bridges</subject><body>

Dear Team,

I need to get a count of all the Amazon Tor images running bridges. The
reason I need this data is so I can follow-up with acessnow.org about
the campaign they are running at: https://www.globalproxycloud.net/

How should I go about that data?

All the best,
SiNA

-- 
First they ignore you, then they laugh at you, then they fight you, then
you win ~ Mahatma Gandhi
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605031328</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-06-05 03:13:28-0400</timestampReceived><subject>Re: [tor-dev] Stegotorus now available from gitweb.torproject.org</subject><body>

On Mon, Jun 04, 2012 at 04:09:04PM -0700, Zack Weinberg wrote:
&gt; On Mon, Jun 4, 2012 at 8:21 AM, Zack Weinberg &lt;zackw@panix.com&gt; wrote:
&gt; &gt; For the moment, the source tree is visible on Github:
&gt; &gt; &lt;https://github.com/zackw/stegotorus&gt;.   It is likely to move to
&gt; &gt; gitweb.torproject.org hosting in the near future.
&gt; 
&gt; You can now clone {git,https}://git.torproject.org/stegotorus.git .
&gt; Be warned that due to a couple of very large files, a clone requires
&gt; approximately 350MB of disk space and 140MB transferred over the
&gt; network.  (The troublesome files are unlikely to change in the near
&gt; future, so this is a one-time cost.)  You should also assume that all
&gt; documentation is out of date until further notice.
&gt; 
&gt; Patches are welcome.  The TODO list currently exists only in my head,
&gt; but I'll be getting that updated in-repo Real Soon.

I tried these steps and got a segmentation fault:

$ git clone https://git.torproject.org/stegotorus.git
$ cd stegotorus
$ autoreconf -i
$ ./configure &amp;&amp; make
$ ./stegotorus null socks 127.0.0.1:5000
[info] ./stegotorus process 28359 now initialized
$ tor ClientTransportPlugin "stegotorus socks4 127.0.0.1:5000" UseBridges 1 Bridge \
"stegotorus 87.73.82.145:8080"

I found the bridge IP address in scripts/torrc. At this point stegotorus
printed out:

[info] 127.0.0.1:5000: new connection to socks client from 127.0.0.1:42233
[info] &lt;1&gt; trying to connect to 87.73.82.145:8080
[info] &lt;1.1&gt; network error in read: Connection reset by peer

[error] Segmentation fault at 0000000000000010
./stegotorus[0x4054b6]
/lib/x86_64-linux-gnu/libc.so.6(+0x324f0)[0x7fcff4cee4f0]
./stegotorus[0x40ec11]
./stegotorus[0x405f7a]
/usr/lib/libevent-2.0.so.5(+0x1bc4a)[0x7fcff5df8c4a]
/usr/lib/libevent-2.0.so.5(event_base_loop+0x414)[0x7fcff5dee254]
./stegotorus[0x404e76]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7fcff4cdaead]
./stegotorus[0x405291]
Segmentation fault

I noticed that the start-stegotorus.sh script uses Socks4Proxy instead
of ClientTransportPlugin, but that gives me the same segfault. Here's
what GDB says:

[info] &lt;1&gt; trying to connect to 87.73.82.145:8080
[info] &lt;1.1&gt; network error in read: Connection reset by peer

Program received signal SIGSEGV, Segmentation fault.
0x000000000040760a in conn_t::outbound (this=0x0) at src/connections.h:43
43        { return this-&gt;buffer ? bufferevent_get_output(this-&gt;buffer) : 0; }
(gdb) bt
#0  0x000000000040760a in conn_t::outbound (this=0x0) at src/connections.h:43
#1  0x00000000004196f9 in (anonymous namespace)::null_circuit_t::send (this=0x63fd30) \
at src/protocol/null.cc:202 #2  0x00000000004070aa in circuit_send (ckt=0x63fd30) at \
src/connections.cc:241 #3  0x000000000040b6d1 in upstream_read_cb (bev=0x63f9c0, \
arg=0x63fd30) at src/network.cc:303 #4  0x00007ffff7bb0c4a in ?? () from \
/usr/lib/libevent-2.0.so.5 #5  0x00007ffff7ba6254 in event_base_loop () from \
/usr/lib/libevent-2.0.so.5 #6  0x00000000004056f3 in main (argv=0x7fffffffdef8) at \
src/main.cc:417

I tried running the "chop" mode but didn't figure out the usage. I seems
I need a "down_address" but I don't know what to put there.

$ ./stegotorus chop socks 127.0.0.1:5000
[warn] chop: not enough parameters
[warn] chop syntax:
        chop &lt;mode&gt; &lt;up_address&gt; (&lt;down_address&gt; [&lt;steg&gt;])...
                mode ~ server|client|socks
                up_address, down_address ~ host:port
                A steganographer is required for each down_address.
                The down_address list is still required in socks mode.
Examples:
        stegotorus chop client 127.0.0.1:5000 192.168.1.99:11253 http \
                192.168.1.99:11254 skype
        stegotorus chop server 127.0.0.1:9005 192.168.1.99:11253 http \
192.168.1.99:11254 skype

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120605043510</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-06-05 04:35:10-0400</timestampReceived><subject>Re: [tor-dev] Stegotorus now available from gitweb.torproject.org</subject><body>

On 2012-06-04 8:13 PM, David Fifield wrote:
&gt; 
&gt; $ git clone https://git.torproject.org/stegotorus.git
&gt; $ cd stegotorus
&gt; $ autoreconf -i
&gt; $ ./configure&amp;&amp;  make
&gt; $ ./stegotorus null socks 127.0.0.1:5000
&gt; [info] ./stegotorus process 28359 now initialized
&gt; $ tor ClientTransportPlugin "stegotorus socks4 127.0.0.1:5000" UseBridges 1 Bridge \
&gt; "stegotorus 87.73.82.145:8080" 
&gt; I found the bridge IP address in scripts/torrc. At this point stegotorus
&gt; printed out:
&gt; 
&gt; [info] 127.0.0.1:5000: new connection to socks client from 127.0.0.1:42233
&gt; [info]&lt;1&gt;  trying to connect to 87.73.82.145:8080
&gt; [info]&lt;1.1&gt;  network error in read: Connection reset by peer
&gt; 
&gt; [error] Segmentation fault at 0000000000000010
&gt; ./stegotorus[0x4054b6]
&gt; /lib/x86_64-linux-gnu/libc.so.6(+0x324f0)[0x7fcff4cee4f0]
&gt; ./stegotorus[0x40ec11]
&gt; ./stegotorus[0x405f7a]
&gt; /usr/lib/libevent-2.0.so.5(+0x1bc4a)[0x7fcff5df8c4a]
&gt; /usr/lib/libevent-2.0.so.5(event_base_loop+0x414)[0x7fcff5dee254]
&gt; ./stegotorus[0x404e76]
&gt; /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7fcff4cdaead]
&gt; ./stegotorus[0x405291]
&gt; Segmentation fault

This looks like a genuine bug - probably failure to handle ECONNRESET 
correctly somewhere.  I'll see if I can reproduce it, but it would be 
helpful to me if you changed your stegotorus invocation to

./stegotorus --log-min-severity=debug \
   null socks 127.0.0.1:5000 &gt;&amp; stegotorus.log

and sent me (off-list) the log file.

&gt; I tried running the "chop" mode but didn't figure out the usage. I seems
&gt; I need a "down_address" but I don't know what to put there.

In "chop" mode, the information Tor provides StegoTorus via SOCKS is 
insufficient to contact the remote peer correctly, so it ignores that 
and just does what you tell it on the command line.  You would need 
something like

./stegotorus chop socks 127.0.0.1:5000 \
     87.73.82.145:8080 http

And then 87.73.82.145 had better be running

./stegotorus chop server 127.0.0.1:9000 \
    87.73.82.145:8080

with the actual Tor bridge listening on :9000.  BTW, on the server side 
you should only specify each listener once, but on the client side, if 
you duplicate each address N times that allows making N simultaneous 
connections.

./stegotorus chop socks 127.0.0.1:5000 \
     87.73.82.145:8080 http \
     87.73.82.145:8080 http \
     87.73.82.145:8080 http \
     87.73.82.145:8080 http

That's more like a real web browser, and also will give _much_ better 
performance (as in "Tor won't successfully build circuits if you don't 
do this").

zw

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120605160518</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-05 16:05:18-0400</timestampReceived><subject>Re: [tor-dev] use sphinx on stem</subject><body>

Hi Beck. It's a pity that you disappeared from irc, I tried to tell
you there that I was actively looking into Sphinx too and had some
discussions in #tor-dev about if we should switch to reStructuredText.

I'm currently converting all of our pydocs and will probably be done tomorrow...
https://gitweb.torproject.org/user/atagar/stem.git/shortlog/refs/heads/sphinx

I'm probably doing a poor job of coordinating things. Thoughts on what
we could do better to avoid stepping on each other's toes?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120605165626</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-06-05 16:56:26-0400</timestampReceived><subject>Re: [tor-dev] use sphinx on stem</subject><body>

Oh, that's absolutely my fault that has not contacted you or showed up
on irc this week. I didn't spend too much time on it thought, so
things are not that bad. Do you need any help on this, or you can
complete all the work by yourself and I should move to another task
(maybe events)?

Beck
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120601184537</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-01 18:45:37-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 0.2</subject><body>

&gt; (If this type of mail isn't appropriate for tor-dev please let me
&gt; know...)

It's perfectly appropriate - glad to hear about the improvements!

On a side note, do you think that any txtorcon/stem work would be
appropriate? They're both aiming to be a library that does largely the
same things. The twisted/threading differences mean that our
controller classes are incompatible, but other bits of the parsing and
such should be interchangeable. For instance, I've invested an immense
amount of effort into parsing (and tests) for descriptor content...
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py

so that things like "GETINFO desc/*" will provide usefully parsed
information. We could probably also share connection and
authentication code.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604064843</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-04 06:48:43-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 0.2</subject><body>

On 6/1/12 8:45 PM, Damian Johnson wrote:
&gt;&gt; (If this type of mail isn't appropriate for tor-dev please let me
&gt;&gt; know...)
&gt; 
&gt; It's perfectly appropriate - glad to hear about the improvements!
&gt; 
&gt; On a side note, do you think that any txtorcon/stem work would be
&gt; appropriate? They're both aiming to be a library that does largely the
&gt; same things. The twisted/threading differences mean that our
&gt; controller classes are incompatible, but other bits of the parsing and
&gt; such should be interchangeable. For instance, I've invested an immense
&gt; amount of effort into parsing (and tests) for descriptor content...
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py
&gt; 
&gt; so that things like "GETINFO desc/*" will provide usefully parsed
&gt; information. We could probably also share connection and
&gt; authentication code.

Yes please, try to make a set of generic and small sub-libraries as
possible.

It seems to me that within the Tor community, for everything that's not
the "tor core c code", there's a lot of duplication, duplicated code
around or abbandoned projects.

Additionally you might consider rewriting, based on STEM, the ooonioo
software that is now written in heavy Java.

Based on your parsers it should take probably few hours to provide the
Atlas's REST interface.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604153719</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-04 15:37:19-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 0.2</subject><body>

&gt; It seems to me that within the Tor community, for everything that's not
&gt; the "tor core c code", there's a lot of duplication, duplicated code
&gt; around or abbandoned projects.

We do have quite a few abandoned projects, though the core codebase
certainly isn't the only one that's actively maintained...
https://www.torproject.org/getinvolved/volunteer.html.en#Projects

Stem aims to be a replacement for TorCtl which has been collecting
dust for years due to maintainability problems (long story short, its
codebase lacks tests and its maintainers are fearful of any
substantial changes to it).

&gt; Additionally you might consider rewriting, based on STEM, the ooonioo
&gt; software that is now written in heavy Java.
&gt;
&gt; Based on your parsers it should take probably few hours to provide the
&gt; Atlas's REST interface.

That's actually already our plan. Stem will eventually replace
metrics-lib (a java library for descriptor parsing), and be used for a
python Oninooo. This has been discussed on occasion in the 'Python
metrics-lib' thread...
https://lists.torproject.org/pipermail/tor-dev/2012-May/003504.html

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120502123018</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-02 12:30:18-0400</timestampReceived><subject>[tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Hi everybody,

we're discussing in #5684 whether we can stop sanitizing nicknames in
the bridge descriptors that we publish here:

https://metrics.torproject.org/data.html#bridgedesc

The sanitizing process is described here:

https://metrics.torproject.org/formats.html#bridgedesc

When we started making sanitized bridge descriptors available on the
metrics website we replaced all contained nicknames with "Unnamed".  The
reason was that "bridge nicknames might give hints on the location of
the bridge if chosen without care; e.g. a bridge nickname might be very
similar to the operators' relay nicknames which might be located on
adjacent IP addresses."

This was an easy decision back then, because we didn't use the nickname
for anything.  This has changed with #5629 where we try to count EC2
bridges which all have a similar nickname.  So, while we don't have that
information, there'd now be a use for it.  Another advantage of having
bridge nicknames would be that they're easier to look up in a status
website like Atlas (which doesn't support searching for bridges yet).
We should re-consider whether it still makes sense to sanitize nicknames
in bridge descriptors or not.

Regarding the reasoning above, couldn't an adversary just scan adjacent
IP addresses of all known relays, not just the ones with similar
nicknames?  And are we giving away anything else with the nicknames?

It would be great to get some feedback here whether leaving nicknames in
the sanitized descriptors is a terrible idea, and if so, why.

If nobody objects within the next, say, two weeks, I'm going to make an
old tarball from 2008 available with original nicknames.  And if nobody
screams, I'll provide the remaining tarballs containing original
nicknames another two weeks later.

Thanks!
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120608190353</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-08 19:03:53-0400</timestampReceived><subject>[tor-dev]  Stem Testing Code Question - Wesleyan Interns</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

Having gotten started looking at some of the testing code from Stem over
the last day or so, Megan and I have come up with a question.  While both
of us are currently on #tor and #tor-dev (as ErikI and MeganC), we figured
an email would be best for getting started as we have a bit more to say.

In run_tests.py, under the if statement that catches the case of
integration tests (line 268), there is a block of code that contains a
number of references to 'targets.'  To start, could you explain the
formatting and specific purpose of the settings.cfg file?

Basically, we are trying to understand what lines 274 through 309 are doing
in run_tests.py.

Thanks in advance,
Erik &amp; Megan

[Attachment #5 (text/html)]

Hi Damian,&lt;br&gt;&lt;br&gt;Having gotten started looking at some of the testing 
code from Stem over the last day or so, Megan and I have come up with a 
question.  While both of us are currently on #tor and #tor-dev (as ErikI
 and MeganC), we figured an email would be best for getting started as 
we have a bit more to say.&lt;br&gt;
&lt;br&gt;In run_tests.py, under the if statement that catches the case of 
integration tests (line 268), there is a block of code that contains a 
number of references to 'targets.'  To start, could you explain the 
formatting and specific purpose of the settings.cfg file?&lt;br&gt;
&lt;br&gt;Basically, we are trying to understand what lines 274 through 309 are doing in \
run_tests.py.&lt;br&gt;&lt;br&gt;Thanks in advance,&lt;br&gt;Erik &amp; Megan



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120502193520</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-02 19:35:20-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 02.05.2012 14:30:

&gt; we're discussing in #5684 whether we can stop sanitizing nicknames in
&gt; the bridge descriptors that we publish

I don't mind, but...

&gt; The reason was that "bridge nicknames might give hints on the location of
&gt; the bridge if chosen without care; e.g. a bridge nickname might be very
&gt; similar to the operators' relay nicknames which might be located on
&gt; adjacent IP addresses."

That doesn't seem to have changed. Anyone can set up an relay and a
bridge on "adjacent IP addresses".

It's not recommend to set up bridge and relay on the same network. e.g.
1.2.3.4:443 and 1.2.3.4:444. Since most adversaries don't block 1.2.3.4
completely I wondered how much clients would have problems connecting to
such a bridge.

In the mentioned case (adjacent addresses like 1.2.3.4:443 and
1.2.3.5:443) it would be different. I assume it would be much better.

How much damage would be done if a certain percentage of bridges would
be (both at the same time)
a) named similar
b) and actually be closed together (based on IP)?

Do similar names actually mean that bridges are located where the relay
is? (Apparently you've got the data to see these correlations)

At any point and regardless how small the damage might be you (the Tor
people) should raise awareness to name the bridge in a way that it does
not reveal a adjacent IP.

&gt; This was an easy decision back then, because we didn't use the nickname
&gt; for anything.

"We don't need it, so better remove it." I really like that.

&gt; This has changed with #5629 where we try to count EC2
&gt; bridges which all have a similar nickname.  So, while we don't have that
&gt; information, there'd now be a use for it.

As #5684 mentions there would be another way.

- Use the extra platform string. (Don't know how good that would work)

&gt; Another advantage of having
&gt; bridge nicknames would be that they're easier to look up in a status
&gt; website like Atlas (which doesn't support searching for bridges yet).

That's of course something that's not possible with the platform string.

For me it would be nice to have, but could live without it, when it's
not safe enough. If there's a doubt about it's safety, I would stay away
from changing it.

&gt; Regarding the reasoning above, couldn't an adversary just scan adjacent
&gt; IP addresses of all known relays, not just the ones with similar
&gt; nicknames?

As an adversary I would look up all known relays and scan for useful
services. When 1.2.3.4:80 hosts a website I whitelist it and block all
other 1.2.3.4:IPs, especially the ORport. If enough resource are
available I'd scan "adjacent addresses".

&gt; And are we giving away anything else with the nicknames?

Maybe it's location ;)

As I read "hints on the location" for the first time; I though it would
mean that "TowerBridge" or "BridgeofLondon" would be bad since it could
hint to London.

&gt; It would be great to get some feedback here whether leaving nicknames in
&gt; the sanitized descriptors is a terrible idea, and if so, why.

Probably there are many unnamed bridges. Should someone find its bridge
named like its relay he still can rename them.

There's a goal (or some), so it would have a purpose.

&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt; old tarball from 2008 available with original nicknames.

I don't object. As you have the tarballs available (in a safe and secure
place, I hope) you can see if there are relays and bridges which give
away anything, especially "adjacent addresses".

Since your message is older than five hours and I'm the only one that
replies to it so far (which makes me feel like I shouldn't have), I
assume that there is not so much to object.

I like that you wait....

Could it make sense to ask the same question on the tor-relay list? Here
you (the Tor people) have more data again and know who subscribed to
both lists. I for myself assume that relay and bridge operators, which
could object, because it's their naming scheme that could reveal
something, are more likely to be subscribed to tor-relays.

&gt; And if nobody
&gt; screams, I'll provide the remaining tarballs containing original
&gt; nicknames another two weeks later.

Probably two weeks later, since unpacking, processing and re-packing
takes some time :) I know the sanitized ones are large when they are
unpacked. Windows needs some time to delete the extracted files.

&gt; Thanks!
&gt; Karsten

Thanks for your work.

Regards,
bastik_tor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120503113255</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-03 11:32:55-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

[Cc'ing tor-relays, because this discussion might be relevant for
relay/bridge operators, too.  Please keep the discussion on tor-dev.
See https://lists.torproject.org/pipermail/tor-dev/2012-May/003489.html
for the whole thread.]


Hi Sebastian,

On 5/2/12 9:35 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; [...]
&gt;
&gt; Do similar names actually mean that bridges are located where the relay
&gt; is? (Apparently you've got the data to see these correlations)

A fine question.

How do we define "similar" and "located where the relay is?"  I can see
how a relay "bastik1" and a bridge "bastik2" have similar nicknames, but
would we also teach a program that "bastikrelay" and "bastikbridge" are
similar?  And are two IP address in the same, say, /30 located nearby,
or is the same /28 or even /24 okay, too?

So, while we have the data to see these correlations, I think that
whatever similarity algorithm we come up with, somebody else might come
up with something smarter.  If we do the analysis you suggest and learn
that it's safe to include nicknames, that doesn't say very much.  Only
because we have the data to confirm how well our attack would works
doesn't automatically mean we're in a good position to design the attack.

If you want to run this analysis with the 2008 tarball (assuming there
won't be general objections within the next two weeks), I'm happy to
take your list of likely bridge IP addresses and tell you how accurate
your algorithm is.

&gt; "We don't need it, so better remove it." I really like that.

I think we're really conservative with giving out bridge data, and
that's good.

At the same time there's a value in giving out information about
bridges, so that "remove everything" is not a good answer.  For example,
I think if we give bridge operators better feedback how their bridge is
doing, we'll suddenly have a lot more bridges.  Making it easy for
bridge operators to use Atlas would be a good step into that direction.
 The same applies to funders who realize from our statistics how
successful the Tor Cloud project is and who then want to fund it more to
make it more usable, support more cloud providers, etc.

&gt;&gt; And are we giving away anything else with the nicknames?
&gt; 
&gt; Maybe it's location ;)
&gt; 
&gt; As I read "hints on the location" for the first time; I though it would
&gt; mean that "TowerBridge" or "BridgeofLondon" would be bad since it could
&gt; hint to London.

Well, in that case you'd learn that there's a (Tor) bridge in London.
But that wouldn't help you very much, would it?

&gt; Could it make sense to ask the same question on the tor-relay list? Here
&gt; you (the Tor people) have more data again and know who subscribed to
&gt; both lists. I for myself assume that relay and bridge operators, which
&gt; could object, because it's their naming scheme that could reveal
&gt; something, are more likely to be subscribed to tor-relays.

Good idea.  I added tor-relays to the Cc to let relay/bridge operators
know.  Let's keep this discussion on tor-dev though.

&gt;&gt; And if nobody
&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt; nicknames another two weeks later.
&gt; 
&gt; Probably two weeks later, since unpacking, processing and re-packing
&gt; takes some time :) I know the sanitized ones are large when they are
&gt; unpacked. Windows needs some time to delete the extracted files.

Right. :)  I'll probably start sanitizing all bridge descriptors at once
in two weeks, starting with the 2008 ones, and provide only the 2008
tarball then.  It's going to keep my CPU and disks busy for a while.

Thanks for your input!

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120503172231</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-03 17:22:31-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 03.05.2012 13:32:
&gt; Hi Sebastian,
Hi Karsten,

&gt;&gt; Do similar names actually mean that bridges are located where the relay
&gt;&gt; is? (Apparently you've got the data to see these correlations)
&gt; 
&gt; A fine question.
&gt; 
&gt; How do we define "similar"

That's the same problem an attacker would have. I truly understand the
point. One can up with a naming scheme that's not in "the pattern", but
where it's still easy to correlate the name. e.g.  relay "Earth" and
bridge "Moon", relay "Jupiter" bridge "Callisto".

&gt; and "located where the relay is?"

I guessed that would be defined already.

The safest way is to ensure that bridge and relay operators are aware of
the fact that their naming scheme should avoid correlations, wherever
both are actually located. The question here is on how to ensure it?!

&gt; So, while we have the data to see these correlations, I think that
&gt; whatever similarity algorithm we come up with, somebody else might come
&gt; up with something smarter.  If we do the analysis you suggest and learn
&gt; that it's safe to include nicknames, that doesn't say very much.  Only
&gt; because we have the data to confirm how well our attack would works
&gt; doesn't automatically mean we're in a good position to design the attack.

If I remember correctly Bruce Schneier "once" said that it's easy to
built/invent your own cipher which you are unable to break, but that you
can't be sure that no one else can.

&gt; If you want to run this analysis with the 2008 tarball (assuming there
&gt; won't be general objections within the next two weeks), I'm happy to
&gt; take your list of likely bridge IP addresses and tell you how accurate
&gt; your algorithm is.

I'll could flip a coin and it would be much more accurate than any
algorithm I could come up with.

I'm not able to use any mathematical function on the data. And I have no
"skill" to do that in a batch. I as an adversary would "crowdsource" the
similarity since humans might have a better understanding what might
belong together.

All I could do is look through the list manually and compare them with
the list of relays. I don't think I'm going to do this as I don't
believe that I'm going to find anything.

&gt;&gt; "We don't need it, so better remove it." I really like that.
&gt; 
&gt; I think we're really conservative with giving out bridge data, and
&gt; that's good.

I agree.

&gt; At the same time there's a value in giving out information about
&gt; bridges, so that "remove everything" is not a good answer.  For example,
&gt; I think if we give bridge operators better feedback how their bridge is
&gt; doing, we'll suddenly have a lot more bridges.  Making it easy for
&gt; bridge operators to use Atlas would be a good step into that direction.

I agree again. At least for interested operators it's very nice to have.

&gt;  The same applies to funders who realize from our statistics how
&gt; successful the Tor Cloud project is and who then want to fund it more to
&gt; make it more usable, support more cloud providers, etc.

When it's helpful.

&gt;&gt;&gt; And are we giving away anything else with the nicknames?
&gt;&gt;
&gt;&gt; Maybe it's location ;)
&gt;&gt;
&gt;&gt; As I read "hints on the location" for the first time; I though it would
&gt;&gt; mean that "TowerBridge" or "BridgeofLondon" would be bad since it could
&gt;&gt; hint to London.
&gt; 
&gt; Well, in that case you'd learn that there's a (Tor) bridge in London.
&gt; But that wouldn't help you very much, would it?

That was my first misinterpretation of "hints on the location" as I read
it "back then" (some time ago). I tried and failed to understand what
one would get from knowing where are bridge would be located
(geographically). I think it does not hurt.

&gt; Thanks for your input!

Probably it wasn't necessary at all. Don't think it was to useful either.

&gt; Best,
&gt; Karsten
Same to you!
Sebastian

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120503180649</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-05-03 18:06:49-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/3/12, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:

&gt; How do we define "similar" and "located where the relay is?"  I can see
&gt; how a relay "bastik1" and a bridge "bastik2" have similar nicknames, but
&gt; would we also teach a program that "bastikrelay" and "bastikbridge" are
&gt; similar?  And are two IP address in the same, say, /30 located nearby,
&gt; or is the same /28 or even /24 okay, too?

http://freehaven.net/anonbib/papers/pets2011/p1-perito.pdf


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504002129</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-05-04 00:21:29-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 05/03/2012 01:32 PM, Karsten Loesing wrote:
&gt; On 5/2/12 9:35 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt; [...]
&gt;&gt; "We don't need it, so better remove it." I really like that.
&gt; 
&gt; I think we're really conservative with giving out bridge data, and
&gt; that's good.
&gt; 
&gt; At the same time there's a value in giving out information about
&gt; bridges, so that "remove everything" is not a good answer.  For example,
&gt; I think if we give bridge operators better feedback how their bridge is
&gt; doing, we'll suddenly have a lot more bridges.  Making it easy for
&gt; bridge operators to use Atlas would be a good step into that direction.
&gt;  The same applies to funders who realize from our statistics how
&gt; successful the Tor Cloud project is and who then want to fund it more to
&gt; make it more usable, support more cloud providers, etc.

I would suggest looking at homomorphic hash [1] and Shamir's discrete logarithm
hash function [2]. (Those also work well with linear network coding [3], but not
sure if it could be useful here.)

For example, encoding FQDN, IP or nick can be done by splitting the
argument-to-encode by fields or characters. The parts can be then used as input
to the hash function.

The function allows checking whether a nick/FQDN/IP has specific part, or two
have identical part, but does not disclose "plaintext" of the part.

Obviously, there are statistical attacks possible: e.g. for FQDNs, the attacker
could guess which component maps to 'com', as it is the most common TLD.
Similarly, splitting up into characters can be attacked by using frequency
tables. There are other things that could apply here (thinking about attacks on
"plaintext RSA" without padding).

Nevertheless, I think it's still better than publishing plaintext data if we are
not sure what they might give away. Implementation using gmp/gmpy/numpy should
be fairly easy.

Ondrej

[1] On-the-Fly Verification of Rateless Erasure Codes for Efficient Content
Distribution, http://pdos.csail.mit.edu/papers/otfvec/paper.pdf (see section IV)
[2] http://www.senderek.com/SDLH/
[3] https://en.wikipedia.org/wiki/Network_coding
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504103119</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-04 10:31:19-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/3/12 7:22 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; The safest way is to ensure that bridge and relay operators are aware of
&gt; the fact that their naming scheme should avoid correlations, wherever
&gt; both are actually located. The question here is on how to ensure it?!

This is a usability question.  Telling bridge operators that they should
use a very different nickname for their bridge than what they used for
their relays could be useful.  But it's yet one more thing to tell them.
 We should also tell them not to run their bridge on the same IP address
where they ran a relay before.  Or they shouldn't re-use their relay
identity key for running a bridge.  And we could even test these cases
automatically.  But my sense is that we'd only confuse potential bridge
operators, either by telling them these things in a howto or by
notifying them when they do one of these things.  We'd probably overload
poor Runa who has to answer the support questions coming out of this.
Probably not worth it.

&gt;&gt; So, while we have the data to see these correlations, I think that
&gt;&gt; whatever similarity algorithm we come up with, somebody else might come
&gt;&gt; up with something smarter.  If we do the analysis you suggest and learn
&gt;&gt; that it's safe to include nicknames, that doesn't say very much.  Only
&gt;&gt; because we have the data to confirm how well our attack would works
&gt;&gt; doesn't automatically mean we're in a good position to design the attack.
&gt; 
&gt; If I remember correctly Bruce Schneier "once" said that it's easy to
&gt; built/invent your own cipher which you are unable to break, but that you
&gt; can't be sure that no one else can.

I fully agree.  That's why I want to avoid doing the analysis and
telling people everything's good.

&gt; I'm not able to use any mathematical function on the data. And I have no
&gt; "skill" to do that in a batch. I as an adversary would "crowdsource" the
&gt; similarity since humans might have a better understanding what might
&gt; belong together.
&gt; 
&gt; All I could do is look through the list manually and compare them with
&gt; the list of relays. I don't think I'm going to do this as I don't
&gt; believe that I'm going to find anything.

Sounds like a fine approach.  Want to do it (when the 2008 tarball is
available)?  It would be interesting to see a) what fraction of bridges
you think you can derive IP addresses for and b) how accurate your
guesses are.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504105558</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-04 10:55:58-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/3/12 8:06 PM, Robert Ransom wrote:
&gt; On 5/3/12, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; 
&gt;&gt; How do we define "similar" and "located where the relay is?"  I can see
&gt;&gt; how a relay "bastik1" and a bridge "bastik2" have similar nicknames, but
&gt;&gt; would we also teach a program that "bastikrelay" and "bastikbridge" are
&gt;&gt; similar?  And are two IP address in the same, say, /30 located nearby,
&gt;&gt; or is the same /28 or even /24 okay, too?
&gt; 
&gt; http://freehaven.net/anonbib/papers/pets2011/p1-perito.pdf

Interesting.

I'd think there's some similarity between usernames and nicknames, but
they're not the same.  People make different decisions when picking a
username for themselves than when finding nicknames for their relays or
bridges.  For example, my three relays burning spare bandwidth are named
"ene", "mene", and "miste", and my bridge is named "mu"; all names are
part of a German variant of "eenie meenie miney mo".  I picked these
names, both because I lacked creativity to pick better nicknames, but
also because I can easily memorize that they belong together.  I
wouldn't pick usernames this different when registering in online
communities.

Sounds like a fun research project to apply their paper to relay/bridge
nicknames.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504110408</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-04 11:04:08-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/4/12 2:21 AM, Ondrej Mikle wrote:
&gt; On 05/03/2012 01:32 PM, Karsten Loesing wrote:
&gt;&gt; On 5/2/12 9:35 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt;&gt; [...]
&gt;&gt;&gt; "We don't need it, so better remove it." I really like that.
&gt;&gt;
&gt;&gt; I think we're really conservative with giving out bridge data, and
&gt;&gt; that's good.
&gt;&gt;
&gt;&gt; At the same time there's a value in giving out information about
&gt;&gt; bridges, so that "remove everything" is not a good answer.  For example,
&gt;&gt; I think if we give bridge operators better feedback how their bridge is
&gt;&gt; doing, we'll suddenly have a lot more bridges.  Making it easy for
&gt;&gt; bridge operators to use Atlas would be a good step into that direction.
&gt;&gt;  The same applies to funders who realize from our statistics how
&gt;&gt; successful the Tor Cloud project is and who then want to fund it more to
&gt;&gt; make it more usable, support more cloud providers, etc.
&gt; 
&gt; I would suggest looking at homomorphic hash [1] and Shamir's discrete logarithm
&gt; hash function [2]. (Those also work well with linear network coding [3], but not
&gt; sure if it could be useful here.)
&gt; 
&gt; For example, encoding FQDN, IP or nick can be done by splitting the
&gt; argument-to-encode by fields or characters. The parts can be then used as input
&gt; to the hash function.
&gt; 
&gt; The function allows checking whether a nick/FQDN/IP has specific part, or two
&gt; have identical part, but does not disclose "plaintext" of the part.
&gt; 
&gt; Obviously, there are statistical attacks possible: e.g. for FQDNs, the attacker
&gt; could guess which component maps to 'com', as it is the most common TLD.
&gt; Similarly, splitting up into characters can be attacked by using frequency
&gt; tables. There are other things that could apply here (thinking about attacks on
&gt; "plaintext RSA" without padding).
&gt; 
&gt; Nevertheless, I think it's still better than publishing plaintext data if we are
&gt; not sure what they might give away. Implementation using gmp/gmpy/numpy should
&gt; be fairly easy.

Interesting approach.  So, the idea would be to split a nickname like
"ec2bridgeb268f2ae6" into its characters (or pairs of 2 or more
characters?), run it through the hash function, and then be able to
check if the nickname starts with "ec2bridge"?  Plus, the approach would
still work if we later decide we want to find all bridges with nicknames
starting with "rackspacebridge"?

My first concern is that there's not enough entropy in nicknames for the
hash function to provide sufficient protection.  I could imagine it's
not hard to throw variants of all known relay nicknames into that hash
function and learn 50%, if not 75%, of all used bridge nicknames.

My second concern is that this approach would only solve the problem of
counting EC2 bridges, but wouldn't make sites like Atlas more usable for
bridge operators.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504135221</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-04 13:52:21-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 04.05.2012 12:31:
&gt; On 5/3/12 7:22 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt; The safest way is to ensure that bridge and relay operators are aware of
&gt;&gt; the fact that their naming scheme should avoid correlations, wherever
&gt;&gt; both are actually located. The question here is on how to ensure it?!
&gt; 
&gt; This is a usability question.  Telling bridge operators that they should
&gt; use a very different nickname for their bridge than what they used for
&gt; their relays could be useful.  But it's yet one more thing to tell them.
&gt; We should also tell them not to run their bridge on the same IP address
&gt; where they ran a relay before.  Or they shouldn't re-use their relay
&gt; identity key for running a bridge.  And we could even test these cases
&gt; automatically.  But my sense is that we'd only confuse potential bridge
&gt; operators, either by telling them these things in a howto or by
&gt; notifying them when they do one of these things.  We'd probably overload
&gt; poor Runa who has to answer the support questions coming out of this.
&gt; Probably not worth it.

I agree, that it's already enough information an operator would have to
consider.

&gt;&gt; [...]
&gt;&gt;
&gt;&gt; All I could do is look through the list manually and compare them with
&gt;&gt; the list of relays. I don't think I'm going to do this as I don't
&gt;&gt; believe that I'm going to find anything.
&gt; 
&gt; Sounds like a fine approach.  Want to do it (when the 2008 tarball is
&gt; available)?  It would be interesting to see a) what fraction of bridges
&gt; you think you can derive IP addresses for and b) how accurate your
&gt; guesses are.

Since it will be released in two weeks and the next wave is released in
two weeks after that I think there's enough time in which I can do that.

When you think it's useful I'm at least going to try. We should take
this "off list" and then can post the results on it.

I encourage anyone to try the same. It might be interesting to see
different results (What's similar). In the case that's useful.

&gt; Best,
&gt; Karsten
&gt; 
Regards,
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504163325</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-04 16:33:25-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/4/12 3:52 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; Karsten Loesing, 04.05.2012 12:31:
&gt;&gt; Sounds like a fine approach.  Want to do it (when the 2008 tarball is
&gt;&gt; available)?  It would be interesting to see a) what fraction of bridges
&gt;&gt; you think you can derive IP addresses for and b) how accurate your
&gt;&gt; guesses are.
&gt; 
&gt; Since it will be released in two weeks and the next wave is released in
&gt; two weeks after that I think there's enough time in which I can do that.

Cool!

&gt; When you think it's useful I'm at least going to try. We should take
&gt; this "off list" and then can post the results on it.

Let's only discuss things off-list to reduce the potential noise for
others, but let's post all results directly to the list.  If you come up
with guesses which bridges in 2008 were located nearby which relays,
that's entirely based on (then) publicly available information.  My
response will be of the sort "you found x% of the bridges" which is fine
to post to the list, too.  This is why we're trying this with the 2008
bridges first before making the more recent tarballs available.  And
even then, it's good to find issues before we have 50,000 bridges in the
network.

&gt; I encourage anyone to try the same. It might be interesting to see
&gt; different results (What's similar). In the case that's useful.

Sure!

I encourage anyone to find issues in the sanitized bridge descriptor
tarballs at any time, not restricted to this specific discussion.
Knowing that there's a potential problem is great, because then we can
fix it.  So far I was the only one finding and fixing problems.  Maybe
others did find them, too, but didn't tell anyone.

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504234745</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-05-04 23:47:45-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 05/04/2012 01:04 PM, Karsten Loesing wrote:
&gt; On 5/4/12 2:21 AM, Ondrej Mikle wrote:
&gt;&gt; On 05/03/2012 01:32 PM, Karsten Loesing wrote:
&gt;&gt;&gt; On 5/2/12 9:35 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt;&gt;&gt; [...]
&gt;&gt;&gt;&gt; "We don't need it, so better remove it." I really like that.
&gt;&gt;&gt;
&gt;&gt;&gt; I think we're really conservative with giving out bridge data, and
&gt;&gt;&gt; that's good.
&gt;&gt;&gt;
&gt;&gt;&gt; At the same time there's a value in giving out information about
&gt;&gt;&gt; bridges, so that "remove everything" is not a good answer.  For example,
&gt;&gt;&gt; I think if we give bridge operators better feedback how their bridge is
&gt;&gt;&gt; doing, we'll suddenly have a lot more bridges.  Making it easy for
&gt;&gt;&gt; bridge operators to use Atlas would be a good step into that direction.
&gt;&gt;&gt;  The same applies to funders who realize from our statistics how
&gt;&gt;&gt; successful the Tor Cloud project is and who then want to fund it more to
&gt;&gt;&gt; make it more usable, support more cloud providers, etc.
&gt;&gt;
&gt;&gt; I would suggest looking at homomorphic hash [1] and Shamir's discrete logarithm
&gt;&gt; hash function [2]. (Those also work well with linear network coding [3], but not
&gt;&gt; sure if it could be useful here.)
&gt;&gt;
&gt;&gt; For example, encoding FQDN, IP or nick can be done by splitting the
&gt;&gt; argument-to-encode by fields or characters. The parts can be then used as input
&gt;&gt; to the hash function.
&gt;&gt;
&gt;&gt; The function allows checking whether a nick/FQDN/IP has specific part, or two
&gt;&gt; have identical part, but does not disclose "plaintext" of the part.
&gt;&gt;
&gt;&gt; Obviously, there are statistical attacks possible: e.g. for FQDNs, the attacker
&gt;&gt; could guess which component maps to 'com', as it is the most common TLD.
&gt;&gt; Similarly, splitting up into characters can be attacked by using frequency
&gt;&gt; tables. There are other things that could apply here (thinking about attacks on
&gt;&gt; "plaintext RSA" without padding).
&gt;&gt;
&gt;&gt; Nevertheless, I think it's still better than publishing plaintext data if we are
&gt;&gt; not sure what they might give away. Implementation using gmp/gmpy/numpy should
&gt;&gt; be fairly easy.
&gt; 
&gt; Interesting approach.  So, the idea would be to split a nickname like
&gt; "ec2bridgeb268f2ae6" into its characters (or pairs of 2 or more
&gt; characters?), run it through the hash function, and then be able to
&gt; check if the nickname starts with "ec2bridge"?  Plus, the approach would
&gt; still work if we later decide we want to find all bridges with nicknames
&gt; starting with "rackspacebridge"?

Basically, yes (you'd need to check for "rackspacebridg", since it's length is
multiple of two; it's possible to check in middle as well as at end). Though as
you write below, the low entropy make it not so much usable for groups of 2-3
characters.

Thus the idea is probably over-engineering in this case. I just note below some
design facets I had in mind:

&gt; My first concern is that there's not enough entropy in nicknames for the
&gt; hash function to provide sufficient protection.  I could imagine it's
&gt; not hard to throw variants of all known relay nicknames into that hash
&gt; function and learn 50%, if not 75%, of all used bridge nicknames.

One trick I had in mind was create "secret hash function" (take the following
with a grain of salt, algebra is not my "primary thing"):

- you keep generators g_i secret, which turns the problem from discrete-log into
a problem of finding n-th root in finite field (n is the value of the digraph,
trigraph or few characters, e.g. encoded value of 'ec2bridge', possibly
"blinded" by another multiplication with secret constant c_i)
- in general, computing n-th root is quite slow [1], but there are many special
cases like square root (quadratic residue)
- the above properties would make it slow for attacker to brute-force all
possible values - i.e. attacker can't just compute the result values of such
homomorphic hash, because he doesn't know the function parameters (e.g. without
computing the generators), but everyone can use the "homomorphic property" for
testing parts

&gt; My second concern is that this approach would only solve the problem of
&gt; counting EC2 bridges, but wouldn't make sites like Atlas more usable for
&gt; bridge operators.

Yes, the scheme severely restricts what you can do with the data.

Ondrej

[1] http://www.ma.utexas.edu/users/voloch/Preprints/roots.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120505130524</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-05-05 13:05:24-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On Sat, May 05, 2012 at 01:47:45AM +0200, Ondrej Mikle wrote:
&gt; One trick I had in mind was create "secret hash function" (take the following
&gt; with a grain of salt, algebra is not my "primary thing"):
&gt; 
&gt; - you keep generators g_i secret, which turns the problem from discrete-log into
&gt; a problem of finding n-th root in finite field (n is the value of the digraph,
&gt; trigraph or few characters, e.g. encoded value of 'ec2bridge', possibly
&gt; "blinded" by another multiplication with secret constant c_i)
&gt; - in general, computing n-th root is quite slow [1], but there are many special
&gt; cases like square root (quadratic residue)
&gt; - the above properties would make it slow for attacker to brute-force all
&gt; possible values - i.e. attacker can't just compute the result values of such
&gt; homomorphic hash, because he doesn't know the function parameters (e.g. without
&gt; computing the generators), but everyone can use the "homomorphic property" for
&gt; testing parts

It sounds like you're talking about the homomorphic hashing paper you
linked to in your last email.  But there, the exponentiations are in
Z_p, and taking n-th roots in Z_p is totally trivial.

I seem to have lost the thread of why we're doing this.  Is it just to
count how many bridges are running our ec2 / rackspace / etc. bridge
images?  Can't we just report that out of band?  Is the EC2 IP space not
known?  I must be missing something.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120505203329</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-05-05 20:33:29-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 05/05/2012 03:05 PM, Ian Goldberg wrote:
&gt; On Sat, May 05, 2012 at 01:47:45AM +0200, Ondrej Mikle wrote:
&gt;&gt; One trick I had in mind was create "secret hash function" (take the following
&gt;&gt; with a grain of salt, algebra is not my "primary thing"):
&gt;&gt;
&gt;&gt; - you keep generators g_i secret, which turns the problem from discrete-log into
&gt;&gt; a problem of finding n-th root in finite field (n is the value of the digraph,
&gt;&gt; trigraph or few characters, e.g. encoded value of 'ec2bridge', possibly
&gt;&gt; "blinded" by another multiplication with secret constant c_i)
&gt;&gt; - in general, computing n-th root is quite slow [1], but there are many special
&gt;&gt; cases like square root (quadratic residue)
&gt;&gt; - the above properties would make it slow for attacker to brute-force all
&gt;&gt; possible values - i.e. attacker can't just compute the result values of such
&gt;&gt; homomorphic hash, because he doesn't know the function parameters (e.g. without
&gt;&gt; computing the generators), but everyone can use the "homomorphic property" for
&gt;&gt; testing parts
&gt; 
&gt; It sounds like you're talking about the homomorphic hashing paper you
&gt; linked to in your last email.  But there, the exponentiations are in
&gt; Z_p, and taking n-th roots in Z_p is totally trivial.
&gt; 
&gt; I seem to have lost the thread of why we're doing this.  Is it just to
&gt; count how many bridges are running our ec2 / rackspace / etc. bridge
&gt; images?  Can't we just report that out of band?  Is the EC2 IP space not
&gt; known?  I must be missing something.

As I wrote before, the idea is over-engineered (I got a bit carried away; the
EC2 IP space is known, it was an attempt to hide nicknames not on EC2 or similar
cloud services potentially leaking information).

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120516064727</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-16 06:47:27-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt; screams, I'll provide the remaining tarballs containing original
&gt; nicknames another two weeks later.

Here we go.  These are the sanitized bridge descriptors from May 2008
including original bridge nicknames:

http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120519094122</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-19 09:41:22-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 16.05.2012 08:47:
&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt; nicknames another two weeks later.
&gt; 
&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt; including original bridge nicknames:
&gt; 
&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2
&gt; 

Here we go with the similarities of bridge and relay nicknames. While
some are sharing names, some seem to share a naming scheme and others
could be run by the same person on an adjacent IP address.

Attached you'll see "findings.txt", which contains a bridge line,
followed by a relay line, followed by a comment line.

Each should be in another line. Windows and Linux users should see the
same as LF (Linefeed) and CR are included. That might be a problem for
other files I might release as some contain LF only, which is for Linux
and will be understood by a proper notepad even on Windows. When no one
objects I'm going to release them somewhere else, so it's possible to
check my way of doing things.

I'm not good in time tracking, but spend approx. 4-5 hours on processing
the tarballs to get the lists of names for both relays and bridges.

Shortly after I agreed to do this, I downloaded the relay tarball and
started to figure out how I would get only what I needed. After I did
that I waited for the bridge tarball and did the same to it.

Simply because I know the things I did I assume that it will be possible
to do that quicker. With other tools it might be faster. I assume it
would be much faster, when processing the tarballs could be done by a
script. Unfortunately I'm not capable of doing so.

The comparison was done manually, but I'm sure a algorithm would have
found most of the similarities anyway. I took the list of bridge names
and compared it to the list of relay names. I looked for and included
exact matches and close similarities. After that there wasn't much left
to look for on the bridge list. I looked a each bridge name and guessed
what it could be. I searched the Internet on them. I may have found
something that isn't based on a naming scheme, but can be linked in
other ways.

The worst part was to put the lines together. I underestimated the time
the plain comparison would take, but copying the lines into findings.txt
took longer as I would have imagined. I'm not sure if my provided data
are the best in how I put the lines together.

The nicest part, even if it was time consuming, was to look for other
things that could link relay and bridge names together. It wasn't as
successful as I hoped, but it was fun. Maybe because I like the universe
and mythology, which may influenced the findings to a higher degree as
useful.

The last part could be done by a script as well. It would have to look
for a bridge name in a list "moons" and when it finds one, it has to
compare the list "moons" against the relay list to find a relay that's
in the "moons" list. Of course with many lists like "freedom activists".

The comparison, including copying the line together took approx. 08-10
hours. I really expected much less as I saw the relay names.

The total time spent was 12-15 hours. I assume that this can be reduced
by using scripts and or tools with are designed to do parts of the job.

This mail is getting far too long, so all I'm going to say is that I'm
looking forward to the results.

Best regards,
bastik_tor

["findings.txt" (text/plain)]

// bridge line
// relay line
// comment on why the are included or crap
000111222 DbYYYzZXHkyi/WEMI260OA0mG3g k0FtE4ZLroMUJ1KJQZlzmRpuI1s 2008-05-31 10:56:15 \
10.105.220.220 443 0 000111222 TdGDCy1m4Qc82IP0JqC0ro2KI3M \
sN/GljDnhJPSAUAEKvXPIs1KFRE 2008-05-31 11:03:22 217.98.8.46 443 9030 // same name
b0fhinukraine IMkYG6/gbSwcS2slwyCq0c5WJYU +cGsQipv2JKMe+NsJ7ievqwP9ic 2008-05-19 \
06:54:30 10.88.44.181 19001 0 b0 raWOeMmMZseG3FU+fhj8EvXAStw \
8eHYtz7p3ALnEjqwDKliMwjuClc 2008-05-29 20:11:48 89.163.144.173 9050 0 // same begin
bizdira i0JM+or4ayGZXe99Im5UNooVFvA R9jNXFZyQaCT1ZjNohC5YOdro24 2008-05-31 16:39:53 \
10.30.43.220 443 9030 bizdira JRalaVbeXhSTQrdS0SQcT4nQz3U OufYXA6p3j3A0Qol9ifpaHE7d5M \
2008-05-31 17:12:47 85.186.0.198 443 9030 // same name
BRETTSTORNODE EAjuUKRyHXfset2CQhvyKHHJ3L0 l4/hYZwNCCateCqTvOHmfGTaXbQ 2008-05-19 \
18:12:35 10.56.251.78 443 0 BRETTSTORNODE /fhMOwdlj8Tzn/EfrNl6cTU/l68 \
0h1rPobT19hcGsr/qYjknkiLqkA 2008-05-25 14:17:18 75.61.13.156 443 9030 // same name
BRETTSTORNODE UxU39wODFtrO0avFHSkmUwQG/m0 7jV4TMYUQ8OgIQO5zXVV9+JheXY 2008-05-19 \
17:56:14 10.134.201.236 443 0 BRETTSTORNODE GqT/BD29CdRb8TtkwMfpPpXs7ic \
deOQ0Qvw+t0i4bc6fHO2GPTEQcI 2008-05-04 20:44:32 66.142.232.219 443 9030 // same name
BRETTSTORNODE EAjuUKRyHXfset2CQhvyKHHJ3L0 l4/hYZwNCCateCqTvOHmfGTaXbQ 2008-05-19 \
18:12:35 10.56.251.78 443 0 BRETTSTORNODE Sn6IFSrEd9TjQXM3PVMV/6wgtZU \
0dLSm3kiYwsa4NxD34h3qQRJujo 2008-05-15 19:00:05 70.230.253.218 443 9030 // same name
BRETTSTORNODE UxU39wODFtrO0avFHSkmUwQG/m0 7jV4TMYUQ8OgIQO5zXVV9+JheXY 2008-05-19 \
17:56:14 10.134.201.236 443 0 BRETTSTORNODE Sn6IFSrEd9TjQXM3PVMV/6wgtZU \
0dLSm3kiYwsa4NxD34h3qQRJujo 2008-05-15 19:00:05 70.230.253.218 443 9030 // same name; \
I would scan all of them; the relay IPs are spread, but maybe bridges are "nearby" \
caccabau 3ZDYlF1fEGpxoNRzWzhBe/LOMqo JhhzvVy/7Zc79z9FXp/OAUjHj/Y 2008-05-29 21:59:57 \
10.164.171.252 80 0 caccabau icAYqMV5buaWhg5woEsHot3Jfu4 gHLGqHeh+JDt5K+ZAgE81KCobWU \
2008-05-29 21:30:06 151.77.127.117 443 9030 // same name
carlos O4+S2P86Dcs2/pG9UuWeE3/hby0 691PW30tkvj4XsTES0EHJGMnyXo 2008-05-28 07:07:08 \
10.146.163.39 9001 0 carlos obEVDS4hN1CWhbUu4piQ/FLOLr4 4c8wXSt2REX1/J+f12MxP5aOtPQ \
2008-05-28 07:52:30 189.24.4.71 9001 0 // same name; repeated with different IPs; \
included only that from the same date; looks like a test cypherpunk \
Unt3TEcS/rz6WXNxZHQkMcPtXQM 2bkMBQpb4HmSC+SHmthTQVVRrc8 2008-05-18 16:06:29 \
10.192.113.121 9001 0 cyberphunk 4oV4MAaxtxk7KWpchYuV/YVWamA \
/3jKj1XeTFtLEhqyeBFaWB+bmf0 2008-05-19 07:38:19 85.31.187.212 9001 9030 // close to \
each other dejitaru VIOZpGIivTOQ0Y38pc3c/JbBZyI CN09JlpmyrwpzFvZmfG0tN2Mh1A \
2008-05-27 17:59:25 10.88.5.91 443 0 dejitaru JqFZyEAGX2Gv+J7t9Y9zLjc8HPE \
0SUgAU6ipDvxioc/rtziamn1vgk 2008-05-30 13:10:09 24.129.17.163 443 0 // same name
enigma 9V4glfQlqyw7EW43svzTosoTGJg WmkP2Mw+VaOU0amLxV1MASYTCas 2008-05-19 02:55:39 \
10.193.96.172 443 0 enigma SovBDOXd8Fo+B47+VKqynK6QT90 /AMNYGZTD3UvLWjMvjNWbaIV2tI \
2008-05-05 05:54:51 87.104.5.150 443 9030 // same name
enigma osjxxV8Tti7DZafTXY0kX++fdKg /QJ+Foke8OOIuSdk0cwZzCyvHDU 2008-05-31 21:22:18 \
10.247.154.7 443 0 enigma SovBDOXd8Fo+B47+VKqynK6QT90 /AMNYGZTD3UvLWjMvjNWbaIV2tI \
2008-05-05 05:54:51 87.104.5.150 443 9030 // same name
enigma 9V4glfQlqyw7EW43svzTosoTGJg WmkP2Mw+VaOU0amLxV1MASYTCas 2008-05-19 02:55:39 \
10.193.96.172 443 0 ENIGMA oCPVTtLVe9i2EHXTV1RISaDk+RU j27LyKiXmVgG3XX6Bce5/5CpEe0 \
2008-05-15 20:10:03 91.192.167.102 443 9030 // case
enigma osjxxV8Tti7DZafTXY0kX++fdKg /QJ+Foke8OOIuSdk0cwZzCyvHDU 2008-05-31 21:22:18 \
10.247.154.7 443 0 ENIGMA oCPVTtLVe9i2EHXTV1RISaDk+RU j27LyKiXmVgG3XX6Bce5/5CpEe0 \
2008-05-15 20:10:03 91.192.167.102 443 9030 // case
entscheubler2 jX07H8RG6vXhleIILnUqUA0QKsQ +scmF5J4bV9D/V+3/daGf8kkfj4 2008-05-24 \
22:12:38 10.66.9.192 9002 0 Entschaeubler 1oviNd8ABf22isYT++uhW1+RqH0 \
FmV2jIXDB+IPscukktNyac1gGGM 2008-05-22 21:38:10 77.188.215.2 9001 0 // close
entscheubler2 jX07H8RG6vXhleIILnUqUA0QKsQ +scmF5J4bV9D/V+3/daGf8kkfj4 2008-05-24 \
22:12:38 10.66.9.192 9002 0 Entschaeubler 1oviNd8ABf22isYT++uhW1+RqH0 \
wezqS/lmwtFQXVOmP89PcIgxtnA 2008-05-17 06:39:01 77.188.175.105 9001 9030 // close
Fake oB+ud5o/pj9zVcR1baJ1khxjhR0 SMe3I24H8kINu6+C0Vn+ji+8Yu4 2008-05-28 18:06:48 \
10.247.165.191 443 9030 Fake mLF4sxdGoohdfPe8pexJkl5CF7g QwKa5/UtgRXXXg5OZRM2bf45sxo \
2008-05-28 18:07:22 81.167.202.20 443 9030 // same name
Furytear GIDwADG7lAZLoT3kXJN8YttrHmc 1EjGfm2AQotEJbmx/KY4M1rAzq4 2008-05-24 02:20:19 \
10.45.22.48 236 0 Furytear jEB3B+BnTZBqtfp6Tqe54m1Vlg4 2kbNnZK9pvme0OLx6GF6XsSw1QM \
2008-05-04 19:44:50 68.60.183.192 236 9030 // same name
gromeo 1R16GthOOJrrK3AwRKcueksgS1E FDtRZ6lt338hcS3FjmBsajyCUXY 2008-05-17 21:50:38 \
10.151.216.16 443 9030 gromeo tovPMHEr+gOltlx6XOxnlakFDJU MAae3Qb8upfkkIDN2gMBx0WJX60 \
2008-05-17 21:33:14 77.70.68.145 443 9030 // same name, looks like a test
home drFLZ2mbeEytppKpJoNKRHiZBfY 3fY50xhKlE0cYSyQdZbHpwDP7vQ 2008-05-17 07:24:42 \
10.247.73.184 443 0 home yX80qvzdCwurlIqclnTpo4NX3C0 mdOWimhRjTvrty7niyn3YL8TfC4 \
2008-05-22 12:40:51 92.227.19.90 9001 0 // same name, relay with stable IP, bridge \
not, I never carred about that, including them home drFLZ2mbeEytppKpJoNKRHiZBfY \
3fY50xhKlE0cYSyQdZbHpwDP7vQ 2008-05-17 07:24:42 10.247.73.184 443 0 home04f0186cc8 \
Or5ZlOr6mlUgGBxuuAwH6ILqlPE O4wzsfr1YGi5tjpy5J5sobiZbCA 2008-05-14 16:52:36 \
89.165.69.23 9001 0 // close?, not really, false alarm
homer ut3xL3ZkV4xhFE2EwUoB0djfOCo /q12alUiP2maNo1C4azRN/ZeDfY 2008-05-30 01:09:23 \
10.205.207.137 9001 0 homer rsm0B6uHdMmnCnzvG3J21g5jLys 1jopqve9F48WUuRkFC1cSi8Xwoc \
2008-05-31 14:39:31 84.244.189.19 9001 0 // same name, looks stable
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 iddteitecnfg333121 HFwzxTurDQA5i0H8jSLwApxVbv4 \
xpMRTTTHtnSW/+2t4XJqmca/c3s 2008-04-30 20:45:04 90.146.195.22 9001 0 // appears to \
have something, maybe it's just me ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 ididntediconfig \
6RhPwakD/0WJMEsO2801vvFfG3I +Sk8KAuzBwpQMRjvAmpeNKg5F5I 2008-05-10 03:03:15 \
89.27.211.191 443 0 // somewhat close, right?
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididconfigureit ShRMnaLHt1tHD1NkMA5AHuulXhE \
/WKz6lI0SoS3Hbek/0t8cwbe9gE 2008-05-04 11:17:17 76.1.244.12 9001 0 // could be one \
solid naming scheme ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididediconfigtphhhh KQVPQuW3BGUPmdy2rC5z0ZO+6hQ 001fAP3r5B4A0RglRYZXtuhH3Lw \
2008-05-23 16:01:44 71.43.196.173 9001 0 // "I didn't" could be common
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 idideditheconfig +FjCRqL/S9k8fkllZFdkWDxQHQY \
+8ZCt0z6v0CbKCt4cfO8TU1lud8 2008-05-10 16:52:24 78.52.132.111 9001 0 // could all be \
accident ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk \
2008-05-29 05:25:06 10.51.175.120 9001 0 idideditheconfig AEMsAoTbQkCS4gNDYECg+JTv0JQ \
167YJ4Bg/XpOgXdkYnlk1MoFfLk 2008-05-09 17:41:15 87.123.81.104 9001 0 // other IP \
range ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk \
2008-05-29 05:25:06 10.51.175.120 9001 0 iDIDeditheconfig hqQqX9lxkxlyFLfhor4faVqBvbQ \
0UIKTgE8VgC7IDiF2wqaGJCCMxs 2008-05-04 12:26:44 207.172.90.28 7009 0 // who knows
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 idideditheconfig249 sRN+91G4RnIASJnZusuoW7kvAiM \
0bKoGMiXl79gCQ1NQXRqPo1t8RE 2008-05-04 05:03:24 82.6.101.217 9001 0 // I did and I \
didn't, don't know. ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 idideditit \
qcNOQp2rYeHGK723IrMTlU0xsaQ gP8Iin6OfrBqyh91z3eSSGetnQA 2008-05-28 15:58:30 \
212.202.35.120 59001 0 // yes you edit it
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididedittheconfig ywGdVZLPpOV6UfzN5hcK5FENK0Y \
++LBGQrkGQrQ9w6hgnIjiowYG+Y 2008-05-30 21:04:12 74.166.30.140 8500 0 // you probably \
guess it ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk \
2008-05-29 05:25:06 10.51.175.120 9001 0 ididnt nKFiTrkWknidTc6e/BtRZwpTh8A \
N/qR3XEutgXqqQAreywnpEuEi9o 2008-05-19 00:32:03 24.147.203.84 9001 9030 // wild guess
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnt3dith3config 0ouf+FWRExK3r42ifyFEW02intE \
TbiiTNJHO1bwauypkyU4TB4BXEI 2008-05-25 21:47:53 92.114.190.74 9001 0 // no that isn't \
similar the second contains numbers ;) ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 ididntdoit \
bH5ae6Wcsm3Bbs/P7tYmB4VuUms FDODy2ZleAqsMXWIVD28GOtkjaM 2008-05-18 19:08:11 \
24.147.203.84 9001 0 // Simpsons or similar?
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig /AT4FsvIrazqItkK+RscQzLp3mY \
/wE9JeKM9X0haVxqYoEwrfcUhf0 2008-05-25 10:50:48 219.153.203.81 9001 0 // exact match
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig /AT4FsvIrazqItkK+RscQzLp3mY \
9uCRi2Skv6yTE1H4b7RMjHzRqAM 2008-05-27 14:06:42 222.183.170.82 9001 0 // exact match, \
different IP ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididnteditheconfig 39LsbhRsjp+kLU2Ar+RJgUv3sIs /nWGRFgz14AaYy5HcJbqSvxrWFc 2008-05-07 \
08:33:14 72.44.48.202 9001 0 // a stable naming scheme, exact match, different IP
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig 4glwYDuhxg5GLAS890OCUf9WHmc \
4JYljfawK2oC0hepzFux/5qJudQ 2008-05-08 17:52:28 121.32.20.196 9001 0 // rock solid \
scheme and only one bridge that might be in there ididnteditheconfig \
RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 \
10.51.175.120 9001 0 ididnteditheconfig 4glwYDuhxg5GLAS890OCUf9WHmc \
9GgHKjASiXZWdm/E/2Mc4EBVA1E 2008-05-21 14:01:11 116.22.51.3 9001 0 // so many of them
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig 4glwYDuhxg5GLAS890OCUf9WHmc \
aZhuvabJxMUiMmDYHhWrqj7lNnY 2008-05-09 18:27:03 58.63.36.117 9001 0 // and so many \
different IPs ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididnteditheconfig 4glwYDuhxg5GLAS890OCUf9WHmc c0vjSDr/7VaZBI6H9/BQB+TTlJ0 2008-05-04 \
14:10:06 61.140.101.173 9001 0 // I guess, just name is repeated over and over again, \
but the bridge is located anywhere ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididnteditheconfig 4glwYDuhxg5GLAS890OCUf9WHmc HGAEdVXpQgpshsTGbayRgR/giuw 2008-05-09 \
08:11:35 58.63.36.117 9001 0 // so far so good
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig 9VTlTxIDcFLczNsJKZx/XRSIUMo \
WVPkR7wAD7DDYv7l/jLWvRvrCPQ 2008-05-25 19:54:38 84.249.34.89 9921 0 // or so worse
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig b9gVbH5/VW7X78xEmGBfLY4hTck \
gKXgTBpbnqTk32Rcxebyi+t72aI 2008-05-28 14:29:17 125.82.137.212 9001 0 // scanning the \
whole IPv4 space ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididnteditheconfig h8VOaEvcchjoMbwVifllyJZ+U+A 0jFX+Gii16grmhuiY3R0m2Tc2yk 2008-05-19 \
11:56:43 62.169.225.127 9001 0 // OK
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig HU/AKsix109Wxizm3ufkgCXhbsU \
/VCMygDXeOVf4jk75a7dUGYwQ6s 2008-05-04 05:37:26 68.61.156.176 443 80 // and that's \
just brigde to find ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM \
1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 05:25:06 10.51.175.120 9001 0 \
ididnteditheconfig IN4ivRSkZ75RFz87aL3cAteJ4JU +ly66RcrAfYshD1ywwNvFj0TXkY 2008-05-27 \
20:46:59 85.176.228.111 9001 0 // relay IPs are not located nearby
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig IN4ivRSkZ75RFz87aL3cAteJ4JU \
5NWRkw+ygy5hkmo1ouGEaKJC0pc 2008-05-28 13:13:14 92.229.220.152 9001 0 // how many are \
out there? ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk \
2008-05-29 05:25:06 10.51.175.120 9001 0 ididnteditheconfig \
iWrVMlcpQ8W1TlUS9KATzhWa7Sw 501FZ+mXrz6uXYqEzrQrpMTWXNs 2008-05-08 04:00:57 \
87.230.6.32 9001 0 // I guess I missed some, I may lost track
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididnteditheconfig lQQaPzP/Dc5EAIJix7gRaYl5WQo \
+LlW/7CtKmkqMR+igo/XSU/+ZlI 2008-05-09 07:30:03 77.126.203.163 9001 9030 // That's \
enough... I don't know if that's worth it from an adversary perspective \
ididnteditheconfig RWH5Mr4vL5a4XS3xD7651WjnvLM 1CHhxlwMgp/Gnufsx9PaEQwuPLk 2008-05-29 \
05:25:06 10.51.175.120 9001 0 ididntelitheconfig ivgHSZ5R0X+Vbcjhi3faNyjmwao \
OfiocWcu17VDrOceQOwqDtGFRxw 2008-05-21 21:05:00 70.135.17.43 9001 0 // close enough
ignisfire TOkuvkl9PdEoO6s3GbA4PZeQuMM UG/hUOTGilJOz/rpteuolyOs6J8 2008-05-19 14:41:33 \
10.160.115.181 443 9030 ignisfire 2webITOrXAmNDuq7vynM6dOS11Q \
9X7e1cJsp8yOWRY+D5kQlQIf+Rk 2008-05-19 15:38:16 151.33.84.31 443 9030 // same name
Ignisfire gmW0pJ8h0Zzz5YaCwkaUKCBymjg Y25IOvBd0SOUTanyJzRmvO1oceQ 2008-05-20 21:03:54 \
10.109.127.100 443 0 Ignisfire 8DYosEaQ8aj2WoL+wsPMWTlVrgk \
dsn5WM0lVD5EoXDnx4ldgSDKExY 2008-05-19 16:49:08 151.33.84.31 443 0 // same name
iseeipaddresses 7KDECYq/a5CCzLYGnYKh0wtFgWg 7MKHsuHPGHeaPlWzZycR0gyAzDc 2008-05-31 \
05:36:13 10.137.212.47 9001 9030 iseeipaddresses P2FDMcRZOOMt1dJyEzWGMfppFXw \
InB85ibD3reNojKieWsAzRzHQDY 2008-05-31 05:45:13 72.155.162.157 9001 9030 // looks \
like a test Lurkov JbqrAHpt8rJWLuVCqnm60O2IqJQ GCk4Z9vxvgSWDECqAIHxpeap0f8 2008-05-18 \
06:41:58 10.209.19.129 9001 9030 Lurkov JGgwJPPbk/fs8AIHSSSlr9UBCNo \
0J+rn1dy+e6nP5fnBstPK9QbqpU 2008-05-19 14:27:42 221.219.191.43 9001 9030 // same name
mfr Lrr/frpkzP9Ow4lSCiJnYVgORKU K3qDPGVzrORlFFtExvup/P77Odg 2008-05-26 06:32:04 \
10.195.46.58 9001 9030 mfr Z2KrJlfsXYm+P8RLgmBRZhIZZSo bIR3HeByhGpzAEzMB9KNpOvr5oo \
2008-05-26 16:16:52 92.243.5.105 9001 9030 // same name
NanashiSan Y/PadgInIeW5ZBNivD+ZUq2fTQg 2ACgAMyKnLUc1YPHIpBtBmcZ4v4 2008-05-24 \
09:15:40 10.217.57.39 22774 0 NanashiSan 6wMm6vTuPU4Ybrl98tGONyay978 \
zUJ2UnOkx9fc06wYwvTKYrLBo5Y 2008-05-24 15:33:10 123.227.158.39 27743 23774 // same \
name nobody g4/WlcQY19k/2d6iXmumT288Mns 3MSaHC4dGi1TRvJmDpzGB2sMqdc 2008-05-31 \
09:37:33 10.3.112.251 443 0 nobody d6y4xrfuHYN7CUDNpMNmSN+wKXY \
djzG/GMuBLe6Vah+kb6C2rMU5bY 2008-05-31 09:58:13 77.70.68.145 443 9030 // same name, \
but anybody is nobody NoHarm IVc0Sa2j6hBTjCCEPMZTBJUkUPA 2Yguf3pFQ1bR/A2iX9usm5ukeHY \
2008-05-19 13:16:59 10.141.2.152 443 0 NoHarm JJh4B5lcdpoADNHQ1bSz44ytzEc \
TvBCjQ6xEtFTkfnhLrcWHKOhmBY 2008-05-14 08:04:11 83.249.73.43 443 9030 // same name
Pluto m0ZtFHVXStckR93u7R1r20wo45k eWpkdgDTV6ArNeqFM0Cm42HUX/U 2008-05-31 06:33:13 \
10.23.136.248 443 9030 Pluto E9q4XHyznQ0+rDl382AKOuywqms n/y3JttUhr8kO/LrWENgU06a3cg \
2008-05-30 05:33:43 213.22.34.228 443 9030 // same name
PooRNooB nv1GjJCNCWTYd/gXg9/8tpauWNM HIp5FDT5UJ1j3zPYxEuKdYpv3Js 2008-05-21 07:50:13 \
10.88.52.48 443 0 PooRNooB 8eiAC6ghgaB3/VsorNmtxgriBp4 ay6JOTNKfIrRkOZTmjHorlRo5JE \
2008-05-21 08:44:56 201.58.23.127 443 9030 // same name
pr0b3y7h32nd aHgCbpYET9gk5QOqj3TpsK1mp/8 5wtaxJf3+UWl7/sewaWMIblAUe0 2008-05-16 \
13:43:41 10.35.1.7 443 65530 pr0b3y7h32nd oG6lOPEUJBpIsbxST4+55qoUym4 \
5a2zSCrWQWVZda8an2IAn8XDWDg 2008-05-17 04:49:57 68.227.168.162 443 65530 // same name
relay123 YPQsFAVKb5o+qILNz9/CwrAB3dA 6sKbCRhAdcVTxO1hXT9xarIsJG4 2008-05-22 08:23:15 \
10.128.53.226 443 9030 relay123 X54vO+WWu2sNX63bMVnUvFRgR3Q \
29zWenmt2iALuHB14fg99/gApOE 2008-05-21 04:13:14 80.222.240.155 443 9030 // same name
RouterX S0bpWkjPRq306X7KwdDr030OYJY +QHI4b5JhmfwQA5QH7A7/Pkna5g 2008-05-28 07:06:12 \
10.52.109.109 9001 0 RouterX 25XCtl84ARgo1T/nN92eNZtlC7E CaTzOfN9FmvhR6rUufksUEXDt78 \
2008-05-29 05:56:24 68.40.6.83 9001 0 // same name
sebekxp igk06QpyZ04QHGQFP4svxueeVWo +G8rqTSc12W/POZi706uYGAHIkA 2008-05-30 11:31:34 \
10.142.35.42 443 0 sebekxp f6kydY9wVpZpPwGCfK5nfNlzXo4 3bfC9amDLBcNoLvezB6oCHF+b18 \
2008-05-29 10:17:29 79.163.48.20 443 9030 // same name
sebekxp igk06QpyZ04QHGQFP4svxueeVWo +G8rqTSc12W/POZi706uYGAHIkA 2008-05-30 11:31:34 \
10.142.35.42 443 0 sebekxp f6kydY9wVpZpPwGCfK5nfNlzXo4 lJAb5iL+9ZRZ8aqMcGD4cjqU7lU \
2008-05-28 22:01:32 79.163.14.241 443 9030 // same name
StonedToad 7ljIZ2cwIz7Qq/KmRs4pcrWHoa0 McU483yfIZkEofagQ6XNFpDwPiI 2008-05-28 \
23:32:10 10.134.119.55 443 9030 StonedToad cCoES6RSrSgLUNHwh1jYL+5baFc \
bEUfYwHfNsK/+tDVJrQ3eIvhOt8 2008-05-28 23:25:07 76.125.106.24 443 9030 // same name \
// I decided to leave "tor" out TorKServer FYjXtRRUrKMr5Qc7Wlx64Sr4+fw \
y3jlJ2vsz3S+hnTfaMU8b/E0Cy4 2008-05-20 01:01:35 10.191.69.236 8081 9030 TorKServer \
0i2uMiTMVgcgNsv2Kz4CP8Yd1cQ fEky+v2nFHGAEaBPuT1+8YlLxpw 2008-05-20 21:54:25 \
89.102.79.197 9001 9030 // same name, up on the same day, I did not care about that
TorKServer FYjXtRRUrKMr5Qc7Wlx64Sr4+fw y3jlJ2vsz3S+hnTfaMU8b/E0Cy4 2008-05-20 \
01:01:35 10.191.69.236 8081 9030 TorKServer /bAucfbr39sYGj0C8x864DYB95Q \
H7u2cM30MZqUTPKSnvYI3d1Ce58 2008-05-11 15:43:44 68.245.116.144 9001 9030 // same name
TorKServer FYjXtRRUrKMr5Qc7Wlx64Sr4+fw y3jlJ2vsz3S+hnTfaMU8b/E0Cy4 2008-05-20 \
01:01:35 10.191.69.236 8081 9030 TorKServer2424 P7FpD+jWYdhh0glIJiOEvAwImuU \
hMeVyhPu+QXKyoizHa7lFdX42aQ 2008-05-12 10:48:48 212.41.242.231 9001 9030 // maybe
Vigilanty SJCuQLfP7YsQq54d73Kz7Zz/in4 +GK/6Mu6RBWzYU/FDdovndUY128 2008-05-19 19:08:32 \
10.21.229.19 443 0 Vigilanty VQHNBlk5oROzQanlG9fUtO8MaXM 1TBk8W/gMGB7EpWCrqp+0GxfKhc \
2008-05-13 20:45:19 76.178.30.198 443 9030 // same name
willOtheWisp 403K1sw4I5EpE2FnNcQHxhyR6Mg 6yi31nNgxTjox2FcMUCGSWoCg4Q 2008-05-17 \
03:48:41 10.39.216.181 443 0 willOtheWisp rNoTPn3HnMkwavdGBajS89lQSQM \
/EJHSlnrpGaGc21EhLn9+L9WwTs 2008-05-17 16:10:52 77.12.24.105 443 0 // same name
LittleHelper boy9wrm9FZcP8dWNVh8Een7aPSQ +x9hK/+7P3epmuCPOrRxAHL3Bdw 2008-05-22 \
16:01:38 10.221.246.206 443 0 santa R07GkPHDWF96NAFO/KMbkByWhKU \
aUOtHd02E5kf3bw0Czs5b8EKtUI 2008-05-17 12:25:55 24.46.205.89 9001 0 // Santa's Little \
Helper, helper is unstable unknownzero 0nFuUJsBMj7cNi/CoIKlWrRVBnk \
gjCaD3K1zun4Tkk4Bgr8YCgLcYE 2008-05-17 00:30:36 10.67.35.218 443 9030 0day \
2csgkW6V/LCUKI87LpGgjrDW3i4 5vIt5fjyxZW53li8ReRF0Jwi4js 2008-05-17 15:19:21 \
213.216.230.217 443 80 // a zero day (0day) is unknown
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 0 Phobos ZODTfrTovydIZJz/LLwCLrpPJ90 PLyvE2QkXvebSNGV9MNa/TBZCEI \
2008-05-01 08:35:31 82.95.193.137 9001 9030 // both are moons, couldn't find a \
mythological similarity in the first place pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM \
deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 10.146.76.25 8080 0 phobos2 \
/Ay8M9ptUO5Ief9axKiFnCGtW2U 01/N1rjcjU6WVSbp+hGdvmGyD04 2008-05-29 18:21:57 \
72.93.74.159 8443 0 // both are moons
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 0 io XITazLgww5jkxZYLIhV3xv+7s40 NMJt+NDp2iA5edllBHi/ke74Ieo \
2008-05-20 15:25:57 88.198.47.72 9001 0 // both are moons
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 Hyperion 9LudBOA0ftJatlDj4z5cFGFs1No 4wan9YZnV42bN19OlkA+hs4wVHQ \
2008-05-23 21:53:04 78.12.86.77 9001 0 // both are moons, included only one IP
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 janus XWYF4a9pMXpRc5rcRSzlTibLKn4 2rGjz+wmvVPAf9thzx1BzFTbWGE \
2008-05-16 09:47:56 88.134.218.238 443 0 // both are moons
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 janus XWYF4a9pMXpRc5rcRSzlTibLKn4 E0LJDeNcSsB0h0tunXyZ0Cs9YgI \
2008-05-22 14:38:12 91.66.120.54 443 0 // moons, Janus the two-faced roman god, \
different IP pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk \
2008-05-19 08:19:12 10.146.76.25 8080 Janus3 Jv5N881yKX/PpNl28gxZQ4hmX1Y \
/LVxfBBqApYuxhmhnltYy7U422U 2008-05-04 08:17:50 72.9.100.205 17401 0 // the moon and \
myths, might be me pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk \
2008-05-19 08:19:12 10.146.76.25 8080 pan ejwCZXUrfrL+PoSogcOnE95X6zQ \
TYyRTHkGPcSJUqSFj2xP21o/ffg 2008-05-09 22:31:26 70.245.224.123 9001 0 // it's a moon, \
same IP every time it was up pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM \
deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 10.146.76.25 8080 Prometheus \
eN4+pXzW7g8EKhIjw6b+dYqb/XA 3sMIFTQ1TsZycOS72T59ImA1s2M 2008-05-25 17:12:37 \
66.67.227.194 9001 0 // It's a moon. And Prometheus stole the fire from the gods and \
brought it to mankind. pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM \
deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 10.146.76.25 8080 Caliban \
by4kc/JCOhcFia+o2i4hCs7AXPc 41AwULtZfGUppyV900CoImA2ElM 2008-05-19 14:46:49 \
96.238.212.78 9001 0 // A moon and metal band, maybe other meanings I remember \
theater or something (could be wrong) pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM \
deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 10.146.76.25 8080 cordelia \
jAXftDaJO0OyGPGO5mq2M484DWk Wp572VVl2EkTMmfgVjBJYkUiMwI 2008-05-04 11:27:57 \
81.1.107.172 443 0 // A moon
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 daedalus EA6tiZFrDwa+YLjVRrUwiSBTFNg 69r8Gtfwm90SHGxIWQz1pKzeph4 \
2008-05-19 23:36:18 84.157.160.218 9001 9030 // greek mythology, moon crater and \
asteroid. I know a band with that name. Tons of meanings I guess. pasiphae \
37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 Desdemona um/oM0ErTxczyJ2qnhVej59tlMI Hgy5k3XCFksNi3tivzj2Q7/scyw \
2008-05-07 22:50:28 217.202.6.150 443 9030 // a moon
pasiphae 37z0s7Y93JQa+KTiohqVf+mrzLM deeJWLg/IezJNGRQ3yuCr/eRMtk 2008-05-19 08:19:12 \
10.146.76.25 8080 Desdemona um/oM0ErTxczyJ2qnhVej59tlMI sNyq4Vm1i+r6WlFUZQRPvYeqKR4 \
2008-05-04 21:20:58 217.201.135.177 443 9030 // same moon, different IP
// End of assumptions
// Witch hunting or resource burning mode
torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ /Y1s5A03YznPmNMffTgC77n8LrQ 2008-05-30 14:15:47 \
10.110.167.127 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
/YZUWfWDkgFX+6auP3+pu1EkpAA 2008-05-29 15:10:50 10.251.237.46 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ 0GvSGsro4OzPPBJDYujaCnTAAzs 2008-05-26 01:10:48 \
10.156.116.40 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
6AMt5HDwan8cwusDBUw0h/sG5QI 2008-05-22 23:10:26 10.81.175.227 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ 72tVeJFZysz2UAgYPOUmuWWJOYM 2008-05-28 01:10:50 \
10.205.58.127 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
8RicAnjJlNojpQGVkUuN8sbSFog 2008-05-28 12:26:13 10.2.44.114 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ 8xal5rnwVd1GADX3I/U7WtMP7pc 2008-05-21 01:10:50 \
10.76.177.5 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ 9C64zC5YjlhNnBuWNTAJUgp6exs \
2008-05-24 12:26:14 10.94.17.7 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
9oJmHuKBkrHnCF0g8xAjY+YiaXg 2008-05-21 23:17:45 10.29.250.71 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ dpCDe6PVlNIc2p43h+Op0W75ImA 2008-05-17 21:56:16 \
10.161.216.189 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
eorCK9S2GUzXgQFOq65kw7VZHwI 2008-05-31 01:10:46 10.106.91.83 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ EYcAor7J8UwxqFwoz1JawkorD1g 2008-05-29 12:29:31 \
10.57.136.5 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ H5AQmwkEyz1Zff8pM8/IHZO+HeQ \
2008-05-18 12:45:37 10.149.149.32 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
HD4Mh0pu8aLhAWW0nEj+hL9B2PA 2008-05-20 01:10:41 10.190.213.221 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ Hz4OYC6iyadp6pCYR3Cp+gYXMgY 2008-05-21 15:46:13 \
10.158.213.69 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
I2C9P0P6ze6WLxzDuV7dcq4Dg3I 2008-05-27 01:10:53 10.154.108.6 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ Lmr+4fREGXJVP43IqQaNjhgRyuA 2008-05-31 15:16:53 \
10.124.2.53 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ Pm75uUnerS11XzQXnh7bHKnJSI8 \
2008-05-25 01:25:39 10.152.14.231 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ \
r62WFENJLlNtVz7sdnWvP/uhnyY 2008-05-18 00:42:52 10.194.51.207 13666 0 torayama \
u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ SCwfMJVS0fIOtt0mJrNZAU7hvjw 2008-05-16 19:11:29 \
10.70.148.69 13666 0 torayama u6mQ/oCkrIDrj/dGqcgY7Yb5sLQ tirMsMIWk7kKMsKTpFXZoQwCZFc \
2008-05-19 12:44:17 10.78.94.194 13666 0 // the relay torayama lives in the \
91.124.xxx.xxx. space torayama LQELBdR/9+GmrzSM92g7PQZ34L0 \
+2qnJ+L1nYDd9PPHIHKHyhqhCFE 2008-05-02 01:10:33 91.124.131.53 13666 0 // I couldn't \
see them up on the same date // I see that 91.124. is stable for the relay
// On the bridge it isn't
// "Ididn't"... might be close, but here I see nothing to gain
// I included it anyway, to show that I hadn't missed it
// Well scanning the relay's IP space wouldn't hurt
// End of resource burning mode



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120521090547</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-21 09:05:47-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/19/12 11:41 AM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; Karsten Loesing, 16.05.2012 08:47:
&gt;&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt;&gt; nicknames another two weeks later.
&gt;&gt;
&gt;&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt;&gt; including original bridge nicknames:
&gt;&gt;
&gt;&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2
&gt;&gt;
&gt; 
&gt; Here we go with the similarities of bridge and relay nicknames.

Thanks for spending this much time on the analysis!

Here's what I did with your findings.txt:

- extract unique fingerprint pairs of relays and bridges that you found
as having similar nicknames,

- look through descriptor archives to see if relay and bridge were
running in the same /24 at any time in May 2008, and

- determine the absolute and relative number of bridges in a given
network status that could have been located via nickname similarity.

Results are that 24 of your 81 guesses (30%) were correct in the sense
that a bridge was at least once running in the same /24 as the relay
with similar nickname.  At any time in May 2008, you'd have located
between 1 and 6 bridges (2.5% to 18%) with 3 bridges (10%) in the mean
via nickname similarity.

I think it's acceptable to publish more recent bridge descriptors with
nicknames in a week from now.  Results may look quite different with
1000 bridges instead of 30.

Again, thanks for running this analysis!  Maybe you're interested in
automating your comparison and re-running it for a 2012 tarball?

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120521183831</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-21 18:38:31-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 21.05.2012 11:05:
&gt;&gt;
&gt;&gt; Here we go with the similarities of bridge and relay nicknames.
&gt;
&gt; Thanks for spending this much time on the analysis!

I could have done far worse, but also a lot better in terms of time
spend on extracting the data that I wanted or at least considered that
they'd might be useful.

Sometimes I'm just slow at things, e.g. writing this reply.

&gt; Here's what I did with your findings.txt:
&gt;
&gt; - extract unique fingerprint pairs of relays and bridges that you found
&gt; as having similar nicknames,
&gt;
&gt; - look through descriptor archives to see if relay and bridge were
&gt; running in the same /24 at any time in May 2008, and
&gt;
&gt; - determine the absolute and relative number of bridges in a given
&gt; network status that could have been located via nickname similarity.
&gt;
&gt; Results are that 24 of your 81 guesses (30%) were correct in the sense
&gt; that a bridge was at least once running in the same /24 as the relay
&gt; with similar nickname.  At any time in May 2008, you'd have located
&gt; between 1 and 6 bridges (2.5% to 18%) with 3 bridges (10%) in the mean
&gt; via nickname similarity.

Not too bad.

&gt; I think it's acceptable to publish more recent bridge descriptors with
&gt; nicknames in a week from now.  Results may look quite different with
&gt; 1000 bridges instead of 30.

May 2008 was the first month with bridges. I expected lot's of relay
operators that tested a bridge with the same name. Things may have
changed over time. I assume that further comparisons won't have such a
"high" hit ratio.

&gt; Again, thanks for running this analysis!  Maybe you're interested in
&gt; automating your comparison and re-running it for a 2012 tarball?

My claim was you got the data, so you can check. (Not with May 2008)

To be honest, my first impression was that I wouldn't do anything useful
and did not intend to do that. I guessed it wouldn't turn out that it
doesn't hurt since at least 2011, so I wouldn't find anything good.

Then you asked and I agreed, but already thought "I couldn't keep my
mouth shut!". I mean I replied to this topic. I surely could have said
no there. I didn't.

After and while I was doing what I did. I would have said no to the
question if I'm going to do this again. That's valid for up to Sunday
night. Today I'm agreeing again.

That's a pretty long way to say: Yes!

Thank you,it's an 2012 tarball. The number of bridges is scary.

I'm going to upload some files somewhere and explain what I did. Step by
step (somewhat around that). So anyone can check and reproduce what I
did. It would be nice to hear feedback and ways to improve the way I did
what I did.

Maybe you can tell me if the findings.txt was alright.

Unless one objects or you disagree I'm going to upload the files I
created and explain how and maybe I can say even why.

I created a Blog, just because I wanted it some when in the past, but
found it silly. That's the channel I planed to use. Maybe it's OK to put
it on a Tor-List as well, but maybe it's considered as noise.

&gt; Thanks,
&gt; Karsten

Thank you,
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604174300</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-06-04 17:43:00-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing:
&gt; On 5/16/12 8:47 AM, Karsten Loesing wrote:
&gt;&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt;&gt; nicknames another two weeks later.
&gt;&gt;
&gt;&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt;&gt; including original bridge nicknames:
&gt;&gt;
&gt;&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2
&gt; 
&gt; And now, two weeks later, here are the sanitized bridge descriptors
&gt; containing nicknames:
&gt; 
&gt; https://metrics.torproject.org/data.html#bridgedesc
&gt; 
&gt; Best,
&gt; Karsten

Here are my findings for the tarballs of March 2012. I could pick freely
from any 2012 tarball. I picked March 2012 because it contained the
"bridge peak" and the relays seemed stable.

I changed the format of the file to save some bandwidth, for instance
there are no comments, beside the first two, there are no dates or IP
addresses.

Karsten does not require a human readable format and suggested that I
give him a two column file with fingerprints only. I'd be fine with
that. However I wanted to include the nicknames I found, to make it
easier to read for others.

The format is now:
1234maxTOR JaEXbhlA3DGQObgodXayY1G90LA
1234maxTOR w7Fd36WDWPMwDeIyg90iFl8Q5Zg
where the first line is the bridge.

My reasoning to include the nicknames is to show how many of them share
the same name or how close they are named. I'm surprised how many I
found that shared a name.

About processing the data. Karsten pointed me to some tools that helped
me to obtain the data I wanted and needed. This took about 30 minutes
and includes manual download, manual unpacking and semi-manual
extraction of the nickname lines with grep. The rest was done by a
semi-automated "batch" I created. I'm going to update the wiki page some
when in the future to recreate this and of course improve it.

The comparison was done manually. I took list a) (the bridge-names) and
compared it to list b) (the relay names). To improve the accuracy of the
time spent I used a stopwatch.

For the most simplest part of finding direct matching or pretty close
names I took 8 hours and 45 minutes. That includes copying the lines
together. I then tried other ways to find similarities e.g. a revered
name. I spent 1 hour and 10 minutes on that. I hadn't found anything to
include.

I spent 9 hours and 55 minutes to compare the names. I could have spent
more time on the second part, but as I were not able to find something
that I could include I stopped at that point. I could have stopped after
8 hours and 45 minutes, with exactly the same results. However, you
never know.

The time spent was spread over several days. I assume that my first run
with May 2008 did not take as longs as I told you later. I may
overestimated the time I spent back then.

My approach was a manual comparison. However I'm still convinced that
this can be automated with a tool or script that uses an algorithm or
even prints out exact matches only, because there are many of them that
share a name. I'm willing to assist, help or something along those lines
to create a method with reproducible results.

I'm entirely open to the results.

Best Regards,
Sebastian (aka bastik_tor)

["findings_march_2012_slim.txt" (text/plain)]

// bridge
// relay
1234maxTOR JaEXbhlA3DGQObgodXayY1G90LA
1234maxTOR w7Fd36WDWPMwDeIyg90iFl8Q5Zg
1969InTheSunshine K57Fe0q/oxUB/ChjJ8LYzb/Ll/k
1969InTheSunshine 4c4wfcsyU6bUbqEjTP7DNGcHm7A
32bitfloat o8Fw3cgfZZUFRV4CC8vTuGk3X3Y
32bitfloat +V0k+U02KJ9Bvqf0gUvswUBzKGc
AAAA1RELAY 0NI/6Du1AKgt8kw9CyZTz68fH3M
AAAA1RELAY zNx5SvnsRLReR4dvaJgGiYw+aZo
aabrobfsnode yTK2fRMsgpM/aKiFi6hO6F58BgU
aabrtornode NeizRPZh9PLmixdkjzV5i0RnLX4
adaam 0D5R/58JkGb8C9m9v8tJUYTblVY
adama yaNxDef6pmXngYJKs1WYgUFxI48
Adama fZD1WcSE+HcIrvfSIsgQgRxNHCc
adama yaNxDef6pmXngYJKs1WYgUFxI48
Adama fZD1WcSE+HcIrvfSIsgQgRxNHCc
adamrights Sy2M3qPfJQdcw1VYF8JIPkrf/n0
Adolf gd6US5c2XIerZWmJG8H+Uv6pFy8
adolf y/sXwcQUXogYXWQFQXKyzj2nNEY
advokata HbfT2qMooHLSNubcIbgPTnVcy2o
advokata RKB04q9QW+catY1sh0JmQHKp1Rs
agentc 7S3BwmQ/b72J48TFGnnvJwm3cZ4
agentc geQ9jVthWSbhQA8uY7c7fCq41Rc
Alakazander nTWbDXnCDCsAKU6/7e6Z4+ctJYc
Alakazander aLI+oJdPXT2Y5uTJyFogE77N1Qg
AlfredJKwak AX9ZmyxqSHMrpl5SnvWto0+KPp4
AlfredJKwak /oIlqAO/IstQP7hDZJqrtK/xKAE
alucard Nw4+bhfT9dsfhZzpkq8bKlXKieg
alucard CyhZGmw/tVXWcE3aMjg4TGgwOCI
alucard Nw4+bhfT9dsfhZzpkq8bKlXKieg
alucard2 DHfjxAAaNKgr71jHjp+s/TEngSU
AmanRelay enMOEiUB57seWH2gsUQROkbsmyA
AmanRelay G6i+jgAd7/gp69j6SAhlradLIjM
AnakinSkywalkers HCs5PsZehnHmgkVCKr4+Ye81yBg
AnakinFromSaturn HwBHi6Heg6CTCHsENLfURdKzwSc
AName 3QNJCVkPI6gS8hcfh5SohU7M7P8
aname dKhA+NYz7yPNRHyEyDArgqPpJmc
anarchia jSIiVUrDOioRas2Jao/ZUO4FrMw
ANARCHIA McN4BCjfKgJ4UXrmNN90+3I+l2g
AndyTOR yGx4aQMOuvQlQecmMTK1x4HlCP0
AndyTOR S1gJ/y17v+UWjbOFRUg9JNG4bwQ
Anon1337 su3n3x5Oll3Xh2ZXFIdM57tvSEI
Anon1337 b651Q0SbLlXxrLikhYGPivF1JgE
AnonAus Ek6sHDryhT84rurdM5QJExUwvcU
AnonAus B15s2NlHiRBfhu/8BFSZRV4R4Mw
AnonAus Ek6sHDryhT84rurdM5QJExUwvcU
AnonAustria Ska59qqJgm2tWFw0bWiRQI809u0
AnonOps68 HvW5EFBhZiv4k8aRhMDINvvoCsA
AnonOps68 uqqbvkiE7vIhRYr9xiwKJlP5p9M
AnonOpsAT 0ceMFnzUVuWqHgu8/oaXBvkJJ/g
AnonOpsAT FcRxFJNZuPm2Iu70PmSKNEtHKKg
Anonym2468 QgsCXGDcaZNTHWrMeWZnPgJxKig
Anonym2468 j9F3k7b8UwpiiuK2biHjkXSVq8g
ANUBISIS 28zLZ67wIN3JOpLHGwmtLh4J4kU
ANUBISIS hEO3nlikdfZMwTggM+aIVCnHhto
arfab rQU8IpA2EYOp1meD7g3KFERHrUA
arfab LeSzEs1AFX8LEEIJkV22T1sVBlc
Aristotle NbEiajT/wyElgUFFbSY6sTfknBQ
Aristotle ppg0a2FAeyuXVKodugbPD/+4lpY
Artoo zRyfI3bF83HupFxFh5AQV2hd7EQ
Artoo DVlYAAlMOmRA0QIl1qOruh4QaFE
asdf AY+SYI2n016jkj6V78HZJUw4lh8
asdf ki2ws1PR3ICgFVoCRZKF687g/d0
ash aty7jbQOXNIVLCu8T+sM3nCxTgc
ash QZOzERgXsoCJMBbeYJpOaw7fe9I
atomlib IITRHGo27SLjei4LSv/JSXkAczw
atomlib xmLjinpWtHNT6aER6vKwuEiFuog
AuHasard EtGfr/uekl5Upaj0PltwqOWkzeA
AuHasard v8MBmcy7FA+ctMHq35PVGG7nf60
aurelia WMmofdX0iXomNxbSQw/tpHnM9nk
aurelia JIB/NlJT9+f6Nodjp8yGgE1CVgk
Avian 3FOAMWp50mKe/YKbXe2D7Vkum94
Avian guXwTAk9Xb0usrH0Mweu3ooyk/s
azurant H9nukRnqvbHvw+npRNJR4M3qHhs
azurant 9JTE+oOf1seOGe0KnS37YQTrD2E
badgerdash UwEU/T+rTo/IzSc2gfrtjBLG/bA
badgerdash 58x341VWqmxYklEriCnD2vFXkRY
BaDjinn MYfbsTAcEKGqA6+Osz1HzpMArcc
BaDjinn MQ9qW+XJ/p0Z/e+KVurNW+x4lt4
Balhau eHaMMNjHWNkxt1xeZ3ywyrtFchA
Balhau TKqFnODRP0uxkm774w/WlqN2kk0
BarkerJr 0PquXd+MSQpib1kPugy3aCGghkE
BarkerJrNet jmq8JDsMCjSNDhbTJ002fE4Q5I4
BarkerJrCoast1 caFvwKumvy6yuFEX8fz5jBVED+Q
BarkerJrOrange1 B5zxrjrsniMNDreU461J5kTVOVc
BarkerJrOrange2 l/tEb/Zt97aseqyOZLaSnjs6BJ8
BarkerJrOrange1 B5zxrjrsniMNDreU461J5kTVOVc
basnoff xk0UUc2rWEdi0xbQz1DfAde3AWE
basnoff 03cKew3DaAc49GJVZ+LiMkkyxHY
bellerophon GP4VsjUbiGRRmHVr/LeHDtoDzlE
bellerophon c5EBkSsGNck4EngEBVf7Urj+RVs
Benedict B6BmawvfzpgR0IA/3RVSdNICmuA
Benedict bu+dnfgHP1dKuKAR6TWsU9Lklsc
bex HwMa92NsyAhBVteKnkSmYlPfdxU
bex 5Y8q+b8SPikgl/StxSN8BQdhIaQ
BGATOR 5ikWQEVYCSiGwOOzaKVOAeZYz64
BGATOR C9dtCeDM1wj2GBvbrAm/GZzplH4
BGCbart TP0m398IliVd91+TijxCTTXtCcw
BGC kbllQ6i+lNao7T7TGrh4LYtQmcI
BGCbart TP0m398IliVd91+TijxCTTXtCcw
BGCchrp 3wz+ozWZHcpbQ6RcbxgZVrc9/Lo
bigB YEOAhxE2OnFy4/C4rppKs8GPAOk
bigB QbbcHePsLpNlqcG4f2Fd5oXKypI
BigSky 4ThxLtthNe3rtUIhgn4NV7sRu1k
BigSky +FgkNEZJY/mQs0aBsm2KflsWvNg
BigSkyBridge w2jlHB/aBmVBxjwdxlFYK+2D+fI
BigSkyBridge EuE9Ga2z/BotTrVrMIEFP2VLHv8
blackbox Rjlow4MNbfPW3B7l2iYBMjhUIiE
blackbox 0qj/INFEuRrr6if1L6lvDbbSVkE
BlackEnd gRoJVdZBmKWJUl80y+vvB2irXlc
BlackEnd 7lRElGRO+Z55tGojsBkW9SXJMco
BlueRose DK0pZMm+pkDeIz6KJGqQGgGSRGo
BlueRose fV58pDrNOkODhoXRu9TIRhX8Urw
bmwanon 9x8OzEgjUSeBFCrqGFYluepoll8
bmwanon xgq14aF90Vl/TQXaBjqJEErNg4I
bmwanon2 9x8OzEgjUSeBFCrqGFYluepoll8
bmwanon xgq14aF90Vl/TQXaBjqJEErNg4I
Bobo Hx1i0JR6uCN7DEXzveO3OmZc4kE
Bobo RF5tz7C7U32eKzfqePQLQfdS9Vg
boombox1 KEntCFQZGMzV0ecJ3oXRGIU/yf0
boombox1 Jjp4oc7Kv2XJ67pLD8CHyJ+9ehQ
brapse qg8s0LzYgStNQdEtDTPu7/jGh84
brapse Q2YiAgK1KMOMGuGjK/eFqkEN0JI
BravoOnionRelay w2jlHB/aBmVBxjwdxlFYK+2D+fI
BravoOnionRelay cXa+y3++5ceuflb1lrun79g956Q
bridge4711 D3MPdP1SE8QpAq1g07ET8gRrbz0
bridge4711 goIDowxRFjB/oiIVqns42x+sF/M
BrightSideDarkSide Jc95rg5GGf3PyyZPHQZkR+DyjOw
brightside dDuhhA0O8ysfbZBFUbWbJuEum5I
BuenosAires D//X5swhBGWkBcmCGV7yZ8kLgsg
BuenosAires 1WyrH56U+zMAwcbpa8ijV1dLfy4
bustaRhymes qrYZtuLgfN02wgP3ncqKF4QcF+o
bustaRhymes d0nw9EurRREOsHlPd1pJhez1w5k
bvbyndndd 9WlfBeeDCkMpeIOdUwABcyMjZeg
bvbyndndd OrNn/ruYRU4B11rZy4gGP6fQkbc
bvbyNddd JBVREAWxjUmHEvWix9U/XtJI1Ls
bvbyndndd OrNn/ruYRU4B11rZy4gGP6fQkbc
CanadianMile Y47m6CstZ4gz5/kOES6UW6Rzr58
CanadianMile zfG+HKZFbTeK5cbB8txQ2/+V8Ac
canbec G/yn2+jFrdK/YrTmqWfmqbTV3yI
canbec 042uBcypxyS6MS6T2XzX78ju8MA
ccfcoder Mi3VLAOz2EziKP5v/XFH8GZAxvM
ccfcoder cLTxPiheicjcfwJ3LkCuomX1H9Q
CCServer t/4iDBaMaTPCGAaGpo4+Cv5XmPU
CDRelay T3Au7GSgJOFR5rxo1pBbhcSzFrE
Cedrjlkj VLDKA6p48bi9yXVHTqJH3wWm5GA
Cedrjlkj zFwLiXAmzp2Axn7QD5GoTzAZH6U
CensorshipSucks uMjoynrUP3CIWb62ooggWEVvdtk
CensorshipSucks xXIgw2znHFwG1cWf6cqS4UDbNqI
Chaos ak42DAdXT+PnoiDc8DYhHP8zooU
chaos MxvASX2nnaqijH5ulTSTOqT7g4E
cherith6 uohhUr+IdtNNd8vIQa3u3y8sGTk
cherith6 TDjo4hiYFE0Z7PVZ7DOhqB9AnQU
Chewbacca jRl2B0nVDvkqwA1RpOepmQNzbWc
Chewbacca oueeLj/qwuWIIxU56ObFqAEOoR4
Chobo RPhSSTu1k3UiDx2+s0MhbeOuigo
chobo 8ERhQXVv3o91l9p53fYn/0EpvX8
cookiedookie671 DsIZe3gITsPtsYy60ZGnAW7jcWk
cookiedookie671 V4ZVeJ8mXaGMTc8nF1i3F840MLg
CP3O 6OzfG21UnGIAdIPlUuRd2MZW9Zc
CP3O pprbBc44ufobeDwrcVcqgNVQLxQ
CROOKEDHALO sqWr+4/XzK/4FFNJWSxFW4caVvk
CROOKEDHALO 0jctx6OunphZBJeLw2ynpuGr5Xo
Darkstar 9JlFENOIaPHoBP6bOpuL8Lpl0dU
DarkStar yY45C/p1SqoPs7P+6VRSF2/WFuY
darsamterglaw kEjN1MmfjbccI+rRe6LtL3ZJ2Ys
darsamterglaw +2tDE6DOQlyGu6IDv2xTRMRYgJQ
deepweb9 AywQSaUe1eSiqt3L7mpvhuBRjCc
deepspace9 J+wBjIB9+k9Goh1pzUU10fMMe10
DerAufbruch2 Stp4UX6Yjt4uczB3mZbjctAzSTw
DerAufbruch2 1BblCudLR9GKCD/zJNEAXPktHrU
Destiny fhvfuHsZ+LTpByCyeVNiwOj72/w
Destiny MxXuFX4Rw297TdsW8zWwPpB9SZs
Destroyer I3d5eL4MUH59seRq7mNue+mw5yU
Destroyer +IJI0NYkKzamMoN+y5GFXaCfl7o
Devilette owxf/bQFSbZwdO/5wO0vK4wrsTE
Devilette AJnYZ7w9RE2xNF7nYYLcQdgR3AU
dgdgdgdg vauyQn17S1pFN2yP/SpjwBfqaAw
dfgdfgdfg S27omT3tVmI2Ls2dTtLlcWauIaU
diojg85973 9XAD7TzPuyrVXaIpFW71JEwOliM
diojg85973 qxmzAMst8pROVpUyoCo8PahVJQw
DirtyTechnoDeviant qHbTAznDEzbcN3kMnbYAa30k7EE
DirtyTechnoDeviant TVYpUFZipb0411zj6srmKnuiHpU
dissyllabification lPasw4KRPgZmSgooRqiidMYj+pA
dissyllabification aqvxtF5E4Cs/zBpJ4BLy5Bw1gHo
Divan Y2eB2wsLVpNdyGO2kioQ4oKbtZU
Divan Y4Xwq4UDgw4G+MRCedeGkN0jzcA
dmaulidentifier jmIvkrPwm5AcrgySa1L8Lgn9bdM
dmaulidentifier Jt8zsMC3U1LkItWPYhyBI39QgEE
dmaulidentifier2 IWcPuqRD0ZxhTdhOKwDBz+2ZFrM
dmaulidentifier2 ao9sEcBgHQBaE6cq9KyebhjB1Rg
DoingMyBest bGlc4MUrpo3HAMaAfC3IkyFYBU8
DoingMyBest2 1gPMnydGIi7MPCAjTky24+odDh0
DontBeKnown jR0zzQHKaAdAxgkVn4/Mgl2kBmw
DontBeKnown cAYCNd3/ILs8ltrTe/tMQCIxXkw
doritos EiG7WpIAGUy+6X1g4frPQUnlpWs
doritos ieFLwXa+zH63rMiwvvoGLwfsO/g
Edwin NF+AFruUlk2vMVJjMzcrvZIAQTc
EdwinYTGoh Rxgvbj6jyLfHCfOxTHubMw1nBkY
Egypt20110126BGP 3MAl7tiesNYq+1XVOO+zqJRf54Q
Egypt20110126BGP iHXBqlTp2gwvea5+IfAyGLxQhvc
eot34ijlsfksgfsklda GHaBZtkyXv9euwHShBX3yZADzFY
eot34ijlsfksgfsklda wN+aKIyNQSzjF+i85oHdVpjVFzU
EqualIntl EtX+uZkBH0hV1FgUm7G53Cat71M
EqualIntl 5YeFqfFAxyE1EyBZb2nHOQ0RjRI
extremist 9RRpfsEsI8YARzJA0KrUaWioORc
extremist P912+uhvSx7NJKmvzHxOokBn+04
fabignale yZxMKwtXmBl1RVeDGJEs26tk0eE
fabignale x7jw9bZfEB9jYNZz6IhY3qLYz2g
Farzadpab FTyWjdFNqRe28BHmPPAecq8KTTA
Farzadpab GJ5vQI5apaxRXLEdbA9nRAJ+hb8
FCUK Rco7apWfEeg2V5O+qGSPc+CxvVI
FCUKThemSnakes ZL5EioWBSaGMBJHA+5F3YX64cfA
fedosis ZeJm6RnHUjDVnPRoSzP+0heoqKU
fedosis Du3P8dvQfmicGiJeCXQeETymf2g
filiii2223 BRhlLix7TX7+b4tPp+NgKmoMwjs
filiii2223 8Be2G9NvUSmYAa0AZIbmnQOjeEI
finn11 bVJ+v2/lSOLH/QtIYUEh/5+Ddb4
finn11 GMOVrkP/5ZZ2RdVcb17CyvH86p4
firefox G4cOVdBSZSB6V8uT0MrK9Ujnm8E
firefox gYr7v5zvQLxewvlUJnvuKslECao
fluxreaper ++Tdgs57SRQekeDehB2L+ZRW+hg
flux WlwyKsaEBJVx/MiHnvKP9FFcZVU
flytoxII NtEptOQvm+raxr/ULSEtw6nswgM
flytoxII O5F963iJW8WoT/jT2kENZHwsKJ0
Fr33b33r GDfTTrOgk/V6usvz+ce+9QnB7CQ
fr33sp34ch wnPqkhJ9GM+Bxg9c5lMqorDi0tQ
freedom8privacy4all ZaFsLUfSiZdtpfdqV0Y3r9OJm8M
freedom8privacy4all mVBYPlQMt1vIH+QCjVB1JPlhKs8
FreedomGate HkdobnkAsrfl5k6oK6MbPxVkKmw
FreedomGate 55mHujCFAb1zQrGBGjHKZq92DuM
FreeDomI BKES6m00c2DyeyhxdBQLZYO/jvA
FreeDomI VkpNxJQ/wxS7G6Mfa9AaaMUeVZU
freedomsnotfree aYoa9LTvMlbhea7sineSCGsnBDA
freedomsnotfree xanB5pjPf/zKWmFqcVjgrndJPE8
FreePalestine nGAHQ7AU8yR+Z2bdYhJMhYTqLKo
FreePalestine QBEgOUonA7fqWVDjD9sVQQke6nc
Frogs Tviz3X1wlNpJu/BjKxugITKT6yY
Frogs 363JXhf444HDmstDNc3ZngOnrVM
fuckthegov D358I7a84GiO6FMKk1ZFVSD9pFc
fuckthegov hDKrto3hiTMtZObJwr0QFMkvHY8
Furby nqNvfaWl+gTU8ZRQbYhklwufg2Y
Furby PSzGJI7P+WV9NUKA/CKrMtvWxKk
Fusselwurm2 WA2PYvME0fsU6hpvm3UB+EmoLoM
fusselwurm cUpNq3YlIjQPjBJL1ZSou5kNCos
gandp hXrghTST94PI4ouzPolrJSCxuz0
gandp Q2lfmUxTndroNH4XGDUKtX/+Xjw
Gaxi c+YRcLWeauj3yoJc15wCcQdwzpw
Gaxi svrDIYcS6+ESzjsthKBb3aEqPXo
gdwl3 qyF+prjB+I7kqQrCwTxhMk03LUo
gdwl2 CCc/9j5WLBpcwWGsNdeyM8pjsnY
gdwl3 qyF+prjB+I7kqQrCwTxhMk03LUo
gdwl6 LNQOznUUNJ2pCLGL/Rtid4x+3BA
GermanyPresent RZuzldEYGVOBmaLP4USNORUhhdk
GermanyPresent BxTGSdR78AFOxOHAmhwsbMRfF58
Ghozer S9TtTR15HHIwjqfFIDUCFcidkVU
Ghozer vgOj3cRRCNg3P+wvCjG+ygFh4YQ
goblin wCH7cCUrKGdX9aO9aOi4xhcbxn8
goblin 1lncNSDv7xnAI4l/o43hVzEvLIE
GORTPORT K/D+nTEXQeENqp+MD5UCMqKZp2s
GORTPORT sTNOdU8G5BxVAFyHZjOzPOdame0
grp3cnf84910js BjLCOYuBa8g+27FBVZ+JHpgaViI
grp3cnf84910js 3tbmPNoXKvrcKyfojMu3/+5+rGI
grp3mxf7240kh3 MC+78phTF/+KiCkahyo9HDP0KOM
grp3mxf7240kh3 YNqGVg5aJ7B4lv5UoUXSuYSVd/4
guesswho CTll52mp9sSMlCo4ClZzr+D2wZM
guesswho ol+uQJ1bUrNFssCsqLJ3SZb3DsE
guest kqe1sO4CleqwTtESFWyhfw8eNmY
guest UFDtitDOLB6CrAeK9n7mGigQlO8
GustaveG cvtMDjL6IhaMMQLxPEtkcmmar/E
GustaveG gaqtpHrRI+TS+vV5NTp0D49iTSU
Gutterfly tYhod4Ho6rqpkigXchWsNrdVyhs
Gutterfly evSyeEilJtjdclgguW2hyDZCKgs
guyfawkesberlin WQdhAGj0Ge6H61rv2Wc1MUleKVw
guyfawkesberlin 3m0mZAXbPoRLcpELfZ/C+lnIzbo
HellHammer bI53bDGYrChdqVu2TrUOH3hVjdI
HellHammer n23P4FYHhXe7EdrMv7SSdmraCzM
HELP RPqww+4kbDLWtDk02S8YvrngFp0
HELP YIWRKnX7onOYwyreerNrnGMly9M
HelpBlockedUsers kAGVl5p2nSDY2+/RhDkD3wyK79g
HelpBlockedUsers V2AbGEqBRuSOgqxYuV60gkjHJMA
HelpTorUsers gbgAcg2fGHqoq/X8JvnUC1iaGQY
HelpTorUsers rU3JDKqPuvP35rijImEebiGJJfg
hessmo G7Wy1oNCkU1W/9BaaYbl/uC9RHU
hessmoburst D/ApgeD/+8LEtYtWj7vjIdWUFCM
hessmo G7Wy1oNCkU1W/9BaaYbl/uC9RHU
hessmosan /dP/RiWZUeHrdR08c8EO3iKFAG4
HeWhoMustNotBeNamed QIzzWk35ENE32AfGspapKsJE5pQ
HeWhoMustNotBeNamed 7+n5bmQMDhlhucGaU9jWIStccj8
hippo01 SgjkXiFyVeqcwXGukMzQPJNQYm8
hippo01 HIAzq8ttFArLp/6i355mKoCH7zo
ichabod 1RpsZ5UZD05XVPankjMCt3yxFNs
ichabod dBF7aueBj6NlARmf2uSHv3Wih5A
idics VFmflEBfu0Whcs3e7veXjaPqiKQ
idics e4DYALAHsydQQZ5ot8FTgJhWAvc
imgunnaeatheworld Fyndi/YHCfhvdZQTmtBjO/TPHZo
imgunnaeatheworld 9cLYWMYtGlZEWGlHQr4johcYIOo
IMPrivateURPrivate 7Ei+V30aJa6sP4+vMtpMyQXTiFA
IMPrivateURPrivate NFa/DOAqZxyijuYXseIwM6LPzWw
Internet345674 pGB+NAVa86vFImcQ1OTQ6/r7hmA
Internet345674 ILCXmaW/FAQNGH7s34keNYwLb0g
IOnioN axoTssW8psapWNxzVrToPpmsIXw
IOnioN S+cEug3JvmhJUDMO6q6MnTRaxFE
IOnioN BuFivjTZ/cogIJXgloiSmBhaOOs
IOnioN S+cEug3JvmhJUDMO6q6MnTRaxFE
JackieD2 1gAiL/wpA9++hRCrAPoTIcD5FSw
JackieD 7InuqMobnCjsv7Zj4IkHWrvvAoE
jacoBnimble SVftVZnGi0kO0AQSGkbHynMAzuA
jacoBnimble O6FEiydvKKbcHRRj6OjEu/JsFcc
james VieHCAKK2yiQ3IPUpQgehSiTg+o
james xcMODgTsmI8qNbB+wsgEXKv86nI
Jumbo /QDEKR4irLhWTJwXNBPnoIz+BOA
jumbo Cvk+4THUeMUsQH4sPF0odp4FdiY
justanothernode hdDh8tJRYvGHmEnxTbM6ztWwV0s
justanothernode IeC3Tnc9kiEAg3+5FXiI0HDEl0o
JustAnotherRelay odlRsO7aDKZdlOFk7E7XzygjGII
JustAnotherRelay eNLRMdQ5jDvHsnnbg7VJnDgR0Tw
kanseeuw wsTtohaTcKcXCsVobtZZG027vYE
kanseeuw z+9Ji2kzjlWLtbqtKqS48A10g3o
kes zyLJW8E9PfrciHuU2WqiWSctF/I
kes PCq+gFM2OiSgK8AMB00GIoGUOrU
KGB v1+nh8/DsZHIbY0+Q6nlMRDa/CU
KGB LZpmfz1E8qMpaAC90xDDdH3I9GU
KopimistKonneksun N1BmcCArqVZYywLTQNUapYFQejY
KopimistKonneksun 9rT4H9ywe6053hv31zxIqiO3RaA
krtek MxZAU9Ixc7dPyuGU61H5OG+/Fow
krtek lWp1OhjJVdsEIkrNx+UFcM9ddZw
Libertad vhcMzYEXJWNTm+P7pPc2+iw1Sic
Libertad XhN3WFroEMcLCL3PnAm4MRl0vDA
libertynot4sale z3QSpTF1Thkjenakv8PsaAVSyak
libertynot4sale NlL9Z2NURfMChBoGZsA0fiF5PiM
Lms59Gh0w2 CRVmFRocmyNedYGQLwACV0Mhmx8
Lms59Gh0w2 rcRiXqA1be+GUS3fUOquaKBdCIU
london Lev8KGVC3kiyiOFkJZG3Xcss+U0
london 43ABAKCH9RI0q15gzsIlWDXvh54
Lx3 wCE3BCHbuCzIDIeDnlXcz/o73lY
Lx3 3sR7vEY2REOKVeeZrlEICP5uzZE
M455MU7D3R1 7KG6YNi3dWiJYiJwLzq1KAE9v9g
M455MU7D3R1 7NGgSFRMx1VP7yOwdh0znWioyYw
MadMax f8ZtXYlvTExpkjeXFYfmjOeGWII
MadMax kHkFwl4aupnANZTlFmM4btqhusE
MartiniTorMan jNV9DA8TFQOSg0UQPW8qvC/rskE
MartiniTorMan TP9JdbDiyTMKPeNQgnAYEQGn63U
maxafato T0B/FdFGx089PJBweeR4uNDATSY
maxafato EqO0tz7W2RsyGYBueHoNetT3iqg
mazalo Q/1FbAMx5Xw205gw8naUwaNdtW4
mazalo 7OnGgrD4sbiM8WFSLegmGu7aKrQ
meiner F6QgqdW2yUlw/UA3tBDu6ge1kgo
meiner bsCzdN5iRJhHY9LHn6bN7ksYSNU
micro g6Retk/j+TATrqH783mqZpdhtXM
micro S6Tge8tfKu3CYcCMiO6x1rxszPM
micro g6Retk/j+TATrqH783mqZpdhtXM
microlah GlxFG9DeUb+W7JJDTAX3Qj5lsgg
micro g6Retk/j+TATrqH783mqZpdhtXM
microshaft 6s8DVv3zoOeDmzx/iSL+D+U9R4g
morgan n0B5mGxFZvmbA1pvZs40vzEs58I
morgan 2c80+UsI13rQSQi0QB+j/EtGfSo
morgenthau if9+b+Z9JbzGFxWjKKfuYKdHWYg
morgenthau V2UDcGDitzmSzJt4nq9qOVJMGwg
mullbinde4b 3RqytnLla1Q2Vn6EsuBZk5E5JNQ
mullbinde1 psOOxvfG18lyDpiU4ptprEcpn6Y
mullbinde4b 3RqytnLla1Q2Vn6EsuBZk5E5JNQ
mullbinde4r gyUAxs0Ef1J6XldZv1c7O7wSjmM
mullbinde4b 3RqytnLla1Q2Vn6EsuBZk5E5JNQ
mullbinde6 t2XMmquOqOL90nXWBDPFbA3lZF4
NA Ve7w7q/l3y7Ih4dK3y8MnE9PpE4
NA n1eRekCrxdwu//2c6qDDCkLcQGg
NERV pmQ00XPH3otf2+o5P/bpueu5jUI
NERV ItiPn0Y5AiCqdO9V+MZueNXJJg0
Netimeras cDRvpPjjZ9Z77plIA62neSAVCXc
Netimeras 932o2+x6xpUuDkh8CS1wRtDFnu0
netzfrei4 i9+qLX97XqixyTkFXcjTgwbsC24
netzfrei2 XaxweURDr81Dioq9OZRcu/epa38
netzfrei4 i9+qLX97XqixyTkFXcjTgwbsC24
netzfrei3 nJcalKh6f/cVlfym9HYtGKQ3hPE
NewLunarRepublic +XB84F49GiLWJ8VauSFNYJUM+fU
NewLunarRepublic OmQxUUDeVH3Kuv1yWhdtcjG4CYc
newtorv6bridge P2jjvOovuQVUie2BlMH8fsy3oDc
newtorv6 7jC5MSfsPBs615ZlmM9noRSoMAI
nexus zd/WseZAXp4Uxqs3hD9H4yOcnQ8
nexus IPWDkmMbBn1UTu8xL8O8y48sQmY
niaoyan +YCdRNZmEOFuqzGW6Y5jz4D3wbo
niaoyan Hr1BWXZ16niVN3Y3Jv3N+RPWpFQ
NightAnonAmi Do1lceu2NdUPviI1UxH49nsvoxs
NightAnonAmi 4qkBkyjk33Sp/lzf/uckoAsA+HY
ninostor 7zITXOTonogfZI7rTjdaLiC6xAU
ninostor l6M00MDXaAm3jHmIlhTwPmoYsA0
noborder PjyQo/WE7SBnxaybh0DbOiRjlEs
noborder gSvaK81nz8fQr8kcz8UpNc2vdc8
noname 5Ed8Ywbj6i0F8pTrkmTOkcNcaNs
noname mfApXqO0Im82yuw/lc0761NYGZM
NoName 4S1fMSSrqTVGMRcXAlXOZv3R60o
NoName 1NShMJH0H45TdDX600Byuz+tu2I
none 6znrNxLJwReNWtVZp8EuXnTWK7I
none v+ZAO+JkZnQIFFC+wa0eAuZVX+I
OhFuckNo 4YuYxPgVbXfjCuD6PminXM4Bcfw
OhFuckNo jWGHY9ZI9ZnWy+g4Lh/YUU62StU
omgponies g9bJJvuD5WerGrz52W33wp15/ZA
omgponies cj6NyTa9wf3dIwDlzAao7k8tj2s
OpenInternet 5JPOpza6+TYM2537Ke4Pp0UbnhU
OpenInternet nA3gKKEp9AYus95/1FjXcQZ/m68
openwrtor H+liXOttRRRC8GhEJp828RQqmrA
openwrtor F0LwHetVMxUoK3F9tQRqN2HTIs8
OpticHash nGgnDrF+kdWetq9bkJIOF/SORAQ
OpticHash 1P21+I+DhKOHxrp4NXHnoch3OXA
OxylAlfa B2QyGJK/+tYdsNRzsxXEljH6vhk
OxylBeta Antuv4yB8/YWwa+YQ3vx0k7cd0o
OxylBjorknas eV1shJQzVCGY8GLjxlrwdOq8jvM
OxylBeta Antuv4yB8/YWwa+YQ3vx0k7cd0o
OxylCloud 3OxdoSz+ev+7liUnw/KFUQgMKcg
OxylBeta Antuv4yB8/YWwa+YQ3vx0k7cd0o
paladingdalaefforg Z0lGlKSZBTGSpUalhDG2gfRwqg8
paladingdalaefforg UZOsNZvWHFnFwnuCngKBJhJGv6U
pallax il1o+MW1Mnm2MPv/8IHG0X4lz8k
pallax +MCSdgCbnsbBeWzsaYWTTg4WPIw
PapaMok qyP8MN2CxZDrCQ9dKtBpoDvIKOc
PapaMok jEmeZ9ynGCWZTI6HnRYkljqO7aE
pc HArgP82ERiqet6dAhL8+FFV8wCY
pc ps9tMmpkMYb2R9N1ImOQb/FaZ9w
Ph1rst666 0yFELTiuZZ4TbBaaNuK2hIIorsQ
Ph1rst666 WBSrh0fbLve2b+YgQ3zYbzeAnE4
Philcore2 1fegJcJZDchc9Qocpb4ms4wouoY
Philcore2 xerjWaBmBUGGIZQi3qNPpRXXuy4
PinkyPou lD42V587jSXULWlcYNT5z0vV1z0
PinkyPou Nl6gkEagnG+ORWjEjV9lUKq+G7w
pluto stRCDqjetjOOnnh597jbXGp/5Bc
pluto EYRQKvgAn8VGbrnqZiMflUt69Vw
poopcollider FMWMk52WM1efVovAfTVncF9cg7M
poopcollider gt6VLrs9zJRnwQobc5uaXUrvCKI
Potato 5v9XjUz90wGU1LL8mIElZBjxiD4
potato 6rILEmOh2YnqMBQ0eyNKf4qdI9I
pradi EmXtgDpxcbNn/689wp04NPh4874
pradi RQqt3QbrTqGV6BmDe5WvzuYl58Q
Proedias Iy+egPfl0c5Bhs9k0gcamBnTFgQ
Proedias l12jtXFYKzLydiJvSanUtkSeTL0
ProtocolAnarchy lP9Kby7I7wZSkLgRFjeVknRJZ/s
ProtocolAnarchy 8n8BX9arywR2W6SLOxyO24oEIFk
QuebecHors JAoIDfJPlJHv0wR+ZDMninEzF1s
QuebecHors eIAa5FV51WbMriMbeSqaK6ORhyw
QwErTy jM4bIs0/gRqQoW0KcYfY4MOJZho
QwErTy 0G1pkLzXSm/SGEQ5Kyyoz6ANVCc
rednet1 +kEoWiqg/BCWdFo9uxSf9p8jjUo
RedNet kPqrgMqF2f3mjadq1RlZ4VBT3sA
rednet2 Y5xPCGhfzNwdqXkUdUuAk1UKftQ
RedNet kPqrgMqF2f3mjadq1RlZ4VBT3sA
redonion cOT/WGHMGmSvlSGHyLtJlDxzqQU
redonion S9T5YmNAoChb8cQnWah83dErnME
Relay1 z4B5gjYfcvfCBzQEQg/dakXQb3g
Relay1 ZS+SbX8pd06x5rmueJo2707h4Ro
rifter010 XkbWkMNYDar0zarMUH1si0UvVrw
Rifter iOwiDOEj5xpigH8NA+qfRtFGdgA
Rincewind Ba3HPm+HhlxCV5kSGoyiC6+9/i8
Rincewind dWZUTeHdqodXDOdiuNoRNeOLRnU
rkanet vvpuZbMsCLjULYyXYtvTmX0VYR0
rkanet D1VCeByfcc+IcD0xHBZGGEkY/Gc
rod07 JgjdO1rlQZCS9HRvrRC6VCkGIww
rod07 +r1poy1ag2tdzIUOOobN4zHrynM
roman042 zLT6OvS0Uc1wpYf/KO8rlDviwK0
roman042 ChNUqce79Lld7iXlUoy6xCeBbfo
ronpaul wI5zj2RffCW+Y+t059B0cwikPkk
RonPaul2012 usDdKWt/F0Vzkffr116sKotQOFw
ronpaul wI5zj2RffCW+Y+t059B0cwikPkk
ronPaulFreeInternet TaOomLS28fYrHgvWO0sCiz2ZhvA
routeridentifier jmIvkrPwm5AcrgySa1L8Lgn9bdM
routeridentifier Jt8zsMC3U1LkItWPYhyBI39QgEE
rueckgrat YQBWeXvs0DTrEx+9fVX0o6huB9A
rueckgrat 4b7f/7jdSXd0hQDX9UIHrjM3W4U
scarface PIIbpS2zNx3fjjs4Sln4xHV/ZB8
scarface p6sFUeZeiyCC6gs6Bh3M/fVcgt4
seegge jDzxRgGzsnq9AafkeTo5kHfYIwM
seegge LawOBZLVq+se8nHO8GTsXP37eVk
Shazzaaam YQ72+rSlFvO3WjI+pypQtoYxx/I
Shazzaaam V1mFLGezwCpZVEhXGFZPGdZZ4qY
Shogun HbErM0StoKteuNvoi0+JOLBqNnI
Shogun JSmOczPDSgRHt/HQ+Iz1wff/w08
Sigsev69 NlihSmYW5e48ELxvj9irazha6CA
Sigsev69 pOJoC0UBbmRoXXXypMZQ9neWk6c
Silly sVYkvXO3y82rNsB7s6OJbyO7oy8
silly Xgctt9rNbiITi1Nj64K/EtxGIko
SirDigbyChickenCsr N+m8XUKQ3LqQbMhFL2+qQk3a6JU
SirDigbyChickenCsr VbtIgY+iuITYl6pIq0x/r848EqE
snake yKhtHHSniBCX2MjbOEyEC/yH2VY
snake qBzydQ7CrCQap7c0dF5ioE+R+Hs
spfTOR1b RRTKEqRt2/1kbbF1mfFfP2+qHo4
spfTOR1 CIyO1xSG1qjv407vy26zqjAUy+I
spfTOR3b1 rwbPR46BXaUJG4rV4QvM0w2Khpk
spfTOR3 yhz3D05q+RcubnQ6xfHpGP/itHY
spfTOR3b2 x6DoUszkQDPdQifhEldMz3KLv+M
spfTOR3 yhz3D05q+RcubnQ6xfHpGP/itHY
spfTOR3b2 x6DoUszkQDPdQifhEldMz3KLv+M
spfTOR2 bT7lCIJ5AnrY9k/2GgedxE4p498
spfTOR3b1 rwbPR46BXaUJG4rV4QvM0w2Khpk
spfTOR2 bT7lCIJ5AnrY9k/2GgedxE4p498
spfTOR1b RRTKEqRt2/1kbbF1mfFfP2+qHo4
spfTOR2 bT7lCIJ5AnrY9k/2GgedxE4p498
spitzwegerich +X2Yj0Dhp8OOCjvMfqAjeK7Uuu0
spitzwegerich KvXpG73XSdu2cVMoRQxCKKSkIng
spycotorimpleeeeee yJdXLsSThKCfe/Y95py8z1jK6iA
spycotortexan 3Qnb2AQOB1A6VI/8931iIAGRDsc
staignanrouter yh4yJRLnjMyDZ09+GqGOej37Ceo
staignanrouter T7IiSC22pfLHNMnOza1TWn3FBPU
SteinsGate999 PIPhdJT+DokBoFBdmcI/SRyAPqo
SteinsGate999 Dqw2z7Xr6fV8kRTreJltMdyzohI
StockholmSyndrome SwmdhPV3iFqYUuld3BpWIjrJqtM
StockholmSyndrome +FOJXxcsI5mzN3FIQcyYNcEF1n4
StopActa bwK1re0bmKPZikgN1a4PEZ7WHnM
StopACTA R+Qg3pDpUX5DcemQvlbGOeNHiLI
stopSOPAandACTA xKL29JQ0EhmJZEs41Yc8VvdWjDA
stopSOPAandACTA TPJVWQW1SCvwIaOn4ZaCrdmAOts
storm27 BUkw6utZ+9B/t6P6wv+pnBKQmLI
storm27 KNDsVNzN21IKRYcUhczkq2sv3D8
struggle 39GVNr404NGY5w0ffJdF40bjISU
struggle krKRCLg+q6T489t7igmvUgEbepA
SugarPlumTOR qwRp+jFJvjYTpqhEGcoAbLDijfo
SugarPlumTOR 0QGEjntX7PBsGTiwO0xiBFWnTEc
sulako 13nPTM4GYWWiH9R8JJDp+LnpcoY
Sulaco cAkMHaAucZXch9kuEZj1B1rWEuA
Sum1 HBMy6hgadbUs+oOG7trobJfsmUI
Sum1 D7yfrsjoMl2bB7p6w1E3AKjO9as
sunshine /B/17vs9LV2dcIgeOpqmjm34EXY
sunshine JSkeXh4qiKed8EdersJSPoqlpTk
sunx2100 e6vpqLlHFcz7Jb2QTMuKOuaLSgM
sunx2100 ZXlc4glGfDcqjqGdGBjWydH0L1w
synchronicity aehbDUyqFCPMokDzlG7t3UFPms4
synchronicity dRdAdD4Gp04eW9QzK9xOHsIAQ94
t4t4nk4y0t4nk4 a5cZmovcxz4bv1RvxC/oHtHAlr0
t4t4nk4y0t4nk4 J3YUopRKFLPoruZftJ6+I5X19kA
tasg4an0n EC3eotwqCaNhN5LYCKVHIOpBepo
tasg4an0n w/WFS+DxIA+U691TkOIWBnpUYoc
Teej PwPYqUX8vwqEv7pBVIEF71S7YeY
Teej njrfUR1ozUZ5X9mB2CyOXhtLRyc
TELECOMIXUNOFFICIAL RDUmiqto0s3uKhEchiDbqnFQzvA
TELECOMIXUNOFFICIAL 1cwoVm+7efvEKby+B2Xg56tXpMk
TheBatCaveBridge X4/xYeaL8ZlOKJyuDvVfyfozGnk
theBat tdNCNV7T+wPVtRyWwuzhtbyQxKE
thebigsmile zHMCcNmVo1cn167phoUYmect72o
thebigsmile FE1T0xRUA9VE6heUFBUx38oi8rU
Tiger rWxt0fjhZ0kHhqdlk44hVWG5ILo
Tiger ALFxXrAvx2PjAKmPHyBRSZpWZIY
Tigerlily d4YLO1zNnp7vCPFrnXRUfzN/9bw
Tigerlily LBdlio8/kcQjJqS5MyDMMFzk1J4
tizimin X7bn3G2QYochBrc92nv4KKXmALw
tizimin coeNbYer1COJ0SN81eTQIXfVqNM
tlheidemann 3MrhNAy3jOved41IB9k1tEfsSn4
tlheidemann RsQQJ6DNIwmQqdeOcWgYvMpf6J8
TooM CIRZPBRymKoKV5IVvvZMK6XUAD0
TooM C12t9XRyR41uKJCrNxmcUaq4VUY
Toor 2qfcTB4C+vHTmAdioXSulbiVjl8
toorvoid CzcyMpj/mM2G7UBIlbsnt0JuiuE
tor26b S6zo7n1Ry3xM94L9+vv8iDT8yfQ
tor26 hHsfhQNE14dkkaVIkvkEk05OuF0
TORARONTORNIX 4TfjKAUxW6pPcBs5ACtzvQdUs9s
TORARONTORNIX noQWhAYnbeARz2YUm4cEppzc2SI
TorBox kWzk3axWrjwv56VfjShSsyenj30
TorBox StzcmKmHHi6opI0TL+/4uJLJRPI
TorExit aUjrtLcelAYiMcR9OAtH8+b/yM0
TorExit IUbyXAbcIUGe7/cilQ+DAd3h4N8
TorFan WlqDHoS078CBbayjWn8CoS8VI3k
TorFan HKoK/wqCNvp/g/OSwRt2z37qrGA
TorKServer U5QJHmilXHoTdpzjFueVzGDWyK8
TorKServer FFd35hp5tqtaCfRTNnvPNwAw+jw
TorLandBridge 7YEEffSQogzNqZFMIXLCtaAFByM
TorLand1 0iM5mQcROh8haqpkmXvB1M+o4aw
TorLandBridge 7YEEffSQogzNqZFMIXLCtaAFByM
TorLand2 lFy7pZmAgBh0ndxOu1khaPKFjBs
TorLandBridge 7YEEffSQogzNqZFMIXLCtaAFByM
TorLand3 3TlxSKSrTUPl5sucX0XpIocswtM
TorLandBridge 7YEEffSQogzNqZFMIXLCtaAFByM
TorLand4 K8eyWv+su4YYciSNPhnXfucc4c4
TorLandBridge 7YEEffSQogzNqZFMIXLCtaAFByM
TorLand5 CcDFgAF3vzoRp4qYocr9jnrS6gI
TorLi rdTSGf4e8MYHXRy68VETgaedVnc
TorLi GUSxfgmrzVQ35y8XSnxHACHZEQM
traktor lYa3M09l9ZRyd0q6MsNAHdI8AjQ
traktor FaUYiRolUaVWet+Afgq09xCmLlY
transfer oG6RjWhug2W/Romsc2NLbsTXZq4
transfer y9sRhieUQm1JjEg4GBQnWn5KJnM
Tricho Vns5lmULINUvUvIvpp/7GHP9FJU
Tricho E4Z4DoiIQngX/Tu3tYODk19SDjs
triton 4j250mecV06x24eLjYfUUXnxoNo
Triton d14OEmBzaKWoswuBtIy8oY5X564
udomrat /V0JfQt8TqOzSPiCfPh22HVFDOs
udomrat KqJtIxmJL637mQxGYPMJW3+ekSQ
ulmgermany2 2hFEVmK4ga4p6i8BZRqOVALw4vc
ulmgermany2 huNhGx88RsIRo4rt8B/MazA0de4
unanimous 8K5M797EMdPFlLoCRp0wFW/+Lkw
unanimous A6fXw65bwBcY8Jx6PLXoKYEgL4U
veri g5AIpFOVT/mEQHLL5hxjhnSgOcA
veri UhPtWR0K3dV/6K9TvHr0sRrw7s4
VibeInnerCity 9wLSgdjef3OHy/JMgHDsCU1cUUo
VibeInnerCity Dj/toPflS0cwP7aZYYGgBPd/5Co
wamp iHKZYR0ev/QxN0wi1cCEvRvU++U
wamp 33RqAcsZ9lJ6Anu3alByrWELpwE
weazle ORzd6HavlBxdJnoolhq/K8veqFU
weazle +mnzydReCW7XLO+u0EocBLQllt0
wes 7SzM/6gJYgRbL4rynoFboNvSAaU
wes 0mRc+PdHGN5jGp9omNtMUTRirFE
White dUicbHhC2OExb7FumqHq6ttL0qY
White Hjs3PGoZk4ZTNOyODb1rWeFfjy4
windy C+QGCkN7Wbp8roN9Wlor5a28XxM
Windy U/BN2wDjUZMyJ2htWvZaN9nTv60
wndrwtr HV5Dh7xdFpggyq6LkxXDsAFCulc
wndrwtr NTRvO/kr7QQUfX+D7iloJJqno9U
woost /YIAV7+tKK/xhXfO0r5JbzP20ic
woost 8jmf/G93k+ykuQKZUjC54c76wS8
Wowza 4GHXpKPGN3noGOyAJQ4A0GDomRI
Wowza tpdsy9phLRjCrxaeVUjSUv6TM74
Xijaro sBYd4hXyOhqN6+l2FGGT7IyXJ88
Xijaro cqnMqAebVFGGeD7UwXKeiOSi1Vo
yeeeha oN7dC6s9niL1H4GoFNYoLqRd7lw
yeeeha YJwvXAecj7caZAFrCY7fYvIqdqY
YetAnotherTorRelay dj2IrZbJqH6E2L089ZtBxA/iIRY
YetAnotherTorRelay ySL45VIUKtcD6XLd06SJr0LrIYw
yogi 3r2JAmIGwLVriaIWOjqxUMnEwcs
yogi Je4/BCDDJ+STjMrjHBgzlwre+mY
YourMom 1MQOI4+cH70cvpbiMZQqoRS25zs
Yourmom lFPLLmKEY0lFMYZzGz6MnHdvGAc
yourtor GELRjfuNRprblAebImDfj02M+RM
yourtor i3EkBfyJfCw+ZxBqKOaGbB52RPI


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120605084840</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-05 08:48:40-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 6/4/12 7:43 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; Karsten Loesing:
&gt;&gt; On 5/16/12 8:47 AM, Karsten Loesing wrote:
&gt;&gt;&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt;&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt;&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt;&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt;&gt;&gt; nicknames another two weeks later.
&gt;&gt;&gt;
&gt;&gt;&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt;&gt;&gt; including original bridge nicknames:
&gt;&gt;&gt;
&gt;&gt;&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2
&gt;&gt;
&gt;&gt; And now, two weeks later, here are the sanitized bridge descriptors
&gt;&gt; containing nicknames:
&gt;&gt;
&gt;&gt; https://metrics.torproject.org/data.html#bridgedesc
&gt;&gt;
&gt;&gt; Best,
&gt;&gt; Karsten
&gt; 
&gt; Here are my findings for the tarballs of March 2012. I could pick freely
&gt; from any 2012 tarball. I picked March 2012 because it contained the
&gt; "bridge peak" and the relays seemed stable.

Results are that 205 of your 308 guesses (66%) were correct in the sense
that a bridge was at least once running in the same /24 as the relay
with similar nickname.  At any time in March 2012, you'd have located
between 26 and 46 bridges (1.7% to 3.3%) with 37 bridges (2.5%) in the
mean via nickname similarity.

Your accuracy went up from 30% in your May 2008 analysis to 66%, but the
overall fraction of bridges you'd have located went down from 10% to
2.5% in the mean.

I think we can live with an adversary being able to locate 1 out of 40
bridges if the operator assigns a similar nickname and runs it on a
nearby IP address.

If you think you can come up with a vastly improved rate of located
bridges of, say, 5% or more, I can look at another findings.txt of yours
for a different month than March 2012.

If not, let's conclude this analysis and assume that publishing bridge
nicknames is safe enough---until somebody shows us that we're wrong.

Again, thanks for running this analysis!

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604163924</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2012-06-04 16:39:24-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 0.2</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt;&gt; (If this type of mail isn't appropriate for tor-dev please let me
&gt;&gt; know...)

&gt; On a side note, do you think that any txtorcon/stem work would be
&gt; appropriate? They're both aiming to be a library that does largely
&gt; the same things. The twisted/threading differences mean that our
&gt; controller classes are incompatible, but other bits of the parsing
&gt; and such should be interchangeable. For instance, I've invested an
&gt; immense amount of effort into parsing (and tests) for descriptor
&gt; content...

I was thinking about this a little last week -- it would certainly be
nice to abstract more of the "general parsing stuff". There are a few
gotchas since the threaded versus event-based way to get information
from the protocol is pretty different. For authentication, for
example, SAFECOOKIE is a two-part affair and you have to wait for a
response half way which is quite different in an event-based
vs. threaded API.

I've tried to imagine a threaded-friendly wrapper around at least
txtorcon.TorControlProtocol which might not be hard for the simple
command-response things (but see below).

Certainly at least the parsing should be able to be shared
somehow. Further also to naif's email, I would imagine this would be
most useful as a "Python utilities for Tor" library. The only thing I
can really imagine abstracting from txtorcon is the simple
descriptors, like what "getinfo ns/all" returns. Most of the other
parsing is pretty protocol-specific, IMO

The main issue with abstracting more than that in a controller is that
at some point there will be a need in the API to wait for something
from Tor -- and at that point, you have to make the API event-based or
threaded. txtorcon.TorState is so far pretty de-coupled from the
underlying networking library. txtorcon.TorConfig is less so. As
things like TorState generate callbacks (e.g. stream added, deleted,
etc) via listeners, there's also probably a slight issue that these
callbacks would need to execute "fast" (i.e. can't wait for disk/net
IO) and this would probably be surprising to threaded implementors.

&gt; so that things like "GETINFO desc/*" will provide usefully parsed
&gt; information. We could probably also share connection and
&gt; authentication code.

Like I said, the main issue will be "how do I wait for things I need
from the protocol"? For example, I can imagine a Twisted / event-based
"low-level" TorControlProtocl class being wrapped by a
threading-friendly API of some sort (which just pauses the caller
thread until Twisted gets back with the answer) with the "nicer"
classes layered on top (TorState, etc) which could take either one and
hence be implemented in a threaded or event-based fashion, as they like.

I don't really see that this gains a whole bunch, though: then you're
depending on Twisted but not using the event-based stuff
"outside". One big "pro" for a threaded version like stem that I see
is only standard-lib dependencies. Besides, anyone excited about a
Twisted dependency probably wants Deferrred's returned, not a threaded
API... ;)

So, I see a use for a good Python utility + parsing library which stem
+ txtorcon (+ whatever) could use to do their heavy lifting, and the
network/protocol details would be "all" that's in the controller libs.

*Ideally*, such a library could leverage the parsing code in Tor
itself -- if at least the "utility" methods in Tor could be published
as a shared library, a "ctypes" wrapper could easily be made with a
more-Pythonic interface around that. Then, there's only one chunk of
"parse descriptors" (for example) code, and it would be used by Tor
and the controller, so no chance of being out of sync. Perhaps there
are other reasons not to do shared libraries...and I haven't actually
looked at these C methods very hard; but routerparse.c has 5200+ lines
of code that'd be nice to leverage.

Another thing I think would be really nice is to be able to get
grouping and documentation information about config options from Tor,
or from the tor-spec file (i.e. by parsing it). This would keep
documentation that users see consistent across Tor control protocol
clients, and make it easier to more-automatically generate GUIs
(i.e. with grouping and maybe ordering information). Anyway, just
brainstorming here.


I'm mostly-away until around the 18th, but perhaps we could meet on
#tor-dev after that and discuss further? Are there specific things
besides descriptors that you think could be easily abstracted out of
stem (and/or useful for txtorcon)?



p.s. may I encourage you to consider the way-more-standard 4 spaces
for indenting...? I've never seen Python code with 2-space indenting
before.

- -- 
mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJPzOTAAAoJEMJgKAMSgGmn15kH/3e0VIn208tn2SsVn50egHx4
Btlu/zDdB60uVY3jyh70OjiOfd/TBfmoEZGjx2TuBo7gyLlclJMT1iktRADqMHcI
83iZ5MsVu5XTA5Lsf5EGSc7GAQuuiMn9WR6X98RJSwhIb44VVAvq9ab/WlBvzXy+
kYDnNKSEQfteLoa5M2a5mV/kNxM8sHkbafjgUWfIFIo9pGp8f5+OPhyf6X6kI0Gr
njxpq+f3i6xASb0tW0kbXSAipYaUxe3x85ils5ppQsphXxusiZOnQHYb72qvJQdR
MWU44dSCuU2F/rWWSLxFl3FdsEz70uec7wzMUC/SzUtnOA0IWCrtipheOVUdhdU=
=RHjv
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604130212</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-06-04 13:02:12-0400</timestampReceived><subject>Re: [tor-dev] GSoC Intro: Stegotorus</subject><body>

On Mon, Jun 04, 2012 at 06:35:53AM -0600, vmon wrote:
&gt; After submitting my idea, I found out that at the end of the day, it wasn't
&gt; *that* original. Zack/zwol had worked on it for a year. It is called
&gt; Stegotorus. However, considering, the arm-race nature of the problem and the
&gt; state of development of Stegotorus, tor people (specifically asn) suggested me
&gt; to polish, improve and strengthen Stegotorus, instead of re-inventing the
&gt; wheel. The final obstacle, that Stegotorus wasn't open, was resolved last week
&gt; and I am very excited to deliver you a strong more robust Stegotorus by the
&gt; end of the summer.

Is there any technical documentation or paper regarding Stegotorus available? I
failed to find something on the Internet.

Apart from that, your project sounds quite interesting.

Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120604132915</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-06-04 13:29:15-0400</timestampReceived><subject>Re: [tor-dev] GSoC Intro: Stegotorus</subject><body>

On Mon, Jun 04, 2012 at 03:02:12PM +0200, Philipp Winter wrote:
&gt; Is there any technical documentation or paper regarding Stegotorus available? I
&gt; failed to find something on the Internet.

There is a paper, but it's stuck in "under submission" limbo. I think
the paper is going to want some revisions before it settles down.

We're working on getting the source tree up, and then I'll try to
encourage them to make a tech report version.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120606160719</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-06 16:07:19-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Stats on Amazon bridges</subject><body>

On 6/6/12 5:49 PM, SiNA Rabbani wrote:
&gt; I need to get a count of all the Amazon Tor images running bridges. The
&gt; reason I need this data is so I can follow-up with acessnow.org about
&gt; the campaign they are running at: https://www.globalproxycloud.net/
&gt; 
&gt; How should I go about that data?

See the stats here:

https://trac.torproject.org/projects/tor/attachment/ticket/5629/ec2bridges-2012-05-31.png

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120606165322</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-06-06 16:53:22-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing:
&gt; On 6/4/12 7:43 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt; Karsten Loesing:
&gt;&gt;&gt; On 5/16/12 8:47 AM, Karsten Loesing wrote:
&gt;&gt;&gt;&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt;&gt;&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt;&gt;&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt;&gt;&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt;&gt;&gt;&gt; nicknames another two weeks later.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt;&gt;&gt;&gt; including original bridge nicknames:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2
&gt;&gt;&gt;
&gt;&gt;&gt; And now, two weeks later, here are the sanitized bridge descriptors
&gt;&gt;&gt; containing nicknames:
&gt;&gt;&gt;
&gt;&gt;&gt; https://metrics.torproject.org/data.html#bridgedesc
&gt;&gt;&gt;
&gt;&gt;&gt; Best,
&gt;&gt;&gt; Karsten
&gt;&gt;
&gt;&gt; Here are my findings for the tarballs of March 2012. I could pick freely
&gt;&gt; from any 2012 tarball. I picked March 2012 because it contained the
&gt;&gt; "bridge peak" and the relays seemed stable.
&gt; 
&gt; Results are that 205 of your 308 guesses (66%) were correct in the sense
&gt; that a bridge was at least once running in the same /24 as the relay
&gt; with similar nickname.  At any time in March 2012, you'd have located
&gt; between 26 and 46 bridges (1.7% to 3.3%) with 37 bridges (2.5%) in the
&gt; mean via nickname similarity.

That sounds good from my point of view as an attacker. It's not too bad.

&gt; Your accuracy went up from 30% in your May 2008 analysis to 66%, but the
&gt; overall fraction of bridges you'd have located went down from 10% to
&gt; 2.5% in the mean.

From my point of view as a user it's good that the overall fraction
decreased.

&gt; I think we can live with an adversary being able to locate 1 out of 40
&gt; bridges if the operator assigns a similar nickname and runs it on a
&gt; nearby IP address.

You should get more people to run bridges with names of already existing
relays that are not their own. That would give a higher false-positive
rate. (True, it would but I'm just kidding)

More bridges overall would be wonderful.

&gt; If you think you can come up with a vastly improved rate of located
&gt; bridges of, say, 5% or more, I can look at another findings.txt of yours
&gt; for a different month than March 2012.

Unless I can come up with an idea to exclude false-positives that's
unlikely. Well I went up from 30% to 66%, but I don't know why that was
the case.

&gt; If not, let's conclude this analysis and assume that publishing bridge
&gt; nicknames is safe enough---until somebody shows us that we're wrong.

I consider that publishing bridge nicknames is safe enough for achieving
the goals (counting EC2, searching them via Atlas), unless somebody
(myself not excluded) shows us that we're wrong.

&gt; Again, thanks for running this analysis!

Thank you for your work. I did this because,
a) I had the idea to look at the data
b) you told me it's useful
c) I wanted to know how many can be located.

Finally I can say that it was a fine experience and I learned something
(at least about processing the data).

&gt; Thanks,
&gt; Karsten
&gt; 

Once again, thank you.

Best,
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120608205542</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-08 20:55:42-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Code Question - Wesleyan Interns</subject><body>

Hi Erik. Glad to hear that you're digging into the code. When you find
confusing bits feel free to revise the comments (if you find it to be
confusing then it's quite likely others will too - admittedly the
dance with the settings.cfg isn't the most straight forward code).

&gt; In run_tests.py, under the if statement that catches the case of integration
&gt; tests (line 268), there is a block of code that contains a number of
&gt; references to 'targets.'  To start, could you explain the formatting and
&gt; specific purpose of the settings.cfg file?

When running the integration tests you can provide them a set of
'targets' which are use cases that it should test, or attributes that
we want to test with. When you run 'run_tests.py --help' you'll get a
listing of the targets. The ones that start with "RUN_" configure the
tor instance that you're running tests against and the others are
attributes to augment a test instance with (for instance, making it
behave as if it's in a chroot environment).

The settings.cfg [1] is a configuration file that contains stuff that
I don't want to hardcode into the source. For instance, the text that
you get when running 'run_tests.py --help'. It also contains a mapping
between testing targets and the torrc attributes that they should
have. The "RUN_PASSWORD", for instance, is a target and the "PORT,
PASSWORD" are enumerations that are translated into real configuration
values by the runner [2].

For a description of the settings.cfg format see...
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.util.html

Hopefully this makes a bit more sense now. If it doesn't then let me
know what you still find to be confusing.

Cheers! -Damian

[1] https://gitweb.torproject.org/stem.git/blob/HEAD:/test/settings.cfg
[2] https://gitweb.torproject.org/stem.git/blob/HEAD:/test/runner.py#l81
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120609093514</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-06-09 09:35:14-0400</timestampReceived><subject>[tor-dev] How (not) to Build a Transport Layer for Anonymity Overlays</subject><body>

http://pade12.mytestbed.net/pade12-final6.pdf

To be presented this coming Friday in London:
http://pade12.mytestbed.net/technicalprogram/

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120901043741</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-09-01 04:37:41-0400</timestampReceived><subject>[tor-dev] Nick's August 2012 status report</subject><body>

THINGS I DID IN AUGUST

I spent a few days vacationing with my family in Maine; took a day off
for my birthday, and generally chilled out.

I merged lots of bugfixes and patches -- some mine, some other people's,
some requiring rewriting and review, some not.  This included some
security-related stuff that lost me a little sleep.  It also involved
hacking on some neat patches from Stewart Smith (with help from Jim
Meyering) to revamp our build system. We put out a new 0.2.2.

I fixed the more important (fixable) bugs in 0.2.3 (notably 6507 and
6244 and 6404), and pushed back on some others. IMO we're now ready to release
the (probably) last 0.2.3.x-rc.

I merged more patches into 0.2.4; see the new changes files there for
more info.  Lots of these were ipv6-related stuff from Linus.

I started a draft for BEGIN2 cells so I can try to get a more
future-proof IPv6 protocol implementation.  This is blocked while I
teach myself how DNSSEC works once and for all.

I tried to get a little more testing on alternatives to our current (bogus,
deteriorating) geoip supplier (see #6266) but didn't get anything beyond
my older inconclusive results.

I started working on an implementation for proposal 200, and a revised
202.

With help from some libevent users, I fixed an SSL bug that might have
been one of the (probably several) things making SSL bufferevents
unstable.  The fix appears in libevent 2.0.20-stable.

I agreed to fly out to SF to accept the EFF's pioneer awards on Tor's
behalf.

I had an anniversary and a birthday.

I proposed a crazy idea about a separate 0.2.3.x branch for DAs.

I chatted a little about metaformats, and spent a while catching up on
the ones I didn't know the details of. Currently I'm thinking YAML is a
hot mess, and ProtocolBuffers is not too bad actually.

There was this insane stegotorus bug that I sort of tracked down.  That
is, I can tell you which libevent commit to revert in order to make the
problem go away (that is, 3467f2fa3bbff0dab6865), but I can't for the
life of me figure out what's wrong with it. My current guess is that it
provokes an issue somewhere else.

A couple of friends/acquaintances approached me about working for Tor as
a project manager. I told them to email jobs@torproject.org.  I don't
think we've heard from them yet.

It would rock if we had a faster release schedule.  I've been trying to
find projects our size that do it right.


This coming month I must help Linus get our September IPv6 deliverables
deployed.  I need to help Andrea get her refactored channel abstraction
merged, and make sure she's got more stuff to do (and more interesting
stuff to do!) as she transitions to full-time.  I must get that blog
post I'm cowriting with Steven finished, and our paper for November
started.  And I need to write some of my own code too.

I also need to finalize a plan and a schedule for 0.2.4 and send them to
the world.


"when in danger or in doubt,"
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120901065157</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-09-01 06:51:57-0400</timestampReceived><subject>[tor-dev] Karsten's status report August 1--31</subject><body>

Hi everyone,

August was a long month for me, and I feel like I spent more time
reviewing other people's code than writing my own.  That's really cool!
 We have a bunch of new metrics-related code now, and I hope there will
be even more code contributions for me to review next month!

So, below is what I did in August.  Compared to last month's report, I
left out how much of my developer time I spent on these tasks and added
more links instead.

Best,
Karsten


Added three new graphs to the metrics website: the first two graphs show
our progress in operating 125 fast exits [1] (first half of #6498),
which is a deliverable for sponsor J [2]; the third graph shows
advertised bandwidth and bandwidth history by relay flags [3] (#6671).
Also fixed problems with cutting off enough days from graphs for which
we don't have enough data yet (#6593) and removed GetTor graphs and
related code to reduce future maintenance effort (#6395).

The gentle reader may have noticed that there was no mention of code
reviewing in the paragraph above, but just own code writing.  That's
correct, the metrics website is still a one-man show.  I'm planning to
split up the metrics website beast into a component that produces
JSON-formatted graph data [4] and ask other people to write components
visualizing the data, like Walter Kim's metrics website prototype [5].
Hopefully there will be more code contributions if people don't have to
mess with Java servlets in the current metrics website code.

Reviewed Sathya's great contributions to what we're now calling Compass
[6].  Compass is a website and command-line tool to filter the set of
currently running relays and group by same country or same AS.
It was originally written by delber to analyze Tor network diversity.
Sathya improved Compass by adding options to show only fast exits and
almost fast exits for the sponsor J project to add 125 fast exits [2],
and he wrote the website part.  Since Compass went live, we had a lot of
tickets opened by cypherpunks that we're almost unable to handle [7].
Patches welcome, Sathya and I will review them!

Improved graphs in Atlas [8] to show the displayed quantity on the y
axis (#5388) and added graphs on various probabilities to be selected by
clients (#5455).  Arturo reviewed and cleaned up these patches.
Speaking of code contributions, there are quite a few open tickets [9]
that would benefit from JavaScript developers wanting to help out!

Reviewed Pyonionoo [10], the Wesleyan students' Python rewrite of
Onionoo, the data provider behind Compass and Atlas.  More precisely,
they were working on the front-end portion of Onionoo which gives out
JSON-formatted data, not on the number-crunching back-end that Sathya is
about to rewrite in Python (#6452).  Basic functionality of Pyonionoo
works, but there are a few defects (#6707, #6708) and one enhancement
(#6709) that we'll have to work on before deploying it.  Of course, we
have more open tickets for the Java and/or Python Onionoo [11].

Converted even more old tech reports into the new Tor Tech Report format
[12] (#5405).  The goal here is to have a single place for all reports
we produce and that other researchers can use to cite our work.

Set up Rob's Tor simulator Shadow [13] to see if there are any usability
issues that would prevent researchers from using it.  Turns out it's not
just a very powerful tool to evaluate changes to the Tor code, but also
doesn't require its users to be rocket scientists.  I'm planning to play
more with Shadow in September and walk through the instructions in
Shadow's wiki [14] to find any remaining pitfalls.  And then I'll
encourage Roger and Rob to blog about Shadow.

[1] https://metrics.torproject.org/fast-exits.html
[2] https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorJ
[3] https://metrics.torproject.org/network.html#bandwidth-flags
[4] https://metrics.torproject.org/graphs/relays-by-country
[5] http://tigerpa.ws/tor_metrics/
[6] https://compass.torproject.org/
[7]
https://trac.torproject.org/projects/tor/query?component=Compass&amp;status=!closed
[8]
https://atlas.torproject.org/#details/D223399907113A1F216AAA64997BC1D4CFA8E1AC
[9]
https://trac.torproject.org/projects/tor/query?component=Atlas&amp;status=!closed
[10] https://gitweb.torproject.org/pyonionoo.git
[11]
https://trac.torproject.org/projects/tor/query?component=Onionoo&amp;status=!closed
[12] https://research.torproject.org/techreports.html
[13] http://shadow.cs.umn.edu/
[14] https://github.com/shadow/shadow/wiki

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120901120307</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-09-01 12:03:07-0400</timestampReceived><subject>[tor-dev] Linus' August 2012 status report</subject><body>

Hi,

What happened in August.

Got most of #4564 working and parts of it merged to master, including

- Directory authorities vote for IPv6 public relays (micro descriptors
  not yet merged)
- Relays bind to and publish IPv6 addresses
- Clients use IPv6 relays in consensus (not using micro descriptors)

Created an IPv6 status and road map page roadmaps/Tor/IPv6 [1].

Tickets worked on include 4455, 4620, 5535, 6362, 6363, 6364, 6423,
6514, 6621.

Made an interview for the Swedish paper Ny Teknik.


What's happening in September.

September is the month of getting Tor on IPv6 deployed! Primarily the
client to non-private bridges parts and hopefully also client to
relays. See above mentioned IPv6 road map page [1] for details.


[1] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6

-- 
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120902084724</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-09-02 08:47:24-0400</timestampReceived><subject>Re: [tor-dev] Tor on IPv6 roadmap and status page</subject><body>

On Mon, 27 Aug 2012 09:13:37 +0000, Linus Nordberg wrote:
...
&gt; I think that we should allow IPv6 addresses in the HiddenServicePort

Turns out it already does (tor_addr_port_lookup()). Seems that changing
the parsing &amp; processing for IPv6 'bridge' already did the trick.

Tested with ::1 only, have not real v6 here and now, and the
linklocal%vboxnet0 notation doesn't work here at all.

&gt; option too and that proposal 186 should be updated to consider hidden
&gt; services too.

That probably remains to be done. I wanted to get my feet wet in the
codebase. :-)

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120904013300</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-09-04 01:33:00-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - August 2012</subject><body>

Hi all. I spent most of August, like the prior month, traveling. This
time I attended Toorcamp [1] and went on vacation. Both were pleasant
and relaxing, but not terribly conducive to coding so I don't have
much to report...

* Descriptor CSV Export Functionality

Naif proposed export functionality for Tor server descriptors a while
back [1], which Eric and Megan took the first stab at [2]. I ended up
revising this quite a bit [4], but it turned out nicely.

* Caching Expansion and Test Prompt

Added caching for GETCONF and static GETINFO queries. I also added a
handy little script for a debugging interpretor. It kicks off Tor,
then provides an interactive python prompt with a controller instance
to it (optionally shutting Tor down afterward). Ravi code reviewed
these changes [5] and volunteered to do code reviews of my future work
as well.

* Consensus Parsing

Over the last few weeks Ravi's been working on a patch to parse
network status documents [6]. It's functional, but missing unit tests
and deviates from the parsing style and strict validation done for the
other descriptor types so I'm taking a turn with the code. Thus far
I'm done revising and adding tests for router status entries, and now
working on the document. Changes are available in the
'document-parsing' branch of my repo [7].

Parsing these documents is a far larger task than I thought
(especially if you include v2 documents and microdescriptors), so
working on this branch will probably keep me occupied for much of
September.

* Controller Expansion

Ravi has gone on a hacking binge, adding support for USEFEATURE [8],
SIGNAL [9], EXTENDCIRCUIT [10], and SETCIRCUITPURPOSE [11].

Cheers! -Damian

[1] http://www.toorcamp.org/
[2] https://trac.torproject.org/6171
[3] https://trac.torproject.org/6512
[4] https://gitweb.torproject.org/stem.git/commitdiff/7022021c4207a0066cb93261629f2ba020d307f6
[5] https://trac.torproject.org/6631
[6] https://trac.torproject.org/6569
[7] https://gitweb.torproject.org/user/atagar/stem.git/shortlog/refs/heads/document-parsing
[8] https://trac.torproject.org/6417
[9] https://trac.torproject.org/6659
[10] https://trac.torproject.org/6666
[11] https://trac.torproject.org/6670
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120905194045</emailId><senderName>coderman</senderName><senderEmail>coderman@gmail.com</senderEmail><timestampReceived>2012-09-05 19:40:45-0400</timestampReceived><subject>Re: [tor-dev] Tor bufferbloat</subject><body>

On Wed, Sep 5, 2012 at 11:52 AM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; ... the problem of "bufferbloat" which is encountered in network
&gt; bottlenecks.
&gt;
&gt; https://en.wikipedia.org/wiki/Bufferbloat
&gt; http://www.bufferbloat.net/

yup. particularly bad at the edges...


&gt; Anyhow, I looked around for some recent studies on the Tor network
&gt; about such congestion issues but I can't find any information on if
&gt; this phenomenon is observed on the Tor network.
&gt;
&gt; Someone knows about that?

there are half a dozen papers on the topic in anonbib:
  http://freehaven.net/anonbib/topic.html

and alternate proposals like IPsec telescopes and DTLS transports with
end-to-end congestion control/avoidance specifically to avoid queuing
at intermediate hops.

i'm not aware of research on AQM applied to low latency anonymous
networks, but i'm not up to date on the latest research :)

best regards,
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120905230214</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-09-05 23:02:14-0400</timestampReceived><subject>[tor-dev] (FWD) Re: known attacks on Tor</subject><body>

Hi folks,

Here's an email I wrote to a researcher who is working on categorizing
anonymity attacks. I figured I should share it with you in case it's
useful in some way.

It's also related to my talk at
https://www.cosic.esat.kuleuven.be/ecrypt/provpriv2012/program.html

and I expect to use it as background for my discussions at the upcoming
Dagstuhl:
http://www.dagstuhl.de/no_cache/en/program/calendar/semhp/?semnr=12381

--Roger

----- Forwarded message from Roger Dingledine &lt;arma@mit.edu&gt; -----

&gt; If you have any suggestions about which paper on each attack is most
&gt; likely to provide such an explanation, please send them to me as soon
&gt; as possible.
&gt; 
&gt; &gt; - "Traffic confirmation attack". If he can see/measure the traffic flow
&gt; &gt; between the user and the Tor network, and also the traffic flow between
&gt; &gt; the Tor network and the destination, he can realize that the two flows
&gt; &gt; correspond to the same circuit:
&gt; &gt; http://freehaven.net/anonbib/#SS03
&gt; &gt; http://freehaven.net/anonbib/#timing-fc2004
&gt; &gt; http://freehaven.net/anonbib/#danezis:pet2004
&gt; &gt; http://freehaven.net/anonbib/#ShWa-Timing06
&gt; &gt; http://freehaven.net/anonbib/#murdoch-pet2007
&gt; &gt; http://freehaven.net/anonbib/#ccs2008:wang
&gt; &gt; http://freehaven.net/anonbib/#active-pet2010

It depends in what way you want to become more precise.

I think the #SS03 paper might have the simplest version of the attack
("count up the number of packets you see on each end"). The #timing-fc2004
paper introduces the notion of a sliding window of counts on each side.
The #murdoch-pet2007 one looks at how much statistical similarity you
can notice between the flows when you are only sampling a small fraction
of packets on each side.

&gt; &gt; - "Congestion attack". An adversary can send traffic through nodes or
&gt; &gt; links in the network, then try to detect whether the user's traffic
&gt; &gt; flow slows down:
&gt; &gt; http://freehaven.net/anonbib/#torta05
&gt; &gt; http://freehaven.net/anonbib/#torspinISC08
&gt; &gt; http://freehaven.net/anonbib/#congestion-longpaths

Section 2 and the first part of Section 3 in #congestion-longpaths is
probably your best bet here. It actually provides a good pretty overview
of related work including the passive correlation attacks above.

If by 'more precise' you mean you want to know exactly what the threat
model is for this attack, I'm afraid it varies by paper. In #torta05
they assume the adversary runs the website, and when the target user starts
to fetch a large file, they congest (DoS) relays one at a time until they
see the download slow down.

In #congestion-longpaths they assume the adversary runs the exit relay
as well, so they know the middle relay, and the only question is which
relay is the guard (first) relay.

In #torspinISC08 on the other hand, they preemptively try to DoS the
whole network except the malicious relays, so the target user will end
up using malicious relays for her circuit.

&gt; &gt; - "Latency or throughput fingerprinting". While congestion attacks
&gt; &gt; by themselves typically just learn what relays the user picked (but
&gt; &gt; don't break anonymity as defined above), they can be combined with
&gt; &gt; other attacks:
&gt; &gt; http://freehaven.net/anonbib/#tissec-latency-leak
&gt; &gt; http://freehaven.net/anonbib/#ccs2011-stealthy
&gt; &gt; http://freehaven.net/anonbib/#tcp-tor-pets12

These are three separate attacks.

In #tissec-latency-leak, they assume the above congestion attacks work
great to identify Alice's path, and then the attacker builds a parallel
circuit using the same path, finds out the latency from them to the
(adversary-controlled) website that Alice went to, and then subtracts
out to find the latency between Alice and the first hop.

#ccs2011-stealthy actually proposes a variety of variations on these
attacks. They show that if Alice uses two streams on the same circuit,
the two websites she visits can use throughput fingerprinting to
realize they're the same circuit. They also show that by looking at
the throughput Alice gets from her circuit, you can rule out a lot of
relays that wouldn't have been able to provide that throughput at that
time. And finally, they show that if you build test circuits through
the network and then compare the throughput your test circuit gets with
the throughput Alice gets, you can guess whether your circuit shares a
bottleneck relay with Alice's circuit. Where "show" should probably be
in quotes, since it probably works sometimes and not other times, and
nobody has explored how robust the attack is.

#tcp-tor-pets12 has the adversary watching Alice's local network, and
wanting to know whether she visited a certain website. The adversary
exploits vulnerabilities in TCP's window design to spoof RST packets
between every exit relay and the website in question. If they do it
right, the connection between the exit relay and the website cuts its
TCP congestion window in response, leading to a drop in throughput on
the flow between the Tor network and Alice. In theory. It also works
in the lab, sometimes.

I also left out
http://freehaven.net/anonbib/date.html#esorics10-bandwidth
which uses a novel remote bandwidth estimation algorithm to try to
estimate whether various physical Internet links have less bandwidth when
Alice is fetching her file. In theory this lets them walk back towards
Alice, one traceroute-style hop at a time. In practice they need an
Internet routing map (these are notoriously messy for the same reasons
the Decoy Routing people are realizing), and also Alice's flows have to be
quite high throughput for a long time.

&gt; &gt; - "Website fingerprinting". If the adversary can watch the user's
&gt; &gt; connection into the Tor network, and also has a database of traces of
&gt; &gt; what the user looks like while visiting each of a variety of pages,
&gt; &gt; and the user's destination page is in the database, then in some cases
&gt; &gt; the attacker can guess the page she's going to:
&gt; &gt; http://freehaven.net/anonbib/#hintz02
&gt; &gt; http://freehaven.net/anonbib/#TrafHTTP
&gt; &gt; http://freehaven.net/anonbib/#pet05-bissias
&gt; &gt; http://freehaven.net/anonbib/#Liberatore:2006
&gt; &gt; http://freehaven.net/anonbib/#ccsw09-fingerprinting
&gt; &gt; http://freehaven.net/anonbib/#wpes11-panchenko
&gt; &gt; http://freehaven.net/anonbib/#oakland2012-peekaboo

#oakland2012-peekaboo aims to be a survey paper for the topic, so it's
probably the right one to look at first.

&gt; &gt; - "Correlating bridge availability with client activity."
&gt; &gt; http://freehaven.net/anonbib/#wpes09-bridge-attack

If you run a relay and also use it as a client, the fact that the
adversary can route traffic through you lets him learn about your
client activity. Section 1.1 summarizes:

2. A bridge always accepts connections when its operator is using
Tor. Because of this, an attacker can compile a list of times when
a given operator was either possibly or certainly not using Tor, by
repeatedly attempting to connect to the bridge. This list can be used to
eliminate bridge operators as candidates for the originator of a series
of connections exiting Tor. We demonstrate empirically that typically,
a small set of linkable connections is sufficient to eliminate all but
a few bridges as likely originators.

3. Traffic to and from clients connected to a bridge interferes with
traffic to and from a bridge operator. We demonstrate empirically that
this makes it possible to test via a circuit-clogging attack [17, 15]
which of a small number of bridge operators is connecting to a malicious
server over Tor.  Combined with the previous two observations, this
means that any bridge operator that connects several times, via Tor,
to a web-site that can link users across visits could be identified by
the site's operator.

&gt; &gt; I tried to keep this list of "excepts" as small as possible so it's not
&gt; &gt; overwhelming, but I think the odds are very high that if the ratpac comes
&gt; &gt; up with other issues, I'll be able to point to papers on anonbib that
&gt; &gt; discuss these issues too. For example, these two papers are interesting:
&gt; &gt; http://freehaven.net/anonbib/#ccs07-doa

Traditionally, we calculate the risk that Alice's circuit is controlled
by the adversary as the chance that she chooses a bad first hop and a bad
last hop. They're assumed to be independent. But if an adversary's relay
is chosen anywhere in the circuit yet he *doesn't* have both the first
and last hop, he should tear down the circuit, forcing Alice to make a
new one and roll the dice again. Longer path lengths (once thought to
make the circuit safer) *increase* vulnerability to this attack.

I think the guard node design helps here, but whether that's true is an
area of active research.

&gt; &gt; http://freehaven.net/anonbib/#bauer:wpes2007

If you lie about your bandwidth, you can get more traffic than you
"should" get based on bandwidth investment. In theory we've solved this by
doing active bandwidth measurement:
https://blog.torproject.org/blog/torflow-node-capacity-integrity-and-reliability-measurements-hotpets
but in practice it's not fully solved:
https://trac.torproject.org/projects/tor/ticket/2286

--Roger

----- End forwarded message -----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120906215543</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-09-06 21:55:43-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@freehaven.net):

&gt; On Tue, Sep 4, 2012 at 10:57 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt; 
&gt; Hi, Jake!
&gt; 
&gt; &gt; I think this is a fine plan - my preference is generally to track git
&gt; &gt; tip for urras. I'm happy to track whatever branches need experimenting
&gt; &gt; or lots of use. I will need to acquire some IPv6 space for the machine
&gt; &gt; soon for it to be of maximal usefulness in the future....
&gt; 
&gt; What I really need to hear on this question is whether there are
&gt; directory authority operators who are *not* comfortable tracking
&gt; 0.2.4.x-alpha, but who *would* be comfortable running a hypothetical
&gt; 0.2.3-da series.
&gt; 
&gt; If there are are a significant number of such operators, it might be
&gt; worthwhile to make an 0.2.3-da.  But if everybody's happy tracking
&gt; 0.2.4.x or tracking git, there's no real reason to put out an
&gt; 0.2.3-da., I think.

For me, it comes down to the update frequency. It's fairly painful for
me to update my dirauth, or even to change its config. If we expect
0.2.4.x to require very frequent updates on the part of dirauth
operators, I think I'd prefer 0.2.3-da.

I don't require packages, though. I also build directly from git.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120912155550</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-12 15:55:50-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

ficus@robocracy.org:

&gt; I would like to contribute to the torouter (aka TorRouter, aka
&gt; OnionBox?) project, with the intention of getting a "functional"
&gt; development image for the DreamPlug hardware released in the next few
&gt; weeks.

Great!

&gt; The goals of the torouter project seem a bit vague (especially w/r/t a
&gt; transparent torified WiFi access point), perhaps this is why development
&gt; slowed down previously.

I fear this thread goes unanswered and someone willing to contribute
gets lost because of unresponsiveness.

Does torproject have a problem to reach decisions?

Who is in charge for the torrouter project?

I mean, ficus could create The Best Torrouter Image, but without any
review from torproject and without torproject calling the image official
and supporting it, barely anyone would know and use the image.

If he proposes a design and also implements it, torproject has to review
the design and implementation. Someone has to make a final say in this,
i.e. this,
- is a must have
- is a no go
- is a nice to have
- we don't care about but go ahead
- etc.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910153849</emailId><senderName></senderName><senderEmail>ficus</senderEmail><timestampReceived>2012-09-10 15:38:49-0400</timestampReceived><subject>[tor-dev] torrouter development</subject><body>


Hello tor-dev!

I would like to contribute to the torouter (aka TorRouter, aka OnionBox?) 
project, with the intention of getting a "functional" development image 
for the DreamPlug hardware released in the next few weeks.

The goals of the torouter project seem a bit vague (especially w/r/t a 
transparent torified WiFi access point), perhaps this is why development 
slowed down previously. I will attempt a design document and 
specification, but mostly focus on making the core components (debian, 
tor, web interface) functional and configurable, such that they could be 
leveraged by others as solutions to specific use cases. Will this be 
useful to others?

It seems like the preferred collaboration tool is the trac wiki and 
tickets. Many of the torouter tickets seem stale and incomplete, and the 
roadmap on the trac wiki is very out of date. Unless there is advice i'll 
ignore those but continue discussion on tickets like #3854 (Summary of 
outstanding things with Torouter) and #3453 (Torouter desires and 
features).

cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910181415</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-10 18:14:15-0400</timestampReceived><subject>Re: [tor-dev] torrouter development</subject><body>

(For those just seeing the thread, who don't know...)

Latest (public) statement on the topic:
https://lists.torproject.org/pipermail/tor-talk/2012-March/023799.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912163124</emailId><senderName></senderName><senderEmail>ficus</senderEmail><timestampReceived>2012-09-12 16:31:24-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>


On Wed, 12 Sep 2012, adrelanos wrote:

&gt;&gt; The goals of the torouter project seem a bit vague (especially w/r/t a
&gt;&gt; transparent torified WiFi access point), perhaps this is why development
&gt;&gt; slowed down previously.
&gt;
&gt; I fear this thread goes unanswered and someone willing to contribute
&gt; gets lost because of unresponsiveness.

Between the linked mailing list message from last March [0] and the goals 
at the bottom of ticket #3453 [1] I have plenty to get started.

I think the project will get more interest and attention from more 
experienced (and busy) Tor developers once the "broken, does not turn on" 
type problems are fixed; at that point a more formal design/review 
iteration on specific device configurations and functionality can take 
place.

[0]: https://lists.torproject.org/pipermail/tor-talk/2012-March/023799.html
[1]: https://trac.torproject.org/projects/tor/ticket/3453
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912164143</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-09-12 16:41:43-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

&gt; I fear this thread goes unanswered and someone willing to contribute
&gt; gets lost because of unresponsiveness.
&gt;
&gt; Does torproject have a problem to reach decisions?

Agreed that we should be more responsive to potential volunteers.
However, be aware that we have over 26 different projects going on
right now and far fewer than 26 active developers. We can't cover
everything as well as we'd like - help wanted!

https://www.torproject.org/getinvolved/volunteer.html.en#Projects

Runa and Jake are maintaining Torouter, but each of them also juggle
numerous other projects.

Sounds like you're volunteering to become a new maintainer of the
project, adrelanos?

-Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912170636</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-12 17:06:36-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

Damian Johnson:
&gt;&gt; I fear this thread goes unanswered and someone willing to contribute
&gt;&gt; gets lost because of unresponsiveness.
&gt;&gt;
&gt;&gt; Does torproject have a problem to reach decisions?
&gt; 
&gt; Agreed that we should be more responsive to potential volunteers.
&gt; However, be aware that we have over 26 different projects going on
&gt; right now and far fewer than 26 active developers. We can't cover
&gt; everything as well as we'd like - help wanted!

Someone already offered help: ficus.

&gt; Runa and Jake are maintaining Torouter, but each of them also juggle
&gt; numerous other projects.

Are they authorized to make decisions regarding the Torrouter project?

(I mean decisions like "We do (not) want the transparent proxy
feature.", "This design is ok.", "This Torrouter image is good, ok let's
call it official stable 1.0.".)

&gt; Sounds like you're volunteering to become a new maintainer of the
&gt; project, adrelanos?

ficus's thread "[tor-dev] torrouter development)" may be seen as
application to become maintainer for Torrouter. Not me.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912183046</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-09-12 18:30:46-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

&gt; I think the project will get more interest and attention from more
&gt; experienced (and busy) Tor developers once the "broken, does not turn on"
&gt; type problems are fixed; at that point a more formal design/review iteration
&gt; on specific device configurations and functionality can take place.

Hi ficus. I spoke with Runa on irc and it sounds like this project is
pretty much mothballed at the moment. You're certainly welcome to hack
on it, but be aware that it doesn't really have a maintainer at the
moment.

As is tradition for open source projects, you're certainly welcome to
fork it. Also, we have several other things listed on the projects
page that are being far more actively developed (if you'd like to work
with one of us)...
https://www.torproject.org/getinvolved/volunteer.html.en#Projects

Shameless plug: I'm certainly more than happy to have help if python
related stuff strikes your fancy. ;)

-Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912205010</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-09-12 20:50:10-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

adrelanos:
&gt; Damian Johnson:
&gt;&gt;&gt; I fear this thread goes unanswered and someone willing to contribute
&gt;&gt;&gt; gets lost because of unresponsiveness.
&gt;&gt;&gt;
&gt;&gt;&gt; Does torproject have a problem to reach decisions?
&gt;&gt;
&gt;&gt; Agreed that we should be more responsive to potential volunteers.
&gt;&gt; However, be aware that we have over 26 different projects going on
&gt;&gt; right now and far fewer than 26 active developers. We can't cover
&gt;&gt; everything as well as we'd like - help wanted!
&gt; 
&gt; Someone already offered help: ficus.

I've discussed this with ficus at length. We have some exciting plans
lined up.

&gt; 
&gt;&gt; Runa and Jake are maintaining Torouter, but each of them also juggle
&gt;&gt; numerous other projects.
&gt; 
&gt; Are they authorized to make decisions regarding the Torrouter project?
&gt; 

Uh, I guess as much as anyone?

&gt; (I mean decisions like "We do (not) want the transparent proxy
&gt; feature.", "This design is ok.", "This Torrouter image is good, ok let's
&gt; call it official stable 1.0.".)

Yep. I opened nearly all of the Torouter tickets with these kinds of
discussions in mind - until Ficus had popped up, we'd had nearly no
active discussions. I think the best way to work out these issues is on
trac where we can discuss them issue by issue and keep track of the
conversations.

&gt; 
&gt;&gt; Sounds like you're volunteering to become a new maintainer of the
&gt;&gt; project, adrelanos?
&gt; 
&gt; ficus's thread "[tor-dev] torrouter development)" may be seen as
&gt; application to become maintainer for Torrouter. Not me.

We've already discussed working on it together. Chill.

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120907220414</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-09-07 22:04:14-0400</timestampReceived><subject>Re: [tor-dev] Tenative schedule for Tor 0.2.4 [Or, why I might reject your patches in November-&gt;Marc</subject><body>

On Fri, Sep 7, 2012 at 5:53 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Mike Perry (mikeperry@torproject.org):
&gt;&gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt;&gt;
&gt;&gt; &gt; Last year, I announced a tenative schedule for 0.2.3.x.  We didn't
&gt;&gt; &gt; stick to it, and things have gone a little pear-shaped with getting
&gt;&gt; &gt; 0.2.3.x stabilized, but I think with a few tweaks we can use something
&gt;&gt; &gt; similar to get a good schedule out for 0.2.4.x.
&gt;&gt; &gt;
&gt;&gt; &gt; My goals remain about what they were before: get release out faster by
&gt;&gt; &gt; getting better at saying "no" to features after a release window.  My
&gt;&gt; &gt; target is March or April 2013.
&gt;&gt; &gt;
&gt;&gt; &gt; To that end:
&gt;&gt; &gt;
&gt;&gt; &gt; [*snip schedule dates I'm certain to forget anyways*]
&gt;&gt; &gt;
&gt;&gt; &gt; On the meaning of "feature": I'm probably going to argue that some
&gt;&gt; &gt; things that you think are bugfixes are features.  I'm probably going
&gt;&gt; &gt; to argue that your security bugfix is actually a security feature.
&gt;&gt; &gt; I'm probably even going to argue that most non-regression bugfixes are
&gt;&gt; &gt; features.  Let's try to get a release out *early* in 2013 this time,
&gt;&gt; &gt; come heck or high water.
&gt;&gt;
&gt;&gt; For people who are only occasionally/tangentially involved in tor-core
&gt;&gt; development like myself, it might be useful to have some kind of active
&gt;&gt; ping/reminder on tickets with the Tor-0.2.4.x-final trac milestone
&gt;&gt; around the deadline deadline date(s) you deem applicable for that
&gt;&gt; ticket.
&gt;&gt;
&gt;&gt; Unless it is way more work for you, I think I would prefer per-ticket
&gt;&gt; reminders on trac to blanket email announcements, so I know exactly what
&gt;&gt; and when I should care about getting something done if I really want it
&gt;&gt; done, and what deadline category you think each thing falls in to.

It is indeed more work for me to re-evaluate every Tor ticket every
month; maybe we can come up with some way to make it less work so that
everybody gets the info they need without me doing monthly triage?  Or
maybe I should just commit to monthly triage.

&gt; Just saw that there's already 184 tickets currently in
&gt; Tor-0.2.4.x-final. Wow.

TBF, probably not every one is really for 0.2.4.  People put stuff in
the next release's milestone as an aspiration pretty often.  Also,
there are probably things (proposals, intended proposals, stuff in
Tor: undecided, vague intentions) that ought to have tickets for
0.2.4.x but don't.

&gt; So maybe instead: We can all try to tag things in Tor-0.2.4.x-final with
&gt; the right deadline tag, and then you can just do announcement emails?
&gt; And/or the project coordinator can handle pinging people/tickets at the
&gt; deadline points?

AFAIK, the right deadline tag would be small vs large and
proposal-needed vs no-proposal-needed?  I'd be glad for these tags to
exist, so long as somebody else helps me make them, and so long as I
have the freedom to decide after the fact that I was wrong about
something.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120913172158</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-09-13 17:21:58-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

&gt; Damian,
&gt;
&gt; I saw on the tor-dev mailing list you would be happy to have help with
&gt; Python related Tor work.  I'm game. I'd love to help the Tor Project.

Hi Scott. Glad you want to help! These are great questions so I'm
looping in Ravi (another developer who's actively hacking on stem) and
tor-dev in case other people are interested.

&gt; I looked through the Easy bugs for Arm but it seems that Stem is where the
&gt; effort is going now.

Yup. Arm was experiencing really bad feature creep so I swapped my
focus to stem around a year back. Here's the relevant links for
stem...

* Development Wiki
https://trac.torproject.org/projects/tor/wiki/doc/stem

* Gitweb
https://gitweb.torproject.org/stem.git

* Bug Tracker
http://tinyurl.com/stem-bugs

&gt; Should I focus on Stem?
&gt; Do you have a list of easier tasks to get my feet wet with?

Sure! We're currently working to make it feature complete and prepare
for its initial release. Development tasks tend to fall into a few
general categories...

===================
Controller Functionality
===================

Stem is primarily a replacement for TorCtl, a controller library used
by several of our other projects (arm, SoaT, TorBEL, etc). Ravi's been
focusing on making the Controller class feature complete. This is
mostly located in...

https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/control.py

Some nice introductory tasks here would be...

* Add methods for querying relay descriptors

The first bits of this is very easy, while the later parts get a bit
more interesting...
- Add a get_relay() method that calls
get_info("desc/id/[fingerprint]") then return a ServerDescriptor for
it.
- Write unit and integ tests for the addition.
- [tricky part] Add a get_all_relays() method that provides an
iterator for all of the descriptors. The tricky bit is that the
BaseController provides discrete controller messages, but in this case
the "GETINFO desc/all" output is so large that we want to process it
while it comes in. This means changing stem's underlying message
processing system.

* Split low and high level controller methods

The Controller class is growing to be pretty bulky, and its methods
can generally be split into two categories...

- Low level methods that simply mirror what the control-spec provides.
- Higher level methods (like the get_relay() and get_all_relays()
above) which are more user friendly and build on what the control spec
provides.

Ravi: Do you have any thoughts on this? Do you think this would be a
good way to break up the controller, or would this just make it more
confusing? Alternatively we could wait until we try using stem in arm
to see if this makes sense or not...

===============
Descriptor Parsing
===============

This is where my focus has been for the last couple weeks. A
controller needs to be able to parse Tor's descriptor content
(GETINFO's desc, ns, and md responses). This has expanded to include
file descriptors and other descriptor content, so stem can be used as
a python replacement for MetricsLib. This is useful for projects like
Onionoo's python counterpart.

This is a somewhat dry part of stem to work on, so unless you like
reading specs and writing a parser for them this might not be a great
section to work on. That said, if detail oriented parsing and
validation sounds interesting then there's lots 'o tasks here.

======
Clients
======

Stem doesn't yet have any clients, and will certainly need some before
we make a release in order to work out the kinks. Our plan for this
is...

* Port arm's interpretor
Arm's control interpretor is actually a standalone script that can,
with a little work, be used independently from the rest of arm. It
would be interesting to see what an stem based control interpretor
would look like...

* Port arm's torTools module
Arm makes very heavy use of the controller, and abstracts all of its
TorCtl usage behind a wrapper module...
https://gitweb.torproject.org/arm.git/blob/HEAD:/src/util/torTools.py

This abstraction should make arm reasonably easy to move to stem.
Also, stem's getting many of that wrapper's features so arm's codebase
could be greatly simplified after we move.

* Port TorBEL
TorBEL would be a great candidate after we work out most of stem's
rough edges by moving arm. It'll likely provide some interesting use
cases, though this is still a ways out.

=======
Usability
=======

Stem doesn't yet have a site, nor have I posted its sphinx
documentation anywhere. A few things that we should do here is...

* Make a pretty site
Ideally I'd like to write the site itself with sphinx so we have a
consistent look between the front page and the documentation.

* Site with auto-updating documentation
This would involve setting up a site with a cron process that fetches
stem and, if changed, serves up the new documentation.

* Tidy up sphinx docs
Stem has a lot of documentation, but we haven't really looked much at
the sphinx output with an eye for making it developer friendly. It
would be nice to have people try to use stem, and improve the
documentation for the confusing bits.

* Examples
We should ask tor-dev@ for a list of bite sized Tor tasks that people
commonly want (like "print my relay's bandwidth" or "list all of the
relays with the BadExit flag"). Then write example scripts that do
this, and provide them on stem's site to give example usage.

&gt; If so, how hard is it to set up a dev environment?

Very, very easy. Assuming that you have python, git, and tor installed
simply do the following.

* Get a copy of stem
git clone git://git.torproject.org/stem.git

* To run its unit tests
cd stem
./run_tests.py --unit

* To run its integ tests
./run_tests.py --integ

&gt; Does the Tor Project have a formal mentorship program?  How does that work?

I'm not sure what you mean by a 'formal mentorship program'. I've
mentored students through GSoC and Wesleyan's open source program if
that answers your question.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120924081354</emailId><senderName>Christian Kujau</senderName><senderEmail>lists@nerdbynature.de</senderEmail><timestampReceived>2012-09-24 08:13:54-0400</timestampReceived><subject>[tor-dev] Compiling tor against OpenSSL_1_0_2-stable</subject><body>

Hi,

while trying to compile the latest git-checkout against openssl-1.0.2, 
I've come across the following issues:

----
make[1]: Entering directory `/usr/local/src/tor-git'
  CC     src/common/tortls.o
cc1: warnings being treated as errors
In file included from /opt/openssl/include/openssl/ssl.h:1382,
                 from src/common/tortls.c:36:
/opt/openssl/include/openssl/srtp.h:138: error: redundant redeclaration of 
‘SSL_get_selected_srtp_profile'
/opt/openssl/include/openssl/srtp.h:135: note: previous declaration of 
‘SSL_get_selected_srtp_profile' was here
make[1]: *** [src/common/tortls.o] Error 1
make[1]: Leaving directory `/usr/local/src/tor-git'
make: *** [all] Error 2
----

There is an open ticket[0] in the openssl bugtracker for this. While the 
proper solution is to fix openssl/include/openssl/srtp.h, I wanted to 
compile without -Werror. However, when adding CFLAGS="-Wno-error" during 
./configure, -Werror is still added to the ./Makefile and overriding 
-Wno-error. When adding CFLAGS="-Wno-error" during "make" all the other 
CFLAGS are gone too. Thus I ended up removing -Werror from the Makefile 
and tortls.o compiled.

While this is really an issue with openssl, I wanted to have this 
documented, just in case anybody else tries the same. If someone knows of 
a better workaround (i.e. compiling just tortls.c with -Wno-error and 
everything else with -Werror), please share! :-)


A bit later, compilation stops again:

----
  CCLD   src/or/tor
src/common/libor-crypto.a(aes.o): In function `aes_crypt':
aes.c:(.text+0x860): undefined reference to `CRYPTO_ctr128_encrypt'
collect2: ld returned 1 exit status
make[1]: *** [src/or/tor] Error 1
make[1]: Leaving directory `/usr/local/src/tor-git'
make: *** [all] Error 2
----

Hm, this leaves me puzzled for now. CRYPTO_ctr128_encrypt is still 
included in openssl-1.0.2 and src/common/aes.o seems to be built with
this function included as well, not sure why src/common/libor-crypto.a
complains now:

----
$ grep -r CRYPTO_ctr128_encrypt /opt/openssl/
/opt/openssl/include/openssl/modes.h:void CRYPTO_ctr128_encrypt(const unsigned char \
                *in, unsigned char *out,
/opt/openssl/include/openssl/modes.h:void CRYPTO_ctr128_encrypt_ctr32(const unsigned \
char *in, unsigned char *out, Binary file /opt/openssl/bin/openssl matches
Binary file /opt/openssl/lib/libcrypto.a matches

$ grep -r CRYPTO_ctr128_encrypt .
./src/common/aes.c:      CRYPTO_ctr128_encrypt((const unsigned char *)input,
Binary file ./src/common/aes.o matches
Binary file ./src/common/libor-crypto.a matches
----

Why do I (try to) build against openssl-1.0.2? I'm on Debian/stable which 
still ships openssl-0.9.8o and I wanted to get rid of this "use a more recent 
OpenSSL" message during startup :-)

Otherwise, today's git-checkout of tor runs just fine when built against 
openssl-0.9.8 (on powerpc) - yay!

Christian.

[0] http://rt.openssl.org/Ticket/Display.html?id=2724
-- 
BOFH excuse #330:

quantum decoherence
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120924221637</emailId><senderName>"succer110 () tiscali ! it"</senderName><senderEmail>succer110@tiscali.it</senderEmail><timestampReceived>2012-09-24 22:16:37-0400</timestampReceived><subject>[tor-dev] information about "last_restarted"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi everyone tor devel!
I would like to know more information about last_restarted information. 
- It's possibile to forge this kind of data or is somehow certified by the tor \
network?

Sometime, while sampling hourly some data by onionoo i've noticed some difference in \
                the uptime by + or - a few seconds in this value.
- Any idea of how this is possible?!
- In which file do i find the code that handle this value?

Thank you!


Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più di uno \
spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui! Un amico al \
mese e parli e navighi sempre gratis: http://freelosophy.tiscali.it/


[Attachment #5 (text/html)]

Hi everyone tor devel!&lt;br&gt;I would like to know more information about last_restarted \
information. &lt;br&gt;- It's possibile to forge this kind of data or is somehow \
certified by the tor network?&lt;br&gt;&lt;br&gt;Sometime, while sampling hourly some data by \
onionoo i've noticed some difference in the uptime by + or - a few seconds in this \
value.&lt;br&gt;- Any idea of how this is possible?!&lt;br&gt;- In which file do i find the code \
that handle this value?&lt;br&gt;&lt;br&gt;Thank you! &lt;br/&gt;&lt;br/&gt;Invita i tuoi amici e Tiscali ti \
premia! Il consiglio di un amico vale più di uno spot in TV. Per ogni nuovo abbonato \
30 € di premio per te e per lui! Un amico al mese e parli e navighi sempre gratis: \
&lt;a target='_blank'  href="http://freelosophy.tiscali.it/"&gt;http://freelosophy.tiscali.it/&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120926171424</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-09-26 17:14:24-0400</timestampReceived><subject>[tor-dev] automatic play of video with webbrowser</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, all:

      I want to investigate on video streaming on tor. I want to use tor
and browser to play some videos for many times so I want to automate the
operation.
      Are there any scripts that can automate the playing of videos(like
from youtube,etc)

      I know playing videos can impediment the anonymity, but that is not
my concern.

      Thanks!

[Attachment #5 (text/html)]

Hi, all:&lt;br&gt;&lt;br&gt;=A0=A0=A0=A0=A0 I want to investigate on video streaming on=
 tor. I want to use tor and browser to play some videos for many times so I=
 want to automate the operation.&lt;br&gt;=A0=A0=A0=A0=A0 Are there any scripts t=
hat can automate the playing of videos(like from youtube,etc)&lt;br&gt;
&lt;br&gt;=A0=A0=A0=A0=A0 I know playing videos can impediment the anonymity, but=
 that is not my concern.&lt;br&gt;&lt;br&gt;=A0=A0=A0=A0=A0 Thanks!&lt;br&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120531151916</emailId><senderName></senderName><senderEmail>sid77</senderEmail><timestampReceived>2012-05-31 15:19:16-0400</timestampReceived><subject>[tor-dev] Help with pf and iOS</subject><body>

Hi all,
it took me a year or so but I've finally managed to build Tor for iOS with a working \
support for TransPort, as you can see on: \
https://github.com/sid77/evelyn/blob/master/tor/make.sh The next natural step is to \
hack together full device torification as iOS jailbroken devices can run pf (without \
ALTQ support).

I'm not very comfortable with pf and pfctl so my first step was to head out to \
https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy#BSDPF looking for \
some clue. However, jailbroken iOS' ifconfig can not bring up a second loopback \
interface (I think the kernel is not allowing it) so I had to test out some custom \
rules, my current pf.conf is as follow:

-8&lt;-
scrub in

rdr pass on lo0 inet proto tcp all -&gt; 127.0.0.1 port 9040
rdr pass on lo0 inet proto udp to port domain -&gt; 127.0.0.1 port domain

block return out

pass quick on lo0 keep state

pass out quick inet proto tcp user nobody flags S/SA modulate state
pass out quick route-to lo0 inet proto udp to port domain keep state
pass out quick route-to lo0 inet proto tcp all flags S/SA modulate state
-8&lt;-

taken from: https://github.com/sid77/mobiletor/blob/master/pf.conf
I apply it running this script: \
https://github.com/sid77/sbsettingstor/blob/master/com.sbsettingstor.enable Tor is \
running as user nobody (not really secure but I still have to figure out system user \
management on the platform) and answering DNS queries on 127.0.0.1:53.

This solution is failing *REALLY* hard as I managed to run into a kernel panic as \
soon as I tried to generate some traffic with Mobile Safari or Cydia.

Is there any pf guru out there which can give me some insights?

Ciao,
Marco
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120928154653</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-09-28 15:46:53-0400</timestampReceived><subject>[tor-dev] automation of open links in new tab in TBB</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

    If I use firefox, I can use a simple command line to open a link in a
new tab automatically, like

     firefox www.google.com

    now I want to open TBB first, and then open a link in a new tab, is
there any script or method to automate this operation? I need this
automation for some experiment,
    I know TBB is a modified firefox, so if there are TBB developes here,
they may know how to do this,

    thanks!

[Attachment #5 (text/html)]

Hi,&lt;br&gt;&lt;br&gt;    If I use firefox, I can use a simple command line to open a link in a \
new tab automatically, like&lt;br&gt; &lt;br&gt;     firefox &lt;a \
href="http://www.google.com"&gt;www.google.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;    now I want to open TBB \
first, and then open a link in a new tab, is there any script or method to automate \
this operation? I need this automation for some experiment,&lt;br&gt;  I know TBB is a \
modified firefox, so if there are TBB developes here, they may know how to do \
this,&lt;br&gt;&lt;br&gt;    thanks!&lt;br&gt;&lt;br&gt;    &lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120928160524</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-28 16:05:24-0400</timestampReceived><subject>Re: [tor-dev] automation of open links in new tab in TBB</subject><body>

jiang song:
&gt; Hi,
&gt; 
&gt;     If I use firefox, I can use a simple command line to open a link in a
&gt; new tab automatically, like
&gt; 
&gt;      firefox www.google.com
&gt; 
&gt;     now I want to open TBB first, and then open a link in a new tab, is
&gt; there any script or method to automate this operation? I need this
&gt; automation for some experiment,
&gt;     I know TBB is a modified firefox, so if there are TBB developes here,
&gt; they may know how to do this,
&gt; 
&gt;     thanks!

I am not a part of the tor-dev team.

Once TBB is open try "cd ~" and

~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
www.google.com

or

~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
www.google.com &amp;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120928163703</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-09-28 16:37:03-0400</timestampReceived><subject>Re: [tor-dev] automation of open links in new tab in TBB</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, adrelanos:

    Thank you so much for your help.

    I tried it on linux with

    /tor-browser_en-US/App/Firefox/firefox --profile
/tor-browser_en-US/Data/profile -new-tab www.google.com

   it prompts:

                Firefox is already running, but is not responding. To oepn
a new window, you must first close the existing FIrefox process, or restart
your system.

   I think the '-new-tab' doesnt play its role here.
   Maybe it can only works on Windows? I will try it later.



On Fri, Sep 28, 2012 at 6:05 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:

&gt; jiang song:
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt;     If I use firefox, I can use a simple command line to open a link in a
&gt; &gt; new tab automatically, like
&gt; &gt;
&gt; &gt;      firefox www.google.com
&gt; &gt;
&gt; &gt;     now I want to open TBB first, and then open a link in a new tab, is
&gt; &gt; there any script or method to automate this operation? I need this
&gt; &gt; automation for some experiment,
&gt; &gt;     I know TBB is a modified firefox, so if there are TBB developes here,
&gt; &gt; they may know how to do this,
&gt; &gt;
&gt; &gt;     thanks!
&gt;
&gt; I am not a part of the tor-dev team.
&gt;
&gt; Once TBB is open try "cd ~" and
&gt;
&gt; ~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
&gt; www.google.com
&gt;
&gt; or
&gt;
&gt; ~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
&gt; www.google.com &amp;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

Hi, adrelanos:&lt;br&gt;&lt;br&gt;    Thank you so much for your help.&lt;br&gt;&lt;br&gt;    I tried it on \
linux with&lt;br&gt;&lt;br&gt;    /tor-browser_en-US/App/Firefox/firefox --profile \
/tor-browser_en-US/Data/profile -new-tab &lt;a \
href="http://www.google.com"&gt;www.google.com&lt;/a&gt;&lt;br&gt; &lt;br&gt;   it prompts:&lt;br&gt;&lt;br&gt;        \
Firefox is already running, but is not responding. To oepn a new window, you must \
first close the existing FIrefox process, or restart your system.&lt;br&gt;&lt;br&gt;   I think \
the '-new-tab' doesnt play its role here.&lt;br&gt;  Maybe it can only works on \
Windows? I will try it later. &lt;br&gt;  &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Sep \
28, 2012 at 6:05 PM, adrelanos &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:adrelanos@riseup.net" \
target="_blank"&gt;adrelanos@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;jiang song:&lt;br&gt; &lt;div&gt;&lt;div class="h5"&gt;&gt; Hi,&lt;br&gt;
&gt;&lt;br&gt;
&gt;     If I use firefox, I can use a simple command line to open a link in a&lt;br&gt;
&gt; new tab automatically, like&lt;br&gt;
&gt;&lt;br&gt;
&gt;      firefox &lt;a href="http://www.google.com" \
target="_blank"&gt;www.google.com&lt;/a&gt;&lt;br&gt; &gt;&lt;br&gt;
&gt;     now I want to open TBB first, and then open a link in a new tab, is&lt;br&gt;
&gt; there any script or method to automate this operation? I need this&lt;br&gt;
&gt; automation for some experiment,&lt;br&gt;
&gt;     I know TBB is a modified firefox, so if there are TBB developes here,&lt;br&gt;
&gt; they may know how to do this,&lt;br&gt;
&gt;&lt;br&gt;
&gt;     thanks!&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;I am not a part of the tor-dev team.&lt;br&gt;
&lt;br&gt;
Once TBB is open try "cd ~" and&lt;br&gt;
&lt;br&gt;
~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab&lt;br&gt;
&lt;a href="http://www.google.com" target="_blank"&gt;www.google.com&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
or&lt;br&gt;
&lt;br&gt;
~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab&lt;br&gt;
&lt;a href="http://www.google.com" target="_blank"&gt;www.google.com&lt;/a&gt; &amp;&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120928175817</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-28 17:58:17-0400</timestampReceived><subject>Re: [tor-dev] automation of open links in new tab in TBB</subject><body>

Tested again on Debian Wheezy.

cd ~

~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
https://www.startpage.com

Works for me.

(Assumes TBB is installed to ~/tor-browser_en-US.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120929232955</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-09-29 23:29:55-0400</timestampReceived><subject>Re: [tor-dev] automation of open links in new tab in TBB</subject><body>

thanks, BTW,
do you know how to close the tab using command line like this?

and when opening a youtube link like this:
http://www.youtube.com/embed/CistYoLwL7M

is there any script or command line to automate clicking on the "play button" ?
thanks!

On 9/28/12, adrelanos &lt;adrelanos@riseup.net&gt; wrote:
&gt; Tested again on Debian Wheezy.
&gt;
&gt; cd ~
&gt;
&gt; ~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
&gt; https://www.startpage.com
&gt;
&gt; Works for me.
&gt;
&gt; (Assumes TBB is installed to ~/tor-browser_en-US.)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120531154649</emailId><senderName>Ralf-Philipp Weinmann</senderName><senderEmail>ralf@coderpunks.org</senderEmail><timestampReceived>2012-05-31 15:46:49-0400</timestampReceived><subject>Re: [tor-dev] Help with pf and iOS</subject><body>

On 5/31/12 5:19 PM, sid77@slackware.it wrote:
&gt; Hi all,

Hi Sid.

&gt; it took me a year or so but I've finally managed to build Tor for iOS with a \
&gt; working support for TransPort, as you can see on: \
&gt; https://github.com/sid77/evelyn/blob/master/tor/make.sh

Whoohoo!

&gt; The next natural step is to hack together full device torification as iOS \
&gt; jailbroken devices can run pf (without ALTQ support). 
&gt; I'm not very comfortable with pf and pfctl so my first step was to head out to \
&gt; https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy#BSDPF looking \
&gt; for some clue. 

It's been a while since I've used pf for serious things, but I think I
can still manage.

&gt; However, jailbroken iOS' ifconfig can not bring up a second loopback interface (I \
&gt; think the kernel is not allowing it) so I had to test out some custom rules, my \
&gt; current pf.conf is as follow:

That's weird. I can look into that over the weekend.

&gt; -8&lt;-
&gt; scrub in
&gt; 
&gt; rdr pass on lo0 inet proto tcp all -&gt; 127.0.0.1 port 9040
&gt; rdr pass on lo0 inet proto udp to port domain -&gt; 127.0.0.1 port domain
&gt; 
&gt; block return out
&gt; 
&gt; pass quick on lo0 keep state
&gt; 
&gt; pass out quick inet proto tcp user nobody flags S/SA modulate state
&gt; pass out quick route-to lo0 inet proto udp to port domain keep state
&gt; pass out quick route-to lo0 inet proto tcp all flags S/SA modulate state
&gt; -8&lt;-
&gt; 
&gt; taken from: https://github.com/sid77/mobiletor/blob/master/pf.conf
&gt; I apply it running this script: \
&gt; https://github.com/sid77/sbsettingstor/blob/master/com.sbsettingstor.enable Tor is \
&gt; running as user nobody (not really secure but I still have to figure out system \
&gt; user management on the platform) and answering DNS queries on 127.0.0.1:53. 
&gt; This solution is failing *REALLY* hard as I managed to run into a kernel panic as \
&gt; soon as I tried to generate some traffic with Mobile Safari or Cydia. 
&gt; Is there any pf guru out there which can give me some insights?

I expect that you really _DO NEED_ that second loopback interface for
the above config, otherwise your packets will just end up in one big
loop. A workaround might be to tag the packets when they are rdr'ed and
make sure that you only rdr packets that are non-tagged. I have to look
up the exact syntax on how to do that. I strongly suggest testing your
pf rules on another machine first (OpenBSD or FreeBSD VM) and then
deploying in iOS.

Do you have the kernel crash log handy by any chance? It should be in
/Library/Logs/CrashReporter/Panics

Cheers,
RPW
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120928194123</emailId><senderName>Eugene F.</senderName><senderEmail>e.fryntov@psiphon.ca</senderEmail><timestampReceived>2012-09-28 19:41:23-0400</timestampReceived><subject>Re: [tor-dev] Help with pf and iOS</subject><body>

&lt;sid77@...&gt; writes:

&gt; 
&gt; ----- Original Message ----- From: "Ralf-Philipp Weinmann" &lt;ralf@...&gt; To:
&gt; tor-dev@...  Sent: Thursday, 31 May, 2012 5:46:49 PM Subject: Re: [tor-dev]
&gt; Help with pf and iOS
&gt; 
&gt; &gt; Whoohoo!
&gt; LOL, thanks!
&gt; 
&gt; &gt; I expect that you really _DO NEED_ that second loopback interface for the
&gt; &gt; above config, otherwise your packets will just end up in one big loop. A
&gt; &gt; workaround might be to tag the packets when they are rdr'ed and make sure
&gt; &gt; that you only rdr packets that are non-tagged. I have to look up the exact
&gt; &gt; syntax on how to do that. I strongly suggest testing your pf rules on
&gt; &gt; another machine first (OpenBSD or FreeBSD VM) and then deploying in iOS.
&gt; Yeah, I sense the loop there. I thought that
&gt; 
&gt; pass quick on lo0 keep state pass out quick inet proto tcp user nobody flags
&gt; S/SA modulate state
&gt; 
&gt; was my "exit strategy", anyway. Looks like they never really work Tagging
&gt; packets is a good idea! It's something I didn't think to try in first place
&gt; as, usually, it's useless when it comes to iptables but it's pf here, so I
&gt; should definitively try it.
&gt; 
&gt; &gt; Do you have the kernel crash log handy by any chance? It should be in
&gt; &gt; /Library/Logs/CrashReporter/Panics
&gt; Gone, but I will try to replicate it. Looking for some 0days, are you? :-P
&gt; _______________________________________________ tor-dev mailing list
&gt; tor-dev@...  https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 

Hi sid77, 

I've got tor in transparent proxy mode working on jailbroken iPod 4 with iOS 6
installed.  I've started with iOS 5.1.1 but quickly found out that any
'route-to' rule results in kernel panic as soon as there is a match while the
same ruleset worked as expected on Mac OS X machine. My bet is on the fact that
the 'jailbreaking' is the culprit of this behaviour

Everything worked just fine on a jailbroken iOS 6 though, I'm not a pf guru, I
just needed a proof of concept, so my ruleset looked like this(I'm running tor
as root from command line, hence the allow root rule):

table &lt;self&gt; const { self }

rdr on lo0 proto tcp from any to ! &lt;self&gt; -&gt; 127.0.0.1 port 9040

#allow ssh on 22 pass in quick proto tcp from any to any port 22 pass out quick
proto tcp from any to any port 22

#allow root(tor) traffic pass out on ! lo0 proto tcp all user root tag "allowed"
keep state

pass out on ! lo0 route-to lo0 \ 
proto tcp all\ 
! tagged "allowed" \ 
tag "intercepted" \ 
keep state


As you can see the udp traffic bit is left out and furthermore, the whole
ruleset could be optimized but it works.

The second nasty bit was compiling tor for iOS 6. I'm pretty sure you know the
iOS SDK doesn't come with all required by transparent proxy functionality
include headers, net/pfvar.h in particular. Quick googling gave me

http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/pfvar.h as well

as the other 2 missing and required by net/pfvar.h

http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/sys/tree.h and
http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/radix.h

after downloading those I quickly figured the -DPRIVATE and
-DNO_APPLE_EXTENSIONS flags and compiled tor. Well, it didn't work with tor
giving me an ENODEV error over ioctl() call, so I suspected the headers were too
old. My kernel version was xnu-2107.2.33, but the latest available version of
xnu was 2050.9.2 (http://www.opensource.apple.com/source/xnu/xnu-2050.9.2), so I
crossed my fingers and downloaded the required headers from that tree.

Some locations have changed since v1456.1.26. My curl commands executed from
inside &lt;SDK&gt;/usr/include looked like this:

sudo curl -o libkern/tree.h \
http://opensource.apple.com/source/xnu/xnu-2050.9.2/libkern/libkern/tree.h?txt

sudo curl -o net/radix.h \
http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/radix.h?txt sudo

curl -o net/pfvar.h \
http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/pfvar.h?txt

I noticed that NO_APPLE_EXTENSIONS ifdefs were gone from the pfvar.h, so I
patched tor/src/or/connection_edge.c, replacing all instances of pnl.sport,
pnl.dport and pnl.rdport with pnl.sxport.port,  pnl.dxport.port and
pnl.rdxport.port respectively.

After compilation I ran tor from cl like: ./tor --User root --DataDirectory .
--TransPort 9040 --SocksPort 0 --Log debug making sure it works only in
Transparent Proxy mode with SOCKS disabled

Toggling pf rules in another terminal causes showmyip.com to show different IPs
while observing traffic flowing through tor.

Hope this information helps.

All the best, 
E.F.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121129021754</emailId><senderName>Christian Kujau</senderName><senderEmail>lists@nerdbynature.de</senderEmail><timestampReceived>2012-11-29 02:17:54-0400</timestampReceived><subject>Re: [tor-dev] Compiling tor against OpenSSL_1_0_2-stable</subject><body>


As a late follow-up, for the archives...

Nick Mathewson wrote on 9/25/12 09:36:
&gt; On Mon, Sep 24, 2012 at 4:13 AM, Christian Kujau &lt;lists@nerdbynature.de&gt; wrote:
&gt;&gt; while trying to compile the latest git-checkout against openssl-1.0.2,
&gt;&gt; I've come across the following issues:
&gt;  [...]
&gt;&gt; While this is really an issue with openssl, I wanted to have this
&gt;&gt; documented, just in case anybody else tries the same. If someone knows of
&gt;&gt; a better workaround (i.e. compiling just tortls.c with -Wno-error and
&gt;&gt; everything else with -Werror), please share! :-)
&gt; 
&gt; So, -Werror isn't supposed to be on by default; you only get that if
&gt; you configure with --enable-gcc-warnings.  You can get all the
&gt; warnings, but with -Werror disabled, by using
&gt; --enable-gcc-warnings-advisory instead.

Yes, --enable-gcc-warnings-advisory helps - thanks!

&gt;&gt; A bit later, compilation stops again:
&gt;&gt; ----
&gt;&gt;   CCLD   src/or/tor
&gt;&gt; src/common/libor-crypto.a(aes.o): In function `aes_crypt':
&gt;&gt; aes.c:(.text+0x860): undefined reference to `CRYPTO_ctr128_encrypt'
&gt; 
&gt; Well that's certainly annoying.  If you're not feeling hackerish, I'd
&gt; suggest backing off to openssl the openssl 1.0.1 branch, which has
&gt; actually been, y'know, released. (There's no released openssl 1.0.2
&gt; version yet, right?) But if you're willing to hack the Tor code, you
&gt; might be able to make CAN_USE_OPENSSL_CTR always undefined in aes.c,
&gt; and make USE_EVP_AES_CTR always defined, so that Tor doesn't even
&gt; consider using the CRYPTO_ implementation.

At first I felt hackerish and tried your suggestion, but then I realized 
that although I used --with-openssl-dir=/opt/openssl, the compilation 
process made use of my already installed libssl-dev package and stopped 
with the error above. Uninstalling my distro's openssl development 
libraries helped and latest Tor compiles against the latest openssl CVS 
checkout. yay!

Thanks for replying &amp; sorry for my late response,
Christian.
-- 
make bzImage, not war
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910145932</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-09-10 14:59:32-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Code submission and more curl</subject><body>

On 2012-09-10 16:58 , Zack Weinberg wrote:
&gt; On Mon, Sep 10, 2012 at 9:10 AM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt;&gt; On Mon, Sep 10, 2012 at 02:33:30AM -0600, vmon wrote:
&gt;&gt;&gt; 3) Thank you for telling me about fts. I'm going to replace boost code with fts soon.
&gt;&gt;
&gt;&gt; What is fts?  This sounds potentially useful.
&gt; 
&gt; It's a C API for directory tree walking.  Similar to the older ftw()
&gt; but iterator-style and more robust.  Unfortunately doesn't seem to
&gt; have made it into POSIX yet but is available on both Linux and OSX.

And even OpenBSD has it ;)

Greets,
 Jeroen


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120910204654</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-09-10 20:46:54-0400</timestampReceived><subject>Re: [tor-dev] Integration of Tor, Tor Browser, Tor IM, Tor Birdy, Vidalia, Tor Router, Tails, etc.</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake adrelanos (adrelanos@riseup.net):

&gt; The current [TBB launch] integration has a lot open issues and feature
&gt; requests. [2]

Wow, even more than I thought! :)

&gt; Because there might come a proposal [1] to solve this cleanly, I created
&gt; an overview of all related open issues. [2] There are just so many
&gt; issues I though it makes sense to create an overview so nothing gets
&gt; forgotten. Feel free to edit/correct/expand the wiki site. Add your wishes.
&gt; 
&gt; I cc'ed all effected people, if someone has been forgotten, feel free to
&gt; forward this mail.
&gt; 
&gt; Can we have this discussion on tor-dev?

I think so. Again, I think the path to max success for you here is to
make your own package/collection/tar.gz of launch scripts for different
scenarios. That way, you can experiment without getting bogged down by
design proposals and formalities for making the TBB itself usable.

It might be the case at first that it seems like you're being ignored.
Once you have stuff that works, or at least have some kind of plan, I
think people will listen/test stuff/make suggestions on tor-dev.  Any
earlier stages might want the wider input from the tor-talk crowd,
though.

It's quite possible that Jake's "Zygote-process named-pipe Tor
coordinator" can just be an addition to all of this stuff at the end, as
a helper process for finding the right Tor socks port. It's also likely
that simple python (or even shell) prototypes will work just fine,
even if they only just guess at defaults and test them.

If you block on env var support in Torbutton, please let me know. Right
now I think you can make a lot of progress even as-is. I think #5611
should help you do more, but isn't strickly needed yet? Am I correct
there?
 
&gt; [1] https://trac.torproject.org/projects/tor/ticket/5611#comment:43
&gt; [2] https://trac.torproject.org/projects/tor/wiki/doc/TB

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120911165154</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-09-11 16:51:54-0400</timestampReceived><subject>Re: [tor-dev] Format-Transforming Encryption for Censorship Circumvention</subject><body>

On Tue, Sep 11, 2012 at 09:39:45AM -0700, Kevin P Dyer wrote:
&gt; On Thu, Sep 6, 2012 at 3:30 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; On Thu, Sep 06, 2012 at 09:25:58AM -0700, Kevin P Dyer wrote:
&gt; &gt;&gt; Following my email to this list, dated 29/07/2012, I direct your
&gt; &gt;&gt; attention to the IACR eprint document http://eprint.iacr.org/2012/494,
&gt; &gt;&gt; "Format-Transforming Encryption: More than Meets the DPI". In it, we
&gt; &gt;&gt; present our framework for steganographic encoding of messages using
&gt; &gt;&gt; regular languages, along with initial findings for a Python/C++ based
&gt; &gt;&gt; implementation.
&gt; &gt;
&gt; &gt; Is there published source code for the implementation?
&gt; 
&gt; The source is not publicly available, yet. Some of the main system
&gt; components are still being reworked to support more capabilities and
&gt; better overall performance.  We do, however, plan to make the source
&gt; available in the medium-term.

Between releasing source code early, and polishing and optimizing it for
some time in the future, let mine be a humble vote for releasing code
early. You may be glad you did. There are probably others like me, who
think the idea is sound enough, and want to try it out and gauge its
deployability. There are probably some here who would be willing to put
an FTE server transport plugin on a public relay.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912205356</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-09-12 20:53:56-0400</timestampReceived><subject>Re: [tor-dev] torrouter development - Who is in charge?</subject><body>

Damian Johnson:
&gt;&gt; I think the project will get more interest and attention from more
&gt;&gt; experienced (and busy) Tor developers once the "broken, does not turn on"
&gt;&gt; type problems are fixed; at that point a more formal design/review iteration
&gt;&gt; on specific device configurations and functionality can take place.
&gt; 
&gt; Hi ficus. I spoke with Runa on irc and it sounds like this project is
&gt; pretty much mothballed at the moment. You're certainly welcome to hack
&gt; on it, but be aware that it doesn't really have a maintainer at the
&gt; moment.
&gt; 

Argh. The project isn't mothballed. I'm the maintainer.

We're currently blocking on a web interface and regular tor builds of
2.3.x for ARM with tor-fw-helper enabled. I've also been writing a
number of core utilities to replace commonly vulnerable and crappy
services that such a device needs. The work on tlsdate is almost
entirely directed at helping set the system time on Tails and on Torouter.

&gt; As is tradition for open source projects, you're certainly welcome to
&gt; fork it. Also, we have several other things listed on the projects
&gt; page that are being far more actively developed (if you'd like to work
&gt; with one of us)...
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt; 

Please disregard this - you're welcome to do all kinds of stuff but
this, like a rain dance, isn't likely to result in the best results...

&gt; Shameless plug: I'm certainly more than happy to have help if python
&gt; related stuff strikes your fancy. ;)

The build of Torouter that I have running includes your arm controller. :)

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120912210151</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-09-12 21:01:51-0400</timestampReceived><subject>Re: [tor-dev] torrouter development</subject><body>

ficus@robocracy.org:
&gt; 
&gt; Hello tor-dev!
&gt; 
&gt; I would like to contribute to the torouter (aka TorRouter, aka
&gt; OnionBox?) project, with the intention of getting a "functional"
&gt; development image for the DreamPlug hardware released in the next few
&gt; weeks.
&gt; 

The best bet is to jump in with the trac tickets here:
https://trac.torproject.org/projects/tor/wiki/doc/Torouter/Roadmap
https://trac.torproject.org/projects/tor/wiki/doc/Torouter

As one might observe, the dates are pretty far off - we could use some
help in prioritizing them and normalizing things. There are a bunch of
tickets open that need discussions and I'd hoped for some feedback about
a year ago but I think it is better late than never!

&gt; The goals of the torouter project seem a bit vague (especially w/r/t a
&gt; transparent torified WiFi access point), perhaps this is why development
&gt; slowed down previously. I will attempt a design document and
&gt; specification, but mostly focus on making the core components (debian,
&gt; tor, web interface) functional and configurable, such that they could be
&gt; leveraged by others as solutions to specific use cases. Will this be
&gt; useful to others?

Yes, absolutely. The goal of the torouter is simple. We want to provide
a (home) router that runs Tor as a bridge or a router by default while
also providing all the expected features of such a router, with next to
zero configuration. I think the phrase was "plug and play, without the
play" and we hope to do this by normalizing all of our work into Debian
proper. The extra stuff such as opening a torified WiFi access point is
a nice to have and while we did implement it, a web interface is
probably more pressing.

&gt; 
&gt; It seems like the preferred collaboration tool is the trac wiki and
&gt; tickets. Many of the torouter tickets seem stale and incomplete, and the
&gt; roadmap on the trac wiki is very out of date. Unless there is advice
&gt; i'll ignore those but continue discussion on tickets like #3854 (Summary
&gt; of outstanding things with Torouter) and #3453 (Torouter desires and
&gt; features).

I propose that we update the road map with realistic dates and for us to
discuss the things in the tickets, even some of the closed tickets could
use some thought.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120915071102</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-09-15 07:11:02-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


On Thu, Sep 13, 2012 at 10:51 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; * Split low and high level controller methods
&gt;
&gt; The Controller class is growing to be pretty bulky, and its methods
&gt; can generally be split into two categories...
&gt;
&gt; - Low level methods that simply mirror what the control-spec provides.
&gt; - Higher level methods (like the get_relay() and get_all_relays()
&gt; above) which are more user friendly and build on what the control spec
&gt; provides.
&gt;
&gt; Ravi: Do you have any thoughts on this? Do you think this would be a
&gt; good way to break up the controller, or would this just make it more
&gt; confusing? Alternatively we could wait until we try using stem in arm
&gt; to see if this makes sense or not...
&gt;

Break up - add another class between BaseController and Controller?
I would prefer leaving it as it as it is for now.

-- 
neena

[Attachment #5 (text/html)]

&lt;div class="gmail_quote"&gt;On Thu, Sep 13, 2012 at 10:51 PM, Damian Johnson &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

* Split low and high level controller methods&lt;br&gt;
&lt;br&gt;
The Controller class is growing to be pretty bulky, and its methods&lt;br&gt;
can generally be split into two categories...&lt;br&gt;
&lt;br&gt;
- Low level methods that simply mirror what the control-spec provides.&lt;br&gt;
- Higher level methods (like the get_relay() and get_all_relays()&lt;br&gt;
above) which are more user friendly and build on what the control spec&lt;br&gt;
provides.&lt;br&gt;
&lt;br&gt;
Ravi: Do you have any thoughts on this? Do you think this would be a&lt;br&gt;
good way to break up the controller, or would this just make it more&lt;br&gt;
confusing? Alternatively we could wait until we try using stem in arm&lt;br&gt;
to see if this makes sense or not...&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Break up - \
add another class between BaseController and Controller?&lt;div&gt;I would prefer leaving \
it as it as it is for now.&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;

&lt;/div&gt;-- &lt;br&gt;neena&lt;br&gt;
&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120916153444</emailId><senderName>Bry8 Star</senderName><senderEmail>bry8star@yahoo.com</senderEmail><timestampReceived>2012-09-16 15:34:44-0400</timestampReceived><subject>Re: [tor-dev] DNS(SEC) draft update</subject><body>

If an Unbound type of DNSSEC/validating resolver exist on end-user's
(tor proxy user's) computer, then, it can be configured to prevent
accidental dns leaks from any apps on that computer, by using unbound
configuration command-lines like:
local-zone: "onion." refuse
local-zone: "exit." refuse
local-zone: "noconnect." refuse
so having an unbound on tor proxy user's side, has some benefit.

Unbound can have configuration commandline, like this:
outgoing-interface: 192.168.0.10
The Network interface Adapater which is connected to Internet, should be
configured to have a fixed ip, like 192.168.0.10, and that needs to be
specified on outgoing-interface, so that Unbound can send queries thru
such outgoing-interface. Normally at least those who uses computer for
both Anonymity and Private purpose they can use fix net-adapter ip.
Unbound usually uses different set of ports from that outgoing-interface
IP address, to connect with different DNS server's DNS port. Unbound has
option to use 1 outgoing port (from that outgoing-interface), but that
will open it up for some other vulnerabilities. Unbound also has option
to use a range of ports from that outgoing interface.
So if tor can have a Transparent Listenning IP address (without any
fixed/single port), then in Unbound, tor's transparent ip can be
specified as outgoing. And that should work fine, for those who uses the
VM or the computer only for Anonymity purpose.
But i have failed to find such an option in Tor.
If a transparent listenning ip address (able to listen on all ports) is
too hard to code, or does not exist currently, then at least this
feature should be added in tor, which at least be able to listen on a
range of ports (if not the entire ports 1~65535), then that range can be
pre-specified in Unbound. For example, this configuration command-line
will use a range of 4096 ports only:
outgoing-port-permit: 52000-56096
And if few ports in it are needed to be avoid, if used by other server
programs or so in that computer, then something similar can be added in
Unbound:
outgoing-port-avoid: "52010,52011"

If an unbound configuration is using only one forward-zone command (for
root zone, which is
forward-zone:
name: "."
Then, 1 port based transparent proxy is useful. but, most unbound
configuration needs more than one:
forward-zone: name: "domain/TLD"
forward-addr:/forward-host:
stub-zone: name: "domain/TLD"
stub-addr:/stub-host:
In a multi stub/forwarding case, listenning to the entire port range or
certain portion of entire port range from the outgoing interface ip
address is needed.

In above cases a tor proxy user who is using properly configured
unbound, does not need to use tor exit node's dns resolver. first-time
accessing a site will have some delay, once its in the cache (on unbound
on tor proxy user's computer) from 2nd query and so on it will be very
fast, as no need to goto the exit-node for the answer.

If tor exit node has a recursive DNSSEC supported resolver, and if that
can be used by the tor proxy user's unbound, then that will speed up dns
res as well.

But if, tor proxy user does not have unbound, (which is many user's
case), and using tor-exit-node's dnssec supported resolver for the local
apps, then each/every query will get answer from exit-node's dns cache,
will need to travel thru two/three middle-nodes, twice, once for asking,
once for receiving answer, so it will be slower than other two scenario.
To counter it, tor itself should also contain a dns cache that supports
DNSSEC, acting as validating stub resolver for the local apps which will
need use DNSSEC queries.

Google Public DNS, permanently stores user's certain information. There
are other DNSSEC supported validating recursive dns servers/resolvers
which respects Anonymity and Privacy.

-- Bry8Star. Sep 16, 2012. 03-30pm. utc.




On 8/22/2012 8:44 AM, Ondrej Mikle wrote:
&gt; On 08/20/2012 02:43 AM, Mike Perry wrote:
&gt;&gt; Thus spake Ondrej Mikle (ondrej.mikle@gmail.com):
&gt;&gt;
&gt;&gt;&gt; I've revised the DNS draft, attaching it. In section 4 there are some options
&gt;&gt;&gt; for integration with libunbound, but each of them requires some work with the
&gt;&gt;&gt; stock libunbound code.
&gt;&gt;
&gt;&gt; I'm not a DNS expert, but I have a couple preliminary requests/questions.
&gt;&gt;
&gt;&gt; First, can you provide a section in the proposal on the analysis of the
&gt;&gt; number of round trips over Tor for different request scenarios? If you
&gt;&gt; offload full DNS responsibility to the client, certain query behaviors
&gt;&gt; are going to be better than others with respect to the number of round
&gt;&gt; trips over Tor. We're going to want to minimize these round trips,
&gt;&gt; especially if we decide we want to rely on DNSsec/DANE for everything.
&gt;&gt; Clients may also want to use this information to try to intelligently
&gt;&gt; decide cases where we don't want to do full DNSsec queries and revert to
&gt;&gt; the oldstyle SOCKS4A.
&gt; 
&gt; Added section 8 to the draft with a "common" and "extreme" example. Validation
&gt; still would be done at both exit and client: client can't trust the AD bit from
&gt; exit and exit must implement own recursive resolver via libunbound as ISP's
&gt; resolvers often won't work with DNSSEC, the problem is usually in fetching DS
&gt; records.
&gt; 
&gt;&gt; Second (and related), is it totally insane to map some sort of magic IP
&gt;&gt; to "foward this query the local exit node resolver" so that the client
&gt;&gt; can easily get DNS(sec) perspectives from each exit node's resolver
&gt;&gt; caches? This might both minimize round trips for clients who don't want
&gt;&gt; to either hardcode 8.8.8.8 or do full recursive resolves against the
&gt;&gt; root servers. On the other hand, it might complicate query handling on
&gt;&gt; the exit side and also introduce weird cache/poisoning attacks?
&gt; 
&gt; It's actually quite interesting idea, though not sure how to map a local
&gt; 127.0.0./8 IP to a specific exit. If the exit changes inbetween queries (new
&gt; circuit), should the client know somehow?
&gt; 
&gt; I also thought about "most lightweight" implementation which would just use ldns
&gt; library on the exit's side - client would employ the "magic IP" as forwarder for
&gt; local standalone unbound daemon. But it breaks on the inability of ISPs'
&gt; resolvers to fetch DS records mentioned above.
&gt; 
&gt; For the perspective it should be noted that many CDNs and load balancers use
&gt; short TTLs in the range 5-30, two subsequent queries may return different results.
&gt; 
&gt; Ondrej
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120917154735</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-09-17 15:47:35-0400</timestampReceived><subject>[tor-dev] Reminder: Big/tricky/interesting features for 0.2.4 need proposals by 10 October</subject><body>

Hi, all!

From https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :

"October 10, 2012: Big feature proposal checkpoint. Any large
complicated feature which requires a design proposal must have its
first design proposal draft by this date."

There are only 23 days till October 10.  If there's something you want
in 0.2.4.x, and it is the kind of thing that needs a design proposal,
and there is no proposal yet, it could be time to start writing!

What needs a design proposal? Generally: anything that involves a
change to the Tor protocol; anything whose security implications are
nontrivial and need discussion; and anything that will change any Tor
specification.  Err on the side of "it needs a proposal."

What is a "large complicated feature"? Please assume I'm going to be
extremely grumpy here, and err on the side of "it is big".  If the
writeup of the proposal that explains how it works, or why to do it
this way is going to take more than a few paragraphs, it is probably
'big' or 'complex'.

(Note to would-be system-gamers:  Please don't send a sketchy
incomplete draft as a placeholder to get your foot in the door. That's
not cool. If you don't have a draft ready, the feature can wait till
0.2.5.)

(Note also: a feature proposal by this deadline is a necessary
condition for getting your big/tricky/complicated feature into 0.2.4,
but not a sufficient condition.  It also needs to have a working
implementation on schedule.)

(Note finally: This is not a promise to not merge stuff that violates
this deadline, but I sure will be trying not to merge such stuff.)

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120919170033</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-09-19 17:00:33-0400</timestampReceived><subject>[tor-dev] Italy - third highest number users</subject><body>

Somehow in August, Italy got a few thousand additional Tor users and
became third as far as usage of Tor:
&gt; https://metrics.torproject.org/users.html?graph=direct-users&amp;country=it#direct-users

&gt; Country		Mean daily users
&gt; United States 	60769 (14.30 %)
&gt; Iran 			43709 (10.28 %)
&gt; Italy 		37306 (8.78 %)
&gt; Germany 		36672 (8.63 %)

Any insight?

--SiNA
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120919220119</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-09-19 22:01:19-0400</timestampReceived><subject>[tor-dev] Fwd: New HS protocol</subject><body>

Note that this scheme is not quite safe to implement with Ed25519 or
other DSA-like signature schemes as described; the base point needs to
be multiplied by the same number as the public-key group element.


---------- Forwarded message ----------
From: Robert Ransom &lt;rransom.8774@gmail.com&gt;
Date: Wed, 19 Jan 2011 08:42:40 -0800
Subject: New HS protocol
To: Kadianakis George &lt;desnacked@gmail.com&gt;
Cc: [redacted], [redacted], tor-assistants@torproject.org

I wrote up the following new HS protocol on 2011-01-13, but haven't
sent it out anywhere publicly visible yet.


The only system I have come up with to hide a hidserv's identity key
from the directory servers requires that the hidserv use a discrete-log
cryptosystem for its identity key, and that the HS address contain
enough of the identity key that a client can compute a scalar multiple
of the identity key.  (For example, the identity key can be a point on
an elliptic curve in Weierstrass form, and the HS address can be the
point's x coordinate.)

The system designer chooses a group, an element P of prime order p in
that group, and a publicly computable one-way function h mapping
bitstrings to integers in the interval [1, p-1].

The HS chooses a secret key n and computes its public key nP; its
descriptor index in time period t can be computed by any party which
knows its public key as h(t | nP)*nP, but only the HS will know the
discrete logarithm h(t | nP)*n of the descriptor index with base P.
The HS can therefore compute an ECDSA signature, for example, which the
directory server can verify using the descriptor index as a public key.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120925054223</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-09-25 05:42:23-0400</timestampReceived><subject>[tor-dev] Email-based rendezvous for flash proxies</subject><body>

I have made a design and written some code for an email-based
registration system for flash proxy clients. Registration is the process
by which a censored client sends its IP address to request service from
an external proxy.

In summary, a censored client sends its address in encrypted email over
SMTP over TLS to a distinguished email address. A program running on the
flash proxy facilitator makes an IMAP connection over TLS, polls for
messages, then decrypts them and registers the addresses withing. The
email messages are sent by a registration helper program, not the
client's own email account, and they appear to come from a dummy
address. More information is in the ticket:

https://trac.torproject.org/projects/tor/ticket/6383#comment:5

I would appreciate a second look at the design, especially the use of
crypto. The ticket's comment number 5 calls out some particular
features.

This is our first registration system with a claim to being hard to
block. This is step 1 that goes through the firewall in the diagram at
http://crypto.stanford.edu/flashproxy/#how-it-works. The censor sees a
TLS session with a Gmail MX server, followed later by an incoming
connection from a flash proxy at a previously unseen IP address. What
makes this different than other circumvention ideas is that nothing is
sent directly to any published or unpublished Tor relay.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120925163637</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-09-25 16:36:37-0400</timestampReceived><subject>Re: [tor-dev] Compiling tor against OpenSSL_1_0_2-stable</subject><body>

On Mon, Sep 24, 2012 at 4:13 AM, Christian Kujau &lt;lists@nerdbynature.de&gt; wrote:
&gt; Hi,
&gt;
&gt; while trying to compile the latest git-checkout against openssl-1.0.2,
&gt; I've come across the following issues:
 [...]
&gt; While this is really an issue with openssl, I wanted to have this
&gt; documented, just in case anybody else tries the same. If someone knows of
&gt; a better workaround (i.e. compiling just tortls.c with -Wno-error and
&gt; everything else with -Werror), please share! :-)

So, -Werror isn't supposed to be on by default; you only get that if
you configure with --enable-gcc-warnings.  You can get all the
warnings, but with -Werror disabled, by using
--enable-gcc-warnings-advisory instead.

&gt; A bit later, compilation stops again:
&gt;
&gt; ----
&gt;   CCLD   src/or/tor
&gt; src/common/libor-crypto.a(aes.o): In function `aes_crypt':
&gt; aes.c:(.text+0x860): undefined reference to `CRYPTO_ctr128_encrypt'

Well that's certainly annoying.  If you're not feeling hackerish, I'd
suggest backing off to openssl the openssl 1.0.1 branch, which has
actually been, y'know, released. (There's no released openssl 1.0.2
version yet, right?) But if you're willing to hack the Tor code, you
might be able to make CAN_USE_OPENSSL_CTR always undefined in aes.c,
and make USE_EVP_AES_CTR always defined, so that Tor doesn't even
consider using the CRYPTO_ implementation.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120925184931</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-09-25 18:49:31-0400</timestampReceived><subject>Re: [tor-dev] information about "last_restarted"</subject><body>

On 9/24/12 6:16 PM, succer110@tiscali.it wrote:
&gt; Hi everyone tor devel!
&gt; I would like to know more information about last_restarted information. 
&gt; - It's possibile to forge this kind of data or is somehow certified by
&gt; the tor network?

last_restarted is computed from the descriptor publication time minus
the contained uptime.  The uptime value is not certified by the Tor network.

&gt; Sometime, while sampling hourly some data by onionoo i've noticed some
&gt; difference in the uptime by + or - a few seconds in this value.
&gt; - Any idea of how this is possible?!

A few seconds sounds like rounding errors or minor clock deviations.

&gt; - In which file do i find the code that handle this value?

https://gitweb.torproject.org/onionoo.git/blob/HEAD:src/org/torproject/onionoo/DetailDataWriter.java#l494

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120926175612</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-26 17:56:12-0400</timestampReceived><subject>Re: [tor-dev] automatic play of video with webbrowser</subject><body>

esolve esolve:
&gt; Hi, all:
&gt; 
&gt;       I want to investigate on video streaming on tor. I want to use tor
&gt; and browser to play some videos for many times so I want to automate the
&gt; operation.
&gt;       Are there any scripts that can automate the playing of videos(like
&gt; from youtube,etc)
&gt; 
&gt;       I know playing videos can impediment the anonymity, but that is not
&gt; my concern.
&gt; 
&gt;       Thanks!

Hi, welcome!

While I am not a part of tor-dev team, I believe user questions belong
to tor-talk. Please use that list.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120928201012</emailId><senderName>Eugene Fryntov</senderName><senderEmail>e.fryntov@psiphon.ca</senderEmail><timestampReceived>2012-09-28 20:10:12-0400</timestampReceived><subject>Re: [tor-dev] Help with pf and iOS</subject><body>

[Attachment #2 (multipart/alternative)]


The pf rules formatting is broken, here are the correct ones

table &lt;self&gt; const { self }

rdr on lo0 proto tcp from any to ! &lt;self&gt; -&gt; 127.0.0.1 port 9040

#allow ssh on 22
pass in quick proto tcp from any to any port 22 pass out quick
proto tcp from any to any port 22

#allow root(tor) traffic
pass out on ! lo0 proto tcp all user root tag "allowed"
keep state

pass out on ! lo0 route-to lo0 \
proto tcp all\
! tagged "allowed" \
tag "intercepted" \
keep state

On Fri, Sep 28, 2012 at 3:41 PM, Eugene F. &lt;e.fryntov@psiphon.ca&gt; wrote:

&gt; &lt;sid77@...&gt; writes:
&gt;
&gt; &gt;
&gt; &gt; ----- Original Message ----- From: "Ralf-Philipp Weinmann" &lt;ralf@...&gt;
&gt; To:
&gt; &gt; tor-dev@...  Sent: Thursday, 31 May, 2012 5:46:49 PM Subject: Re:
&gt; [tor-dev]
&gt; &gt; Help with pf and iOS
&gt; &gt;
&gt; &gt; &gt; Whoohoo!
&gt; &gt; LOL, thanks!
&gt; &gt;
&gt; &gt; &gt; I expect that you really _DO NEED_ that second loopback interface for
&gt; the
&gt; &gt; &gt; above config, otherwise your packets will just end up in one big loop.
&gt; A
&gt; &gt; &gt; workaround might be to tag the packets when they are rdr'ed and make
&gt; sure
&gt; &gt; &gt; that you only rdr packets that are non-tagged. I have to look up the
&gt; exact
&gt; &gt; &gt; syntax on how to do that. I strongly suggest testing your pf rules on
&gt; &gt; &gt; another machine first (OpenBSD or FreeBSD VM) and then deploying in
&gt; iOS.
&gt; &gt; Yeah, I sense the loop there. I thought that
&gt; &gt;
&gt; &gt; pass quick on lo0 keep state pass out quick inet proto tcp user nobody
&gt; flags
&gt; &gt; S/SA modulate state
&gt; &gt;
&gt; &gt; was my "exit strategy", anyway. Looks like they never really work Tagging
&gt; &gt; packets is a good idea! It's something I didn't think to try in first
&gt; place
&gt; &gt; as, usually, it's useless when it comes to iptables but it's pf here, so
&gt; I
&gt; &gt; should definitively try it.
&gt; &gt;
&gt; &gt; &gt; Do you have the kernel crash log handy by any chance? It should be in
&gt; &gt; &gt; /Library/Logs/CrashReporter/Panics
&gt; &gt; Gone, but I will try to replicate it. Looking for some 0days, are you?
&gt; :-P
&gt; &gt; _______________________________________________ tor-dev mailing list
&gt; &gt; tor-dev@...
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; &gt;
&gt;
&gt; Hi sid77,
&gt;
&gt; I've got tor in transparent proxy mode working on jailbroken iPod 4 with
&gt; iOS 6
&gt; installed.  I've started with iOS 5.1.1 but quickly found out that any
&gt; 'route-to' rule results in kernel panic as soon as there is a match while
&gt; the
&gt; same ruleset worked as expected on Mac OS X machine. My bet is on the fact
&gt; that
&gt; the 'jailbreaking' is the culprit of this behaviour
&gt;
&gt; Everything worked just fine on a jailbroken iOS 6 though, I'm not a pf
&gt; guru, I
&gt; just needed a proof of concept, so my ruleset looked like this(I'm running
&gt; tor
&gt; as root from command line, hence the allow root rule):
&gt;
&gt; table &lt;self&gt; const { self }
&gt;
&gt; rdr on lo0 proto tcp from any to ! &lt;self&gt; -&gt; 127.0.0.1 port 9040
&gt;
&gt; #allow ssh on 22 pass in quick proto tcp from any to any port 22 pass out
&gt; quick
&gt; proto tcp from any to any port 22
&gt;
&gt; #allow root(tor) traffic pass out on ! lo0 proto tcp all user root tag
&gt; "allowed"
&gt; keep state
&gt;
&gt; pass out on ! lo0 route-to lo0 \
&gt; proto tcp all\
&gt; ! tagged "allowed" \
&gt; tag "intercepted" \
&gt; keep state
&gt;
&gt;
&gt; As you can see the udp traffic bit is left out and furthermore, the whole
&gt; ruleset could be optimized but it works.
&gt;
&gt; The second nasty bit was compiling tor for iOS 6. I'm pretty sure you know
&gt; the
&gt; iOS SDK doesn't come with all required by transparent proxy functionality
&gt; include headers, net/pfvar.h in particular. Quick googling gave me
&gt;
&gt; http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/pfvar.has well
&gt;
&gt; as the other 2 missing and required by net/pfvar.h
&gt;
&gt; http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/sys/tree.hand
&gt; http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/radix.h
&gt;
&gt; after downloading those I quickly figured the -DPRIVATE and
&gt; -DNO_APPLE_EXTENSIONS flags and compiled tor. Well, it didn't work with tor
&gt; giving me an ENODEV error over ioctl() call, so I suspected the headers
&gt; were too
&gt; old. My kernel version was xnu-2107.2.33, but the latest available version
&gt; of
&gt; xnu was 2050.9.2 (http://www.opensource.apple.com/source/xnu/xnu-2050.9.2),
&gt; so I
&gt; crossed my fingers and downloaded the required headers from that tree.
&gt;
&gt; Some locations have changed since v1456.1.26. My curl commands executed
&gt; from
&gt; inside &lt;SDK&gt;/usr/include looked like this:
&gt;
&gt; sudo curl -o libkern/tree.h \
&gt;
&gt; http://opensource.apple.com/source/xnu/xnu-2050.9.2/libkern/libkern/tree.h?txt
&gt;
&gt; sudo curl -o net/radix.h \
&gt; http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/radix.h?txtsudo
&gt;
&gt; curl -o net/pfvar.h \
&gt; http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/pfvar.h?txt
&gt;
&gt; I noticed that NO_APPLE_EXTENSIONS ifdefs were gone from the pfvar.h, so I
&gt; patched tor/src/or/connection_edge.c, replacing all instances of pnl.sport,
&gt; pnl.dport and pnl.rdport with pnl.sxport.port,  pnl.dxport.port and
&gt; pnl.rdxport.port respectively.
&gt;
&gt; After compilation I ran tor from cl like: ./tor --User root
&gt; --DataDirectory .
&gt; --TransPort 9040 --SocksPort 0 --Log debug making sure it works only in
&gt; Transparent Proxy mode with SOCKS disabled
&gt;
&gt; Toggling pf rules in another terminal causes showmyip.com to show
&gt; different IPs
&gt; while observing traffic flowing through tor.
&gt;
&gt; Hope this information helps.
&gt;
&gt; All the best,
&gt; E.F.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

The pf rules formatting is broken, here are the correct ones&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;table \
&lt;self&gt; const { self }&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;rdr \
on lo0 proto tcp from any to ! &lt;self&gt; -&gt; 127.0.0.1 port 9040&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;#allow \
ssh on 22 &lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;pass \
in quick proto tcp from any to any port 22 pass out quick&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;proto \
tcp from any to any port 22&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;#allow \
root(tor) traffic &lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;pass \
out on ! lo0 proto tcp all user root tag "allowed"&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;keep \
state&lt;/span&gt;&lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;pass \
out on ! lo0 route-to lo0 \&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;proto \
tcp all\&lt;/span&gt;&lt;br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;! \
tagged "allowed" \&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;tag \
"intercepted" \&lt;/span&gt;&lt;br \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;
 &lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)"&gt;keep \
state&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Sep 28, 2012 at 3:41 PM, Eugene \
F. &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:e.fryntov@psiphon.ca" \
target="_blank"&gt;e.fryntov@psiphon.ca&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;sid77@...&gt; writes:&lt;br&gt; &lt;br&gt;
&gt;&lt;br&gt;
&gt; ----- Original Message ----- From: "Ralf-Philipp Weinmann" \
&lt;ralf@...&gt; To:&lt;br&gt; &gt; tor-dev@...  Sent: Thursday, 31 May, 2012 5:46:49 PM \
Subject: Re: [tor-dev]&lt;br&gt; &gt; Help with pf and iOS&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; Whoohoo!&lt;br&gt;
&gt; LOL, thanks!&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; I expect that you really _DO NEED_ that second loopback interface for \
the&lt;br&gt; &gt; &gt; above config, otherwise your packets will just end up in one big \
loop. A&lt;br&gt; &gt; &gt; workaround might be to tag the packets when they are rdr'ed \
and make sure&lt;br&gt; &gt; &gt; that you only rdr packets that are non-tagged. I have to \
look up the exact&lt;br&gt; &gt; &gt; syntax on how to do that. I strongly suggest testing \
your pf rules on&lt;br&gt; &gt; &gt; another machine first (OpenBSD or FreeBSD VM) and then \
deploying in iOS.&lt;br&gt; &gt; Yeah, I sense the loop there. I thought that&lt;br&gt;
&gt;&lt;br&gt;
&gt; pass quick on lo0 keep state pass out quick inet proto tcp user nobody flags&lt;br&gt;
&gt; S/SA modulate state&lt;br&gt;
&gt;&lt;br&gt;
&gt; was my "exit strategy", anyway. Looks like they never really work \
Tagging&lt;br&gt; &gt; packets is a good idea! It's something I didn't think to try \
in first place&lt;br&gt; &gt; as, usually, it's useless when it comes to iptables but \
it's pf here, so I&lt;br&gt; &gt; should definitively try it.&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; Do you have the kernel crash log handy by any chance? It should be in&lt;br&gt;
&gt; &gt; /Library/Logs/CrashReporter/Panics&lt;br&gt;
&gt; Gone, but I will try to replicate it. Looking for some 0days, are you? :-P&lt;br&gt;
&gt; _______________________________________________ tor-dev mailing list&lt;br&gt;
&gt; tor-dev@...  &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&gt;&lt;br&gt; &gt;&lt;br&gt;
&lt;br&gt;
Hi sid77,&lt;br&gt;
&lt;br&gt;
I've got tor in transparent proxy mode working on jailbroken iPod 4 with iOS \
6&lt;br&gt; installed.  I've started with iOS 5.1.1 but quickly found out that any&lt;br&gt;
'route-to' rule results in kernel panic as soon as there is a match while \
the&lt;br&gt; same ruleset worked as expected on Mac OS X machine. My bet is on the fact \
that&lt;br&gt; the 'jailbreaking' is the culprit of this behaviour&lt;br&gt;
&lt;br&gt;
Everything worked just fine on a jailbroken iOS 6 though, I'm not a pf guru, \
I&lt;br&gt; just needed a proof of concept, so my ruleset looked like this(I'm running \
tor&lt;br&gt; as root from command line, hence the allow root rule):&lt;br&gt;
&lt;br&gt;
table &lt;self&gt; const { self }&lt;br&gt;
&lt;br&gt;
rdr on lo0 proto tcp from any to ! &lt;self&gt; -&gt; 127.0.0.1 port 9040&lt;br&gt;
&lt;br&gt;
#allow ssh on 22 pass in quick proto tcp from any to any port 22 pass out quick&lt;br&gt;
proto tcp from any to any port 22&lt;br&gt;
&lt;br&gt;
#allow root(tor) traffic pass out on ! lo0 proto tcp all user root tag \
"allowed"&lt;br&gt; keep state&lt;br&gt;
&lt;br&gt;
pass out on ! lo0 route-to lo0 \&lt;br&gt;
proto tcp all\&lt;br&gt;
! tagged "allowed" \&lt;br&gt;
tag "intercepted" \&lt;br&gt;
keep state&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
As you can see the udp traffic bit is left out and furthermore, the whole&lt;br&gt;
ruleset could be optimized but it works.&lt;br&gt;
&lt;br&gt;
The second nasty bit was compiling tor for iOS 6. I'm pretty sure you know \
the&lt;br&gt; iOS SDK doesn't come with all required by transparent proxy \
functionality&lt;br&gt; include headers, net/pfvar.h in particular. Quick googling gave \
me&lt;br&gt; &lt;br&gt;
&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/pfvar.h" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/pfvar.h&lt;/a&gt; \
as well&lt;br&gt; &lt;br&gt;
as the other 2 missing and required by net/pfvar.h&lt;br&gt;
&lt;br&gt;
&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/sys/tree.h" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/sys/tree.h&lt;/a&gt; \
and&lt;br&gt; &lt;a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/radix.h" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/net/radix.h&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
after downloading those I quickly figured the -DPRIVATE and&lt;br&gt;
-DNO_APPLE_EXTENSIONS flags and compiled tor. Well, it didn't work with tor&lt;br&gt;
giving me an ENODEV error over ioctl() call, so I suspected the headers were too&lt;br&gt;
old. My kernel version was xnu-2107.2.33, but the latest available version of&lt;br&gt;
xnu was 2050.9.2 (&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2050.9.2" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-2050.9.2&lt;/a&gt;), so \
I&lt;br&gt; crossed my fingers and downloaded the required headers from that tree.&lt;br&gt;
&lt;br&gt;
Some locations have changed since v1456.1.26. My curl commands executed from&lt;br&gt;
inside &lt;SDK&gt;/usr/include looked like this:&lt;br&gt;
&lt;br&gt;
sudo curl -o libkern/tree.h \&lt;br&gt;
&lt;a href="http://opensource.apple.com/source/xnu/xnu-2050.9.2/libkern/libkern/tree.h?txt" \
target="_blank"&gt;http://opensource.apple.com/source/xnu/xnu-2050.9.2/libkern/libkern/tree.h?txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
sudo curl -o net/radix.h \&lt;br&gt;
&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/radix.h?txt" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/radix.h?txt&lt;/a&gt; \
sudo&lt;br&gt; &lt;br&gt;
curl -o net/pfvar.h \&lt;br&gt;
&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/pfvar.h?txt" \
target="_blank"&gt;http://www.opensource.apple.com/source/xnu/xnu-2050.9.2/bsd/net/pfvar.h?txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
I noticed that NO_APPLE_EXTENSIONS ifdefs were gone from the pfvar.h, so I&lt;br&gt;
patched tor/src/or/connection_edge.c, replacing all instances of pnl.sport,&lt;br&gt;
pnl.dport and pnl.rdport with pnl.sxport.port,  pnl.dxport.port and&lt;br&gt;
pnl.rdxport.port respectively.&lt;br&gt;
&lt;br&gt;
After compilation I ran tor from cl like: ./tor --User root --DataDirectory .&lt;br&gt;
--TransPort 9040 --SocksPort 0 --Log debug making sure it works only in&lt;br&gt;
Transparent Proxy mode with SOCKS disabled&lt;br&gt;
&lt;br&gt;
Toggling pf rules in another terminal causes &lt;a href="http://showmyip.com" \
target="_blank"&gt;showmyip.com&lt;/a&gt; to show different IPs&lt;br&gt; while observing traffic \
flowing through tor.&lt;br&gt; &lt;br&gt;
Hope this information helps.&lt;br&gt;
&lt;br&gt;
All the best,&lt;br&gt;
E.F.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120930022929</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-09-30 02:29:29-0400</timestampReceived><subject>Re: [tor-dev] automation of open links in new tab in TBB</subject><body>

No, I can not help you with this, I don't know the answers. I brought
you back on track. Told you, how you can start Tor Browser like Firefox.
That's the only difference in Tor Browser (+ Tor Button + rebranding +
Firefox patches).

For the rest of your questions, I suggest asking them in regular Firefox
places. Don't confuse them with Tor Browser. Ask Firefox questions, test
with Firefox first, afterwards test with Tor Browser, should work, as
Tor Browser does not break so many features.

jiang song:
&gt; thanks, BTW,
&gt; do you know how to close the tab using command line like this?
&gt; 
&gt; and when opening a youtube link like this:
&gt; http://www.youtube.com/embed/CistYoLwL7M
&gt; 
&gt; is there any script or command line to automate clicking on the "play button" ?
&gt; thanks!
&gt; 
&gt; On 9/28/12, adrelanos &lt;adrelanos@riseup.net&gt; wrote:
&gt;&gt; Tested again on Debian Wheezy.
&gt;&gt;
&gt;&gt; cd ~
&gt;&gt;
&gt;&gt; ~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab
&gt;&gt; https://www.startpage.com
&gt;&gt;
&gt;&gt; Works for me.
&gt;&gt;
&gt;&gt; (Assumes TBB is installed to ~/tor-browser_en-US.)
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120806162606</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-08-06 16:26:06-0400</timestampReceived><subject>Re: [tor-dev] #6512 [Stem]: TorExport Module and Unit Testing</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

Looking at coverage the test provides, I was under the impression that the
various cases of include_fields and exclude fields (e.g. if they overlap)
should also be tested, but if you find that unnecessary, that would help
explain why my unit tests were difficult to follow.

In the mocking changes that I made, I added functionality for mocking
functions that take keyword arguments.  Though it is no longer necessary
with the new unit tests, I was wondering if there was something I could
have done better with that code as it seems such functionality may come in
useful in the future.

You may have already noticed this (and your documentation is consistent
with this), but just to be sure, the new export code won't work with
generators, which I bring up as this is what server_descriptor.parse_file()
returns.  So a user of this module would need to covert that generator into
a list or tuple, which could be rather large.

&gt;&gt;&gt; def gener(list=[1,2,3,4]):
...   for item in list:
...     yield item

&gt;&gt;&gt; gener()[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'generator' object has no attribute '__getitem__'

Working with Professor Danner this summer (and from the CS classes I have
taken so far), I am under the impression that run-time type checking can be
expensive and generally falls outside of the realm of 'pythonic' code.  To
help Megan and I understand this design change, could you explain why you
went with this style (e.g. line 83 in stem/descriptor/export.py)?  Along
similar lines, why wouldn't we also check the types of other parameters
passed into the function?

Thank you in advance for answering these questions -- this summer has been
(and still is) a phenomenal learning experience for us, and gaining insight
on coding style and the like is crucial to developing our own coding
techniques.

Looking at the code, I must apologize.  I didn't mean to take so much of
your time rewriting the code.  That said, looking at your implementation
gave me some perspective in evaluating the code I submitted so I don't make
similar mistakes in the future.

Best,
Erik

On Sat, Aug 4, 2012 at 3:22 PM, Tor Bug Tracker &amp; Wiki &lt;
torproject-admin@torproject.org&gt; wrote:

&gt; #6512: TorExport Module and Unit Testing
&gt;
&gt; ----------------------------+-----------------------------------------------
&gt;     Reporter:  ErikI        |       Owner:  atagar
&gt;         Type:  enhancement  |      Status:  closed
&gt;     Priority:  normal       |   Milestone:
&gt;    Component:  Stem         |     Version:
&gt;   Resolution:  implemented  |    Keywords:
&gt;       Parent:               |      Points:
&gt; Actualpoints:               |
&gt;
&gt; ----------------------------+-----------------------------------------------
&gt; Changes (by atagar):
&gt;
&gt;   * status:  needs_review =&gt; closed
&gt;   * resolution:  =&gt; implemented
&gt;
&gt;
&gt; Comment:
&gt;
&gt;  Thanks Erik, merged with some revisions [1]. I found the unit tests a bit
&gt;  hard to follow, especially since it wasn't broken down by the test cases
&gt;  so I rewrote those. Let me know if I missed any test cases that you think
&gt;  are important.
&gt;
&gt;  [1]
&gt;
&gt; https://gitweb.torproject.org/stem.git/commitdiff/7022021c4207a0066cb93261629f2ba020d307f6
&gt;
&gt; --
&gt; Ticket URL: &lt;
&gt; https://trac.torproject.org/projects/tor/ticket/6512#comment:3&gt;
&gt; Tor Bug Tracker &amp; Wiki &lt;https://trac.torproject.org/&gt;
&gt; The Tor Project: anonymity online
&gt;

[Attachment #5 (text/html)]

Hi Damian,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Looking at coverage the test provides, I was under the \
impression that the various cases of include_fields and exclude fields (e.g. if they \
overlap) should also be tested, but if you find that unnecessary, that would help \
explain why my unit tests were difficult to follow.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the mocking changes that I made, I added functionality for \
mocking functions that take keyword arguments.  Though it is no longer necessary with \
the new unit tests, I was wondering if there was something I could have done better \
with that code as it seems such functionality may come in useful in the future.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You may have already noticed this (and your documentation is \
consistent with this), but just to be sure, the new export code won't work with \
generators, which I bring up as this is what server_descriptor.parse_file() returns.  \
So a user of this module would need to covert that generator into a list or tuple, \
which could be rather large.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&gt;&gt;&gt; def gener(list=[1,2,3,4]):&lt;/div&gt;&lt;div&gt;...   for \
item in list:&lt;/div&gt;&lt;div&gt;...     yield item&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;&gt;&gt; \
gener()[0]&lt;/div&gt;&lt;div&gt;Traceback (most recent call last):&lt;/div&gt;

&lt;div&gt;  File "&lt;stdin&gt;", line 1, in &lt;module&gt;&lt;/div&gt;&lt;div&gt;TypeError: \
'generator' object has no attribute \
'__getitem__'&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Working with Professor Danner \
this summer (and from the CS classes I have taken so far), I am under the impression \
that run-time type checking can be expensive and generally falls outside of the realm \
of 'pythonic' code.  To help Megan and I understand this design change, could \
you explain why you went with this style (e.g. line 83 in stem/descriptor/export.py)? \
Along similar lines, why wouldn't we also check the types of other parameters \
passed into the function?&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you in advance for answering these questions -- this summer \
has been (and still is) a phenomenal learning experience for us, and gaining insight \
on coding style and the like is crucial to developing our own coding \
techniques.&lt;/div&gt;


&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Looking at the code, I must apologize.  I didn't mean to take \
so much of your time rewriting the code.  That said, looking at your implementation \
gave me some perspective in evaluating the code I submitted so I don't make \
similar mistakes in the future.&lt;/div&gt;


&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Erik&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Aug \
4, 2012 at 3:22 PM, Tor Bug Tracker &amp; Wiki &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:torproject-admin@torproject.org" \
target="_blank"&gt;torproject-admin@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;


&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div&gt;#6512: TorExport Module and Unit Testing&lt;br&gt; \
&lt;/div&gt;----------------------------+-----------------------------------------------&lt;br&gt;
  Reporter:  ErikI        |       Owner:  atagar&lt;br&gt;
        Type:  enhancement  |      Status:  closed&lt;br&gt;
&lt;div&gt;    Priority:  normal       |   Milestone:&lt;br&gt;
   Component:  Stem         |     Version:&lt;br&gt;
&lt;/div&gt;  Resolution:  implemented  |    Keywords:&lt;br&gt;
      Parent:               |      Points:&lt;br&gt;
Actualpoints:               |&lt;br&gt;
----------------------------+-----------------------------------------------&lt;br&gt;
Changes (by atagar):&lt;br&gt;
&lt;br&gt;
  * status:  needs_review =&gt; closed&lt;br&gt;
  * resolution:  =&gt; implemented&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Comment:&lt;br&gt;
&lt;br&gt;
 Thanks Erik, merged with some revisions [1]. I found the unit tests a bit&lt;br&gt;
 hard to follow, especially since it wasn't broken down by the test cases&lt;br&gt;
 so I rewrote those. Let me know if I missed any test cases that you think&lt;br&gt;
 are important.&lt;br&gt;
&lt;br&gt;
 [1]&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/stem.git/commitdiff/7022021c4207a0066cb93261629f2ba020d307f6" \
target="_blank"&gt;https://gitweb.torproject.org/stem.git/commitdiff/7022021c4207a0066cb93261629f2ba020d307f6&lt;/a&gt;&lt;br&gt;
 &lt;span&gt;&lt;font color="#888888"&gt;&lt;br&gt;
--&lt;br&gt;
Ticket URL: &lt;&lt;a href="https://trac.torproject.org/projects/tor/ticket/6512#comment:3" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/6512#comment:3&lt;/a&gt;&gt;&lt;br&gt;
 &lt;/font&gt;&lt;/span&gt;&lt;div&gt;&lt;div&gt;Tor Bug Tracker &amp; Wiki &lt;&lt;a \
href="https://trac.torproject.org/" \
target="_blank"&gt;https://trac.torproject.org/&lt;/a&gt;&gt;&lt;br&gt; The Tor Project: anonymity \
online&lt;br&gt; &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120808102216</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-08 10:22:16-0400</timestampReceived><subject>[tor-dev] Next ten Tor Tech Reports (was: First five Tor tech reports)</subject><body>

On 7/12/12 3:12 PM, Karsten Loesing wrote:
&gt; here are the first five metrics tech reports that I'd like to turn into
&gt; Tor tech reports (see #5405 for the idea behind this).

The next batch of ten Tor Tech Reports is now available (all in the list
except for the five from 2011 which I posted here a month ago):

https://research.torproject.org/techreports.html

Converting reports to the new format is still a work in progress.  I'm
done with my own reports for which I had the sources available.  But
there are more reports that I'm going to convert soon:

 - 4 reports from Steven and/or George from 2011 and 2012,

 - 5 blog posts from Roger and 1 blog post from Sebastian from 2011,

 - 1 report from Jake which he's about to finish this week or so.

What other reports are we missing?

Feedback much appreciated!

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808174436</emailId><senderName>"Jason A. Donenfeld"</senderName><senderEmail>jason@zx2c4.com</senderEmail><timestampReceived>2012-08-08 17:44:36-0400</timestampReceived><subject>[tor-dev] [patch] fix vidalia compilation in gcc 4.7</subject><body>

Fixed in a gentoo bug report:

https://422645.bugs.gentoo.org/attachment.cgi?id=320722
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808090437</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-08-08 09:04:37-0400</timestampReceived><subject>[tor-dev] Next Tor release timeframes?</subject><body>

1) Do we have any requirements to release an 0.2.4.1-alpha at any
particular date? I haven't been following e.g. the latest SponsorG
timelines.

2) Nick was enthusiastic about an 0.2.2.38 with the latest fix. Nick,
do you still think that's important? My sense is that it's a totally
esoteric theoretical attack where there's no rush to release.

3) For the next 0.2.3 rc, we might want to merge at least:
https://trac.torproject.org/projects/tor/ticket/6252
https://trac.torproject.org/projects/tor/ticket/6404

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808165322</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-08-08 16:53:22-0400</timestampReceived><subject>[tor-dev] Is it possible to run private Exit nodes?</subject><body>

I have been running private bridges for my VIP contacts for a long time.
I use PublishServerDescriptor 0 to keep my bridges private.

Is it possible to also run a private Exit node?

What would happen, if I hard coded an exit into my torrc that is not
published (if possible at all)?

All the best,
SiNA
-- =

=93If I had eight hours to chop down a tree, I=92d spend the first six of
them sharpening my axe.=94 -Abraham Lincoln
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120806150845</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-06 15:08:45-0400</timestampReceived><subject>[tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

Hi,

I posted this message in tor-relays, but it seems to me (and another 
people) that dev mail-list is better channel to use.

Thanks!

-------- Original Message --------
Hi all,

 From time to time my tor node (minibofh) stopped to work properly;
since it's a tiny FreeBSD VPS, the root origin was some CPU
over-consumption. I'm taking some actions to fix it (more swap, freeing
CPU from another services... etc).

The FreeBSD tor port offers to you the tcmalloc compilation option, so I
had some fun reading this interesting paper:
http://goog-perftools.sourceforge.net/doc/tcmalloc.html

I recompiled the tor port but just using the tcmalloc option. Actually,
now I got the google-perftool package and, obviously, the tcmalloc library:

mb# pkg_info | grep google
google-perftools-1.8.3 Fast, multi-threaded malloc() and nifty
performance analysi

mb# pkg_info -L google-perftools-1.8.3 | grep malloc.so
/usr/local/lib/libtcmalloc.so
/usr/local/lib/libtcmalloc.so.2

But, when I'm checking which libraries the tor binary is using, I get:

mb# ldd /usr/local/bin/tor
/usr/local/bin/tor:
	libz.so.5 =&gt; /lib/libz.so.5 (0x281aa000)
	libm.so.5 =&gt; /lib/libm.so.5 (0x281bc000)
	libevent-2.0.so.6 =&gt; /usr/local/lib/event2/libevent-2.0.so.6 (0x2844e000)
	libssl.so.7 =&gt; /usr/local/lib/libssl.so.7 (0x28489000)
	libcrypto.so.7 =&gt; /usr/local/lib/libcrypto.so.7 (0x284d7000)
	libthr.so.3 =&gt; /lib/libthr.so.3 (0x281df000)
	libc.so.7 =&gt; /lib/libc.so.7 (0x28090000)


So... I understand that the tor binary is actually NOT using the new
tcmalloc library.

Am I wrong?

PS. I adding a CC to tor FreeBSD port mantainer.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810151133</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-08-10 15:11:33-0400</timestampReceived><subject>[tor-dev] [Stegotorus] Strange comparison in chop_circuit_t::send_targeted(conn, blocksize)</subject><body>

Hey Zack,

Please take a look at this comparison in
chop_circuit_t::send_targeted(conn, blocksize):

  if (avail &gt; blocksize - lo)
    avail = blocksize - lo;
  else if (avail &gt; SECTION_LEN)
    avail = SECTION_LEN;
  else if (upstream_eof &amp;&amp; !sent_fin)
    // this block will carry the last byte of real data to be sent in
    // this direction; mark it as such
    op = op_FIN;

Assume SECTION_LEN = 65536 suppose 
avail = 67000 blocksize - lo = 66500 =&gt; avail = 66500
avail = 67000 blocksize - lo = 67500 =&gt; avail = 65536

it's like that if avail is very big then the it is OK if it's bigger than
SECTION_LEN but if it's moderately big then it shouldn't be bigger than
SECTION_LEN, which seems very arbitrary.

On the other hand if blocksize - lo &lt; SECTION_LEN again it doesn't make sense,
because then it never reaches to (avail &gt; SECTION_LEN).

So it's like if SECTION_LEN &lt; blocksize - lo the behavior is random and if
it's SECTION_LEN &gt; blocksize - lo is useless. 

Moreover, when blocksize - lo &gt; avail &gt; SECTION_LEN I'm getting
assertion error in the other overload of send_targeted.

Everything makes sense and the assertion failure goes away if I replace 
the code with this:

  if ((avail &gt; blocksize - lo) || (avail &gt; SECTION_LEN))
  { 
    avail = min(blocksize - lo, SECTION_LEN);
  }                
  else if (upstream_eof &amp;&amp; !sent_fin)
    // this block will carry the last byte of real data to be sent in
    // this direction; mark it as such
    op = op_FIN;

Please tell me what you think and if the second chunk is the correct
replacement?

Bests,
vmon 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808223625</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-08-08 22:36:25-0400</timestampReceived><subject>[tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

Hi, all!

Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
submission called, "An Efficient Key-Exchange for Onion Routing".
It's meant to be more CPU-efficient than the proposed "ntor"
handshake.  With permission from Esfandiar, I'm sending a link to the
paper here for discussion.

http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html

What do people think?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810222101</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-10 22:21:01-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD [SOLVED ?]</subject><body>

Well, finally it seems a Tor configure.in bug/problem:

http://lists.freebsd.org/pipermail/freebsd-ports/2012-August/077440.html

So.. I guess it has to be fixed by some tor dev then.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809212830</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-09 21:28:30-0400</timestampReceived><subject>[tor-dev] Pyonionoo</subject><body>

Hi Karsten,

We have a preliminary version of the Pyonionoo front-end at

	git://github.com/meganchang/pyonionoo.git

Make sure to look at the database branch.  We'd be happy to hear feedback.

Unfortunately, this isn't as far as we wanted to be.  A run-down of the 
main open issues:

* We ran into issues with getting sqlite in-memory databases to play 
nicely with multiple threads (stop-gap solution:  use an on-disk 
database).

* Right now it just has the summary handler, though adding the other 
handlers probably isn't a problem (probably a bit of minor refactoring).

* The search GET parameter isn't implemented yet, in part because we 
realized that implementing it as specified in the protocol isn't so 
straightforward, at least in SQLite (which does not, in an obvious way, 
support searching for initial substrings).

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711102033</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-11 10:20:33-0400</timestampReceived><subject>[tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

Hi everyone,

we have an upcoming sponsor contract starting on October 1, 2012 and
running until August 31, 2013.  To be precise, this contract is not
signed yet, but it's very likely to happen.

The general deliverables are already defined, but we can suggest which
parts we plan to have done by which milestone.  The deliverables can be
found here:

  https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorL

I suggest we have an IRC meeting with all developers who'll be involved
in this contract.  Deliverables are, of course, not yet assigned to
developers.  Here are the people who probably should be at the meeting
(with most relevant deliverable numbers in parentheses):

 - Aaron (4)
 - Erinn (9, 10)
 - George (1, 2, 3)
 - Jake (10)
 - Karsten (2)
 - Mike (8)
 - Nick (3)
 - Runa (5, 6, 7)
 - Sebastian (9)
 - Tomas (9)

The meeting will happen

  July 18, 15:00--17:00 UTC in #tor-dev.

The main goal of the meeting is to decide on good milestones for
December 31, March 31, June 30, and August 31 that will go into the
contract.

If somebody cannot make the meeting, please talk to me about their
possible deliverables before or shortly after the meeting.  (If too many
people cannot make the meeting, we may reschedule it, but for the
moment, let's aim for the date written above.)

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120820032553</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-08-20 03:25:53-0400</timestampReceived><subject>[tor-dev] [GSoC] [Stegotorus] Recent activities</subject><body>

Hey Zack,

I know you are super busy packing for your big move, but I thought as tomorrow is the \
hard deadline for GSoC, is not a bad ideas to give you some final update.

So most of last week I spent on the conflict that occurred between
libcurl and libevent having their eyes on the same socket. I tried
different ugly and uglier solutions but finally settled on this one
which is not that bad:

http://stackoverflow.com/questions/12021217/how-to-ask-libcurl-not-to-listen-on-a-socket-just-send-a-url-request-over-it?answertab=votes#tab-top


After that, I'm passing all time line tests now. However, when I look at
the client log, I see that some of the sequence no are missing in the
recv: like this

203.7169 [debug] recv: &lt;3.81&gt; receiving block 42 &lt;d=0 p=9 f=DAT&gt;
T:203.7170: ckt 3 &lt;ntp 1 outq 0&gt;: recv 42 &lt;d=0 p=9 f=DAT&gt;

and the next recv is like this:

203.7926 [debug] recv: &lt;3.99&gt; receiving block 60 &lt;d=0 p=1 f=DAT&gt;
T:203.7927: ckt 3 &lt;ntp 1 outq 0&gt;: recv 60 &lt;d=0 p=1 f=DAT&gt;

Is this for sure an error and loss of data? or there is a normal
situation that such a thing can happen? For example when the whole
block can't be sent over one connection? (otherwise how do the tl tests all pass?).

Further more, I merged the payload scraper and stegotorus. I this way,
http_apache checks for the payload database and if it's not there it
calls the scraper (it needs apache to be installed on the same
machine). These all are commited on the github.

I started writing a unit test that fetch a webpage directly (using curl)
and through stegotorus and check if they are the same. I thought curl is
best approximation of a browser that is available to us. But as I don't
think I can finish that till tomorrow, I'm going to spend the remaining
time on documenting the 'uri transport protocol' and deal with small
issues.

After we are done with the evaluation, I'll go back to unit testing.

Thanks for your help.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120819171427</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-08-19 17:14:27-0400</timestampReceived><subject>[tor-dev] DNS(SEC) draft update</subject><body>

Hi Nick,

I've revised the DNS draft, attaching it. In section 4 there are some options
for integration with libunbound, but each of them requires some work with the
stock libunbound code.

Ondrej

["xxx-dns-dnssec.txt" (text/plain)]

Filename: xxx-dns-dnssec.txt
Title: Support for full DNS and DNSSEC resolution in Tor
Authors: Ondrej Mikle
Created: 4 February 2012
Modified: 19 August 2012
Status: Draft

0. Overview

  Adding support for any DNS query type to Tor, as well as DNSSEC support.

0.1. Motivation

  Many applications running over Tor need more than just resolving FQDN to
  IPv4 and vice versa. Sometimes to prevent DNS leaks the applications have to
  be hacked around to be supplied necessary data by hand (e.g. SRV records in
  XMPP). TLS connections will benefit from planned TLSA record that provides
  certificate pinning to avoid another Diginotar-like fiasco.
  
  DNSSEC is part of the DNS protocol and the most appropriate place for DNSSEC
  API would be probably in OS libraries (e.g. libc). However that will
  probably take time until it becomes widespread.

  On the Tor's side (as opposed to application's side), DNSSEC will provide
  protection against DNS cache-poisoning attacks (provided that exit is not
  malicious itself, but still reduces attack surface).

1. Design

1.1 New cells

  There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (we'll
  use DNS_BEGIN and DNS_RESPONSE for short below).

  DNS_BEGIN payload:

    DNS packet data (variable length)

  The DNS packet must be generated internally by libunbound to avoid
  fingerprinting users by differences in client resolvers' behavior.

  DNS_RESPONSE payload:
  
    total length (2 octets)
    data         (variable)
  
  Data contains the reply DNS packet or its part if packet would not fit into
  the cell. Total length describes length of complete response packet, thus
  one DNS_BEGIN may be answered by multiple DNS_RESPONSE cells.

  DNS_BEGIN must use a non-zero, distinct StreamID, corresponding DNS_RESPONSE
  will use the same StreamID. Similarly to RELAY_RESOLVE(D), no actual stream
  is created.

  AXFR and IXRF are not supported in this cell by design (see specialized tool
  below).

2. Interfaces to applications

  DNSPort evdns - existing implementation will be updated to use DNS_BEGIN.
  
3. Limitations on DNS query

  Query class is limited to IN (INTERNET) since the only other useful class
  CHAOS is practical for directly querying authoritative servers (OR in this
  case acts as a recursive resolver). Query for class other than IN will
  return REFUSED in the inner DNS packet.

  Multiple questions in a single packet are not supported and OR will respond
  with REFUSED as the DNS error code.

  All query RR types are allowed.

  [XXXX I originally thought about some exit policy like "basic RR types" and
  "all RRs", but managing such list in deployed nodes with extra directory
  flags outweighs the benefit. Maybe disallow ANY RR type? ]

  Client as well as OR MUST block attempts to resolve local RFC 1918, 4193,
  4291 adresses (PTR). REFUSED will be returned as DNS error code from OR.

  Request for special names (.onion, .exit, .noconnect) will return REFUSED.

4. Implementation notes

  Client will periodically purge incomplete DNS replies. Any unexpected
  DNS_RESPONSE will be dropped.

  AD flag must be zeroed out on client unless validation is performed.

  [XXXX libunbound lowlevel API, Tor+libunbound libevent loop

  libunbound doesn't publicly expose all the necessary parts of low-level API.
  It can return the received DNS packet, but not let you construct a packet
  and get it in wire-format, for example.

  Options I see:

  a) patch libunbound to be able feed wire-format DNS packets and add API to
  obtain constructed packets instead of sending over network

  b) replace bufferevents for sockets in unbound with something like
  libevent's paired bufferevents. This means that data extracted from
  DNS_RESPONSE/DNS_BEGIN cells would be fed directly to some evbuffers that
  would be picked up by libunbound. It could possibly result in avoiding
  background thread of libunbound's ub_resolve_async running separate libevent
  loop.

  c) bind to some arbitrary local address like 127.1.2.3:53 and use it as
  forwarder for libunbound. The code there would pack/unpack the DNS packets
  from/to libunbound into DNS_BEGIN/DNS_RESPONSE cells. It wouldn't require
  modification of libunbound code, but it's not pretty either. Also the bind
  port must be 53 which usually requires superuser privileges.

  Code of libunbound is fairly complex for me to see outright what would the
  best approach be.
  ]

5. Separate tool for AXFR

  The AXFR tool will have similar interface like tor-resolve, but will
  return raw DNS data. 
  
  Parameters are: query domain, server IP of authoritative DNS. 
  
  The tool will transfer the data through "ordinary" tunnel using RELAY_BEGIN
  and related cells.
  
  This design decision serves two goals:

  - DNS_BEGIN and DNS_RESPONSE will be simpler to implement (lower chance of
    bugs)
  - in practice it's often useful do AXFR queries on secondary authoritative
    DNS servers

  IXFR will not be supported (infrequent corner case, can be done by manual
  tunnel creation over Tor if truly necessary).

6. Security implications

  Transaction ID is provided randomly by libunbound, no need to modify.

  As proposal 171 mentions, we need mitigate circuit correlation. One solution
  would be keeping multiple streams to multiple exit nodes and picking one at
  random for DNS resolution. Other would be keeping DNS-resolving circuit open
  only for a short time (e.g. 1-2 minutes). Randomly changing the circuits
  however means that it would probably incur additional latency since there
  would likely be a few cache misses on the newly selected exits.
  

7. TTL normalization idea 

  A bit complex on implementation, because it requires parsing DNS packets at
  exit node.

  TTL in reply DNS packet MUST be normalized at exit node so that client won't
  learn what other clients queried. The normalization is done in following
  way:

  - for a RR, the original TTL value received from authoritative DNS server
    should be used when sending DNS_RESPONSE, trimming the values to interval
    [5, 600]
  - does not pose "ghost-cache-attack", since once RR is flushed from
    libunbound's cache, it must be fetched anew
  


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120820190009</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-08-20 19:00:09-0400</timestampReceived><subject>[tor-dev] [GSoC] [Stegotorus] Pencil down</subject><body>

Hey Zack,

I just did my last pushes before putting my pencil down for the final
evaluations. They take care of the followings:

- The remaining of all your comments on the
github. Except for "always use xalloc instead of new". I have used new extensively \
for instantiating objects. What's exactly about xalloc that's better than new, if you \
have overloaded both of them?

- Documenting the http_apache steg protocol.

The tl_oneway_c2s fails the http-proxy test. It still have problem
with one-sided EOF. It used to pass when I allow the one way socket
shutdown in the http proxy. So, I think stegotorus still have problem
with EOF management. You might want to look at it when you have time.

Happy moving!
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120823170306</emailId><senderName>tagnaq</senderName><senderEmail>tagnaq@gmail.com</senderEmail><timestampReceived>2012-08-23 17:03:06-0400</timestampReceived><subject>[tor-dev] an alternate MyFamily definition</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi,

when requesting a new group by feature for compass [1] (#6662 [2]) I
discussed with Karsten about how to handle asynchronous/overlapping
families:

karsten:
&gt; Here's an example. Assume we have three relays: A, B, and C. These
&gt; relays state the following family relationships:
&gt; 
&gt; A: A, B B: A, B, C C: B, C
&gt; 
&gt; We require mutual agreement about being in the same family, so we
&gt; could either come up with family A, B or with family B, C. Which
&gt; one is correct?


I proposed to go with
family = A, B, C
because there is a mutual agreement between A&lt;-&gt;B and  B&lt;-&gt;C.

A and C agreed to be in a family with B, and B agreed to be in a
family with A and C.
Such configurations can be found in the wild mostly due to incomplete
MyFamily configurations on relays in big families.

As every big relay operator knows configuring families is a
non-trivial effort with a growing number of relays.
Now I thought about it and wanted to suggest this MyFamily
interpretation as an alternate approach to the fully mutual setup
where *every* relay must be reconfigured as opposed to just two of them.
Why?
This would reduce the configuration effort required when adding a new
relay to *two* relays regardless of how many relays are in your family.

Now, the MyFamily configuration overhead for big families is a well
known problem so I suppose someone else did already propose this approach?

What do you think about it?



[1] https://compass.torproject.org
[2] https://trac.torproject.org/projects/tor/ticket/6662	


a additional example to make this clearer:

A: A, B, C
B: A, B, C
C: A, B, C
D: A, B, C, D

family = A, B, C

A family member must have a *mutual* agreement with at least *one* node.
-----BEGIN PGP SIGNATURE-----

iF4EAREKAAYFAlA2YkoACgkQyM26BSNOM7Yp2wD/VTBw8BmUJlRZtIfXahIGX+t0
zwzP6MfRDwgPCsQMeEUA/3dUyyoq91Fx4lmihWHis2DZNAoM/CHh2MnwgMNL/W1W
=FWRU
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120823182657</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-08-23 18:26:57-0400</timestampReceived><subject>Re: [tor-dev] an alternate MyFamily definition</subject><body>

On Thu, 23 Aug 2012 19:03:06 +0000, tagnaq wrote:
...
&gt; Why?
&gt; This would reduce the configuration effort required when adding a new
&gt; relay to *two* relays regardless of how many relays are in your family.

True, but: If one relay disappears for a while then the family may
break into two if it was the only joint. So from an operative point
a bit more redundancy would be helpful.

...
&gt; A family member must have a *mutual* agreement with at least *one* node.

That's (the *mutual*) is an important point that wasn't immediately
clear from the preceding. Otherwise I alone can put everything in a
single family under this definition. :-)

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120823201257</emailId><senderName>tagnaq</senderName><senderEmail>tagnaq@gmail.com</senderEmail><timestampReceived>2012-08-23 20:12:57-0400</timestampReceived><subject>Re: [tor-dev] an alternate MyFamily definition</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

&gt; True, but: If one relay disappears for a while then the family may 
&gt; break into two if it was the only joint.

For the family (see #6662):
3cce3a91f6a625~8DE5 bc1245cbe16d5ee9b2~2D25

the connecting relay was down since 2012-04-04 and still karsten
created the family in this case, but I'm not sure if karsten used more
descriptors as would usually be available to an ordinary tor client.

https://metrics.torproject.org/relay-search.html?search=%24A0EA6A3D1B4D30F5005E89501DB68D4E14A0E183+2012-04












one more example:

A: B, C, E   (A is the connecting central node)
B: A
C: A
D: A, B, C, D
E: A

family = A, B, C, E


-----BEGIN PGP SIGNATURE-----

iF4EAREKAAYFAlA2jskACgkQyM26BSNOM7aoqwD+JossIuqs3Zps9NYLF/lrK2XS
DG7CaenEFNdsWN9mwVEA/3I3uH6YAiN2MMVR7od5yUAcgDYssmg5tlFm6lQfyJk5
=Z7DY
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120824104304</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-24 10:43:04-0400</timestampReceived><subject>Re: [tor-dev] an alternate MyFamily definition</subject><body>

On 8/23/12 10:12 PM, tagnaq wrote:
&gt; &gt; True, but: If one relay disappears for a while then the family may 
&gt; &gt; break into two if it was the only joint.
&gt; 
&gt; For the family (see #6662):
&gt; 3cce3a91f6a625~8DE5 bc1245cbe16d5ee9b2~2D25
&gt; 
&gt; the connecting relay was down since 2012-04-04 and still karsten
&gt; created the family in this case, but I'm not sure if karsten used more
&gt; descriptors as would usually be available to an ordinary tor client.
&gt; 
&gt; https://metrics.torproject.org/relay-search.html?search=%24A0EA6A3D1B4D30F5005E89501DB68D4E14A0E183+2012-04
&gt; 

My fault.  The script had a bug where it didn't confirm mutual family
relationships correctly.  There's a fixed list attached to #6662.

The script only uses descriptors of currently running relays.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120820004350</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-08-20 00:43:50-0400</timestampReceived><subject>Re: [tor-dev] DNS(SEC) draft update</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Ondrej Mikle (ondrej.mikle@gmail.com):

&gt; I've revised the DNS draft, attaching it. In section 4 there are some options
&gt; for integration with libunbound, but each of them requires some work with the
&gt; stock libunbound code.

I'm not a DNS expert, but I have a couple preliminary requests/questions.

First, can you provide a section in the proposal on the analysis of the
number of round trips over Tor for different request scenarios? If you
offload full DNS responsibility to the client, certain query behaviors
are going to be better than others with respect to the number of round
trips over Tor. We're going to want to minimize these round trips,
especially if we decide we want to rely on DNSsec/DANE for everything.
Clients may also want to use this information to try to intelligently
decide cases where we don't want to do full DNSsec queries and revert to
the oldstyle SOCKS4A.

Second (and related), is it totally insane to map some sort of magic IP
to "foward this query the local exit node resolver" so that the client
can easily get DNS(sec) perspectives from each exit node's resolver
caches? This might both minimize round trips for clients who don't want
to either hardcode 8.8.8.8 or do full recursive resolves against the
root servers. On the other hand, it might complicate query handling on
the exit side and also introduce weird cache/poisoning attacks?

These two areas are probably useful to describe in the proposal, since
it or the spec it turns in to will presumably be read by random people
looking to use the new full DNS support and who might do it wrong,
either from a performance or a security perspective.


&gt; Filename: xxx-dns-dnssec.txt
&gt; Title: Support for full DNS and DNSSEC resolution in Tor
&gt; Authors: Ondrej Mikle
&gt; Created: 4 February 2012
&gt; Modified: 19 August 2012
&gt; Status: Draft
&gt; 
&gt; 0. Overview
&gt; 
&gt;   Adding support for any DNS query type to Tor, as well as DNSSEC support.
&gt; 
&gt; 0.1. Motivation
&gt; 
&gt;   Many applications running over Tor need more than just resolving FQDN to
&gt;   IPv4 and vice versa. Sometimes to prevent DNS leaks the applications have to
&gt;   be hacked around to be supplied necessary data by hand (e.g. SRV records in
&gt;   XMPP). TLS connections will benefit from planned TLSA record that provides
&gt;   certificate pinning to avoid another Diginotar-like fiasco.
&gt;   
&gt;   DNSSEC is part of the DNS protocol and the most appropriate place for DNSSEC
&gt;   API would be probably in OS libraries (e.g. libc). However that will
&gt;   probably take time until it becomes widespread.
&gt; 
&gt;   On the Tor's side (as opposed to application's side), DNSSEC will provide
&gt;   protection against DNS cache-poisoning attacks (provided that exit is not
&gt;   malicious itself, but still reduces attack surface).
&gt; 
&gt; 1. Design
&gt; 
&gt; 1.1 New cells
&gt; 
&gt;   There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (we'll
&gt;   use DNS_BEGIN and DNS_RESPONSE for short below).
&gt; 
&gt;   DNS_BEGIN payload:
&gt; 
&gt;     DNS packet data (variable length)
&gt; 
&gt;   The DNS packet must be generated internally by libunbound to avoid
&gt;   fingerprinting users by differences in client resolvers' behavior.
&gt; 
&gt;   DNS_RESPONSE payload:
&gt;   
&gt;     total length (2 octets)
&gt;     data         (variable)
&gt;   
&gt;   Data contains the reply DNS packet or its part if packet would not fit into
&gt;   the cell. Total length describes length of complete response packet, thus
&gt;   one DNS_BEGIN may be answered by multiple DNS_RESPONSE cells.
&gt; 
&gt;   DNS_BEGIN must use a non-zero, distinct StreamID, corresponding DNS_RESPONSE
&gt;   will use the same StreamID. Similarly to RELAY_RESOLVE(D), no actual stream
&gt;   is created.
&gt; 
&gt;   AXFR and IXRF are not supported in this cell by design (see specialized tool
&gt;   below).
&gt; 
&gt; 2. Interfaces to applications
&gt; 
&gt;   DNSPort evdns - existing implementation will be updated to use DNS_BEGIN.
&gt;   
&gt; 3. Limitations on DNS query
&gt; 
&gt;   Query class is limited to IN (INTERNET) since the only other useful class
&gt;   CHAOS is practical for directly querying authoritative servers (OR in this
&gt;   case acts as a recursive resolver). Query for class other than IN will
&gt;   return REFUSED in the inner DNS packet.
&gt; 
&gt;   Multiple questions in a single packet are not supported and OR will respond
&gt;   with REFUSED as the DNS error code.
&gt; 
&gt;   All query RR types are allowed.
&gt; 
&gt;   [XXXX I originally thought about some exit policy like "basic RR types" and
&gt;   "all RRs", but managing such list in deployed nodes with extra directory
&gt;   flags outweighs the benefit. Maybe disallow ANY RR type? ]
&gt; 
&gt;   Client as well as OR MUST block attempts to resolve local RFC 1918, 4193,
&gt;   4291 adresses (PTR). REFUSED will be returned as DNS error code from OR.
&gt; 
&gt;   Request for special names (.onion, .exit, .noconnect) will return REFUSED.
&gt; 
&gt; 4. Implementation notes
&gt; 
&gt;   Client will periodically purge incomplete DNS replies. Any unexpected
&gt;   DNS_RESPONSE will be dropped.
&gt; 
&gt;   AD flag must be zeroed out on client unless validation is performed.
&gt; 
&gt;   [XXXX libunbound lowlevel API, Tor+libunbound libevent loop
&gt; 
&gt;   libunbound doesn't publicly expose all the necessary parts of low-level API.
&gt;   It can return the received DNS packet, but not let you construct a packet
&gt;   and get it in wire-format, for example.
&gt; 
&gt;   Options I see:
&gt; 
&gt;   a) patch libunbound to be able feed wire-format DNS packets and add API to
&gt;   obtain constructed packets instead of sending over network
&gt; 
&gt;   b) replace bufferevents for sockets in unbound with something like
&gt;   libevent's paired bufferevents. This means that data extracted from
&gt;   DNS_RESPONSE/DNS_BEGIN cells would be fed directly to some evbuffers that
&gt;   would be picked up by libunbound. It could possibly result in avoiding
&gt;   background thread of libunbound's ub_resolve_async running separate libevent
&gt;   loop.
&gt; 
&gt;   c) bind to some arbitrary local address like 127.1.2.3:53 and use it as
&gt;   forwarder for libunbound. The code there would pack/unpack the DNS packets
&gt;   from/to libunbound into DNS_BEGIN/DNS_RESPONSE cells. It wouldn't require
&gt;   modification of libunbound code, but it's not pretty either. Also the bind
&gt;   port must be 53 which usually requires superuser privileges.
&gt; 
&gt;   Code of libunbound is fairly complex for me to see outright what would the
&gt;   best approach be.
&gt;   ]
&gt; 
&gt; 5. Separate tool for AXFR
&gt; 
&gt;   The AXFR tool will have similar interface like tor-resolve, but will
&gt;   return raw DNS data. 
&gt;   
&gt;   Parameters are: query domain, server IP of authoritative DNS. 
&gt;   
&gt;   The tool will transfer the data through "ordinary" tunnel using RELAY_BEGIN
&gt;   and related cells.
&gt;   
&gt;   This design decision serves two goals:
&gt; 
&gt;   - DNS_BEGIN and DNS_RESPONSE will be simpler to implement (lower chance of
&gt;     bugs)
&gt;   - in practice it's often useful do AXFR queries on secondary authoritative
&gt;     DNS servers
&gt; 
&gt;   IXFR will not be supported (infrequent corner case, can be done by manual
&gt;   tunnel creation over Tor if truly necessary).
&gt; 
&gt; 6. Security implications
&gt; 
&gt;   Transaction ID is provided randomly by libunbound, no need to modify.
&gt; 
&gt;   As proposal 171 mentions, we need mitigate circuit correlation. One solution
&gt;   would be keeping multiple streams to multiple exit nodes and picking one at
&gt;   random for DNS resolution. Other would be keeping DNS-resolving circuit open
&gt;   only for a short time (e.g. 1-2 minutes). Randomly changing the circuits
&gt;   however means that it would probably incur additional latency since there
&gt;   would likely be a few cache misses on the newly selected exits.
&gt;   
&gt; 
&gt; 7. TTL normalization idea 
&gt; 
&gt;   A bit complex on implementation, because it requires parsing DNS packets at
&gt;   exit node.
&gt; 
&gt;   TTL in reply DNS packet MUST be normalized at exit node so that client won't
&gt;   learn what other clients queried. The normalization is done in following
&gt;   way:
&gt; 
&gt;   - for a RR, the original TTL value received from authoritative DNS server
&gt;     should be used when sending DNS_RESPONSE, trimming the values to interval
&gt;     [5, 600]
&gt;   - does not pose "ghost-cache-attack", since once RR is flushed from
&gt;     libunbound's cache, it must be fetched anew
&gt;   

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120719073746</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-19 07:37:46-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On 7/11/12 12:20 PM, Karsten Loesing wrote:
&gt; The meeting will happen
&gt; 
&gt;   July 18, 15:00--17:00 UTC in #tor-dev.

Hi everyone,

here's a summary from talking about sponsor L deliverables in #tor-dev
yesterday.

To quickly recap what what the meeting was about: Sponsor L is very
likely to happen, but the contract is not yet signed.  The contract is
supposed to run from October 2012 to August 2013 and would have
quarterly milestones.  The purpose of the IRC meeting was to get some
developer feedback on the deliverables before negotiating and signing
the contract.  The sponsor L wiki page is here:

https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorL

Note that I'd like to add the (possibly revised) paragraphs below to the
wiki page, so that they don't get lost in everybody's inboxes.  Please
somebody let me know if that's a dumb idea.

The phrasing of deliverable 1, which explicitly mentions "DNS" and
"HTTP", is problematic.  George thinks that DNS and HTTP are hard
transports to write properly.  George is okay with doing a stupid
attempt at an HTTP transport, but he's not prepared to promise a "good"
HTTP/DNS transport.  We should try to take out the words "DNS" and
"HTTP" from the deliverable text.  If it's too late to do that, we
should make sure that we can replace them with better transports, maybe
after writing down why we think the transports we picked are better.  If
the focus of this deliverable isn't just on building and deploying
transports, George would prefer to take care of the pluggable transport
ecosystem for future deployment: develop and deploy pyptlib and a Python
transport or two; develop (and potentially deploy) obfs3; keep an eye
out (and help) on academic research; help Zack with Stegotorus,
especially if he is interested in porting it to Python.  We didn't talk
about milestones, because the question of deliverable phrasing or
internal interpretation needs to be answered first.

George and Nick say that, in order to complete deliverable 2, we'll have
to finish #5040 which depends on #4773 (which overlaps with deliverable
3).  Nick thinks we can promise "progress towards" these two tickets for
December, and aim to implement them in December, with a possibility of
slipping to a March deliverable.  Then we'll have some time for
obfsproxy bridges to report stats, so that Karsten can make graphs for
June or August at the latest.

The remaining part of deliverable 3, minus #4773 which is part of
deliverable 2, is to implement the safe-cookie authentication mechanism.
 The same milestones apply here as to deliverable 2, so "progress
towards" in December and "done" in March.

Deliverable 4 will already be done before the sponsor L contract would
start.  It's promised for sponsor G for September 2012.  Aaron says that
BridgeDB is ready, minus any tweaks we want to make, and a Tor 0.2.4
build that people can run.  Aaron would like to get some public
obfsproxy bridges running Tor 0.2.4 listed in bridges.tpo before end of
September 2012.  We'll probably have to promise something else for
deliverable 4.

Deliverable 5 is totally doable, says Runa.  This deliverable involves a
few substeps which we might derive milestones from: rewriting parts of
the website is something we can do ourselves; planning some kind of
campaign around the videos to be created and not just putting them out
there is something we can do, too; writing screenplays for videos is
something we'll have to do together with a partner; creating videos is
something we'll have to find a partner for; starting the campaign is
something we can do.

Deliverable 6 is doable.  Runa thinks she could either be the community
manager by extending her tasks, or we could hire a new person.  She also
has an idea who to hire for English, Farsi, and Arabic; there was a
brief discussion between Runa and Nick about making an open call for
these hires vs. only asking people we know.  Runa thinks that the trick
for paid support is to find a way to let anonymous users pay for support
and still make sure they get a reply in time according to the service
level agreement we have to create.  Runa is wondering why we want
funding for languages no one has emailed us in (Spanish and French);
though nobody has emailed us in Arabic, either.

Deliverable 7 is doable.  Runa is somewhat unhappy that funding doesn't
include Arabic.  She says a large number of our users speak either Farsi
or Arabic, so not having funding for Arabic translations (and thus
relying on volunteers) seems silly; if we have funding for Arabic
support, we should also include Arabic translations.  Runa has an idea
of who to hire for Farsi and Arabic translation, no idea about
Vietnamese and Chinese (but can't be too hard to find someone).

We didn't talk about deliverable 8 at the meeting.  Maybe Mike can reply
here and give some quick feedback on this deliverable with respect to
phrasing/interpreting the deliverable text and possible tasks to promise
for the four milestones?

Deliverable 9 substantially overlaps with Sebastian working on Thandy in
Q3.  Sebastian is unclear whether his work will be funded by sponsor L
money, and if not, what work remains to be funded by sponsor L.
Sebastian's plan for Q3 is that Thandy bundles should exist and work at
the end of Q3, which is probably the hardest part of deliverable 9.
Deliverable 9 further requires coordination between Vidalia and Tor with
respect to updating config options.  Sebastian suggests to complete
deliverable 9 by March 2013.  December 2012 would give us just three
months of testing which may not be sufficient to make Thandy the new
default distribution mechanism, but we also shouldn't push it back
further than March 2013.  Aaron is also interested in working on Thandy
and will talk to Sebastian about it.

We didn't talk about deliverable 10 at the meeting.  Maybe Erinn or Jake
can reply here and give some quick feedback on this deliverable with
respect to phrasing/interpreting the deliverable text and possible tasks
to promise for the four milestones?

Thanks to everyone at the meeting for taking the time.  Hopefully this
feedback will help negotiating the final contract.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120719190828</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-19 19:08:28-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Karsten Loesing (karsten@torproject.org):

&gt; On 7/11/12 12:20 PM, Karsten Loesing wrote:
&gt; &gt; The meeting will happen
&gt; &gt; 
&gt; &gt;   July 18, 15:00--17:00 UTC in #tor-dev.
&gt; 
&gt; We didn't talk about deliverable 8 at the meeting.  Maybe Mike can reply
&gt; here and give some quick feedback on this deliverable with respect to
&gt; phrasing/interpreting the deliverable text and possible tasks to promise
&gt; for the four milestones?

Sorry for missing the meeting, but we did discuss this together on the
previous evening. The general plan is to hire someone new. There was
some hope of combining funding from a couple different orgs to start the
position earlier, but it looks like that won't be happening before
SponsorL funding is inked. Instead, it looks like we'll get some general
development assistence from other existing staff at those orgs.

Here's the job announcement page that needs to be updated to reflect a
possible October start date:
https://www.torproject.org/about/jobs-browserhacker.html.en

Action item 0 is to figure out how and where to announce that.


As per specific deliverables, can we do something as simple as "Solve
the Browser-related trac tickets with keywords tbb-disk-leak,
tbb-linkability, tbb-fingerprinting, and tbb-usability in trac priority
order"?

The development landscape in the browser space is very much in a state
of change, so I'd like max flexibility to deal with chaos over here,
within reason.

tbb-disk-leak tickets come directly from new and existing violations of
https://www.torproject.org/projects/torbrowser/design/#security

tbb-linkability and tbb-fingerprinting come directly from new and
existing violations of our 3 privacy properties:
https://www.torproject.org/projects/torbrowser/design/#privacy

I have not yet created any tbb-usability tickets, but I have a pile to file
from http://petsymposium.org/2012/papers/hotpets12-1-usability.pdf, a
pile of complaints from friends, and I hope to extract another pile from
the support tracker, if possible.


The deliverable language must absolutely be clear that we do not expect
to solve all of these tickets to meet it, however. They will appear
constantly as new Firefox releases are made. Some months, I have been
able to keep up with the ticket creation rate, though there is a ~50
ticket backlog from the months where I have not. It's not at all clear
that one additional person for only 6 months or whatever will be able to
eliminate that backlog before the end of the contract. In fact, that
almost certainly won't happen on that timeframe.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120719200223</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-07-19 20:02:23-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Thu, 19 Jul 2012 12:08:28 -0700
Mike Perry &lt;mikeperry@torproject.org&gt; wrote:

&gt; Here's the job announcement page that needs to be updated to reflect a
&gt; possible October start date:
&gt; https://www.torproject.org/about/jobs-browserhacker.html.en
&gt; 
&gt; Action item 0 is to figure out how and where to announce that.

Action item pre-0 is to rework the content on that page. I'm
currently working with employment lawyers and HR people to sort out
what is "non-standard" from "illegal according to US labor laws". I'd
rather spend money on hiring a person than defending a lawsuit from a
bored person looking to sue Tor for labor law violations.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120719203129</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-19 20:31:29-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Andrew Lewman (andrew@torproject.is):

&gt; On Thu, 19 Jul 2012 12:08:28 -0700
&gt; Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; &gt; Here's the job announcement page that needs to be updated to reflect a
&gt; &gt; possible October start date:
&gt; &gt; https://www.torproject.org/about/jobs-browserhacker.html.en
&gt; &gt; 
&gt; &gt; Action item 0 is to figure out how and where to announce that.
&gt; 
&gt; Action item pre-0 is to rework the content on that page. I'm
&gt; currently working with employment lawyers and HR people to sort out
&gt; what is "non-standard" from "illegal according to US labor laws". I'd
&gt; rather spend money on hiring a person than defending a lawsuit from a
&gt; bored person looking to sue Tor for labor law violations.

Someone who knows how to do that should make sure to do the same to
https://www.torproject.org/about/jobs-coredev.html.en, which I copied
off of pretty darn closely. Or perhaps just remove the link to it?



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120719235552</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-07-19 23:55:52-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Thu, Jul 19, 2012 at 09:37:46AM +0200, Karsten Loesing wrote:
&gt; here's a summary from talking about sponsor L deliverables in #tor-dev
&gt; yesterday.

Thanks for working on this!

&gt; To quickly recap what what the meeting was about: Sponsor L is very
&gt; likely to happen, but the contract is not yet signed.  The contract is
&gt; supposed to run from October 2012 to August 2013 and would have
&gt; quarterly milestones.  The purpose of the IRC meeting was to get some
&gt; developer feedback on the deliverables before negotiating and signing
&gt; the contract.  The sponsor L wiki page is here:
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorL
&gt; 
&gt; Note that I'd like to add the (possibly revised) paragraphs below to the
&gt; wiki page, so that they don't get lost in everybody's inboxes.  Please
&gt; somebody let me know if that's a dumb idea.

You should definitely put them somewhere. But be sure to retain the
original text too, so we can go back and compare if we need to later.

&gt; The phrasing of deliverable 1, which explicitly mentions "DNS" and
&gt; "HTTP", is problematic.  George thinks that DNS and HTTP are hard
&gt; transports to write properly.  George is okay with doing a stupid
&gt; attempt at an HTTP transport, but he's not prepared to promise a "good"
&gt; HTTP/DNS transport.  We should try to take out the words "DNS" and
&gt; "HTTP" from the deliverable text.  If it's too late to do that, we
&gt; should make sure that we can replace them with better transports, maybe
&gt; after writing down why we think the transports we picked are better.  If
&gt; the focus of this deliverable isn't just on building and deploying
&gt; transports, George would prefer to take care of the pluggable transport
&gt; ecosystem for future deployment: develop and deploy pyptlib and a Python
&gt; transport or two; develop (and potentially deploy) obfs3; keep an eye
&gt; out (and help) on academic research; help Zack with Stegotorus,
&gt; especially if he is interested in porting it to Python.  We didn't talk
&gt; about milestones, because the question of deliverable phrasing or
&gt; internal interpretation needs to be answered first.

Helping with Stegotorus should count as working on an http transport, yes?
There are still a lot of barriers to having a good http transport, but
I think the prize is worthwhile enough that we should keep working to
reduce the number of barriers.

I think it would be worthwhile to explore how much of a mess it would
be to use DNS as a transport in practice. Does the bridge side need
to run a hacked nameserver on port 53? That sounds like a deployment
problem for some bridge operators (but not for others). More generally,
this topic like a great task to write up as a research problem for some
student to tackle.

For our "one more", we're already looking into pretending to be Skype
video as a transport (Skypemorph). It would be great to put some effort
into the deployment side of Skypemorph -- better READMEs, identify and
start fixing Tor issues like #5483, etc.

All of that said, I totally agree that for #1, we need to be sure Andrew
and the funder both understand that we can't promise that we'll deploy
any particular transport protocol -- the first step is research, and
that means step two must stay flexible.

&gt; George and Nick say that, in order to complete deliverable 2, we'll have
&gt; to finish #5040 which depends on #4773 (which overlaps with deliverable
&gt; 3).  Nick thinks we can promise "progress towards" these two tickets for
&gt; December, and aim to implement them in December, with a possibility of
&gt; slipping to a March deliverable.  Then we'll have some time for
&gt; obfsproxy bridges to report stats, so that Karsten can make graphs for
&gt; June or August at the latest.

Sounds great. We should be sure to generalize what we do with obfsproxy
and metrics.tp.o, so it will be smoother to do for our next pluggable
transports (e.g. the ones we mention in #1 above). I think from #5040
and friends that it looks like this is already the plan?

Is "extended OR protocol" api support part of the planned python library
that Blanu and George are working on? If not, we should get it on
somebody's list.

&gt; The remaining part of deliverable 3, minus #4773 which is part of
&gt; deliverable 2, is to implement the safe-cookie authentication mechanism.
&gt;  The same milestones apply here as to deliverable 2, so "progress
&gt; towards" in December and "done" in March.

Ok.

&gt; Deliverable 4 will already be done before the sponsor L contract would
&gt; start.  It's promised for sponsor G for September 2012.  Aaron says that
&gt; BridgeDB is ready, minus any tweaks we want to make, and a Tor 0.2.4
&gt; build that people can run.  Aaron would like to get some public
&gt; obfsproxy bridges running Tor 0.2.4 listed in bridges.tpo before end of
&gt; September 2012.

I'd like to see that happen too.

We might also choose to say that "bridgedb remains running the whole time"
is a prerequisite for finishing deliverable 4.

&gt;  We'll probably have to promise something else for
&gt; deliverable 4.

Not really. In the research world, it is totally normal to 1) do X, 2)
ask for money to do X, 3) spend that money to do Y, 4) ask for money to
do Y, rinse/repeat. It's the only sane way to do long-term research on
predictable timelines. Or said another way, I think nobody will mind that
we've made great progress on the deliverable already, given that there's
plenty more work to do on the topic.

That said, now would be a great time to brainstorm some SponsorZ-style
items we'd like to do on this topic next, and plan to get those started
too (i.e. do the above step 3). The first thing that comes to mind is
having bridgedb know when some of its bridge addresses are blocked in
some countries.

&gt; Deliverable 5 is totally doable, says Runa.  This deliverable involves a
&gt; few substeps which we might derive milestones from: rewriting parts of
&gt; the website is something we can do ourselves; planning some kind of
&gt; campaign around the videos to be created and not just putting them out
&gt; there is something we can do, too; writing screenplays for videos is
&gt; something we'll have to do together with a partner; creating videos is
&gt; something we'll have to find a partner for; starting the campaign is
&gt; something we can do.

We should involve Karen in this discussion, since she's already doing some
sample videos, and she's a plausible fit for parts of the "tech writer"
role we describe. The question for Karen is how much of a distraction
it will be for her relative to her fundraising work.

We should figure out what Runa had in mind by "partner", and how much
of that we can do ourselves; there is currently no money in the 2012
budget for said partner.

&gt; Deliverable 6 is doable.  Runa thinks she could either be the community
&gt; manager by extending her tasks, or we could hire a new person.  She also
&gt; has an idea who to hire for English, Farsi, and Arabic; there was a
&gt; brief discussion between Runa and Nick about making an open call for
&gt; these hires vs. only asking people we know.  Runa thinks that the trick
&gt; for paid support is to find a way to let anonymous users pay for support
&gt; and still make sure they get a reply in time according to the service
&gt; level agreement we have to create.

Andrew is hoping to use this as an opportunity to explore "hire people who
will do great work and not charge American prices". Apparently our current
Farsi translator is one such person, and Andrew hopes we find more.

We have four separate directions in mind for this "community manager"
notion (not all funded by SponsorL, mind you):
1) Relay operator coordinator. Somebody to keep relay operators happy
and in touch with us, encourage people to set up new relays, organize
recommended configurations, etc. Especially important in tandem with our
"network diversity" work at #6232.
2) Volunteer-developer coordinator. Somebody to take incoming volunteers
and help them find good existing projects to work on. Likely involves
making our volunteer page more usable. Should also include knowing enough
about every project to recognize and identify good low-hanging fruit,
and knowing enough about our priorities to make smart decisions.
3) Blog/forum/mailinglist coordinator, to make sure our users have useful
answers, and ultimately to manage and organize the volunteers who make
sure our users have useful answers.
4) Social media person, to be our face on twitter, etc.

I believe the plan is for Runa to cover #4, and for us to contract
somebody in our relay operator community part-time for #1 to start. I
think there is no plan for #2 and #3 yet; but I'd love it if we could
get somebody part-time for #2.

&gt;  Runa is wondering why we want
&gt; funding for languages no one has emailed us in (Spanish and French);
&gt; though nobody has emailed us in Arabic, either.

Countries like Venezuela are likely to be on more peoples' radar in
the coming years. As for French, a lot of North Africa can do French
better than they can do English. I bet that's at least partly the case
in Vietnam too.

&gt; Deliverable 7 is doable.  Runa is somewhat unhappy that funding doesn't
&gt; include Arabic.  She says a large number of our users speak either Farsi
&gt; or Arabic, so not having funding for Arabic translations (and thus
&gt; relying on volunteers) seems silly; if we have funding for Arabic
&gt; support, we should also include Arabic translations.  Runa has an idea
&gt; of who to hire for Farsi and Arabic translation, no idea about
&gt; Vietnamese and Chinese (but can't be too hard to find someone).

There's totally time to write 'Arabic' into the list if we want. Note
that just because we promise more languages doesn't mean we get any more
money though.

Here's a list of languages the funder thought we might want to put on
the contract: "Arabic, Farsi, Mandarin, Vietnamese, Burmese, Spanish".

&gt; We didn't talk about deliverable 8 at the meeting.  Maybe Mike can reply
&gt; here and give some quick feedback on this deliverable with respect to
&gt; phrasing/interpreting the deliverable text and possible tasks to promise
&gt; for the four milestones?

One phrasing of this deliverable I've seen is "fix top 15
torbutton/torbrowser bugs as seen in ticket system". Mike wants somebody
who can jump into the Firefox code and bend it to our will. He posted
a job description at
https://www.torproject.org/about/jobs-browserhacker.html.en
and is waiting on Andrew and tor-exec to say "yes you can announce and
start interviewing". See other thread responses.

&gt; Deliverable 9 substantially overlaps with Sebastian working on Thandy in
&gt; Q3.  Sebastian is unclear whether his work will be funded by sponsor L
&gt; money, and if not, what work remains to be funded by sponsor L.

I believe there's no funding specifically for Thandy work other than
this upcoming SponsorL contract. So I would guess Sebastian's Q3 work
was going to be this deliverable 9.

&gt; Sebastian's plan for Q3 is that Thandy bundles should exist and work at
&gt; the end of Q3, which is probably the hardest part of deliverable 9.
&gt; Deliverable 9 further requires coordination between Vidalia and Tor with
&gt; respect to updating config options.  Sebastian suggests to complete
&gt; deliverable 9 by March 2013.  December 2012 would give us just three
&gt; months of testing which may not be sufficient to make Thandy the new
&gt; default distribution mechanism, but we also shouldn't push it back
&gt; further than March 2013.  Aaron is also interested in working on Thandy
&gt; and will talk to Sebastian about it.

Ok. This work does tie into SponsorJ's hopes that we'll be able to
automate builds for our bundles -- Thandy deployment without buildbot
and easy automated build and QA will leave us pretty frustrated. Maybe
that's what Sebastian meant when he talked about Q3 above.

We should also involve Nick in the discussion for deliverable 9, since
it's going to need bugfixes/etc on the Thandy code. And Tomas from the
Vidalia side.

&gt; We didn't talk about deliverable 10 at the meeting.  Maybe Erinn or Jake
&gt; can reply here and give some quick feedback on this deliverable with
&gt; respect to phrasing/interpreting the deliverable text and possible tasks
&gt; to promise for the four milestones?

I think what we have in mind here is a harness for running TBB on a
given OS in a VM, having it do some stuff, and then having an automated
way to see what changed on the system.

I think the funder would be satisfied if we hack together something to
do the comparison once per OS, and then write a report categorizing the
traces and describing what can be done about each.

But imo that would be a waste of the time/money, since it would cost the
same amount of time and money to do it a second time. Instead we should
focus on building a framework for running TBB and automatically noticing
regressions -- whether that's new traces left behind, or anonymity leaks
when you do a websocket query, or whatever. This topic clearly ties into
the "QA automation" topic.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720003855</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-20 00:38:55-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Roger Dingledine (arma@mit.edu):

&gt; On Thu, Jul 19, 2012 at 09:37:46AM +0200, Karsten Loesing wrote:
&gt; &gt; We didn't talk about deliverable 8 at the meeting.  Maybe Mike can reply
&gt; &gt; here and give some quick feedback on this deliverable with respect to
&gt; &gt; phrasing/interpreting the deliverable text and possible tasks to promise
&gt; &gt; for the four milestones?
&gt; 
&gt; One phrasing of this deliverable I've seen is "fix top 15
&gt; torbutton/torbrowser bugs as seen in ticket system". Mike wants somebody
&gt; who can jump into the Firefox code and bend it to our will.

I do personally close anywhere from 5 to 20 tickets per month depending
on month and ticket work sizes, so perhaps 15 is a safe number for 6
months of work plus some rampup time.. But please don't specify a
static snapshot of the current top 15 tickets, as priorities will change
between now and next year. 

Also note, setting the bar low miscommunicates our development needs to
the contractor/new hire. Ideally, we want them to do more than just
close 15 tickets and collect their invoice and call it quits.. That's
why I'd much prefer the language I suggested in my other reply.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120720033830</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-07-20 03:38:30-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Thu, 19 Jul 2012 19:55:52 -0400
Roger Dingledine &lt;arma@mit.edu&gt; wrote:


First off, let me welcome tor-dev and the world to the sausage factory
of open source projects.

&gt; You should definitely put them somewhere. But be sure to retain the
&gt; original text too, so we can go back and compare if we need to later.

Won't the past text and the diff be in the wiki history for the page?

&gt; All of that said, I totally agree that for #1, we need to be sure
&gt; Andrew and the funder both understand that we can't promise that
&gt; we'll deploy any particular transport protocol -- the first step is
&gt; research, and that means step two must stay flexible.

I expect the pushback to be along the lines of "this is a deployment
goal, not a research goal". If http/dns is bad, then we should figure
out some way to deploy two unique transports in the wild.

&gt; Andrew is hoping to use this as an opportunity to explore "hire
&gt; people who will do great work and not charge American prices".
&gt; Apparently our current Farsi translator is one such person, and
&gt; Andrew hopes we find more.

The language-specific support is part-time, at best. 

&gt; 
&gt; We have four separate directions in mind for this "community manager"
&gt; notion (not all funded by SponsorL, mind you):
&gt; 1) Relay operator coordinator. Somebody to keep relay operators happy
&gt; and in touch with us, encourage people to set up new relays, organize
&gt; recommended configurations, etc. Especially important in tandem with
&gt; our "network diversity" work at #6232.
&gt; 2) Volunteer-developer coordinator. Somebody to take incoming
&gt; volunteers and help them find good existing projects to work on.
&gt; Likely involves making our volunteer page more usable. Should also
&gt; include knowing enough about every project to recognize and identify
&gt; good low-hanging fruit, and knowing enough about our priorities to
&gt; make smart decisions. 3) Blog/forum/mailinglist coordinator, to make
&gt; sure our users have useful answers, and ultimately to manage and
&gt; organize the volunteers who make sure our users have useful answers.
&gt; 4) Social media person, to be our face on twitter, etc.
&gt; 
&gt; I believe the plan is for Runa to cover #4, and for us to contract
&gt; somebody in our relay operator community part-time for #1 to start. I
&gt; think there is no plan for #2 and #3 yet; but I'd love it if we could
&gt; get somebody part-time for #2.

Actually, we have three roles. #4 is the same as #3. Whether it's
mailing list, forum, twitter, facebook, google+, whatever, the role is
the same. 

&gt; &gt;  Runa is wondering why we want
&gt; &gt; funding for languages no one has emailed us in (Spanish and French);
&gt; &gt; though nobody has emailed us in Arabic, either.

We have only told people we can handle English and Farsi at this point.
Once we announce others, they will come.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120826111424</emailId><senderName></senderName><senderEmail>bgt56zhn</senderEmail><timestampReceived>2012-08-26 11:14:24-0400</timestampReceived><subject>[tor-dev] https://gitweb.torproject.org/check.git</subject><body>

Where is the code powering check.torproject.org?

There is https://gitweb.torproject.org/check.git, but the repo has no commits.

Thanks
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120826121925</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@extc.org</senderEmail><timestampReceived>2012-08-26 12:19:25-0400</timestampReceived><subject>Re: [tor-dev] https://gitweb.torproject.org/check.git</subject><body>

On Sun, Aug 26, 2012 at 4:14 AM,  &lt;bgt56zhn@safe-mail.net&gt; wrote:
&gt; Where is the code powering check.torproject.org?

This is the current check.tp.o
https://svn.torproject.org/svn/check/trunk/cgi-bin/TorCheck.py
&gt;
&gt; There is https://gitweb.torproject.org/check.git, but the repo has no commits.

But there is a new check.tp.o that will replace it:
https://github.com/aagbsn/check

https://check.extc.org/ (self-signed cert)

--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720101328</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-07-20 10:13:28-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Thu, Jul 19, 2012 at 11:38:30PM -0400, Andrew Lewman wrote:
&gt; &gt; All of that said, I totally agree that for #1, we need to be sure
&gt; &gt; Andrew and the funder both understand that we can't promise that
&gt; &gt; we'll deploy any particular transport protocol -- the first step is
&gt; &gt; research, and that means step two must stay flexible.
&gt; 
&gt; I expect the pushback to be along the lines of "this is a deployment
&gt; goal, not a research goal". If http/dns is bad, then we should figure
&gt; out some way to deploy two unique transports in the wild.

If they want deployment without research, they've got two options.

First, we take existing research designs and see what happens when we try
to make them deployable. In this case, the existing research designs are
Skypemorph and Stegotorus. In both of these cases the deliverable should
be something like "either deploy it, or write up an explanation of why
it's not deployable yet and make an R&amp;D roadmap for how to fix that."
As I understand it, both Skypemorph and Stegotorus have a significant
chance of being in the "or write up an explanation" camp today.

Or second, we could demonstrate the modularity of obfsproxy by adding a
base64 transport module to it that wraps obfs2 flows in base64 encoding
(in case the entropy test is how they bust us), and an http transport
module that prepends some generic http headers and maybe a "Cookie: "
string before jumping into either obfs2 or base64. I'm not clear on
whether these two transports would ultimately be much harder to block
than obfs2, but maybe they would. And if pyptlib turns out the way we
hope, these alternate transports are a page of code each. Which means
we could then turn our attention to the messier questions of how to get
enough bridges up that support the transport, how to advertise their
addresses, etc.

Now that I've written the two options like this, it seems the clear right
answer is "do option two and in our spare time get started on option one."

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120814080939</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-14 08:09:39-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On 7/19/12 9:37 AM, Karsten Loesing wrote:
&gt; https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorL
&gt; 
&gt; Note that I'd like to add the (possibly revised) paragraphs below to the
&gt; wiki page, so that they don't get lost in everybody's inboxes.  Please
&gt; somebody let me know if that's a dumb idea.

I just added my summary to the wiki page.

I originally planned to make smaller revisions based on the comments in
this thread.  But this thread went far beyond smaller revisions.  I
cannot summarize this email thread in the same way as an IRC chat where
I'm present and can easily ask for clarifications of parts I didn't
fully understand.  Sorry.

Mike, Andrew, Roger, Runa: please update the wiki page with your
feedback in this thread.  Please keep the developer feedback per
deliverable as short as possible, ideally in a single paragraph.

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120814193100</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-08-14 19:31:00-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Tue, 14 Aug 2012 10:09:39 +0200
Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; Mike, Andrew, Roger, Runa: please update the wiki page with your
&gt; feedback in this thread.  Please keep the developer feedback per
&gt; deliverable as short as possible, ideally in a single paragraph.

We need a better way to have a conversation about these deliverables,
for SponsorL now, and in the future as more of these situations come
up. My only suggestion is to not use trac wiki and write endless
replies in text over or under previous text, maybe riseup etherpad, an
actual trac discussion plugin, gobby session, or something else similar.

As much as I dislike IRC as a decision medium, should we have another
IRC meeting to discuss current state?

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810011549</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-10 01:15:49-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>



On 8/9/12 5:28 PM, Norman Danner wrote:
&gt; Hi Karsten,
&gt;
&gt; We have a preliminary version of the Pyonionoo front-end at
&gt;
&gt;      git://github.com/meganchang/pyonionoo.git
&gt;
&gt; Make sure to look at the database branch.  We'd be happy to hear feedback.
&gt;
&gt; Unfortunately, this isn't as far as we wanted to be.  A run-down of the
&gt; main open issues:
&gt;
&gt; * We ran into issues with getting sqlite in-memory databases to play
&gt; nicely with multiple threads (stop-gap solution:  use an on-disk database).

It occurs to me that twisted.enterprise.adbapi probably fixes provides a 
solution to these issues.  If it were documented, I'd know better... 
We'll play with it tomorrow and see what happens.

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
  Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810122911</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-10 12:29:11-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>

Hi Norman,

On 8/10/12 3:15 AM, Norman Danner wrote:
&gt; On 8/9/12 5:28 PM, Norman Danner wrote:
&gt;&gt; Hi Karsten,
&gt;&gt;
&gt;&gt; We have a preliminary version of the Pyonionoo front-end at
&gt;&gt;
&gt;&gt;      git://github.com/meganchang/pyonionoo.git
&gt;&gt;
&gt;&gt; Make sure to look at the database branch.  We'd be happy to hear
&gt;&gt; feedback.

First feedback is that I'm having trouble installing cyclone. :/  What
steps does it take from, say, a vanilla Debian Squeeze to an environment
where `twistd -n cyclone -r pyonionoo.web.Application` works?  Ideally,
these steps only include `apt-get install`, but if something else is
needed, I'll try to convince weasel to run that on the Tor machine.

Some more feedback after a _very_ quick look through the files:

- Why do we need something like scripts/cookie_secret.py?

- Do the two handlers bandwidth.py and detail.py really need to list all
the fields in the respective documents?  That seems hard to maintain
when we make changes to the back-end.  Ideally, the front-end would
simply consider these files as valid JSON strings without parsing them
at all.

- pyonionoo/summary looks like example data that shouldn't be in the Git
repo.  Similarly, summary.db is a binary file and probably shouldn't be
in the Git repo.  Maybe the latter should be in .gitignore.

I'll have more feedback after the weekend, and even more once I get this
thing to run. :)  Very much looking forward to that!

Thanks!
Karsten


&gt;&gt; Unfortunately, this isn't as far as we wanted to be.  A run-down of the
&gt;&gt; main open issues:
&gt;&gt;
&gt;&gt; * We ran into issues with getting sqlite in-memory databases to play
&gt;&gt; nicely with multiple threads (stop-gap solution:  use an on-disk
&gt;&gt; database).
&gt; 
&gt; It occurs to me that twisted.enterprise.adbapi probably fixes provides a
&gt; solution to these issues.  If it were documented, I'd know better...
&gt; We'll play with it tomorrow and see what happens.
&gt; 
&gt;     - Norman
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810141000</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-08-10 14:10:00-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>

Hi Karsten,

On 8/10/12 8:29 AM, Karsten Loesing wrote:
&gt; Hi Norman,
&gt;
&gt; On 8/10/12 3:15 AM, Norman Danner wrote:
&gt;&gt; On 8/9/12 5:28 PM, Norman Danner wrote:
&gt;&gt;&gt; Hi Karsten,
&gt;&gt;&gt;
&gt;&gt;&gt; We have a preliminary version of the Pyonionoo front-end at
&gt;&gt;&gt;
&gt;&gt;&gt;       git://github.com/meganchang/pyonionoo.git
&gt;&gt;&gt;
&gt;&gt;&gt; Make sure to look at the database branch.  We'd be happy to hear
&gt;&gt;&gt; feedback.
&gt;
&gt; First feedback is that I'm having trouble installing cyclone. :/  What
&gt; steps does it take from, say, a vanilla Debian Squeeze to an environment
&gt; where `twistd -n cyclone -r pyonionoo.web.Application` works?  Ideally,
&gt; these steps only include `apt-get install`, but if something else is
&gt; needed, I'll try to convince weasel to run that on the Tor machine.

Oh dear; hadn't realized this was an issue.  We installed Twisted and 
Cyclone from source.

There is a debian package for twisted (python-twisted), but not for Cyclone.

The issues below are pretty straightforward.  This one seems more of a 
problem.

&gt;
&gt; Some more feedback after a _very_ quick look through the files:
&gt;
&gt; - Why do we need something like scripts/cookie_secret.py?

We probably don't.  We just jumped off of Sathya's first pass, and 
didn't play with the Cyclone details at all.

&gt; - Do the two handlers bandwidth.py and detail.py really need to list all
&gt; the fields in the respective documents?  That seems hard to maintain
&gt; when we make changes to the back-end.  Ideally, the front-end would
&gt; simply consider these files as valid JSON strings without parsing them
&gt; at all.

No, those are old versions and will be completely replaced.  We'll 
follow your approach for these handlers:  use the query parameters to 
determine the fingerprints of routers that match the parameters, then 
just respond with the corresponding JSON files from the filesystem.

Hopefully we'll have an example of one of these that should enable one 
to plug in Sathya's new back-end without modifying the handler classes, 
just the database module.

&gt; - pyonionoo/summary looks like example data that shouldn't be in the Git
&gt; repo.  Similarly, summary.db is a binary file and probably shouldn't be
&gt; in the Git repo.  Maybe the latter should be in .gitignore.

Correct, that shouldn't be there.

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120811043523</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-08-11 04:35:23-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>

&gt; First feedback is that I'm having trouble installing cyclone. :/  What
&gt; steps does it take from, say, a vanilla Debian Squeeze to an environment
&gt; where `twistd -n cyclone -r pyonionoo.web.Application` works?  Ideally,
&gt; these steps only include `apt-get install`, but if something else is
&gt; needed, I'll try to convince weasel to run that on the Tor machine.

The 'apt-get' way to install python packages is 'pip'.

$ apt-get install python-twisted-web python-twisted-core python-pip
$ pip install cyclone

Thanks,
-Sathya
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120813145520</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-13 14:55:20-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>

Hi Norman,

On 8/10/12 4:10 PM, Norman Danner wrote:
&gt; Oh dear; hadn't realized this was an issue.  We installed Twisted and
&gt; Cyclone from source.
&gt; 
&gt; There is a debian package for twisted (python-twisted), but not for
&gt; Cyclone.

I managed to install Cyclone with Sathya's apt-get/pip instructions.  (I
also had to apt-get install python-dev, or pip would fail; not that its
error message was helpful, but Google was.)

So, I don't have a clear preference for or against Cyclone.  On the one
hand, getting rid of that dependency would be nice, in particular given
that pip fails to handle basic problems such as a missing python-dev.
But on the other hand, I'd like to get the current pyonionoo running
without having to rewrite major parts of it first.  How about we stick
with Cyclone for the moment and postpone the decision of a possible
rewrite towards a Twisted-only version?

&gt;&gt; Some more feedback after a _very_ quick look through the files:
&gt;&gt;
&gt;&gt; - Why do we need something like scripts/cookie_secret.py?
&gt; 
&gt; We probably don't.  We just jumped off of Sathya's first pass, and
&gt; didn't play with the Cyclone details at all.

Sathya, what do you think about that file/feature?  Can we get rid of it?

&gt;&gt; - Do the two handlers bandwidth.py and detail.py really need to list all
&gt;&gt; the fields in the respective documents?  That seems hard to maintain
&gt;&gt; when we make changes to the back-end.  Ideally, the front-end would
&gt;&gt; simply consider these files as valid JSON strings without parsing them
&gt;&gt; at all.
&gt; 
&gt; No, those are old versions and will be completely replaced.  We'll
&gt; follow your approach for these handlers:  use the query parameters to
&gt; determine the fingerprints of routers that match the parameters, then
&gt; just respond with the corresponding JSON files from the filesystem.
&gt; 
&gt; Hopefully we'll have an example of one of these that should enable one
&gt; to plug in Sathya's new back-end without modifying the handler classes,
&gt; just the database module.

Okay.  Focusing on summary documents first then.

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120811001706</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-11 00:17:06-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD [SOLVED ?]</subject><body>

On Fri, Aug 10, 2012 at 6:21 PM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt; Well, finally it seems a Tor configure.in bug/problem:
&gt;
&gt; http://lists.freebsd.org/pipermail/freebsd-ports/2012-August/077440.html
&gt;
&gt; So.. I guess it has to be fixed by some tor dev then.

Very interesting.  That first stanza is indeed wrongly placed.  But
when you move it, does it start working?

And why does it seem that ./configure is not getting the
--with-tcmalloc option at all?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120811170329</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-11 17:03:29-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD [SOLVED ?]</subject><body>

&gt; Very interesting.  That first stanza is indeed wrongly placed.  But
&gt; when you move it, does it start working?

I tried a couple of things without success. So, what code should be 
placed in where?

&gt; And why does it seem that ./configure is not getting the
&gt; --with-tcmalloc option at all?

No idea.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809002259</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-09 00:22:59-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt; paper here for discussion.
&gt;
&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;
&gt; What do people think?

* This paper has Yet Another ‘proof of security' which says nothing
about the protocol's security over any single group or over any
infinite family of groups in which (as in Curve25519) the Decision
Diffie-Hellman problem is (believed to be) hard.

* The protocol requires that EC points be either transmitted in or
converted from and to a form in which point addition is efficient.
(ntor does not require point addition, so it can be implemented
initially using curve25519-donna.)

* If you finish my implementation of the Ed25519 group operations
(which you would need in order to implement this protocol), you can
use them to implement a signature-based protocol (specified as
A-DHKE-1 in http://eprint.iacr.org/1999/012), which requires only one
precomputed and one on-line exponentiation per protocol run on the
server when implemented with a slightly modified version of Ed25519.
(The client's performance is much less important than the server's.)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120809114656</emailId><senderName>aniket kate</senderName><senderEmail>aniketpkate@gmail.com</senderEmail><timestampReceived>2012-08-09 11:46:56-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

&gt; Date: Thu, 9 Aug 2012 00:22:59 +0000
&gt; From: Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;
&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;
&gt;&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt;&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt;&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt;&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt;&gt; paper here for discussion.
&gt;&gt;
&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;&gt;
&gt;&gt; What do people think?
&gt;

&gt;
&gt; * If you finish my implementation of the Ed25519 group operations
&gt; (which you would need in order to implement this protocol), you can
&gt; use them to implement a signature-based protocol (specified as
&gt; A-DHKE-1 in http://eprint.iacr.org/1999/012), which requires only one
&gt; precomputed and one on-line exponentiation per protocol run on the
&gt; server when implemented with a slightly modified version of Ed25519.
&gt; (The client's performance is much less important than the server's.)

I went through A-DHKE-1 description (Page 36 of Eprint 1999/012). I
find that A-DHKE-1 also requires one online signature generation on
the server side along with one online exponentiation. Therefore,
A-DHKE-1 is computationally more expensive than the discussed protocol
and probably even the ntor protocol based on the employed signature
scheme.

-Aniket
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809133403</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-08-09 13:34:03-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On Wed, Aug 8, 2012 at 8:22 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;
&gt;&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt;&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt;&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt;&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt;&gt; paper here for discussion.
&gt;&gt;
&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;&gt;
&gt;&gt; What do people think?
&gt;
&gt; * This paper has Yet Another ‘proof of security' which says nothing
&gt; about the protocol's security over any single group or over any
&gt; infinite family of groups in which (as in Curve25519) the Decision
&gt; Diffie-Hellman problem is (believed to be) hard.

Do you think a DDH oracle cracks CDH in Curve25519? If no the theorem
says something.
&gt;
&gt;
&gt; Robert Ransom
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

Sincerely,
Watson Ladd
-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120809174859</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-09 17:48:59-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/9/12, aniket kate &lt;aniketpkate@gmail.com&gt; wrote:
&gt;&gt; Date: Thu, 9 Aug 2012 00:22:59 +0000
&gt;&gt; From: Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;&gt;
&gt;&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt;&gt;&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt;&gt;&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt;&gt;&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt;&gt;&gt; paper here for discussion.
&gt;&gt;&gt;
&gt;&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;&gt;&gt;
&gt;&gt;&gt; What do people think?

&gt;&gt; * If you finish my implementation of the Ed25519 group operations
&gt;&gt; (which you would need in order to implement this protocol), you can
&gt;&gt; use them to implement a signature-based protocol (specified as
&gt;&gt; A-DHKE-1 in http://eprint.iacr.org/1999/012), which requires only one
&gt;&gt; precomputed and one on-line exponentiation per protocol run on the
&gt;&gt; server when implemented with a slightly modified version of Ed25519.
&gt;&gt; (The client's performance is much less important than the server's.)
&gt;
&gt; I went through A-DHKE-1 description (Page 36 of Eprint 1999/012). I
&gt; find that A-DHKE-1 also requires one online signature generation on
&gt; the server side along with one online exponentiation. Therefore,
&gt; A-DHKE-1 is computationally more expensive than the discussed protocol
&gt; and probably even the ntor protocol based on the employed signature
&gt; scheme.

For a short-term keypair, Ed25519 session secret keys can be generated
by applying a PRF to a counter; the corresponding public keys can be
computed offline.  This leaves only a few hash computations and a
multiplication in the exponent field to be done online for the
signature generation; neither of these is as expensive as EC point
multiplication.

The server's Diffie-Hellman keypair can be reused for more than one
protocol run (keeping it for up to 5 minutes is very unlikely to
reduce forward secrecy) if either (a) the server performs replay
detection for client keys or (b) the protocol includes the signature
system's session key in the material fed to the KDF (along with the DH
shared secret).

So, A-DHKE-1 can indeed be performed with one offline exponentiation
(for the Ed25519 session key) and one online exponentiation (to
compute the DH shared secret) on the server side.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809181027</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-09 18:10:27-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/9/12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt; On Wed, Aug 8, 2012 at 8:22 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt;&gt;&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt;&gt;&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt;&gt;&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt;&gt;&gt; paper here for discussion.
&gt;&gt;&gt;
&gt;&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;&gt;&gt;
&gt;&gt;&gt; What do people think?
&gt;&gt;
&gt;&gt; * This paper has Yet Another ‘proof of security' which says nothing
&gt;&gt; about the protocol's security over any single group or over any
&gt;&gt; infinite family of groups in which (as in Curve25519) the Decision
&gt;&gt; Diffie-Hellman problem is (believed to be) hard.
&gt;
&gt; Do you think a DDH oracle cracks CDH in Curve25519? If no the theorem
&gt; says something.

Do you think a DDH oracle for Curve25519 can be implemented efficiently?


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120809195309</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-08-09 19:53:09-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On Thu, Aug 9, 2012 at 2:10 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 8/9/12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt;&gt; On Wed, Aug 8, 2012 at 8:22 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;&gt; wrote:
&gt;&gt;&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt;&gt;&gt;&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt;&gt;&gt;&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt;&gt;&gt;&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt;&gt;&gt;&gt; paper here for discussion.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; What do people think?
&gt;&gt;&gt;
&gt;&gt;&gt; * This paper has Yet Another ‘proof of security' which says nothing
&gt;&gt;&gt; about the protocol's security over any single group or over any
&gt;&gt;&gt; infinite family of groups in which (as in Curve25519) the Decision
&gt;&gt;&gt; Diffie-Hellman problem is (believed to be) hard.
&gt;&gt;
&gt;&gt; Do you think a DDH oracle cracks CDH in Curve25519? If no the theorem
&gt;&gt; says something.
&gt;
&gt; Do you think a DDH oracle for Curve25519 can be implemented efficiently?

I don't see the relevance of this. What matters is how much of a gain
a DDH oracle provides
on the CDH problem. There may be groups where DDH oracles make it easy
to break CDH. Such
proofs are nothing new: Schnorr signatures are secure in the random
oracle model, meaning they turn
an attack that succeeds with a random oracle into a CDH solver. We've
already accepted oracle based
security reductions.

Your argument is that because we don't have a DDH oracle at hand, we
can't use the reduction to demonstrate security. But I don't think
that's the case. If OWAKE is insecure, and the space aliens drop a DDH
oracle on Earth CDH falls. But if OWAKE is secure then the aliens just
give us a DDH oracle. This seems to me to be a significant difference,
and much better then the situation with random oracle models. (SHA-256
is observably not a random oracle)
&gt;
&gt;
&gt; Robert Ransom
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

Sincerely,
Watson Ladd

-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120809235330</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-09 23:53:30-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; Michael Backes, Aniket Kate, and Esfandiar Mohammadi have a paper in
&gt; submission called, "An Efficient Key-Exchange for Onion Routing".
&gt; It's meant to be more CPU-efficient than the proposed "ntor"
&gt; handshake.  With permission from Esfandiar, I'm sending a link to the
&gt; paper here for discussion.
&gt;
&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;
&gt; What do people think?

Ohhh-kay, after trying to make sense out of the details of their
security claims, I *hope* that they need to re-read and revise the
first few paragraphs of section 3.2.  (Perhaps while they're at it
they can replace the mentions of ‘ppt' algorithms and attackers
throughout their paper with a useful claim about execution time.)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120810215311</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-10 21:53:11-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html

Also, where does this paper specify that the participants must check
that public-key group elements are not equal to the identity element?
That's rather important, as Tor's relay protocol is likely to break if
an attacker can force a server to open additional circuits to an
attacker using the same key material that a legitimate client's
circuit has.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120806170307</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-08-06 17:03:07-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

[Attachment #2 (multipart/alternative)]


Hm.  Tor itself doesn't have a tcmalloc compilation option, so whatever
it's doing is something freebsd added.  To debug this kind of thing, what I
usually suggest is to rebuild and look carefully at which compiler and
linker options are used in building Tor, and see if they include the
appropriate options for tcmalloc.

Good luck,
-- 
Nick

[Attachment #5 (text/html)]

&lt;p&gt;Hm.=A0 Tor itself doesn't have a tcmalloc compilation option, so wha=
tever it's doing is something freebsd added.=A0 To debug this kind of t=
hing, what I usually suggest is to rebuild and look carefully at which comp=
iler and linker options are used in building Tor, and see if they include t=
he appropriate options for tcmalloc.&lt;/p&gt;

&lt;p&gt;Good luck,&lt;br&gt;
-- &lt;br&gt;
Nick&lt;/p&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120806180623</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-06 18:06:23-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On 08/06/2012 07:03 PM, Nick Mathewson wrote:
&gt; Hm.  Tor itself doesn't have a tcmalloc compilation option, so whatever
&gt; it's doing is something freebsd added.  To debug this kind of thing,
&gt; what I usually suggest is to rebuild and look carefully at which
&gt; compiler and linker options are used in building Tor, and see if they
&gt; include the appropriate options for tcmalloc.

Thanks for your answer Nick, but I don't get you:
https://lists.torproject.org/pipermail/tor-commits/2008-February/008381.html

It seems tor has a configure option to support tcmalloc since 2008; I 
guess I could be wrong (again) but I understand that if the configure 
script supports the tcmalloc option is because, is some sense, the 
compilation will use as well the mentioned libraries.

So?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808184812</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-08 18:48:12-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On Mon, Aug 6, 2012 at 2:06 PM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt; On 08/06/2012 07:03 PM, Nick Mathewson wrote:
&gt;&gt;
&gt;&gt; Hm.  Tor itself doesn't have a tcmalloc compilation option, so whatever
&gt;&gt; it's doing is something freebsd added.  To debug this kind of thing,
&gt;&gt; what I usually suggest is to rebuild and look carefully at which
&gt;&gt; compiler and linker options are used in building Tor, and see if they
&gt;&gt; include the appropriate options for tcmalloc.
&gt;
&gt;
&gt; Thanks for your answer Nick, but I don't get you:
&gt; https://lists.torproject.org/pipermail/tor-commits/2008-February/008381.html
&gt;
&gt; It seems tor has a configure option to support tcmalloc since 2008; I guess
&gt; I could be wrong (again) but I understand that if the configure script
&gt; supports the tcmalloc option is because, is some sense, the compilation will
&gt; use as well the mentioned libraries.

Oops; I'd forgotten about that.  That's what I get for answering email
on vacation without checking the code.

I think my debugging advice still stands though:

&gt;&gt;  To debug this kind of thing,
&gt;&gt; what I usually suggest is to rebuild and look carefully at which
&gt;&gt; compiler and linker options are used in building Tor, and see if they
&gt;&gt; include the appropriate options for tcmalloc.

What line does the build process use when linking Tor?

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808202640</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-08 20:26:40-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

&gt; What line does the build process use when linking Tor?

Hi again Nick,

I have no idea, but I guess I could do the next:

1. Stop the tor service
2. deinstall the present port
3. Check the tcmalloc option is enabled
4. install the port and redirect all the output to a log file

$ /usr/local/etc/rc.d/tor stop
$ cd /usr/ports/security/tor
$ make deinstall
$ make showconfig
$ make install &gt;&amp; /tmp/tor_freebsd_port.log

and send to you the log.

What do you think?





_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808204841</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-08 20:48:41-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On Wed, Aug 8, 2012 at 4:26 PM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt;&gt; What line does the build process use when linking Tor?
&gt;
&gt;
&gt; Hi again Nick,
&gt;
&gt; I have no idea, but I guess I could do the next:
&gt;
&gt; 1. Stop the tor service
&gt; 2. deinstall the present port
&gt; 3. Check the tcmalloc option is enabled
&gt; 4. install the port and redirect all the output to a log file
&gt;
&gt; $ /usr/local/etc/rc.d/tor stop
&gt; $ cd /usr/ports/security/tor
&gt; $ make deinstall
&gt; $ make showconfig
&gt; $ make install &gt;&amp; /tmp/tor_freebsd_port.log
&gt;
&gt; and send to you the log.
&gt;
&gt; What do you think?

Sounds pretty involved!  Is there really no way to recompile software
from a freebsd port without uninstalling it?
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808212248</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-08 21:22:48-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On 8/8/12, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Wed, Aug 8, 2012 at 4:26 PM, Jordi Espasa Clofent
&gt; &lt;jespasac@minibofh.org&gt; wrote:
&gt;&gt;&gt; What line does the build process use when linking Tor?
&gt;&gt;
&gt;&gt;
&gt;&gt; Hi again Nick,
&gt;&gt;
&gt;&gt; I have no idea, but I guess I could do the next:
&gt;&gt;
&gt;&gt; 1. Stop the tor service
&gt;&gt; 2. deinstall the present port
&gt;&gt; 3. Check the tcmalloc option is enabled
&gt;&gt; 4. install the port and redirect all the output to a log file
&gt;&gt;
&gt;&gt; $ /usr/local/etc/rc.d/tor stop
&gt;&gt; $ cd /usr/ports/security/tor
&gt;&gt; $ make deinstall
&gt;&gt; $ make showconfig
&gt;&gt; $ make install &gt;&amp; /tmp/tor_freebsd_port.log
&gt;&gt;
&gt;&gt; and send to you the log.
&gt;&gt;
&gt;&gt; What do you think?
&gt;
&gt; Sounds pretty involved!  Is there really no way to recompile software
&gt; from a freebsd port without uninstalling it?

Remove (or move) the port's ‘work' directory and run ‘make'.

(You can't easily *install* an upgraded or recompiled FreeBSD port or
package without removing the old one, though.)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120808230937</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-08 23:09:37-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

Here is the log:

===&gt;  Installing for tor-0.2.2.37
===&gt;   tor-0.2.2.37 depends on file: /usr/local/lib/libcrypto.so.7 - found
===&gt;   tor-0.2.2.37 depends on shared library: event-2.0 - found
===&gt;   tor-0.2.2.37 depends on shared library: tcmalloc - found
===&gt;   Generating temporary packing list
===&gt;  Checking if security/tor already installed
===&gt; Creating users and/or groups.
Using existing group `_tor'.
Using existing user `_tor'.
Making install in src
Making install in common
Making install in or
cc -DHAVE_CONFIG_H -I. -I../..  -DSHARE_DATADIR="\"/usr/local/share\"" 
-DLOCALSTATEDIR="\"/usr/local/var\""  -DBINDIR="\"/usr/local/bin\"" 
-I../../src/common -I/usr/local/include/event2 -I/usr/local/include 
-I/usr/local/include  -O2 -pipe  -fno-strict-aliasing 
-D_FORTIFY_SOURCE=2 -fstack-protector-all -fwrapv -fPIE 
-Wstack-protector --param ssp-buffer-size=1 -Wall -fno-strict-aliasing 
-MT tor_main.o -MD -MP -MF .deps/tor_main.Tpo -c -o tor_main.o tor_main.c
mv -f .deps/tor_main.Tpo .deps/tor_main.Po
cc  -O2 -pipe  -fno-strict-aliasing -D_FORTIFY_SOURCE=2 
-fstack-protector-all -fwrapv -fPIE -Wstack-protector --param 
ssp-buffer-size=1 -Wall -fno-strict-aliasing -L/usr/local/lib 
-L/usr/local/lib/event2 -rpath=/usr/local/lib -pie -Wl,-z,relro 
-Wl,-z,now -o  tor tor_main.o ./libtor.a ../common/libor.a 
../common/libor-crypto.a  ../common/libor-event.a  -lz -lm -levent-2.0 
-lssl -lcrypto -pthread
cc -DHAVE_CONFIG_H -I. -I../..  -DSHARE_DATADIR="\"/usr/local/share\"" 
-DLOCALSTATEDIR="\"/usr/local/var\""  -DBINDIR="\"/usr/local/bin\"" 
-I../../src/common -I/usr/local/include/event2 -I/usr/local/include 
-I/usr/local/include  -O2 -pipe  -fno-strict-aliasing 
-D_FORTIFY_SOURCE=2 -fstack-protector-all -fwrapv -fPIE 
-Wstack-protector --param ssp-buffer-size=1 -Wall -fno-strict-aliasing 
-MT tor_main.o -MD -MP -MF .deps/tor_main.Tpo -c -o tor_main.o tor_main.c
mv -f .deps/tor_main.Tpo .deps/tor_main.Po
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
   install  -s -o root -g wheel -m 555 tor '/usr/local/bin'
Making install in test
Making install in tools
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
   install  -s -o root -g wheel -m 555 tor-resolve tor-gencert 
'/usr/local/bin'
Making install in win32
Making install in config
test -z "/usr/local/etc/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/etc/tor"
  install  -o root -g wheel -m 444 torrc.sample '/usr/local/etc/tor'
test -z "/usr/local/share/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/share/tor"
  install  -o root -g wheel -m 444 geoip '/usr/local/share/tor'
Making install in doc
test -z "/usr/local/man/man1" || /usr/local/bin/gmkdir -p 
"/usr/local/man/man1"
  install  -o root -g wheel -m 444 tor.1 tor-resolve.1 torify.1 
tor-gencert.1 '/usr/local/man/man1'
Making install in contrib
Making install in suse
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
  install  -o root -g wheel -m 555 torify '/usr/local/bin'
test -z "/usr/local/etc/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/etc/tor"
  install  -o root -g wheel -m 444 tor-tsocks.conf.sample 
'/usr/local/etc/tor'
===&gt; Installing rc.d startup script(s)
/bin/mkdir -p /var/run/tor
/usr/sbin/chown -R _tor:_tor /var/run/tor
/usr/bin/touch /var/log/tor
/usr/sbin/chown _tor:_tor /var/log/tor
/bin/mkdir -p /var/db/tor/data
/usr/sbin/chown -R _tor:_tor /var/db/tor
/bin/chmod -R 700 /var/db/tor
/bin/cat /usr/ports/security/tor/work/pkg-message
================================================================================
To enable the tor server, set tor_enable="YES" in your /etc/rc.conf
and edit /usr/local/etc/tor/torrc.  Note that the rc.subr script overrides
many torrc options and is tunable: see /usr/local/etc/rc.d/tor for details.
To use the torify script, install the net/torsocks port. After removing the
package, or updating to a new version, users may need to delete all files
in /var/db/tor.
============================================================================

Is plain to see the script is checking if the tcmalloc is there, but 
more than that... I cannot see the compiler itself is calling the 
mentioned library.




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808231050</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-08 23:10:50-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

&gt; Remove (or move) the port's ‘work' directory and run ‘make'.
&gt;
&gt; (You can't easily *install* an upgraded or recompiled FreeBSD port or
&gt; package without removing the old one, though.)

That's possible yes. Or you can use -f flag with portupgrade.

However this is not the point.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120808234356</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-08 23:43:56-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On Wed, Aug 8, 2012 at 7:09 PM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt; Here is the log:
&gt;
&gt; ===&gt;  Installing for tor-0.2.2.37
&gt; ===&gt;   tor-0.2.2.37 depends on file: /usr/local/lib/libcrypto.so.7 - found
&gt; ===&gt;   tor-0.2.2.37 depends on shared library: event-2.0 - found
&gt; ===&gt;   tor-0.2.2.37 depends on shared library: tcmalloc - found

So here's the line that makes Tor:

&gt; cc  -O2 -pipe  -fno-strict-aliasing -D_FORTIFY_SOURCE=2
&gt; -fstack-protector-all -fwrapv -fPIE -Wstack-protector --param
&gt; ssp-buffer-size=1 -Wall -fno-strict-aliasing -L/usr/local/lib
&gt; -L/usr/local/lib/event2 -rpath=/usr/local/lib -pie -Wl,-z,relro -Wl,-z,now
&gt; -o  tor tor_main.o ./libtor.a ../common/libor.a ../common/libor-crypto.a
&gt; ../common/libor-event.a  -lz -lm -levent-2.0 -lssl -lcrypto -pthread

and yeah, there's no tcmalloc there.

This is a little strange; when I try it with Tor master, I get
(removing my pile of warning options):

gcc  -g -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all
-Wstack-protector -fwrapv -fPIE -Wall -fno-strict-aliasing -ltcmalloc
-pie -z relro -z now -o tor tor_main.o ./libtor.a ../common/libor.a
../common/libor-crypto.a ../common/libor-event.a -lz -lm -levent -lssl
-lcrypto  -lpthread -lrt -ldl

 [...]
&gt; Is plain to see the script is checking if the tcmalloc is there, but more
&gt; than that... I cannot see the compiler itself is calling the mentioned
&gt; library.

Can you see what arguments are being passed to configure, and what
configure does with them?  Is the freebsd build process passing
--with-tcmalloc to the configure script?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809100411</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-09 10:04:11-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On 08/09/2012 01:43 AM, Nick Mathewson wrote:
&gt; On Wed, Aug 8, 2012 at 7:09 PM, Jordi Espasa Clofent
&gt; &lt;jespasac@minibofh.org&gt; wrote:
&gt;&gt; Here is the log:
&gt;&gt;
&gt;&gt; ===&gt;  Installing for tor-0.2.2.37
&gt;&gt; ===&gt;   tor-0.2.2.37 depends on file: /usr/local/lib/libcrypto.so.7 - found
&gt;&gt; ===&gt;   tor-0.2.2.37 depends on shared library: event-2.0 - found
&gt;&gt; ===&gt;   tor-0.2.2.37 depends on shared library: tcmalloc - found
&gt;
&gt; So here's the line that makes Tor:
&gt;
&gt;&gt; cc  -O2 -pipe  -fno-strict-aliasing -D_FORTIFY_SOURCE=2
&gt;&gt; -fstack-protector-all -fwrapv -fPIE -Wstack-protector --param
&gt;&gt; ssp-buffer-size=1 -Wall -fno-strict-aliasing -L/usr/local/lib
&gt;&gt; -L/usr/local/lib/event2 -rpath=/usr/local/lib -pie -Wl,-z,relro -Wl,-z,now
&gt;&gt; -o  tor tor_main.o ./libtor.a ../common/libor.a ../common/libor-crypto.a
&gt;&gt; ../common/libor-event.a  -lz -lm -levent-2.0 -lssl -lcrypto -pthread
&gt;
&gt; and yeah, there's no tcmalloc there.

Nice. Maybe we're skipping something obvious, because I remember 
perfectly that google-perftools package was installed when I configure 
the port to use tcmalloc.

Still, it seems not using it at all.

&gt; This is a little strange; when I try it with Tor master, I get
&gt; (removing my pile of warning options):
&gt;
&gt; gcc  -g -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all
&gt; -Wstack-protector -fwrapv -fPIE -Wall -fno-strict-aliasing -ltcmalloc
&gt; -pie -z relro -z now -o tor tor_main.o ./libtor.a ../common/libor.a
&gt; ../common/libor-crypto.a ../common/libor-event.a -lz -lm -levent -lssl
&gt; -lcrypto  -lpthread -lrt -ldl
&gt;
&gt;   [...]
&gt;&gt; Is plain to see the script is checking if the tcmalloc is there, but more
&gt;&gt; than that... I cannot see the compiler itself is calling the mentioned
&gt;&gt; library.
&gt;
&gt; Can you see what arguments are being passed to configure, and what
&gt; configure does with them?  Is the freebsd build process passing
&gt; --with-tcmalloc to the configure script?

Sure.

mb# pwd &amp;&amp; make showconfig
/usr/ports/security/tor
===&gt; The following configuration options are available for tor-0.2.2.37:
      BUFFREELISTS=on: Freelists for buffer RAM
      GMAKE=off: Parallel build safety via GNU make
      INSTR_DOWNLOADS=off: Instrument downloads for analysis
      TCMALLOC=on: Use the tcmalloc memory allocation library
      THREADS=on: Threading support
      TRANSPARENT=on: Transparent proxy support
===&gt; Use 'make config' to modify these settings


mb# cat Makefile
# ports collection makefile for:	tor-devel
# Date created:				2005.10.20
# Whom:					peter.thoenen@yahoo.com
#
# $FreeBSD: ports/security/tor/Makefile,v 1.83 2012/06/29 00:38:55 bf Exp $
#

PORTNAME=	tor
DISTVERSION=	0.2.2.37
CATEGORIES=	security net ipv6
MASTER_SITES=	https://www.torproject.org/dist/ \
		ftp://ftp.bit.nl/mirror/tor/ \
		http://cyberside.net.ee/tor/ \
		http://ftp.bit.nl/mirror/tor/ \
		http://mirror.hessmo.com/tor/dist/ \
		http://mirror.host4site.co.il/torproject.org/dist/ \
		http://mirror.open-networx.org/torproject.org/dist/ \
		http://mirror.tor.hu/dist/ \
		https://mirror.torland.me/torproject.org/dist/ \
		http://mirrors.chaos-darmstadt.de/tor-mirror/dist/ \
		http://onion.anonymo.us.org/dist/ \
		http://theonionrouter.com/dist/ \
		http://tor.amorphis.eu/dist/ \
		http://tor.askapache.com/dist/ \
		http://tor.beme-it.de/dist/ \
		http://tor.blingblingsquad.net/dist/ \
		http://tor.borgmann.tv/dist/ \
		http://tor.ccc.de/dist/ \
		http://tor.cyberarmy.at/dist/ \
		http://tor.dont-know-me.at/dist/ \
		http://tor.factor.cc/dist/ \
		http://tor.homosu.net/dist/ \
		http://tor.idnr.ws/dist/ \
		http://tor.myrl.net/dist/ \
		http://tor.kamagurka.org/dist/ \
		http://tor.searchprivate.com/dist/ \
		http://tor.spline.de/dist/ \
		http://tor.taiga-san.net/dist/ \
		http://tor.unregistered.eu/dist/ \
		http://tor.vesta.nu/dist/ \
		http://tordistua.reactor-xg.kiev.ua/ \
		http://torproj.xpdm.us/dist/ \
		https://torproject.antagonism.org/dist/ \
		https://torproject.crypto.is/dist/ \
		http://torproject.is/dist/ \
		http://torproject.jcsh.it/dist/ \
		http://torproject.nwlinux.us/dist/ \
		http://torproject.ph3x.at/dist/ \
		http://torua.reactor-xg.kiev.ua/dist/ \
		https://www.coevoet.nl/tor/dist/ \
		http://www.oignon.net/dist/ \
		http://www.torproject.nl/dist/ \
		http://www.torproject.org.in/dist/ \
		http://www.torproject.org.nyud.net/dist/ \
		http://www.torproject.us/dist/ \
		http://www.torservers.net/mirrors/torproject.org/dist/

MAINTAINER=	bf@FreeBSD.org
COMMENT=	An anonymizing overlay network for TCP

LICENSE=	BSD
LICENSE_FILE=	${WRKSRC}/LICENSE

LIB_DEPENDS=	event-2.0:${PORTSDIR}/devel/libevent2

GNU_CONFIGURE=	yes
CONFIGURE_ARGS=	--with-openssl-dir="${OPENSSLBASE}" --disable-asciidoc \
		--enable-linker-hardening
CONFIGURE_ENV=	TOR_CPPFLAGS_libevent="-I${LOCALBASE}/include/event2 
-I${LOCALBASE}/include" \
		TOR_LDFLAGS_libevent="-L${LOCALBASE}/lib/event2" \
		TOR_LIBEVENT_LIBS="-levent-2.0"

OPTIONS_DEFINE= BUFFREELISTS GMAKE INSTR_DOWNLOADS TCMALLOC THREADS 
TRANSPARENT

BUFFREELISTS_DESC=	Freelists for buffer RAM
GMAKE_DESC=		Parallel build safety via GNU make
INSTR_DOWNLOADS_DESC=	Instrument downloads for analysis
TCMALLOC_DESC=		Use the tcmalloc memory allocation library
TRANSPARENT_DESC=	Transparent proxy support

OPTIONS_DEFAULT=	BUFFREELISTS THREADS TRANSPARENT

USE_OPENSSL=	yes

USE_RC_SUBR=	tor
SUB_FILES=	pkg-message

GROUPS =	_tor
USERS=		_tor

CONFLICTS=	tor-devel-[0-9]*

MANCOMPRESSED=	no
MAN1=		tor.1 tor-resolve.1 torify.1 tor-gencert.1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MGMAKE}
USE_GMAKE=		yes
.else
MAKE_JOBS_UNSAFE=	yes
.endif

.if ( (${OSVERSION} &gt;= 703100 &amp;&amp; ${OSVERSION} &lt; 800000) || \
(${OSVERSION} &gt;= 800500 &amp;&amp; ${OSVERSION} &lt; 900000) || \
(${OSVERSION} &gt;= 900003) ) &amp;&amp; !defined(USE_GCC) &amp;&amp; empty(CC:T:M*gcc4*)
CONFIGURE_ARGS+=	--enable-gcc-hardening
.endif

.if  ( ${OSVERSION} &lt; 704000 || \
(${OSVERSION} &gt;= 800000 &amp;&amp; ${OSVERSION} &lt; 801500) || \
(${OSVERSION} &gt;= 900000 &amp;&amp; ${OSVERSION} &lt; 900011) )
WITH_OPENSSL_PORT=	yes
.endif

.if ${PORT_OPTIONS:MBUFFREELISTS}
CONFIGURE_ARGS+=	--enable-buf-freelists
.else
CONFIGURE_ARGS+=	--disable-buf-freelists
.endif

.if ${PORT_OPTIONS:MINSTR_DOWNLOADS}
CONFIGURE_ARGS+=	--enable-instrument-downloads
.else
CONFIGURE_ARGS+=	--disable-instrument-downloads
.endif

.if ${PORT_OPTIONS:MTCMALLOC}
CONFIGURE_ARGS+=	--with-tcmalloc
LIB_DEPENDS+=		tcmalloc:${PORTSDIR}/devel/google-perftools
.endif

.if ${PORT_OPTIONS:MTHREADS}
CONFIGURE_ARGS+=	--enable-threads
CFLAGS+=		${PTHREAD_CFLAGS}
.else
CONFIGURE_ARGS+=	--disable-threads
.endif

.if ${PORT_OPTIONS:MTRANSPARENT}
CONFIGURE_ARGS+=	--enable-transparent
.else
CONFIGURE_ARGS+=	--disable-transparent
.endif

post-patch:
	@${MV} ${WRKSRC}/contrib/tor-tsocks.conf \
		${WRKSRC}/contrib/tor-tsocks.conf.sample
	@${REINPLACE_CMD} -e "s|tor-tsocks.conf|tor-tsocks.conf.sample|g" \
		${WRKSRC}/contrib/Makefile.in
	@${REINPLACE_CMD} -e '\|^install-data-am:|s|install-docDATA||' \
		${WRKSRC}/doc/Makefile.in
	@${REINPLACE_CMD} -e "s|-ltcmalloc|${LOCALBASE}/lib/libtcmalloc.so|" \
		${WRKSRC}/configure

post-configure:
	@${FIND} -X ${WRKSRC} -type f -name Makefile | ${XARGS} 
${REINPLACE_CMD} -e \
		"s|-lpthread|${PTHREAD_LIBS}|g"
	@${REINPLACE_CMD} -e '\|^nodist_man_MANS =|s|$$|${MAN1}|' \
		${WRKSRC}/doc/Makefile

post-install:
	${MKDIR} /var/run/tor
	${CHOWN} -R _tor:_tor /var/run/tor
	${TOUCH} /var/log/tor
	${CHOWN} _tor:_tor /var/log/tor
	${MKDIR} /var/db/tor/data
	${CHOWN} -R _tor:_tor /var/db/tor
	${CHMOD} -R 700 /var/db/tor
	${CAT} ${PKGMESSAGE}

check regression-test test: build
	@( cd ${BUILD_WRKSRC} &amp;&amp; ${SETENV} ${MAKE_ENV} ${MAKE} \
	${MAKE_FLAGS} ${MAKEFILE} ${MAKE_ARGS} check )

.include &lt;bsd.port.mk&gt;


BTW, I sent this thread to the supposed FreeBSD port mantainer and 
another guy (I found him using freshports.org). No answer at all (yet).

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809145409</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-09 14:54:09-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On Thu, Aug 9, 2012 at 6:04 AM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt;&gt;
&gt;&gt; Can you see what arguments are being passed to configure, and what
&gt;&gt; configure does with them?  Is the freebsd build process passing
&gt;&gt; --with-tcmalloc to the configure script?
&gt;
&gt;
&gt; Sure.
&gt;
&gt; mb# pwd &amp;&amp; make showconfig

Hm. Does all that stuff actually say which options *were* passed to
the configure script?  It seems as though --with-tcmalloc *should*
have been passed on the command line to configure, but I'm not at all
sure which of that tells me which arguments *were* passed to
configure.

Have a look near the top of "config.log" (please don't send the whole
file; it will be enormous) -- there should be a part that says what
command line configure got.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810141452</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-10 14:14:52-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On 08/09/2012 04:54 PM, Nick Mathewson wrote:
&gt; On Thu, Aug 9, 2012 at 6:04 AM, Jordi Espasa Clofent
&gt; &lt;jespasac@minibofh.org&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; Can you see what arguments are being passed to configure, and what
&gt;&gt;&gt; configure does with them?  Is the freebsd build process passing
&gt;&gt;&gt; --with-tcmalloc to the configure script?
&gt;&gt;
&gt;&gt;
&gt;&gt; Sure.
&gt;&gt;
&gt;&gt; mb# pwd &amp;&amp; make showconfig
&gt;
&gt; Hm. Does all that stuff actually say which options *were* passed to
&gt; the configure script?  It seems as though --with-tcmalloc *should*
&gt; have been passed on the command line to configure, but I'm not at all
&gt; sure which of that tells me which arguments *were* passed to
&gt; configure.

Well, still the same forcing the configure tcmalloc argument to the make 
install command:

mb# make WITH_TCMALLOC=1 install
===&gt;  Installing for tor-0.2.2.37
===&gt;   tor-0.2.2.37 depends on file: /usr/local/lib/libcrypto.so.7 - found
===&gt;   tor-0.2.2.37 depends on shared library: event-2.0 - found
===&gt;   tor-0.2.2.37 depends on shared library: tcmalloc - found
===&gt;   Generating temporary packing list
===&gt;  Checking if security/tor already installed
===&gt; Creating users and/or groups.
Using existing group `_tor'.
Using existing user `_tor'.
Making install in src
Making install in common
Making install in or
cc -DHAVE_CONFIG_H -I. -I../..  -DSHARE_DATADIR="\"/usr/local/share\"" 
-DLOCALSTATEDIR="\"/usr/local/var\""  -DBINDIR="\"/usr/local/bin\"" 
-I../../src/common -I/usr/local/include/event2 -I/usr/local/include 
-I/usr/local/include  -O2 -pipe  -fno-strict-aliasing 
-D_FORTIFY_SOURCE=2 -fstack-protector-all -fwrapv -fPIE 
-Wstack-protector --param ssp-buffer-size=1 -Wall -fno-strict-aliasing 
-MT tor_main.o -MD -MP -MF .deps/tor_main.Tpo -c -o tor_main.o tor_main.c
mv -f .deps/tor_main.Tpo .deps/tor_main.Po
cc  -O2 -pipe  -fno-strict-aliasing -D_FORTIFY_SOURCE=2 
-fstack-protector-all -fwrapv -fPIE -Wstack-protector --param 
ssp-buffer-size=1 -Wall -fno-strict-aliasing -L/usr/local/lib 
-L/usr/local/lib/event2 -rpath=/usr/local/lib -pie -Wl,-z,relro 
-Wl,-z,now -o  tor tor_main.o ./libtor.a ../common/libor.a 
../common/libor-crypto.a  ../common/libor-event.a  -lz -lm -levent-2.0 
-lssl -lcrypto -pthread
cc -DHAVE_CONFIG_H -I. -I../..  -DSHARE_DATADIR="\"/usr/local/share\"" 
-DLOCALSTATEDIR="\"/usr/local/var\""  -DBINDIR="\"/usr/local/bin\"" 
-I../../src/common -I/usr/local/include/event2 -I/usr/local/include 
-I/usr/local/include  -O2 -pipe  -fno-strict-aliasing 
-D_FORTIFY_SOURCE=2 -fstack-protector-all -fwrapv -fPIE 
-Wstack-protector --param ssp-buffer-size=1 -Wall -fno-strict-aliasing 
-MT tor_main.o -MD -MP -MF .deps/tor_main.Tpo -c -o tor_main.o tor_main.c
mv -f .deps/tor_main.Tpo .deps/tor_main.Po
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
   install  -s -o root -g wheel -m 555 tor '/usr/local/bin'
Making install in test
Making install in tools
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
   install  -s -o root -g wheel -m 555 tor-resolve tor-gencert 
'/usr/local/bin'
Making install in win32
Making install in config
test -z "/usr/local/etc/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/etc/tor"
  install  -o root -g wheel -m 444 torrc.sample '/usr/local/etc/tor'
test -z "/usr/local/share/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/share/tor"
  install  -o root -g wheel -m 444 geoip '/usr/local/share/tor'
Making install in doc
test -z "/usr/local/man/man1" || /usr/local/bin/gmkdir -p 
"/usr/local/man/man1"
  install  -o root -g wheel -m 444 tor.1 tor-resolve.1 torify.1 
tor-gencert.1 '/usr/local/man/man1'
Making install in contrib
Making install in suse
test -z "/usr/local/bin" || /usr/local/bin/gmkdir -p "/usr/local/bin"
  install  -o root -g wheel -m 555 torify '/usr/local/bin'
test -z "/usr/local/etc/tor" || /usr/local/bin/gmkdir -p 
"/usr/local/etc/tor"
  install  -o root -g wheel -m 444 tor-tsocks.conf.sample 
'/usr/local/etc/tor'
===&gt; Installing rc.d startup script(s)
/bin/mkdir -p /var/run/tor
/usr/sbin/chown -R _tor:_tor /var/run/tor
/usr/bin/touch /var/log/tor
/usr/sbin/chown _tor:_tor /var/log/tor
/bin/mkdir -p /var/db/tor/data
/usr/sbin/chown -R _tor:_tor /var/db/tor
/bin/chmod -R 700 /var/db/tor
/bin/cat /usr/ports/security/tor/work/pkg-message
================================================================================
To enable the tor server, set tor_enable="YES" in your /etc/rc.conf
and edit /usr/local/etc/tor/torrc.  Note that the rc.subr script overrides
many torrc options and is tunable: see /usr/local/etc/rc.d/tor for details.
To use the torify script, install the net/torsocks port. After removing the
package, or updating to a new version, users may need to delete all files
in /var/db/tor.
================================================================================
===&gt; Correct pkg-plist sequence to create group(s) and user(s)
===&gt;   Compressing manual pages for tor-0.2.2.37
===&gt;   Registering installation for tor-0.2.2.37
===&gt; SECURITY REPORT:
       This port has installed the following files which may act as network
       servers and may therefore pose a remote security risk to the system.
/usr/local/bin/tor-resolve
/usr/local/bin/tor-gencert
/usr/local/bin/tor

       This port has installed the following startup scripts which may cause
       these network services to be started at boot time.
/usr/local/etc/rc.d/tor

       If there are vulnerabilities in these programs there may be a 
security
       risk to the system. FreeBSD makes no guarantee about the security of
       ports included in the Ports Collection. Please type 'make deinstall'
       to deinstall the port if this is a concern.

       For more information, and contact details about the security
       status of this software, see the following webpage:
http://torproject.org/

mb# ldd /usr/local/bin/tor
/usr/local/bin/tor:
	libz.so.5 =&gt; /lib/libz.so.5 (0x281aa000)
	libm.so.5 =&gt; /lib/libm.so.5 (0x281bc000)
	libevent-2.0.so.6 =&gt; /usr/local/lib/event2/libevent-2.0.so.6 (0x2844e000)
	libssl.so.7 =&gt; /usr/local/lib/libssl.so.7 (0x28489000)
	libcrypto.so.7 =&gt; /usr/local/lib/libcrypto.so.7 (0x284d7000)
	libthr.so.3 =&gt; /lib/libthr.so.3 (0x281df000)
	libc.so.7 =&gt; /lib/libc.so.7 (0x28090000)

&gt; Have a look near the top of "config.log" (please don't send the whole
&gt; file; it will be enormous) -- there should be a part that says what
&gt; command line configure got.

I guess is /usr/ports/security/tor/work/tor-0.2.2.37/config.log

Well, in here I see:

This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.69.  Invocation command line was

   $ ./configure --with-openssl-dir=/usr/local --disable-asciidoc 
--enable-linker-hardening --enable-gcc-hardening --enable-buf-freelists 
--disable-instrument-downloads --enable-threads --enable-transparent 
--prefix=/usr/local --mandir=/usr/local/man --infodir=/usr/local/info/ 
--build=i386-portbld-freebsd8.1

## --------- ##
## Platform. ##
## --------- ##

hostname = mb
uname -m = i386
uname -r = 8.1-RELEASE
uname -s = FreeBSD
uname -v = FreeBSD 8.1-RELEASE #0: Mon Jul 19 02:55:53 UTC 2010 
root@almeida.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC

/usr/bin/uname -p = i386
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /sbin
PATH: /bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /usr/games
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /root/bin

So, actually I cannot see the tcmalloc is used by configure.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810145536</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-10 14:55:36-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On Fri, Aug 10, 2012 at 10:14 AM, Jordi Espasa Clofent
&lt;jespasac@minibofh.org&gt; wrote:
&gt; On 08/09/2012 04:54 PM, Nick Mathewson wrote:
&gt;&gt; Have a look near the top of "config.log" (please don't send the whole
&gt;&gt; file; it will be enormous) -- there should be a part that says what
&gt;&gt; command line configure got.
&gt;
&gt;
&gt; I guess is /usr/ports/security/tor/work/tor-0.2.2.37/config.log
&gt;
&gt; Well, in here I see:
&gt;
&gt; This file contains any messages produced by compilers while
&gt; running configure, to aid debugging if configure makes a mistake.
&gt;
&gt; It was created by configure, which was
&gt; generated by GNU Autoconf 2.69.  Invocation command line was
&gt;
&gt;   $ ./configure --with-openssl-dir=/usr/local --disable-asciidoc
&gt; --enable-linker-hardening --enable-gcc-hardening --enable-buf-freelists
&gt; --disable-instrument-downloads --enable-threads --enable-transparent
&gt; --prefix=/usr/local --mandir=/usr/local/man --infodir=/usr/local/info/
&gt; --build=i386-portbld-freebsd8.1
&gt;

Yup.  No --with-tcmalloc there.  For whatever reason, the freebsd
build process didn't pass --with-tcmalloc to configure.

If the ports maintainer isn't being responsive, maybe some other
freebsd people could have a look?  If the build process is telling Tor
the wrong stuff, then that is almost certainly something going wrong
with the build process.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810145649</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-10 14:56:49-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

&gt; Yup.  No --with-tcmalloc there.  For whatever reason, the freebsd
&gt; build process didn't pass --with-tcmalloc to configure.
&gt;
&gt; If the ports maintainer isn't being responsive, maybe some other
&gt; freebsd people could have a look?  If the build process is telling Tor
&gt; the wrong stuff, then that is almost certainly something going wrong
&gt; with the build process.

I will try again to contact them.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808181916</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-08 18:19:16-0400</timestampReceived><subject>Re: [tor-dev] Is it possible to run private Exit nodes?</subject><body>

On 8/8/12, SiNA Rabbani &lt;sina@redteam.io&gt; wrote:
&gt; I have been running private bridges for my VIP contacts for a long time.
&gt; I use PublishServerDescriptor 0 to keep my bridges private.
&gt;
&gt; Is it possible to also run a private Exit node?

Yes, but (a) anyone who notices that it exists can use it, and (b) it
would be very risky for anyone to make their Tor client able to use a
private exit node (it could identify them as someone who knows that
that exit node exists, even if they aren't currently trying to use
it).


&gt; What would happen, if I hard coded an exit into my torrc that is not
&gt; published (if possible at all)?

Nothing.  You also need to feed its descriptor to Tor using the control port.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808183815</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-08-08 18:38:15-0400</timestampReceived><subject>Re: [tor-dev] Next Tor release timeframes?</subject><body>

On Wed, Aug 8, 2012 at 5:04 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 1) Do we have any requirements to release an 0.2.4.1-alpha at any
&gt; particular date? I haven't been following e.g. the latest SponsorG
&gt; timelines.
&gt;
&gt; 2) Nick was enthusiastic about an 0.2.2.38 with the latest fix. Nick,
&gt; do you still think that's important? My sense is that it's a totally
&gt; esoteric theoretical attack where there's no rush to release.

Bug 6530 is the one to worry about.  It's a remotely triggerable DoS
vulnerability where you can crash anybody who tries to download a
networkstatus consensus from you.  That's not "esoteric" or
"theoretical."

&gt; 3) For the next 0.2.3 rc, we might want to merge at least:
&gt; https://trac.torproject.org/projects/tor/ticket/6252

ok.  Will merge, with bikeshed options not followed.

&gt; https://trac.torproject.org/projects/tor/ticket/6404

Agreed, but it needs review!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808170300</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-08-08 17:03:00-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports (was: First five Tor tech reports)</subject><body>

On Wed, Aug 08, 2012 at 12:22:16PM +0200, Karsten Loesing wrote:
&gt; Feedback much appreciated!

The pdf documents look really good now. I don't know if the tech reports get
cited a lot but it might be worth adding BibTeX entries next to the pdf download
links.

Also, in order to give the page more exposure, it could be linked at [1] or
somewhere at [2].

[1] https://www.torproject.org/getinvolved/research.html.en
[2] https://www.torproject.org/docs/documentation.html.en
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120805175255</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-08-05 17:52:55-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - July 2012</subject><body>

Hi all. My July was mostly spent traveling, both for Defcon [1] and a
couple visits with my family on Vashon (for a funeral and Strawberry
Festival). August will be much the same. I'll be gone...

* 8/8 - 8/12 for Toorcamp [2]
* 8/17 - 9/3 for a family trip

Besides that and cat wrangling for the GSoC midterms, here's the
things I did this month...

* Implemented an ExitPolicy class [3]. Sathyanarayanan did the initial
port of the class from arm, but that implementation turned out to have
several issues (no IPv6 support, masking was incomplete, didn't
strictly conform to the spec) so I ended up rewriting it. The result
was pretty nice...

https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/exit_policy.py
https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/exit_policy/policy.py
https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/exit_policy/rule.py

* Not tor related, but submitted five patches to ReviewBoard...
  * Re-enabling lexer guessing based on content [4]
  * Supporting dashboard impersonations [5]
  * Better supporting mixed newline types in diff reconstruction [6]
  * Crashing issue when authentication fails [7]
  * Better handle perforce symlinks [8]

* Variety of small things...
  * Skipping tests on OSX that make numerous sockets to unblock
development there [9]
  * Unsuccessful attempt to fix Windows specific date formatting issue [10]
  * Forgot to account for tor's debugger disabling in stem's proc tests [11]
  * Supporting the transport line in extrainfo descriptors [12]
  * Expanding the Version class and tor spec to include git commit ids
  * Variety of pylint fixes [13]
  * Discussion about is_alive() handling and quitting the socket [14]

* Ravi has also been busy, finishing several controller methods...
  * GETCONF support [15]
  * SETCONF and RESETCONF support [16]
  * LOADCONF and SAVECONF support [17]
  * SETFEATURE support, though this one's still incomplete [18]

Cheers! -Damian

[1] http://www.atagar.com/arm/log.php#defcon2012
[2] http://www.toorcamp.org/
[3] https://trac.torproject.org/5454
[4] http://reviews.reviewboard.org/r/3156/
[5] http://reviews.reviewboard.org/r/3207/
[6] http://reviews.reviewboard.org/r/3208/
[7] http://reviews.reviewboard.org/r/3209/
[8] http://reviews.reviewboard.org/r/3221/
[9] https://trac.torproject.org/5917
[10] https://trac.torproject.org/6206
[11] https://trac.torproject.org/6286
[12] https://trac.torproject.org/6257
[13] https://gitweb.torproject.org/stem.git/commitdiff/fd2da10
[14] https://trac.torproject.org/6234
[15] https://trac.torproject.org/6114
[16] https://trac.torproject.org/6239
[17] https://trac.torproject.org/6356
[18] https://trac.torproject.org/6417
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120807012958</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-08-07 01:29:58-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem descriptor parsing - Status update</subject><body>

[Attachment #2 (multipart/alternative)]


Hello

I spent the last two weeks implementing the network status document parser
and the microdescriptor consensus parser. The network status document
parsing code is ready for review here[1]. It's a fairly large amount of
code, with ~1.4K new LoC. The microdescriptor consensus parser is much
simpler, since it reuses most of the network status document parsing code.
I'll be uploading that soon.

I should be working on the controller's event handling methods after that.

1. https://trac.torproject.org/projects/tor/ticket/6569

-- 
neena

[Attachment #5 (text/html)]

Hello&lt;br&gt;&lt;br&gt;I spent the last two weeks implementing the network status document \
parser and the microdescriptor consensus parser. The network status document parsing \
code is ready for review here[1]. It's a fairly large amount of code, with ~1.4K \
new LoC. The microdescriptor consensus parser is much simpler, since it reuses most \
of the network status document parsing code. I'll be uploading that soon.&lt;br&gt;

&lt;br&gt;I should be working on the controller's event handling methods after \
that.&lt;br&gt;&lt;br&gt;1. &lt;a href="https://trac.torproject.org/projects/tor/ticket/6569"&gt;https://trac.torproject.org/projects/tor/ticket/6569&lt;/a&gt;&lt;br&gt;&lt;br&gt;
                
-- &lt;br&gt;
neena&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120807161414</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-08-07 16:14:14-0400</timestampReceived><subject>Re: [tor-dev] #6512 [Stem]: TorExport Module and Unit Testing</subject><body>

Hi Erik. Sorry about pushing the revisions without checking first. I
didn't want to distract you and Megan from Onionoo by having a
prolonged code review though on reflection it was rude of me to not
ask first. Apologies. :(

&gt; Looking at coverage the test provides, I was under the impression that the various \
&gt; cases of include_fields and exclude fields (e.g. if they overlap) should also be \
&gt; tested

Ahhh, I didn't realize that's what the tests were for. Indeed, that
would be a good thing to check. Should be easy to add.

&gt; In the mocking changes that I made, I added functionality for mocking functions \
&gt; that take keyword arguments.  Though it is no longer necessary with the new unit \
&gt; tests, I was wondering if there was something I could have done better with that \
&gt; code as it seems such functionality may come in useful in the future.

It sounds like a good change. My issue with it was that
return_for_args() is pretty simple right now, and the kwarg_type
argument complicates its usage quite a bit. It's generally a bad sign
if takes 65 words to describe an argument. ;)

Maybe we could make a new mock function to handle this use case?

&gt; You may have already noticed this (and your documentation is consistent with this), \
&gt; but just to be sure, the new export code won't work with generators

Gah! No, I didn't. Suddenly your implementation makes a lot more sense.

Should be easy to fix by calling iter() on descriptors. I'll make the
change and add a test for it - thanks for the catch!

&gt; Working with Professor Danner this summer (and from the CS classes I have taken so \
&gt; far), I am under the impression that run-time type checking can be expensive and \
&gt; generally falls outside of the realm of 'pythonic' code.

The performance cost of type checking is negligible, though you're
right that it's not very pythonic. Frequently calling isinstance() is
a bad sign since it means you're violating the rule of thumb that
variables should only be of a single type. It's horribly confusing to
have variable 'foo' sometimes be an int and sometimes be a string, so
it's important to keep types consistent. Without this dynamic
languages like python and ruby would be unmaintainable.

That said, rules have exceptions. At the very start of functions I
sometimes use isinstance() checks to normalize a variable's type.
Doing this allows callers more flexibility in how they use us, while
keeping our code simple. In this case 'descriptors' is always a list,
but our caller can provide us with either a single Descriptor or list
of Descriptors as they see fit. Without this we either force our
callers to make wrapper lists...

my_descriptor_csv = export_csv([my_descriptor])

... or bloat our API with specially named methods that all do the same thing...

my_descriptor_csv = export_single_csv(my_descriptor)

Dynamic languages like python lack method overloading and I view that
as a weakness. So, on one hand we want a flexible API that doesn't get
in the way of our users but on the other overloaded variable types are
damn confusing.

The middle ground that I've settled on is to let users provide one or
multiple of an object type when that capability would be useful. Imho
this makes for a nicer API without treading very far into type
confusions. Others may disagree.

As for the isinstance() Descriptor check on line 83, the runtime cost
to check this is so infinitesimally small that it shouldn't be a
concern. The real performance costs of a system either come from
constrained resources (like network IO) or runtime complexity (O(n) vs
O(n^2) operations). It's well worth taking a couple nanoseconds to
provide our callers with a nicer error message when they screw up.

&gt; Thank you in advance for answering these questions -- this summer has been (and \
&gt; still is) a phenomenal learning experience for us, and gaining insight on coding \
&gt; style and the like is crucial to developing our own coding techniques.

I'm glad this has been a good learning experience for you! You're a
great developer and I'm keeping my fingers crossed that you keep
hacking on open source stuff well after the summer has ended.

&gt; Looking at the code, I must apologize.  I didn't mean to take so much of your time \
&gt; rewriting the code.

Don't worry about that. It's mostly my OCD for code to look and behave
a very specific way. Your implementation was perfectly functional.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120808092437</emailId><senderName></senderName><senderEmail>vmonmoonshine</senderEmail><timestampReceived>2012-08-08 09:24:37-0400</timestampReceived><subject>[tor-dev] http_apache_steg_t is working now</subject><body>

Hey Zack,

I have pushed the working version of http_apache_steg_t. On server side
it asks apache for the load, on the client side it uses the url
dictionary and parameter values.

http_apache_steg_t is inherited from http_steg_t. But because of all
those macro hackish tricks (which expect you to inherit only from
steg_t), it feels bit odd (when c++ natively support
polymorphism maybe we don't need these macros). So you can test it
writing http_apache instead of http in the command line. (but you need
apache installed on server side and you need to run payload_scraper first)

Downstream client to server is only curl now and hence probably more
robust while passing proxies. It's blocking though. I'll make
non-blocking in near future.

I'm going to implement the protocol for passing the dictionary from the
server to client in following few days and spends next week testing,
writing tests and applying your comments on github (including spelling
and grammatical mistakes :p )

Cheers,
vmon

P.S. I'm slowly re-styling stuff in the steg directory to c++ style, 
meanwhile it might look even uglier and messier, but it'll be pretier at
end.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808181301</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-08-08 18:13:01-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports (was: First five Tor tech reports)</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Karsten Loesing (karsten@torproject.org):

&gt; On 7/12/12 3:12 PM, Karsten Loesing wrote:
&gt; &gt; here are the first five metrics tech reports that I'd like to turn into
&gt; &gt; Tor tech reports (see #5405 for the idea behind this).
&gt; 
&gt; The next batch of ten Tor Tech Reports is now available (all in the list
&gt; except for the five from 2011 which I posted here a month ago):
&gt; 
&gt; https://research.torproject.org/techreports.html
&gt;
&gt; What other reports are we missing?

Since HotPETS doesn't count as "publishing" perhaps this should be
listed as a tech report:
http://fscked.org/talks/TorFlow-HotPETS-final.pdf

I'm not sure when I'd actually have the time to write it up (let alone
do the network scanning analysis), but the output of
https://trac.torproject.org/projects/tor/ticket/6135 *could* be one, I
guess.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120808184140</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-08-08 18:41:40-0400</timestampReceived><subject>Re: [tor-dev] [patch] fix vidalia compilation in gcc 4.7</subject><body>

On Wed, Aug 8, 2012 at 1:44 PM, Jason A. Donenfeld &lt;Jason@zx2c4.com&gt; wrote:
&gt; Fixed in a gentoo bug report:
&gt;
&gt; https://422645.bugs.gentoo.org/attachment.cgi?id=320722

I've added this to the bug tracker at
https://trac.torproject.org/projects/tor/ticket/6575 so that it
doesn't get lost.  Thanks!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808185345</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-08 18:53:45-0400</timestampReceived><subject>Re: [tor-dev] Next Tor release timeframes?</subject><body>

On 8/8/12 8:38 PM, Nick Mathewson wrote:
&gt; On Wed, Aug 8, 2012 at 5:04 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt; 1) Do we have any requirements to release an 0.2.4.1-alpha at any
&gt;&gt; particular date? I haven't been following e.g. the latest SponsorG
&gt;&gt; timelines.

Yes, we should have "tested packages" by September 14:

https://trac.torproject.org/projects/tor/ticket/6374

https://trac.torproject.org/projects/tor/ticket/6375

Best,
Karsten


&gt;&gt; 2) Nick was enthusiastic about an 0.2.2.38 with the latest fix. Nick,
&gt;&gt; do you still think that's important? My sense is that it's a totally
&gt;&gt; esoteric theoretical attack where there's no rush to release.
&gt; 
&gt; Bug 6530 is the one to worry about.  It's a remotely triggerable DoS
&gt; vulnerability where you can crash anybody who tries to download a
&gt; networkstatus consensus from you.  That's not "esoteric" or
&gt; "theoretical."
&gt; 
&gt;&gt; 3) For the next 0.2.3 rc, we might want to merge at least:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/6252
&gt; 
&gt; ok.  Will merge, with bikeshed options not followed.
&gt; 
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/6404
&gt; 
&gt; Agreed, but it needs review!
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808192436</emailId><senderName>Paul Syverson</senderName><senderEmail>syverson@itd.nrl.navy.mil</senderEmail><timestampReceived>2012-08-08 19:24:36-0400</timestampReceived><subject>Re: [tor-dev] Is it possible to run private Exit nodes?</subject><body>

On Wed, Aug 08, 2012 at 06:19:16PM +0000, Robert Ransom wrote:
&gt; On 8/8/12, SiNA Rabbani &lt;sina@redteam.io&gt; wrote:
&gt; &gt; I have been running private bridges for my VIP contacts for a long time.
&gt; &gt; I use PublishServerDescriptor 0 to keep my bridges private.
&gt; &gt;
&gt; &gt; Is it possible to also run a private Exit node?
&gt; 
&gt; Yes, but (a) anyone who notices that it exists can use it, and (b) it
&gt; would be very risky for anyone to make their Tor client able to use a
&gt; private exit node (it could identify them as someone who knows that
&gt; that exit node exists, even if they aren't currently trying to use
&gt; it).
&gt; 

Saying it is very risky seems too strong and too general. A very
likely threat model could comprise a client-local attacker that you
don't want seeing your destinations or your private exit, together
with the threat of a (colluding or non-colluding) hostile exit node
that you don't want mucking with or recording your exiting traffic. In
that setting you would be better served using a private exit than a
public one chosen using current Tor defaults.

Yes you would be subject to epistemic attacks. (You probably want to
also do some sort of layered guards to protect against the middle node
creating a pseudonymous client profile _if_ that is also a threat you
care about. For that matter, if you ever use this to go to a hostile
server or to a server over hostile underlying network, your adversary
will get a pseudonymous profile of you via the traffic coming from
that private exit---if it is recognized qua exit.) Also, won't the
middle relay balk at extending to an unlisted exit unless the middle
relay is itself an exit? (Can't recall where the checks happen.) This
will also flag you as quite different to the middle relay.

My main point is that, despite all this, there may be other threats
that are more significant to you that are less well protected by
current Tor defaults than a private exit would be. This isn't
something to recommend as an easy option for generic users, but it is
likely to make sense for some.

As another motivation, you might want to access a server (your own or
someone else's) through Tor that only accepts connections from certain
IPs and ports that are not to be found among the policies of available
Tor exits (or Tor exits you would trust). Another ill-understood
shifting in both security and performance that might be worth it.

aloha,
Paul
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809012913</emailId><senderName>Admin</senderName><senderEmail>admin@tromsite.com</senderEmail><timestampReceived>2012-08-09 01:29:13-0400</timestampReceived><subject>[tor-dev] How about virtual machines?</subject><body>

Hello Developers,

My testing shows that you can setup encrypted virtual machines in a 
country with easy access to broadband, and have someone from a country 
where good computer hardware is hard to find, the Internet got cut off 
to a point where only dial up is available, and manage to give these 
people access to broadband and high range hardware.

In order to do this, you need to setup a remote desktop virtualization, 
where the user is able to use all of the resources of a virtual machine, 
while only using it's current device for rendering the screen of the vm 
and as keyboard, mouse or touch input.

This virtual machine could reset it's state once the user logs off, 
leaving no trace of what he did while he was on it. Considering the only 
connection the user is actually making is to the vm location, there is 
way an oppressive government can figure out which sites are currently 
being visited or what the user is doing, unless it is already inside 
taking screenshots and keylogging.

There is also the possibility of making cheap dial up enabled USB 
dongles, which are specialized in screen rendering by PCoIP and can be 
connected to any device, such as a smart tvs and tablets.

Testing shows you can make Android virtual machines for those connecting 
through a touch enabled device, and keep the device's touch functions.

Let me know what you think.

Cheers
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810150533</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-10 15:05:33-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD</subject><body>

On 08/10/2012 04:56 PM, Jordi Espasa Clofent wrote:
&gt;&gt; Yup.  No --with-tcmalloc there.  For whatever reason, the freebsd
&gt;&gt; build process didn't pass --with-tcmalloc to configure.
&gt;&gt;
&gt;&gt; If the ports maintainer isn't being responsive, maybe some other
&gt;&gt; freebsd people could have a look?  If the build process is telling Tor
&gt;&gt; the wrong stuff, then that is almost certainly something going wrong
&gt;&gt; with the build process.
&gt;
&gt; I will try again to contact them.

FYI:
http://lists.freebsd.org/pipermail/freebsd-ports/2012-August/077433.html

Let see if someone is taking care of this one.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120810151802</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-08-10 15:18:02-0400</timestampReceived><subject>Re: [tor-dev] [Stegotorus] Strange comparison in chop_circuit_t::send_targeted(conn, blocksize)</subject><body>

On 2012-08-10 8:11 AM, vmon wrote:
&gt; Hey Zack,
&gt;
&gt; Please take a look at this comparison in
&gt; chop_circuit_t::send_targeted(conn, blocksize):
&gt;
&gt;    if (avail &gt; blocksize - lo)
&gt;      avail = blocksize - lo;
&gt;    else if (avail &gt; SECTION_LEN)
&gt;      avail = SECTION_LEN;
&gt;    else if (upstream_eof &amp;&amp; !sent_fin)
&gt;      // this block will carry the last byte of real data to be sent in
&gt;      // this direction; mark it as such
&gt;      op = op_FIN;
&gt;
&gt; Assume SECTION_LEN = 65536 suppose
&gt; avail = 67000 blocksize - lo = 66500 =&gt; avail = 66500
&gt; avail = 67000 blocksize - lo = 67500 =&gt; avail = 65536
&gt;
&gt; it's like that if avail is very big then the it is OK if it's bigger than
&gt; SECTION_LEN but if it's moderately big then it shouldn't be bigger than
&gt; SECTION_LEN, which seems very arbitrary.

The *intent* here is to clamp 'avail' to
min(blocksize - lo, SECTION_LEN) because: we can't fit more than 
SECTION_LEN bytes of data in a block under any circumstances, and we 
were asked to provide a block which is no larger than 'blocksize' but we 
have 'lo' bytes of overhead to cope with.

So your rewrite is correct.  I think maybe the control flow here could 
do with some going-over for clarity but that needn't happen right now.

&gt;    if ((avail &gt; blocksize - lo) || (avail &gt; SECTION_LEN))

The nested parentheses are unnecessary in this case.

&gt;    {
&gt;      avail = min(blocksize - lo, SECTION_LEN);
&gt;    }

No curly braces around one-statement blocks.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120811075718</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-08-11 07:57:18-0400</timestampReceived><subject>Re: [tor-dev] Another key exchange algorithm for extending circuits: alternative to ntor?</subject><body>

On 8/10/12, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 8/8/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;
&gt;&gt; http://www.infsec.cs.uni-saarland.de/~mohammadi/owake.html
&gt;
&gt; Also, where does this paper specify that the participants must check
&gt; that public-key group elements are not equal to the identity element?
&gt; That's rather important, as Tor's relay protocol is likely to break if
&gt; an attacker can force a server to open additional circuits to an
&gt; attacker using the same key material that a legitimate client's
&gt; circuit has.

It occurred to me later that the server would know that H(g^(x_1*b +
x_2*y), g^y) is ‘fresh', and that the client would know that the
server would not use H(g^(x_1*b + x_2*y), g^(x_1), g^(x_2), g^y) as a
key with a party that presented some public key other than (g^(x_1),
g^(x_2)) to it, so I checked the paper for *that* defense against
tampering and found it in Figure 4.  (That is a critical detail of
this protocol, and not necessary to protect honest clients against key
reuse in ntor, so it should have been included in the specifications
of the protocol in Figures 3 and 5 and the first two paragraphs of
section 3.1.  Hopefully the authors will fix that too when they revise
their paper.)

I don't see any way to attack ‘Ace' with the client and server
ephemeral public keys included in the data passed to the KDF.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120811171053</emailId><senderName>Jordi Espasa Clofent</senderName><senderEmail>jespasac@minibofh.org</senderEmail><timestampReceived>2012-08-11 17:10:53-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [tor-relays] tcmalloc in FreeBSD [SOLVED ?]</subject><body>

That's really strange. With a non-modified configure.in (which means 
that is containing this misplaced stanza), I did:

# cd /usr/ports/security/tor/
# make deinstall
# make clean
# make install

and... voilá:

mb# ldd /usr/local/bin/tor
/usr/local/bin/tor:
	libtcmalloc.so.2 =&gt; /usr/local/lib/libtcmalloc.so.2 (0x2844e000)
	libz.so.5 =&gt; /lib/libz.so.5 (0x281aa000)
	libm.so.5 =&gt; /lib/libm.so.5 (0x281bc000)
	libevent-2.0.so.6 =&gt; /usr/local/lib/event2/libevent-2.0.so.6 (0x284b6000)
	libssl.so.7 =&gt; /usr/local/lib/libssl.so.7 (0x284f1000)
	libcrypto.so.7 =&gt; /usr/local/lib/libcrypto.so.7 (0x2853f000)
	libthr.so.3 =&gt; /lib/libthr.so.3 (0x281df000)
	libc.so.7 =&gt; /lib/libc.so.7 (0x28090000)
	libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x286a1000)
	libgcc_s.so.1 =&gt; /lib/libgcc_s.so.1 (0x281f4000)

So it seems the 'make clean' did some magic. According to man ports(7):

clean            Remove the expanded source code.  This recurses to
                  dependencies unless NOCLEANDEPENDS is defined.

Should I understand it was some 'expanded source code' which was 
breaking my local ports tree?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120813220713</emailId><senderName></senderName><senderEmail>vmonmoonshine</senderEmail><timestampReceived>2012-08-13 22:07:13-0400</timestampReceived><subject>[tor-dev] [GSoC] [Stegotorus] update</subject><body>

Hello Tor-devers,

In last two weeks I was busy implementing the protocol by which the
st server sends a url dictionary to the client, so they the client can
communicate with server using this url code. It was bit tricky because
chop needed to be involved to distinguished between the data being
serve to the user and the data for the steg module. This is working now.

I also made the curl st client to st server communication non-blocking
and now curl sharing the socket with libevent (for the reply). The curl
communication with apache server (for providing covers) is still
blocking. This is not critical as long as the cover webserver and st 
server are on the same machine, but is a good feature to think about.

You can get everything here:

https://github.com/zackw/stegotorus/tree/f--payload-servers

But you need to have apache installed on the server and run
payload_scraper first:

https://github.com/vmon/payload_scraper

then copy the generated payload list into apcahe_payload/server_list.txt
The name of steg protocol is http_apache (instead of http)

The next 10 days will be writing unit tests, testing, and writing
documentation for http_steg protocol.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120814164101</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-08-14 16:41:01-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo</subject><body>

Hi,

&gt;&gt;&gt; Some more feedback after a _very_ quick look through the files:
&gt;&gt;&gt;
&gt;&gt;&gt; - Why do we need something like scripts/cookie_secret.py?
&gt;&gt;
&gt;&gt; We probably don't.  We just jumped off of Sathya's first pass, and
&gt;&gt; didn't play with the Cyclone details at all.
&gt;
&gt; Sathya, what do you think about that file/feature?  Can we get rid of it?
&gt;

We don't need it. Feel free to expunge it. (If not, I'll do it)

--Sathya
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120814223833</emailId><senderName>Daniel Dennis</senderName><senderEmail>sdjfjsdfiuhszduh@fastmail.fm</senderEmail><timestampReceived>2012-08-14 22:38:33-0400</timestampReceived><subject>[tor-dev] My RSA-PM client-server</subject><body>

Last month I posted a message titled "Encrypted PM site/hidden service"
inquiring about websites or services that allow users to write messages.
I got a few interesting replies but none did exactly what I wanted. So I
wrote up this code and put it on github.

The major things to note are

- Supports Windows and Linux (likely mac as well)
- Written in C# .NET
- Has a mono and non mono (plain windows) build
- Is written in mind to NEVER TRUST THE SERVER
- Client has the contents (re-)encrypted in a local database

I spent some time ensuring it works perfectly. I was able to reach the
server when it was behind a hidden service, I ran client and server on
linux and windows. Everything worked as expected.

https://github.com/sdjfjsdfiuhszduh/RSA-PM

I don't want to host anything myself. It would be nice if someone could
so whistle blowers could talk to others securely.
If anyone goes through the code let me know what you think. Although I
wrote it quickly so it may be confusing to others.

-- 
http://www.fastmail.fm - IMAP accessible web-mail

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120815073239</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-15 07:32:39-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On 8/14/12 9:31 PM, Andrew Lewman wrote:
&gt; On Tue, 14 Aug 2012 10:09:39 +0200
&gt; Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt; Mike, Andrew, Roger, Runa: please update the wiki page with your
&gt;&gt; feedback in this thread.  Please keep the developer feedback per
&gt;&gt; deliverable as short as possible, ideally in a single paragraph.
&gt; 
&gt; We need a better way to have a conversation about these deliverables,
&gt; for SponsorL now, and in the future as more of these situations come
&gt; up. My only suggestion is to not use trac wiki and write endless
&gt; replies in text over or under previous text, maybe riseup etherpad, an
&gt; actual trac discussion plugin, gobby session, or something else similar.

Agreed, Trac's wiki is a particularly bad place for discussions.  That's
why most of the discussion was supposed to happen on IRC, and only the
discussion results should go on the wiki.  My request for updating the
wiki page was only about including discussion results from the
subsequent email thread (which I didn't anticipate, or at least not in
this volume), not about continuing the discussion on Trac.  See Mike's
latest edit for an example of what I had in mind (thanks for that edit,
btw!).

&gt; As much as I dislike IRC as a decision medium, should we have another
&gt; IRC meeting to discuss current state?

Sure, why not.  Can you give some more hints how the current state has
changed?  Would you moderate that IRC meeting?

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120821054703</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-08-21 05:47:03-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

Unfortunately, during the last week of this session I didn't managed
well the communication with hellais, because he was in a different
timezone and busy with the toorcamp, and our timetables didn't really
matched.

Frontend. There is a basic html version - I should say incomplete; the
javascript interface, instead, was kept commented and unused, waiting
for a well-defined implementation to be discussed with my mentor.
Backend. Session cookies, configuration file for each service, fixed
xsrf vulnerability.
User Interface: I tried to create a system tray icon also for ubuntu,
using pyGTK, but it's still incomplete.
Mobile: finally, I got the APAF to run on my android phone.


-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120816204547</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-08-16 20:45:47-0400</timestampReceived><subject>[tor-dev] Tor on IPv6 roadmap and status page</subject><body>

Hi,

The roadmaps/Tor/IPv6 [1] wiki page has been started with the goal of
communicating the status of the work with Tor on IPv6.

Additionally, searching for Trac tickets with the keyword "ipv6" [2]
might give a picture of what's going on.

Asking here or highlighting ln5 on #tor-dev is of course another
perfectly fine option.

[1] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6 
[2] https://trac.torproject.org/projects/tor/query?keywords=~ipv6

-- 
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120808191513</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-08 19:15:13-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

Hi Philipp,

On 8/8/12 7:03 PM, Philipp Winter wrote:
&gt; On Wed, Aug 08, 2012 at 12:22:16PM +0200, Karsten Loesing wrote:
&gt;&gt; Feedback much appreciated!
&gt; 
&gt; The pdf documents look really good now. I don't know if the tech reports get
&gt; cited a lot but it might be worth adding BibTeX entries next to the pdf download
&gt; links.

Yes, good idea.  But I'll put it on the TODO list for now, because I
want to find a way to automatically generate the HTML page and BibTeX
entries.  Manually keeping the HTML page in sync with the BibTeX file
seems too error-prone.

&gt; Also, in order to give the page more exposure, it could be linked at [1] or
&gt; somewhere at [2].
&gt; 
&gt; [1] https://www.torproject.org/getinvolved/research.html.en
&gt; [2] https://www.torproject.org/docs/documentation.html.en

Agreed.  [1] will soon be replaced by https://research.torproject.org/
(which already has a 99% copy of it), and [2] will probably look quite
different in the future, too.  See this ticket for plans to write
different websites for different user communities:

https://trac.torproject.org/projects/tor/ticket/5998

Thanks for the feedback!

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120812172107</emailId><senderName>Alessandro Di Federico</senderName><senderEmail>ale@clearmind.me</senderEmail><timestampReceived>2012-08-12 17:21:07-0400</timestampReceived><subject>[tor-dev]  TBB Gentoo ebuild</subject><body>

Hi, I'm trying to put up an ebuild for the Tor Browser Bundle for
Gentoo. As you may know an ebuild is a script which automates the build
of a certain application. We already have something in Portage [2] (the
official ebuild repository) but it's in an experimental state and we
want to make sure that it's something useful and not harmful.

So I'd like to know your opinion about the idea as whole (is it a good
idea at all to build by yourself the TBB instead of using the official
one?) and what could be the main problems arising in such an operation.
So:

     1. Can you name a list of tools to fingerprint a browser so we can
        compare our ebuild with the official TBB?
     2. Which version should we use? We were planning to offer both the
        current official release (even if TBB for Linux is currently in
        beta) and something more recent, even if AFAIK this would be for
        testing purpose only and could weaken anonymity and
        untrackability.
     3. We plan to use the system version of the Tor client, in my
        understanding it should not be a problem to use a Tor client
        with a version different from the one officially released, but I
        could be wrong. We also plan to exclude vidalia (and the
        "0015-Make-Tor-Browser-exit-when-not-launched-from-Vidalia.patch" patch).
     4. We have a different ebuild for the Firefox profile directory (so
        if it's not installed the HTTPS Everywhere plugin won't be
        installed), is this a good idea or would it be better to
        integrate them?
     5. Gentoo build system offers USE flags, which are options that
        allow to customize the way the package is built. These are the
        USE flag available for the standard Firefox ebuild in Gentoo,
        which is the base for our build of the TBB:
             1. alsa: Adds support for media-libs/alsa-lib (Advanced
                Linux Sound Architecture)
             2. bindist: Disable official Firefox branding (icons, name)
                which are not binary-redistributable according to
                upstream.
             3. custom-cflags: Build with user-specified CFLAGS
                (unsupported)
             4. custom-optimization: Fine-tune custom compiler
                optimizations, setting this is not recommended.
             5. dbus: Enable dbus support for anything that needs it
                (gpsd, gnomemeeting, etc)
             6. debug: Enable extra debug codepaths, like asserts and
                extra output. If you want to get meaningful backtraces
                see http://www.gentoo.org/proj/en/qa/backtraces.xml
             7. ipc: Use inter-process communication between tabs and
                plugins. Allows for greater stability in case of plugin
                crashes
             8. libnotify: Enable desktop notification support
             9. minimal:  Prevent sdk and headers from being installed
            10. pgo: Add support for profile-guided optimization using
                gcc-4.5, for faster binaries. This option will double
                the compile time.
            11. startup-notification: Enable application startup event
                feedback mechanism
            12. system-sqlite: Use the system-wide dev-db/sqlite
                installation with secure-delete enabled
            13. webm: Use system media-libs/libvpx for HTML5 WebM video
                support.
            14. wifi: Enable wireless network functions
        
        Looking at the TBB build script this the combination of USE
        flags to make as similar as possible to the official release
        (minus means the USE flag is disabled): -pgo -debug -bindist
        -custom-optimization -crashreporter webm ipc system-sqlite
        -wifi. I'm planning to remove the possibility to configure these
        use flags.
        Do you agree? For further details you can take a look at the
        ebuild [1], which should be understandable. Take a look also at
        the current ebuild for TBB [2].
        
Is there something else we should pay attention to in the build process
or in general?

Thanks in advance,
Alessandro Di Federico

[1] http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/firefox/firefox-10.0.6.ebuild?view=markup
  http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/eclass/mozconfig-3.eclass?view=markup
 [2] http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/torbrowser/torbrowser-13.0-r1.ebuild?view=markup


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120812191120</emailId><senderName>Mansour Moufid</senderName><senderEmail>mansourmoufid@gmail.com</senderEmail><timestampReceived>2012-08-12 19:11:20-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On 2012-08-12, at 1:21 PM, Alessandro Di Federico wrote:

&gt; Hi, I'm trying to put up an ebuild for the Tor Browser Bundle for
&gt; Gentoo. As you may know an ebuild is a script which automates the build
&gt; of a certain application. We already have something in Portage [2] (the
&gt; official ebuild repository) but it's in an experimental state and we
&gt; want to make sure that it's something useful and not harmful.

Portage offers no authentication and no confidentiality.

So unless you really trust your mirror(s) -- and every node between the
two of you -- you're better off downloading TBB from the Tor Project
website.

Mansour

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120812193638</emailId><senderName>Alessandro Di Federico</senderName><senderEmail>ale@clearmind.me</senderEmail><timestampReceived>2012-08-12 19:36:38-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On Sun, 2012-08-12 at 15:11 -0400, Mansour Moufid wrote:
&gt; Portage offers no authentication and no confidentiality.

Each file has a SHA-256, SHA-512 and Whirlpool hash associated. This
hashes are in Portage, and if you're a security-aware user (as most of
Gentoo users are) you can get it in a secure way, which means
PGP-signed.

Take a look at the handbook:
http://www.gentoo.org/doc/en/handbook/2008.0/handbook-x86.xml?part=2&amp;chap=3#doc_chap6

Confidentiality is not required, because currently we distribute TBB
patches with portage, so you get them along with all the other Portage
updates as all the Gentoo users. The rest looks like a normal Firefox
installation. The Tor client is fetched through HTTPS.

Ale

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120812205623</emailId><senderName>Mansour Moufid</senderName><senderEmail>mansourmoufid@gmail.com</senderEmail><timestampReceived>2012-08-12 20:56:23-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On 2012-08-12, at 3:36 PM, Alessandro Di Federico wrote:

&gt; On Sun, 2012-08-12 at 15:11 -0400, Mansour Moufid wrote:
&gt;&gt; Portage offers no authentication and no confidentiality.
&gt; 
&gt; Each file has a SHA-256, SHA-512 and Whirlpool hash associated. This
&gt; hashes are in Portage, and if you're a security-aware user (as most of
&gt; Gentoo users are) you can get it in a secure way, which means
&gt; PGP-signed.
&gt; 
&gt; Take a look at the handbook:
&gt; http://www.gentoo.org/doc/en/handbook/2008.0/handbook-x86.xml?part=2&amp;chap=3#doc_chap6

Portage uses rsync to get the ebuild and Manifest (signed hashes) from
mirrors, which, along with anyone in between, can send you bogus ebuilds
with whatever Manifest.

Even with webrsync you still have to trust the mirror(s), and then the
Gentoo release infrastructure...

Getting TBB from tp.o with Chrome is end-to-end and secure.

Anyway, good luck.

Mansour

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120812222842</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2012-08-12 22:28:42-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

[Attachment #2 (multipart/alternative)]


On Sun, Aug 12, 2012 at 1:21 PM, Alessandro Di Federico &lt;ale@clearmind.me&gt;wrote:

&gt; Hi, I'm trying to put up an ebuild for the Tor Browser Bundle for
&gt; Gentoo. As you may know an ebuild is a script which automates the build
&gt; of a certain application. We already have something in Portage [2] (the
&gt; official ebuild repository) but it's in an experimental state and we
&gt; want to make sure that it's something useful and not harmful.
&gt; 
&gt; So I'd like to know your opinion about the idea as whole (is it a good
&gt; idea at all to build by yourself the TBB instead of using the official
&gt; one?) and what could be the main problems arising in such an operation.
&gt; So:
&gt; 
&gt; 1. Can you name a list of tools to fingerprint a browser so we can
&gt; compare our ebuild with the official TBB?
&gt; 2. Which version should we use? We were planning to offer both the
&gt; current official release (even if TBB for Linux is currently in
&gt; beta) and something more recent, even if AFAIK this would be for
&gt; testing purpose only and could weaken anonymity and
&gt; untrackability.
&gt; 3. We plan to use the system version of the Tor client, in my
&gt; understanding it should not be a problem to use a Tor client
&gt; with a version different from the one officially released, but I
&gt; could be wrong. We also plan to exclude vidalia (and the
&gt; "0015-Make-Tor-Browser-exit-when-not-launched-from-Vidalia.patch"
&gt; patch).
&gt; 4. We have a different ebuild for the Firefox profile directory (so
&gt; if it's not installed the HTTPS Everywhere plugin won't be
&gt; installed), is this a good idea or would it be better to
&gt; integrate them?
&gt; 5. Gentoo build system offers USE flags, which are options that
&gt; allow to customize the way the package is built. These are the
&gt; USE flag available for the standard Firefox ebuild in Gentoo,
&gt; which is the base for our build of the TBB:
&gt; 1. alsa: Adds support for media-libs/alsa-lib (Advanced
&gt; Linux Sound Architecture)
&gt; 2. bindist: Disable official Firefox branding (icons, name)
&gt; which are not binary-redistributable according to
&gt; upstream.
&gt; 3. custom-cflags: Build with user-specified CFLAGS
&gt; (unsupported)
&gt; 4. custom-optimization: Fine-tune custom compiler
&gt; optimizations, setting this is not recommended.
&gt; 5. dbus: Enable dbus support for anything that needs it
&gt; (gpsd, gnomemeeting, etc)
&gt; 6. debug: Enable extra debug codepaths, like asserts and
&gt; extra output. If you want to get meaningful backtraces
&gt; see http://www.gentoo.org/proj/en/qa/backtraces.xml
&gt; 7. ipc: Use inter-process communication between tabs and
&gt; plugins. Allows for greater stability in case of plugin
&gt; crashes
&gt; 8. libnotify: Enable desktop notification support
&gt; 9. minimal:  Prevent sdk and headers from being installed
&gt; 10. pgo: Add support for profile-guided optimization using
&gt; gcc-4.5, for faster binaries. This option will double
&gt; the compile time.
&gt; 11. startup-notification: Enable application startup event
&gt; feedback mechanism
&gt; 12. system-sqlite: Use the system-wide dev-db/sqlite
&gt; installation with secure-delete enabled
&gt; 13. webm: Use system media-libs/libvpx for HTML5 WebM video
&gt; support.
&gt; 14. wifi: Enable wireless network functions
&gt; 
&gt; Looking at the TBB build script this the combination of USE
&gt; flags to make as similar as possible to the official release
&gt; (minus means the USE flag is disabled): -pgo -debug -bindist
&gt; -custom-optimization -crashreporter webm ipc system-sqlite
&gt; -wifi. I'm planning to remove the possibility to configure these
&gt; use flags.
&gt; Do you agree? For further details you can take a look at the
&gt; ebuild [1], which should be understandable. Take a look also at
&gt; the current ebuild for TBB [2].
&gt; 
&gt; Is there something else we should pay attention to in the build process
&gt; or in general?
&gt; 
&gt; Thanks in advance,
&gt; Alessandro Di Federico
&gt; 
&gt; [1]
&gt; http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/firefox/firefox-10.0.6.ebuild?view=markup
&gt;  
&gt; http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/eclass/mozconfig-3.eclass?view=markup
&gt;  [2]
&gt; http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/torbrowser/torbrowser-13.0-r1.ebuild?view=markup
&gt;  
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

Hi Alessandro,

After thinking about this for a little bit, here's my 2 cents. =)

1) The ebuild is specifically for building the Tor browser, not the bundle.
The package name of the ebuild states this but the email mentions the
bundle.
2) One of the best reasons for using the bundle is that it is
self-contained. If you want to use the bundle for anonymity you can easily
do this and then discard it will little trace. This becomes much more
difficult with a system-level install.
3) On the other hand, I see no reason to restrict a security-conscious user
from using a more secure browser, as long as they understand the
trade-offs. However, torprofile should not be an optional USE flag. Only
adding some patches from upstream does not make it the Torbrowser.
4) Given 3), is there a reason Tor is not at least an optional RDEPEND for
torbrowser via a USE flag (or another way)?
5) If you did/do intend to create an ebuild for the TBB and not just the
browser, it should provide the exact same experience as if the user
downloaded it from torproject.org. I think this should include Vidalia
launching Torbrowser once the network is configured.
6) Make sure the ebuild references Tor and not TOR

However, I think because of 1) it's difficult to provide a little better
feedback. Is your goal to only provide an alternative browser or are you
attempting to provide the full bundle?

Thanks,
- Matt


[Attachment #5 (text/html)]

&lt;div class="gmail_quote"&gt;On Sun, Aug 12, 2012 at 1:21 PM, Alessandro Di Federico \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:ale@clearmind.me" \
target="_blank"&gt;ale@clearmind.me&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;


Hi, I'm trying to put up an ebuild for the Tor Browser Bundle for&lt;br&gt;
Gentoo. As you may know an ebuild is a script which automates the build&lt;br&gt;
of a certain application. We already have something in Portage [2] (the&lt;br&gt;
official ebuild repository) but it's in an experimental state and we&lt;br&gt;
want to make sure that it's something useful and not harmful.&lt;br&gt;
&lt;br&gt;
So I'd like to know your opinion about the idea as whole (is it a good&lt;br&gt;
idea at all to build by yourself the TBB instead of using the official&lt;br&gt;
one?) and what could be the main problems arising in such an operation.&lt;br&gt;
So:&lt;br&gt;
&lt;br&gt;
     1. Can you name a list of tools to fingerprint a browser so we can&lt;br&gt;
        compare our ebuild with the official TBB?&lt;br&gt;
     2. Which version should we use? We were planning to offer both the&lt;br&gt;
        current official release (even if TBB for Linux is currently in&lt;br&gt;
        beta) and something more recent, even if AFAIK this would be for&lt;br&gt;
        testing purpose only and could weaken anonymity and&lt;br&gt;
        untrackability.&lt;br&gt;
     3. We plan to use the system version of the Tor client, in my&lt;br&gt;
        understanding it should not be a problem to use a Tor client&lt;br&gt;
        with a version different from the one officially released, but I&lt;br&gt;
        could be wrong. We also plan to exclude vidalia (and the&lt;br&gt;
        "0015-Make-Tor-Browser-exit-when-not-launched-from-Vidalia.patch" \
                patch).&lt;br&gt;
     4. We have a different ebuild for the Firefox profile directory (so&lt;br&gt;
        if it's not installed the HTTPS Everywhere plugin won't be&lt;br&gt;
        installed), is this a good idea or would it be better to&lt;br&gt;
        integrate them?&lt;br&gt;
     5. Gentoo build system offers USE flags, which are options that&lt;br&gt;
        allow to customize the way the package is built. These are the&lt;br&gt;
        USE flag available for the standard Firefox ebuild in Gentoo,&lt;br&gt;
        which is the base for our build of the TBB:&lt;br&gt;
             1. alsa: Adds support for media-libs/alsa-lib (Advanced&lt;br&gt;
                Linux Sound Architecture)&lt;br&gt;
             2. bindist: Disable official Firefox branding (icons, name)&lt;br&gt;
                which are not binary-redistributable according to&lt;br&gt;
                upstream.&lt;br&gt;
             3. custom-cflags: Build with user-specified CFLAGS&lt;br&gt;
                (unsupported)&lt;br&gt;
             4. custom-optimization: Fine-tune custom compiler&lt;br&gt;
                optimizations, setting this is not recommended.&lt;br&gt;
             5. dbus: Enable dbus support for anything that needs it&lt;br&gt;
                (gpsd, gnomemeeting, etc)&lt;br&gt;
             6. debug: Enable extra debug codepaths, like asserts and&lt;br&gt;
                extra output. If you want to get meaningful backtraces&lt;br&gt;
                see &lt;a href="http://www.gentoo.org/proj/en/qa/backtraces.xml" \
target="_blank"&gt;http://www.gentoo.org/proj/en/qa/backtraces.xml&lt;/a&gt;&lt;br&gt;  7. ipc: Use \
                inter-process communication between tabs and&lt;br&gt;
                plugins. Allows for greater stability in case of plugin&lt;br&gt;
                crashes&lt;br&gt;
             8. libnotify: Enable desktop notification support&lt;br&gt;
             9. minimal:  Prevent sdk and headers from being installed&lt;br&gt;
            10. pgo: Add support for profile-guided optimization using&lt;br&gt;
                gcc-4.5, for faster binaries. This option will double&lt;br&gt;
                the compile time.&lt;br&gt;
            11. startup-notification: Enable application startup event&lt;br&gt;
                feedback mechanism&lt;br&gt;
            12. system-sqlite: Use the system-wide dev-db/sqlite&lt;br&gt;
                installation with secure-delete enabled&lt;br&gt;
            13. webm: Use system media-libs/libvpx for HTML5 WebM video&lt;br&gt;
                support.&lt;br&gt;
            14. wifi: Enable wireless network functions&lt;br&gt;
&lt;br&gt;
        Looking at the TBB build script this the combination of USE&lt;br&gt;
        flags to make as similar as possible to the official release&lt;br&gt;
        (minus means the USE flag is disabled): -pgo -debug -bindist&lt;br&gt;
        -custom-optimization -crashreporter webm ipc system-sqlite&lt;br&gt;
        -wifi. I'm planning to remove the possibility to configure these&lt;br&gt;
        use flags.&lt;br&gt;
        Do you agree? For further details you can take a look at the&lt;br&gt;
        ebuild [1], which should be understandable. Take a look also at&lt;br&gt;
        the current ebuild for TBB [2].&lt;br&gt;
&lt;br&gt;
Is there something else we should pay attention to in the build process&lt;br&gt;
or in general?&lt;br&gt;
&lt;br&gt;
Thanks in advance,&lt;br&gt;
Alessandro Di Federico&lt;br&gt;
&lt;br&gt;
[1] &lt;a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/firefox/firefox-10.0.6.ebuild?view=markup" \
target="_blank"&gt;http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/firefox/firefox-10.0.6.ebuild?view=markup&lt;/a&gt;&lt;br&gt;




    &lt;a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/eclass/mozconfig-3.eclass?view=markup" \
target="_blank"&gt;http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/eclass/mozconfig-3.eclass?view=markup&lt;/a&gt;&lt;br&gt;




[2] &lt;a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/torbrowser/torbrowser-13.0-r1.ebuild?view=markup" \
target="_blank"&gt;http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/torbrowser/torbrowser-13.0-r1.ebuild?view=markup&lt;/a&gt;&lt;br&gt;




&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Hi Alessandro,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;After thinking \
about this for a little bit, here's my 2 cents. =)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) \
The ebuild is specifically for building the Tor browser, not the bundle. The package \
name of the ebuild states this but the email mentions the bundle.&lt;/div&gt;


&lt;div&gt;2) One of the best reasons for using the bundle is that it is self-contained. If \
you want to use the bundle for anonymity you can easily do this and then discard it \
will little trace. This becomes much more difficult with a system-level \
install.&lt;/div&gt;


&lt;div&gt;3) On the other hand, I see no reason to restrict a security-conscious user from \
using a more secure browser, as long as they understand the trade-offs. However, \
torprofile should not be an optional USE flag. Only adding some patches from upstream \
does not make it the Torbrowser.&lt;/div&gt;

&lt;div&gt;4) Given 3), is there a reason Tor is not at least an optional RDEPEND for \
torbrowser via a USE flag (or another way)?&lt;/div&gt;&lt;div&gt;5) If you did/do intend to \
create an ebuild for the TBB and not just the browser, it should provide the exact \
same experience as if the user downloaded it from &lt;a \
href="http://torproject.org"&gt;torproject.org&lt;/a&gt;. I think this should include Vidalia \
launching Torbrowser once the network is configured.&lt;/div&gt;

&lt;div&gt;6) Make sure the ebuild references Tor and not \
TOR&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;However, I think because of 1) it's difficult to \
provide a little better feedback. Is your goal to only provide an alternative browser \
or are you attempting to provide the full bundle?&lt;br&gt;

&lt;br&gt;Thanks,&lt;br clear="all"&gt;&lt;div&gt;- Matt&lt;/div&gt;
&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120814072921</emailId><senderName>Alessandro Di Federico</senderName><senderEmail>ale@clearmind.me</senderEmail><timestampReceived>2012-08-14 07:29:21-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On Sun, 2012-08-12 at 18:28 -0400, Matthew Finkel wrote:
&gt; After thinking about this for a little bit, here's my 2 cents. =) 
&gt; 
&gt; 1) The ebuild is specifically for building the Tor browser, not the
&gt; bundle. The package name of the ebuild states this but the email
&gt; mentions the bundle.

You're right, we want to build the Tor browser, not the TBB.

&gt; 2) One of the best reasons for using the bundle is that it is
&gt; self-contained. If you want to use the bundle for anonymity you can
&gt; easily do this and then discard it will little trace. This becomes
&gt; much more difficult with a system-level install. 

This is true, but in some scenarios (e.g. full disk encryption) having a
system Tor Browser, could allow to have more easily sophisticated
configurations. Using Tor Browser could even be a company policy in
certain cases. Having a system Tor Browser would offer some advantages.

&gt; 3) On the other hand, I see no reason to restrict a security-conscious
&gt; user from using a more secure browser, as long as they understand the
&gt; trade-offs. However, torprofile should not be an optional USE flag.
&gt; Only adding some patches from upstream does not make it the
&gt; Torbrowser.

Right, what we're willing to offer to the user is a web client which
looks exactly the same as the Tor Browser to the web server he's
connecting to, but leave all the rest easily configurable. Gentoo
philosophy focuses a lot on the freedom of choice.
The point now is be sure that our Tor Browser looks exactly like the
official one, therefore all my questions.

&gt; 4) Given 3), is there a reason Tor is not at least an optional RDEPEND
&gt; for torbrowser via a USE flag (or another way)? 5) If you did/do
&gt; intend to create an ebuild for the TBB and not just the browser, it
&gt; should provide the exact same experience as if the user downloaded it
&gt; from torproject.org. I think this should include Vidalia launching
&gt; Torbrowser once the network is configured. 6) Make sure the ebuild
&gt; references Tor and not TOR 

I think we'll require Tor and integrate the Tor Browser profile.

Thanks for your answer,
Ale

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120826213505</emailId><senderName>julian</senderName><senderEmail>julian.ospald@googlemail.com</senderEmail><timestampReceived>2012-08-26 21:35:05-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

12 Aug 22:56 Mansour Moufid:
&gt; Even with webrsync you still have to trust the mirror(s), and then
&gt; the Gentoo release infrastructure...

Forgive me my bluntness, but how is that different from trusting you?

The methods are reliable, being Manifests and webrsync, the unknown
variable is the trust you give the ones providing you with ebuilds.
But those are identified by gpg on both levels.

And the TBB is even worse, cause I also have to trust what's in the
binaries. There is no way to tell what was actually compiled there. It
could be something different than the sources on the git server.


13 Aug 00:28 Matthew Finkel:
&gt; 4) Given 3), is there a reason Tor is not at least an optional
&gt; RDEPEND for torbrowser via a USE flag (or another way)?

There are no optional runtime-only dependencies in gentoo, this could
change with GLEP 62.
http://www.gentoo.org/proj/en/glep/glep-0062.html

I could however tell the user after compilation that he might want to
use tor with this...erm... but I thought that's obvious. The fact that
it's not forced for RDEPEND is simply, because there are setups where
this is not wanted/required.


13 Aug 00:28 Matthew Finkel:
&gt; 5) If you did/do intend to create an ebuild for the TBB and not
&gt; just the browser, it should provide the exact same experience as if
&gt; the user downloaded it from torproject.org. I think this should
&gt; include Vidalia launching Torbrowser once the network is
&gt; configured.

Definitely not. The intention is not to provide an all-in-one experience.
I already had those arguments with the guys from #tor

All I am interested in is the question about the firefox build-time
configuration and if different build-time configurations could lead to
vulnerability in the tor network. If there is the slightest doubt
about that, I will remove this ebuild at once or fix it.


- -
hasufell

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.19 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEcBAEBAgAGBQJQOpaJAAoJEFpvPKfnPDWzpI4H/igZDuVGyjdKEl9SvvV9gnY0
72esQTiHfx00gO42lOguutwBX54DV/S7HggEZy1P9UIi5gfJckrFKsM3Y9oD9tUX
X9EZA6WEU3F90MD0gFFxH2jcoEbm85UfjJkEwI2Hy1+lEOPAZqzBV1F0sBE/Xd/U
WwIgAHy8jKsTI1RTIW8r4VOoexifCllWvjbKiDNxeeixTQhwhvrCWnbqTI0WKR95
Er6LNwwYNh+Ugu7s6OwR7o3cUAuOXt3LUjf45bEGAgPF+lrqsXrfB9N5ANu+3177
94sxHgzYkRSsORjjl678/tZFfyp1jagX1FcT6O1dd/J4sHqfRdyZfy29d0DH/e0=
=gCI5
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120827172916</emailId><senderName>Mansour Moufid</senderName><senderEmail>mansourmoufid@gmail.com</senderEmail><timestampReceived>2012-08-27 17:29:16-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On 2012-08-26, at 5:35 PM, julian wrote:

&gt; 12 Aug 22:56 Mansour Moufid:
&gt;&gt; Even with webrsync you still have to trust the mirror(s), and then
&gt;&gt; the Gentoo release infrastructure...
&gt; 
&gt; Forgive me my bluntness, but how is that different from trusting you?

I have nothing to do with Tor.

&gt; And the TBB is even worse, cause I also have to trust what's in the
&gt; binaries. There is no way to tell what was actually compiled there. It
&gt; could be something different than the sources on the git server.

OK...

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120827182609</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2012-08-27 18:26:09-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

On Sun, Aug 26, 2012 at 5:35 PM, julian &lt;julian.ospald@googlemail.com&gt; wrote:

&gt; 13 Aug 00:28 Matthew Finkel:
&gt;&gt; 4) Given 3), is there a reason Tor is not at least an optional
&gt;&gt; RDEPEND for torbrowser via a USE flag (or another way)?
&gt;
&gt; There are no optional runtime-only dependencies in gentoo, this could
&gt; change with GLEP 62.
&gt; http://www.gentoo.org/proj/en/glep/glep-0062.html
&gt;
&gt; I could however tell the user after compilation that he might want to
&gt; use tor with this...erm... but I thought that's obvious. The fact that
&gt; it's not forced for RDEPEND is simply, because there are setups where
&gt; this is not wanted/required.
&gt;

Ah, I apologize, I thought having optional runtime deps were possible.
I also agree that is should be obvious but I've learned to err on the
side of caution, if possible.

&gt;
&gt; 13 Aug 00:28 Matthew Finkel:
&gt;&gt; 5) If you did/do intend to create an ebuild for the TBB and not
&gt;&gt; just the browser, it should provide the exact same experience as if
&gt;&gt; the user downloaded it from torproject.org. I think this should
&gt;&gt; include Vidalia launching Torbrowser once the network is
&gt;&gt; configured.
&gt;
&gt; Definitely not. The intention is not to provide an all-in-one experience.
&gt; I already had those arguments with the guys from #tor
&gt;

Okay, so you want to add the TorBrowser to portage so that a user can
emerge all of the components of the TBB and can use them as he/she
sees fit, correct?

&gt; All I am interested in is the question about the firefox build-time
&gt; configuration and if different build-time configurations could lead to
&gt; vulnerability in the tor network. If there is the slightest doubt
&gt; about that, I will remove this ebuild at once or fix it.

I'm not a browser dev, but I don't think this shouldn't be an issue.
As long as the ebuild uses all of the security patches and extensions,
it shouldn't be a problem. Also, if any vulnerabilities are introduced
by this ebuild, it would only harm the user's anonymity and should not
have an impact on the network.

&gt;
&gt; - -
&gt; hasufell

- Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809062925</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-09 06:29:25-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

Hi Mike,

On 8/8/12 8:13 PM, Mike Perry wrote:
&gt; Thus spake Karsten Loesing (karsten@torproject.org):
&gt;&gt; https://research.torproject.org/techreports.html
&gt;&gt;
&gt;&gt; What other reports are we missing?
&gt; 
&gt; Since HotPETS doesn't count as "publishing" perhaps this should be
&gt; listed as a tech report:
&gt; http://fscked.org/talks/TorFlow-HotPETS-final.pdf

I agree.  If it counted as "publishing", we'd put it on anonbib.  But
since that's not the case, let's put it on our tech reports list, or
nobody will find it.

The only thing I'm worried about is that we shouldn't add reports
published by other organizations (here: HotPETs) to the Tor Tech Reports
list.  I'd rather want us to turn your HotPETs report into a Tor Tech
Report with identical content and put that on the list.

How about we put the LaTeX sources in tech-reports.git, change them to
use the new tech report template, assign a report number, and add a
footnote saying "This report was presented at 2nd Hot Topics in Privacy
Enhancing Technologies (HotPETs 2009), Seattle, WA, USA, August 2009."?
 Then people can decide if they rather want to cite our tech report or
the HotPETs one.

Happy to do or help with the conversion if you tell me where your
sources are.

&gt; I'm not sure when I'd actually have the time to write it up (let alone
&gt; do the network scanning analysis), but the output of
&gt; https://trac.torproject.org/projects/tor/ticket/6135 *could* be one, I
&gt; guess.

Sure!  If you write it up, I'll help with the formatting and all that.
Also feel free to clone tech-reports.git, create a subdirectory in 2012
(or in whichever year you think your report will be ready ;) ), and
start using the template directly.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809130348</emailId><senderName>Paul Syverson</senderName><senderEmail>syverson@itd.nrl.navy.mil</senderEmail><timestampReceived>2012-08-09 13:03:48-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

On Thu, Aug 09, 2012 at 08:29:25AM +0200, Karsten Loesing wrote:
&gt; Hi Mike,
&gt; 
&gt; On 8/8/12 8:13 PM, Mike Perry wrote:
&gt; &gt; 
&gt; &gt; Since HotPETS doesn't count as "publishing" perhaps this should be
&gt; &gt; listed as a tech report:
&gt; &gt; http://fscked.org/talks/TorFlow-HotPETS-final.pdf
&gt; 
&gt; I agree.  If it counted as "publishing", we'd put it on anonbib.  But
&gt; since that's not the case, let's put it on our tech reports list, or
&gt; nobody will find it.

Wait. What!? Since when did anonbib get restricted to what is
"published"?  Paul Karger's MITRE tech report is there. I mean Wei
Dai's pipenet mailinglist post is there! There are probabily others. I
just mentioned two I knew off the top of my head. I assume that papers
are on anonbib because they've appeared somewhere that one can point
at consistently and they're relatively important, not because they are
"published". "Published" is a useful fiction I'll come back to, but
I don't see why anonbib has to be hamstrung by it.

&gt; 
&gt; The only thing I'm worried about is that we shouldn't add reports
&gt; published by other organizations (here: HotPETs) to the Tor Tech Reports
&gt; list.  I'd rather want us to turn your HotPETs report into a Tor Tech
&gt; Report with identical content and put that on the list.


HotPETs being labeled "not published" is just one of the many never
actually solid but increasingly shaky distinctions trying to cope with
the overloaded semantics and quickly evolving meaning of 'published',
wherein 'published', 'refereed', 'archived', 'produced by a recognized
publisher/organization', 'made available for purchase', etc. were all
taken as synonymous (except when they weren't). Most academic research
venues in computer security don't accept things that are already
published or under consideration to be published. (For convenience I
will completely pretend journals don't exist in this, which for most
of science is like saying you'll pretend published research does not
exist.)  But presenting the work at a workshop wouldn't be
publication, even if presented works were printed out and made
available to attendees. Putting out a tech report wasn't generally
viewed as published (except for patent purposes (which was one of the
motivations for places to have tech reports) but then so did
presentation at a public meeting---now define 'public', how many
epicycles are we up to?).  Now jump forward a few decades or so and
all of these are on the web. How can you tell if some web page talking
about a meeting and providing links to pdfs of what was presented
there (possibly produced before or afterwards or both) counts as
published?  HotPETs wants to get half-baked innovative stuff, not just
the work after all the proofs have been done, full implementation and
simulations run, whatever. (It also _will_ take stuff that has been
"published" elsewhere.) But if it counted as published, authors
couldn't submit it to a venue that does count once the details were a
bit more worked out (and counts in the eyes of tenure committees,
funding agencies, etc. in a way HotPETs does not). So, HotPETs labels
its works as not published because you need to tell people which side
of this nonexistent line the work is on, so they know what to do next.

&gt; 
&gt; How about we put the LaTeX sources in tech-reports.git, change them to
&gt; use the new tech report template, assign a report number, and add a
&gt; footnote saying "This report was presented at 2nd Hot Topics in Privacy
&gt; Enhancing Technologies (HotPETs 2009), Seattle, WA, USA, August 2009."?
&gt;  Then people can decide if they rather want to cite our tech report or
&gt; the HotPETs one.

This is pretty standard for tech reports at many universities,
organizations, etc. Also I think, stuff on arxiv.

aloha,
Paul
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120809141156</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-09 14:11:56-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

Hi Paul,

On 8/9/12 3:03 PM, Paul Syverson wrote:
&gt; On Thu, Aug 09, 2012 at 08:29:25AM +0200, Karsten Loesing wrote:
&gt;&gt; On 8/8/12 8:13 PM, Mike Perry wrote:
&gt;&gt;&gt; Since HotPETS doesn't count as "publishing" perhaps this should be
&gt;&gt;&gt; listed as a tech report:
&gt;&gt;&gt; http://fscked.org/talks/TorFlow-HotPETS-final.pdf
&gt;&gt;
&gt;&gt; I agree.  If it counted as "publishing", we'd put it on anonbib.  But
&gt;&gt; since that's not the case, let's put it on our tech reports list, or
&gt;&gt; nobody will find it.
&gt; 
&gt; Wait. What!? Since when did anonbib get restricted to what is
&gt; "published"?  [...]

Ah, sorry for basing my statement above on an assumption so carelessly.
 I didn't really look whether there are only "published" papers in
anonbib, or other stuff too.  I just assumed that, and turns out that
assumption was wrong.

&gt;&gt; How about we put the LaTeX sources in tech-reports.git, change them to
&gt;&gt; use the new tech report template, assign a report number, and add a
&gt;&gt; footnote saying "This report was presented at 2nd Hot Topics in Privacy
&gt;&gt; Enhancing Technologies (HotPETs 2009), Seattle, WA, USA, August 2009."?
&gt;&gt; Then people can decide if they rather want to cite our tech report or
&gt;&gt; the HotPETs one.
&gt; 
&gt; This is pretty standard for tech reports at many universities,
&gt; organizations, etc. Also I think, stuff on arxiv.

Okay.  I think it makes sense here, regardless of whether HotPETs
reports are on anonbib or not.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120820090633</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-20 09:06:33-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

On 8/9/12 8:29 AM, Karsten Loesing wrote:
&gt; On 8/8/12 8:13 PM, Mike Perry wrote:
&gt;&gt; Since HotPETS doesn't count as "publishing" perhaps this should be
&gt;&gt; listed as a tech report:
&gt;&gt; http://fscked.org/talks/TorFlow-HotPETS-final.pdf
&gt; 
&gt; [...]
&gt;
&gt; How about we put the LaTeX sources in tech-reports.git, change them to
&gt; use the new tech report template, assign a report number, and add a
&gt; footnote saying "This report was presented at 2nd Hot Topics in Privacy
&gt; Enhancing Technologies (HotPETs 2009), Seattle, WA, USA, August 2009."?
&gt; Then people can decide if they rather want to cite our tech report or
&gt; the HotPETs one.
&gt; 
&gt; Happy to do or help with the conversion if you tell me where your
&gt; sources are.

So, what do you think?  Still happy to help. :)

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120817180730</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-08-17 18:07:30-0400</timestampReceived><subject>Re: [tor-dev] Tor on IPv6 roadmap and status page</subject><body>

On 2012-08-16 22:45, Linus Nordberg wrote:
&gt; Hi,
&gt; 
&gt; The roadmaps/Tor/IPv6 [1] wiki page has been started with the goal of
&gt; communicating the status of the work with Tor on IPv6.
&gt; 
&gt; Additionally, searching for Trac tickets with the keyword "ipv6" [2]
&gt; might give a picture of what's going on.
&gt; 
&gt; Asking here or highlighting ln5 on #tor-dev is of course another
&gt; perfectly fine option.
&gt; 
&gt; [1] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6 
&gt; [2] https://trac.torproject.org/projects/tor/query?keywords=~ipv6

I do not see a 'how to help with testing' ticket/description yet.

As such, how can we help with testing? ;)

Greets,
 Jeroen


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120819115334</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-08-19 11:53:34-0400</timestampReceived><subject>Re: [tor-dev] Tor on IPv6 roadmap and status page</subject><body>

Jeroen Massar &lt;jeroen@unfix.org&gt; wrote
Fri, 17 Aug 2012 20:07:30 +0200:

| &gt; [1] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6
| &gt; [2] https://trac.torproject.org/projects/tor/query?keywords=~ipv6
| 
| I do not see a 'how to help with testing' ticket/description yet.

I've added a section on how to help testing to
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6 .

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120826075011</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-08-26 07:50:11-0400</timestampReceived><subject>Re: [tor-dev] Tor on IPv6 roadmap and status page</subject><body>

On Thu, 16 Aug 2012 22:45:47 +0000, Linus Nordberg wrote:
...
&gt; The roadmaps/Tor/IPv6 [1] wiki page has been started with the goal of
&gt; communicating the status of the work with Tor on IPv6.

Hmm, is there any thought of allowing IPv6 addresses for accessing
hidden services? Or do you expect it to always be 127.0.0.1 anyway?

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120822070121</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-08-22 07:01:21-0400</timestampReceived><subject>[tor-dev] [ooniprobe-dev] Summary of OONI hackfest</subject><body>

[Attachment #2 (multipart/alternative)]


We had a mini hackfest at noisebridge on OONI and this thread is to 
summarize what we discussed.

mct: feel free to add things from your notes that are not detailed here.

One of the problems that we mostly focused our attention on was how to 
detect censorship on HTTP when the user is presented with a block page. 
The reason for focusing on this is that censorship over HTTP is the most 
prevalent form.

# Detecting censorship in web sites

Detecting that the presented web page is not the expected site, but is a 
censorship page turns out to be a non trivial task, especially when you 
are dealing with web pages that have dynamic content. This problem is 
detailed in this trac ticket: 
https://trac.torproject.org/projects/tor/ticket/6180.

We ended up dividing the possible approaches into two macro categories: 
Statistical and Heuristic [1]

One of the properties we would like our classifier to have is that that 
a user should be able to detect that the presented page is the block 
page by just having a copy of OONI and some data that can be given to 
them over a non censored channel (sneakernet for example).

## DOMClass, a eigenvalue based statistical classifier

What we ended up implementing is a classifier that considers the DOM 
structure of the web page. We can easily build such a database of the 
DOM structure features of the websites we are interested in analyzing 
and ship these to users.

This is how the algorithm works:

       This classifier uses the DOM structure of a website to determine 
how similar
       the two sites are.
       The procedure we use is the following:
           * First we parse all the DOM tree of the web page and we 
build a list of
             TAG parent child relationships (ex. 
&lt;html&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&lt;c&gt;&lt;/c&gt;&lt;/html&gt; =&gt;
             (html, a), (a, b), (html, c)).

           * We then use this information to build a matrix (M) where 
m[i][j] = P(of
             transitioning from tag[i] to tag[j]). If tag[i] does not 
exists P() = 0.
             Note: M is a square matrix that is number_of_tags wide.

           * We then calculate the eigenvectors (v_i) and eigenvalues 
(e) of M.

           * The corelation between page A and B is given via this formula:
             correlation = dot_product(e_A, e_B), where e_A and e_B are
             resepectively the eigenvalues for the probability matrix A 
and the
             probability matrix B.

You will note that the Matrix we are computing eigenvalues for somewhat 
resembles a Markov model for transitions between DOM element X to Y.

This algorithm appears to work pretty well even on highly dynamic web 
sites (such as the homepage of news.google.com).

Problems with this algorithm:

* It does not take into account the global position of DOM elements or 
how deeply nested they are. (&lt;a&gt;&lt;b&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&lt;/b&gt;&lt;/a&gt; 
(a,b),(b,a),(a,b) is equivalent to &lt;a&gt;&lt;b&gt;&lt;a&gt;&lt;/a&gt;&lt;/b&gt;&lt;/a&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt; 
(a,b), (b,a), (a,b))

Looking into other possible solutions to this problem I took a look at 
algorithms that are used to compute graph similarity.

This problem could be solved by using an algorithm that calculates the 
maximum isomorphic subgraph, but this problem is NP-hard. [2]
I am unsure if the computation effort to use algorithms along these 
lines is worth while.

I can't seem to find the notes on the rest of the discussion, perhaps 
mct will integrate with this discussion.

- Art.

[1] https://trac.torproject.org/projects/tor/ticket/6180#comment:3
[2] 
&lt;http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem&gt;http://en.wikipedia.org/wiki/Maximum_common_subgraph_isomorphism_problem \



[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    We had a mini hackfest at noisebridge on OONI and this thread is to
    summarize what we discussed.&lt;br&gt;
    &lt;br&gt;
    mct: feel free to add things from your notes that are not detailed
    here.&lt;br&gt;
    &lt;br&gt;
    One of the problems that we mostly focused our attention on was how
    to detect censorship on HTTP when the user is presented with a block
    page. The reason for focusing on this is that censorship over HTTP
    is the most prevalent form.&lt;br&gt;
    &lt;br&gt;
    # Detecting censorship in web sites&lt;br&gt;
    &lt;br&gt;
    Detecting that the presented web page is not the expected site, but
    is a censorship page turns out to be a non trivial task, especially
    when you are dealing with web pages that have dynamic content. This
    problem is detailed in this trac ticket:
    &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/ticket/6180"&gt;https://trac.torproject.org/projects/tor/ticket/6180&lt;/a&gt;.&lt;br&gt;
  &lt;br&gt;
    We ended up dividing the possible approaches into two macro
    categories: Statistical and Heuristic [1]&lt;br&gt;
    &lt;br&gt;
    One of the properties we would like our classifier to have is that
    that a user should be able to detect that the presented page is the
    block page by just having a copy of OONI and some data that can be
    given to them over a non censored channel (sneakernet for example).&lt;br&gt;
    &lt;br&gt;
    ## DOMClass, a eigenvalue based statistical classifier&lt;br&gt;
    &lt;br&gt;
    What we ended up implementing is a classifier that considers the DOM
    structure of the web page. We can easily build such a database of
    the DOM structure features of the websites we are interested in
    analyzing and ship these to users. &lt;br&gt;
    &lt;br&gt;
    This is how the algorithm works:&lt;br&gt;
    &lt;br&gt;
          This classifier uses the DOM structure of a \
website to  determine how similar&lt;br&gt;
          the two sites are.&lt;br&gt;
          The procedure we use is the following:&lt;br&gt;
              * First we parse all the \
DOM tree of the web page and we  build a list of&lt;br&gt;
                TAG parent \
child relationships (ex.  \
&lt;html&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&lt;c&gt;&lt;/c&gt;&lt;/html&gt;  \
=&gt;&lt;br&gt;              (html, \
a), (a, b), (html, c)).&lt;br&gt;    &lt;br&gt;
              * We then use this \
information to build a matrix (M) where  m[i][j] = P(of&lt;br&gt;
                transitioning \
from tag[i] to tag[j]). If tag[i] does not  exists P() = 0.&lt;br&gt;
                Note: M is a \
square matrix that is number_of_tags wide.&lt;br&gt;    &lt;br&gt;
              * We then calculate the \
eigenvectors (v_i) and eigenvalues  (e) of M.&lt;br&gt;
      &lt;br&gt;
              * The corelation between \
page A and B is given via this  formula:&lt;br&gt;
                correlation = \
dot_product(e_A, e_B), where e_A and e_B  are&lt;br&gt;
                resepectively \
the eigenvalues for the probability matrix  A and the&lt;br&gt;
                probability \
matrix B.&lt;br&gt;  &lt;br&gt;
    You will note that the Matrix we are computing eigenvalues for
    somewhat resembles a Markov model for transitions between DOM
    element X to Y.&lt;br&gt;
    &lt;br&gt;
    This algorithm appears to work pretty well even on highly dynamic
    web sites (such as the homepage of news.google.com).&lt;br&gt;
    &lt;br&gt;
    Problems with this algorithm:&lt;br&gt;
    &lt;br&gt;
    * It does not take into account the global position of DOM elements
    or how deeply nested they are.
    (&lt;a&gt;&lt;b&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&lt;/b&gt;&lt;/a&gt;
    (a,b),(b,a),(a,b) is equivalent to
    &lt;a&gt;&lt;b&gt;&lt;a&gt;&lt;/a&gt;&lt;/b&gt;&lt;/a&gt;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;
  (a,b), (b,a), (a,b))&lt;br&gt;
    &lt;br&gt;
    Looking into other possible solutions to this problem I took a look
    at algorithms that are used to compute graph similarity.&lt;br&gt;
    &lt;br&gt;
    This problem could be solved by using an algorithm that calculates
    the maximum isomorphic subgraph, but this problem is NP-hard. [2]&lt;br&gt;
    I am unsure if the computation effort to use algorithms along these
    lines is worth while.&lt;br&gt;
    &lt;br&gt;
    I can't seem to find the notes on the rest of the discussion,
    perhaps mct will integrate with this discussion.&lt;br&gt;
    &lt;br&gt;
    - Art.&lt;br&gt;
    &lt;br&gt;
    [1] &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/ticket/6180#comment:3"&gt;https://trac.torproject.org/projects/tor/ticket/6180#comment:3&lt;/a&gt;&lt;br&gt;
  [2]
    &lt;meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1"&gt;
    &lt;a href="http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem"&gt;
      &lt;meta http-equiv="content-type" content="text/html;
        charset=ISO-8859-1"&gt;
    &lt;/a&gt;&lt;a
href="http://en.wikipedia.org/wiki/Maximum_common_subgraph_isomorphism_problem"&gt;http://en.wikipedia.org/wiki/Maximum_common_subgraph_isomorphism_problem&lt;/a&gt;
  &lt;meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1"&gt;
  &lt;/body&gt;
&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120822154439</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-08-22 15:44:39-0400</timestampReceived><subject>Re: [tor-dev] DNS(SEC) draft update</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 08/20/2012 02:43 AM, Mike Perry wrote:
&gt; Thus spake Ondrej Mikle (ondrej.mikle@gmail.com):
&gt; 
&gt;&gt; I've revised the DNS draft, attaching it. In section 4 there are some options
&gt;&gt; for integration with libunbound, but each of them requires some work with the
&gt;&gt; stock libunbound code.
&gt; 
&gt; I'm not a DNS expert, but I have a couple preliminary requests/questions.
&gt; 
&gt; First, can you provide a section in the proposal on the analysis of the
&gt; number of round trips over Tor for different request scenarios? If you
&gt; offload full DNS responsibility to the client, certain query behaviors
&gt; are going to be better than others with respect to the number of round
&gt; trips over Tor. We're going to want to minimize these round trips,
&gt; especially if we decide we want to rely on DNSsec/DANE for everything.
&gt; Clients may also want to use this information to try to intelligently
&gt; decide cases where we don't want to do full DNSsec queries and revert to
&gt; the oldstyle SOCKS4A.

Added section 8 to the draft with a "common" and "extreme" example. Validation
still would be done at both exit and client: client can't trust the AD bit from
exit and exit must implement own recursive resolver via libunbound as ISP's
resolvers often won't work with DNSSEC, the problem is usually in fetching DS
records.

&gt; Second (and related), is it totally insane to map some sort of magic IP
&gt; to "foward this query the local exit node resolver" so that the client
&gt; can easily get DNS(sec) perspectives from each exit node's resolver
&gt; caches? This might both minimize round trips for clients who don't want
&gt; to either hardcode 8.8.8.8 or do full recursive resolves against the
&gt; root servers. On the other hand, it might complicate query handling on
&gt; the exit side and also introduce weird cache/poisoning attacks?

It's actually quite interesting idea, though not sure how to map a local
127.0.0./8 IP to a specific exit. If the exit changes inbetween queries (new
circuit), should the client know somehow?

I also thought about "most lightweight" implementation which would just use ldns
library on the exit's side - client would employ the "magic IP" as forwarder for
local standalone unbound daemon. But it breaks on the inability of ISPs'
resolvers to fetch DS records mentioned above.

For the perspective it should be noted that many CDNs and load balancers use
short TTLs in the range 5-30, two subsequent queries may return different results.

Ondrej

["xxx-dns-dnssec.txt" (text/plain)]

Filename: xxx-dns-dnssec.txt
Title: Support for full DNS and DNSSEC resolution in Tor
Authors: Ondrej Mikle
Created: 4 February 2012
Modified: 19 August 2012
Status: Draft

0. Overview

  Adding support for any DNS query type to Tor, as well as DNSSEC support.

0.1. Motivation

  Many applications running over Tor need more than just resolving FQDN to
  IPv4 and vice versa. Sometimes to prevent DNS leaks the applications have to
  be hacked around to be supplied necessary data by hand (e.g. SRV records in
  XMPP). TLS connections will benefit from planned TLSA record that provides
  certificate pinning to avoid another Diginotar-like fiasco.
  
  DNSSEC is part of the DNS protocol and the most appropriate place for DNSSEC
  API would be probably in OS libraries (e.g. libc). However that will
  probably take time until it becomes widespread.

  On the Tor's side (as opposed to application's side), DNSSEC will provide
  protection against DNS cache-poisoning attacks (provided that exit is not
  malicious itself, but still reduces attack surface).

1. Design

1.1 New cells

  There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (we'll
  use DNS_BEGIN and DNS_RESPONSE for short below).

  DNS_BEGIN payload:

    DNS packet data (variable length)

  The DNS packet must be generated internally by libunbound to avoid
  fingerprinting users by differences in client resolvers' behavior.

  DNS_RESPONSE payload:
  
    total length (2 octets)
    data         (variable)
  
  Data contains the reply DNS packet or its part if packet would not fit into
  the cell. Total length describes length of complete response packet, thus
  one DNS_BEGIN may be answered by multiple DNS_RESPONSE cells.

  DNS_BEGIN must use a non-zero, distinct StreamID, corresponding DNS_RESPONSE
  will use the same StreamID. Similarly to RELAY_RESOLVE(D), no actual stream
  is created.

  AXFR and IXRF are not supported in this cell by design (see specialized tool
  below).

2. Interfaces to applications

  DNSPort evdns - existing implementation will be updated to use DNS_BEGIN.
  
3. Limitations on DNS query

  Query class is limited to IN (INTERNET) since the only other useful class
  CHAOS is practical for directly querying authoritative servers (OR in this
  case acts as a recursive resolver). Query for class other than IN will
  return REFUSED in the inner DNS packet.

  Multiple questions in a single packet are not supported and OR will respond
  with REFUSED as the DNS error code.

  All query RR types are allowed.

  [XXXX I originally thought about some exit policy like "basic RR types" and
  "all RRs", but managing such list in deployed nodes with extra directory
  flags outweighs the benefit. Maybe disallow ANY RR type? ]

  Client as well as OR MUST block attempts to resolve local RFC 1918, 4193,
  4291 adresses (PTR). REFUSED will be returned as DNS error code from OR.

  Request for special names (.onion, .exit, .noconnect) will return REFUSED.

4. Implementation notes

  Client will periodically purge incomplete DNS replies. Any unexpected
  DNS_RESPONSE will be dropped.

  AD flag must be zeroed out on client unless validation is performed.

  [XXXX libunbound lowlevel API, Tor+libunbound libevent loop

  libunbound doesn't publicly expose all the necessary parts of low-level API.
  It can return the received DNS packet, but not let you construct a packet
  and get it in wire-format, for example.

  Options I see:

  a) patch libunbound to be able feed wire-format DNS packets and add API to
  obtain constructed packets instead of sending over network

  b) replace bufferevents for sockets in unbound with something like
  libevent's paired bufferevents. This means that data extracted from
  DNS_RESPONSE/DNS_BEGIN cells would be fed directly to some evbuffers that
  would be picked up by libunbound. It could possibly result in avoiding
  background thread of libunbound's ub_resolve_async running separate libevent
  loop.

  c) bind to some arbitrary local address like 127.1.2.3:53 and use it as
  forwarder for libunbound. The code there would pack/unpack the DNS packets
  from/to libunbound into DNS_BEGIN/DNS_RESPONSE cells. It wouldn't require
  modification of libunbound code, but it's not pretty either. Also the bind
  port must be 53 which usually requires superuser privileges.

  Code of libunbound is fairly complex for me to see outright what would the
  best approach be.
  ]

5. Separate tool for AXFR

  The AXFR tool will have similar interface like tor-resolve, but will
  return raw DNS data. 
  
  Parameters are: query domain, server IP of authoritative DNS. 
  
  The tool will transfer the data through "ordinary" tunnel using RELAY_BEGIN
  and related cells.
  
  This design decision serves two goals:

  - DNS_BEGIN and DNS_RESPONSE will be simpler to implement (lower chance of
    bugs)
  - in practice it's often useful do AXFR queries on secondary authoritative
    DNS servers

  IXFR will not be supported (infrequent corner case, can be done by manual
  tunnel creation over Tor if truly necessary).

6. Security implications

  Transaction ID is provided randomly by libunbound, no need to modify.

  As proposal 171 mentions, we need mitigate circuit correlation. One solution
  would be keeping multiple streams to multiple exit nodes and picking one at
  random for DNS resolution. Other would be keeping DNS-resolving circuit open
  only for a short time (e.g. 1-2 minutes). Randomly changing the circuits
  however means that it would probably incur additional latency since there
  would likely be a few cache misses on the newly selected exits.
  

7. TTL normalization idea 

  A bit complex on implementation, because it requires parsing DNS packets at
  exit node.

  TTL in reply DNS packet MUST be normalized at exit node so that client won't
  learn what other clients queried. The normalization is done in following
  way:

  - for a RR, the original TTL value received from authoritative DNS server
    should be used when sending DNS_RESPONSE, trimming the values to interval
    [5, 600]
  - does not pose "ghost-cache-attack", since once RR is flushed from
    libunbound's cache, it must be fetched anew
  
8. Round trips and serialization

  Following are two examples of resolving two A records. The one for
  addons.mozila.org is an example of a "common" RR without CNAME/DNAME, the
  other for www.gov.cn an extreme example chained through 5 CNAMEs and 3 TLDs.
  The examples below are shown for resolving that started with an empty DNS
  cache.

  Note that multiple queries are made by libunbound as it tries to adjust for
  the latency of network. "Standard query response" below that does not list
  RR type is a negative NOERROR reply with NSEC/NSEC3 (usually reply to DS
  query).

  The effect of DNS cache plays a great role - once DS/DNSKEY for root and a
  TLD is cached, at most 3 records usually need to be fetched for a record
  that does not utilize CNAME/DNAME (3 roundtrips for DS, DNSKEY and the
  record itself if there are no zone cuts below).

  Query for addons.mozilla.org, 6 roundtrips (not counting retries):

    Standard query A addons.mozilla.org
    Standard query A addons.mozilla.org
    Standard query A addons.mozilla.org
    Standard query A addons.mozilla.org
    Standard query A addons.mozilla.org
    Standard query response A 63.245.217.112 RRSIG
    Standard query response A 63.245.217.112 RRSIG
    Standard query response A 63.245.217.112 RRSIG
    Standard query A addons.mozilla.org
    Standard query response A 63.245.217.112 RRSIG
    Standard query response A 63.245.217.112 RRSIG
    Standard query A addons.mozilla.org
    Standard query response A 63.245.217.112 RRSIG
    Standard query response A 63.245.217.112 RRSIG
    Standard query DNSKEY &lt;Root&gt;
    Standard query DNSKEY &lt;Root&gt;
    Standard query response DNSKEY DNSKEY RRSIG
    Standard query response DNSKEY DNSKEY RRSIG
    Standard query DS org
    Standard query response DS DS RRSIG
    Standard query DNSKEY org
    Standard query response DNSKEY DNSKEY DNSKEY DNSKEY RRSIG RRSIG
    Standard query DS mozilla.org
    Standard query response DS RRSIG
    Standard query DNSKEY mozilla.org
    Standard query response DNSKEY DNSKEY DNSKEY RRSIG RRSIG

  Query for www.gov.cn, 16 roundtrips (not counting retries):

    Standard query A www.gov.cn
    Standard query A www.gov.cn
    Standard query A www.gov.cn
    Standard query A www.gov.cn
    Standard query A www.gov.cn
    Standard query response CNAME www.gov.chinacache.net CNAME \
www.gov.cncssr.chinacache.net CNAME www.gov.foreign.ccgslb.com CNAME \
wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query \
response CNAME www.gov.chinacache.net CNAME www.gov.cncssr.chinacache.net CNAME \
www.gov.foreign.ccgslb.com CNAME wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A \
68.232.35.119  Standard query A www.gov.cn
    Standard query response CNAME www.gov.chinacache.net CNAME \
www.gov.cncssr.chinacache.net CNAME www.gov.foreign.ccgslb.com CNAME \
wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query \
response CNAME www.gov.chinacache.net CNAME www.gov.cncssr.chinacache.net CNAME \
www.gov.foreign.ccgslb.com CNAME wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A \
68.232.35.119  Standard query response CNAME www.gov.chinacache.net CNAME \
www.gov.cncssr.chinacache.net CNAME www.gov.foreign.ccgslb.com CNAME \
wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query A \
www.gov.cn  Standard query response CNAME www.gov.chinacache.net CNAME \
www.gov.cncssr.chinacache.net CNAME www.gov.foreign.ccgslb.com CNAME \
wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query \
response CNAME www.gov.chinacache.net CNAME www.gov.cncssr.chinacache.net CNAME \
www.gov.foreign.ccgslb.com CNAME wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A \
68.232.35.119  Standard query A www.gov.chinacache.net
    Standard query response CNAME www.gov.cncssr.chinacache.net CNAME \
www.gov.foreign.ccgslb.com CNAME wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A \
68.232.35.119  Standard query A www.gov.cncssr.chinacache.net
    Standard query response CNAME www.gov.foreign.ccgslb.com CNAME \
wac.0b51.edgecastcdn.net CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query A \
www.gov.foreign.ccgslb.com  Standard query response CNAME wac.0b51.edgecastcdn.net \
CNAME gp1.wac.v2cdn.net A 68.232.35.119  Standard query A wac.0b51.edgecastcdn.net
    Standard query response CNAME gp1.wac.v2cdn.net A 68.232.35.119
    Standard query A gp1.wac.v2cdn.net
    Standard query response A 68.232.35.119
    Standard query DNSKEY &lt;Root&gt;
    Standard query response DNSKEY DNSKEY RRSIG
    Standard query DS cn
    Standard query response
    Standard query DS net
    Standard query response DS RRSIG
    Standard query DNSKEY net
    Standard query response DNSKEY DNSKEY RRSIG
    Standard query DS chinacache.net
    Standard query response
    Standard query DS com
    Standard query response DS RRSIG
    Standard query DNSKEY com
    Standard query response DNSKEY DNSKEY RRSIG
    Standard query DS ccgslb.com
    Standard query response
    Standard query DS edgecastcdn.net
    Standard query response
    Standard query DS v2cdn.net
    Standard query response

  An obvious idea to avoid so many roundtrips is to serialize them together.
  There has been an attempt to standardize such "DNSSEC stapling" [1], however
  it's incomplete for the general case, mainly due to various intricacies -
  proofs of non-existence, NSEC3 opt-out zones, TTL handling (see RFC 4035
  section 5).

References:

  [1] https://www.ietf.org/mail-archive/web/dane/current/msg02823.html


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120822181541</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-08-22 18:15:41-0400</timestampReceived><subject>[tor-dev] Tor and NAT devices: increasing bridge &amp; relay reachability or, enabling the use of NAT-PM</subject><body>

Hi,

My latest tech report is now up. I think it would be a nice idea if we
could kick off a discussion about Tor, NAT devices and reachability.

Tor and NAT devices: increasing bridge &amp; relay reachability or, enabling
the use of NAT-PMP and UPnP by default:
https://research.torproject.org/techreports/tor-nat-plan-2012-08-22.pdf

Feedback welcome and encouraged!

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120823183441</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-08-23 18:34:41-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Recent activities</subject><body>

On Sun, Aug 19, 2012 at 8:25 PM, vmon &lt;vmonmoonshine@gmail.com&gt; wrote:
&gt; Hey Zack,
&gt; 
&gt; I know you are super busy packing for your big move, but I thought as tomorrow is
&gt; the hard deadline for GSoC, is not a bad ideas to give you some final update.

I appreciate it.  I am still in the middle of moving and don't have
the time to go over your changes in detail, but I read over the diff
between 'master' and 'f--payload-servers' and I like it for the most
part.  I don't think we want to _merge_ it just yet, but it's
definitely something we can use.  I like the URL dictionary concept
and the use of query parameters, and it looks like you've got some
good cleanups in here too.

I have a few specific change requests for you.  First: boost should
not be used.  I know it's convenient when you're writing the code, but
it causes so many deployment headaches that it's best avoided.  It
*appears* that you're only using one thing, boost::filesystem::exists,
to check whether a file exists before attempting to open it.  That's
an antipattern.  The correct approach is, don't check first, just
attempt to open the file.  If it succeeds, the file existed.  If it
fails, then check whether errno == ENOENT to find out whether the
problem is that the file doesn't exist.  (If you needed boost for
something else, please let me know and we'll figure out a
replacement.)  Second: do not include the header &lt;iostream&gt;, ever.  It
is only *necessary* to include that header to get 'cin', 'cout', or
'cerr', and none of those should ever be used in this program.  (For
what you were doing you probably want to include &lt;istream&gt; instead.)
(This will also mean that you don't need to add std::__ioinit to the
global variables whitelist.)  Third: I appreciate your having fixed my
sloppy fwrite()s, but please, whenever you print an error message as a
direct consequence of an I/O operation failing, include
strerror(errno).  That is, instead of log_debug("Error writing data");
it should be log_warn("Error writing data: %s", strerror(errno));

... I really gotta find time to write a style guide for this thing :-/

Also, could you please explain in detail the problem you were having
with the DECLARE macros?  If they are getting in your way, then we
should change them, but I do not understand what the issue is.

&gt; So most of last week I spent on the conflict that occurred between
&gt; libcurl and libevent having their eyes on the same socket. I tried
&gt; different ugly and uglier solutions but finally settled on this one
&gt; which is not that bad:
&gt; 
&gt; http://stackoverflow.com/questions/12021217/how-to-ask-libcurl-not-to-listen-on-a-socket-just-send-a-url-request-over-it?answertab=votes#tab-top
&gt;  
&gt; After that, I'm passing all time line tests now.

Great.

&gt; However, when I look at
&gt; the client log, I see that some of the sequence no are missing in the
&gt; recv: like this
&gt; 
&gt; 203.7169 [debug] recv: &lt;3.81&gt; receiving block 42 &lt;d=0 p=9 f=DAT&gt;
&gt; T:203.7170: ckt 3 &lt;ntp 1 outq 0&gt;: recv 42 &lt;d=0 p=9 f=DAT&gt;
&gt; 
&gt; and the next recv is like this:
&gt; 
&gt; 203.7926 [debug] recv: &lt;3.99&gt; receiving block 60 &lt;d=0 p=1 f=DAT&gt;
&gt; T:203.7927: ckt 3 &lt;ntp 1 outq 0&gt;: recv 60 &lt;d=0 p=1 f=DAT&gt;
&gt; 
&gt; Is this for sure an error and loss of data? or there is a normal
&gt; situation that such a thing can happen? For example when the whole
&gt; block can't be sent over one connection? (otherwise how do the tl tests all pass?).

Blocks are cut to fit, so it never happens that "the whole block can't
be sent over one connection".  What _can_ happen is that blocks arrive
in a different order than they are received.  Sometimes they get
reordered to an extent that seems incredible, e.g. block 60 arriving
immediately after block 42 as in your example (I suspect if you look
at the complete log you'll see that what actually happened is block 42
was *delayed* until after blocks 43 through 59 had already arrived).

That's perfectly normal by itself, but there is a bug. If block K+128
arrives while the receiver is still waiting for block K, the receiver
will declare a protocol error and kill the entire circuit.  That's by
design; the bug is that the sender has no way of knowing that the
receiver is still waiting for block K.  This is what I'm supposed to
be fixing right now (by introducing explicit acknowledgments).

&gt; Further more, I merged the payload scraper and stegotorus. I this way,
&gt; http_apache checks for the payload database and if it's not there it
&gt; calls the scraper (it needs apache to be installed on the same
&gt; machine). These all are commited on the github.

Sounds good.  When we get a config file we'll want to be able to say
that we expect to use one or the other, but for now this is a good
approach.

Are we now exclusively using libcurl to generate requests or is there
still legacy hand-generation code in there?

&gt; I started writing a unit test that fetch a webpage directly (using curl)
&gt; and through stegotorus and check if they are the same. I thought curl is
&gt; best approximation of a browser that is available to us. But as I don't
&gt; think I can finish that till tomorrow, I'm going to spend the remaining
&gt; time on documenting the 'uri transport protocol' and deal with small
&gt; issues.
&gt; 
&gt; After we are done with the evaluation, I'll go back to unit testing.

Sounds good.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120823184107</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-08-23 18:41:07-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] [Stegotorus] Pencil down</subject><body>

On Mon, Aug 20, 2012 at 12:00 PM, vmon &lt;vmonmoonshine@gmail.com&gt; wrote:
&gt; Hey Zack,
&gt; 
&gt; I just did my last pushes before putting my pencil down for the final
&gt; evaluations. They take care of the followings:
&gt; 
&gt; - The remaining of all your comments on the
&gt; github. Except for "always use xalloc instead of new". I have used new extensively \
&gt; for instantiating objects. What's exactly about xalloc that's better than new, if \
&gt; you have overloaded both of them?

new can throw exceptions; at present we can't let that happen.  (This
is the case _even if_ you have overloaded operator new with
allocate-or-crash behavior, as we have.)  However, we are doing other
things which are only okay on the assumption that exceptions will not
actually occur (e.g. blithe use of STL containers) so let's not worry
about it; go ahead and use 'new' for anything which has a constructor.
 I still prefer 'xmalloc' for plain data.

(If you want to start converting bare allocations to smart pointers,
by the way, go right ahead -- just don't do that for any libevent
objects; I've got a half-written C++ wrapper for libevent that will
take care of that en masse and also make us exception-safe.)

&gt; The tl_oneway_c2s fails the http-proxy test. It still have problem
&gt; with one-sided EOF. It used to pass when I allow the one way socket
&gt; shutdown in the http proxy. So, I think stegotorus still have problem
&gt; with EOF management. You might want to look at it when you have time.

Blistering barnacles.  Yeah, I'll look at it.  Eventually.  I am so
tired of EOF bugs.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120824112627</emailId><senderName>tagnaq</senderName><senderEmail>tagnaq@gmail.com</senderEmail><timestampReceived>2012-08-24 11:26:27-0400</timestampReceived><subject>Re: [tor-dev] an alternate MyFamily definition</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Just stumbled upon Mike's trac entry to change MyFamily too, I'm
adding it to this thread as a ref:

https://trac.torproject.org/projects/tor/ticket/5565

-----BEGIN PGP SIGNATURE-----

iF4EAREKAAYFAlA3ZOMACgkQyM26BSNOM7aYXwEAm6a0ZWf5nrFDpRzMLkRsTeS1
aL2htrhegkGiRKHy03kA/12qszUWFOcCh4Sw4DQfUBFx8nusVgeXxfpu+lDgMilW
=N8nb
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120826140717</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa.sandvik@gmail.com</senderEmail><timestampReceived>2012-08-26 14:07:17-0400</timestampReceived><subject>Re: [tor-dev] https://gitweb.torproject.org/check.git</subject><body>

On Sun, Aug 26, 2012 at 11:14 AM,  &lt;bgt56zhn@safe-mail.net&gt; wrote:
&gt; Where is the code powering check.torproject.org?
&gt;
&gt; There is https://gitweb.torproject.org/check.git, but the repo has no commits.

Code for the current one is in https://svn.torproject.org/svn/check/trunk/.

-- 
Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120827071337</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2012-08-27 07:13:37-0400</timestampReceived><subject>Re: [tor-dev] Tor on IPv6 roadmap and status page</subject><body>

Andreas Krey &lt;a.krey@gmx.de&gt; wrote
Sun, 26 Aug 2012 09:50:11 +0200:

| On Thu, 16 Aug 2012 22:45:47 +0000, Linus Nordberg wrote:
| ...
| &gt; The roadmaps/Tor/IPv6 [1] wiki page has been started with the goal of
| &gt; communicating the status of the work with Tor on IPv6.
| 
| Hmm, is there any thought of allowing IPv6 addresses for accessing
| hidden services? Or do you expect it to always be 127.0.0.1 anyway?

I think that we should allow IPv6 addresses in the HiddenServicePort
option too and that proposal 186 should be updated to consider hidden
services too.

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120827080600</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-08-27 08:06:00-0400</timestampReceived><subject>Re: [tor-dev] Next ten Tor Tech Reports</subject><body>

On 8/20/12 11:06 AM, Karsten Loesing wrote:
&gt; On 8/9/12 8:29 AM, Karsten Loesing wrote:
&gt;&gt; On 8/8/12 8:13 PM, Mike Perry wrote:
&gt;&gt;&gt; Since HotPETS doesn't count as "publishing" perhaps this should be
&gt;&gt;&gt; listed as a tech report:
&gt;&gt;&gt; http://fscked.org/talks/TorFlow-HotPETS-final.pdf
&gt;&gt;
&gt;&gt; [...]
&gt;&gt;
&gt;&gt; How about we put the LaTeX sources in tech-reports.git, change them to
&gt;&gt; use the new tech report template, assign a report number, and add a
&gt;&gt; footnote saying "This report was presented at 2nd Hot Topics in Privacy
&gt;&gt; Enhancing Technologies (HotPETs 2009), Seattle, WA, USA, August 2009."?
&gt;&gt; Then people can decide if they rather want to cite our tech report or
&gt;&gt; the HotPETs one.
&gt;&gt;
&gt;&gt; Happy to do or help with the conversion if you tell me where your
&gt;&gt; sources are.
&gt; 
&gt; So, what do you think?  Still happy to help. :)

I turned the LaTeX sources you sent me yesterday into a Tor Tech Report:

https://people.torproject.org/~karsten/volatile/torflow-2009-08-07.pdf

I also turned my HotPETs 2009 report into a Tor Tech Report:

https://people.torproject.org/~karsten/volatile/metrics-2009-08-07.pdf

The sources are here:

https://gitweb.torproject.org/user/karsten/tech-reports.git/shortlog/refs/heads/hotpets2009-reports

Note that I changed a few things like moving pure URL references from
the bibliography to footnotes, updating URLs to gitweb/lists.tpo, etc.

If you like the changes, please let me know, and I'll put the reports on
research.tpo.  Otherwise, please change the things you don't like, or
tell me what you want to have changed.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120827230656</emailId><senderName>julian</senderName><senderEmail>julian.ospald@googlemail.com</senderEmail><timestampReceived>2012-08-27 23:06:56-0400</timestampReceived><subject>Re: [tor-dev] TBB Gentoo ebuild</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 08/27/2012 08:26 PM, Matthew Finkel wrote:
&gt; 
&gt; Ah, I apologize, I thought having optional runtime deps were
&gt; possible. I also agree that is should be obvious but I've learned
&gt; to err on the side of caution, if possible.

Optional runtime-ONLY dependencies pulled in by a useflag are
possible, they just violate the _current_ spec ;)
GLEP 62 tries to enhance the spec, so we can get an implementation
where this is valid.

(OT stripped)


&gt; 
&gt;&gt; 
&gt;&gt; Definitely not. The intention is not to provide an all-in-one
&gt;&gt; experience. I already had those arguments with the guys from
&gt;&gt; #tor
&gt;&gt; 
&gt; 
&gt; Okay, so you want to add the TorBrowser to portage so that a user
&gt; can emerge all of the components of the TBB and can use them as
&gt; he/she sees fit, correct?
&gt; 

That's right, but I could however enhance the elog which is printed
out to the user after the build and installation is complete. I was
also considering to hard-mask this package. It's currently only marked
'unstable', but hard-masking would mean the user has to take extra
steps in order to install it which would maybe make it more clear that
this is not supported or recommended by Tor upstream.


&gt;&gt; All I am interested in is the question about the firefox
&gt;&gt; build-time configuration and if different build-time
&gt;&gt; configurations could lead to vulnerability in the tor network. If
&gt;&gt; there is the slightest doubt about that, I will remove this
&gt;&gt; ebuild at once or fix it.
&gt; 
&gt; I'm not a browser dev, but I don't think this shouldn't be an
&gt; issue. As long as the ebuild uses all of the security patches and
&gt; extensions, it shouldn't be a problem. Also, if any vulnerabilities
&gt; are introduced by this ebuild, it would only harm the user's
&gt; anonymity and should not have an impact on the network.
&gt; 

Hmm, thanks for the evaluation. Where could I get a second opinion on
this?


cheers, hasufell

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.19 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEbBAEBAgAGBQJQO/2QAAoJEFpvPKfnPDWzZXgH90mR3LGqjPJPxcYARHN95Dwp
jyPEGLGHg01cZgtP3lhO6lcSMkgSGr2Jd004mvK56PkEjahBgq1PZCyVJdxW+HQQ
AlU4gCjIt5IdQayDAcrtyWNx/eMAVWq+oVPjb9KvSlPd9mlTM/ukjGYxCYQk2Qf1
1Kyp4yOudRs8UqtTzpVezav8/PsWNHBbH1slR0Ryu6kK6OSmvkySraR8XapkjLxB
YODtw5rFAi+8DmG46jKxXVIg5IFe8ErAiX3XIxqkqRGR/jEv4tCfrtWXpWJeX8dN
785vxSFW6deJkMFP4Vs4YCbmdnFQ5JcTq3ToIfnJ3oIOHu3rsNpO7E2J9JkcsA==
=IiHr
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120831181355</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-08-31 18:13:55-0400</timestampReceived><subject>Re: [tor-dev] [Stegotorus] Fake bug, boost, DECLARE, etc</subject><body>

Hello Zack,

I hope you have already settled down and your new home feels homey by now.

Frist let me start with this, that took me the longest (not) to "tackle":
&gt; Sometimes they get
&gt; reordered to an extent that seems incredible, e.g. block 60 arriving
&gt; immediately after block 42 as in your example
After talking to Nick, exchanging emails on curl mailing list,
hacking the curl code and recompiling it, finally guess what was the
problem, ..., my terminal was censoring stderr and was selectively
printing the log_debug, hence only print recv 42  and recv 60 but nothing
in between. That was why everything was going smooth while I was
"losing" dozens of blocks every so often. When I redirect the stderr to
a  file I got all packets in order. So we are good here.

&gt; First: boost should not be used.
I'm using boost for recursively traversing the document root directory
of the http server in PayloadScraper. Collaterally, I used to its other
function, like existence of a file, because the damage was already done. 
 If you know another option that does the same (iterating through all
 files in subdirs recursively) in a hassle-free way and is portable
 to Windows, then I'm at your service to replace boost.

&gt; Second: do not include the header &lt;iostream&gt;
Got rid of it.

&gt; whenever you print an error message as a direct consequence of
&gt; an I/O operation failing, include
Done.

&gt; the problem you were having with the DECLARE macros?
This is the issue: http_steg and http_apache_steg they have a lot in
common. In c++ fashion, one just inherit http_apache_steg from http_steg
and re-write only those functions that are different. But using DECLARE
functions there are two problems:
   
   1. You have to re-define all the functions even those that are exactly
the same, and I have few of these:

int
http_apache_steg_t::receive(struct evbuffer *dest)
{
  return http_steg_t::receive(dest);
}

   2. If I was to follow the procedure rigorously even #1 solution was
   not possible, because it requires that http_steg is defined in a
   anonymous namespace so I couldn't inherit another structure from it 
   in another file, so I had have http_steg not in its own namespace.

So your call, if it is OK, is OK, if not we can get rid of the DECLARE.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120831230242</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-08-31 23:02:42-0400</timestampReceived><subject>Re: [tor-dev] Parallel release series for directory authorities?</subject><body>

On Sat, Sep 01, 2012 at 12:36:51AM +0200, Linus Nordberg wrote:
&gt; Just a thought. A few of the directory authorities, I think at least
&gt; three, as well as the bridge authority run packages/ports only, not
&gt; builds from source. We'd have to package our -da branch ourselves for
&gt; those I guess. But that's probably a better option than the others.

Right. The people who are willing to run from git generally are fine
running master (and helping to find bugs), so it's really the people
who only run from packages that we need to consider here.

Maybe we should just enumerate the eight directory authorities and their
habits, rather than trying to generalize too early?

- I generally run moria1 from git master, to maximize the cool new bugs
I can find.

- I think weasel only runs tor26 from debs. I wonder what he would think
of us asking him to deb up a separate git branch for just a few people?
He says "I don't mind running 0.2.4 - it's not worse than running a fork
of 0.2.3."

- Linus runs maatuska from git, and is happy with git master too.

- I'm not sure about gabelmoo, dizum, dannenberg, turtles, and urras.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120717224354</emailId><senderName>Kevin Evans</senderName><senderEmail>hello@kevinevans.name</senderEmail><timestampReceived>2012-07-17 22:43:54-0400</timestampReceived><subject>[tor-dev] Ports with hidden/rend services?</subject><body>

I am utterly dumbfounded by this (it's probably because I'm really
tired), but in rendservice.c in the rend_service_t structure, there is
a smartlist_t for the ports. How exactly are the [source and
destination] ports stored in there?

Thanks,
Kevin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120715125628</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-07-15 12:56:28-0400</timestampReceived><subject>[tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

I would like to follow up on the discussion we had in Florence on some
design choices behind OONIB.

In particular the most controversy was around using HTTP or rsync.

Before discussion the pro and contra about one choice over the other it
would be useful to frame
what are exactly the requirements for OONIB.

# What is OONIB

OONIB is the backend of OONI. It will run mainly on one centralized
machine and may in
a later stage run distributed across multiple ones. Currently we have
not though of how
to make it scale to being distributed, so we will look at it as if it
were running only
on one central machine.

It will be responsible for:

* Reporting
  a) Collecting reports from OONIProbes. Such reports are the results of
tests.
  b) Collecting reports from third party censorship measurement tools
(e.x. Bismark, NeuBot, etc.)

* Assistance in test running
  Certain OONI Tests require to have a backend component (e.x. b0wser).
On OONIB we will have
  the serverside component that will assist us in running the test.
 
  Note: Certain tests require the server to make connections to the
client. This means that the
  client will need to request the server to probe them.

* Control Channel Signaling
  This is required for making some measurements to verify that the data
received by the backend
  specific to the test matches with the one sent by the client.
 
# What properties we would like it to have
note: these are not ordered.

* Efficient even over high latency networks.

* Ease of integration for third party developers.

* Expandable to support requirements of new tests we develop.

* Anonymous

* Secure

# HTTP and rsych comparison
note: I will not deal with the security aspects of OONIB. We will
suppose to have
an encrypted and authenticated transport (this can be TLS, Tor Hidden
Services,
etc.)

## Rsync:

Pro:

* It supports good compression algorithms

* It's efficient and supports resume

* It does integrity checking on the uploaded files

Contra:

* It's designed only for copying files, this means we can't implement
any more advanced
API like logic. [*]

* It's not supported by many languages (for example in python we only
have an implementation
of the rsync algorithm, not of the protocol [1])

* It's not as commonly used by other application developers that have
similar requirements.

* Painful to do sanitization of the data sent by clients.

* Does not allow bidirectional communication (Request-Response pattern)


[*] I would like to be able to create a session ID for a specific test
and be able to reference
such test ID when interacting with the Test helpers. rsync is one way, I
push data to the server,
but the server cannot signal me back with some data. This largely
impeeds it's usefulness as an
API interface.


## HTTP:
note: I am not necessarily talking only about HTTP, we could use any
other protocol with similar
properties (e.x. SPDY). I will discuss HTTP because it is the one that I
am most familiar with,
but don't

Pro:

* Industry standard for exposing APIs

* Supported natively in most programming languages

* Well understood protocol

* Implementation of sanitization of passed data can be done more easily

* Allows bidirectional communication

* Good support in twisted (what we use as a language for OONIB)

Contra:

* Compression is not enabled by default (we can use gzip compression
with HTTP 1.1), and no compression for
  headers.

* No resume support (this can be implemented on top of HTTP, we could
even implement the rsyc algorithm
on top of HTTP).

* No support for deltas (we can use rsych protocol over HTTP if we
really need this).

I feel like we are a bit comparing apples and oranges here and I don't
see why we could not use
rsync algorithm on top of HTTP. Anyways I would like to get some
feedback as to what we should use
for something that should have the above described properties.

Thoughts?

- Art.

[1] https://github.com/isislovecruft/pyrsync
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720044719</emailId><senderName>Ray Sweha</senderName><senderEmail>remos@cs.bu.edu</senderEmail><timestampReceived>2012-07-20 04:47:19-0400</timestampReceived><subject>[tor-dev] Building a two-hop circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,
I was wondering if there is a way to force Tor to build a two-hop
path/circuit through torrc.
It seems that both "Pathlen 2" and "PathlenCoinWeight 0.0" are depreciated,
is there a substitute for them?
Thanks,
-Ray

[Attachment #5 (text/html)]

Hi all,&lt;div&gt;I was wondering if there is a way to force Tor to build a two-hop \
path/circuit through torrc.&lt;/div&gt;&lt;div&gt;It seems that both "Pathlen 2" and \
"PathlenCoinWeight 0.0" are depreciated, is there a substitute for \
them?&lt;/div&gt; &lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;-Ray&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120720150853</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@torproject.org</senderEmail><timestampReceived>2012-07-20 15:08:53-0400</timestampReceived><subject>[tor-dev] Reachability testing brainstorming. (OONI, metrics, pluggable-transports)</subject><body>

BridgeDB was extended to filter bridges that are blocked in a
specified country from its response. BridgeDB needs a list of what is
blocked, and where, for this to work.

We want to answer the question "What is blocked, and where", with the
constraint that the list of bridges should not become public.

Here are a few questions to kick off the discussion. Any insight, more
questions (or answers) are appreciated.

1. Do we want active or passive reachability testing (or both)?
2. For active scanning, OONI comes to mind. Do we trust operators with
the list of bridges? A partial list of bridges?
3. Does an open TCP port mean that a bridge is 'reachable' or should
the test complete a full handshake?
4. What about pluggable transports (PT)? Will the Bridge Authority do
independent reachability testing of PTs?
5. What concerns are there regarding detectability of active scanning?
6. For passive censorship detection, are there other indicators other
than relay/bridge usage-by-country over time?
7. Should relays report per-country usage by address/transport? What
are the upsides? Downsides?

Thanks in advance!
--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120330023637</emailId><senderName>"Salva ."</senderName><senderEmail>cybero@hotmail.es</senderEmail><timestampReceived>2012-03-30 02:36:37-0400</timestampReceived><subject>[tor-dev] hide my site in clearweb</subject><body>

[Attachment #2 (multipart/alternative)]


Hello=2C I'm going to launch a website in TOR and I dont wanna it to be vis=
ible in clearweb.So I want my site was only accessible from TOR.
Anyone knows how can I do this ?
Thanks. 		 	   		  =

[Attachment #5 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;style&gt;&lt;!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--&gt;&lt;/style&gt;&lt;/head&gt;
&lt;body class='hmmessage'&gt;&lt;div dir='ltr'&gt;
Hello, I'm going to launch a website in TOR and I dont wanna it to be visible in \
clearweb.&lt;div&gt;So I want my site was only accessible from \
TOR.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Anyone knows how can I do this \
?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks.&lt;/div&gt; 		 	   		  &lt;/div&gt;&lt;/body&gt; &lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120724091746</emailId><senderName></senderName><senderEmail>vmonmoonshine</senderEmail><timestampReceived>2012-07-24 09:17:46-0400</timestampReceived><subject>[tor-dev] ApachePayloadServer pushed</subject><body>

Disc.:In the spirit of our discussion in Italy about unifying mailing list and
that we should submit our technical discussions on tor-dev instead of
tor-assistants, I'm moving my conversations with Zack here. If there's a
strong opposition I'll go back to the old model (but you should have
opposed it in Italy).

Hey Zack, 

I pushed the ApachePayloadServer on your git on f--payload-servers
branch. It compiles but I have to test it yet. However, it
would be much easier to be tested when I change the current
payload-based-on-trace to be inherited from the same parent. so I'm
postponing testing for few days after I write that part (so you don't need to look at it till then).

On another note, your pgen_pcap.cc and pgen_fake.cc don't compile on g++
4.7.0 on linux, because it doesn't like the fact that you don't care
about the return value of fwrite.

That's it for now.

Cheers,
vmon

I 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120712131222</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-12 13:12:22-0400</timestampReceived><subject>[tor-dev] First five Tor tech reports</subject><body>

Hi Roger, hi Nick,

here are the first five metrics tech reports that I'd like to turn into
Tor tech reports (see #5405 for the idea behind this).  If you agree
that this is a good idea, I'll push the sources to tech-reports.git and
put the PDFs on the Tor website.  I need your confirmation for each
report as part of the process, though.

-
https://people.torproject.org/~karsten/volatile/bridge-stability-2011-10-31.pdf

- https://people.torproject.org/~karsten/volatile/blocking-2011-09-15.pdf

- https://people.torproject.org/~karsten/volatile/detector-2011-09-09.pdf

-
https://people.torproject.org/~karsten/volatile/relay-stability-2011-06-30.pdf

- https://people.torproject.org/~karsten/volatile/data-2011-03-14.pdf

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120726024129</emailId><senderName>"=?ISO-8859-1?B?Pz9QaG9lbml4aW5n?="</senderName><senderEmail>1935842336@qq.com</senderEmail><timestampReceived>2012-07-26 02:41:29-0400</timestampReceived><subject>[tor-dev] Why change the bridges.torproject.org website to avoid to get bridges by script?</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hi     I live in a country which it block the tor net strictly! Only I can do is that \
I get the bridges from the website. I just want  to get the bridges automaticly by \
writing a script. But now I must get the bridges hand by hand and one by one. It's \
more uncomfortable! Could you change it back?  
 best regards!


[Attachment #5 (text/html)]

&lt;DIV&gt;Hi 
&lt;DIV&gt;   I live in a country which it block the tor net strictly! Only I can \
do is that I get the bridges from the website. I just want  to get the bridges \
automaticly by writing a script. But now I must get the bridges hand by hand and one \
by one. It's more uncomfortable! Could you change it back?&lt;/DIV&gt; &lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;best regards!&lt;/DIV&gt;&lt;!-- --&gt;
&lt;STYLE&gt;#mailContentContainer .txt {height:auto;}&lt;/STYLE&gt;


&lt;/DIV&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120728082337</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-28 08:23:37-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo Descriptors</subject><body>

Hi Megan, hi Erik,

cc'ing Sathya and tor-dev, hoping you don't mind.

On 7/27/12 5:21 PM, Megan Chang wrote:
&gt; We are currently almost done with the first draft of pyonionoo.

Awesome! :)

&gt; We were
&gt; wondering what some of the entries might look like so we would be able to
&gt; see what information was being parsed to fill in some of the fields such as
&gt; the bandwidth handler's "write_history" and "read_history". We noticed that
&gt; the router descriptor format includes "write_history" and "read_history"
&gt; according to torspec but again, we aren't too sure on what these entries
&gt; look like.

The bandwidth documents are tricky, because one cannot just look up
these values from Tor descriptors.  They're based on histories in
extra-info descriptors, but they aggregate these values on different
levels of detail, and they're specifically designed for graphing.  I
don't know about your schedule, but if you're short on time, I'd say
let's discuss summary and details documents first and ignore bandwidth
documents for the moment.  (Of course, if you have plenty of time left,
happy to discuss bandwidth documents more!)

Is your code online somewhere?  I'd like to take a look and give you
some feedback about Tor descriptor specific things (not so much about
Python/Twisted (?) things).

&gt; Also, we don't know how to approach the fields in the details
&gt; handler that require GeoIP information. Any tips on this?

Onionoo uses Maxmind's Java API, their GeoIP database, and their AS
database to resolve IP addresses to country/AS information.  There's a
Python API, too, which I think Sathya used for his network entropy code:

https://gitweb.torproject.org/metrics-tasks.git/tree/HEAD:/task-6232/pygeoip

If you're unsure how to use it, best ask Sathya for more details.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120728172427</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-28 17:24:27-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Protocol grammars as probabilistic channels</subject><body>

[I'm moving this from a giant cc: list to tor-dev, I hope that's okay.
 I *think* everyone involved is already on that list.]

[I apologize for not picking up this ball for so long, I have been ill
and mostly without the brain.]

On Sun, Jul 22, 2012 at 2:26 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt;
&gt; Specifically, to obfuscate a ‘payload protocol' data stream:
&gt;
&gt; * send it through an arithmetic-code encoder, using a model which
&gt; contains a (low-probability) ‘pad' symbol;
&gt; * encrypt it with a stream cipher;
&gt; * send it through an arithmetic-code decoder, using a model which
&gt; matches the ‘cover protocol' (the protocol you are trying to mimic).

I like this way of modeling the problem, but I see some practical
problems with it.  The payload protocol in this case is Tor's link
protocol, which is already encrypted, so your first step would appear
not to do anything (well, except to TLS's cleartext record headers,
but I don't think that will gain you much).  The stream cipher
provides no integrity protection for the message, which maybe we can
get away with since the higher level has it, and more importantly, no
sequencing.  Several cover protocols of interest (most importantly
HTTP) break a session up into many short-lived TCP connections.  That
means you have to allow for the possibility that cover-protocol
messages will arrive at the decoder out of order.  You also need the
ability to send control messages at a level below the payload
protocol, for key agreement, reassociation of new connections with
ongoing sessions, and possibly other things we haven't thought of yet.

The "chopper" component of StegoTorus tackles these problems.  Have
you seen the draft paper?  It has its own problems -- the one I'm
wrestling with now is, the _amount of payload data_ sent in any given
message gets frozen the first time it is transmitted; if you need to
_re_transmit, you'd better be able to send at least that much data
right now! (Padding can of course be varied.)

I would be curious to know if you think your arithmetic-decoding
approach to cover generation could reasonably be made to work within
StegoTorus' framework.

&gt;&gt; George turned me on to this paper,
&gt;&gt;
&gt;&gt; "Provably Secure Steganography"
&gt;&gt; http://www-users.cs.umn.edu/~hopper/tc-stego.pdf

I have to say that I am very skeptical about the practical value of
this paper, because it requires one to characterize the probability
distribution of all possible messages in the cover protocol, which is
not practically possible for any nontrivial protocol.  I could see an
approximation being good enough for our purposes, though.

&gt; Don't hide information directly in the syntax -- it's easy enough for
&gt; Them to rearrange protocol messages in ways that will not interfere
&gt; with standard-conformant clients and servers, but will disrupt crappy
&gt; protocol obfuscators that don't implement the cover protocol
&gt; correctly.  Use a semantic model of the cover protocol instead.

vmon and I have been wrestling with this one a bit in the context of
HTTP and we've pretty much come to the conclusion that we need an
actual implementation of HTTP, into which we plug data.  Fortunately
there is no shortage of HTTP implementations.

&gt; ‘Blocking resistance' is *very* different from ‘detection resistance'
&gt; (i.e. ‘indistinguishability from normal traffic' for some value of
&gt; ‘normal traffic').
&gt;
&gt; * ‘Blocking resistance' does not require that a cover protocol be
&gt; ‘indistinguishable from X' by the adversary, only that the adversary
&gt; be unable to block it.  For example, an adversary which can only
&gt; ‘block' communications by disrupting a connection using extra (forged)
&gt; packets will not be able to block a UDP-based protocol.

The adversary we're concerned with has control of all the border
routers between the client and the server, so they can do things like
blackhole all packets with a particular source or destination.  I
would argue that detection resistance is in fact required for blocking
resistance against this adversary.

&gt; * A protocol which is ‘indistinguishable from' some protocol which the
&gt; adversary wants to not block may not provide ‘blocking resistance'.
&gt; For example, a crappy obfuscator which uses a syntactic model of HTTP
&gt; instead of a semantic model can be blocked by just about any
&gt; off-the-shelf HTTP proxy.

That effect also provides a distinguisher from real HTTP, doesn't it?

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120604125618</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-06-04 12:56:18-0400</timestampReceived><subject>[tor-dev] [GSoC] APAF Report</subject><body>

Hello,
As Daniel suggested, I'm writing this email to keep you updated on my
Google Summer of Code Project - APAF.

Following the hackathon of the 18-21 May, we reached a working build
environment, and a primitive administration page. Below follows a brief
update about what is the current status of the software:

Development: I've defined what a service really is in terms of
implementation, and approached the administration service (the "panel")
in such a way that any future application may hide or completely
override it. This shall give not only a comfortable user experience but
also elasticity to the software.

Testing: unittests cover most of the software, but even though APAF is
still in an embrional state, I would be glad anyway to receive some
feedbacks from you, about which OS the apaf was tested on and any bug
you were able to find.

Documentation: currently is disorganized, and splitted between sphynx
and github wiki. But, the data is there, and I promise that on the next
days I will merge/rewrite the two :)
Anyway, the code is highly documented, in my opinion the generated
sphynx documentation is acceptable.

Deployment: I kept working on the build system, which at the current
revision works on windows, osx and as vanilla python .egg., but there
are still some issues - for example, the automation of .deb build and
blobbing external tools on windows.

In case you need a quick link to the project, https://github.com/mmaker/apaf

-- =

=F9

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120726041837</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-26 04:18:37-0400</timestampReceived><subject>[tor-dev] Brainstorming about steganographic transports</subject><body>

This is a summary of some discussion among developers of pluggable
transports about steganographic channels and deriving them from protocol
grammars. Two things prompted the discussion:

* A program called appid, http://code.google.com/p/appid/ , which
  compiles simple protocol specifications into big regular expressions
  and uses them to classify network streams. Supported protocols are
  https://code.google.com/p/appid/source/browse/trunk/apps ; a sample is
  https://code.google.com/p/appid/source/browse/trunk/apps/afs . Roger
  suggested to make a program that takes one of these specifications and
  embeds data within a stream that appid will classify as the chosen
  protocol.

* This paper:
    "Provably Secure Steganography"
    http://www-users.cs.umn.edu/~hopper/tc-stego.pdf
  The authors define a "channel" as a probability distribution on
  sequences. You can think of a channel as something that answers "given
  this prior history of packets, what are the possible next packets and
  their probabilities?" or even as an oracle that merely allows sampling
  this distribution. They show a method of steganographically encoding a
  bit within a channel such that that a passive adversary cannot
  distinguish it from "normal" traffic (Sec. 4.1 and Fig. 1). For the
  topics we were talking about, the most important sections to read are
  2 and 4.1.

You can embed data in a string that will match a given regular
expression by constructing a DFA (http://swtch.com/~rsc/regexp/regexp1.html)
and walking it state by state, choosing state transition edges so as to
encode something. For example, if there are two outgoing edges from a
state, which one you choose can encode a bit. Many of the appid
signatures contain any* blocks that can straightforwardly encode bytes.
An example of this idea is the regular expression /^(ab*[cd])+/. The b*
lets us encode one bit (say "" = 0 and "b" = 1), and the choice of c or
d allows another bit ("c" = 0 and "d = 1). We could send the message
00110001 as "acabdacad".

This idea can really be thought of an application of the paper. A
regular expression defines a probabilistic channel if we assign
probabilties to edge transitions, which we may do uniformly. So, for
example, with the regular expression given above, the first byte is 'a'
with probability 1. The second byte is 'b' with probability 0.5, 'c'
with probability 0.25, and 'c' with probability 0.25. But we see how a
channel is sensitive to history: if the string so far is "ab", then the
next byte may be 'c' or 'd'; but if the string so far is "ac", then the
next byte must be 'a' (or EOF).

We can use appid-like signatures to make steganographic channels, if we
assume that the signatures are a realistic reflection of actual use of
the protocols. But: this relies critically on the accuracy of the model.
(Specifically, does it match the censor's model? If he uses simple
regular expressions for blocking, then we win; if not, then we probably
lose.) Robert Ransom gave the example of a model of HTTP using just the
syntax; i.e. using RFC 2616 as the definition of a channel. Such a thing
would not only not look like real-world HTTP, but would be broken easily
by proxies that rearrange headers, for example.

rransom also suggested a way to use arithmetic encoding to obfuscate a
stream using a probabilistic model of a protocol; I'll quote him in
part:
* send it through an arithmetic-code encoder, using a model which
  contains a (low-probability) 'pad' symbol;
* encrypt it with a stream cipher;
* send it through an arithmetic-code decoder, using a model which
  matches the 'cover protocol' (the protocol you are trying to mimic).

David (yours truly) wants to write or help write a simple pluggable
transport derived from regular-expression signatures, even with the
limitations shown above. Client and relay would need matching signature
models. For the same of simplicity, it will only seek to match the given
signature, and not be indistinguishable in the strong sense mentioned
above. It won't do symmetric encryption of the underlying TLS (or if it
does, will use a fixed key). It won't use the constructions from the
Provably Secure Steganography paper, rather it will just encode its
stream directly in DFA edge transitions. I think it will be interesting
to see 1) how far a simple system can get us, and 2) what additional
changes we would have to make to be provably secure against censors
using more sophisticated computational models than regex.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120705162107</emailId><senderName>Walter Kim</senderName><senderEmail>wltr.km@gmail.com</senderEmail><timestampReceived>2012-07-05 16:21:07-0400</timestampReceived><subject>[tor-dev] introduction and progress toward an interactive version of a Tor metrics website</subject><body>

Hi Everyone,

I'm a mathematician/coder/visualization person living in San Francisco.

I've been in contact with Karsten Loesing about making more
interactive graphs for the tor metrics website.  I've made some
progress which can be viewed here:

http://tigerpa.ws/tor_metrics/

You can select a region in the bottom graph to set the time domain of
the top graph.  You can click on the buttons on the right to add lines
to the graph.

It's still a work in progress, so there are still bugs and I've open
to suggestions on making it better.  Currently it only shows graphs
for network/relays data.  I'm planning on adding the ability to view
graphs for all the other data on the current tor metrics site.


The code lives here:
https://github.com/tigerpaws/tor_metrics

Thanks,
Walter

-- 
Walter Kim, Ph.D.
Mathematician and Engineering Contractor, San Francisco
+1-415-509-1429 (mobile)
wltr.km@gmail.com
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120729232627</emailId><senderName>"=?ISO-8859-1?B?Pz9QaG9lbml4aW5n?="</senderName><senderEmail>1935842336@qq.com</senderEmail><timestampReceived>2012-07-29 23:26:27-0400</timestampReceived><subject>[tor-dev] bridge's lifetime</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

hi 
 &lt;/:includetail&gt; 
    I have get more than 1000 bridges and I totally inserted into the torrc file. So \
I can not notice which bridge is no longer work. The bridges can not be blocked \
totally. Some bridges seem that no longer work, but after sometime (three days or \
more) they work again.:-)&lt;/:includetail&gt;  &lt;/:includetail&gt; 
 best regards&lt;/:includetail&gt;
 &lt;/:includetail&gt; 
  
&lt;/:includetail&gt;


[Attachment #5 (text/html)]

&lt;DIV&gt;&lt;includetail&gt;hi &lt;/includetail&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;/:includetail&gt; &lt;/DIV&gt;
&lt;DIV&gt;   I have get more than 1000 bridges and I totally inserted into \
the torrc file. So I can not notice which bridge is no longer work. The bridges can \
not be blocked totally. Some bridges seem that no longer work, but after sometime \
(three days or more) they work again.:-)&lt;/:includetail&gt;&lt;/DIV&gt; \
&lt;DIV&gt;&lt;/:includetail&gt; &lt;/DIV&gt; &lt;DIV&gt;best regards&lt;/:includetail&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;/:includetail&gt; &lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;&lt;/:includetail&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120716092211</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-16 09:22:11-0400</timestampReceived><subject>Re: [tor-dev] introduction and progress toward an interactive version of a Tor metrics website</subject><body>

Hi Walter,

On 7/5/12 6:21 PM, Walter Kim wrote:

Oops, your mail got lost somewhere between the Florence trip and
recovering from it.  Sorry for the late reply.

&gt; I'm a mathematician/coder/visualization person living in San Francisco.
&gt; 
&gt; I've been in contact with Karsten Loesing about making more
&gt; interactive graphs for the tor metrics website.  I've made some
&gt; progress which can be viewed here:
&gt; 
&gt; http://tigerpa.ws/tor_metrics/

Thanks for announcing your work here.  As I said before, these graphs
are really cool!  Great work!

I just added a link to the metrics start page and to the network page.
I'd really love to replace the current metrics graphs with yours once
they're ready.

&gt; You can select a region in the bottom graph to set the time domain of
&gt; the top graph.  You can click on the buttons on the right to add lines
&gt; to the graph.

I wonder, can you somehow add navigation buttons to zoom in and out and
move forward/backward in time?  The default view could show the last
three months (similar to how the current metrics graphs are implemented)
and then the user could tweak the graph to their needs.

&gt; It's still a work in progress, so there are still bugs and I've open
&gt; to suggestions on making it better.  Currently it only shows graphs
&gt; for network/relays data.  I'm planning on adding the ability to view
&gt; graphs for all the other data on the current tor metrics site.
&gt; 
&gt; 
&gt; The code lives here:
&gt; https://github.com/tigerpaws/tor_metrics

Can you add the GitHub link to a footer in your graphs page, maybe
including a direct link to the issues page?  I hope that you'll get more
feedback if people can easily file a bug or feature request.

I'm also cc'ing Arturo who wrote Atlas.  Atlas shows information on
currently running relays.  That website has graphs on a relay's
bandwidth usage over time.  It's fed with Tor metrics data, too, so I
could imagine that sharing code or even just ideas for visualizing that
data might be beneficial.  Here's an example of graphs in Atlas:

http://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281

Thanks!
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731023547</emailId><senderName>Walter Kim</senderName><senderEmail>wltr.km@gmail.com</senderEmail><timestampReceived>2012-07-31 02:35:47-0400</timestampReceived><subject>Re: [tor-dev] introduction and progress toward an interactive version of a Tor metrics website</subject><body>

Hi Karsten, Arturo, and others,

Sorry for being out of touch for a couple weeks; I had some day job deadlines.

I've added more data (bandwidth, users) to site I'm working on:
http://tigerpa.ws/tor_metrics/
And set the default time frame to be the last 3 months.

I have on my list to do the following:
1. Buttons to zoom in/out and pan forward/backwards in time.
2. Add GitHub repo link for code and issues.
3. Deal with making the UI for accessing countries better (e.g. show
the top countries and a drop down menu for the rest).
4. Get the performance data up.
5. Make the UI labels on the right for showing different graphs easier
to read when the selected/colored.
6. Make the graph line continue with the previous value if the data
value is null.

Please do submit issues to the GitHub repo page:
https://github.com/tigerpaws/tor_metrics
for another other things I should add/fix.

Arturo, the Atlas site looks really nice.  Perhaps once I get all the
basic functionality into the site I'm working on, there could be some
merging of efforts.  I could try to match the Atlas style as well.

-Walter


&gt; I'm also cc'ing Arturo who wrote Atlas.  Atlas shows information on
&gt; currently running relays.  That website has graphs on a relay's
&gt; bandwidth usage over time.  It's fed with Tor metrics data, too, so I
&gt; could imagine that sharing code or even just ideas for visualizing that
&gt; data might be beneficial.  Here's an example of graphs in Atlas:
&gt;
&gt; http://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt;
&gt; Thanks!
&gt; Karsten



-- 
Walter Kim, Ph.D.
Mathematician and Engineering Contractor, San Francisco
+1-415-509-1429 (mobile)
wltr.km@gmail.com
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120730175738</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-30 17:57:38-0400</timestampReceived><subject>[tor-dev] Def Con Kaminsky talk (censorship detection)</subject><body>

I saw an interesting talk by Dan Kaminsky at Def Con that touched on
some ideas for censorship detection. He mentioned OONI-probe and talked
about his project CensorSweeper. It tests blockedness of web sites by
making cross-domain requests for favicon.ico and displaying them in a
minesweeper-like grid.

http://www.censorsweeper.com/
https://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/censorsweeper

He also mentioned something, which unfortunately I didn't follow very
closely, about using Flash sockets to spoof HTTP and HTTPS headers. I
think the gag here was sending these spoofed connections to a server you
control (so you can answer the crossdomain policy requests without which
Flash Player will refuse to connect), but you give it a Host header of a
censored site or something like that.

http://miriku.com/wp/2012/07/decon-day-3/comment-page-1/#comment-1416

Unfortunately I don't have the conference DVD which presumably contains
the slides he used, but videos usually show up online after some number
of months.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120726065636</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-07-26 06:56:36-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming about steganographic transports</subject><body>

On 7/26/12, David Fifield &lt;david@bamsoftware.com&gt; wrote:

&gt; We can use appid-like signatures to make steganographic channels, if we
&gt; assume that the signatures are a realistic reflection of actual use of
&gt; the protocols. But: this relies critically on the accuracy of the model.
&gt; (Specifically, does it match the censor's model? If he uses simple
&gt; regular expressions for blocking, then we win; if not, then we probably
&gt; lose.)

Not quite.  If the language your syntactic model was based on is
accepted by the particular regular expressions that the censor is
currently using, you win (until They change to new regexps).
Otherwise, you lose.

For example, &lt;https://code.google.com/p/appid/source/browse/trunk/apps/irc&gt;
accepts "UseR :BOGUS line containing only a username with too many
spaces\n\n\n\n\n\r", but no real IRC client will generate "UseR" (or
the other protocol violation on that line).  If They are using appid
with that particular protocol-recognition file, you win; if They
validate IRC using better regexps, you lose.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120728172045</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-28 17:20:45-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming about steganographic transports</subject><body>

On Wed, Jul 25, 2012 at 11:56 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 7/26/12, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt;
&gt;&gt; We can use appid-like signatures to make steganographic channels, if we
&gt;&gt; assume that the signatures are a realistic reflection of actual use of
&gt;&gt; the protocols. But: this relies critically on the accuracy of the model.
&gt;&gt; (Specifically, does it match the censor's model? If he uses simple
&gt;&gt; regular expressions for blocking, then we win; if not, then we probably
&gt;&gt; lose.)
&gt;
&gt; Not quite.  If the language your syntactic model was based on is
&gt; accepted by the particular regular expressions that the censor is
&gt; currently using, you win (until They change to new regexps).
&gt; Otherwise, you lose.

Some aspects of the wire traffic generated by any given protocol are
going to be wholly defined by the protocol specification (including
errata and "everyone does it this way" spackle).  Other aspects can
vary depending on higher-level input to the protocol.  It might be
useful to decompose your arithmetic-coding output model into two
stages: do the generation of said 'higher-level input'
probabilistically, then use an actual implementation of the cover
protocol to produce the fixed components.

Here's another example from StegoTorus: Right now the HTTP request
generator stuffs arbitrary base64-encoded data into the Cookie:
header, making sure to insert equals signs and semicolons to make it
syntactically valid. This isn't _wrong_ per se, because JavaScript
running on the client side can manipulate the cookies to be sent with
the next request, but it is _abnormal_: most cookie-using sites send
down a Set-Cookie header with the first page load and then the browser
will send exactly that string back on all subsequent requests.  I
doubt one could detect this with regexps, but I'm sure I could do it
with a support vector machine or something like that.  (And then we
get to have the argument about what, exactly, DPI boxen are capable
of.)

If we were using an actual implementation of HTTP we would not have
gone down this road in the first place because the client API makes
clear where you do and do not get to stick your payload.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120620093142</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-06-20 09:31:42-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

Follows the second report.

Still working on packaging, lots of improvements done on the osx side,
where thanks to mogui (m4rduk) we reached an apaf application bar.
Packaging on debian works (see branch:debian), but I hope to discuss
possible errors with weasel in a few days.
I've also installed python and twisted on my android phone, but
psutils, a dependency of txtorcon, is a wall for porting apaf into
android. It would be awesome if the apaf project could run also on a
mobile device: smartphones nowadays are really cheap, small and can
suit perfectly the need of a small domestic web server.

Server-side: following hellais' suggestion, I've added cyclone as
dependency and started defining a json api, leaving the interface, at
least for now, unchanged. In fact, as discussed on irc, we cannot
simply make a js interface, without support old, legacy browsers.
Right now the api simply consists in: get/edit configuration and get
services informations (name, port, hiddenservice, etc.).

Unit testing: none.


-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120620152425</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2012-06-20 15:24:25-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

"=?UTF-8?Q?Michele_Orr=C3=B9?=" &lt;maker.py@gmail.com&gt; writes:

&gt; I've also installed python and twisted on my android phone, but
&gt; psutils, a dependency of txtorcon, is a wall for porting apaf into
&gt; android.

That used to be an optional dependency, so I will put that code back
in (actually, probably just take out the dependency for psutils and
report PIDs instead). It's really just "nice to have" anyway and
users who want that could of course easily do it themselves.

thanks,

-- 
mike
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731163534</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-07-31 16:35:34-0400</timestampReceived><subject>[tor-dev] [Stegotorus] chop server to client handshake and the url dictionary</subject><body>

Hey Zack,

I'm working on changing how client sends info to the server for
ApachePayloadServer, according to our discussion. This is how
it's going to be for now. The server sends a list of file in some
order to the client at the begining of the conversation. The client
will send its coded request by chosing a url a from the list and a
parameter that it sends to that file such as:

/groups/watch.cgi?param=QTwFt25

For this I need to send the list of files somewhere to the client. I
looked at the paper and paper says that on a new link the server will
send a reply to the handshake of the client with ECDH data. I thought
there would be a good place to send these data as well. Unfortunately
I couldn't spot that in the code. Could you please tell me where that
is happening?

Another option is to assign an opcode to this operation, and when the
client receive that opcode then, it will process the packet differntly
rather than just write its content in upstream event buffer.

For now I suppose that the client has the list and write the code from
that point till you give me more info.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120620155454</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-20 15:54:54-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

&gt; I've also installed python and twisted on my android phone, but
&gt; psutils, a dependency of txtorcon, is a wall for porting apaf into
&gt; android.

Hi Michele. It looks like txtorcon is trying to make psutil an
optional dependency...

txtorcon/util.py
 31 try:
 32     import psutil
 33     process_factory = psutil.Process
 34 except ImportError:
 35     process_factory = int
  ...
 82 def process_from_address(addr, port, torstate=None):
  ...
 91     If psutil isn't installed, the PIDs are returned instead of
 92     psutil.Process instances.

Though torstate.py doesn't have this sort of fallback...

txtorcon/torstate.py
  2 import psutil
  ...
292     def guess_tor_pid(self, *args):
293         if self.protocol.is_owned:
294             self.tor_pid = self.protocol.is_owned
295
296         else:
297             self.tor_pid = 0
298             try:
299                 procs = filter(lambda x: x.name.startswith(self.tor_binary),
300                                psutil.get_process_list())
301                 if len(procs) == 1:
302                     self.tor_pid = procs[0].pid
303             except psutil.AccessDenied:
304                 pass

Considering that the method's name is "guess_tor_pid" it sounds like
it should be best-effort, and fail gracefully if psutil is
unavailable. It might be worth asking if this is a bug.

Personally I decided to write my own modules for this functionality
[1] (including some improvements based on psutil [2]) because a C
module dependency didn't feel worth this functionality - especially
since pid lookup is a one-time thing, and doesn't need to be blazingly
fast.

Cheers! -Damian

[1] https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/util/system.py
[2] https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/util/proc.py
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120620160144</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-20 16:01:44-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

On 6/20/12 5:54 PM, Damian Johnson wrote:
&gt; Personally I decided to write my own modules for this functionality
&gt; [1] (including some improvements based on psutil [2]) because a C
&gt; module dependency didn't feel worth this functionality - especially
&gt; since pid lookup is a one-time thing, and doesn't need to be blazingly
&gt; fast.

Eh... if only tor was also available for use "as software library" (Like
silvertunnel &amp; OrLib), we would a lot of less "system integration
complexity"!

There's a lot of effort in many project on "Tor integration hacks" to
use it for application integration requirements.

Imho Tor should before or later really provide clear and standard
guidance and path for integration in 3rd party applications:

- API to build tor within an application
- API to do basic operations on Tor
- Generalized Filesystem I/O (to keep all data, from configuration to
hidden services up to descriptors in memory and/or in a database)

So that "anonymity" feature can be plugged in to existing applications,
like it is possible to plug SSL or OTR in a Chat client.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120620170430</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-20 17:04:30-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

&gt; Eh... if only tor was also available for use "as software library" (Like
&gt; silvertunnel &amp; OrLib), we would a lot of less "system integration
&gt; complexity"!

Actually, tor *does* provide the pid. I added it a year or two back
because getting it via psutil, proc, or system utilities all had
drawbacks...
https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt#l646

The only reason that stem still has pid lookup utilities is so that we
can get the pid *before* connecting to tor, as a workaround for a
longstanding tor bug...
https://trac.torproject.org/4881

... this is now fixed in 0.2.3.11, but before that TBB provided a
relative path for its authentication cookie making it a big pita for
controllers to attach. I needed the pid in order to look up the cwd,
so I could expand the cookie path.

On first glance txtorcon seems to be using psutil as a fallback for
when 'GETINFO process/pid' is unavailable.

That said, there's lots of other useful information that it would be
nice for the control socket to provide (cpu/memory usage and
connection information are high on my wish list).

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120708121920</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-07-08 12:19:20-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry for being so late, but as anticipated on the irc channel, I spent
most of the last week as talk manager at Europython. During, the free time
I've had the occasion to meet lots of developers of the tor community
joining the tordev meeting before and during the hackfest.
Concerning the project, I've organized some new cool features for services,
such as the configuration class which should help the customization.
Backend apis are almost finished - authentication, tor controlport, panel
configuration- and covered with unit tests.
There is a new dependency, pyCrypto, used for generating safely random
ports on which the service should listen to on each run; I think it will be
useful also for future utilities exposed from the apaf itself, as toolkit
for services.
I hope to merge those changes with the platform-specific modules, so that
after midterm evaluations I can work on the frontend side. Anybody wanting
to help with graphics?

Apologizing,
 Il giorno 21/giu/2012 07:41, "meejah" &lt;meejah@meejah.ca&gt; ha scritto:

&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA1
&gt;
&gt; meejah &lt;meejah@meejah.ca&gt; writes:
&gt;
&gt; &gt; That used to be an optional dependency, so I will put that code back
&gt; &gt; in (actually, probably just take out the dependency for psutils and
&gt; &gt; report PIDs instead). It's really just "nice to have" anyway and
&gt; &gt; users who want that could of course easily do it themselves.
&gt;
&gt; I've just pushed version 0.5 which removes psutil dependencies.
&gt;
&gt; Thanks,
&gt;
&gt; - --
&gt; mike
&gt; -----BEGIN PGP SIGNATURE-----
&gt; Version: GnuPG v1.4.12 (GNU/Linux)
&gt;
&gt; iQEcBAEBAgAGBQJP4rGjAAoJEMJgKAMSgGmnWNUH/iyuxOC8jElse8Bb/74id6mM
&gt; kRvg6QB0BhZEv4XBsXoQJAZ292CvvUqNdlnyUDibeksFv4DGfserHOKV/U41Y28b
&gt; zEndr9WE8fgmRPHWOBJpB5GPSBqn/GcE8Ohmc+PskpvK6UpS8vzF+OwpH8mU31Vb
&gt; E1kEW+9NL44Jn7mXB9Z2A7nQJyhcy+LKYTUr0xg1dEoqLx0m72nuFgLbkTjvI1yU
&gt; C+uhP3fp3Gnm1C2jqq9DL2bJLvOahNNou9n1T8SByz1jFClG8ThyJEt0yZyGdRHa
&gt; kcN2QPRgWk4fUcZOQ4nRR9WEmyVDHc0mGpGX6FX6uT3Wj4FtX8KPbJ5vWgvbVKw=
&gt; =BMR2
&gt; -----END PGP SIGNATURE-----
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;p&gt;Sorry for being so late, but as anticipated on the irc channel, I spent most of \
the last week as talk manager at Europython. During, the free time I've had the \
occasion to meet lots of developers of the tor community joining the tordev meeting \
before and during the hackfest.&lt;br&gt;

Concerning the project, I've organized some new cool features for services, such \
as the configuration class which should help the customization. Backend apis are \
almost finished - authentication, tor controlport, panel configuration- and covered \
with unit tests. &lt;br&gt;

There is a new dependency, pyCrypto, used for generating safely random ports on which \
the service should listen to on each run; I think it will be useful also for future \
utilities exposed from the apaf itself, as toolkit for services.&lt;br&gt;

I hope to merge those changes with the platform-specific modules, so that after \
midterm evaluations I can work on the frontend side. Anybody wanting to help with \
graphics?   &lt;/p&gt; &lt;p&gt;Apologizing,&lt;br&gt;
&lt;/p&gt;
&lt;div class="gmail_quote"&gt;Il giorno 21/giu/2012 07:41, "meejah" &lt;&lt;a \
href="mailto:meejah@meejah.ca"&gt;meejah@meejah.ca&lt;/a&gt;&gt; ha scritto:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
                .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;
-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;
Hash: SHA1&lt;br&gt;
&lt;br&gt;
meejah &lt;&lt;a href="mailto:meejah@meejah.ca"&gt;meejah@meejah.ca&lt;/a&gt;&gt; writes:&lt;br&gt;
&lt;br&gt;
&gt; That used to be an optional dependency, so I will put that code back&lt;br&gt;
&gt; in (actually, probably just take out the dependency for psutils and&lt;br&gt;
&gt; report PIDs instead). It's really just "nice to have" anyway \
and&lt;br&gt; &gt; users who want that could of course easily do it themselves.&lt;br&gt;
&lt;br&gt;
I've just pushed version 0.5 which removes psutil dependencies.&lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
&lt;br&gt;
- --&lt;br&gt;
mike&lt;br&gt;
-----BEGIN PGP SIGNATURE-----&lt;br&gt;
Version: GnuPG v1.4.12 (GNU/Linux)&lt;br&gt;
&lt;br&gt;
iQEcBAEBAgAGBQJP4rGjAAoJEMJgKAMSgGmnWNUH/iyuxOC8jElse8Bb/74id6mM&lt;br&gt;
kRvg6QB0BhZEv4XBsXoQJAZ292CvvUqNdlnyUDibeksFv4DGfserHOKV/U41Y28b&lt;br&gt;
zEndr9WE8fgmRPHWOBJpB5GPSBqn/GcE8Ohmc+PskpvK6UpS8vzF+OwpH8mU31Vb&lt;br&gt;
E1kEW+9NL44Jn7mXB9Z2A7nQJyhcy+LKYTUr0xg1dEoqLx0m72nuFgLbkTjvI1yU&lt;br&gt;
C+uhP3fp3Gnm1C2jqq9DL2bJLvOahNNou9n1T8SByz1jFClG8ThyJEt0yZyGdRHa&lt;br&gt;
kcN2QPRgWk4fUcZOQ4nRR9WEmyVDHc0mGpGX6FX6uT3Wj4FtX8KPbJ5vWgvbVKw=&lt;br&gt;
=BMR2&lt;br&gt;
-----END PGP SIGNATURE-----&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120708201829</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-08 20:18:29-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

On 7/8/12 2:19 PM, Michele Orr=F9 wrote:
&gt; Sorry for being so late, but as anticipated on the irc channel, I spent
&gt; most of the last week as talk manager at Europython. During, the free
&gt; time I've had the occasion to meet lots of developers of the tor
&gt; community joining the tordev meeting before and during the hackfest.
&gt; Concerning the project, I've organized some new cool features for
&gt; services, such as the configuration class which should help the
&gt; customization. Backend apis are almost finished - authentication, tor
&gt; controlport, panel configuration- and covered with unit tests.
&gt; There is a new dependency, pyCrypto, used for generating safely random
&gt; ports on which the service should listen to on each run; I think it will
&gt; be useful also for future utilities exposed from the apaf itself, as
&gt; toolkit for services.
&gt; I hope to merge those changes with the platform-specific modules, so
&gt; that after midterm evaluations I can work on the frontend side. Anybody
&gt; wanting to help with graphics? =


What are we missing as graphics elements?

Making a list of the ones for which ideas had come out during time,
which are made / need to be made / need to be documented?

- Application Icon Windows / OSX:

- Dock Icon / Menu OSX:

- System Tray / Menu Windows:

- Splash Screen Windows/OSX:

- DMG Packaging Finder/Background Icon OSX:

- Embedded Browser for App UI (Windows / OSX):


-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711182655</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-07-11 18:26:55-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

&gt;
&gt; What are we missing as graphics elements?
&gt;
&gt; Making a list of the ones for which ideas had come out during time,
&gt; which are made / need to be made / need to be documented?
&gt;
&gt; - Application Icon Windows / OSX:
&gt;
&gt; - Dock Icon / Menu OSX:
&gt;
&gt; - System Tray / Menu Windows:
&gt;
&gt; - Splash Screen Windows/OSX:
&gt;
&gt; - DMG Packaging Finder/Background Icon OSX:
&gt;
&gt; - Embedded Browser for App UI (Windows / OSX):

Well, right now the most important graphic elements are system tray
icons, bot for windows and osx. Since I will develop the frontend side
of the apaf ater midterm evaluation, I think that is fine with these
now.
Otherwise, may I take vidalia's ones? At least until something comes up :)


-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120713073801</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-13 07:38:01-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

On 7/11/12 8:26 PM, Michele Orr=F9 wrote:
&gt; Well, right now the most important graphic elements are system tray
&gt; icons, bot for windows and osx. =

For icons it will be very important also to provide a clear
documentation on which format must be used and how to process an
existing image to convert that to create the overall sets of icons
required (the one of the application, the one for windows system tray,
the one for dock, etc) and/or provide a facility that you provide a
single image and it will automatically convert to the proper format for
all the elements on all the platforms.

&gt; Since I will develop the frontend side
&gt; of the apaf ater midterm evaluation, I think that is fine with these
&gt; now.

If we can also implement Splash Screen, with it's own progress bar for
Startup progress, it would complete the most relevant UI elements
"directly perceived" by the end-user, at installation time and at each
start.

The "progress bar" below the "splash screen" maybe also very useful to
let end-user report errors/diagnose issues with the application startup?

&gt; Otherwise, may I take vidalia's ones? At least until something comes up :)

May we ask Mogui to implement OSX specific stuff that he like a lot ?:
- DMG packaging Finger/Background
- Embedded Browser for OSX (Hellais committed some experimental code?)

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120719155701</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-07-19 15:57:01-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

Here are some updates about the APAF project.

The only thing left to do concerning APAF's REST APIs is to wrap and
secure tor control port calls for providing the user's current status
of anonymity.

Builds for debian are ok, both when generating the .deb and when
installing with pip.
OSx has its own .app, system tray icon, and the embedded browser which
acts just like a simple application window.
Window still has a non-working system tray (there's something wrong
between the win32 gui thread and twitsted reactor), but I have a
single executable, which eventually spits out the datadir/ directory
by itself (see apaf.blobber).

I've performed some cleanup, and reorganized each platform's main in
such a way that the relative module is dynamically imported.

During the next few days, I am going to work on the frontend part, and
fix builds for windows.

-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120728095642</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-07-28 09:56:42-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo Descriptors</subject><body>

Hi,

&gt;&gt; We were
&gt;&gt; wondering what some of the entries might look like so we would be able to
&gt;&gt; see what information was being parsed to fill in some of the fields such as
&gt;&gt; the bandwidth handler's "write_history" and "read_history". We noticed that
&gt;&gt; the router descriptor format includes "write_history" and "read_history"
&gt;&gt; according to torspec but again, we aren't too sure on what these entries
&gt;&gt; look like.

If you want some sample summary, bandwidth, or details documents to
see see how they look like, I can send you the ones I got from Karsten
during the Tor dev meeting.

&gt;&gt; Also, we don't know how to approach the fields in the details
&gt;&gt; handler that require GeoIP information. Any tips on this?
&gt;
&gt; Onionoo uses Maxmind's Java API, their GeoIP database, and their AS
&gt; database to resolve IP addresses to country/AS information.  There's a
&gt; Python API, too, which I think Sathya used for his network entropy code:
&gt;
&gt; https://gitweb.torproject.org/metrics-tasks.git/tree/HEAD:/task-6232/pygeoip

Here is the Python API for parsing the GeoIP database:
http://appliedsec.github.com/pygeoip/

Although, I'm not entirely sure why the web service part of pyonionoo
would have to parse GeoIP data or calculate bandwidth histories?

Also, I have a ticket to track the progress of the pyonionoo backend
in case anyone's interested:
https://trac.torproject.org/projects/tor/ticket/6452

Thanks!
-Sathya
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120726025049</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-07-26 02:50:49-0400</timestampReceived><subject>Re: [tor-dev] Why change the bridges.torproject.org website to avoid to get bridges by script?</subject><body>

??Phoenixing:
&gt; Hi     I live in a country which it block the tor net strictly! Only I can do is \
&gt; that I get the bridges from the website. I just want  to get the bridges \
&gt; automaticly by writing a script. But now I must get the bridges hand by hand and \
&gt; one by one. It's more uncomfortable! Could you change it back? 
&gt; best regards!
&gt; 

Please feel free to share your script with the rest of the list. :)

All the best,
Jacob

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120718054804</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-07-18 05:48:04-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

On Thu, Jul 12, 2012 at 03:12:22PM +0200, Karsten Loesing wrote:
&gt; Hi Roger, hi Nick,
&gt; 
&gt; here are the first five metrics tech reports that I'd like to turn into
&gt; Tor tech reports (see #5405 for the idea behind this).  If you agree
&gt; that this is a good idea, I'll push the sources to tech-reports.git and
&gt; put the PDFs on the Tor website.

Sounds good. Though I see on
https://trac.torproject.org/projects/tor/ticket/6380
that we're now thinking of putting them somewhere other than the Tor
website. Sounds fine too.

&gt;  I need your confirmation for each
&gt; report as part of the process, though.

Creating a new process where I'm the artificial bottleneck seems unwise.

How about only asking me when you're unsure? And being willing to ask
people other than me also? :)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718151247</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-18 15:12:47-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

On Thu, Jul 12, 2012 at 6:12 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; here are the first five metrics tech reports that I'd like to turn into
&gt; Tor tech reports (see #5405 for the idea behind this).

I'd like to offer some typographical improvements -- it looks like
these are being generated with mostly default LaTeX settings, which
are not great for PDFs that people will mostly read online.  Some of
the graphs are also very hard to read (dashed lines don't work very
well for plots that jump up and down a lot).

I see that there is a git repository for the sources, can I just clone
it, make changes, and put the diffs somewhere?  What would be most
convenient for you?

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718170530</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-18 17:05:30-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

On 7/18/12 5:12 PM, Zack Weinberg wrote:
&gt; On Thu, Jul 12, 2012 at 6:12 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt; here are the first five metrics tech reports that I'd like to turn into
&gt;&gt; Tor tech reports (see #5405 for the idea behind this).
&gt; 
&gt; I'd like to offer some typographical improvements -- it looks like
&gt; these are being generated with mostly default LaTeX settings, which
&gt; are not great for PDFs that people will mostly read online.

Oh, that would be very useful.  Maybe we can come up with a template for
all Tor tech reports.

&gt; Some of
&gt; the graphs are also very hard to read (dashed lines don't work very
&gt; well for plots that jump up and down a lot).

Right.  There's always the trade-off between using colored graphs which
don't go well when printed and dashed/dotted lines which are at least
equally useful on screen and on paper.  I'm open to suggestions there.
(Note that the graph sources are in a different Git repository than the
LaTeX sources.)

&gt; I see that there is a git repository for the sources, can I just clone
&gt; it, make changes, and put the diffs somewhere?  What would be most
&gt; convenient for you?

I just committed the LaTeX sources of these reports very quickly to my
new public tech-reports repository:

https://gitweb.torproject.org/user/karsten/tech-reports.git

If you can clone the branch and put yours somewhere from where I can
pull, that would work best.  git format-patch also works fine.

Once reports are ready for "publication", I'll merge things into the
official tech-reports.git repo.

Thanks!
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120719083123</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-19 08:31:23-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

On 7/18/12 7:48 AM, Roger Dingledine wrote:
&gt; On Thu, Jul 12, 2012 at 03:12:22PM +0200, Karsten Loesing wrote:
&gt;&gt; Hi Roger, hi Nick,
&gt;&gt;
&gt;&gt; here are the first five metrics tech reports that I'd like to turn into
&gt;&gt; Tor tech reports (see #5405 for the idea behind this).  If you agree
&gt;&gt; that this is a good idea, I'll push the sources to tech-reports.git and
&gt;&gt; put the PDFs on the Tor website.
&gt; 
&gt; Sounds good. Though I see on
&gt; https://trac.torproject.org/projects/tor/ticket/6380
&gt; that we're now thinking of putting them somewhere other than the Tor
&gt; website. Sounds fine too.

Okay.

&gt;&gt;  I need your confirmation for each
&gt;&gt; report as part of the process, though.
&gt; 
&gt; Creating a new process where I'm the artificial bottleneck seems unwise.
&gt; 
&gt; How about only asking me when you're unsure? And being willing to ask
&gt; people other than me also? :)

Works for me.  New reports will go to tor-dev prior "publication"
anyway, and if you don't think they should be Tor tech reports, you can
object there.  And even after that, we can always kill existing reports
from the Git repo and pretend it never happened. :)

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120721001318</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-21 00:13:18-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

On Wed, Jul 18, 2012 at 10:05 AM, Karsten Loesing
&lt;karsten@torproject.org&gt; wrote:
&gt; On 7/18/12 5:12 PM, Zack Weinberg wrote:
&gt;&gt; On Thu, Jul 12, 2012 at 6:12 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt;&gt; here are the first five metrics tech reports that I'd like to turn into
&gt;&gt;&gt; Tor tech reports (see #5405 for the idea behind this).
&gt;&gt;
&gt;&gt; I'd like to offer some typographical improvements -- it looks like
&gt;&gt; these are being generated with mostly default LaTeX settings, which
&gt;&gt; are not great for PDFs that people will mostly read online.
&gt;
&gt; Oh, that would be very useful.  Maybe we can come up with a template for
&gt; all Tor tech reports.

I have put together a suggested template as tortechrep.cls (it builds
on the standard article.cls) and updated all five of your tech reports
to use it.  I also made some very small adjustments to some of the
content (notably the bridge descriptor listings).

You can get it from https://gitweb.torproject.org/user/zwol/tech-reports.git .

The biggest bikeshed in here is probably the font selection.  I picked
something that looks good to me and should be comprehensively
supported in recent TeX Live, but the only thing I feel like
_insisting_ on about the fonts is "not Computer Modern."

&gt; Right.  There's always the trade-off between using colored graphs which
&gt; don't go well when printed and dashed/dotted lines which are at least
&gt; equally useful on screen and on paper.  I'm open to suggestions there.

I liked the varying shades of gray solid line that were in a different
report.  (Some of those graphs also use dotted lines, but there's only
one *kind* of dotted line and it's used for something that's not
terribly zigzaggy, so it's probably OK.)

&gt; (Note that the graph sources are in a different Git repository than the
&gt; LaTeX sources.)

Where do I find them?  I have a fair bit of experience with ggplot2
and would like to experiment (may not be able to do so promptly,
though).

If you change nothing else about the graphs, please redo the bitmap
(PNG) graphs in bridge-blockings with vector graphics (PDF) instead.

I'd also encourage you to experiment with tikzDevice; it's nice when
the graphs are font-consistent with the main text, and using tikz
gives you that for free.  Also R's PDF output is frankly pretty awful
(most significantly, it doesn't embed any fonts, which makes some
publishers very unhappy with you).  tikzDevice _can_ generate output
that is painfully slow to compile through TeX, but I don't think these
graphs will have that problem.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120722110857</emailId><senderName>"Salva ."</senderName><senderEmail>cybero@hotmail.es</senderEmail><timestampReceived>2012-07-22 11:08:57-0400</timestampReceived><subject>[tor-dev] hide my site in clearweb</subject><body>

[Attachment #2 (multipart/alternative)]


Hello, I have launched a website in TOR and I can access it through the .onion \
address and also typing the ip of my server in my brower.I want my site was only \
accessible from TOR and not through clearweb, how can I solve it ? Thank you guys. 		 \
  


[Attachment #5 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;style&gt;&lt;!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--&gt;&lt;/style&gt;&lt;/head&gt;
&lt;body class='hmmessage'&gt;&lt;div dir='ltr'&gt;
&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hello, I have launched a website in TOR and I can \
access it through the .onion address and also typing the ip of my server in my \
brower.&lt;div&gt;I want my site was only accessible from TOR and not through clearweb, how \
can I solve it ?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you guys.&lt;/div&gt; 		 	   		  &lt;/div&gt;  \
&lt;/div&gt;&lt;/div&gt; 		 	   		  &lt;/div&gt;&lt;/body&gt; &lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120722232600</emailId><senderName>Kevin Evans</senderName><senderEmail>hello@kevinevans.name</senderEmail><timestampReceived>2012-07-22 23:26:00-0400</timestampReceived><subject>Re: [tor-dev] hide my site in clearweb</subject><body>

You can only allow the site to be accessed 127.0.0.1.

On Sun, Jul 22, 2012 at 4:08 AM, Salva . &lt;cybero@hotmail.es&gt; wrote:
&gt; Hello, I have launched a website in TOR and I can access it through the
&gt; .onion address and also typing the ip of my server in my brower.
&gt; I want my site was only accessible from TOR and not through clearweb, how
&gt; can I solve it ?
&gt;
&gt; Thank you guys.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120715135513</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@extc.org</senderEmail><timestampReceived>2012-07-15 13:55:13-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

On Sun, Jul 15, 2012 at 12:56 PM, Arturo Filast=F2 &lt;art@torproject.org&gt; wro=
te:
&gt; * No resume support (this can be implemented on top of HTTP, we could
&gt; even implement the rsyc algorithm
&gt; on top of HTTP).

Are you sure HTTP doesn't support resume? What does wget -c do?

&gt; Thoughts?
&gt;
&gt; - Art.
&gt;
&gt; [1] https://github.com/isislovecruft/pyrsync
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120715135811</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-07-15 13:58:11-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

Aaron:
&gt; On Sun, Jul 15, 2012 at 12:56 PM, Arturo Filast=F2 &lt;art@torproject.org&gt; w=
rote:
&gt;&gt; * No resume support (this can be implemented on top of HTTP, we could
&gt;&gt; even implement the rsyc algorithm
&gt;&gt; on top of HTTP).
&gt; =

&gt; Are you sure HTTP doesn't support resume? What does wget -c do?
&gt; =


I believe this requires the HTTP: range header and it doesn't provide
the integrity checking that rsync provides.

All the best,
Jake


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120715141345</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2012-07-15 14:13:45-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

&gt; Contra:
&gt; * No support for deltas (we can use rsych protocol over HTTP if we
&gt; really need this).

It's a little hackish, but I believe there is a 'standard' way to do
this in HTTP also.  A client issues a GET (or PUT) request to a
resource, and recieves an Etag that identifies this version of the
object.  The client then issues a PATCH Request to update the object,
sending the Etag, and either structured XMLor JSON with the fields to
replace, or binary data with a Range header indicating where in the
object to replace.

If the Etag the client sent is the object stored on the server, the
PATCH succeeds and overwrites the data. If the Etag does not match,
the client is out of date and must issue a GET, resolve differences,
and then the PATCH.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120715141538</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-07-15 14:15:38-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

On 7/15/12 3:58 PM, Jacob Appelbaum wrote:
&gt;&gt; Are you sure HTTP doesn't support resume? What does wget -c do?
&gt;&gt;
&gt; 
&gt; I believe this requires the HTTP: range header and it doesn't provide
&gt; the integrity checking that rsync provides.

It maybe also an application HTTP parameters that contain the last
offset of the specific data-set download, so that the server would seek
to that offset and start sending data up to that point?

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120716001555</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-07-16 00:15:55-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

[Attachment #2 (multipart/signed)]


On 07/15/2012 02:56 PM, Arturo Filastò wrote:
&gt; I would like to follow up on the discussion we had in Florence on some
&gt; design choices behind OONIB.
&gt; 
&gt; In particular the most controversy was around using HTTP or rsync.

[...]

&gt; # What properties we would like it to have
&gt; note: these are not ordered.
&gt; 
&gt; * Efficient even over high latency networks.
&gt; 
&gt; * Ease of integration for third party developers.
&gt; 
&gt; * Expandable to support requirements of new tests we develop.
&gt; 
&gt; * Anonymous
&gt; 
&gt; * Secure

Even though you will probably not end up using this, it may be a good idea to
know that it exists:

ZeroC Ice - http://www.zeroc.com/ice.html

It's a middleware platform for building exactly this kind of distributed
services. Many supported languages (C++/Python/Ruby/Java/...) and OSes
(Mac/Lin/Win/Android/...)

It might seem difficult or "enterprisey", but it's simple for simple things
(like RPC) and complicated only when you want complicated things (have look at
demo programs).

It can optionally use TLS, interface definition for RPC and structures is
written only once (each language binding then loads it and maps it to native
object of its own as "usual" method calls or attributes).

Advanced features include asynchronous calls, at-most-once semantics (it can
retry RPC call for methods that are marked "idempotent", i.e. whose multiple
invocation is same as one invocation), persistence via Ice Freeze (might work
for the file storage, not sure how big are your files, internally it's
implemented on top of BerkeleyDB), forward/backward compatibility among versions
of your API (up to a limit)...

Disadvantages:

- you'll have one more library blob to carry around (though Ice is in default
Debian/Ubuntu repos and official RPM repos are available; core lib is about 3MB
large)
- GPL licensed (might conflict with other libraries' licenses)
- certainly not as simple as GET/POST request

It's probably the most sane "generic" middleware/RPC platform I've seen and I've
worked with a bunch of them - RESTful APIs, variants of XML-RPC, monsters like
webservices/SOAP and CORBA (it always starts with "I just need this simple
thing" and ends with "how do I hack this onto the existing API so that old
clients end existing infrastructure won't break?")

Ondrej


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120717200833</emailId><senderName>Isis</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2012-07-17 20:08:33-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Mon 16 Jul 2012 at 02:15, thus spake Ondrej Mikle:
&gt; On 07/15/2012 02:56 PM, Arturo Filastò wrote:
&gt; &gt; 
&gt; &gt; # What properties we would like it to have
&gt; &gt; note: these are not ordered.
&gt; &gt; * Efficient even over high latency networks.
&gt; &gt; * Ease of integration for third party developers.
&gt; &gt; * Expandable to support requirements of new tests we develop.
&gt; &gt; * Anonymous
&gt; &gt; * Secure
&gt; 
&gt; Even though you will probably not end up using this, it may be a good idea to
&gt; know that it exists:
&gt; 
&gt; ZeroC Ice - http://www.zeroc.com/ice.html

I took a breif look at it and it does actually look quite nice...

I'm about half convinced, but am also rather inexperienced with designing
distributed, secure, anonymous, multi-platform, scalable RPC systems. ugh...I
think that string of buzzwords just made me puke in my mouth a little bit.

&gt; It might seem difficult or "enterprisey", but it's simple for simple things
&gt; (like RPC) and complicated only when you want complicated things (have look at
&gt; demo programs).

Oh man. It's not Twisted, that's for sure. :)

Though, it seems that much of Ice is redundant if we are already packaging
Twisted. Perhaps we could use their code as reference, and just write out the
methods we need in Twisted to avoid the extra dependency?

&gt; It can optionally use TLS, interface definition for RPC and structures is
&gt; written only once (each language binding then loads it and maps it to native
&gt; object of its own as "usual" method calls or attributes).
&gt; 
&gt; Advanced features include asynchronous calls, at-most-once semantics (it can
&gt; retry RPC call for methods that are marked "idempotent", i.e. whose multiple
&gt; invocation is same as one invocation), persistence via Ice Freeze (might work
&gt; for the file storage, not sure how big are your files, internally it's
&gt; implemented on top of BerkeleyDB), forward/backward compatibility among versions
&gt; of your API (up to a limit)...
 
Becoming more convinced. Do you know off the top of your head which protocol
it uses? HTTP also, I would assume?

Side note: What are we going to do for countries which block/monitor/MITM SSL
connections? If I'm not mistaken, hasn't it been the case that these places
have still allowed ssh? Should we have some sort of append-only scp-like
fallback? Does Ice have that?

&gt; Disadvantages:
&gt; 
&gt; - you'll have one more library blob to carry around (though Ice is in default
&gt; Debian/Ubuntu repos and official RPM repos are available; core lib is about 3MB
&gt; large)

Ah, yes, but if you use just the Python libraries, it looks like the size
ranges from 600kb for Debian to uh...actually I can't find anywhere which has
just the Python libraries for Windows. The largest size for a Linux distro
does look to be about 3MB, you're right.

&gt; - GPL licensed (might conflict with other libraries' licenses)
&gt; - certainly not as simple as GET/POST request
&gt; 
&gt; It's probably the most sane "generic" middleware/RPC platform I've seen and I've
&gt; worked with a bunch of them - RESTful APIs, variants of XML-RPC, monsters like
&gt; webservices/SOAP and CORBA (it always starts with "I just need this simple
&gt; thing" and ends with "how do I hack this onto the existing API so that old
&gt; clients end existing infrastructure won't break?")


&lt;(A)3
isis agora lovecruft
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBCAAGBQJQBcZBAAoJEKOttnos24s1clgQALtU3XKp1DnU8eqDsi3xFuo7
FpzR4M9ZEcoMBBbEyP6999TynZTMbFT5ISwR8u0U/9rlTK4fJw5CxuyLwk93/W+K
zS9Cv1wMVhXKefpIhl+6LHa1oeSzAnNThzAZtKaA2eWQgaTC21fCn7CSa1RCX3NT
v8B9cEiZtnQwXGl83b0zUmUwYy3f9X62Lmag2DZNzOM4QKtyPDeqQQ/SDPvttzl2
k0ZuaIvSFXjR/WhuL18mtzbL+azGeMz1Cs8mE+vI7UuiA353DAjiC9OhZAd6k9ut
eHVzU/eaa9v5TMIyuf70eoZRF7wKqY2Z+0L6hAxaT6p4ZRrdOWCw7O95qdmoBQWT
IttjTLV3y+msUp+Dsdy1gn6rCDTRPeRX5m0+5nY9eX4lDCyGdYf50mRKJ6DlMK3j
waZVJqJDtOf5tIhZBiBkDRWb4N669KCoca9TNtwCSiBaJgTorcTenGaW9Z73L3MA
6QlVfPj3GWqCXGqIoo9jaZkHI5V3zFd7he4+SPenHJyuWIFkqST867M5Zg6/1oJZ
A0Wi3KFgSdaAOB5M9KA49X6BlTeTyE3BBV+DTydEL0MsQ2ZWvwAxh/FchFw65Qm0
9tTyzi0ZSzDczXQGvz2hneJ1XQoxWX1NPcrWwZldOKrtb6wHbzoNz3gtY8G0FEF1
l+41r2JrBkQQTHcxlSEd
=ygcX
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120717200850</emailId><senderName>Isis</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2012-07-17 20:08:50-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256


On Sun 15 Jul 2012 at 10:13, thus spake Tom Ritter:
&gt; &gt; Contra:
&gt; &gt; * No support for deltas (we can use rsych protocol over HTTP if we
&gt; &gt; really need this).
&gt; 
&gt; It's a little hackish, but I believe there is a 'standard' way to do
&gt; this in HTTP also.  A client issues a GET (or PUT) request to a
&gt; resource, and recieves an Etag that identifies this version of the
&gt; object.  The client then issues a PATCH Request to update the object,
&gt; sending the Etag, and either structured XMLor JSON with the fields to
&gt; replace, or binary data with a Range header indicating where in the
&gt; object to replace.

While this is quite a clever use for Etags, I have to point out that there
would be no identity verification[0] in this scheme, in addition to Etags
being subject to birthday attack enumeration (even if we use a secure
hash). Therefore, Mallory, knowing the location of the OONIB server, can
simply compute many random Etags and issue a PATCH of a blank string to each
one, erasing all the collected data.
 
&gt; If the Etag the client sent is the object stored on the server, the
&gt; PATCH succeeds and overwrites the data. If the Etag does not match,
&gt; the client is out of date and must issue a GET, resolve differences,
&gt; and then the PATCH.

Mallory can also /GET...

Perhaps I am biased towards opposition to Etags merely because of their
nastier uses for tracking. I kind of wish they would be removed from the
protocol, and I don't want to create any legitimate use for them that might
deter their removal.

&lt;(A)3
isis agora lovecruft

[0] Identity verification in the "yes-this-is-the-same-client-as-before"
sense, not the "this-person-is-named-holger-and-they-live-in-osterreich"
sense.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBCAAGBQJQBcZSAAoJEKOttnos24s11WkQAIQj8lmm10bm4eiGsrcf0syb
v/j/+N9vYut4+EmDzgsTvVdpYA53IkVTVfZWs9kKuiUUTNJnjHqbTlF7UfUvzcxJ
EfWft+0N0sw8crqAHrENHPoNICLhU1cxxozYYAkGEkx8IOP8/W/WdOqTc49Ybzqz
yjUQuUUzLBg0QXY7S+3dPYEjjl+4RVNMzr9awCq97m/H102BXkkR5OC1cwL/gCsl
4FcgHMKP6SkZhIX+zs8MR9AP8ADp9x5uPTd2+nF+u6v0ri0NDdkrHqiQIRmpj42R
lvE1I0UZuFjhMZT3HEi2c0XP2KtfcncyBM/CISu4H26AO6KyOA3b6jmUwzkuGHjF
HubZKARU82bg+2bRzAiNrq/uEX1ni3NWLm/c/kziEF1G1RsA1Ghy9G5EnHPQ/PQF
npHBscHgnpYjiwKJmq4jdSByA8CrcGRdPrcJQQZN8WVa0wfvHn2jsi7a6J3cBGu8
uJ3dpVJrX9UMicV4o/q1iu5cS+piKHkOE5SeTKAySoNyIVMLJQU6zZhoQxLXhQxE
c7ZgYAMp4eZeROU8qeQ+A+7mDER83PjzYHr27JhFJ8Zg5+7v6IMcHc7qtbnL9VE2
fgEqgjkzkQnmT3k75daVql2zche9zfX3pEniUxYDCzZCv2T4zb/ysBTMuv0ktYxU
1lPJTfRx3Lyx42Zo9kxf
=CwCQ
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718144632</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-07-18 14:46:32-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

On 7/16/12 2:15 AM, Ondrej Mikle wrote:
&gt; On 07/15/2012 02:56 PM, Arturo Filast=F2 wrote:
&gt;&gt; I would like to follow up on the discussion we had in Florence on some
&gt;&gt; design choices behind OONIB.
&gt;&gt;
&gt;&gt; In particular the most controversy was around using HTTP or rsync.
&gt; [...]
&gt;
&gt;&gt; # What properties we would like it to have
&gt;&gt; note: these are not ordered.
&gt;&gt;
&gt;&gt; * Efficient even over high latency networks.
&gt;&gt;
&gt;&gt; * Ease of integration for third party developers.
&gt;&gt;
&gt;&gt; * Expandable to support requirements of new tests we develop.
&gt;&gt;
&gt;&gt; * Anonymous
&gt;&gt;
&gt;&gt; * Secure
&gt; Even though you will probably not end up using this, it may be a good ide=
a to
&gt; know that it exists:
&gt;
&gt; ZeroC Ice - http://www.zeroc.com/ice.html

There are a bunch of very fancy and nice libraries out there to do RPC like
things that support a variety of languages.

Another one I am very fond of is ZeroMQ, but I think we should not start
worrying
about supporting such advanced and scalable libraries at this time.

This is the reason why I stated at the beginning of the requirements
that we should
"so we will look at it as if it were running only on one central machine".

The scalability issues will be dealt with once we have properly defined
the problem
scope. Making the node communication rely on Zero(C|MQ) can be something
that we integrate
without having to require clients to change their behavior.

I think the overall feeling from the responses is that going for
something like an HTTP
RESTful API is what we are looking for.

HTTP is a well understood technology and I have quite some experience in
designing and
building RESTful APIs based on twisted (cyclone) and this is also what
is used in other [1]
projects [2] belonging [3] to the [4] Tor community [5].

Moreover by looking at how the reporting systems of other network
measurements tools
worked [5] we found that almost all of them used an HTTP API to collect
reports [6][7][8][9].
I see this as an indication that such a strategy is the best practice.

For the time being we should go for something simple like this and once
we encounter major
scalability/performance bottlenecks we can quantify them and figure out
what the best
path to a solution may be.

If you were the developer of a censorship detection tool would you like
to have to report
to anything that is not a RESTful HTTPs API?

- Art.

[1] https://github.com/mmaker/APAF
[2] https://github.com/gsathya/pyonionoo
[3] https://github.com/globaleaks/Tor2web-3.0
[4] https://github.com/globaleaks/GLBackend
[5]
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionT=
ools
[6]
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionT=
ools/Herdict#Howdoesthereportingsystemwork
[7]
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionT=
ools/Netalyzr#Howdoesthereportingsystemwork
[8]
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionT=
ools/NeuBot#Reportingsystem
[9]
https://trac.torproject.org/projects/tor/wiki/doc/OONI/CensorshipDetectionT=
ools/ProjectBismark#Reportingsystem


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718232059</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-07-18 23:20:59-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 07/17/2012 10:08 PM, Isis wrote:
&gt; On Mon 16 Jul 2012 at 02:15, thus spake Ondrej Mikle:
&gt;&gt; On 07/15/2012 02:56 PM, Arturo Filastò wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; # What properties we would like it to have note: these are not
&gt;&gt;&gt; ordered. * Efficient even over high latency networks. * Ease of
&gt;&gt;&gt; integration for third party developers. * Expandable to support
&gt;&gt;&gt; requirements of new tests we develop. * Anonymous * Secure
&gt; 
&gt;&gt; Even though you will probably not end up using this, it may be a good
&gt;&gt; idea to know that it exists:
&gt; 
&gt;&gt; ZeroC Ice - http://www.zeroc.com/ice.html
[...]
&gt; 
&gt; Oh man. It's not Twisted, that's for sure. :)
&gt; 
&gt; Though, it seems that much of Ice is redundant if we are already packaging 
&gt; Twisted. Perhaps we could use their code as reference, and just write out
&gt; the methods we need in Twisted to avoid the extra dependency?

If you are packaging/using Twisted, then yes, Ice is redundant (unless someone
planned to differentiate "signaling" from "data" protocol, for example).

&gt;&gt; It can optionally use TLS, interface definition for RPC and structures
&gt;&gt; is written only once (each language binding then loads it and maps it to
&gt;&gt; native object of its own as "usual" method calls or attributes).
&gt; 
&gt;&gt; Advanced features include asynchronous calls, at-most-once semantics (it
&gt;&gt; can retry RPC call for methods that are marked "idempotent", i.e. whose
&gt;&gt; multiple invocation is same as one invocation), persistence via Ice
&gt;&gt; Freeze (might work for the file storage, not sure how big are your files,
&gt;&gt; internally it's implemented on top of BerkeleyDB), forward/backward
&gt;&gt; compatibility among versions of your API (up to a limit)...
&gt; 
&gt; Becoming more convinced. Do you know off the top of your head which
&gt; protocol it uses? HTTP also, I would assume?

At low-level, it has its own protocol, it's not HTTP (it actually won't work
over HTTP).

&gt; Side note: What are we going to do for countries which block/monitor/MITM
&gt; SSL connections? If I'm not mistaken, hasn't it been the case that these
&gt; places have still allowed ssh? Should we have some sort of append-only
&gt; scp-like fallback? Does Ice have that?

Unfortunately, there's no fallback in Ice for that (its firewall-evading also
uses SSL/TLS which is not useful here). Maybe I misunderstood Arturo's
requirement that said TLS or TorHS was considered for encrypted/authenticated
transport.

Ondrej
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.14 (GNU/Linux)

iQEcBAEBAgAGBQJQB0TbAAoJEAy6xNgMZCEgyVUIAKpcZjXVqaxDFmtyYUlyonv8
snXCsW0IX93ywpP63SIpleTPAl3Yp4T7Ng6wZKjpMJ/N2xEo7o5GGHl9Z2YVnUyY
Kgp6/FZPkHZv0PmDSVKANleJPTP+CR4LemkcezLiMnpSQ7kv7mIXpVsKbgTJ9B5L
AFa/mWj/YCAJT8I108pteCLZDFEaDEdciM5Bl4Kp6hoiiouyDPRjF2/fC/YWVTfL
DBmo6m8Wq3ZemlLW3At5dvYOct9gQgYyZgq8DWXVFzKx0JzfQ1rXoO4ovZFoLh7D
fnVtjjSaWMOHhscdIS4zx5x9Q4J4QQtwyK0pKBnZwq6DF1J2FPuMxg/jP4v+UrE=
=31rD
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120717225806</emailId><senderName>Kevin Evans</senderName><senderEmail>hello@kevinevans.name</senderEmail><timestampReceived>2012-07-17 22:58:06-0400</timestampReceived><subject>Re: [tor-dev] Ports with hidden/rend services?</subject><body>

D'oh! I hope this wasn't the wrong place to ask this. I couldn't seem
to find anywhere else to ask this.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718033859</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-07-18 03:38:59-0400</timestampReceived><subject>Re: [tor-dev] First-time tails/tor user feedback</subject><body>

Hi,

Andrew Lewman wrote (21 Apr 2012 14:42:54 GMT) :
&gt; I spent the past week in Sweden, attending the Stockholm Internet
&gt; Forum, http://www.stockholminternetforum.se/, for part of it. I made
&gt; a number of tails 0.10.2 usb sticks for people on request. I also
&gt; asked a lot of people their impressions of Tor and Tails. I received
&gt; a plethora of feedback. [...]

Thanks a *lot*, Andrew, for this testing and feedback!
Much appreciated. Please go on. I'm sorry we did not reply to this
earlier with words, but as you'll see bellow, we replied with actual
changes to some of these issues.

&gt; # First issue: Language selection

&gt; The first issue was on the language selection screen. 4 of 8 people
&gt; were confused why it was called "Debian Live System" and not "Tails
&gt; Live System". 8 of 8 knew what language selection meant, but weren't
&gt; sure how this mapped to Tails.

The language selection specific should be fixed by Tails &gt;= 0.11
(no language menu anymore in bootloader),
the "Debian Live" confusing message is fixed in Tails &gt;= 0.12
(custom Tails syslinux menu).

&gt; # Second issue: wifi and tor browser

&gt; The tor browser starts up before the wireless is configured.
&gt; The tor browser then reports a proxy error.

This is not the case anymore in Tails &gt;= 0.11:
iceweasel is started only after the network was successfully configured.

&gt; With some prompting, all 8 figured out the wifi and then didn't know
&gt; what to do. Tor does keep trying to load, and takes forever because
&gt; it needs to download the entire directory. Users have no feedback as
&gt; to what's going on behind the scenes because vidalia is hidden.

I'm a bit surprised, since a notification about the time being sync'd,
and this operation being necessary for Tor to work properly, should be
displayed quite early since Tails 0.10.1.

&gt; 8 of 8 waited patiently for something to happen on the screen.

OK.

&gt; # Third issue: green onion

&gt; 3 of 8 people saw the green onion appear in the menu bar up top. These
&gt; three people hovered over it and saw the 'Connected to the Tor Network'
&gt; message. No one knew to double-click on it to get a menu of other things
&gt; to do. No one knew to right-click on it to get the drop-down menu. They
&gt; were presented with the default check.torproject.org 'congratulations'
&gt; page and then sat there.

Hmm... they were asked "to browse to their favorite site", and did not
do anything once they were presented a web browser? I'm at a loss...
Any suggestions how we could make their experience better?

&gt; # Fourth issue: check.tpo is not helpful

&gt; 8 of 8 people saw the default check.torproject.org site telling them
&gt; 'congratulations. Your browser is configured to use tor.' 7 of
&gt; 8 people asked 'where is my browser?' The one who didn't ask this
&gt; question was already a firefox user and recognized the interface.

OK, this clarifies. So, this is a problem of our iceweasel not looking
enough like "a" web browser, apparently. Oops. Probably check.tpo
should be rephrased (s/your/this/, to start with) so that it's clearer
That Thing is the web browser that's configured to use Tor.

&gt; 0 of 8 understood what the IP address message meant. Comments ranged
&gt; from 'is that different than my current IP address?' to 'what's an
&gt; ip address?'

&gt; As an aside, when showing someone TBB on their own laptop, they saw
&gt; the check.tpo site, and then went to Safari and started it up.
&gt; When asked why they did this, the answer was 'safari is my browser.
&gt; this says your browser is configured to use tor.'

This tends to confirm the need to s/your/this/ IMHO.

&gt; # Fifth issue: exit relay congestion/failures

&gt; 8 of 8 people tried to get to their own sites. 'I wonder what my
&gt; site looks like when I'm anonymous' was the most common comment (5
&gt; of 8). For 6 of 8 people, their site didn't load at all, and tor
&gt; browser reported their site was unreachable. All 6 then tried to go
&gt; to google search in their own language; meaning google.es,
&gt; google.se, etc. For 3 of those 6, this didn't work either. They gave
&gt; up and assumed tor was broken or was censoring their destinations.
&gt; [...]
&gt; The user has no feedback as to why their site didn't work. And tor
&gt; assumes everything is working fine.

Wow, this is much worse than any experience I've had :/
I'm not sure how we can help from Tails' side.

&gt; When asked "please find a video you like", they all went to youtube.
&gt; Most of the videos they wanted to see resulted in 'This video is
&gt; currently unavailable.' 8 of 8 assumed it was because youtube was
&gt; blocking tor, not because the video is flash-required. 2 of
&gt; 8 started randomly clicking videos suggested by youtube to see if
&gt; any of them worked. Eventually, 2 of 8 got videos to work with
&gt; youtube and were amazed it worked at all.

OK, this is clearly suboptimal, to say the least, but it's so much
better than it was before 0.10...

&gt; # Sixth issue: no flash, no warning

&gt; 2 of 8 people had flash apps on their website. 4 of 8 had ad banners
&gt; that used flash. All were surprised at the red outline with a snake
&gt; in it appearing instead of their flash apps. None understood
&gt; what happened.

&gt; After an explanation, one person suggested changing the red outline
&gt; with snake to an actual message written inside, along the lines of
&gt; 'this app blocked for your protection. click here to unblock it.'
&gt; I explained why that wouldn't work (because there is no flash, java,
&gt; silverlight plugins installed) and their answer was 'then do not
&gt; show it at all'. Inside noscript, I unchecked the 'show
&gt; placeholder..' option and had them browse again. they were happy.
&gt; It seems if the user cannot do anything about the blocked apps, not
&gt; showing them may be preferred.

I'm convinced. Adding as
todo/NoScript:_hide_blocked_and_unsupported_elements to our TODO list.

&gt; # Seventh issue: shutdown

&gt; I asked all 8 to shutdown tails and let me know when they thought
&gt; their data was safely no longer on the system. 1 of 8 figured out
&gt; how to shutdown tails by clicking the big red button in the upper
&gt; right corner. The rest hit the power button on the laptop.

This is unfortunate, but I'm not sure we can do much better than a big
red button for first time users. Hopefully users who care (or should
care) about RAM forensics eventually notice that button, or
learn documentation...

&gt; After rebooting, i showed them all they could just pull the usb
&gt; drive to do it as well. As soon as tails started shutting down, they
&gt; all assumed everything was safe and tried to power off the laptop.

Any chance a graphical splash screen would work any better than the
text-mode version of that we already have, which already explains
what's going on (but probably a bit lost among other confusing
text-mode message most users are not inclined to read)?

Thanks again, cheers!
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120718181659</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-07-18 18:16:59-0400</timestampReceived><subject>[tor-dev] [GSoC] Vidalia Report - Week 8</subject><body>

[Attachment #2 (multipart/alternative)]


Last fortnight, I had got the add, remove and edit Hidden Service
functionality working.
I have been working on fixing a few UI issues - sizing, input sanity check
and a browse
button for selecting directory.

I'm beginning work on the bandwidth scheduling plugin. I've been trying out
the ways of
doing it through relaybandwidthrate and will be starting on the UI.

[1] https://github.com/feroze/vidalia-plugins/commits/hiddenservice

[Attachment #5 (text/html)]

Last fortnight, I had got the add, remove and edit Hidden Service functionality \
working. &lt;br&gt;I have been working on fixing a few UI issues - sizing, input sanity \
check and a browse&lt;br&gt;button for selecting directory.&lt;br&gt;&lt;br&gt; I'm beginning work \
on the bandwidth scheduling plugin. I've been trying out the ways of&lt;br&gt;doing it \
through relaybandwidthrate and will be starting on the UI.&lt;br&gt;&lt;br&gt;[1] &lt;a \
href="https://github.com/feroze/vidalia-plugins/commits/hiddenservice"&gt;https://github.com/feroze/vidalia-plugins/commits/hiddenservice&lt;/a&gt;&lt;br&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120719001727</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-07-19 00:17:27-0400</timestampReceived><subject>Re: [tor-dev] [OONI] Designing the OONI Backend (OONIB). RESTful API vs rsynch</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 07/18/2012 04:46 PM, Arturo Filastò wrote:
&gt; On 7/16/12 2:15 AM, Ondrej Mikle wrote:
&gt;&gt; On 07/15/2012 02:56 PM, Arturo Filastò wrote:
&gt;&gt;&gt; I would like to follow up on the discussion we had in Florence on some 
&gt;&gt;&gt; design choices behind OONIB.
&gt;&gt;&gt; 
&gt;&gt;&gt; In particular the most controversy was around using HTTP or rsync.
&gt;&gt; [...]
&gt;&gt; 
&gt;&gt;&gt; # What properties we would like it to have note: these are not
&gt;&gt;&gt; ordered.
&gt;&gt;&gt; 
&gt;&gt;&gt; * Efficient even over high latency networks.
&gt;&gt;&gt; 
&gt;&gt;&gt; * Ease of integration for third party developers.
&gt;&gt;&gt; 
&gt;&gt;&gt; * Expandable to support requirements of new tests we develop.
&gt;&gt;&gt; 
&gt;&gt;&gt; * Anonymous
&gt;&gt;&gt; 
&gt;&gt;&gt; * Secure
&gt;&gt; Even though you will probably not end up using this, it may be a good
&gt;&gt; idea to know that it exists:
&gt;&gt; 
&gt;&gt; ZeroC Ice - http://www.zeroc.com/ice.html
&gt; 
&gt; There are a bunch of very fancy and nice libraries out there to do RPC
&gt; like things that support a variety of languages.
[...]
&gt; 
&gt; Moreover by looking at how the reporting systems of other network 
&gt; measurements tools worked [5] we found that almost all of them used an HTTP
&gt; API to collect reports [6][7][8][9]. I see this as an indication that such
&gt; a strategy is the best practice.

Since it's already implemented, it's reasonable to keep it that way.

&gt; For the time being we should go for something simple like this and once we
&gt; encounter major scalability/performance bottlenecks we can quantify them
&gt; and figure out what the best path to a solution may be.

Sure (though this transition is always PITA once it is necessary).

&gt; If you were the developer of a censorship detection tool would you like to
&gt; have to report to anything that is not a RESTful HTTPs API?

Hmm, for some reason I remembered there was some debate on stateful
requirements on the API but can't seem to find it.

Ondrej
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.14 (GNU/Linux)

iQEcBAEBAgAGBQJQB1IXAAoJEAy6xNgMZCEgWHgH/i2i+FPxco4xIsOeDLtbMO13
DZQ7iWTih9QGnSk+qk55BUGuzEzvAv2OAMECgD2KnM+VCDe/mHXNME/+87dZpd4s
hwp5B9BrUmanAs75FSELOXUsMH3WGNn1hXls+rdgvcfweTyCs7+BOnkTkT5Ni/rl
XHdyn1BQsNPfb3MIUc6ZsEWy45QoHXcJwPoaKdfCHaBsKV1WzD7+NeR9JAWUTJ1u
pj0idqgUKJqgsxCnCr2r7DcgHg41wGci5cIENMVSraGHUb+Is94PRICXPunU/3Lz
3uiCmZ/9KPl20fVBQd/vhB4tHNdoXlIZw7NJELtwKgjONmneS0zUqJsMNasNU+Q=
=1+b3
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720052015</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-07-20 05:20:15-0400</timestampReceived><subject>Re: [tor-dev] Building a two-hop circuit</subject><body>

On Fri, Jul 20, 2012 at 12:47:19AM -0400, Ray Sweha wrote:
&gt; Hi all,
&gt; I was wondering if there is a way to force Tor to build a two-hop
&gt; path/circuit through torrc.
&gt; It seems that both "Pathlen 2" and "PathlenCoinWeight 0.0" are depreciated,
&gt; is there a substitute for them?
&gt; Thanks,
&gt; -Ray

Option one: modify DEFAULT_ROUTE_LEN and recompile.

Option two: use the control protocol to EXTENDCIRCUIT the two hops
you had in mind.

That said, please only do this as part of a research exercise:
https://trac.torproject.org/projects/tor/wiki/doc/TorFAQ#Youshouldletpeoplechoosetheirpathlength.

Using two hops without entry guards will greatly reduce your anonymity:
https://www.torproject.org/docs/faq#EntryGuards
and using entry guards with one extra hop will also be quite bad.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720120250</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa.sandvik@gmail.com</senderEmail><timestampReceived>2012-07-20 12:02:50-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to plan sponsor L milestones on Wed July 18, 15:00 UTC in #tor-dev</subject><body>

On Thu, Jul 19, 2012 at 11:55 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Thu, Jul 19, 2012 at 09:37:46AM +0200, Karsten Loesing wrote:
&gt;&gt; Deliverable 5 is totally doable, says Runa.  This deliverable involves a
&gt;&gt; few substeps which we might derive milestones from: rewriting parts of
&gt;&gt; the website is something we can do ourselves; planning some kind of
&gt;&gt; campaign around the videos to be created and not just putting them out
&gt;&gt; there is something we can do, too; writing screenplays for videos is
&gt;&gt; something we'll have to do together with a partner; creating videos is
&gt;&gt; something we'll have to find a partner for; starting the campaign is
&gt;&gt; something we can do.
&gt;
&gt; We should involve Karen in this discussion, since she's already doing some
&gt; sample videos, and she's a plausible fit for parts of the "tech writer"
&gt; role we describe. The question for Karen is how much of a distraction
&gt; it will be for her relative to her fundraising work.
&gt;
&gt; We should figure out what Runa had in mind by "partner", and how much
&gt; of that we can do ourselves; there is currently no money in the 2012
&gt; budget for said partner.

I'd love to see Karen create the videos as she's done a great job so
far. I only said "partner" because we've previously worked with other
organizations on similar projects.

&gt;&gt; Deliverable 6 is doable.  Runa thinks she could either be the community
&gt;&gt; manager by extending her tasks, or we could hire a new person.  She also
&gt;&gt; has an idea who to hire for English, Farsi, and Arabic; there was a
&gt;&gt; brief discussion between Runa and Nick about making an open call for
&gt;&gt; these hires vs. only asking people we know.  Runa thinks that the trick
&gt;&gt; for paid support is to find a way to let anonymous users pay for support
&gt;&gt; and still make sure they get a reply in time according to the service
&gt;&gt; level agreement we have to create.
&gt;
&gt; Andrew is hoping to use this as an opportunity to explore "hire people who
&gt; will do great work and not charge American prices". Apparently our current
&gt; Farsi translator is one such person, and Andrew hopes we find more.

Yep, shouldn't be too hard.

&gt; We have four separate directions in mind for this "community manager"
&gt; notion (not all funded by SponsorL, mind you):
&gt; 1) Relay operator coordinator. Somebody to keep relay operators happy
&gt; and in touch with us, encourage people to set up new relays, organize
&gt; recommended configurations, etc. Especially important in tandem with our
&gt; "network diversity" work at #6232.
&gt; 2) Volunteer-developer coordinator. Somebody to take incoming volunteers
&gt; and help them find good existing projects to work on. Likely involves
&gt; making our volunteer page more usable. Should also include knowing enough
&gt; about every project to recognize and identify good low-hanging fruit,
&gt; and knowing enough about our priorities to make smart decisions.
&gt; 3) Blog/forum/mailinglist coordinator, to make sure our users have useful
&gt; answers, and ultimately to manage and organize the volunteers who make
&gt; sure our users have useful answers.
&gt; 4) Social media person, to be our face on twitter, etc.

Which ones are funded by SponsorL?

&gt; I believe the plan is for Runa to cover #4, and for us to contract
&gt; somebody in our relay operator community part-time for #1 to start. I
&gt; think there is no plan for #2 and #3 yet; but I'd love it if we could
&gt; get somebody part-time for #2.

Like I've told Andrew already; I am willing to extend my tasks to also
include #2 and #3.

&gt;&gt;  Runa is wondering why we want
&gt;&gt; funding for languages no one has emailed us in (Spanish and French);
&gt;&gt; though nobody has emailed us in Arabic, either.
&gt;
&gt; Countries like Venezuela are likely to be on more peoples' radar in
&gt; the coming years. As for French, a lot of North Africa can do French
&gt; better than they can do English. I bet that's at least partly the case
&gt; in Vietnam too.

Makes sense.

&gt;&gt; Deliverable 7 is doable.  Runa is somewhat unhappy that funding doesn't
&gt;&gt; include Arabic.  She says a large number of our users speak either Farsi
&gt;&gt; or Arabic, so not having funding for Arabic translations (and thus
&gt;&gt; relying on volunteers) seems silly; if we have funding for Arabic
&gt;&gt; support, we should also include Arabic translations.  Runa has an idea
&gt;&gt; of who to hire for Farsi and Arabic translation, no idea about
&gt;&gt; Vietnamese and Chinese (but can't be too hard to find someone).
&gt;
&gt; There's totally time to write 'Arabic' into the list if we want. Note
&gt; that just because we promise more languages doesn't mean we get any more
&gt; money though.
&gt;
&gt; Here's a list of languages the funder thought we might want to put on
&gt; the contract: "Arabic, Farsi, Mandarin, Vietnamese, Burmese, Spanish".

Sounds good!

-- 
Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720154654</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@torproject.org</senderEmail><timestampReceived>2012-07-20 15:46:54-0400</timestampReceived><subject>Re: [tor-dev] Reachability testing brainstorming. (OONI, metrics, pluggable-transports)</subject><body>

On Fri, Jul 20, 2012 at 3:08 PM, Aaron &lt;aagbsn@torproject.org&gt; wrote:
&gt; BridgeDB was extended to filter bridges that are blocked in a
&gt; specified country from its response. BridgeDB needs a list of what is
&gt; blocked, and where, for this to work.
&gt;
&gt; We want to answer the question "What is blocked, and where", with the
&gt; constraint that the list of bridges should not become public.
&gt;
&gt; Here are a few questions to kick off the discussion. Any insight, more
&gt; questions (or answers) are appreciated.
&gt;
&gt; 1. Do we want active or passive reachability testing (or both)?
&gt; 2. For active scanning, OONI comes to mind. Do we trust operators with
&gt; the list of bridges? A partial list of bridges?
&gt; 3. Does an open TCP port mean that a bridge is 'reachable' or should
&gt; the test complete a full handshake?
&gt; 4. What about pluggable transports (PT)? Will the Bridge Authority do
&gt; independent reachability testing of PTs?
&gt; 5. What concerns are there regarding detectability of active scanning?
&gt; 6. For passive censorship detection, are there other indicators other
&gt; than relay/bridge usage-by-country over time?
&gt; 7. Should relays report per-country usage by address/transport? What
&gt; are the upsides? Downsides?
&gt;
&gt; Thanks in advance!
&gt; --Aaron

Looks like the discussion should be continued here instead:
https://trac.torproject.org/projects/tor/ticket/6414

Thanks
--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120720222722</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-07-20 22:27:22-0400</timestampReceived><subject>[tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

Filename: 205-local-dnscache.txt
Title: Remove global client-side DNS caching
Author: Nick Mathewson
Created: 20 July 2012
Status: Open


0. Overview

   This proposal suggests that, for reasons of security, we move
   client-side DNS caching from a global cache to a set of per-circuit
   caches.

   This will break some things that used to work.  I'll explain how to
   fix them.

1. Background and Motivation

   Since the earliest Tor releases, we've kept a client-side DNS
   cache.  This lets us implement exit policies and exit enclaves --
   if we remember that www.mit.edu is 18.9.22.169 the first time we
   see it, then we can avoid making future requests for www.mit.edu
   via any node that blocks net 18.  Also, if there happened to be a
   Tor node at 18.9.22.169, we could use that node as an exit enclave.

   But there are security issues with DNS caches.  A malicious exit
   node or DNS server can lie.  And unlike other traffic, where the
   effect of a lie is confined to the request in question, a malicious
   exit node can affect the behavior of future circuits when it gives
   a false DNS reply.  This false reply could be used to keep a client
   connecting to an MITM'd target, or to make a client use a chosen
   node as an exit enclave for that node, or so on.

   With IPv6, tracking attacks will become even more possible: A
   hostile exit node can give every client a different IPv6 address
   for every hostname they want to resolve, such that every one of
   those addresses is under the attacker's control.

   And even if the exit node is honest, having a cached DNS result can
   cause Tor clients to build their future circuits distinguishably:
   the exit on any subsequent circuit can tell whether the client knew
   the IP for the address yet or not.  Further, if the site's DNS
   provides different answers to clients from different parts of the
   world, then the client's cached choice of IP will reveal where it
   first learned about the website.

   So client-side DNS caching needs to go away.

2. Design

2.1. The basic idea

   I propose that clients should cache DNS results in per-circuit DNS
   caches, not in the global address map.

2.2. What about exit policies?

   Microdescriptor-based clients have already dropped the ability to
   track which nodes declare which exit policies, without much ill
   effect.  As we go forward, I think that remembering the IP address
   of each request so that we can match it to exit policies will be
   even less effective, especially if proposals to allow AS-based exit
   policies can succeed.

2.3. What about exit enclaves?

   Exit enclaves are already borken.  They need to move towards a
   cross-certification solution where a node advertises that it can
   exit to a hostname or domain X.Y.Z, and a signed record at X.Y.Z
   advertises that the node is an enclave exit for X.Y.Z.  That's
   out-of-scope for this proposal, except to note that nothing
   proposed here keeps that design from working.

2.4. What about address mapping?

   Our current address map algorithm is, more or less:

     N = 0
     while  N &lt; MAX_MAPPING &amp;&amp; exists map[address]:
         address = map[address]
         N = N + 1
     if N == MAX_MAPPING:
         Give up, it's a loop.

   Where 'map' is the union of all mapping entries derived from the
   controller, the configuration file, trackhostexits maps,
   virtual-address maps, DNS replies, and so on.

   With this design, the DNS cache will not be part of the address
   map.  That means that entries in the address map which relied on
   happening after the DNS cache entries can no longer work so well.
   These would include:

       A) Mappings from an IP address to a particular exit, either
          manually declared or inserted by TrackHostExits.
       B) Mappings from IP addresses to other IP addresses.
       C) Mappings from IP addresses to hostnames.

   We can try to solve these by introducing an extra step of address
   mapping after the DNS cache is applied.  In other words, we should
   apply the address map, then see if we can attach to a circuit.  If
   we can, we try to apply that circuit's dns cache, then apply the
   address map again.


2.5. What about the performance impact?

   That all depends on application behavior.

   If the application continues to make all of its requests with the
   hostname, there shouldn't be much trouble.  Exit-side DNS caches and
   exit-side DNS will avoid any additional round trips across the Tor
   network; compared to that, the time to do a DNS resolution at the
   exit node *should* be small.

   That said, this will hurt performance a little in the case where
   the exit node and its resolver don't have the answer cached, and it
   takes a long time to resolve the hostname.


   If the application is doing "resolve, then connect to an IP", see
   2.6 below.

2.6. What about DNSPort?

   If the application is doing its own DNS caching, they won't get
   much security benefit from here.

   If the application is doing a resolve before each connect, there
   will be a performance hit when the resolver is using a circuit that
   hadn't previously resolved the address.

   Also, DNSPort users: AutomapHostsOnResolve is your friend.

3. Alternate designs and future directions

3.1. Why keep client-side DNS caching at all?

   A fine question!  I am not sure it actually buys us anything any
   longer, since exits also have DNS caching.  Shall we discuss that?
   It would sure simplify matters.

3.2. The impact of DNSSec

   Once we get DNSSec support, clients will be able to verify whether
   an exit's answers are correctly signed or not.  When that happens,
   we could get most of the benefits of global DNS caching back,
   without most of the security issues, if we restrict it to
   DNSSec-signed answers.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120721001449</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-21 00:14:49-0400</timestampReceived><subject>[tor-dev] stegotorus.git has been rebased</subject><body>

[ I was told to send this to tor-commits but I seem to be unable to
send email there. ]

In order to remove some inconveniently large and also potentially
copyright-infringing files from the revision history,
https://gitweb.torproject.org/stegotorus.git has been rebased.  If you
pulled from that repository, you're going to need to do a forcible
branch update or a re-clone.  (I am under the impression that mostly
nobody did that because they were waiting for me to do this.)

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120721011949</emailId><senderName>tagnaq</senderName><senderEmail>tagnaq@gmail.com</senderEmail><timestampReceived>2012-07-21 01:19:49-0400</timestampReceived><subject>[tor-dev] email2trac?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi,

is there a way to communicate with tpo's trac via mail?
(create new tickets, answer to existing ones)
If not: Has that already been discussed before?
What would you think about it?

https://subtrac.sara.nl/oss/email2trac/
I'm not sure how authentication is handled.

thanks.
-----BEGIN PGP SIGNATURE-----

iF4EAREKAAYFAlAKA7UACgkQyM26BSNOM7aVhwD/f8PehnoevFLuhqytMk0T/CMe
JrPROSvhNirLhNEvso8BAK0TyFTFL/80htpdsERG6h+TEGi76DW8zg4CNVocWCCU
=RkIo
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120721210505</emailId><senderName>Isis</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2012-07-21 21:05:05-0400</timestampReceived><subject>[tor-dev] Automating Bridge Reachability Testing</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello Everyone.

I've already gotten a bit of good feedback on the trac ticket[0], but I'm going
to post my research/writeup/proposal/whateveryouwanttocallit here so more
people can discuss it.

&lt;(A)3
isis agora lovecruft

[0] https://trac.torproject.org/projects/tor/ticket/6414

________________________________________________________________________________

Automating Bridge Reachability Testing
- --------------------------------------

An effort was made earlier this year to create a discovery system for current
bridge reachability status #5028. This resulted in the development and
deployment of
[https://gitweb.torproject.org/ooni-probe.git/blob/HEAD:/ooni/plugins/bridget.py
OONI's bridgeT], which uses txtorcon to attempt a connection, speaking the
full Tor protocol, to the set of bridges being tested. Some bridges were
scanned, and results were gathered. We would like to go back and automate this
process, and possibly revise it if a better methodology is proposed. Anyone
with ideas or interest should feel free to join the discussion here.

While this automation is intended to be geolocationally agnostic, it is
trivial to test a bridge's reachability from a country which does not block
Tor, and therefore automation methodology should be developed according to the
worst-case scenarios. Countries which block Tor, or have blocked Tor, include
China, Iran, Lebanon, Qatar, United Arab Emirates, and Ethiopia. In order to
ensure that the fewest amount of Tor bridges are blocked during reachability
testing, it seems wise to assume that the test is being conducted from one of
these countries. Also, any test methodology which produces accurate results
from inside China or Iran would likely work just as well from any
non-Tor-blocking country.

I. Brief Overview of Dynamic Tor Bridge Blocking

- From my understanding so far (please correct me if I have misunderstood
something, or if there is more information), China's mechanism for blocking
Tor bridges takes the following steps (unconfirmed data is prefaced by a
question mark):

    1. OP --&gt; OR/Bridge Connection

         a. Alice (OP/client in China) connects to Bob (OR/bridge), completes
         the TLS handshake, and sets up circuits.

         b. This works for roughly fifteen minutes.

    2. Protocol Identification &amp; Fingerprinting

         a. The GFC identifies Tor via fingerprinting the cipher list in the
         TLS Server Helo.

         b. Tests for the precise trigger in the fingerprint were conducted
         (I'll leave said tester(s) anonymous unless they would like to speak
         up) by fuzzing the TLS handshake ServerHello, and the precise
         fingerprint for triggering the GFC's nascent probes was determined to
         be a specific 5 bytes. (?) It was also found that the GFC blocks
         packets &lt;= 79 bits.

         c. Philip Winter's research showed that fragmentation of the
         ciphersuite list would not trigger a probe [5].
    3. Network Enumeration

         a. The GFC adds Bob's IP and port to a queue of addresses to be
         checked. These queues are processed every fifteen minutes (hence why
         Alice's connection functions normally at first).

         b. A probe is sent to Bob during queue processing. The GFC probes are
         not yet fully understood, and unverified data in this section is
         prefaced by a '?'. Thus far, the following is believed to occur:

             * (?) Reportedly (speak up if you wish), there are eight "edge
               routers" in China. The reporter stated that there was "one for
               each province", however there are twenty-two Provinces in PRC
               -- twenty-three if you count Taiwan. There is one "core router"
               which controls/routes to the eight "edge routers". Because all
               traffic into and out of China passes through these eight
               routers, all netblocks within China are essentially a private
               network behind the "edge routers". (See question #2 below.)

             * (?) Because these "edge routers" are intercepting all traffic,
               they are able to temporarily hijack any IP from the contained
               netblocks.

             * A hijacked IP and a random port (the range appears to be
               ~35000-60000) are used as the source to send a probe to the
               queued IP:port of the suspected bridge. (See question #3
               below.)

             * The probe does a TCP connect.

             * Then it sends a TLS ClientHello and waits for the cipher list
               in the ServerHello message.

             * If the cipher list matches that used by Tor, the IP:port gets
               blacklisted. Previous research has shown that this blacklisting
               is not permanent, but lasts for 12 hours after the last
               successful connection by a probe [1]. (See question #4)

II. Testing Bridge Reachability

As Roger has stated on the Tor Blog, we can either do active or passive scans
to check if a bridge has been blocked [4]. Passive scans, wherein either the
bridge or the client report connections, are unreliable without results from
active scans in the former case [5], and could potentially reduce privacy and
anonymity in the later case.

II. A. Active Scans

==== Direct Methods ====

- From most innocuous (least Tor-like) to most conspicuous (most Tor-like):


ICMP type-8 ping / echo
   Tells us if the host running the Tor bridge is online, but not necessarily
   if the ORPort is open.

TCP ping / ACK
   If TCP ACKs are timed to be sent infrequently (probably no more than one
   every five minutes or so), they can appear to be random network noise
   rather than a scan. If we get a RST back, we know that we can at least
   communicate with the bridge's ORPort though the GFC. This might look odd,
   if it gets noticed, especially since the GFC is stateful and might realize
   the ACKs are unsolicited.

TCP SYN
   This still doesn't tell us if Tor is running, but, again, a SYN/ACK would
   let us know if the ORPort is reachable and accepting connections, a RST
   that it is reachable and not accepting connections (or the GFC is sending
   false TCP RSTs), and no response would mean that the GFC, or some other hop
   is dropping packets. Philip Winter's research showed that the client's SYN
   is transmitted through the GFC, which instead drops the SYN/ACK response of
   known Tor relays/bridges [2].

TCP connect()
   We could try a normal full TCP connect (SYN &amp; ACK). This would be the most
   genuine-to-the-Tor-protocol test available for regions where SSL is being
   blocked. It could be useful here to test different types of fragmentation,
   for example, the old trick involving overlapping fragments to rewrite the
   TCP headers in the first fragment [25].

SSL Handshake
   We could try doing a normal SSL handshake, as if contacting, for example,
   an Apache webserver over HTTPS. Another interesting idea would be to run an
   SSLObservatory from inside China, and simply pretend that the bridges are
   HTTPS webservers, which would look just like the normal SSLObservatory for
   bridges whose ORPort is set to :443 [14, 15]. As of this morning, a quick
   check on Tor relays shows that 27% of relays are run on :443 :

{{{
    isis@acab:/var/lib/tor$ cat cached-microdesc-consensus | grep -e \
    &gt;"^r\ [a-zA-Z0-9]*\ /*" | grep " 443 " -c

    779

    isis@acab:/var/lib/tor$ cat cached-microdesc-consensus | grep -e \
    &gt;"^r\ [a-zA-Z0-9]*\ /*" -c

    2912

    isis@acab:/var/lib/tor$ python -c 'from __future__ import \
    &gt;division;a=799/2912;print a'

    0.274381868132
}}}

    with the most common ports being:

{{{
    isis@acab:/var/lib/tor$ cat cached-microdesc-consensus | grep -e \
    &gt;"^r\ [a-zA-Z0-9]*\ /*" | cut -d " " -f 7 | sort | uniq -ic | sort -gr
           1592 9001
            762 443
            217 80
             34 9090
             33 8080
             21 9002
             20 444
             11 9031
             11 110
              9 22
              7 21
    [...]
}}}

    I would assume that the percentage of bridges running on :443 is higher
    than that of relays (question #5). We could safely automate the testing of
    those relays without actually speaking Tor to them, by appearing to be an
    SSLObservatory (question #6). This would provide us with an extensive set
    of canaries to help mitigate the zig-zag enumeration attack [9] (see
    question #7). However, in regions which block Tor based on the ciphersuite
    list in the ServerHello, such as in Iran in June 2011, it doesn't matter
    what ciphersuite we send as the client [16].

    For those bridge not running on :443, we could have the bridge scanner
    mimic another protocol and service which uses TLS/SSL, such as IMAPS,
    SFTP, for instance it could pretend to be a client connecting to a Dovecot
    or vsftp server.

'''Tor TLS/SSLv3 Handshake'''

    We can drive a Tor Client, or a script pretending to be Tor (which should
    know about the different handshake versions, specifically their command
    and CERT cells [10]), to handle the TLS negotiation. Interestingly, for
    the v2 and v3 protocols, we can use any ciphersuite list we like, as long
    as we include

        TLS_DHE_RSA_WITH_AES_256_CBC_SHA
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA
        SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
        SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

    in addition to at least one extra that is not any of those four. Tor
    clients before 0.2.3.11-alpha send a fixed ciphersuite list, and the GFC
    sends a probe based on this fixed ciphersuite list [12]. It is apparently
    also the case that the GFC will ''not'' send a probe if the standard fixed
    ciphersuite is altered by at least two ciphers [12]. To assist with this,
    hellais wrote a handy Python script for grabbing the default ciphersuite
    list from the source code of Firefox [13]. Also, as mentioned previously,
    we can fragment the sending of the ciphersuite list to avoid triggering a
    probe [5].

==== Indirect Methods ====

As Roger also mentions, we could use some variant of the idle scan. [4, 8, 17]
There are a few:

    1. Use nmap / hping.

        a. For nmap, there is an NSE script for zombie discovery, which can be
        combined with blockfinder to collect lists of hosts (probably printers
        or other archaic networked devices) with globally sequential IPIDs [7,
        18].

    2. Use idlescanner, a Python script which uses the "content upload"
    feature of popular sites, e.g. Reddit, Imgur, Facebook, Digg, Tinypic,
    Tineye, etc., to attempt a connection to the bridge [19, 20]. This may not
    be entirely accurate, because it is based purely on the waiting for the
    upload site to timeout.

    3. Use FTP PROXY or some other obscure bounce mechanism [21]. These need
    to be further researched.

    4. Now we start to get into some crazier ideas. If we set up a bridge
    purposefully to act as a canary, then we could send from an box inside
    China a bunch of TCP SYNs with spoofed IP headers to the canary bridge to
    trigger a bunch of probes. Then we trigger the probes with something
    (Winter wrote a program to do this called tcis [22, 23], and hellais
    ported it to Python in OONI [24]) forcing the probes to go after the
    canary bridge, during the two minutes that the probes have hijacked IP
    addresses, we use the probes' hijacked IP addresses as zombies for idle
    scan of bridge. This would require some preliminary mucking with the
    probes to see if they have any mechanism we could leverage to "see" if the
    bridge's packets made it to the probe. Basically we force the probe to
    hijack an IP, which we then zombify while it's chasing the canary, and get
    the zombie probe to scan the the bridge for us, without ''it'' actually
    scanning it, so it doesn't get blocked, and the traffic doesn't look
    suspicious to anyone keeping an eye on the probes.

    5. A commenter on the Tor blog had the idea to try to "borrow a Chinese
    botnet" to do the scans for us, since the botnet would probably attract a
    lot more attention by the Chinese officials than any amount of Tor
    bridges. Also, with this idea, the scan could be made to look like your
    standard botnet running around launching PHP exploits at everyone and
    their mothers. This is a highly entertaining idea, but it's also a bit
    unethical (though I'm not certain -- do the ends justify the means in this
    case?), and it might come back to bite us.

        a. If there were a way to get an in-country botnet to "take notice" of
        certain bridges, we could do a sort of "Here boy, fetch!" trick. For
        example, if a botnet appears to be having infected hosts report-back
        to an IRC channel, or scanning for Windows hosts with port 139 open,
        we could mimic the responses an infected host would give while
        spoofing the bridge's IP. I have no idea how feasible or reliable that
        would be.

III. Automation Concerns and Desired Features

We should avoid scanning bridges that we suspect are not blocked. Therefore,
eventually there should be an easy way to automate feedback loops between
Karsten's metrics and the bridge scanner. That way, once connections in a
certain country drop significantly, the automated tests initiate in order to
discover if those bridges are in fact unreachable.

Design Features:
    1. Allow for either eventual integration with, or some type of feedback
       mechanismfor, metrics-db.

    2. Should be automatable in a safe manner, i.e. the bridge scanner should
       know that a a full Tor connection to a specific bridge will likely
       result in that bridge being blocked, and thereby skip running any test
       which include a full Tor connection.

    3.  Should be easily incrementable, meaning it should be simple to tell the
       test "only try TCP SYNs for this list of bridges", or "try everything
       up until a Tor-specific TLS/SSL handshake".

    4. GeoIP awareness.

IV. Implementation

I propose the test have all of the Active Direct Methods outlined above, and
an easy way to test one at a time. For the actual testing, I want to err on
the side of caution, in order to avoid getting bridges blocked. Therefor,
during bridge reachability testing, we should test via most innocuous method
first, wait a while (probably a day or two), see what we learn, then proceed
to the next method.

I was planning to use Python, because it's fast (in terms of coding time), we
don't need to worry about portability in this instance, and it gives me less
headaches than C. And Java makes me want to set things on fire. James Arthur
Gosling, take it back.

For the indirect scanning methods, I believe these will be difficult to
entirely automate, but I plan to implement them so that they require as little
human interaction as possible. If any of them prove reliable, they can be used
as fallback methods when information concerning specific bridges is needed
immediately and there is a human willing to run the tests.

IV. A. Project Timeline

July 2012
    Two weeks of continued research and discussion until end of July.

August 2012
    Four weeks for initial development phase. Beta tests should be deployed by
    31 August, and gathered data saved for evaluation of testing methods.

September 2012
    Four weeks for evaluation of data previously gathered from beta testing,
    and continued development of bridge reachability testing tools. Alpha
    release should be deployed by 30 August.

October 2012
    Two weeks for final development, with a useable, automated bridge
    reachability testing tool produced by 14 October.

    Two weeks for final testing, data collection and report generation, and
    discussion of further steps for integrating the automation of bridge
    reachability testing with general Tor metrics.

November 2012
    The project should be completed by 1 November 2012.

- --------------------------------------------

== Active Questions: ==

 1. Should this automation be considered part of OONI? Or BridgeDB? Or is it
 part of some other project?

 2. If there are only eight "edge routers":
    a. What are their IP addresses?
    b. Which protocols return traceroute data for these routers?
    c. Is the "core router" on this side of the "edge routers", or the other?
    d. What is the usual TTL of packets from the probes?

 3. For how long is an IP hijacked by the GFC probe?

 4. Roger mentions that "if the bridge had no other interesting services
 running (like a webserver), they just blackholed the IP address...but if
 there was an interesting service, they blocked the bridge by IP and port." Do
 the probes enumerate all ports, just common ones, or just privileged ports?

 5. What percentage of current bridges are running on port 443?

 6. Does the GFC automatically flag connections to TLS/SSL services which did
 not previously complete a DNS resolve?
    a. If so, (because most browsers cache DNS resolutions) what is the max
    time interval between the last successful clientside DNS resolution and a
    client's request for the GFC to remember that DNS was resolved?
    b. Do connection directly to IP addresses on port 443 stand out due to a
    lack of DNS resolution?

 7. Does the GFC queue all TLS/SSL connections for later enumeration?

- ----------------------------------------------

'''References'''
- ----------------
[1] "How China Is Blocking Tor". Winter, Philip, and Lindskog, Stefan.
    Karlstad University, Sweden (2011). p.7, section 5.1.
    http://www.cs.kau.se/philwint/pdf/torblock2012.pdf
[2] Ibid. p.6, section 4.2.
[3] Ibid. p.19, section 6.3.
[4] "Research problem: Five ways to test bridge reachability". Dingledine, Roger.
    The Tor Project (2011).
    https://blog.torproject.org/blog/research-problem-five-ways-test-bridge-reachability
[5] "Case study: Learning whether a Tor bridge is blocked by looking at its aggregate usage statistics".
    Loesing, Karsten. The Tor Project (2011).
    https://metrics.torproject.org/papers/blocking-2011-09-15.pdf
[6] "Level Four Traceroute". http://pwhois.org/lft/
[7] "ipidseq.nse - nmap script for globally sequential IP ID discovery"
    http://nmap.org/nsedoc/scripts/ipidseq.html
[8] "Idle Scan". http://nmap.org/book/idlescan.html
[9] "paketto". http://dankaminsky.com/2002/11/18/77/
[10] "Research problems: Ten ways to discover Tor bridges". Dingledine, Roger.
     The Tor Project (2011). Point #10.
     https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges
[11] "Tor Protocol Specification". Dingledine, Roger, and Mathewson, Nick.
     The Tor Project (2012). Sections 2-4.
     https://gitweb.torproject.org/torspec.git/blob_plain/HEAD:/tor-spec.txt
[12] "GFW probes based on Tor's SSL cipher list".
     https://trac.torproject.org/projects/tor/ticket/4744
[13] "get_mozilla_ciphers.py - Get the default ciphers of Mozilla Firefox".
     https://trac.torproject.org/projects/tor/attachment/ticket/4744/get_mozilla_ciphers.py
[14] "EFF's SSL Observatory". https://www.eff.org/observatory
[15] "SSLObservatory git repository". https://git.eff.org/public/observatory.git
[16] "Iran blocks Tor; Tor releases same-day fix". Dingledine, Roger.
     The Tor Project (2011).     
     https://blog.torproject.org/blog/iran-blocks-tor-tor-releases-same-day-fix
[17] "new tcp scan method". Sanfilippo, Salvatore. (1998).
     http://seclists.org/bugtraq/1998/Dec/79
[18] "Ioerror's blockfinder git repository". https://github.com/ioerror/blockfinder
[19] "Zombie Scans using Unintended Public Services".
     http://blog.makensi.es/post/3884103946/zombie-scans-using-unintended-public-services
[20] "idlescanner.py - Use unintentional web services for portscanning".
     http://makensi.es/tools/idlescanner.txt
[21] "FTP Bouncing for Portscanners - FTP PROXY".
     http://nmap.org/nmap_doc.html#bounce
[22] "How the Great Firewall of China is Blocking Tor". Winter, Philipp.
     Karlstads Universitet (2012). http://www.cs.kau.se/philwint/static/gfc/
[23] "NullHypothesis' tcis git repository". https://github.com/NullHypothesis/tcis
[24] "OONI - chinatrigger.py - Python port of tcis".
     https://github.com/hellais/ooni-probe/blob/master/ooni/plugins/chinatrigger.py
[25] "An Analysis of Fragmentation Attacks". Anderson, Jason. (2001).
     http://www.ouah.org/fragma.html
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBCAAGBQJQCxmBAAoJEKOttnos24s1hkcQAJ/eoc57f8Uk3vVsN9cpHQ9b
/1v5S7+1j/kcIkLVaWRA8oDEPl1c6K1m6YaNsKEYceR180RZEg7MHPquxw/WC2QO
DkwwQBQI4QfpvnJ+99egfy5MyErk34lfZzG+jTaUDzrFdtx9v07XbhFR391ly1iw
AHGoyFaPcy8kFudByxptn8ecjYBfnyY7jD/eV21sx+/5tDV9a5vHP602PNV7CLfV
XEVh38CtmM0+mZBjBFd0lZyO9x+ggeof2HRKjsT5Pzvu5UgOsNVTUWaRjD3GVVVg
TND4H26TDgZz2wiWu25VUJO70OO1swfazzl4t0oFmpQHsZS5BIHJttBkgTzKb26j
onVMd4Wa7LShJq7XukZUYQSx8Xfwo11dq/lIzRTa9pYmnu45GQUtm/a5jd55NgHp
Ene7qtWecOGbQzDzxpCXYynH0iEQtBINdo1Yyl/WfVLIY4a1YKIQX54kl1DLKGos
sqENNjsKA3ADN3ry+hKeIQkFUjJlI55RLWK26tcEaZUgOBLw0wiqFEvS6JY/l10e
G5W+9FnRWANQJqg2xKuMdEnTLhTdmmu8KTKr0suo7t/Ac1jYdiOx/0AzbDpZeL51
E02mJf4cc149HlcA2LZAa7rzQGpXF6sTqSWrkOyqQMrN1+MWah+B/5rSoBQYZ+nt
9mDxRxhidxYs8nEg3+8p
=NCy4
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120722234045</emailId><senderName>"Salva ."</senderName><senderEmail>cybero@hotmail.es</senderEmail><timestampReceived>2012-07-22 23:40:45-0400</timestampReceived><subject>Re: [tor-dev] hide my site in clearweb</subject><body>

[Attachment #2 (multipart/alternative)]


Which is the best solution ?
I have thought in denying all connection does not come from a tor exit node, using iptables.

&gt; Date: Sun, 22 Jul 2012 16:26:00 -0700
&gt; From: hello@kevinevans.name
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] hide my site in clearweb
&gt; 
&gt; You can only allow the site to be accessed 127.0.0.1.
&gt; 
&gt; On Sun, Jul 22, 2012 at 4:08 AM, Salva . &lt;cybero@hotmail.es&gt; wrote:
&gt; &gt; Hello, I have launched a website in TOR and I can access it through the
&gt; &gt; .onion address and also typing the ip of my server in my brower.
&gt; &gt; I want my site was only accessible from TOR and not through clearweb, how
&gt; &gt; can I solve it ?
&gt; &gt;
&gt; &gt; Thank you guys.
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
 		 	   		  
[Attachment #5 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;style&gt;&lt;!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--&gt;&lt;/style&gt;&lt;/head&gt;
&lt;body class='hmmessage'&gt;&lt;div dir='ltr'&gt;
Which is the best solution ?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have thought in&lt;span \
style="font-size: 10pt; "&gt; denying all connection does not come from a tor exit \
node, using iptables.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;div \
id="SkyDrivePlaceholder"&gt;&lt;/div&gt;&gt; Date: Sun, 22 Jul 2012 16:26:00 -0700&lt;br&gt;&gt; \
From: hello@kevinevans.name&lt;br&gt;&gt; To: tor-dev@lists.torproject.org&lt;br&gt;&gt; Subject: \
Re: [tor-dev] hide my site in clearweb&lt;br&gt;&gt; &lt;br&gt;&gt; You can only allow the site \
to be accessed 127.0.0.1.&lt;br&gt;&gt; &lt;br&gt;&gt; On Sun, Jul 22, 2012 at 4:08 AM, Salva . \
&lt;cybero@hotmail.es&gt; wrote:&lt;br&gt;&gt; &gt; Hello, I have launched a website in TOR \
and I can access it through the&lt;br&gt;&gt; &gt; .onion address and also typing the ip of \
my server in my brower.&lt;br&gt;&gt; &gt; I want my site was only accessible from TOR and \
not through clearweb, how&lt;br&gt;&gt; &gt; can I solve it ?&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; \
Thank you guys.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; \
_______________________________________________&lt;br&gt;&gt; &gt; tor-dev mailing \
list&lt;br&gt;&gt; &gt; tor-dev@lists.torproject.org&lt;br&gt;&gt; &gt; \
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; \
_______________________________________________&lt;br&gt;&gt; tor-dev mailing list&lt;br&gt;&gt; \
tor-dev@lists.torproject.org&lt;br&gt;&gt; \
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br&gt;&lt;/div&gt;&lt;/div&gt; 		 	   \
&lt;/div&gt;&lt;/body&gt; &lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120724151429</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-24 15:14:29-0400</timestampReceived><subject>[tor-dev] GSoC Status Update - Testing and Transports</subject><body>

Sending this on behalf of Brandon since tor-dev@ is bouncing his emails.

========================================

The last two weeks were spent getting the code in better shape, fixing
bugs and streamlining so that I could get to the point that I could
actually write some transports. Now it’s transport implementation
time. I’ve written a Dust transport, using the most barebones version
of Dust, which is basically just an ECDH handshake and Skein
encryption. I’ll be adding the rest of Dust over time. This barebones
Dust implementation was really just to lay the foundation to start
working on obfs3 and then obfs2. It was easier to start with Dust
because I already have the code and it works. Next I’m bringing in an
AES implementation for obfs3 and obfs2 to use.

The schedule has changed somewhat in that I an now going to be
focusing on obfs2 and obfs3 as the main protocols. This is going to be
easier because they both follow the pattern of a handshake followed by
encrypted bytes. Both full Dust support and flash proxy were going to
require a more complicated API that should probably wait until the
basic API is working.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120724183404</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-24 18:34:04-0400</timestampReceived><subject>Re: [tor-dev] ApachePayloadServer pushed</subject><body>

On Tue, Jul 24, 2012 at 2:17 AM,  &lt;vmonmoonshine@gmail.com&gt; wrote:
&gt; On another note, your pgen_pcap.cc and pgen_fake.cc don't compile on g++
&gt; 4.7.0 on linux, because it doesn't like the fact that you don't care
&gt; about the return value of fwrite.

You can tell I wrote it on my laptop, eh?  I'll fix that as soon as I
get a chance.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120725034756</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-07-25 03:47:56-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem - Status update</subject><body>

[Attachment #2 (multipart/alternative)]


Hello

The network status descriptor parsing has taken a lot longer than expected.
I
should be putting it up for review soon. Followed by the microdescriptor
parsers.

Given the current status of the project, I have prepared a revised schedule
for the
remaining GSoC period. The final evaluation is about a month away. I have
spoken
to Damian and we decided to reschedule the Arm port deliverable to after the
GSoC timeline (most likely the week immediately following the end of the
GSoC
coding period).

July 25 - July 28       Descriptor parsing
July 29 - August 4      | Event handling methods for the controller class.
August 5 - August 11    | I will be working on them as alloted to week 4, 5
and
August 11 - August 20   | 6 from my original proposal[1].

1.
https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html

-- 
neena

[Attachment #5 (text/html)]

Hello&lt;br&gt;&lt;br&gt;The network status descriptor parsing has taken a lot longer than \
expected. I&lt;br&gt;should be putting it up for review soon. Followed by the \
microdescriptor&lt;br&gt;parsers.&lt;br&gt;&lt;br&gt;Given the current status of the project, I have \
prepared a revised schedule for the&lt;br&gt;


remaining GSoC period. The final evaluation is about a month away. I have \
spoken&lt;br&gt;to Damian and we decided to reschedule the Arm port deliverable to after \
the&lt;br&gt;GSoC timeline (most likely the week immediately following the end of the \
GSoC&lt;br&gt;


coding period).&lt;br&gt;&lt;br&gt;July 25 - July 28             Descriptor parsing&lt;br&gt;July 29 - \
August 4           | Event handling methods for the controller class.&lt;br&gt;August 5 - \
August 11       | I will be working on them as alloted to week 4, 5 and&lt;br&gt;


August 11 - August 20     | 6 from my original proposal[1].&lt;br&gt;&lt;br&gt;1. &lt;a \
href="https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html" \
target="_blank"&gt;https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html&lt;/a&gt;&lt;br&gt;



&lt;br clear="all"&gt;-- &lt;br&gt;neena&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120725065554</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-07-25 06:55:54-0400</timestampReceived><subject>[tor-dev] Faravahar back online</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Dear Tor,

Faravahar is back online. Please see
https://trac.torproject.org/projects/tor/ticket/5749 and let me know
what my next steps should be.

All the best,
SiNA


- -- 
?If I had eight hours to chop down a tree, I?d spend the first six of
them sharpening my axe.? -Abraham Lincoln
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJQD5h1AAoJEJPBwXYLR9VtmsEP/2TfkLYURwyuxPWl/uDdZb7A
C3iVLQBgPU1lpKraAPC8/pzNsfm8JncDoPKMZbvzRmX9ltpZz6brUaxOP/bTLy9f
diUYtSIW3l8FBxtsU52QO0mvZIlDKlK7+rPguVmMDxSmu1IhQFSNE8wlMEVELUjZ
0yJ5WX9kKZ2Wx0n3g1tIo8+Zst3Iu/8vtw00hCNKX1Y7KC297c8Ueo2kuaqxMN8a
S4meVbthImdgGonyCww1BfDJG1cSK5w3nia7mDqI8Ne9O+6EBYN9o4Vm4S94S13C
h4Cd3eQ9K06+u7Cs2mfr4n54X0J+fbh0dkCBnKVtS4HnGrGyTwtuq0GxRZ9ZLb2e
50MWrxTrB2c6xAJDZZ7J1CVl8jQH8+qZrr5VfFxwo486Jy1CiUh4cIlBNWyc7k7e
xRh9HOW2kHhiPEPTSOheDCN6JNMnaIGnoKXmuVAV5z21NMIRiQWIad1LVroFFS2i
2aI81KosqspvY5vqcgVZFI8WTWG/1H0xNMSFHmqLaW7R1yz6tzz7yo6oICkox48V
UQMkQsDDE+vAqB93EFoD1Fg+0PybT64wa7Q6iMaPKc4fhnSyYRj2b+5ztiA6FqZ/
Spg9OnksrVLcq5Oa7KHDWEOXUQldXbX3+DATugQxWSKPhpb1LYcjJ/avaQmyFKha
kvQByRGllywwMXF5fg22
=MJ4O
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120725110412</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-25 11:04:12-0400</timestampReceived><subject>Re: [tor-dev] First five Tor tech reports</subject><body>

Hi Zack,

On 7/21/12 2:13 AM, Zack Weinberg wrote:
&gt; On Wed, Jul 18, 2012 at 10:05 AM, Karsten Loesing
&gt; &lt;karsten@torproject.org&gt; wrote:
&gt;&gt; On 7/18/12 5:12 PM, Zack Weinberg wrote:
&gt;&gt;&gt; On Thu, Jul 12, 2012 at 6:12 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt;&gt;&gt; here are the first five metrics tech reports that I'd like to turn into
&gt;&gt;&gt;&gt; Tor tech reports (see #5405 for the idea behind this).
&gt;&gt;&gt;
&gt;&gt;&gt; I'd like to offer some typographical improvements -- it looks like
&gt;&gt;&gt; these are being generated with mostly default LaTeX settings, which
&gt;&gt;&gt; are not great for PDFs that people will mostly read online.
&gt;&gt;
&gt;&gt; Oh, that would be very useful.  Maybe we can come up with a template for
&gt;&gt; all Tor tech reports.
&gt; 
&gt; I have put together a suggested template as tortechrep.cls (it builds
&gt; on the standard article.cls) and updated all five of your tech reports
&gt; to use it.  I also made some very small adjustments to some of the
&gt; content (notably the bridge descriptor listings).
&gt; 
&gt; You can get it from https://gitweb.torproject.org/user/zwol/tech-reports.git .

Looks really awesome!  Merged into the official tech-reports.git.  Thanks!

For other people reading this thread, here are the resulting PDFs:

https://people.torproject.org/~karsten/volatile/fivereports/

&gt; The biggest bikeshed in here is probably the font selection.  I picked
&gt; something that looks good to me and should be comprehensively
&gt; supported in recent TeX Live, but the only thing I feel like
&gt; _insisting_ on about the fonts is "not Computer Modern."

Fine by me.

&gt;&gt; Right.  There's always the trade-off between using colored graphs which
&gt;&gt; don't go well when printed and dashed/dotted lines which are at least
&gt;&gt; equally useful on screen and on paper.  I'm open to suggestions there.
&gt; 
&gt; I liked the varying shades of gray solid line that were in a different
&gt; report.  (Some of those graphs also use dotted lines, but there's only
&gt; one *kind* of dotted line and it's used for something that's not
&gt; terribly zigzaggy, so it's probably OK.)

Oh, right, varying shades of gray would work.  Will try, unless you want
to tweak the graphs first.

&gt;&gt; (Note that the graph sources are in a different Git repository than the
&gt;&gt; LaTeX sources.)
&gt; 
&gt; Where do I find them?  I have a fair bit of experience with ggplot2
&gt; and would like to experiment (may not be able to do so promptly,
&gt; though).

You'll find the R/ggplot2 sources in the metrics-tasks.git repository:

https://gitweb.torproject.org/metrics-tasks.git

There's a task-xxxx/ directory for each report, with xxxx being the Trac
ticket number that lead to writing the report.  You'll be interested in
these three directories:

 - task-2911/ -- An Analysis of Tor Relay Stability

 - task-4030/ -- Case study: Learning whether a Tor bridge...

 - task-4255/ -- An Analysis of Tor Bridge Stability

You'll also need the .csv files which are not checked into the Git repo.
 I put them up here (7.8M):

https://people.torproject.org/~karsten/volatile/data-for-fivereports.tar.bz2

&gt; If you change nothing else about the graphs, please redo the bitmap
&gt; (PNG) graphs in bridge-blockings with vector graphics (PDF) instead.

Done.

&gt; I'd also encourage you to experiment with tikzDevice; it's nice when
&gt; the graphs are font-consistent with the main text, and using tikz
&gt; gives you that for free.  Also R's PDF output is frankly pretty awful
&gt; (most significantly, it doesn't embed any fonts, which makes some
&gt; publishers very unhappy with you).  tikzDevice _can_ generate output
&gt; that is painfully slow to compile through TeX, but I don't think these
&gt; graphs will have that problem.

Sounds interesting.  Do you mind giving an example?

Thanks!
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120726145152</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@torproject.org</senderEmail><timestampReceived>2012-07-26 14:51:52-0400</timestampReceived><subject>Re: [tor-dev] Why change the bridges.torproject.org website to avoid to get bridges by script?</subject><body>

On Thu, Jul 26, 2012 at 2:41 AM, ??Phoenixing &lt;1935842336@qq.com&gt; wrote:
&gt; Hi
&gt;    I live in a country which it block the tor net strictly! Only I can do is
&gt; that I get the bridges from the website. I just want  to get the bridges
&gt; automaticly by writing a script. But now I must get the bridges hand by hand
&gt; and one by one. It's more uncomfortable! Could you change it back?

Sadly, bridges.torproject.org is visited by a number of automated
programs, some of which we suspect are used to harvest the list of
bridges in order to block them.

We hope that adding Captchas to bridges.torproject.org will make it
harder to harvest the list of bridges automatically; the upside being
that the bridges you do get will last longer before being blocked.

I am very interested in any feedback you have regarding bridge
lifetime. Have you noticed that the bridges you get no longer work?
How long do bridges work for you, typically? Any feedback you can give
is helpful!

--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120727070348</emailId><senderName>"=?ISO-8859-1?B?Pz9QaG9lbml4aW5n?="</senderName><senderEmail>1935842336@qq.com</senderEmail><timestampReceived>2012-07-27 07:03:48-0400</timestampReceived><subject>[tor-dev] script for get bridges</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

hi
  
    Firstly, install wget, privoxy, then schedule a task three minutes one time just \
like: someone&gt;$ wget https://bridges.torproject.org. Then you can get a lot of \
.htmlxxx files which contain the bridges from the website. Lastly, write a bash \
command or VBscript under windows, you can grap the xxx.xxx.xxx.xxx:xxxx from the \
.htmlxxx files, and insert into the torrc file. It 's done! I hope that I can do this \
again!  
 best regards


[Attachment #5 (text/html)]

&lt;DIV&gt;hi&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;   Firstly, install wget, privoxy, then &lt;SPAN class=Apple-style-span \
style="WORD-SPACING: 0px; FONT: small/19px arial; TEXT-TRANSFORM: none; COLOR: \
rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; \
BACKGROUND-COLOR: rgb(255,255,255); orphans: 2; widows: 2; \
webkit-text-decorations-in-effect: none; webkit-text-size-adjust: auto; \
webkit-text-stroke-width: 0px"&gt;schedule a task three &lt;SPAN class=Apple-style-span \
style="WORD-SPACING: 0px; FONT: 14px/21px arial; TEXT-TRANSFORM: none; COLOR: \
rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; \
BACKGROUND-COLOR: rgb(255,255,255); orphans: 2; widows: 2; \
webkit-text-decorations-in-effect: none; webkit-text-size-adjust: auto; \
webkit-text-stroke-width: 0px"&gt;minutes&lt;/SPAN&gt; one time just like: someone&gt;$ \
wget &lt;A href="https://bridges.torproject.org"&gt;https://bridges.torproject.org&lt;/A&gt;. \
Then you can get a lot of .htmlxxx files which contain the bridges from the website. \
Lastly, write a bash command or VBscript under windows, you can grap the \
xxx.xxx.xxx.xxx:xxxx from the .htmlxxx files, and insert into the torrc file. It \
's done! I hope that I can do this again!&lt;/SPAN&gt;&lt;/DIV&gt; &lt;DIV&gt;&lt;SPAN \
class=Apple-style-span style="WORD-SPACING: 0px; FONT: small/19px arial; \
TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; \
LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: 2; widows: 2; \
webkit-text-decorations-in-effect: none; webkit-text-size-adjust: auto; \
webkit-text-stroke-width: 0px"&gt;&lt;/SPAN&gt; &lt;/DIV&gt; &lt;DIV&gt;&lt;SPAN class=Apple-style-span \
style="WORD-SPACING: 0px; FONT: small/19px arial; TEXT-TRANSFORM: none; COLOR: \
rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; \
BACKGROUND-COLOR: rgb(255,255,255); orphans: 2; widows: 2; \
webkit-text-decorations-in-effect: none; webkit-text-size-adjust: auto; \
webkit-text-stroke-width: 0px"&gt;best regards&lt;/SPAN&gt;&lt;/DIV&gt; &lt;DIV&gt;&lt;SPAN \
class=Apple-style-span style="WORD-SPACING: 0px; FONT: small/19px arial; \
TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; \
LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: 2; widows: 2; \
webkit-text-decorations-in-effect: none; webkit-text-size-adjust: auto; \
webkit-text-stroke-width: 0px"&gt;&lt;/SPAN&gt; &lt;/DIV&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120728095801</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-28 09:58:01-0400</timestampReceived><subject>Re: [tor-dev] Pyonionoo Descriptors</subject><body>

On 7/28/12 11:44 AM, Sathyanarayanan Gunasekaran wrote:
&gt; If you want some sample summary, bandwidth, or details documents to
&gt; see see how they look like, I can send you the ones I got from Karsten
&gt; during the Tor dev meeting.

Oh, I wasn't aware that Sathya is working on the backend and Megan and
Erik are working on the frontend.  In that case my previous reply
doesn't make as much sense anymore.

Here's a current tarball of Onionoo's out/ directory that the frontend
should use (16.8M):

https://people.torproject.org/~karsten/volatile/onionoo-out-2012-07-28.tar.bz2

&gt; Although, I'm not entirely sure why the web service part of pyonionoo
&gt; would have to parse GeoIP data or calculate bandwidth histories?

Indeed.  Should become clearer when looking at the tarball above.  The
details and bandwidth files (as well as the new weights files) are ready
to be served to clients.  No need to look up anything while doing so.
This is the part that's supposed to be crazy fast.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120728185935</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-07-28 18:59:35-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Protocol grammars as probabilistic channels</subject><body>

On 7/28/12, Zack Weinberg &lt;zack.weinberg@sv.cmu.edu&gt; wrote:
&gt; [I'm moving this from a giant cc: list to tor-dev, I hope that's okay.
&gt;  I *think* everyone involved is already on that list.]
&gt;
&gt; [I apologize for not picking up this ball for so long, I have been ill
&gt; and mostly without the brain.]
&gt;
&gt; On Sun, Jul 22, 2012 at 2:26 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;&gt;
&gt;&gt; Specifically, to obfuscate a ‘payload protocol' data stream:
&gt;&gt;
&gt;&gt; * send it through an arithmetic-code encoder, using a model which
&gt;&gt; contains a (low-probability) ‘pad' symbol;
&gt;&gt; * encrypt it with a stream cipher;
&gt;&gt; * send it through an arithmetic-code decoder, using a model which
&gt;&gt; matches the ‘cover protocol' (the protocol you are trying to mimic).
&gt;
&gt; I like this way of modeling the problem, but I see some practical
&gt; problems with it.  The payload protocol in this case is Tor's link
&gt; protocol, which is already encrypted, so your first step would appear
&gt; not to do anything (well, except to TLS's cleartext record headers,
&gt; but I don't think that will gain you much).

The first step (the arithmetic-code encoder) allows the obfuscator to
introduce padding symbols into a bytestream without either
understanding or breaking the protocol it is obfuscating.  This is the
only reason for the obfuscator to use an arithmetic coder on the
payload protocol.

If the payload protocol is datagram-oriented and can tolerate junk
appended to the end of a datagram, or if the software implementing a
stream-oriented payload protocol can generate padding at the end of a
message when the obfuscator requests it, the payload-side arithmetic
coder should be omitted.  (Note that Tor itself doesn't satisfy either
of these requirements; but Tor-over-TCP-over-IP is a datagram-oriented
protocol with a length field in each datagram.)

&gt;  The stream cipher
&gt; provides no integrity protection for the message, which maybe we can
&gt; get away with since the higher level has it, and more importantly, no
&gt; sequencing.

The stream cipher in the middle prevents the payload-side
arithmetic-code encoder (or the underlying protocol) from making the
stream fed to the cover-side decoder (computationally) distinguishable
from a random bitstream.

A datagram-oriented payload protocol will need a different scrambling
layer as well.  The easiest solution I can think of is to encrypt the
message header with a large-block block cipher, and assume that
clients usually (but not always) keep the same IP address during a
protocol session in order to reduce the number of keys that the server
needs to try for each message.

&gt;  Several cover protocols of interest (most importantly
&gt; HTTP) break a session up into many short-lived TCP connections.  That
&gt; means you have to allow for the possibility that cover-protocol
&gt; messages will arrive at the decoder out of order.  You also need the
&gt; ability to send control messages at a level below the payload
&gt; protocol, for key agreement, reassociation of new connections with
&gt; ongoing sessions, and possibly other things we haven't thought of yet.

TCP transports a stream protocol over an unreliable unordered datagram
protocol.  Surely it can't be too hard to add a security (i.e.
encryption and authentication) layer to an unreliable unordered
datagram protocol.


&gt; The "chopper" component of StegoTorus tackles these problems.  Have
&gt; you seen the draft paper?

Probably not.

&gt;  It has its own problems -- the one I'm
&gt; wrestling with now is, the _amount of payload data_ sent in any given
&gt; message gets frozen the first time it is transmitted; if you need to
&gt; _re_transmit, you'd better be able to send at least that much data
&gt; right now! (Padding can of course be varied.)

TCP can increase or decrease the amount of data sent in a
retransmitted datagram.  (I suspect that real TCP implementations
actually do retransmit datagrams with less data, during path MTU
discovery.)


&gt; I would be curious to know if you think your arithmetic-decoding
&gt; approach to cover generation could reasonably be made to work within
&gt; StegoTorus' framework.

The arithmetic-code decoder on the cover-protocol side may (should)
have been proposed before.  The other two pieces were my idea, but
they were for stream-oriented obfuscation, and you pointed out above
that they suck for a datagram-oriented obfuscator and need to be
replaced.


&gt;&gt;&gt; George turned me on to this paper,
&gt;&gt;&gt;
&gt;&gt;&gt; "Provably Secure Steganography"
&gt;&gt;&gt; http://www-users.cs.umn.edu/~hopper/tc-stego.pdf
&gt;
&gt; I have to say that I am very skeptical about the practical value of
&gt; this paper, because it requires one to characterize the probability
&gt; distribution of all possible messages in the cover protocol, which is
&gt; not practically possible for any nontrivial protocol.  I could see an
&gt; approximation being good enough for our purposes, though.

(Note that Zack is quoting someone other than me there.)


&gt;&gt; Don't hide information directly in the syntax -- it's easy enough for
&gt;&gt; Them to rearrange protocol messages in ways that will not interfere
&gt;&gt; with standard-conformant clients and servers, but will disrupt crappy
&gt;&gt; protocol obfuscators that don't implement the cover protocol
&gt;&gt; correctly.  Use a semantic model of the cover protocol instead.
&gt;
&gt; vmon and I have been wrestling with this one a bit in the context of
&gt; HTTP and we've pretty much come to the conclusion that we need an
&gt; actual implementation of HTTP, into which we plug data.  Fortunately
&gt; there is no shortage of HTTP implementations.
&gt;
&gt;&gt; ‘Blocking resistance' is *very* different from ‘detection resistance'
&gt;&gt; (i.e. ‘indistinguishability from normal traffic' for some value of
&gt;&gt; ‘normal traffic').
&gt;&gt;
&gt;&gt; * ‘Blocking resistance' does not require that a cover protocol be
&gt;&gt; ‘indistinguishable from X' by the adversary, only that the adversary
&gt;&gt; be unable to block it.  For example, an adversary which can only
&gt;&gt; ‘block' communications by disrupting a connection using extra (forged)
&gt;&gt; packets will not be able to block a UDP-based protocol.
&gt;
&gt; The adversary we're concerned with has control of all the border
&gt; routers between the client and the server, so they can do things like
&gt; blackhole all packets with a particular source or destination.  I
&gt; would argue that detection resistance is in fact required for blocking
&gt; resistance against this adversary.

But only ‘detection resistance' against any box that They can use to
control a blocking system, and that can detect the protocol quickly
enough to usefully reduce the amount of data that each user can
exchange with each bridge.


&gt;&gt; * A protocol which is ‘indistinguishable from' some protocol which the
&gt;&gt; adversary wants to not block may not provide ‘blocking resistance'.
&gt;&gt; For example, a crappy obfuscator which uses a syntactic model of HTTP
&gt;&gt; instead of a semantic model can be blocked by just about any
&gt;&gt; off-the-shelf HTTP proxy.
&gt;
&gt; That effect also provides a distinguisher from real HTTP, doesn't it?

Only if They can tell that They blocked an obfuscator's traffic.  They
may not be able to detect that.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120729140734</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-07-29 14:07:34-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

Follows the report of the last 10 days.

Coding. hellais warned me about a possible xsrf vulnerability in the
APAF's panel, which should be fixed with 629828d . I have also
successfully implemented a working django blog engine - ZinniaBlog -
on the top of apaf.

Documentation. Discussing with my mentor, it came out the need to use
both sphinx and a wiki. The first one, for APIs documentation - that
are not going to change often, and should be more or less stable; the
second one, for tutorials and external services - more probable to
change frequently, and with a more interactive support from a possible
community. So, I've updated the documentation also with latest code
changes, and put it on readthedocs:
http://apaf.readthedocs.org/en/latest/index.html

Some random cleanup - GUI modules have been moved to a new package
apaf.ui, html templates split from static/ and moved to a new
templates/ directory, etc.

Frontend. Re-started the development of panel pages. using cyclone's
templates. Basically, we plan to have both a javascript application
taking into account tor network's delays, and a plain html for
browsers having js disabled.


-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120729162032</emailId><senderName>Kevin P Dyer</senderName><senderEmail>kpdyer@gmail.com</senderEmail><timestampReceived>2012-07-29 16:20:32-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming about steganographic transports</subject><body>

On Wed, Jul 25, 2012 at 9:18 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; This is a summary of some discussion among developers of pluggable
&gt; transports about steganographic channels and deriving them from protocol
&gt; grammars. Two things prompted the discussion:
&gt;
&gt; [snip]
&gt;
&gt; David (yours truly) wants to write or help write a simple pluggable
&gt; transport derived from regular-expression signatures, even with the
&gt; limitations shown above. Client and relay would need matching signature
&gt; models. For the same of simplicity, it will only seek to match the given
&gt; signature, and not be indistinguishable in the strong sense mentioned
&gt; above. It won't do symmetric encryption of the underlying TLS (or if it
&gt; does, will use a fixed key). It won't use the constructions from the
&gt; Provably Secure Steganography paper, rather it will just encode its
&gt; stream directly in DFA edge transitions. I think it will be interesting
&gt; to see 1) how far a simple system can get us, and 2) what additional
&gt; changes we would have to make to be provably secure against censors
&gt; using more sophisticated computational models than regex.

Protocol grammars present an interesting foundation for designing
pluggable transports. As Roger knows, my co-authors and I came up with
this idea about a year ago and have since been working on realizing it
too. We call our approach "Format Transforming Encryption."

Our approach at a high level is similar to what you describe: we use
regular expressions to efficiently encode traffic on the wire. We've
been working out a lot of the challenges that need to be overcome to
make our approach feasible. As you could imagine, it's non-trivial to
produce languages that are efficient, satisfy basic security
constraints, and are able to pass through proxies. However, I'm happy
to report we have a proof-of-concept that's nearly ready to release to
the Tor community. We are in the process of preparing a research paper
for submission. Once it's ready we'll also post a technical report and
I'll point you guys to it.

At that point ---should be just a couple of weeks--- I'll be happy to
explain more details about our work, share code, etc. There will, of
course, be lots of interesting questions remaining about practical
deployment and we'd be happy to get feedback to improve our framework
and get it in shape to be deployed with Tor.

-Kevin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731124913</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-07-31 12:49:13-0400</timestampReceived><subject>Re: [tor-dev] introduction and progress toward an interactive version of a Tor metrics website</subject><body>

Hi Walter, hi Arturo,

On 7/31/12 4:35 AM, Walter Kim wrote:
&gt; Hi Karsten, Arturo, and others,
&gt; 
&gt; Sorry for being out of touch for a couple weeks; I had some day job deadlines.
&gt; 
&gt; I've added more data (bandwidth, users) to site I'm working on:
&gt; http://tigerpa.ws/tor_metrics/
&gt; And set the default time frame to be the last 3 months.

Looks great!

I fixed a few things on the metrics part that generates the data you
process when looking at your graphs:

 - JSON files are now cached instead of generating them freshly for each
request.  This might improve performance of your site up to 1 second for
large JSON files (e.g., relays by country).

 - The last 1--2 days of data are now cut off by default.  We might not
have accurate data for those dates, so it's better to leave them out.

 - Bandwidth History by Relay Flags is now on the same scale (bytes per
second) as the other Bandwidth lines.

&gt; I have on my list to do the following:
&gt; 1. Buttons to zoom in/out and pan forward/backwards in time.
&gt; 2. Add GitHub repo link for code and issues.
&gt; 3. Deal with making the UI for accessing countries better (e.g. show
&gt; the top countries and a drop down menu for the rest).
&gt; 4. Get the performance data up.
&gt; 5. Make the UI labels on the right for showing different graphs easier
&gt; to read when the selected/colored.
&gt; 6. Make the graph line continue with the previous value if the data
&gt; value is null.

Sounds all very useful.

&gt; Please do submit issues to the GitHub repo page:
&gt; https://github.com/tigerpaws/tor_metrics
&gt; for another other things I should add/fix.

Just added a minor/trivial issue.

&gt; Arturo, the Atlas site looks really nice.  Perhaps once I get all the
&gt; basic functionality into the site I'm working on, there could be some
&gt; merging of efforts.  I could try to match the Atlas style as well.

Merging the two sites makes sense to me.

Arturo, you once had plans to add more features to Atlas, didn't you?
These graphs seem like a good match to extend Atlas' current
functionality.  But my sense is that you're too busy with deliverables
to hack on Atlas, right?  (Please correct me if that is not the case!)

Maybe we can sketch out a plan for adding new features to Atlas: how's
the navigation supposed to look like (e.g., would it make sense to add
Walter's site as a new "Statistics" page between "Home" and "About"?),
where would new stuff be added in the codebase, etc.  Then Walter and
other volunteers could start extending Atlas accordingly.  I could
review changes for obvious bugs and push them to atlas.tpo, unless you'd
prefer to do that yourself.

Thanks!
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731133005</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-07-31 13:30:05-0400</timestampReceived><subject>[tor-dev] [GSoC] Stegotorus</subject><body>

Hi there,

The payload strategies can be changed easily now by inheriting different
class from PayloadServer. Current strategy is now in TracePayloadServer.

For ApachePayloadServer strategy, server side is complete. for the
client side, I need a handshake in steg level so the server sends the
client, url dictionary. This needs to manipulate the program in level 
of Chop protocol. I spent few days to add this capability where chop
 send a reply handshake to the client (based what is in the paper) I
 haven't find it yet. Time to ask my mentor.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731145352</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@torproject.org</senderEmail><timestampReceived>2012-07-31 14:53:52-0400</timestampReceived><subject>Re: [tor-dev] bridge's lifetime</subject><body>

On Sun, Jul 29, 2012 at 11:26 PM, ??Phoenixing &lt;1935842336@qq.com&gt; wrote:
&gt; hi
&gt;
&gt;    I have get more than 1000 bridges and I totally inserted into the torrc
&gt; file. So I can not notice which bridge is no longer work. The bridges can
&gt; not be blocked totally. Some bridges seem that no longer work, but after
&gt; sometime (three days or more) they work again.:-)

You might notice some repetition in the list of bridges you get --
BridgeDB tries to hand out the same 3 bridges to each requesting IP
(If you are using the https://bridges.torproject.org distributor).
Furthermore, there are only about 1000 bridges in the Tor network, and
not all of them are assigned to the https distributor:

  https://metrics.torproject.org/network.html

This is by design, so as to prevent a single person from obtaining the
entire list of bridges. Obviously, someone who has a lot of IP
addresses (e.g. owns a botnet) can get more bridges. This is exactly
the scenario for which ReCaptcha was deployed.

Does that make sense?

--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731152445</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-07-31 15:24:45-0400</timestampReceived><subject>Re: [tor-dev] Def Con Kaminsky talk (censorship detection)</subject><body>

Dan replies:

On Mon, Jul 30, 2012 at 11:33:09AM -0700, Dan Kaminsky wrote:
&gt; Basically, if you spoof HTTP or HTTPS headers from a Flash socket to your own
&gt; IP, with someone else's Host/SNI, a transparent proxy is going to send its
&gt; interposing content to the Flash SWF and not to the browser.  It's a really
&gt; deployable way to see nasty stuff.
&gt; 
&gt; One warning is that if hijacking is DNS based, and not transparent proxy based,
&gt; you don't see anything with this stunt (though favicon.ico detection still
&gt; works).
&gt; 
&gt; On Mon, Jul 30, 2012 at 10:57 AM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt;     I saw an interesting talk by Dan Kaminsky at Def Con that touched on
&gt;     some ideas for censorship detection. He mentioned OONI-probe and talked
&gt;     about his project CensorSweeper. It tests blockedness of web sites by
&gt;     making cross-domain requests for favicon.ico and displaying them in a
&gt;     minesweeper-like grid.
&gt; 
&gt;     http://www.censorsweeper.com/
&gt;     https://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/
&gt;     hacks/censorsweeper
&gt; 
&gt;     He also mentioned something, which unfortunately I didn't follow very
&gt;     closely, about using Flash sockets to spoof HTTP and HTTPS headers. I
&gt;     think the gag here was sending these spoofed connections to a server you
&gt;     control (so you can answer the crossdomain policy requests without which
&gt;     Flash Player will refuse to connect), but you give it a Host header of a
&gt;     censored site or something like that.
&gt; 
&gt;     http://miriku.com/wp/2012/07/decon-day-3/comment-page-1/#comment-1416
&gt; 
&gt;     Unfortunately I don't have the conference DVD which presumably contains
&gt;     the slides he used, but videos usually show up online after some number
&gt;     of months.
&gt;    
&gt;     David Fifield
&gt; 
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731164036</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-07-31 16:40:36-0400</timestampReceived><subject>[tor-dev] Trip Report: Defcon</subject><body>

Hi all. When tor developers go on trips we commonly write a trip
report afterward. My recent trip to Defcon didn't contain anything
sekrit so sending the notes I took here. If any of these presentations
sound interesting to you then videos should be available later on the
Defcon site.

Cheers! -Damian

PS. I was new to many of the things being presented so my notes quite
likely have some inaccuracies. Don't quote me on anything - watch it
for yourself if interested.

tl;dr
Only presentations related to the privacy field were...

* Can You Track Me Now?
Panel discussion on mobile GPS tracking with lots of interesting stats.

* Crypto and the Cops
EFF presentation on the 5th amendment protections and how it applies
to compulsory decryption.

========================================

  Las Vegas is... an unusual city. Like most people I knew I wasn't in
Kansas any more when I saw slot machines in the airport. By day the
city's not much to look at. Mostly just a bunch of dusty buildings
baking in the 110 degree desert heat. But by night the whole city
illuminates in neon lights making it quite a spectacle.
  My first night I explored the strip and several of the larger
casinos including Bally's, Bellagio, Caesar's Palace, and the Rio
where the conference was taking place. They were... enormous. Caesar's
in particular took me almost a half hour simply to walk the length of
it. Probably my favorite sight was the Bellagio fountains which had a
magnificent water show choreographed to 'Singing in the Rain'. It was
very classy.

========================================

The second day was the first of the conference and mostly consisted of
two things: standing in line a couple hours for registration and
introductory talks. The talks were just a single track and included...

* Wireless Security: Breaking Wireless Encryption Keys
Handshake process for WPA, WEP, and WEP2 among other things. I was
still sorting out the material that I got during registration so I
didn't pay very close attention which was a pity since I could use a
refresher.

* Intro to Forensics: Tools &amp; Tactics
A very brief introduction to nmap, tcpdump, netcat, ntop, and
Metasploit. Nothing new to me here though it was a nice reminder that
I know less about them than I'd like. I haven't played with them since
grad school and should try them again when I get home...

* Cerebral Source Code
Presentation on social engineering. Sadly missed a large part of this
one since I still hadn't had breakfast. The QA portion that I saw was
fun, mostly questions about how he'd extricate himself from various
sticky situations. His answers were clever, as well as entertaining.
My favorite...

Q: What would it take to have more trust in this community?
A: LSD?

* DC101: Defcon Survival
This was a panel discussion with general advice for enjoying Defcon.
Mostly it boiled down to 'you get what you put in' which caught me a
little off guard. I came here expecting to watch some talks, see
Vegas, and schmooze with other conference attendees. Defcon, however,
aims to be a lot more interactive than that and the organizers put a
lot of effort into events that weave throughout the conference.

* HF Skiddies suck, don't be one. Learn some basic Python.
This one made me twitch. The speaker both gave a very bad tutorial for
getting started with python (who the hell fires up *Eclipse* every
time they want to write python?!?) and seemed to be incoherently drunk
for most of it. Mostly I spent this time reading the program.

* Hacking the Hackers: How Firm is Your Foundation
This was a long checklist of various topics the speaker thought the
Defcon audience should know about, largely focused on hardware hacking
since that was his specialty. Interestingly 'TOR' was the first thing
he listed. I always wondered how that spelling persists despite our
efforts to stamp it out. Considering that this conference had roughly
20,000 attendees, each of whom will pass it along I guess now I
know...

* Fun with the Lockpicking Village
A few years back I read the MIT guide to lockpicking and spent a
couple days practicing against my door. Since then I've fallen out of
practice and this was a nice reminder about both the basics and a few
things that I didn't know (how bump keys work, defeating deadlatches,
how to use a can of compressed air to defeat magnetic locks that allow
egress traffic, etc).

The hallway track wasn't anything too notable. Met three developers
with Metasploit and someone from the security group I attended at WSU.
But that was about it.

========================================

Second day of the conference I ran into someone from Amazon Infosec. A
talk I wanted to attend concerning the attack surface of near field
communication (NFC) devices was full, but several of the others were
interesting...

* Can You Track Me Now?
This was my favorite presentation of the whole conference. A panel of
four presenters, including Chris Soghoian, discussed geolocational
privacy of mobile devices including local threats, historical
information, and requests for real time tracking.
  Why does this matter, you ask? Because when it takes a team of
agents to track your every step surveillance is costly. But when a
single agent can track you and your every acquaintance from the
comfort of his desk we get a whole lot closer to a 1984 style
surveillance state real fast.
  Sprint now has a department of 200 people to service wiretapping
requests. They also provide a self-service portal to law enforcement
that has been used six to seven hundred thousand times a year, for 8
million GPS coordinates. This includes your every move going back 6
months to 2 years depending on your provider. 7 years in the case of
AT&amp;T.
  And no, none of this requires probable cause or a warrant. In other
words, beware if your ex is a cop.
  Another eye opening bit of the talk was phone encryption. Apple has
a master skeleton key for all iPhone devices so, when requested, they
can send law enforcement a DVD with all the contents of your phone.
Android is a little different in that they remotely reset your
password to something that they can give the law enforcement agent.
  Beside three letter agencies, ad networks and apps are also a
concern. 47 of the top 100 mobile applications send locational
information to 3rd parties. For instance, 'Best Alarm Clock' sends
locational information in the clear to 3rd parties whenever the app is
used (somehow I doubt they need to do that for the alarm clock to
function...).
  On a policy front one slight glimmer of hope comes from a recent
case which ruled that placing a GPS tracking device on your car *does*
constitute a search and hence requires a warrant (which means they
kinda sorta need evidence of wrongdoing, *gasp*!). Don't read too much
into this, though. The majority opinion ruled this way because it
technically constituted trespassing on your property.
  Just because you're paranoid doesn't mean they're *not* out to get you...

* Crypto and the Cops
Marcia Hofmann from the EFF discussed 5th amendment protections and
how they apply to being compelled to reveal your passphrase for an
encrypted device. There have been five cases in this area so far, some
that ruled each way in terms of compulsory decryption. Though not
intuitive, the main determining factor in those cases constituted a
gap in knowledge. If law enforcement knows exactly what they're
looking for and where it is then there's less chance of the amendment
applying than if the search is a fishing expedition. Moral of the
presentation: never volunteer information, even if you're innocent.
Ask for a lawyer first.

* Making Sense of Static
Walkthrough of GPS signal acquisition, mostly focusing on how
receivers account for Doppler shift and determine the code phase. The
speakers also presented libswiftnav, an open source implementation of
a GPS receiver system.

* Life Inside the Skinner Box
Cautionary presentation about the automation of law enforcement and
where it might someday lead. This was pretty high level, discussing
the societal implications.

* Anti-Forensics and Anti-Anti-Forensics
Discussion by a forensic examiner of several tricks that can draw out
the length of an investigation (and by extension cost, increasing the
chance of settlement). He also covered how they can be mitigated. Some
of them included...

- using a non-standard RAID configuration
- randomizing file crated/modified timestamps
- altering file header types
- using restricted windows filenames (CON, PRN, AUX, etc)
- owning lots 'o media
- modifying files provided with your system so the checksums no longer
match what a default install would include (and hence adds to the
haystack of things to sift through)

Before heading back for dinner I also caught part of a Skytalk. I
didn't find the presentation to be too interesting (brainstorming
about mass data aggregation), but I got a chuckle from the sign on the
door: "Absolutely no cameras allowed. Violaters will be violated
violently." :P

========================================

I had less luck on the third day of the conference, hopping between
several talks that weren't particularly interesting. The best I found
were...

* World War 3.0 - Chaos, Control, the Battle of the Net
Policy talk about Dubai's upcoming WCIT negotiations (aka, the thing
that's gonna politicize the Internet). Most of the presentation was
surprisingly fluffy, the only interesting bit coming from Dan Kaminsky
who made the point that there's generally four interests involved...
- privacy
- security
- anti-piracy
- sovereignty

... with 'reliability' being the golden goose that no one wants to
cook. His point was simply that these four camps war and forge
alliances, privacy and security for instance sometimes at odds over
anonymity but thick as thieves on other obvious fronts. He also said
something like "We have made a system optimized for moving pictures of
cats. And it's *really* good at it. Though we'd like it to do more."
(likely horribly misquoted)

* Exploit Archeology: Raiders of the Lost Payphone
Step by step process of reverse engineering and reprogramming an
Exetel payphone. Twenty year old software from a company that imploded
without a trace long, long ago. Ye gods each step turned out to be a
trek to Mt. Doom and back...

* Off Grid Communication with Android
Mesh network by introducing a transparent proxy after going through
the Java networking interface. He wrote something based on the 'Wi-Fi
Tether for Root Users' app to put his phones into ad-hoc mode then
tried both the OLSR and BATMAN proactive routing protocols. He also
tried a reactive protocol that broadcasts messages, then left routing
decisions to the receiver which can trivially pick the shortest path
though this had issues scaling above 200 devices or so.

* Back Ops
My favorite talk of the day, given by Dan Kaminsky. It was originally
slated for two hours, but got crunched at the last minute into a one
hour slot so he went pretty fast over five different topics
including...

- Timing Attacks
Attacks can distinguish 15-100 ms deltas over the Internet and 100
nanoseconds over a LAN. Making everything take an identical amount of
time is generally unrealistic since it forces everything to worst case
performance. His view was not to let the perfect be the enemy of the
good, and simply introduce random delay into requests.

- Bad Random Number Generation
First a rant that for twenty years security engineers have worried
about entropy sources, yet we still haven't gotten it right. The
common sources of entropy are: hardware RNG, keyboards, mouse, and
disk rotation. However... most servers don't have any of these,
especially with the move to virtual storage devices. Roughly 1/200
keys on the Internet are poorly generated, and he proposed using
idiosyncrasies in clock timing as an alternative source of randomness.

- Security Aspects of Languages
Starting with the question 'why is PHP so damn popular?', he discussed
why secure coding practices like prepared statements often aren't
followed. His conclusion: SDEs are in charge and they just want their
service to work. The more of a pita security makes itself the more
it'll be viewed as an obstruction and hence circumvented. He then
proposed more usable security patterns, for instance making the
languages smart enough to translate queries like "SELECT name FROM
users WHERE username=$id" into the proper prepared statement
counterpart.

- Censorship Detection
After a brief mention of OONI-Probe he discussed a censorship
detection method of his via the use of favicons. I saw this in an
earlier presentation of his and he mostly skimmed through it.

- Vulnerability Scanning
Trying to answer the question of 'how much of the Internet is
vulnerable to X', he used *stateless* TCP connections to scan hosts
far quicker than he usually could. The trick was to skip retaining any
information about outbound connections, making fire-and-forget TCP
handshakes and leaving it to the other end to remember the state of
the connection.

========================================

I didn't expect much from the lineup on the last day, but some of them
were surprisingly good. I also ran into a couple more people from
Amazon and Runa very briefly.

* SIGINT and Traffic Analysis for the Rest of Us
Very good talk on APCO Project 25 (P25), two way radio communication
used by police, fire departments, federal enforcement, the secret
service, and the DoD. A drop-in replacement for analog FM, this was
first introduced in the early 1990s. It can optionally be encrypted,
with federal/DoD users commonly enabling it and police/fire leaving it
off. If you see an earpiece or bulky walki-talky then this is what
it's probably using.
  The speaker discussed several vulnerabilities in P25. Firstly, it
uses a forward correcting protocol that is easy to jam. Usually a
jammer needs to be stronger than the signal it's jamming, but with P25
it's sufficient to selectively block a message's header to cause the
rest of the message to be ignored. How hard is this, you ask? To
cheaply jam a P25 signal you just need a $15 GirlTech IMME toy (it
cost less to buy the toy than the transmitter that comes in it). As an
added bonus it comes in pink or purple and comes with ponies on the
box!
  Second, P25 has no notion of authentication. Anyone can transmit and
user ids can be trivially spoofed. The user id of transmitters are
sent in the clear, even when encryption is enabled.
  Third, any P25 device that receives a malformed signal will reply
with the user id (again, in cleartext). This is invisible to the user
and means that you can ping all P25 devices and triangulate their
positions. Think of it as the "Marauder's Map" for the secret service.
  Fourth, P25 is a narrow band radio broadcast (12.5 Khz) which is
fairly easy to intercept via a scanner (such as an Icom R-2500). This
makes encryption a must for private communications. However, the
encryption of P25 devices has several usability issues...

- Encryption is enabled or disabled via a switch on the handset. The
only indication of if encryption is enabled or not is a "1" or "(/)"
symbol on the handset. Which means 'encrypted' and which means
'cleartext' is evidently a common point of confusion.

- The beep that the device makes to indicate that it's in encrypted
mode is the same that's used to indicate a low battery among other
things.

- Encryption is transparent to the receiver, so if an individual in a
group is broadcasting in cleartext then it's impossible for anyone
else in the group to know and correct them.

- Rekeyed P25 devices become incompatible while being rekeyed, forcing
users to drop to cleartext if any of the devices haven't yet been
updated.

As a result, about 30 minutes per day of federal communications are
sent in the clear. In a multi-city study on what this included
researchers were able to gather the names of informants, license
places of vehicles being tailed, etc. These snippets were also enough
to reasonably figure out what investigations were going on at a given
time.
  When brought up with the federal field offices encryption rates
improved for a week or so, then dropped back to their prior ratio of
cleartext. The researchers also discussed these with the
manufacturers, who insisted that it wasn't their fault if their users
couldn't properly use their devices.
  Btw, the only federal service to have a spotless record in terms of
encrypting their communications? The US Postal Service.

* SCADA Strangelove or: How I Learned to Start Worrying and Love the
Nuclear Plants
This was a talk on the security of SCADA HMI software (or lack
thereof), which is used throughout several minor things like nuclear
power plants. Originally to prevent plant operators from installing
pong on the kiosks, HMI applications hasn't evolved much since those
humble origins. This talk was funny as hell, going over issues with
several widely deployed HMI systems...

- Microsoft Bob: Early attempt at a friendly, 'helpful' interface. If
you made three incorrect password attempts you got a dialog saying "I
see you forgot your password. Please enter a new one here...". It also
stores passwords in plaintext.

- InvisiLink: Stored passwords are an xor with a static key. What is
that key, you ask? "0123456789"

- KingView: Passwords simply have their last byte subtracted from 0xff.

- Iconies Genesis32 9.2.2: The login dialog includes a 'challenge
code' that can be used as an alternative method of getting local admin
access. To use this code the user is supposed to call customer
service, who then provides the password corresponding with the code.
Alternatively, you can take the first eight characters of the
challenge code's md4 hash to do the same.

  There were also a couple talks on 'firesheep inspired' frontends for
various exploits. The first did NTLM relaying against Windows
corporate networks to allow for a variety of not-so-nice things like
reading through another person's Exchange inbox.
  The second was a UI to automatically ARP poison a network then use
sslstrip to snag credentials. I felt a little embarrassed for the
speakers in this talk since they first tried to sensationalize what
sslstrip could do. After that they claimed to have a stealthy MITM,
then described the noisiest attack I can think of. Not only did they
ARP poison the network and do SSL downgrading, but they did a nmap
scan of every host on the network and, just for added stealthyness,
blocked all tunneling protocols (ssh/vpn). The later was on the theory
that "they'll just use the local network instead". Uggg.
  So more annoying push-button solutions for script kiddies. Yay.

========================================

Ending conclusions:
Fun and interesting conference, but *damn* vegas is pricey. The trip
was 1.5k and only $200 of that was the conference registration. I
enjoyed it and it was a good thing to do at least once, but way too
costly to do again.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731182541</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-07-31 18:25:41-0400</timestampReceived><subject>Re: [tor-dev] [Stegotorus] chop server to client handshake and the url dictionary</subject><body>

On Tue, Jul 31, 2012 at 9:35 AM, vmon &lt;vmonmoonshine@gmail.com&gt; wrote:
&gt; I'm working on changing how client sends info to the server for
&gt; ApachePayloadServer, according to our discussion. This is how
&gt; it's going to be for now. The server sends a list of file in some
&gt; order to the client at the begining of the conversation. The client
&gt; will send its coded request by chosing a url a from the list and a
&gt; parameter that it sends to that file such as:
&gt;
&gt; /groups/watch.cgi?param=QTwFt25

Sounds good.

&gt; For this I need to send the list of files somewhere to the client. I
&gt; looked at the paper and paper says that on a new link the server will
&gt; send a reply to the handshake of the client with ECDH data. I thought
&gt; there would be a good place to send these data as well. Unfortunately
&gt; I couldn't spot that in the code. Could you please tell me where that
&gt; is happening?

That ... still hasn't been implemented.  *embarrassed*  But that's not
where this should go, anyway.

&gt; Another option is to assign an opcode to this operation, and when the
&gt; client receive that opcode then, it will process the packet differntly
&gt; rather than just write its content in upstream event buffer.

This is what you should do.  Remember how opcodes 128 through 255 are
"reserved for steg modules"?  This is exactly what I had in mind.  The
way it ideally ought to work is going to involve changes to the
chopper as well as your code; I'm not going to have time to do the
chopper end for at least three weeks; if you want to tackle that,
please be my guest, but if you'd rather kludge something in your code
instead, that's fine too.

Here's how it ought to work:

On the receive side, you just need to add a steg method to process a
reserved-for-steg-modules block, taking F and the data payload (in an
evbuffer).  Call it from process_queue when appropriate.

On the transmit side, we would like to send your special block in the
same *cover protocol* message as the server's handshake reply, so we
need a little more complexity than just a "please send this evbuffer
now with this opcode" steg-to-chop callback.  I'm not sure this is the
right API, but what comes to mind is to extend transmit_room so that
it returns a second number, which means "if you send on this
connection next, I want to send Y bytes of additional data". Then
there's a new steg method called something like augment_message, which
gets called in a loop right after we prepare and encrypt the actual
block to transmit.  Each time it fills up an evbuffer with data and
returns a steg-specific opcode; the chopper packs the evbuffer and
opcode into another block and appends it to the block that's about to
be transmitted.  Finally steg_transmit gets the entire message to be
steganographed, which may now consist of several blocks.

&gt; For now I suppose that the client has the list and write the code from
&gt; that point till you give me more info.

It would also be fine if you want to get things working on this
assumption first.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120731215629</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-07-31 21:56:29-0400</timestampReceived><subject>[tor-dev] How to best support tor 0.2.3.x in Tor Browser Bundle?</subject><body>

[Attachment #2 (multipart/signed)]


Quick recap from #tor-dev IRC convo with Nick, Roger, and Andrew:

We need to get a usable tor 0.2.3.x-rc bundle out RSN so we can declare
it "stable", but there are concerns that using Firefox 14 with this will
continue to cause unexpected problems and otherwise scare people away
from testing tor 0.2.3.x enough.

However, I still need to have a place to commit TBB-alpha patches, and
have three bugfixes (including a fix for a FF14 crash bug that was
discovered by tor-qa) that I'd like to get into the alpha series. Also,
if we don't provide Firefox Rapid Release with regular alpha testing,
we're going to be really, really sad when everything breaks at once in
November with the next Firefox ESR.

One option is to create a temporary "rc" branch of torbrowser.git's
maint-2.2 to build tor 0.2.3.x but with the rest of a "TBB stable"
bundle with Vidalia 0.2.x and Firefox 10.x ESR, and leave maint-2.3 as
"TBB alpha".

A second option is to create a more permanent "TBB beta" series, with
whatever software smells like it is getting close to stable at a given
point in time.

A third option is to just keep doing English-only maint-2.3 builds
back-to-back until tor-qa stops reporting crash bugs or strange issues.

However, we need input from Erinn to decide the best approach. If the
"rc" fork (or a permanent beta branch) messes up the build process or
introduces issues with build automation work, perhaps it is not the
right way to go, and we should just keep doing english-only maint-2.3
releases back-to-back until FF14 is more stable (Note: it works OK for
me now in my test builds with the crash fix applied).

So Erinn, which one is least painful for you?

Also, does anyone else have any other input or suggestions on how to
approach this problem? We're probably going to run into this issue
periodically due to our different components stabilizing at different
points...


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120606044855</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-06 04:48:55-0400</timestampReceived><subject>[tor-dev] Stem Sphinx Documentation</subject><body>

Hi Ravi, Beck, and everyone else hacking on stem. I just finished and
merged a rewrite of our documentation into reStructuredText. The
results are... very pretty.

http://www.atagar.com/transfer/tmp/stem_html_12_06_05/

Next I plan to make a landing page for stem, and a cron process which
will automatically keep a documentation page up to date with the
current git master branch. Some pages that you might find especially
relevant...

Ravi
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.html#module-stem.connection

Beck
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.html#stem.control.Controller

Karsten
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.descriptor.html#module-stem.descriptor.reader

Norman, Erik, and Megan
http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.util.html#module-stem.util.proc

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120612103242</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-06-12 10:32:42-0400</timestampReceived><subject>Re: [tor-dev] Proposal 188: Bridge Guards and other anti-enumeration defenses</subject><body>

On Thu, Oct 20, 2011 at 06:00:20PM +0000, Robert Ransom wrote:
&gt; On 2011-10-20, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; &gt; 4.3. Separate bridge-guards and client-guards
&gt; &gt;
&gt; &gt;    In the design above, I specify that bridges should use the same
&gt; &gt;    guard nodes for extending client circuits as they use for their own
&gt; &gt;    circuits.  It's not immediately clear whether this is a good idea
&gt; &gt;    or not.  Having separate sets would seem to make the two kinds of
&gt; &gt;    circuits more easily distinguishable (even though we already assume
&gt; &gt;    they are distinguishable).  Having different sets of guards would
&gt; &gt;    also seem like a way to keep the nodes who guard our own traffic
&gt; &gt;    from learning that we're a bridge... but another set of nodes will
&gt; &gt;    learn that anyway, so it's not clear what we'd gain.
&gt; 
&gt; Any attacker who can extend circuits through a bridge can enumerate
&gt; the set of guard nodes which it routes its clients' circuits through.
&gt; A malicious middle relay can easily determine the set of entry guards
&gt; used by a hidden service, and over time, can determine the set of
&gt; entry guards used by a user with a long-term pseudonym.  If a bridge
&gt; uses the same set of entry guards for its clients' circuits as it does
&gt; for its own, users who operate bridges can be deanonymized quite
&gt; trivially.

I think that's a good reason to have the guards that clients get through
the bridge be different than the guards that the bridge uses for its
own traffic.

I'll also note that this proposal may not be quite as high-priority
as it originally was, if we go the "multi-homed bridges" route: see
the parenthetical note at the bottom of attack #2 on
https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120612105524</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-12 10:55:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 188: Bridge Guards and other anti-enumeration defenses</subject><body>

On 6/12/12 12:32 PM, Roger Dingledine wrote:
&gt;&gt; Any attacker who can extend circuits through a bridge can enumerate
&gt;&gt; the set of guard nodes which it routes its clients' circuits through.
&gt;&gt; A malicious middle relay can easily determine the set of entry guards
&gt;&gt; used by a hidden service, and over time, can determine the set of
&gt;&gt; entry guards used by a user with a long-term pseudonym.  If a bridge
&gt;&gt; uses the same set of entry guards for its clients' circuits as it does
&gt;&gt; for its own, users who operate bridges can be deanonymized quite
&gt;&gt; trivially.
&gt; 
&gt; I think that's a good reason to have the guards that clients get through
&gt; the bridge be different than the guards that the bridge uses for its
&gt; own traffic.
&gt; 
&gt; I'll also note that this proposal may not be quite as high-priority
&gt; as it originally was, if we go the "multi-homed bridges" route: see
&gt; the parenthetical note at the bottom of attack #2 on
&gt; https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges
&gt; 
&gt; --Roger

And it would be very useful if we would allow an easy way to setup
hundreds of "dumb briges", simple TCP forwarding proxy that goes in a
random order across all public relays.

Easier to setup, available in big quantities.

I would be pleased to use my *dsl/cable home-router with fixed-IP
address to do a port-mapping to a known and stable tor-relay.

Being able to "setup a bridge" by simply:
- opening a port-forward on my router
- submitting it to a web-interface

would be a very cool way to open-up opportunities of hundreds or
thousands of different IP:PORT pair (basically a bridge) without having
to run dedicated software on an always on-server (replaced by a simple
home-router, that's "the always-on server").

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120613155725</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-06-13 15:57:25-0400</timestampReceived><subject>[tor-dev] Dreamplug trouble</subject><body>

Hi,

An hour ago I had a beautiful dreamplug laying next to me on my table,
booting freedombox, making me happy.

Now I have a beautiful dreamplug nicely mounted in a rack in a hall next
to me, not booting at all, making me sad.

--8&lt;---------------cut here---------------start-------------&gt;8---
U-Boot 2011.06-02334-g8f495d9-dirty (May 31 2011 - 02:06:26)
Marvell-DreamPlug

SoC:   Kirkwood 88F6281_A0
CPU running @ 1200Mhz L2 running @ 400Mhz
SysClock = 400Mhz , TClock = 200Mhz 
DRAM:  512 MiB
SF: Detected MX25L1606 with page size 256, total 1 MiB
In:    serial
Out:   serial
Err:   serial
Net:   egiga0, egiga1
88E1116 Initialized on egiga0
88E1116 Initialized on egiga1
Hit any key to stop autoboot:  0 
*** ERROR: `ipaddr' not set
ping failed; host 192.168.2.1 is not alive
No link on egiga1
*** ERROR: `ipaddr' not set
ping failed; host 192.168.2.1 is not alive
(Re)start USB...
USB:   Register 10011 NbrPorts 1
USB EHCI 1.00
scanning bus for devices... 5 USB Device(s) found
       scanning bus for storage devices... Device NOT ready
   Request Sense returned 02 3A 00
3 Storage Device(s) found
reading uImage

0 bytes read
Wrong Image Format for bootm command
ERROR: can't get kernel image!
Marvell&gt;&gt;
--8&lt;---------------cut here---------------end---------------&gt;8---

It finds 5 USB devices, one of which is a USB stick with the freedombox
filesystem on it.

Did I break it when I moved it?  Ideas?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120613232632</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-06-13 23:26:32-0400</timestampReceived><subject>[tor-dev] start_daemon and finish_daemon</subject><body>

Why is the process of going into daemon mode (on Unix) split into two 
functions, start_daemon and finish_daemon?

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120615102607</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-15 10:26:07-0400</timestampReceived><subject>[tor-dev] STEM: Tor2csv / Tor2xml / Tor2json ?</subject><body>

Hi,

i just would like to provide a suggestion for Stem use (maybe already
done), now that it has a powerful cached-consensus/descriptors parsers.

Would it possible to provide easy to use command line tools to access
Tor's data in the following formats:

- csv
- xml
- json

So that anyone requiring to access tor's current network data can easily
use a function / script trough a command line tool and get it in easy to
be formatted output.

That's just a suggestion, but it maybe very useful for anyone requiring
to work on tor's network data in an easy/accessible way.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120618212641</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-18 21:26:41-0400</timestampReceived><subject>[tor-dev] Open Proposals as of June 2012</subject><body>

This list of open Tor proposals is based on one I sent out in May of
last year.  Since I'd like to do this more regularly, I have added to
each description the date when I wrote it.  Most of the summaries from
older proposals are unchanged since last May;  the later ones in the
list for 6/2012 I wrote pretty quickly since I want to get out the
door tonight for an appointment, but I want to send this list out
without further delay.

OPEN, DRAFT, AND ACCEPTED PROPOSALS:

   117 IPv6 exits

     IPv6 is still the future, but now it's the kind of future
     that's unevenly distributed.  It's time to do this one so that
     IPv6 traffic can be sent over Tor.

     It needs updating to work properly with microdescriptors; it
     also has some open questions about DNS. (6/2012)

   127  Relaying dirport requests to Tor download site / website

     The idea here was to make it easier to fetch and learn about
     Tor by making it easy for relays to automatically act as
     proxies to the Tor website.  It needs more discussion, and
     there are some significant details to work out.  It's not at
     all clear whether this is actually a good idea or not.
     (5/2011)

   131  Help users to verify they are using Tor

     Here's a proposal for making a torcheck-like website more reliable.
     If anybody wants to pick it up (especially somebody working on
     torcheck) and see whether it should be reopened or rejected, that
     would be a fine thing. (5/2011)

   132  A Tor Web Service For Verifying Correct Browser Configuration

     This proposal was meant to give users a way to see if their
     browser and privoxy (yes, it was a while ago) are correctly
     configured by running a local webserver on 127.0.0.1.  I'm not
     sure the status here. (5/2011)

   133  Incorporate Unreachable ORs into the Tor Network

     This proposal had an idea for letting ORs that can only make
     outgoing connections still relay data usefully in the network.
     It's something we should keep in mind, and it's a pretty neat
     idea, but it radically changes the network topology.  Anybody
     who wants to analyze new network topologies should definitely
     have a look. (5/2011)

   140  Provide diffs between consensuses

     This proposal describes a way to transmit less directory
     traffic by sending only differences between consensuses, rather
     than the consensuses themselves.  It is mainly languishing for
     lack of an appropriately licensed, well-written, very small,
     pure-C implementation of the "diff" and "patch" algorithms.
     (The good diffs seem to be GPL (which we can't use without
     changing Tor's license), or spaghetti code, or not easily
     usable as a library, or not written in C, or very large, or
     some combination of those.)  (5/2011)

   141  Download server descriptors on demand

     The idea of this proposal was for clients to only download the
     consensus, and later ask nodes for their own server descriptors
     while building the circuit through them.  It would make each
     circuit more time-consuming to build, but make bootstrapping
     much cheaper.

     Microdescriptors obsolete a lot of this proposal, and present
     some difficulties in using in a way compatible with
     it. (6/2012)

   143  Improvements of Distributed Storage for Tor Hidden Service Descriptors

     Here's a proposal from Karsten about making the hidden service
     DHT more reliable and secure to use.  It could use more
     discussion and analysis. (5/2011)

   144  Increase the diversity of circuits by detecting nodes
belonging the same provider

     This is a version of the good idea, "Let's do routing in a way
     that tries to keep from routing traffic through the same
     provider too much!"  There are complex issues here that the
     proposal doesn't completely address, but I think it might be a
     fine idea for somebody to see how much more we know now than we
     did in 2008, particularly in light of the relevant paper(s) by
     Matt Edmann and Paul Syverson. (5/2011)

   145  Separate "suitable as a guard" from "suitable as a new guard"

     Currently, the Guard flag means both "You can use this node as a
     guard if you need to pick a new guard" and "If this node is
     currently your guard, you can keep using it as a guard."  This
     proposal tries to separate these two concepts, so that clients can
     stop picking a router once it is full of existing clients using it
     as a guard, but the clients currently on it won't all drop it.

     It's not clear whether this has anonymity issues, and it's not
     clear whether the imagined performance gains are actually
     worthwhile. (5/2011)

   146  Add new flag to reflect long-term stability

     From time to time we get the idea of having clients ship with a
     reasonably recent consensus (or a list of directory mirrors),
     so instead of bootstrapping from one of the authorities, they
     can bootstrap from a regular directory cache.  The problem here
     is that by the time the client is run, most of the directory
     mirrors will be down or will have changed their IP.  This
     proposal tries to address that.

     It needs analysis based on behavior of actual routers on the
     network to see whether it could work, and what parameters might
     work.

     Nevertheless, we should really do something like this, so that
     we can ship a list of initial directory mirrors with Tor
     (possibly via the "fallback consensus" deisgn), so that new
     bootstrapping Tor clients don't all hammer the directory
     authorities. (6/2012)

   147  Eliminate the need for v2 directories in generating v3 directories

     This proposal explains a way that we can phase out the
     vestigial use of v2 directory documents in keeping authorities
     well-informed enough to generating the v3 consensus.  It's
     still correct; somebody should implement it before the v2
     directory code rots any further. (5/2011)

   156  Tracking blocked ports on the client side

     This proposal provides a way for clients to learn which ports
     they are (and aren't) able to connect to, and connect to the
     ones that work.  It comes with a patch, too.  It also lets
     routers track ports that _they_ can't connect to.

     I'm a little unconvinced that this will help a great deal: most
     clients that have some ports blocked will need bridges, not
     just restriction to a smaller set of ports.  This could be good
     behind restrictive firewalls, though.

     The router-side part is a little iffy: routers that can't
     connect to each other violate one of our network topology
     assumptions, and even if we do want to track failed
     router-&gt;router connections, the routers need to be sure that
     they aren't fooled into trying to connect repeatedly to a
     series of nonexistent addresses in an attempt to make them
     believe that (say) they can't reach port 443.

     This one is a paradigmatic "open" proposal: it needs more
     discussion.  The patch probably also needs to be ported to
     0.2.3.x; it touches some code that has changed. (5/2011)

   157  Make certificate downloads specific

     This proposal added cross-certification and
     signing-key-specific download URLs for directory authority
     certificates.  It is IIRC mostly implemented on the server
     side; there are just some SHOULDs that we should turn into
     MUSTS if all sufficiently old authority certificates are now
     obsolete, and a client-side portion that we need to implement.
     (6/2012)

   159  Exit Scanning

     This is an overview of SoaT, with some ideas for how to integrate
     it into Tor. (5/2011)

   162  Publish the consensus in multiple flavors

     The initial proposal here is done, but more work is needed for
     forward-compatibility: we'd like to have caches be willing to
     cache and serve consensus flavors which they do not currently
     recognize. (6/2012)

   164  Reporting the status of server votes

     This proposal explains a way for authorities to provide a
     slightly more verbose document that relay operators can use to
     diagnose reasons that their router was or was not listed in the
     consensus.  These documents would be like slightly more verbose
     versions of the authorities' votes, and would explain *why* the
     authority voted as it did.  It wouldn't be too hard to
     implement, and would be a fine project for somebody who wants
     to get to know the directory code. (5/2011)

   165  Easy migration for voting authority sets

     This is a design for how to change the set of authorities without
     having a flag day where the authority operators all reconfigure
     their authorities at once.  It needs more discussion.  One
     difficulty here is that we aren't talking much about changing the
     set of authorities, but that may be a chicken-and-egg issue, since
     changing the set is so onerous.

     If anybody is interested, it would be great to move the discussion
     ahead here. (5/2011)

   168  Reduce default circuit window

     This proposal reduces the default window for circuit sendme cells.
     I think it's implemented, isn't it?  If so, we should make sure
     that tor-spec.txt is updated and close it.XXXXXXX (5/2011)

   172  GETINFO controller option for circuit information
   173  GETINFO Option Expansion

     These would help controllers (particularly arm) provide more
     useful information about a running Tor process.  They're
     accepted and some parts of 173 are even implemented: somebody
     just needs to implement the rest. (5/2011)

   175  Automatically promoting Tor clients to nodes

     Here's Steven's proposal for adding a mode between "client
     mode" and "relay mode" for "self-test to see if you would be a
     good relay, and if so become one."  It didn't get enough
     attention when it was posted to the list; more people should
     review it. (5/2011)

   177  Abstaining from votes on individual flags

     Here's my proposal for letting authorities have opinions about some
     (flag,router) combinations without voting on whether _every_ router
     should have that flag.  It's simple, and I think it's basically
     right.  With more discussion and review, somebody could/should
     build it for 0.2.4.x, I think. (6/2012)

   182  Credit Bucket

     This proposal suggests an alternative approach to our current
     token-bucket based rate-limiting, that promises better
     performance, less buffering insanity, and a possible end to
     double-gating issues. (6/2012)

   185  Directory caches without DirPort

     The old HTTP directory port feature is no longer used by
     clients and relays under most circumstances.  The proposal
     explains how we can get rid of the requirement that non-bridge
     directories have an open directory port. (6/2012)

   186  Multiple addresses for one OR or bridge

     This one is partially implemented, in that bridges can have
     IPv6 addresses.  Still to go: we need to let ORs have IPv6
     addresses too.  Undecided: is one IPv4 and one IPv6 enough for
     anybody? (6/2012)

   188  Bridge Guards and other anti-enumeration defenses

     This proposal suggests some ways to make it harder for a relay
     on the Tor network to enumerate a list of Tor bridges. Worth
     investigating and possibly implementing. (6/2012)

   189  AUTHORIZE and AUTHORIZED cells
   190  Bridge Client Authorization Based on a Shared Secret
   191  Bridge Detection Resistance against MITM-capable Adversaries

     Proposal 187 reserved the AUTHORIZE cell type; these proposals
     suggests how it could work to try to make it harder to probe
     for Tor bridges. They need more alternatives and attention, and
     possibly some revision and analysis. (6/2012)

   192  Automatically retrieve and store information about bridges

     This proposal gives an enhancement to the bridge information
     protocol, where clients remember more things about bridges, and
     are able to update what they know about them over time.  Could
     help a lot with bridge churn. (6/2012)

   194  Mnemonic .onion URLs

     Here's one of several competing "let's make .onion URLs
     human-usable" proposals.  This one makes sentences using a
     fixed map. (6/2012)

   195  TLS certificate normalization for Tor 0.2.4.x

     Here's the followup to proposal 179, containing all the parts
     of proposal 179 that didn't get built, and a couple of other
     tricks besides to try to make Tor's default protocol less
     detectable.  I'm pretty psychoed about the part where we let
     relays drop in any any self-signed or CA-issued certificate
     that they like. (6/2012)

   196  Extended ORPort and TransportControlPort

     Here are some remaining pieces of the pluggable transport
     protocol that give Tor finer control over the behavior of its
     transports. (6/2012)

   197  Message-based Inter-Controller IPC Channel

     This proposal is for an architectural enhancement in Tor
     deployments, where Tor coordinates communications between the
     various programs (Vidalia, TorBrowser, etc) that are using
     it. (6/2012)

   198  Restore semantics of TLS ClientHello

     Partially implemented. We have the new client behavior in place
     in 0.2.3.x, but not the new server behavior which it
     permits. (6/2012)

   199  Integration of BridgeFinder and BridgeFinderHelper

     Here's a proposal for how Tor can integrate with a client
     program that finds bridges for it. (6/2012)

   200  Adding new, extensible CREATE, EXTEND, and related cells

     We'd like to moved to better authentication and key agreement
     mechanisms in future versions of Tor. This proposal gives us an
     extensible replacement for our current CREATE/CREATED cell
     mechanism. (6/2012)

   201  Make bridges report statistics on daily v3 network status requests

     Here's a proposal for bridges to better estimate the number of
     bridge users. (6/2012)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619015343</emailId><senderName>jvoisin</senderName><senderEmail>julien.voisin@dustri.org</senderEmail><timestampReceived>2012-06-19 01:53:43-0400</timestampReceived><subject>[tor-dev] [GSoC] Tails Server</subject><body>

[Attachment #2 (multipart/signed)]


Hello everyone.
I am sorry but I won't be able to pursue/achieve my GSoC[1]
for personal reasons that I prefer not disclose on a public mailing
list. I'll donate my current payment to the Tor project.

I am really sorry about this; I hope that I haven't took someone else's
place, and that this project will be achieved.

Take care,

1. https://tails.boum.org/todo/server_edition/

-- jvoisin



["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120613022101</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-13 02:21:01-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

Hi Megan, thanks for the patch! What is an example of a standard
library function with a builtin type? I'd like to exercise the use
case that has been causing you trouble.

This change has a couple issues, for instance it treats anything with
the same name as a builtin like a builtin. It also calls setattr() on
standard library functions if you try to mock it a second time.

I've pushed an adaptation of your change to the 'mocking' branch of my
personal repository...
git://git.torproject.org/user/atagar/stem.git

change...
https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/5029e4b9b92dbacdfc49867b7dcbee230ca782a8

It shouldn't have the issues that I mentioned, though some remaining
bits of the change confuse me. As you've found the mocking code is
pretty tricky so I won't be able to make sense of it until I see what
was breaking.

Thanks! -Damian

PS. Very nice commit message on b8b7c22. It helped me a lot in making
sense of the change - thanks for that.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120613195238</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-13 19:52:38-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

To answer your first question, we ran into the trouble when mocking
time.time().  This came up for us, as type(time.time) is
'builtin_function_or_method', which is the same as type(open) -&gt;
'builtin_function_or_method'.

We also updated your adaptation to our patch so that no code is repeated.
This should make the function cleaner and more readable.  This new code can
be found at:
https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py

Best,
-Erik &amp; Megan

On Wed, Jun 13, 2012 at 2:21 AM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; Hi Megan, thanks for the patch! What is an example of a standard
&gt; library function with a builtin type? I'd like to exercise the use
&gt; case that has been causing you trouble.
&gt;
&gt; This change has a couple issues, for instance it treats anything with
&gt; the same name as a builtin like a builtin. It also calls setattr() on
&gt; standard library functions if you try to mock it a second time.
&gt;
&gt; I've pushed an adaptation of your change to the 'mocking' branch of my
&gt; personal repository...
&gt; git://git.torproject.org/user/atagar/stem.git
&gt;
&gt; change...
&gt;
&gt; https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/5029e4b9b92dbacdfc49867b7dcbee230ca782a8
&gt;
&gt; It shouldn't have the issues that I mentioned, though some remaining
&gt; bits of the change confuse me. As you've found the mocking code is
&gt; pretty tricky so I won't be able to make sense of it until I see what
&gt; was breaking.
&gt;
&gt; Thanks! -Damian
&gt;
&gt; PS. Very nice commit message on b8b7c22. It helped me a lot in making
&gt; sense of the change - thanks for that.
&gt;

[Attachment #5 (text/html)]

Hi Damian,&lt;br&gt;&lt;br&gt;To answer your first question, we ran into the trouble when mocking \
time.time().  This came up for us, as type(time.time) is \
'builtin_function_or_method', which is the same as type(open) -&gt; \
'builtin_function_or_method'.&lt;br&gt;

&lt;br&gt;We also updated your adaptation to our patch so that no code is repeated.  This \
should make the function cleaner and more readable.  This new code can be found at: \
&lt;a href="https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py"&gt;https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py&lt;/a&gt;&lt;br&gt;


&lt;br&gt;Best,&lt;br&gt;-Erik &amp; Megan&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Wed, Jun 13, 2012 \
at 2:21 AM, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi Megan, thanks for the patch! What is an example of a \
standard&lt;br&gt; library function with a builtin type? I'd like to exercise the \
use&lt;br&gt; case that has been causing you trouble.&lt;br&gt;
&lt;br&gt;
This change has a couple issues, for instance it treats anything with&lt;br&gt;
the same name as a builtin like a builtin. It also calls setattr() on&lt;br&gt;
standard library functions if you try to mock it a second time.&lt;br&gt;
&lt;br&gt;
I've pushed an adaptation of your change to the 'mocking' branch of \
my&lt;br&gt; personal repository...&lt;br&gt;
git://&lt;a href="http://git.torproject.org/user/atagar/stem.git" \
target="_blank"&gt;git.torproject.org/user/atagar/stem.git&lt;/a&gt;&lt;br&gt; &lt;br&gt;
change...&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/5029e4b9b92dbacdfc49867b7dcbee230ca782a8" \
target="_blank"&gt;https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/5029e4b9b92dbacdfc49867b7dcbee230ca782a8&lt;/a&gt;&lt;br&gt;



&lt;br&gt;
It shouldn't have the issues that I mentioned, though some remaining&lt;br&gt;
bits of the change confuse me. As you've found the mocking code is&lt;br&gt;
pretty tricky so I won't be able to make sense of it until I see what&lt;br&gt;
was breaking.&lt;br&gt;
&lt;br&gt;
Thanks! -Damian&lt;br&gt;
&lt;br&gt;
PS. Very nice commit message on b8b7c22. It helped me a lot in making&lt;br&gt;
sense of the change - thanks for that.&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120619162023</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-19 16:20:23-0400</timestampReceived><subject>[tor-dev] Proposal 202: Two improved relay encryption protocols for Tor cells</subject><body>

Filename: 202-improved-relay-crypto.txt
Title: Two improved relay encryption protocols for Tor cells
Author: Nick Mathewson
Created: 19 Jun 2012
Status: Open


Overview:

   This document describes two candidate designs for a better Tor
   relay encryption/decryption protocol, designed to stymie tagging
   attacks and better accord with best practices in protocol design.

   My hope is that readers will examine these protocols, evaluate their
   security and practicality, improve on them, and help to pick one for
   implementation in Tor.

   In section 1, I describe Tor's current relay crypto protocol, its
   drawbacks, how it fits in with the rest of Tor, and some
   requirements/desiderata for a replacement.  In sections 2 and 3, I
   propose two alternative replacements for this protocol.  In section
   4, I discuss their pros and cons.

1. Background and Motivation

1.0. A short overview of Tor's current protocols

   The core pieces of the Tor protocol are the link protocol,
   the circuit extend protocol, the relay protocol, and the stream
   protocol.  All are documented in [TorSpec].

   Briefly:

     - The link protocol handles all direct pairwise communication
       between nodes.  Everything else is transmitted over it.  It
       uses TLS.

     - The circuit extend protocol uses public-key crypto to set up
       multi-node virtual tunnels, called "circuits", from a client
       through one or more nodes.

   *** The relay protocol uses established circuits to communicate
       from a client to a node on a circuit.  That's the one we'll
       be talking about here. ***

     - The stream protocol is tunneled over relay protocol; clients
       use it to tell servers to open anonymous TCP connections, to
       send data, and so forth.  Servers use it to report success or
       failure opening anonymous TCP connections, to send data from
       TCP connections back to clients, and so forth.

   In more detail: The link protocol's job is to connect two
   computers with an encrypted, authenticated stream, to
   authenticate one or both of them to the other, and to provide a
   channel for passing "cells" between them.  The circuit extend
   protocol's job is to set up circuits: persistent tunnels that
   connect a Tor client to an exit node through a series of
   (typically three) hops, each of which knows only the previous and
   next hop, and each of which has a set of keys that they share
   only with the client.  Finally, the relay protocol's job is to
   allow a client to communicate bidirectionally with the node(s) on
   the circuit, once their shared keys have been established.

   (We'll ignore the stream protocol for the rest of this document.)

   Note on terminology: Tor nodes are sometimes called "servers",
   "relays", or "routers".  I'll use all these terms more or less
   interchangeably.  For simplicity's sake, I will call the party
   who is constructing and using a circuit "the client" or "Alice",
   even though nodes sometimes construct circuits too.

   Tor's internal packets are called "cells".  All the cells we deal
   with here are 512 bytes long.

   The nodes in a circuit are called its "hops"; most circuits are 3
   hops long.  This doesn't include the client: when Alice builds a
   circuit through nodes Bob_1, Bob_2, and Bob_3, the first hop is
   "Bob_1" and the last hop is "Bob_3".

1.1. The current relay protocol and its drawbacks

   [This section describes Tor's current relay protocol.  It is not a
   proposal; rather it is what we do now.  Sections 2 and 3 have my
   proposed replacements for it.]

   A "relay cell" is a cell that is generated by the client to send
   to a node, or by a node to send to the client.  It's called a
   "relay" cell because a node that receives one may need to relay
   it to the next or previous node in the circuit (or to handle the
   cell itself).

   A relay cell moving towards the client is called "inbound"; a
   cell moving away is called "outbound".

   When a relay cell is constructed by the client, the client adds one
   layer of crypto for each node that will process the cell, and gives
   the cell to the first node in the circuit.  Each node in turn then
   removes one layer of crypto, and either forwards the cell to the next
   node in the circuit or acts on that cell itself.

   When a relay cell is constructed by a node, it encrypts it and sends
   it to the preceding node in the circuit.  Each node between the
   originating node and the client then encrypts the cell and passes it
   back to the preceding node.  When the client receives the cell, it
   removes layers of crypto until it has an unencrypted cell, which it
   then acts on.

   In the current protocol, the body of each relay cell contains, in
   its unencrypted form:

        Relay command     [1 byte]
        Zeros             [2 bytes]
        StreamID          [2 bytes]
        Digest            [4 bytes]
        Length            [2 bytes]
        Data              [498 bytes]

   (This only adds up to 509 bytes.  That's because the Tor link
   protocol transfers 512-byte cells, and has a 3 byte overhead per
   cell.  Not how we would do it if we were starting over at this
   point.)

   At every node of a circuit, the node relaying a cell
   encrypts/decrypts it with AES128-CTR.  If the cell is outbound
   and the "zeros" field is set to all-zeros, the node additionally
   checks whether 'digest' is correct.  A correct digest is the
   first 4 bytes of the running SHA1 digest of: a shared secret,
   concatenated with all the relay cells destined for this node on
   this circuit so far, including this cell.  If _that's_ true, then
   the node accepts this cell.  (See section 6 of [TorSpec] for full
   detail; see section A.1 for a more rigorous description.)

   The current approach has some actual problems.  Notably:

      * It permits tagging attacks. Because AES_CTR is an XOR-based
        stream cipher, an adversary who controls the first node in a
        circuit can XOR anything he likes into the relay cell, and
        then see whether he/she encounters an correspondingly
        defaced cell at some exit that he also controls.

        That is, the attacker picks some pattern P, and when he
        would transmit some outbound relay cell C at hop 1, he
        instead transmits C xor P.  If an honest exit receives the
        cell, the digest will probably be wrong, and the honest exit
        will reject it.  But if the attacker controls the exit, he
        will notice that he has received a cell C' where the digest
        doesn't match, but where C' xor P _does_ have a good digest.
        The attacker will then know that his two nodes are on the
        same circuit, and thereby be able to link the user (whom the
        first node sees) to her activities (which the last node sees).

        Back when we did the Tor design, this didn't seem like a
        big deal, since an adversary who controls both the first and
        last node in a circuit is presumed to win already based on
        traffic correlation attacks.  This attack seemed strictly
        worse than that, since it was trivially detectable in the
        case where the attacker _didn't_ control both ends.  See
        section 4.4 of the Tor paper [TorDesign] for our early
        thoughts here; see Xinwen Fu et al's 2009 work for a more
        full explanation of the in-circuit tagging attack [XF]; and
        see "The 23 Raccoons'" March 2012 "Analysis of the Relative
        Severity of Tagging Attacks" mail on tor-dev (and the
        ensuing thread) for a discussion of why we may want to care
        after all, due to attacks that use tagging to amplify route
        capture. [23R]

   It also has some less practical issues.

      * The digest portion is too short.  Yes, if you're an attacker
        trying to (say) change an "ls *" into an "rm *", you can
        only expect to get one altered cell out of 2^32 accepted --
        and all future cells on the circuit will be rejected with
        similar probability due to the change in the running hash
        -- but 1/2^32 is a pretty high success rate for crypto attacks.

      * It does MAC-then-encrypt.  That makes smart people cringe.

      * Its approach to MAC is H(Key | Msg), which is vulnerable to
        length extension attack if you've got a Merkle-Damgard hash
        (which we do).  This isn't relevant in practice right now,
        since the only parties who see the digest are the two
        parties that rely on it (because of the MAC-then-encrypt).


1.2. Some feature requirements

   Relay cells can originate at the client or at a relay.  Relay cells
   that originate at the client are given to the first node in the
   circuit, and constructed so that they will be decrypted and forwarded
   by the first M-1 nodes in the circuit, and finally decrypted and
   processed by the Mth node, where the client chooses M. (Usually, the
   Mth node is the the last one, which will be an exit node.) Relay
   cells that originate at a hop in the circuit are given to the
   preceding node, and eventually delivered to the client.

   Tor provides a so called "leaky pipe" circuit topology
   [TorDesign]: a client can send a cell to any node in the circuit,
   not just the last node. I'll try to keep that property, although
   historically we haven't really made use of it.

   In order to implement telescoping circuit construction (where the
   circuit is built by iteratively asking the last node in the
   circuit to extend the circuit one hop more), it's vital that the
   last hop of the circuit be able to change.

   Proposal 188 [Prop188] suggests that we implement a "bridge guards"
   feature: making some (non-public) nodes insert an extra hop into
   the circuit after themselves, in a way that will make it harder
   for other nodes in the network to enumerate them.  We
   therefore want our circuits to be one-hop re-extensible: when the
   client extends a circuit from Bob1 to Bob2, we want Bob1 to be
   able to introduce a new node "Bob1.5" into the circuit such that
   the circuit runs Alice-&gt;Bob1-&gt;Bob1.5-&gt;Bob2. (This feature has
   been called "loose source routing".)

   Any new approach should be able to coexist on a circuit
   with the old approach.  That is, if Alice wants to build a
   circuit through Bob1, Bob2, and Bob3, and only Bob2 supports a
   revised relay protocol, then Alice should be able to build a
   circuit such that she can have Bob1 and Bob3 process each cell
   with the current protocol, and Bob2 process it with a revised
   protocol.  (Why?  Because if all nodes in a circuit needed to use
   the same relay protocol, then each node could learn information
   about the other nodes in the circuit from which relay protocol
   was chosen.  For example, if Bob1 supports the new protocol, and
   sees that the old relay protocol is in use, and knows that Bob2
   supports the new one, then Bob1 has learned that Bob3 is some
   node that does not support the new relay protocol.)

   Cell length needs to be constant as cells move through the
   network.  For historical reasons mentioned above in section 1.1,
   the length of the encrypted part of a relay cell needs to be 509
   bytes.

1.3. Some security requirements

   Two adjacent nodes on a circuit can trivially tell that they are
   on the same circuit, and the first node can trivially tell who
   the client is. Other than that, we'd like any attacker who
   controls a node on the circuit not to have a good way to learn
   any other nodes, even if he/she controls those nodes. [*]

   Relay cells should not be malleable: no relay should be able to
   alter a cell between an honest sender and an honest recipient in
   a way that they cannot detect.

   Relay cells should be secret: nobody but the sender and recipient
   of a relay cell should be able to learn what it says.

   Circuits should resist transparent, recoverable tagging attacks:
   if an attacker controls one node in a circuit and alters a relay
   cell there, no non-adjacent point in the circuit should be able
   to recover the relay cell as it would have received it had the
   attacker not altered it.

   The above properties should apply to sequences of cells too:
   an attacker shouldn't be able to change what sequence of cells
   arrives at a destination (for example, by removing, replaying, or
   reordering one or more cells) without being detected.

   (Feel free to substitute whatever formalization of the above
   requirements makes you happiest, and add whatever caveats are
   necessary to make you comfortable.  I probably missed at least
   two critical properties.)

   [*] Of course, an attacker who controls two points on a circuit
       can probably confirm this through traffic correlation.  But
       we'd prefer that the cryptography not create other, easier
       ways for them to do this.

1.4. A note on algorithms

   This document is deliberately agnostic concerning the choice of
   cryptographic primitives -- not because I have no opinions about
   good ciphers, MACs, and modes of operation -- but because
   experience has taught me that mentioning any particular
   cryptographic primitive will prevent discussion of anything else.

   Please DO NOT suggest algorithms to use in implementing these
   protocols yet.  It will distract!  There will be time later!

   If somebody _else_ suggests algorithms to use, for goodness' sake
   DON'T ARGUE WITH THEM!  There will be time later!


2. Design 1: Large-block encryption

   In this approach, we use a tweakable large-block cipher for
   encryption and decryption, and a tweak-chaining function TC.

2.1. Chained large-block what now?

   We assume the existence of a primitive that provides the desired
   properties of a tweakable[Tweak] block cipher, taking blocks of any
   desired size.  (In our case, the block size is 509 bytes[*].)

   It also takes a Key, and a per-block "tweak" parameter that plays
   the same role that an IV plays in CBC, or that the counter plays
   in counter mode.

   The Tweak-chaining function TC takes as input a previous tweak, a
   tweak chaining key, and a cell; it outputs a new tweak.  Its
   purpose is to make future cells undecryptable unless you have
   received all previous cells.  It could probably be something like
   a MAC of the old tweak and the cell using the tweak chaining key
   as the MAC key.

   (If the initial tweak is secret, I am not sure that TC needs to
   be keyed.)

   [*] Some large-block cipher constructions use blocks whose size is
       the multiple of some underlying cipher's block size.  If we wind
       up having to use one of those, we can use 496-byte blocks instead
       at the cost of 2.5% wasted space.

2.2. The protocol

2.2.1. Setup phase

   The circuit construction algorithm needs to produce forward and
   backward keys Kf and Kb, the forward and backward tweak chaining
   keys TCKf and TCKb, as well as initial tweak values Tf and Tb.

2.2.2. The cell format

   We replace the "Digest" and "Zeros" fields of the cell with a
   single Z-byte "Zeros" field to determine when the cell is
   recognized and correctly decrypted; its length is a security
   parameter.

2.2.3. The decryption operations

   For a relay to handle an inbound RELAY cell, it sets Tb_next to
   TC(TCKb, Tb, Cell).  Then it encrypts the cell using the large
   block cipher keyed with Kb and tweaked with Tb.  Then it sets Tb
   to Tb_next.

   For a relay to handle an outbound RELAY cell, it sets Tf_next to
   TC(TCKf, Tf, Cell).  Then it decrypts the cell using the large
   block cipher keyed with Kf and tweaked with Tf.  Then it sets Tf
   to Tf_next.  Then it checks the 'Zeros' field on the cell;
   if that field is all [00] bytes, the cell is for us.

2.3. Security discussion

   This approach is fairly simple (at least, no more complex than
   its primitives) and achieves some of our security goals.  Because
   of the large block cipher approach, any change to a cell will
   render that cell undecryptable, and indistinguishable from random
   junk.  Because of the tweak chaining approach, if even one cell
   is missed or corrupted or reordered, future cells will also
   decrypt into random junk.

   The tagging attack in this case is turned into a circuit-junking
   attack: an adversary who tries to mount it can probably confirm
   that he was indeed first and last node on a target circuit
   (assuming that circuits which turn to junk in this way are rare),
   but cannot recover the circuit after that point.

   As a neat side observation, note that this approach improves upon
   Tor's current forward secrecy, by providing forward secrecy while
   circuits are still operational, since each change to the tweak
   should make previous cells undecryptable if the old tweak value
   isn't recoverable.

   The length of Zeros is a parameter for what fraction of "random
   junk" cells will potentially be accepted by a router or client.
   If Zeros is Z bytes long, then junk cells will be accepted with
   P &lt; 2^-(8*Z + 7).  (The '+7' is there because the top 7 bits of
   the Length field must also be 0.)

   There's no trouble using this protocol in a mixed circuit, where
   some nodes speak the old protocol and some speak the
   large-block-encryption protocol.

3. Design 2: short-MAC-and-pad

   In this design, we behave more similarly to a mix-net design
   (such as Mixmaster or Mixminion's headers).  Each node checks a
   MAC, and then re-pads the cell to its chosen length before
   decoding the cell.

   This design uses as a primitive a MAC and a stream cipher.  It
   might also be possible to use an authenticating cipher mode,
   if we can find one that works like a stream cipher and allows us
   to efficiently output authenticators for the stream so far.

   NOTE TO AE/AEAD FANS: The encrypt-and-MAC model here could be
   replaced with an authenticated encryption mode without too much
   loss of generality.

3.1. The protocol

3.1.1 Setup phase

   The circuit construction algorithm needs to produce forward and
   backward keys Kf and Kb, forward and backward stream cipher IVs
   IVf and IVb, and forward and backward MAC keys Mf and Mb.

   Additionally, the circuit construction algorithm needs a way for
   the client to securely (and secretly? XXX) tell each hop in the
   circuit a value 'bf' for the number of bytes of MAC it should
   expect on outbound cells and 'bb' for the number of bytes it
   should use on cells it's generating.   Each node can get a
   different 'bf' and 'bb'.  These values can be 0: if a node's bf
   is 0, it doesn't authenticate cells; if its bb is 0, it doesn't
   originate them.

   The circuit construction algorithm also needs a way to tell each
   the client to securely (and secretly? XXX) tell each hop in the
   circuit whether it is allowed to be the final destination for
   relay cells.

   Set the stream Sf and the stream Sb to empty values.

3.1.2. The cell format

   The Zeros and Digest field of the cell format are removed.

3.1.3. The relay operations

   Upon receiving an outbound cell, a node removes the first b bytes
   of the cell, and puts them aside as 'M'.  The node then computes
   between 0 and 2 MACs of the stream consisting of all previously
   MAC'd data, plus the remainder of the cell:

      If b&gt;0 and there is a next hop, the node computes M_relay.

      If this node was told to deliver traffic, or it is the last
      node in the circuit so far, the node computes M_receive.

   M_relay is computed as MAC(stream | "relay"); M_receive is
   computed as MAC(stream | "receive").

   If M = M_receive, this cell is for the node; it should process
   it.

   If M = M_relay, or if b == 0, this cell should be relayed.

   If a MAC was computed and neither of the above cases was met,
   then the cell is bogus; the node should discard it and destroy
   the circuit.

   The node then removes the first bf bytes of the cell, and pads the
   cell at the end with bf zero bytes.  Finally, the node decrypts
   the whole remaining padded cell with the stream cipher.

   To handle an inbound cell, the node simply does a stream cipher
   with no checking.

3.1.4. Generating inbound cells.

   To generate an inbound cell, a node makes a 509-bb byte RELAY
   cell C, encrypts that cell with Kb, appends the encrypted cell to
   Sb, and prepends M_receive(Sb) to the cell.

3.1.5. Generating outbound cells

   Generating an outbound cell is harder, since we need to know what
   padding the earlier nodes will generate in order to know what
   padding the later nodes will receive and compute their MACs, but
   we also need to know what MACs we'll send to the later nodes in
   order to compute which MACs we'll send to the earlier ones.

   Mixnet clients have needed to do this for ages, though, so the
   algorithms are pretty well settled.  I'll give one below in A.3.

3.2. Security discussion

   This approach is also simple and (given good parameter choices)
   can achieve our goals.  The trickiest part is the algorithm that
   clients must follow to package cells, but that's no so bad.

   It's not necessary to check MACs on inbound traffic, because
   nobody but the client can tell scrambled messages from good ones,
   and the client can be trusted to keep the client's own secrets.

   With this protocol, if the attacker tries to do a tagging attack,
   the circuit should get destroyed by the next node in the circuit
   that has a nonzero "bf" value, with probability == 1-2^-(8*bf).
   (If there are further intervening honest nodes, they also have a
   chance to detect the attack.)

   Similarly, any attempt to replay, or reorder outbound cells
   should fail similarly.

   The "bf" values could reveal to each node its position in the
   circuit and the client preferences, depending on how we set them;
   on the other hand, having a fixed bf value would reveal to the
   last node the length of the circuit.  Neither option seems great.

   This protocol doesn't provide any additional forward secrecy
   beyond what Tor has today.  We could fix that by changing our use
   of the stream cipher so that instead of running in counter mode
   between cells, we use a tweaked stream cipher and change the
   tweak with each cell (possibly based on the unused portion of the
   MAC).

   This protocol does support loose source routing, so long as the
   no padding bytes are added by any router-added nodes.

   In a circuit, every node has at least one relay cell sent to it:
   even non-exit nodes get a RELAY_EXTEND cell.

4. Discussion

   I'm not currently seeing a reason to strongly prefer one of these
   approaches over another.

   In favor of large-block encryption:
     - The space overhead seems smaller: we need to use up fewer
       bytes in order to get equivalent looking security.

       (For example, if we want to have P &lt; 2^64 that a cell altered
       by hop 1 could be accepted by hop 2 or hop 3, *and* we want P
       &lt; 2^64 that a cell altered by hop 2 could be accepted by hop
       3, the large-block approach needs about 8 bytes for the Zeros
       field, whereas the short-MAC-and-pad approach needs 16 bytes
       worth of MACs.)

     - We get forward secrecy pretty easily.

     - The format doesn't leak anything about the length of the
       circuit, or limit it.

     - We don't need complicated logic to set the 'b' parameters.

     - It doesn't need tricky padding code.

   In the favor of short-MAC-and-pad:
     - All of the primitives used are much better analyzed and
       understood.  There's nothing esoteric there.  The format
       itself is similar to older, well-analyzed formats.

     - Most of the constructions for the large-block-cipher approach
       seem less efficient in CPU cycles than a good stream cipher
       and a MAC. (But I don't want to discuss that now; see section
       1.4 above!)

   Unclear:

     - Suppose that an attacker controls the first and last hop of a
       circuit, and tries an end-to-end tagging attack.  With
       large-block encryption, the tagged cell and all future cells
       on the circuit turn to junk after the tagging attack, with
       P~~100%.  With short-MAC-and-pad, the circuit is destroyed at
       the second hop, with P ~~ 1- 2^(-8*bf).  Is one of these
       approaches materially worse for the attacker?

     - Can we do better than the "compute two MACs" approach for
       distinguishing the relay and receive cases of the
       short-MAC-and-pad protocol?

     - To what extent can we improve these protocols?

     - If we do short-MAC-and-pad, should we apply the forward
       security hack alluded to in section 3.2?

5. Acknowledgments

   Thanks to the many reviewers of the initial drafts of this
   proposal.  If you can make any sense of what I'm saying, they
   deserve much of the credit.

A. Formal description

   Note that in all these cases, more efficient descriptions exist.

A.1. The current Tor relay protocol.

   Relay cell format:

     Relay command     [1 byte]
     Zeros             [2 bytes]
     StreamID          [2 bytes]
     Digest            [4 bytes]
     Length            [2 bytes]
     Data              [498 bytes]

   Circuit setup:

     (Specified elsewhere; the client negotiates with each router in
     a circuit the secret AES keys Kf, Kb, and the secret 'digest
     keys' Df, and Db.  They initialize AES counters Cf and Cb to
     0.  They initialize the digest stream Sf to Df, and Sb to Db.)

   HELPER FUNCTION: CHECK(Cell [in], Stream [in,out]):

     1. If the Zeros field of Cell is not [00 00], return False.
     2. Let Cell' = Cell with its Digest field set to [00 00 00 00].
     3. Let S' = Stream | Cell'.
     4. If SHA1(S') = the Digest field of Cell, set Stream to S',
        and return True.
     5. Otherwise return False.

   HELPER FUNCTION: CONSTRUCT(Cell' [in], Stream [in,out])

     1. Set the Zeros and Digest field of Cell' to [00] bytes.
     2. Set Stream to Stream | Cell'.
     3. Construct Cell from Cell' by setting the Digest field to
        SHA1(Stream), and taking all other fields as-is.
     4. Return Cell.

   HELPER_FUNCTION: ENCRYPT(Cell [in,out], Key [in], Ctr [in,out])
     1. Encrypt Cell's contents using AES128_CTR, with key 'Key' and
        counter 'Ctr'.  Increment 'Ctr' by the length of the cell.

   HELPER_FUNCTION: DECRYPT(Cell [in,out], Key [in], Ctr [in,out])
     1. Same as ENCRYPT.


   Router operation, upon receiving an inbound cell -- that is, one
   sent towards the client.

     1. ENCRYPT(cell, Kb, Cb)
     2. Send the decrypted contents towards the client.

   Router operation, upon receiving an outbound cell -- that is, one
   sent away from the client.

     1. DECRYPT(cell, Kf, Cf)
     2. If CHECK(Cell, Sf) is true, this cell is for us.  Do not
        relay the cell.
     3. Otherwise, this cell is not for us.  Send the decrypted cell
        to the next hop on the circuit, or discard it if there is no
        next hop.

   Router operation, to create a relay cell that will be delivered
   to the client.

     1. Construct a Relay cell Cell' with the relay command, length,
        stream ID, and body fields set as appropriate.
     2. Let Cell = CONSTRUCT(Cell', Sb).
     3. ENCRYPT(Cell, Kb, Cb)
     4. Send the encrypted cell towards the client.

   Client operation, receiving an inbound cell.

     For each hop H in a circuit, starting with the first hop and
     ending (possibly) with the last:

        1. DECRYPT(Cell, Kb_H, Cb_H)

        2. If CHECK(Cell, Sb_H) is true, this cell was sent from hop
           H.  Exit the loop, and return the cell in its current
           form.

     If we reach the end of the loop without finding the right hop,
     the cell is bogus or corrupted.

   Client operation, sending an outbound cell to hop H.

     1. Construct a Relay cell Cell' with the relay command, length,
        stream ID, and body fields set as appropriate.
     2. Let Cell = CONSTRUCT(Cell', Sf_H)
     3. For i = H..1:
          A. ENCRYPT(Cell, Sf_i, Cf_i)
     4. Deliver Cell to the first hop in the circuit.

A.2. The large-block-cipher protocol

   Same as A.1, except for the following changes.

   The cell format is now:
        Zeros             [Z bytes]
        Length            [2 bytes]
        StreamID          [2 bytes]
        Relay command     [1 byte]
        Data              [504-Z bytes]

   Ctr is no longer a counter, but a Tweak value.

   Each key is now a tuple of (Key_Crypt, Key_TC)

   Streams are no longer used.

   HELPER FUNCTION: CHECK(Cell [in], Stream [in,out])
        1. If the Zeros field of Cell contains only [00] bytes,
           return True.
        2. Otherwise return false.

   HELPER FUNCTION: CONSTRUCT(Cell' [in], Stream [in,out])
        1. Let Cell be Cell', with its "Zeros" field set to Z [00]
           bytes.
        2. Return Cell'.

   HELPER FUNCTION: ENCRYPT(Cell [in,out], Key [in], Tweak [in,out])
        2. Encrypt Cell using Key and Tweak
        1. Let Tweak' = TC(Key_TC, Tweak, Cell)
        3. Set Tweak to Tweak'.

   HELPER FUNCTION: DECRYPT(Cell [in,out], Key [in], Tweak [in,out])
        1. Let Tweak' = TC(Key_TC, Tweak, Cell)
        2. Decrypt Cell using Key and Tweak
        3. Set Tweak to Tweak'.

A.3. The short-MAC-and-pad protocol.

   Define M_relay(K,S) as MAC(K, S|"relay").
   Define M_receive(K,S) as MAC(K, S|"receive").
   Define Z(n) as a series of n [00] bytes.
   Define BODY_LEN as 509

   The cell message format is now:

     Relay command     [1 byte]
     StreamID          [2 bytes]
     Length            [2 bytes]
     Data              [variable bytes]

   Helper function: CHECK(Cell [in], b [in], K [in], S [in,out]):
       Let M = Cell[0:b]
       Let Rest = Cell[b:...]
       If b == 0:
          Return (nil, Rest)
       Let S' = S | Rest
       If M == M_relay(K,S')[0:b]:
          Set S = S'
          Return ("relay", Rest)
       If M == M_receive(K,S')[0:b]:
          Set S = S'
          Return ("receive", Rest)
       Return ("BAD", nil)

   HELPER_FUNCTION: ENCRYPT(Cell [in,out], Key [in], Ctr [in,out])
     1. Encrypt Cell's contents using AES128_CTR, with key 'Key' and
        counter 'Ctr'.  Increment 'Ctr' by the length of the cell.

   HELPER_FUNCTION: DECRYPT(Cell [in,out], Key [in], Ctr [in,out])
     1. Same as ENCRYPT.

   Router operation, upon receiving an inbound cell:
     1. ENCRYPT(cell, Kb, Cb)
     2. Send the decrypted contents towards the client.

   Router operation, upon receiving an outbound cell:
     1. Let Status, Msg = CHECK(Cell, bf, Mf, Sf)
     2. If Status == "BAD", drop the cell and destroy the circuit.
     3. Let Cell' = Msg | Z(BODY_LEN - len(Msg))
     4. DECRYPT(Cell', Kf, Cf) [*]
     5. If Status == "receive" or (Status == nil and there is no
        next hop), Cell' is for us: process it.
     6. Otherwise, send Cell' to the next node.

   Router operation, sending a cell towards the client:
     1. Let Body = a relay cell body of BODY_LEN-bb_i bytes.
     2. Let Cell' = ENCRYPT(Body, Kb, Cb)
     3. Let Sb = Sb | Cell'
     4. Let M = M_receive(Mb, Sb)[0:b]
     5. Send the cell M | Cell' back towards the client.

   Client operation, upon receiving an inbound cell:

     For each hop H in the circuit, from first to last:

        1. Let Status, Msg = CHECK(Cell, bb_i, Mb_i, Sb_i)
        2. If Status = "relay", drop the cell and destroy
           the circuit.  (BAD is okay; it means that this hop didn't
           originate the cell.)
        3. DECRYPT(Msg, Kb_i, Cb_i)
        4. If Status = "receive", this cell is from hop i; process
           it.
        5. Otherwise, set Cell = Msg.

   Client operation, sending an outbound cell:

        Let BF = the total of all bf_i values.

        1. Construct a relay cell body Msg of BODY_LEN-BF bytes.
        2. For each hop i, let Stream_i = ENCRYPT(Kf_i,Z(CELL_LEN),Cf_i)
        3. Let Pad_0 = "".
        4. For i in range 1..N, where N is the number of hops:
             Let Pad_i = Pad_{i-1} | Z(bf_i)
             Let S_last = the last len(Pad_i) bytes of Stream_i.
             Let Pad_i = Pad_i xor S_last
           Now Pad_i is the padding as it will stand after node i
           has processed it.

        5. For i in range N..1, where N is the number of hops:
             If this is the last hop, let M_* = M_receive. Else let
             M_* = M_relay.

             Let Body = Msg xor the first len(Msg) bytes of Stream_i

             Let M = M_*(Mf, Body | Pad_(i-1))

             Set Msg = M[:bf_i] | Body

        6. Send Msg outbound to the first relay in the circuit.


   [*] Strictly speaking, we could omit the pad-and-decrypt
       operation once we know we're the final hop.



R. References

[Prop188] Tor Proposal 188: Bridge Guards and other anti-enumeration defenses
     https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/188-bridge-guards.txt

[TorSpec] The Tor Protocol Specification
     https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=tor-spec.txt

[TorDesign] Dingledine et al, "Tor: The Second Generation Onion
     Router",
     https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf

[Tweak] Liskov et al, "Tweakable Block Ciphers",
        http://www.cs.berkeley.edu/~daw/papers/tweak-crypto02.pdf

[XF] Xinwen Fu et al, "One Cell is Enough to Break Tor's Anonymity"

[23R] The 23 Raccoons, "Analysis of the Relative Severity of Tagging
      Attacks"  http://archives.seul.org/or/dev/Mar-2012/msg00019.html
      (You'll want to read the rest of the thread too.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120625014534</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-25 01:45:34-0400</timestampReceived><subject>Re: [tor-dev] stem test output</subject><body>

Hi Karsten, hi Sathyanarayanan.

Over the last couple weeks I've been making a variety of fixes to stem
and its tests. It now runs with python 2.5 and doesn't require tor to
be in your path, among other things. However, the hanging issue
remains and I'm pretty stuck there. It isn't strictly stem related (I
can reproduce the issue with plan sockets), hopefully Nick will have
some ideas...

https://trac.torproject.org/6235

Karsten, should the 'dirreq-v3-share' percentage values be able to go
above 100%? The extra-info descriptors that I just fetched has one
such entry, which makes stem's descriptor parser complain...

extra-info siltornado 995D0FE5A89563D79A383CCC2444D0E26C6BE625
published 2012-06-24 19:30:31
...
dirreq-v2-share 159.81%
dirreq-v3-share 159.81%

Cheers! -Damian

PS. Including tor-dev@ in case Beck or others are interested.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120625222208</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-25 22:22:08-0400</timestampReceived><subject>[tor-dev] Proc Unit Testing &amp; Next Project</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

Megan and I have finished a first run at writing unit tests for the proc
utilities in stem.  The code may be found on Megan's Github at:
https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py.
Until we hear back on a code review, we'll move on to the integration
tests.  Just for reference, here is a link to the ticket as well:
https://trac.torproject.org/projects/tor/ticket/6082.

Looking further into the future, we discussed our next project with Stem
with Professor Danner today, and agreed that the "Export Tor Desciptors"
project would be ideal.  (
https://trac.torproject.org/projects/tor/ticket/6171)  Do you have any
thoughts on this?  Otherwise, we just wanted to let you know our plan as we
move forward.

-Erik &amp; Megan

[Attachment #5 (text/html)]

Hi Damian,&lt;br&gt;&lt;br&gt;Megan and I have finished a first run at writing unit tests for the \
proc utilities in stem.  The code may be found on Megan's Github at: &lt;a \
href="https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py"&gt;https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py&lt;/a&gt;. \
Until we hear back on a code review, we'll move on to the integration tests.  \
Just for reference, here is a link to the ticket as well: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/6082" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/6082&lt;/a&gt;.&lt;br&gt;



&lt;br&gt;Looking further into the future, we discussed our next project with Stem with \
Professor Danner today, and agreed that the "Export Tor Desciptors" project \
would be ideal.  (&lt;a href="https://trac.torproject.org/projects/tor/ticket/6171" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/6171&lt;/a&gt;)  Do you \
have any thoughts on this?  Otherwise, we just wanted to let you know our plan as we \
move forward.&lt;br&gt;

&lt;br&gt;-Erik &amp; Megan&lt;br&gt;

&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120625222334</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-25 22:23:34-0400</timestampReceived><subject>[tor-dev] Proposal 203: Avoiding censorship by impersonating an HTTPS server</subject><body>

Hi all.  Here's a proposal for ticket #5548.  Let's discuss!

Filename: 203-https-frontend.txt
Title: Avoiding censorship by impersonating an HTTPS server
Author: Nick Mathewson
Created: 24 Jun 2012
Status: Draft


Overview:

   One frequently proposed approach for censorship resistance is that
   Tor bridges ought to act like another TLS-based service, and deliver
   traffic to Tor only if the client can demonstrate some shared
   knowledge with the bridge.

   In this document, I discuss some design considerations for building
   such systems, and propose a few possible architectures and designs.

Background:

   Most of our previous work on censorship resistance has focused on
   preventing passive attackers from identifying Tor bridges, or from
   doing so cheaply.  But active attackers exist, and exist in the wild:
   right now, the most sophisticated censors use their anti-Tor passive
   attacks only as a first round of filtering before launching a
   secondary active attack to confirm suspected Tor nodes.

   One idea we've been talking about for a while is that of having a
   service that looks like an HTTPS service unless a client does some
   particular secret thing to prove it is allowed to use it as a Tor
   bridge.  Such a system would still succumb to passive traffic
   analysis attacks (since the packet timings and sizes for HTTPS don't
   look that much like Tor), but it would be enough to beat many current
   censors.

Goals and requirements:

   We should make it impossible for a passive attacker who examines only
   a few packets at a time to distinguish Tor-&gt;Bridge traffic from an
   HTTPS client talking to an HTTPS server.

   We should make it impossible for an active attacker talking to the
   server to tell a Tor bridge server from regular HTTPS server.

   We should make it impossible for an active attacker who can MITM the
   server to learn from the client whether it thought it was connecting
   to an HTTPS server or a Tor bridge.  (This implies that an MITM
   attacker shouldn't be able to learn anything that would help it
   convince the server to act like a bridge.)

   It would be nice to minimize the required code changes to Tor, and
   the required code changes to any other software.

   It would be good to avoid any requirement of close integration with
   any particular HTTP or HTTPS implementation.

   If we're replacing our own profile with that of an HTTPS service, we
   should do so in a way that lets us use a the profile of a popular
   HTTPS implementation.

   Efficiency would be good: layering TLS inside TLS is best avoided if
   we can.

Discussion:

   We need an actual web server; HTTP and HTTPS are so complicated that
   there's no practical way to behave in a bug-compatible way with any
   popular webserver short of running that webserver.

   More obviously, we need a TLS implementation (or we can't implement
   HTTPS), and we need a Tor bridge (since that's the whole point of
   this exercise).

   So from a top-level point of view, the question becomes: how shall we
   wire these together?

   There are three obvious ways; I'll discuss them in turn below.

Design #1: TLS in Tor

   Under this design, Tor accepts HTTPS connections, decides which ones
   don't look like the Tor protocol, and relays them to a webserver.

                   +--------------------------------------+
     +------+  TLS |  +------------+  http +-----------+  |
     | User |&lt;------&gt; | Tor Bridge |&lt;-----&gt;| Webserver |  |
     +------+      |  +------------+       +-----------+  |
                   |     trusted host/network             |
                   +--------------------------------------+

   This approach would let us use a completely unmodified webserver
   implementation, but would require the most extensive changes in Tor:
   we'd need to add yet another flavor to Tor's TLS ice cream parlor,
   and try to emulate a popular webserver's TLS behavior even more
   thoroughly.

   To authenticate, we would need to take a hybrid approach, and begin
   forwarding traffic to the webserver as soon as soon as a webserver
   might respond to the traffic.  This could be pretty complicated,
   since it requires us to have a model of how the webserver would
   respond to any given set of bytes.  As a workaround, we might try
   relaying _all_ input to the webserver, and only replying as Tor in
   the cases where the website hasn't replied.  (This would likely to
   create recognizable timing patterns, though.)

   The authentication itself could use a system akin to Tor proposals
   189/190, where an early AUTHORIZE cell shows knowledge of a shared
   secret if the client is a Tor client.

Design #2: TLS in the web server

                   +----------------------------------+
     +------+  TLS |  +------------+  tor0   +-----+  |
     | User |&lt;------&gt; | Webserver  |&lt;-------&gt;| Tor |  |
     +------+      |  +------------+         +-----+  |
                   |     trusted host/network         |
                   +----------------------------------+

   In this design, we write an Apache module or something that can
   recognize an authenticator of some kind in an HTTPS header, or
   recognize a valid AUTHORIZE cell, and respond by forwarding the
   traffic to a Tor instance.

   To avoid the efficiency issue of doing an extra local
   encrypt/decrypt, we need to have the webserver talk to Tor over a
   local unencrypted connection. (I've denoted this as "tor0" in the
   diagram above.)  For implementation convenience, we might want to
   implement that as a NULL TLS connection, so that the Tor server code
   wouldn't have to change except to allow local NULL TLS connections in
   this configuration.

   For the Tor handshake to work properly here, we'll need a way for the
   Tor instance to know which public key the webserver is configured to
   use.

   We wouldn't need to support the parts of the Tor link protocol used
   to authenticate clients to servers: relays shouldn't be using this
   subsystem at all.

   The Tor client would need to connect and prove its status as a Tor
   client.  If the client uses some means other then AUTHORIZE cells, or
   if we want to do the authentication in a pluggable transport, and we
   therefore decided to offload the responsibility TLS itself to the
   pluggable transport, that would scare me: Supporting pluggable
   transports that have the responsibility for TLS would make it fairly
   easy to mess up the crypto, and I'd rather not have it be so easy to
   write a pluggable transport that accidentally makes Tor less secure.

Design #3: Reverse proxy


                   +----------------------------------+
                   |  +-------+  http  +-----------+  |
                   |  |       |&lt;------&gt;| Webserver |  |
     +------+  TLS |  |       |        +-----------+  |
     | User |&lt;------&gt; | Proxy |                       |
     +------+      |  |       |  tor0  +-----------+  |
                   |  |       |&lt;------&gt;|    Tor    |  |
                   |  +-------+        +-----------+  |
                   |     trusted host/network         |
                   +----------------------------------+

   In this design, we write a server-side proxy to sit in front of Tor
   and a webserver, or repurpose some existing HTTPS proxy. Its role
   will be to do TLS, and then forward connections to Tor or the
   webserver as appropriate.  (In the web world, this kind of thing is
   called a "reverse proxy", so that's the term I'm using here.)

   To avoid fingerprinting, we should choose a proxy that's already in
   common use as a TLS frontend for webservers -- nginx, perhaps.
   Unfortunately, the more popular tools here seem to be pretty complex,
   and the simpler tools less widely deployed.  More investigation would
   be needed.

   The authorization considerations would be as in Design #2 above; for
   the reasons discussed there, it's probably a good idea to build the
   necessary authorization into Tor itself.

   I generally like this design best: it lets us isolate the "Check for
   a valid authenticator and/or a valid or invalid HTTP header, and
   react accordingly" question to a single program.

How to authenticate: The easiest way

   Designing a good MITM-resistant AUTHORIZE cell, or an equivalent
   HTTP header, is an open problem that we should solve in proposals
   190 and 191 and their successors.  I'm calling it out-of-scope here;
   please see those proposals, their attendant discussion, and their
   eventual successors

How to authenticate: a slightly harder way

   Some proposals in this vein have in the past suggested a special
   HTTP header to distinguish Tor connections from non-Tor connections.
   This could work too, though it would require substantially larger
   changes on the Tor client's part, would still require the client
   take measures to avoid MITM attacks, and would also require the
   client to implement a particular browser's http profile.

Some considerations on distinguishability

   Against a passive eavesdropper, the easiest way to avoid
   distinguishability in server responses will be to use an actual web
   server or reverse web proxy's TLS implementation.
   (Distinguishability based on client TLS use is another topic
   entirely.)

   Against an active non-MITM attacker, the best probing attacks will be
   ones designed to provoke the system in acting in ways different from
   those in which a webserver would act: responding earlier than a web
   server would respond, or later, or differently.  We need to make sure
   that, whatever the front-end program is, it answers anything that
   would qualify as a well-formed or ill-formed HTTP request whenever
   the web server would.  This must mean, for example, that whatever the
   correct form of client authorization turns out to be, no prefix of
   that authorization is ever something that the webserver would respond
   to.  With some web servers (I believe), that's as easy as making sure
   that any valid authenticator isn't too long, and doesn't contain a CR
   or LF character.  With others, the authenticator would need to be a
   valid HTTP request, with all the attendant difficulty that would
   raise.

   Against an attacker who can MITM the bridge, the best attacks will be
   to wait for clients to connect and see how they behave.  In this
   case, the client probably needs to be able to authenticate the bridge
   certificate as presented in the initial TLS handshake -- or some
   other aspect of the TLS handshake if we're feeling insane.  If the
   certificate or handshake isn't as expected, the client should behave
   as a web browser that's just received a bad TLS certificate.  (The
   alternative there would be to try to impersonate an HTTPS client that
   has just accepted a self-signed certificate.  But that would probably
   require the Tor client to impersonate a full web browser, which isn't
   realistic.)

Side note: What to put on the webserver?

   To credibly pretend not to be ourselves, we must pretend to be
   something else in particular -- and something not easily identifiable
   or inherently worthless.  We should not, for example, have all
   deployments of this kind use a fixed website, even if that website is
   the default "Welcome to Apache" configuration: A censor would
   probably feel that they weren't breaking anything important by
   blocking all unconfigured websites with nothing on them.

   Therefore, we should probably conceive of a system like this as
   "Something to add to your HTTPS website" rather than as a standalone
   installation.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120628213719</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-28 21:37:19-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

&gt; Erik and I have finished the proc.py integration tests

Great! I'm looking forward to checking them out.

&gt; Tomorrow, we will be starting the next Stem task regarding the Tor Export project. \
&gt; Do you have any recommendations on where we should start exploring in the Stem \
&gt; documentation?

Hmm, this concerns translating Descriptor subclasses [1] into a csv
(and I suppose loading them back up). First step would be to google
around to see if there's a builtin function what'll do this or help
with it. If not then this might simply include dumping out their
__dict__...

&gt; &gt; &gt; class Foo:
...   def __init__(self):
...     self.foo = 5
...     self.bar = "hello"
...   def set_bar(self, value):
...     self.bar = value
...
&gt; &gt; &gt; f = Foo()
&gt; &gt; &gt; f.__dict__
{'foo': 5, 'bar': 'hello'}
&gt; &gt; &gt; ",".join([str(v) for v in f.__dict__.values()])
'5,hello'

You probably want to sort the keys and use that order, but besides
that this should do the trick. Just add a unit test and you're done.
&gt; )

If we want to convert csvs *back* into Descriptors then that's a bit more work.

&gt; Also, what do you anticipate being necessary when it comes to parsing consensus \
&gt; entries?

A NetworkStatusEntry class (and its tests) would be similar to the
ServerDescriptor [2] and ExtraInfoDescriptor [3], but a fair bit
easier (it only has six entries). To implement this you'd...

1. Read over the ServerDescriptor and ExtraInfoDescriptor to figure
out how we're tackling the parsing and verification in python.
2. Read over Karsten's NetworkStatusEntryImpl class [4] to see how
he's handling this in metrics-lib.
3. Read the spec for these entries [5]. Do we need both a
NetworkStatusEntryV2 and NetworkStatusEntryV3 class? Exactly how
should we model this? Karsten: thoughts?
4. Go to 'https://metrics.torproject.org/data.html' to get some test
data, so you see what the things that you'll be parsing looks like.
5. Write a NetworkStatusEntry class with the goal of "figure out each
and every way that data might be malformed". A large part of this
class is to verify that the data we're being given is perfectly valid
according to the spec, so read the spec and implement exactly what it
says. If there's some ambiguity in the spec or you see data that
doesn't conform to the spec then let us know. That's a tor bug.
6. Write unit and integ tests similar to what the other descriptors have...
  - unit tests are the majority of the work, and exercise all the use
cases that you can think of against mock objects
  - integ tests are pretty short, and just run the parser against some
test data from the metrics archive and the cached consensus

Let me know if you have any questions! -Damian

PS. Karsten: Do we want to call this "NetworkStatusEntry" or something
else? It seems like "ConsensusEntry" would be more intuitive, but
maybe this would just spawn confusion.

[1] https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/__init__.py#l87
[2] https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py#l128
 [3] https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py#l174
 [4] https://gitweb.torproject.org/metrics-lib.git/blob/HEAD:/src/org/torproject/descriptor/impl/NetworkStatusEntryImpl.java
 [5] https://gitweb.torproject.org/torspec.git/blob/HEAD:/dir-spec.txt#l1334
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120621210526</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-06-21 21:05:26-0400</timestampReceived><subject>[tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

[Attachment #2 (multipart/alternative)]


Hi there,

My goal is to run Tor on small cluster of embedded mips devices.
Because the platform runs on an older version of OpenSSL and libevent I
have chosen to statically link them with Tor.

So I went ahead to compile the components.
I'm aiming at the beta version: 0.2.3.17

OpenSSL 1.0.1c has been build with:
./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2


libevent-2.0.19-stable has been built with:
./configure --enable-openssl --disable-debug-mode --with-pic

And of course Tor:

./configure --prefix=/usr --libdir=/usr/lib --localstatedir=/var
--sysconfdir=/etc \
--with-zlib-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
--with-openssl-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
--with-libevent-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
--disable-asciidoc --enable-static-openssl --enable-static-libevent \
--host=mipsel-linux
--with-libnatpmp-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib
\
--with-libminiupnpc-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib
\
--enable-upnp --enable-nat-pmp --enable-bufferevents \
CPPFLAGS="-I/home/mastag/openpli/build-dm800/tmp/staging/mipsel-linux/include"

This produces the src/or/Tor binary which runs great on the cluster.
Only it's giving me the following messages:

Jun 21 23:02:12.000 [notice] Tor 0.2.3.17-beta opening new log file.
Jun 21 23:02:12.000 [warn] You are running Tor as root. You don't need to,
and you probably shouldn't.
Jun 21 23:02:13.000 [notice] No AES engine found; using AES_* functions.
Jun 21 23:02:13.000 [notice] This OpenSSL has a good implementation of
counter mode; using it.
Jun 21 23:02:15.000 [notice] OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like
version 0.9.8m or later; I will try SSL_OP to enable renegotiation
Jun 21 23:02:37.000 [notice] Reloaded microdescriptor cache.  Found 4807
descriptors.
Jun 21 23:02:42.000 [notice] We now have enough directory information to
build circuits.
Jun 21 23:02:42.000 [notice] Bootstrapped 80%: Connecting to the Tor
network.
Jun 21 23:02:43.000 [notice] Heartbeat: Tor's uptime is 0:00 hours, with 1
circuits open. I've sent 0 kB and received 0 kB.
Jun 21 23:02:43.000 [notice] Bootstrapped 85%: Finishing handshake with
first hop.
Jun 21 23:02:43.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DLFCN_LOAD:---)
Jun 21 23:02:43.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DSO_load:---)
Jun 21 23:02:47.000 [notice] Bootstrapped 90%: Establishing a Tor circuit.
Jun 21 23:02:53.000 [notice] Tor has successfully opened a circuit. Looks
like client functionality is working.
Jun 21 23:02:53.000 [notice] Bootstrapped 100%: Done.

The warning about the AES engine is probably because OpenSSL has no engine
for mips.
However the following two lines bother me:

[warn] TLS error while creating tor_tls_t object: could not load the shared
library (in DSO support routines:DLFCN_LOAD:---)
[warn] TLS error while creating tor_tls_t object: could not load the shared
library (in DSO support routines:DSO_load:---)

Any way to get rid of these?
I did compile OpenSSL with "enable-tlsext" so I don't understand why it
warns me about it.

Thanks in advance!

[Attachment #5 (text/html)]

Hi there,&lt;br&gt;&lt;br&gt;My goal is to run Tor on small cluster of embedded mips \
devices.&lt;br&gt;Because the platform runs on an older version of OpenSSL and libevent I \
have chosen to statically link them with Tor.&lt;br&gt;&lt;br&gt;So I went ahead to compile the \
components.&lt;br&gt; I'm aiming at the beta version: 0.2.3.17&lt;br&gt;&lt;br&gt;OpenSSL 1.0.1c \
has been build with:&lt;br&gt;./Configure debian-mipsel shared enable-tlsext zlib-dynamic \
no-ssl2&lt;br&gt;&lt;br&gt;&lt;br&gt;libevent-2.0.19-stable has been built with:&lt;br&gt;./configure \
--enable-openssl --disable-debug-mode --with-pic&lt;br&gt; &lt;br&gt;And of course \
Tor:&lt;br&gt;&lt;br&gt;./configure --prefix=/usr --libdir=/usr/lib --localstatedir=/var \
--sysconfdir=/etc \&lt;br&gt;--with-zlib-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
                \&lt;br&gt;--with-openssl-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
                \&lt;br&gt;
--with-libevent-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
\&lt;br&gt;--disable-asciidoc --enable-static-openssl --enable-static-libevent \
\&lt;br&gt;--host=mipsel-linux \
                --with-libnatpmp-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
                \&lt;br&gt;
--with-libminiupnpc-dir=/home/mastag/build-mipsel/tmp/staging/mipsel-linux/lib \
\&lt;br&gt;--enable-upnp --enable-nat-pmp --enable-bufferevents \
\&lt;br&gt;CPPFLAGS="-I/home/mastag/openpli/build-dm800/tmp/staging/mipsel-linux/include"&lt;br&gt;
 &lt;br&gt;This produces the src/or/Tor binary which runs great on the cluster.&lt;br&gt;Only \
it's giving me the following messages:&lt;br&gt;&lt;br&gt;Jun 21 23:02:12.000 [notice] Tor \
0.2.3.17-beta opening new log file.&lt;br&gt;Jun 21 23:02:12.000 [warn] You are running Tor \
as root. You don't need to, and you probably shouldn't.&lt;br&gt; Jun 21 \
23:02:13.000 [notice] No AES engine found; using AES_* functions.&lt;br&gt;Jun 21 \
23:02:13.000 [notice] This OpenSSL has a good implementation of counter mode; using \
it.&lt;br&gt;Jun 21 23:02:15.000 [notice] OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like \
version 0.9.8m or later; I will try SSL_OP to enable renegotiation&lt;br&gt; Jun 21 \
23:02:37.000 [notice] Reloaded microdescriptor cache.  Found 4807 descriptors.&lt;br&gt;Jun \
21 23:02:42.000 [notice] We now have enough directory information to build \
circuits.&lt;br&gt;Jun 21 23:02:42.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network.&lt;br&gt; Jun 21 23:02:43.000 [notice] Heartbeat: Tor's uptime is 0:00 hours, \
with 1 circuits open. I've sent 0 kB and received 0 kB.&lt;br&gt;Jun 21 23:02:43.000 \
[notice] Bootstrapped 85%: Finishing handshake with first hop.&lt;br&gt; Jun 21 \
23:02:43.000 [warn] TLS error while creating tor_tls_t object: could not load the \
shared library (in DSO support routines:DLFCN_LOAD:---)&lt;br&gt;Jun 21 23:02:43.000 [warn] \
TLS error while creating tor_tls_t object: could not load the shared library (in DSO \
support routines:DSO_load:---)&lt;br&gt; Jun 21 23:02:47.000 [notice] Bootstrapped 90%: \
Establishing a Tor circuit.&lt;br&gt;Jun 21 23:02:53.000 [notice] Tor has successfully \
opened a circuit. Looks like client functionality is working.&lt;br&gt;Jun 21 23:02:53.000 \
[notice] Bootstrapped 100%: Done.&lt;br&gt; &lt;br&gt;The warning about the AES engine is \
probably because OpenSSL has no engine for mips.&lt;br&gt;However the following two lines \
bother me:&lt;br&gt;&lt;br&gt;[warn] TLS error while creating tor_tls_t object: could not load \
the shared library (in DSO support routines:DLFCN_LOAD:---)&lt;br&gt; [warn] TLS error \
while creating tor_tls_t object:  could not load the shared library (in DSO support \
routines:DSO_load:---)&lt;br&gt;&lt;br&gt;Any way to get rid of these?&lt;br&gt;I did compile OpenSSL \
with "enable-tlsext" so I don't understand why it warns me about \
it.&lt;br&gt; &lt;br&gt;Thanks in advance!&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120621213011</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-06-21 21:30:11-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

On Thu, Jun 21, 2012 at 5:05 PM, Gino Badouri &lt;g.badouri@gmail.com&gt; wrote:
&gt; Hi there,
&gt;
&gt; My goal is to run Tor on small cluster of embedded mips devices.
&gt; Because the platform runs on an older version of OpenSSL and libevent I have
&gt; chosen to statically link them with Tor.
&gt;
&gt; So I went ahead to compile the components.
&gt; I'm aiming at the beta version: 0.2.3.17
&gt;
&gt; OpenSSL 1.0.1c has been build with:
&gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2
&gt;
&gt;
&gt; libevent-2.0.19-stable has been built with:
&gt; ./configure --enable-openssl --disable-debug-mode --with-pic

Hm.  Just to rule something out that got added in 0.2.3.17-beta: could
you try configuring Tor with --disable-compiler-hardening and
--disable-linker-hardening, and see if that makes a difference?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120622160617</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-06-22 16:06:17-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Nick,

Thanks for your response.
I've recompiled Tor with --disable-linker-hardening and
--disable-gcc-hardening but I still get the warning regarding tls support.

Jun 22 18:00:04.000 [notice] Tor 0.2.3.17-beta opening new log file.
Jun 22 18:00:04.000 [warn] You are running Tor as root. You don't need to,
and you probably shouldn't.
Jun 22 18:00:05.000 [notice] No AES engine found; using AES_* functions.
Jun 22 18:00:05.000 [notice] This OpenSSL has a good implementation of
counter mode; using it.
Jun 22 18:00:06.000 [notice] OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like
version 0.9.8m or later; I will try SSL_OP to enable renegotiation
Jun 22 18:00:12.000 [notice] Reloaded microdescriptor cache.  Found 0
descriptors.
Jun 22 18:00:12.000 [notice] I learned some more directory information, but
not enough to build a circuit: We have no usable consensus.
Jun 22 18:00:13.000 [notice] Bootstrapped 5%: Connecting to directory
server.
Jun 22 18:00:13.000 [notice] Heartbeat: Tor's uptime is 0:00 hours, with 1
circuits open. I've sent 0 kB and received 0 kB.
Jun 22 18:00:13.000 [notice] Bootstrapped 10%: Finishing handshake with
directory server.
Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DLFCN_LOAD:---)
Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DSO_load:---)
Jun 22 18:00:14.000 [notice] Bootstrapped 15%: Establishing an encrypted
directory connection.
Jun 22 18:00:14.000 [notice] Bootstrapped 20%: Asking for networkstatus
consensus.
Jun 22 18:00:14.000 [notice] Bootstrapped 25%: Loading networkstatus
consensus.
Jun 22 18:00:17.000 [notice] I learned some more directory information, but
not enough to build a circuit: We have no usable consensus.
Jun 22 18:00:18.000 [notice] Bootstrapped 40%: Loading authority key certs.
Jun 22 18:00:21.000 [notice] Bootstrapped 45%: Asking for relay descriptors.
Jun 22 18:00:21.000 [notice] I learned some more directory information, but
not enough to build a circuit: We have only 0/2920 usable microdescriptors.
Jun 22 18:00:42.000 [notice] We now have enough directory information to
build circuits.
Jun 22 18:00:42.000 [notice] Bootstrapped 80%: Connecting to the Tor
network.
Jun 22 18:00:42.000 [notice] Bootstrapped 90%: Establishing a Tor circuit.
Jun 22 18:00:47.000 [notice] Tor has successfully opened a circuit. Looks
like client functionality is working.
Jun 22 18:00:47.000 [notice] Bootstrapped 100%: Done.

It could be that Debian FIPS' version of OpenSSL 1.0.1c is causing this
problem.
But it was only "mipsel" patch for OpenSSL 1.0.1c I could find.

I'll  try the stable build of Tor and report back.

2012/6/21 Nick Mathewson &lt;nickm@alum.mit.edu&gt;

&gt; On Thu, Jun 21, 2012 at 5:05 PM, Gino Badouri &lt;g.badouri@gmail.com&gt; wrote:
&gt; &gt; Hi there,
&gt; &gt;
&gt; &gt; My goal is to run Tor on small cluster of embedded mips devices.
&gt; &gt; Because the platform runs on an older version of OpenSSL and libevent I
&gt; have
&gt; &gt; chosen to statically link them with Tor.
&gt; &gt;
&gt; &gt; So I went ahead to compile the components.
&gt; &gt; I'm aiming at the beta version: 0.2.3.17
&gt; &gt;
&gt; &gt; OpenSSL 1.0.1c has been build with:
&gt; &gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2
&gt; &gt;
&gt; &gt;
&gt; &gt; libevent-2.0.19-stable has been built with:
&gt; &gt; ./configure --enable-openssl --disable-debug-mode --with-pic
&gt;
&gt; Hm.  Just to rule something out that got added in 0.2.3.17-beta: could
&gt; you try configuring Tor with --disable-compiler-hardening and
&gt; --disable-linker-hardening, and see if that makes a difference?
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

Hi Nick,&lt;br&gt;&lt;br&gt;Thanks for your response.&lt;br&gt;I've recompiled Tor with \
--disable-linker-hardening and --disable-gcc-hardening but I still get the warning \
regarding tls support.&lt;br&gt;&lt;br&gt;Jun 22 18:00:04.000 [notice] Tor 0.2.3.17-beta opening \
new log file.&lt;br&gt; Jun 22 18:00:04.000 [warn] You are running Tor as root. You \
don't need to, and you probably shouldn't.&lt;br&gt;Jun 22 18:00:05.000 [notice] No \
AES engine found; using AES_* functions.&lt;br&gt;Jun 22 18:00:05.000 [notice] This OpenSSL \
has a good implementation of counter mode; using it.&lt;br&gt; Jun 22 18:00:06.000 [notice] \
OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like version 0.9.8m or later; I will try \
SSL_OP to enable renegotiation&lt;br&gt;Jun 22 18:00:12.000 [notice] Reloaded \
microdescriptor cache.  Found 0 descriptors.&lt;br&gt; Jun 22 18:00:12.000 [notice] I \
learned some more directory information, but not enough to build a circuit: We have \
no usable consensus.&lt;br&gt;Jun 22 18:00:13.000 [notice] Bootstrapped 5%: Connecting to \
directory server.&lt;br&gt;Jun 22 18:00:13.000 [notice] Heartbeat: Tor's uptime is 0:00 \
hours, with 1 circuits open. I've sent 0 kB and received 0 kB.&lt;br&gt; Jun 22 \
18:00:13.000 [notice] Bootstrapped 10%: Finishing handshake with directory \
server.&lt;br&gt;Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object: \
could not load the shared library (in DSO support routines:DLFCN_LOAD:---)&lt;br&gt; Jun 22 \
18:00:13.000 [warn] TLS error while creating tor_tls_t object: could not load the \
shared library (in DSO support routines:DSO_load:---)&lt;br&gt;Jun 22 18:00:14.000 [notice] \
Bootstrapped 15%: Establishing an encrypted directory connection.&lt;br&gt; Jun 22 \
18:00:14.000 [notice] Bootstrapped 20%: Asking for networkstatus consensus.&lt;br&gt;Jun 22 \
18:00:14.000 [notice] Bootstrapped 25%: Loading networkstatus consensus.&lt;br&gt;Jun 22 \
18:00:17.000 [notice] I learned some more directory information, but not enough to \
build a circuit: We have no usable consensus.&lt;br&gt; Jun 22 18:00:18.000 [notice] \
Bootstrapped 40%: Loading authority key certs.&lt;br&gt;Jun 22 18:00:21.000 [notice] \
Bootstrapped 45%: Asking for relay descriptors.&lt;br&gt;Jun 22 18:00:21.000 [notice] I \
learned some more directory information, but not enough to build a circuit: We have \
only 0/2920 usable microdescriptors.&lt;br&gt; Jun 22 18:00:42.000 [notice] We now have \
enough directory information to build circuits.&lt;br&gt;Jun 22 18:00:42.000 [notice] \
Bootstrapped 80%: Connecting to the Tor network.&lt;br&gt;Jun 22 18:00:42.000 [notice] \
Bootstrapped 90%: Establishing a Tor circuit.&lt;br&gt; Jun 22 18:00:47.000 [notice] Tor \
has successfully opened a circuit. Looks like client functionality is working.&lt;br&gt;Jun \
22 18:00:47.000 [notice] Bootstrapped 100%: Done.&lt;br&gt;&lt;br&gt;It could be that Debian \
FIPS' version of OpenSSL 1.0.1c is causing this problem.&lt;br&gt; But it was only \
"mipsel" patch for OpenSSL 1.0.1c I could find.&lt;br&gt;&lt;br&gt;I'll  try the \
stable build of Tor and report back.&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2012/6/21 Nick \
Mathewson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:nickm@alum.mit.edu" \
target="_blank"&gt;nickm@alum.mit.edu&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt; &lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div \
class="im"&gt;On Thu, Jun 21, 2012 at 5:05 PM, Gino Badouri &lt;&lt;a \
href="mailto:g.badouri@gmail.com"&gt;g.badouri@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt;

&gt; Hi there,&lt;br&gt;
&gt;&lt;br&gt;
&gt; My goal is to run Tor on small cluster of embedded mips devices.&lt;br&gt;
&gt; Because the platform runs on an older version of OpenSSL and libevent I have&lt;br&gt;
&gt; chosen to statically link them with Tor.&lt;br&gt;
&gt;&lt;br&gt;
&gt; So I went ahead to compile the components.&lt;br&gt;
&gt; I'm aiming at the beta version: 0.2.3.17&lt;br&gt;
&gt;&lt;br&gt;
&gt; OpenSSL 1.0.1c has been build with:&lt;br&gt;
&gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; libevent-2.0.19-stable has been built with:&lt;br&gt;
&gt; ./configure --enable-openssl --disable-debug-mode --with-pic&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Hm.  Just to rule something out that got added in 0.2.3.17-beta: could&lt;br&gt;
you try configuring Tor with --disable-compiler-hardening and&lt;br&gt;
--disable-linker-hardening, and see if that makes a difference?&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120625192735</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-06-25 19:27:35-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

[Attachment #2 (multipart/alternative)]


Strange it happens all the time with OpenSSL 1.0.1c
Even with the non-debian version.
I tried the vanilla OpenSSL with only the patch for "linux-mipsel" in
Configure.

When it performs it's handshake it will still spawn the message:
Jun 25 20:57:31.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DLFCN_LOAD:---)
Jun 25 20:57:31.000 [warn] TLS error while creating tor_tls_t object: could
not load the shared library (in DSO support routines:DSO_load:---)

However Tor continues to work fine.
I think the warning can be ignored because Tor has been compiled with
"--enable-static-openssl"
Also OpenSSL has been compiled with "enable-tlsext" and I've checked my
static libssl.a with mipsel-linux-objdump and the tls symbols are there.

So I guess Tor looks for the shared tls extension first (which doesn't
exist) and then continues with its statically linked tls-enabled-openssl
instead.

Would Tor fail to connect without tls?


2012/6/22 Gino Badouri &lt;g.badouri@gmail.com&gt;

&gt; Hi Nick,
&gt;
&gt; Thanks for your response.
&gt; I've recompiled Tor with --disable-linker-hardening and
&gt; --disable-gcc-hardening but I still get the warning regarding tls support.
&gt;
&gt; Jun 22 18:00:04.000 [notice] Tor 0.2.3.17-beta opening new log file.
&gt; Jun 22 18:00:04.000 [warn] You are running Tor as root. You don't need to,
&gt; and you probably shouldn't.
&gt; Jun 22 18:00:05.000 [notice] No AES engine found; using AES_* functions.
&gt; Jun 22 18:00:05.000 [notice] This OpenSSL has a good implementation of
&gt; counter mode; using it.
&gt; Jun 22 18:00:06.000 [notice] OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like
&gt; version 0.9.8m or later; I will try SSL_OP to enable renegotiation
&gt; Jun 22 18:00:12.000 [notice] Reloaded microdescriptor cache.  Found 0
&gt; descriptors.
&gt; Jun 22 18:00:12.000 [notice] I learned some more directory information,
&gt; but not enough to build a circuit: We have no usable consensus.
&gt; Jun 22 18:00:13.000 [notice] Bootstrapped 5%: Connecting to directory
&gt; server.
&gt; Jun 22 18:00:13.000 [notice] Heartbeat: Tor's uptime is 0:00 hours, with 1
&gt; circuits open. I've sent 0 kB and received 0 kB.
&gt; Jun 22 18:00:13.000 [notice] Bootstrapped 10%: Finishing handshake with
&gt; directory server.
&gt; Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object:
&gt; could not load the shared library (in DSO support routines:DLFCN_LOAD:---)
&gt; Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object:
&gt; could not load the shared library (in DSO support routines:DSO_load:---)
&gt; Jun 22 18:00:14.000 [notice] Bootstrapped 15%: Establishing an encrypted
&gt; directory connection.
&gt; Jun 22 18:00:14.000 [notice] Bootstrapped 20%: Asking for networkstatus
&gt; consensus.
&gt; Jun 22 18:00:14.000 [notice] Bootstrapped 25%: Loading networkstatus
&gt; consensus.
&gt; Jun 22 18:00:17.000 [notice] I learned some more directory information,
&gt; but not enough to build a circuit: We have no usable consensus.
&gt; Jun 22 18:00:18.000 [notice] Bootstrapped 40%: Loading authority key certs.
&gt; Jun 22 18:00:21.000 [notice] Bootstrapped 45%: Asking for relay
&gt; descriptors.
&gt; Jun 22 18:00:21.000 [notice] I learned some more directory information,
&gt; but not enough to build a circuit: We have only 0/2920 usable
&gt; microdescriptors.
&gt; Jun 22 18:00:42.000 [notice] We now have enough directory information to
&gt; build circuits.
&gt; Jun 22 18:00:42.000 [notice] Bootstrapped 80%: Connecting to the Tor
&gt; network.
&gt; Jun 22 18:00:42.000 [notice] Bootstrapped 90%: Establishing a Tor circuit.
&gt; Jun 22 18:00:47.000 [notice] Tor has successfully opened a circuit. Looks
&gt; like client functionality is working.
&gt; Jun 22 18:00:47.000 [notice] Bootstrapped 100%: Done.
&gt;
&gt; It could be that Debian FIPS' version of OpenSSL 1.0.1c is causing this
&gt; problem.
&gt; But it was only "mipsel" patch for OpenSSL 1.0.1c I could find.
&gt;
&gt; I'll  try the stable build of Tor and report back.
&gt;
&gt;
&gt; 2012/6/21 Nick Mathewson &lt;nickm@alum.mit.edu&gt;
&gt;
&gt;&gt; On Thu, Jun 21, 2012 at 5:05 PM, Gino Badouri &lt;g.badouri@gmail.com&gt;
&gt;&gt; wrote:
&gt;&gt; &gt; Hi there,
&gt;&gt; &gt;
&gt;&gt; &gt; My goal is to run Tor on small cluster of embedded mips devices.
&gt;&gt; &gt; Because the platform runs on an older version of OpenSSL and libevent I
&gt;&gt; have
&gt;&gt; &gt; chosen to statically link them with Tor.
&gt;&gt; &gt;
&gt;&gt; &gt; So I went ahead to compile the components.
&gt;&gt; &gt; I'm aiming at the beta version: 0.2.3.17
&gt;&gt; &gt;
&gt;&gt; &gt; OpenSSL 1.0.1c has been build with:
&gt;&gt; &gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; libevent-2.0.19-stable has been built with:
&gt;&gt; &gt; ./configure --enable-openssl --disable-debug-mode --with-pic
&gt;&gt;
&gt;&gt; Hm.  Just to rule something out that got added in 0.2.3.17-beta: could
&gt;&gt; you try configuring Tor with --disable-compiler-hardening and
&gt;&gt; --disable-linker-hardening, and see if that makes a difference?
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;
&gt;

[Attachment #5 (text/html)]

Strange it happens all the time with OpenSSL 1.0.1c&lt;br&gt;Even with the non-debian \
version.&lt;br&gt;I tried the vanilla OpenSSL with only the patch for \
"linux-mipsel" in Configure.&lt;br&gt;&lt;br&gt;When it performs it's handshake it \
will still spawn the message:&lt;br&gt; Jun 25 20:57:31.000 [warn] TLS error while creating \
tor_tls_t object: could not load the shared library (in DSO support \
routines:DLFCN_LOAD:---)&lt;br&gt;Jun 25 20:57:31.000 [warn] TLS error while creating \
tor_tls_t object: could not load the shared library (in DSO support \
routines:DSO_load:---)&lt;br&gt; &lt;br&gt;However Tor continues to work fine.&lt;br&gt;I think the \
warning can be ignored because Tor has been compiled with \
"--enable-static-openssl"&lt;br&gt;Also OpenSSL has been compiled with \
"enable-tlsext" and I've checked my static libssl.a with \
mipsel-linux-objdump and the tls symbols are there.&lt;br&gt; &lt;br&gt;So I guess Tor looks for \
the shared tls extension first (which doesn't exist) and then continues with its \
statically linked tls-enabled-openssl instead.&lt;br&gt;&lt;br&gt;Would Tor fail to connect \
without tls?&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt; 2012/6/22 Gino Badouri &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:g.badouri@gmail.com" \
target="_blank"&gt;g.badouri@gmail.com&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; Hi \
Nick,&lt;br&gt;&lt;br&gt;Thanks for your response.&lt;br&gt;I've recompiled Tor with \
--disable-linker-hardening and --disable-gcc-hardening but I still get the warning \
regarding tls support.&lt;br&gt;&lt;br&gt;Jun 22 18:00:04.000 [notice] Tor 0.2.3.17-beta opening \
new log file.&lt;br&gt;

Jun 22 18:00:04.000 [warn] You are running Tor as root. You don't need to, and \
you probably shouldn't.&lt;br&gt;Jun 22 18:00:05.000 [notice] No AES engine found; \
using AES_* functions.&lt;br&gt;Jun 22 18:00:05.000 [notice] This OpenSSL has a good \
implementation of counter mode; using it.&lt;br&gt;

Jun 22 18:00:06.000 [notice] OpenSSL OpenSSL 1.0.1c 10 May 2012 looks like version \
0.9.8m or later; I will try SSL_OP to enable renegotiation&lt;br&gt;Jun 22 18:00:12.000 \
[notice] Reloaded microdescriptor cache.  Found 0 descriptors.&lt;br&gt;

Jun 22 18:00:12.000 [notice] I learned some more directory information, but not \
enough to build a circuit: We have no usable consensus.&lt;br&gt;Jun 22 18:00:13.000 \
[notice] Bootstrapped 5%: Connecting to directory server.&lt;br&gt; Jun 22 18:00:13.000 \
[notice] Heartbeat: Tor's uptime is 0:00 hours, with 1 circuits open. I've \
sent 0 kB and received 0 kB.&lt;br&gt; Jun 22 18:00:13.000 [notice] Bootstrapped 10%: \
Finishing handshake with directory server.&lt;br&gt;Jun 22 18:00:13.000 [warn] TLS error \
while creating tor_tls_t object: could not load the shared library (in DSO support \
routines:DLFCN_LOAD:---)&lt;br&gt;

Jun 22 18:00:13.000 [warn] TLS error while creating tor_tls_t object: could not load \
the shared library (in DSO support routines:DSO_load:---)&lt;br&gt;Jun 22 18:00:14.000 \
[notice] Bootstrapped 15%: Establishing an encrypted directory connection.&lt;br&gt;

Jun 22 18:00:14.000 [notice] Bootstrapped 20%: Asking for networkstatus \
consensus.&lt;br&gt;Jun 22 18:00:14.000 [notice] Bootstrapped 25%: Loading networkstatus \
consensus.&lt;br&gt;Jun 22 18:00:17.000 [notice] I learned some more directory information, \
but not enough to build a circuit: We have no usable consensus.&lt;br&gt;

Jun 22 18:00:18.000 [notice] Bootstrapped 40%: Loading authority key certs.&lt;br&gt;Jun 22 \
18:00:21.000 [notice] Bootstrapped 45%: Asking for relay descriptors.&lt;br&gt;Jun 22 \
18:00:21.000 [notice] I learned some more directory information, but not enough to \
build a circuit: We have only 0/2920 usable microdescriptors.&lt;br&gt;

Jun 22 18:00:42.000 [notice] We now have enough directory information to build \
circuits.&lt;br&gt;Jun 22 18:00:42.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network.&lt;br&gt;Jun 22 18:00:42.000 [notice] Bootstrapped 90%: Establishing a Tor \
circuit.&lt;br&gt;

Jun 22 18:00:47.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working.&lt;br&gt;Jun 22 18:00:47.000 [notice] Bootstrapped 100%: \
Done.&lt;br&gt;&lt;br&gt;It could be that Debian FIPS' version of OpenSSL 1.0.1c is causing \
this problem.&lt;br&gt;

But it was only "mipsel" patch for OpenSSL 1.0.1c I could \
find.&lt;br&gt;&lt;br&gt;I'll  try the stable build of Tor and report back.&lt;div \
class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2012/6/21 Nick \
Mathewson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:nickm@alum.mit.edu" \
target="_blank"&gt;nickm@alum.mit.edu&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div&gt;On Thu, Jun 21, 2012 at 5:05 PM, Gino Badouri &lt;&lt;a \
href="mailto:g.badouri@gmail.com" target="_blank"&gt;g.badouri@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;


&gt; Hi there,&lt;br&gt;
&gt;&lt;br&gt;
&gt; My goal is to run Tor on small cluster of embedded mips devices.&lt;br&gt;
&gt; Because the platform runs on an older version of OpenSSL and libevent I have&lt;br&gt;
&gt; chosen to statically link them with Tor.&lt;br&gt;
&gt;&lt;br&gt;
&gt; So I went ahead to compile the components.&lt;br&gt;
&gt; I'm aiming at the beta version: 0.2.3.17&lt;br&gt;
&gt;&lt;br&gt;
&gt; OpenSSL 1.0.1c has been build with:&lt;br&gt;
&gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; libevent-2.0.19-stable has been built with:&lt;br&gt;
&gt; ./configure --enable-openssl --disable-debug-mode --with-pic&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Hm.  Just to rule something out that got added in 0.2.3.17-beta: could&lt;br&gt;
you try configuring Tor with --disable-compiler-hardening and&lt;br&gt;
--disable-linker-hardening, and see if that makes a difference?&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt; &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120625213119</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2012-06-25 21:31:19-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

&gt; OpenSSL 1.0.1c has been build with:
&gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2

I've never been able to compile openssl statically such that I could use
the resultant binary, dynlib and statlib it everywhere needed. Nor does
zlib play right in that. More on the ssl mail list.

&gt; could not load the shared library (in DSO support routines

I remember something like that before. Redo your openssl without
'zlib-dynamic'. Redo libevent against that. Then do Tor as static.
I think that should make it go away.

Be sure libevent/tor ./configure's are pointed against ssl you compiled,
and not default system libs.

I also think 'enable-tlsext' is redundant in that ./config probably
includes it automatically now, as with no-ssl2. See: openssl ciphers -v.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120626192758</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-06-26 19:27:58-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

[Attachment #2 (multipart/alternative)]


It works!
Thanks grarpamp!

Using zlib instead of zlib-dynamic fixed it like you said
I had to alter the Makefile and tell the linker where to find my mipsel
libz.so and libz.a and zlib includes
Also libevent and tor need the ./configure CPPFLAGS and LDFLAGS for zlib
too.

I'm only encountering timeouts after the circuit has been established:
Jun 26 21:21:04.000 [notice] Tried for 120 seconds to get a connection to
[scrubbed]:53. Giving up. (waiting for circuit)

This is using Tor-2.3.17-beta using static OpenSSL 1.0.1c (no-idea no-mdc2
no-rc5 zlib enable-tlsext no-ssl2) and libevent-2.0.19-stable (bufferevents
enabled)
Also I compiled with miniupnpc-1.7 and libnatpmp-20110808 support.

I think the Tor binary is too big 5.3MB which is due to libcrypto.a being
4.4MB (stripped).

Would you happen to know which ciphers I can drop from OpenSSL? (so I can
shrink it a bit).


2012/6/25 grarpamp &lt;grarpamp@gmail.com&gt;

&gt; &gt; OpenSSL 1.0.1c has been build with:
&gt; &gt; ./Configure debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2
&gt;
&gt; I've never been able to compile openssl statically such that I could use
&gt; the resultant binary, dynlib and statlib it everywhere needed. Nor does
&gt; zlib play right in that. More on the ssl mail list.
&gt;
&gt; &gt; could not load the shared library (in DSO support routines
&gt;
&gt; I remember something like that before. Redo your openssl without
&gt; 'zlib-dynamic'. Redo libevent against that. Then do Tor as static.
&gt; I think that should make it go away.
&gt;
&gt; Be sure libevent/tor ./configure's are pointed against ssl you compiled,
&gt; and not default system libs.
&gt;
&gt; I also think 'enable-tlsext' is redundant in that ./config probably
&gt; includes it automatically now, as with no-ssl2. See: openssl ciphers -v.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

It works!&lt;br&gt;Thanks grarpamp!&lt;br&gt;&lt;br&gt;Using zlib instead of zlib-dynamic fixed it like \
you said&lt;br&gt;I had to alter the Makefile and tell the linker where to find my mipsel \
libz.so and libz.a and zlib includes&lt;br&gt;Also libevent and tor need the ./configure \
CPPFLAGS and LDFLAGS for zlib too.&lt;br&gt; &lt;br&gt;I'm only encountering timeouts after \
the circuit has been established:&lt;br&gt;Jun 26 21:21:04.000 [notice] Tried for 120 \
seconds to get a connection to [scrubbed]:53. Giving up. (waiting for \
circuit)&lt;br&gt;&lt;br&gt;This is using Tor-2.3.17-beta using static OpenSSL 1.0.1c (no-idea \
no-mdc2 no-rc5 zlib enable-tlsext no-ssl2) and libevent-2.0.19-stable (bufferevents \
enabled)&lt;br&gt; Also I compiled with miniupnpc-1.7 and libnatpmp-20110808 \
support.&lt;br&gt;&lt;br&gt;I think the Tor binary is too big 5.3MB which is due to libcrypto.a \
being 4.4MB (stripped).&lt;br&gt;&lt;br&gt;Would you happen to know which ciphers I can drop from \
OpenSSL? (so I can shrink it a bit).&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2012/6/25 \
grarpamp &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:grarpamp@gmail.com" \
target="_blank"&gt;grarpamp@gmail.com&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; &lt;div \
class="im"&gt;&gt; OpenSSL 1.0.1c has been build with:&lt;br&gt; &gt; ./Configure \
debian-mipsel shared enable-tlsext zlib-dynamic no-ssl2&lt;br&gt; &lt;br&gt;
&lt;/div&gt;I've never been able to compile openssl statically such that I could \
use&lt;br&gt; the resultant binary, dynlib and statlib it everywhere needed. Nor does&lt;br&gt;
zlib play right in that. More on the ssl mail list.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; could not load the shared library (in DSO support routines&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;I remember something like that before. Redo your openssl without&lt;br&gt;
'zlib-dynamic'. Redo libevent against that. Then do Tor as static.&lt;br&gt;
I think that should make it go away.&lt;br&gt;
&lt;br&gt;
Be sure libevent/tor ./configure's are pointed against ssl you compiled,&lt;br&gt;
and not default system libs.&lt;br&gt;
&lt;br&gt;
I also think 'enable-tlsext' is redundant in that ./config probably&lt;br&gt;
includes it automatically now, as with no-ssl2. See: openssl ciphers -v.&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;_______________________________________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120626233950</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2012-06-26 23:39:50-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

&gt; I had to alter the Makefile
&gt; and tell the linker where to find ... libz.so and libz.a and zlib includes

If you got a static 'openssl' binary with zlib in it, and both
.a and .so's for the openssl libs, and libevent and tor compiled
against that, I'd like to see the openssl diff. I gave up early.

&gt; Also libevent and tor need the ./configure CPPFLAGS and LDFLAGS for zlib

Yeah, and and for against openssl and libevent too. I left that out.

&gt; I'm only encountering timeouts after the circuit has been established:
&gt; Jun 26 21:21:04.000 [notice] Tried for 120 seconds to get a connection to
&gt; [scrubbed]:53. Giving up. (waiting for circuit)

Don't know., sounds normal, send a signal newnym.

&gt; static OpenSSL 1.0.1c (... zlib ...)

I think 'zlib' works the same as not specifying any zlib* phrase.
And that not specifying 'shared' gets you only static libs and
a dynamic bin, 'shared' adds dyn libs.

&gt; libevent-2.0.19-stable (bufferevents enabled)
&gt; Also I compiled with miniupnpc-1.7 and libnatpmp-20110808 support.
&gt; I think the Tor binary is too big 5.3MB which is due to libcrypto.a being
&gt; 4.4MB (stripped).

Tor here is 3487400 bytes, stripped.

&gt; Would you happen to know which ciphers I can drop from OpenSSL? (so I can
&gt; shrink it a bit).

It's in the torspec docs somewhere. Probably just rsa, dh, aes and x509, basics.
Or try debug in openssl.conf.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629073916</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-29 07:39:16-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

On 6/28/12 11:37 PM, Damian Johnson wrote:
&gt;   - integ tests are pretty short, and just run the parser against some
&gt; test data from the metrics archive and the cached consensus

Keep in mind that metrics tarballs can be huge.  stem's tests probably
shouldn't download one or more of these tarballs in an automatic integ
test run.

&gt; PS. Karsten: Do we want to call this "NetworkStatusEntry" or something
&gt; else? It seems like "ConsensusEntry" would be more intuitive, but
&gt; maybe this would just spawn confusion.

A consensus is just one type of a network status.  Other types are:
 - votes,
 - opinions (specified in proposal 147 and targeted for 0.2.4.x),
 - microdescriptor consensuses,
 - sanitized bridge network statuses,
 - v2 network statuses, and
 - v1 directories (which are quite different though).

So, for the Java metrics-lib I went with a single NetworkStatusEntry
class for everything except v1 directory entries, but that won't scale
forever.  For example, "r" lines in consensuses are different from "r"
lines in microdescriptor consensuses.  The Java metrics-lib doesn't
understand microdescriptor consensuses, because they don't contain
anything new for statistical analysis, but I think stem will want to
parse them.  It probably makes sense to have an abstract
NetworkStatusEntry class that does most of the parsing work but that can
be specialized in its subclasses.  Picking names like ConsensusEntry if
the consensus class is called Consensus makes sense.  If there's a
similar concept to Java's inner classes in Python, maybe using something
like Consensus.Entry might be a good choice, too, because this class
will only be used as part of a Consensus.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629133034</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-06-29 13:30:34-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

2012/6/28 Damian Johnson &lt;atagar@torproject.org&gt;:
&gt; &gt; Erik and I have finished the proc.py integration tests
&gt; 
&gt; Great! I'm looking forward to checking them out.
&gt; 
&gt; &gt; Tomorrow, we will be starting the next Stem task regarding the Tor Export \
&gt; &gt; project. Do you have any recommendations on where we should start exploring in \
&gt; &gt; the Stem documentation?
&gt; 
&gt; Hmm, this concerns translating Descriptor subclasses [1] into a csv
&gt; (and I suppose loading them back up). First step would be to google
&gt; around to see if there's a builtin function what'll do this or help
&gt; with it. If not then this might simply include dumping out their
&gt; __dict__...
Please use the built-in function vars() instead of __dict__ to retrive
instance attributes.

-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120629162734</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-29 16:27:34-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

&gt; Keep in mind that metrics tarballs can be huge.  stem's tests probably
&gt; shouldn't download one or more of these tarballs in an automatic integ
&gt; test run.

Oops yup. Should have mentioned that. We're just picking out a
descriptor that seems to exercise most of the parsing. This is just
for a sanity check that 'we can still parse something found in the
wild'. Megan, Erik: the layout should be pretty obvious when you take
a peek in test/integ/descriptor/data/*.

&gt; The Java metrics-lib doesn't
&gt; understand microdescriptor consensuses, because they don't contain
&gt; anything new for statistical analysis, but I think stem will want to
&gt; parse them.

Definitely. Microdescriptors are available via the control protocol so
we need to be able to parse them.

&gt; It probably makes sense to have an abstract
&gt; NetworkStatusEntry class that does most of the parsing work but that can
&gt; be specialized in its subclasses.  Picking names like ConsensusEntry if
&gt; the consensus class is called Consensus makes sense.

Perfect, thanks. Megan, Erik: if I was in your shoes the first thing
that I'd do to approach this is propose the following on this list...
- an object hierarchy (we already have a bit of one, ex.
ServerDescriptor vs RelayDescriptor/BridgeDescriptor)
- a description for each of the classes, preferably something meaty
that we can use for the pydocs of each class with the :var: entries
- your thoughts on which parsing logic should go where (look at the
previous descriptor classes for a pattern that you might want to
follow)

&gt; If there's a
&gt; similar concept to Java's inner classes in Python, maybe using something
&gt; like Consensus.Entry might be a good choice, too, because this class
&gt; will only be used as part of a Consensus.

Yup, there is.

&gt; &gt; &gt; class Foo:
...   class Bar:
...     def __init__(self):
...       self.my_value = 5
...   def __init__(self):
...     self.my_bar = Foo.Bar()
...
&gt; &gt; &gt; f = Foo()
&gt; &gt; &gt; f.my_bar.my_value
5

&gt; A related question:  can you give us a couple of use-cases for the export \
&gt; functionality?  E.g., is filtering (we only want fields X, Y, and Z when Q = ...) \
&gt; likely to be of use?  Anything beyond just a straight dump of descriptor/network \
&gt; status/etc entries?

I'll mostly leave this question for Fabio since the csv dumping
functionality was his idea, though my thoughts on some use cases
are...

- user writes a script that has stem parse the descriptors, filter the
results (say, down to Syrian exit relays), then dumps to a csv so they
can make pretty graphs or do other analysis of the data

- user has a python script that hourly parses their cached descriptors
to get any new exits that only allow plaintext traffic, then dump just
the fingerprint and ip to a csv so they can later be scanned for
malicious activity

&gt; Please use the built-in function vars() instead of __dict__ to retrive
&gt; instance attributes.

Ah ha, thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120629204017</emailId><senderName>Norman Danner</senderName><senderEmail>ndanner@wesleyan.edu</senderEmail><timestampReceived>2012-06-29 20:40:17-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

(Sorry, wasn't subscribed to tor-dev@, so these last couple of messages 
didn't go there...)

On 6/29/12 4:09 PM, Damian Johnson wrote:
&gt;&gt; I think the question here is that it seems like one should be able to get
&gt;&gt; all the descriptors from the running Tor process via
&gt;&gt;
&gt;&gt;         GETINFO desc/all-recent
&gt;&gt;
&gt;&gt; But there isn't any obvious stem API for this.  One could work around it
&gt;&gt; (e.g., do a get_info(), process a little, turn into a StringIO, and feed
&gt;&gt; that into the functions that want a file), but the real question is whether
&gt;&gt; stem expects clients to do that, or whether you think that should be part of
&gt;&gt; stem.  This is sort of a "how fat should stem be" kind of question.
&gt;
&gt; Ahhh, gotcha. The controller is still in its infancy and maturing it
&gt; is Ravi's GSoC project. Yes, there *should* be methods for 'give me a
&gt; descriptor for fingerprint X' or 'give me a list of all the
&gt; descriptors' but they have not been implemented yet (that said, they'd
&gt; be very, very easy to write).

Should we wait for Ravi to implement this, or can we go ahead and do it 
ourselves as needed?

	- Norman

-- 
Norman Danner - ndanner@wesleyan.edu - http://ndanner.web.wesleyan.edu
Department of Mathematics and Computer Science - Wesleyan University


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120711214333</emailId><senderName>Jens Kubieziel</senderName><senderEmail>maillist@kubieziel.de</senderEmail><timestampReceived>2012-07-11 21:43:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 203: Avoiding censorship by impersonating an HTTPS server</subject><body>

[Attachment #2 (multipart/signed)]


* Nick Mathewson schrieb am 2012-06-26 um 00:23 Uhr:
&gt; Side note: What to put on the webserver?
&gt; 
&gt;    To credibly pretend not to be ourselves, we must pretend to be
&gt;    something else in particular -- and something not easily identifiable
&gt;    or inherently worthless.  We should not, for example, have all

Some ideas:
- some random content with a CC license
  We could have a list or something of CC-licensed content. The
  webserver mirrors either the whole site or some subsites. I'm thinking
  of some Wikipedia sites or books from Project Gutenberg.
- country related content
  We could check the users IP address and try to geolocate it. Based on
  that country information the webserver could deliver some local
  content. But where should we get country-specific content.
- 451
  If someone is in trolling mood, he just can deliver a 451 error. ;)
- Login page/random fresh installation
  We could also present some page which looks like a valid login page or
  a fresh installation (Apache, Mediawiki or something other popular).
  Another similar idea is it to deliver some error page, like a blank
  page with a MySQL-, PHP-, Tomcat or any other error message.

-- 
Jens Kubieziel                                   http://www.kubieziel.de
Die größten Menschen sind jene, die anderen Hoffnung geben können. Jean
Jaurès

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120626162519</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-26 16:25:19-0400</timestampReceived><subject>Re: [tor-dev] Proc Unit Testing &amp; Next Project</subject><body>

Hi Erik, hi Megan.

&gt; Megan and I have finished a first run at writing unit tests for the proc utilities \
&gt; in stem.

Looks great! I only got down to 'test_get_memory_usage()' before
needing to run to catch the bus but the tests that I've seen so far
look good. The mocking though confused me for a bit.

&gt; +def mock_fn(exp_args, return_vals, target=None):
&gt; +  """
&gt; +  Provides a lambda function that may be used to mock another function.

In reading the following code I suspect that this could be clearer if
it accepted a single argument that was the dict of 'argument =&gt; return
value'.

&gt; +  :param list of tuples exp_args: expected input value(s) to be used for \
&gt; comparison

The ReStructuredTest format for param entries are...
&gt; param [type ]arg_name:

So to properly compile this should be...
&gt; param list exp_args:

Usually I say what the list contains in the following description.

&gt; +  :param function target: target function to be called if mocking doesn't cover \
&gt; this input

Why do you fall through to the target function? Unit tests need to be
os independent, so if falling though to an os will break on some
platforms then we'll need to find an alternative.

Speaking of os independence, if it isn't too hard would you mind
running this on a warty platform like Windows? If you don't have a
Windows system laying around then don't worry about it.

Don't worry if the expand_path unit test breaks - that's something
Beck is currently fixing.

&gt; +  :precondition: len(exp_args) = len(return_vals)

I checked the sphinx index [1] and python domain [2] for
"precondition" and didn't find it. Are you sure that directive exists?
If not then we can simply provide it in the above function
description.

&gt; +                                                 return_vals[i]    a=exp_args[i]
&gt; +  :returns:  function _mocker such that: f(*a) = target(*a)        a != \
&gt; exp_args[i] and target != N +                                                 raise \
&gt; TargetError a != exp_args[i] and target = No

Nice, though to make this render the way that you want in sphinx it
should be changed to...

&gt; returns:  function _mocker such that...
  * return_vals[i]    a = exp_args[i]
  * target(*a)        a != exp_args[i] and target != N
  * raise TargetError a != exp_args[i] and target = No

&gt; +  Used with the builtin zip function to create all possible combinations
&gt; +  of two lists. Called in test_get_stats().

That sounds a lot like itertools.product().

&gt; &gt; &gt; import itertools
&gt; &gt; &gt; list(itertools.product([1, 2, 3], ['a', 'b', 'c']))
[(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'),
(3, 'b'), (3, 'c')]

&gt; Looking further into the future, we discussed our next project with Stem with \
&gt; Professor Danner today, and agreed that the "Export Tor Desciptors" project would \
&gt; be ideal.

Ok. Little more context on that project in case you're not on tor-dev@...
https://lists.torproject.org/pipermail/tor-dev/2012-June/003634.html

I was gonna suggest a python port of Onionoo [3][4], which is the
service that supports Atlas [5]. Karsten would be able to help mentor
that, and it would involve filling in the missing bits of descriptor
parsing that we'll need for it (such as network status entries).
However, that would be far more ambitious and might be a bit too
large. Up to you.

Cheers! -Damian

[1] http://sphinx.pocoo.org/genindex.html
[2] http://sphinx.pocoo.org/domains.html#directive-py:class
[3] https://www.torproject.org/projects/onionoo.html
[4] https://gitweb.torproject.org/onionoo.git/blob/HEAD:/DESIGN
[5] https://atlas.torproject.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120626214116</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-26 21:41:16-0400</timestampReceived><subject>Re: [tor-dev] Proc Unit Testing &amp; Next Project</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,


&gt; In reading the following code I suspect that this could be clearer if
it accepted a single argument that was the dict of 'argument =&gt; return
value'.

All set -- mock_fn() now takes a dictionary rather than two lists as an
argument.  The docstring suggestions have also been implemented.

&gt; Why do you fall through to the target function? Unit tests need to be
os independent, so if falling though to an os will break on some
platforms then we'll need to find an alternative.

We do this in order to accommodate a call of open() that is being made
somewhere within the call of test_get_connections().  We had no easy way of
seeing what exactly was making this call, but it was giving us a large
backtrace and error if we did not provide a way for the original open
funciton to be called.

We will run this code under windows tomorrow when we have access to a
windows machine.

All of these changes are in Megan's Github at:
https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py

Per your suggestion to use itertools.product(), we tried this but ran into
a problem.  Our subsets() function returns a list of lists, where each
sub-list contains tuples that bind input values to return values -- we want
these to be persistent throughout.  itertools doesn't seem to be able to
take a single list of tuples and create all possible combinations of these
tuples (from each individual tuple in its own list to all four given tuples
in a single list).  It is challenging to explain, but let us know if you
think it is still a better option when you have a chance to look over the
code again.

As for Onionoo, we had a brief discussion about it today, and we are
definitely considering it.  We will take a closer look at it tomorrow and
give a more definite answer then.

Have a good evening,
Erik &amp; Megan


On Tue, Jun 26, 2012 at 4:25 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; Hi Erik, hi Megan.
&gt;
&gt; &gt; Megan and I have finished a first run at writing unit tests for the proc
&gt; utilities in stem.
&gt;
&gt; Looks great! I only got down to 'test_get_memory_usage()' before
&gt; needing to run to catch the bus but the tests that I've seen so far
&gt; look good. The mocking though confused me for a bit.
&gt;
&gt; &gt; +def mock_fn(exp_args, return_vals, target=None):
&gt; &gt; +  """
&gt; &gt; +  Provides a lambda function that may be used to mock another function.
&gt;
&gt; In reading the following code I suspect that this could be clearer if
&gt; it accepted a single argument that was the dict of 'argument =&gt; return
&gt; value'.
&gt;
&gt; &gt; +  :param list of tuples exp_args: expected input value(s) to be used
&gt; for comparison
&gt;
&gt; The ReStructuredTest format for param entries are...
&gt; :param [type ]arg_name:
&gt;
&gt; So to properly compile this should be...
&gt; :param list exp_args:
&gt;
&gt; Usually I say what the list contains in the following description.
&gt;
&gt; &gt; +  :param function target: target function to be called if mocking
&gt; doesn't cover this input
&gt;
&gt; Why do you fall through to the target function? Unit tests need to be
&gt; os independent, so if falling though to an os will break on some
&gt; platforms then we'll need to find an alternative.
&gt;
&gt; Speaking of os independence, if it isn't too hard would you mind
&gt; running this on a warty platform like Windows? If you don't have a
&gt; Windows system laying around then don't worry about it.
&gt;
&gt; Don't worry if the expand_path unit test breaks - that's something
&gt; Beck is currently fixing.
&gt;
&gt; &gt; +  :precondition: len(exp_args) = len(return_vals)
&gt;
&gt; I checked the sphinx index [1] and python domain [2] for
&gt; "precondition" and didn't find it. Are you sure that directive exists?
&gt; If not then we can simply provide it in the above function
&gt; description.
&gt;
&gt; &gt; +                                                 return_vals[i]
&gt;  a=exp_args[i]
&gt; &gt; +  :returns:  function _mocker such that: f(*a) = target(*a)        a !=
&gt; exp_args[i] and target != N
&gt; &gt; +                                                 raise TargetError a !=
&gt; exp_args[i] and target = No
&gt;
&gt; Nice, though to make this render the way that you want in sphinx it
&gt; should be changed to...
&gt;
&gt; :returns:  function _mocker such that...
&gt;  * return_vals[i]    a = exp_args[i]
&gt;  * target(*a)        a != exp_args[i] and target != N
&gt;  * raise TargetError a != exp_args[i] and target = No
&gt;
&gt; &gt; +  Used with the builtin zip function to create all possible combinations
&gt; &gt; +  of two lists. Called in test_get_stats().
&gt;
&gt; That sounds a lot like itertools.product().
&gt;
&gt; &gt;&gt;&gt; import itertools
&gt; &gt;&gt;&gt; list(itertools.product([1, 2, 3], ['a', 'b', 'c']))
&gt; [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'),
&gt; (3, 'b'), (3, 'c')]
&gt;
&gt; &gt; Looking further into the future, we discussed our next project with Stem
&gt; with Professor Danner today, and agreed that the "Export Tor Desciptors"
&gt; project would be ideal.
&gt;
&gt; Ok. Little more context on that project in case you're not on tor-dev@...
&gt; https://lists.torproject.org/pipermail/tor-dev/2012-June/003634.html
&gt;
&gt; I was gonna suggest a python port of Onionoo [3][4], which is the
&gt; service that supports Atlas [5]. Karsten would be able to help mentor
&gt; that, and it would involve filling in the missing bits of descriptor
&gt; parsing that we'll need for it (such as network status entries).
&gt; However, that would be far more ambitious and might be a bit too
&gt; large. Up to you.
&gt;
&gt; Cheers! -Damian
&gt;
&gt; [1] http://sphinx.pocoo.org/genindex.html
&gt; [2] http://sphinx.pocoo.org/domains.html#directive-py:class
&gt; [3] https://www.torproject.org/projects/onionoo.html
&gt; [4] https://gitweb.torproject.org/onionoo.git/blob/HEAD:/DESIGN
&gt; [5] https://atlas.torproject.org/
&gt;

[Attachment #5 (text/html)]

Hi Damian,&lt;br&gt;&lt;br&gt;&lt;br&gt;
&gt; In reading the following code I suspect that this could be clearer if&lt;br&gt;it \
accepted a single argument that was the dict of 'argument =&gt; return \
value'.&lt;br&gt;&lt;br&gt;All set -- mock_fn() now takes a dictionary rather than two lists \
as an argument.  The docstring suggestions have also been implemented.&lt;br&gt;

&lt;br&gt;&gt; Why do you fall through to the target function? Unit tests need to be&lt;br&gt;
os independent, so if falling though to an os will break on some&lt;br&gt;
platforms then we'll need to find an alternative.&lt;br&gt;&lt;br&gt;We do this in order to \
accommodate a call of open() that is being made somewhere within the call of \
test_get_connections().  We had no easy way of seeing what exactly was making this \
call, but it was giving us a large backtrace and error if we did not provide a way \
for the original open funciton to be called.&lt;br&gt;

&lt;br&gt;We will run this code under windows tomorrow when we have access to a windows \
machine.&lt;br&gt;&lt;br&gt;All of these changes are in Megan's Github at: &lt;a \
href="https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py"&gt;https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py&lt;/a&gt;&lt;br&gt;


&lt;br&gt;Per your suggestion to use itertools.product(), we tried this but ran into a \
problem.  Our subsets() function returns a list of lists, where each sub-list \
contains tuples that bind input values to return values -- we want these to be \
persistent throughout.  itertools doesn't seem to be able to take a single list \
of tuples and create all possible combinations of these tuples (from each individual \
tuple in its own list to all four given tuples in a single list).  It is challenging \
to explain, but let us know if you think it is still a better option when you have a \
chance to look over the code again.&lt;br&gt;

&lt;br&gt;As for Onionoo, we had a brief discussion about it today, and we are definitely \
considering it.  We will take a closer look at it tomorrow and give a more definite \
answer then.&lt;br&gt;&lt;br&gt;Have a good evening,&lt;br&gt;Erik &amp; Megan&lt;br&gt;

&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Jun 26, 2012 at 4:25 PM, Damian Johnson \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

Hi Erik, hi Megan.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Megan and I have finished a first run at writing unit tests for the proc \
utilities in stem.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Looks great! I only got down to 'test_get_memory_usage()' before&lt;br&gt;
needing to run to catch the bus but the tests that I've seen so far&lt;br&gt;
look good. The mocking though confused me for a bit.&lt;br&gt;
&lt;br&gt;
&gt; +def mock_fn(exp_args, return_vals, target=None):&lt;br&gt;
&gt; +  """&lt;br&gt;
&gt; +  Provides a lambda function that may be used to mock another function.&lt;br&gt;
&lt;br&gt;
In reading the following code I suspect that this could be clearer if&lt;br&gt;
it accepted a single argument that was the dict of 'argument =&gt; return&lt;br&gt;
value'.&lt;br&gt;
&lt;br&gt;
&gt; +  :param list of tuples exp_args: expected input value(s) to be used for \
comparison&lt;br&gt; &lt;br&gt;
The ReStructuredTest format for param entries are...&lt;br&gt;
&gt; param [type ]arg_name:&lt;br&gt;
&lt;br&gt;
So to properly compile this should be...&lt;br&gt;
&gt; param list exp_args:&lt;br&gt;
&lt;br&gt;
Usually I say what the list contains in the following description.&lt;br&gt;
&lt;br&gt;
&gt; +  :param function target: target function to be called if mocking doesn't \
cover this input&lt;br&gt; &lt;br&gt;
Why do you fall through to the target function? Unit tests need to be&lt;br&gt;
os independent, so if falling though to an os will break on some&lt;br&gt;
platforms then we'll need to find an alternative.&lt;br&gt;
&lt;br&gt;
Speaking of os independence, if it isn't too hard would you mind&lt;br&gt;
running this on a warty platform like Windows? If you don't have a&lt;br&gt;
Windows system laying around then don't worry about it.&lt;br&gt;
&lt;br&gt;
Don't worry if the expand_path unit test breaks - that's something&lt;br&gt;
Beck is currently fixing.&lt;br&gt;
&lt;br&gt;
&gt; +  :precondition: len(exp_args) = len(return_vals)&lt;br&gt;
&lt;br&gt;
I checked the sphinx index [1] and python domain [2] for&lt;br&gt;
"precondition" and didn't find it. Are you sure that directive \
exists?&lt;br&gt; If not then we can simply provide it in the above function&lt;br&gt;
description.&lt;br&gt;
&lt;br&gt;
&gt; +                                                 return_vals[i]    \
a=exp_args[i]&lt;br&gt; &gt; +  :returns:  function _mocker such that: f(*a) = target(*a)   \
a != exp_args[i] and target != N&lt;br&gt; &gt; +                                           \
raise TargetError a != exp_args[i] and target = No&lt;br&gt; &lt;br&gt;
Nice, though to make this render the way that you want in sphinx it&lt;br&gt;
should be changed to...&lt;br&gt;
&lt;br&gt;
&gt; returns:  function _mocker such that...&lt;br&gt;
  * return_vals[i]    a = exp_args[i]&lt;br&gt;
  * target(*a)        a != exp_args[i] and target != N&lt;br&gt;
  * raise TargetError a != exp_args[i] and target = No&lt;br&gt;
&lt;br&gt;
&gt; +  Used with the builtin zip function to create all possible combinations&lt;br&gt;
&gt; +  of two lists. Called in test_get_stats().&lt;br&gt;
&lt;br&gt;
That sounds a lot like itertools.product().&lt;br&gt;
&lt;br&gt;
&gt;&gt;&gt; import itertools&lt;br&gt;
&gt;&gt;&gt; list(itertools.product([1, 2, 3], ['a', 'b', \
'c']))&lt;br&gt; [(1, 'a'), (1, 'b'), (1, 'c'), (2, \
'a'), (2, 'b'), (2, 'c'), (3, 'a'),&lt;br&gt; (3, \
'b'), (3, 'c')]&lt;br&gt; &lt;div class="im"&gt;&lt;br&gt;
&gt; Looking further into the future, we discussed our next project with Stem with \
Professor Danner today, and agreed that the "Export Tor Desciptors" project \
would be ideal.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Ok. Little more context on that project in case you're not on \
tor-dev@...&lt;br&gt; &lt;a href="https://lists.torproject.org/pipermail/tor-dev/2012-June/003634.html" \
target="_blank"&gt;https://lists.torproject.org/pipermail/tor-dev/2012-June/003634.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
I was gonna suggest a python port of Onionoo [3][4], which is the&lt;br&gt;
service that supports Atlas [5]. Karsten would be able to help mentor&lt;br&gt;
that, and it would involve filling in the missing bits of descriptor&lt;br&gt;
parsing that we'll need for it (such as network status entries).&lt;br&gt;
However, that would be far more ambitious and might be a bit too&lt;br&gt;
large. Up to you.&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;br&gt;
[1] &lt;a href="http://sphinx.pocoo.org/genindex.html" \
target="_blank"&gt;http://sphinx.pocoo.org/genindex.html&lt;/a&gt;&lt;br&gt; [2] &lt;a \
href="http://sphinx.pocoo.org/domains.html#directive-py:class" \
target="_blank"&gt;http://sphinx.pocoo.org/domains.html#directive-py:class&lt;/a&gt;&lt;br&gt; [3] \
&lt;a href="https://www.torproject.org/projects/onionoo.html" \
target="_blank"&gt;https://www.torproject.org/projects/onionoo.html&lt;/a&gt;&lt;br&gt; [4] &lt;a \
href="https://gitweb.torproject.org/onionoo.git/blob/HEAD:/DESIGN" \
target="_blank"&gt;https://gitweb.torproject.org/onionoo.git/blob/HEAD:/DESIGN&lt;/a&gt;&lt;br&gt; \
[5] &lt;a href="https://atlas.torproject.org/" \
target="_blank"&gt;https://atlas.torproject.org/&lt;/a&gt;&lt;br&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120627204300</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-27 20:43:00-0400</timestampReceived><subject>Re: [tor-dev] Proc Unit Testing &amp; Next Project</subject><body>

Damian,

After talking about it with Professor Danner, we would like to stick
with the Tor Descriptors prject rather than work on Onionoo.
Professor Danner brought up that if this project isn't maintained, our
work could be fruitless, and at this point we would prefer to stick
with Python. We would, however, be possibly willing to move on to
Onionoo after finishing the descriptor exporter if time in our
internship permits.

On another note, we came up with a couple more questions:

- What environment did you want the proc unit tests run under in
Windows.  Since Cygwin only supports up to python 2.6 currently, we
would need to rebuild python (2.7) in order to allow the tests to run.
 Under the vanilla windows command prompt, we need to have an instance
of tor already running on the computer.  Generally speaking, we don't
have much access to windows development machines, so any advice you
have would be appreciated.

- For writing integration tests for proc, we aren't sure how to test
get_memory_usage(), get_stats(), and get_connections().  These
functions all return information that can really only be checked (so
far as we can tell) by parsing the proc files to extract the same
information in an identical manner to the functions themselves.
Furthermore, given how rapidly this information is changing, it will
likely be an issue that in the time between getting the needed memory
usage, for example, and the actual call on get_memory_usage(), the
amount of memory tor is using could easily have changed.  Could you
give us some pointers on how we should approach these integration
tests?

Thank you in advance,
Erik &amp; Megan

On 6/25/12, Erik I Islo &lt;eislo@wesleyan.edu&gt; wrote:
&gt; Hi Damian,
&gt;
&gt; Megan and I have finished a first run at writing unit tests for the proc
&gt; utilities in stem.  The code may be found on Megan's Github at:
&gt; https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py.
&gt; Until we hear back on a code review, we'll move on to the integration
&gt; tests.  Just for reference, here is a link to the ticket as well:
&gt; https://trac.torproject.org/projects/tor/ticket/6082.
&gt;
&gt; Looking further into the future, we discussed our next project with Stem
&gt; with Professor Danner today, and agreed that the "Export Tor Desciptors"
&gt; project would be ideal.  (
&gt; https://trac.torproject.org/projects/tor/ticket/6171)  Do you have any
&gt; thoughts on this?  Otherwise, we just wanted to let you know our plan as we
&gt; move forward.
&gt;
&gt; -Erik &amp; Megan
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619180648</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-06-19 18:06:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 202: Two improved relay encryption protocols for Tor cells</subject><body>

On 6/19/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 202-improved-relay-crypto.txt

&gt;    Any new approach should be able to coexist on a circuit
&gt;    with the old approach.  That is, if Alice wants to build a
&gt;    circuit through Bob1, Bob2, and Bob3, and only Bob2 supports a
&gt;    revised relay protocol, then Alice should be able to build a
&gt;    circuit such that she can have Bob1 and Bob3 process each cell
&gt;    with the current protocol, and Bob2 process it with a revised
&gt;    protocol.  (Why?  Because if all nodes in a circuit needed to use
&gt;    the same relay protocol, then each node could learn information
&gt;    about the other nodes in the circuit from which relay protocol
&gt;    was chosen.  For example, if Bob1 supports the new protocol, and
&gt;    sees that the old relay protocol is in use, and knows that Bob2
&gt;    supports the new one, then Bob1 has learned that Bob3 is some
&gt;    node that does not support the new relay protocol.)

This feature is unsafe to use.  Each client must use the same
circuit-extension protocol for every relay on every circuit it builds.


&gt; 2.1. Chained large-block what now?
&gt;
&gt;    We assume the existence of a primitive that provides the desired
&gt;    properties of a tweakable[Tweak] block cipher, taking blocks of any
&gt;    desired size.  (In our case, the block size is 509 bytes[*].)
&gt;
&gt;    It also takes a Key, and a per-block "tweak" parameter that plays
&gt;    the same role that an IV plays in CBC, or that the counter plays
&gt;    in counter mode.
&gt;
&gt;    The Tweak-chaining function TC takes as input a previous tweak, a
&gt;    tweak chaining key, and a cell; it outputs a new tweak.  Its
&gt;    purpose is to make future cells undecryptable unless you have
&gt;    received all previous cells.  It could probably be something like
&gt;    a MAC of the old tweak and the cell using the tweak chaining key
&gt;    as the MAC key.

No.  In every tweakable block cipher construction which I have seen
proposed, an attacker who knows the key and has one plaintext and its
corresponding ciphertext can recover the tweak.

Varying the tweak would allow an honest recipient to fail to decrypt a
cell if any previous cell was altered, but cells are not undecryptable
if only the tweak is unknown.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619183728</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-06-19 18:37:28-0400</timestampReceived><subject>Re: [tor-dev] Proposal 202: Two improved relay encryption protocols for Tor cells</subject><body>

On Tue, Jun 19, 2012 at 2:06 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wro=
te:
&gt; On 6/19/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; Filename: 202-improved-relay-crypto.txt
&gt;
&gt;&gt; =A0 =A0Any new approach should be able to coexist on a circuit
&gt;&gt; =A0 =A0with the old approach. =A0That is, if Alice wants to build a
&gt;&gt; =A0 =A0circuit through Bob1, Bob2, and Bob3, and only Bob2 supports a
&gt;&gt; =A0 =A0revised relay protocol, then Alice should be able to build a
&gt;&gt; =A0 =A0circuit such that she can have Bob1 and Bob3 process each cell
&gt;&gt; =A0 =A0with the current protocol, and Bob2 process it with a revised
&gt;&gt; =A0 =A0protocol. =A0(Why? =A0Because if all nodes in a circuit needed to=
 use
&gt;&gt; =A0 =A0the same relay protocol, then each node could learn information
&gt;&gt; =A0 =A0about the other nodes in the circuit from which relay protocol
&gt;&gt; =A0 =A0was chosen. =A0For example, if Bob1 supports the new protocol, and
&gt;&gt; =A0 =A0sees that the old relay protocol is in use, and knows that Bob2
&gt;&gt; =A0 =A0supports the new one, then Bob1 has learned that Bob3 is some
&gt;&gt; =A0 =A0node that does not support the new relay protocol.)
&gt;
&gt; This feature is unsafe to use. =A0Each client must use the same
&gt; circuit-extension protocol for every relay on every circuit it builds.

Do you mean that every client must use at most one circuit-extension
protocol on all circuits, or do you mean that every circuit must by
built by at most one circuit-extension protocol?

And why?

And how would you have either*of those without having the choice of
circuit extension protocol used at any hop in the circuit leak to the
attacker which other nodes might be later in the circuit?  (In other
words, if I'm a guard, and I support an improved protocol, and I know
the client supports it, and the middle node supports it, but the
client does not use it, I can deduce that the exit node does not
support the improved protocol.)

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120614162819</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-14 16:28:19-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

&gt; We also updated your adaptation to our patch so that no code is repeated.
&gt; This should make the function cleaner and more readable.  This new code can
&gt; be found at:
&gt; https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py

Ah ha, makes much more sense now - thanks. After some reflection I
realized that the mocking code was more convoluted that it needs to
be. What do you think of this change instead?

https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/eb51eab0badf6b64d6119312478098686553f605

It seems to handle both of our use cases while also axing much of the
special handling for builtins...

&gt;&gt;&gt; import test.mocking
&gt;&gt;&gt; import time
&gt;&gt;&gt; my_mock = lambda i: i
&gt;&gt;&gt; test.mocking.mock(time.time, my_mock)
&gt;&gt;&gt; time.time(5)
5
&gt;&gt;&gt; test.mocking.revert_mocking()
&gt;&gt;&gt; time.time()
1339689308.64306

&gt;&gt;&gt; test.mocking.mock(open, my_mock)
&gt;&gt;&gt; open(5)
5
&gt;&gt;&gt; test.mocking.revert_mocking()
&gt;&gt;&gt; open("/some_file", "r")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: '/some_file'

If it looks good to you then I'll go ahead and merge this with master.
Cheers! -Damian

PS. Thanks for converting the mocking module to reStrcutredText.
Usually that would have been a welcome improvement, however in this
case I'd already converted it in the master branch so that actually
generated merge conflicts with your patch. It's helpful if there's
separate commits for separate changes (ie, a commit for the mocking
changes and another for the reStructuredText conversion). That said, I
don't always follow this rule either. ;)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120614204453</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-14 20:44:53-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

[Attachment #2 (multipart/alternative)]


The changes look great! I see no issues with merging to the master branch.
Sorry about the reStructuredText inconvenience. I actually didn't even
think of it -- I just meant to clean up the comments a bit, but I'll
definitely be more careful in the future.

- Erik &amp; Megan

On Thu, Jun 14, 2012 at 4:28 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; &gt; We also updated your adaptation to our patch so that no code is repeated.
&gt; &gt; This should make the function cleaner and more readable.  This new code
&gt; can
&gt; &gt; be found at:
&gt; &gt; https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py
&gt;
&gt; Ah ha, makes much more sense now - thanks. After some reflection I
&gt; realized that the mocking code was more convoluted that it needs to
&gt; be. What do you think of this change instead?
&gt;
&gt;
&gt; https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/eb51eab0badf6b64d6119312478098686553f605
&gt;
&gt; It seems to handle both of our use cases while also axing much of the
&gt; special handling for builtins...
&gt;
&gt; &gt;&gt;&gt; import test.mocking
&gt; &gt;&gt;&gt; import time
&gt; &gt;&gt;&gt; my_mock = lambda i: i
&gt; &gt;&gt;&gt; test.mocking.mock(time.time, my_mock)
&gt; &gt;&gt;&gt; time.time(5)
&gt; 5
&gt; &gt;&gt;&gt; test.mocking.revert_mocking()
&gt; &gt;&gt;&gt; time.time()
&gt; 1339689308.64306
&gt;
&gt; &gt;&gt;&gt; test.mocking.mock(open, my_mock)
&gt; &gt;&gt;&gt; open(5)
&gt; 5
&gt; &gt;&gt;&gt; test.mocking.revert_mocking()
&gt; &gt;&gt;&gt; open("/some_file", "r")
&gt; Traceback (most recent call last):
&gt;  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
&gt; IOError: [Errno 2] No such file or directory: '/some_file'
&gt;
&gt; If it looks good to you then I'll go ahead and merge this with master.
&gt; Cheers! -Damian
&gt;
&gt; PS. Thanks for converting the mocking module to reStrcutredText.
&gt; Usually that would have been a welcome improvement, however in this
&gt; case I'd already converted it in the master branch so that actually
&gt; generated merge conflicts with your patch. It's helpful if there's
&gt; separate commits for separate changes (ie, a commit for the mocking
&gt; changes and another for the reStructuredText conversion). That said, I
&gt; don't always follow this rule either. ;)
&gt;

[Attachment #5 (text/html)]

The changes look great! I see no issues with merging to the master branch.  Sorry \
about the reStructuredText inconvenience. I actually didn't even think of it -- I \
just meant to clean up the comments a bit, but I'll definitely be more careful in \
the future.&lt;br&gt;

&lt;br&gt;- Erik &amp; Megan &lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Thu, Jun 14, 2012 at 4:28 \
PM, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="im"&gt;&gt; We also updated your adaptation to our \
patch so that no code is repeated.&lt;br&gt; &gt; This should make the function cleaner and \
more readable.  This new code can&lt;br&gt; &gt; be found at:&lt;br&gt;
&gt; &lt;a href="https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py" \
target="_blank"&gt;https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;/div&gt;Ah ha, makes much more sense now - thanks. After some reflection I&lt;br&gt;
realized that the mocking code was more convoluted that it needs to&lt;br&gt;
be. What do you think of this change instead?&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/eb51eab0badf6b64d6119312478098686553f605" \
target="_blank"&gt;https://gitweb.torproject.org/user/atagar/stem.git/commitdiff/eb51eab0badf6b64d6119312478098686553f605&lt;/a&gt;&lt;br&gt;



&lt;br&gt;
It seems to handle both of our use cases while also axing much of the&lt;br&gt;
special handling for builtins...&lt;br&gt;
&lt;br&gt;
&gt;&gt;&gt; import test.mocking&lt;br&gt;
&gt;&gt;&gt; import time&lt;br&gt;
&gt;&gt;&gt; my_mock = lambda i: i&lt;br&gt;
&gt;&gt;&gt; test.mocking.mock(time.time, my_mock)&lt;br&gt;
&gt;&gt;&gt; time.time(5)&lt;br&gt;
5&lt;br&gt;
&gt;&gt;&gt; test.mocking.revert_mocking()&lt;br&gt;
&gt;&gt;&gt; time.time()&lt;br&gt;
1339689308.64306&lt;br&gt;
&lt;br&gt;
&gt;&gt;&gt; test.mocking.mock(open, my_mock)&lt;br&gt;
&gt;&gt;&gt; open(5)&lt;br&gt;
5&lt;br&gt;
&gt;&gt;&gt; test.mocking.revert_mocking()&lt;br&gt;
&gt;&gt;&gt; open("/some_file", "r")&lt;br&gt;
Traceback (most recent call last):&lt;br&gt;
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;&lt;br&gt;
IOError: [Errno 2] No such file or directory: '/some_file'&lt;br&gt;
&lt;br&gt;
If it looks good to you then I'll go ahead and merge this with master.&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;br&gt;
PS. Thanks for converting the mocking module to reStrcutredText.&lt;br&gt;
Usually that would have been a welcome improvement, however in this&lt;br&gt;
case I'd already converted it in the master branch so that actually&lt;br&gt;
generated merge conflicts with your patch. It's helpful if there's&lt;br&gt;
separate commits for separate changes (ie, a commit for the mocking&lt;br&gt;
changes and another for the reStructuredText conversion). That said, I&lt;br&gt;
don't always follow this rule either. ;)&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120615152835</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-15 15:28:35-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

&gt; The changes look great! I see no issues with merging to the master branch.

Great, pushed.

&gt; Sorry about the reStructuredText inconvenience. I actually didn't even think of it \
&gt; -- I just meant to clean up the comments a bit, but I'll definitely be more careful \
&gt; in the future.

No worries. Again, it would usually have been a welcome change. :)

&gt; Once we confirm this with Damian, he will push the changes to master
&gt; in torprojects' repository.

Don't worry about that. The way that open source git projects usually
work is that you make a 'pull request', which simply means saying 'I
have some changes that I would like to share, here they are' (which is
what you've been doing). If the changes look good then I'll rebase
them onto the master branch and push them myself.

Usually only a tiny number of central developers actually have push
access to the master repository.

&gt; Our code can be found at:
&gt; 
&gt; https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py

Ok. Previously I was pulling from 'jacthinman', is 'meganchang' the
github repository where you plan to do most of your future work?

I'd suggest periodically running the following, replacing 'origin'
with whatever you're calling the torproject master remote...
git fetch origin
git rebase origin/master

That way your changes don't fall too far out of date with the current
HEAD (looks like you're currently 29 commits behind).

&gt; +import test.unit.util.proc

Please keep the order of the current imports (the unit/integ test
imports are batched together).

&gt; +  test.unit.util.proc.TestProc,

Lets move this test just above the "test.unit.util.system.TestSystem".
The tests are ordered by their dependencies so that the lowest-level
stuff runs first. The reason for that is that if, say, stem.util.enum
breaks then it'll probably break just about everything else so we want
to report those errors first (rather than leave the developer
wondering why something like stem.connection was also broken).

&gt; +      prefix_list = sorted(list(line_prefixes))

The extra list wrapper isn't necessary.

&gt; &gt; &gt; sorted((1, 4, 2))
[1, 2, 4]

&gt; Let us know what you think about our unit tests thus far! We also wanted to let you \
&gt; know that we plan on finishing all proc unit tests by Tuesday (June 19), and all \
&gt; proc integration tests by Friday (June 22).

Great! What you have so far looks good, looking forward to seeing the
rest. Be warned that, as Ravi can attest, code reviews generally take
a few iterations. Here's an example...

https://trac.torproject.org/5262

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120618212233</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-18 21:22:33-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian,

First, to clarify our github repository situation, both Megan and I will be
maintaining remote repos in github per Professor Danner's request so that
we each gain experience with version control systems.  As we have been
working so far, I have been maintaining the mocking revisions in my mocking
branch and Megan has been working on the proc testing code in her own proc
branch.

Next, in continuing work on the unit tests for proc.py, we ran into another
issue with the mocking code.  The details are explained in the commit
message, but please let me know if further clarification is necessary. The
code can be found at:

https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py

-Erik &amp; Megan


On Fri, Jun 15, 2012 at 3:28 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; &gt; The changes look great! I see no issues with merging to the master
&gt; branch.
&gt;
&gt; Great, pushed.
&gt;
&gt; &gt; Sorry about the reStructuredText inconvenience. I actually didn't even
&gt; think of it -- I just meant to clean up the comments a bit, but I'll
&gt; definitely be more careful in the future.
&gt;
&gt; No worries. Again, it would usually have been a welcome change. :)
&gt;
&gt; &gt; Once we confirm this with Damian, he will push the changes to master
&gt; &gt; in torprojects' repository.
&gt;
&gt; Don't worry about that. The way that open source git projects usually
&gt; work is that you make a 'pull request', which simply means saying 'I
&gt; have some changes that I would like to share, here they are' (which is
&gt; what you've been doing). If the changes look good then I'll rebase
&gt; them onto the master branch and push them myself.
&gt;
&gt; Usually only a tiny number of central developers actually have push
&gt; access to the master repository.
&gt;
&gt; &gt; Our code can be found at:
&gt; &gt;
&gt; &gt;
&gt; https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py
&gt;
&gt; Ok. Previously I was pulling from 'jacthinman', is 'meganchang' the
&gt; github repository where you plan to do most of your future work?
&gt;
&gt; I'd suggest periodically running the following, replacing 'origin'
&gt; with whatever you're calling the torproject master remote...
&gt; git fetch origin
&gt; git rebase origin/master
&gt;
&gt; That way your changes don't fall too far out of date with the current
&gt; HEAD (looks like you're currently 29 commits behind).
&gt;
&gt; &gt; +import test.unit.util.proc
&gt;
&gt; Please keep the order of the current imports (the unit/integ test
&gt; imports are batched together).
&gt;
&gt; &gt; +  test.unit.util.proc.TestProc,
&gt;
&gt; Lets move this test just above the "test.unit.util.system.TestSystem".
&gt; The tests are ordered by their dependencies so that the lowest-level
&gt; stuff runs first. The reason for that is that if, say, stem.util.enum
&gt; breaks then it'll probably break just about everything else so we want
&gt; to report those errors first (rather than leave the developer
&gt; wondering why something like stem.connection was also broken).
&gt;
&gt; &gt; +      prefix_list = sorted(list(line_prefixes))
&gt;
&gt; The extra list wrapper isn't necessary.
&gt;
&gt; &gt;&gt;&gt; sorted((1, 4, 2))
&gt; [1, 2, 4]
&gt;
&gt; &gt; Let us know what you think about our unit tests thus far! We also wanted
&gt; to let you know that we plan on finishing all proc unit tests by Tuesday
&gt; (June 19), and all proc integration tests by Friday (June 22).
&gt;
&gt; Great! What you have so far looks good, looking forward to seeing the
&gt; rest. Be warned that, as Ravi can attest, code reviews generally take
&gt; a few iterations. Here's an example...
&gt;
&gt; https://trac.torproject.org/5262
&gt;
&gt; Cheers! -Damian
&gt;

[Attachment #5 (text/html)]

Hi Damian,&lt;br&gt;&lt;br&gt;First, to clarify our github repository situation, both Megan and I \
will be maintaining remote repos in github per Professor Danner's request so that \
we each gain experience with version control systems.  As we have been working so \
far, I have been maintaining the mocking revisions in my mocking branch and Megan has \
been working on the proc testing code in her own proc branch.&lt;br&gt;

&lt;br&gt;Next, in continuing work on the unit tests for proc.py, we ran into another issue \
with the mocking code.  The details are explained in the commit message, but please \
let me know if further clarification is necessary. The code can be found at:&lt;br&gt;

&lt;br&gt;&lt;a href="https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py"&gt;https://github.com/jacthinman/Tor-Stem/blob/mocking/test/mocking.py&lt;/a&gt;&lt;br&gt;&lt;br&gt;-Erik \
&amp; Megan&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Jun 15, 2012 at 3:28 PM, \
Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="im"&gt;&gt; The changes look great! I see no issues \
with merging to the master branch.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Great, pushed.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Sorry about the reStructuredText inconvenience. I actually didn't even think \
of it -- I just meant to clean up the comments a bit, but I'll definitely be more \
careful in the future.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;No worries. Again, it would usually have been a welcome change. :)&lt;br&gt;
&lt;br&gt;
&gt; Once we confirm this with Damian, he will push the changes to master&lt;br&gt;
&gt; in torprojects' repository.&lt;br&gt;
&lt;br&gt;
Don't worry about that. The way that open source git projects usually&lt;br&gt;
work is that you make a 'pull request', which simply means saying 'I&lt;br&gt;
have some changes that I would like to share, here they are' (which is&lt;br&gt;
what you've been doing). If the changes look good then I'll rebase&lt;br&gt;
them onto the master branch and push them myself.&lt;br&gt;
&lt;br&gt;
Usually only a tiny number of central developers actually have push&lt;br&gt;
access to the master repository.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Our code can be found at:&lt;br&gt;
&gt;&lt;br&gt;
&gt; &lt;a href="https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py" \
target="_blank"&gt;https://github.com/meganchang/Stem/blob/proc-tests/test/unit/util/proc.py&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;/div&gt;Ok. Previously I was pulling from 'jacthinman', is 'meganchang' \
the&lt;br&gt; github repository where you plan to do most of your future work?&lt;br&gt;
&lt;br&gt;
I'd suggest periodically running the following, replacing 'origin'&lt;br&gt;
with whatever you're calling the torproject master remote...&lt;br&gt;
git fetch origin&lt;br&gt;
git rebase origin/master&lt;br&gt;
&lt;br&gt;
That way your changes don't fall too far out of date with the current&lt;br&gt;
HEAD (looks like you're currently 29 commits behind).&lt;br&gt;
&lt;br&gt;
&gt; +import test.unit.util.proc&lt;br&gt;
&lt;br&gt;
Please keep the order of the current imports (the unit/integ test&lt;br&gt;
imports are batched together).&lt;br&gt;
&lt;br&gt;
&gt; +  test.unit.util.proc.TestProc,&lt;br&gt;
&lt;br&gt;
Lets move this test just above the "test.unit.util.system.TestSystem".&lt;br&gt;
The tests are ordered by their dependencies so that the lowest-level&lt;br&gt;
stuff runs first. The reason for that is that if, say, stem.util.enum&lt;br&gt;
breaks then it'll probably break just about everything else so we want&lt;br&gt;
to report those errors first (rather than leave the developer&lt;br&gt;
wondering why something like stem.connection was also broken).&lt;br&gt;
&lt;br&gt;
&gt; +      prefix_list = sorted(list(line_prefixes))&lt;br&gt;
&lt;br&gt;
The extra list wrapper isn't necessary.&lt;br&gt;
&lt;br&gt;
&gt;&gt;&gt; sorted((1, 4, 2))&lt;br&gt;
[1, 2, 4]&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Let us know what you think about our unit tests thus far! We also wanted to let \
you know that we plan on finishing all proc unit tests by Tuesday (June 19), and all \
proc integration tests by Friday (June 22).&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Great! What you have so far looks good, looking forward to seeing the&lt;br&gt;
rest. Be warned that, as Ravi can attest, code reviews generally take&lt;br&gt;
a few iterations. Here's an example...&lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/5262" \
target="_blank"&gt;https://trac.torproject.org/5262&lt;/a&gt;&lt;br&gt; &lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120619152538</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-19 15:25:38-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

Hi Eric.

&gt; First, to clarify our github repository situation...

gotcha

&gt; Next, in continuing work on the unit tests for proc.py, we ran into another issue \
&gt; with the mocking code.

Nice catch, though for your example (os.readlink) won't this make the
tests platform dependent? Currently Beck (another volunteer working on
stem) is working on making the tests run on Windows and it would be
sad if we made his life harder. ;)

Minor gity side note, there is almost no use case where you should be
merging 'remotes/torproject/master' into your branch. Either rebase
onto 'remotes/torproject/master' or make a new branch on
'remotes/torproject/master' instead. That will make your dag (directed
acyclic graph - the parent/child relationships between commits) far
cleaner. Otherwise I need to cherry-pick rather than merge your work
since merging would pull extra commits and confuse the master's dag.
Let me know if you have any questions about this - admittedly without
a whiteboard git can be a little confusing for new users.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120619193200</emailId><senderName>Erik I Islo</senderName><senderEmail>eislo@wesleyan.edu</senderEmail><timestampReceived>2012-06-19 19:32:00-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

[Attachment #2 (multipart/alternative)]


The way the os module seems to reference posix, I don't believe we will run
into any platform dependencies.  Since os determines what environment it is
in then references either itself or an appropriate external module (such as
posix) in __dict__, it should always work.

With os.readlink, the issue was that inspect.getmodule(target) was
returning 'posix', so posix.__dict__ was updated when os.readlink was
mocked.  os.__dict__, however, was not updated, so calling os.readlink()
resulted in posix.readlink() rather than our mocked function.

If this doesn't seem correct, I would appreciate your feedback.

As for merging torproject/master into our branches, I'm afraid I don't know
how that happened.  Should I revert to before that commit and rebase, or
was this a one-time issue that we simply need to avoid in the future?

Best,
Erik &amp; Megan

On Tue, Jun 19, 2012 at 3:25 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; Hi Eric.
&gt;
&gt; &gt; First, to clarify our github repository situation...
&gt;
&gt; gotcha
&gt;
&gt; &gt; Next, in continuing work on the unit tests for proc.py, we ran into
&gt; another issue with the mocking code.
&gt;
&gt; Nice catch, though for your example (os.readlink) won't this make the
&gt; tests platform dependent? Currently Beck (another volunteer working on
&gt; stem) is working on making the tests run on Windows and it would be
&gt; sad if we made his life harder. ;)
&gt;
&gt; Minor gity side note, there is almost no use case where you should be
&gt; merging 'remotes/torproject/master' into your branch. Either rebase
&gt; onto 'remotes/torproject/master' or make a new branch on
&gt; 'remotes/torproject/master' instead. That will make your dag (directed
&gt; acyclic graph - the parent/child relationships between commits) far
&gt; cleaner. Otherwise I need to cherry-pick rather than merge your work
&gt; since merging would pull extra commits and confuse the master's dag.
&gt; Let me know if you have any questions about this - admittedly without
&gt; a whiteboard git can be a little confusing for new users.
&gt;
&gt; Cheers! -Damian
&gt;

[Attachment #5 (text/html)]

The way the os module seems to reference posix, I don't believe we will run into \
any platform dependencies.  Since os determines what environment it is in then \
references either itself or an appropriate external module (such as posix) in \
__dict__, it should always work.&lt;br&gt;

&lt;br&gt;With os.readlink, the issue was that inspect.getmodule(target) was returning \
'posix', so posix.__dict__ was updated when os.readlink was mocked.  \
os.__dict__, however, was not updated, so calling os.readlink() resulted in \
posix.readlink() rather than our mocked function.&lt;br&gt;

&lt;br&gt;If this doesn't seem correct, I would appreciate your feedback.&lt;br&gt;&lt;br&gt;As for \
merging torproject/master into our branches, I'm afraid I don't know how that \
happened.  Should I revert to before that commit and rebase, or was this a one-time \
issue that we simply need to avoid in the future?&lt;br&gt;

&lt;br&gt;Best,&lt;br&gt;Erik &amp; Megan&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Jun 19, 2012 at \
3:25 PM, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi Eric.&lt;br&gt; &lt;br&gt;
&gt; First, to clarify our github repository situation...&lt;br&gt;
&lt;br&gt;
gotcha&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Next, in continuing work on the unit tests for proc.py, we ran into another \
issue with the mocking code.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Nice catch, though for your example (os.readlink) won't this make the&lt;br&gt;
tests platform dependent? Currently Beck (another volunteer working on&lt;br&gt;
stem) is working on making the tests run on Windows and it would be&lt;br&gt;
sad if we made his life harder. ;)&lt;br&gt;
&lt;br&gt;
Minor gity side note, there is almost no use case where you should be&lt;br&gt;
merging 'remotes/torproject/master' into your branch. Either rebase&lt;br&gt;
onto 'remotes/torproject/master' or make a new branch on&lt;br&gt;
'remotes/torproject/master' instead. That will make your dag (directed&lt;br&gt;
acyclic graph - the parent/child relationships between commits) far&lt;br&gt;
cleaner. Otherwise I need to cherry-pick rather than merge your work&lt;br&gt;
since merging would pull extra commits and confuse the master's dag.&lt;br&gt;
Let me know if you have any questions about this - admittedly without&lt;br&gt;
a whiteboard git can be a little confusing for new users.&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120619003018</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-06-19 00:30:18-0400</timestampReceived><subject>Re: [tor-dev] Open Proposals as of June 2012</subject><body>

On 06/18/2012 11:26 PM, Nick Mathewson wrote:
&gt; This list of open Tor proposals is based on one I sent out in May of
&gt; last year.  Since I'd like to do this more regularly, I have added to
&gt; each description the date when I wrote it.  Most of the summaries from
&gt; older proposals are unchanged since last May;  the later ones in the
&gt; list for 6/2012 I wrote pretty quickly since I want to get out the
&gt; door tonight for an appointment, but I want to send this list out
&gt; without further delay.

Perhaps this would make for a nice weekly cronjob? :)

&gt; 
&gt; OPEN, DRAFT, AND ACCEPTED PROPOSALS:
&gt; 
&gt;    117 IPv6 exits
&gt; 
&gt;      IPv6 is still the future, but now it's the kind of future
&gt;      that's unevenly distributed.  It's time to do this one so that
&gt;      IPv6 traffic can be sent over Tor.
&gt; 
&gt;      It needs updating to work properly with microdescriptors; it
&gt;      also has some open questions about DNS. (6/2012)


I'm a little unclear on the issue of DNS with regard to v6. I feel like
we're having lots of DNS blocking issues. What specifically is the
issue? Is Linus hacking on this?


&gt; 
&gt;    131  Help users to verify they are using Tor
&gt; 
&gt;      Here's a proposal for making a torcheck-like website more reliable.
&gt;      If anybody wants to pick it up (especially somebody working on
&gt;      torcheck) and see whether it should be reopened or rejected, that
&gt;      would be a fine thing. (5/2011)
&gt; 

I've been thinking about this one a lot and I think I've come to the
conclusion that it isn't a good idea. I think as we had the .exit and we
have .onion, I think we might just want to have yet another special url.
Perhaps one that returns a totally safe bit of in band data - say, a
small home page that will tell you the status of your Tor client. This
was something Robert Hogan implemented for his Tor browser-like browser
project, I think.

It seems like a bad idea to have so many people building circuits and
then loading the same website when we can do the job locally. From a UX
perspective, I think it is cleaner and from a latency perspective, I
think it would be nicer overall. I hacked up some small api on check.tpo
for Torbutton long ago, so Torbutton could hit a url over SSL and
determine that Torbutton was routed over Tor. There are half a dozen
issues with this and well, I think we're still using it...

For Tor Browser, I think we should be smarter - a static home page with
a small bit of dynamic html that queries that same very api would
probably be a better UX experience. To build that very simple api into
the SOCKS proxy itself or into some kind of IPC with Tor's control port
would be better still.

&gt;    146  Add new flag to reflect long-term stability
&gt; 
&gt;      From time to time we get the idea of having clients ship with a
&gt;      reasonably recent consensus (or a list of directory mirrors),
&gt;      so instead of bootstrapping from one of the authorities, they
&gt;      can bootstrap from a regular directory cache.  The problem here
&gt;      is that by the time the client is run, most of the directory
&gt;      mirrors will be down or will have changed their IP.  This
&gt;      proposal tries to address that.
&gt; 
&gt;      It needs analysis based on behavior of actual routers on the
&gt;      network to see whether it could work, and what parameters might
&gt;      work.
&gt; 
&gt;      Nevertheless, we should really do something like this, so that
&gt;      we can ship a list of initial directory mirrors with Tor
&gt;      (possibly via the "fallback consensus" deisgn), so that new
&gt;      bootstrapping Tor clients don't all hammer the directory
&gt;      authorities. (6/2012)

I almost wonder if the guard flag is essentially the same set of
constraints? I think we should discuss this at the TorDev in Italy if
possible...

&gt; 
&gt; 
&gt;    195  TLS certificate normalization for Tor 0.2.4.x
&gt; 
&gt;      Here's the followup to proposal 179, containing all the parts
&gt;      of proposal 179 that didn't get built, and a couple of other
&gt;      tricks besides to try to make Tor's default protocol less
&gt;      detectable.  I'm pretty psychoed about the part where we let
&gt;      relays drop in any any self-signed or CA-issued certificate
&gt;      that they like. (6/2012)

psychoed? :-)

I think while not directly certificate related, the DHE and RSA key bit
size discussion is relevant here:
https://trac.torproject.org/projects/tor/ticket/6088

Thanks for sending this mail out! I wanted to reply to other parts but I
need to do a bit of homework first.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619024032</emailId><senderName>ahmed</senderName><senderEmail>ahmed@linuxism.com</senderEmail><timestampReceived>2012-06-19 02:40:32-0400</timestampReceived><subject>Re: [tor-dev] Open Proposals as of June 2012</subject><body>

On Mon, 2012-06-18 at 17:26 -0400, Nick Mathewson wrote:
&gt;    194  Mnemonic .onion URLs

Hello:

I made a post about that topic in February, and it seems no one was
interested. I can implement a dictionary compiler and address resolver.

Should I work on it?

This was my post -&gt;
https://lists.torproject.org/pipermail/tor-talk/2012-February/023376.html 


-- 
Ahmed &lt;Ahmed@Linuxism.com&gt;

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619140652</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-06-19 14:06:52-0400</timestampReceived><subject>Re: [tor-dev] Open Proposals as of June 2012</subject><body>

On Mon, Jun 18, 2012 at 10:40 PM, ahmed &lt;ahmed@linuxism.com&gt; wrote:
&gt; On Mon, 2012-06-18 at 17:26 -0400, Nick Mathewson wrote:
&gt;&gt; =A0 =A0194 =A0Mnemonic .onion URLs
&gt;
&gt; Hello:
&gt;
&gt; I made a post about that topic in February, and it seems no one was
&gt; interested. I can implement a dictionary compiler and address resolver.
&gt;
&gt; Should I work on it?

Hi, Ahmed!

It could be a good idea to write up a proposal here.  But before you
go too far on it, you should look at the other draft proposals in this
area, including 194, and some others that were brought up in response
when 194 was discussed on this mailing list.

There's the thread starting at
   http://archives.seul.org/or/dev/Feb-2012/msg00048.html

And the one at
   http://archives.seul.org/or/dev/Dec-2011/msg00021.html

There's the design at
   http://archives.seul.org/or/dev/Dec-2011/msg00035.html

And probably more too.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120614015252</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-06-14 01:52:52-0400</timestampReceived><subject>Re: [tor-dev] start_daemon and finish_daemon</subject><body>

On Wed, Jun 13, 2012 at 7:26 PM, Zack Weinberg &lt;zackw@panix.com&gt; wrote:
&gt; Why is the process of going into daemon mode (on Unix) split into two
&gt; functions, start_daemon and finish_daemon?

It's been so long since we added that code; I hope I remember.

If I've got it right, the idea is that you call start_daemon() to
begin daemonizing.  Then you do a bunch of stuff in the child process
that needs to happen in the child process, but which might fail.  If
it fails, you can just exit.  If it succeeds, you inform the parent
process of your success, and then exit.  That way:

  * The parent process can learn about and report some common kinds of
initialization failure, and
  * The parent process doesn't exit until the child is well and truly launched.

It's been that way since cacacfe2b1  (originally svn:969).
Unfortunately, the only commit message we have from back from when we
added the commit (8.5 years ago!) is "Integrate new daemon code,
adapted from submission by christian grothoff".

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120612110621</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-06-12 11:06:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 188: Bridge Guards and other anti-enumeration defenses</subject><body>

On Tue, Jun 12, 2012 at 12:55:24PM +0200, Fabio Pietrosanti (naif) wrote:
&gt; And it would be very useful if we would allow an easy way to setup
&gt; hundreds of "dumb briges", simple TCP forwarding proxy that goes in a
&gt; random order across all public relays.

No need to go in a random order across all public relays. Just point
all the addresses at a single bridge, and that should work fine.

(I say bridge, rather than relay, because bug 1776 remains open. If you
configure a public relay as a bridge, you will eventually crash. But
that's easily resolved by asking, say, Noisebridge or Torservers.net to
tell us about one of the big bridges they run.)

Another reason to avoid the 'striping across all relays' design, at least
at first, is that you'd better add code to pull down the consensus, check
the signatures on it, know what keys to expect, etc. If you're going to go
that route, check out https://trac.torproject.org/projects/tor/ticket/3466

&gt; Easier to setup, available in big quantities.
&gt; 
&gt; I would be pleased to use my *dsl/cable home-router with fixed-IP
&gt; address to do a port-mapping to a known and stable tor-relay.
&gt; 
&gt; Being able to "setup a bridge" by simply:
&gt; - opening a port-forward on my router
&gt; - submitting it to a web-interface
&gt; 
&gt; would be a very cool way to open-up opportunities of hundreds or
&gt; thousands of different IP:PORT pair (basically a bridge) without having
&gt; to run dedicated software on an always on-server (replaced by a simple
&gt; home-router, that's "the always-on server").

Sounds great. Can somebody boil down the required iptables rules to
something really simple and foolproof?

And then there's the web interface component of bridgedb. Doesn't sound
*too* hard though, eh? :)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120606092056</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-06 09:20:56-0400</timestampReceived><subject>Re: [tor-dev] Stem Sphinx Documentation</subject><body>

On 6/6/12 6:48 AM, Damian Johnson wrote:
&gt; Hi Ravi, Beck, and everyone else hacking on stem. I just finished and
&gt; merged a rewrite of our documentation into reStructuredText. The
&gt; results are... very pretty.

Looks really cool!

&gt; Karsten
&gt; http://www.atagar.com/transfer/tmp/stem_html_12_06_05/stem.descriptor.html#module-stem.descriptor.reader
&gt; 

I looked through the docs and found these minor issues:

- Does ExtraInfoDescriptor support bridge descriptors yet?  Those don't
contain a signature, which means that the signature variable shouldn't
be marked as required.  Also, there should be a digest() method for
RelayExtraInfoDescriptor and a digest variable for
BridgeExtraInfoDescriptor; the relay descriptor digest is calculated,
whereas the bridge descriptor digest is parsed from the "router-digest"
line.

- Should the conn_bi_direct_* variables be grouped under "Bi-directional
connection usage:"?

- ServerDescriptor also has a digest() method for both relay and bridge
descriptors.  The same reasoning about a digest() method for relays and
a digest variable for bridges applies here, too.  In the documentation
of digest(), better talk about "network status entry" instead of "server
descriptor entry".

- Why does digest() return the base64-encoded digest, not the
hex-formatted one?  Network statuses are the only documents in Tor using
base64 (or rather, a variant of it without trailing ='s), so it's easier
to convert those to hex than to convert everything else to base64.  Now,
if you switch to hex, you'll only have to decide between lower-case and
upper-case.  I think Tor and metrics-lib use upper-case hex in most places.

- address_alt is not bridge-specific, but relays are going to list
additional OR addresses in their descriptors in the near future.

And here are a few typos that I found while reading:

- "fastest querter" -&gt; "fastest quarter"

- "circuits in a deciles" -&gt; "circuits in a decile"

- "doens't conform" -&gt; "doesn't conform"

- "averate rate" -&gt; "average rate"

- "appeard" -&gt; "appeared"

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120606173221</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-06 17:32:21-0400</timestampReceived><subject>Re: [tor-dev] Stem Sphinx Documentation</subject><body>

Thanks, Karsten.

&gt; - Does ExtraInfoDescriptor support bridge descriptors yet?  Those don't
&gt; contain a signature, which means that the signature variable shouldn't
&gt; be marked as required.  Also, there should be a digest() method for
&gt; RelayExtraInfoDescriptor and a digest variable for
&gt; BridgeExtraInfoDescriptor; the relay descriptor digest is calculated,
&gt; whereas the bridge descriptor digest is parsed from the "router-digest"
&gt; line.

&gt; - ServerDescriptor also has a digest() method for both relay and bridge
&gt; descriptors.  The same reasoning about a digest() method for relays and
&gt; a digest variable for bridges applies here, too.  In the documentation
&gt; of digest(), better talk about "network status entry" instead of "server
&gt; descriptor entry".

Ack! Good points. Time permitting I'll fix these over the weekend.

&gt; - Why does digest() return the base64-encoded digest, not the
&gt; hex-formatted one?  Network statuses are the only documents in Tor using
&gt; base64 (or rather, a variant of it without trailing ='s), so it's easier
&gt; to convert those to hex than to convert everything else to base64.  Now,
&gt; if you switch to hex, you'll only have to decide between lower-case and
&gt; upper-case.  I think Tor and metrics-lib use upper-case hex in most places.

I went with base64 because I thought that this was only useful for
comparing with the network status. What uses the hex encoded digest?

&gt; - Should the conn_bi_direct_* variables be grouped under "Bi-directional
&gt; connection usage:"?
&gt;
&gt; And here are a few typos that I found while reading:
&gt;
&gt; - "fastest querter" -&gt; "fastest quarter"
&gt;
&gt; - "circuits in a deciles" -&gt; "circuits in a decile"
&gt;
&gt; - "doens't conform" -&gt; "doesn't conform"
&gt;
&gt; - "averate rate" -&gt; "average rate"
&gt;
&gt; - "appeard" -&gt; "appeared"

great, changed

&gt; - address_alt is not bridge-specific, but relays are going to list
&gt; additional OR addresses in their descriptors in the near future.

Yup, but they don't yet nor is it in the tor spec (last that I
checked). I was planning to move it up to the ServerDescriptor class
when it is.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120607073722</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-07 07:37:22-0400</timestampReceived><subject>Re: [tor-dev] Stem Sphinx Documentation</subject><body>

On 6/6/12 7:32 PM, Damian Johnson wrote:
&gt;&gt; - Why does digest() return the base64-encoded digest, not the
&gt;&gt; hex-formatted one?  Network statuses are the only documents in Tor using
&gt;&gt; base64 (or rather, a variant of it without trailing ='s), so it's easier
&gt;&gt; to convert those to hex than to convert everything else to base64.  Now,
&gt;&gt; if you switch to hex, you'll only have to decide between lower-case and
&gt;&gt; upper-case.  I think Tor and metrics-lib use upper-case hex in most places.
&gt; 
&gt; I went with base64 because I thought that this was only useful for
&gt; comparing with the network status. What uses the hex encoded digest?

The hex-encoded server descriptor digest is used as file name in metrics
tarballs.

The (decoded) descriptor digest is used to verify the descriptor signature.

Other reasons for hex-encoding the digest() result is that the digest()
in extra-info descriptors should return the hex-encoded digest, too, or
you wouldn't be able to compare it to the extra-info-digest line in
server descriptors.  Having both methods return a different encoding
would be confusing.

Oh, and router-digest lines in sanitized bridge descriptors also contain
the hex-encoded digest.  You wouldn't want to convert that to base64
before writing it to the digest variable, nor would you want digest()
and digest to return differently encoded digests.

&gt;&gt; - address_alt is not bridge-specific, but relays are going to list
&gt;&gt; additional OR addresses in their descriptors in the near future.
&gt; 
&gt; Yup, but they don't yet nor is it in the tor spec (last that I
&gt; checked). I was planning to move it up to the ServerDescriptor class
&gt; when it is.

Makes sense.

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120610213223</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-10 21:32:23-0400</timestampReceived><subject>Re: [tor-dev] Stem Sphinx Documentation</subject><body>

Pushed the suggested changes...
https://gitweb.torproject.org/stem.git/commitdiff/7947d69
https://gitweb.torproject.org/stem.git/commitdiff/737018b
https://gitweb.torproject.org/stem.git/commitdiff/860cd87
https://gitweb.torproject.org/stem.git/commitdiff/9654beb

Thanks! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120611163703</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-06-11 16:37:03-0400</timestampReceived><subject>[tor-dev] [GSoC] Update - Safe cookie support/General controller class for Stem</subject><body>

Hello

I have finished working on implementing the safe cookie authentication
support for Stem. Damian fixed a few things[1] and merged it into
master.

I'm now working on implementing the general controller class. GETINFO
parsing was implemented by Damian as an example. I've implemented
GETCONF parsing[2] for the controller. It's almost done. I'm also
going to implement the other methods to handle the remaining control
commands allocated to week 2 and 3 in my proposal[3].

Note: I'm behind my schedule by a little more than a week. I had an
exam during the 2nd week, because of which I couldn't do much/any work
that week. Though, I do have enough buffer time to make up for this,
and, I'm trying to catch up with my schedule.

1. https://gitweb.torproject.org/stem.git/commit/560923cb7b572d02046c6ca2bd5eb4502fa591b3
2. https://trac.torproject.org/projects/tor/ticket/6114
3. https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120612103551</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-06-12 10:35:51-0400</timestampReceived><subject>Re: [tor-dev] Proposal 189: AUTHORIZE and AUTHORIZED cells</subject><body>

On Sun, Nov 06, 2011 at 01:45:43AM +0100, George Kadianakis wrote:
&gt; 3.1. AUTHORIZE cell
&gt; 
&gt;    The AUTHORIZE cell is a variable-sized cell.
&gt; 
&gt;    The generic AUTHORIZE cell format is:
&gt; 
&gt;          AuthMethod                       [1 octet]
&gt;          MethodFields                     [...]
&gt;          PadLen                           [2 octets]
&gt;          Padding                          ['PadLen' octets]

Why include PadLen and Padding? A variable-sized cell already says how
big it is. So the client can pick a size for the variable-sized cell
(the client has to anyway), and then any unused space is unused.

&gt;    The AUTHORIZED cell format is:
&gt; 
&gt;          'AuthMethod'                       [1 octet]
&gt;          'PadLen'                           [2 octets]
&gt;          'Padding'                          ['PadLen' octets]

Same here.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120612121719</emailId><senderName>Rob van der Hoeven</senderName><senderEmail>robvanderhoeven@ziggo.nl</senderEmail><timestampReceived>2012-06-12 12:17:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 188: Bridge Guards and other anti-enumeration defenses</subject><body>

&gt; &gt; I would be pleased to use my *dsl/cable home-router with fixed-IP
&gt; &gt; address to do a port-mapping to a known and stable tor-relay.
&gt; &gt; 
&gt; &gt; Being able to "setup a bridge" by simply:
&gt; &gt; - opening a port-forward on my router
&gt; &gt; - submitting it to a web-interface
&gt; &gt; 
&gt; &gt; would be a very cool way to open-up opportunities of hundreds or
&gt; &gt; thousands of different IP:PORT pair (basically a bridge) without having
&gt; &gt; to run dedicated software on an always on-server (replaced by a simple
&gt; &gt; home-router, that's "the always-on server").
&gt; 
&gt; Sounds great. Can somebody boil down the required iptables rules to
&gt; something really simple and foolproof?

Did this as an experiment, wrote an article about it:

http://freedomboxblog.nl/routers-as-tor-bridges/

Rob van der Hoeven
http://freedomboxblog.nl



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120613184220</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-06-13 18:42:20-0400</timestampReceived><subject>Re: [tor-dev] Dreamplug trouble</subject><body>

On 06/13/2012 08:57 AM, Linus Nordberg wrote:
&gt; Hi,
&gt; 
&gt; An hour ago I had a beautiful dreamplug laying next to me on my table,
&gt; booting freedombox, making me happy.
&gt; 
&gt; Now I have a beautiful dreamplug nicely mounted in a rack in a hall next
&gt; to me, not booting at all, making me sad.
&gt; 
&gt; --8&lt;---------------cut here---------------start-------------&gt;8---
&gt; U-Boot 2011.06-02334-g8f495d9-dirty (May 31 2011 - 02:06:26)
&gt; Marvell-DreamPlug
&gt; 
&gt; SoC:   Kirkwood 88F6281_A0
&gt; CPU running @ 1200Mhz L2 running @ 400Mhz
&gt; SysClock = 400Mhz , TClock = 200Mhz 
&gt; DRAM:  512 MiB
&gt; SF: Detected MX25L1606 with page size 256, total 1 MiB
&gt; In:    serial
&gt; Out:   serial
&gt; Err:   serial
&gt; Net:   egiga0, egiga1
&gt; 88E1116 Initialized on egiga0
&gt; 88E1116 Initialized on egiga1
&gt; Hit any key to stop autoboot:  0 
&gt; *** ERROR: `ipaddr' not set
&gt; ping failed; host 192.168.2.1 is not alive
&gt; No link on egiga1
&gt; *** ERROR: `ipaddr' not set
&gt; ping failed; host 192.168.2.1 is not alive
&gt; (Re)start USB...
&gt; USB:   Register 10011 NbrPorts 1
&gt; USB EHCI 1.00
&gt; scanning bus for devices... 5 USB Device(s) found
&gt;        scanning bus for storage devices... Device NOT ready
&gt;    Request Sense returned 02 3A 00
&gt; 3 Storage Device(s) found
&gt; reading uImage
&gt; 
&gt; 0 bytes read
&gt; Wrong Image Format for bootm command
&gt; ERROR: can't get kernel image!
&gt; Marvell&gt;&gt;
&gt; --8&lt;---------------cut here---------------end---------------&gt;8---
&gt; 
&gt; It finds 5 USB devices, one of which is a USB stick with the freedombox
&gt; filesystem on it.
&gt; 
&gt; Did I break it when I moved it?  Ideas?

The DreamPlug is a piece of crap - welcome to hell! :)

I think that you likely want to ensure that you copy the kernel over to
the internal /boot or things won't work very well. The USB bus seems to
not work very well with the version of uboot that ships on the device.
It works mostly alright after the Linux kernel is loaded.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120614020350</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-06-14 02:03:50-0400</timestampReceived><subject>Re: [tor-dev] start_daemon and finish_daemon</subject><body>

On Wed, Jun 13, 2012 at 9:52 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;
&gt;  * The parent process can learn about and report some common kinds of
&gt; initialization failure, and
&gt;  * The parent process doesn't exit until the child is well and truly launched.

Thanks, that makes a lot of sense.

I ask because I was using util.c as a reference for adding daemon mode
support to Stegotorus; I might adopt a similar scheme (there are
similar initialization-sequencing headaches) but probably not till I
get around to the badly-needed Real Command Line Parser.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120615143416</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-15 14:34:16-0400</timestampReceived><subject>Re: [tor-dev] STEM: Tor2csv / Tor2xml / Tor2json ?</subject><body>

We discussed this on irc. I like the idea of providing csv
import/export functionality and Fabio is filing a ticket for it. This
would be a nice project for one of the new people hacking on stem,
though I'm happy to do it if someone has a pressing need for it.

I'm less interested in xml though if someone wants to do it then
patches are welcome. Json is already covered by Onionoo (we plan to
make a python Onionoo implementation later, but it may be a while).

Gotcha to be aware of is that Stem currently just parses relay/bridge
server and extra-info descriptors. Consensus entries will be easy and
tops my todo list for descriptor work, though I've been busy helping
volunteers of late.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120616165851</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-06-16 16:58:51-0400</timestampReceived><subject>[tor-dev] [GSoC] pyptlib Status Update</subject><body>

[Attachment #2 (multipart/alternative)]


Here is the proposed schedule for the project:

*Week 1 - pyptlib.config API draft
Week 2 - pyptlib.config implementation
Week 3 - pyptlib.framework API draft
Week 4 - pyptlib.framework implementation
Week 5 - pyptlib.transports example implementations (dummy, rot13) and
command line options
Week 6 - testing and debugging of whole system
Week 7 - Refactoring, cleaning, and documentation update
Midterm evaluations
Week 8 - Dust
Week 9 - obfs2
Week 10 - flashproxy
Week 11 - Transport refinements and enhancements
Week 12 - Testing, debugging, refactoring, cleaning, and documentation
update
Pencils down*

We are currently finishing up Week 4 and I have a rough draft of the
framework in place. It will probably need a lot of refinement as I start
implementing actual transports. I've also implement a pluggable transport
manager in python which can stand in for tor when doing testing. So far
everything seems to be working fine. Next week I look forward to getting
some actual traffic obfuscated using the example plugins.
More posts about pyptlib are available on my project blog:
http://stepthreeprivacy.org/post/25233028188/status-update-schedule-and-framework

[Attachment #5 (text/html)]

&lt;p style="font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;line-height:18px"&gt;Here \
is the proposed schedule for the project:&lt;/p&gt;&lt;p style="font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;line-height:18px"&gt; &lt;b \
style&gt;&lt;span style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
1 - pyptlib.config API draft&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
2 - pyptlib.config implementation&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
3 - pyptlib.framework API draft&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
4 - pyptlib.framework implementation&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
5 - pyptlib.transports example implementations (dummy, rot13) and command line \
options&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
6 - testing and debugging of whole system&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
7 - Refactoring, cleaning, and documentation update&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Midterm \
evaluations&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
8 - Dust&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
9 - obfs2&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
10 - flashproxy&lt;/span&gt;&lt;br&gt; &lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
11 - Transport refinements and enhancements&lt;/span&gt;&lt;br&gt;&lt;span \
style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Week \
12 - Testing, debugging, refactoring, cleaning, and documentation update&lt;/span&gt;&lt;br&gt; \
&lt;span style="vertical-align:baseline;font-size:15px;white-space:pre-wrap;background-color:transparent;font-family:Arial"&gt;Pencils \
down&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style="font-family:'Lucida \
Grande',Verdana,Arial,Helvetica,sans-serif;font-size:13px;line-height:18px"&gt; \
&lt;font color="#222222" face="Arial"&gt;&lt;span \
style="font-size:15px;line-height:normal;white-space:pre-wrap"&gt;We are currently \
finishing up Week 4 and I have a rough draft of the framework in place. It will \
probably need a lot of refinement as I start implementing actual transports. I've \
also implement a pluggable transport manager in python which can stand in for tor \
when doing testing. So far everything seems to be working fine. Next week I look \
forward to getting some actual traffic obfuscated using the example \
plugins.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt; More posts about pyptlib are available on my project blog:
&lt;a href="http://stepthreeprivacy.org/post/25233028188/status-update-schedule-and-frame \
work"&gt;http://stepthreeprivacy.org/post/25233028188/status-update-schedule-and-framework&lt;/a&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120617125500</emailId><senderName>vmon</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-06-17 12:55:00-0400</timestampReceived><subject>[tor-dev] [GSoC] Status update - Stegotorus</subject><body>

Hello Devers,

This is my first status update. I wanted to send one after my intro but
first, it wasn't clear for me where I should  setup my git and then I had few (ok
two but it's still too much) hard drive failures. So here is the long
combined version of first two update (Sorry :-S )

1 . So when first I got Stegotorus and I managed to compile it with few
modification required by gcc 4.7. [1]. It did not function practically on my
computer. Some data was being exchanged between client and server but I
was not able to browse any page.

I spent few days to figure out the problem. It wasn't easy for various
obvious reasons. I forced limiting the number of connections, and that
made it semi-functional able to browse simple pages. 

Eventually, it turned out, that it was known bug and I got the patch and
it started working without problem. 

2. My second task was to find a http proxy code, that I can use to
implement different http modifications that Stegotorus protocol should be
able to handle. I looked into the code of few proxies including Polipo,
shim, privoxy, ziproxy. Polipo and shim had a simpler code but each had
its own problem. Meanwhile, I tested Stegotorus upon Polipo and confirmed
that its traffic doesn't survive Polipo's proxying.

I decided to start with much simpler proxy. First started to implement
one using twisted, but I found a sample proxy as a part of libevent
code which finally, I decided to use for my tests.

Next step, I integrated the proxy code to Stegotorus code. I also added
a simple proxy test to the set of unitary tests of Stegotorus. I confirm
it failed.

3. I spent some time reading following papers on the effects of weekly configured
(security-wise) / evil http proxies on http(s) traffic, to get some insight
in http proxy role:

   * Talking o yourself for fun and profit.
   * Pretty-Bad-Proxy: An overlooked adversary in browsers' HTTPS
     deployments.
   * Divide and Conquer: HTTP response splitting, web cache poisoning
     attacks, and related topics.

It was while we were waiting for Stegotorus code to become public.

4. I spend last week, to debug the problem with Stegotorus and libevent
sample proxy. After, sharing my finding with Zack, it turned out that the proxy
cannot handle the situation when one side, shuts down the buffer for
writing but still reads from it. So, I modified the proxy code [3] and now
Stegotorus passes the proxy test.

During coming two weeks, I'm going through the steg protocol code and
tries to improve the code, following Zack's advice. Also, I'll try to
implement more sophisticated proxy test, like one that involves header
manipulation.

Sorry for the long update. It was like a 6 week report. Next one will be
much shorter.

Stay tuned and enjoy the June!
vmon

1. https://github.com/vmon/stegotorus/commit/2f3932c433f743fd8bee54fffb75e565a8d2a9f7
2. https://github.com/vmon/stegotorus/commit/9267db9d5d6d2c3ea959d30e1b84340123919892
3. https://github.com/vmon/stegotorus/commit/f86479782b27385d92679acaae8802ade5284a1c
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120617201314</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-06-17 20:13:14-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem controller class</subject><body>

Hello

I have been working on the general controller class. I'm getting ever closer
to having the getconf parsing code[1] merged into master. While
implementing that, we came across a bug. Currently Tor doesn't quote it's
responses to a getconf request[2].

I am also working on the other control command parsing implementations
specified in my proposal[3]. Currently working on the SETCONF/RESETCONF
methods. There isn't much else to report at the moment.

Note: I'm still behind schedule. But, with a little more than enough buffer
time to make up for it

1. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/getconf-parsing
2. https://trac.torproject.org/projects/tor/ticket/6172
3. https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html


-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619141215</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-06-19 14:12:15-0400</timestampReceived><subject>Re: [tor-dev] Open Proposals as of June 2012</subject><body>

On Mon, Jun 18, 2012 at 8:30 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrot=
e:
&gt; On 06/18/2012 11:26 PM, Nick Mathewson wrote:
&gt;&gt; This list of open Tor proposals is based on one I sent out in May of
&gt;&gt; last year. =A0Since I'd like to do this more regularly, I have added to
&gt;&gt; each description the date when I wrote it. =A0Most of the summaries from
&gt;&gt; older proposals are unchanged since last May; =A0the later ones in the
&gt;&gt; list for 6/2012 I wrote pretty quickly since I want to get out the
&gt;&gt; door tonight for an appointment, but I want to send this list out
&gt;&gt; without further delay.
&gt;
&gt; Perhaps this would make for a nice weekly cronjob? :)

Say rather, a regular task for me to do around the middle of the
month.  I don't expect movement to be so fast that much changes each
week

&gt;&gt; OPEN, DRAFT, AND ACCEPTED PROPOSALS:
&gt;&gt;
&gt;&gt; =A0 =A0117 IPv6 exits
&gt;&gt;
&gt;&gt; =A0 =A0 =A0IPv6 is still the future, but now it's the kind of future
&gt;&gt; =A0 =A0 =A0that's unevenly distributed. =A0It's time to do this one so t=
hat
&gt;&gt; =A0 =A0 =A0IPv6 traffic can be sent over Tor.
&gt;&gt;
&gt;&gt; =A0 =A0 =A0It needs updating to work properly with microdescriptors; it
&gt;&gt; =A0 =A0 =A0also has some open questions about DNS. (6/2012)
&gt;
&gt;
&gt; I'm a little unclear on the issue of DNS with regard to v6. I feel like
&gt; we're having lots of DNS blocking issues. What specifically is the
&gt; issue? Is Linus hacking on this?

Mostly concerning which address to connect to when a user says "BEGIN
www.example.com", and which to report to the user, under what
circumstances.  The proposal, though kind of old and funky, *does*
explain this.

[....]
&gt; psychoed? :-)

Whee spellcheck.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619174438</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-06-19 17:44:38-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] Tails Server</subject><body>

Hi,

jvoisin wrote (19 Jun 2012 01:53:43 GMT) :
&gt; I am sorry but I won't be able to pursue/achieve my GSoC[1] for
&gt; personal reasons that I prefer not disclose on a public
&gt; mailing list.

Sorry about this.
I hope things will be better for you soon.
If we can help, please feel free to ask.

I'd rather not pressure you now, but if you want to come back and work
on Tails server with us at any later time, you are *much* welcome!

Take care,
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120619195956</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-19 19:59:56-0400</timestampReceived><subject>Re: [tor-dev] Stem Testing Mocking Issue</subject><body>

&gt; The way the os module seems to reference posix, I don't believe we will run into \
&gt; any platform dependencies...

Ahhh, gotcha. My understanding of the usage was backwards (I thought
that you planned to provide posix as the new argument). In that case
looks good to merge, will do tomorrow morning.

&gt; As for merging torproject/master into our branches, I'm afraid I don't know how \
&gt; that happened.  Should I revert to before that commit and rebase, or was this a \
&gt; one-time issue that we simply need to avoid in the future?

Not necessary, I can just cherry-pick it. Just mentioned it for the future.

What most likely happened was that you used 'git pull' rather than
'git fetch' (pull is the same as doing a fetch followed by a merge).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120620205335</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-20 20:53:35-0400</timestampReceived><subject>[tor-dev] The master branch is now 0.2.4.0-alpha-dev</subject><body>

Hi, all.

I have forked off a maint-0.2.3 and a release-0.2.3 branch in the
usual fashion, and incremented the version in the master branch to
"0.2.4.0-alpha-dev".

All branches targeted for inclusion in Tor 0.2.3.x should now be based
on "maint-0.2.3"; all branches targeted for inclusion in 0.2.4 or
later can still be based on master.

For a reminder of the difference of maint and release, see doc/HACKING
in the Tor repository.

I do not expect to actually start merging anything into 0.2.4.x this
week, but you never know.

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120621052801</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2012-06-21 05:28:01-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

meejah &lt;meejah@meejah.ca&gt; writes:

&gt; That used to be an optional dependency, so I will put that code back
&gt; in (actually, probably just take out the dependency for psutils and
&gt; report PIDs instead). It's really just "nice to have" anyway and
&gt; users who want that could of course easily do it themselves.

I've just pushed version 0.5 which removes psutil dependencies.

Thanks,

- -- 
mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJP4rGjAAoJEMJgKAMSgGmnWNUH/iyuxOC8jElse8Bb/74id6mM
kRvg6QB0BhZEv4XBsXoQJAZ292CvvUqNdlnyUDibeksFv4DGfserHOKV/U41Y28b
zEndr9WE8fgmRPHWOBJpB5GPSBqn/GcE8Ohmc+PskpvK6UpS8vzF+OwpH8mU31Vb
E1kEW+9NL44Jn7mXB9Z2A7nQJyhcy+LKYTUr0xg1dEoqLx0m72nuFgLbkTjvI1yU
C+uhP3fp3Gnm1C2jqq9DL2bJLvOahNNou9n1T8SByz1jFClG8ThyJEt0yZyGdRHa
kcN2QPRgWk4fUcZOQ4nRR9WEmyVDHc0mGpGX6FX6uT3Wj4FtX8KPbJ5vWgvbVKw=
=BMR2
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120621075501</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-06-21 07:55:01-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] APAF Report (Android?)</subject><body>

On 6/21/12 7:28 AM, meejah wrote:
&gt; meejah &lt;meejah@meejah.ca&gt; writes:
&gt; 
&gt;&gt; That used to be an optional dependency, so I will put that code back
&gt;&gt; in (actually, probably just take out the dependency for psutils and
&gt;&gt; report PIDs instead). It's really just "nice to have" anyway and
&gt;&gt; users who want that could of course easily do it themselves.
&gt; 
&gt; I've just pushed version 0.5 which removes psutil dependencies.

Which maybe the relationship between APAF and Guardian Project's
ORLib/OrBot?

I mean, we should not "reinvent the wheel", however APAF is going to
provide Python developers an easy way to build desktop/server applications.

This is not something for "Android application" in the common
understanding/way (java/c), focusing on Python apps.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120621095106</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-06-21 09:51:06-0400</timestampReceived><subject>[tor-dev] [GSoC] Vidalia Status Report - Week 4</subject><body>

[Attachment #2 (multipart/alternative)]


I'm currently working on integrating the UI interaction into a Vidalia
plugin. I will be starting work on the HiddenService configuration. I have
also completed the Torrc Prototype and it has been merged into alpha.

I'm also a little behind schedule.

1. http://feroze.in/gsoc12.html

[Attachment #5 (text/html)]

I'm currently working on integrating the UI interaction into a Vidalia plugin. I \
will be starting work on the HiddenService configuration. I have also completed the \
Torrc Prototype and it has been merged into alpha.&lt;br&gt; &lt;br&gt;I'm also a little \
behind schedule.&lt;br&gt;&lt;br&gt;1. &lt;a \
href="http://feroze.in/gsoc12.html"&gt;http://feroze.in/gsoc12.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120621222833</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-06-21 22:28:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 202: Two improved relay encryption protocols for Tor cells</subject><body>

On 6/19/12, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 202-improved-relay-crypto.txt


&gt; 1.4. A note on algorithms
&gt;
&gt;    This document is deliberately agnostic concerning the choice of
&gt;    cryptographic primitives -- not because I have no opinions about
&gt;    good ciphers, MACs, and modes of operation -- but because
&gt;    experience has taught me that mentioning any particular
&gt;    cryptographic primitive will prevent discussion of anything else.

Not particularly agnostic, because you're specifying a different set
of primitives than the protocol actually requires.  See below.

&gt;    Please DO NOT suggest algorithms to use in implementing these
&gt;    protocols yet.  It will distract!  There will be time later!

OK, fine.  I won't prove that the cryptographic primitives which your
protocols really require can be implemented in terms of existing
low-level primitives and constructions.

&gt;    If somebody _else_ suggests algorithms to use, for goodness' sake
&gt;    DON'T ARGUE WITH THEM!  There will be time later!
&gt;
&gt;
&gt; 2. Design 1: Large-block encryption
&gt;
&gt;    In this approach, we use a tweakable large-block cipher for
&gt;    encryption and decryption, and a tweak-chaining function TC.
&gt;
&gt; 2.1. Chained large-block what now?
&gt;
&gt;    We assume the existence of a primitive that provides the desired
&gt;    properties of a tweakable[Tweak] block cipher, taking blocks of any
&gt;    desired size.  (In our case, the block size is 509 bytes[*].)
&gt;
&gt;    It also takes a Key, and a per-block "tweak" parameter that plays
&gt;    the same role that an IV plays in CBC, or that the counter plays
&gt;    in counter mode.
&gt;
&gt;    The Tweak-chaining function TC takes as input a previous tweak, a
&gt;    tweak chaining key, and a cell; it outputs a new tweak.  Its
&gt;    purpose is to make future cells undecryptable unless you have
&gt;    received all previous cells.  It could probably be something like
&gt;    a MAC of the old tweak and the cell using the tweak chaining key
&gt;    as the MAC key.
&gt;
&gt;    (If the initial tweak is secret, I am not sure that TC needs to
&gt;    be keyed.)
&gt;
&gt;    [*] Some large-block cipher constructions use blocks whose size is
&gt;        the multiple of some underlying cipher's block size.  If we wind
&gt;        up having to use one of those, we can use 496-byte blocks instead
&gt;        at the cost of 2.5% wasted space.

You're talking about a particular cryptographic primitive here.  (Some
underlying ciphers (e.g. Skipjack) operate on 8-byte blocks, so you
would only reduce the large-block block cipher to 504-byte blocks at
the cost of about 1% wasted space.)

Since you've crossed the ‘mentioning specific primitives' line by
suggesting a kludge to support AES-biIGE, I might as well point out
that large-block block cipher constructions can generally be modified
to extract entropy from the message and key during
encryption/decryption into an extra output (which may need to be kept
secret).  This extra output can be hashed with a longer-term ‘chaining
key' and/or the previous large-block block cipher key to produce a new
large-block block cipher key (or to produce a new tweak for the
large-block block cipher, if you insist on using underlying primitives
(mumble *AES* mumble mumble) which are too inefficient to use without
per-key precomputation).


&gt; 3. Design 2: short-MAC-and-pad
&gt;
&gt;    In this design, we behave more similarly to a mix-net design
&gt;    (such as Mixmaster or Mixminion's headers).  Each node checks a
&gt;    MAC, and then re-pads the cell to its chosen length before
&gt;    decoding the cell.
&gt;
&gt;    This design uses as a primitive a MAC and a stream cipher.  It
&gt;    might also be possible to use an authenticating cipher mode,
&gt;    if we can find one that works like a stream cipher and allows us
&gt;    to efficiently output authenticators for the stream so far.
&gt;
&gt;    NOTE TO AE/AEAD FANS: The encrypt-and-MAC model here could be
&gt;    replaced with an authenticated encryption mode without too much
&gt;    loss of generality.

Here you are assuming that MAC(a | b) can be efficiently computed from
PreMAC(a) and b for some function PreMAC, and that either the MAC does
not require a per-message nonce or PreMAC is independent of the nonce.
 (In particular, you are assuming HMAC or a Poly1305-AES-like MAC, and
forbidding some faster and/or safer polynomial-evaluation MACs.)

Many MACs (possibly not polynomial-evaluation MACs, though) can be
used to authenticate the stream of cells: let p be the full output of
the MAC for the preceding cell, and compute MAC(cell_index, p |
cell_data) as the MAC for the current cell (then stick a possibly
truncated copy of that on the cell for transmission).  (And now,
instead of specifying a particular authenticated encryption primitive
as Nick did, I'm specifying a particular AEAD primitive with a(n
extra) ‘chaining' output.  AE and AEAD are primitives themselves, not
things that must be kludged up as cipher modes for a (small-block)
block cipher (unless you're NSA and you're trying to force-feed
everyone AES).)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120625155451</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-06-25 15:54:51-0400</timestampReceived><subject>[tor-dev] [GSoC] Stem improvements</subject><body>

Hello

I have been working on Stem's general controller class. I have
completed implementing the methods that handle the GETCONF, SETCONF
and the RESETCONF (for the most part, I haven't put some of the code
up for review yet). I'm currently working on implementing the
SAVECONF, LOADCONF, SIGNAL methods.

I also met Sathyanarayanan at Bangalore this weekend and we spent some
time working on Stem. He worked on implementing the Controller's QUIT
functionality (among other things).


-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120627043503</emailId><senderName>Steven Retz</senderName><senderEmail>sjr3t2@retznest.com</senderEmail><timestampReceived>2012-06-27 04:35:03-0400</timestampReceived><subject>[tor-dev] Trying to connect to a OR</subject><body>

[Attachment #2 (multipart/alternative)]


Everyone,

 

I have been toying with doing something with tor for a long time.  I decided
to start doing something with it.  I wrote this quick POC in C# to connect
to a tor node I got from the cache file.  I tried to follow the specs in
https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=tor-spec.tx
t section 2 connections, but apparently I'm doing something wrong.  I'm
hoping someone can help me out.

 

Steven


[Attachment #5 (text/html)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=us-ascii"&gt;&lt;meta name=Generator content="Microsoft Word 14 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-family:"Calibri","sans-serif";}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink=purple&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Everyone,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;I have been toying with doing \
something with tor for a long time.  I decided to start doing something with \
it.  I wrote this quick POC in C# to connect to a tor node I got from the cache \
file.  I tried to follow the specs in &lt;a \
href="https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=tor-spec.txt"&gt;https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=tor-spec.txt&lt;/a&gt; \
section 2 connections, but apparently I’m doing something wrong.  \
I’m hoping someone can help me out.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Steven&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


["Program.cs" (text/plain)]

﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Security.Authentication;

namespace TorTests
{
    class Program
    {
        private const string host = "81.223.215.102";
		private const int port = 443;

        static void Main(string[] args)
        {
            using (var socket = new Socket(AddressFamily.InterNetwork, \
SocketType.Stream, ProtocolType.Tcp))  {
                socket.Connect(host, port);
                
                using (var networkStream = new NetworkStream(socket))
                using (var ssl = new SslStream(networkStream, false, \
CertificateValidation))  {
                    var certificates = GetCollection();
                    ssl.AuthenticateAsClient(host, certificates, SslProtocols.Ssl3, \
false);  }
            }
        }

        private static X509CertificateCollection GetCollection()
        {
            var collection = new X509CertificateCollection();

            var certificate = new X509Certificate("TestServer.cer");

            collection.Add(certificate);

            return collection;
        }

        private static bool CertificateValidation(Object sender, X509Certificate \
certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)  {
            return true;
        }
    }
}


["TestServer.cer" (application/x-x509-ca-cert)]
["makecerts.rename2bat" (application/octet-stream)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120627084219</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-27 08:42:19-0400</timestampReceived><subject>Re: [tor-dev] stem test output</subject><body>

On 6/25/12 3:45 AM, Damian Johnson wrote:
&gt; Karsten, should the 'dirreq-v3-share' percentage values be able to go
&gt; above 100%? The extra-info descriptors that I just fetched has one
&gt; such entry, which makes stem's descriptor parser complain...
&gt; 
&gt; extra-info siltornado 995D0FE5A89563D79A383CCC2444D0E26C6BE625
&gt; published 2012-06-24 19:30:31
&gt; ...
&gt; dirreq-v2-share 159.81%
&gt; dirreq-v3-share 159.81%

Nice catch.  That's a bug.  Good thing we don't use self-reported
directory request shares anymore.  I commented on #5823 which is about
removing these lines from little-t-tor.  For stem, I'd say, let's accept
shares above 100%, because dir-spec.txt doesn't explicitly limit the
range to 0--100%.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120628003733</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-28 00:37:33-0400</timestampReceived><subject>Re: [tor-dev] Proc Unit Testing &amp; Next Project</subject><body>

&gt; After talking about it with Professor Danner, we would like to stick
&gt; with the Tor Descriptors prject rather than work on Onionoo.

Sounds good.

&gt; Professor Danner brought up that if this project isn't maintained, our
&gt; work could be fruitless

Actually, *my* interest in the Onionoo project is that it would first
consist of "expand stem to cover the things it's missing, including
tests cuz Damian is picky" so even if the Onionoo part wasn't
successful it certainly would be far from fruitless.

&gt; ... and at this point we would prefer to stick
&gt; with Python.

This part confuses me. The project is to make a *python* Onionoo. ;)

All that said, also happy for you to focus on other stuff.

&gt; - What environment did you want the proc unit tests run under in
&gt; Windows.  Since Cygwin only supports up to python 2.6 currently, we
&gt; would need to rebuild python (2.7) in order to allow the tests to run.
&gt;  Under the vanilla windows command prompt, we need to have an instance
&gt; of tor already running on the computer.  Generally speaking, we don't
&gt; have much access to windows development machines, so any advice you
&gt; have would be appreciated.

Stem should be compatible with python 2.5 and above (in the 2.x
series). If you're assuming that you need python 2.7 based on prior
issues then please try the current master - I just made a lot of fixes
around supporting older python versions. :P

Beck: Any suggestions on this?

&gt; - For writing integration tests for proc, we aren't sure how to test
&gt; get_memory_usage(), get_stats(), and get_connections()...

Hmmm, don't worry too much about the integ tests for proc. Personally
I'm more interested in their unit tests, since those allow me to repro
problems encountered on other distributions. If you can think of a
clever method for testing something then go for it. If not then don't
worry about it.

One option would be to test proc against the tor instance that is
currently running. Asserting, for instance, that get_memory_usage() is
greater than a kilobyte and that get_connections() provides the
control connection.

I'll try to reply to the unit testing revisions soon-ish, though I'm
heading back to Vashon for a funeral this weekend so it might be a
little while.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120628122408</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-28 12:24:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 203: Avoiding censorship by impersonating an HTTPS server</subject><body>

Hi Nick,

On 6/26/12 12:23 AM, Nick Mathewson wrote:
&gt; Hi all.  Here's a proposal for ticket #5548.  Let's discuss!

Not an actual contribution to the discussion, but here are some typos I
found and fixed while reading the proposal:

https://gitweb.torproject.org/user/karsten/torspec.git/shortlog/refs/heads/task-5548

Also, please see and possibly fix or extend the deliverable summary I
wrote for this sponsor F item number 18:

https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorF/Year2

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629150236</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-06-29 15:02:36-0400</timestampReceived><subject>[tor-dev] Karsten's status report June 1--30</subject><body>

Hi all,

below's what I did in June.  Yes, there's still one more day left in
June, but I don't expect to do anything useful tomorrow other than
packing for Italy and pretending to have a half weekend.

Best,
Karsten


Fixed a few problems with the metrics website: bridge usage statistics
graphs were missing 85% of reported bridge statistics due to a truncated
file containing raw observations (#6064); download times in Torperf
graphs were consistently 1 second too high because of a trivial math bug
(#6070); some direct usage graphs showing possible censorship events
displayed upturns or downturns for every single data point (first part
of #6170); direct usage graphs of countries with little usage displayed
missing values where they should display zero users (second part of #6170).

Added a new graph to the metrics website that shows number of cloud
bridges over time (#5629) [0].  Runa is still investigating the sudden
drops in March and April, but it looks like they're related to a problem
with updating cloud images.

Visualized Torperf phases from starting a download to 1) receiving the
CONNECTED cell, 2) receiving the first byte, and 3) receiving the last
byte of the response (#6120).

Looked more into improved bridge usage statistics (#5807) with little
outcome so far.  The directory request statistics reported by bridges
still look very promising for estimating daily bridge users.

Tried to find reasons for missing extra-info descriptors (#3266).  There
are some interesting patterns, but it's still unclear what's going on.

Finished making the new combined Torperf data format the new default
format that we provide on the metrics website (#3036) [1, 2].

Added support for parsing GetTor statistics files to metrics-lib and
made the metrics website code use that library instead of implementing
its own parser.

Discussed sanitizing pluggable transport lines in bridge extra-info
descriptors with George and implemented the required code in metrics-db
(#4957).

Deployed George's changes to the censorship detector script to send out
daily mails for censorship events [3].  Apparently, there are still
plenty of false positives on that list, but the newly gained awareness
might help improving the censorship detector script in the future.

Fixed a problem in DocTor, the consensus-health checker, which looked at
old consensuses for some checks when it shouldn't.

Helped prepare the metrics host for a downtime of a few hours for
getting its RAID card replaced.  Looks like replacing the broken card
has solved previously existing performance problems quite well.

Made a few smaller extensions to Onionoo, the data provider behind
Atlas: added bridge nicknames; added support for searching by country
code (#5960); included exit addresses in summary and search (#5251);
added support for relays and bridges with multiple OR addresses (#5245);
allowed searches for more than 1 search term (#5248); added reverse DNS
lookup results (#5247).  Also wrote a design document for Onionoo [4] to
facilitate writing a Python version of it.

[0] https://metrics.torproject.org/network.html#cloudbridges

[1] https://metrics.torproject.org/data.html#performance

[2] https://metrics.torproject.org/formats.html#torperf

[3]
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-censorship-events

[4] https://gitweb.torproject.org/onionoo.git/blob/HEAD:/DESIGN

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629184819</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-06-29 18:48:19-0400</timestampReceived><subject>[tor-dev] Nick's status report for June 2012</subject><body>

June was a pretty decent month!

With help from Mike Perry, I finished a couple of rounds of job
interviews, so we could select a new core developer.  Let's welcome
Andrea Shepard to the Tor project; she's already off to a great
start, even though she's only part-time for her first couple of
months.

I migrated the Free Haven Anonymity Bibliography
(http://freehaven.net) to git, and fixed a bunch of longstanding
bugs in it, so that its output finally passes the w3 validator.

I wrote up a couple of emails about the statuses of current
proposals, and proposals implemented in 0.2.3.x, and send them to
tor-dev.  I hope to do this every month or two.

I finally circulated my proposals for improved cell crypto (202),
and for impersonating an HTTPS server (203).

Weasel and I had a chat about how to avoid backporting all
conceivable patches to 0.2.2.x.  From now on, I'm going to
distinguish between "new stable" and "extended support stable" --
once a Tor series has been stable for long enough, it should really
get fixes for grave bugs only.

With help from many others, we tagged Tor 0.2.3.17-beta and
0.2.3.18-rc.  These fixed a lot of bugs; I think Tor 0.2.3.x is
getting close to being ready for a stable release.  Once there are
packages available for your platform, please try them out!

"I reviewed piles of code, merged a bunch of code, and fixed piles
of bugs."  This is usually the shortest sentence in my status
reports with the highest amount of time actually consumed.  For
details, see the ChangeLogs for Tor 0.2.3.17-beta and 0.2.3.18-rc
inclusive for everything that actually got merged.  If you like to
follow code getting reviewed and merged, and you have a high
tolerance for incoming email volume, I recommend the tor-bugs and
tor-commits mailing lists.

Some highlights include:

  * Tor clients now declare a less fingerprintable (and actually
    accurate, we hope!) set of ciphers in their TLS handshakes.  In
    0.2.4, this will enable us to use more secure TLS
    ciphersuites. (See bug 4744 and proposal 198.)

  * Tor now enables compiler-hardening options by default.

  * We made a quick workaround for a horrible bug in OpenSSL 1.0.1
    that prevents TLS 1.1 and TLS 1.2 from renegotiating
    successfully.

I forked a maint-0.2.3 branch from master.  Now changes to Tor 0.2.3
go into maint-0.2.3, which gets merged forward into master; changes
made only in master will appear in 0.2.4 only.

I started a new repository called "tor-next" (at
https://gitweb.torproject.org/tor-next.git).  It has two main
branches, "tor-next" and "tor-next-023".  These branches are
regenerated periodically; they contain the patches that I'm
currently considering merging to master and to maint-0.2.3
respectively.  This way, complex code can get a little testing
before I actually merge it.  If the alpha code just hasn't been
alpha enough for your tastes, and you like building from source, you
might want to give tor-next a spin.

Tor-next is automatically generated by a script; you can see it in
our "githax" repository at
https://gitweb.torproject.org/githax.git/blob_plain/HEAD:/scripts/make-tor-next

I've started merging pending things into 0.2.4.x, and reviewing
patch series which had been tagged for Tor 0.2.4.x.

I participated in a fun reddit "ask me anything" session with Runa,
Karen, and others.

I've started playing around with shadow to get it running on my
desktop.  It worked out okay, but I haven't yet managed to actually
do more with it than say, "Yup, that runs."

I've scrambled to try to get ready for the developers' meeting and
for PETS in early July.  Apparently, I'm out of practice at
arranging and preparing for travel.

Andrea and I started sketching out plans and possible schedules for
Tor 0.2.4.  We're doing okay making plans at the proposal level, but
trying to select and cost out individual tickets seems to be proving
more trouble than it might be worth.  Further, we're a bit stymied
by the state of deliverables tracking; that's going to take some
brain-dumps at the dev meeting.  Still, I'm hoping we can have a
rough plan for 0.2.4 some time before mid-July: I'd like to be able
to declare merge deadlines some time around then.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629204535</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-06-29 20:45:35-0400</timestampReceived><subject>Re: [tor-dev] Stem Proc Integration Tests</subject><body>

&gt; Should we wait for Ravi to implement this, or can we go ahead and do it
&gt; ourselves as needed?

Feel free, Ravi will be busy with other controller functionality for
quite a while.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120629223251</emailId><senderName>Gino Badouri</senderName><senderEmail>g.badouri@gmail.com</senderEmail><timestampReceived>2012-06-29 22:32:51-0400</timestampReceived><subject>Re: [tor-dev] TLS warning using static OpenSSL 1.0.1c</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks for the heads up.
I got it working on my mipsel box.

First of all I switched to 2.3.18-rc git.

I build the latest zlib 1.2.7 with -fPIC and -DPIC (seems to be required
for mipsel).

I recompiled and reinstalled OpenSSL 1.0.1 with "shared no-ssl2
enable-tlsext"
"shared" also seems to build the static libraries aswell.

Then I reconpiled and libevent 2.0.19-stable.
For libevent I also used the --with-pic and pointed the ./configure to my
compiled zlib 1.2.7
Also I left out the "--disable-debug-option"  this time.

Now for Tor, it seems that this "bufferevents"-options causes problems.
I threw away the log but it makes setting up the circuit very slow and
after a while I'm getting timeouts and errors about "connections marked for
closing?"
If you want I can rebuild it with bufferevents and send you a detailed log
about it.

Anywyas I build it using these options:

./configure --host=mipsel-oe-linux --prefix=/usr --localstatedir=/var
--sysconfdir=/etc \
--with-openssl-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib
\
--with-zlib-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib
\
--with-libevent-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib
\
--enable-static-libevent --disable-asciidoc --enable-static-zlib
--enable-static-openssl \
CPPFLAGS="-I/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/include"
\
LDFLAGS="-L/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib"
LIBS="-lz"

The resulting binary is still 5Megs after I manually stripped it, but it
seems to work :)

I still can't configure with --enable-static-tor though.
The OpenSSL test will fail with:

configure:6940: mipsel-oe-linux-gcc -o conftest  -static
-I/usr/local/include
-I/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/include
-I${top_srcdir}/src/common -L/usr/local/lib
-L/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib
conftest.c -lpthread -lrt -ldl -lz -lssl -lcrypto  &gt;&amp;5
conftest.c: In function 'main':
conftest.c:61: warning: incompatible implicit declaration of built-in
function 'exit'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_load':
dso_dlfcn.c:(.text+0x110): undefined reference to `dlopen'
dso_dlfcn.c:(.text+0x178): undefined reference to `dlerror'
dso_dlfcn.c:(.text+0x2a8): undefined reference to `dlclose'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_unload':
dso_dlfcn.c:(.text+0x44c): undefined reference to `dlclose'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_bind_var':
dso_dlfcn.c:(.text+0x64c): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x6b4): undefined reference to `dlerror'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_bind_func':
dso_dlfcn.c:(.text+0x900): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x968): undefined reference to `dlerror'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_pathbyaddr':
dso_dlfcn.c:(.text+0x10dc): undefined reference to `dladdr'
dso_dlfcn.c:(.text+0x11cc): undefined reference to `dlerror'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_globallookup':
dso_dlfcn.c:(.text+0x125c): undefined reference to `dlopen'
dso_dlfcn.c:(.text+0x1290): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x12b0): undefined reference to `dlclose'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `zlib_stateful_init':
c_zlib.c:(.text+0x214): undefined reference to `inflateInit_'
c_zlib.c:(.text+0x2c8): undefined reference to `deflateInit_'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `zlib_stateful_finish':
c_zlib.c:(.text+0x43c): undefined reference to `inflateEnd'
c_zlib.c:(.text+0x464): undefined reference to `deflateEnd'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `zlib_stateful_compress_block':
c_zlib.c:(.text+0x5d0): undefined reference to `deflate'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `zlib_stateful_expand_block':
c_zlib.c:(.text+0x724): undefined reference to `inflate'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `bio_zlib_free':
c_zlib.c:(.text+0xb7c): undefined reference to `inflateEnd'
c_zlib.c:(.text+0xbe8): undefined reference to `deflateEnd'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `bio_zlib_read':
c_zlib.c:(.text+0xdf8): undefined reference to `inflateInit_'
c_zlib.c:(.text+0xe64): undefined reference to `inflate'
c_zlib.c:(.text+0xedc): undefined reference to `zError'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `bio_zlib_write':
c_zlib.c:(.text+0x1274): undefined reference to `deflateInit_'
c_zlib.c:(.text+0x149c): undefined reference to `deflate'
c_zlib.c:(.text+0x1504): undefined reference to `zError'
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o):
In function `bio_zlib_flush':
c_zlib.c:(.text+0x17e8): undefined reference to `deflate'
c_zlib.c:(.text+0x1874): undefined reference to `zError'
collect2: ld returned 1 exit status

The dso_dlfcn.c errors can be solved by compiling OpenSSL with "no-dso".
However I can't figure out why the static OpenSSL has trouble finding zlib?
I don't think it's a problem because my semi-static binary works well
enough now :)



2012/6/27 grarpamp &lt;grarpamp@gmail.com&gt;

&gt; &gt; I had to alter the Makefile
&gt; &gt; and tell the linker where to find ... libz.so and libz.a and zlib
&gt; includes
&gt;
&gt; If you got a static 'openssl' binary with zlib in it, and both
&gt; .a and .so's for the openssl libs, and libevent and tor compiled
&gt; against that, I'd like to see the openssl diff. I gave up early.
&gt;
&gt; &gt; Also libevent and tor need the ./configure CPPFLAGS and LDFLAGS for zlib
&gt;
&gt; Yeah, and and for against openssl and libevent too. I left that out.
&gt;
&gt; &gt; I'm only encountering timeouts after the circuit has been established:
&gt; &gt; Jun 26 21:21:04.000 [notice] Tried for 120 seconds to get a connection to
&gt; &gt; [scrubbed]:53. Giving up. (waiting for circuit)
&gt;
&gt; Don't know., sounds normal, send a signal newnym.
&gt;
&gt; &gt; static OpenSSL 1.0.1c (... zlib ...)
&gt;
&gt; I think 'zlib' works the same as not specifying any zlib* phrase.
&gt; And that not specifying 'shared' gets you only static libs and
&gt; a dynamic bin, 'shared' adds dyn libs.
&gt;
&gt; &gt; libevent-2.0.19-stable (bufferevents enabled)
&gt; &gt; Also I compiled with miniupnpc-1.7 and libnatpmp-20110808 support.
&gt; &gt; I think the Tor binary is too big 5.3MB which is due to libcrypto.a being
&gt; &gt; 4.4MB (stripped).
&gt;
&gt; Tor here is 3487400 bytes, stripped.
&gt;
&gt; &gt; Would you happen to know which ciphers I can drop from OpenSSL? (so I can
&gt; &gt; shrink it a bit).
&gt;
&gt; It's in the torspec docs somewhere. Probably just rsa, dh, aes and x509,
&gt; basics.
&gt; Or try debug in openssl.conf.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

Thanks for the heads up.&lt;br&gt;I got it working on my mipsel box.&lt;br&gt;&lt;br&gt;First of all I \
switched to 2.3.18-rc git.&lt;br&gt;&lt;br&gt;I build the latest zlib 1.2.7 with -fPIC and -DPIC \
(seems to be required for mipsel).&lt;br&gt;&lt;br&gt;I recompiled and reinstalled OpenSSL 1.0.1 \
with "shared no-ssl2 enable-tlsext"&lt;br&gt; "shared" also seems to \
build the static libraries aswell.&lt;br&gt;&lt;br&gt;Then I reconpiled and libevent \
2.0.19-stable.&lt;br&gt;For libevent I also used the --with-pic and pointed the ./configure \
to my compiled zlib 1.2.7&lt;br&gt; Also I left out the "--disable-debug-option"  \
this time.&lt;br&gt;&lt;br&gt;Now for Tor, it seems that this "bufferevents"-options \
causes problems.&lt;br&gt;I threw away the log but it makes setting up the circuit very \
slow and after a while I'm getting timeouts and errors about "connections \
marked for closing?"&lt;br&gt; If you want I can rebuild it with bufferevents and send \
you a detailed log about it.&lt;br&gt;&lt;br&gt;Anywyas I build it using these \
options:&lt;br&gt;&lt;br&gt;./configure --host=mipsel-oe-linux --prefix=/usr --localstatedir=/var \
                --sysconfdir=/etc \&lt;br&gt;
--with-openssl-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib \
\&lt;br&gt;--with-zlib-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib \
\&lt;br&gt;--with-libevent-dir=/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib \
                \&lt;br&gt;
--enable-static-libevent --disable-asciidoc --enable-static-zlib \
--enable-static-openssl \
\&lt;br&gt;CPPFLAGS="-I/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/include" \
\&lt;br&gt;LDFLAGS="-L/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib" \
LIBS="-lz"&lt;br&gt; &lt;br&gt;The resulting binary is still 5Megs after I manually \
stripped it, but it seems to work :)&lt;br&gt;&lt;br&gt;I still can't configure with \
--enable-static-tor though.&lt;br&gt;The OpenSSL test will fail \
with:&lt;br&gt;&lt;br&gt;configure:6940: mipsel-oe-linux-gcc -o conftest  -static \
-I/usr/local/include \
-I/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/include \
-I${top_srcdir}/src/common -L/usr/local/lib \
-L/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib conftest.c \
                -lpthread -lrt -ldl -lz -lssl -lcrypto  &gt;&amp;5&lt;br&gt;
conftest.c: In function 'main':&lt;br&gt;conftest.c:61: warning: incompatible \
implicit declaration of built-in function \
'exit'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_load':&lt;br&gt; dso_dlfcn.c:(.text+0x110): undefined reference to \
`dlopen'&lt;br&gt;dso_dlfcn.c:(.text+0x178): undefined reference to \
`dlerror'&lt;br&gt;dso_dlfcn.c:(.text+0x2a8): undefined reference to \
`dlclose'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_unload':&lt;br&gt; dso_dlfcn.c:(.text+0x44c): undefined reference to \
`dlclose'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_bind_var':&lt;br&gt;dso_dlfcn.c:(.text+0x64c): undefined reference \
to `dlsym'&lt;br&gt; dso_dlfcn.c:(.text+0x6b4): undefined reference to \
`dlerror'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_bind_func':&lt;br&gt;dso_dlfcn.c:(.text+0x900): undefined reference \
to `dlsym'&lt;br&gt; dso_dlfcn.c:(.text+0x968): undefined reference to \
`dlerror'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_pathbyaddr':&lt;br&gt;dso_dlfcn.c:(.text+0x10dc): undefined \
reference to `dladdr'&lt;br&gt; dso_dlfcn.c:(.text+0x11cc): undefined reference to \
`dlerror'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(dso_dlfcn.o): \
In function `dlfcn_globallookup':&lt;br&gt;dso_dlfcn.c:(.text+0x125c): undefined \
reference to `dlopen'&lt;br&gt; dso_dlfcn.c:(.text+0x1290): undefined reference to \
`dlsym'&lt;br&gt;dso_dlfcn.c:(.text+0x12b0): undefined reference to \
`dlclose'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `zlib_stateful_init':&lt;br&gt; c_zlib.c:(.text+0x214): undefined reference \
to `inflateInit_'&lt;br&gt;c_zlib.c:(.text+0x2c8): undefined reference to \
`deflateInit_'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `zlib_stateful_finish':&lt;br&gt; c_zlib.c:(.text+0x43c): undefined \
reference to `inflateEnd'&lt;br&gt;c_zlib.c:(.text+0x464): undefined reference to \
`deflateEnd'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `zlib_stateful_compress_block':&lt;br&gt; c_zlib.c:(.text+0x5d0): undefined \
reference to `deflate'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `zlib_stateful_expand_block':&lt;br&gt;c_zlib.c:(.text+0x724): undefined \
                reference to `inflate'&lt;br&gt;
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `bio_zlib_free':&lt;br&gt;c_zlib.c:(.text+0xb7c): undefined reference to \
`inflateEnd'&lt;br&gt;c_zlib.c:(.text+0xbe8): undefined reference to \
                `deflateEnd'&lt;br&gt;
/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `bio_zlib_read':&lt;br&gt;c_zlib.c:(.text+0xdf8): undefined reference to \
`inflateInit_'&lt;br&gt;c_zlib.c:(.text+0xe64): undefined reference to \
`inflate'&lt;br&gt; c_zlib.c:(.text+0xedc): undefined reference to \
`zError'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `bio_zlib_write':&lt;br&gt;c_zlib.c:(.text+0x1274): undefined reference to \
`deflateInit_'&lt;br&gt; c_zlib.c:(.text+0x149c): undefined reference to \
`deflate'&lt;br&gt;c_zlib.c:(.text+0x1504): undefined reference to \
`zError'&lt;br&gt;/home/mastag/src/openpli/build-dm800/tmp/sysroots/mipsel-oe-linux/lib/libcrypto.a(c_zlib.o): \
In function `bio_zlib_flush':&lt;br&gt; c_zlib.c:(.text+0x17e8): undefined reference to \
`deflate'&lt;br&gt;c_zlib.c:(.text+0x1874): undefined reference to \
`zError'&lt;br&gt;collect2: ld returned 1 exit status&lt;br&gt;&lt;br&gt;The dso_dlfcn.c errors can \
be solved by compiling OpenSSL with "no-dso".&lt;br&gt; However I can't \
figure out why the static OpenSSL has trouble finding zlib?&lt;br&gt;I don't think \
it's a problem because my semi-static binary works well enough now \
:)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2012/6/27 grarpamp &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:grarpamp@gmail.com" \
target="_blank"&gt;grarpamp@gmail.com&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt; &lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div \
class="im"&gt;&gt; I had to alter the Makefile&lt;br&gt; &lt;/div&gt;&gt; and tell the linker where \
to find ... libz.so and libz.a and zlib includes&lt;br&gt; &lt;br&gt;
If you got a static 'openssl' binary with zlib in it, and both&lt;br&gt;
.a and .so's for the openssl libs, and libevent and tor compiled&lt;br&gt;
against that, I'd like to see the openssl diff. I gave up early.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Also libevent and tor need the ./configure CPPFLAGS and LDFLAGS for zlib&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Yeah, and and for against openssl and libevent too. I left that out.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; I'm only encountering timeouts after the circuit has been established:&lt;br&gt;
&gt; Jun 26 21:21:04.000 [notice] Tried for 120 seconds to get a connection to&lt;br&gt;
&gt; [scrubbed]:53. Giving up. (waiting for circuit)&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Don't know., sounds normal, send a signal newnym.&lt;br&gt;
&lt;br&gt;
&gt; static OpenSSL 1.0.1c (... zlib ...)&lt;br&gt;
&lt;br&gt;
I think 'zlib' works the same as not specifying any zlib* phrase.&lt;br&gt;
And that not specifying 'shared' gets you only static libs and&lt;br&gt;
a dynamic bin, 'shared' adds dyn libs.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; libevent-2.0.19-stable (bufferevents enabled)&lt;br&gt;
&gt; Also I compiled with miniupnpc-1.7 and libnatpmp-20110808 support.&lt;br&gt;
&gt; I think the Tor binary is too big 5.3MB which is due to libcrypto.a being&lt;br&gt;
&gt; 4.4MB (stripped).&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Tor here is 3487400 bytes, stripped.&lt;br&gt;
&lt;div class="im"&gt;&lt;br&gt;
&gt; Would you happen to know which ciphers I can drop from OpenSSL? (so I can&lt;br&gt;
&gt; shrink it a bit).&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;It's in the torspec docs somewhere. Probably just rsa, dh, aes and x509, \
basics.&lt;br&gt; Or try debug in openssl.conf.&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;_______________________________________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120630014219</emailId><senderName></senderName><senderEmail>andrea</senderEmail><timestampReceived>2012-06-30 01:42:19-0400</timestampReceived><subject>[tor-dev] Andrea's status report for June 2012</subject><body>

[Attachment #2 (multipart/signed)]


So, here's what I've been up to my first couple weeks with Tor:

 * Interviewed and got hired

 * Getting up to speed with everything, setting up git repository, etc.

 * Met ioerror for coffee and key-signing

 * Got my first patch merged! (bug 5235)

 * Fixed several other bugs:

   * 5452
   * 5049
   * 6028
   * 2385
   * 5557
   * 5238

 * Did code reviews for 6226, 6031, 5285, 4195 and 6255

 * Talked to NickM about planning for 0.2.4.x, and made some time estimates.

--=20
Andrea Shepard

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120630085824</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-06-30 08:58:24-0400</timestampReceived><subject>[tor-dev] George's status report: June 2012</subject><body>

Hi,

this is a list of some Tor stuff I did during June:

- Provided patches for the rest of the tor-0.2.3.x tickets that were
  reported/assigned by/to me [0].

- Helped set up a mailing list to host daily censorship reports as
  reported by George Danezis' censorship anomaly detection tool [1].
  I hope to speak with George soon to improve and finalize the second
  version of his script [2].

- Finished coding the automatic port forwarding for transport proxies
  (#4567). It needs some more love based on Nick's review, but it's
  pretty-much done.

- Helped with the .et censorship incident (#6045). We bisected their
  DPI fingerprints and found some interesting stuff on how their DPI
  engine works. We should probably do some more research and then
  write a technical blog post.

- Wrote d0wser, a little program which (under some specific
  conditions) given a censored payload, brute forces its DPI
  fingerprints by using the DPI firewall as a censorship oracle [3].

- Helped the Tor censorship encyclopedia project [4]. It needs much
  more attention/content/editing.
  
- Helped Brandon Wiley with his GSoC project [5].

[0]: #5603, #5589, #5799, #6218, #5099, #6226

[1]: https://lists.torproject.org/pipermail/tor-dev/2011-September/002923.html
     https://trac.torproject.org/projects/tor/ticket/6067
     https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-censorship-events

[2]: https://gitweb.torproject.org/metrics-tasks.git/blob/HEAD:/task-2718/detectorv2.py

[3]: http://gitorious.org/d0wser/d0wser/blobs/master/d0wser.go

[4]: https://trac.torproject.org/projects/tor/ticket/6149
     https://trac.torproject.org/projects/tor/wiki/doc/OONI/censorshipwiki

[5]: https://lists.torproject.org/pipermail/tor-dev/2012-May/003561.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120630172950</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-06-30 17:29:50-0400</timestampReceived><subject>Re: [tor-dev] Tor proposals implemented in Tor 0.2.3.x</subject><body>

On Sat, Jun 30, 2012 at 07:03:19PM +0200, Fabian Keil wrote:
&gt; Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; 
&gt; &gt; IMPLEMENTED IN 0.2.3.x
&gt; 
&gt; &gt;    174  Optimistic Data for Tor: Server Side
&gt; &gt;    181  Optimistic Data for Tor: Client Side
&gt; &gt; 
&gt; &gt;      This one is a performance hack that hasn't seen its full impact
&gt; &gt;      yet.  Starting with Tor 0.2.3.x, clients MAY send data to the
&gt; &gt;      exit node before finding out whether the exit has been able to
&gt; &gt;      successfully connect to the destination server.  Previously, it
&gt; &gt;      took an extra round trip for clients to wait to see whether the
&gt; &gt;      exit said "Yes, I'm connected" before they were allowed to send
&gt; &gt;      data for the exit.
&gt; &gt; 
&gt; &gt;      This should make connection startup faster in many protocols
&gt; &gt;      where the client speaks first (http, https), as more and more
&gt; &gt;      client programs gain support for it.
&gt; 
&gt; Is optimistically sending data for non-testing purposes recommended?
&gt; 
&gt; The "Security implications" in 181 seem to imply that it isn't,
&gt; but the man page doesn't mention any risks. Is that because they
&gt; are considered obvious, or simply an oversight?

The issue is that an exit node that supports optimistic data can tell
when a client is using that feature.  So if only a handful of clients
have upgraded to a TBB that supports it (none does at this time),
they'll stand out.  That's why the default is "use the consensus value",
which is currently off.  The consensus value can be turned on later,
when "enough" people can support it.

circuituse.c:

/** Return true iff client-side optimistic data is supported. */
static int
optimistic_data_enabled(void)
{
  const or_options_t *options = get_options();
  if (options-&gt;OptimisticData &lt; 0) {
    /* XXX023 consider having auto default to 1 rather than 0 before
     * the 0.2.3 branch goes stable. See bug 3617. -RD */
    const int32_t enabled =
      networkstatus_get_param(NULL, "UseOptimisticData", 0, 0, 1);
    return (int)enabled;
  }
  return options-&gt;OptimisticData;
}


   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506122603</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-05-06 12:26:03-0400</timestampReceived><subject>Re: [tor-dev] Win32/MSVC: tinytest.c problems</subject><body>

"Sebastian Hahn" &lt;hahn.seb@web.de&gt; wrote:
 
&gt; Tinytest is supposed to be an independent library, so including a
&gt; tor-specific header file doesn't work here.

Ok, I didn't know. But my patch to tinytest.c doesn't require any functions
from the Tor libs. (as test*.c does).
 
&gt;&gt; There are more MSVC-issues in other test/*.c files. I can get back to that.
&gt; 
&gt; Please do, thanks.

I'll do when I have the time later next week.

--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506183114</emailId><senderName>Shondoit Walker</senderName><senderEmail>shondoit@gmail.com</senderEmail><timestampReceived>2012-05-06 18:31:14-0400</timestampReceived><subject>Re: [tor-dev] tbb-build for Windows</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hey John,

&gt;&gt; If you have a clean VM, with a default install of Windows 7,
&gt;&gt; then please try it out and let me know. If you have a dirty
&gt;&gt; Windows XP in the back of your closet, try it out as well. I'd
&gt;&gt; love to hear how it breaks and then improving it.
&gt; 
&gt; Would you be interested in the opposite? That is, a (slightly) 
&gt; dirty default install of Windows 7 (x64), and a clean VM with a 
&gt; default install of Windows XP SP3? Alternatively, I could install 
&gt; XP into a new partition on HDD, if you'd prefer.

I'm interested in any testing. I would recommend VM's though so that
you can roll back to a snapshot if something goes wrong.

&gt;&gt; Don't forget to set-up Git (git config [...]), clone 
&gt;&gt; torbrowser.git, add my personal repo, checkout 'personal-build'
&gt; 
&gt; Could you please expand on this? I haven't used Git via mingw and I
&gt; don't much feel like taking the time to RTFM ;)

Git via mingw is pretty much the same as regular git. If you've never
used Git before, I highly recommend to get the basics: http://gitref.org

After you start mingw do the following.
Please try to understand what every command does.

# Setting up Git (Change name/email if needed)
$ git config --global user.name "John Crain"
$ git config --global user.email "johncrain@eml.cc"

# Set up TBB build folder
$ mkdir /c/Build
$ cd /c/Build
$ git clone git://git.torproject.org/torbrowser.git
$ cd torbrowser

# Add my personal repo and check out the 'personal-build' branch.
$ git remote add shondoit
git://git.torproject.org/user/shondoit/torbrowser.git
$ git fetch shondoit
$ git checkout -t shondoit/personal-build

# Start building... This will take a couple of hours.
$ make -f build-scripts/windows.mk build-all-binaries bundle


&gt; P.S. How would one go about using your work for profile build(s)
&gt; to test benefits of something like [0,1]?
&gt; 
&gt; [0] #3978: "Better TBB about:config settings(?); re: browsing and 
&gt; loading speed, etc." 
&gt; https://trac.torproject.org/projects/tor/ticket/3978 [1] 
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/3978/tbb-ff-pgo.patch

I
&gt;
&gt; 
would recommend checking out a new branch and working from there.
$ git checkout -b bug3978
It seems that the torbrowser source has changed too much to
successfully apply that patch, so I think it might be best to start
from scratch and manually apply the changes. How to go from there, I'm
not sure.

It's best to start with a clean build first and verify that you can
succesfuly build a normal TBB. Only then start with changing settings.
If you have any questions about building or changing things you can
join #tor-dev on irc.oftc.net and ask your question there. There are
more people that can help you there, and I'll be on as well.


Good luck,

Regards,

Shondoit
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEcBAEBAgAGBQJPpsNqAAoJEPkeD+x3AmlWvqQIAJvpzmHHStMCWGDwtdBVWfJ+
FGtKP0hfksy2CgVTsheLbk3wtsvHI4tC1o1jAsEIDtezC2xEnwVbWMNRgkeci+/P
dGfZ4yUUj00NCpekNRK4+Qp1MAiDbzOGTbtSoeD9Ge9Q68x+INTGrJsNYNhEOPY8
/EUyvSqCVKtLUCVy1J7wIYXn1pWiu4l8XJSj3rFhTLL2YCbeI+zsu/RnvtiVbkWH
I36EqucFmBtKUbc6IE9v0KSXYnMGkwjxoy1rM/wtb3D0fxpi0OY1V32eYgiom9E4
LZx9WXFT1fDYEGBB2QtEiNnJMBjJAje/tJe93uC8scZtmUydmZb/uyY3NJ+sD8k=
=ubbk
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506192820</emailId><senderName>Shondoit Walker</senderName><senderEmail>shondoit@gmail.com</senderEmail><timestampReceived>2012-05-06 19:28:20-0400</timestampReceived><subject>Re: [tor-dev] tbb-build for Windows [initial test feedback: Windows 7 x64]</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hey John,

&gt; $ mv: cannot move 
&gt; '/home/USERNAME/torbrowser/build-scripts/build-alpha-windows/build/firefox-12.0':
&gt;
&gt; 
Persmission denied
&gt; $ make: *** 
&gt; [/home/USERNAME/torbrowser/build-scripts/build-alpha-windows/build/firefox-12.0]
&gt;
&gt; 
Error 1
I'm not sure about this one. It might be a path length issue. It's
hard to tell without the full log. The last two lines hardly give any
context. Try what I sent in the previous mail ($ mkdir /c/Build) or if
that doesn't help mail some more log/context.

&gt; 1) I had to set QTcore4.dll PATH environment variable 2) The zlib
&gt; version you hard-coded (1.2.6) is out of date
These issues indicate you're not using my personal-build branch, since
both are fixed in that.

&gt; 3) I got an error while installing QT: "The installer could not
&gt; find a valid C:\MinGW\include\w32api.h (Only versions with W32API
&gt; 3.13 are supported)". I didn't do anything to fix this error. I'm
&gt; on 64 bit, if that matters.
This is a known issue with Qt, it's only a warning and everything
works fine regardless. It's documented in ./build-scripts/INSTALL if I
remember correctly.

&gt; 4) Running your 'make -f build...' command (from the above quote)
&gt; from C:\MinGW\msys\1.0\home\USERNAME\torbrowser gives the the
&gt; following error. So, I had to cd into /build-scripts/ and then run
&gt; 'make -f windows.mk...'
You can either cd into build-scripts or use -f
build-scripts/windows.mk instead. I prefer the former. The problem was
that I assumed the people testing it would be somewhat familiar with
the build process. My mistake

&gt; P.S. I hammered together your personal-build repo, with
&gt; torbrowser.git [0], using TortoiseGit. But that's inefficient and
&gt; clumsy. I tried many ways to 'add' your personal-build repo using
&gt; msysGit, following your directions I quoted above, but I always
&gt; failed. Could you please e-mail a quick and dirty step-by-step for
&gt; using msysGit wrt your personal-build repo? E.g., #1. $git clone
&gt; torbrowser.git..., #2. $git add shondoit's_personal-build..., #3.
&gt; $git checkout... ?
$ git remote add shondoit
git://git.torproject.org/user/shondoit/torbrowser.git
$ git checkout -t shondoit/personal-build
But you got that from my last mail already.

&gt; P.P.S. Because you wrote you want this tested on Windows XP, and I
&gt; am currently unsure how to solve the build problem on Windows 7,
&gt; I'm going to test your process on a fresh install of Windows XP
&gt; SP3, on a clean VM (using VirutalBox). Hopefully, by the time I
&gt; test on Windows XP, someone smarter than me can provide a solution
&gt; for the above Firefox 12 build issue.
For my personal gain I would love it if you did both, but I understand
that you want to make it work first. No worries.


Regards,

Shondoit
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBAgAGBQJPptDUAAoJEPkeD+x3AmlWHcsH/RaN2MxRWQ9R4Vl69eYIoB1I
xnddsTdAiH1vcPA+NsiiUwCl0zSXf/2mEKBnN7Rk+nJm+fJ9bkiTnRiKJmvqmJKV
jaQ+NE1rB3vUdKZZAO79wyG3zYU5+yfaS7Q9I+rzKwib+IbR9RKCJ7MA2PNpLTMq
2rrzodwAOF1SjBcIj1Rbk+iw12qhjfHQuqsdY5Nh+HrYOlq8vaje+Zu0g72xhIRg
mV1IvHId3gJtrWNdvbOa6vVooYAWPQkRHNU59T2zBjJ2j2oOd3/4m2FMkWD2DFJv
UBmoMnqXh8/utyQefo1OF30CG6/iRDjWJznJVckpdB6tJOZygXy7pgXCCiMBqLU=
=PQ6Z
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120507041817</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-05-07 04:18:17-0400</timestampReceived><subject>Re: [tor-dev] TorBrowser and Firefox ESR</subject><body>

[Attachment #2 (multipart/signed)]


I'm pretty sure I've been convinced to at least try out using ESR for
TBB-stable, while *also* using Rapid Release for TBB-alpha.

Maintaining both browser branches is going to come at the cost of me
doing other stuff, but it is probably worth it. See
https://trac.torproject.org/projects/tor/ticket/5737 for details.

However, we're also going to need to make sure our Volunteer QA team is
committed to testing the alpha builds regularly, or we'll still be
accumulating all of the chaos and pain of umpteen Rapid Release updates
over 9 months of the ESR cycle, and end up buried in regressions
all hitting us all at once when we update ESR major versions.

Add yourself to Cc on
https://trac.torproject.org/projects/tor/ticket/3846 to be informed of
details as the volunteer QA plan develops.

Thus spake Mike Perry (mikeperry@torproject.org):

&gt; Thus spake Jérémy Bobbio (lunar@debian.org):
&gt; 
&gt; &gt; It looks like Firefox maintainers in Debian have decided to ship
&gt; &gt; Extended Support Releases in the upcoming Wheezy release.
&gt; &gt; 
&gt; &gt; This made me wonder if ESR changed any plans concerning TorBrowser. Will
&gt; &gt; Tor Browser Bundle keep following upstream "personal use" releases or
&gt; &gt; switch to ESR?
&gt; 
&gt; I am conflicted about this. On the one hand, ESR would appear to make
&gt; our lives easier, especially short term. On the other, I suspect that's
&gt; mostly an illusion long term, and any issues we have with rapid release
&gt; should be addressed by improving our dev and build processes.
&gt; 
&gt; The main advantages of tracking rapid release come in the form of
&gt; Mozilla actually able to more easily work with our patches and also
&gt; giving us the opportunity to communicate issues earlier as features
&gt; appear and solidify.
&gt; 
&gt; The disadvantages of tracking rapid release come in the form of build
&gt; overhead, periodic patch rebasing, and scrambling to review new features
&gt; for fingerprinting issues.
&gt; 
&gt; However, it's not like if we don't track rapid release, we'll suddenly
&gt; find the tor browser bug queue manageable. We're going to drown in
&gt; browser bugs no matter what, I think. I also don't think the number of
&gt; builds we'll need to do will substantially change. So far, there has not
&gt; been a rapid release that did not also contain security fixes. I assume
&gt; that means we'll have to do just as many ESR-based TBB builds for point
&gt; releases as rapid release-based TBB builds.
&gt; 
&gt; Since we're doomed either way with our current dev capacity, I think we
&gt; should choose the option that gives us the best chance of getting help
&gt; from Mozilla.
&gt; 
&gt; Therefore, my inclination is to keep trying to track rapid release. 
&gt; 
&gt; -- 
&gt; Mike Perry



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120506011933</emailId><senderName>Shondoit Walker</senderName><senderEmail>shondoit@gmail.com</senderEmail><timestampReceived>2012-05-06 01:19:33-0400</timestampReceived><subject>[tor-dev] tbb-build for Windows</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The last couple of days I've been working on recreating my build
environment. I remember from the last time that it was a major PITA.
(Especially with outdated docs, that aside)
I decided to automate as much as possible and I came up with the
following bootstrapper.
It's a minimal bundle and contains 7zip and mingw-get needed to
completely deploy everything.

How it works is like follows:
The user downloads and extracts the package to C:\MinGW (for example)
Then double-clicks '.\install.cmd' and the process starts.
It will first copy the files to the necessary places and then runs
mingw-get to retrieve all packages.
After that it downloads and unpacks MsysGit (Yes, it integrates git
into mingw ;)
It downloads and unpacks CMake and lastly it sets some default
settings to integrate msysgit features into mingw, like git
auto-completion.
Note that the entire thing is self-contained. It installs nothing.

For now, the user still needs to download the following manually, but
they can use the default install locations:
Qt, MSVS C++ Express, WinSDK 7.0, DirectX SDK

I could only use sha1sum for msysgit because it's the only one that
offers it. mingw-get might use hashes internally.
This entire process differs none from manually downloading all
packages in terms of integrity checking.

I'm not sure where I was going with this lil' project, but personally,
I'll keep using it.
I just thought sharing it would be a good idea. It might be a step in
the right direction for deterministic builds.

The source can be found at:
https://github.com/Shondoit/tbb-build

The latest package can be downloaded from:
https://github.com/downloads/Shondoit/tbb-build/tbb-build-1.2.1.zip
Extract it to C:\MinGW and run install.cmd, after it's finished you
can start mingw with start.cmd

If you have a clean VM, with a default install of Windows 7, then
please try it out and let me know.
If you have a dirty Windows XP in the back of your closet, try it out
as well. I'd love to hear how it breaks and then improving it.
Note: you need to use my 'personal-build' branch from my personal tpo
repo since the latest patches have not been merged yet.
And you need to install Qt, MSVC, WinSDK and DX SDK, found here:

http://releases.qt-project.org/qt4/source/qt-win-opensource-4.8.1-mingw.exe

http://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe

http://download.microsoft.com/download/A/5/4/A54BADB6-9C3F-478D-8657-93B3FC9FE62D/vcsetup.exe

http://download.microsoft.com/download/7/A/B/7ABD2203-C472-4036-8BA0-E505528CCCB7/winsdk_web.exe

Qt needs to be installed /after/ tbb-build finished completely.
Don't forget to set-up Git (git config [...]), clone torbrowser.git,
add my personal repo, checkout 'personal-build'
And then the following should Just Work*?*:
$ make -f build-scripts/windows.mk build-all-binaries bundle

Good luck,

Thanks,

And regards,

Shondoit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEcBAEBAgAGBQJPpdGcAAoJEPkeD+x3AmlW2h0IAJBDV96W/ttwW/AlGJqNhbWB
Qjqz23ToX9oIhm4S3XVJ4UmnrBSMbgG611+aFVl1BRieOTCaaCNFZADF9YUrunex
dXPI0v+MhLu31Lc/yjIA8wbf8lhKQT35nLn4SQLG6lKV9tbxZYSIkNsYB4oVzLXr
9n512ILU48t8E4yZzobsqdJEvgW89V91tG6nPoW27oDJnG9vvU6c93yLVAZhCtgK
TMRGa48Vvw+vyC+Gr5XMYEMD3D4LB7jpf3yIrd7USKGDrrgRAXn+av6PYLxmizhV
GlCD+PYjcaCIx1CO+gK5UnuZfEQUFXuQAvtw+unXVVDq1oHb7lMYpkOpcUt1BPA=
=tpTj
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506184044</emailId><senderName>John Crain</senderName><senderEmail>johncrain@eml.cc</senderEmail><timestampReceived>2012-05-06 18:40:44-0400</timestampReceived><subject>Re: [tor-dev] tbb-build for Windows [initial test feedback: Windows 7 x64]</subject><body>

Hello Shondoit,

So far so good, Tor is built and running, however, I did get one build
error wrt Firefox 12.0, and it's one I'm unsure how to fix. Vidalia was
not built, I assume that's due to the Firefox error stopping the build
process.

&gt; Qt needs to be installed /after/ tbb-build finished completely.
&gt; Don't forget to set-up Git (git config [...]), clone torbrowser.git,
&gt; add my personal repo, checkout 'personal-build'
&gt; And then the following should Just Work*?*:
&gt; $ make -f build-scripts/windows.mk build-all-binaries bundle

Here's the build issue I haven't yet resolved:

$ mv: cannot move
'/home/USERNAME/torbrowser/build-scripts/build-alpha-windows/build/firefox-12.0':
Persmission denied
$ make: ***
[/home/USERNAME/torbrowser/build-scripts/build-alpha-windows/build/firefox-12.0]
Error 1


Issues I was able to resolve:

1) I had to set QTcore4.dll PATH environment variable, I used system
PATHs "C:\Qt\4.8.1;C:\Qt\4.8.1\bin". Otherwise, po2ts.exe complained
about missing QTcore4.dll. Please see this on-topic Vidalia bug report:
https://trac-vidalia.torproject.org/projects/vidalia/ticket/488

2) The zlib version you hard-coded (1.2.6) is out of date, and thus the
download is 404ing. I edited versions.mk and versions-alpha.mk for the
most recent version 1.2.7 and zlib downloaded fine.

3) I got an error while installing QT: "The installer could not find a
valid C:\MinGW\include\w32api.h (Only versions with W32API 3.13 are
supported)". I didn't do anything to fix this error. I'm on 64 bit, if
that matters.

4) Running your 'make -f build...' command (from the above quote) from
C:\MinGW\msys\1.0\home\USERNAME\torbrowser gives the the following
error. So, I had to cd into /build-scripts/ and then run 'make -f
windows.mk...' 

$ make -f build-scripts/windows.mk build-all-binaries bundle
$ build-scripts/windows.mk:57: /home/USERNAME/torbrowser/versions.mk: No
such file or directory
$ make: *** No rule to make target
'/home/USERNAME/torbrowser/versions.mk'. stop

P.S. 
I hammered together your personal-build repo, with torbrowser.git [0],
using TortoiseGit. But that's inefficient and clumsy. I tried many ways
to 'add' your personal-build repo using msysGit, following your
directions I quoted above, but I always failed. Could you please e-mail
a quick and dirty step-by-step for using msysGit wrt your personal-build
repo? E.g., #1. $git clone torbrowser.git..., #2. $git add
shondoit's_personal-build..., #3. $git checkout... ? 

I only had success after fetching your personal-build [1], into
\home\USERNAME\torbrowser\, with TortoiseGit.

P.P.S.
Because you wrote you want this tested on Windows XP, and I am currently
unsure how to solve the build problem on Windows 7, I'm going to test
your process on a fresh install of Windows XP SP3, on a clean VM (using
VirutalBox). Hopefully, by the time I test on Windows XP, someone
smarter than me can provide a solution for the above Firefox 12 build
issue.

Thanks!

[0] https://git.torproject.org/torbrowser.git

[1]
https://gitweb.torproject.org/user/shondoit/torbrowser.git/tree/personal-build




-- 
  John Crain
  johncrain@eml.cc


On Sun, May 6, 2012, at 07:18 AM, John Crain wrote:
&gt; Hi Shondoit,
&gt; 
&gt; Thanks for taking time!
&gt; 
&gt; &gt; If you have a clean VM, with a default install of Windows 7, then please try it out and 
&gt; &gt; let me know. If you have a dirty Windows XP in the back of your closet, try it out
&gt; &gt; as well. I'd love to hear how it breaks and then improving it.
&gt; 
&gt; Would you be interested in the opposite? That is, a (slightly) dirty
&gt; default install of Windows 7 (x64), and a clean VM with a default
&gt; install of Windows XP SP3? Alternatively, I could install XP into a new
&gt; partition on HDD, if you'd prefer.
&gt; 
&gt; &gt; Don't forget to set-up Git (git config [...]), clone torbrowser.git,
&gt; &gt; add my personal repo, checkout 'personal-build'
&gt; 
&gt; Could you please expand on this? I haven't used Git via mingw and I
&gt; don't much feel like taking the time to RTFM ;)
&gt; 
&gt; P.S. How would one go about using your work for profile build(s) to test
&gt; benefits of something like [0,1]?
&gt; 
&gt; 
&gt; [0] #3978: "Better TBB about:config settings(?); re: browsing and
&gt; loading speed, etc."
&gt; https://trac.torproject.org/projects/tor/ticket/3978
&gt; 
&gt; [1]
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/3978/tbb-ff-pgo.patch
&gt; 
&gt; -- 
&gt;   John Crain
&gt;   johncrain@eml.cc
&gt; 
&gt; -- 
&gt; http://www.fastmail.fm - A fast, anti-spam email service.
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
http://www.fastmail.fm - A no graphics, no pop-ups email service

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504115224</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-05-04 11:52:24-0400</timestampReceived><subject>[tor-dev] Win32: tor-gencert.c</subject><body>

MSVC doesn't have &lt;unistd.h&gt;. Hence this little patch is needed:

--- Git-latest\src\tools\tor-gencert.c  Tue Jan 24 17:05:52 2012
+++ src\tools\tor-gencert.c     Thu Apr 26 08:51:02 2012
@@ -9,7 +9,9 @@
 #include &lt;sys/types.h&gt;
 #include &lt;sys/stat.h&gt;
 #include &lt;fcntl.h&gt;
+#ifdef HAVE_UNISTD_H
 #include &lt;unistd.h&gt;
+#endif

 #include &lt;openssl/evp.h&gt;
 #include &lt;openssl/pem.h&gt;

---------------

--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506141817</emailId><senderName>John Crain</senderName><senderEmail>johncrain@eml.cc</senderEmail><timestampReceived>2012-05-06 14:18:17-0400</timestampReceived><subject>Re: [tor-dev] tbb-build for Windows</subject><body>

Hi Shondoit,

Thanks for taking time!

&gt; If you have a clean VM, with a default install of Windows 7, then please try it out and 
&gt; let me know. If you have a dirty Windows XP in the back of your closet, try it out
&gt; as well. I'd love to hear how it breaks and then improving it.

Would you be interested in the opposite? That is, a (slightly) dirty
default install of Windows 7 (x64), and a clean VM with a default
install of Windows XP SP3? Alternatively, I could install XP into a new
partition on HDD, if you'd prefer.

&gt; Don't forget to set-up Git (git config [...]), clone torbrowser.git,
&gt; add my personal repo, checkout 'personal-build'

Could you please expand on this? I haven't used Git via mingw and I
don't much feel like taking the time to RTFM ;)

P.S. How would one go about using your work for profile build(s) to test
benefits of something like [0,1]?


[0] #3978: "Better TBB about:config settings(?); re: browsing and
loading speed, etc."
https://trac.torproject.org/projects/tor/ticket/3978

[1]
https://trac.torproject.org/projects/tor/attachment/ticket/3978/tbb-ff-pgo.patch

-- 
  John Crain
  johncrain@eml.cc

-- 
http://www.fastmail.fm - A fast, anti-spam email service.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120504223449</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-05-04 22:34:49-0400</timestampReceived><subject>[tor-dev] Orbot makefile / build update</subject><body>

Since the dawn of Orbot, way back in 2009, the onion routing robot app
has been built using an unwieldy combination of tools, based on an
extremely out of date method for cross-compiling C code for Android/ARM.
In the 1.x era of Android, there was no Native Development Kit as their
is now, but thanks to some craft individuals, scripts were developed to
utilize the compilers found within the core Android OS build kit.
However, this mean you had to build the entire Android OS to be able to
build Orbot, and you were potentially relying upon highly unstable
internal libraries.

This week, I finally bit the bullet, and decided to rewrite the build
process utilizing the more proper NDK tools, as well as utilize Git
submodules as a means for managing retrieval and version control of
dependencies. With the help of _hc, sebastian, rransom, vapourEyes, asn
and others, I was able to work through the various issues of porting
over to the more limited NDK environment, and come out with a properly
formatted Makefile for building all native code that Orbot relies upon.

This means that to fully build Orbot (including tor, privoxy, and
obfsproxy binaries, and the jtorctrl java library) you simply need to
ensure you have the Android SDK and NDK setup, and then:

1) git clone git://git.torproject.org/orbot.git
2) cd orbot
3) make -C external
4) android update project --name Orbot --target android-15 --path .
5) ant debug

That's it! (in theory).

At this point, I would love some clean eyes to look at this, try it out,
ask questions and who knows, perhaps submit a patch or two.

Human readme on new build process and prereqs:
https://gitweb.torproject.org/orbot.git/blob/HEAD:/BUILD

Makefile for Orbot and dependencies (openssl, libevent, privoxy, obfsproxy)
https://gitweb.torproject.org/orbot.git/blob/HEAD:/external/Makefile

Successfully executed build on our build server:
https://build.safermobile.org/job/Gibberbot/49/console

happy friday,
  n8fr8

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120501125214</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-05-01 12:52:14-0400</timestampReceived><subject>Re: [tor-dev] Thandy and what's next</subject><body>

On Mon, 20 Jun 2011 21:40:07 +0000
Tomas Touceda &lt;chiiph@gentoo.org&gt; wrote:
&gt; A couple of months ago, nickm and erinn worked in writing the package
&gt; format spec (see [2] for more details), and now I'm going to start
&gt; working as fast as I can (which may be slow) in implementing this last
&gt; spec and get a working Thandy.

Hello Tomas,

Can you update us on thandy progress so far?  I've seen some work in
the alpha version of vidalia. Where do you need help?

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120502023331</emailId><senderName>Tomás_Touceda</senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-05-02 02:33:31-0400</timestampReceived><subject>Re: [tor-dev] Thandy and what's next</subject><body>

[Attachment #2 (multipart/signed)]


On 5/1/12 9:52 AM, Andrew Lewman wrote:
&gt; On Mon, 20 Jun 2011 21:40:07 +0000
&gt; Tomas Touceda &lt;chiiph@gentoo.org&gt; wrote:
&gt;&gt; A couple of months ago, nickm and erinn worked in writing the package
&gt;&gt; format spec (see [2] for more details), and now I'm going to start
&gt;&gt; working as fast as I can (which may be slow) in implementing this last
&gt;&gt; spec and get a working Thandy.
&gt; 
&gt; Hello Tomas,
&gt; 
&gt; Can you update us on thandy progress so far?  I've seen some work in
&gt; the alpha version of vidalia. Where do you need help?
&gt; 

Hi,

There hasn't been any Thandy specific work for a while now. When I
"finished" the integration, it ended with everything a user should need
to have a Tor+Vidalia+Thandy setup (I realize now that I should've sent
this email a while ago).
The code I wrote is in an early development stage, it may be really
good, but I won't know until somebody else properly reviews it and we
deploy and see what the users complain about.

As of today, the status is the following: Thandy itself has a working
implementation for the THP package specification Nick and Erinn wrote.
There is a new GUI application to display Thandy's output in a nice way
and act as a bootstrap to update Thandy[1]. We have a Vidalia plugin
that periodically checks for updates and updates the bootstrapper if
needed. I've tested the Thandy client with PyInstaller to generate a
bundled Python application, and it seems to work as expected.

What we need to do now is to setup a Thandy repository, create the
packages for what we want to distribute (and maintain them) and
distribute the whole set of things to the user. From that point, we will
likely want to reduce the size of the bundle the user has to download...
but that's a problem for a future stage.

tldr; everything is there, it works and it probably has bugs, we need to
deploy and see.

To help with deployment, I wrote [2] and [3] but there hasn't been any
actual integration for that in any makefiles or anything.

As I said somewhere to at least one person, I'm not a good candidate to
do the deployment and maintaining the packaging itself, so I need help
with that mainly and probably fixing the problems that may arise after
deployment.

[1] https://gitweb.torproject.org/user/chiiph/thandy-bootstrap.git
[2]
https://gitweb.torproject.org/user/chiiph/thandy.git/blob/devmtg:/samples/example_workflow_script.sh
[3]
https://gitweb.torproject.org/user/chiiph/thandy.git/blob/devmtg:/lib/thandy/ThpHelper.py



["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120503144010</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa.sandvik@gmail.com</senderEmail><timestampReceived>2012-05-03 14:40:10-0400</timestampReceived><subject>Re: [tor-dev] Thandy and what's next</subject><body>

On Wed, May 2, 2012 at 3:33 AM, Tom=E1s Touceda &lt;chiiph@torproject.org&gt; wro=
te:
&gt; tldr; everything is there, it works and it probably has bugs, we need to
&gt; deploy and see.

How about sending a list to tor-dev with information about how to
test, and where to file bugs? I'm sure a number of people on this list
would be more than happy to help out, myself included.

-- =

Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120507155538</emailId><senderName>Fabian Keil</senderName><senderEmail>freebsd-listen@fabiankeil.de</senderEmail><timestampReceived>2012-05-07 15:55:38-0400</timestampReceived><subject>Re: [tor-dev] Orbot makefile / build update</subject><body>

[Attachment #2 (multipart/signed)]


Nathan Freitas &lt;nathan@freitas.net&gt; wrote:

&gt; Since the dawn of Orbot, way back in 2009, the onion routing robot app
&gt; has been built using an unwieldy combination of tools, based on an
&gt; extremely out of date method for cross-compiling C code for Android/ARM.
&gt; In the 1.x era of Android, there was no Native Development Kit as their
&gt; is now, but thanks to some craft individuals, scripts were developed to
&gt; utilize the compilers found within the core Android OS build kit.
&gt; However, this mean you had to build the entire Android OS to be able to
&gt; build Orbot, and you were potentially relying upon highly unstable
&gt; internal libraries.
&gt; 
&gt; This week, I finally bit the bullet, and decided to rewrite the build
&gt; process utilizing the more proper NDK tools, as well as utilize Git
&gt; submodules as a means for managing retrieval and version control of
&gt; dependencies. With the help of _hc, sebastian, rransom, vapourEyes, asn
&gt; and others, I was able to work through the various issues of porting
&gt; over to the more limited NDK environment, and come out with a properly
&gt; formatted Makefile for building all native code that Orbot relies upon.
 
&gt; At this point, I would love some clean eyes to look at this, try it out,
&gt; ask questions and who knows, perhaps submit a patch or two.

Quoting BUILD:
| The Orbot repo also includes the Privoxy source code of a recent stable release.

Privoxy 3.0.12 was released in 2009, so I wouldn't call it a recent
release. Did you run into problems with more recent versions?
At least in theory they should work better.

Fabian

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120510083126</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-10 08:31:26-0400</timestampReceived><subject>[tor-dev] Proposal: Make bridges report statistics on daily v3 network status requests</subject><body>

Hi Nick,

here is the proposal as discussed in #5807 to improve our bridge usage
statistics.

Thanks,
Karsten

["xxx-bridge-v3-reqs-stats.txt" (text/plain)]

Filename: xxx-bridge-v3-reqs-stats.txt
Title: Make bridges report statistics on daily v3 network status requests
Author: Karsten Loesing
Created: 10-May-2012
Status: Open
Target: 0.2.4.x

Overview:

  Our current approach [0] to estimate daily bridge users is based on
  unique IP addresses reported by bridges, and it is very likely broken.
  A bridge can connect to two or more bridges, so that unique IP address
  sets overlap to an unknown extent.  We should instead count requests for
  v3 network statuses, sum them up for all bridges, and divide by the
  average number of requests that a bridge client makes per day.  This
  approach is similar to how we estimate directly connecting users.  This
  proposal describes how bridges would report v3 network status requests
  in their extra-info descriptors.

Specification:

  Bridges include a new keyword line in their extra-info descriptors that
  contains the number of v3 network status requests by country they saw
  over a period of 24 hours.  The reported numbers refer to the period
  stated in the "bridge-stats-end" line.  The new keyword line would go
  after the "bridge-ips" line in dir-spec.txt:

  "bridge-v3-reqs" CC=N,CC=N,... NL
      [At most once.]

      List of mappings from two-letter country codes to the number of
      requests for v3 network statuses from that country as seen by the
      bridge, rounded up to the nearest multiple of 8. Only those requests
      are counted that the directory can answer with a 200 OK status code.


[0] https://metrics.torproject.org/papers/countingusers-2010-11-30.pdf



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120505082711</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-05 08:27:11-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

[Moving this thread to tor-dev as suggested by Damian in separate mail.]

Hi Damian, hi Beck,

On 5/4/12 6:59 PM, Damian Johnson wrote:
&gt; Hi Beck.
&gt; 
&gt; &gt; I noticed that stem has not been updated during the last ten days
&gt; 
&gt; Yup, I've been busy for a while with a new arm release [1] and a
&gt; variety of other chores. Ravi is currently working on safe cookie
&gt; support and I'll be getting back into stem development this weekend.
&gt; 
&gt; &gt; it's a good time to start doing some substantial work
&gt; 
&gt; Great!
&gt; 
&gt; &gt; So for me, a reasonable next step is to build some subclass on top of the base \
&gt; &gt; Descriptor class. What do you think?
&gt; 
&gt; Sounds good. What descriptor type would you like to tackle first?
&gt; Karsten, do you have any suggestions? Ravi plans to do network status
&gt; entries and microdescriptors so I'd suggest something besides those.

There are quite a few options.

How about extending stem to implement #2768?  There's already Java code
for verifying server descriptors and consensuses in metrics-tasks.git
[0].  On stem's side this requires parsing the crypto parts of server
descriptors, consensuses, and certificates.  If the network statuses
aren't there yet, starting with server descriptors should be fine.  And
once there's verification code for server descriptors and consensuses,
there are more things to verify in Tor's various descriptors.

Another option would be to write the parsing code for extra-info
descriptors including all the stats.  Once we have consensuses, server
descriptors, and extra-info descriptors in stem, we can start writing a
Python version of Onionoo [1], the service that provides the data for
Atlas [2].

Let me know if you need more options or more input on these.

Thanks,
Karsten

[0] https://gitweb.torproject.org/metrics-tasks.git/tree/HEAD:/task-2768

[1] https://www.torproject.org/projects/onionoo.html.en

[2] https://atlas.torproject.org/


&gt; Also, since you're interested in this area I'd suggest giving this a read...
&gt; https://trac.torproject.org/projects/tor/ticket/5651
&gt; 
&gt; There's nothing that needs to be done for it on our end at the moment
&gt; - just related to the stem/metrics-lib work.
&gt; 
&gt; Cheers! -Damian
&gt; 
&gt; [1] https://blog.torproject.org/blog/arm-release-145
&gt; 
&gt; On Fri, May 4, 2012 at 9:32 AM, Beck Chen &lt;csybeck@gmail.com&gt; wrote:
&gt; &gt; Hi Damian,
&gt; &gt; 
&gt; &gt; Greetings! I've read through the metrics-lib and stem.descriptor code and
&gt; &gt; skimmed the directory server specs since you sent me the discussion thread
&gt; &gt; between you and Karsten. I noticed that stem has not been updated during the
&gt; &gt; last ten days, and since I've finished my semester and gone back to China,
&gt; &gt; it's a good time to start doing some substantial work.
&gt; &gt; 
&gt; &gt; In stem.descriptor, we already have counterparts for Descriptor.java,
&gt; &gt; DescriptorReader.java, and ServerDescriptor.java now, and as you mentioned,
&gt; &gt; they pretty much behave in the same way. So for me, a reasonable next step
&gt; &gt; is to build some subclass on top of the base Descriptor class. What do you
&gt; &gt; think? I believe you have discussed this with Karsten, so it will be helpful
&gt; &gt; if you can forward me some of your discussions.
&gt; &gt; 
&gt; &gt; Beck
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120522153407</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-05-22 15:34:07-0400</timestampReceived><subject>[tor-dev] GSoC Introduction - Pluggable Transports in Python</subject><body>

[Attachment #2 (multipart/alternative)]


Hello fellow Tor developers!

Some information about me:

*I worked for EFF/Tor Project last year for **GSoC 2011, my project **was a
blocking-resistant transport evaluation framework:
https://gitweb.torproject.org/user/blanu/blocking-test.git*

I am also the author of a pluggable transport written in python:
https://github.com/blanu/Dust/tree/master/py/dust/services/socks2

I've been working on censorship resistance technology since 2001. Here are
some of my projects:
http://blanu.net/Dust-FOCI.pdf
http://blanu.net/BayesianClassification.pdf
http://blanu.net/Arcadia.pdf
http://blanu.net/Freenet2001.pdf

Some information about the project:

The overall goal of the project is to make it easy for pluggable transports
to be written in python. There has been a lot of interest in doing
pluggable transports in python, but currently they are all written from
scratch. For C transports, obfsproxy can be used to do a lot of the heavy
lifting, making it relatively easy to write a new C-based transport. I've
heard there is also a port of obfsproxy to C++. A the author of a python
transport, I am of course an advocate of writing transports in python.
Fortunately, so are some other Tor folks, so soon it will be easy to write
python transports!

The deliverables for this project are as follows:

*A library for parsing pluggable transport configuration options*

This will be a python library that authors of SOCKS proxies can use to
integrate their proxies with Tor.

*A framework (both server and client-side) for writing pluggable transports
in python*

The framework will provide a SOCKS proxy server already integrated with the
pluggable transport library. All the protocol author will need to do is
provide the obfuscation and de-obfuscation functions and a main function to
do command line parsing and call the framework.

*A python implementation of the obfsproxy command line tool*

This will be a command line program using the framework that will accept
the same command line options as the existing obfsproxy tool. It will
support the selection of an obfuscation function, although not all of the
protocols currently supported by obfsproxy will initially be available in
python.

*A python implementation of the obfs2 protocol implemented as an obfsproxy
module*

The obfs2 protocol will be implemented as a plugin for the framework and
made available to the command line tool.

*Conversion of Dust to an obfsproxy module*

The Dust protocol will be implemented as a plugin for the framework and
made available to the command line tool.

*py2exe packaging for obfsproxy*

The command line tool will be packaged into a standalone executable for
Windows.

Optional deliverables if there is sufficient time: obfsproxy modules for
other protocols, experiment with other packaging systems


Current status:

I'm working on a spec of the API for the option parsing library. It should
be available soon.

[Attachment #5 (text/html)]

Hello fellow Tor developers!&lt;br&gt;&lt;br&gt;Some information about me:&lt;br&gt;&lt;br&gt;&lt;strong \
id="internal-source-marker_0.6368865806143731" \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:medium;vertical-align:baseline;background-color:rgb(246,246,246);font-w \
eight:bold;color:rgb(0,0,0);font-style:normal;font-variant:normal;letter-spacing:norma \
l;line-height:19px;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;font-family:Times"&gt;&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:15px;vertical-align:baseline;background-color:transparent;font-family:Arial;font-weight:normal;white-space:pre-wrap"&gt;I \
worked for EFF/Tor Project last year for &lt;/span&gt;&lt;/strong&gt;&lt;strong \
id="internal-source-marker_0.6368865806143731" \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:medium;vertical-align:b \
aseline;background-color:rgb(246,246,246);font-weight:bold;color:rgb(0,0,0);font-style \
:normal;font-variant:normal;letter-spacing:normal;line-height:19px;text-align:-webkit- \
auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;font-family:Times;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;font-weight:normal;white-space:pre-wrap;background-repeat:initial \
initial"&gt;GSoC 2011, my project &lt;/span&gt;&lt;/strong&gt;&lt;strong \
id="internal-source-marker_0.6368865806143731" \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:medium;vertical-align:b \
aseline;background-color:rgb(246,246,246);font-weight:bold;color:rgb(0,0,0);font-style \
:normal;font-variant:normal;letter-spacing:normal;line-height:19px;text-align:-webkit- \
auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;font-family:Times;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;font-weight:normal;white-space:pre-wrap;background-repeat:initial \
initial"&gt;was a blocking-resistant transport evaluation framework: &lt;/span&gt;&lt;a \
href="https://gitweb.torproject.org/user/blanu/blocking-test.git" \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:16px;vertical-align:bas \
eline;background-color:transparent;color:rgb(0,83,139);text-decoration:underline;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;color:rgb(17,85,204);font-weight:normal;white-space:pre-wrap;background-repeat:initial \
initial"&gt;https://gitweb.torproject.org/user/blanu/blocking-test.git&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
 &lt;br&gt;I am also the author of a pluggable transport written in python: &lt;a \
href="https://github.com/blanu/Dust/tree/master/py/dust/services/socks2"&gt;https://github.com/blanu/Dust/tree/master/py/dust/services/socks2&lt;/a&gt;&lt;br&gt;&lt;br&gt;
 I've been working on censorship resistance technology since 2001. Here are some \
of my projects:&lt;br&gt;&lt;a \
href="http://blanu.net/Dust-FOCI.pdf"&gt;http://blanu.net/Dust-FOCI.pdf&lt;/a&gt;&lt;br&gt;&lt;a \
href="http://blanu.net/BayesianClassification.pdf"&gt;http://blanu.net/BayesianClassification.pdf&lt;/a&gt;&lt;br&gt;
 &lt;a href="http://blanu.net/Arcadia.pdf"&gt;http://blanu.net/Arcadia.pdf&lt;/a&gt;&lt;br&gt;&lt;a \
href="http://blanu.net/Freenet2001.pdf"&gt;http://blanu.net/Freenet2001.pdf&lt;/a&gt;&lt;br&gt;&lt;br&gt;Some \
information about the project:&lt;br&gt;&lt;br&gt;The overall goal of the project is to make it \
easy for pluggable transports to be written in python. There has been a lot of \
interest in doing pluggable transports in python, but currently they are all written \
from scratch. For C transports, obfsproxy can be used to do a lot of the heavy \
lifting, making it relatively easy to write a new C-based transport. I've heard \
there is also a port of obfsproxy to C++. A the author of a python transport, I am of \
course an advocate of writing transports in python. Fortunately, so are some other \
Tor folks, so soon it will be easy to write python transports!&lt;br&gt; &lt;br&gt;&lt;p \
style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span id="internal-source-marker_0.6368865806143731" \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;The deliverables for this project are as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; \
&lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;strong style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px; \
vertical-align:baseline;background-color:transparent;font-weight:bold;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;A library for parsing pluggable transport configuration \
options&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;This will be a python library that authors of SOCKS proxies can use to \
integrate their proxies with Tor.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;strong style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px; \
vertical-align:baseline;background-color:transparent;font-weight:bold;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;A framework (both server and client-side) for writing pluggable transports \
in python&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;The framework will provide a SOCKS proxy server already integrated with the \
pluggable transport library. All the protocol author will need to do is provide the \
obfuscation and de-obfuscation functions and a main function to do command line \
parsing and call the framework.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;strong style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px; \
vertical-align:baseline;background-color:transparent;font-weight:bold;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;A python implementation of the obfsproxy command line \
tool&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;This will be a command line program using the framework that will accept the \
same command line options as the existing obfsproxy tool. It will support the \
selection of an obfuscation function, although not all of the protocols currently \
supported by obfsproxy will initially be available in python.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p \
style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;strong style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px; \
vertical-align:baseline;background-color:transparent;font-weight:bold;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;A python implementation of the obfs2 protocol implemented as an obfsproxy \
module&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;The obfs2 protocol will be implemented as a plugin for the framework and \
made available to the command line tool.&lt;/span&gt;&lt;/span&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;strong style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px; \
vertical-align:baseline;background-color:transparent;font-weight:bold;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ver \
tical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;Conversion of Dust to an obfsproxy module&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span \
style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;The Dust protocol will be implemented as a plugin for the framework and made \
available to the command line tool.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
&lt;p style="margin:0px 0px \
10px;padding:0px;border:0px;outline:0px;font-size:12px;vertical-align:baseline;backgro \
und-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-align:-webkit-auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-repeat:initial \
initial"&gt; &lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:12px;ve \
rtical-align:baseline;background-color:transparent;font-family:Arial;background-repeat:initial \
initial"&gt;&lt;span style="margin:0px;padding:0px;border:0px;outline:0px;font-size:15px;ver \
tical-align:baseline;background-color:transparent;white-space:pre-wrap;background-repeat:initial \
initial"&gt;The command line tool will be packaged into a standalone executable for \
Windows.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px 10px;padding:0px;border:0px \
none;outline:0px none;font-size:12px;vertical-align:baseline;background-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt;
 &lt;span style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial"&gt;&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:15px;vertical-align:baseline;background-color:transparent;white-space:pre-wrap"&gt;Optional \
deliverables if there is sufficient time: obfsproxy modules for other protocols, \
experiment with other packaging systems&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px \
10px;padding:0px;border:0px none;outline:0px \
none;font-size:12px;vertical-align:baseline;background-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt;
 &lt;span style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial"&gt;&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:15px;vertical-align:baseline;background-color:transparent;white-space:pre-wrap"&gt;&lt;br&gt;
 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin:0px 0px 10px;padding:0px;border:0px \
none;outline:0px none;font-size:12px;vertical-align:baseline;background-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt;
 &lt;span style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial"&gt;&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:15px;vertical-align:baseline;background-color:transparent;white-space:pre-wrap"&gt;Current \
status:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin:0px 0px 10px;padding:0px;border:0px \
none;outline:0px none;font-size:12px;vertical-align:baseline;background-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt;
 I'm working on a spec of the API for the option parsing library. It should be \
available soon.&lt;/p&gt;&lt;p style="margin:0px 0px 10px;padding:0px;border:0px \
none;outline:0px none;font-size:12px;vertical-align:baseline;background-color:rgb(246,246,246);line-height:19px;color:rgb(0,0,0);font-family:Arial,'Helvetica \
Neue',Helvetica,sans-serif;font-style:normal;font-variant:normal;font-weight:norma \
l;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px"&gt;
 &lt;br&gt;&lt;span style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:12px;vertical-align:baseline;background-color:transparent;font-family:Arial"&gt;&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:0px \
none;font-size:15px;vertical-align:baseline;background-color:transparent;white-space:pre-wrap"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120506010221</emailId><senderName></senderName><senderEmail>sc28</senderEmail><timestampReceived>2012-05-06 01:02:21-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Karsten &amp; Damian,

Extending stem to implement #2768 seems a good option to start with; I  
looked at the Java code and felt doing it in stem should not be  
complicated. However, I need some suggestions for the choice of Python  
cryptography API, since I haven't used any before. A simple Google  
search says PyCrypto. I believe you have an answer, Damian.

Cheers,
Beck

Quoting Karsten Loesing &lt;karsten@torproject.org&gt;:

&gt; [Moving this thread to tor-dev as suggested by Damian in separate mail.]
&gt;
&gt; Hi Damian, hi Beck,
&gt;
&gt; There are quite a few options.
&gt;
&gt; How about extending stem to implement #2768?  There's already Java code
&gt; for verifying server descriptors and consensuses in metrics-tasks.git
&gt; [0].  On stem's side this requires parsing the crypto parts of server
&gt; descriptors, consensuses, and certificates.  If the network statuses
&gt; aren't there yet, starting with server descriptors should be fine.  And
&gt; once there's verification code for server descriptors and consensuses,
&gt; there are more things to verify in Tor's various descriptors.
&gt;
&gt; Another option would be to write the parsing code for extra-info
&gt; descriptors including all the stats.  Once we have consensuses, server
&gt; descriptors, and extra-info descriptors in stem, we can start writing a
&gt; Python version of Onionoo [1], the service that provides the data for
&gt; Atlas [2].
&gt;
&gt; Let me know if you need more options or more input on these.
&gt;
&gt; Thanks,
&gt; Karsten
&gt;
&gt; [0] https://gitweb.torproject.org/metrics-tasks.git/tree/HEAD:/task-2768
&gt;
&gt; [1] https://www.torproject.org/projects/onionoo.html.en
&gt;
&gt; [2] https://atlas.torproject.org/

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120521143458</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-21 14:34:58-0400</timestampReceived><subject>[tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

Hi Damian,

I plan to make a few changes to the bridge descriptor sanitizer to
implement changes discussed on this list and in various Trac tickets.
The result will be format version 1.0.  Here's what will change compared
to the current (unversioned) format.  Can you take a look whether stem
would be happy with these descriptors and if there are other tweaks I
should do to make it even happier?

- Bridge network statuses contain a "published" line containing the
publication timestamp, so that parsers don't have to learn that
timestamp from the file name anymore.

- Bridge network status entries are ordered by hex-encoded fingerprint,
not by base64-encoded fingerprint, which is mostly a cosmetic change.

- Server descriptors and extra-info descriptors are stored under the
SHA1 hashes of the descriptor identifiers of their non-scrubbed forms.
Previously, descriptors were (supposed to be; see #5607) stored under
the digests of their scrubbed forms.  The reason for hashing digests is
to prevent looking up an existing descriptor from the bridge authority
by its non-scrubbed descriptor digest.  With this change, we don't have
to repair references between statuses, server descriptors, and
extra-info descriptors anymore which turned out to be error-prone
(#5608).  Server descriptors and extra-info descriptors contain a new
"router-digest" line with the hex-formatted descriptor identifier.
These lines are necessary, because we cannot calculate the identifier
anymore and because we don't want to rely on the file name.

- Bridge nicknames (#5684) in all descriptor types and dirreq-*
statistics lines (#5807) in extra-info descriptors are not sanitized
anymore.

- All sanitized bridge descriptors contain @type annotations (#5651).

Please let me know what you think about these changes.  I plan to start
sanitizing descriptors with the described changes tomorrow or the day
after and make them available on May 30 (or later if the
sanitizing/compressing/uploading takes much longer than expected).

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120522072441</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-22 07:24:41-0400</timestampReceived><subject>[tor-dev] Fwd: Re: Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Forwarding my original answer to Sebastian here.

-------- Original Message --------
Subject: Re: [tor-dev] Can we stop sanitizing nicknames in bridge
descriptors?
Date: Mon, 21 May 2012 19:56:34 +0200
From: Karsten Loesing &lt;karsten@torproject.org&gt;
To: Sebastian G. &lt;bastik.tor&gt; &lt;bastik.tor@googlemail.com&gt;

Hi Sebastian,

On 5/21/12 7:08 PM, Sebastian G. &lt;bastik.tor&gt; wrote:

(Did you intend to send this mail only to me, not to tor-dev?  Feel free
to move the discussion back to tor-dev if you want.)

&gt; Karsten Loesing, 21.05.2012 11:05:
&gt;&gt;&gt;
&gt;&gt;&gt; Here we go with the similarities of bridge and relay nicknames.
&gt;&gt;
&gt;&gt; Thanks for spending this much time on the analysis!
&gt; 
&gt; I could have done far worse, but also a lot better in terms of time
&gt; spend on extracting the data that I wanted or at least considered that
&gt; they'd might be useful.
&gt; 
&gt; Sometimes I'm just slow at things, e.g. writing this reply.
&gt; 
&gt;&gt; Here's what I did with your findings.txt:
&gt;&gt;
&gt;&gt; - extract unique fingerprint pairs of relays and bridges that you found
&gt;&gt; as having similar nicknames,
&gt;&gt;
&gt;&gt; - look through descriptor archives to see if relay and bridge were
&gt;&gt; running in the same /24 at any time in May 2008, and
&gt;&gt;
&gt;&gt; - determine the absolute and relative number of bridges in a given
&gt;&gt; network status that could have been located via nickname similarity.
&gt;&gt;
&gt;&gt; Results are that 24 of your 81 guesses (30%) were correct in the sense
&gt;&gt; that a bridge was at least once running in the same /24 as the relay
&gt;&gt; with similar nickname.  At any time in May 2008, you'd have located
&gt;&gt; between 1 and 6 bridges (2.5% to 18%) with 3 bridges (10%) in the mean
&gt;&gt; via nickname similarity.
&gt; 
&gt; Not too bad.

I agree. :)

&gt;&gt; I think it's acceptable to publish more recent bridge descriptors with
&gt;&gt; nicknames in a week from now.  Results may look quite different with
&gt;&gt; 1000 bridges instead of 30.
&gt; 
&gt; May 2008 was the first month with bridges. I expected lot's of relay
&gt; operators that tested a bridge with the same name. Things may have
&gt; changed over time. I assume that further comparisons won't have such a
&gt; "high" hit ratio.

That would be my guess, too.  In May 2008, only a few early adopters
were running bridges, and most of those probably ran relays at the same
time, too.  Plus, they were enthusiastic and put some energy in finding
cool nicknames.  It might be that this has changed since then.  To be
honest, I didn't look at 2012 tarballs yet.

&gt;&gt; Again, thanks for running this analysis!  Maybe you're interested in
&gt;&gt; automating your comparison and re-running it for a 2012 tarball?
&gt; 
&gt; My claim was you got the data, so you can check. (Not with May 2008)
&gt; 
&gt; To be honest, my first impression was that I wouldn't do anything useful
&gt; and did not intend to do that. I guessed it wouldn't turn out that it
&gt; doesn't hurt since at least 2011, so I wouldn't find anything good.
&gt; 
&gt; Then you asked and I agreed, but already thought "I couldn't keep my
&gt; mouth shut!". I mean I replied to this topic. I surely could have said
&gt; no there. I didn't.
&gt; 
&gt; After and while I was doing what I did. I would have said no to the
&gt; question if I'm going to do this again. That's valid for up to Sunday
&gt; night. Today I'm agreeing again.
&gt; 
&gt; That's a pretty long way to say: Yes!

Hah, great! :)

I'm going to make the 2012 tarballs available next Wednesday (May 30),
assuming that my poor Linux box doesn't run out of $resource.  I'll let
you know.

&gt; Thank you,it's an 2012 tarball. The number of bridges is scary.
&gt; 
&gt; I'm going to upload some files somewhere and explain what I did. Step by
&gt; step (somewhat around that). So anyone can check and reproduce what I
&gt; did. It would be nice to hear feedback and ways to improve the way I did
&gt; what I did.
&gt; 
&gt; Maybe you can tell me if the findings.txt was alright.

Yes, the file format was fine.

&gt; Unless one objects or you disagree I'm going to upload the files I
&gt; created and explain how and maybe I can say even why.

No objections at all.  Open discussion is good.

&gt; I created a Blog, just because I wanted it some when in the past, but
&gt; found it silly. That's the channel I planed to use. Maybe it's OK to put
&gt; it on a Tor-List as well, but maybe it's considered as noise.

I wonder if the Tor wiki would be a better place to collect ideas for
reversing the bridge descriptor sanitizing process.  Feel free to grab a
new page in doc/ and start describing what you did.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120522163818</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-22 16:38:18-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re: Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 22.05.2012 09:24:
&gt; Forwarding my original answer to Sebastian here.

To fix this, I have to reply again.

&gt; Hi Sebastian,
&gt; 
&gt; On 5/21/12 7:08 PM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; 
&gt; (Did you intend to send this mail only to me, not to tor-dev?  Feel free
&gt; to move the discussion back to tor-dev if you want.)

That was my fault and not intended.


&gt; I'm going to make the 2012 tarballs available next Wednesday (May 30),
&gt; assuming that my poor Linux box doesn't run out of $resource.  I'll let
&gt; you know.

It doesn't matter when they will be available.


&gt;&gt; Unless one objects or you disagree I'm going to upload the files I
&gt;&gt; created and explain how and maybe I can say even why.
&gt; 
&gt; No objections at all.  Open discussion is good.
&gt; 
&gt;&gt; I created a Blog, just because I wanted it some when in the past, but
&gt;&gt; found it silly. That's the channel I planed to use. Maybe it's OK to put
&gt;&gt; it on a Tor-List as well, but maybe it's considered as noise.
&gt; 
&gt; I wonder if the Tor wiki would be a better place to collect ideas for
&gt; reversing the bridge descriptor sanitizing process.  Feel free to grab a
&gt; new page in doc/ and start describing what you did.
&gt; 

That sounds like a reasonable idea.

(now everything should be back on the list).

Best,
Sebastian

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120526073041</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-26 07:30:41-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re: Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 22.05.2012 09:24:
&gt;&gt; Unless one objects or you disagree I'm going to upload the files I
&gt;&gt; created and explain how and maybe I can say even why.
&gt; 
&gt; No objections at all.  Open discussion is good.
&gt; 
&gt;&gt; I created a Blog, just because I wanted it some when in the past, but
&gt;&gt; found it silly. That's the channel I planed to use. Maybe it's OK to put
&gt;&gt; it on a Tor-List as well, but maybe it's considered as noise.
&gt; 
&gt; I wonder if the Tor wiki would be a better place to collect ideas for
&gt; reversing the bridge descriptor sanitizing process.  Feel free to grab a
&gt; new page in doc/ and start describing what you did.
&gt; 

I did just that.

https://trac.torproject.org/projects/tor/wiki/doc/DataExtractionForComparison

I created it three days ago and didn't touch it since then. Mainly
because I can't make it much prettier.

You can comment on it, when you use the cypherpunks account, in case you
don't have an account on the wiki.

Alternatively you can leave a comment on the blog.
https://roastedonion.wordpress.com/2012/05/23/how-i-extracted-the-data/
https://roastedonion.wordpress.com/2012/05/23/the-method-of-extraction/

As for now you don't need to enter an email address, I may change that,
when there's trouble. e.g. SPAM.

Regards,
bastik_tor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120529174354</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-29 17:43:54-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re: Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/26/12 9:30 AM, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; Karsten Loesing, 22.05.2012 09:24:
&gt;&gt;&gt; Unless one objects or you disagree I'm going to upload the files I
&gt;&gt;&gt; created and explain how and maybe I can say even why.
&gt;&gt;
&gt;&gt; No objections at all.  Open discussion is good.
&gt;&gt;
&gt;&gt;&gt; I created a Blog, just because I wanted it some when in the past, but
&gt;&gt;&gt; found it silly. That's the channel I planed to use. Maybe it's OK to put
&gt;&gt;&gt; it on a Tor-List as well, but maybe it's considered as noise.
&gt;&gt;
&gt;&gt; I wonder if the Tor wiki would be a better place to collect ideas for
&gt;&gt; reversing the bridge descriptor sanitizing process.  Feel free to grab a
&gt;&gt; new page in doc/ and start describing what you did.
&gt;&gt;
&gt; 
&gt; I did just that.
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/doc/DataExtractionForComparison

Thanks for creating that page.  Looks line a fine start, though you'll
want to automate more things when looking at 2012 tarballs.

grep and friends are fine tools to process Tor descriptors.  If you can,
find a Unix/Linux-like environment for Windows (Cygwin?) and combine the
powers of grep with sort, uniq, and maybe sed or awk.  These tools are
friggin' fast!

If you're comfortable with Java and want to do more fancy stuff with Tor
descriptors, take a look at metrics-lib:

https://gitweb.torproject.org/metrics-lib.git

If you're a Python person, you'll like stem, even though it only
implements parsing of a subset of Tor descriptors.  More to come soon:

https://gitweb.torproject.org/stem.git

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120521155549</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-05-21 15:55:49-0400</timestampReceived><subject>Re: [tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

Hi Karsten.

&gt; - Bridge network statuses contain a "published" line

Oh, I didn't realize that there was a consensus that included bridges.
Mind explaining where they come from and what they're for? Which
category can I find these in on the metrics data page?

I haven't implemented network status entries yet so changes there
aren't a concern, though it would be useful for me to have one as an
example.

&gt; Server descriptors and extra-info descriptors are stored under the SHA1 hashes of \
&gt; the descriptor identifiers of their non-scrubbed forms.

Stem provides its caller with the descriptor's path but doesn't try to
do anything with it, so this isn't a concern.

&gt; Server descriptors and extra-info descriptors contain a new "router-digest" line \
&gt; with the hex-formatted descriptor identifier.

Not following. Is this new 'router-digest' entry only in the bridge
descriptors? Is it a bridge equivalent for a relay server descriptor's
'fingerprint' field? Again, an example of the new descriptors would be
nice to have.

&gt; Bridge nicknames (#5684) in all descriptor types

Minor tweak for the is_scrubbed() method, but that's all.

&gt; ... and dirreq-* statistics lines (#5807) in extra-info descriptors are not \
&gt; sanitized anymore.

I didn't realize that bridge extrainfo descriptors _were_ sanitized.
What section of the format page details the scrubbing for those?

I've never tried running the stem parser over a bridge extrainfo
descriptor, so again an example would be useful. :)

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120521171931</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-21 17:19:31-0400</timestampReceived><subject>Re: [tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

Hi Damian,

On 5/21/12 5:55 PM, Damian Johnson wrote:
&gt; Hi Karsten.
&gt; 
&gt; &gt; - Bridge network statuses contain a "published" line
&gt; 
&gt; Oh, I didn't realize that there was a consensus that included bridges.
&gt; Mind explaining where they come from and what they're for?

The bridge authority generates a bridge network status that it copies to
the BridgeDB host and to the metrics server twice per hour.  The bridge
network status contains (relay) flags like Running and Stable that
BridgeDB uses to decide which bridges to give out.  Metrics uses the
bridge network status to graph the number of running bridges.

&gt; Which
&gt; category can I find these in on the metrics data page?

The bridge descriptor tarballs contain bridge network statuses, server
descriptors, and extra-info descriptors.  See:

https://metrics.torproject.org/data.html#bridgedesc

&gt; I haven't implemented network status entries yet so changes there
&gt; aren't a concern, though it would be useful for me to have one as an
&gt; example.

You'll find an example here:

https://metrics.torproject.org/formats.html#bridgedesc

(I'll also include an example of the suggested format below.)

&gt; &gt; Server descriptors and extra-info descriptors are stored under the SHA1 hashes of \
&gt; &gt; the descriptor identifiers of their non-scrubbed forms.
&gt; 
&gt; Stem provides its caller with the descriptor's path but doesn't try to
&gt; do anything with it, so this isn't a concern.

Okay.

&gt; &gt; Server descriptors and extra-info descriptors contain a new "router-digest" line \
&gt; &gt; with the hex-formatted descriptor identifier.
&gt; 
&gt; Not following. Is this new 'router-digest' entry only in the bridge
&gt; descriptors?

Yes, it would be only in bridge server descriptors and in bridge
extra-info descriptors.  For relay descriptors, you'd determine the
descriptor identifier by calculating the SHA1 of "router
[...]\nrouter-signature\n" or "extra-info [...]\nrouter-signature\n".
This wouldn't be possible anymore with bridge descriptors anymore,
because we'd change some lines or line parts in the sanitizing process.
 Therefore the extra "router-digest" line.

&gt; Is it a bridge equivalent for a relay server descriptor's
&gt; 'fingerprint' field?

No, the fingerprint is the identity key digest, whereas the descriptor
identifier is the descriptor digest.

&gt; Again, an example of the new descriptors would be
&gt; nice to have.

Sure.  The bridge network status entry below references the server
descriptor via AG/Za6N (base64) = 006FD96B (hex) which in turn
references the extra-info descriptor via 068A2E28.

@type bridge-network-status 1.0
published 2012-04-16 11:37:05
[...]
r ididnteditheconfig Pp+Rv3MgCzkgeoaIx4uHnGaz0Yo
AG/Za6Ned4Wmo7i3X+LiQ1oTvbQ 2012-04-15 22:04:22 10.32.143.78 40187 0
s Fast Guard Running Stable Valid
w Bandwidth=55
p reject 1-65535
[...]

@type bridge-server-descriptor 1.0
router ididnteditheconfig 10.32.143.78 40187 0 0
platform Tor 0.2.2.35 (git-73ff13ab3cc9570d) on Linux x86_64
opt protocols Link 1 2 Circuit 1
published 2012-04-15 22:04:22
opt fingerprint 3E9F 91BF 7320 0B39 207A 8688 C78B 879C 66B3 D18A
uptime 2
bandwidth 204800 204800 55794
opt extra-info-digest 068A2E28D4C934D9490303B7A645BA068DCA0504
opt hidden-service-dir
reject *:*
router-digest 006FD96BA35E7785A6A3B8B75FE2E2435A13BDB4

@type bridge-extra-info 1.0
extra-info ididnteditheconfig 3E9F91BF73200B39207A8688C78B879C66B3D18A
published 2012-04-15 22:04:22
[...]
router-digest 068A2E28D4C934D9490303B7A645BA068DCA0504

&gt; &gt; Bridge nicknames (#5684) in all descriptor types
&gt; 
&gt; Minor tweak for the is_scrubbed() method, but that's all.

Great.

&gt; &gt; ... and dirreq-* statistics lines (#5807) in extra-info descriptors are not \
&gt; &gt; sanitized anymore.
&gt; 
&gt; I didn't realize that bridge extrainfo descriptors _were_ sanitized.
&gt; What section of the format page details the scrubbing for those?

Aha, good catch, that's not mentioned on the format page.  Right now,
dirreq-*, cell-*, and exit-* lines are completely removed.  #5807 is
about leaving dirreq-* lines in.  I'll update the format page next week
when the new tarballs are available.

&gt; I've never tried running the stem parser over a bridge extrainfo
&gt; descriptor, so again an example would be useful. :)

Plenty of examples available, e.g.,

https://metrics.torproject.org/data/bridge-descriptors-2012-05.tar.bz2

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120522065749</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-22 06:57:49-0400</timestampReceived><subject>Re: [tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

On 5/21/12 7:19 PM, Karsten Loesing wrote:
&gt; On 5/21/12 5:55 PM, Damian Johnson wrote:
&gt;&gt; I didn't realize that bridge extrainfo descriptors _were_ sanitized.
&gt;&gt; What section of the format page details the scrubbing for those?
&gt; 
&gt; Aha, good catch, that's not mentioned on the format page.  Right now,
&gt; dirreq-*, cell-*, and exit-* lines are completely removed.  #5807 is
&gt; about leaving dirreq-* lines in.  I'll update the format page next week
&gt; when the new tarballs are available.

After thinking more about it, I came to the conclusion that we should
stop sanitizing *-stats lines at all.  As you pointed out, we never said
that we'd sanitize them, so I tried to draft a sentence or two why we
remove cell-* and exit-* lines.  But I failed to come up with a good
reason.  Removing those lines doesn't hide bridge locations any better
than leaving them in.

As a result, the only thing that's sanitized in extra-info descriptors
is the bridge fingerprint, similar to how it's sanitized in server
descriptors.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120523172749</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-05-23 17:27:49-0400</timestampReceived><subject>Re: [tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

Thanks, Karsten!

&gt; The bridge descriptor tarballs contain bridge network statuses, server
&gt; descriptors, and extra-info descriptors.  See:
&gt;
&gt; https://metrics.torproject.org/data.html#bridgedesc

Oops, I read 'contain similar documents as the relay descriptor
archives' as being server descriptors. Maybe in this first sentence it
should explicitly say that it's a bundled batch of network status,
server descriptors, and extra-info descriptors?

&gt; You'll find an example here:
&gt;
&gt; https://metrics.torproject.org/formats.html#bridgedesc
&gt;
&gt; (I'll also include an example of the suggested format below.)

Oops again. Didn't figure that we'd use the same scrubbing description
for both. Personally I'd find it more intuitive if we had separate
sections for both, though I see why you did it this way.

&gt; No, the fingerprint is the identity key digest, whereas the descriptor
&gt; identifier is the descriptor digest.

Gotcha. Added support for the router-digest lines and flagged them as
being required for bridge server descriptors...
https://gitweb.torproject.org/stem.git/commitdiff/e7e03d2f61d6dcc7bc5e5ad4dee91c37a814ee16

&gt;&gt; Minor tweak for the is_scrubbed() method, but that's all.
&gt;
&gt; Great.

Changed...
https://gitweb.torproject.org/stem.git/commitdiff/f7fb726cc3dea8bfd294833b151117858490802d

&gt; After thinking more about it, I came to the conclusion that we should
&gt; stop sanitizing *-stats lines at all.

In that case the 'router-signature' lines are the only ones being
scrubbed out of bridge extra-info descriptors, right? If so then we
don't need a 'router-digest' here since the digest can be calculated
from the (now unscrubbed) content - right?

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120506013650</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-05-06 01:36:50-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Beck, hi Karsten.

First I'd like to make sure that I'm clear on what we're trying to do.
The javadocs for VerifyDescriptors [1] says that it...

&gt; Verify server descriptors using the contained signing key.  Verify that
&gt; 1) a contained fingerprint is actually a hash of the signing key and
&gt; 2) a router signature was created using the signing key.
&gt; 
&gt; Verify consensuses using the separate certs.  Verify that
&gt; 1) the fingerprint in a cert is actually a hash of the identity key,
&gt; 2) a cert was signed using the identity key,
&gt; 3) a consensus was signed using the signing key from the cert.

Honestly I'm not yet sure what most of this means. The first #2 is
simply checking that the descriptor content can be verified using the
router-signature and signing-key, right? If so then this sounds like a
good place to start since it's entirely self-contained within the
descriptor and just involves implementation and testing of...

https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py#l624


&gt; However, I need some suggestions for the choice of Python cryptography API, since I \
&gt; haven't used any before.

Nor have I. At present stem does not have any dependencies outside of
python's builtin functions. If we need PyCrypto and it's the best
choice then so be it, but be sure to wrap the imports in a try/catch
so we only raise an ImportError when executing the function that
requires the PyCrypto library.

Cheers! -Damian

[1] https://gitweb.torproject.org/metrics-tasks.git/blob/HEAD:/task-2768/VerifyDescriptors.java
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120507091347</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-07 09:13:47-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On 5/6/12 3:36 AM, Damian Johnson wrote:
&gt; First I'd like to make sure that I'm clear on what we're trying to do.
&gt; The javadocs for VerifyDescriptors [1] says that it...
&gt; 
&gt;&gt; Verify server descriptors using the contained signing key.  Verify that
&gt;&gt; 1) a contained fingerprint is actually a hash of the signing key and
&gt;&gt; 2) a router signature was created using the signing key.
&gt;&gt;
&gt;&gt; Verify consensuses using the separate certs.  Verify that
&gt;&gt; 1) the fingerprint in a cert is actually a hash of the identity key,
&gt;&gt; 2) a cert was signed using the identity key,
&gt;&gt; 3) a consensus was signed using the signing key from the cert.
&gt; 
&gt; Honestly I'm not yet sure what most of this means. The first #2 is
&gt; simply checking that the descriptor content can be verified using the
&gt; router-signature and signing-key, right?

Yup.  But you also need the first #1, or metrics-db could modify server
descriptors at will, put in its own key, and re-sign the descriptor with
that key, and stem would think everything's valid.

&gt; If so then this sounds like a
&gt; good place to start since it's entirely self-contained within the
&gt; descriptor and just involves implementation and testing of...
&gt; 
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/server_descriptor.py#l624

Sounds good.

For other descriptors than server descriptors, you may want to have a
similar method that accepts the signing key.  In the case of certs and
consensuses you'd have an is_valid() method for certs, a getter in the
cert class to obtain the signing key, and an is_valid(signing_key) in
the consensus class.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120507174923</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-07 17:49:23-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

[Attachment #2 (multipart/alternative)]


On Mon, May 7, 2012 at 5:13 PM, Karsten Loesing &lt;karsten@torproject.org&gt;wrote:

&gt; On 5/6/12 3:36 AM, Damian Johnson wrote:
&gt; &gt; First I'd like to make sure that I'm clear on what we're trying to do.
&gt; &gt; The javadocs for VerifyDescriptors [1] says that it...
&gt; &gt;
&gt; &gt;&gt; Verify server descriptors using the contained signing key.  Verify that
&gt; &gt;&gt; 1) a contained fingerprint is actually a hash of the signing key and
&gt; &gt;&gt; 2) a router signature was created using the signing key.
&gt; &gt;&gt;
&gt; &gt;&gt; Verify consensuses using the separate certs.  Verify that
&gt; &gt;&gt; 1) the fingerprint in a cert is actually a hash of the identity key,
&gt; &gt;&gt; 2) a cert was signed using the identity key,
&gt; &gt;&gt; 3) a consensus was signed using the signing key from the cert.
&gt; &gt;
&gt; &gt; Honestly I'm not yet sure what most of this means. The first #2 is
&gt; &gt; simply checking that the descriptor content can be verified using the
&gt; &gt; router-signature and signing-key, right?
&gt;
&gt; Yup.  But you also need the first #1, or metrics-db could modify server
&gt; descriptors at will, put in its own key, and re-sign the descriptor with
&gt; that key, and stem would think everything's valid.


Then is it possible that metrics-db modifies the fingerprint at the same
time
so that the first #1 would pass? Any why would metrics-db try to do this at
all?

Cheers,
Beck

[Attachment #5 (text/html)]

&lt;div class="gmail_quote"&gt;On Mon, May 7, 2012 at 5:13 PM, Karsten Loesing &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:karsten@torproject.org" \
target="_blank"&gt;karsten@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

&lt;div class="im"&gt;On 5/6/12 3:36 AM, Damian Johnson wrote:&lt;br&gt;
&gt; First I'd like to make sure that I'm clear on what we're trying to \
do.&lt;br&gt; &gt; The javadocs for VerifyDescriptors [1] says that it...&lt;br&gt;
&gt;&lt;br&gt;
&gt;&gt; Verify server descriptors using the contained signing key.  Verify that&lt;br&gt;
&gt;&gt; 1) a contained fingerprint is actually a hash of the signing key and&lt;br&gt;
&gt;&gt; 2) a router signature was created using the signing key.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Verify consensuses using the separate certs.  Verify that&lt;br&gt;
&gt;&gt; 1) the fingerprint in a cert is actually a hash of the identity key,&lt;br&gt;
&gt;&gt; 2) a cert was signed using the identity key,&lt;br&gt;
&gt;&gt; 3) a consensus was signed using the signing key from the cert.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Honestly I'm not yet sure what most of this means. The first #2 is&lt;br&gt;
&gt; simply checking that the descriptor content can be verified using the&lt;br&gt;
&gt; router-signature and signing-key, right?&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Yup.  But you also need the first #1, or metrics-db could modify server&lt;br&gt;
descriptors at will, put in its own key, and re-sign the descriptor with&lt;br&gt;
that key, and stem would think everything's valid.&lt;/blockquote&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;Then is it possible that metrics-db modifies the fingerprint at the same \
time &lt;/div&gt;&lt;div&gt;so that the first #1 would pass? Any why would metrics-db try to do \
this at&lt;/div&gt;

&lt;div&gt;all?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Beck&lt;/div&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120507181744</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-07 18:17:44-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On 5/7/12 7:49 PM, Beck Chen wrote:
&gt; On Mon, May 7, 2012 at 5:13 PM, Karsten Loesing &lt;karsten@torproject.org&gt;wrote:
&gt; 
&gt;&gt; On 5/6/12 3:36 AM, Damian Johnson wrote:
&gt;&gt;&gt; First I'd like to make sure that I'm clear on what we're trying to do.
&gt;&gt;&gt; The javadocs for VerifyDescriptors [1] says that it...
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Verify server descriptors using the contained signing key.  Verify that
&gt;&gt;&gt;&gt; 1) a contained fingerprint is actually a hash of the signing key and
&gt;&gt;&gt;&gt; 2) a router signature was created using the signing key.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Verify consensuses using the separate certs.  Verify that
&gt;&gt;&gt;&gt; 1) the fingerprint in a cert is actually a hash of the identity key,
&gt;&gt;&gt;&gt; 2) a cert was signed using the identity key,
&gt;&gt;&gt;&gt; 3) a consensus was signed using the signing key from the cert.
&gt;&gt;&gt;
&gt;&gt;&gt; Honestly I'm not yet sure what most of this means. The first #2 is
&gt;&gt;&gt; simply checking that the descriptor content can be verified using the
&gt;&gt;&gt; router-signature and signing-key, right?
&gt;&gt;
&gt;&gt; Yup.  But you also need the first #1, or metrics-db could modify server
&gt;&gt; descriptors at will, put in its own key, and re-sign the descriptor with
&gt;&gt; that key, and stem would think everything's valid.
&gt; 
&gt; Then is it possible that metrics-db modifies the fingerprint at the same
&gt; time so that the first #1 would pass?

Right, but when the fingerprint changes, we consider the descriptor as
coming from a different relay.  If metrics-db wanted to fake descriptors
of a known relay and stem only checked #2, stem would be fooled here.
With #1 it wouldn't.

Note that for most analyses you'd start with the consensus and only look
at referenced descriptors by their SHA digest, which rules out
modifications like the one discussed above.  But if there's a method in
the server descriptor class to check whether it is valid it should check
#1 and #2.

Robert may have a more complete list of things that need to be checked
in descriptors of all sorts.  I just asked him in #2768 for such a list.

&gt; Any why would metrics-db try to do this at all?

Well, it wouldn't.  But why trust it when you can check yourself?

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120508021758</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-08 02:17:58-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

[Attachment #2 (multipart/alternative)]


I observed some inconsistency, if not errors, in the directory server specs
[1]:

1. Outline
   Every authority has a very-secret, long-term "Authority Identity Key".
   This is stored encrypted and/or offline, and is used to sign "key
   certificate" documents.  Every key certificate contains a medium-term
   (3-12 months) "authority signing key", that is used by the authority to
   sign other directory information.

2.1. Router descriptor format

   "fingerprint" fingerprint NL
       [At most once]
       A fingerprint (a HASH_LEN-byte of asn1 encoded public key, encoded in
       hex, with a single space after every 4 characters) for this router's
       identity key. A descriptor is considered invalid (and MUST be
       rejected) if the fingerprint line does not match the public key.

    "signing-key" NL a public key in PEM format
       [Exactly once]
       The OR's long-term identity key.  It MUST be 1024 bits.

According to the outline, the long-term identity key should be different
from the
signing key, which changes every 3-12 months. Then why should the signing
key
become the identity key in the descriptor format, and fingerprint become
the hash
of the identity key?

Cheers,
Beck

[1]
https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=dir-spec.txt

[Attachment #5 (text/html)]

&lt;div&gt;I observed some inconsistency, if not errors, in the directory server specs \
[1]:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Outline&lt;/div&gt;&lt;div&gt;   Every authority has a \
very-secret, long-term "Authority Identity Key".&lt;/div&gt;&lt;div&gt;

   This is stored encrypted and/or offline, and is used to sign "key&lt;/div&gt;&lt;div&gt;  \
certificate" documents.  Every key certificate contains a medium-term&lt;/div&gt;&lt;div&gt; \
(3-12 months) "authority signing key", that is used by the authority \
to&lt;/div&gt;

&lt;div&gt;   sign other directory information.&lt;/div&gt;&lt;div&gt;   &lt;/div&gt;&lt;div&gt;2.1. Router \
descriptor format&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   "fingerprint" fingerprint \
NL&lt;/div&gt;&lt;div&gt;       [At most once]&lt;/div&gt;&lt;div&gt;       A fingerprint (a HASH_LEN-byte of \
asn1 encoded public key, encoded in&lt;/div&gt;

&lt;div&gt;       hex, with a single space after every 4 characters) for this \
router's&lt;/div&gt;&lt;div&gt;       identity key. A descriptor is considered invalid (and \
MUST be&lt;/div&gt;&lt;div&gt;       rejected) if the fingerprint line does not match the public \
key.&lt;/div&gt;

&lt;div&gt;&lt;span class="Apple-tab-span" style="white-space:pre"&gt;	&lt;/span&gt;   &lt;/div&gt;&lt;div&gt;    \
"signing-key" NL a public key in PEM format&lt;/div&gt;&lt;div&gt;       [Exactly \
once]&lt;/div&gt;&lt;div&gt;       The OR's long-term identity key.  It MUST be 1024 \
bits.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;According to the outline, the long-term identity key should be \
different from the &lt;/div&gt;&lt;div&gt;signing key, which changes every 3-12 months. Then why \
should the signing key&lt;/div&gt;&lt;div&gt;become the identity key in the descriptor format, \
and fingerprint become the hash&lt;/div&gt;

&lt;div&gt;of the identity \
key?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Beck&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=dir-spec.txt"&gt;h \
ttps://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=dir-spec.txt&lt;/a&gt;&lt;/div&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120508024729</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-05-08 02:47:29-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On 5/8/12, Beck Chen &lt;csybeck@gmail.com&gt; wrote:

&gt; According to the outline, the long-term identity key should be different
&gt; from the
&gt; signing key, which changes every 3-12 months. Then why should the signing
&gt; key
&gt; become the identity key in the descriptor format, and fingerprint become
&gt; the hash
&gt; of the identity key?

The ‘relay identity key' is not the same as the ‘authority identity
key'.  The ‘relay identity key' might also be different from the
‘directory signing key'; I'm not sure about that.

Descriptors contain and are signed with the ‘relay identity key', and
the fingerprint in a descriptor is the hash of the relay identity key.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120508070518</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-08 07:05:18-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On 5/8/12 4:47 AM, Robert Ransom wrote:
&gt; On 5/8/12, Beck Chen &lt;csybeck@gmail.com&gt; wrote:
&gt; 
&gt;&gt; According to the outline, the long-term identity key should be different
&gt;&gt; from the
&gt;&gt; signing key, which changes every 3-12 months. Then why should the signing
&gt;&gt; key
&gt;&gt; become the identity key in the descriptor format, and fingerprint become
&gt;&gt; the hash
&gt;&gt; of the identity key?
&gt; 
&gt; The ‘relay identity key' is not the same as the ‘authority identity
&gt; key'. The ‘relay identity key' might also be different from the
&gt; ‘directory signing key'; I'm not sure about that.

Relay identity key and directory signing key are indeed different.

Think of the authority identity key and directory signing key as a
different layer on top of stuff that all relays do.  When a relay
becomes a directory authority, the operator creates an offline authority
identity key and uses it to create an online directory signing key.
When the directory signing key expires, which usually happens once per
year, the operator creates a new one using the authority identity key
and uploads it.  The relay identity key and authority identity key
usually stay the same for a long time.

For example, here are the long-term keys for gabelmoo (from
src/or/config.c):

"gabelmoo orport=443 no-v2 "
  "v3ident=ED03BB616EB2F60BEC80151114BB25CEF515B226 "
  "212.112.245.170:80 F204 4413 DAC2 E02E 3D6B CF47 35A1 9BCA 1DE9 7281",

The ED03... part is the hash of the authority identity key, the F204...
part is the relay identity.  The directory signing key is not
hard-coded.  You can find all directory signing keys here:

https://metrics.torproject.org/data/certs.tar.bz2

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120509142621</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-09 14:26:21-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Damian &amp; Karsten,

I created ticket #5810 about this and CCed both of you:
https://trac.torproject.org/projects/tor/ticket/5810
Just want to make sure you guys are notified.

Beck

[Attachment #5 (text/html)]

Hi Damian &amp; Karsten,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I created ticket #5810 about this and \
CCed both of you:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/5810" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/5810&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;Just want to make sure you guys are \
notified.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Beck&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120513070412</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-13 07:04:12-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Karsten &amp; Damian,

I've been trying to port function determineKeyHash() from
VerifyDescriptors.java to stem, and it turned out to be more
complicated than I thought due to my unfamiliarity to many
cryptography terms and standards. I finally figured out a way to do it
by using a light-weighted library called Python-RSA, and it solved my
problem in no more than 5 lines of code. I realized that I should get
better understanding of some basic stuff before I move on.

Here's the python code that verifies the key hash:
&gt;&gt; import rsa, hashlib
&gt;&gt; pubkey = rsa.PublicKey.load_pkcs1(desc.signing_key)
&gt;&gt; der_encoded = pubkey.save_pkcs1(format = "DER")
&gt;&gt; hashlib.sha1(der_encoded).hexdigest() == desc.fingerprint.lower()
True

1. Specs says signing key is "a public key in PEM format" [1], but
what standard does it use? I tried to use M2Crypto, a Python wrapper
for OpenSSL, to import this key, but failed. Then I found out that
OpenSSL uses X.509 for its public keys, thus M2Crypto only supports
X.509 public keys. Then I looked at the Java code for
determineKeyHash() and it suggests that the key uses PKCS standard. It
seems that PKCS#1 is the final answer, but the javadoc page of
PEMReader in BouncyCastle says it can read "OpenSSL PEM encoded
streams containing X509 certificates, PKCS8 encoded keys and PKCS7
objects" [2]. So is it PKCS#1 or PKCS#8? And what's the difference?

2. Specs says fingerprint is "a HASH_LEN-byte of asn1 encoded public
key, encoded in hex" [1]. But to me, it seems to be "a SHA1 digest of
DER encoded public key, encoded in hex". Specifically, is it necessary
to specify the length of fingerprint? And ASN1 is a standard with
several possible encoding rules, do we always use DER?

I know that's a lot of questions...thanks!

Best,
Beck

PS. Are you guys getting email updates from ticket #5810? I'm doubting
that you two are not actually CCed since no one is replying...
PSS. Do we need to keep Ravi in this conversation?
PSSS. Should I wrap up my email to 78 words per line?

[1]. https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=dir-spec.txt
[2]. http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/openssl/PEMReader.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120513084321</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-05-13 08:43:21-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

&gt; PSS. Do we need to keep Ravi in this conversation?
Nah, I'm good.
I'm spectating on tor-dev anyway.

-- 
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120513182150</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-05-13 18:21:50-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Beck. Unfortunately at this point you know far more about
descriptor crypto than me so I won't be much help. A quick search in
apt for 'pkcs' only came up with one python result, PyKCS11
(http://www.bit4id.org/trac/pykcs11), which looks to be mostly related
to smartcards. Hopefully Karsten will have some suggestions.

&gt; PS. Are you guys getting email updates from ticket #5810? I'm doubting
&gt; that you two are not actually CCed since no one is replying...

Yes. Both Karsten and I are subscribed to tor-bugs@ so we see all trac updates.

&gt; PSS. Do we need to keep Ravi in this conversation?

Nope, everyone on this thread is on tor-dev@ already. If you aren't on
this list yourself then I'd suggest it. :)

&gt; PSSS. Should I wrap up my email to 78 words per line?

Really doesn't matter. Some people care strongly about it, others
don't. I'm in the later camp but do it anyway since I think it looks a
little nicer and gmail defaults to 80-character wrap when you chose
plaintext.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120513182410</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-05-13 18:24:10-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

&gt;&gt; PS. Are you guys getting email updates from ticket #5810? I'm doubting
&gt;&gt; that you two are not actually CCed since no one is replying...
&gt;
&gt; Yes. Both Karsten and I are subscribed to tor-bugs@ so we see all trac updates.

Oh, and I should add that I didn't reply to your last post because it
sounded like you were still investigating this and I didn't have any
advice. If you want my input on something then please leave a question
directed toward me on the ticket. ;)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120513185405</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-05-13 18:54:05-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

&gt; It seems that PKCS#1 is the final answer, but

Quick question, if it is PKCS1 that we need then will the pycrypto
package do the trick? It looks like PKCS1 support is pretty new for
it, but the package itself is generally available by default. See the
last comment on...
https://bugs.launchpad.net/pycrypto/+bug/502291

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120514003057</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-05-14 00:30:57-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Karsten, hi Beck. Just pushed stem support for extrainfo
descriptors (ye gods they have a lot of attributes)...

* Implementation
https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py

* Unit Tests
https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/descriptor/extrainfo_descriptor.py

* Integ Tests
https://gitweb.torproject.org/stem.git/blob/HEAD:/test/integ/descriptor/extrainfo_descriptor.py

Barring distractions I plan to next implement network status entities,
then start porting over Onionoo. That said, between going oncall for
work and the upcoming release of Diablo 3 it might be a little while.
:P

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120514060400</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-14 06:04:00-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Beck,

I don't have good answers to your questions.  To be honest, when I
implemented the Java verification code for #2768, I looked for hints in
an old Java version of Tor, rewrote that code, updated it for current
BouncyCastle versions using their JavaDocs and examples, and tweaked
everything until it finally worked. :)

On 5/13/12 9:04 AM, Beck Chen wrote:
&gt; 1. Specs says signing key is "a public key in PEM format" [1], but
&gt; what standard does it use? I tried to use M2Crypto, a Python wrapper
&gt; for OpenSSL, to import this key, but failed. Then I found out that
&gt; OpenSSL uses X.509 for its public keys, thus M2Crypto only supports
&gt; X.509 public keys. Then I looked at the Java code for
&gt; determineKeyHash() and it suggests that the key uses PKCS standard. It
&gt; seems that PKCS#1 is the final answer, but the javadoc page of
&gt; PEMReader in BouncyCastle says it can read "OpenSSL PEM encoded
&gt; streams containing X509 certificates, PKCS8 encoded keys and PKCS7
&gt; objects" [2]. So is it PKCS#1 or PKCS#8? And what's the difference?
&gt; 
&gt; 2. Specs says fingerprint is "a HASH_LEN-byte of asn1 encoded public
&gt; key, encoded in hex" [1]. But to me, it seems to be "a SHA1 digest of
&gt; DER encoded public key, encoded in hex". Specifically, is it necessary
&gt; to specify the length of fingerprint? And ASN1 is a standard with
&gt; several possible encoding rules, do we always use DER?

I'm cc'ing Nick who would have much better answers to your questions.

Thanks!
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120514071701</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-14 07:17:01-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On 5/14/12 2:30 AM, Damian Johnson wrote:
&gt; Hi Karsten, hi Beck. Just pushed stem support for extrainfo
&gt; descriptors (ye gods they have a lot of attributes)...
&gt; 
&gt; * Implementation
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/stem/descriptor/extrainfo_descriptor.py
&gt; 
&gt; * Unit Tests
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/descriptor/extrainfo_descriptor.py
&gt; 
&gt; * Integ Tests
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/test/integ/descriptor/extrainfo_descriptor.py
&gt; 
&gt; Barring distractions I plan to next implement network status entities,
&gt; then start porting over Onionoo. That said, between going oncall for
&gt; work and the upcoming release of Diablo 3 it might be a little while.
&gt; :P

Pretty cool!

Very much looking forward to the Python Onionoo!  Let me know when/if
you want to discuss the design there.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120514144808</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-14 14:48:08-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Damian,

&gt; Quick question, if it is PKCS1 that we need then will the pycrypto
&gt; package do the trick? It looks like PKCS1 support is pretty new for
&gt; it, but the package itself is generally available by default.

PyCrypto should do the trick, as described in their API document [1].
But I encounter an error when trying to import the key:

&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt; RSA.importKey(my_key)
ValueError: RSA key format is not supported

I asked this on Stack Overflow and someone provides an explanation
[2]. It looks plausible, but I'm really confused about the tangled
standards here.

Enjoy Diablo 3 :) I'll join you when I go back to USA.

Cheers,
Beck

[1]. https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html
[2]. http://stackoverflow.com/a/10574723/994146
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120514145010</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-14 14:50:10-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Karsten,

&gt; I don't have good answers to your questions. =A0To be honest, when I
&gt; implemented the Java verification code for #2768, I looked for hints in
&gt; an old Java version of Tor, rewrote that code, updated it for current
&gt; BouncyCastle versions using their JavaDocs and examples, and tweaked
&gt; everything until it finally worked. :)

That's exactly what I'm doing right now :)

&gt; I'm cc'ing Nick who would have much better answers to your questions.

Great. Thanks!

Best,
Beck
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120515160333</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-05-15 16:03:33-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

On Mon, May 14, 2012 at 2:04 AM, Karsten Loesing &lt;karsten@torproject.org&gt; w=
rote:
&gt; Hi Beck,
&gt;
&gt; I don't have good answers to your questions. =A0To be honest, when I
&gt; implemented the Java verification code for #2768, I looked for hints in
&gt; an old Java version of Tor, rewrote that code, updated it for current
&gt; BouncyCastle versions using their JavaDocs and examples, and tweaked
&gt; everything until it finally worked. :)
&gt;
&gt; On 5/13/12 9:04 AM, Beck Chen wrote:
&gt;&gt; 1. Specs says signing key is "a public key in PEM format" [1], but
&gt;&gt; what standard does it use? I tried to use M2Crypto, a Python wrapper
&gt;&gt; for OpenSSL, to import this key, but failed. Then I found out that
&gt;&gt; OpenSSL uses X.509 for its public keys, thus M2Crypto only supports
&gt;&gt; X.509 public keys. Then I looked at the Java code for
&gt;&gt; determineKeyHash() and it suggests that the key uses PKCS standard. It
&gt;&gt; seems that PKCS#1 is the final answer, but the javadoc page of
&gt;&gt; PEMReader in BouncyCastle says it can read "OpenSSL PEM encoded
&gt;&gt; streams containing X509 certificates, PKCS8 encoded keys and PKCS7
&gt;&gt; objects" [2]. So is it PKCS#1 or PKCS#8?

In crypto_pk_write_to_string_impl, it's generated via
PEM_write_bio_RSAPublicKey, so (according the manpage) that's a PKCS#1
RSAPublicKey structure.  Let's hope the mangpage is right.

&gt;&gt; And what's the difference?

I'd have to read the standards to find out; if the standards don't
make that clear, let me know and I can give it a try myself.

&gt;&gt; 2. Specs says fingerprint is "a HASH_LEN-byte of asn1 encoded public
&gt;&gt; key, encoded in hex" [1]. But to me, it seems to be "a SHA1 digest of
&gt;&gt; DER encoded public key, encoded in hex". Specifically, is it necessary
&gt;&gt; to specify the length of fingerprint?

That should indeed say say "a HASH_LEN-byte SHA1 digest of"....

"digest" is the part that's strictly necessary to specify, since I
think we say that everything's SHA1 unless somebody says otherwise.

&gt;&gt; And ASN1 is a standard with
&gt;&gt; several possible encoding rules, do we always use DER?

I believe so.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120517143206</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-05-17 14:32:06-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Beck. Thanks for diving into the descriptor crypto. As you've found
it's not an especially easy problem to solve. Just a reminder that if
you aren't finding it interesting then there's several other stem
related projects that you might find more to your liking.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120510154636</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-05-10 15:46:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Make bridges report statistics on daily v3 network status requests</subject><body>

On Thu, May 10, 2012 at 4:31 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; Hi Nick,
&gt;
&gt; here is the proposal as discussed in #5807 to improve our bridge usage
&gt; statistics.
&gt;
&gt; Thanks,
&gt; Karsten

This is now proposal 201.  Thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120507153726</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-05-07 15:37:26-0400</timestampReceived><subject>Re: [tor-dev] Win32: tor-gencert.c</subject><body>

On Fri, May 4, 2012 at 7:52 AM, Gisle Vanem &lt;gvanem@broadpark.no&gt; wrote:
&gt; MSVC doesn't have &lt;unistd.h&gt;. Hence this little patch is needed:

Applied; thanks!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120508013826</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-05-08 01:38:26-0400</timestampReceived><subject>Re: [tor-dev] First-time tails/tor user feedback</subject><body>

[Attachment #2 (multipart/signed)]


I think this is useful info. There's also some previous user studies
you've done lying around somewhere else too, yes?

I think it's unlikely for anything to come out of any of it without trac
tickets, though. I've already forgotten where you even posted the
previous user studies.


Thus spake Andrew Lewman (andrew@torproject.is):

&gt; I spent the past week in Sweden, attending the Stockholm Internet
&gt; Forum, http://www.stockholminternetforum.se/, for part of it. I made a
&gt; number of tails 0.10.2 usb sticks for people on request. I also asked a
&gt; lot of people their impressions of Tor and Tails. I received a plethora
&gt; of feedback. All 8 people are involved in the Internet Freedom policy,
&gt; technology, or freedom of speech communities. They had very different
&gt; levels of self-assessed technical skill. The 8 people represented 6
&gt; countries.
&gt; 
&gt; tldr; 8 people were tested, 8 people had trouble doing simple things
&gt; with tor browser in Tails. Issues 4-6 are directly related to Tor.
&gt; 
&gt; And by asked, I mean, I stuck them in front of my laptop, put the usb
&gt; stick in the computer, and asked them to browse to their favorite site.
&gt; No one wanted to be video recorded, even if I offered to only record
&gt; the screen and not audio.
&gt; 
&gt; Everyone managed to power on the laptop and wait for Tails to boot.
&gt; 
&gt; # First issue: Language selection
&gt; 
&gt; The first issue was on the language selection screen. 4 of 8
&gt; people were confused why it was called "Debian Live System" and not
&gt; "Tails Live System". 8 of 8 knew what language selection meant, but
&gt; weren't sure how this mapped to Tails.
&gt; 
&gt; # Second issue: wifi and tor browser
&gt; 
&gt; The tor browser starts up before the wireless is configured. The tor
&gt; browser then reports a proxy error. With some prompting, all 8 figured
&gt; out the wifi and then didn't know what to do. Tor does keep trying to
&gt; load, and takes forever because it needs to download the entire
&gt; directory. Users have no feedback as to what's going on behind the
&gt; scenes because vidalia is hidden.
&gt; 
&gt; 8 of 8 waited patiently for something to happen on the screen.
&gt; 
&gt; # Third issue: green onion
&gt; 
&gt; 3 of 8 people saw the green onion appear in the menu bar up top. These
&gt; three people hovered over it and saw the 'Connected to the Tor Network'
&gt; message. No one knew to double-click on it to get a menu of other things
&gt; to do. No one knew to right-click on it to get the drop-down menu. They
&gt; were presented with the default check.torproject.org 'congratulations'
&gt; page and then sat there.
&gt; 
&gt; # Fourth issue: check.tpo is not helpful
&gt; 
&gt; 8 of 8 people saw the default check.torproject.org site telling them
&gt; 'congratulations. Your browser is configured to use tor.' 7 of 8 people
&gt; asked 'where is my browser?' The one who didn't ask this question was
&gt; already a firefox user and recognized the interface. 0 of 8 understood
&gt; what the IP address message meant. Comments ranged from 'is that
&gt; different than my current IP address?' to 'what's an ip address?'
&gt; 
&gt; As an aside, when showing someone TBB on their own laptop, they saw the
&gt; check.tpo site, and then went to Safari and started it up. When asked
&gt; why they did this, the answer was 'safari is my browser. this says your
&gt; browser is configured to use tor.'
&gt; 
&gt; No one used the language selections at the bottom of check.tpo, nor even
&gt; understood why they were there.
&gt; 
&gt; # Fifth issue: exit relay congestion/failures
&gt; 
&gt; 8 of 8 people tried to get to their own sites. 'I wonder what my site
&gt; looks like when I'm anonymous' was the most common comment (5 of 8).
&gt; For 6 of 8 people, their site didn't load at all, and tor browser
&gt; reported their site was unreachable. All 6 then tried to go to
&gt; google search in their own language; meaning google.es, google.se, etc.
&gt; For 3 of those 6, this didn't work either. They gave up and assumed tor
&gt; was broken or was censoring their destinations.
&gt; 
&gt; I intervened, opened the vidalia network map, closed the circuit in
&gt; question, and asked them to repeat their browsing. 
&gt; 
&gt; 5 of 6 were able to get to their sites now. The one that was not able
&gt; to had the same exit relay as last time, Amunet1, in a new circuit and
&gt; just couldn't get anywhere through it. After yet another new circuit,
&gt; they could get through to everything.
&gt; 
&gt; The user has no feedback as to why their site didn't work. And tor
&gt; assumes everything is working fine.
&gt; 
&gt; When asked "please find a video you like", they all went to youtube.
&gt; Most of the videos they wanted to see resulted in 'This video is
&gt; currently unavailable.' 8 of 8 assumed it was because youtube was
&gt; blocking tor, not because the video is flash-required. 2 of 8 started
&gt; randomly clicking videos suggested by youtube to see if any of them
&gt; worked. Eventually, 2 of 8 got videos to work with youtube and were
&gt; amazed it worked at all.
&gt; 
&gt; # Sixth issue: no flash, no warning
&gt; 
&gt; 2 of 8 people had flash apps on their website. 4 of 8 had ad banners
&gt; that used flash. All were surprised at the red outline with a snake in
&gt; it appearing instead of their flash apps. None understood what
&gt; happened.
&gt; 
&gt; After an explanation, one person suggested changing the red outline
&gt; with snake to an actual message written inside, along the lines of
&gt; 'this app blocked for your protection. click here to unblock it.' I
&gt; explained why that wouldn't work (because there is no flash, java,
&gt; silverlight plugins installed) and their answer was 'then do not show
&gt; it at all'. Inside noscript, I unchecked the 'show placeholder..'
&gt; option and had them browse again. they were happy. It seems if the user
&gt; cannot do anything about the blocked apps, not showing them may be
&gt; preferred.
&gt; 
&gt; # Seventh issue: shutdown
&gt; 
&gt; I asked all 8 to shutdown tails and let me know when they thought their
&gt; data was safely no longer on the system. 1 of 8 figured out how to
&gt; shutdown tails by clicking the big red button in the upper right
&gt; corner. The rest hit the power button on the laptop.
&gt; 
&gt; After rebooting, i showed them all they could just pull the usb drive
&gt; to do it as well. As soon as tails started shutting down, they all
&gt; assumed everything was safe and tried to power off the laptop. 
&gt; 
&gt; -- 
&gt; Andrew
&gt; http://tpo.is/contact
&gt; pgp 0x6B4D6475
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120509033319</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-05-09 03:33:19-0400</timestampReceived><subject>Re: [tor-dev] Orbot makefile / build update</subject><body>

On 05/07/2012 11:55 AM, Fabian Keil wrote:
&gt; Privoxy 3.0.12 was released in 2009, so I wouldn't call it a recent
&gt; release. Did you run into problems with more recent versions? At least
&gt; in theory they should work better. Fabian
I think this time around, I was trying to change as little as possible.
Since Privoxy 3.0.12 has been working quite well, I didn't want to move
forward on that within this Makefile effort.

However, since we now have a clean way to move forward, we'll tackle an
update on Privoxy, especially since our integration with Twitter for
Android depends upon HTTP proxying.

Best,
 Nathan
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120513212341</emailId><senderName>Tomás_Touceda</senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-05-13 21:23:41-0400</timestampReceived><subject>Re: [tor-dev] Thandy and what's next</subject><body>

[Attachment #2 (multipart/signed)]


On 5/3/12 11:40 AM, Runa A. Sandvik wrote:
&gt; On Wed, May 2, 2012 at 3:33 AM, Tomás Touceda &lt;chiiph@torproject.org&gt; wrote:
&gt;&gt; tldr; everything is there, it works and it probably has bugs, we need to
&gt;&gt; deploy and see.
&gt; 
&gt; How about sending a list to tor-dev with information about how to
&gt; test, and where to file bugs? I'm sure a number of people on this list
&gt; would be more than happy to help out, myself included.
&gt; 

May be, but testing is the hardest part, we aren't in the "please
download this for testing and report bugs here" part yet. The person
that would do the testing needs to setup the whole repository and create
different sets of packages. The idea with doing a testing deployment was
to work out these parts and leave the "test the software that the user
will see" to early adopters.

A list right now will be something along the lines of:
- Clone Thandy, read the docs, setup a repository.
- Create packages, bundles and thp data packages, then create updates
for those in the form of: update the whole bundle, update just one
package within the bundle. Also create a package that would act as the
bootstrap package to test the case "update the bootstrap app", create a
package that would act as Thandy itself, another for Vidalia for similar
purposes.
- Clone thandy-bootstrapper, build it.
- Create a binary for the Thandy client with PyInstaller.
- Use the latest Vidalia alpha with the thandy plugin from
vidalia-plugins.git repo.
- Simulate updating each of the packages/bundles you've created and see
where it breaks.
- Report bugs to trac.torproject.org under the Thandy component.

If we create a repo with actual functional packages and a tbb with the
thandy plugin and bootstrapper, and we keep the packages up to date with
the tor/torbrowser/vidalia releases, we can just tell the users
"download this (having in mind that it's for testing and things might
break) and just use it, it should update by itself, if something breaks,
report to trac".



["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120514152544</emailId><senderName></senderName><senderEmail>sid77</senderEmail><timestampReceived>2012-05-14 15:25:44-0400</timestampReceived><subject>[tor-dev] Tor iOS repository is back online</subject><body>

Hi all,
I'd like to announce that the Tor iOS repository is back online!

TL;DR is just a two step solution:
1) If you still have the old repository installed, remove the "Sid77's Source"
package, otherwise skip to step 2
2) Use Cydia to add a new repository and write or paste this url:
http://sid77.slackware.it/ios/

Quick FAQ:

+ What happenened?
Around the beginning of April, one of the machine of the slackware.it network
suffered an awful disaster. Both of its disks failed, and sid77.slackware.it
was hosted over there :(

+ There was a backup?
Obviously not. Well, to be honest, I *DID* a backup the day before the disaster but
I wasn't able to retrieve it in time. How lucky! :D

+ What does it mean?
Source code was mirrored on several places and on github.com so it wasn't a
big loss, however, the old GPG signing key with ID 0x6295C2FE is gone and
lost. Eventually, it will expires in 2015 but I am pretty ashamed of not
having a revoke certificate handy.

+ Why did it take you so long?
Me and the rest of slackware.it admins were all busy with Real Life(tm), we
tried to recover what we could from the disaster before rebuilding the missing
pieces from scratch.

+ Ok, now what? How can I have the repository back?
First, if you still have the old repository installed, remove the "Sid77's
Source" package, otherwise go on.
Open Cydia then go to Sources-&gt;Edit-&gt;Add and write or paste this url:
http://sid77.slackware.it/ios/ then tap "Add Source".
Once the repository is recognized tap, on "evelyn" (its name) and install or
upgrade "Tor Toggle".
Packages are signed with the new key with ID 0x09F4FCCE: Cydia will import it
as son you add the new source to your repositories.

+ Do you know there's a "Mobile Tor" package on Big Boss repository?
Yes I do. It's not mine nor I endorse it. It was uploaded by "W00t" and its
package ID is org.torproject.mobiletor but I do not think its an official
torproject.org package.
I downloaded the deb and, as far I can tell, it should be an all-in-one
version of every package I have released so far: it contains Tor, Polipo,
libevent and the startup scripts. I think it misses the SBSettings toggle but
I'm not that sure.
I have already released an updated "Mobile Tor" version 0.3-4 in my repository
which should be picked up by Cydia. In theory, the upgraded version was
useless as the two packages have different IDs but I'd like to be better safe
then sorry ;-) Well, it should be a good idea to remove BigBoss' "Mobile Tor"
before upgrading to my packages as both of them will try to write the same
files.

That's all, in the following days I will update the rest of the site with
package descriptions and everything else.

Ciao,
Marco
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120515070129</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-15 07:01:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Make bridges report statistics on daily v3 network status requests</subject><body>

On 5/10/12 5:46 PM, Nick Mathewson wrote:
&gt; On Thu, May 10, 2012 at 4:31 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt; here is the proposal as discussed in #5807 to improve our bridge usage
&gt;&gt; statistics.
&gt; 
&gt; This is now proposal 201.  Thanks!

Thanks for adding the proposal!

However, I found that we may already have the data that I proposed to
collect in that proposal.  Here's why:

Some bridges report statistics that were originally designed for relays
only, including statistics on directory requests.  We throw these
statistics away in the sanitizing process, so they don't end up in the
tarballs.  I reported this problem in #5824.  But after thinking about
it more, I concluded that we might as well use the data instead of
starting to collect the very same thing in proposal 201.

I did a quick analysis of the April 2012 bridge descriptors to see if
the contained directory request statistics are usable.  The result is
promising:

https://trac.torproject.org/projects/tor/ticket/5807#comment:5

I suggest to do the following three things:

 1. Kill proposal 201.  Oops.

 2. Discuss whether or not it's safe to leave directory requests
reported by bridges in the sanitized bridge descriptor tarballs.  I
think it's fine to leave them in, because they don't reveal any
information that an adversary could use to locate bridges.  Here's a
sample bridge descriptor with directory request statistics (the dirreq-*
lines):


http://freehaven.net/~karsten/volatile/d2549adbc83f5bdffd9bb8a5f525e23556ec2a34

 3. If there are no concerns in 2., publish bridge descriptor tarballs
containing directory request statistics in two weeks from now.

 4. Resume counting directory requests by country on bridges like we do
on relays.  Right now, we only count total requests in "dirreq-v3-resp
ok=304 [...]" lines, but we don't count requests by country which is why
there are empty "dirreq-v3-reqs" lines.  This isn't problematic for the
moment, because we can infer country distributions from "bridge-ips"
lines.  But we should start collecting by-country data, so that we can
simply look at "dirreq-v3-reqs" lines in the future.

Sorry for the chaos.  But I'm actually quite excited that we have good
data for estimating daily bridge users and don't have to start
collecting them now in the hope that they'll be useful in a year or two. :)

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120516080139</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-05-16 08:01:39-0400</timestampReceived><subject>[tor-dev] Faravahar Directory + reverse proxy</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Last week I experimented with OpenSSL 1.0.1c and saw a huge increase
in traffic. Unfortunately, my hardware was not up to the task and I
started seeing timeouts and other errors.

I have decided to replace the server with a much beefier one in the
very near future. Meanwhile, I installed nginx as a reverse proxy on
the Directory Port.

nginx config:

server {
    listen       154.35.32.5:80;
    server_name  _;

    location / {
                 proxy_pass        http://154.35.32.5:81;
        }
}


Tor:
DirPort 80
DirListenAddress 154.35.32.5:81


It was very easy and nice to configure Tor Directory behind a reverse
proxy. The DirListenAddress came super handy!! Nice design.

Currently the directory port is responding blazing fast:
http://faravahar.rabbani.jp/tor/status/all.z

Can someone poke at the directory port and let me know if they can
find any issue with serving Tor in this fashion?

If this works fine, I will try to configure the directory port on a
fancy DDoS mitigation gear next.

All the best,
SiNA

- -- 
First they ignore you, then they laugh at you, then they fight you,
then you win ~ Mahatma Gandhi
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIcBAEBAgAGBQJPs17iAAoJEJPBwXYLR9VtSvgP/3X77PZCF9yv2MGHuWwkyIDM
1Xye/A4Q5Vnm1ZekNpzsXHK0jNsl0FWKS0/zzx9zkokzeHbwN+CG7Y5jYJBdIbvP
DL81Q5VDjsR8tS6MOcEHK+DqnHPpKSSNf2FYCeX9KAstumim+PTV7G84I+0sq4ZL
7B/o43XEuGA3518oLM0v1QcHW+gn58vmpgw0Xh74iv+9EKCCrEY3OJImhXp3tuoe
xoM3R9mdcI87uafU/ZyToPO/sAO7f/A3yZXjvMY9XKCLEXMpSqDgrKx3Xt+AeJVs
2qtBfamiT76hpH9kv8429iP3LzJJfWUZvOl5dgziMg6GaD07KKHKFqyN9KYR/7RQ
k/Gm0yQcECGxzyBRVxYIAIQFWOpK7c1/Sa9Mn4VNlzqAflYTbJrf47YDfX7vlFE0
giILtLvjcOK4fkv0OD1bTo+pFbY62WXAoZ3VwWu9jEBkgYAvdD55WWyg/zYJCKLi
aSCy8f1VszPU9dciSN4JjgPU+zXvY/Zzkui2r4Y5IduVjI0h4FhTyVUETrqJj8Rt
eyhfyWYONoGurSPH/LUwlfsI8T4ertZCKv9kLOl7AkOoDIrbj0XUf1mhZyjGz5H7
cN3y0q8iy87InH8udIndAUVRwYTysAHiHvZ5ycbB4OcNMK1JlC6RL3hJx64rNbob
hpYatE88b/E9vlZENF8q
=SepB
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120516165412</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-05-16 16:54:12-0400</timestampReceived><subject>Re: [tor-dev] HFOSS as Wesleyan this summer</subject><body>

Hi Megan, hi Erik, glad to have you working with us this summer!

First a bit of a project introduction is probably in order. Stem is a
python controller library for tor. Like its predecessor, TorCtl [1],
it uses tor's control protocol [2] to help developers program against
the tor process, enabling them to build things similar to Vidalia [3]
and arm [4].

Most of stem's core bits (process communication with tor, asynchronous
message handling, etc) are done, and development is now focused on the
wrapper around that which makes for a developer-friendly API. There's
still a ton of work to do, and currently three people hacking on the
project...

* Damian (project author)
* Ravi (GSoC student) - Working on a grab bag of stem related tasks
including the general controller, some descriptor parsing, and
migrating the first client (arm) over to stem. [5]
* Beck (volunteer) - Doing a deep dive into the crypto behind
descriptor validation. [6][7]

Karsten, Ravi, and I just updated stem's development wiki yesterday so
it should be reasonably up to date...
https://trac.torproject.org/projects/tor/wiki/doc/stem

Codebase:
https://gitweb.torproject.org/stem.git

So my first question is, what are your interests? It seems that most
people either lean toward research or application, and we have a lot
to do that fit both.

To start with please take a look at the wiki's bugs and improvements
sections. Those are bite sized tasks that should be reasonably small
and start immersing you in the codebase. After that, both the
metrics-lib tasks (more research focused) or porting the tor
interpretor (more application) would be great projects.

Here's a brief overview of the communication channels we use:

- #tor and #tor-dev on OFTC: we're most active on irc, so I definitely
suggest being in these channels [8]

- tor-talk [9] is our user mailing list which is somewhat high volume.

- tor-dev [10] is a lower volume development list and a good place for
technical discussions. Unless something is private please include this
in your email cc.

Hope this helps, and again - welcome! -Damian

PS. I highly suggest introducing yourself to this list. The more
you're involved with the tor community the better, and we'd be
thrilled if you stuck around after your project to become core tor
developers!

[1] https://www.torproject.org/getinvolved/volunteer.html.en#project-torctl
[2] https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt
[3] https://www.torproject.org/getinvolved/volunteer.html.en#project-vidalia
[4] http://www.atagar.com/arm/
[5] https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html
[6] https://trac.torproject.org/5810
[7] https://lists.torproject.org/pipermail/tor-dev/2012-May/003510.html
[8] https://www.torproject.org/about/contact.html.en#irc
[9] https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-talk/
[10] https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120516191823</emailId><senderName>SiNA Rabbani</senderName><senderEmail>sina@redteam.io</senderEmail><timestampReceived>2012-05-16 19:18:23-0400</timestampReceived><subject>[tor-dev] directory requests</subject><body>

I see the same IP sending the same request over and over. Is this normal
behaviour?

All the best,
SiNA

XXX.XXX.XXX.XXX - - [16/May/2012:15:15:00 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:01 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:02 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:04 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:06 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"

XXX.XXX.XXX.XXX - - [16/May/2012:15:15:08 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:09 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:12 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:13 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:13 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:13 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:16 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:16 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:16 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"
XXX.XXX.XXX.XXX - - [16/May/2012:15:15:19 -0400] "GET /tor/status/all.z
HTTP/1.0" 200 540655 "-" "-" "-"

-- 
First they ignore you, then they laugh at you, then they fight you, then
you win ~ Mahatma Gandhi
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120517164121</emailId><senderName>Beck Chen</senderName><senderEmail>csybeck@gmail.com</senderEmail><timestampReceived>2012-05-17 16:41:21-0400</timestampReceived><subject>Re: [tor-dev] [tor-assistants] Python metrics-lib</subject><body>

Hi Damian,

I was actually on a short trip these days, and just arrived home. I'll
restart working on it tomorrow, and I believe there is more I can do.

That said I might join Ravi's work on the general controller class a
bit later after I've finished my work on the descriptor crypto.

Best,
Beck
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120521061408</emailId><senderName>"torbridges.security"</senderName><senderEmail>torbridges.security@gmail.com</senderEmail><timestampReceived>2012-05-21 06:14:08-0400</timestampReceived><subject>[tor-dev] unscribe</subject><body>

unscribe
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120521122731</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-05-21 12:27:31-0400</timestampReceived><subject>[tor-dev] [GSoC] [APAF] Report of 17-21 May hackathon; current status of APAF.</subject><body>

I'm writing this mail as report for the last four days during which,
thanks to the supervision of both naif and hellais, I managed to
develop the very first basic structure of the APAF project.

One nice thing that came out during this weekend was the collaboration
and improvement of other python projects, txtorcon[0] and py2app[1].
Especially, I hope to continue improving txtorcon, which will be the
most strict dependency for the apaf project.

At the end of this hackaton, I reached a state in which:
 - the basic structure of the apaf has not been only designed, but
also developed;
 - the most important classes have unittests and partial documentation
sphynx-compilant;
 - the file setup.py bulds succesfully an installer for windows, osx,
and linux.[2]

The very basic structure has been widely described in the
documentation, and I will update http://mmaker.github.com/apaf/
according to last changes in the source.
The most difficult task during the whole hackathon has been packaging
for both windows and osx; pyInstaller didn't manage it, but py2exe +
py2app seems to work pretty well, even though with some hacks[3].

Todos.
---------
Apart from the design of the panel itself, there are some cool
standalone tasks which you may consider as example for other projects.
I learned from hellais that the torproject is going to build a sort of
package managed in order to safely handle updates of the shipped
executables; the APAF, too, is going to download[4] executables from
the web as dependencies (gnupg and tor for example).
The APAF needs also some icons and graphics for the system tray / icon
bar / standalone executable (note that darwin and windows have their
own image format); I'm going to use Vidalia's ones, but any
adivice/aid here would be strongly appreciated. :)

[0] https://github.com/meejah/txtorcon/pull/4 and
https://github.com/meejah/txtorcon/issues/6
[1] https://bitbucket.org/ronaldoussoren/py2app/issue/45/psutil-error-importerror-no-module-named
(note: building on osx 10.7 does not work.)
[2]  at least, it did so yeasterday. :P http://cl.ly/04232z2G1x2K2g1t3s2E
[3] https://github.com/mmaker/APAF/blob/master/apaf/blobber.py
[4] https://github.com/mmaker/APAF/blob/master/apaf/build.py

-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120522190915</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-05-22 19:09:15-0400</timestampReceived><subject>Re: [tor-dev] GSoC Introduction - Pluggable Transports in Python</subject><body>

On 5/22/12 5:34 PM, Brandon Wiley wrote:
&gt; *py2exe packaging for obfsproxy*
&gt; 
&gt; The command line tool will be packaged into a standalone executable for
&gt; Windows.

Would you be interested in leveraging knowledge/code/experience from
APAF (Anonymous Python Application Framework):

http://www.mail-archive.com/tor-dev@lists.torproject.org/msg01030.html
http://archives.seul.org/or/dev/Apr-2012/msg00031.html
http://www.mail-archive.com/tor-dev@lists.torproject.org/msg00893.html

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120524084027</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-24 08:40:27-0400</timestampReceived><subject>Re: [tor-dev] Sanitized bridge descriptor format 1.0</subject><body>

Hi Damian,

On 5/23/12 7:27 PM, Damian Johnson wrote:
&gt;&gt; The bridge descriptor tarballs contain bridge network statuses, server
&gt;&gt; descriptors, and extra-info descriptors.  See:
&gt;&gt;
&gt;&gt; https://metrics.torproject.org/data.html#bridgedesc
&gt; 
&gt; Oops, I read 'contain similar documents as the relay descriptor
&gt; archives' as being server descriptors. Maybe in this first sentence it
&gt; should explicitly say that it's a bundled batch of network status,
&gt; server descriptors, and extra-info descriptors?

I tweaked the paragraph a bit.  Please feel free to edit it more and
send me a patch.

https://gitweb.torproject.org/metrics-web.git/commitdiff/3dbf9ae

&gt;&gt; You'll find an example here:
&gt;&gt;
&gt;&gt; https://metrics.torproject.org/formats.html#bridgedesc
&gt;&gt;
&gt;&gt; (I'll also include an example of the suggested format below.)
&gt; 
&gt; Oops again. Didn't figure that we'd use the same scrubbing description
&gt; for both. Personally I'd find it more intuitive if we had separate
&gt; sections for both, though I see why you did it this way.

It's probably a matter of taste.  Organizing the description by
descriptor type would mean we'd repeat a few things.  For example, we
replace bridge identities in all three descriptor types and IP addresses
in two of them (where the third type doesn't contain the bridge IP
address).  I think it's easier to list the changes made to all
descriptor types.

&gt;&gt; After thinking more about it, I came to the conclusion that we should
&gt;&gt; stop sanitizing *-stats lines at all.
&gt; 
&gt; In that case the 'router-signature' lines are the only ones being
&gt; scrubbed out of bridge extra-info descriptors, right? If so then we
&gt; don't need a 'router-digest' here since the digest can be calculated
&gt; from the (now unscrubbed) content - right?

No, the extra-info descriptors contain hashed bridge fingerprints, not
the original ones.  That's why we need the "router-digest" line.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120528094019</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-05-28 09:40:19-0400</timestampReceived><subject>[tor-dev] [GSoC] Update - Safe cookie support in Stem</subject><body>

Hello

I'm reporting my progress over the last week.

I have been working on implementing support for the safe cookie
authentication method for Stem[1].
It is in a usable state[2] right now, but, it isn't fully tested. In
the process, Stem also helped uncover
a bug in the AUTHCHALLENGE error responses[3].

Now, I'll be writing the tests for the safe cookie implementation and
getting it merged. Next, I'll begin work on the
general controller class. Damien has already implemented an the
GETINFO response parser. Beck also wants to
help implement the controller class.

I/We will be working on the deliverables scheduled for week two in my
proposal, i.e.
Implementing the wrapper functions and response parsing for the
following control commands,
GETCONF, SETCONF, LOADCONF, RESETCONF, SAVECONF, SIGNAL,
TAKEOWNERSHIP, USEFEATURE and QUIT.

1. https://trac.torproject.org/projects/tor/ticket/5262
2. http://repo.or.cz/w/stem/neena.git/shortlog/refs/heads/safe-cookie-alt
3. https://trac.torproject.org/projects/tor/ticket/5760

-- 
Regards,
neena
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120529190453</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-05-29 19:04:53-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re: Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

Karsten Loesing, 29.05.2012 19:43:
&gt;&gt; I did just that.
&gt;&gt;
&gt;&gt; https://trac.torproject.org/projects/tor/wiki/doc/DataExtractionForComparison
&gt; 
&gt; Thanks for creating that page.  Looks line a fine start, though you'll
&gt; want to automate more things when looking at 2012 tarballs.

Well without grep I'd be still copying out nicknames.

&gt; grep and friends are fine tools to process Tor descriptors.  If you can,
&gt; find a Unix/Linux-like environment for Windows (Cygwin?) and combine the
&gt; powers of grep with sort, uniq, and maybe sed or awk.  These tools are
&gt; friggin' fast!

Cygwin might not be the right solution. I would have to compile the
tools from source. Lucky me, those tools are available for Windows.
Thanks to the people providing the binaries and the docs.

I have to look if they are equal to the tools you have mentioned. awk is
named gawk. All of them are command-line tools and I have to learn how
to use them.

And I need to figure out how to strip the "r" or copy only the nickname.

&gt; If you're comfortable with Java and want to do more fancy stuff with Tor
&gt; descriptors, take a look at metrics-lib:
&gt; 
&gt; https://gitweb.torproject.org/metrics-lib.git
&gt; 
&gt; If you're a Python person, you'll like stem, even though it only
&gt; implements parsing of a subset of Tor descriptors.  More to come soon:
&gt; 
&gt; https://gitweb.torproject.org/stem.git

Thanks to anyone for coding on them or otherwise maintaining them.

I can't compile stuff, read or write code. That includes scripting.
There's a reason why I'm on Windows.

Regards,
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120530200646</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-05-30 20:06:46-0400</timestampReceived><subject>Re: [tor-dev] Can we stop sanitizing nicknames in bridge descriptors?</subject><body>

On 5/16/12 8:47 AM, Karsten Loesing wrote:
&gt; On 5/2/12 2:30 PM, Karsten Loesing wrote:
&gt;&gt; If nobody objects within the next, say, two weeks, I'm going to make an
&gt;&gt; old tarball from 2008 available with original nicknames.  And if nobody
&gt;&gt; screams, I'll provide the remaining tarballs containing original
&gt;&gt; nicknames another two weeks later.
&gt; 
&gt; Here we go.  These are the sanitized bridge descriptors from May 2008
&gt; including original bridge nicknames:
&gt; 
&gt; http://freehaven.net/~karsten/volatile/bridges-2008-05-nicknames.tar.bz2

And now, two weeks later, here are the sanitized bridge descriptors
containing nicknames:

https://metrics.torproject.org/data.html#bridgedesc

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120531162956</emailId><senderName></senderName><senderEmail>sid77</senderEmail><timestampReceived>2012-05-31 16:29:56-0400</timestampReceived><subject>Re: [tor-dev] Help with pf and iOS</subject><body>

----- Original Message -----
From: "Ralf-Philipp Weinmann" &lt;ralf@coderpunks.org&gt;
To: tor-dev@lists.torproject.org
Sent: Thursday, 31 May, 2012 5:46:49 PM
Subject: Re: [tor-dev] Help with pf and iOS

&gt; Whoohoo!
LOL, thanks!

&gt; I expect that you really _DO NEED_ that second loopback interface for
&gt; the above config, otherwise your packets will just end up in one big
&gt; loop. A workaround might be to tag the packets when they are rdr'ed and
&gt; make sure that you only rdr packets that are non-tagged. I have to look
&gt; up the exact syntax on how to do that. I strongly suggest testing your
&gt; pf rules on another machine first (OpenBSD or FreeBSD VM) and then
&gt; deploying in iOS.
Yeah, I sense the loop there. I thought that

pass quick on lo0 keep state
pass out quick inet proto tcp user nobody flags S/SA modulate state

was my "exit strategy", anyway. Looks like they never really work ;-)
Tagging packets is a good idea! It's something I didn't think to try in first place \
as, usually, it's useless when it comes to iptables but it's pf here, so I should \
definitively try it.

&gt; Do you have the kernel crash log handy by any chance? It should be in
&gt; /Library/Logs/CrashReporter/Panics
Gone, but I will try to replicate it. Looking for some 0days, are you? :-P
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120402171126</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-04-02 17:11:26-0400</timestampReceived><subject>Re: [tor-dev] Google Summer of Code Proposal - PathSupport counterpart for Stem</subject><body>

Hi Ravi. This is a nice first draft and please keep in mind that I'm
pretty green with PathSupport (I've never used it myself) so feel free
to push back on any suggestions.

The high level approach that you seem to be taking is to copy
PathSupport into stem, then refactor and test it. Is that right? If so
then a few questions...

* Did you get Mike's permission for that? TorCtl is under the BSD
license (I think) and stem is LGPLv3.
* Is this the design that we want? PathSupport is modeled as a narrow
object hierarchy built upon TorCtl.EventHandler. We have the
opportunity to make any API we want so, as a user, what would you find
to be the most intuitive?

My suggestion for starting tasks would be to...

1. Write a simple script to use PathSupport to, say, run wget from a
target locale ('./my_script FR http://www.torproject.org/'). See where
the pain points were in using PathSupport and what, as a user, you
would rather that it did differently.

My understanding is that PathSupport is highly focused on
experimentation since that is what Mike needed for his work. However,
that is just one consumer and I'm most interested in providing an
elegant, simple API that handles basic use cases (like the wget
example) easily and can be *extended* for experiments.

2. Talk with the users of PathSupport to figure out their use cases.
We should either include those capabilities in our PathSupport
counterpart *or* provide what they need to easily make it themselves
(if it's a specialized use case). Only three people or places to
contact come to mind...

* Mike for SoaT and the bandwidth authorities
* Sebastian for TorBEL
* tor-dev@ for researchers and other developers using PathSupport,
Roger might have some suggestions

3. Part of why I was dubious about this being a quick and easy project
is that Stem currently lacks the controller capabilities that you
need. You mention using stem.control.BaseController at several points
which makes sense since it... well, exists. However, as its pydocs say
this is not the class you are looking for...

"Don't use this directly - subclasses provide higher level functionality."

... or they will once we have them. Part of this project would be to
start the general controller class to provide the capabilities that
you need (plus tests of course). On first glance the things that a
PathSupport copy would need are...

* Event handling for, at least, NEWCONSENSUS and NEWDESC.
* A Network Status class. This would be similar to
stem.descriptor.server_descriptor but *far* easier (there's only
around three network status lines).

These are easy and I'm happy to work on them with you. We will, of
course, need more before actually migrating any clients.

&gt; Their feedback will ensure that the API will be usable.

Don't count on it. This will give a nice first draft but expect to
rewrite things quite a few times as we go along. Actually using your
API for real clients will certainly reveal some things that we could
do better. ;)

&gt; I also will communicate with my mentor about my progress and hopefully, will have \
&gt; an intuitive, easy to use API design ready before the coding period starts.

I would like to see a rough first draft of an API as part of the
application, which we could then incrementally refine. Maybe a trac
subpage under stem would be the best place for this?

&gt; Implementation implies writing the code, tests and the documentation.

Yay!

&gt; An amalgamation of the PathSupport.PathBuilder and the PathSupport.ConsensusTracker \
&gt; classes.

I understand why Mike made them separate. A few things to think about...

a. The ConsensusTracker is useful as a standalone class by providing
the current consensus and descriptors. I used this for a short time
with arm but stopped due to 'b'.

b. Loading all of the consensus and descriptor data is... a lot.

atagar@morrigan:~$ du -h ~/.tor/cached-consensus ~/.tor/cached-descriptors
672K	/home/atagar/.tor/cached-consensus
3.1M	/home/atagar/.tor/cached-descriptors

When I did this with arm a couple years ago it choked the application
for several seconds and caused high memory usage. I've heard that this
is better, but still we should figure out what is really necessary for
the PathSupport functionality that we want.

c. This will be moot, of course, if we go with a different design.

&gt; TorCtl.PathSupport.PathBuilder uses a TorCtl.PathSupport.SelectionManager. A helper \
&gt; class for handling (router) configuration updates. I will merge a part of this into \
&gt; stem.path.PathController too

Not quite following. I thought that the SelectionManager was an
argument for the configuration the user wanted to run PathSupport
with. Keeping those separate conceptually seems like a good idea,
though again I haven't actually tried it in practice.

&gt; Is a direct subclass of stem.control.BaseController

Why?

&gt; A major change would be to make PathController fully thread-safe instead of an \
&gt; event/queue system.

Slight correction, stem uses almost the exact same event/queue based
model as TorCtl. The difference is that it also adds read/write locks
to provide more complete thread safety.

&gt; The following will be ported to use Stem:
&gt; * Torflow

Woah, bad idea. Torflow = SoaT + Bandwidth Authorities. That is both
way bigger than you want to take on, and probably the last things that
will migrate (if they ever do at all). Doesn't TorBEL manually
construct circuits? If so then that would be a far better client.

That said, I see where you're getting this from and I might be
completely misunderstanding how TorBEL works...

04:34 &lt; logan&gt; please recommend some TorCtl clients which use the
PathSupport module
04:42 &lt; Sebastian&gt; logan: I think there's just torflow
04:44 &lt; logan&gt; what about torbel ?
04:47 &lt; logan&gt; and SoaT ?
04:50 &lt; Sebastian&gt; soat is a part of torflow
04:50 &lt; Sebastian&gt; torbel doesn't use it
04:51 &lt; Sebastian&gt; torbel uses TorCtl.Router and TorCtl.TorUtil

&gt; There are some unimplemented parts of the general controller class that are \
&gt; required for the implementation of PathSupport, such as the Router class. atagar is \
&gt; currently working on this.

Oh, good that you spotted this. In an ideal world I'd be working on
this but, if the last couple months are any guide, I wouldn't count on
it.

&gt; I will help with implementing these so that they will be ready before the coding \
&gt; period begins.

Great. The top slot on my dance card usually goes to anything that has
people actively offering to help. At the moment that's mostly around
descriptor parsing, but I'm happy to swap back to the controller if
you want to work on it with me.

&gt; Port Torflow to use Stem. This will consume a part of week 11,

/me chokes, realizing that ten days are being allocated to this

... er, ambitious

&gt; I have written a few patches for some Tor Project projects, #1667 (Tor), #5032 \
&gt; (Thandy). Two to Stem, which have been committed to the repository #5199 and #5472.

Many thanks for those, btw. :)

Do you have any standalone code samples (preferably python) that
you've written? Possibly for school?

&gt; I have exams until the 29th of April, so I will be missing a few days of the \
&gt; community bonding period...

No problem.

&gt; Stem, like all libraries implementing an API for a moving target, requires
&gt; maintenance. I will co-maintain Stem in the future. By the time I'm done with
&gt; the SoC program, I would've also gained familiarity with other related
&gt; projects such as Torflow, TorBEL and Arm. I'll be in a position where I can
&gt; help out with those if there is a need.

Great, we're always glad when people stick around after GSoC. It's
unpleasantly rare, but always good to hope for.

&gt; I will keep people informed about my progress by sending (probably monthly,
&gt; or as often as required) reports the mailing list.

Last year we did bi-weekly status updates. I think that I'd like to
work directly with whoever is selected rather than just having code
tossed over the fence, but we'll see if that works out (it's not
everyone's cup of tea). If you'd rather work on things more
independently then let me know.


I'm a little uncomfortable with how nebulous the individual
PathSupport tasks are. Please more concretely say what they include
and your approach. Alternatively, feel free to make this a
"semi-PathSupport and other stem tasks" proposal, taking on some
general stem tasks (like Safe Cookie, metrics-lib migration, general
controller work, etc) plus _exploratory_ work on PathSupport.

* The advantage of that approach would be a better defined tasks
without the unknowns that often derail projects.
* The disadvantage is that you'd finish lots of small, useful features
rather than a big one (personally I count this as a plus, but some
people like just having a single big goal).

Completely up to you. Feel free to continue focusing your application
on PathSupport if you want, the above is just a potential alternative.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120404011708</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-04-04 01:17:08-0400</timestampReceived><subject>Re: [tor-dev] Gsoc 2012 Project Proposal.. Feedback please!!</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Thanks for considering this project and posting your proposal to the =
list.

On 1 Apr 2012, at 11:24, drake01 wrote:
&gt; After initial shortlisting of transport protocols to be integrated =
with tor, I
&gt; am left with sctp and udp.

Do you mean utp (or =B5tp with appropriate mail client :-))

&gt; So if time permits, I intend to help by contributing to other parts of
&gt; this project too especially Experimentor.

Shadow is also worth a look too (it is quite a different design and has =
different tradeoffs to ExperimenTor): http://shadow.cs.umn.edu/

&gt; Comments, Criticism, suggestions are most welcome.. :)

I think that your proposal is good overall -- I'd just recommend =
including information about why you're the right person to work on this =
project.

Steven.=

[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space; "&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for \
considering this project and posting your proposal to the \
list.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;On 1 Apr 2012, at 11:24, drake01 \
wrote:&lt;/div&gt;&lt;blockquote type="cite"&gt;After initial shortlisting of transport protocols \
to be integrated with tor, I&lt;br&gt; am left with sctp and \
udp.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do you mean utp (or µtp with appropriate mail \
client :-))&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;So if time permits, I intend \
to help by contributing to other parts of&lt;br&gt;this project too especially \
Experimentor.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Shadow is also worth a look too (it \
is quite a different design and has different tradeoffs to ExperimenTor): &lt;a \
href="http://shadow.cs.umn.edu/"&gt;http://shadow.cs.umn.edu/&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;Comments, Criticism, suggestions are most welcome.. \
:)&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think that your proposal is good overall -- \
I'd just recommend including information about why you're the right person to work on \
this project.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Steven.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120404213352</emailId><senderName>Paul Syverson</senderName><senderEmail>syverson@itd.nrl.navy.mil</senderEmail><timestampReceived>2012-04-04 21:33:52-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Sun, Mar 11, 2012 at 10:28:04PM +0000, The23rd Raccoon wrote:
&gt;           Analysis of the Relative Severity of Tagging Attacks:
&gt;              Hey hey, ho ho! AES-CTR mode has got to go!
&gt; 
&gt; 
&gt;                   A cypherpunk riot brought to you by:
&gt;                            The 23 Raccoons
&gt; 
&gt; 
&gt; 
&gt; 
&gt; Abstract
&gt; 
&gt; Gather round the dumpster, humans. It's time for your Raccoon
&gt; overlords to take you to school again.
&gt; 
&gt; Watch your step though: You don't want to catch any brain parasites[0].
&gt; 
&gt; 
&gt; Introduction
&gt; 
&gt; For those of you who do not remember me from last time, about 4 years
&gt; ago I demonstrated the effect that the Base Rate Fallacy has on timing
&gt; attacks[1]. While no one has disputed the math, the applicability of
&gt; my analysis to modern classifiers was questioned by George Danezis [2]
&gt; and others. However, a close look at figure 5(a) of [3] shows it to be
&gt; empirically correct[4].
&gt; 
&gt; Recently, Paul Syverson and I got into a disagreement over the
&gt; effectiveness of crypto-tagging attacks such as [5].

I just wanted to let you know that I'm neither ignoring nor forgetting
about this thread and its ilk, just insanely busy with other things.
It's now clear that I'm unlikely to pick up thinking about this topic
again until c. mid-May. Sorry for any inconvenience/annoyance my
dropping out of and into the discussion may cause.

aloha,
Paul

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120406112231</emailId><senderName></senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-04-06 11:22:31-0400</timestampReceived><subject>Re: [tor-dev] Self Introduction for GSoC 2012</subject><body>

[Attachment #2 (multipart/signed)]


On 4/4/12 3:41 PM, junior wrote:
&gt; Tanx a lot Tomas for the response.
&gt; Will you then advice that I continue on the Vidalia or suggest other
&gt; likely projects for me to work on.
&gt;=20

I just saw this email, sorry it seems to be so late.
I think that's a question for you to answer, you know yourself better
than I do and you are going to be able to judge whether you would do a
good job or not. If you think you are, your goal would be to make me
understand why that's the case through a proposal and, for example,
fixing bugs or proposing new features.

If you are interested in joining Tor, you should be around IRC as I
suggested and that way it'd be easier for you to see where you'd be more
comfortable working.

Sorry again for responding so close to the deadline.

Regards,
Tomas


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120409174014</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-04-09 17:40:14-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

Hooman &lt;hmohajer@cs.uwaterloo.ca&gt; writes:

&gt; On 12-03-28 06:57 PM, George Kadianakis wrote:
&gt;&gt; Hooman &lt;hmohajer@cs.uwaterloo.ca&gt; writes:
&gt;&gt;&gt; We called it SkypeMorph since we are still using the morphing
&gt;&gt;&gt; matrix. Although, I personally believe we can find a way to minimize
&gt;&gt;&gt; the amount of padding while keeping the timing and sizes statistically
&gt;&gt;&gt; indistinguishable from that of Skype's, the traffic morphing technique
&gt;&gt;&gt; greatly depends on the characteristics of the source protocol (Tor)
&gt;&gt;&gt; and it's not easy to guess the timing patterns of user's behind
&gt;&gt;&gt; Tor. So if we use traces from web-browsing behind Tor as the input to
&gt;&gt;&gt; our software, and our client uses Tor for downloading multimedia
&gt;&gt;&gt; content, in this case traffic morphing would not perform very well.
&gt;&gt; Hm, we encountered the same problem too, while working on the
&gt;&gt; "morpher" pluggable transport. Traffic morphing would not give us
&gt;&gt; satisfying results, and some times it would even result in more
&gt;&gt; overhead than randomly sampling from the probability distribution of
&gt;&gt; the target protocol.
&gt;&gt;
&gt;&gt; I think we identified the issue in trac ticket #5023 [0]. and also
&gt;&gt; wrote a report on it [1].
&gt;&gt; Another problem of traffic morphing which is not mentioned on that
&gt;&gt; report, is that traffic morphing works by using an oracle which gives
&gt;&gt; you an integer 'i' with (0 &lt; 'i' &lt;= MTU), and then you have to send a
&gt;&gt; packet of size 'i' to the wire. This usually means that you will
&gt;&gt; _never_ send fragmented IP packets, which looks quite sketchy.
&gt;&gt;
&gt;&gt; I don't think there are any non-messy solutions to the above problems,
&gt;&gt; except from realizing that mimicking the packet size probability
&gt;&gt; distribution of a protocol is probably not worth it at the moment (at
&gt;&gt; least against most current real-life adversaries). Especially so when
&gt;&gt; traffic morphing makes your traffic even more distinguishable in other
&gt;&gt; ways (like in the fact that it's not stateful).
&gt; Interesting. So you also believe sampling from the target distribution
&gt; is the best solution at the moment?

I'm not sure if there is a best solution here; it mostly depends on
your threat model.
       
If your adversary can somehow distinguish packet size probability
distributions in real-time, you will probably need to use direct
sampling or traffic morphing. I would personally stick with direct
sampling, for most cases here. By the way, at the same time, the
adversary should not be able to launch the attacks mentioned in my
previous post, which are much simpler than distinguishing packet size
probability distributions in real-time.

For less obscure but more realistic adversaries, I think sillier and
simpler padding or split-and-join schemes [0] might also be effective.

&gt;&gt;
&gt;&gt; Finally, 6 weeks ago I disabled dream.c in morpher.git [2], because I
&gt;&gt; suspect that the Matrix Market I/O library of NIST [3], that I was
&gt;&gt; using, is not the best piece of software engineering out there.
&gt; So George how about the issue I brought up about pluggable transports
&gt; and how we can stop Tor from making circuits while a transport is
&gt; setting up a connection?
&gt; https://trac.torproject.org/projects/tor/ticket/5483
&gt;
&gt; It's not envisioned in the current implementation of the pluggable
&gt; transports, right?

You are not able to do this in the current pluggable transports
codebase, but we are developing schemes that will allow you to do
tricks like this in the future. I will update #5483.

[0]: mentioned here:
https://trac.torproject.org/projects/tor/raw-attachment/ticket/4679/pluggable-roadmap.pdf

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120412123641</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-04-12 12:36:41-0400</timestampReceived><subject>[tor-dev] ampislay: anonymous connection trough IP spoofing</subject><body>

Vecna [1], today published ampislay [2], an 8 years old project to
implement anonymous communication trough IP spoofing.

It's a not-so-conventional techniques, that have it's advantage and
weakness, but that maybe considered within the Tor community for some
particular use-case.

It was a gift for my 2004 birthday (thanks!!!) :-)

-naif

[1] http://www.delirandom.net
[2] https://github.com/vecna/apmislay
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120414095334</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-04-14 09:53:34-0400</timestampReceived><subject>Re: [tor-dev] IRC meeting to discuss sponsor F July milestone on Thu Apr 12, 16:00--18:00 UTC in #to</subject><body>

On 4/4/12 7:56 AM, Karsten Loesing wrote:
&gt; we have an upcoming sponsor F milestone on July 1.  Here's the list of
&gt; deliverables:
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorF/Year2#Phase2Nov152012
&gt; 
&gt; We need a ticket owner for all tickets in the July 1 milestone.  We also
&gt; need a schedule for each of those tickets with the next substep ideally
&gt; being due in the next 4--6 weeks.
&gt; 
&gt; I suggest we have an IRC meeting on
&gt; 
&gt;     Thu Apr 12, 16:00--18:00 UTC in #tor-dev.

We had a very productive meeting two days ago.  Thanks everyone who
participated for taking the time!  I think we made some good progress
for planning the upcoming sponsor F milestones in July and November.

I updated the project tickets linked from the wiki page to reflect what
was discussed during the meeting.

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120401103635</emailId><senderName>drake01</senderName><senderEmail>drakeoone@gmail.com</senderEmail><timestampReceived>2012-04-01 10:36:35-0400</timestampReceived><subject>[tor-dev] Gsoc 2012 Project Proposal.. Feedback please!!</subject><body>

[Attachment #2 (multipart/alternative)]


Hi guys,
This is the initial proposal for "Integrating Tor with user-space transport
protocol
libraries" during GSOC 2012.

Proposal:
After initial shortlisting of transport protocols to be integrated with
tor, I
am left with sctp and udp. Initially I was willing to go with sctp but after
getting suggestions on irc, I propose to integrate the udp library for
datagram
transport to tor (modified tor) as my gsoc 2012 project.  I am leaving sctp
(for
now) and choosing UDP because: 1) I learn that testing has been done for
libutp
(utp) and results seem good. so risk of failure is minimized.  2) The
libutp has
faced the test of time and seen wide usage (u-torrent) 3) The library is
already
available. Although modifications will need to be done to make it work with
tor.. So work from very beginning need not be done. Other stacks are also
available. But It seems to be closest to what we need(based on what I know
so
far. Also Ref: Mentioned in the paper too: Comparison of Tor Datagram
Designs.)
4) The sctp kernel space implementation has been heavily tested (as told by
jmurdoch) but because of security issues mentioned in the paper of its use,
sctp
does not seem to be first choice to bet upon.

Based on Datagram Testing Plan paper,march,2012, I would most likely fit to
work
on utp and hop-by-hop transport beginning in may. (I'd have no other
commitment
by that time.) Circuits are constructed preemptively using tcp in tor.

Also since different transports are to be tested in future (possibly), So
changes to be done in the tor should help it by providing a clean interface
to
change the protocol  (sort of plugin interface.. Although the protocols are
already layered to accomplish it, but reusability factor need to be taken
care
of as much as possible)

As the hop by hop reliability is easier to implement (less changes to tor)
and
project of new transport protocol is new to tor, so not much experience is
available. Thus as an experiment, the hop by hop reliablity seems to be the
best
selection right now (obviously with the scope of making changes in future)

Also if the modified tor is tested on the live tor network, hop by hop
reliability'll help in addressing the issue of deanonymization of nodes
because
major population of nodes'll be using tcp during the migration period.  As
mentioned in "Improving Tor using a TCP over DTLS" paper by Reardon, the
implementation of DTLS (TLS for Datagram) is already there in OpenSSL. TLS
and
DTLS apis are unified too, i.e. same OpenSSL calls'll be able to handle
sending
and receiving data with minimum changes which'll have to be made to tor.

I'd be extremely careful about the overall implementation so that changes
done
in tor don't just emerge out as a separate new branch and act as blockage
for
other transports and future changes. Instead, changes should be made to
complement the future development.

Goals to keep in mind for taking decisions while implementing:
To achieve Low latency and scalability are two goals that I see to keep in
mind
while implementing/integrating the protocol to tor. Thorough testing is only
viable option for ensuring these though. But as mentioned in the Datagram
Testing Plan paper, simulation is also fine..(Please make additions here)
In the
end, As integrating new transport is not an individual's task to complete,
its
being done by a team and a plan is already there (Murdoch's march paper). So
this proposal is for me to be of value to the team and not be limited to the
libutp.  So if time permits, I intend to help by contributing to other
parts of
this project too especially Experimentor.

By the way, where can I find the md5 or sha digests for the Experimentor?

Timeline:
Google summer of code 2012 will be a 12 week (3 months) programme: I would
like
to report my progress twice each week preferably wednesday night (utc+0) and
saturday night (again utc+0). I will submit the detailed timeline after
making
the proposal almost final.. I've planned to maintain a blog or github
pages  to
provide the details about the project's progress..I would be available on
irc
for all of my working time though.
Currently github repository for my torprojectgsoc12:
https://github.com/drake01/torprojectgsoc2012 (its empty, I'll  fill it
soon:) )

Test code:
I am planning to submit a socket based small server/client app through above
repository which I wrote in initial days while learning( needs some changes
to
distribute though).. Also would try to write something utilising raw
sockets to
show my understanding of Internet Protocol stack. Comments!

Current status:
I have cloned the git repository of tor and a few related softwares
including
libutp and have it working on my machine. Also started to dissect the libutp
code.
I have gone through the papers, Comparison of Tor Datagram Designs and
Datagram Testing Plan by Murdoch.
I have overviewed the tor-design paper by Nickand Roger.
Github account: https://github.com/drake01


#vim-7.3

Comments, Criticism, suggestions are most welcome.. :)


-- 
Online pseudonym: drake01, drakeo1 or drakeoone
Blog: http://goo.gl/uMnRp
Github: https://github.com/drake01

[Attachment #5 (text/html)]

Hi guys,&lt;br&gt;This is the initial proposal for "Integrating Tor with user-space \
transport protocol&lt;br&gt;libraries" during GSOC 2012. &lt;br&gt;&lt;br&gt;Proposal:&lt;br&gt;After \
initial shortlisting of transport protocols to be integrated with tor, I&lt;br&gt; am left \
with sctp and udp. Initially I was willing to go with sctp but after&lt;br&gt;getting \
suggestions on irc, I propose to integrate the udp library for datagram&lt;br&gt;transport \
to tor (modified tor) as my gsoc 2012 project.  I am leaving sctp (for&lt;br&gt; now) and \
choosing UDP because: 1) I learn that testing has been done for libutp&lt;br&gt;(utp) and \
results seem good. so risk of failure is minimized.  2) The libutp has&lt;br&gt;faced the \
test of time and seen wide usage (u-torrent) 3) The library is already&lt;br&gt; available. \
Although modifications will need to be done to make it work with&lt;br&gt;tor.. So work \
from very beginning need not be done. Other stacks are also&lt;br&gt;available. But It \
seems to be closest to what we need(based on what I know so&lt;br&gt; far. Also Ref: \
Mentioned in the paper too: Comparison of Tor Datagram Designs.)&lt;br&gt;4) The sctp \
kernel space implementation has been heavily tested (as told by&lt;br&gt;jmurdoch) but \
because of security issues mentioned in the paper of its use, sctp&lt;br&gt; does not seem \
to be first choice to bet upon.&lt;br&gt;&lt;br&gt;Based on Datagram Testing Plan \
paper,march,2012, I would most likely fit to work&lt;br&gt;on utp and hop-by-hop transport \
beginning in may. (I'd have no other commitment&lt;br&gt; by that time.) Circuits are \
constructed preemptively using tcp in tor.&lt;br&gt;&lt;br&gt;Also since different transports are \
to be tested in future (possibly), So&lt;br&gt;changes to be done in the tor should help it \
by providing a clean interface to&lt;br&gt; change the protocol  (sort of plugin \
interface.. Although the protocols are&lt;br&gt;already layered to accomplish it, but \
reusability factor need to be taken care&lt;br&gt;of as much as possible)&lt;br&gt;&lt;br&gt;As the hop \
by hop reliability is easier to implement (less changes to tor) and&lt;br&gt; project of \
new transport protocol is new to tor, so not much experience is&lt;br&gt;available. Thus as \
an experiment, the hop by hop reliablity seems to be the best&lt;br&gt;selection right now \
(obviously with the scope of making changes in future)&lt;br&gt; &lt;br&gt;Also if the modified \
tor is tested on the live tor network, hop by hop&lt;br&gt;reliability'll help in \
addressing the issue of deanonymization of nodes because&lt;br&gt;major population of \
nodes'll be using tcp during the migration period.  As&lt;br&gt; mentioned in \
"Improving Tor using a TCP over DTLS" paper by Reardon, \
the&lt;br&gt;implementation of DTLS (TLS for Datagram) is already there in OpenSSL. TLS \
and&lt;br&gt;DTLS apis are unified too, i.e. same OpenSSL calls'll be able to handle \
sending&lt;br&gt; and receiving data with minimum changes which'll have to be made to \
tor.&lt;br&gt;&lt;br&gt;I'd be extremely careful about the overall implementation so that \
changes done&lt;br&gt;in tor don't just emerge out as a separate new branch and act as \
blockage for&lt;br&gt; other transports and future changes. Instead, changes should be made \
to&lt;br&gt;complement the future development.&lt;br&gt;&lt;br&gt;Goals to keep in mind for taking \
decisions while implementing:&lt;br&gt;To achieve Low latency and scalability are two goals \
that I see to keep in mind&lt;br&gt; while implementing/integrating the protocol to tor. \
Thorough testing is only&lt;br&gt;viable option for ensuring these though. But as mentioned \
in the Datagram&lt;br&gt;Testing Plan paper, simulation is also fine..(Please make \
additions here) In the&lt;br&gt; end, As integrating new transport is not an \
individual's task to complete, its&lt;br&gt;being done by a team and a plan is already \
there (Murdoch's march paper). So&lt;br&gt;this proposal is for me to be of value to \
the team and not be limited to the&lt;br&gt; libutp.  So if time permits, I intend to help \
by contributing to other parts of&lt;br&gt;this project too especially \
Experimentor.&lt;br&gt;&lt;br&gt;By the way, where can I find the md5 or sha digests for the \
Experimentor?&lt;br&gt;&lt;br&gt;Timeline:&lt;br&gt; Google summer of code 2012 will be a 12 week (3 \
months) programme: I would like&lt;br&gt;to report my progress twice each week preferably \
wednesday night (utc+0) and&lt;br&gt;saturday night (again utc+0). I will submit the \
detailed timeline after making&lt;br&gt; the proposal almost final.. I've planned to \
maintain a blog or github pages  to&lt;br&gt;provide the details about the project's \
progress..I would be available on irc&lt;br&gt;for all of my working time \
though.&lt;br&gt;Currently github repository for my torprojectgsoc12:&lt;br&gt; &lt;a \
href="https://github.com/drake01/torprojectgsoc2012"&gt;https://github.com/drake01/torprojectgsoc2012&lt;/a&gt; \
(its empty, I'll  fill it soon:) )&lt;br&gt;&lt;br&gt;Test code:&lt;br&gt;I am planning to submit a \
socket based small server/client app through above&lt;br&gt; repository which I wrote in \
initial days while learning( needs some changes to&lt;br&gt;distribute though).. Also would \
try to write something utilising raw sockets to&lt;br&gt;show my understanding of Internet \
Protocol stack. Comments!&lt;br&gt; &lt;br&gt;Current status:&lt;br&gt;I have cloned the git repository \
of tor and a few related softwares including&lt;br&gt;libutp and have it working on my \
machine. Also started to dissect the libutp&lt;br&gt;code.&lt;br&gt;I have gone through the \
papers, Comparison of Tor Datagram Designs and&lt;br&gt; Datagram Testing Plan by \
Murdoch.&lt;br&gt;I have overviewed the tor-design paper by Nickand Roger.  &lt;br&gt;Github \
account: &lt;a href="https://github.com/drake01"&gt;https://github.com/drake01&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;#vim-7.3&lt;br&gt;&lt;br&gt;Comments, \
Criticism, suggestions are most welcome.. :)&lt;br&gt; &lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;Online \
pseudonym: drake01, drakeo1 or drakeoone&lt;br&gt;Blog: &lt;a href="http://goo.gl/uMnRp" \
target="_blank"&gt;http://goo.gl/uMnRp&lt;/a&gt;&lt;br&gt;Github: &lt;a \
href="https://github.com/drake01" target="_blank"&gt;https://github.com/drake01&lt;/a&gt;&lt;br&gt; \
&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120403201115</emailId><senderName>junior</senderName><senderEmail>tsimonpatrick@gmail.com</senderEmail><timestampReceived>2012-04-03 20:11:15-0400</timestampReceived><subject>[tor-dev] Self Introduction for GSoC 2012</subject><body>

Hi Tor Community,

My name is Tengey Junior Patrick, a 4th year student of the University
of Ghana, in Ghana of course. I am offering computer science and
Mathematics and am a programmer mainly in java who is very interested
in participating in GSoC 2012 with Tor.

I have read that Tor is participating in GSoC 2012. I am very enthused
about what Tor does and I can=92t wait to be a part of this campaign of
improving Internet privacy and security. Especially because I have
been a victim of Internet Surveillance where my password was tempered
with so I am well motivated for this. I have been observing your
community interactions for some time now.

I have already subscribed to the tor-announce mailing list and the
tor-dev list. I have also been idling on the #tor-dev on the OFTC IRC
channel. I have gone
through the proposed students=92 projects [2] and some documentations on
"Running Tor" [1] . I have downloaded and installed the stable version
of the Vidalia bundle and I am acquainting myself with its usage. I
want to know if I am doing the right things since I am new to Tor.
Also I want to know if the project on "Tor Controller Status Event
Interface for Vidalia" is still available to work on. I particularly
program in Java and have done some work on UI developements. Also I am
quite proficient in the english language and can play around with
photoshop as well. But I don=92t really program in c++ though I have
learnt the basics in skul, so does that disqualify me from working on
the project. If not, what else must I know prior to the application in
order to get acquainted with your practices and better understand your
organizational set up. I will be very glad if help is given me in this
regard. Thanks a lot.


[1]https://www.torproject.org/docs/documentation.html.en
[2]https://www.torproject.org/getinvolved/volunteer.html.en#Projects
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120404170525</emailId><senderName></senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-04-04 17:05:25-0400</timestampReceived><subject>Re: [tor-dev] Self Introduction for GSoC 2012</subject><body>

[Attachment #2 (multipart/signed)]


On 4/3/12 5:11 PM, junior wrote:
&gt; Hi Tor Community,
&gt; 

Hi!

&gt; Also I want to know if the project on "Tor Controller Status Event
&gt; Interface for Vidalia" is still available to work on. I particularly
&gt; program in Java and have done some work on UI developements. Also I am
&gt; quite proficient in the english language and can play around with
&gt; photoshop as well. But I don’t really program in c++ though I have
&gt; learnt the basics in skul, so does that disqualify me from working on
&gt; the project. If not, what else must I know prior to the application in
&gt; order to get acquainted with your practices and better understand your
&gt; organizational set up. I will be very glad if help is given me in this
&gt; regard. Thanks a lot.
&gt; 

To be able to work in Vidalia you will mainly need to understand how Qt
works. Vidalia is built upon that framework and its core idioms. Qt is
C++, but you can "avoid" C++ if you work on a plugin which would be in
javascript (but you'll need to understand core Qt concepts).
That being said, both proposed projects need C++.

Regarding the Tor Controller Status Events project, it is still
available in the sense that you can submit a proposal, which doesn't
mean that there aren't more people wanting to work on it.

You should join us on IRC #vidalia (or #tor-dev for general tor
development discussions) at OFTC if you want to get involved with us
regardless of GSoC.

Regards,
Tomás


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120404184155</emailId><senderName>junior</senderName><senderEmail>tsimonpatrick@gmail.com</senderEmail><timestampReceived>2012-04-04 18:41:55-0400</timestampReceived><subject>Re: [tor-dev] Self Introduction for GSoC 2012</subject><body>

Tanx a lot Tomas for the response.
Will you then advice that I continue on the Vidalia or suggest other
likely projects for me to work on.

On 4/4/12, Tom=E1s Touceda &lt;chiiph@torproject.org&gt; wrote:
&gt; On 4/3/12 5:11 PM, junior wrote:
&gt;&gt; Hi Tor Community,
&gt;&gt;
&gt;
&gt; Hi!
&gt;
&gt;&gt; Also I want to know if the project on "Tor Controller Status Event
&gt;&gt; Interface for Vidalia" is still available to work on. I particularly
&gt;&gt; program in Java and have done some work on UI developements. Also I am
&gt;&gt; quite proficient in the english language and can play around with
&gt;&gt; photoshop as well. But I don=92t really program in c++ though I have
&gt;&gt; learnt the basics in skul, so does that disqualify me from working on
&gt;&gt; the project. If not, what else must I know prior to the application in
&gt;&gt; order to get acquainted with your practices and better understand your
&gt;&gt; organizational set up. I will be very glad if help is given me in this
&gt;&gt; regard. Thanks a lot.
&gt;&gt;
&gt;
&gt; To be able to work in Vidalia you will mainly need to understand how Qt
&gt; works. Vidalia is built upon that framework and its core idioms. Qt is
&gt; C++, but you can "avoid" C++ if you work on a plugin which would be in
&gt; javascript (but you'll need to understand core Qt concepts).
&gt; That being said, both proposed projects need C++.
&gt;
&gt; Regarding the Tor Controller Status Events project, it is still
&gt; available in the sense that you can submit a proposal, which doesn't
&gt; mean that there aren't more people wanting to work on it.
&gt;
&gt; You should join us on IRC #vidalia (or #tor-dev for general tor
&gt; development discussions) at OFTC if you want to get involved with us
&gt; regardless of GSoC.
&gt;
&gt; Regards,
&gt; Tom=E1s
&gt;
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120325231844</emailId><senderName>Hooman</senderName><senderEmail>hmohajer@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-03-25 23:18:44-0400</timestampReceived><subject>[tor-dev] SkypeMorph</subject><body>

[Attachment #2 (multipart/alternative)]


Greetings,

A while ago the Tor project rolled out Obfsproxy as a Browser Bundle 
[1], for users behind firewalls filtering SSL or detecting other 
characteristics of a Tor connection, to help them access bridges.

In our recent work, SkypeMorph [2], we have tried to use Skype video 
communications as our target protocol for protocol obfuscation. 
SkypeMorph functionality is similar to Obfsproxy, but the connection 
between the bridge and the client looks like a Skype video call (the 
details of how we do this is discussed in the technical report).

We also have an open-source proof-of-concept impelmenation of the 
SkypeMorph available at: [3]


Notes:
1- At the moment our code relies on SkypeKit SDK [4] (a paid Skype SDK 
which you can get for around US$ 5) for Skype functionalities (the 
README file in the package explains how one can obtain SkypeKit). 
However, it can be easily ported to Skype public API [5], so users would 
not have to pay for it.

2- SkypeMorph and pluggable transports: Although our code can 
potentially be used as a pluggable transport, there is a minor 
difficulty with the pluggable transport framework that needs to be 
addressed before it can host our code. As mentioned above, our code uses 
Skype network for basic login stuff, so it takes a little bit more time 
than what Tor expect from a typical transport (like Obfsproxy), so the 
Tor client gives up building circuits after a while. We are aware of 
ORControllers tricks to solve the problem, but it does not seem to be 
the right way to do it and it would be awesome if the pluggable 
transport were able to tell Tor that it's working on setting up the 
connection, and that Tor
shouldn't give up on it until it says it's ready. I am sure other 
transports could also benefit from this.

Hooman



[1]:https://blog.torproject.org/blog/obfsproxy-next-step-censorship-arms-race
[2]:http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf
[3]:http://crysp.uwaterloo.ca/software/
[4]:http://developer.skype.com/public/skypekit
[5]:http://developer.skype.com/public-api-reference


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    Greetings,&lt;br&gt;
    &lt;br&gt;
    A while ago the Tor project rolled out Obfsproxy as
    &lt;meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1"&gt;
    a Browser Bundle [1], for users behind firewalls filtering SSL or
    detecting other characteristics of a Tor connection, to help them
    access bridges.&lt;br&gt;
    &lt;br&gt;
    In our recent work, SkypeMorph [2], we have tried to use Skype video
    communications as our target protocol for protocol obfuscation.
    SkypeMorph functionality is similar to Obfsproxy, but the connection
    between the bridge and the client looks like a Skype video call (the
    details of how we do this is discussed in the technical report).&lt;br&gt;
    &lt;br&gt;
    We also have an open-source proof-of-concept impelmenation of the
    SkypeMorph available at: [3]&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    Notes:&lt;br&gt;
    1- At the moment our code relies on SkypeKit SDK
    &lt;meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1"&gt;
    [4] (a paid Skype SDK which you can get for around US$ 5) for Skype
    functionalities (the README file in the package explains how one can
    obtain SkypeKit). However, it can be easily ported to Skype public
    API [5], so users would not have to pay for it.&lt;br&gt;
    &lt;br&gt;
    2- SkypeMorph and pluggable transports: Although our code can
    potentially be used as a pluggable transport, there is a minor
    difficulty with the pluggable transport framework that needs to be
    addressed before it can host our code. As mentioned above, our code
    uses Skype network for basic login stuff, so it takes a little bit
    more time than what Tor expect from a typical transport (like
    Obfsproxy), so the Tor client gives up building circuits after a
    while. We are aware of ORControllers tricks to solve the problem,
    but it does not seem to be the right way to do it and it would be
    awesome if the pluggable transport were able to tell Tor that it's
    working on setting up the connection, and that Tor&lt;br&gt;
    shouldn't give up on it until it says it's ready. I am sure other
    transports could also benefit from this.&lt;br&gt;
    &lt;br&gt;
    Hooman&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    [1]:&lt;a moz-do-not-send="true"
href="https://blog.torproject.org/blog/obfsproxy-next-step-censorship-arms-race"&gt;https://blog.torproject.org/blog/obfsproxy-next-step-censorship-arms-race&lt;/a&gt;&lt;br&gt;
  [2]:&lt;a moz-do-not-send="true" class="moz-txt-link-freetext"
      href="http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf"&gt;http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf&lt;/a&gt;&lt;br&gt;
  [3]:&lt;a moz-do-not-send="true" class="moz-txt-link-freetext"
      href="http://crysp.uwaterloo.ca/software/"&gt;http://crysp.uwaterloo.ca/software/&lt;/a&gt;&lt;br&gt;
  [4]:&lt;a moz-do-not-send="true"
      href="http://developer.skype.com/public/skypekit"&gt;http://developer.skype.com/public/skypekit&lt;/a&gt;&lt;br&gt;
  [5]:&lt;a moz-do-not-send="true"
      href="http://developer.skype.com/public-api-reference"&gt;http://developer.skype.com/public-api-reference&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120326013754</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-03-26 01:37:54-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On Sun, Mar 25, 2012 at 07:18:44PM -0400, Hooman wrote:
&gt; In our recent work, SkypeMorph [2], we have tried to use Skype video
&gt; communications as our target protocol for protocol obfuscation.
&gt; SkypeMorph functionality is similar to Obfsproxy, but the connection
&gt; between the bridge and the client looks like a Skype video call (the
&gt; details of how we do this is discussed in the technical report).

Hi Hooman,

Looks like a great first release. Thanks for sharing it with us!

Can you give us some guesses about next steps for resolving these issues
(or explaining why they aren't actually as worrisome as they appear)?

A) It looks like the transport has no notion of adapting to network
conditions, i.e. congestion control. So it will basically fall apart on
a low-bandwidth or congested network.

B) It sends at a constant rate of 43KB/s in each direction all the
time. Even if users are willing to tolerate that, it doesn't scale on
the bridge/relay side if there are lots of users. I wonder how feasible
a "traffic shaping" approach would be (where the flow rate drops off
if there's no underlying traffic), and how much that would screw with
your statistics. Which leads to:

C) The packet size and timing distributions only aim to match the
first-order properties of Skype. At the same time, DPI vendors have
already been in a battle with Skype traffic for a while now. How advanced
do you think DPI vendors are at detecting Skype-like traffic, and thus at
distinguishing your traffic from real Skype traffic? Similarly, how bad is
it that you don't follow through with the TCP side of the Skype handshake?

D) The morphing output is basically identical to the naive shaping. Are
you sure you did it right?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120404055652</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-04-04 05:56:52-0400</timestampReceived><subject>[tor-dev] IRC meeting to discuss sponsor F July milestone on Thu Apr 12, 16:00--18:00 UTC in #tor-de</subject><body>

Hi everyone,

we have an upcoming sponsor F milestone on July 1.  Here's the list of
deliverables:

https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorF/Year2#Phase2Nov152012

We need a ticket owner for all tickets in the July 1 milestone.  We also
need a schedule for each of those tickets with the next substep ideally
being due in the next 4--6 weeks.

I suggest we have an IRC meeting on

    Thu Apr 12, 16:00--18:00 UTC in #tor-dev.

Here's the time and date for people not living in UTC land:

http://www.timeanddate.com/worldclock/fixedtime.html?iso=20120412T16

People who should attend are: George, Erinn, Nick, Steven, Roger, Aaron,
Jake, Linus, Sebastian, and anyone else who wants to attend.

If you have any input on the project tickets before next Thursday,
please feel free to comment on them.  The more questions we solve before
the meeting, the better.

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120403100046</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-04-03 10:00:46-0400</timestampReceived><subject>[tor-dev] brdgrd: Protecting bridges from the GFC</subject><body>

Hi,

I've been working on a small tool whose purpose is to protect bridges
from the Chinese firewall. The tool runs independently of Tor and
analyzes/rewrites SYNs and SYN/ACKs which it gets with the help of
libnetfilter_queue. It is quick and easy to set up and can be run by
bridge operators.

Basically, the tool achieves two things:
- Evading the Chinese DPI engine by rewriting the TCP window size
  during the TCP handshake. This leads to a fragmented cipher list
  which does not seem to be recognized by the GFC.
- Blocking scanners with two dirty hacks.

I did not have a lot of time to test it yet but I've found the window
size rewriting to be particularly effective (yet ugly). It worked with
Windows {XP, 7} and recent Linux boxes. The scanner blocking strategies
are not that effective since they imply many false positives, i.e.,
legitimate users being locked out.

Before showing this to a broader audience, I need some people looking at
the code, though. The code, just 600 lines of C, is available at:
https://github.com/NullHypothesis/brdgrd/

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120418212842</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-04-18 21:28:42-0400</timestampReceived><subject>[tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

The purpose of Exit Enclaves was to allow people running a website to
make Tor users
access it without ever leaving the Tor network. This leads to the
clients having end-to-end
encryption with the target destination.

Even in previous version this had some issues, one of which was the fact
that at the first
connection the user would not be accessing the destination over a Tor
circuit if the destination
was provided in a hostname format (and not IP).

The current stable version of Tor (0.2.2.x) still supports Exit
enclaves. The new versions of Tor
(&gt; 0.2.3.x) use a new descriptor format (microdescriptors) allow relays
to specify an Exit Enclave
policy, but clients will not use it, therefore voiding the purpose of
exit enclaving.

I believe there is the need for something similar to Tor Exit Enclaving
and the closest thing I see
fit these requirements are Tor Encrypted Services
(https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-encrypted-services.txt).

Encrypted Services (EC), are basically regular Tor Hidden Services, that
do not provide anonymity
for the server and gain a better performance because of this (they have
a one-hop circuit
to the RV and IP).

The problem with making Encrypted services work to replace Exit Enclaves
is that the client needs
to have a way to understand that their destination is running also as an
Encrypted Service.

In this very high level overview I don't go into very much detail of how
this system will actually
work, but I hope it will prompt some discussion on the matter.

I think this can be achieved mainly in 3 ways.

1) The client already knows all of the EC's
2) The client looks up if a destination is an EC when trying to connect
to it
3) The final hop looks up if the destination is an EC

These all have some drawbacks:

In 1) the client needs to download the full list of EC's, therefore if
the number of EC's get's
very large it will take clients much more to bootstrap and they will
need to store more data.
The good thing of this though is that the speed of connections would be
as fast as they
are at the moment as it does not require any extra connections.

In 2) the clients needs to complete an extra round-trip for every
connection. I don't think
this is a valid solution as it would degrade the quality of connections
for every user.

In 3) the final hop would do along side a normal A lookup for hostnames
a CNAME lookup (
or another special field). If it finds that such a lookup returns a
.onion address instead of
returning a RELAY_CONNECTED cell it will return a ENCRYPTED_SERVICE cell
containing
the .onion address of the target ES.

The client will then cache this address and connect to it.

This approach adds a little bit of overhead (since two DNS lookups need
to be made),
but it is still faster than 2).

It suffers from the issue of the exit node could spoof the .onion
address and redirect
the user to a malicious .onion address. This is quite a tough problem
that I am still
unsure how it could be solved. If we have support for DNSSec this issue
could be mitigated.

I would love some feedback on this topic.


- Art.




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120424114847</emailId><senderName>Jérémy Bobbio</senderName><senderEmail>lunar@debian.org</senderEmail><timestampReceived>2012-04-24 11:48:47-0400</timestampReceived><subject>[tor-dev] TorBrowser and Firefox ESR</subject><body>

[Attachment #2 (multipart/signed)]


Hi!

(I tried to ask the question to Mike Perry on IRC but I am not sure that
it was the best place to do so, also given that my proxy had
connectivity issue yesterday. If someone have already answered me there,
I apologies for wasting a little bit of your time, but I did not receive
the reply.)

It looks like Firefox maintainers in Debian have decided to ship
Extended Support Releases in the upcoming Wheezy release.

This made me wonder if ESR changed any plans concerning TorBrowser. Will
Tor Browser Bundle keep following upstream "personal use" releases or
switch to ESR?

Cheers,
-- 
JÃ©rÃ©my Bobbio                        .''`. 
lunar@debian.org                    : :â’¶  :  # apt-get install anarchism
                                    `. `'` 
                                      `-   

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120421144254</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-04-21 14:42:54-0400</timestampReceived><subject>[tor-dev] First-time tails/tor user feedback</subject><body>

I spent the past week in Sweden, attending the Stockholm Internet
Forum, http://www.stockholminternetforum.se/, for part of it. I made a
number of tails 0.10.2 usb sticks for people on request. I also asked a
lot of people their impressions of Tor and Tails. I received a plethora
of feedback. All 8 people are involved in the Internet Freedom policy,
technology, or freedom of speech communities. They had very different
levels of self-assessed technical skill. The 8 people represented 6
countries.

tldr; 8 people were tested, 8 people had trouble doing simple things
with tor browser in Tails. Issues 4-6 are directly related to Tor.

And by asked, I mean, I stuck them in front of my laptop, put the usb
stick in the computer, and asked them to browse to their favorite site.
No one wanted to be video recorded, even if I offered to only record
the screen and not audio.

Everyone managed to power on the laptop and wait for Tails to boot.

# First issue: Language selection

The first issue was on the language selection screen. 4 of 8
people were confused why it was called "Debian Live System" and not
"Tails Live System". 8 of 8 knew what language selection meant, but
weren't sure how this mapped to Tails.

# Second issue: wifi and tor browser

The tor browser starts up before the wireless is configured. The tor
browser then reports a proxy error. With some prompting, all 8 figured
out the wifi and then didn't know what to do. Tor does keep trying to
load, and takes forever because it needs to download the entire
directory. Users have no feedback as to what's going on behind the
scenes because vidalia is hidden.

8 of 8 waited patiently for something to happen on the screen.

# Third issue: green onion

3 of 8 people saw the green onion appear in the menu bar up top. These
three people hovered over it and saw the 'Connected to the Tor Network'
message. No one knew to double-click on it to get a menu of other things
to do. No one knew to right-click on it to get the drop-down menu. They
were presented with the default check.torproject.org 'congratulations'
page and then sat there.

# Fourth issue: check.tpo is not helpful

8 of 8 people saw the default check.torproject.org site telling them
'congratulations. Your browser is configured to use tor.' 7 of 8 people
asked 'where is my browser?' The one who didn't ask this question was
already a firefox user and recognized the interface. 0 of 8 understood
what the IP address message meant. Comments ranged from 'is that
different than my current IP address?' to 'what's an ip address?'

As an aside, when showing someone TBB on their own laptop, they saw the
check.tpo site, and then went to Safari and started it up. When asked
why they did this, the answer was 'safari is my browser. this says your
browser is configured to use tor.'

No one used the language selections at the bottom of check.tpo, nor even
understood why they were there.

# Fifth issue: exit relay congestion/failures

8 of 8 people tried to get to their own sites. 'I wonder what my site
looks like when I'm anonymous' was the most common comment (5 of 8).
For 6 of 8 people, their site didn't load at all, and tor browser
reported their site was unreachable. All 6 then tried to go to
google search in their own language; meaning google.es, google.se, etc.
For 3 of those 6, this didn't work either. They gave up and assumed tor
was broken or was censoring their destinations.

I intervened, opened the vidalia network map, closed the circuit in
question, and asked them to repeat their browsing. 

5 of 6 were able to get to their sites now. The one that was not able
to had the same exit relay as last time, Amunet1, in a new circuit and
just couldn't get anywhere through it. After yet another new circuit,
they could get through to everything.

The user has no feedback as to why their site didn't work. And tor
assumes everything is working fine.

When asked "please find a video you like", they all went to youtube.
Most of the videos they wanted to see resulted in 'This video is
currently unavailable.' 8 of 8 assumed it was because youtube was
blocking tor, not because the video is flash-required. 2 of 8 started
randomly clicking videos suggested by youtube to see if any of them
worked. Eventually, 2 of 8 got videos to work with youtube and were
amazed it worked at all.

# Sixth issue: no flash, no warning

2 of 8 people had flash apps on their website. 4 of 8 had ad banners
that used flash. All were surprised at the red outline with a snake in
it appearing instead of their flash apps. None understood what
happened.

After an explanation, one person suggested changing the red outline
with snake to an actual message written inside, along the lines of
'this app blocked for your protection. click here to unblock it.' I
explained why that wouldn't work (because there is no flash, java,
silverlight plugins installed) and their answer was 'then do not show
it at all'. Inside noscript, I unchecked the 'show placeholder..'
option and had them browse again. they were happy. It seems if the user
cannot do anything about the blocked apps, not showing them may be
preferred.

# Seventh issue: shutdown

I asked all 8 to shutdown tails and let me know when they thought their
data was safely no longer on the system. 1 of 8 figured out how to
shutdown tails by clicking the big red button in the upper right
corner. The rest hit the power button on the laptop.

After rebooting, i showed them all they could just pull the usb drive
to do it as well. As soon as tails started shutting down, they all
assumed everything was safe and tried to power off the laptop. 

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120426070909</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-04-26 07:09:09-0400</timestampReceived><subject>[tor-dev] [Patch] test_util.c with MSVC</subject><body>

The src/test/test_util.c doesn't compile with MSVC (CL ver. 16.00.30319.01).
It doesn't like the "#ifdef 0" construct, but the whole chunk should be
enabled with some modifications IMHO.

'path_is_relative()' doesn't handle the "http:\\dir" case though. Why should
it? Besides 'expand_filename()' isn't for Windows. I suggest this patch:

--- Git-latest\src\test\test_util.c  Fri Apr 06 22:45:14 2012
+++ src\test\test_util.c    Thu Apr 26 08:59:18 2012
@@ -1526,10 +1526,6 @@

   /* Windows */
 #ifdef MS_WINDOWS
-  /* I don't have Windows so I can't test this, hence the "#ifdef
-     0". These are tests that look useful, so please try to get them
-     running and uncomment if it all works as it should */
-#ifdef 0
   test_eq(1, path_is_relative("dir"));
   test_eq(1, path_is_relative("dir\\"));
   test_eq(1, path_is_relative("dir\\a:"));
@@ -1538,8 +1534,7 @@
   test_eq(0, path_is_relative("\\dir"));
   test_eq(0, path_is_relative("a:\\dir"));
   test_eq(0, path_is_relative("z:\\dir"));
-  test_eq(0, path_is_relative("http:\\dir"));
-#endif
+  test_eq(1, path_is_relative("http:\\dir"));  /* path_is_relative() doesn't test for such */

 #endif

  done:
@@ -2887,7 +2882,9 @@
   UTIL_LEGACY(config_line_quotes),
   UTIL_LEGACY(config_line_comment_character),
   UTIL_LEGACY(config_line_escaped_content),
+#ifndef MS_WINDOWS
   UTIL_LEGACY(expand_filename),
+#endif
   UTIL_LEGACY(strmisc),
   UTIL_LEGACY(pow2),
   UTIL_LEGACY(gzip),


With the above, test/test.exe now says:
  util/path_is_relative: OK

--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120426062308</emailId><senderName>九零后</senderName><senderEmail>after1990s@gmail.com</senderEmail><timestampReceived>2012-04-26 06:23:08-0400</timestampReceived><subject>[tor-dev] New from GSoC</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, I come here from GSoc and want to join  project Obfsproxy. But I can't
find the  contributors' mail , where can I get it?

[Attachment #5 (text/html)]

&lt;div style="text-align:left"&gt;Hi, I come here from GSoc and want to join    project \
Obfsproxy. But I can't find the   contributors' mail , where can I get \
it?&lt;/div&gt;&lt;div style="text-align:left"&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120426203757</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-04-26 20:37:57-0400</timestampReceived><subject>Re: [tor-dev] [Patch] test_util.c with MSVC</subject><body>

On Thu, 26 Apr 2012 09:09:09 +0200, Gisle Vanem &lt;gvanem@broadpark.no&gt;  
wrote:

&gt; The src/test/test_util.c doesn't compile with MSVC (CL ver.  
&gt; 16.00.30319.01).
&gt; It doesn't like the "#ifdef 0" construct, but the whole chunk should be
&gt; enabled with some modifications IMHO.

    Ugh, sorry about that. I made the changes blindly because I didn't have  
any way to test them on Windows :-S

&gt; 'path_is_relative()' doesn't handle the "http:\\dir" case though. Why  
&gt; should it? Besides 'expand_filename()' isn't for Windows. I suggest this  
&gt; patch:

    Looking at the tests now, if we leave "http:\\dir" around it should  
probably return 1 (it's as nonsensical as "dir\\a:" so it should behave  
the same). It's probably not useful, so we can drop it... but in case of  
leaving it around, it should be moved right after "dir\\a:\\" (ie. at the  
end of the cases that return 1).

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120421162109</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-04-21 16:21:09-0400</timestampReceived><subject>Re: [tor-dev] First-time tails/tor user feedback</subject><body>

On 2012-04-21, Andrew Lewman &lt;andrew@torproject.is&gt; wrote:

&gt; # Third issue: green onion
&gt;
&gt; 3 of 8 people saw the green onion appear in the menu bar up top. These
&gt; three people hovered over it and saw the 'Connected to the Tor Network'
&gt; message. No one knew to double-click on it to get a menu of other things
&gt; to do. No one knew to right-click on it to get the drop-down menu.

What should they have wanted to do with Vidalia?

&gt; They
&gt; were presented with the default check.torproject.org 'congratulations'
&gt; page and then sat there.
&gt;
&gt; # Fourth issue: check.tpo is not helpful
&gt;
&gt; 8 of 8 people saw the default check.torproject.org site telling them
&gt; 'congratulations. Your browser is configured to use tor.' 7 of 8 people
&gt; asked 'where is my browser?' The one who didn't ask this question was
&gt; already a firefox user and recognized the interface. 0 of 8 understood
&gt; what the IP address message meant. Comments ranged from 'is that
&gt; different than my current IP address?' to 'what's an ip address?'
&gt;
&gt; As an aside, when showing someone TBB on their own laptop, they saw the
&gt; check.tpo site, and then went to Safari and started it up. When asked
&gt; why they did this, the answer was 'safari is my browser. this says your
&gt; browser is configured to use tor.'

That is exactly why I suggested the phrase "Congratulations. *This*
browser is configured to use Tor." (emphasis added) on
https://bugs.torproject.org/2289 .  But when I explained on IRC that
there is a big difference between "this browser" and "your browser",
no one believed that users would interpret them differently.



Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120421170624</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-04-21 17:06:24-0400</timestampReceived><subject>Re: [tor-dev] First-time tails/tor user feedback</subject><body>

On Sat, 21 Apr 2012 16:21:09 +0000
Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:

&gt; &gt; # Third issue: green onion

&gt; What should they have wanted to do with Vidalia?

Perhaps seeing the progress bar as tor bootstraps would have been
helpful. Perhaps knowing they do have some control over this blackbox
thing called tor browser would have been helpful.

Another thought is that using tor requires some education. Just
downloading it and running is probably dangerous for a subset of users.
One analogy is that tor is a race car. While many know how to
drive a car on the street, driving a race car takes some education and
practice to do safely. 

&gt; That is exactly why I suggested the phrase "Congratulations. *This*
&gt; browser is configured to use Tor." (emphasis added) on
&gt; https://bugs.torproject.org/2289 .  But when I explained on IRC that
&gt; there is a big difference between "this browser" and "your browser",
&gt; no one believed that users would interpret them differently.

I agree with you.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120418213318</emailId><senderName>Andrew Clausen</senderName><senderEmail>clausen@econ.upenn.edu</senderEmail><timestampReceived>2012-04-18 21:33:18-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

Hi Arturo,

Do .exit addresses already do what you had in mind?  For example, if
you add "AllowDotExit 1" to your torrc, you can type an address like
this

http://thewebserver.exit/index.html

into your web browser.

It would be nice if this particular usage of .exit were allowed by
default (but the more dangerous anotherserver.anexitnode.exit still
remain disabled by default).

Cheers,
Andrew

On 18 April 2012 17:28, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt; The purpose of Exit Enclaves was to allow people running a website to
&gt; make Tor users
&gt; access it without ever leaving the Tor network. This leads to the
&gt; clients having end-to-end
&gt; encryption with the target destination.
&gt;
&gt; Even in previous version this had some issues, one of which was the fact
&gt; that at the first
&gt; connection the user would not be accessing the destination over a Tor
&gt; circuit if the destination
&gt; was provided in a hostname format (and not IP).
&gt;
&gt; The current stable version of Tor (0.2.2.x) still supports Exit
&gt; enclaves. The new versions of Tor
&gt; (&gt; 0.2.3.x) use a new descriptor format (microdescriptors) allow relays
&gt; to specify an Exit Enclave
&gt; policy, but clients will not use it, therefore voiding the purpose of
&gt; exit enclaving.
&gt;
&gt; I believe there is the need for something similar to Tor Exit Enclaving
&gt; and the closest thing I see
&gt; fit these requirements are Tor Encrypted Services
&gt; (https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-encrypted-services.txt).
&gt;
&gt; Encrypted Services (EC), are basically regular Tor Hidden Services, that
&gt; do not provide anonymity
&gt; for the server and gain a better performance because of this (they have
&gt; a one-hop circuit
&gt; to the RV and IP).
&gt;
&gt; The problem with making Encrypted services work to replace Exit Enclaves
&gt; is that the client needs
&gt; to have a way to understand that their destination is running also as an
&gt; Encrypted Service.
&gt;
&gt; In this very high level overview I don't go into very much detail of how
&gt; this system will actually
&gt; work, but I hope it will prompt some discussion on the matter.
&gt;
&gt; I think this can be achieved mainly in 3 ways.
&gt;
&gt; 1) The client already knows all of the EC's
&gt; 2) The client looks up if a destination is an EC when trying to connect
&gt; to it
&gt; 3) The final hop looks up if the destination is an EC
&gt;
&gt; These all have some drawbacks:
&gt;
&gt; In 1) the client needs to download the full list of EC's, therefore if
&gt; the number of EC's get's
&gt; very large it will take clients much more to bootstrap and they will
&gt; need to store more data.
&gt; The good thing of this though is that the speed of connections would be
&gt; as fast as they
&gt; are at the moment as it does not require any extra connections.
&gt;
&gt; In 2) the clients needs to complete an extra round-trip for every
&gt; connection. I don't think
&gt; this is a valid solution as it would degrade the quality of connections
&gt; for every user.
&gt;
&gt; In 3) the final hop would do along side a normal A lookup for hostnames
&gt; a CNAME lookup (
&gt; or another special field). If it finds that such a lookup returns a
&gt; .onion address instead of
&gt; returning a RELAY_CONNECTED cell it will return a ENCRYPTED_SERVICE cell
&gt; containing
&gt; the .onion address of the target ES.
&gt;
&gt; The client will then cache this address and connect to it.
&gt;
&gt; This approach adds a little bit of overhead (since two DNS lookups need
&gt; to be made),
&gt; but it is still faster than 2).
&gt;
&gt; It suffers from the issue of the exit node could spoof the .onion
&gt; address and redirect
&gt; the user to a malicious .onion address. This is quite a tough problem
&gt; that I am still
&gt; unsure how it could be solved. If we have support for DNSSec this issue
&gt; could be mitigated.
&gt;
&gt; I would love some feedback on this topic.
&gt;
&gt;
&gt; - Art.
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120418214712</emailId><senderName>Arturo Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-04-18 21:47:12-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

On 4/18/12 5:33 PM, Andrew Clausen wrote:
&gt; Do .exit addresses already do what you had in mind?  For example, if
&gt; you add "AllowDotExit 1" to your torrc, you can type an address like
&gt; this
&gt;
&gt;
No, .exit notation is a bad idea because it allows people
to force you to exit through a particular exit node of their
choosing. For example I can place a &lt;img src=""&gt; tag on a website
and de-anonymize every user by getting them to go through my
address.

- Art.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120418230514</emailId><senderName>Andrew Clausen</senderName><senderEmail>clausen@econ.upenn.edu</senderEmail><timestampReceived>2012-04-18 23:05:14-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

Hi Arturo,

On 18 April 2012 17:47, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt; On 4/18/12 5:33 PM, Andrew Clausen wrote:
&gt;&gt; Do .exit addresses already do what you had in mind?   For example, if
&gt;&gt; you add "AllowDotExit 1" to your torrc, you can type an address like
&gt;&gt; this
&gt;
&gt; No, .exit notation is a bad idea because it allows people
&gt; to force you to exit through a particular exit node of their
&gt; choosing.

I suppose this is true, according to the spec.  (When I tested this
out, the implementation seemed to match my proposal below rather than
the spec.  I haven't had a chance to look at it.)

However, it would be easy to change Tor slightly.  If Tor used four
ORs rather than three with .exit addresses, then there would be no
problem.  The only difference between using "http://myserver.exit"
rather than "https://myserver.com" would be that the last hop would
use the Tor protocol rather than HTTP.

&gt; For example I can place a &lt;img src=""&gt; tag on a website
&gt; and de-anonymize every user by getting them to go through my
&gt; address.

The situation for &lt;img src="http://myserver.exit"&gt; would be no worse
than for &lt;img src="http://myserver.com"&gt;

Cheers,
Andrew
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120419015800</emailId><senderName>Mike Warren</senderName><senderEmail>spam@mike-warren.com</senderEmail><timestampReceived>2012-04-19 01:58:00-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

Arturo Filast=F2 &lt;art@baculo.org&gt; writes:

&gt; The purpose of Exit Enclaves was to allow people running a website
&gt; to make Tor users access it without ever leaving the Tor
&gt; network. This leads to the clients having end-to-end encryption with
&gt; the target destination.

Probably I'm missing something obvious, but can't you provide
something more-or-less equivalent with a self-signed certificate and
HTTPS to access your hidden service?

-- =

mike
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120419074209</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-04-19 07:42:09-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

On Wed, 18 Apr 2012 17:28:42 -0400
Arturo Filastò &lt;art@baculo.org&gt; wrote:

&gt; The current stable version of Tor (0.2.2.x) still supports Exit
&gt; enclaves. The new versions of Tor
&gt; (&gt; 0.2.3.x) use a new descriptor format (microdescriptors) allow
&gt; relays to specify an Exit Enclave
&gt; policy, but clients will not use it, therefore voiding the purpose of
&gt; exit enclaving.

Is there a plan to re-enable clients to use exit enclaves?

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120326105321</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-03-26 10:53:21-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On Sun, Mar 25, 2012 at 07:18:44PM -0400, Hooman wrote:
&gt; 2- SkypeMorph and pluggable transports: Although our code can
&gt; potentially be used as a pluggable transport, there is a minor
&gt; difficulty with the pluggable transport framework that needs to be
&gt; addressed before it can host our code. As mentioned above, our code
&gt; uses Skype network for basic login stuff, so it takes a little bit
&gt; more time than what Tor expect from a typical transport (like
&gt; Obfsproxy), so the Tor client gives up building circuits after a
&gt; while. We are aware of ORControllers tricks to solve the problem,
&gt; but it does not seem to be the right way to do it and it would be
&gt; awesome if the pluggable transport were able to tell Tor that it's
&gt; working on setting up the connection, and that Tor
&gt; shouldn't give up on it until it says it's ready. I am sure other
&gt; transports could also benefit from this.

I've opened https://trac.torproject.org/projects/tor/ticket/5483 for
further discussion on this topic.

Thanks,
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326190447</emailId><senderName>Hooman</senderName><senderEmail>hmohajer@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-03-26 19:04:47-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On 12-03-25 09:37 PM, Roger Dingledine wrote:
&gt; On Sun, Mar 25, 2012 at 07:18:44PM -0400, Hooman wrote:
&gt;&gt; In our recent work, SkypeMorph [2], we have tried to use Skype video
&gt;&gt; communications as our target protocol for protocol obfuscation.
&gt;&gt; SkypeMorph functionality is similar to Obfsproxy, but the connection
&gt;&gt; between the bridge and the client looks like a Skype video call (the
&gt;&gt; details of how we do this is discussed in the technical report).
&gt; Hi Hooman,
&gt;
&gt; Looks like a great first release. Thanks for sharing it with us!
&gt;
&gt; Can you give us some guesses about next steps for resolving these issues
&gt; (or explaining why they aren't actually as worrisome as they appear)?
&gt;
&gt; A) It looks like the transport has no notion of adapting to network
&gt; conditions, i.e. congestion control. So it will basically fall apart on
&gt; a low-bandwidth or congested network.
True, but as mentioned in section 8.2 of the technical report, this can 
be fixed by considering Skype video calls on different networks, 
depending on the network status. (the way Skype bandwidth usage varies 
with available bandwidth is studied, for example: 
http://www.tlc-networks.polito.it/oldsite/mellia/papers/skype_info08.pdf )
&gt;
&gt; B) It sends at a constant rate of 43KB/s in each direction all the
&gt; time. Even if users are willing to tolerate that, it doesn't scale on
&gt; the bridge/relay side if there are lots of users. I wonder how feasible
&gt; a "traffic shaping" approach would be (where the flow rate drops off
&gt; if there's no underlying traffic), and how much that would screw with
&gt; your statistics. Which leads to:
43KB/s is per connection, so each client gets this bandwidth, while the 
bridge can have multiple connections.

&gt; C) The packet size and timing distributions only aim to match the
&gt; first-order properties of Skype. At the same time, DPI vendors have
&gt; already been in a battle with Skype traffic for a while now. How advanced
&gt; do you think DPI vendors are at detecting Skype-like traffic, and thus at
&gt; distinguishing your traffic from real Skype traffic? Similarly, how bad is
&gt; it that you don't follow through with the TCP side of the Skype handshake?
The TCP connections are more of control connections and they send a 
small number of messages during the call and we actually have some ideas 
on how to deal with this, like handing the sockets for these connections 
to our software after we fake a call.
&gt;
&gt; D) The morphing output is basically identical to the naive shaping. Are
&gt; you sure you did it right?

So as mentioned in the report, the original traffic morphing does not 
consider timing at all (which makes it less effective against DPIs) and 
it aims at minimizing the overhead, ie the number of padding bytes sent 
on the wire. When we introduced the inter-packet timing feature, it was 
no longer possible to go with the same construction, since packets may 
not be send right away. As a result we tried a different approach for 
traffic morphing: we buffered packets received from Tor, then when it is 
time to send the next packet, we simply estimate the original packet 
size by a sample form the Tor's packet size distribution. I know there 
are other ways this can be done, but in our experiment we didn't observe 
any tangible difference in the outcome.

&gt; --Roger
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120328062824</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-03-28 06:28:24-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On Mon, Mar 26, 2012 at 03:04:47PM -0400, Hooman wrote:
&gt; &gt; Can you give us some guesses about next steps for resolving these issues
&gt; &gt; (or explaining why they aren't actually as worrisome as they appear)?
&gt; &gt; 
&gt; &gt; A) It looks like the transport has no notion of adapting to network
&gt; &gt; conditions, i.e. congestion control. So it will basically fall apart on
&gt; &gt; a low-bandwidth or congested network.
&gt; True, but as mentioned in section 8.2 of the technical report, this
&gt; can be fixed by considering Skype video calls on different networks,
&gt; depending on the network status. (the way Skype bandwidth usage
&gt; varies with available bandwidth is studied, for example: \
&gt; http://www.tlc-networks.polito.it/oldsite/mellia/papers/skype_info08.pdf )

Isn't that like saying TCP congestion control can be implemented by
sampling capacity and traffic load on a variety of networks, and then
hard-coding the TCP window and resend algorithms to suit the network
you think you're running on?

I'm not worried here so much about whether your flow adapts to network
conditions like a real Skype flow would (though I agree that's an
issue). I'm worried about whether your flow would fail to back off at
all in the face of congestion, leading to a) Skypemorph not getting its
packets through because so many of them get dropped, and b) Skypemorph
ruining the network it's running on.

&gt; &gt; B) It sends at a constant rate of 43KB/s in each direction all the
&gt; &gt; time. Even if users are willing to tolerate that, it doesn't scale on
&gt; &gt; the bridge/relay side if there are lots of users. I wonder how feasible
&gt; &gt; a "traffic shaping" approach would be (where the flow rate drops off
&gt; &gt; if there's no underlying traffic), and how much that would screw with
&gt; &gt; your statistics. Which leads to:
&gt; 43KB/s is per connection, so each client gets this bandwidth, while
&gt; the bridge can have multiple connections.

Right. But if a bridge wants to handle 10 Skypemorph users, the bridge
needs to be sending out 430KB/s all the time. That means volunteer users
can't operate these bridges at home (unless they live in Japan, Korea,
or Sweden I guess). It also greatly increases the overall traffic cost
of running a bridge.

For example, during the February weekend when Iran blocked SSL, my
obfsproxy bridge was easily handling ~500 users at once. With Skypemorph
that's 172mbit/s of duplex traffic?

&gt; &gt; C) The packet size and timing distributions only aim to match the
&gt; &gt; first-order properties of Skype. At the same time, DPI vendors have
&gt; &gt; already been in a battle with Skype traffic for a while now. How advanced
&gt; &gt; do you think DPI vendors are at detecting Skype-like traffic, and thus at
&gt; &gt; distinguishing your traffic from real Skype traffic? Similarly, how bad is
&gt; &gt; it that you don't follow through with the TCP side of the Skype handshake?
&gt; The TCP connections are more of control connections and they send a
&gt; small number of messages during the call and we actually have some
&gt; ideas on how to deal with this, like handing the sockets for these
&gt; connections to our software after we fake a call.

Ok.

What do you think about the "first-order properties" question about size
and timing (e.g. I bet real Skype traffic does not draw its packet size
and timing independently from the size and timing of the previous packet)?
Combined with the fact that DPI vendors have quite a bit of experience
targeting Skype traffic in particular, I worry that they've thought
about this specific question more than we have.

&gt; &gt; D) The morphing output is basically identical to the naive shaping. Are
&gt; &gt; you sure you did it right?
&gt; 
&gt; So as mentioned in the report, the original traffic morphing does
&gt; not consider timing at all (which makes it less effective against
&gt; DPIs) and it aims at minimizing the overhead, ie the number of
&gt; padding bytes sent on the wire.

Right. Minimizing padding bytes on the wire is a big reason to like it.

&gt; When we introduced the inter-packet
&gt; timing feature, it was no longer possible to go with the same
&gt; construction, since packets may not be send right away. As a result
&gt; we tried a different approach for traffic morphing: we buffered
&gt; packets received from Tor, then when it is time to send the next
&gt; packet, we simply estimate the original packet size by a sample form
&gt; the Tor's packet size distribution. I know there are other ways this
&gt; can be done, but in our experiment we didn't observe any tangible
&gt; difference in the outcome.

Hrm. So that means your traffic morphing algorithm doesn't try to reduce
padding bytes? That makes your graph 5 make more sense. But is it really
accurate to call it morphing still? It would be great to explore that
tradeoff more.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120328221041</emailId><senderName>Hooman</senderName><senderEmail>hmohajer@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-03-28 22:10:41-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On 12-03-28 02:28 AM, Roger Dingledine wrote:
&gt; On Mon, Mar 26, 2012 at 03:04:47PM -0400, Hooman wrote:
&gt; &gt; &gt; Can you give us some guesses about next steps for resolving these issues
&gt; &gt; &gt; (or explaining why they aren't actually as worrisome as they appear)?
&gt; &gt; &gt; 
&gt; &gt; &gt; A) It looks like the transport has no notion of adapting to network
&gt; &gt; &gt; conditions, i.e. congestion control. So it will basically fall apart on
&gt; &gt; &gt; a low-bandwidth or congested network.
&gt; &gt; True, but as mentioned in section 8.2 of the technical report, this
&gt; &gt; can be fixed by considering Skype video calls on different networks,
&gt; &gt; depending on the network status. (the way Skype bandwidth usage
&gt; &gt; varies with available bandwidth is studied, for example: \
&gt; &gt; http://www.tlc-networks.polito.it/oldsite/mellia/papers/skype_info08.pdf )
&gt; Isn't that like saying TCP congestion control can be implemented by
&gt; sampling capacity and traffic load on a variety of networks, and then
&gt; hard-coding the TCP window and resend algorithms to suit the network
&gt; you think you're running on?
&gt; 
&gt; I'm not worried here so much about whether your flow adapts to network
&gt; conditions like a real Skype flow would (though I agree that's an
&gt; issue). I'm worried about whether your flow would fail to back off at
&gt; all in the face of congestion, leading to a) Skypemorph not getting its
&gt; packets through because so many of them get dropped, and b) Skypemorph
&gt; ruining the network it's running on.
&gt; 
&gt; &gt; &gt; B) It sends at a constant rate of 43KB/s in each direction all the
&gt; &gt; &gt; time. Even if users are willing to tolerate that, it doesn't scale on
&gt; &gt; &gt; the bridge/relay side if there are lots of users. I wonder how feasible
&gt; &gt; &gt; a "traffic shaping" approach would be (where the flow rate drops off
&gt; &gt; &gt; if there's no underlying traffic), and how much that would screw with
&gt; &gt; &gt; your statistics. Which leads to:
&gt; &gt; 43KB/s is per connection, so each client gets this bandwidth, while
&gt; &gt; the bridge can have multiple connections.
&gt; Right. But if a bridge wants to handle 10 Skypemorph users, the bridge
&gt; needs to be sending out 430KB/s all the time. That means volunteer users
&gt; can't operate these bridges at home (unless they live in Japan, Korea,
&gt; or Sweden I guess). It also greatly increases the overall traffic cost
&gt; of running a bridge.
&gt; 
&gt; For example, during the February weekend when Iran blocked SSL, my
&gt; obfsproxy bridge was easily handling ~500 users at once. With Skypemorph
&gt; that's 172mbit/s of duplex traffic?
I will answer the first two questions here: We are going to get this 
fixed. So as I mentioned, we are going to do what Skype does: We will 
use different levels of bandwidth for the output of the SkypeMorph 
depending on network status (we can detect this the same way TCP detects 
congestions) or the amount of bandwidth the bridge is willing to 
dedicate to each client. Another way to do this is to limit the 
bandwidth provided to each client, as the number of clients increases.
&gt; &gt; &gt; C) The packet size and timing distributions only aim to match the
&gt; &gt; &gt; first-order properties of Skype. At the same time, DPI vendors have
&gt; &gt; &gt; already been in a battle with Skype traffic for a while now. How advanced
&gt; &gt; &gt; do you think DPI vendors are at detecting Skype-like traffic, and thus at
&gt; &gt; &gt; distinguishing your traffic from real Skype traffic? Similarly, how bad is
&gt; &gt; &gt; it that you don't follow through with the TCP side of the Skype handshake?
&gt; &gt; The TCP connections are more of control connections and they send a
&gt; &gt; small number of messages during the call and we actually have some
&gt; &gt; ideas on how to deal with this, like handing the sockets for these
&gt; &gt; connections to our software after we fake a call.
&gt; Ok.
&gt; 
&gt; What do you think about the "first-order properties" question about size
&gt; and timing (e.g. I bet real Skype traffic does not draw its packet size
&gt; and timing independently from the size and timing of the previous packet)?
&gt; Combined with the fact that DPI vendors have quite a bit of experience
&gt; targeting Skype traffic in particular, I worry that they've thought
&gt; about this specific question more than we have.
Yes, we can definitely go beyond first-order statistics. It should be 
fairly straight forward to do so.
&gt; 
&gt; &gt; &gt; D) The morphing output is basically identical to the naive shaping. Are
&gt; &gt; &gt; you sure you did it right?
&gt; &gt; So as mentioned in the report, the original traffic morphing does
&gt; &gt; not consider timing at all (which makes it less effective against
&gt; &gt; DPIs) and it aims at minimizing the overhead, ie the number of
&gt; &gt; padding bytes sent on the wire.
&gt; Right. Minimizing padding bytes on the wire is a big reason to like it.
&gt; 
&gt; &gt; When we introduced the inter-packet
&gt; &gt; timing feature, it was no longer possible to go with the same
&gt; &gt; construction, since packets may not be send right away. As a result
&gt; &gt; we tried a different approach for traffic morphing: we buffered
&gt; &gt; packets received from Tor, then when it is time to send the next
&gt; &gt; packet, we simply estimate the original packet size by a sample form
&gt; &gt; the Tor's packet size distribution. I know there are other ways this
&gt; &gt; can be done, but in our experiment we didn't observe any tangible
&gt; &gt; difference in the outcome.
&gt; Hrm. So that means your traffic morphing algorithm doesn't try to reduce
&gt; padding bytes? That makes your graph 5 make more sense. But is it really
&gt; accurate to call it morphing still? It would be great to explore that
&gt; tradeoff more.
We called it SkypeMorph since we are still using the morphing matrix. 
Although, I personally believe we can find a way to minimize the amount 
of padding while keeping the timing and sizes statistically 
indistinguishable from that of Skype's, the traffic morphing technique 
greatly depends on the characteristics of the source protocol (Tor) and 
it's not easy to guess the timing patterns of user's behind Tor. So if 
we use traces from web-browsing behind Tor as the input to our software, 
and our client uses Tor for downloading multimedia content, in this case 
traffic morphing would not perform very well.
&gt; 
&gt; --Roger
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120401163903</emailId><senderName>Hooman</senderName><senderEmail>hmohajer@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-04-01 16:39:03-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

On 12-03-28 06:57 PM, George Kadianakis wrote:
&gt; Hooman &lt;hmohajer@cs.uwaterloo.ca&gt; writes:
&gt;
&gt;&gt;&gt;&gt;&gt; D) The morphing output is basically identical to the naive shaping. Are
&gt;&gt;&gt;&gt;&gt; you sure you did it right?
&gt;&gt;&gt;&gt; So as mentioned in the report, the original traffic morphing does
&gt;&gt;&gt;&gt; not consider timing at all (which makes it less effective against
&gt;&gt;&gt;&gt; DPIs) and it aims at minimizing the overhead, ie the number of
&gt;&gt;&gt;&gt; padding bytes sent on the wire.
&gt;&gt;&gt; Right. Minimizing padding bytes on the wire is a big reason to like it.
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; When we introduced the inter-packet
&gt;&gt;&gt;&gt; timing feature, it was no longer possible to go with the same
&gt;&gt;&gt;&gt; construction, since packets may not be send right away. As a result
&gt;&gt;&gt;&gt; we tried a different approach for traffic morphing: we buffered
&gt;&gt;&gt;&gt; packets received from Tor, then when it is time to send the next
&gt;&gt;&gt;&gt; packet, we simply estimate the original packet size by a sample form
&gt;&gt;&gt;&gt; the Tor's packet size distribution. I know there are other ways this
&gt;&gt;&gt;&gt; can be done, but in our experiment we didn't observe any tangible
&gt;&gt;&gt;&gt; difference in the outcome.
&gt;&gt;&gt; Hrm. So that means your traffic morphing algorithm doesn't try to reduce
&gt;&gt;&gt; padding bytes? That makes your graph 5 make more sense. But is it really
&gt;&gt;&gt; accurate to call it morphing still? It would be great to explore that
&gt;&gt;&gt; tradeoff more.
&gt;&gt; We called it SkypeMorph since we are still using the morphing
&gt;&gt; matrix. Although, I personally believe we can find a way to minimize
&gt;&gt; the amount of padding while keeping the timing and sizes statistically
&gt;&gt; indistinguishable from that of Skype's, the traffic morphing technique
&gt;&gt; greatly depends on the characteristics of the source protocol (Tor)
&gt;&gt; and it's not easy to guess the timing patterns of user's behind
&gt;&gt; Tor. So if we use traces from web-browsing behind Tor as the input to
&gt;&gt; our software, and our client uses Tor for downloading multimedia
&gt;&gt; content, in this case traffic morphing would not perform very well.
&gt; Hm, we encountered the same problem too, while working on the
&gt; "morpher" pluggable transport. Traffic morphing would not give us
&gt; satisfying results, and some times it would even result in more
&gt; overhead than randomly sampling from the probability distribution of
&gt; the target protocol.
&gt;
&gt; I think we identified the issue in trac ticket #5023 [0]. and also
&gt; wrote a report on it [1].
&gt; Another problem of traffic morphing which is not mentioned on that
&gt; report, is that traffic morphing works by using an oracle which gives
&gt; you an integer 'i' with (0 &lt; 'i' &lt;= MTU), and then you have to send a
&gt; packet of size 'i' to the wire. This usually means that you will
&gt; _never_ send fragmented IP packets, which looks quite sketchy.
&gt;
&gt; I don't think there are any non-messy solutions to the above problems,
&gt; except from realizing that mimicking the packet size probability
&gt; distribution of a protocol is probably not worth it at the moment (at
&gt; least against most current real-life adversaries). Especially so when
&gt; traffic morphing makes your traffic even more distinguishable in other
&gt; ways (like in the fact that it's not stateful).
Interesting. So you also believe sampling from the target distribution
is the best solution at the moment?
&gt;
&gt; Finally, 6 weeks ago I disabled dream.c in morpher.git [2], because I
&gt; suspect that the Matrix Market I/O library of NIST [3], that I was
&gt; using, is not the best piece of software engineering out there.
So George how about the issue I brought up about pluggable transports
and how we can stop Tor from making circuits while a transport is
setting up a connection?
https://trac.torproject.org/projects/tor/ticket/5483

It's not envisioned in the current implementation of the pluggable
transports, right?
&gt; [0]: https://trac.torproject.org/projects/tor/ticket/5023
&gt; [1]: https://trac.torproject.org/projects/tor/raw-attachment/ticket/5023/morpher.2.pdf
&gt; [2]: https://gitorious.org/morpher/morpher/commit/73d30a0b5aad54d2d52b542d45253c0eedac7456
&gt; [3]: http://math.nist.gov/MatrixMarket/mmio/c/mmio.c
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120401115920</emailId><senderName>Kevin Bauer</senderName><senderEmail>ksbauer@gmail.com</senderEmail><timestampReceived>2012-04-01 11:59:20-0400</timestampReceived><subject>Re: [tor-dev] Gsoc 2012 Project Proposal.. Feedback please!!</subject><body>

&gt; By the way, where can I find the md5 or sha digests for the Experimentor?

You can find the ExperimenTor tools and optional virtual machine instances at this link:

  http://crysp.uwaterloo.ca/software/exptor/download.html

We don't publish any digests for these downloads. 	

Kevin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120402113715</emailId><senderName>drake01</senderName><senderEmail>drakeoone@gmail.com</senderEmail><timestampReceived>2012-04-02 11:37:15-0400</timestampReceived><subject>Re: [tor-dev] Gsoc 2012 Project Proposal.. Feedback please!!</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks for the link Kevin :) I already downloaded the files except the
Host.tar.gz (1.8 GB file)..

On Sun, Apr 1, 2012 at 5:29 PM, Kevin Bauer &lt;ksbauer@gmail.com&gt; wrote:

&gt; &gt; By the way, where can I find the md5 or sha digests for the Experimentor?
&gt;
&gt; You can find the ExperimenTor tools and optional virtual machine instances
&gt; at this link:
&gt;
&gt;  http://crysp.uwaterloo.ca/software/exptor/download.html
&gt;
&gt; We don't publish any digests for these downloads.
&gt;
&gt; Kevin
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;



-- 
Online pseudonym: drake01, drakeo1 or drakeoone
Blog: http://goo.gl/uMnRp
Github: https://github.com/drake01

[Attachment #5 (text/html)]

Thanks for the link Kevin :) I already downloaded the files except the Host.tar.gz \
(1.8 GB file).. &lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sun, Apr 1, 2012 at 5:29 PM, \
Kevin Bauer &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:ksbauer@gmail.com"&gt;ksbauer@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; \
&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="im"&gt;&gt; By the way, where can I find the md5 or \
sha digests for the Experimentor?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;You can find the ExperimenTor tools and optional virtual machine instances at \
this link:&lt;br&gt; &lt;br&gt;
  &lt;a href="http://crysp.uwaterloo.ca/software/exptor/download.html" \
target="_blank"&gt;http://crysp.uwaterloo.ca/software/exptor/download.html&lt;/a&gt;&lt;br&gt; &lt;br&gt;
We don't publish any digests for these downloads.&lt;br&gt;
&lt;br&gt;
Kevin&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;Online pseudonym: drake01, drakeo1 \
or drakeoone&lt;br&gt;Blog: &lt;a href="http://goo.gl/uMnRp" \
target="_blank"&gt;http://goo.gl/uMnRp&lt;/a&gt;&lt;br&gt;Github: &lt;a \
href="https://github.com/drake01" target="_blank"&gt;https://github.com/drake01&lt;/a&gt;&lt;br&gt; \
&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120403122328</emailId><senderName>drake01</senderName><senderEmail>drakeoone@gmail.com</senderEmail><timestampReceived>2012-04-03 12:23:28-0400</timestampReceived><subject>Re: [tor-dev] Gsoc 2012 Project Proposal.. Feedback please!!</subject><body>

[Attachment #2 (multipart/alternative)]


Hi guys,

I submitted the initial proposal for my gsoc project for feedback, so that
I could go further in shaping my application...
It's been two days and I didn't get any.. I was gonna' complete the
application after initial feedback. The initial proposal  I sent just
contained- what, I think, has to be done and does not explain `how`. After
the reply and suggested changes, if any, I thought to submit the detailed
explanation of things to be done. So I am sending this mail as another
request for feedback from concerned people on my crude application. :)


-- 
Online pseudonym: drake01, drakeo1 or drakeoone
Blog: http://goo.gl/uMnRp
Github: https://github.com/drake01

[Attachment #5 (text/html)]

Hi guys,&lt;br&gt;&lt;br&gt;I submitted the initial proposal for my gsoc project for feedback, so \
that I could go further in shaping my application...&lt;br&gt;It's been two days and  I \
didn't get any.. I was gonna' complete the application after initial \
feedback. The initial proposal  I sent just contained- what, I think, has to be done \
and does not explain `how`. After the reply and suggested changes, if any, I thought \
to submit the detailed explanation of things to be done. So I am sending this mail as \
another request for feedback from concerned people on my crude application. :)&lt;br&gt; \
&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;Online pseudonym: drake01, drakeo1 or drakeoone&lt;br&gt;Blog: \
&lt;a href="http://goo.gl/uMnRp" target="_blank"&gt;http://goo.gl/uMnRp&lt;/a&gt;&lt;br&gt;Github: &lt;a \
href="https://github.com/drake01" target="_blank"&gt;https://github.com/drake01&lt;/a&gt;&lt;br&gt; \
&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120415060650</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-04-15 06:06:50-0400</timestampReceived><subject>[tor-dev] WebSocket pluggable transport</subject><body>

Here is a draft of a proposal for a pluggable transport using the
WebSocket protocol. In short, WebSocket is a socket-like feature
accessible to JavaScript in newer web browsers. Here are some links
about it:

https://tools.ietf.org/html/rfc6455
http://dev.w3.org/html5/websockets/
https://developer.mozilla.org/en/WebSockets

WebSocket is the transport used by flash proxies (which now use
JavaScript instead of Flash). This pluggable transport is a necessary
part of the flash proxy system as it stands, because something needs
stand between a Tor client and a web browser proxy, and again between
the proxy and a Tor relay. This proposal is mainly describing what is
already implemented in

https://gitweb.torproject.org/flashproxy.git

The program connector.py is the client transport plugin, and for the
server transport plugin I'm using a program called websockify.
(websockify isn't completely satisfactory though, and replacing it is
ticket #5575.) What's implemented works well enough that I have been
using IRC over Tor over a WebSocket transport for about a week.

I want to emphasize that this proposal is not the entirety of the flash
proxy architecture, but only a part of it. I'm posting it here because
1) I want your help in getting it right, and 2) it may be useful beyond
just flash proxies.

Anyone interested in reading the proposal, I'd like to call your
attention to a few points for comment. One is that there are different,
partially incompatible, version of the WebSocket protocol. I have made
the most recent version (RFC 6455) a MUST and any earlier versions a
MAY. However it may be that in a little while browser support will be
such that there is no reason to support old versions. The other is the
base64 subprotocol used to send binary data over a text-only channel.
WebSocket has a fully binary messages, but they are not supported in
Firefox 10. This may be another thing that is changing rapidly enough to
drop, as Firefox 11 and Chrome 16 do support binary messages.

David Fifield

["websocket-transport-draft.txt" (text/plain)]

Title: WebSocket pluggable transport
Author: David Fifield

Overview

  This proposal describes the "websocket" pluggable transport for Tor.
  It uses the WebSocket protocol now implemented by many web browsers.
  It is mostly a straightforward description of proxying WebSocket to
  plain TCP, with special consideration for a base64 encoding for agents
  that don't support binary WebSocket frames.

Motivation

  The WebSocket protocol is used by the "flash proxy" system that uses
  web browsers as temporary proxies; browsers may connect to a relay
  that supports this pluggable transport. Additionally, if WebSocket has
  a lot of non-Tor use, it becomes a good target for tunneling, perhaps
  in conjunction with a lower layer of obfuscation. WebSocket commonly
  works over HTTP ports that are likely to get through a firewall.

WebSocket overview

  WebSocket is a protocol (rather, several mostly compatible protocols)
  aimed at exposing socket-like functionality to JavaScript in web
  browsers. It is partially aimed at supplanting techniques such as HTTP
  long polling for client–server communication. WebSocket provides
  bidirectional communication between a client and server, sufficient to
  tunnel Tor traffic. A WebSocket session begins with an HTTP Upgrade
  handshake. The socket carries data broken into variable-length
  "messages" which are further broken into "frames." There are
  distinguished frame opcodes that serve to send either data or control
  information. Frames sent by the client (but not the server) are XORed
  with a repeating 32-bit mask that is randomly generated per-frame.

  Broadly speaking, there are two versions of WebSocket: the older
  "hixie" protocol, and the newer "hybi" protocol which is now RFC 6455.
  There are subprotocols within these two versions that differ only in
  small ways: "hixie-75" and "hixie-76"; and "hybi-7", "hybi-10", and
  "hybi-17". The older "hybi" sockets were supported by Firefox 4 and
  Opera 11, but were later disabled because of problems with interaction
  with reverse HTTP proxies. Current versions of Firefox and Chrome
  support "hybi" sockets, while Safari only supports "hixie".

  The "hybi" sockets support text frames and binary frames. Text frames
  may only include UTF-8–encoded text; it is an error if payload doesn't
  decode. Binary frames may contain any binary data. However, not all
  web browsers support binary frames; they were first added to Firefox
  in version 11. The "hixie" sockets have only text frames.

Method name

  The method name of the transport is "websocket". For example, these
  are possible torrc configurations for a client and server,
  respectively:

UseBridges 1
ClientTransportPlugin websocket exec /usr/libexec/tor-websocket-proxy --client --managed
Bridge websocket 198.51.100.1

ServerTransportPlugin websocket exec /usr/libexec/tor-websocket-proxy --server --managed

The base64 subprotocol

  The most convenient way to tunnel data over WebSocket is with binary
  frames, but not all web browsers support binary frames. To work around
  this, the "base64" subprotocol encodes binary data as base64 within
  text frames. A client that knows it does not support binary frames
  requests the base64 subprotocol by including "base64" in the value of
  the Sec-WebSocket-Protocol header field. A server that also supports
  this subprotocol by sending the value "base64" (and only "base64") in
  the Sec-WebSocket-Protocol header field of its response. See under
  "Examples" for example of handshakes like this.

  The base64 encoding is applied at the message level, not the frame
  level. This means, in particular, that any '=' padding occurs only at
  the end of a message, not at the end of each of its constituent
  frames. So, for example, the 5-byte message "Hello", whose base64
  encoding is "SGVsbG8=", may be sent as one text frame as follows:

    0x81 0x08 "SGVsbG8="

  or, for example, as two frames (one of 2 bytes and one of 6 bytes):

    0x01 0x02 "SG" 0x81 0x06 "sbG8="

  When sent by a client, all frames including these must be masked. If
  the masking key is 0x12345678, then the message may be sent as one
  frame like this:

    0x81 0x18 0x12 0x34 0x56 0x78 0x41 0x73 0x00 0x0b 0x70 0x73 0x6e 0x45

Examples

  Here are examples of WebSocket handshakes and the beginning of data
  transfer. The data is the beginning of a Tor connection (i.e., it
  begins with a TLS handshake). Data are shown using C string syntax. "&gt;
  " at the beginning of a line indicates client-to-server communication;
  "&lt; " is server-to-client. "[...]" indicates contents omitted for
  brevity. Newlines in the presentation are not significant. This
  section is non-normative.

  Using "hybi"/RFC 6455 WebSocket with binary frames:

&gt; GET / HTTP/1.1\r\n
&gt; Host: 192.0.2.1:80\r\n
&gt; Origin: https://example.com\r\n
&gt; Sec-WebSocket-Version: 13\r\n
&gt; Sec-WebSocket-Key: mzo2xSF9N8VUxuefqO0RSw==\r\n
&gt; Connection: Upgrade\r\n
&gt; Upgrade: websocket\r\n
&gt; \r\n
&lt; HTTP/1.1 101 Switching Protocols\r\n
&lt; Upgrade: websocket\r\n
&lt; Connection: Upgrade\r\n
&lt; Sec-WebSocket-Accept: fM0KjD7ixoxkl4PEXU6tNaTveSg=\r\n
&lt; \r\n
&gt; \x82\xfe\x01\x04\xc9\xd6\xdd\x29\xdf\xd5\xde\x29\x36\xd7[...]
&lt; \x16\x03\x01\x00\x31\x02\x00\x00\x2d\x03[...]

  Using "hybi"/RFC 6455 WebSocket with the base64 subprotocol:

&gt; GET / HTTP/1.1\r\n
&gt; Host: 192.0.2.1:80\r\n
&gt; Origin: https://example.com\r\n
&gt; Sec-WebSocket-Version: 13\r\n
&gt; Sec-WebSocket-Protocol: base64\r\n
&gt; Sec-WebSocket-Key: k5Ybhw0XBDeBfmda1J9ooQ==\r\n
&gt; Connection: Upgrade\r\n
&gt; Upgrade: websocket\r\n
&gt; \r\n
&lt; HTTP/1.1 101 Switching Protocols\r\n
&lt; Upgrade: websocket\r\n
&lt; Connection: Upgrade\r\n
&lt; Sec-WebSocket-Accept: LYWpflPUHdal8U1BLPXWR3iqUrI=\r\n
&lt; Sec-WebSocket-Protocol: base64\r\n
&lt; \r\n
&gt; \x81\xfe\x01\x58\xbd\x94\x2a\x31\xfb\xf3\x67\x75\xfc\xc4[...]
&lt; \x81\x7e\x04\xd0FgMBADECAA[...]

Considerations specific to pluggable transports

  Endpoints must implement WebSocket according to RFC 6455; for example,
  a server MUST close the connection if it receives an unmasked frame
  from a client, and a client MUST close the connection if it receives a
  masked frame from a server (RFC 6455 section 5.1). There are also
  additional requirements for WebSocket when used as a Tor pluggable
  transport.

  Clients MUST implement the RFC 6455 version of the protocol and use it
  for all connections. Servers MUST implement the RFC 6455 version of
  the protocol and MAY also implement earlier versions. That is, a
  server MAY check a client HTTP request to see if it matches an earlier
  version of the protocol, and MAY begin communicating using that
  protocol. Section 4.4 of RFC 6455 discusses supporting multiple
  versions of the protocol.

  Servers MUST support binary frames (opcode 2). Servers MAY also
  support text frames (opcode 1). Servers supporting text frames MUST
  implement the base64 subprotocol and accept it when requested by a
  client in the Sec-WebSocket-Protocol header field. Text frames MUST
  NOT be sent by either side if the base64 subprotocol has not been
  negotiated. Any endpoint receiving a text frame when base64 has not
  been negotiated, or a text message that cannot be decoded as base64,
  MUST close the connection.

  A client MUST NOT proceed after receiving any HTTP response status
  code other than 101. In particular, it MUST NOT follow redirections
  such as 301.

  Endpoints SHOULD respond to Ping frames with a single Pong frame, but
  nothing in this specification requires the sending of Ping frames.

  Endpoints SHOULD limit the size of messages they send. All messages
  SHOULD be sent in a single frame.

  Endpoints MUST limit the size of messages and frames that they will
  buffer. Upon receiving such a message (when the sum of the length of
  already-buffered data and the length of the next frame exceeds the
  limit), the endpoint MUST close the connection and SHOULD do so with a
  status code of 1009 (see RFC 6455 section 7.4.1). Endpoints MUST be
  capable of receiving messages containing 1500 octets of binary data;
  this may require buffering up to 2026 bytes of UTF-8–encoded base64
  text.

Questions/extensions

  WebSocket also has a TLS-wrapped version, identified by using the
  "wss" (as opposed to "ws") URL scheme. An advantage of this when
  tunneling through a browser is that the TLS handshake will be exactly
  that of a browser. However, this probably requires the certificates of
  relays' server transport plugins to be trusted by browsers.

References

  "Pluggable transports for circumvention"
  https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/180-pluggable-transport.txt

  RFC 6455, "The WebSocket Protocol" (a.k.a. hybi-17)
  https://tools.ietf.org/html/rfc6455

  "The WebSocket protocol (draft-ietf-hybi-thewebsocketprotocol-10)"
  (a.k.a. hybi-10)
  https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10

  "The WebSocket protocol (draft-ietf-hybi-thewebsocketprotocol-7)"
  (a.k.a. hybi-7)
  https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-7

  "The WebSocket protocol (draft-ietf-hybi-thewebsocketprotocol-00)"
  (a.k.a. hybi-00, hixie-76)
  https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00

  "The Web Socket protocol (draft-hixie-thewebsocketprotocol-75)"
  (a.k.a. hixie-75)
  https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75

  Browser support matrix
  http://autobahn.ws/testsuite/reports/clients/index.html


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120415152441</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-04-15 15:24:41-0400</timestampReceived><subject>Re: [tor-dev] brdgrd: Protecting bridges from the GFC</subject><body>

&gt; Basically, the tool achieves two things:
&gt; - Evading the Chinese DPI engine by rewriting the TCP window size
&gt;   during the TCP handshake. This leads to a fragmented cipher list
&gt;   which does not seem to be recognized by the GFC.
&gt; - Blocking scanners with two dirty hacks.

I removed the "two dirty hacks" because they sometimes made a bridge
unusable - especially if there is lots of packet loss between client and
bridge. So the tool only conducts window size rewriting now.

I've been testing it for several days on my EC2 bridge. The bridge has
seen many Chinese users and still remains unblocked.

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120419152146</emailId><senderName>Arturo Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-04-19 15:21:46-0400</timestampReceived><subject>Re: [tor-dev] Alternatives to Tor Exit Enclaves</subject><body>

On 4/19/12 3:42 AM, Andrew Lewman wrote:
&gt; On Wed, 18 Apr 2012 17:28:42 -0400
&gt; Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt;
&gt;&gt; The current stable version of Tor (0.2.2.x) still supports Exit
&gt;&gt; enclaves. The new versions of Tor
&gt;&gt; (&gt; 0.2.3.x) use a new descriptor format (microdescriptors) allow
&gt;&gt; relays to specify an Exit Enclave
&gt;&gt; policy, but clients will not use it, therefore voiding the purpose of
&gt;&gt; exit enclaving.
&gt; Is there a plan to re-enable clients to use exit enclaves?

The overall consensus that I got from discussing this in IRC is
that Exit Enclaves where never thought of very well and they already
did not have all the properties that we wanted.

Re-enabling clients to use exit enclaves requires changes to the
microdescriptor format, and since they have issues we should not
encourage their use.


- Art.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120424070207</emailId><senderName>Michele_Orrù</senderName><senderEmail>maker.py@gmail.com</senderEmail><timestampReceived>2012-04-24 07:02:07-0400</timestampReceived><subject>[tor-dev] Greetings &amp;&amp; The APAF project</subject><body>

Hello.
I'm wrtiting this email to introduce myself to the tor community.
I'm new to tor, I've started to discover its community with the
GlobaLeaks project; and now, for the Google Summer of Code, I will be
involved in the APAF project.
So probably all these days I will hang around your irc channel and
this mailing list, getting known to some of the core developers.


The APAF project, as described by Arturo in
https://lists.torproject.org/pipermail/tor-dev/2012-March/003416.html
, aims to be a static file server written in python, on the same
development idea behind the tor browser bundle: being a simple and
portable executable for non-technical user.
So, the core idea is to create a python standalone .exe / .app so that
anybody can easily set up a tor hidden service and configure it (via
web browser or gui, to be defined); hoping that this will spread the
use of hidden services, which AFAIK, nowdays aren't so much used.
The most powerful concept behind this in my opinion is that, by
design, the APAF should be as modular as possible, so that any other
python application developer will be able to build its own software in
such a way that it runs as a Tor Hidden Service. "Most powerful"
becouse learning and collaboration shall be behind the opensouce idea,
which is what I hope to work for.

Deadlines for the project are described in
https://pad.riseup.net/p/APAF-timeline
Starting today, I am going to outline the design of the APAF - which
libraries it is going to use, mockups, how to be configured, and so
on. Since I will probably discuss all these choices with my mentor
Arturo on the irc channel #tor-dev, any advice is welcome :)

Regards,
-- 
ù
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120424183643</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-04-24 18:36:43-0400</timestampReceived><subject>Re: [tor-dev] TorBrowser and Firefox ESR</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Jérémy Bobbio (lunar@debian.org):

&gt; It looks like Firefox maintainers in Debian have decided to ship
&gt; Extended Support Releases in the upcoming Wheezy release.
&gt; 
&gt; This made me wonder if ESR changed any plans concerning TorBrowser. Will
&gt; Tor Browser Bundle keep following upstream "personal use" releases or
&gt; switch to ESR?

I am conflicted about this. On the one hand, ESR would appear to make
our lives easier, especially short term. On the other, I suspect that's
mostly an illusion long term, and any issues we have with rapid release
should be addressed by improving our dev and build processes.

The main advantages of tracking rapid release come in the form of
Mozilla actually able to more easily work with our patches and also
giving us the opportunity to communicate issues earlier as features
appear and solidify.

The disadvantages of tracking rapid release come in the form of build
overhead, periodic patch rebasing, and scrambling to review new features
for fingerprinting issues.

However, it's not like if we don't track rapid release, we'll suddenly
find the tor browser bug queue manageable. We're going to drown in
browser bugs no matter what, I think. I also don't think the number of
builds we'll need to do will substantially change. So far, there has not
been a rapid release that did not also contain security fixes. I assume
that means we'll have to do just as many ESR-based TBB builds for point
releases as rapid release-based TBB builds.

Since we're doomed either way with our current dev capacity, I think we
should choose the option that gives us the best chance of getting help
from Mozilla.

Therefore, my inclination is to keep trying to track rapid release. 

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120425063123</emailId><senderName>"warms0x"</senderName><senderEmail>warms0x@riseup.net</senderEmail><timestampReceived>2012-04-25 06:31:23-0400</timestampReceived><subject>Re: [tor-dev] First-time tails/tor user feedback</subject><body>


&gt; I spent the past week in Sweden, attending the Stockholm Internet
&gt; Forum, http://www.stockholminternetforum.se/, for part of it. I made a
&gt; number of tails 0.10.2 usb sticks for people on request. I also asked a
&gt; lot of people their impressions of Tor and Tails. I received a plethora
&gt; of feedback. All 8 people are involved in the Internet Freedom policy,
&gt; technology, or freedom of speech communities. They had very different
&gt; levels of self-assessed technical skill. The 8 people represented 6
&gt; countries.


Very interesting user study (of sorts)! If you were to guage each of the
user's level of familiarity with Tor conceptually from 1 (never heard of
it) to 5 (I use Tor often!), where would these 8 people fit?

I'm also curious how much explaining of Tails or Tor conceptually you did
before the users started to interact with the system.

&gt;
&gt; # Sixth issue: no flash, no warning
&gt;
&gt; 2 of 8 people had flash apps on their website. 4 of 8 had ad banners
&gt; that used flash. All were surprised at the red outline with a snake in
&gt; it appearing instead of their flash apps. None understood what
&gt; happened.
&gt;
&gt; After an explanation, one person suggested changing the red outline
&gt; with snake to an actual message written inside, along the lines of
&gt; 'this app blocked for your protection. click here to unblock it.' I
&gt; explained why that wouldn't work (because there is no flash, java,
&gt; silverlight plugins installed) and their answer was 'then do not show
&gt; it at all'. Inside noscript, I unchecked the 'show placeholder..'
&gt; option and had them browse again. they were happy. It seems if the user
&gt; cannot do anything about the blocked apps, not showing them may be
&gt; preferred.


This is a tricky usability minefield in my opinion, it's a really hard
line to navigate between hiding something from a user they probably won't
miss (ads) and hiding something from a user that would confuse the hell
out of them (site flash intro .swf).


All that said, I might have to replicate your experiment and see what I
can come up with :)


- warms0x
---
xmpp: warms0x@riseup.net
http: http://warms0x.github.com

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120425121927</emailId><senderName>jvoisin</senderName><senderEmail>julien.voisin@dustri.org</senderEmail><timestampReceived>2012-04-25 12:19:27-0400</timestampReceived><subject>[tor-dev] [GSoC] Tails-server - Introduction</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,
I am jvoisin, the student who will work on
tails-server[1] during this year's GSoC;
my mentors will be intrigeri and anonym.

I already worked for Tor last year, on the
"Metadata Anonymisation Toolkit" project[2];
and I hope that I'll do as good (and even better)
than last year !

You can check my proposal[3] if you are curious/interested about
what I'm planning to do this Summer.

I'm hanging on #tor-dev with the nick jvoisin.


Have a nice day,

- - jvoisin

1. https://tails.boum.org/todo/server_edition/
2. https://mat.boum.org/
3.
https://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/jvoisin/29002
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJPl+vOAAoJEJdo/TzEiBXynroP/jgiFrf3/NgEyZXSqvlAENw9
cLrUvDl2auYq78l0cuwJXxS3qb4ypow8VfqLHhFEn9I+d3ei7l1L5ozO6QkLcjYy
RISnWcN5HFkr5VKbU3LcSWXe50WqHh2/8SvzZxraMLpLpxxrOSWT9YnUtRu/m+LR
aX5X10HXlsmTqrNEoJgUfzgePSwYUDltAHPrzI7NelznS+CyCukRpuJ/nJd3fkSR
u/xlxoZR5aX3dIHMwupUISG0B59aYYbp1XUw1rYz+/XXMxLzcKblP+UqRk3ayuMg
a2LVY1pA32wrS6Bev6rwf+7xYdbVYDpLgWkSfZIenP3q2ynv14iLkIkruQK73d4V
ibj9DydcRBOhzdOm36xqoV1ddhI6upJqxPC53dwInCYQLuZUf8mu0tvNI/yivaGA
MkvAFabPLpaqk8KNDPSoBFVgigsjJgXfHfkM3MUd8zLrHQf//Q9wYlr1MMZNNyG6
ajhZqRdFKiEUb6Mxgk3sVcIvZCTC37Kkd4RGWBcm8VMLZz/9+7346sgcx/E4yB5o
GgU0qthsWB9Gpb7+VckedQFwQ/G+Ffjd7RIV3VJuTU6+QH7NPy1wmc30bVBE0wCY
keLmWAOKVbDe5QmpZokx/j+Nx8gAah61Atq3BKFmshwI980BpCEC0KemGtEH8+oR
mywN3qE7fF18micBUVWW
=We9H
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120426185218</emailId><senderName>Feroze Naina</senderName><senderEmail>ferozenaina@gmail.com</senderEmail><timestampReceived>2012-04-26 18:52:18-0400</timestampReceived><subject>[tor-dev] [GSoC] Introduction - Vidalia</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
I'm Feroze and I will be working on the hidden service configuration and
bandwidth scheduling plugins for Vidalia.

I'm specially excited about the bandwidth scheduling plugin as I've felt
the need for this. Users would like to specify different bandwidth
allocation for Tor relay at different times. Currently, you have to setup a
cron job and manually create a script which is tedious. I will be creating
a simple interface to specify hour-wise bandwidth for every day of the week.

My proposal outlines this in detail -
http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/feroze/6001

I'll be on #vidalia and #tor-dev with the nickname feroze.

[Attachment #5 (text/html)]

Hello,&lt;br&gt;I'm Feroze and I will be working on the hidden service configuration \
and bandwidth scheduling plugins for Vidalia.&lt;br&gt;&lt;br&gt;I'm specially excited about \
the bandwidth scheduling plugin as I've felt the need for this. Users would like \
to specify different bandwidth allocation for Tor relay at different times. \
Currently, you have to setup a cron job and manually create a script which is \
tedious. I will be creating a simple interface to specify hour-wise bandwidth for \
every day of the week.&lt;br&gt; &lt;br&gt;My proposal outlines this in detail - &lt;a \
href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/feroze/6001"&gt; \
http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/feroze/6001&lt;/a&gt;&lt;br&gt;&lt;br&gt;
 I'll be on #vidalia and #tor-dev with the nickname feroze.&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120426224650</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-04-26 22:46:50-0400</timestampReceived><subject>Re: [tor-dev] [Patch] test_util.c with MSVC</subject><body>

On Thu, Apr 26, 2012 at 4:37 PM, Esteban Manchado Vel=E1zquez
&lt;emanchado@demiurgo.org&gt; wrote:
&gt; On Thu, 26 Apr 2012 09:09:09 +0200, Gisle Vanem &lt;gvanem@broadpark.no&gt; wro=
te:
&gt;
&gt;&gt; The src/test/test_util.c doesn't compile with MSVC (CL ver.
&gt;&gt; 16.00.30319.01).
&gt;&gt; It doesn't like the "#ifdef 0" construct, but the whole chunk should be
&gt;&gt; enabled with some modifications IMHO.
&gt;
&gt;
&gt; =A0 Ugh, sorry about that. I made the changes blindly because I didn't ha=
ve
&gt; any way to test them on Windows :-S
&gt;
&gt;
&gt;&gt; 'path_is_relative()' doesn't handle the "http:\\dir" case though. Why
&gt;&gt; should it? Besides 'expand_filename()' isn't for Windows. I suggest this
&gt;&gt; patch:
&gt;
&gt;
&gt; =A0 Looking at the tests now, if we leave "http:\\dir" around it should
&gt; probably return 1 (it's as nonsensical as "dir\\a:" so it should behave t=
he
&gt; same). It's probably not useful, so we can drop it... but in case of leav=
ing
&gt; it around, it should be moved right after "dir\\a:\\" (ie. at the end of =
the
&gt; cases that return 1).

Thanks!  I actually ran into the same issues today while I was
experimenting with cross-compiling from fedora 16.  I checked in this
fix, and some unrelated cross-compilation issues, as
9dddfe83f3041e1504d2def5.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120428032047</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-04-28 03:20:47-0400</timestampReceived><subject>Re: [tor-dev] New from GSoC</subject><body>

You're talking to it. If you have questions about contributing to
code, this (or #tor-dev on IRC) is probably the best place to start.

- Sai

On Thu, Apr 26, 2012 at 02:23, 九零后 &lt;after1990s@gmail.com&gt; wrote:
&gt; Hi, I come here from GSoc and want to join  project Obfsproxy. But I can't
&gt; find the  contributors' mail , where can I get it?
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120428205752</emailId><senderName>Ravi Chandra Padmala</senderName><senderEmail>neenaoffline@gmail.com</senderEmail><timestampReceived>2012-04-28 20:57:52-0400</timestampReceived><subject>[tor-dev] [GSoC] Greetings!</subject><body>

Hello everyone.

I'm Ravi Chandra Padmala (aka neena).

I'm an undergraduate student at GITAM University in Visakhapatnam, India. I've
been a user of open source software for 6 years now. My go-to programming
language is usually python. I have tinkered with a few other languages, and I
try my best to be programming language agnostic,

I will be working on Stem this summer (as a part of the Google Summer of Code
program). Damian (atagar) is my primary mentor. Among other things, I'll be
implementing the general controller class for Stem. If anyone is interested in
exactly what I'm going to be working on, do take a look at my proposal which
is available here[1].

If anyone needs to contact me, this is my primary email. I'm 'neena' on IRC
(irc.oftc.net). I'm geographically located in GMT+5:30. (Though, my body clock
is in GMT-1).

-- 
Cheers,
neena


[1] https://www.torproject.org/about/gsocProposal/gsoc12-proposal-stemImprovements.html.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120311163027</emailId><senderName>"Thomas S. Benjamin"</senderName><senderEmail>tomb@acm.org</senderEmail><timestampReceived>2012-03-11 16:30:27-0400</timestampReceived><subject>[tor-dev] Torperf and #3036</subject><body>

Karsten,

I have some time to work on Torperf right now, and I see that there
are some changes in the works (#3036).  Can you suggest to me which
ticket(s) could currently most use my help?

---
Sincerely Yours,
=A0 =A0 =A0 =A0 =A0 =A0 =A0 ---Thomas S. Benjamin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120309170223</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-09 17:02:23-0400</timestampReceived><subject>[tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

Filename: 195-TLS-normalization-for-024.txt
Title: TLS certificate normalization for Tor 0.2.4.x
Author: Jacob Appelbaum, Gladys Shufflebottom, Nick Mathewson, Tim Wilde
Created: 6-Mar-2012
Status: Draft
Target: 0.2.4.x


0. Introduction

   The TLS (Transport Layer Security) protocol was designed for security
   and extensibility, not for uniformity.  Because of this, it's not
   hard for an attacker to tell one application's use of TLS from
   another's.

   We proposes improvements to Tor's current TLS certificates to
   reduce the distinguishability of Tor traffic.

0.1. History

   This draft is based on parts of Proposal 179, by Jacob Appelbaum
   and Gladys Shufflebottom, but removes some already implemented parts
   and replaces others.

0.2. Non-Goals

   We do not address making TLS harder to distinguish after the
   handshake is done.  We also do not discuss TLS improvements not
   related to distinguishability (such as increased key size, algorithm
   choice, and so on).

1. Certificate Issues

   Currently, Tor generates certificates according to a fixed pattern,
   where lifetime is fairly small, the certificate Subject DN is a
   single randomly generated CN, and the certificate Issuer DN is a
   different single randomly generated CN.

   We propose several ways to improve this below.

1.1. Separate initial certificate from link certificate

   When Tor is using the v2 or v3 link handshake (see tor-spec.txt), it
   currently presents an initial handshake authenticating the link key
   with the identity key.

   We propose instead that Tor should be able to present an arbitrary
   initial certificate (so long as its key matches the link key used in
   the actual TLS handshake), and then present the real certificate
   authenticating the link key during the Tor handshake.  (That is,
   during the v2 handshake's renegotiation step, or in the v3
   handshake's CERTS cell.)

   The TLS protocol and the Tor handshake protocol both allow this, and
   doing so will give us more freedom for the alternative certificate
   presentation ideas below.

1.2. Allow externally generated certificates

   It should be possible for a Tor relay operator to generate and
   provide their own certificate and secret key.  This will allow a relay or
   bridge operator to use a certificate signed by any member of the "SSL
   mafia,"[*] to generate their own self-signed certificate, and so on.

   For compatibility, we need to require that the key be an RSA secret
   key, of at least 1024 bits, generated with e=65537.

   As a proposed interface, let's require that the certificate be stored
   in ${DataDir}/tls_cert/tls_certificate.crt , that the secret key be
   stored in ${DataDir}/tls_cert/private_tls_key.key , and that they be
   used instead of generating our own certificate whenever the new
   boolean option "ProvidedTLSCert" is set to true.

   (Alternative interface: Allow the cert and key cert to be stored
   wherever, and have the user provide their respective locations with
   TLSCertificateFile and TLSCertificateKeyFile options.)

1.3. Longer certificate lifetimes

   Tor's current certificates aren't long-lived, which makes them
   different from most other certificates in the wild.

   Typically, certificates are valid for a year, so let's use that as
   our default lifetime.  [TODO: investigate whether "a year" for most
   CAs and self-signed certs have their validity dates running for a
   calendar year ending at the second of issue, one calendar year
   ending at midnight, or 86400*(365.5 +/- .5) seconds, or what.]

   There are two ways to approach this.  We could continue our current
   certificate management approach where we frequently generate new
   certificates (albeit with longer lifetimes), or we could make a cert,
   store it to disk, and use it for all or most of its declared
   lifetime.

   If we continue to use fairly short lifetimes for the _true_ link
   certificates (the ones presented during the Tor handshake), then
   presenting long-lived certificates doesn't hurt us much: in the event
   of a link-key-only compromise, the adversary still couldn't actually
   impersonate a server for long.[**]

   Using shorter-lived certificates with long nominal lifetimes doesn't
   seem to buy us much.  It would let us rotate link keys more
   frequently, but we're already getting forward secrecy from our use of
   diffie-hellman key agreement.  Further, it would make our behavior
   look less like regular TLS behavior, where certificates are typically
   used for most of their nominal lifetime.  Therefore, let's store and
   use certs and link keys for the full year.

1.4. Self-signed certificates with better DNs

   When we generate our own certificates, we currently set no DN fields
   other than the commonName.  This behavior isn't terribly common:
   users of self-signed certs usually/often set other fields too.
   [TODO: find out frequency.]

   Unfortunately, it appears that no particular other set of fields or
   way of filling them out _is_ universal for self-signed certificates,
   or even particularly common.  The most common schema seem to be for
   things most censors wouldn't mind blocking, like embedded devices.
   Even the default openssl schema, though common, doesn't appear to
   represent a terribly large fraction of self-signed websites.  [TODO:
   get numbers here.]

   So the best we can do here is probably to reproduce the process that
   results in self-signed certificates originally: let the bridge and relay
   operators to pick the DN fields themselves.  This is an annoying
   interface issue, and wants a better solution.

1.5. Better commonName values

   Our current certificates set the commonName to a randomly generated
   field like www.rmf4h4h.net.  This is also a weird behavior: nearly
   all TLS certs used for web purposes will have a hostname that
   resolves to their IP.

   The simplest way to get a plausible commonName here would be to do a
   reverse lookup on our IP and try to find a good hostname.  It's not
   clear whether this would actually work out in practice, or whether
   we'd just get dynamic-IP-pool hostnames everywhere blocked when they
   appear in certificates.

   Alternatively, if we are told a hostname in our Torrc (possibly in
   the Address field), we could try to use that.

2. TLS handshake issues

2.1. Session ID.

   Currently we do not send an SSL session ID, as we do not support session
   resumption.  However, Apache (and likely other major SSL servers) do have
   this support, and do send a 32 byte SSLv3/TLSv1 session ID in their Server
   Hello cleartext.  We should do the same to avoid an easy fingerprinting
   opportunity.  It may be necessary to lie to OpenSSL to claim that we are
   tracking session IDs to cause it to generate them for us.

   (We should not actually support session resumption.)




[*] "Hey buddy, it's a nice website you've got there.  Sure would be a
    shame if somebody started poppin' up warnings on all your user's
    browsers, tellin' everbody that you're _insecure_..."

[**] Furthermore, a link-key-only compromise isn't very realistic atm;
     nearly any attack that would let an adversary learn a link key would
     probably let the adversary learn the identity key too.  The most
     plausible way would probably be an implementation bug in OpenSSL or
     something.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120307201053</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-07 20:10:53-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

On Thu, Jan 26, 2012 at 8:38 PM, George Kadianakis &lt;desnacked@riseup.net&gt; w=
rote:
&gt; After discussion in tickets #4773 and #3587 this is a pre-draft of a
&gt; proposal that revamps the Extended ORport, introduced in proposal 180,
&gt; and specifies the new TransportControlPort.
&gt;
&gt; Comments are marked with '#', and there is also:
&gt; https://trac.torproject.org/projects/tor/ticket/4773#comment:5
&gt;
&gt; Note that this proposal is not ready for prime time. It needs more
&gt; thought and lots of editing to become functional and implementable.
&gt;
&gt; Inlining:
&gt;
&gt; Filename: X
&gt; Title: Extended ORPort and TransportControlPort
&gt; Author: X
&gt; Created: X
&gt; Status: worse-than-draft-still-probably-more-thoughtful-than-sopa

I've got a commitment to revise this and do a (not-yet-merged)
implementation by the middle of this month, so I guess I should get
moving on that!

&gt; 1. Overview
&gt;
&gt; =A0Proposal 180 defined Tor pluggable transports, a way to decouple
&gt; =A0protocol-level obfuscation from the core Tor protocol in order to
&gt; =A0better resist client-bridge censorship. This is achieved by
&gt; =A0introducing pluggable transport proxies, programs that obfuscate Tor
&gt; =A0traffic to resist DPI detection.
&gt;
&gt; =A0Proposal 180 defined a way for pluggable transport proxies to
&gt; =A0communicate with local tor clients and bridges, so as to exchange
&gt; =A0traffic. This document extends this communication protocol, so that
&gt; =A0pluggable transport proxies can exchange arbitrary operational
&gt; =A0information and metadata with tor clients and bridges.
&gt;
&gt; 2. Motivation
&gt;
&gt; =A0 The communication protocol specified in Proposal 180 gives a way
&gt; =A0 for transport proxies to announce the IP address of their clients
&gt; =A0 to tor. Still, modern pluggable transports might have more (?)
&gt; =A0 needs than this. For example:
&gt;
&gt; =A0 1. Tor might want to inform pluggable transport proxies on how to
&gt; =A0 =A0 =A0rate-limit incoming or outgoing connections.
&gt;
&gt; =A0 2. Server pluggable transport proxies might want to pass client
&gt; =A0 =A0 =A0information to an anti-active-probing system controlled by tor.
&gt;
&gt; =A0 3. Tor might want to temporarily stop a transport proxy from
&gt; =A0 =A0 =A0obfuscating traffic.
&gt;
&gt; =A0 To satisfy the above use cases, there must be real-time
&gt; =A0 communication between the tor process and the pluggable transport
&gt; =A0 proxy. To achieve this, this proposal refactors the extended ORPort
&gt; =A0 protocol specified in Proposal 180, and introduces a new port,
&gt; =A0 TransportControlPort, whose sole role is the exchange of control
&gt; =A0 information between transport proxies and tor.

So before we get too far into this, let's do a protocol overview! I'd
suggest inserting something like this into the text, assuming that it
is actually what you meant:

"Server-side Transports need to talk to the Tor server about
individual connections, and continue to do so as the connection is
ongoing.  To do so,
the transports deliver each connection to an "Extended ORPort", where
they provide metadata and agree on an identifier for each tunneled
connection.  Once this handshake occurs, the OR protocol proceeds
unchanged.

Additionally, each transport maintains a single connection to Tor's
"TransportControlPort", where it receives instructions from Tor about
rate-limiting on individual connections.

&gt; 3. The new extended ORPort protocol
&gt;
&gt; =A0Server transport proxies may need to connect to the bridge and pass
&gt; =A0additional information about client connections that the bridge
&gt; =A0would ordinarily receive from the kernel's TCP stack. =A0To do this,
&gt; =A0they connect to the "extended server port" as given in
&gt; =A0EXTENDED_SERVER_PORT, send a short amount of information, wait for a
&gt; =A0response, and then send the user traffic on that port.
&gt;
&gt; =A0The extended server port protocol is as follows:
&gt;
&gt; =A0 =A0 COMMAND [2 bytes, big-endian]
&gt; =A0 =A0 BODYLEN [2 bytes, big-endian]
&gt; =A0 =A0 BODY [BODYLEN bytes]
&gt;
&gt; =A0 =A0 Commands sent from the transport proxy to the bridge are:
&gt;
&gt; =A0 =A0 [0x0000] DONE: There is no more information to give. (body ignore=
d)

Let's add, "the next bytes sent by the transport will be those
tunneled over it."

&gt; =A0 =A0 [0x0001] USERADDR: an address:port string that represents the use=
r's
&gt; =A0 =A0 =A0 address.
&gt;
&gt; =A0 =A0 [0x0002] WANT_CONTROL: A body-less message which indicates that
&gt; =A0 =A0 =A0 the transport proxy wants to use the TransportControlPort of
&gt; =A0 =A0 =A0 the bridge. =A0It SHOULD be followed by a CONTROL command from
&gt; =A0 =A0 =A0 the bridge, otherwise the transport may close the connection.
&gt;
&gt; # will this work?

Hm.  I think it'd be better to have this command mean "We support the
transportcontrolport protocol," not "you must use the
transportcontrolport protocol!"  After all, if Tor _doesn't_ tell the
transport about rate-limiting, it's not like anything breaks
disastrously.

&gt; =A0 =A0 Replies sent from tor to the proxy are:
&gt;
&gt; =A0 =A0 [0x1000] OKAY: Send the user's traffic. (body ignored)
&gt;
&gt; =A0 =A0 [0x1001] DENY: Tor would prefer not to get more traffic from
&gt; =A0 =A0 =A0 this address for a while. (body ignored)
&gt;
&gt; =A0 =A0 [0x1002] CONTROL: a NUL-terminated "identifier" string, followed
&gt; =A0 =A0 =A0 by a second NUL-terminated string of the &lt;address&gt;:&lt;port&gt; of
&gt; =A0 =A0 =A0 the TransportControlPort. The pluggable transport proxy must
&gt; =A0 =A0 =A0 use the "identifier" to access the TransportControlPort.
&gt;
&gt; # pass TransportControlPort &lt;address&gt;:&lt;port&gt; through env. vars?

Seems wise, sure.

&gt; # what should parties do when they receive a command they don't
&gt; # understand? =A0should we enforce forward-compatibility with protocol
&gt; # versioning or with "ignore commands you don't understand", or what?

Let's say "ignore."  If you want, we can reserve the top bit of each
command to indicate "you must understand this; if you don't, close the
connection."

&gt; =A0[We could also use an out-of-band signalling method to tell Tor
&gt; =A0about client addresses, but that's a historically error-prone way
&gt; =A0to go about annotating connections.]

Yes; let's not do that.

&gt; The new TransportControlPort protocol
&gt;
&gt; =A0The TransportControlPort protocol is as follows:
&gt;
&gt; =A0 =A0 COMMAND [2 bytes, big-endian]
&gt; =A0 =A0 BODYLEN [2 bytes, big-endian]
&gt; =A0 =A0 BODY [BODYLEN bytes]
&gt;
&gt; =A0 =A0 Association commands sent from the transport proxy to the bridge
&gt; =A0 =A0 are:
&gt;
&gt; =A0 =A0 [0x0000] ASSOCIATE: a NUL-terminated "identifier" string. See
&gt; =A0 =A0 =A0'Association' section below.

Hm.  I think that each command should have an associated identifier,
and that identifiers should be (say) 16-byte binary values.  All this
hex encoding/decoding seems pointless, since this isn't a
text-oriented protocol.  So how about
     ConnectionID [16 bytes]
     Command [2 bytes]
     Bodylen [2 bytes]
     Body [bodylen bytes]

&gt; =A0 =A0 Association commands sent from the bridge to the transport proxy
&gt; =A0 =A0 are:
&gt;
&gt; =A0 =A0 [0x1000] ASSOCIATED: Sent upon receiving a legit ASSOCIATE
&gt; =A0 =A0 =A0 command from a transport proxy. (body ignored)
&gt;
&gt; =A0 =A0 [0x1001] NOT_ASSOCIATED: Sent after the bridge receives a
&gt; =A0 =A0 =A0 non-legit ASSOCIATE command from a transport proxy. Also sent
&gt; =A0 =A0 =A0 when the bridge receives a non-ASSOCIATE command from a
&gt; =A0 =A0 =A0 non-associated transport proxy. Upon sending this command, the
&gt; =A0 =A0 =A0 bridge SHOULD close the connection. (body ignored)
&gt;
&gt; =A0 =A0 Configuration commands sent from the transport proxy to the
&gt; =A0 =A0 bridge:
&gt;
&gt; =A0 =A0 [0x0001] RATE_LIMITED: Message confirming that the rate limiting
&gt; =A0 =A0 =A0 request of the bridge was carried out successfully (body
&gt; =A0 =A0 =A0 ignored). See the 'Rate Limiting' section below.
&gt;
&gt; =A0 =A0 [0x0001] NOT_RATE_LIMITED: Message notifying that the transport
&gt; =A0 =A0 =A0 proxy failed to carry out the rate limiting request of the
&gt; =A0 =A0 =A0 bridge (body ignored). See the 'Rate Limiting' section below.
&gt;
&gt; =A0 =A0 Configuration commands sent from the bridge to the transport
&gt; =A0 =A0 proxy are:
&gt;
&gt; =A0 =A0 [0x1002] RATE_LIMIT: Carries information on how the pluggable
&gt; =A0 =A0 =A0 transport proxy should rate-limit its traffic. See the 'Rate
&gt; =A0 =A0 =A0 Limiting' section below.
&gt;
&gt; # what should parties do when they receive a command they don't understan=
d?

Send an "unrecognized command error", perhaps.  Or ignore it.  If the
latter, let's add a way to declare what version of this protocol you
will understand.

&gt; 3.1. Association and identifier creation
&gt;
&gt; For Tor and a transport proxy to communicate using the
&gt; TransportControlPort, an identifier must have already been negotiated
&gt; using the 'CONTROL' command of Extended ORPort.
&gt;
&gt; The TransportControlPort identifier should not be predictable by a
&gt; user who hasn't received a 'CONTROL' command from the Extended
&gt; ORPort. For this reason, the TransportControlPort identifier should
&gt; not be cryptographically-weak or deterministically created.
&gt;
&gt; Tor should create its identifiers by generating 16 bytes of random
&gt; data and hashing them with the SHA256 cryptographic hash function.
&gt; The identifier string transmitted with the 'CONTROL' command should be
&gt; the hex representation of the SHA256 output.

The hashing step seems pointless; why not just generate 16 random
bytes and use those?

&gt; 4. Configuration commands
&gt;
&gt; 4.1. Rate Limiting
&gt;
&gt; A tor relay should be able to inform a transport proxy in real-time
&gt; about its rate-limiting needs.
&gt;
&gt; This can be achieved by using the TransportControlPort and sending a
&gt; 'RATE_LIMIT' command to the transport proxy.
&gt;
&gt; The body of the 'RATE_LIMIT' command should carry two integers, in
&gt; NUL-terminated ASCII string format, representing the bandwidth rate
&gt; and bandwidth burst in 'bytes per second', that the transport proxy
&gt; must set.
&gt;
&gt; # better transmit format? After reading langsec.org, I prefer to avoid
&gt; # length fields. Not that this format is bug-proof...

4 bytes, big-endian, I'd say.

&gt; When the transport proxy sets the appropriate rate limiting, it should
&gt; send back a 'RATE_LIMITED' command. If it fails while setting up rate
&gt; limiting, it should send back a 'NOT_RATE_LIMITED' command.
&gt;
&gt; After sending a 'RATE_LIMIT' command. the tor bridge might want to
&gt; stop pushing data to the transport proxy, till it receives a
&gt; 'RATE_LIMITED' command. If, instead, it receives a 'NOT_RATE_LIMITED'
&gt; command it might want to shutdown its connections to the transport
&gt; proxy.
&gt;
&gt; # is this realistic?

Hm.  There probably also wants to be an overall rate limit that
applies to all connections.  Also, there should be a way for the
transport to report to Tor how many bytes it's actually using, I
think, if the bytes on the wire are more vebose than the traffic they
encode.

&gt; 5. Security Considerations
&gt;
&gt; Extended ORPort or TransportControlPort do _not_ provide link
&gt; confidentiality, authentication or integrity. Sensitive data, like
&gt; cryptographic material, should not be transferred through them.
&gt;
&gt; Note that an attacker with superuser access, is able to sniff network
&gt; traffic, and capture TransportControlPort identifiers and any data
&gt; passed through those ports.
&gt;
&gt; # Is it worth adding an SSL layer (passing pub. key fpr via
&gt; # env. vars?)? :/

I say no; though it probably _is_ worthwhile to say "This should only
use localhost, and should shout very loudly if you try to bind or
connect somewhere else with it."

&gt; # Talk about Incentives of tor or transport proxies to comply to the
&gt; # wishes of each other. Ways to detect nonconformism. (threat
&gt; # model. Should tor speak with 3v1l transport proxies in the first
&gt; # place?)

I disagree with that; the transport proxies are run by the bridge
operators and need to do more or less what they're supposed to do.
Trying to get proxies to be sandboxable or something seems like a much
bigger and sorta unrelated task.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310142220</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-03-10 14:22:20-0400</timestampReceived><subject>[tor-dev] Tor and DNS - draft finalized into proposal</subject><body>

Hi all,

the DNS/DNSSEC resolving draft for seems to be finished.

I added a few thoughts on mitigating circuit correlation (mentioned in proposal
171). Somebody could look at those if they are not totally stupid (last two
paragraphs of section 7).

A note is added about the "DNSSEC stapling" [1] (extremely difficult, won't be
implemented).

The draft is here (full text pasted at the end of this mail):

https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt

The draft could probably be given a "proposal number" and merged into torspec
proposals directory unless there is an objection.

I'll leave few weeks (2-3) in case someone finds a vulnerability or has an
objection. After that I could slowly begin implementing it in a separate branch.


[1] https://lists.torproject.org/pipermail/tor-dev/2012-February/003285.html

Ondrej

---- pasted proposal (hopfully will wrap well) ----

Filename: xxx-dns-dnssec.txt
Title: Support for full DNS and DNSSEC resolution in Tor
Authors: Ondrej Mikle
Created: 4 February 2012
Modified: 10 March 2012
Status: Draft

0. Overview

  Adding support for any DNS query type to Tor, as well as DNSSEC support.

0.1. Motivation

  Many applications running over Tor need more than just resolving FQDN to
  IPv4 and vice versa. Sometimes to prevent DNS leaks the applications have to
  be hacked around to be supplied necessary data by hand (e.g. SRV records in
  XMPP). TLS connections will benefit from planned TLSA record that provides
  certificate pinning to avoid another Diginotar-like fiasco.

  DNSSEC is part of the DNS protocol and the most appropriate place for DNSSEC
  API would be probably in OS libraries (e.g. libc). However that will
  probably take time until it becomes widespread.

  On the Tor's side (as opposed to application's side), DNSSEC will provide
  protection against DNS cache-poisoning attacks (provided that exit is not
  malicious itself, but still reduces attack surface).

1. Design

1.1 New cells

  There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (we'll
  use DNS_BEGIN and DNS_RESPONSE for short below).

  DNS_BEGIN payload:

    DNS packet data (variable length)

  The DNS packet must be generated internally by libunbound to avoid
  fingerprinting users by differences in client resolvers' behavior.

  DNS_RESPONSE payload:

    total length (2 octets)
    data         (variable)

  Data contains the reply DNS packet or its part if packet would not fit into
  the cell. Total length describes length of complete response packet.

  AXFR and IXRF are not supported in this cell by design (see specialized tool
  below).

2. Interfaces to applications

  DNSPort evdns - existing implementation will be updated to use DNS_BEGIN.

  SOCKS proxy - new command will be added, containing RR type, class and
  query.  Response will simply contain the DNS packet.

3. New options in configuration file

  libunbound takes couple of parameters, e.g. trust anchors and cache-size. In
  order not to put them all into torrc, there will be only one option,
  configuration file name. Tor will be distributed with some sensible
  defaults.  New option will be named UnboundConfig and value will be
  filename.

  An option DNSQueryPolicy will determine what query types and classes are
  permitted:

   - common - class INTERNET, RR types listed on
     https://en.wikipedia.org/wiki/List_of_DNS_record_types#Resource_records
   - full - any query type and class is allowed

  Class CHAOS in "common" would not be of much use, since its prevalent use is
  for asking authoritative servers.

  For client side, full validation would be optional described by option
  DNSValidation (0|1). By default validation is turned on, otherwise it would
  be easy to fingerprint people who turned it on and asked for not-so-common
  records like SRV.

4. Changes to directory flags

  Exit nodes will signal their resolving capability by two flags:

   - CommonDNS - reflects "common" DNSQueryPolicy
   - FullDNS - reflects "full" DNSQueryPolicy

  Exit node asked for a RR type not in CommonDNS policy will return REFUSED in
  as status in the reply DNS packet contained in DNS_RESPONSE cell.

  If new types are added to CommonDNS set (e.g. new RFC adds a record type)
  and exit node's Tor version does not recognize it as allowed, it will send
  REFUSED as well.

5. Implementation notes

  There will be one instance of ub_ctx (libunbound resolver structure) in Tor,
  libunbound is thread-safe.

  Client will periodically purge incomplete DNS replies. Any unexpected
  DNS_RESPONSE will be dropped.

  Request for special names (.onion, .exit, .noconnect) will return REFUSED.

  RELAY_BEGIN would function "normally", there is no need for returning DNS
  data. In case of malicious exit, client can't check he's really connected to
  whatever IP is in A/AAAA. We won't send any NSEC/NSEC3 back in case FQDN
  does not exist, it would needlessly complicate things. Client can check by
  extra query on DNSPort.

  AD flag must be zeroed out on client unless validation is performed.

6. Separate tool for AXFR

  The AXFR tool will have similar interface like tor-resolve, but will
  return raw DNS data.

  Parameters are: query domain, server IP of authoritative DNS.

  The tool will transfer the data through "ordinary" tunnel using RELAY_BEGIN
  and related cells.

  This design decision serves two goals:

  - DNS_BEGIN and DNS_RESPONSE will be simpler to implement (lower chance of
    bugs)
  - in practice it's often useful do AXFR queries on secondary authoritative
    DNS servers

  IXFR will not be supported (infrequent corner case, can be done by manual
  tunnel creation over Tor if truly necessary).

7. Security implications

  Client as well as exit MUST block attempts to resolve local RFC 1918, 4193,
  4291 adresses (PTR).

  An exit node resolving names will use libunbound for all types of resolving,
  including lookup of A/AAAA records when connecting stream to desired
  server. Ordinary streams will gain a small benefit of defense against DNS
  cache poisoning on exit node's network.

  Transaction ID is provided randomly by libunbound, no
  need to modify. This affects only DNSPort and
  SOCKS interfaces.

  As proposal 171 mentions, we need mitigate circuit correlation. One solution
  would be keeping multiple streams to multiple exit nodes and picking one at
  random for DNS resolution. Other would be keeping DNS-resolving circuit open
  only for a short time (e.g. 1-2 minutes).

  Yet another option for mitigating circuit correlation would be having
  separate circuit for each application, but that would require some
  cooperation of application and Tor, e.g. via some LD_PRELOAD mechanism.


8. TTL normalization idea

  A bit complex on implementation, because it requires parsing DNS packets at
  exit node.

  TTL in reply DNS packet MUST be normalized at exit node so that client won't
  learn what other clients queried. The normalization is done in following
  way:

  - for a RR, the original TTL value received from authoritative DNS server
    should be used when sending DNS_RESPONSE, trimming the values to interval
    [5, 600]
  - does not pose "ghost-cache-attack", since once RR is flushed from
    libunbound's cache, it must be fetched anew

9. Implementation notes

  I noticed that libunbound does not always parallelize requests that could be
  parallelized when using a forwarder (this does not apply to unrelated
  queries). Thus, A query for addons.mozilla.org looks like (note the
  interleaving of query/reponse):

   Time       Info
   0.000000   Standard query A addons.mozilla.org
   0.178366   Standard query response A 63.245.217.112 RRSIG
   0.178572   Standard query DNSKEY &lt;Root&gt;
   0.178617   Standard query response DNSKEY DNSKEY RRSIG
   0.178981   Standard query DS org
   0.179041   Standard query response DS DS RRSIG
   0.179192   Standard query DNSKEY org
   0.179233   Standard query response DNSKEY DNSKEY DNSKEY DNSKEY RRSIG RRSIG
   0.179505   Standard query DS mozilla.org
   0.179562   Standard query response DS RRSIG
   0.179717   Standard query DNSKEY mozilla.org
   0.179762   Standard query response DNSKEY DNSKEY DNSKEY RRSIG RRSIG

  Further investigation is needed how to work around this. Maybe future
  version will have it fixed, since I see DNS queries exiting from unbound
  forwarder to authoritative DNS server are parallelized.

10. "DNSSEC stapling"

  The following idea tries to mitigate attack where observer of exit node can
  learn the fact that client's OR is "heating up DNS cache".

  Instead of asking for several records (DS, DNSKEY, etc.), exit node would
  send all of them at once in a "stapled response".

  Unfortunately this is extremely difficult to implement correctly [1] [2].
  Thus we need to live with fact that exit node or an eavesdropper of such
  exit node will know that an OR used some TLD for the first time.

  Causing unrelated errors or vulnerabilities in Tor by implementing this
  algorithm is not worth the risk.


References

  [1] https://www.ietf.org/mail-archive/web/dane/current/msg02823.html
  [2] http://unbound.net/pipermail/unbound-users/2012-February/002239.html

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120316230953</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-16 23:09:53-0400</timestampReceived><subject>[tor-dev] Proposal: Message-based Inter-controller IPC Channel</subject><body>

[Attachment #2 (multipart/signed)]


Filename: xxx-postmessage-ipc.txt
Title: Message-based Inter-controller IPC Channel
Author: Mike Perry
Created: 16-03-2012
Status: Proposed
Target: 0.2.4.x

Overview

  This proposal seeks to create a means for inter-controller
  communication using the Tor Control Port.

Motivation

  With the advent of pluggable transports, bridge discovery mechanisms,
  and tighter browser-Vidalia integration, we're going to have an
  increasing number of collaborating Tor controller programs
  communicating with each other. Rather than define new pairwise IPC
  mechanisms for each case, we will instead create a generalized
  message-passing mechanism through the Tor Control Port.

Control Protocol Specification Changes

  CONTROLLERNAME command

    Sent from the client to the server. The syntax is:

      "CONTROLLERNAME" SP ControllerID
        ControllerID = 1*(ALNUM / "_")

	Server returns "250 OK" and records the ControllerID to use for
    this control port connection for messaging information if successful,
    or "553 Controller name already in use" if the name is in use by
    another controller, or if an attempt is made to register the special 
    names "all" or "unset".

    [CONTROLLERNAME need not be issued to send POSTMESSAGE commands,
     and CONTROLLERNAME may be unsupported by initial POSTMESSAGE
     implementations in Tor.]

  POSTMESSAGE command

    Sent from the client to the server. The syntax is:

      "POSTMESSAGE" SP "@" DestControllerID SP LineItem CRLF
         DestControllerID = "all" / 1*(ALNUM / "_")

	If DestControllerID is "all", the message will be posted to all
    controllers that have "SETEVENTS POSTMESSAGE" set. Otherwise, the
    message should be posted to the controller with the appropriate
    ControllerID.

	Server returns "250 OK" if successful, or "552 Invalid destination
    controller name" if the name is not registered.

    [Initial implementations may require DestControllerID always be
     "all"]

  POSTMESSAGE event

      "650" SP "POSTMESSAGE" SP MessageID SP SourceControllerID SP
                        "@" DestControllerID SP LineItem CRLF
         MessageID = 1*DIGIT
         SourceControllerID = "unset" / 1*(ALNUM / "_")
         DestControllerID = "all" / 1*(ALNUM / "_")

      MessageID is an incrementing integer identifier that uniquely
      identifies this message to all controllers.

	  The SourceControllerID is the value from the sending
      controller's CONTROLLERNAME command, or "unset" if the
      CONTROLLERNAME command was not used or unimplemented.

  GETINFO commands
    "recent-messages" -- Retrieves messages 
      sent to ControllerIDs that match the current controller 
      in POSTMESSAGE event format. This list should be generated
      on the fly, to handle disconnecting controllers.

    "new-messages" -- Retrieves the last 10 "unread" messages
      sent to this controller, in POSTMESSAGE event format. If
      SETEVENTS POSTMESSAGE was set, this command should always return
      nothing.

    "list-controllers" -- Retrieves a list of all connected controllers
      with either their registered ControllerID or "unset".

Implementation plan

  The POSTMESSAGE protocol is designed to be incrementally deployable.
  Initial implementations are only expected to implement broadcast
  capabilities and SETEVENTS based delivery. CONTROLLERNAME need not be
  supported, nor do non-"@all" POSTMESSAGE destinations.

  To support command-based controllers (which do not use SETEVENTS) such
  as Torbutton, at minimum the "GETINFO recent-messages" command is
  needed.  However, Torbutton does not have immediate need for this
  protocol.

  
-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120317073735</emailId><senderName>Christian Kujau</senderName><senderEmail>lists@nerdbynature.de</senderEmail><timestampReceived>2012-03-17 07:37:35-0400</timestampReceived><subject>[tor-dev] [PATCH] tor-exit-notice.html: shorten Cornell URLs</subject><body>

Hi,

these ever so long law.cornell.edu URLs are now automatically redirecting 
to a shorter version - let's use that in our tor-exit-notice.html as well.

Christian.

diff --git a/contrib/tor-exit-notice.html b/contrib/tor-exit-notice.html
index de3be17..8cf5c29 100644
--- a/contrib/tor-exit-notice.html
+++ b/contrib/tor-exit-notice.html
@@ -87,7 +87,7 @@ seize this router will accomplish nothing.&lt;/p&gt;
 &lt;p&gt;
 Furthermore, this machine also serves as a carrier of email, which means that
 its contents are further protected under the ECPA. &lt;a
-href="http://www4.law.cornell.edu/uscode/html/uscode18/usc_sec_18_00002707----000-.html"&gt;18
+href="http://www.law.cornell.edu/uscode/text/18/2707"&gt;18
 USC 2707&lt;/a&gt; explicitly allows for civil remedies ($1000/account
 &lt;i&gt;&lt;b&gt;plus&lt;/b&gt;&lt;/i&gt;  legal fees)
 in the event of a seizure executed without good faith or probable cause (it
@@ -105,7 +105,7 @@ used to violate the DMCA, please be aware that this machine does not host or
 contain any illegal content. Also be aware that network infrastructure
 maintainers are not liable for the type of content that passes over their
 equipment, in accordance with &lt;a
-href="http://www4.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00000512----000-.html"&gt;DMCA
+href="http://www.law.cornell.edu/uscode/text/17/512"&gt;DMCA
 "safe harbor" provisions&lt;/a&gt;. In other words, you will have just as much luck
 sending a takedown notice to the Internet backbone providers. Please consult
 &lt;a href="https://www.torproject.org/eff/tor-dmca-response"&gt;EFF's prepared

-- 
BOFH excuse #151:

Some one needed the powerstrip, so they pulled the switch plug.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120317095259</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-17 09:52:59-0400</timestampReceived><subject>[tor-dev] Tor HS keys password protection against impersonation attacks?</subject><body>

Hi,
thinking about Tor Hidden services, they are managed by using Hidden
Services client keys.

The Tor HS keys are "private keys" that may require to be protected
because they represent also the "identity" of the Tor HS and if stolen,
it would be possible to carry on impersonation attack on connecting to
Tor HS.
Accepting connections on behalf of the real TorHS, with the goal to
steal passwords, provide fake data to clients, exploit them, etc.


The Tor HS keys are even more sensible than the X509v3, as it does provide:
- identity (similar to an internet domain name)
- routing (similar to an internet IP address)
- encryption (they provide e2e encryption, i don't know if there are
attacks on crypto if they get stolen)

So owning a Tor HS key it's like owning a user domain name, acquiring
it's ip address and the x509v3 private key of his digital certificate
bound to his domain name.


As a protection schema it would be possible to create the Tor HS private
key encrypted with a passphrase, like it's possible to do for x509v3 PEM
certificates.

That the passphrase to unlock the Tor HS key, could be provided via Tor
Control Port, so an external process (UI, scripts) could manage the
setup of the passphrase.

That way even in case of seizure of the server running the Tor HS
it would not be possible to who seized the Tor HS Server to do actively
Impersonation attacks of the Tor HS.


-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120318114610</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 11:46:10-0400</timestampReceived><subject>[tor-dev] TorHS related files re-organization ?</subject><body>

While thinking about TorHS key protection, it would be also nice to
think about "re-organizing" the way the TorHS describe store it's data.

One of the example issue i see is that currently the hostname of a TorHS
is written to a text file.

This provide two major drawbacks:
- Application integration

Any application willing to integrate with Tor and ship Tor together with
the application (GlobaLeaks, TorChat, etc) must do a file i/o operation
to know the hostname.
If the hostname could be known via Tor ControlPort the applications
integrating Tor would have a much clean and dynamic way to know it's
local TorHS hostname.

- Security issue

Looking at the server seizure threat scenario, who seize the computer
running TorHS will be able to know the identity of the TorHS itself by
looking at the "hostname" file.

In the context of protection by using a password to protect the TorHS
key, also the hostname information (currently in "hostname" file), would
need to be protected.
So in such context it would be eventually useful to think about changing
the structure of the HiddenServiceDir files, by merging together the
"hostname" file and the TorHS key.


Even better it would be cool to have an abstracted "data storage" for
such kind of information, so that it would be possible to keep it file
based, sql based, remotely hosted over an web services, etc.

Having something like:

HiddenServiceStorage file://etc/tor/hiddenservice
HiddenServiceStorage dbm://etc/tor/hiddenservice.db
HiddenServiceStorage
http://username@password:myremotekeyhostingservice/givemykeys?${{TorServerID}}

While for the protection schema it may have a file protection schema like:
HiddenServiceEncryptionMethod pgp, scrypt, plain,
exec://usr/bin/customscript


-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120228212752</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-28 21:27:52-0400</timestampReceived><subject>[tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

Hello all.

We've written up our proposal for mnemonic .onion URLs.

See https://docs.google.com/document/d/sT5CulCVl0X5JeOv4W_wC_A/edit?disco=AAAAAERhFsE
for details; please read the full intro for explanations and caveats,
as some are important.

tl;dr: It's a system that would have all three properties of being
secure, distributed, and human-meaningful… but would *not* also have
choice of name (though it has the required *canonicality* of names),
and has a somewhat absurdist definition of 'meaningful'. :-P

Please feel free to put comments there or on list.

Right now we're at the stage just before implementation; namely, we
haven't yet collated the necessary dictionaries, but we have a
reasonably good idea of how the system would work, including needed
constraints on the dictionaries. If you have suggestions or comments,
now is a good time to talk about them, so that if any of it affects
the dictionary collation step we don't waste work.

Thanks,
Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120318134233</emailId><senderName>Linas Valiukas</senderName><senderEmail>shirshegsm@gmail.com</senderEmail><timestampReceived>2012-03-18 13:42:33-0400</timestampReceived><subject>[tor-dev] Tor for iOS via official channels</subject><body>

Hello, 

I was thinking about a GSoC 2012 project I could propose, and I came to the question \
of why there's no Tor iOS (iPhone / iPad / iPod touch) application distributed on the \
official iTunes App Store?

There's this "test package" of Tor for iOS available [1], but it has to be installed \
via Cydia and not everyone's phone is jailbroken. Distributing an application via the \
App Store has some benefits of its own too (additional marketing and visibility, \
easier installation, to name a few).

So, what is the problem?

* Would it comply with the iOS Developer Program License Agreement? I'm no lawyer, \
but last I read the document there's nothing in it that would prevent distributing an \
app which would create a "local" HTTP proxy to be used by the other applications.

* Since the iPhone 3GS, the applications can retain running in the background, so I \
guess we're fine on the purely technical side too.

* There are US Export laws that require a so-called CCATS review and approval to be \
done with each application that employs strong encryption. I don't think that's a \
blocker though.

* Maybe that Tor iOS application wouldn't reach various "interesting" markets such as \
PRC (for example, a commercial yet pricy "Covert Browser" [2] is not available in \
China's App Store) because of the legal restrictions. Still, I would argue that it is \
worth having such an application.

Regards,


[1]: http://sid77.slackware.it/ios/
[2]: http://itunes.apple.com/us/app/covert-browser/id477438328?mt=8

-- 
Linas Valiukas
+370 687 65870
www.pypt.lt


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120316065732</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-03-16 06:57:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal 193: Safe cookie authentication</subject><body>


On Feb 10, 2012, at 12:02 AM, Robert Ransom wrote:
&gt; The sole exception to =91non-safe cookie authentication must die=92 is
&gt; when a controller knows that it is connected to a server process with
&gt; equal or greater access to the same filesystem it has access to.  In
&gt; practice, this means =91only if you're completely sure that Tor is
&gt; running in the same user account as the controller, and you're
&gt; completely sure that you're connected to Tor=92, and no controller is
&gt; sure of either of those.

Why is it so hard to do this? Can't we tell controllers to do a
check of permissions, and only if they can't be sure refuse to use the
requested path by default unless a config whitelist or user prompt
allows it? I think that's a lot easier to implement for controllers, and
I just don't really see the huge threat here. If you have malicious
system-wide software on your host, you lost anyway.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120311222804</emailId><senderName>The23rd Raccoon</senderName><senderEmail>the.raccoon23@gmail.com</senderEmail><timestampReceived>2012-03-11 22:28:04-0400</timestampReceived><subject>[tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

          Analysis of the Relative Severity of Tagging Attacks:
             Hey hey, ho ho! AES-CTR mode has got to go!


                  A cypherpunk riot brought to you by:
                           The 23 Raccoons




Abstract

Gather round the dumpster, humans. It's time for your Raccoon
overlords to take you to school again.

Watch your step though: You don't want to catch any brain parasites[0].


Introduction

For those of you who do not remember me from last time, about 4 years
ago I demonstrated the effect that the Base Rate Fallacy has on timing
attacks[1]. While no one has disputed the math, the applicability of
my analysis to modern classifiers was questioned by George Danezis [2]
and others. However, a close look at figure 5(a) of [3] shows it to be
empirically correct[4].

Recently, Paul Syverson and I got into a disagreement over the
effectiveness of crypto-tagging attacks such as [5]. He asked me to
demonstrate that they were more powerful than active timing attacks
(which I've done in [6]), and to measure just how much more powerful
they were (which is shown in this work). At least I think that's what
he was asking. His paragraphs were very looooooong...

Anyway, out of the goodness of my little Raccoon heart, I asked my
brethren to help me complete this proof ahead of schedule. We're
worried about you guys. You be gettin sloppy with da attack analysis,
yo (brain parasites??). And when ya get sloppy, the Raccoons pick up
the scraps and multiply.

And, as you'll see below, you're not gonna like it when we multiply.
It means more work for you. (But you probably should have realized
that in the first place).


The Amplification Potential of Tagging

Crypto-tagging attacks like [5] provide for an amplification attack
that automatically boosts attack resource utilization by causing any
uncorrelated activity to immediately fail, so the attacker doesn't
have to worry about devoting resources to uncompromised traffic.

Those of you who are already familiar with [5], stay with me. The
authors of [5] apparently did not realize the amplification power of
their attack, either. Despite my teasing above, I can see why you
dismissed them initially.

The crypto-tagger achieves amplification by being destructive to a
circuit if the tagged cell is not untagged by them at the exit of the
network, and also by being destructive when a non-tagged cell is
"untagged" on a circuit coming from a non-tagging entry. It transforms
all non-colluding entrances and exits into a "half-duplex global"
adversary that works for the tagger to ensure that all traffic that he
carries goes only through his colluding nodes.


Imitating a Tagging Attack with Timing Attacks

The crux of the argument against fixing crypto-tagging attacks is that
they can be imitated by an active adversary using timing attacks.

To imitate a tagging attack, the attacker attempts to achieve circuit
killing amplification by using timing to try to determine which
circuits are not flowing to colluding nodes, and kill them.

The imitated tagging attack has two steps. First, the two colluding
endpoints correlate all candidate matches together and kill all other
circuits off. Then, they embed a more thorough active timing signature
into the remaining circuits to determine the sure matches.

We contend that this first step has very little timing information
available due to the need to close circuits before streams are opened
(which happens after just a couple cells). Certainly not enough to
establish 0-error across a large sample size. Even so, in the analysis
we'll be generous and concede a very low false positive rate could
still be possible. It turns out not to matter that much, as long as
it's non-zero.

So let's analyze each step of the imitating attack in turn.


Imitating Tagging: Circuit Killing Step

In the first pass of the imitating attack, the adversary performs an
initial correlation of new circuits, and then kills the ones that
don't correlate. So let's do the base rate analysis[1] for the
correlation, shall we?

The probability that an arbitrary pair of circuit endpoints seen
through the c/n colluding nodes belongs to the same circuit is equal
to (c/n)^2 times the probability of picking an arbitrary matching pair
of circuit endpoints out  the network's 's' streams (1/s^2).

Pk(M) = (c/n)^2 * (1/s)^2

From my previous work in [1], we have the effect of the base rate on
this attack:

Pk(M|C) = Pk(C|M)*Pk(M)/(Pk(M)*Pk(C|M) + Pk(~M)*Pk(C|~M))

For every actual match, the adversary can expect to have 1/Pk(M|C)
additional matches predicted by the correlater.

If you churn through some more analysis, you can see that the
probability Pk(~M|~C) of correctly killing non-matching circuits is
pretty high (but is still a function of c/n). In other words, the
adversary is pretty sure that the circuits he does kill are
irrelevant. Since everyone around here likes to assume the correlating
adversary is all-powerful, we doubt we need to show their strength in
this avenue. Let's just assume Pk(~M|~C) = 1, and no true matches are
killed early.

Now for the numbers. Being a Raccoon, I am limited by the precision of
my trusty rusty squirrel-skull abacus[7], so I'll give the imitating
adversary several benefits of the doubt here to keep the math more
simple. You can re-calculate at home on a high precision calculator
without these assumptions if you like.

First, let's just assume for the ease of analysis that the imitating
adversary gets to behave globally in the first step and set c=n for it
(relax Paul, this assumption is in your favor). After all, maybe the
NSA has some tricks up their sleeve with respect to global timing
analysis that we don't know about. If we don't give the imitating
adversary this bonus, the base rate just gets too small to manage and
crypto-tagging wins by a landslide because of its free "half-duplex
global" property. It would take all of the excitement right out of our
proof!

Pk(M) = (n/n)^2 * (1/s)^2 = 1/s^2

To toss the imitating adversary another bone (since they keep falling
off of my abacus anyway), and because a 0.0006 false positive rate "is
just a non-issue"[8], we'll give those chumps an extra 0. They deserve
it, they need it, and we're feeling generous. Hey, maybe they even can
successfully encode some timing information between the first two
cells on a circuit.

Pk(C|~M) = 0.00006
Pk(C|M)  = 0.99994 = 99.994%

As if that weren't enough, we'll *still* use only s=5000 concurrent
streams, even though over the past 4 years of network growth, that is
now an absurdly low number.

Pk(M)    = (1/5000)^2 = 4*10^-8

Plugging everything in:

Pk(M|C)  = 0.99994*4*10^-8/(0.99994*4*10^-8 + (1-4*10^-8)*0.00006))
Pk(M|C)  = 0.000666

1/Pk(M|C) =&gt; 1501 extra circuits survive for every true match.

The imitating adversary sure seems to be carrying a lot of extra
traffic at this point (roughly 1501 times as much as he wants), even
though we made three seriously large (to the point of being erroneous)
assumptions in his favor. Stay tuned for the exciting conclusion to
see what he'll do with it.


Imitating Tagging: Active Timing Attack Step (at 100% accuracy)

After filtering, the imitating adversary then moves on to use an
active timing attack to determine the true matches. Let's walk through
the base rate analysis to see what they will look like.

The probability of picking an arbitrary, random endpoint match is
proportional to the number of remaining endpoints, which should trend
towards the fraction of the colluding capacity times the number of
total endpoints:

Pi(M) ~= O((c/n) * (1/s^2))

Technically, there is a correction we need to do for the increased
prior probability of matches being present due to the filtering step
above, but we're going to ignore that for now, because we'll just give
the adversary 100% accuracy for this stage. We do not believe a
0-error active timing attack would survive analysis (see the Future
Work section), but Paul was quite insistent, and it also simplifies
analysis.

So here you go, Paul:

Pi(C|M)  = 1
Pi(C|~M) = 0
Pi(M|C)  = 1*Pi(M)/(Pi(M) + 0*(1-Pi(M))
Pi(M|c)  = 1

With this level of accuracy, Pi(M) is irrelevant. The base rate loses
this one (but only because the error rate is contrived).

Now, how many of the network's total circuits does the adversary
actually compromise? Well, the adversary is carrying c/n of the
network traffic, but only Pk(M|C) of those circuits are actually valid
candidates for matching.

Of those, Pi(M|C) are discovered by the active timing attack (all of them).

Pi(compromise) = c/n * Pk(M|C) * Pi(M|C)
Pi(compromise) = c/n * 0.000666

Ok, not bad. The imitating adversary seems to beat the expected
O((c/n)^2) for end to end 0-error attacks for some values of c. So it
might be a good idea. Sometimes.

Let's check in with our crypto-tagger and see how he's doing.


Full Analysis of the Crypto-Tagging Attack

The most direct and intuitive route to calculate the base rate Pc(M)
for the crypto-tagger is through the observation that the "half-duplex
global" adversary is killing all traffic such that the all of the 's'
streams that flow through the adversary's nodes are fully compromised.

Pc(M) = (1 / ((c/n)*s))^2
Pc(M) = (n/c)^2 * (1/s)^2

Ugly looking base rate, but it doesn't matter, because the
crypto-tagger can in fact encode arbitrary bit strings in his tags
without even resorting to timing. Bit string encoding was not actually
discussed in [5], but our crack research team of 23 Raccoons doesn't
see why it isn't possible.

Therefore, the crypto-tagger's Pc(M|C) ends up 1.0. But unlike the
imitating tagger, the crypto-tagger doesn't need any gifts from
Raccoons to achieve his success rate.

Pc(C|M)  = 1
Pc(C|~M) = 0
Pc(M|C)  = 1*Pc(M)/(1*Pc(M) + 0*(1-Pc(M))
Pc(M|C)  = 1

To calculate the probability of compromise of an arbitrary circuit
chosen from the entire network, we need to get a measure on the number
of circuits that flow through the adversary's nodes.

The most direct and intuitive way to calculate this probability is to
realize that the "half-duplex global" adversary created by the
crypto-tag ensures that all of the c/n network capacity deployed by
the attacker carries only fully compromised circuits. Therefore, the
attacker can expect to compromise c/n of the circuits on the network.

The probability of compromise network-wide is then:

Pc(compromise) = Pc(M|C) * c/n
Pc(compromise) = c/n

In other words, the attack expects to compromise (c/n)*s of the
network's total concurrent streams. So much for O((c/n)^2).

If even just one of the major exit relays became compromised or
coerced to implement a crypto-tagging attack (or hey, just did it for
the lullz!), the consequences would be devastating, and invisible to
users.


Crypto-Tagger vs Imitating Tagger

Let's compare the two probabilities of compromise:

Pi(compromise) = Pc(compromise)*Pk(M|C)
Pc(compromise) = Pi(compromise)/Pk(M|C)
Pc(compromise) = Pi(compromise)*1501

So even with a 100% accurate active timing attack and several very
liberal assumptions in favor of the imitating adversary, the
crypto-tagger compromises 1501 *times* as many circuits with the same
attack capacity. That's some nice amplification.

Moreover, the crypto-tagger has a compromise rate of c/n, which
obliterates the O((c/n)^2) expected compromise rate that c/n-carrying
adversaries are supposed to be capable of compromising.

Sounds like it's time to swap out AES-CTR in favor of a
self-authenticating cipher[9] amirite??. OCB mode, anyone?


Future work

We can further elaborate the above analysis to take in more realistic
error rates for active timing attacks. Such an exercise might be
instructive, but we believe it is not necessary to properly evaluate
imitating tagging versus crypto-tagging. It will only make the
imitating tagger look worse, and everybody should realize by now he's
just a poser anyway.


-----------------------------
0. https://en.wikipedia.org/wiki/Baylisascaris_procyonis
1. http://archives.seul.org/or/dev/Sep-2008/msg00016.html
2. https://conspicuouschatter.wordpress.com/2008/09/30/the-base-rate-fallacy-and-the-traffic-analysis-of-tor/
 3. http://www.cl.cam.ac.uk/~sjm217/papers/pet07ixanalysis.pdf
4. https://lists.torproject.org/pipermail/tor-talk/2012-March/023592.html
5. http://www.cs.uml.edu/~xinwenfu/paper/ICC08_Fu.pdf
6. https://www.eff.org/pages/tor-and-https
7. http://www.youtube.com/watch?v=ERwqbdAIY04
8. https://blog.torproject.org/blog/one-cell-enough
9. https://en.wikipedia.org/wiki/Authenticated_encryption
10. Look, I used more citations this time!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120323224539</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-03-23 22:45:39-0400</timestampReceived><subject>[tor-dev] Self publishing over Tor Hidden Services</subject><body>

Tor Hidden Services are great, though their impact is grossly limited by the
fact that they are not at all easy to deploy. Systems such as Tor2web allow
people that decide to publish anonymously to be reachable by anybody not
using
a Tor client.

For dealing with the usability aspect of Tor Hidden Services, this GSoC I am
going to be mentoring APAF: Anonymous Python Application Framework. The goal
is to give easy to use tools for people to do self publishing.

This is a basic description of the project:

1. Overview
  Tor Hidden Services are underused compared to their potential, the goal
  of APAF is to provide an easy system to allow network related python
  application developers to build their software in a way that it runs as
  a Tor Hidden Service (Tor HS).
  The framework will allow developers to easily build .exe, .app, statically
  linked linux binaries that contain the python interpreter and the Tor
daemon.
  This will allow the end user to easily start running that service on their
  machine, by simply downloading a package. This is similar to what is
done with the
  Tor Browser Bundle (TBB).

2. Motivation
  One of the reasons for which Tor HS are not used that much is that
there is
  no simple way for an application developer to ship their application
with a
  Tor binary and automatically configure a Tor HS.
  This leads to users not being able to easily run Tor Hidden Services
on their
  desktop machines limiting the diffusion of HSs.
  An example use case is a person that wishes to run a temporary chat
server on
  their home machine. With APAF a chat server developer could package such a
  python application and the end user will be able to run it by
downloading a package
  and executing it.

3. What is built?
  APAF compiles all the dependencies for all the target systems.
  The software that will come bundled with it are:
  * the Python interpreter (cpython bundled with PyInstaller:
http://www.pyinstaller.org/)
  * Tor
  * The desired python dependecies (computed with PyInstaller)
  The build system must be configurable and extensible.
  It should allow easy bundling of third party applications such as
p7zip, gpg, etc
 as APAF modules, in order to let the project grow with new functionalities.
 
  The output of the build process will be:
  - Win32: MyApplication.exe
  - OSX: MyApplication.app (inside an Application.dmg container)
  - Linux: Deb build or statically linked binary
  The buildsystem should download the latest release of Tor for the
appropriate platform
  and extract the required files into the build structure, in order to
be packaged within the application.
  Note: Another possibility is that it could build Tor from source for
the desired target
  platforms, but this may require some additional effort.

4. What happens when I start APAF?
  When APAF starts the user running it is presented with a splash screen
that
  displays the startup progress. The image in the splash screen should
be customizable
  by the application developer.
  Another option would be to start the system browser and point it to
  http://127.0.0.1:&lt;APAF_port&gt;/ and display the bootstrap process inside
of the bundled
  web based UI.
  At first launch APAF will show a startup splash screen with a progress
bar describing
  application startup event informations, optionally displaying an image.
  Then the system browser will be started to let the user access APAF
UI, that
  will provide a wizard for bootstrapping the setup of the Tor Hidden
Service.
 If the APAF application is already running by clicking on it, it will
just start the browser
to open directly the APAF UI.
  By default APAF will come with a web application that is used for
administering
  and checking on the status of the running Tor HS. It should provide
functionality
  the following functionality:
  * Check the current status of the Tor HS (it's hostname and port mapping)
  * Start and stop tor Hidden Service
  * API to add/remove new Tor Hidden service mapping
  * Select from the list of bundled applications the ones to run
  * Test it's reachability from the Tor network (by doing a request over
Tor to it's .onion address)
  * Configure Tor (User Interface to edit torrc)
   * Close Awaf

5. Web Applications
  One of the first applications that will be used as an example for APAF
will be
  a simple python web application. The application will simply serve to
the client
  static files.
  The basic scaffolding that this web application provides should allow
developers
  to build their own web application based on this example.
  The application will be written using TornadoWeb
(http://www.tornadoweb.org/).

6. Security Features
  Outbound Connection Torrification
  ---------------------------------
  The framework must provide support to automatically torify all or
specific outbound connection.
  The entire python application framework (Tornadoweb) should be
forbidden to make any outbound
  connections directly, it should not leak out of the Tor network.
  Inbound Connection (Tor Hidden Service)
  ---------------------------------------
  APAF will expose to the Tor network the configured Tor Hidden Service
running the bundled server
  software.
  The user will be able to properly configure their HS and choose if to
allow connections
  from tor2web (in the case of a web application) or not.
  Misc.
  ----
  Ideally the application should come with security enhancements such as
sandboxing and hardening of
  the system to minimize anonymity leaks and security vulnerability
exploitability.

7. Documentation
  APAF must provide detailed documentation on:
  - how to setup the build environment (eventually on multiple operating
systems)
  - how to customize your own enviroment for your own anonymous web
application
  - any specific documentation on particular procedures and/or internal
structure
  - user manual for running an APAF built application

Specific to Google Summer of Code the student will complete the following:

For GSoC the student is expected to create the build system capable of
building a simple
web application that serves static files. It should also include a web
UI for a wizard setup,
checking the status of the HS and configuring it.

I believe this project has some common goals with the work TAILS wants
to do on
the "TAILS server edition" [1].

I would be very interested in having feedback on this topic to manage to
properly
set the scope of the tasks to be done during GSoC.

maker is interested in working on this project and we have been
discussing it
with him in the past days.

- Art.


[1] tails.boum.org/todo/server_edition/



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120325050255</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-03-25 05:02:55-0400</timestampReceived><subject>[tor-dev] Missing methodname in proposal 180 example</subject><body>

I found a little typo in proposal 180.

David Fifield

["0001-Add-missing-methodname-in-SMETHOD-ERROR-example.patch" (text/x-diff)]

From 2898d5aa5ea72541b8a758ebde15086ae92c2d80 Mon Sep 17 00:00:00 2001
From: David Fifield &lt;david@bamsoftware.com&gt;
Date: Sat, 24 Mar 2012 22:00:53 -0700
Subject: [PATCH] Add missing methodname in SMETHOD-ERROR example.

---
 proposals/180-pluggable-transport.txt |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/proposals/180-pluggable-transport.txt b/proposals/180-pluggable-transport.txt
index eb180dc..307b820 100644
--- a/proposals/180-pluggable-transport.txt
+++ b/proposals/180-pluggable-transport.txt
@@ -383,7 +383,7 @@ Managed proxy interface
   proxy should say:
     SMETHOD-ERROR &lt;methodname&gt; &lt;errormessage&gt;
   as in
-    SMETHOD-ERROR could not setup 'trebuchet' method
+    SMETHOD-ERROR trebuchet could not setup 'trebuchet' method
 
   The 'address:port' part of an SMETHOD line is the address to put
   in the bridge line.  The Options part is a list of space-separated
-- 
1.7.9.1



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120320153321</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-20 15:33:21-0400</timestampReceived><subject>[tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

Filename: 198-restore-clienthello-semantics.txt
Title: Restore semantics of TLS ClientHello
Author: Nick Mathewson
Created: 19-Mar-2012
Status: Open

Overview:

   Currently, all supported Tor versions try to imitate an older version
   of Firefox when advertising ciphers in their TLS ClientHello.  This
   feature is intended to make it harder for a censor to distinguish a
   Tor client from other TLS traffic.  Unfortunately, it makes the
   contents of the ClientHello unreliable: a server cannot conclude that
   a cipher is really supported by a Tor client simply because it is
   advertised in the ClientHello.

   This proposal suggests an approach for restoring sanity to our use of
   ClientHello, so that we still avoid ciphersuite-based fingerprinting,
   but allow nodes to negotiate better ciphersuites than they are
   allowed to negotiate today.

Background reading:

   Section 2 of tor-spec.txt 2 describes our current baroque link
   negotiation scheme.  Proposals 176 and 184 describe more information
   about how it got that way.

   Bug 4744 is a big part of the motivation for this proposal: we want
   to allow Tors to advertise even more ciphers, some of which we would
   actually prefer to the ones we are using now.

   What you need to know about the TLS handshake is that the client
   sends a list of all the ciphersuites that it supports in its
   ClientHello message, and then the server chooses one and tells the
   client which one it picked.

Motivation and constraints:

   We'd like to use some of the ECDHE TLS ciphersuites, since they allow
   us to get better forward-secrecy at lower cost than our current
   DH-1024 usage.  But right now, we can't ever use them, since Tor will
   advertise them whether or not it has a version of OpenSSL that
   supports them.

   (OpenSSL before 1.0.0 did not support ECDHE ciphersuites; OpenSSL
   before 1.0.0e or so had some security issues with them.)

   We cannot have the rule be "Tors must only advertise ciphersuites
   that they can use", since current Tors will advertise such
   ciphersuites anyway.

   We cannot have the rule be "Tors must support every ECDHE ciphersuite
   on the following list", since current Tors don't do all that, and
   since one prominent Linux distribution builds OpenSSL without ECC
   support because of patent/freedom fears.

   Fortunately, nearly every ciphersuite that we would like to advertise
   to imitate FF8 (see bug 4744) is currently supported by OpenSSL 1.0.0
   and later.  This enables the following proposal to work:

Proposed spec changes:

   I propose that the rules for handling ciphersuites at the server side
   become the following:

   If the ciphersuites in the ClientHello contains no ciphers other than
   the following[*], they indicate that the Tor v1 link protocol is in use.

     TLS_DHE_RSA_WITH_AES_256_CBC_SHA
     TLS_DHE_RSA_WITH_AES_128_CBC_SHA
     SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
     SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

   If the advertised ciphersuites in the ClientHello are _exactly_[*]
   the following, they indicate that the Tor v2+ link protocol is in
   use, AND that the ClientHello may have unsupported ciphers.  In this
   case, the server may choose DHE_RSA_WITH_AES_128_CBC_SHA  or
   DHE_RSA_WITH_AES_256_SHA, but may not choose any other cipher.

     TLS1_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
     TLS1_ECDHE_RSA_WITH_AES_256_CBC_SHA
     TLS1_DHE_RSA_WITH_AES_256_SHA
     TLS1_DHE_DSS_WITH_AES_256_SHA
     TLS1_ECDH_RSA_WITH_AES_256_CBC_SHA
     TLS1_ECDH_ECDSA_WITH_AES_256_CBC_SHA
     TLS1_RSA_WITH_AES_256_SHA
     TLS1_ECDHE_ECDSA_WITH_RC4_128_SHA
     TLS1_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
     TLS1_ECDHE_RSA_WITH_RC4_128_SHA
     TLS1_ECDHE_RSA_WITH_AES_128_CBC_SHA
     TLS1_DHE_RSA_WITH_AES_128_SHA
     TLS1_DHE_DSS_WITH_AES_128_SHA
     TLS1_ECDH_RSA_WITH_RC4_128_SHA
     TLS1_ECDH_RSA_WITH_AES_128_CBC_SHA
     TLS1_ECDH_ECDSA_WITH_RC4_128_SHA
     TLS1_ECDH_ECDSA_WITH_AES_128_CBC_SHA
     SSL3_RSA_RC4_128_MD5
     SSL3_RSA_RC4_128_SHA
     TLS1_RSA_WITH_AES_128_SHA
     TLS1_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
     TLS1_ECDHE_RSA_WITH_DES_192_CBC3_SHA
     SSL3_EDH_RSA_DES_192_CBC3_SHA
     SSL3_EDH_DSS_DES_192_CBC3_SHA
     TLS1_ECDH_RSA_WITH_DES_192_CBC3_SHA
     TLS1_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
     SSL3_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
     SSL3_RSA_DES_192_CBC3_SHA

  [*] The "extended renegotiation is supported" ciphersuite, 0x00ff, is
      not counted when checking the list of ciphersuites.

  Otherwise, the ClientHello has these semantics: The inclusion of any
  cipher supported by OpenSSL 1.0.0 means that the client supports it,
  with the exception of
      SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
  which is never supported. Clients MUST advertise support for at least one of
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA or TLS_DHE_RSA_WITH_AES_128_CBC_SHA.

  The server MUST choose a ciphersuite with ephemeral keys for forward
  secrecy; MUST NOT choose a weak or null ciphersuite; and SHOULD NOT
  choose any cipher other than AES or 3DES.

Discussion and consequences:


  Currently, OpenSSL 1.0.0 (in its default configuration) supports every
  cipher that we would need in order to give the same list as Firefox
  versions 8 through 11 give in their default configuration, with the
  exception of the FIPS ciphersuite above.  Therefore, we will be able
  to fake the new ciphersuite list correctly in all of our bundles that
  include OpenSSL, and on every version of Unix that keeps up-to-date.

  However, versions of Tor compiled to use older versions of OpenSSL, or
  versions of OpenSSL with some ciphersuites disabled, will no
  longer give the same ciphersuite lists as other versions of Tor.  On
  these platforms, Tor clients will no longer impersonate Firefox.
  Users who need to do so will have to download one of our bundles, or
  use a (non-system) OpenSSL.


  The proposed spec change above tries to future-proof ourselves by not
  declaring that we support every declared cipher, in case we someday
  need to handle a new Firefox version.  If a new Firefox version
  comes out that uses ciphers not supported by OpenSSL 1.0.0, we will
  need to define whether clients may advertise its ciphers without
  supporting them; but existing servers will continue working whether
  we decide yes or no.


  The restriction to "servers SHOULD only pick AES or 3DES" is meant to
  reflect our current behavior, not to represent a permanent refusal to
  support other ciphers.  We can revisit it later as appropriate, if for
  some bizarre reason Camellia or Seed or Aria becomes a better bet than
  AES.

Open questions:

  Should the client drop connections if the server chooses a bad
  cipher, or a suite without forward secrecy?

  Can we get OpenSSL to support the dubious FIPS suite excluded above,
  in order to remove a distinguishing opportunity?  It is not so simple
  as just editing the SSL_CIPHER list in s3_lib.c, since the nonstandard
  SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA cipher is (IIUC) defined to use the
  TLS1 KDF, while declaring itself to be an SSL cipher (!).

  Can we do anything to eventually allow the IE7+[**] cipher list as
  well?  IE does not support TLS_DHE_RSA_WITH_AES_{256,128}_SHA or
  SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, and so wouldn't work with current
  Tor servers, which _only_ support those.  It looks like the only
  forward-secure ciphersuites that IE7+ *does* support are ECDHE ones,
  and DHE+DSS ones.  So if we want this flexibility, we could mandate
  server-side ECDHE, or somehow get DHE+DSS support (which would play
  havoc with our current certificate generation code IIUC), or say that
  it is sometimes acceptable to have a non-forward-secure link
  protocol[***].  None of these answers seems like a great one.  Is one
  best?  Are there other options?

  [**] Actually, I think it's the Windows SChannel cipher list we
  should be looking at here.
  [***] If we did _that_, we'd want to specify that CREATE_FAST could
  never be used on a non-forward-secure link.  Even so, I don't like the
  implications of leaking cell types and circuit IDs to a future
  compromise.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321013033</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-03-21 01:30:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 03/20/2012 08:33 AM, Nick Mathewson wrote:
&gt; Filename: 198-restore-clienthello-semantics.txt
&gt; Title: Restore semantics of TLS ClientHello
&gt; Author: Nick Mathewson
&gt; Created: 19-Mar-2012
&gt; Status: Open
&gt; 

[ ... ]


&gt;   Currently, OpenSSL 1.0.0 (in its default configuration) supports every
&gt;   cipher that we would need in order to give the same list as Firefox
&gt;   versions 8 through 11 give in their default configuration, with the
&gt;   exception of the FIPS ciphersuite above.  Therefore, we will be able
&gt;   to fake the new ciphersuite list correctly in all of our bundles that
&gt;   include OpenSSL, and on every version of Unix that keeps up-to-date.
&gt; 
&gt;   However, versions of Tor compiled to use older versions of OpenSSL, or
&gt;   versions of OpenSSL with some ciphersuites disabled, will no
&gt;   longer give the same ciphersuite lists as other versions of Tor.  On
&gt;   these platforms, Tor clients will no longer impersonate Firefox.
&gt;   Users who need to do so will have to download one of our bundles, or
&gt;   use a (non-system) OpenSSL.
&gt; 

What platforms have this issue? It seems that our integration with
platforms is really heading in a bad direction. I'd like to figure out
how to not diverge entirely and if possible to fix or document the issues.

&gt; 
&gt; Open questions:
&gt; 
&gt;   Should the client drop connections if the server chooses a bad
&gt;   cipher, or a suite without forward secrecy?
&gt; 

I think so. Do we have any relays that do not currently support forward
secrecy?

&gt;   Can we get OpenSSL to support the dubious FIPS suite excluded above,
&gt;   in order to remove a distinguishing opportunity?  It is not so simple
&gt;   as just editing the SSL_CIPHER list in s3_lib.c, since the nonstandard
&gt;   SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA cipher is (IIUC) defined to use the
&gt;   TLS1 KDF, while declaring itself to be an SSL cipher (!).
&gt; 

Huh.

&gt;   Can we do anything to eventually allow the IE7+[**] cipher list as
&gt;   well?  IE does not support TLS_DHE_RSA_WITH_AES_{256,128}_SHA or
&gt;   SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, and so wouldn't work with current
&gt;   Tor servers, which _only_ support those.  It looks like the only
&gt;   forward-secure ciphersuites that IE7+ *does* support are ECDHE ones,
&gt;   and DHE+DSS ones.  So if we want this flexibility, we could mandate
&gt;   server-side ECDHE, or somehow get DHE+DSS support (which would play
&gt;   havoc with our current certificate generation code IIUC), or say that
&gt;   it is sometimes acceptable to have a non-forward-secure link
&gt;   protocol[***].  None of these answers seems like a great one.  Is one
&gt;   best?  Are there other options?
&gt; 

This sounds like a job for pluggable transports!

I think as long as the servers support as many ciphers as possible, we
can make simple pluggable transports that setup the cipher suites we
want to use - no?

&gt;   [**] Actually, I think it's the Windows SChannel cipher list we
&gt;   should be looking at here.

I think we need to come up with a list of fingerprints for a bunch of
clients, a bunch of servers and then try to match them.

&gt;   [***] If we did _that_, we'd want to specify that CREATE_FAST could
&gt;   never be used on a non-forward-secure link.  Even so, I don't like the
&gt;   implications of leaking cell types and circuit IDs to a future
&gt;   compromise.

Indeed.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321024841</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2012-03-21 02:48:41-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 20 March 2012 11:33, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 198-restore-clienthello-semantics.txt
&gt; Title: Restore semantics of TLS ClientHello
&gt; Author: Nick Mathewson
&gt; Created: 19-Mar-2012
&gt; Status: Open

I've not worked with TLS renegotiations before, but could Tor perform
a renegotiation after the initial handshake, and the renegotiation
ciphersuites are taken at face value?  Less performant, but also less
complicated?

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321030219</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-21 03:02:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On Tue, Mar 20, 2012 at 10:48 PM, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; On 20 March 2012 11:33, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; Filename: 198-restore-clienthello-semantics.txt
&gt;&gt; Title: Restore semantics of TLS ClientHello
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 19-Mar-2012
&gt;&gt; Status: Open
&gt;
&gt; I've not worked with TLS renegotiations before, but could Tor perform
&gt; a renegotiation after the initial handshake, and the renegotiation
&gt; ciphersuites are taken at face value? =A0Less performant, but also less
&gt; complicated?

We used to do that; see proposal 176 and surrounding discussion for an
explanation of why we stopped.

Briefly: TLS renegotiation is detectable as renegotiation on the wire
by anybody who cares to watch.  Renegotiating immediately after
connection makes us stand out more than we'd like to.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120323223105</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-03-23 22:31:05-0400</timestampReceived><subject>Re: [tor-dev] Implement JSONP interface for check.torproject.org</subject><body>

Resurrecting a thread from the grave!

&gt;&gt; I have made a patch to check.torproject.org to expose a JSONP interface
&gt;&gt; that would allow people to have the user check client side if (s)he is
&gt;&gt; using Tor.
&gt;&gt;
&gt;&gt; This would allow people to embed a badge on their website
&gt;&gt; (privacybadge.html) that congratulates the user of using Tor or warns
&gt;&gt; him of non Tor usage with a link to torproject.org.
&gt;&gt;
&gt;&gt; I can imagine privacy advocates having this deployed on their websites
&gt;&gt; or systems that engourage users to connect to them anonymously.
&gt;&gt;
&gt;&gt; Compared to what check.torproject.org does at the moment the risk does
&gt;&gt; not change, it is erogating exactly the same service, just making it
&gt;&gt; more useful and flexible.
&gt;&gt;
&gt;&gt; Basically what it does is check if the ip doing the connection is
&gt;&gt; connected through Tor. The web service will reply with a JSON encoded
&gt;&gt; array that can be loaded from the user and display in the browser a nice
&gt;&gt; looking badge.
&gt;&gt;

Since I noticed that check.tpo was removed from the front page I was
thinking it would be a good idea to bring back up the topic of migrating
check.torproject.org to a JSONP based system.

Such a system would also allow to have the "JSONP check nodes" distributed
across multiple machines (avoiding the single point of failure that check
currently is) and the client side software could be embedded inside of
TBB directly.

People could further promote the usage of Tor by placing an "Anonymity"
badge on their website.

A person wishing to setup such a node needs to simply install TorBel
and a python based web app that runs this JSONP system.

My threat model for this is very lax, so I don't see any purpose in
bad actors telling a client when he is not using Tor that he is using it.
If check.tpo tells the user is not using Tor it already means that TBB
failed, the purpose of it is just to provide visual feedback to the user
that all is did went well.

&gt;&gt; I still need to finish the styling of the badge to contain links to
&gt;&gt; torproject.org and generally make it cooler.
&gt;&gt;
&gt;&gt; Also, the check.torproject repo should be moved to svn.
&gt;&gt;
&gt; Isn't it already in svn? Shouldn't we move it to git?
&gt;
If check is moved to git and you think it is a good idea I can start
working on this.


- Art.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120323233411</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-23 23:34:11-0400</timestampReceived><subject>Re: [tor-dev] Implement JSONP interface for check.torproject.org</subject><body>

On 2012-03-23, Arturo Filastò &lt;art@baculo.org&gt; wrote:

&gt; Since I noticed that check.tpo was removed from the front page I was
&gt; thinking it would be a good idea to bring back up the topic of migrating
&gt; check.torproject.org to a JSONP based system.

JSONP gives the party which is expected to provide a piece of data the
ability to run arbitrary JavaScript code in the security context of
the website which requested the data.  The Tor Project should never
put itself in a position to have that level of control over other
parties' websites.


&gt; Such a system would also allow to have the "JSONP check nodes" distributed
&gt; across multiple machines (avoiding the single point of failure that check
&gt; currently is) and the client side software could be embedded inside of
&gt; TBB directly.
&gt;
&gt; People could further promote the usage of Tor by placing an "Anonymity"
&gt; badge on their website.
&gt;
&gt; A person wishing to setup such a node needs to simply install TorBel
&gt; and a python based web app that runs this JSONP system.
&gt;
&gt; My threat model for this is very lax, so I don't see any purpose in
&gt; bad actors telling a client when he is not using Tor that he is using it.
&gt; If check.tpo tells the user is not using Tor it already means that TBB
&gt; failed, the purpose of it is just to provide visual feedback to the user
&gt; that all is did went well.

check.torproject.org is the only service which can warn Tor users that
a security upgrade is available for the Tor Browser Bundle.

It is also accessed by every Tor Browser Bundle as the first page
shown after the user uses the ‘New Identity' Torbutton command; any
party which can impersonate check.torproject.org can plant
user-tracking cookies in every TBB user's browser.

check.torproject.org cannot ever be run by untrusted parties, and
cannot ever use a JSONP service provided by untrusted parties.


&gt; If check is moved to git and you think it is a good idea I can start
&gt; working on this.

It is a more horrible idea now than it was the first time you proposed
it.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120323235444</emailId><senderName>Arturo Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-03-23 23:54:44-0400</timestampReceived><subject>Re: [tor-dev] Implement JSONP interface for check.torproject.org</subject><body>

On 3/23/12 4:34 PM, Robert Ransom wrote:
&gt; On 2012-03-23, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt;
&gt;&gt; Since I noticed that check.tpo was removed from the front page I was
&gt;&gt; thinking it would be a good idea to bring back up the topic of migrating
&gt;&gt; check.torproject.org to a JSONP based system.
&gt; JSONP gives the party which is expected to provide a piece of data the
&gt; ability to run arbitrary JavaScript code in the security context of
&gt; the website which requested the data.  The Tor Project should never
&gt; put itself in a position to have that level of control over other
&gt; parties' websites.

If this is a concern, and I don't think it is since Tor Project
already has the ability to get users to run arbitrary code when
they first start their browser, it could be managed by having the
badge loaded on third party websites inside of an IFRAME.

This would mean that the execution of anything is relative to that
IFRAME.

An alternative to using the JSONP object would be to do a XHR with
"Access-Control-Allow-Origin: *". This is only supported since firefox
3.5, but I don't think it would be an issue for TBB.

A XHR does not lead to any code execution and all that the rogue node
can do is tell the client that he is not running Tor.

&gt;&gt; Such a system would also allow to have the "JSONP check nodes" distributed
&gt;&gt; across multiple machines (avoiding the single point of failure that check
&gt;&gt; currently is) and the client side software could be embedded inside of
&gt;&gt; TBB directly.
&gt;&gt;
&gt;&gt; People could further promote the usage of Tor by placing an "Anonymity"
&gt;&gt; badge on their website.
&gt;&gt;
&gt;&gt; A person wishing to setup such a node needs to simply install TorBel
&gt;&gt; and a python based web app that runs this JSONP system.
&gt;&gt;
&gt;&gt; My threat model for this is very lax, so I don't see any purpose in
&gt;&gt; bad actors telling a client when he is not using Tor that he is using it.
&gt;&gt; If check.tpo tells the user is not using Tor it already means that TBB
&gt;&gt; failed, the purpose of it is just to provide visual feedback to the user
&gt;&gt; that all is did went well.
&gt; check.torproject.org is the only service which can warn Tor users that
&gt; a security upgrade is available for the Tor Browser Bundle.

Good point. I had not considered this aspect. Though wouldn't this
be replaced by thandy in the future?

Are we sure the best way to inform users of updates is through
check.tpo?

&gt; It is also accessed by every Tor Browser Bundle as the first page
&gt; shown after the user uses the ‘New Identity' Torbutton command; any
&gt; party which can impersonate check.torproject.org can plant
&gt; user-tracking cookies in every TBB user's browser.

With the XHR solution this would not be an issue anymore.

&gt; check.torproject.org cannot ever be run by untrusted parties, and
&gt; cannot ever use a JSONP service provided by untrusted parties.
&gt;

I disagree. If we properly define what the threat model is
I am sure we can figure out a way to make a solution that fits
it.

The overall question is, currently check.tpo is a centralized
single point of failure. Can we do better? Is there a way to
run a distributed infrastructure of this kind?

&gt;&gt; If check is moved to git and you think it is a good idea I can start
&gt;&gt; working on this.
&gt; It is a more horrible idea now than it was the first time you proposed
&gt; it.
&gt;
Heh, I appreciate your comments, although you are often a bit rough
:P.


- Art.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120326215006</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-26 21:50:06-0400</timestampReceived><subject>Re: [tor-dev] Implement JSONP interface for check.torproject.org</subject><body>

On 2012-03-23, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt; On 3/23/12 4:34 PM, Robert Ransom wrote:
&gt;&gt; On 2012-03-23, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; Since I noticed that check.tpo was removed from the front page I was
&gt;&gt;&gt; thinking it would be a good idea to bring back up the topic of migrating
&gt;&gt;&gt; check.torproject.org to a JSONP based system.
&gt;&gt; JSONP gives the party which is expected to provide a piece of data the
&gt;&gt; ability to run arbitrary JavaScript code in the security context of
&gt;&gt; the website which requested the data.  The Tor Project should never
&gt;&gt; put itself in a position to have that level of control over other
&gt;&gt; parties' websites.
&gt;
&gt; If this is a concern, and I don't think it is since Tor Project
&gt; already has the ability to get users to run arbitrary code when
&gt; they first start their browser, it could be managed by having the
&gt; badge loaded on third party websites inside of an IFRAME.

Not everyone who would visit a website which displays this ‘badge'
will use Tor Browser Bundle.


&gt; This would mean that the execution of anything is relative to that
&gt; IFRAME.
&gt;
&gt; An alternative to using the JSONP object would be to do a XHR with
&gt; "Access-Control-Allow-Origin: *". This is only supported since firefox
&gt; 3.5, but I don't think it would be an issue for TBB.

The ‘badge' is intended to be seen by people who do not use Tor yet.


&gt; A XHR does not lead to any code execution and all that the rogue node
&gt; can do is tell the client that he is not running Tor.
&gt;
&gt;&gt;&gt; Such a system would also allow to have the "JSONP check nodes"
&gt;&gt;&gt; distributed
&gt;&gt;&gt; across multiple machines (avoiding the single point of failure that check
&gt;&gt;&gt; currently is) and the client side software could be embedded inside of
&gt;&gt;&gt; TBB directly.
&gt;&gt;&gt;
&gt;&gt;&gt; People could further promote the usage of Tor by placing an "Anonymity"
&gt;&gt;&gt; badge on their website.
&gt;&gt;&gt;
&gt;&gt;&gt; A person wishing to setup such a node needs to simply install TorBel
&gt;&gt;&gt; and a python based web app that runs this JSONP system.
&gt;&gt;&gt;
&gt;&gt;&gt; My threat model for this is very lax, so I don't see any purpose in
&gt;&gt;&gt; bad actors telling a client when he is not using Tor that he is using it.
&gt;&gt;&gt; If check.tpo tells the user is not using Tor it already means that TBB
&gt;&gt;&gt; failed, the purpose of it is just to provide visual feedback to the user
&gt;&gt;&gt; that all is did went well.
&gt;&gt; check.torproject.org is the only service which can warn Tor users that
&gt;&gt; a security upgrade is available for the Tor Browser Bundle.
&gt;
&gt; Good point. I had not considered this aspect. Though wouldn't this
&gt; be replaced by thandy in the future?

Feel free to split up the TBB build process and prepare its
configuration files to be automatically updated.

Then feel free to audit Thandy and, at the very least, make it stop
writing temporary files outside the TBB directory.

Then feel free to audit Python and PyInstaller and, at the very least,
make the Python interpreter stop trying to load and execute files in
the current directory which happen to have the same name as a Python
standard library module which the program the user is trying to run
needs to load.

I don't expect Python or any Python program to ever be safe to deploy.


&gt; Are we sure the best way to inform users of updates is through
&gt; check.tpo?

The only service which can issue a warning to users of currently
deployed versions of TBB is check.tpo, regardless of whether future
versions of TBB also rely on a different single point of failure.


&gt;&gt; It is also accessed by every Tor Browser Bundle as the first page
&gt;&gt; shown after the user uses the ‘New Identity' Torbutton command; any
&gt;&gt; party which can impersonate check.torproject.org can plant
&gt;&gt; user-tracking cookies in every TBB user's browser.
&gt;
&gt; With the XHR solution this would not be an issue anymore.
&gt;
&gt;&gt; check.torproject.org cannot ever be run by untrusted parties, and
&gt;&gt; cannot ever use a JSONP service provided by untrusted parties.
&gt;&gt;
&gt;
&gt; I disagree. If we properly define what the threat model is
&gt; I am sure we can figure out a way to make a solution that fits
&gt; it.

Oh, you want a threat model!

I don't have a complete threat model for check.tpo, but here are some
absolute requirements:

* An attacker MUST NOT be able to falsely tell someone who is not
connecting through Tor and who is not connecting from the same IP
address as a Tor exit node that he/she/it is connecting through Tor.
(Currently, a Chrome user's last hope of avoiding complete proxy
bypass is that Chrome will connect to check.tpo over IPv6 *directly*,
and be told either that he/she/it is not connecting through Tor or
that check.tpo is not working.)

* An attacker MUST NOT be able to trick users into downloading a
malicious update by placing a link to a malicious website on
check.tpo.

* An attacker MUST NOT be able to plant tracking cookies in a user's
TBB immediately after the user uses the ‘New Identity'
TorBrowserButton command.

* An attacker MUST NOT be able to scare or endanger a user by sending
malicious content to be displayed by the user's browser.  (Some
examples of content that would ‘scare' are text claiming that the
user's computer has a virus, text falsely claiming that Tor is unsafe
to use, advertisements or images or text crafted to look like
advertisements, and text claiming that the user has been identified
and traced by &lt;insert name of bogeyman here&gt; and will soon be
arrested.  Some examples of content that would ‘endanger' are text
claiming that the user's computer has a virus and the user should
download and run a particular program to remove it, images whose
possession are illegal in most jurisdictions, videos with audio
intended to draw attention to the user, videos with loud audio
intended to damage the user's audio hardware or the user, JavaScript
which flashes the screen rapidly in order to draw attention to the
user, and JavaScript which flashes the screen at 4 Hz in order to kill
vulnerable users.)  (Note that the malicious texts are far more likely
to be effective if they appear to originate from
check.torproject.org.)

Hmm.  I suddenly have an urge to turn off JavaScript and HTML 5
video/audio support in my browser.


&gt; The overall question is, currently check.tpo is a centralized
&gt; single point of failure. Can we do better? Is there a way to
&gt; run a distributed infrastructure of this kind?

Tor clients could intercept connection attempts for
http://check.torproject.org/ and handle them internally.  They cannot
do the same for HTTPS without horrible flaky scary hacks.

I thought there was a Trac ticket for that feature, but I can't find it now.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120321032017</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-21 03:20:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 2012-03-21, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; On 20 March 2012 11:33, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; Filename: 198-restore-clienthello-semantics.txt
&gt;&gt; Title: Restore semantics of TLS ClientHello
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 19-Mar-2012
&gt;&gt; Status: Open
&gt;
&gt; I've not worked with TLS renegotiations before, but could Tor perform
&gt; a renegotiation after the initial handshake, and the renegotiation
&gt; ciphersuites are taken at face value?  Less performant, but also less
&gt; complicated?

Tor just got rid of TLS renegotiation with the v3 link protocol.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321042311</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-21 04:23:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

Forgot to send this to tor-dev: ouch.  Sending now.

On Tue, Mar 20, 2012 at 9:30 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt; On 03/20/2012 08:33 AM, Nick Mathewson wrote:
&gt;&gt; Filename: 198-restore-clienthello-semantics.txt
&gt;&gt; Title: Restore semantics of TLS ClientHello
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 19-Mar-2012
&gt;&gt; Status: Open
&gt;&gt;
&gt;
&gt; [ ... ]
&gt;
&gt;
&gt;&gt;   Currently, OpenSSL 1.0.0 (in its default configuration) supports every
&gt;&gt;   cipher that we would need in order to give the same list as Firefox
&gt;&gt;   versions 8 through 11 give in their default configuration, with the
&gt;&gt;   exception of the FIPS ciphersuite above.  Therefore, we will be able
&gt;&gt;   to fake the new ciphersuite list correctly in all of our bundles that
&gt;&gt;   include OpenSSL, and on every version of Unix that keeps up-to-date.
&gt;&gt;
&gt;&gt;   However, versions of Tor compiled to use older versions of OpenSSL, or
&gt;&gt;   versions of OpenSSL with some ciphersuites disabled, will no
&gt;&gt;   longer give the same ciphersuite lists as other versions of Tor.  On
&gt;&gt;   these platforms, Tor clients will no longer impersonate Firefox.
&gt;&gt;   Users who need to do so will have to download one of our bundles, or
&gt;&gt;   use a (non-system) OpenSSL.
&gt;&gt;
&gt;
&gt; What platforms have this issue?

The ones that don't have OpenSSL 1.0.0, and the ones that turn off
some of the relevant ciphersuites in OpenSSL 1.0.0.

With time, the number of platforms that don't ship 1.0.0 or later will
fall.  Furthermore, we can support them just fine with a TBB that
includes OpenSSL.

To the best of my knowledge, Fedora is the only major OS that ships
OpenSSL and turns off any of the ciphersuites we care about, though
there could be more.  Last I heard, their legal department were
reviewing that decision.

&gt; It seems that our integration with
&gt; platforms is really heading in a bad direction. I'd like to figure out
&gt; how to not diverge entirely and if possible to fix or document the issues.

I don't know what you mean by "diverge" here -- do you mean that
different platforms may advertise different ciphers based on their
version of OpenSSL or whether their legal department fears ECC?  If
so, then all non-Tor OpenSSL applications running on those hosts
already leak this information.

But in any case, I think that the damage is self-healing (as people
upgrade to OpenSSL 1.0.0) and the alternative of being stuck on our
current ciphersuites forever is worse.

&gt;&gt; Open questions:
&gt;&gt;
&gt;&gt;   Should the client drop connections if the server chooses a bad
&gt;&gt;   cipher, or a suite without forward secrecy?
&gt;&gt;
&gt;
&gt; I think so. Do we have any relays that do not currently support forward
&gt; secrecy?

No.

The question is, what should a client do if the relay selects, say,
TLS_RSA_AES_128_CBC_SHA1 (ciphersuite name may not be exact).  If it
drops the connection immediately, that might be unusual behavior.
Some other behavior might be smarter: perhaps it should pause for a
while, then drop.  Or perhaps it should send a little junk data then
drop.  I'm not sure there, though.

[...]
&gt;&gt;   Can we do anything to eventually allow the IE7+[**] cipher list as
&gt;&gt;   well?  IE does not support TLS_DHE_RSA_WITH_AES_{256,128}_SHA or
&gt;&gt;   SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, and so wouldn't work with current
&gt;&gt;   Tor servers, which _only_ support those.  It looks like the only
&gt;&gt;   forward-secure ciphersuites that IE7+ *does* support are ECDHE ones,
&gt;&gt;   and DHE+DSS ones.  So if we want this flexibility, we could mandate
&gt;&gt;   server-side ECDHE, or somehow get DHE+DSS support (which would play
&gt;&gt;   havoc with our current certificate generation code IIUC), or say that
&gt;&gt;   it is sometimes acceptable to have a non-forward-secure link
&gt;&gt;   protocol[***].  None of these answers seems like a great one.  Is one
&gt;&gt;   best?  Are there other options?
&gt;&gt;
&gt;
&gt; This sounds like a job for pluggable transports!
&gt;
&gt; I think as long as the servers support as many ciphers as possible, we
&gt; can make simple pluggable transports that setup the cipher suites we
&gt; want to use - no?

Pluggable transports feel out-of-scope for this proposal.  But even if
they are, I don't see how they answer my question: Because (as a
given!) current servers do not support any of the forward-secure
ciphers on the IE7 list, if we want to impersonate IE7 or later, we
will be doing something that current servers cannot support.  Whether
this impersonation is done somehow as a plugin, or in Tor, it would
still be something we needed to coordinate with the servers in
question.

cheers,

--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321042343</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-21 04:23:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

Jacob sent me this message in reply to my last; sending to tor-dev
with permission.

On Tue, Mar 20, 2012 at 11:57 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wro=
te:
&gt; On 03/20/2012 08:14 PM, Nick Mathewson wrote:
&gt;&gt; On Tue, Mar 20, 2012 at 9:30 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; w=
rote:
&gt;&gt;&gt; On 03/20/2012 08:33 AM, Nick Mathewson wrote:
&gt;&gt;&gt;&gt; Filename: 198-restore-clienthello-semantics.txt
&gt;&gt;&gt;&gt; Title: Restore semantics of TLS ClientHello
&gt;&gt;&gt;&gt; Author: Nick Mathewson
&gt;&gt;&gt;&gt; Created: 19-Mar-2012
&gt;&gt;&gt;&gt; Status: Open
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; [ ... ]
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; =A0 Currently, OpenSSL 1.0.0 (in its default configuration) supports e=
very
&gt;&gt;&gt;&gt; =A0 cipher that we would need in order to give the same list as Firefox
&gt;&gt;&gt;&gt; =A0 versions 8 through 11 give in their default configuration, with the
&gt;&gt;&gt;&gt; =A0 exception of the FIPS ciphersuite above. =A0Therefore, we will be =
able
&gt;&gt;&gt;&gt; =A0 to fake the new ciphersuite list correctly in all of our bundles t=
hat
&gt;&gt;&gt;&gt; =A0 include OpenSSL, and on every version of Unix that keeps up-to-dat=
e.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; =A0 However, versions of Tor compiled to use older versions of OpenSSL=
, or
&gt;&gt;&gt;&gt; =A0 versions of OpenSSL with some ciphersuites disabled, will no
&gt;&gt;&gt;&gt; =A0 longer give the same ciphersuite lists as other versions of Tor. =
=A0On
&gt;&gt;&gt;&gt; =A0 these platforms, Tor clients will no longer impersonate Firefox.
&gt;&gt;&gt;&gt; =A0 Users who need to do so will have to download one of our bundles, =
or
&gt;&gt;&gt;&gt; =A0 use a (non-system) OpenSSL.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; What platforms have this issue?
&gt;&gt;
&gt;&gt; The ones that don't have OpenSSL 1.0.0, and the ones that turn off
&gt;&gt; some of the relevant ciphersuites in OpenSSL 1.0.0.
&gt;
&gt;
&gt; Sure, I understand the pre-OpenSSL 1.0.0 issue - I mostly wondered what
&gt; platforms don't support the relevant ciphersuites in their builds of
&gt; OpenSSL 1.0.0. We should either 0) file bug reports 1) offer packages
&gt; that fix the issue or 2) something else such as ignoring it and simply
&gt; tracking the issues.
&gt;
&gt;&gt;
&gt;&gt; With time, the number of platforms that don't ship 1.0.0 or later will
&gt;&gt; fall. =A0Furthermore, we can support them just fine with a TBB that
&gt;&gt; includes OpenSSL.
&gt;&gt;
&gt;
&gt; Sure. That makes sense. The main downside is that TBB is a UX nightmare.
&gt; It works OK for browsing and basically everything else becomes ten times
&gt; the nightmare.
&gt;
&gt;&gt; To the best of my knowledge, Fedora is the only major OS that ships
&gt;&gt; OpenSSL and turns off any of the ciphersuites we care about, though
&gt;&gt; there could be more. =A0Last I heard, their legal department were
&gt;&gt; reviewing that decision.
&gt;&gt;
&gt;
&gt; Ah ha. That sounds like a nightmare. Is there a bug report we can pile
&gt; on to request that they don't create a headache for everyone in the futur=
e?
&gt;
&gt;&gt;&gt; It seems that our integration with
&gt;&gt;&gt; platforms is really heading in a bad direction. I'd like to figure out
&gt;&gt;&gt; how to not diverge entirely and if possible to fix or document the issu=
es.
&gt;&gt;
&gt;&gt; I don't know what you mean by "diverge" here -- do you mean that
&gt;&gt; different platforms may advertise different ciphers based on their
&gt;&gt; version of OpenSSL or whether their legal department fears ECC? =A0If
&gt;&gt; so, then all non-Tor OpenSSL applications running on those hosts
&gt;&gt; already leak this information.
&gt;
&gt; I mean - Tor's cipher suite advertisement will be really wacky,
&gt; basically on a platform by platform basis, version by version basis.
&gt; What we expect to say about tor's fingerprint is less and less easy to
&gt; say concisely, or perhaps it's easy but has a few variants? It seems
&gt; like we'll have to track it more closely, perhaps by sniffing network
&gt; traces on a per OS basis?
&gt;&gt;
&gt;&gt; But in any case, I think that the damage is self-healing (as people
&gt;&gt; upgrade to OpenSSL 1.0.0) and the alternative of being stuck on our
&gt;&gt; current ciphersuites forever is worse.
&gt;&gt;
&gt;
&gt; Ok. That I find pretty convincing.
&gt;
&gt;&gt;&gt;&gt; Open questions:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; =A0 Should the client drop connections if the server chooses a bad
&gt;&gt;&gt;&gt; =A0 cipher, or a suite without forward secrecy?
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; I think so. Do we have any relays that do not currently support forward
&gt;&gt;&gt; secrecy?
&gt;&gt;
&gt;&gt; No.
&gt;&gt;
&gt;
&gt; Ok.
&gt;
&gt;&gt; The question is, what should a client do if the relay selects, say,
&gt;&gt; TLS_RSA_AES_128_CBC_SHA1 (ciphersuite name may not be exact). =A0If it
&gt;&gt; drops the connection immediately, that might be unusual behavior.
&gt;&gt; Some other behavior might be smarter: perhaps it should pause for a
&gt;&gt; while, then drop. =A0Or perhaps it should send a little junk data then
&gt;&gt; drop. =A0I'm not sure there, though.
&gt;
&gt; Ah. What does s_client do if that selected cipher is not supported? When
&gt; in doubt, I often just punt and do what s_client does...
&gt;
&gt;&gt;
&gt;&gt; [...]
&gt;&gt;&gt;&gt; =A0 Can we do anything to eventually allow the IE7+[**] cipher list as
&gt;&gt;&gt;&gt; =A0 well? =A0IE does not support TLS_DHE_RSA_WITH_AES_{256,128}_SHA or
&gt;&gt;&gt;&gt; =A0 SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, and so wouldn't work with curre=
nt
&gt;&gt;&gt;&gt; =A0 Tor servers, which _only_ support those. =A0It looks like the only
&gt;&gt;&gt;&gt; =A0 forward-secure ciphersuites that IE7+ *does* support are ECDHE one=
s,
&gt;&gt;&gt;&gt; =A0 and DHE+DSS ones. =A0So if we want this flexibility, we could mand=
ate
&gt;&gt;&gt;&gt; =A0 server-side ECDHE, or somehow get DHE+DSS support (which would play
&gt;&gt;&gt;&gt; =A0 havoc with our current certificate generation code IIUC), or say t=
hat
&gt;&gt;&gt;&gt; =A0 it is sometimes acceptable to have a non-forward-secure link
&gt;&gt;&gt;&gt; =A0 protocol[***]. =A0None of these answers seems like a great one. =
=A0Is one
&gt;&gt;&gt;&gt; =A0 best? =A0Are there other options?
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; This sounds like a job for pluggable transports!
&gt;&gt;&gt;
&gt;&gt;&gt; I think as long as the servers support as many ciphers as possible, we
&gt;&gt;&gt; can make simple pluggable transports that setup the cipher suites we
&gt;&gt;&gt; want to use - no?
&gt;&gt;
&gt;&gt; Pluggable transports feel out-of-scope for this proposal. =A0But even if
&gt;&gt; they are, I don't see how they answer my question: Because (as a
&gt;&gt; given!) current servers do not support any of the forward-secure
&gt;&gt; ciphers on the IE7 list, if we want to impersonate IE7 or later, we
&gt;&gt; will be doing something that current servers cannot support. =A0Whether
&gt;&gt; this impersonation is done somehow as a plugin, or in Tor, it would
&gt;&gt; still be something we needed to coordinate with the servers in
&gt;&gt; question.
&gt;&gt;
&gt;
&gt; My thought was as follows - we have a
&gt; pt_client{many-cipher-suites-support} that can be made to impersonate
&gt; many browsers, it can try to connect to either relays which it can thus
&gt; become Firefox without issue or to a bridge with this
&gt; pt_server{many-cipher-suites-support} support and so it can pretend to
&gt; be nearly anything. I probably should have made that suggestion more
&gt; explicit.
&gt;
&gt; But yes, I agree, unless we can make the servers support the required
&gt; ciphers, I think we're doomed. I didn't miss that, I was just trying to
&gt; suggest a hack whereby we can impersonate IE as a pluggable transport.
&gt;
&gt; I've wondered for a while about cipher suites, specifically, why can't
&gt; we just lie on the wire and then internally map ciphers as we like? For
&gt; example - our client sends ECDHE but our server understands this is us
&gt; trying as a client to impersonate IE and maps that to some other forward
&gt; secret cipher suite like TLS_DHE_RSA_WITH_AES_128_SHA? I'm sure it's a
&gt; TLS nightmare but, I guess it feels like we're heading there anyway...?
&gt;
&gt; (I'm sorry if this seems rambly, I've been pretty sick...)
&gt;
&gt; All the best,
&gt; Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321042427</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-21 04:24:27-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On Tue, Mar 20, 2012 at 11:57 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
[...]
&gt; Ah ha. That sounds like a nightmare. Is there a bug report we can pile
&gt; on to request that they don't create a headache for everyone in the future?

There is, but I don't currently see much point: their developers are
irritated, and know that other developers are irritated, and believe
that they can't take any actual action without word from their legal
department.

&gt;&gt;&gt; It seems that our integration with
&gt;&gt;&gt; platforms is really heading in a bad direction. I'd like to figure out
&gt;&gt;&gt; how to not diverge entirely and if possible to fix or document the issues.
&gt;&gt;
&gt;&gt; I don't know what you mean by "diverge" here -- do you mean that
&gt;&gt; different platforms may advertise different ciphers based on their
&gt;&gt; version of OpenSSL or whether their legal department fears ECC?  If
&gt;&gt; so, then all non-Tor OpenSSL applications running on those hosts
&gt;&gt; already leak this information.
&gt;
&gt; I mean - Tor's cipher suite advertisement will be really wacky,
&gt; basically on a platform by platform basis, version by version basis.
&gt; What we expect to say about tor's fingerprint is less and less easy to
&gt; say concisely, or perhaps it's easy but has a few variants? It seems
&gt; like we'll have to track it more closely, perhaps by sniffing network
&gt; traces on a per OS basis?

It should be fairly easy to notice what ciphers we are really
advertising, and warn when it isn't the list we want to advertise.

What we can expect to say about the fingerprint will be: "If you have
a default build of OpenSSL 1.0.0 or later, then you will look like
Firefox 8+ (modulo other issues not related to ciphersuites).  If you
have an ECC-disabled build of OpenSSL 1.0.0 or later, then you will
look like FF8+ with all the ECC turned off. (I am pretty sure that
Fedora does indeed turn off the ECC in the Firefox they ship.)
Otherwise, if you have a really weird OpenSSL build, or an older
version of OpenSSL, your fingerprint will be weird."

 [...]
&gt; My thought was as follows - we have a
&gt; pt_client{many-cipher-suites-support} that can be made to impersonate
&gt; many browsers, it can try to connect to either relays which it can thus
&gt; become Firefox without issue or to a bridge with this
&gt; pt_server{many-cipher-suites-support} support and so it can pretend to
&gt; be nearly anything. I probably should have made that suggestion more
&gt; explicit.
&gt;
&gt; But yes, I agree, unless we can make the servers support the required
&gt; ciphers, I think we're doomed. I didn't miss that, I was just trying to
&gt; suggest a hack whereby we can impersonate IE as a pluggable transport.
&gt;
&gt; I've wondered for a while about cipher suites, specifically, why can't
&gt; we just lie on the wire and then internally map ciphers as we like? For
&gt; example - our client sends ECDHE but our server understands this is us
&gt; trying as a client to impersonate IE and maps that to some other forward
&gt; secret cipher suite like TLS_DHE_RSA_WITH_AES_128_SHA? I'm sure it's a
&gt; TLS nightmare but, I guess it feels like we're heading there anyway...?

Actually, we are heading AWAY from the TLS nightmare. That's the point
of this proposal: to minimize our use of ClientHello ciphersuite
fakery, so that the TLS ciphersuite negotiation handshake can
eventually just work again.

The idea above wouldn't work in any straightforward way: It is easy to
tell a DHE handshake from an ECDHE handshake -- for example, by
looking at the group parameters, which are sent in the clear! -- so if
the server says that it picks one but then the server and the client
do another, that would be really easy to detect.

&gt; (I'm sorry if this seems rambly, I've been pretty sick...)

Hope you feel better soon!

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321044034</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-03-21 04:40:34-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 03/20/2012 09:08 PM, Nick Mathewson wrote:
&gt; On Tue, Mar 20, 2012 at 11:57 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt; [...]
&gt;&gt; Ah ha. That sounds like a nightmare. Is there a bug report we can pile
&gt;&gt; on to request that they don't create a headache for everyone in the future?
&gt; 
&gt; There is, but I don't currently see much point: their developers are
&gt; irritated, and know that other developers are irritated, and believe
&gt; that they can't take any actual action without word from their legal
&gt; department.
&gt; 

We can provide packages for users or a spec file for their users as an
alternative, I guess? I think generally we're already doing this by
providing the Tor Browser but all users with system tors are going to be
left out...

&gt;&gt;&gt;&gt; It seems that our integration with
&gt;&gt;&gt;&gt; platforms is really heading in a bad direction. I'd like to figure out
&gt;&gt;&gt;&gt; how to not diverge entirely and if possible to fix or document the issues.
&gt;&gt;&gt;
&gt;&gt;&gt; I don't know what you mean by "diverge" here -- do you mean that
&gt;&gt;&gt; different platforms may advertise different ciphers based on their
&gt;&gt;&gt; version of OpenSSL or whether their legal department fears ECC?  If
&gt;&gt;&gt; so, then all non-Tor OpenSSL applications running on those hosts
&gt;&gt;&gt; already leak this information.
&gt;&gt;
&gt;&gt; I mean - Tor's cipher suite advertisement will be really wacky,
&gt;&gt; basically on a platform by platform basis, version by version basis.
&gt;&gt; What we expect to say about tor's fingerprint is less and less easy to
&gt;&gt; say concisely, or perhaps it's easy but has a few variants? It seems
&gt;&gt; like we'll have to track it more closely, perhaps by sniffing network
&gt;&gt; traces on a per OS basis?
&gt; 
&gt; It should be fairly easy to notice what ciphers we are really
&gt; advertising, and warn when it isn't the list we want to advertise.
&gt; 

Sure, it's just a simple matter of programming. ;-)

&gt; What we can expect to say about the fingerprint will be: "If you have
&gt; a default build of OpenSSL 1.0.0 or later, then you will look like
&gt; Firefox 8+ (modulo other issues not related to ciphersuites).  If you
&gt; have an ECC-disabled build of OpenSSL 1.0.0 or later, then you will
&gt; look like FF8+ with all the ECC turned off. (I am pretty sure that
&gt; Fedora does indeed turn off the ECC in the Firefox they ship.)
&gt; Otherwise, if you have a really weird OpenSSL build, or an older
&gt; version of OpenSSL, your fingerprint will be weird."
&gt; 

I think that's a lot of stuff to say - we'll probably want to keep track
of our various fingerprints somewhere - a bug or the wiki, perhaps?

&gt;  [...]
&gt;&gt; My thought was as follows - we have a
&gt;&gt; pt_client{many-cipher-suites-support} that can be made to impersonate
&gt;&gt; many browsers, it can try to connect to either relays which it can thus
&gt;&gt; become Firefox without issue or to a bridge with this
&gt;&gt; pt_server{many-cipher-suites-support} support and so it can pretend to
&gt;&gt; be nearly anything. I probably should have made that suggestion more
&gt;&gt; explicit.
&gt;&gt;
&gt;&gt; But yes, I agree, unless we can make the servers support the required
&gt;&gt; ciphers, I think we're doomed. I didn't miss that, I was just trying to
&gt;&gt; suggest a hack whereby we can impersonate IE as a pluggable transport.
&gt;&gt;
&gt;&gt; I've wondered for a while about cipher suites, specifically, why can't
&gt;&gt; we just lie on the wire and then internally map ciphers as we like? For
&gt;&gt; example - our client sends ECDHE but our server understands this is us
&gt;&gt; trying as a client to impersonate IE and maps that to some other forward
&gt;&gt; secret cipher suite like TLS_DHE_RSA_WITH_AES_128_SHA? I'm sure it's a
&gt;&gt; TLS nightmare but, I guess it feels like we're heading there anyway...?
&gt; 
&gt; Actually, we are heading AWAY from the TLS nightmare. That's the point
&gt; of this proposal: to minimize our use of ClientHello ciphersuite
&gt; fakery, so that the TLS ciphersuite negotiation handshake can
&gt; eventually just work again.
&gt; 

Well, OK, I think I understand that. Sorta. I agree that it is a step in
the right direction but I do think it's a nightmare unless we have some
way to basically make tor perform uniformly without us tracking things.
Basically, we can impersonate a few browsers on the client side but the
relays limit our ability to impersonate properly. It seems like a lot of
stuff to keep track up, I already want a lookup table to know which
version of tor, which version of openssl, which platform, etc to know
what my handshake looks like and so on. It's not that complicated, it's
just complicated enough though...

&gt; The idea above wouldn't work in any straightforward way: It is easy to
&gt; tell a DHE handshake from an ECDHE handshake -- for example, by
&gt; looking at the group parameters, which are sent in the clear! -- so if
&gt; the server says that it picks one but then the server and the client
&gt; do another, that would be really easy to detect.

Ok, I admit, I had no idea that the group parameters were sent in the
clear - I agree, just hacking up the cipher suites isn't actually useful
in that case. Argh!

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326071716</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-26 07:17:16-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 2012-03-20, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 198-restore-clienthello-semantics.txt
&gt; Title: Restore semantics of TLS ClientHello
&gt; Author: Nick Mathewson
&gt; Created: 19-Mar-2012
&gt; Status: Open
&gt;
&gt; Overview:
&gt;
&gt;    Currently, all supported Tor versions try to imitate an older version
&gt;    of Firefox when advertising ciphers in their TLS ClientHello.  This
&gt;    feature is intended to make it harder for a censor to distinguish a
&gt;    Tor client from other TLS traffic.  Unfortunately, it makes the
&gt;    contents of the ClientHello unreliable: a server cannot conclude that
&gt;    a cipher is really supported by a Tor client simply because it is
&gt;    advertised in the ClientHello.
&gt;
&gt;    This proposal suggests an approach for restoring sanity to our use of
&gt;    ClientHello, so that we still avoid ciphersuite-based fingerprinting,
&gt;    but allow nodes to negotiate better ciphersuites than they are
&gt;    allowed to negotiate today.
&gt;
&gt; Background reading:
&gt;
&gt;    Section 2 of tor-spec.txt 2 describes our current baroque link
&gt;    negotiation scheme.  Proposals 176 and 184 describe more information
&gt;    about how it got that way.
&gt;
&gt;    Bug 4744 is a big part of the motivation for this proposal: we want
&gt;    to allow Tors to advertise even more ciphers, some of which we would
&gt;    actually prefer to the ones we are using now.
&gt;
&gt;    What you need to know about the TLS handshake is that the client
&gt;    sends a list of all the ciphersuites that it supports in its
&gt;    ClientHello message, and then the server chooses one and tells the
&gt;    client which one it picked.
&gt;
&gt; Motivation and constraints:
&gt;
&gt;    We'd like to use some of the ECDHE TLS ciphersuites, since they allow
&gt;    us to get better forward-secrecy at lower cost than our current
&gt;    DH-1024 usage.  But right now, we can't ever use them, since Tor will
&gt;    advertise them whether or not it has a version of OpenSSL that
&gt;    supports them.
&gt;
&gt;    (OpenSSL before 1.0.0 did not support ECDHE ciphersuites; OpenSSL
&gt;    before 1.0.0e or so had some security issues with them.)

Can Tor detect that it is running with a version of OpenSSL with those
security issues and refuse to support the broken ciphersuites?

&gt;
&gt;    We cannot have the rule be "Tors must only advertise ciphersuites
&gt;    that they can use", since current Tors will advertise such
&gt;    ciphersuites anyway.
&gt;
&gt;    We cannot have the rule be "Tors must support every ECDHE ciphersuite
&gt;    on the following list", since current Tors don't do all that, and
&gt;    since one prominent Linux distribution builds OpenSSL without ECC
&gt;    support because of patent/freedom fears.
&gt;
&gt;    Fortunately, nearly every ciphersuite that we would like to advertise
&gt;    to imitate FF8 (see bug 4744) is currently supported by OpenSSL 1.0.0
&gt;    and later.  This enables the following proposal to work:
&gt;
&gt; Proposed spec changes:
&gt;
&gt;    I propose that the rules for handling ciphersuites at the server side
&gt;    become the following:
&gt;
&gt;    If the ciphersuites in the ClientHello contains no ciphers other than
&gt;    the following[*], they indicate that the Tor v1 link protocol is in use.
&gt;
&gt;      TLS_DHE_RSA_WITH_AES_256_CBC_SHA
&gt;      TLS_DHE_RSA_WITH_AES_128_CBC_SHA
&gt;      SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
&gt;      SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA
&gt;
&gt;    If the advertised ciphersuites in the ClientHello are _exactly_[*]
&gt;    the following, they indicate that the Tor v2+ link protocol is in
&gt;    use, AND that the ClientHello may have unsupported ciphers.  In this
&gt;    case, the server may choose DHE_RSA_WITH_AES_128_CBC_SHA  or
&gt;    DHE_RSA_WITH_AES_256_SHA, but may not choose any other cipher.
&gt;
&gt;      TLS1_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
&gt;      TLS1_ECDHE_RSA_WITH_AES_256_CBC_SHA
&gt;      TLS1_DHE_RSA_WITH_AES_256_SHA
&gt;      TLS1_DHE_DSS_WITH_AES_256_SHA
&gt;      TLS1_ECDH_RSA_WITH_AES_256_CBC_SHA
&gt;      TLS1_ECDH_ECDSA_WITH_AES_256_CBC_SHA
&gt;      TLS1_RSA_WITH_AES_256_SHA
&gt;      TLS1_ECDHE_ECDSA_WITH_RC4_128_SHA
&gt;      TLS1_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
&gt;      TLS1_ECDHE_RSA_WITH_RC4_128_SHA
&gt;      TLS1_ECDHE_RSA_WITH_AES_128_CBC_SHA
&gt;      TLS1_DHE_RSA_WITH_AES_128_SHA
&gt;      TLS1_DHE_DSS_WITH_AES_128_SHA
&gt;      TLS1_ECDH_RSA_WITH_RC4_128_SHA
&gt;      TLS1_ECDH_RSA_WITH_AES_128_CBC_SHA
&gt;      TLS1_ECDH_ECDSA_WITH_RC4_128_SHA
&gt;      TLS1_ECDH_ECDSA_WITH_AES_128_CBC_SHA
&gt;      SSL3_RSA_RC4_128_MD5
&gt;      SSL3_RSA_RC4_128_SHA
&gt;      TLS1_RSA_WITH_AES_128_SHA
&gt;      TLS1_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
&gt;      TLS1_ECDHE_RSA_WITH_DES_192_CBC3_SHA
&gt;      SSL3_EDH_RSA_DES_192_CBC3_SHA
&gt;      SSL3_EDH_DSS_DES_192_CBC3_SHA
&gt;      TLS1_ECDH_RSA_WITH_DES_192_CBC3_SHA
&gt;      TLS1_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
&gt;      SSL3_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
&gt;      SSL3_RSA_DES_192_CBC3_SHA
&gt;
&gt;   [*] The "extended renegotiation is supported" ciphersuite, 0x00ff, is
&gt;       not counted when checking the list of ciphersuites.
&gt;
&gt;   Otherwise, the ClientHello has these semantics: The inclusion of any
&gt;   cipher supported by OpenSSL 1.0.0 means that the client supports it,
&gt;   with the exception of
&gt;       SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
&gt;   which is never supported. Clients MUST advertise support for at least one
&gt; of
&gt;   TLS_DHE_RSA_WITH_AES_256_CBC_SHA or TLS_DHE_RSA_WITH_AES_128_CBC_SHA.

I'm no longer comfortable with 128-bit symmetric keys.  An attacker
with many messages encrypted with a 128-bit symmetric cipher can
attempt a brute-force search on many messages at once, and is likely
to succeed in finding keys for some messages.  (See
http://cr.yp.to/papers.html#bruteforce .)

&gt;
&gt;   The server MUST choose a ciphersuite with ephemeral keys for forward
&gt;   secrecy; MUST NOT choose a weak or null ciphersuite; and SHOULD NOT
&gt;   choose any cipher other than AES or 3DES.
&gt;
&gt; Discussion and consequences:
&gt;
&gt;
&gt;   Currently, OpenSSL 1.0.0 (in its default configuration) supports every
&gt;   cipher that we would need in order to give the same list as Firefox
&gt;   versions 8 through 11 give in their default configuration, with the
&gt;   exception of the FIPS ciphersuite above.  Therefore, we will be able
&gt;   to fake the new ciphersuite list correctly in all of our bundles that
&gt;   include OpenSSL, and on every version of Unix that keeps up-to-date.
&gt;
&gt;   However, versions of Tor compiled to use older versions of OpenSSL, or
&gt;   versions of OpenSSL with some ciphersuites disabled, will no
&gt;   longer give the same ciphersuite lists as other versions of Tor.  On
&gt;   these platforms, Tor clients will no longer impersonate Firefox.
&gt;   Users who need to do so will have to download one of our bundles, or
&gt;   use a (non-system) OpenSSL.

s/(non-system)/non-system/

&gt;
&gt;
&gt;   The proposed spec change above tries to future-proof ourselves by not
&gt;   declaring that we support every declared cipher, in case we someday
&gt;   need to handle a new Firefox version.  If a new Firefox version
&gt;   comes out that uses ciphers not supported by OpenSSL 1.0.0, we will
&gt;   need to define whether clients may advertise its ciphers without
&gt;   supporting them; but existing servers will continue working whether
&gt;   we decide yes or no.

Why standardize on OpenSSL 1.0.0, rather than OpenSSL 1.0.1?

&gt;
&gt;
&gt;   The restriction to "servers SHOULD only pick AES or 3DES" is meant to
&gt;   reflect our current behavior, not to represent a permanent refusal to
&gt;   support other ciphers.  We can revisit it later as appropriate, if for
&gt;   some bizarre reason Camellia or Seed or Aria becomes a better bet than
&gt;   AES.
&gt;
&gt; Open questions:
&gt;
&gt;   Should the client drop connections if the server chooses a bad
&gt;   cipher, or a suite without forward secrecy?
&gt;
&gt;   Can we get OpenSSL to support the dubious FIPS suite excluded above,
&gt;   in order to remove a distinguishing opportunity?  It is not so simple
&gt;   as just editing the SSL_CIPHER list in s3_lib.c, since the nonstandard
&gt;   SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA cipher is (IIUC) defined to use the
&gt;   TLS1 KDF, while declaring itself to be an SSL cipher (!).

Would that FIPS ciphersuite provide forward secrecy?  If not, then
there is no point in having clients or servers implement it.

&gt;
&gt;   Can we do anything to eventually allow the IE7+[**] cipher list as
&gt;   well?  IE does not support TLS_DHE_RSA_WITH_AES_{256,128}_SHA or
&gt;   SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, and so wouldn't work with current
&gt;   Tor servers, which _only_ support those.  It looks like the only
&gt;   forward-secure ciphersuites that IE7+ *does* support are ECDHE ones,
&gt;   and DHE+DSS ones.  So if we want this flexibility, we could mandate
&gt;   server-side ECDHE, or somehow get DHE+DSS support (which would play
&gt;   havoc with our current certificate generation code IIUC), or say that
&gt;   it is sometimes acceptable to have a non-forward-secure link
&gt;   protocol[***].  None of these answers seems like a great one.  Is one
&gt;   best?  Are there other options?

The certificate-chain validation code and the v3 handshake protocol
would be a bigger issue with DSS or ECDSA ciphersuites.

&gt;
&gt;   [**] Actually, I think it's the Windows SChannel cipher list we
&gt;   should be looking at here.
&gt;   [***] If we did _that_, we'd want to specify that CREATE_FAST could
&gt;   never be used on a non-forward-secure link.  Even so, I don't like the
&gt;   implications of leaking cell types and circuit IDs to a future
&gt;   compromise.

A relay whose link protocol implementations can't provide forward
secrecy to its clients cannot be used as an entry guard -- it would be
overloaded with CREATE cells very quickly.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326142315</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-26 14:23:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On Mon, Mar 26, 2012 at 3:17 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wro=
te:
 [...]
&gt;&gt; =A0 =A0(OpenSSL before 1.0.0 did not support ECDHE ciphersuites; OpenSSL
&gt;&gt; =A0 =A0before 1.0.0e or so had some security issues with them.)
&gt;
&gt; Can Tor detect that it is running with a version of OpenSSL with those
&gt; security issues and refuse to support the broken ciphersuites?

We can detect if the version number is for a broken version, but I
don't know a good way to detect if the version number is old but the
issues are fixed (for example, if it's one of those Fedora versions
that lock the openssl version to something older so that they don't
run into spurious ABI incompatibility).

I need to find out more about what the security issues actually were:
when I took a quick look, the only one I was a problem with doing
multithreaded access to SSL data structures when using ECC.  That
wouldn't be a problem for us, but if there are other issues, we should
know about them.

 [...]
&gt;&gt; =A0 Otherwise, the ClientHello has these semantics: The inclusion of any
&gt;&gt; =A0 cipher supported by OpenSSL 1.0.0 means that the client supports it,
&gt;&gt; =A0 with the exception of
&gt;&gt; =A0 =A0 =A0 SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
&gt;&gt; =A0 which is never supported. Clients MUST advertise support for at leas=
t one
&gt;&gt; of
&gt;&gt; =A0 TLS_DHE_RSA_WITH_AES_256_CBC_SHA or TLS_DHE_RSA_WITH_AES_128_CBC_SHA.
&gt;
&gt; I'm no longer comfortable with 128-bit symmetric keys. =A0An attacker
&gt; with many messages encrypted with a 128-bit symmetric cipher can
&gt; attempt a brute-force search on many messages at once, and is likely
&gt; to succeed in finding keys for some messages. =A0(See
&gt; http://cr.yp.to/papers.html#bruteforce .)

Hm. We'd need to check whether all the servers today support an AES256
ciphersuite.  Also, wasn't there some dodgy issue in the AES256 key
schedule?  Or is that basically irrelevant?

 [...]
&gt;&gt; =A0 The proposed spec change above tries to future-proof ourselves by not
&gt;&gt; =A0 declaring that we support every declared cipher, in case we someday
&gt;&gt; =A0 need to handle a new Firefox version. =A0If a new Firefox version
&gt;&gt; =A0 comes out that uses ciphers not supported by OpenSSL 1.0.0, we will
&gt;&gt; =A0 need to define whether clients may advertise its ciphers without
&gt;&gt; =A0 supporting them; but existing servers will continue working whether
&gt;&gt; =A0 we decide yes or no.
&gt;
&gt; Why standardize on OpenSSL 1.0.0, rather than OpenSSL 1.0.1?

1.0.0 is good enough to get everything we need for ff8+.  Also, when I
wrote the document, 1.0.0 was pretty ubiquitous but 1.0.1 had only
been out for a few days.  We could do 1.0.1, I guess.

 [...]
&gt;&gt; =A0 Can we get OpenSSL to support the dubious FIPS suite excluded above,
&gt;&gt; =A0 in order to remove a distinguishing opportunity? =A0It is not so sim=
ple
&gt;&gt; =A0 as just editing the SSL_CIPHER list in s3_lib.c, since the nonstanda=
rd
&gt;&gt; =A0 SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA cipher is (IIUC) defined to use t=
he
&gt;&gt; =A0 TLS1 KDF, while declaring itself to be an SSL cipher (!).
&gt;
&gt; Would that FIPS ciphersuite provide forward secrecy? =A0If not, then
&gt; there is no point in having clients or servers implement it.

The idea would be that, so long as we advertise ciphers we can't
support, an MITM adversary could make a Tor detector by forging
ServerHello responses to choose the FIPS suite, and then seeing
whether the client can finish the handshake to the point where they
realize that the ServerHello was forged.

This is probably not the best MITM Tor-detection attack, but it might
be nice to stomp them as we find them.

[...]
&gt;&gt;
&gt;&gt; =A0 [**] Actually, I think it's the Windows SChannel cipher list we
&gt;&gt; =A0 should be looking at here.
&gt;&gt; =A0 [***] If we did _that_, we'd want to specify that CREATE_FAST could
&gt;&gt; =A0 never be used on a non-forward-secure link. =A0Even so, I don't like=
 the
&gt;&gt; =A0 implications of leaking cell types and circuit IDs to a future
&gt;&gt; =A0 compromise.
&gt;
&gt; A relay whose link protocol implementations can't provide forward
&gt; secrecy to its clients cannot be used as an entry guard -- it would be
&gt; overloaded with CREATE cells very quickly.

Why is that?  It shouldn't be facing more than 2x the number of create
cells that a relay faces, and with the ntor handshake, create cell
processing ought to get much faster.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312013244</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-12 01:32:44-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On 2012-03-11, The23rd Raccoon &lt;the.raccoon23@gmail.com&gt; wrote:

&gt; The crypto-tagger achieves amplification by being destructive to a
&gt; circuit if the tagged cell is not untagged by them at the exit of the
&gt; network, and also by being destructive when a non-tagged cell is
&gt; "untagged" on a circuit coming from a non-tagging entry. It transforms
&gt; all non-colluding entrances and exits into a "half-duplex global"
&gt; adversary that works for the tagger to ensure that all traffic that he
&gt; carries goes only through his colluding nodes.

I wonder what the 'bandwidth authorities' would think of exits that
close circuits which They don't control:
https://gitweb.torproject.org/torflow.git/blob/HEAD:/NetworkScanners/BwAuthority/README.spec.txt


&gt; Sounds like it's time to swap out AES-CTR in favor of a
&gt; self-authenticating cipher[9] amirite??. OCB mode, anyone?

OCB is patented, and also crap.  http://cr.yp.to/papers.html#pema is
the right way to get a MAC (see also
http://cr.yp.to/papers.html#poly1305 and
http://cr.yp.to/papers.html#aecycles).

But http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf and an
end-to-end MAC is more likely as a solution to the end-to-end tagging
attack, because (a) per-hop MACs would take up much more space in each
cell and disclose the length of a circuit to the exit node, and (b)
with per-hop MACs, if you can get a forgery accepted (which happens
with probability 2^(-n), where n is the number of bits in the MAC, for
any MAC that Tor could use), you know with probability 2^(-n) that the
next hop is the last one.

(This sucks, because polynomial-evaluation MACs are faster and more
fun than most hash functions that would be suitable for
BEAR/LION/LIONESS.)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312015449</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-03-12 01:54:49-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Sun, Mar 11, 2012 at 8:32 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 2012-03-11, The23rd Raccoon &lt;the.raccoon23@gmail.com&gt; wrote:
&gt;
&gt; But http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf and an
&gt; end-to-end MAC is more likely as a solution to the end-to-end tagging
&gt; attack, because (a) per-hop MACs would take up much more space in each
&gt; cell and disclose the length of a circuit to the exit node, and (b)
&gt; with per-hop MACs, if you can get a forgery accepted (which happens
&gt; with probability 2^(-n), where n is the number of bits in the MAC, for
&gt; any MAC that Tor could use), you know with probability 2^(-n) that the
&gt; next hop is the last one.
You are going to have to be careful and explain this to me. I get the
leaking the length of a circuit and position in the chain. But we use
length 3 circuits in the current client node all the time, and if you
weren't the start or the end, you are the middle. The forgery
acceptance probability for Poly1305 is 2^-128. Forgery is not going to
happen.

I also don't see what Bear/Lionness gets us. It does solve problems
with losing sync. It does so at a cost of determining when identical
ORs are sent, which happens a lot: think multiple http requests.
Losing semantic security is a Bad Thing. I'll freely admit there are
issues with incorporating a leak of circuit length into the protocol,
as well as possibly (depending on details of TLS) leaking what lengths
end where to a global adversary.

It's preeminently possible I am missing something.
&gt;
&gt; (This sucks, because polynomial-evaluation MACs are faster and more
&gt; fun than most hash functions that would be suitable for
&gt; BEAR/LION/LIONESS.)
I concur: we do need to keep an eye on performance. Saturate commodity
bandwidth with commodity hardware!
&gt;
&gt;
&gt; Robert Ransom
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
Sincerely,
Watson Ladd


-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither   Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120312034510</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-12 03:45:10-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt; On Sun, Mar 11, 2012 at 8:32 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:

&gt;&gt; But http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf and an
&gt;&gt; end-to-end MAC is more likely as a solution to the end-to-end tagging
&gt;&gt; attack, because (a) per-hop MACs would take up much more space in each
&gt;&gt; cell and disclose the length of a circuit to the exit node, and (b)
&gt;&gt; with per-hop MACs, if you can get a forgery accepted (which happens
&gt;&gt; with probability 2^(-n), where n is the number of bits in the MAC, for
&gt;&gt; any MAC that Tor could use), you know with probability 2^(-n) that the
&gt;&gt; next hop is the last one.
&gt; You are going to have to be careful and explain this to me. I get the
&gt; leaking the length of a circuit and position in the chain. But we use
&gt; length 3 circuits in the current client node all the time, and if you
&gt; weren't the start or the end, you are the middle. The forgery
&gt; acceptance probability for Poly1305 is 2^-128. Forgery is not going to
&gt; happen.

Non-truncated Poly1305 takes 16 bytes per relay, so it would eat up at
least 48 bytes per 512-byte cell, and more on 4-hop circuits (which
Tor clients do build fairly often) and hidden-service rendezvous
circuits.  Non-truncated Poly1305 is not going to happen.


&gt; I also don't see what Bear/Lionness gets us. It does solve problems
&gt; with losing sync. It does so at a cost of determining when identical
&gt; ORs are sent, which happens a lot: think multiple http requests.

What do you mean by "ORs"?

(The BEAR/LION key would likely be different for each cell that a
relay processes.)

&gt; Losing semantic security is a Bad Thing. I'll freely admit there are
&gt; issues with incorporating a leak of circuit length into the protocol,
&gt; as well as possibly (depending on details of TLS) leaking what lengths
&gt; end where to a global adversary.

An end-to-end MAC inside the BEAR/LION wrapper should provide all the
security properties we need (note that the MAC key would also need to
be different for each cell).


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312131807</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-03-12 13:18:07-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Sun, Mar 11, 2012 at 10:45 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt;&gt; On Sun, Mar 11, 2012 at 8:32 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;&gt; wrote:
&gt;
&gt;&gt;&gt; But http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf and an
&gt;&gt;&gt; end-to-end MAC is more likely as a solution to the end-to-end tagging
&gt;&gt;&gt; attack, because (a) per-hop MACs would take up much more space in each
&gt;&gt;&gt; cell and disclose the length of a circuit to the exit node, and (b)
&gt;&gt;&gt; with per-hop MACs, if you can get a forgery accepted (which happens
&gt;&gt;&gt; with probability 2^(-n), where n is the number of bits in the MAC, for
&gt;&gt;&gt; any MAC that Tor could use), you know with probability 2^(-n) that the
&gt;&gt;&gt; next hop is the last one.
&gt;&gt; You are going to have to be careful and explain this to me. I get the
&gt;&gt; leaking the length of a circuit and position in the chain. But we use
&gt;&gt; length 3 circuits in the current client node all the time, and if you
&gt;&gt; weren't the start or the end, you are the middle. The forgery
&gt;&gt; acceptance probability for Poly1305 is 2^-128. Forgery is not going to
&gt;&gt; happen.
&gt;
&gt; Non-truncated Poly1305 takes 16 bytes per relay, so it would eat up at
&gt; least 48 bytes per 512-byte cell, and more on 4-hop circuits (which
&gt; Tor clients do build fairly often) and hidden-service rendezvous
&gt; circuits.  Non-truncated Poly1305 is not going to happen.
&gt;
&gt;
&gt;&gt; I also don't see what Bear/Lionness gets us. It does solve problems
&gt;&gt; with losing sync. It does so at a cost of determining when identical
&gt;&gt; ORs are sent, which happens a lot: think multiple http requests.
&gt;
&gt; What do you mean by "ORs"?
I ment cells: brain glitch.
&gt;
&gt; (The BEAR/LION key would likely be different for each cell that a
&gt; relay processes.)
Different how: if we simply increment the key we still remain open to
replay attacks.
&gt;
&gt;&gt; Losing semantic security is a Bad Thing. I'll freely admit there are
&gt;&gt; issues with incorporating a leak of circuit length into the protocol,
&gt;&gt; as well as possibly (depending on details of TLS) leaking what lengths
&gt;&gt; end where to a global adversary.
&gt;
&gt; An end-to-end MAC inside the BEAR/LION wrapper should provide all the
&gt; security properties we need (note that the MAC key would also need to
&gt; be different for each cell).
So we need to include nonces with each cell, which we need to do anyway.
&gt;
&gt;
&gt; Robert Ransom
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120312140407</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-12 14:04:07-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt; On Sun, Mar 11, 2012 at 10:45 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:

&gt;&gt; (The BEAR/LION key would likely be different for each cell that a
&gt;&gt; relay processes.)
&gt; Different how: if we simply increment the key we still remain open to
&gt; replay attacks.

The paper proves that BEAR and LION are 'secure' if the two (three?)
parts of the key are 'independent'.  Choosing the subkeys
independently is too expensive for Tor, but the standard way to
generate 'indistinguishable-from-independent' secrets is to feed your
key to a stream cipher (also known as a 'keystream generator').
Incrementing that stream cipher's key after processing each cell would
indeed prevent replay attacks (unless the stream cipher is something
really horrible like RC4), but it's probably easier to just take the
next 2n (3n?) bytes of keystream.

&gt;&gt;&gt; Losing semantic security is a Bad Thing. I'll freely admit there are
&gt;&gt;&gt; issues with incorporating a leak of circuit length into the protocol,
&gt;&gt;&gt; as well as possibly (depending on details of TLS) leaking what lengths
&gt;&gt;&gt; end where to a global adversary.
&gt;&gt;
&gt;&gt; An end-to-end MAC inside the BEAR/LION wrapper should provide all the
&gt;&gt; security properties we need (note that the MAC key would also need to
&gt;&gt; be different for each cell).
&gt; So we need to include nonces with each cell, which we need to do anyway.

No -- each cell needs a different nonce.  Hopefully the nonce won't
need to be sent with every cell.

(End-to-end out-of-order delivery, non-reliable delivery, and
variable-sized relay cells are unlikely to happen soon, even after a
UDP-based link protocol is added to Tor, because they make end-to-end
tagging much easier.)


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312144018</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-03-12 14:40:18-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Mon, Mar 12, 2012 at 9:04 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt;&gt; On Sun, Mar 11, 2012 at 10:45 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;&gt; wrote:
&gt;
&gt;&gt;&gt; (The BEAR/LION key would likely be different for each cell that a
&gt;&gt;&gt; relay processes.)
&gt;&gt; Different how: if we simply increment the key we still remain open to
&gt;&gt; replay attacks.
&gt;
&gt; The paper proves that BEAR and LION are 'secure' if the two (three?)
&gt; parts of the key are 'independent'.  Choosing the subkeys
&gt; independently is too expensive for Tor, but the standard way to
&gt; generate 'indistinguishable-from-independent' secrets is to feed your
&gt; key to a stream cipher (also known as a 'keystream generator').
&gt; Incrementing that stream cipher's key after processing each cell would
&gt; indeed prevent replay attacks (unless the stream cipher is something
&gt; really horrible like RC4), but it's probably easier to just take the
&gt; next 2n (3n?) bytes of keystream.

As I understand the tagging attacks of our favorite scavenger they
repeat a cell, turning it and all following cells in a circuit into
gibberish. This causes the circuit to close. I don't understand how
changing keys after each cell affects this attack: we still get
gibberish when a cell is repeated, precisely because the key changes.
&gt;
&gt;&gt;&gt;&gt; Losing semantic security is a Bad Thing. I'll freely admit there are
&gt;&gt;&gt;&gt; issues with incorporating a leak of circuit length into the protocol,
&gt;&gt;&gt;&gt; as well as possibly (depending on details of TLS) leaking what lengths
&gt;&gt;&gt;&gt; end where to a global adversary.
&gt;&gt;&gt;
&gt;&gt;&gt; An end-to-end MAC inside the BEAR/LION wrapper should provide all the
&gt;&gt;&gt; security properties we need (note that the MAC key would also need to
&gt;&gt;&gt; be different for each cell).
&gt;&gt; So we need to include nonces with each cell, which we need to do anyway.
&gt;
&gt; No -- each cell needs a different nonce.  Hopefully the nonce won't
&gt; need to be sent with every cell.
We can of course not send the nonce with each cell, incrementing on
successful arrival.
But why does the MAC key need to be different for each cell? MACs take
nonces to prevent replay attacks.
Anyway, you probably have something much more final figured out, which
I should wait to poke holes in when you propose it.
&gt;
Sincerely,
Watson Ladd


-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120312165520</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-12 16:55:20-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt; On Mon, Mar 12, 2012 at 9:04 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;&gt; On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt;&gt;&gt; On Sun, Mar 11, 2012 at 10:45 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt;&gt;&gt; wrote:
&gt;&gt;
&gt;&gt;&gt;&gt; (The BEAR/LION key would likely be different for each cell that a
&gt;&gt;&gt;&gt; relay processes.)
&gt;&gt;&gt; Different how: if we simply increment the key we still remain open to
&gt;&gt;&gt; replay attacks.
&gt;&gt;
&gt;&gt; The paper proves that BEAR and LION are 'secure' if the two (three?)
&gt;&gt; parts of the key are 'independent'.  Choosing the subkeys
&gt;&gt; independently is too expensive for Tor, but the standard way to
&gt;&gt; generate 'indistinguishable-from-independent' secrets is to feed your
&gt;&gt; key to a stream cipher (also known as a 'keystream generator').
&gt;&gt; Incrementing that stream cipher's key after processing each cell would
&gt;&gt; indeed prevent replay attacks (unless the stream cipher is something
&gt;&gt; really horrible like RC4), but it's probably easier to just take the
&gt;&gt; next 2n (3n?) bytes of keystream.
&gt;
&gt; As I understand the tagging attacks of our favorite scavenger they
&gt; repeat a cell, turning it and all following cells in a circuit into
&gt; gibberish. This causes the circuit to close. I don't understand how
&gt; changing keys after each cell affects this attack: we still get
&gt; gibberish when a cell is repeated, precisely because the key changes.

No, They tag a cell by changing a few bits of it.  Because Tor uses
AES128-CTR alone for its relay protocol, the cell reaches the other
end of the circuit with that bitwise difference intact; an honest
relay would reject and ignore the cell (thus causing all further cells
on the circuit to fall into the bitbucket with it -- see tor-spec.txt
section 6.1), but a malicious relay can recognize and remove the tag.


&gt;&gt;&gt;&gt;&gt; Losing semantic security is a Bad Thing. I'll freely admit there are
&gt;&gt;&gt;&gt;&gt; issues with incorporating a leak of circuit length into the protocol,
&gt;&gt;&gt;&gt;&gt; as well as possibly (depending on details of TLS) leaking what lengths
&gt;&gt;&gt;&gt;&gt; end where to a global adversary.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; An end-to-end MAC inside the BEAR/LION wrapper should provide all the
&gt;&gt;&gt;&gt; security properties we need (note that the MAC key would also need to
&gt;&gt;&gt;&gt; be different for each cell).
&gt;&gt;&gt; So we need to include nonces with each cell, which we need to do anyway.
&gt;&gt;
&gt;&gt; No -- each cell needs a different nonce.  Hopefully the nonce won't
&gt;&gt; need to be sent with every cell.
&gt; We can of course not send the nonce with each cell, incrementing on
&gt; successful arrival.
&gt; But why does the MAC key need to be different for each cell? MACs take
&gt; nonces to prevent replay attacks.

For the same reasons that DJB switched to generating a new Poly1305
key (i.e. a new pair (r, s)) for each secretbox operation, rather than
taking the trouble to keep one secret r around and generate a new s by
applying a secret PRF to a non-secret nonce (as Poly1305-AES did):

* Generating and using 32 extra bytes of stream-cipher output with the
message's nonce is cheaper than generating and using 16 bytes of
stream-cipher output with a fixed nonce (for r), then generating and
using 16 extra bytes of stream-cipher output with the message's nonce
(for s), with a typical good stream cipher like Salsa20.

* If an attacker obtains mathematically useful information about r,
the attacker can modify every message which uses that same value of r.
 This becomes much less problematic when each r is used for only one
message (more precisely, when the attacker cannot use information
about the value of r used for one message to obtain information about
the value of r used for any other message).


&gt; Anyway, you probably have something much more final figured out, which
&gt; I should wait to poke holes in when you propose it.

It's not final yet.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312173022</emailId><senderName>unknown</senderName><senderEmail>unknown@pgpru.com</senderEmail><timestampReceived>2012-03-12 17:30:22-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Mon, 12 Mar 2012 09:40:18 -0500
Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:

&gt; On Mon, Mar 12, 2012 at 9:04 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; &gt; On 2012-03-12, Watson Ladd &lt;watsonbladd@gmail.com&gt; wrote:
&gt; &gt;&gt; On Sun, Mar 11, 2012 at 10:45 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; &gt;&gt; wrote:
&gt; &gt;
&gt; &gt;&gt;&gt; (The BEAR/LION key would likely be different for each cell that a
&gt; &gt;&gt;&gt; relay processes.)
&gt; &gt;&gt; Different how: if we simply increment the key we still remain open to
&gt; &gt;&gt; replay attacks.
&gt; &gt;
&gt; &gt; The paper proves that BEAR and LION are 'secure' if the two (three?)
&gt; &gt; parts of the key are 'independent'.   Choosing the subkeys
&gt; &gt; independently is too expensive for Tor, but the standard way to
&gt; &gt; generate 'indistinguishable-from-independent' secrets is to feed your
&gt; &gt; key to a stream cipher (also known as a 'keystream generator').

The most adequate solution described in: 

"Duplexing the sponge: single-pass authenticated encryption and other applications"
Guido Bertoni, Joan Daemen, MichaÃƒ «l Peeters, and Gilles Van Assche

http://csrc.nist.gov/groups/ST/hash/sha-3/Round2/Aug2010/documents/papers/DAEMEN_DuplexSponge.pdf

This is a SHA-3 workshop finalist Keccak, a universal cryptoprimitive (not only hash)
in special duplexing mode: stream encryption and authentication in one pass.

I hope NIST and cryptocommunity choose it as a new standard.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120312173835</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-12 17:38:35-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt; On 2012-03-11, The23rd Raccoon &lt;the.raccoon23@gmail.com&gt; wrote:
&gt; 
&gt; &gt; The crypto-tagger achieves amplification by being destructive to a
&gt; &gt; circuit if the tagged cell is not untagged by them at the exit of the
&gt; &gt; network, and also by being destructive when a non-tagged cell is
&gt; &gt; "untagged" on a circuit coming from a non-tagging entry. It transforms
&gt; &gt; all non-colluding entrances and exits into a "half-duplex global"
&gt; &gt; adversary that works for the tagger to ensure that all traffic that he
&gt; &gt; carries goes only through his colluding nodes.
&gt;
&gt; I wonder what the 'bandwidth authorities' would think of exits that
&gt; close circuits which They don't control:
&gt; https://gitweb.torproject.org/torflow.git/blob/HEAD:/NetworkScanners/BwAuthority/README.spec.txt

I've been worried about various types of path biasing/circuit failure
attacks for a while, but sadly the the bandwidth authorities are not
something that can be relied upon as the only thing to defend against
them. The bandwidth authorities are not a security measure. It is
possible to deceive them.

The only way for measurements to be resilient to deception is to deploy
decentralized measurement such as Eigenspeed, but Eigenspeed's passive
measurements are unable to properly measure high bandwidth relays, so 
someone needs to research decentralized active measurement and/or
a hybrid solution of Eigenspeed and the bandwidth authorities, and
figure out how to blend in circuit failure into the measurements, too.

I believe Nikita's group was the first to publish about path biasing in
Tor through circuit failure
(http://research.microsoft.com/~gdane/papers/ccs0255-borisov.pdf), and
is also the source of the EigenSpeed work. I prod him every once and a
while to try out his Eigenspeed as a defense against his path biasing
attack, but haven't heard much about it.


That said, the bandwidth authorities will actually compensate for this
attack if the bwauthcircs=1 consensus parameter is set. Right now, the
parameter is not set, because it is part of the PID feedback experiment
that is currently disabled. Circuit failure statistics are still being
recorded for posterity though. There are some high capacity relays
exhibiting high rates of circuit failure right now, but that could also
be CPU overload.

I can turn the bwauthcircs=1 parameter back on independent of the PID
feedback and see what happens, but if we could solve this with crypto,
that would be better I think.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120313024311</emailId><senderName>The23rd Raccoon</senderName><senderEmail>the.raccoon23@gmail.com</senderEmail><timestampReceived>2012-03-13 02:43:11-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

On Mon, Mar 12, 2012 at 5:38 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):
&gt;
&gt;&gt; On 2012-03-11, The23rd Raccoon &lt;the.raccoon23@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; &gt; The crypto-tagger achieves amplification by being destructive to a
&gt;&gt; &gt; circuit if the tagged cell is not untagged by them at the exit of the
&gt;&gt; &gt; network, and also by being destructive when a non-tagged cell is
&gt;&gt; &gt; "untagged" on a circuit coming from a non-tagging entry. It transforms
&gt;&gt; &gt; all non-colluding entrances and exits into a "half-duplex global"
&gt;&gt; &gt; adversary that works for the tagger to ensure that all traffic that he
&gt;&gt; &gt; carries goes only through his colluding nodes.
&gt;&gt;
&gt;&gt; I wonder what the 'bandwidth authorities' would think of exits that
&gt;&gt; close circuits which They don't control:
&gt;&gt; https://gitweb.torproject.org/torflow.git/blob/HEAD:/NetworkScanners/BwAuthority/README.spec.txt
&gt;
&gt; I've been worried about various types of path biasing/circuit failure
&gt; attacks for a while

Sorry, but path biasing is also a different class of attack than tagging.

&gt; That said, the bandwidth authorities will actually compensate for this
&gt; attack if the bwauthcircs=1 consensus parameter is set. Right now, the
&gt; parameter is not set, because it is part of the PID feedback experiment
&gt; that is currently disabled. Circuit failure statistics are still being
&gt; recorded for posterity though. There are some high capacity relays
&gt; exhibiting high rates of circuit failure right now, but that could also
&gt; be CPU overload.

Here, let me help you out by scrawling some ascii-art drawings to
calculate what constitutes excessive amounts of circuit failure. In
the path biasing attack, we've got three nodes. Let's call the nodes
A, B, and C. I'll label the links to the nodes 0, 1 and 2. Let's
assume as usual that the adversary controls c/n of path selection. The
&lt; symbols indicate a node choice opportunity on the part of clients.

--- 0&lt; --- A --- 1&lt; --- B ---- 2&lt; ---- C -------

Each point 0, 1, and 2 is a point where the adversary can alter your
path choice. Let's just assume 0 is a safe route for now, and does not
bias node selection.

If node A (or node A's ISP) is biasing choice of B on link 1, node A
must fail 1 - c/n of the circuits that go through it in order to
ensure that B is chosen from colluding nodes. It can only allow c/n of
the circuits to get through to B (since B is represented by any of the
adversary's c/n nodes).

Similarly, node B must fail an additional 1 - c/n of the circuits that
attempt to extend through it. It too, can only allow c/n of the
circuits to get through to C.

That means that the adversary has to fail 1 - (c/n)^2 of client
circuits that attempt to use node A, and it's middle nodes B must fail
1 - c/n of clients circuits to ensure colluding node C is chosen. So
node A has to fail a lot of circuits. Even for a c/n = 20% adversary,
node A has to fail 96% of all circuits that attempt to use it.

However, in tagging, the adversary has a direct communication channel
to node C via the tag.

----0&lt; ---  A ---- 1&lt; ---- C -----

In this case (ignoring link 0), the adversary only has to close c/n of
the circuits that attempt to use it, giving a total circuit failure
rate of just 1 - c/n. For an adversary that controls 20% of the
network, this means failing 80% of the circuits that attempt to use
node A.

So, if you have a way to measure circuit failure reliably, you can in
fact detect the tagging attack, up to a point. It will be
significantly easier to detect full 3-hop path bias than 2. It would
be a good idea to solve tagging for this reason.

&gt; I can turn the bwauthcircs=1 parameter back on independent of the PID
&gt; feedback and see what happens, but if we could solve this with crypto,
&gt; that would be better I think.

Is this even possible without revising the circuit level protocol? We
looked through the spec and didn't see anything that allows the
network to migrate to alternate cipher choices easily..

How quickly can the migration be done?

Otherwise, I suggest everybody start keeping track of their circuit
failure rates though major nodes....
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120318135135</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 13:51:35-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

On 3/18/12 2:42 PM, Linas Valiukas wrote:
&gt; Hello, 
&gt; 
&gt; I was thinking about a GSoC 2012 project I could propose, and I came to the \
&gt; question of why there's no Tor iOS (iPhone / iPad / iPod touch) application \
&gt; distributed on the official iTunes App Store? 
&gt; There's this "test package" of Tor for iOS available [1], but it has to be \
&gt; installed via Cydia and not everyone's phone is jailbroken. Distributing an \
&gt; application via the App Store has some benefits of its own too (additional \
&gt; marketing and visibility, easier installation, to name a few). 
&gt; So, what is the problem?
&gt; 
&gt; * Would it comply with the iOS Developer Program License Agreement? I'm no lawyer, \
&gt; but last I read the document there's nothing in it that would prevent distributing \
&gt; an app which would create a "local" HTTP proxy to be used by the other \
&gt; applications. 
&gt; * Since the iPhone 3GS, the applications can retain running in the background, so I \
&gt; guess we're fine on the purely technical side too. 
&gt; * There are US Export laws that require a so-called CCATS review and approval to be \
&gt; done with each application that employs strong encryption. I don't think that's a \
&gt; blocker though. 
&gt; * Maybe that Tor iOS application wouldn't reach various "interesting" markets such \
&gt; as PRC (for example, a commercial yet pricy "Covert Browser" [2] is not available \
&gt; in China's App Store) because of the legal restrictions. Still, I would argue that \
&gt; it is worth having such an application.

It would add that it would be interesting to provide Tor integration to
all iPhone iOS applications.

While this could not be done by operating a SOCKS server locally because
iPhone doesn't support to configure a Socks Server for iOS sockets.

But iPhone let configure VPN using PPTP and L2TP protocol.

Why not running within a Tor for iPhone also a local PPTP or L2TP daemon
that's hooked to "SOCKSIFY" all connections of the Phone via Tor?

A sort of PPTP-to-SOCKS-to-Tor integrated, to provide trasparent secure
browsing for iOS applications.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120318141712</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-03-18 14:17:12-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

[Attachment #2 (multipart/alternative)]


Afaik, there are no long running background processes available to run a standalone \
tor process. Covert Browser works because it is integrated in one app/process. Maybe \
the VPN service model would work though.

Otherwise, I agree something should be done, even if it is only an open-source \
version of Covert Browser. At Guardian Project, we have plenty of iOS experience but \
we just loath having to pay Apple $99 a year to have the privilege of developing with \
their closed source IDE only on MacOS.

One should also look at why VLC is not in the app store - there was a conflict with \
GPL I believe.

+n

"Fabio Pietrosanti (naif)" &lt;lists@infosecurity.ch&gt; wrote:

On 3/18/12 2:42 PM, Linas Valiukas wrote:
&gt; Hello, 
&gt; 
&gt; I was thinking about a GSoC 2012 project I could propose, and I came to the \
&gt; question of why there's no Tor iOS (iPhone / iPad / iPod touch) application \
&gt; distributed on the official iTunes App Store? 
&gt; There's this "test package" of Tor for iOS available [1], but it has to be \
&gt; installed via Cydia and not everyone's phone is jailbroken. Distributing an \
&gt; application via the App Store has some benefits of its own too (additional \
&gt; marketing and visibility, easier installation, to name a few). 
&gt; So, what is the problem?
&gt; 
&gt; * Would it comply with the iOS Developer Program License Agreement? I'm no lawyer, \
&gt; but last I read the document there's nothing in it that would prevent distributing \
&gt; an app which would create a "local" HTTP proxy to be used by the other \
&gt; applications. 
&gt; * Since the iPhone 3GS, the applications can retain running in the background, so I \
&gt; guess we're fine on the purely technical side too. 
&gt; * There are US Export laws that require a so-called CCATS review and approval to be \
&gt; done with each application that employs strong encryption. I don't think that's a \
&gt; blocker though. 
&gt; * Maybe that Tor iOS application wouldn't reach various "interesting" markets such \
&gt; as PRC (for example, a commercial yet pricy "Covert Browser" [2] is not available \
&gt; in China's App Store) because of the legal restrictions. Still, I would argue that \
&gt; it is worth having such an application.

It would add that it would be interesting to provide Tor integration to
all iPhone iOS applications.

While this could not be done by operating a SOCKS server locally because
iPhone doesn't support to configure a Socks Server for iOS sockets.

But iPhone let configure VPN using PPTP and L2TP protocol.

Why not running within a Tor for iPhone also a local PPTP or L2TP daemon
that's hooked to "SOCKSIFY" all connections of the Phone via Tor?

A sort of PPTP-to-SOCKS-to-Tor integrated, to provide trasparent secure
browsing for iOS applications.

-naif
_____________________________________________

tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Afaik, there are no long running background processes \
available to run a standalone tor process. Covert Browser works because it is \
integrated in one app/process. Maybe the VPN service model would work though.&lt;br&gt; \
&lt;br&gt; Otherwise, I agree something should be done, even if it is only an open-source \
version of Covert Browser. At Guardian Project, we have plenty of iOS experience but \
we just loath having to pay Apple $99 a year to have the privilege of developing with \
their closed source IDE only on MacOS.&lt;br&gt; &lt;br&gt;
One should also look at why VLC is not in the app store - there was a conflict with \
GPL I believe.&lt;br&gt; &lt;br&gt;
+n&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;"Fabio Pietrosanti (naif)" \
&lt;lists@infosecurity.ch&gt; wrote:&lt;blockquote class="gmail_quote" style="margin: \
0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;"&gt; \
&lt;pre style="white-space: pre-wrap; word-wrap:break-word; font-family: sans-serif"&gt;On \
3/18/12 2:42 PM, Linas Valiukas wrote:&lt;br /&gt;&gt; Hello, &lt;br /&gt;&gt; &lt;br /&gt;&gt; I was \
thinking about a GSoC 2012 project I could propose, and I came to the question of why \
there's no Tor iOS (iPhone / iPad / iPod touch) application distributed on the \
official iTunes App Store?&lt;br /&gt;&gt; &lt;br /&gt;&gt; There's this "test package" of Tor \
for iOS available [1], but it has to be installed via Cydia and not everyone's phone \
is jailbroken. Distributing an application via the App Store has some benefits of its \
own too (additional marketing and visibility, easier installation, to name a few).&lt;br \
/&gt;&gt; &lt;br /&gt;&gt; So, what is the problem?&lt;br /&gt;&gt; &lt;br /&gt;&gt; * Would it comply \
with the iOS Developer Program License Agreement? I'm no lawyer, but last I read the \
document there's nothing in it that would prevent distributing an app which would \
create a "local" HTTP proxy to be used by the other applications.&lt;b  r
/&gt;&gt; &lt;br /&gt;&gt; * Since the iPhone 3GS, the applications can retain running in the \
background, so I guess we're fine on the purely technical side too.&lt;br /&gt;&gt; &lt;br \
/&gt;&gt; * There are US Export laws that require a so-called CCATS review and approval \
to be done with each application that employs strong encryption. I don't think that's \
a blocker though.&lt;br /&gt;&gt; &lt;br /&gt;&gt; * Maybe that Tor iOS application wouldn't \
reach various "interesting" markets such as PRC (for example, a commercial yet pricy \
"Covert Browser" [2] is not available in China's App Store) because of the legal \
restrictions. Still, I would argue that it is worth having such an application.&lt;br \
/&gt;&lt;br /&gt;It would add that it would be interesting to provide Tor integration to&lt;br \
/&gt;all iPhone iOS applications.&lt;br /&gt;&lt;br /&gt;While this could not be done by operating a \
SOCKS server locally because&lt;br /&gt;iPhone doesn't support to configure a Socks Server \
for iOS sockets.&lt;br /&gt;&lt;br /&gt;But iPhone let configure VPN using PPTP   and
L2TP protocol.&lt;br /&gt;&lt;br /&gt;Why not running within a Tor for iPhone also a local PPTP \
or L2TP daemon&lt;br /&gt;that's hooked to "SOCKSIFY" all connections of the Phone via \
Tor?&lt;br /&gt;&lt;br /&gt;A sort of PPTP-to-SOCKS-to-Tor integrated, to provide trasparent \
secure&lt;br /&gt;browsing for iOS applications.&lt;br /&gt;&lt;br /&gt;-naif&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;tor-dev \
mailing list&lt;br /&gt;tor-dev@lists.torproject.org&lt;br /&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
/&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120318153115</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 15:31:15-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

On 3/18/12 3:17 PM, Nathan Freitas wrote:
&gt; Afaik, there are no long running background processes available to run a
&gt; standalone tor process. Covert Browser works because it is integrated in
&gt; one app/process.

That's also another nice option, that generally would mean more hacking
on Tor to make it suitable/usable as a sort of "library" to let third
party application provider bundle it within their application.

If it would be possible for third party application developer to add
"anonymity" support to their application just by linking trough an
"anonymity library" and taking care of using "anonymous sockets", we
would see a lot of applications adding "anonymity" feature.

&gt; Maybe the VPN service model would work though.
&gt; 
&gt; Otherwise, I agree something should be done, even if it is only an
&gt; open-source version of Covert Browser. At Guardian Project, we have
&gt; plenty of iOS experience but we just loath having to pay Apple $99 a
&gt; year to have the privilege of developing with their closed source IDE
&gt; only on MacOS.
&gt; 
&gt; One should also look at why VLC is not in the app store - there was a
&gt; conflict with GPL I believe.

Yeah, but Cover Browser can use Tor because Tor is BSD-licensed, so as
long as we keep stuff in a BSD-licensed schema everything could work.

As a local PPTP server maybe it's possible to use directly the
BSD-licensed apple support
https://discussions.apple.com/thread/135631?start=0&amp;tstart=0 ?


However between the VPN hack approach and the "tor as a usable library"
approach i think it would be much better the second one.

So working on Tor to make it suitable for use by third party application.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120319002455</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-03-19 00:24:55-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

On Sun, 18 Mar 2012 15:42:33 +0200
Linas Valiukas &lt;shirshegsm@gmail.com&gt; wrote:
&gt; I was thinking about a GSoC 2012 project I could propose, and I came
&gt; to the question of why there's no Tor iOS (iPhone / iPad / iPod
&gt; touch) application distributed on the official iTunes App Store?

People have tried in the past and been rejected for being a
'proxy/circumvention tool'. 


-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120319090034</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-19 09:00:34-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

On 3/19/12 1:24 AM, Andrew Lewman wrote:
&gt; On Sun, 18 Mar 2012 15:42:33 +0200
&gt; Linas Valiukas &lt;shirshegsm@gmail.com&gt; wrote:
&gt;&gt; I was thinking about a GSoC 2012 project I could propose, and I came
&gt;&gt; to the question of why there's no Tor iOS (iPhone / iPad / iPod
&gt;&gt; touch) application distributed on the official iTunes App Store?
&gt; 
&gt; People have tried in the past and been rejected for being a
&gt; 'proxy/circumvention tool'. 

But considering that CovertBrowser got into the apple store, it means
that as long as "Tor" will be provided as "anonymity feature" of a
Mobile application, where the Mobile Application is compliant with Apple
Terms of Service, it should pass.

So while thinking about Tor and iOS we should probably think that Tor
must represent, like for Covert Browser, a "pluggable/linkable" system
to provided anonymity feature to an application.

Are there any chance to convince the Covert Browser developer to release
it's code?

We may arrange a kickstarter project to "open" the result of his
research, so he would earn some thousand USD in exchange for the
opensourcing of the project.

What do you think?

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120228225313</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-28 22:53:13-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On 2012-02-28, Sai &lt;tor@saizai.com&gt; wrote:
&gt; Hello all.
&gt;
&gt; We've written up our proposal for mnemonic .onion URLs.
&gt;
&gt; See
&gt; https://docs.google.com/document/d/sT5CulCVl0X5JeOv4W_wC_A/edit?disco=AAAAAERhFsE
&gt; for details; please read the full intro for explanations and caveats,
&gt; as some are important.

I'm not going to follow that link.  (Tor specification-change
proposals are sent to the tor-dev mailing list in their entirety and
copied into a Git repository for archival, not left on an
easily-changed web page.)


&gt; tl;dr: It's a system that would have all three properties of being
&gt; secure, distributed, and human-meaningful… but would *not* also have

We do not care whether names are ‘human-meaningful'.  ("Tor" is not a
human-meaningful name.)

We would like a naming system which provides *memorable* names, if
that is possible.  (I've never seen a distributed naming system which
provides secure and memorable names.)

But we care even more about other usability properties of a naming
system, such as how easily users can type a name given a copy of it on
paper, how easily users can transfer a name to a friend over the
telephone, and how easily users can compare two names maliciously
crafted by an attacker with plausible computational power to be
similar (whether in written form or in spoken form).

&gt; choice of name (though it has the required *canonicality* of names),

By proposing to add a new naming system for Tor's existing hidden
service protocol, you are already assuming and claiming that hidden
service names do not need to be canonical.  Why do you think
‘canonicality' is required?

&gt; and has a somewhat absurdist definition of 'meaningful'. :-P

Then your system's names are unlikely to be memorable.


&gt; Please feel free to put comments there or on list.
&gt;
&gt; Right now we're at the stage just before implementation; namely, we
&gt; haven't yet collated the necessary dictionaries, but we have a
&gt; reasonably good idea of how the system would work, including needed
&gt; constraints on the dictionaries. If you have suggestions or comments,
&gt; now is a good time to talk about them, so that if any of it affects
&gt; the dictionary collation step we don't waste work.

The dictionaries required by a dictionary-based naming system strongly
influence whether the resulting names will be memorable.  The
usability tests which will prove that your scheme does not provide
sufficient usability benefit to justify shipping many large
dictionaries with Tor cannot begin until after you have collected the
dictionaries.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120228231332</emailId><senderName>Ahmed Hassan</senderName><senderEmail>ahmed@linuxism.com</senderEmail><timestampReceived>2012-02-28 23:13:32-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, 2012-02-28 at 16:27 -0500, Sai wrote:
&gt; We've written up our proposal

Hmm, I wrote one last week. I described its mathematical implementation.
I got some replies that say it's cool idea, and some other troll. 



https://lists.torproject.org/pipermail/tor-talk/2012-February/023376.html 

Well, I can implement it as one C\C++ header file if any of tor-devs
interested in it.  

Sai, I can implement it with you if you want. You mentioned some good
points about such as "Have a fixed number of template sentences", but
you almost didn't mention how to implement your proposal. 

You need to have 80 bits space to avoid collision.  

-- 
Ahmed Hassan &lt;Ahmed@Linuxism.com&gt;

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120228232242</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-28 23:22:42-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, Feb 28, 2012 at 17:53, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; I'm not going to follow that link.

… yet you're going to comment anyway, based merely on your imagination
of what it contains? O.o

&gt;  (Tor specification-change
&gt; proposals are sent to the tor-dev mailing list in their entirety and
&gt; copied into a Git repository for archival, not left on an
&gt; easily-changed web page.)

Yeah: that's the point. This is a proposal, not a full implementation
let alone a final one. It's going to be edited.

&gt; We would like a naming system which provides *memorable* names, if
&gt; that is possible.  (I've never seen a distributed naming system which
&gt; provides secure and memorable names.)

"I've never seen" isn't really a statement about my proposal.

&gt; But we care even more about other usability properties of a naming
&gt; system, such as how easily users can type a name given a copy of it on
&gt; paper, how easily users can transfer a name to a friend over the
&gt; telephone, and how easily users can compare two names maliciously
&gt; crafted by an attacker with plausible computational power to be
&gt; similar (whether in written form or in spoken form).

All agreed there.

&gt;&gt; choice of name (though it has the required *canonicality* of names),
&gt;
&gt; By proposing to add a new naming system for Tor's existing hidden
&gt; service protocol, you are already assuming and claiming that hidden
&gt; service names do not need to be canonical.  Why do you think
&gt; ‘canonicality’ is required?

… you just contradicted yourself within two sentences.

Canonicality is mandatory for domain names of all kinds; otherwise
there's no way to advertise them, transfer references to them between
users, etc. If your name for some service only works for you, it's not
very useful.

&gt;&gt; and has a somewhat absurdist definition of 'meaningful'. :-P
&gt;
&gt; Then your system's names are unlikely to be memorable.

Not true. Consider that e.g. mnemonics used in med school *all*
consist of absurdist phrases.

It would be more memorable if it's short and operator-specified, but
for that you need a petname system, which this is not.

&gt; The dictionaries required by a dictionary-based naming system strongly
&gt; influence whether the resulting names will be memorable.

Yes, of course. So will using good syntax generation.

&gt; The usability tests which will prove that your scheme does not provide
&gt; sufficient usability benefit to justify shipping many large
&gt; dictionaries with Tor cannot begin until after you have collected the
&gt; dictionaries.

a) who said it requires 'many large dictionaries'?
b) I said upfront that the point of asking for comments is to make
sure the dictionaries collected are good a priori. Your challenging my
proposal by saying that we need dictionaries before testing — which is
obvious; you can't implement this scheme without dictionaries — seems
pointlessly combative to me.


I suggest you try actually reading proposals before bitching about
them.  We addressed most of the issues you mention in the proposal.

- Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120228233626</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-28 23:36:26-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, Feb 28, 2012 at 18:13, Ahmed Hassan &lt;ahmed@linuxism.com&gt; wrote:
&gt; You mentioned some good points about such as "Have a fixed number of template \
&gt; sentences", but you almost didn't mention how to implement your proposal.

We didn't elaborate at length because we thought the implementation
details of that weren't important for understanding the idea at this
stage. We will of course provide a demo implementation (probably in
Ruby or Perl) once we have the dictionaries compiled. I don't know the
Privoxy source at all, so would need help in translating it to work
there, but that can be done afterwards.

Compiling the dictionaries is a significant amount of work (cf our
requirements list, which eg RFC1751 &amp; RFC2289 utterly fail). That's
why we're stopping for input now. It's also important to have the
dictionaries compiled before we can generate a full set of templates;
there are some complicated linguistic interconstraints that make just
generating one without the other a bad idea.

Testing can be done in various ways, e.g. just asking subjects to
remember (both for recognition and input) a random hash-phrase for 1h,
1d, or 1w, before full deployment.

- Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120229010426</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2012-02-29 01:04:26-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Sai,

It looks like you've put a lot of thought into what would make a good
hash-to-word system. However, you have a false assumption, that dictionary
systems can simultaneously have all three properties of Zooko's Triangle.
This is a popular idea, but unfortunately untrue.

Hashes are effectively random and so have maximum information density.
Words do not have maximum information density, they have redundancy, which
is why they are easier to remember and tell apart from each other than
random strings. However, this comes at the cost of making the words longer.
The more redundant information that you add in terms of constraints such as
part of speech, the longer you will need to make the words (on average) so
that they can contain this additional information. If you look at the 4
little words post you will notice that the phrases are about 5 characters
longer than the IPv4 addresses. Of course you could make the claim that
sometimes longer strings are easier to remember than shorter ones. There is
an intuitive appeal to the idea that words are more memorable than
hexadecimal strings (or base64 or whatever). That might be true sometimes
for special cases, but there is no evidence that it is true generally or in
this particular case.

On Tue, Feb 28, 2012 at 3:27 PM, Sai &lt;tor@saizai.com&gt; wrote:

&gt; Hello all.
&gt;
&gt; We've written up our proposal for mnemonic .onion URLs.
&gt;
&gt; See
&gt; https://docs.google.com/document/d/sT5CulCVl0X5JeOv4W_wC_A/edit?disco=AAAAAERhFsE
&gt; for details; please read the full intro for explanations and caveats,
&gt; as some are important.
&gt;
&gt; tl;dr: It's a system that would have all three properties of being
&gt; secure, distributed, and human-meaningful… but would *not* also have
&gt; choice of name (though it has the required *canonicality* of names),
&gt; and has a somewhat absurdist definition of 'meaningful'. :-P
&gt;
&gt; Please feel free to put comments there or on list.
&gt;
&gt; Right now we're at the stage just before implementation; namely, we
&gt; haven't yet collated the necessary dictionaries, but we have a
&gt; reasonably good idea of how the system would work, including needed
&gt; constraints on the dictionaries. If you have suggestions or comments,
&gt; now is a good time to talk about them, so that if any of it affects
&gt; the dictionary collation step we don't waste work.
&gt;
&gt; Thanks,
&gt; Sai
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

Hi Sai,&lt;br&gt;&lt;br&gt;It looks like you've put a lot of thought into what would make a \
good hash-to-word system. However, you have a false assumption, that dictionary \
systems can simultaneously have all three properties of Zooko's Triangle. This is \
a popular idea, but unfortunately untrue.&lt;br&gt; &lt;br&gt;Hashes are effectively random and \
so have maximum information density. Words do not have maximum information density, \
they have redundancy, which is why they are easier to remember and tell apart from \
each other than random strings. However, this comes at the cost of making the words \
longer. The more redundant information that you add in terms of constraints such as \
part of speech, the longer you will need to make the words (on average) so that they \
can contain this additional information. If you look at the 4 little words post you \
will notice that the phrases are about 5 characters longer than the IPv4 addresses. \
Of course you could make the claim that sometimes longer strings are easier to \
remember than shorter ones. There is an intuitive appeal to the idea that words are \
more memorable than hexadecimal strings (or base64 or whatever). That might be true \
sometimes for special cases, but there is no evidence that it is true generally or in \
this particular case. &lt;br&gt; &lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Feb 28, 2012 at 3:27 \
PM, Sai &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:tor@saizai.com"&gt;tor@saizai.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; Hello all.&lt;br&gt;
&lt;br&gt;
We've written up our proposal for mnemonic .onion URLs.&lt;br&gt;
&lt;br&gt;
See &lt;a href="https://docs.google.com/document/d/sT5CulCVl0X5JeOv4W_wC_A/edit?disco=AAAAAERhFsE" \
target="_blank"&gt;https://docs.google.com/document/d/sT5CulCVl0X5JeOv4W_wC_A/edit?disco=AAAAAERhFsE&lt;/a&gt;&lt;br&gt;
 for details; please read the full intro for explanations and caveats,&lt;br&gt;
as some are important.&lt;br&gt;
&lt;br&gt;
tl;dr: It's a system that would have all three properties of being&lt;br&gt;
secure, distributed, and human-meaningful… but would *not* also have&lt;br&gt;
choice of name (though it has the required *canonicality* of names),&lt;br&gt;
and has a somewhat absurdist definition of 'meaningful'. :-P&lt;br&gt;
&lt;br&gt;
Please feel free to put comments there or on list.&lt;br&gt;
&lt;br&gt;
Right now we're at the stage just before implementation; namely, we&lt;br&gt;
haven't yet collated the necessary dictionaries, but we have a&lt;br&gt;
reasonably good idea of how the system would work, including needed&lt;br&gt;
constraints on the dictionaries. If you have suggestions or comments,&lt;br&gt;
now is a good time to talk about them, so that if any of it affects&lt;br&gt;
the dictionary collation step we don't waste work.&lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
Sai&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120229015027</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-29 01:50:27-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, Feb 28, 2012 at 20:04, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; However, you have a false assumption, that dictionary
&gt; systems can simultaneously have all three properties of Zooko's Triangle.

This isn't an "assumption", but rather an actual claim about the
properties of the specific system I proposed (within the caveats I
gave).

If you want to refute it, go ahead, but do so by challenging a given
property I'm claiming as applied to my proposal, rather than merely
dismissing it out of hand on the basis of an axiomatic belief that
it's impossible to have the conjunction.

&gt; Hashes are effectively random and so have maximum information density. Words
&gt; do not have maximum information density, they have redundancy, which is why
&gt; they are easier to remember and tell apart from each other than random
&gt; strings. However, this comes at the cost of making the words longer. The
&gt; more redundant information that you add in terms of constraints such as part
&gt; of speech, the longer you will need to make the words (on average) so that
&gt; they can contain this additional information.
&gt; If you look at the 4 little words post you will notice that the phrases are about 5 characters longer
&gt; than the IPv4 addresses.

The entire point of the encoding I propose is to do exactly this —
convert something that's dense but impossible to remember into
something that's less dense in expression but easier in
cognitive/linguistic encoding.

However, you're making a false assumption: that string length is an
appropriate measure for effective storage requirements.

It's not, when it comes to human cognition.

"Maximum information density" is a useful concept when talking about
computer storage, but it is grossly misleading when talking about
human memory, and the latter is what this proposal is intending to
optimize for.

&gt;  Of course you could make the claim that sometimes
&gt; longer strings are easier to remember than shorter ones.

Indeed I do, and plenty of cogsci research supports this claim. How
easy something is to remember has much more to do with exactly what
the constraints are on memory (eg whether synonyms are treated as
distinct), how networked it is to previously remembered information,
state cues, etc.

&gt; There is an
&gt; intuitive appeal to the idea that words are more memorable than hexadecimal
&gt; strings (or base64 or whatever). That might be true sometimes for special
&gt; cases, but there is no evidence that it is true generally or in this
&gt; particular case.

Have you studied cognitive science or cognitive linguistics? This is
extremely well established research.

As one example you may find more tractable, take a look at the "memory
palace" technique — extremely effective, BTW, and used by people who
do memory competitions. It uses exactly this kind of "expansion" to
transform something that's very hard to remember (eg the complete
order of a deck of cards, or a long series of phone numbers) into
something that's easier (eg the various participants in a silly
scenario).

My proposal does essentially the same thing, except in a way that also
fulfills the secure (i.e. canonically interconvertable with a given
hash) and distributed (i.e. not reliant on any centralized or even
coordinated authority). It simply assigns a memorable scenario /
phrase to each hash.

- Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120229173932</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-29 17:39:32-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

Authors

Sai, Alex Fink

Overview

Currently, canonical Tor .onion URLs consist of a naked 80-bit
hash[1]. This is not something that users can even recognize for
validity, let alone produce directly. It is vulnerable to
partial-match fuzzing attacks[2], where a would-be MITM attacker
generates a very similar hash and uses various social engineering,
wiki poisoning, or other methods to trick the user into visiting the
spoof site.

This proposal gives an alternative method for displaying and entering
.onion and other URLs, such that they will be easily remembered and
generated by end users, and easily published by hidden service
websites, without any dependency on a full domain name type system
like e.g. namecoin[3]. This makes it easier to implement (requiring
only a change in the proxy).

This proposal could equally be used for IPv4, IPv6, etc, if normal DNS
is for some reason untrusted.

This is not a petname system[4], in that it does not allow service
providers or users[5] to associate a name of their choosing to an
address[6]. Rather, it is a mnemonic system that encodes the 80 bit
.onion address into a meaningful[7] and memorable sentence. A full
petname system (based on registration of some kind, and allowing for
shorter, service-chosen URLs) can be implemented in parallel[8].

This system has the three properties of being secure, distributed, and
human-meaningful — it just doesn't also have choice of name (except of
course by brute force creation of multiple keys to see if one has an
encoding the operator likes).

This is inspired by Jonathan Ackerman's "Four Little Words"
proposal[9] for doing the same thing with IPv4 addresses. We just need
to handle 80+ bits, not just 32 bits.

It is similar to Markus Jakobsson &amp; Ruj Akavipat's FastWord
system[10], except that it does not permit user choice of passphrase,
does not know what URL a user will enter (vs verifying against a
single stored password), and again has to encode significantly more
data.

This is also similar to RFC1751[11], RFC2289[12], and multiple other
fingerprint encoding systems[13] (e.g.  PGPfone[14] using the PGP
wordlist[15], and Arturo Filatsò's OnionURL[16]), but we aim to make
something that's as easy as possible for users to remember — and
significantly easier than just a list of words or pseudowords, which
we consider only useful as an active confirmation tool, not as
something that can be fully memorized and recalled, like a normal
domain name.


Requirements

1. encodes at least 80 bits of random data (preferably more, eg for a checksum)
2. valid, visualizable English sentence — not just a series of words[17]
3. words are common enough that non-native speakers and bad spellers
will have minimum difficulty remembering and producing (perhaps with
some spellcheck help)
4. not syntactically confusable (e.g. order should not matter)
5. short enough to be easily memorized and fully recalled at will, not
just recognized
6. no dependency on an external service
7. dictionary size small enough to be reasonable for end users to
download as part of the onion package
8. consistent across users (so that websites can e.g. reinforce their
random hash's phrase with a clever drawing)
9. not create offensive sentences that service providers will reject
10. resistant against semantic fuzzing (e.g. by having uniqueness
against WordNet synsets[18])


Possible implementations

1. Have a fixed number of template sentences, such as:
1. Adj subj adv vtrans adj obj
2. Subj and subj vtrans adj obj
3. … etc

For a 6 word sentence, with 8 (3b) templates, we need ~12b (4k word)
dictionaries for each word category.

If multiple words of the same category are used, they must either play
different grammatical roles (eg subj vs obj, or adj on a different
item), be chosen from different dictionaries, or there needs to be an
order-agnostic way to join them at the bit level. Preferably this
should be avoided, just to prevent users forgetting the order.


2. As (1), but treat sentence generation as decoding a prefix code,
and have a Huffman code for each word class.  We suppose it's okay if
the generated sentence has a few more words than it might, as long as
they're common lean words.  E.g., for adjectives, "good" might cost
only six bits while "unfortunate" costs twelve.

Choice between different sentence syntaxes could be worked into the
prefix code as well, and potentially done separately for each
syntactic constituent.


Usage

To form mnemonic .onion URL, just join the words with dashes or
underscores, stripping minimal words like 'a', 'the', 'and' etc., and
append '.onion'. This can be readily distinguished from standard
hash-style .onion URLs by form.

Translation should take place at the client — though hidden service
servers should also be able to output the mnemonic form of hashes too,
to assist website operators in publishing them (e.g. by posting an
amusing drawing of the described situation on their website to
reinforce the mnemonic).

After the translation stage of name resolution, everything proceeds as
normal for an 80-bit hash onion URL.

The user should be notified of the mnemonic form of hash URL in some
way, and have an easy way in the client UI to translate mnemonics to
hashes and vice versa. For the purposes of browser URLs and the like
though, the mnemonic should be treated on par with the hash; if the
user enters a mnemonic URL they should not become redirected to the
hash version. (If anything, the opposite may be true, so that users
become used to seeing and verifying the mnemonic version of hash URLs,
and gain the security benefits against partial-match fuzzing.)

Ideally, inputs that don't validly resolve should have a response page
served by the proxy that uses a simple spell-check system to suggest
alternate domain names that are valid hash encodings. This could
hypothetically be done inline in URL input, but would require changes
on the browser (normally domain names aren't subject so spellcheck),
and this avoids that implementation problem.


International support

It is not possible for this scheme to support non-English languages without
a) (usually) Unicode in domains (which is not yet well supported by
browsers), and
b) fully customized dictionaries and phrase patterns per language

The scheme must not be used in an attempted 'translation' by simply
replacing English words with glosses in the target language. Several
of the necessary features would be completely mangled by this (e.g.
other languages have different synonym, homonym, etc groupings, not to
mention completely different grammar).

It is unlikely a priori that URLs constructed using a non-English
dictionary/pattern setup would in any sense 'translate' semantically
to English; more likely is that each language would have completely
unrelated encodings for a given hash.

We intend to only make an English version at first, to avoid these
issues during testing.

________________
[1] https://trac.torproject.org/projects/tor/wiki/doc/HiddenServiceNames
https://gitweb.torproject.org/torspec.git/blob/HEAD:/address-spec.txt
[2] http://www.thc.org/papers/ffp.html
[3] http://dot-bit.org/Namecoin
[4] https://en.wikipedia.org/wiki/Zooko's_triangle
[5] https://addons.mozilla.org/en-US/firefox/addon/petname-tool/
[6] However, service operators can generate a large number of hidden
service descriptors and check whether their hashes result in a
desirable phrasal encoding (much like certain hidden services
currently use brute force generated hashes to ensure their name is the
prefix of their raw hash). This won't get you whatever phrase you
want, but will at least improve the likelihood that it's something
amusing and acceptable.
[7] "Meaningful" here inasmuch as e.g. "Barnaby thoughtfully mangles
simplistic yellow camels" is an absurdist but meaningful sentence.
Absurdness is a feature, not a bug; it decreases the probability of
mistakes if the scenario described is not one that the user would try
to fit into a template of things they have previously encountered IRL.
See research into linguistic schema for further details.
[8] https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-onion-nyms.txt
[9] http://blog.rabidgremlin.com/2010/11/28/4-little-words/
[10] http://fastword.me/
[11] https://tools.ietf.org/html/rfc1751
[12] http://tools.ietf.org/html/rfc2289
[13] https://github.com/singpolyma/mnemonicode
http://mysteryrobot.com
https://github.com/zacharyvoase/humanhash
[14] http://www.mathcs.duq.edu/~juola/papers.d/icslp96.pdf
[15] http://en.wikipedia.org/wiki/PGP_word_list
[16] https://github.com/hellais/Onion-url
https://github.com/hellais/Onion-url/blob/master/dev/mnemonic.py
[17] http://www.reddit.com/r/technology/comments/ecllk
[18] http://wordnet.princeton.edu/wordnet/man2.1/wnstats.7WN.html
[19] https://plus.google.com/u/0/103112149634414554669/posts/DLfvB76Zhav
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120229185811</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-02-29 18:58:11-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

Reformatted again for your committing pleasure:


Filename: xxx-mnemonic_urls.txt
Title: Mnemonic .onion URLs
Author: Sai, Alex Fink
Created: 29-Feb-2012
Status: Open

1. Overview

  Currently, canonical Tor .onion URLs consist of a naked 80-bit hash[1]. This
  is not something that users can even recognize for validity, let alone produce
  directly. It is vulnerable to partial-match fuzzing attacks[2], where a
  would-be MITM attacker generates a very similar hash and uses various social
  engineering, wiki poisoning, or other methods to trick the user into visiting
  the spoof site.

  This proposal gives an alternative method for displaying and entering .onion
  and other URLs, such that they will be easily remembered and generated by end
  users, and easily published by hidden service websites, without any dependency
  on a full domain name type system like e.g. namecoin[3]. This makes it easier
  to implement (requiring only a change in the proxy).

  This proposal could equally be used for IPv4, IPv6, etc, if normal DNS is for
  some reason untrusted.

  This is not a petname system[4], in that it does not allow service providers
  or users[5] to associate a name of their choosing to an address[6]. Rather, it
  is a mnemonic system that encodes the 80 bit .onion address into a
  meaningful[7] and memorable sentence. A full petname system (based on
  registration of some kind, and allowing for shorter, service-chosen URLs) can
  be implemented in parallel[8].

  This system has the three properties of being secure, distributed, and
  human-meaningful — it just doesn't also have choice of name (except of course
  by brute force creation of multiple keys to see if one has an encoding the
  operator likes).

  This is inspired by Jonathan Ackerman's "Four Little Words" proposal[9] for
  doing the same thing with IPv4 addresses. We just need to handle 80+ bits, not
  just 32 bits.

  It is similar to Markus Jakobsson &amp; Ruj Akavipat's FastWord system[10], except
  that it does not permit user choice of passphrase, does not know what URL a
  user will enter (vs verifying against a single stored password), and again has
  to encode significantly more data.

  This is also similar to RFC1751[11], RFC2289[12], and multiple other
  fingerprint encoding systems[13] (e.g.  PGPfone[14] using the PGP
  wordlist[15], and Arturo Filatsò's OnionURL[16]), but we aim to make something
  that's as easy as possible for users to remember — and significantly easier
  than just a list of words or pseudowords, which we consider only useful as an
  active confirmation tool, not as something that can be fully memorized and
  recalled, like a normal domain name.

2. Requirements

2.1. encodes at least 80 bits of random data (preferably more, eg for a
checksum)

2.2. valid, visualizable English sentence — not just a series of words[17]

2.3. words are common enough that non-native speakers and bad spellers will have
minimum difficulty remembering and producing (perhaps with some spellcheck help)

2.4. not syntactically confusable (e.g. order should not matter)

2.5. short enough to be easily memorized and fully recalled at will, not just
recognized

2.6. no dependency on an external service

2.7. dictionary size small enough to be reasonable for end users to download as
part of the onion package

2.8. consistent across users (so that websites can e.g. reinforce their random
hash's phrase with a clever drawing)

2.9. not create offensive sentences that service providers will reject

2.10. resistant against semantic fuzzing (e.g. by having uniqueness against
WordNet synsets[18])

3. Possible implementations

  This section is intentionally left unfinished; full listing of template
  sentences and the details of their parser and generating implementation is
  co-dependent on the creation of word class dictionaries fulfilling the above
  criteria. Since that's fairly labor-intensive, we're pausing at this stage for
  input first, to avoid wasting work.

3.1. Have a fixed number of template sentences, such as:

  1. Adj subj adv vtrans adj obj
  2. Subj and subj vtrans adj obj
  3. … etc

  For a 6 word sentence, with 8 (3b) templates, we need ~12b (4k word)
  dictionaries for each word category.

  If multiple words of the same category are used, they must either play
  different grammatical roles (eg subj vs obj, or adj on a different item), be
  chosen from different dictionaries, or there needs to be an order-agnostic way
  to join them at the bit level. Preferably this should be avoided, just to
  prevent users forgetting the order.

3.2. As 3.1, but treat sentence generation as decoding a prefix code, and have
  a Huffman code for each word class.

  We suppose it's okay if the generated sentence has a few more words than it
  might, as long as they're common lean words.  E.g., for adjectives, "good"
  might cost only six bits while "unfortunate" costs twelve.

  Choice between different sentence syntaxes could be worked into the prefix
  code as well, and potentially done separately for each syntactic constituent.

4. Usage

  To form mnemonic .onion URL, just join the words with dashes or underscores,
  stripping minimal words like 'a', 'the', 'and' etc., and append '.onion'. This
  can be readily distinguished from standard hash-style .onion URLs by form.

  Translation should take place at the client — though hidden service servers
  should also be able to output the mnemonic form of hashes too, to assist
  website operators in publishing them (e.g. by posting an amusing drawing of
  the described situation on their website to reinforce the mnemonic).

  After the translation stage of name resolution, everything proceeds as normal
  for an 80-bit hash onion URL.

  The user should be notified of the mnemonic form of hash URL in some way, and
  have an easy way in the client UI to translate mnemonics to hashes and vice
  versa. For the purposes of browser URLs and the like though, the mnemonic
  should be treated on par with the hash; if the user enters a mnemonic URL they
  should not become redirected to the hash version. (If anything, the opposite
  may be true, so that users become used to seeing and verifying the mnemonic
  version of hash URLs, and gain the security benefits against partial-match
  fuzzing.)

  Ideally, inputs that don't validly resolve should have a response page served
  by the proxy that uses a simple spell-check system to suggest alternate domain
  names that are valid hash encodings. This could hypothetically be done inline
  in URL input, but would require changes on the browser (normally domain names
  aren't subject so spellcheck), and this avoids that implementation problem.

5. International support

  It is not possible for this scheme to support non-English languages without
  a) (usually) Unicode in domains (which is not yet well supported by browsers),
  and
  b) fully customized dictionaries and phrase patterns per language

  The scheme must not be used in an attempted 'translation' by simply replacing
  English words with glosses in the target language. Several of the necessary
  features would be completely mangled by this (e.g. other languages have
  different synonym, homonym, etc groupings, not to mention completely different
  grammar).

  It is unlikely a priori that URLs constructed using a non-English
  dictionary/pattern setup would in any sense 'translate' semantically to
  English; more likely is that each language would have completely unrelated
  encodings for a given hash.

  We intend to only make an English version at first, to avoid these issues
  during testing.

________________

[1] https://trac.torproject.org/projects/tor/wiki/doc/HiddenServiceNames
https://gitweb.torproject.org/torspec.git/blob/HEAD:/address-spec.txt
[2] http://www.thc.org/papers/ffp.html
[3] http://dot-bit.org/Namecoin
[4] https://en.wikipedia.org/wiki/Zooko's_triangle
[5] https://addons.mozilla.org/en-US/firefox/addon/petname-tool/
[6] However, service operators can generate a large number of hidden service
descriptors and check whether their hashes result in a desirable phrasal
encoding (much like certain hidden services currently use brute force generated
hashes to ensure their name is the prefix of their raw hash). This won't get you
whatever phrase you want, but will at least improve the likelihood that it's
something amusing and acceptable.
[7] "Meaningful" here inasmuch as e.g. "Barnaby thoughtfully mangles simplistic
yellow camels" is an absurdist but meaningful sentence. Absurdness is a feature,
not a bug; it decreases the probability of mistakes if the scenario described is
not one that the user would try to fit into a template of things they have
previously encountered IRL. See research into linguistic schema for further
details.
[8] https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-oni
on-nyms.txt
[9] http://blog.rabidgremlin.com/2010/11/28/4-little-words/
[10] http://fastword.me/
[11] https://tools.ietf.org/html/rfc1751
[12] http://tools.ietf.org/html/rfc2289
[13] https://github.com/singpolyma/mnemonicode
http://mysteryrobot.com
https://github.com/zacharyvoase/humanhash
[14] http://www.mathcs.duq.edu/~juola/papers.d/icslp96.pdf
[15] http://en.wikipedia.org/wiki/PGP_word_list
[16] https://github.com/hellais/Onion-url
https://github.com/hellais/Onion-url/blob/master/dev/mnemonic.py
[17] http://www.reddit.com/r/technology/comments/ecllk
[18] http://wordnet.princeton.edu/wordnet/man2.1/wnstats.7WN.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120321001103</emailId><senderName>Ken Takusagawa II</senderName><senderEmail>ken.takusagawa.2@gmail.com</senderEmail><timestampReceived>2012-03-21 00:11:03-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

[Attachment #2 (multipart/alternative)]


On Feb 29, 2012 1:58 PM, "Sai" &lt;tor@saizai.com&gt; wrote:

&gt;  For a 6 word sentence, with 8 (3b) templates, we need ~12b (4k word)
&gt;  dictionaries for each word category.

1. You need 2^8=256 templates, not just 8, to reach 6*12+8=80 bits.

2. Having toyed with this idea in the past, let me warn that forming a 4096
word dictionary of memorable, non-colliding  words for each word category
is going to be very difficult.  Too many words are semantically similar,
phonetically similar, or just unfamiliar.  You might find Google Ngrams a
good resource for common words; I provide a complete sorted list here:

http://kenta.blogspot.com/2012/02/lefoezyy-some-notes-on-google-books.html

Another way to go about it might be to first catalogue semantic categories
(colors, animals, etc.) then list the most common (yet dissimilar) members
of each category.  An attempt at 64 words is here:

http://kenta.blogspot.com/2011/10/xpmqawkv-common-words.html

I'd propose that the "right" way to do this is not just sentences, but
entire semantically consistent stories, written in rhyming verse, with
entropy of perhaps only a few bits per sentence.  (Prehistoric oral
tradition does prove we can memorize such poems.)  However, synthesizing
these seem extremely difficult, an AI problem.

3. I presume people are familiar with Bubblebabble?  It doesn't solve all
the problems, but does make bit strings seem less "dense".

Ken

[Attachment #5 (text/html)]

&lt;p&gt;On Feb 29, 2012 1:58 PM, "Sai" &lt;&lt;a \
href="mailto:tor@saizai.com"&gt;tor@saizai.com&lt;/a&gt;&gt; wrote:&lt;/p&gt; &lt;p&gt;&gt;  For a 6 word \
sentence, with 8 (3b) templates, we need ~12b (4k word)&lt;br&gt; &gt;  dictionaries for \
each word category.&lt;/p&gt; &lt;p&gt;1. You need 2^8=256 templates, not just 8, to reach \
6*12+8=80 bits.&lt;/p&gt; &lt;p&gt;2. Having toyed with this idea in the past, let me warn that \
forming a 4096 word dictionary of memorable, non-colliding  words for each word \
category is going to be very difficult.  Too many words are semantically similar, \
phonetically similar, or just unfamiliar.  You might find Google Ngrams a good \
resource for common words; I provide a complete sorted list here:&lt;/p&gt;

&lt;p&gt; &lt;a href="http://kenta.blogspot.com/2012/02/lefoezyy-some-notes-on-google-books.htm \
l"&gt;http://kenta.blogspot.com/2012/02/lefoezyy-some-notes-on-google-books.html&lt;/a&gt;&lt;/p&gt; \
&lt;p&gt;Another way to go about it might be to first catalogue semantic categories \
(colors, animals, etc.) then list the most common (yet dissimilar) members of each \
category.  An attempt at 64 words is here:&lt;/p&gt; &lt;p&gt; &lt;a \
href="http://kenta.blogspot.com/2011/10/xpmqawkv-common-words.html"&gt;http://kenta.blogspot.com/2011/10/xpmqawkv-common-words.html&lt;/a&gt; \
&lt;/p&gt; &lt;p&gt;I'd propose that the "right" way to do this is not just \
sentences, but entire semantically consistent stories, written in rhyming verse, with \
entropy of perhaps only a few bits per sentence.  (Prehistoric oral tradition does \
prove we can memorize such poems.)  However, synthesizing these seem extremely \
difficult, an AI problem.&lt;/p&gt;

&lt;p&gt;3. I presume people are familiar with Bubblebabble?  It doesn't solve all the \
problems, but does make bit strings seem less "dense".&lt;/p&gt; &lt;p&gt;Ken&lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120321024756</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-03-21 02:47:56-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, Mar 20, 2012 at 20:11, Ken Takusagawa II
&lt;ken.takusagawa.2@gmail.com&gt; wrote:
&gt; 1. You need 2^8=256 templates, not just 8, to reach 6*12+8=80 bits.

We won't know for sure how it hashes out until we make both the
dictionaries and the syntax generator. The ambiguity was intentional.

But yes, it may well use a number of generated templates. We're
thinking of making it symbolic expansion based, which is more
efficient on bits but also more complicated to describe before it's
fixed (and it'll require a parser library).

&gt; 2. Having toyed with this idea in the past, let me warn that forming a 4096
&gt; word dictionary of memorable, non-colliding  words for each word category is
&gt; going to be very difficult.  Too many words are semantically similar,
&gt; phonetically similar, or just unfamiliar.

Our intention currently is to first take candidate dictionaries from
WordNet, and use a combination of WordNet and Google 1-gram frequency
data as part of the cutoff for whether words are adequately familiar.
(N-grams with n &gt;= 2 are rather irrelevant to our needs, AFAICT.)

&gt; http://kenta.blogspot.com/2012/02/lefoezyy-some-notes-on-google-books.html

Thanks; that could be useful.

&gt; Another way to go about it might be to first catalogue semantic categories
&gt; (colors, animals, etc.) then list the most common (yet dissimilar) members
&gt; of each category.  An attempt at 64 words is here:

This is something that WordNet has already done.

&gt; http://kenta.blogspot.com/2011/10/xpmqawkv-common-words.html

I think you omit far more common words, which you shouldn't — eg air
water coal man house etc.

But quibbling at this level is pointless; we'll need to be dealing
with dictionaries mostly on the order of a few thousand words, sorted
by *constituent types*, not be semantic categories. (E.g. one
dictionary would be "nouns that can be the target of a transitive
verb".)

&gt; I'd propose that the "right" way to do this is not just sentences, but
&gt; entire semantically consistent stories, written in rhyming verse, with
&gt; entropy of perhaps only a few bits per sentence.  (Prehistoric oral
&gt; tradition does prove we can memorize such poems.)  However, synthesizing
&gt; these seem extremely difficult, an AI problem.

I think it's currently impossible to do that, and furthermore, that
it's *not* Right even if you could — because it would violate a key
constraint: that it can be reasonably typed as a domain. It shouldn't
take longer than a few seconds to remember and type. It won't be as
fast as typing "google.com", and that's OK, but I think that level of
redundant expansion is way too much.

Creating unambiguously parseable syntaxes and dictionaries that meet
our stated constraints is already hard enough. ;-)

&gt; 3. I presume people are familiar with Bubblebabble?  It doesn't solve all
&gt; the problems, but does make bit strings seem less "dense".

BubbleBabble produces nonwords; as such it fails a basic requirement.
Making something merely look phonotactically valid isn't enough; it
has to be grammatically valid and composed entirely of known terms.

- Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120321030903</emailId><senderName>Ken Takusagawa II</senderName><senderEmail>ken.takusagawa.2@gmail.com</senderEmail><timestampReceived>2012-03-21 03:09:03-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

[Attachment #2 (multipart/alternative)]


One more note: the Soundex and Double Metaphone algorithms may be useful
for determining if two words sound alike.

And yet one more attempt at something similar from years ago, doing only
words, not grammatical sentences:

http://kenta.blogspot.com/2008/08/hash-of-words.html

Ken

[Attachment #5 (text/html)]

&lt;p&gt;One more note: the Soundex and Double Metaphone algorithms may be useful for \
determining if two words sound alike.&lt;/p&gt; &lt;p&gt;And yet one more attempt at something \
similar from years ago, doing only words, not grammatical sentences:&lt;/p&gt; &lt;p&gt; &lt;a \
href="http://kenta.blogspot.com/2008/08/hash-of-words.html"&gt;http://kenta.blogspot.com/2008/08/hash-of-words.html&lt;/a&gt; \
&lt;/p&gt; &lt;p&gt;Ken&lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120318120938</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-03-18 12:09:38-0400</timestampReceived><subject>Re: [tor-dev] TorHS related files re-organization ?</subject><body>



On 18 Mar 2012, at 12:46, "Fabio Pietrosanti (naif)" &lt;lists@infosecurity.ch&gt; wrote:

&gt; - Security issue
&gt; 
&gt; Looking at the server seizure threat scenario, who seize the computer
&gt; running TorHS will be able to know the identity of the TorHS itself by
&gt; looking at the "hostname" file

Why not simply use Full Disk Encryption or similar to protect all the data files, hat \
avoids a compromise for any file on the system, heck if hey turn the box off they \
can't even see there is Tor on it at all. also heavily note that the actual content \
served is likely much more valuable and you will want to protect that too.

Note that you can do this already today and it does not require an changes to Tor.

Greets,
 Jeroen

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120318125737</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 12:57:37-0400</timestampReceived><subject>Re: [tor-dev] TorHS related files re-organization ?</subject><body>

On 3/18/12 1:09 PM, Jeroen Massar wrote:
&gt; 
&gt; 
&gt; On 18 Mar 2012, at 12:46, "Fabio Pietrosanti (naif)" &lt;lists@infosecurity.ch&gt; wrote:
&gt; 
&gt; &gt; - Security issue
&gt; &gt; 
&gt; &gt; Looking at the server seizure threat scenario, who seize the computer
&gt; &gt; running TorHS will be able to know the identity of the TorHS itself by
&gt; &gt; looking at the "hostname" file
&gt; 
&gt; Why not simply use Full Disk Encryption or similar to protect all the data files, \
&gt; hat avoids a compromise for any file on the system, heck if hey turn the box off \
&gt; they can't even see there is Tor on it at all. also heavily note that the actual \
&gt; content served is likely much more valuable and you will want to protect that too.

Yes, but any application that store "sensitive data" like keys should
provide an integrated way to protect such sensitive data.

Think about the "keychain" of PGP, or keychain of Firefox for digital
certificate, etc, etc

All major applications that need to handle "keys" support a built-in
feature to provide different degree of protection for such "keys".

So the idea is to "aggregate" the TorHS related "sensitive information"
and apply a protection schema with a "keychain" providing some security
feature.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120318134030</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-03-18 13:40:30-0400</timestampReceived><subject>Re: [tor-dev] TorHS related files re-organization ?</subject><body>

On 2012-03-18 13:57 , Fabio Pietrosanti (naif) wrote:
&gt; On 3/18/12 1:09 PM, Jeroen Massar wrote:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; On 18 Mar 2012, at 12:46, "Fabio Pietrosanti (naif)" &lt;lists@infosecurity.ch&gt; \
&gt; &gt; wrote: 
&gt; &gt; &gt; - Security issue
&gt; &gt; &gt; 
&gt; &gt; &gt; Looking at the server seizure threat scenario, who seize the computer
&gt; &gt; &gt; running TorHS will be able to know the identity of the TorHS itself by
&gt; &gt; &gt; looking at the "hostname" file
&gt; &gt; 
&gt; &gt; Why not simply use Full Disk Encryption or similar to protect all the data files, \
&gt; &gt; hat avoids a compromise for any file on the system, heck if hey turn the box off \
&gt; &gt; they can't even see there is Tor on it at all. also heavily note that the actual \
&gt; &gt; content served is likely much more valuable and you will want to protect that \
&gt; &gt; too.
&gt; 
&gt; Yes, but any application that store "sensitive data" like keys should
&gt; provide an integrated way to protect such sensitive data.
&gt; 
&gt; Think about the "keychain" of PGP, or keychain of Firefox for digital
&gt; certificate, etc, etc
&gt; 

&gt; All major applications that need to handle "keys" support a built-in
&gt; feature to provide different degree of protection for such "keys".

And you want to add another one that has to be separately managed? :)

As I mentioned btw, the Tor keys are not that valuable, the content that
sits behind it is though. And if you are doing it right you are actually
sending TLS/SSL/SSH through the tunnel instead of clear text.

&gt; So the idea is to "aggregate" the TorHS related "sensitive information"
&gt; and apply a protection schema with a "keychain" providing some security
&gt; feature.

Which is perfectly done by simply crypting the partition/disk the data
is stored on, which additionally will resolve quite a few other attacks
too. And the attack vectors that are left open with these is much better
understood too.

Note that if you just use non-encrypted storage there is a big chance
that the 'old' file is still present on the file system which can give
away quite a few details already.

Greets,
 Jeroen
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120317100201</emailId><senderName>Jeroen Massar</senderName><senderEmail>jeroen@unfix.org</senderEmail><timestampReceived>2012-03-17 10:02:01-0400</timestampReceived><subject>Re: [tor-dev] Tor HS keys password protection against impersonation attacks?</subject><body>

On 2012-03-17 10:52 , Fabio Pietrosanti (naif) wrote:
[..]
&gt; That way even in case of seizure of the server running the Tor HS
&gt; it would not be possible to who seized the Tor HS Server to do actively
&gt; Impersonation attacks of the Tor HS.

If you want to protect these files, use proper full disk crypto, that
will solve all your data issues up to that level, eg somebody taking the
disk and trying to attack it from that perspective. Do note that not all
FDEs are actually truly secure... and it all depends on what one is
protecting against.

If one can get access to a running installation so that they can
retrieve/access the file you store your keys in you have lost more than
just your identity, they can then also subvert the machine by changing
binaries on the system, inserting code into running processes etc etc or
just monitoring the thing, likely with the data that goes inside the tunnel.


Another way to solve this is to do SSL/TLS/SSH inside the Tor connection
and use that for authentication of client and server, which is probably
the best thing you can do to protect your data, as the legs between your
client and the Tor instance and the remote HS Tor instance and the app
are not 'protected' by the layer that Tor provides oh and those legs are
perfectly inspectable with tcpdump.

Greets,
 Jeroen
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120317190340</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-17 19:03:40-0400</timestampReceived><subject>Re: [tor-dev] Tor HS keys password protection against impersonation attacks?</subject><body>

On 3/17/12 11:02 AM, Jeroen Massar wrote:
&gt; On 2012-03-17 10:52 , Fabio Pietrosanti (naif) wrote:
&gt; [..]
&gt;&gt; That way even in case of seizure of the server running the Tor HS
&gt;&gt; it would not be possible to who seized the Tor HS Server to do actively
&gt;&gt; Impersonation attacks of the Tor HS.
&gt; 
&gt; If you want to protect these files, use proper full disk crypto, that
&gt; will solve all your data issues up to that level, eg somebody taking the
&gt; disk and trying to attack it from that perspective. Do note that not all
&gt; FDEs are actually truly secure... and it all depends on what one is
&gt; protecting against.
&gt; 
&gt; If one can get access to a running installation so that they can
&gt; retrieve/access the file you store your keys in you have lost more than
&gt; just your identity, they can then also subvert the machine by changing
&gt; binaries on the system, inserting code into running processes etc etc or
&gt; just monitoring the thing, likely with the data that goes inside the tunnel.

I mean, the password protection is not in any case to protect against
such threat scenario.

It's like the ability for Apache to be able to decrypt the RSA key of an
X509v3 digital certificate at it's startup (or restart) by asking the
administrator a password.

So:
- You are protected against computer seizure (that imply a shutdown)
- You are not protected against intrusion

Still making a little slightly difficult to retrieve it for the attacker
requiring him to dump memory, dissect it, extract the key rather than
just copying a file.

Obviously this is not the scope of protection of adding a password
protection of a Tor HS key, but against computer.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120318023403</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-03-18 02:34:03-0400</timestampReceived><subject>Re: [tor-dev] Tor HS keys password protection against impersonation attacks?</subject><body>

On 03/17/2012 02:52 AM, Fabio Pietrosanti (naif) wrote:
&gt; Hi,
&gt; thinking about Tor Hidden services, they are managed by using Hidden
&gt; Services client keys.
&gt; 
&gt; The Tor HS keys are "private keys" that may require to be protected
&gt; because they represent also the "identity" of the Tor HS and if stolen,
&gt; it would be possible to carry on impersonation attack on connecting to
&gt; Tor HS.
&gt; Accepting connections on behalf of the real TorHS, with the goal to
&gt; steal passwords, provide fake data to clients, exploit them, etc.
&gt; 
&gt; 
&gt; The Tor HS keys are even more sensible than the X509v3, as it does provide:
&gt; - identity (similar to an internet domain name)
&gt; - routing (similar to an internet IP address)
&gt; - encryption (they provide e2e encryption, i don't know if there are
&gt; attacks on crypto if they get stolen)
&gt; 
&gt; So owning a Tor HS key it's like owning a user domain name, acquiring
&gt; it's ip address and the x509v3 private key of his digital certificate
&gt; bound to his domain name.
&gt; 
&gt; 
&gt; As a protection schema it would be possible to create the Tor HS private
&gt; key encrypted with a passphrase, like it's possible to do for x509v3 PEM
&gt; certificates.
&gt; 
&gt; That the passphrase to unlock the Tor HS key, could be provided via Tor
&gt; Control Port, so an external process (UI, scripts) could manage the
&gt; setup of the passphrase.
&gt; 
&gt; That way even in case of seizure of the server running the Tor HS
&gt; it would not be possible to who seized the Tor HS Server to do actively
&gt; Impersonation attacks of the Tor HS.

I think that's a great idea but also a UI nightmare; for servers, I
think arm would need to support entering the key and for desktops, I
think Vidalia is the obvious target. It would probably be good to have
the key decryption tied together with something like scrypt[0] to make
it really expensive to bruteforce.

All the best,
Jacob

[0] http://www.tarsnap.com/scrypt.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120317001510</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-17 00:15:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Message-based Inter-controller IPC Channel</subject><body>

[Attachment #2 (multipart/signed)]


Ugh.. Without the annoying tabs:



Filename: xxx-postmessage-ipc.txt
Title: Message-based Inter-Controller IPC Channel
Author: Mike Perry
Created: 16-03-2012
Status: Proposed
Target: 0.2.4.x

Overview

  This proposal seeks to create a means for inter-controller
  communication using the Tor Control Port.

Motivation

  With the advent of pluggable transports, bridge discovery mechanisms,
  and tighter browser-Vidalia integration, we're going to have an
  increasing number of collaborating Tor controller programs
  communicating with each other. Rather than define new pairwise IPC
  mechanisms for each case, we will instead create a generalized
  message-passing mechanism through the Tor Control Port.

Control Protocol Specification Changes

  CONTROLLERNAME command

    Sent from the client to the server. The syntax is:

      "CONTROLLERNAME" SP ControllerID
        ControllerID = 1*(ALNUM / "_")

    Server returns "250 OK" and records the ControllerID to use for
    this control port connection for messaging information if successful,
    or "553 Controller name already in use" if the name is in use by
    another controller, or if an attempt is made to register the special
    names "all" or "unset".

    [CONTROLLERNAME need not be issued to send POSTMESSAGE commands,
     and CONTROLLERNAME may be unsupported by initial POSTMESSAGE
     implementations in Tor.]

  POSTMESSAGE command

    Sent from the client to the server. The syntax is:

      "POSTMESSAGE" SP "@" DestControllerID SP LineItem CRLF
         DestControllerID = "all" / 1*(ALNUM / "_")

    If DestControllerID is "all", the message will be posted to all
    controllers that have "SETEVENTS POSTMESSAGE" set. Otherwise, the
    message should be posted to the controller with the appropriate
    ControllerID.

    Server returns "250 OK" if successful, or "552 Invalid destination
    controller name" if the name is not registered.

    [Initial implementations may require DestControllerID always be
     "all"]

  POSTMESSAGE event

      "650" SP "POSTMESSAGE" SP MessageID SP SourceControllerID SP
                        "@" DestControllerID SP LineItem CRLF
         MessageID = 1*DIGIT
         SourceControllerID = "unset" / 1*(ALNUM / "_")
         DestControllerID = "all" / 1*(ALNUM / "_")

      MessageID is an incrementing integer identifier that uniquely
      identifies this message to all controllers.

      The SourceControllerID is the value from the sending
      controller's CONTROLLERNAME command, or "unset" if the
      CONTROLLERNAME command was not used or unimplemented.

  GETINFO commands
    "recent-messages" -- Retrieves messages 
      sent to ControllerIDs that match the current controller 
      in POSTMESSAGE event format. This list should be generated
      on the fly, to handle disconnecting controllers.

    "new-messages" -- Retrieves the last 10 "unread" messages
      sent to this controller, in POSTMESSAGE event format. If
      SETEVENTS POSTMESSAGE was set, this command should always return
      nothing.

    "list-controllers" -- Retrieves a list of all connected controllers
      with either their registered ControllerID or "unset".

Implementation plan

  The POSTMESSAGE protocol is designed to be incrementally deployable.
  Initial implementations are only expected to implement broadcast
  capabilities and SETEVENTS based delivery. CONTROLLERNAME need not be
  supported, nor do non-"@all" POSTMESSAGE destinations.

  To support command-based controllers (which do not use SETEVENTS) such
  as Torbutton, at minimum the "GETINFO recent-messages" command is
  needed.  However, Torbutton does not have immediate need for this
  protocol.

  



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120310145945</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-03-10 14:59:45-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS - draft finalized into proposal</subject><body>

On 03/10/2012 03:22 PM, Ondrej Mikle wrote:
&gt; 
&gt; The draft is here (full text pasted at the end of this mail):
&gt; 
&gt; https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt

Just a quick fix, I've noticed I have two sections named "Implementation notes".

s/9. Implementation notes/9. Notes on libunbound parallelization/
(it's already pushed into the github repo above).

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312180815</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-12 18:08:15-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS - draft finalized into proposal</subject><body>

On Sat, Mar 10, 2012 at 9:22 AM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrot=
e:
&gt; Hi all,
&gt;
&gt; the DNS/DNSSEC resolving draft for seems to be finished.

Hi, Ondrej!  I've got a few questions and comments.  I might have more
once I've thought a little more about the issues on this.


&gt; I added a few thoughts on mitigating circuit correlation (mentioned in pr=
oposal
&gt; 171). Somebody could look at those if they are not totally stupid (last t=
wo
&gt; paragraphs of section 7).
&gt;
&gt; A note is added about the "DNSSEC stapling" [1] (extremely difficult, won=
't be
&gt; implemented).
&gt;
&gt; The draft is here (full text pasted at the end of this mail):
&gt;
&gt; https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dns=
sec.txt
&gt;
&gt; The draft could probably be given a "proposal number" and merged into tor=
spec
&gt; proposals directory unless there is an objection.
&gt;
&gt; I'll leave few weeks (2-3) in case someone finds a vulnerability or has an
&gt; objection. After that I could slowly begin implementing it in a separate =
branch.
&gt;
&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2012-February/003285.h=
tml
&gt;
&gt; Ondrej
&gt;
&gt; ---- pasted proposal (hopfully will wrap well) ----
&gt;
&gt; Filename: xxx-dns-dnssec.txt
&gt; Title: Support for full DNS and DNSSEC resolution in Tor
&gt; Authors: Ondrej Mikle
&gt; Created: 4 February 2012
&gt; Modified: 10 March 2012
&gt; Status: Draft
&gt;
&gt; 0. Overview
&gt;
&gt; =A0Adding support for any DNS query type to Tor, as well as DNSSEC suppor=
t.
&gt;
&gt; 0.1. Motivation
&gt;
&gt; =A0Many applications running over Tor need more than just resolving FQDN =
to
&gt; =A0IPv4 and vice versa. Sometimes to prevent DNS leaks the applications h=
ave to
&gt; =A0be hacked around to be supplied necessary data by hand (e.g. SRV recor=
ds in
&gt; =A0XMPP). TLS connections will benefit from planned TLSA record that prov=
ides
&gt; =A0certificate pinning to avoid another Diginotar-like fiasco.
&gt;
&gt; =A0DNSSEC is part of the DNS protocol and the most appropriate place for =
DNSSEC
&gt; =A0API would be probably in OS libraries (e.g. libc). However that will
&gt; =A0probably take time until it becomes widespread.
&gt;
&gt; =A0On the Tor's side (as opposed to application's side), DNSSEC will prov=
ide
&gt; =A0protection against DNS cache-poisoning attacks (provided that exit is =
not
&gt; =A0malicious itself, but still reduces attack surface).
&gt;
&gt; 1. Design
&gt;
&gt; 1.1 New cells
&gt;
&gt; =A0There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (w=
e'll
&gt; =A0use DNS_BEGIN and DNS_RESPONSE for short below).
&gt;
&gt; =A0DNS_BEGIN payload:
&gt;
&gt; =A0 =A0DNS packet data (variable length)
&gt;
&gt; =A0The DNS packet must be generated internally by libunbound to avoid
&gt; =A0fingerprinting users by differences in client resolvers' behavior.

Have you looked at the ldns API?  From what I can tell, it is what
libunbound uses internally, and is what actually generates and handles
the queries.

Also, from a spec POV, it's better to say "The format must match that
used by"... than "the packet must be generated by"

Last time we talked about this, we mentioned that some fields (like
the request ID) that we wanted to clean up, and some flags we wanted
to disallow.  Did we decide not to do that?

&gt; =A0DNS_RESPONSE payload:
&gt;
&gt; =A0 =A0total length (2 octets)
&gt; =A0 =A0data =A0 =A0 =A0 =A0 (variable)
&gt;
&gt; =A0Data contains the reply DNS packet or its part if packet would not fit=
 into
&gt; =A0the cell. Total length describes length of complete response packet.
&gt;
&gt; =A0AXFR and IXRF are not supported in this cell by design (see specialize=
d tool
&gt; =A0below).

As noted in the last mail, total_length is needless here; RELAY
packets already have a length field.

&gt; 2. Interfaces to applications
&gt;
&gt; =A0DNSPort evdns - existing implementation will be updated to use DNS_BEG=
IN.
&gt;
&gt; =A0SOCKS proxy - new command will be added, containing RR type, class and
&gt; =A0query. =A0Response will simply contain the DNS packet.

This would need an actual specification.

&gt; 3. New options in configuration file
&gt;
&gt; =A0libunbound takes couple of parameters, e.g. trust anchors and cache-si=
ze. In
&gt; =A0order not to put them all into torrc, there will be only one option,
&gt; =A0configuration file name. Tor will be distributed with some sensible
&gt; =A0defaults. =A0New option will be named UnboundConfig and value will be
&gt; =A0filename.
&gt;
&gt; =A0An option DNSQueryPolicy will determine what query types and classes a=
re
&gt; =A0permitted:
&gt;
&gt; =A0 - common - class INTERNET, RR types listed on
&gt; =A0 =A0 https://en.wikipedia.org/wiki/List_of_DNS_record_types#Resource_r=
ecords
&gt; =A0 - full - any query type and class is allowed
&gt;
&gt; =A0Class CHAOS in "common" would not be of much use, since its prevalent =
use is
&gt; =A0for asking authoritative servers.
&gt;
&gt; =A0For client side, full validation would be optional described by option
&gt; =A0DNSValidation (0|1). By default validation is turned on, otherwise it =
would
&gt; =A0be easy to fingerprint people who turned it on and asked for not-so-co=
mmon
&gt; =A0records like SRV.
&gt;
&gt; 4. Changes to directory flags
&gt;
&gt; =A0Exit nodes will signal their resolving capability by two flags:
&gt;
&gt; =A0 - CommonDNS - reflects "common" DNSQueryPolicy
&gt; =A0 - FullDNS - reflects "full" DNSQueryPolicy
&gt;
&gt; =A0Exit node asked for a RR type not in CommonDNS policy will return REFU=
SED in
&gt; =A0as status in the reply DNS packet contained in DNS_RESPONSE cell.
&gt;
&gt; =A0If new types are added to CommonDNS set (e.g. new RFC adds a record ty=
pe)
&gt; =A0and exit node's Tor version does not recognize it as allowed, it will =
send
&gt; =A0REFUSED as well.
&gt;
&gt; 5. Implementation notes
&gt;
&gt; =A0There will be one instance of ub_ctx (libunbound resolver structure) i=
n Tor,
&gt; =A0libunbound is thread-safe.

Hm. Looking at the libunbound codebase, it makes me pretty sad that
Libunbound wants to open up a separate thread so that it can do its
own libevent-based event loop.  Is there no way we can make libunbound
(or ldns) integrate with our own event loop?

Also, for the record, I'm a little confused about the feature sets
here.  What does libunbound add to ldns here that we need?


&gt; =A0Client will periodically purge incomplete DNS replies. Any unexpected
&gt; =A0DNS_RESPONSE will be dropped.
&gt;
&gt; =A0Request for special names (.onion, .exit, .noconnect) will return REFU=
SED.
&gt;
&gt; =A0RELAY_BEGIN would function "normally", there is no need for returning =
DNS
&gt; =A0data. In case of malicious exit, client can't check he's really connec=
ted to
&gt; =A0whatever IP is in A/AAAA. We won't send any NSEC/NSEC3 back in case FQ=
DN
&gt; =A0does not exist, it would needlessly complicate things. Client can chec=
k by
&gt; =A0extra query on DNSPort.

What fraction of clients actually use DNSPort as opposed as to just
doing everything via SOCKS connect requests?  I worry that, by leaving
RELAY_BEGIN users out of this entirely, we're making a feature that
most clients just won't wind up using.  I wonder whether the earlier
idea of having a RELAY_BEGIN_DNS that does both the lookup and a
connect wouldn't be a good idea -- both to save the round-trip, and to
give the client the appropriate dnssec information.

And I *do* think that the dnssec information would be useful to the
client: Even though we can't check whether the exit really connected
to the requested IP or not, we're going to cache that IP, and perhaps
ask other exits to connect to it when we want to connect to the
corresponding hostname.

[...]

In a final version of this document, I'd like to see a more rigorous
(pseudocode?) description of what the client and the exit node need to
check when, and what they do in response.  (e.g., "upon receiving a
FOO cell, the exit node verifies that Bar.  If not, ...") This would
make the implementation easier to check against the spec, and the spec
easier for dns gurus to audit.

cheers,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120309100101</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-09 10:01:01-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

Nick Mathewson &lt;nickm@alum.mit.edu&gt; writes:

&gt; On Thu, Jan 26, 2012 at 8:38 PM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; After discussion in tickets #4773 and #3587 this is a pre-draft of a
&gt;&gt; proposal that revamps the Extended ORport, introduced in proposal 180,
&gt;&gt; &lt;snip&gt;
&gt;&gt;   communication between the tor process and the pluggable transport
&gt;&gt;   proxy. To achieve this, this proposal refactors the extended ORPort
&gt;&gt;   protocol specified in Proposal 180, and introduces a new port,
&gt;&gt;   TransportControlPort, whose sole role is the exchange of control
&gt;&gt;   information between transport proxies and tor.
&gt;
&gt; So before we get too far into this, let's do a protocol overview! I'd
&gt; suggest inserting something like this into the text, assuming that it
&gt; is actually what you meant:
&gt;
&gt; "Server-side Transports need to talk to the Tor server about
&gt; individual connections, and continue to do so as the connection is
&gt; ongoing.  To do so,
&gt; the transports deliver each connection to an "Extended ORPort", where
&gt; they provide metadata and agree on an identifier for each tunneled
&gt; connection.  Once this handshake occurs, the OR protocol proceeds
&gt; unchanged.
&gt;
&gt; Additionally, each transport maintains a single connection to Tor's
&gt; "TransportControlPort", where it receives instructions from Tor about
&gt; rate-limiting on individual connections.
&gt;

A similar string to this, can be found in the beginning of section
3. . I think we should remove the first paragraph of section 3, and
put your version of the string in the end of section 2.

&gt;&gt; 3. The new extended ORPort protocol
&gt;&gt;
&gt;&gt;  Server transport proxies may need to connect to the bridge and pass
&gt;&gt;  additional information about client connections that the bridge
&gt;&gt;  would ordinarily receive from the kernel's TCP stack.  To do this,
&gt;&gt;  they connect to the "extended server port" as given in
&gt;&gt;  EXTENDED_SERVER_PORT, send a short amount of information, wait for a
&gt;&gt;  response, and then send the user traffic on that port.
&gt;&gt;
&gt;&gt;  The extended server port protocol is as follows:
&gt;&gt;
&gt;&gt;     COMMAND [2 bytes, big-endian]
&gt;&gt;     BODYLEN [2 bytes, big-endian]
&gt;&gt;     BODY [BODYLEN bytes]
&gt;&gt;
&gt;&gt;     Commands sent from the transport proxy to the bridge are:
&gt;&gt;
&gt;&gt;     [0x0000] DONE: There is no more information to give. (body ignored)
&gt;
&gt; Let's add, "the next bytes sent by the transport will be those
&gt; tunneled over it."
&gt;

I agree.

&gt;&gt;     [0x0001] USERADDR: an address:port string that represents the user's
&gt;&gt;       address.
&gt;&gt;
&gt;&gt;     [0x0002] WANT_CONTROL: A body-less message which indicates that
&gt;&gt;       the transport proxy wants to use the TransportControlPort of
&gt;&gt;       the bridge.  It SHOULD be followed by a CONTROL command from
&gt;&gt;       the bridge, otherwise the transport may close the connection.
&gt;&gt;
&gt;&gt; # will this work?
&gt;
&gt; Hm.  I think it'd be better to have this command mean "We support the
&gt; transportcontrolport protocol," not "you must use the
&gt; transportcontrolport protocol!"  After all, if Tor _doesn't_ tell the
&gt; transport about rate-limiting, it's not like anything breaks
&gt; disastrously.
&gt;

Hm, when I thought of 'WANT_CONTROL', I was considering that there
might be transports that absolutely _require_ the use of
TransportControlPort. Since we don't have such transports at the
moment, and the short-term future transports don't seem to require
TransportControlPort, I guess it could be OK to diss WANT_CONTROL for
now.

Still, I'm not sure if tor should do business with a transport proxy
that does _not_ support the TransportControlPort protocol. It wouldn't
surprise me if there are bridge operators out there who consider
rate-limiting essential.

&gt;&gt;     Replies sent from tor to the proxy are:
&gt;&gt;
&gt;&gt;     [0x1000] OKAY: Send the user's traffic. (body ignored)
&gt;&gt;
&gt;&gt;     [0x1001] DENY: Tor would prefer not to get more traffic from
&gt;&gt;       this address for a while. (body ignored)
&gt;&gt;
&gt;&gt;     [0x1002] CONTROL: a NUL-terminated "identifier" string, followed
&gt;&gt;       by a second NUL-terminated string of the &lt;address&gt;:&lt;port&gt; of
&gt;&gt;       the TransportControlPort. The pluggable transport proxy must
&gt;&gt;       use the "identifier" to access the TransportControlPort.
&gt;&gt;
&gt;&gt; # pass TransportControlPort &lt;address&gt;:&lt;port&gt; through env. vars?
&gt;
&gt; Seems wise, sure.
&gt;

OK, then, CONTROL should simply contain the TransportControlPort
identifier and we should update 180 to specify how we pass the
TransportControlPort creds through environment variables.

&gt;&gt; # what should parties do when they receive a command they don't
&gt;&gt; # understand?  should we enforce forward-compatibility with protocol
&gt;&gt; # versioning or with "ignore commands you don't understand", or what?
&gt;
&gt; Let's say "ignore."  If you want, we can reserve the top bit of each
&gt; command to indicate "you must understand this; if you don't, close the
&gt; connection."
&gt;

'ignore' sounds fine. If you think that reserving the top bit will be
helpful in the long-run, I guess we should do it.

&gt;&gt;  [We could also use an out-of-band signalling method to tell Tor
&gt;&gt;  about client addresses, but that's a historically error-prone way
&gt;&gt;  to go about annotating connections.]
&gt;
&gt; Yes; let's not do that.
&gt;

That was actually your own text copied from 180. Since you seem to
agree with your one-year-younger self, I guess we can erase it from
the proposals :)

&gt;&gt; The new TransportControlPort protocol
&gt;&gt;
&gt;&gt;  The TransportControlPort protocol is as follows:
&gt;&gt;
&gt;&gt;     COMMAND [2 bytes, big-endian]
&gt;&gt;     BODYLEN [2 bytes, big-endian]
&gt;&gt;     BODY [BODYLEN bytes]
&gt;&gt;
&gt;&gt;     Association commands sent from the transport proxy to the bridge
&gt;&gt;     are:
&gt;&gt;
&gt;&gt;     [0x0000] ASSOCIATE: a NUL-terminated "identifier" string. See
&gt;&gt;      'Association' section below.
&gt;
&gt; Hm.  I think that each command should have an associated identifier,
&gt; and that identifiers should be (say) 16-byte binary values.  All this
&gt; hex encoding/decoding seems pointless, since this isn't a
&gt; text-oriented protocol.  So how about
&gt;      ConnectionID [16 bytes]
&gt;      Command [2 bytes]
&gt;      Bodylen [2 bytes]
&gt;      Body [bodylen bytes]
&gt;

Looks good!

&gt;&gt;     Association commands sent from the bridge to the transport proxy
&gt;&gt;     are:
&gt;&gt;
&gt;&gt;     [0x1000] ASSOCIATED: Sent upon receiving a legit ASSOCIATE
&gt;&gt;       command from a transport proxy. (body ignored)
&gt;&gt;
&gt;&gt;     [0x1001] NOT_ASSOCIATED: Sent after the bridge receives a
&gt;&gt;       non-legit ASSOCIATE command from a transport proxy. Also sent
&gt;&gt;       when the bridge receives a non-ASSOCIATE command from a
&gt;&gt;       non-associated transport proxy. Upon sending this command, the
&gt;&gt;       bridge SHOULD close the connection. (body ignored)
&gt;&gt;
&gt;&gt;     Configuration commands sent from the transport proxy to the
&gt;&gt;     bridge:
&gt;&gt;
&gt;&gt;     [0x0001] RATE_LIMITED: Message confirming that the rate limiting
&gt;&gt;       request of the bridge was carried out successfully (body
&gt;&gt;       ignored). See the 'Rate Limiting' section below.
&gt;&gt;
&gt;&gt;     [0x0001] NOT_RATE_LIMITED: Message notifying that the transport
&gt;&gt;       proxy failed to carry out the rate limiting request of the
&gt;&gt;       bridge (body ignored). See the 'Rate Limiting' section below.
&gt;&gt;
&gt;&gt;     Configuration commands sent from the bridge to the transport
&gt;&gt;     proxy are:
&gt;&gt;
&gt;&gt;     [0x1002] RATE_LIMIT: Carries information on how the pluggable
&gt;&gt;       transport proxy should rate-limit its traffic. See the 'Rate
&gt;&gt;       Limiting' section below.
&gt;&gt;
&gt;&gt; # what should parties do when they receive a command they don't understand?
&gt;
&gt; Send an "unrecognized command error", perhaps.  Or ignore it.  If the
&gt; latter, let's add a way to declare what version of this protocol you
&gt; will understand.
&gt;

Since we like 'ignore' in the 'ExtendedOR Protocol', we can use
'ignore' here too. Maybe.

&gt;&gt; 3.1. Association and identifier creation
&gt;&gt;
&gt;&gt; For Tor and a transport proxy to communicate using the
&gt;&gt; TransportControlPort, an identifier must have already been negotiated
&gt;&gt; using the 'CONTROL' command of Extended ORPort.
&gt;&gt;
&gt;&gt; The TransportControlPort identifier should not be predictable by a
&gt;&gt; user who hasn't received a 'CONTROL' command from the Extended
&gt;&gt; ORPort. For this reason, the TransportControlPort identifier should
&gt;&gt; not be cryptographically-weak or deterministically created.
&gt;&gt;
&gt;&gt; Tor should create its identifiers by generating 16 bytes of random
&gt;&gt; data and hashing them with the SHA256 cryptographic hash function.
&gt;&gt; The identifier string transmitted with the 'CONTROL' command should be
&gt;&gt; the hex representation of the SHA256 output.
&gt;
&gt; The hashing step seems pointless; why not just generate 16 random
&gt; bytes and use those?
&gt;

I'm stupid.

&gt;&gt; 4. Configuration commands
&gt;&gt;
&gt;&gt; 4.1. Rate Limiting
&gt;&gt;
&gt;&gt; A tor relay should be able to inform a transport proxy in real-time
&gt;&gt; about its rate-limiting needs.
&gt;&gt;
&gt;&gt; This can be achieved by using the TransportControlPort and sending a
&gt;&gt; 'RATE_LIMIT' command to the transport proxy.
&gt;&gt;
&gt;&gt; The body of the 'RATE_LIMIT' command should carry two integers, in
&gt;&gt; NUL-terminated ASCII string format, representing the bandwidth rate
&gt;&gt; and bandwidth burst in 'bytes per second', that the transport proxy
&gt;&gt; must set.
&gt;&gt;
&gt;&gt; # better transmit format? After reading langsec.org, I prefer to avoid
&gt;&gt; # length fields. Not that this format is bug-proof...
&gt;
&gt; 4 bytes, big-endian, I'd say.
&gt;

I like. That was what I wanted to do originally, but I then discarded
it as non-future-proof enough.

Let's pump it up to "The body of the 'RATE_LIMIT' command should carry
two integers describing 'bytes per second'. Each of them is 8 bytes,
big-endian...".

That comes to 18.45 exabytes per second, which should be quite
future-proof.

&gt;&gt; When the transport proxy sets the appropriate rate limiting, it should
&gt;&gt; send back a 'RATE_LIMITED' command. If it fails while setting up rate
&gt;&gt; limiting, it should send back a 'NOT_RATE_LIMITED' command.
&gt;&gt;
&gt;&gt; After sending a 'RATE_LIMIT' command. the tor bridge might want to
&gt;&gt; stop pushing data to the transport proxy, till it receives a
&gt;&gt; 'RATE_LIMITED' command. If, instead, it receives a 'NOT_RATE_LIMITED'
&gt;&gt; command it might want to shutdown its connections to the transport
&gt;&gt; proxy.
&gt;&gt;
&gt;&gt; # is this realistic?
&gt;
&gt; Hm.  There probably also wants to be an overall rate limit that
&gt; applies to all connections.  Also, there should be a way for the
&gt; transport to report to Tor how many bytes it's actually using, I
&gt; think, if the bytes on the wire are more vebose than the traffic they
&gt; encode.
&gt;

Actually, when I was thinking of 'RATE_LIMIT', I was thinking that the
rate limit value describes "the overall rate limit that applies to all
connections". I _wasn't_ thinking of it as per-connection.
I know it feels stupid and/or unintuitive to specify the global rate
limit in a per-connection stream, but it seemed like the simplest way
to do it. What do you think?

I also agree that there should be a way for the transport to report to
Tor how many bytes it's actually using.

Specifically, my proposal does *not* specify how transport proxies
pass usage statistics to tor. This is quite needed at the moment.

&gt;&gt; 5. Security Considerations
&gt;&gt;
&gt;&gt; Extended ORPort or TransportControlPort do _not_ provide link
&gt;&gt; confidentiality, authentication or integrity. Sensitive data, like
&gt;&gt; cryptographic material, should not be transferred through them.
&gt;&gt;
&gt;&gt; Note that an attacker with superuser access, is able to sniff network
&gt;&gt; traffic, and capture TransportControlPort identifiers and any data
&gt;&gt; passed through those ports.
&gt;&gt;
&gt;&gt; # Is it worth adding an SSL layer (passing pub. key fpr via
&gt;&gt; # env. vars?)? :/
&gt;
&gt; I say no; though it probably _is_ worthwhile to say "This should only
&gt; use localhost, and should shout very loudly if you try to bind or
&gt; connect somewhere else with it."
&gt;

Sounds good.

&gt;&gt; # Talk about Incentives of tor or transport proxies to comply to the
&gt;&gt; # wishes of each other. Ways to detect nonconformism. (threat
&gt;&gt; # model. Should tor speak with 3v1l transport proxies in the first
&gt;&gt; # place?)
&gt;
&gt; I disagree with that; the transport proxies are run by the bridge
&gt; operators and need to do more or less what they're supposed to do.
&gt; Trying to get proxies to be sandboxable or something seems like a much
&gt; bigger and sorta unrelated task.
&gt;
&gt; yrs,

If you haven't done it already, I'll try to update the proposal today
or tomorrow, and also specify how statistics should be passed around.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120313033419</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-13 03:34:19-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

On Fri, Mar 9, 2012 at 5:01 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wr=
ote:
[...]
&gt;
&gt; Hm, when I thought of 'WANT_CONTROL', I was considering that there
&gt; might be transports that absolutely _require_ the use of
&gt; TransportControlPort. Since we don't have such transports at the
&gt; moment, and the short-term future transports don't seem to require
&gt; TransportControlPort, I guess it could be OK to diss WANT_CONTROL for
&gt; now.
&gt;
&gt; Still, I'm not sure if tor should do business with a transport proxy
&gt; that does _not_ support the TransportControlPort protocol. It wouldn't
&gt; surprise me if there are bridge operators out there who consider
&gt; rate-limiting essential.

I think we'll do better to just support stuff that doesn't support
this protocol.  Yes, it's important for quality-of-implementation, but
from a development POV, it is a pain to require that every plugin
developer support this protocol too -- and that you support this
protocol before you can even test your plugin with Tor.

[...]
Snipping stuff where we don't disagree about what to do with the proposal.


&gt; I like. That was what I wanted to do originally, but I then discarded
&gt; it as non-future-proof enough.
&gt;
&gt; Let's pump it up to "The body of the 'RATE_LIMIT' command should carry
&gt; two integers describing 'bytes per second'. Each of them is 8 bytes,
&gt; big-endian...".
&gt;
&gt; That comes to 18.45 exabytes per second, which should be quite
&gt; future-proof.

If we're trying that hard to be future-proof, let's have separate read
and write caps, in case we need them someday.


&gt;&gt;&gt; When the transport proxy sets the appropriate rate limiting, it should
&gt;&gt;&gt; send back a 'RATE_LIMITED' command. If it fails while setting up rate
&gt;&gt;&gt; limiting, it should send back a 'NOT_RATE_LIMITED' command.
&gt;&gt;&gt;
&gt;&gt;&gt; After sending a 'RATE_LIMIT' command. the tor bridge might want to
&gt;&gt;&gt; stop pushing data to the transport proxy, till it receives a
&gt;&gt;&gt; 'RATE_LIMITED' command. If, instead, it receives a 'NOT_RATE_LIMITED'
&gt;&gt;&gt; command it might want to shutdown its connections to the transport
&gt;&gt;&gt; proxy.
&gt;&gt;&gt;
&gt;&gt;&gt; # is this realistic?
&gt;&gt;
&gt;&gt; Hm. =A0There probably also wants to be an overall rate limit that
&gt;&gt; applies to all connections. =A0Also, there should be a way for the
&gt;&gt; transport to report to Tor how many bytes it's actually using, I
&gt;&gt; think, if the bytes on the wire are more vebose than the traffic they
&gt;&gt; encode.
&gt;&gt;
&gt;
&gt; Actually, when I was thinking of 'RATE_LIMIT', I was thinking that the
&gt; rate limit value describes "the overall rate limit that applies to all
&gt; connections". I _wasn't_ thinking of it as per-connection.
&gt; I know it feels stupid and/or unintuitive to specify the global rate
&gt; limit in a per-connection stream, but it seemed like the simplest way
&gt; to do it. What do you think?

I think we could probably get away with a global rate limit here.

&gt; I also agree that there should be a way for the transport to report to
&gt; Tor how many bytes it's actually using.
&gt;
&gt; Specifically, my proposal does *not* specify how transport proxies
&gt; pass usage statistics to tor. This is quite needed at the moment.

We could have a similar BYTES_USED command sent from the proxy to Tor.
 Probably we should reserve a range of command values for use by
commands like this where the transport proxy is reporting stuff to Tor
that isn't in response to a command from Tor.

looking forward to the next version,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120314211406</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-14 21:14:06-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

Nick Mathewson &lt;nickm@alum.mit.edu&gt; writes:

&gt; On Fri, Mar 9, 2012 at 5:01 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; [...]
&gt;
&gt;&gt; I like. That was what I wanted to do originally, but I then discarded
&gt;&gt; it as non-future-proof enough.
&gt;&gt;
&gt;&gt; Let's pump it up to "The body of the 'RATE_LIMIT' command should carry
&gt;&gt; two integers describing 'bytes per second'. Each of them is 8 bytes,
&gt;&gt; big-endian...".
&gt;&gt;
&gt;&gt; That comes to 18.45 exabytes per second, which should be quite
&gt;&gt; future-proof.
&gt;
&gt; If we're trying that hard to be future-proof, let's have separate read
&gt; and write caps, in case we need them someday.
&gt;

I see what you mean :)
OK, the updated proposal is doing it with _4_ bytes, big-endian.

The Tor developers of the future, can make a 'RATE_LIMIT_2' command.

&gt;
&gt; &lt;snip&gt;
&gt;
&gt;&gt; I also agree that there should be a way for the transport to report to
&gt;&gt; Tor how many bytes it's actually using.
&gt;&gt;
&gt;&gt; Specifically, my proposal does *not* specify how transport proxies
&gt;&gt; pass usage statistics to tor. This is quite needed at the moment.
&gt;
&gt; We could have a similar BYTES_USED command sent from the proxy to Tor.
&gt;  Probably we should reserve a range of command values for use by
&gt; commands like this where the transport proxy is reporting stuff to Tor
&gt; that isn't in response to a command from Tor.
&gt;

I decided to not include any statistics information in this version of
the proposal. Let's do that as part of #5040 ASAP.

Inlining the updated proposal in my next mail.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120314211823</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-14 21:18:23-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

I pushed an updated version of this proposal to a branch named
'bug4773' in 'https://git.gitorious.org/torspec/torspec.git'.

Inlining updated proposal:

Filename: xxx-transport-control-ports.txt
Title: Extended ORPort and TransportControlPort
Author: George Kadianakis, Nick Mathewson
Created: 14 Mar 2012
Status: Open
Target: 0.2.4.x

1. Overview

  Proposal 180 defined Tor pluggable transports, a way to decouple
  protocol-level obfuscation from the core Tor protocol in order to
  better resist client-bridge censorship. This is achieved by
  introducing pluggable transport proxies, programs that obfuscate Tor
  traffic to resist DPI detection.

  Proposal 180 defined a way for pluggable transport proxies to
  communicate with local Tor clients and bridges, so as to exchange
  traffic. This document extends this communication protocol, so that
  pluggable transport proxies can exchange arbitrary operational
  information and metadata with Tor clients and bridges.

2. Motivation

  The communication protocol specified in Proposal 180 gives a way
  for transport proxies to announce the IP address of their clients
  to tor. Still, modern pluggable transports might have more (?)
  needs than this. For example:

  1. Tor might want to inform pluggable transport proxies on how to
     rate-limit incoming or outgoing connections.

  2. Server pluggable transport proxies might want to pass client
     information to an anti-active-probing system controlled by tor.

  3. Tor might want to temporarily stop a transport proxy from
     obfuscating traffic.

  To satisfy the above use cases, there must be real-time
  communication between the tor process and the pluggable transport
  proxy. To achieve this, this proposal refactors the Extended ORPort
  protocol specified in Proposal 180, and introduces a new port,
  TransportControlPort, whose sole role is the exchange of control
  information between transport proxies and tor.

  Specifically, transports proxies deliver each connection to the
  "Extended ORPort", where they provide metadata and agree on an
  identifier for each tunneled connection.  Once this handshake
  occurs, the OR protocol proceeds unchanged.

  Additionally, each transport maintains a single connection to Tor's
  "TransportControlPort", where it receives instructions from Tor
  about rate-limiting on individual connections.

3. The new port protocols

3.1. The new extended ORPort protocol

  The extended server port protocol is as follows:

     COMMAND [2 bytes, big-endian]
     BODYLEN [2 bytes, big-endian]
     BODY [BODYLEN bytes]

     Commands sent from the transport proxy to the bridge are:

     [0x0000] DONE: There is no more information to give. The next
       bytes sent by the transport will be those tunneled over it.
       (body ignored)

     [0x0001] USERADDR: an address:port string that represents the user's
       address.

     Replies sent from tor to the proxy are:

     [0x1000] OKAY: Send the user's traffic. (body ignored)

     [0x1001] DENY: Tor would prefer not to get more traffic from
       this address for a while. (body ignored)

     [0x1002] CONTROL: a NUL-terminated "identifier" string. The
       pluggable transport proxy must use the "identifier" to access
       the TransportControlPort. See the 'Association and identifier
       creation' section below.

  Parties should ignore command codes that they do not understand.

3.2. The new TransportControlPort protocol

  The TransportControlPort protocol is as follows:

     CONNECTIONID[16 bytes, big-endian]
     COMMAND [2 bytes, big-endian]
     BODYLEN [2 bytes, big-endian]
     BODY [BODYLEN bytes]

     Commands sent from the transport proxy to the bridge:

     [0x0001] RATE_LIMITED: Message confirming that the rate limiting
       request of the bridge was carried out successfully (body
       ignored). See the 'Rate Limiting' section below.

     [0x0002] NOT_RATE_LIMITED: Message notifying that the transport
       proxy failed to carry out the rate limiting request of the
       bridge (body ignored). See the 'Rate Limiting' section below.

     Configuration commands sent from the bridge to the transport
     proxy are:

     [0x1001] NOT_ALLOWED: Message notifying that the CONNECTIONID
       could not be matched with an authorized connection ID. The
       bridge SHOULD shutdown the connection.

     [0x1001] RATE_LIMIT: Carries information on how the pluggable
       transport proxy should rate-limit its traffic. See the 'Rate
       Limiting' section below.

  CONNECTIONID should carry the connection identifier described in the
  'Association and identifier creation' section.

  Parties should ignore command codes that they do not understand.

3.3. Association and identifier creation

  For Tor and a transport proxy to communicate using the
  TransportControlPort, an identifier must have already been negotiated
  using the 'CONTROL' command of Extended ORPort.

  The TransportControlPort identifier should not be predictable by a
  user who hasn't received a 'CONTROL' command from the Extended
  ORPort. For this reason, the TransportControlPort identifier should
  not be cryptographically-weak or deterministically created.

  Tor MUST create its identifiers by generating 16 bytes of random
  data.

4. Configuration commands

4.1. Rate Limiting

  A Tor relay should be able to inform a transport proxy in real-time
  about its rate-limiting needs.

  This can be achieved by using the TransportControlPort and sending a
  'RATE_LIMIT' command to the transport proxy.

  The body of the 'RATE_LIMIT' command should contain two integers,
  4 bytes each, in big-endian format. The two numbers should represent
  the bandwidth rate and bandwidth burst respectively in 'bytes per
  second' which the transport proxy must set as its overall
  rate-limiting setting.

  When the transport proxy sets the appropriate rate limiting, it
  should send back a 'RATE_LIMITED' command. If it fails while setting
  up rate limiting, it should send back a 'NOT_RATE_LIMITED' command.

  After sending a 'RATE_LIMIT' command. the tor bridge MAY want to
  stop pushing data to the transport proxy, till it receives a
  'RATE_LIMITED' command. If, instead, it receives a 'NOT_RATE_LIMITED'
  command it MAY want to shutdown its connections to the transport
  proxy.

5. Security Considerations

  Extended ORPort or TransportControlPort do _not_ provide link
  confidentiality, authentication or integrity. Sensitive data, like
  cryptographic material, should not be transferred through them.

  An attacker with superuser access, is able to sniff network traffic,
  and capture TransportControlPort identifiers and any data passed
  through those ports.

  Tor SHOULD issue a warning if the bridge operator tries to bind
  Extended ORPort or TransportControlPort to a non-localhost address.

  Pluggable transport proxies SHOULD issue a warning if they are
  instructed to connect to a non-localhost Extended ORPort or
  TransportControlPort.

6. Future

  In the future, we might have pluggable transports which require the
  _client_ transport proxy to use the TransportControlPort and exchange
  control information with the Tor client. The current proposal doesn't
  yet support this, but we should not add functionality that will
  prevent it from being possible.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310001819</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-10 00:18:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

Nick Mathewson &lt;nickm@freehaven.net&gt; writes:

&gt; Filename: 195-TLS-normalization-for-024.txt
&gt; Title: TLS certificate normalization for Tor 0.2.4.x
&gt; Author: Jacob Appelbaum, Gladys Shufflebottom, Nick Mathewson, Tim Wilde
&gt; Created: 6-Mar-2012
&gt; Status: Draft
&gt; Target: 0.2.4.x
&gt;
&gt; &lt;snip&gt;
&gt;
&gt; 2. TLS handshake issues
&gt;
&gt; 2.1. Session ID.
&gt;
&gt;    Currently we do not send an SSL session ID, as we do not support session
&gt;    resumption.  However, Apache (and likely other major SSL servers) do have
&gt;    this support, and do send a 32 byte SSLv3/TLSv1 session ID in their Server
&gt;    Hello cleartext.  We should do the same to avoid an easy fingerprinting
&gt;    opportunity.  It may be necessary to lie to OpenSSL to claim that we are
&gt;    tracking session IDs to cause it to generate them for us.
&gt;
&gt;    (We should not actually support session resumption.)
&gt;

This is a nice idea, but it opens us to the obvious active attack of
Them checking if a host *actually* supports session resumption or if
it's faking it.

What is the reason we don't like session resumption? Does it still
makes sense to keep it disabled even after #4436 is implemented?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310010305</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-10 01:03:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

On 2012-03-09, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 195-TLS-normalization-for-024.txt
&gt; Title: TLS certificate normalization for Tor 0.2.4.x
&gt; Author: Jacob Appelbaum, Gladys Shufflebottom, Nick Mathewson, Tim Wilde
&gt; Created: 6-Mar-2012
&gt; Status: Draft
&gt; Target: 0.2.4.x
&gt;
&gt;
&gt; 0. Introduction
&gt;
&gt;    The TLS (Transport Layer Security) protocol was designed for security
&gt;    and extensibility, not for uniformity.  Because of this, it's not
&gt;    hard for an attacker to tell one application's use of TLS from
&gt;    another's.
&gt;
&gt;    We proposes improvements to Tor's current TLS certificates to
&gt;    reduce the distinguishability of Tor traffic.
&gt;
&gt; 0.1. History
&gt;
&gt;    This draft is based on parts of Proposal 179, by Jacob Appelbaum
&gt;    and Gladys Shufflebottom, but removes some already implemented parts
&gt;    and replaces others.
&gt;
&gt; 0.2. Non-Goals
&gt;
&gt;    We do not address making TLS harder to distinguish after the
&gt;    handshake is done.  We also do not discuss TLS improvements not
&gt;    related to distinguishability (such as increased key size, algorithm
&gt;    choice, and so on).
&gt;
&gt; 1. Certificate Issues
&gt;
&gt;    Currently, Tor generates certificates according to a fixed pattern,
&gt;    where lifetime is fairly small, the certificate Subject DN is a
&gt;    single randomly generated CN, and the certificate Issuer DN is a
&gt;    different single randomly generated CN.
&gt;
&gt;    We propose several ways to improve this below.
&gt;
&gt; 1.1. Separate initial certificate from link certificate
&gt;
&gt;    When Tor is using the v2 or v3 link handshake (see tor-spec.txt), it
&gt;    currently presents an initial handshake authenticating the link key
&gt;    with the identity key.
&gt;
&gt;    We propose instead that Tor should be able to present an arbitrary
&gt;    initial certificate (so long as its key matches the link key used in
&gt;    the actual TLS handshake), and then present the real certificate
&gt;    authenticating the link key during the Tor handshake.  (That is,
&gt;    during the v2 handshake's renegotiation step, or in the v3
&gt;    handshake's CERTS cell.)
&gt;
&gt;    The TLS protocol and the Tor handshake protocol both allow this, and
&gt;    doing so will give us more freedom for the alternative certificate
&gt;    presentation ideas below.
&gt;
&gt; 1.2. Allow externally generated certificates
&gt;
&gt;    It should be possible for a Tor relay operator to generate and
&gt;    provide their own certificate and secret key.  This will allow a relay or
&gt;    bridge operator to use a certificate signed by any member of the "SSL
&gt;    mafia,"[*] to generate their own self-signed certificate, and so on.
&gt;
&gt;    For compatibility, we need to require that the key be an RSA secret
&gt;    key, of at least 1024 bits, generated with e=65537.
&gt;
&gt;    As a proposed interface, let's require that the certificate be stored
&gt;    in ${DataDir}/tls_cert/tls_certificate.crt , that the secret key be
&gt;    stored in ${DataDir}/tls_cert/private_tls_key.key , and that they be
&gt;    used instead of generating our own certificate whenever the new
&gt;    boolean option "ProvidedTLSCert" is set to true.
&gt;
&gt;    (Alternative interface: Allow the cert and key cert to be stored
&gt;    wherever, and have the user provide their respective locations with
&gt;    TLSCertificateFile and TLSCertificateKeyFile options.)

Users need to specify a full certificate chain, not just the
end-entity certificate.

Have you considered whether to allow the user to store the TLS
certificate's private key in a hardware device?

&gt;
&gt; 1.3. Longer certificate lifetimes
&gt;
&gt;    Tor's current certificates aren't long-lived, which makes them
&gt;    different from most other certificates in the wild.
&gt;
&gt;    Typically, certificates are valid for a year, so let's use that as
&gt;    our default lifetime.  [TODO: investigate whether "a year" for most
&gt;    CAs and self-signed certs have their validity dates running for a
&gt;    calendar year ending at the second of issue, one calendar year
&gt;    ending at midnight, or 86400*(365.5 +/- .5) seconds, or what.]
&gt;
&gt;    There are two ways to approach this.  We could continue our current
&gt;    certificate management approach where we frequently generate new
&gt;    certificates (albeit with longer lifetimes), or we could make a cert,
&gt;    store it to disk, and use it for all or most of its declared
&gt;    lifetime.
&gt;
&gt;    If we continue to use fairly short lifetimes for the _true_ link
&gt;    certificates (the ones presented during the Tor handshake), then
&gt;    presenting long-lived certificates doesn't hurt us much: in the event
&gt;    of a link-key-only compromise, the adversary still couldn't actually
&gt;    impersonate a server for long.[**]
&gt;
&gt;    Using shorter-lived certificates with long nominal lifetimes doesn't
&gt;    seem to buy us much.  It would let us rotate link keys more
&gt;    frequently, but we're already getting forward secrecy from our use of
&gt;    diffie-hellman key agreement.  Further, it would make our behavior
&gt;    look less like regular TLS behavior, where certificates are typically
&gt;    used for most of their nominal lifetime.  Therefore, let's store and
&gt;    use certs and link keys for the full year.
&gt;
&gt; 1.4. Self-signed certificates with better DNs
&gt;
&gt;    When we generate our own certificates, we currently set no DN fields
&gt;    other than the commonName.  This behavior isn't terribly common:
&gt;    users of self-signed certs usually/often set other fields too.
&gt;    [TODO: find out frequency.]
&gt;
&gt;    Unfortunately, it appears that no particular other set of fields or
&gt;    way of filling them out _is_ universal for self-signed certificates,
&gt;    or even particularly common.  The most common schema seem to be for
&gt;    things most censors wouldn't mind blocking, like embedded devices.
&gt;    Even the default openssl schema, though common, doesn't appear to
&gt;    represent a terribly large fraction of self-signed websites.  [TODO:
&gt;    get numbers here.]
&gt;
&gt;    So the best we can do here is probably to reproduce the process that
&gt;    results in self-signed certificates originally: let the bridge and relay
&gt;    operators to pick the DN fields themselves.  This is an annoying
&gt;    interface issue, and wants a better solution.
&gt;
&gt; 1.5. Better commonName values
&gt;
&gt;    Our current certificates set the commonName to a randomly generated
&gt;    field like www.rmf4h4h.net.  This is also a weird behavior: nearly
&gt;    all TLS certs used for web purposes will have a hostname that
&gt;    resolves to their IP.
&gt;
&gt;    The simplest way to get a plausible commonName here would be to do a
&gt;    reverse lookup on our IP and try to find a good hostname.  It's not
&gt;    clear whether this would actually work out in practice, or whether
&gt;    we'd just get dynamic-IP-pool hostnames everywhere blocked when they
&gt;    appear in certificates.

What if a bridge's IP address and reverse-DNS hostname change?

How does this interact with the v3 link protocol signaling mechanism?

How will a bridge's client be told what hostname to specify in its
server name indication field?


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310010625</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-10 01:06:25-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

On 2012-03-10, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; Nick Mathewson &lt;nickm@freehaven.net&gt; writes:
&gt;
&gt;&gt; Filename: 195-TLS-normalization-for-024.txt
&gt;&gt; Title: TLS certificate normalization for Tor 0.2.4.x
&gt;&gt; Author: Jacob Appelbaum, Gladys Shufflebottom, Nick Mathewson, Tim Wilde
&gt;&gt; Created: 6-Mar-2012
&gt;&gt; Status: Draft
&gt;&gt; Target: 0.2.4.x
&gt;&gt;
&gt;&gt; &lt;snip&gt;
&gt;&gt;
&gt;&gt; 2. TLS handshake issues
&gt;&gt;
&gt;&gt; 2.1. Session ID.
&gt;&gt;
&gt;&gt;    Currently we do not send an SSL session ID, as we do not support
&gt;&gt; session
&gt;&gt;    resumption.  However, Apache (and likely other major SSL servers) do
&gt;&gt; have
&gt;&gt;    this support, and do send a 32 byte SSLv3/TLSv1 session ID in their
&gt;&gt; Server
&gt;&gt;    Hello cleartext.  We should do the same to avoid an easy fingerprinting
&gt;&gt;    opportunity.  It may be necessary to lie to OpenSSL to claim that we
&gt;&gt; are
&gt;&gt;    tracking session IDs to cause it to generate them for us.
&gt;&gt;
&gt;&gt;    (We should not actually support session resumption.)
&gt;&gt;
&gt;
&gt; This is a nice idea, but it opens us to the obvious active attack of
&gt; Them checking if a host *actually* supports session resumption or if
&gt; it's faking it.
&gt;
&gt; What is the reason we don't like session resumption? Does it still
&gt; makes sense to keep it disabled even after #4436 is implemented?

Session resumption requires keeping some key material around after a
TLS connection is closed, thereby possibly denting Tor's link-protocol
forward secrecy if a bridge/relay is compromised soon after a
connection ends.

OpenSSL provides an implementation of session resumption, with the
code quality you should expect to find in a rarely-used piece of
OpenSSL.  There have been several OpenSSL security-fix releases due to
code-exec bugs in the session-resumption code.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310011830</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-10 01:18:30-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

Robert Ransom &lt;rransom.8774@gmail.com&gt; writes:

&gt; On 2012-03-10, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; Nick Mathewson &lt;nickm@freehaven.net&gt; writes:
&gt;&gt;
&gt;&gt;&gt; Filename: 195-TLS-normalization-for-024.txt
&gt;&gt;&gt; Title: TLS certificate normalization for Tor 0.2.4.x
&gt;&gt;&gt; Author: Jacob Appelbaum, Gladys Shufflebottom, Nick Mathewson, Tim Wilde
&gt;&gt;&gt; Created: 6-Mar-2012
&gt;&gt;&gt; Status: Draft
&gt;&gt;&gt; Target: 0.2.4.x
&gt;&gt;&gt;
&gt;&gt;&gt; &lt;snip&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; 2. TLS handshake issues
&gt;&gt;&gt;
&gt;&gt;&gt; 2.1. Session ID.
&gt;&gt;&gt;
&gt;&gt;&gt;    Currently we do not send an SSL session ID, as we do not support
&gt;&gt;&gt; session
&gt;&gt;&gt;    resumption.  However, Apache (and likely other major SSL servers) do
&gt;&gt;&gt; have
&gt;&gt;&gt;    this support, and do send a 32 byte SSLv3/TLSv1 session ID in their
&gt;&gt;&gt; Server
&gt;&gt;&gt;    Hello cleartext.  We should do the same to avoid an easy fingerprinting
&gt;&gt;&gt;    opportunity.  It may be necessary to lie to OpenSSL to claim that we
&gt;&gt;&gt; are
&gt;&gt;&gt;    tracking session IDs to cause it to generate them for us.
&gt;&gt;&gt;
&gt;&gt;&gt;    (We should not actually support session resumption.)
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; This is a nice idea, but it opens us to the obvious active attack of
&gt;&gt; Them checking if a host *actually* supports session resumption or if
&gt;&gt; it's faking it.
&gt;&gt;
&gt;&gt; What is the reason we don't like session resumption? Does it still
&gt;&gt; makes sense to keep it disabled even after #4436 is implemented?
&gt;
&gt; Session resumption requires keeping some key material around after a
&gt; TLS connection is closed, thereby possibly denting Tor's link-protocol
&gt; forward secrecy if a bridge/relay is compromised soon after a
&gt; connection ends.
&gt;

IIRC stateless TLS session resumption does not quire keeping key
material. The required key material are all stored on the client side.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310090109</emailId><senderName>Oscar Koeroo</senderName><senderEmail>okoeroo@nikhef.nl</senderEmail><timestampReceived>2012-03-10 09:01:09-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

I'd like to comment on this topic, as I see a potential for
improvements to stay below the radar and avoid all kinds of (minor)
detections.


Perhaps countrary to how others reply, forgive me that I comment
inline here as my reply is lengthy and typically comment on the block
of text before it.


On 9/3/12 6:02 PM, Nick Mathewson wrote:
&gt; Filename: 195-TLS-normalization-for-024.txt
&gt; Title: TLS certificate normalization for Tor 0.2.4.x
[...]
&gt;    We proposes improvements to Tor's current TLS certificates to
&gt;    reduce the distinguishability of Tor traffic.
[...]


&gt; 1.2. Allow externally generated certificates
&gt;
&gt;    It should be possible for a Tor relay operator to generate and
&gt;    provide their own certificate and secret key.  This will allow a
&gt;    relay or bridge operator to use a certificate signed by any
&gt;    member of the "SSL mafia,"[*] to generate their own self-signed
&gt;    certificate, and so on.
&gt;
&gt;    For compatibility, we need to require that the key be an RSA secret
&gt;    key, of at least 1024 bits, generated with e=65537.

I would like to suggest to add a statement to use SHA1 (or if you can
work this in) use a SHA2 hash. My motivation here is not to avoid MD5,
but more that the majority of CAs is using SHA1 now and will soon
migrate to SHA2. Using MD5 is a yellow flag in some situation.


&gt;    As a proposed interface, let's require that the certificate be
&gt;    stored in ${DataDir}/tls_cert/tls_certificate.crt , that the
&gt;    secret key be stored in ${DataDir}/tls_cert/private_tls_key.key ,
&gt;    and that they be used instead of generating our own certificate
&gt;    whenever the new boolean option "ProvidedTLSCert" is set to true.
&gt;
&gt;    (Alternative interface: Allow the cert and key cert to be stored
&gt;    wherever, and have the user provide their respective locations
&gt;    with TLSCertificateFile and TLSCertificateKeyFile options.)

Would it be possible to use a similar approach to SSLSniff? As it
doesn't really matter what kind of certificate is issued here, you
could think of generating something fitting on the fly. There is a
better motivation further in my reply on what fitting is as this is
part of my comment too.


&gt; 1.3. Longer certificate lifetimes
&gt;
&gt;    Typically, certificates are valid for a year, so let's use that
&gt;    as our default lifetime.  [TODO: investigate whether "a year" for
&gt;    most CAs and self-signed certs have their validity dates running
&gt;    for a calendar year ending at the second of issue, one calendar
&gt;    year ending at midnight, or 86400*(365.5 +/- .5) seconds, or
&gt;    what.]

It depends on the CA and the resource provider. Each have their
influences and various motivations to have result in a certain
validity period. Sometimes it could hint a policy change at a CA or a
change in the resource en service provider.

Let's take exhibit A. over here:
Tuesday, 28 February 2012 2:00:10 PM
Thursday, 28 February 2013 2:10:10 PM

And exhibit B.:
Thursday, 17 November 2011 1:00:00 AM
Saturday, 14 July 2012 1:59:59 AM

This is slightly longer then six months valid and used by a lot of
people.


Most of the times I see certificates get issues regardless of leap
year details. So that would be per calendar year. Just, date to date,
plus or minus one day depending on how cool the CA could be. Or even
plus or minus one month.  In that case you have one year of usage and
one month of a planned migration opportunity to a new certificate.
This is very luxerious and might be rare in the commercial world, but
happens too.


&gt;    There are two ways to approach this.  We could continue our
&gt;    current certificate management approach where we frequently
&gt;    generate new certificates (albeit with longer lifetimes), or we
&gt;    could make a cert, store it to disk, and use it for all or most
&gt;    of its declared lifetime.
&gt;
&gt;    Using shorter-lived certificates with long nominal lifetimes
&gt;    doesn't seem to buy us much.  It would let us rotate link keys
&gt;    more frequently, but we're already getting forward secrecy from
&gt;    our use of diffie-hellman key agreement.  Further, it would make
&gt;    our behavior look less like regular TLS behavior, where
&gt;    certificates are typically used for most of their nominal
&gt;    lifetime.  Therefore, let's store and use certs and link keys for
&gt;    the full year.

I would try to mimic the normal certificate lifecycle. Which means
that a connections will typically not have a certificate validation
time of today. It will most likely be something in the past. It's
typically going to be valid for more then 6 months (otherwise
operational costs are going to be too high if the time is lowered). It
should be used more or less persistently. What I mean by that is that
a client connecting to a service will likely get a similar certificate
in return when it reconnects within the day. This mimics the behavior
of a real servers that would present the same certificate with a
similar connection request. I'm ignoring the existence of TLS.1.1+
here as I'm focussing on patterns and lowering the opportunities for
pattern matching.

Another opportunity here is to use the public key rekeying feature
provided by the CAs. When something might be fishy and you don't
really know if the private key was kept in check, then to avoid a big
fuzz you can go for rekeying. If not used too much you could use this
in Tor's advantages and cycle the keys and keeping the same
certificate. Keeping the same certificate is the persistence I was
focussing on previously.


&gt; 1.4. Self-signed certificates with better DNs
&gt;
&gt;    When we generate our own certificates, we currently set no DN
&gt;    fields other than the commonName.  This behavior isn't terribly
&gt;    common: users of self-signed certs usually/often set other fields
&gt;    too.  [TODO: find out frequency.]

Do you use Subject Alt Names? If not, I would yellow flag your
certificate. If you mimic an HTTPS connection I would use it as a
(partial) signature if you wouldn't comply to RFC2818
(http://tools.ietf.org/html/rfc2818, section 2.2.1).


&gt;    Unfortunately, it appears that no particular other set of fields
&gt;    or way of filling them out _is_ universal for self-signed
&gt;    certificates, or even particularly common.  The most common
&gt;    schema seem to be for things most censors wouldn't mind blocking,
&gt;    like embedded devices.  Even the default openssl schema, though
&gt;    common, doesn't appear to represent a terribly large fraction of
&gt;    self-signed websites.  [TODO: get numbers here.]
&gt;
&gt;    So the best we can do here is probably to reproduce the process
&gt;    that results in self-signed certificates originally: let the
&gt;    bridge and relay operators to pick the DN fields themselves.
&gt;    This is an annoying interface issue, and wants a better solution.

If you want to do sneaky self-signed certificates, you could make the
Subject DN and the Issuer DN different. It would be one less hint or
identifier to track. Typically the amount of traffic to services
hosting self-signed certificates is lower then the big sites,
therefore I think you can take the load of doing this indepth
inspection if you wanted to.

Why can't the tool construct a various amounts of elements (somewhere
between 3 and 7) of RDNs in the Subject and Issuer DNs? The bridge or
relay operators should be able to add a personal touch for human
entropy's sake. It also avoid making similar uber-short Subject DNs
which is an easy pattern to track. I'm amazed this wasn't
observed/used before.

Perhaps it would even make sense to build-in a signing policy for each
bridge or relay, I would pitch it as a tiny-CPS. This means that the
bridges/relays will scope the namespace of the Subject DNs that it
will construct, including the Subject DN of its own CA itself. Normal
CAs (should) typically follow a fix pattern. If the pattern is chosen
believable enough, then you could think of using this predictability
to stay below the radar on that end.

Example:
"/C=NL/O=acme inc/OU=trust me"
"/C=NL/O=acme inc/OU=trusted auth/OU=vaccuum/CN=host-15.dyndns.org

Perhaps this is more engineering work then it will pay off, but ok,
I'm pitching an idea for completeness sake in this sense.


&gt; 1.5. Better commonName values
&gt;
&gt;    Our current certificates set the commonName to a randomly
&gt;    generated field like www.rmf4h4h.net.  This is also a weird
&gt;    behavior: nearly all TLS certs used for web purposes will have a
&gt;    hostname that resolves to their IP.
&gt;
&gt;    The simplest way to get a plausible commonName here would be to
&gt;    do a reverse lookup on our IP and try to find a good hostname.
&gt;    It's not clear whether this would actually work out in practice,
&gt;    or whether we'd just get dynamic-IP-pool hostnames everywhere
&gt;    blocked when they appear in certificates.
&gt;
&gt;    Alternatively, if we are told a hostname in our Torrc (possibly
&gt;    in the Address field), we could try to use that.

Why are we bothering with the Subject DN's CN field in this part? It's
been legacy since May 2000. I would suggest to leave it out and make
it unusable.  Perhaps I'm too modern here and I would creep up on some
radar by doing this...

According to RFC2818: Though shall check the Subject Alt Names first.
If you really don't have a Subject Alt Names block in the cert, then
take the most significant CN field. There is an exception rule which
states that you could use a certificate signed for a different hosts
if the client is expecting this.  These details don't matter here, but
apparently Tor has been hanging on to the exception rule here. I
would yellow flag this 'to safe guard my users'.

If I sound weird in this, have a look at libcurl's way of doing its
checks in the code. I personally favor the OpenSSL connectors for
readability (weirdly enough).

As stated before I would love to see that the connection could be a
truly verifiable correct connection on this level, compliant to
RFC2818 and others.  If DNSnames don't make sense you could think of
adding IP-addresses in the SubjectAltNames of even the CN fields. It's
something you don't see in the commercial CA business that often, but
it happens and could be used to Tor's advantage.






["smime.p7s" (application/pkcs7-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120310154422</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-03-10 15:44:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

The proposal seems quite thought through. Some comments inline:

On 03/09/2012 06:02 PM, Nick Mathewson wrote:
&gt; 
&gt; 
&gt; 1.2. Allow externally generated certificates
&gt; 
&gt;    It should be possible for a Tor relay operator to generate and
&gt;    provide their own certificate and secret key.  This will allow a relay or
&gt;    bridge operator to use a certificate signed by any member of the "SSL
&gt;    mafia,"[*] to generate their own self-signed certificate, and so on.
&gt; 
&gt;    For compatibility, we need to require that the key be an RSA secret
&gt;    key, of at least 1024 bits, generated with e=65537.

I'd go for 2048 bits minimum (CAB forum is moving towards this value soon and
other sources [1] suggest it for long-lived certs as well).

&gt; 1.3. Longer certificate lifetimes
&gt; 
&gt;    Tor's current certificates aren't long-lived, which makes them
&gt;    different from most other certificates in the wild.
&gt; 
&gt;    Typically, certificates are valid for a year, so let's use that as
&gt;    our default lifetime.  [TODO: investigate whether "a year" for most
&gt;    CAs and self-signed certs have their validity dates running for a
&gt;    calendar year ending at the second of issue, one calendar year
&gt;    ending at midnight, or 86400*(365.5 +/- .5) seconds, or what.]

Here are two quick statistics I did on my DB (1.5M+ unique certs), columns are
"count, hour, minute, second":

not_before: http://pastie.org/3564679
not_after: http://pastie.org/3564694

Statitic on validity period:

http://pastie.org/3564701

&gt; 
&gt;    There are two ways to approach this.  We could continue our current
&gt;    certificate management approach where we frequently generate new
&gt;    certificates (albeit with longer lifetimes), or we could make a cert,
&gt;    store it to disk, and use it for all or most of its declared
&gt;    lifetime.

Note that there are many embedded devices that generate certs periodically
(every day, every few days; I wonder if it's because somebody thought about the
"shared prime due to low entropy fiasco" before and wanted to avoid it without
HW RNG.)

I'd suggest we use some similar approach.

&gt;    Using shorter-lived certificates with long nominal lifetimes doesn't
&gt;    seem to buy us much.  It would let us rotate link keys more
&gt;    frequently, but we're already getting forward secrecy from our use of
&gt;    diffie-hellman key agreement.  Further, it would make our behavior
&gt;    look less like regular TLS behavior, where certificates are typically
&gt;    used for most of their nominal lifetime.  Therefore, let's store and
&gt;    use certs and link keys for the full year.

Agreed, good point.

&gt; 
&gt; 1.4. Self-signed certificates with better DNs
&gt; 
&gt;    When we generate our own certificates, we currently set no DN fields
&gt;    other than the commonName.  This behavior isn't terribly common:
&gt;    users of self-signed certs usually/often set other fields too.
&gt;    [TODO: find out frequency.]

One statistic here (EFF's SSL Observatory is more thorough than my DB in
self-signed certs, I'll post a statistic from it later):

http://pastie.org/3564743

But in general thousands of embedded devices share Issuer and Subject RDNs.

&gt;    Unfortunately, it appears that no particular other set of fields or
&gt;    way of filling them out _is_ universal for self-signed certificates,
&gt;    or even particularly common.  The most common schema seem to be for
&gt;    things most censors wouldn't mind blocking, like embedded devices.
&gt;    Even the default openssl schema, though common, doesn't appear to
&gt;    represent a terribly large fraction of self-signed websites.  [TODO:
&gt;    get numbers here.]
&gt; 
&gt;    So the best we can do here is probably to reproduce the process that
&gt;    results in self-signed certificates originally: let the bridge and relay
&gt;    operators to pick the DN fields themselves.  This is an annoying
&gt;    interface issue, and wants a better solution.

There are many embedded devices we could fake (I could put together a list).
Just for fun, we could use 'BlueCoat Series' :-)

My suggestion is that we put a list in Tor so that Tor node picks a
issuer/subject randomly unless operator overrides it (but node needs to stick to
one CN then, at least for a longer period of time - days/weeks).

&gt; 1.5. Better commonName values
&gt; 
&gt;    Our current certificates set the commonName to a randomly generated
&gt;    field like www.rmf4h4h.net.  This is also a weird behavior: nearly
&gt;    all TLS certs used for web purposes will have a hostname that
&gt;    resolves to their IP.
&gt; 
&gt;    The simplest way to get a plausible commonName here would be to do a
&gt;    reverse lookup on our IP and try to find a good hostname.  It's not
&gt;    clear whether this would actually work out in practice, or whether
&gt;    we'd just get dynamic-IP-pool hostnames everywhere blocked when they
&gt;    appear in certificates.
&gt;
&gt;    Alternatively, if we are told a hostname in our Torrc (possibly in
&gt;    the Address field), we could try to use that.

Using reverse IP can be useful if both reverse and forward DNS records match.
Though there are tons of misconfigurations in the wild (either due to not
needing proper configuration or simple mistake).


[1] http://www.keylength.com/en/3/ (or
http://www.ecrypt.eu.org/documents/D.SPA.17.pdf in case someone is interested in
full report)

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120311022458</emailId><senderName>Ralf-Philipp Weinmann</senderName><senderEmail>ralf@coderpunks.org</senderEmail><timestampReceived>2012-03-11 02:24:58-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>


On Mar 10, 2012, at 2:18 AM, George Kadianakis wrote:
&gt; 
&gt; IIRC stateless TLS session resumption does not quire keeping key
&gt; material. The required key material are all stored on the client side.

You're thinking of this RFC5077 or its predecessor RFC4507, which only became \
implemented in OpenSSL 0.9.9 (http://rt.openssl.org/Ticket/Display.html?id=1574). The \
usual way to achieve session resumption before that was to keep around (cache) \
symmetric key data for a predefined period of time. Trouble is that many unixoid OS \
distributions still ship with a system OpenSSL version &lt; 0.9.9.

Cheers,
Ralf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120312172314</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-12 17:23:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

On Fri, Mar 9, 2012 at 7:18 PM, George Kadianakis
 [...]
&gt; What is the reason we don't like session resumption? Does it still
&gt; makes sense to keep it disabled even after #4436 is implemented?

The main reason not to support session resumption is that, as noted
later in this thread, it can require the server to keep key material
around after the original connection has closed.

Now, we could set an extra-short timeout interval here, I guess.  With
a short enough interval, that would be functionally equivalent to what
I proposed, and probably easier to do with OpenSSL via
SSL_CTX_set_timeout() and regular calls to SSL_CTX_flush_sessions().

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120310225338</emailId><senderName>Arturo_Filastò</senderName><senderEmail>hellais@torproject.org</senderEmail><timestampReceived>2012-03-10 22:53:38-0400</timestampReceived><subject>Re: [tor-dev] Deployability of Python software.</subject><body>

On 3/7/12 2:24 AM, intrigeri wrote:
&gt; Hi,
&gt;
&gt; Fabio Pietrosanti (naif) wrote (07 Mar 2012 08:24:50 GMT) :
&gt;&gt; So two activists for example would be able to have a redundant,
&gt;&gt; anonymous, 0-maintenance, easy-to-be-setup web application server.
&gt; This rings a bell:
&gt;
&gt;   https://www.torproject.org/getinvolved/volunteer.html.en#tailsServer
&gt;   https://tails.boum.org/todo/server_edition/ 
&gt;
&gt; I'm sorry I did not read this thread, so this may be totally OT.
&gt;
This is quite OT and I think naif brought the discussion a bit off
of the main discussion at hand (:P). Though while we are at it you may
be interested in checking out Anonymous Web Application Framework which
does exactly what you are describing for web sites.
https://piratenpad.de/p/AnonymousWebApplicationFramework

This will a GSoC project for either GlobaLeaks (if we get in) or Tor.


- Art.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312074725</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-03-12 07:47:25-0400</timestampReceived><subject>Re: [tor-dev] Torperf and #3036</subject><body>

On 3/11/12 5:30 PM, Thomas S. Benjamin wrote:
&gt; I have some time to work on Torperf right now, and I see that there 
&gt; are some changes in the works (#3036).  Can you suggest to me which 
&gt; ticket(s) could currently most use my help?

Hi Tom,

that would be #3036.  I just added another comment updating the status
there.

Thanks for offering to help!

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120312173150</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-12 17:31:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal 195: TLS certificate normalization for Tor 0.2.4.x</subject><body>

On Fri, Mar 9, 2012 at 8:03 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrot=
e:
&gt;
&gt; Users need to specify a full certificate chain, not just the
&gt; end-entity certificate.

Agreed that this is desirable, but if we take that route, we need to
amend the current rule for deciding whether to use the v3/v2 vs the v1
handshake.  Currently, according to tor-spec, a client that sees a
certificate chain should assume that it's getting a v1 handshake.

Fortunately, every version of Tor that only allows the v1 handshake is
now deprecated.

&gt; Have you considered whether to allow the user to store the TLS
&gt; certificate's private key in a hardware device?

Sounds desirable. I have no idea how to do this from OpenSSL, but
there is surely a way.

[...]
&gt;&gt; =A0 =A0The simplest way to get a plausible commonName here would be to d=
o a
&gt;&gt; =A0 =A0reverse lookup on our IP and try to find a good hostname. =A0It's=
 not
&gt;&gt; =A0 =A0clear whether this would actually work out in practice, or whether
&gt;&gt; =A0 =A0we'd just get dynamic-IP-pool hostnames everywhere blocked when t=
hey
&gt;&gt; =A0 =A0appear in certificates.
&gt;
&gt; What if a bridge's IP address and reverse-DNS hostname change?

I believe in that case we would have to generate a new cert.  I have
no idea if this reverse-DNS idea is any good.  Any better ones?

&gt; How does this interact with the v3 link protocol signaling mechanism?

The v3 link protocol signalling mechanism checks for any of the
following not being true
"""
      * The certificate is self-signed
      * Some component other than "commonName" is set in the subject or
        issuer DN of the certificate.
      * The commonName of the subject or issuer of the certificate ends
        with a suffix other than ".net".
      * The certificate's public key modulus is longer than 1024 bits.
"""
So I guess we should amend the proposal to say that nobody is allowed
to self-generate a self-signed cert for a 1024-bit RSA key whose DN
has only  only a commonName ending with .net.

&gt; How will a bridge's client be told what hostname to specify in its
&gt; server name indication field?

I was thinking through a torrc configuration values. Any better ideas?

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120315221051</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-15 22:10:51-0400</timestampReceived><subject>Re: [tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

On Wed, Mar 14, 2012 at 5:18 PM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; I pushed an updated version of this proposal to a branch named
&gt; 'bug4773' in 'https://git.gitorious.org/torspec/torspec.git'.
&gt;
&gt; Inlining updated proposal:
&gt;
&gt; Filename: xxx-transport-control-ports.txt
&gt; Title: Extended ORPort and TransportControlPort
&gt; Author: George Kadianakis, Nick Mathewson
&gt; Created: 14 Mar 2012
&gt; Status: Open
&gt; Target: 0.2.4.x


Thanks!  I have added this as proposal 196.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120315233403</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-03-15 23:34:03-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS - draft finalized into proposal</subject><body>

On 03/12/2012 07:08 PM, Nick Mathewson wrote:
&gt; On Sat, Mar 10, 2012 at 9:22 AM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; 1. Design
&gt;&gt;
&gt;&gt; 1.1 New cells
&gt;&gt;
&gt;&gt;  There will be two new cells, RELAY_DNS_BEGIN and RELAY_DNS_RESPONSE (we'll
&gt;&gt;  use DNS_BEGIN and DNS_RESPONSE for short below).
&gt;&gt;
&gt;&gt;  DNS_BEGIN payload:
&gt;&gt;
&gt;&gt;    DNS packet data (variable length)
&gt;&gt;
&gt;&gt;  The DNS packet must be generated internally by libunbound to avoid
&gt;&gt;  fingerprinting users by differences in client resolvers' behavior.
&gt; 
&gt; Have you looked at the ldns API?  From what I can tell, it is what
&gt; libunbound uses internally, and is what actually generates and handles
&gt; the queries.

Yes, libunbound uses ldns internally. However with ldns you have to do full
traversal to the root manually and watch out for things like CNAME/DNAME. It's
real PITA (for example, in DNSSEC Validator Firefox add-on that uses ldns we
have 13 states that describe various "levels" of validation result).

&gt; Also, from a spec POV, it's better to say "The format must match that
&gt; used by"... than "the packet must be generated by"

OK.

&gt; Last time we talked about this, we mentioned that some fields (like
&gt; the request ID) that we wanted to clean up, and some flags we wanted
&gt; to disallow.  Did we decide not to do that?

Seems I've forgotten to add the part about DNS flags (other things like IDs are
cleaned from the proposal).

I originally proposed to "hardcode" flags: 0x110 (recursive,
checking disabled), EDNS0 DO bit set.

&gt;&gt;  DNS_RESPONSE payload:
&gt;&gt;
&gt;&gt;    total length (2 octets)
&gt;&gt;    data         (variable)
&gt;&gt;
&gt;&gt;  Data contains the reply DNS packet or its part if packet would not fit into
&gt;&gt;  the cell. Total length describes length of complete response packet.
&gt;&gt;
&gt;&gt;  AXFR and IXRF are not supported in this cell by design (see specialized tool
&gt;&gt;  below).
&gt; 
&gt; As noted in the last mail, total_length is needless here; RELAY
&gt; packets already have a length field.

One length field is gone, but we still need total_length since reply DNS packet
may not fit in a single cell (most replies that include DNSSEC data fit within
1-3 cells).

&gt;&gt; 2. Interfaces to applications
&gt;&gt;
&gt;&gt;  DNSPort evdns - existing implementation will be updated to use DNS_BEGIN.
&gt;&gt;
&gt;&gt;  SOCKS proxy - new command will be added, containing RR type, class and
&gt;&gt;  query.  Response will simply contain the DNS packet.
&gt; 
&gt; This would need an actual specification.

OK, I'll write one.

&gt;&gt; 5. Implementation notes
&gt;&gt;
&gt;&gt;  There will be one instance of ub_ctx (libunbound resolver structure) in Tor,
&gt;&gt;  libunbound is thread-safe.
&gt; 
&gt; Hm. Looking at the libunbound codebase, it makes me pretty sad that
&gt; Libunbound wants to open up a separate thread so that it can do its
&gt; own libevent-based event loop.  Is there no way we can make libunbound
&gt; (or ldns) integrate with our own event loop?

I'll have look at it whether it can be done with some reasonably small changes
to original code. Why is an extra thread issue? IIRC libunbound can open
multiple threads, depending on what configuration it is given via ub_ctx_config().

There are ub_poll/ub_process/ub_cancel that could possibly allow integrating
into Tor's libevent loop.

&gt; Also, for the record, I'm a little confused about the feature sets
&gt; here.  What does libunbound add to ldns here that we need?

Libunbound makes life much easier - does full validation of chain up to root,
including special cases such as CNAME/DNAME, has cache, load-balancing logic (if
multiple threads are used). Basically everything mentioned in unbound.conf can
be done with libunbound.

&gt;&gt;  Client will periodically purge incomplete DNS replies. Any unexpected
&gt;&gt;  DNS_RESPONSE will be dropped.
&gt;&gt;
&gt;&gt;  Request for special names (.onion, .exit, .noconnect) will return REFUSED.
&gt;&gt;
&gt;&gt;  RELAY_BEGIN would function "normally", there is no need for returning DNS
&gt;&gt;  data. In case of malicious exit, client can't check he's really connected to
&gt;&gt;  whatever IP is in A/AAAA. We won't send any NSEC/NSEC3 back in case FQDN
&gt;&gt;  does not exist, it would needlessly complicate things. Client can check by
&gt;&gt;  extra query on DNSPort.
&gt; 
&gt; What fraction of clients actually use DNSPort as opposed as to just
&gt; doing everything via SOCKS connect requests?  I worry that, by leaving
&gt; RELAY_BEGIN users out of this entirely, we're making a feature that
&gt; most clients just won't wind up using.  I wonder whether the earlier
&gt; idea of having a RELAY_BEGIN_DNS that does both the lookup and a
&gt; connect wouldn't be a good idea -- both to save the round-trip, and to
&gt; give the client the appropriate dnssec information.

I suspect only minimal portion of clients use DNSPort. Against attacker
eavesdropping on exit node, making exit node use libunbound for all resolving
hides DNSPort use (unless queries are for RRs other than A/AAAA/PTR). However
malicious exit can see the difference.

RELAY_BEGIN_DNS would work for lookup of A/AAAA, but all other RRs "stick out"
(and as I understand, the DNSPort is supposed exactly for support of other RRs
like SRV for XMPP). I don't know if this can be somehow worked around.

&gt; And I *do* think that the dnssec information would be useful to the
&gt; client: Even though we can't check whether the exit really connected
&gt; to the requested IP or not, we're going to cache that IP, and perhaps
&gt; ask other exits to connect to it when we want to connect to the
&gt; corresponding hostname.

I've been thinking about this for a while but came to conclusion it only proves
one thing to the client: that exit node at some point learned DNS "translation"
of FQDN. All the high-profile sites state-level attackers would be interested in
run on some sort of CDN/cloud, meaning IPs are exchanged often through CNAME
redirection.

I guess using a cached IP later would through another exit work for _most_
cases. But what kind of attack does it prevent compared to not sending the
resolved IP data back to client? (It's the same issue that
Perspectives/Convergence have with CDN services: except it's with certificates
instead of IPs).

&gt; In a final version of this document, I'd like to see a more rigorous
&gt; (pseudocode?) description of what the client and the exit node need to
&gt; check when, and what they do in response.  (e.g., "upon receiving a
&gt; FOO cell, the exit node verifies that Bar.  If not, ...") This would
&gt; make the implementation easier to check against the spec, and the spec
&gt; easier for dns gurus to audit.

Sure. I'll add it to the next version.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120317022649</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-17 02:26:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Message-based Inter-controller IPC Channel</subject><body>

On Fri, Mar 16, 2012 at 8:15 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Ugh.. Without the annoying tabs:
&gt;

Added as proposal 197.  Thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120317124342</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-03-17 12:43:42-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] tor-exit-notice.html: shorten Cornell URLs</subject><body>


On Mar 17, 2012, at 8:37 AM, Christian Kujau wrote:

&gt; Hi,
&gt; 
&gt; these ever so long law.cornell.edu URLs are now automatically redirecting 
&gt; to a shorter version - let's use that in our tor-exit-notice.html as well.
&gt; 
&gt; Christian.

Hi, and thanks for the patch. I've filed a trac ticket[0] for this patch. Please
follow up there.

Thanks!
Sebastian

[0]: https://trac.torproject.org/projects/tor/ticket/5410 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120318114411</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 11:44:11-0400</timestampReceived><subject>Re: [tor-dev] Tor HS keys password protection against impersonation attacks?</subject><body>

On 3/18/12 3:34 AM, Jacob Appelbaum wrote:
&gt;&gt; That way even in case of seizure of the server running the Tor HS
&gt;&gt; it would not be possible to who seized the Tor HS Server to do actively
&gt;&gt; Impersonation attacks of the Tor HS.
&gt; 
&gt; I think that's a great idea but also a UI nightmare; for servers, I
&gt; think arm would need to support entering the key and for desktops, I
&gt; think Vidalia is the obvious target. 

Well, for server it could also be possible to start implementing
something simpler such as a password inquiry on stdin like Apache does.

That way the "core functionalities" of the TorHS password protection may
be implemented and get used, while delegating to a second stage the
opportunity to unlock the key via Tor ControlPort for better UI integration.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120318155058</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-18 15:50:58-0400</timestampReceived><subject>Re: [tor-dev] TorHS related files re-organization ?</subject><body>

On 3/18/12 2:40 PM, Jeroen Massar wrote:
&gt; On 2012-03-18 13:57 , Fabio Pietrosanti (naif) wrote:
&gt; &gt; On 3/18/12 1:09 PM, Jeroen Massar wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; On 18 Mar 2012, at 12:46, "Fabio Pietrosanti (naif)" &lt;lists@infosecurity.ch&gt; \
&gt; &gt; &gt; wrote: 
&gt; &gt; &gt; &gt; - Security issue
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Looking at the server seizure threat scenario, who seize the computer
&gt; &gt; &gt; &gt; running TorHS will be able to know the identity of the TorHS itself by
&gt; &gt; &gt; &gt; looking at the "hostname" file
&gt; &gt; &gt; 
&gt; &gt; &gt; Why not simply use Full Disk Encryption or similar to protect all the data \
&gt; &gt; &gt; files, hat avoids a compromise for any file on the system, heck if hey turn the \
&gt; &gt; &gt; box off they can't even see there is Tor on it at all. also heavily note that \
&gt; &gt; &gt; the actual content served is likely much more valuable and you will want to \
&gt; &gt; &gt; protect that too.
&gt; &gt; 
&gt; &gt; Yes, but any application that store "sensitive data" like keys should
&gt; &gt; provide an integrated way to protect such sensitive data.
&gt; &gt; 
&gt; &gt; Think about the "keychain" of PGP, or keychain of Firefox for digital
&gt; &gt; certificate, etc, etc
&gt; &gt; 
&gt; 
&gt; &gt; All major applications that need to handle "keys" support a built-in
&gt; &gt; feature to provide different degree of protection for such "keys".
&gt; 
&gt; And you want to add another one that has to be separately managed? :)

Well, that's the point, it must be flexible because it should in theory
be possible to hook it on different keychains.
It would make perfect sense to integrate it with Mac OSX keychain like
already happens for x509v3 certificates.

But it would be also required also to have a "portable" and
self-contained keychain.
This would be required to be able to work with TBB and/or other portable
applications that would like to bundle Tor (TorChat, GlobaLeaks, etc).

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120319222614</emailId><senderName>boyska</senderName><senderEmail>piuttosto@logorroici.org</senderEmail><timestampReceived>2012-03-19 22:26:14-0400</timestampReceived><subject>[tor-dev] A modest proposal for a petname system in ideas/xxx-onion-nyms.txt</subject><body>

hello, I'm new to the list (and to tor development), so I introduce
myself.
I mostly subscribed because I'm seriously considering to apply for
google summer of code with torproject :)
I'm especially interested to the "petname" problem, I'll write more
below

Steven Murdoch wrote:
&gt; On 17 Dec 2011, at 01:14, Jacob Appelbaum wrote:
&gt; &gt;  A nym will expire if either the HS goes offline for longer than a
&gt; &gt; given time
&gt; &gt;  threshold or if he explicitly requests removal of the association to that
&gt; &gt;  particualr nym. This allows dynamic reallocation of nyms and avoids nym
&gt; &gt;  squatting.
&gt; 
&gt; This may be stating the obvious, but a problem here is someone could DoS
&gt; the hidden service for sufficiently long they could steal the nym. If
&gt; the attacker is smart, they will only do the DoS when the nym authority
&gt; is checking (which suggests the nym authority should check at random
&gt; intervals).

that's of course one of the biggest problem to face; the other is the
single-point-of-failure issue.
Why don't we make the other way around? That is, Beppe itself will
periodically send a signed message to such an "authority" stating the
petnames he wants to be associated to. This could also been sent by
means that are not reachable for the attacker (for example, in case of a
serious attack, Beppe could just sent this message manually with an
email from a different computer)

Then I'd like to ask about the extent of such a project for GSoC.
I'm really interested in doing this because I really like the concept of
darknet and the "petnames" will really make them reasonably easy to use.
However, it's easy to see the limits of this: single point of failure,
which is both a problem for crashes AND censorship/security (what if the
central authority start censor nyms? or worst, providing false
associations).
I suppose that a GSoC student can't solve all this problems alone :)

So, how much is "enough"?
Of course, I really intend to continue my work/research about this, but
when talking about jobs, allocating time is really important.

Greetings

-- 
boyska
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321034318</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-03-21 03:43:18-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On Tue, Mar 20, 2012 at 23:09, Ken Takusagawa II
&lt;ken.takusagawa.2@gmail.com&gt; wrote:
&gt; One more note: the Soundex and Double Metaphone algorithms may be useful for
&gt; determining if two words sound alike.

True. But we don't care nearly as much about homophony as about synonymy.

Homophony is a heightened concern for things primarily intended to be
conveyed over the phone (eg PGP fingerprints). Our primary concern is
rather that the things can be memorized — and memory, at least for
phrases rather than isolated words, is semantic.

E.g. we would not drop 'goat' just because we have 'coat', even though
the two are very similar phonetically (just one voicing difference).

While we're at it, homography is also a lesser concern — it'll mainly
come up when ensuring that parsing is unambiguous. (Granted, that's a
significant caveat. :-P)

- Sai
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120321220620</emailId><senderName>Lee Fisher</senderName><senderEmail>blibbet@gmail.com</senderEmail><timestampReceived>2012-03-21 22:06:20-0400</timestampReceived><subject>Re: [tor-dev] Tor for iOS via official channels</subject><body>

 &gt;&gt; I was thinking about a GSoC 2012 project I could propose, and I came
 &gt;&gt; to the question of why there's no Tor iOS (iPhone / iPad / iPod
 &gt;&gt; touch) application distributed on the official iTunes App Store?
 &gt;
 &gt; People have tried in the past and been rejected for being a
 &gt; 'proxy/circumvention tool'.

A Mac game developer friend suggested two indirect methods to use the 
Apple market while avoiding market rejections, that might help:

1) Use Test Flight, with Tor Project as an enterprise, using this tool 
to deliver to their testers.
https://testflightapp.com/tos/

2) Instead of general public market, use enterprise market, with Tor 
Project as an enterprise, with non-employee volunteer users. Supposedly, 
no rejections for enterprise-private apps.
http://www.wired.com/wiredenterprise/2012/03/apple-configurator/

Both solutions would probably have to have Tor Project corp to setup an 
enterprise where mac users would be volunteers or testers, so zero 
anonynimity for obtaining the software. Instead of Tor, maybe EFF or 
another privacy-centered group could be enterprise, esp. if it has 
existing membership infrastructure.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120322152841</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-03-22 15:28:41-0400</timestampReceived><subject>[tor-dev] Proposal 200: Adding new, extensible CREATE, EXTEND, and related cells</subject><body>

Filename: 200-new-create-and-extend-cells.txt
Title: Adding new, extensible CREATE, EXTEND, and related cells
Author: Robert Ransom
Created: 2012-03-22
Status: Open

History

  The original draft of this proposal was from 2010-12-27; nickm revised
  it slightly on 2012-03-22 and added it as proposal 200.

Overview and Motivation:

  In Tor's current circuit protocol, every field, including the 'onion
  skin', in the EXTEND relay cell has a fixed meaning and length.
  This prevents us from extending the current EXTEND cell to support
  IPv6 relays, efficient UDP-based link protocols, larger 'onion
  keys', new circuit-extension handshake protocols, or larger
  identity-key fingerprints.  We will need to support all of these
  extensions in the near future.  This proposal specifies a
  replacement EXTEND2 cell and related cells that provide more room
  for future extension.

Design:

  FIXME - allocate command ID numbers (non-RELAY commands for CREATE2 and
  CREATED2; RELAY commands for EXTEND2 and EXTENDED2)

  The CREATE2 cell contains the following payload:

        Handshake type                        [2 bytes]
        Handshake data length                 [2 bytes]
        Handshake data                        [variable]

  The relay payload for an EXTEND2 relay cell contains the following
  payload:

        Number of link specifiers             [1 byte]
           N times:
            Link specifier type               [1 byte]
            Link specifier length             [1 byte]
            Link specifier                    [variable]
        Handshake type                        [2 bytes]
        Handshake data length                 [2 bytes]
        Handshake data                        [variable]

  The CREATED2 cell and EXTENDED2 relay cell both contain the following
  payload:

        Handshake data length                 [2 bytes]
        Handshake data                        [variable]

  All four cell types are padded to 512-byte cells.

  When a relay X receives an EXTEND2 relay cell:

  * X finds or opens a link to the relay Y using the link target
    specifiers in the EXTEND2 relay cell; if X fails to open a link, it
    replies with a TRUNCATED relay cell. (FIXME: what do we do now?)

  * X copies the handshake type and data into a CREATE2 cell and sends
    it along the link to Y.

  * If the handshake data is valid, Y replies by sending a CREATED2
    cell along the link to X; otherwise, Y replies with a TRUNCATED
    relay cell. (XXX: we currently use a DESTROY cell?)

  * X copies the contents of the CREATED2 cell into an EXTENDED2 relay
    cell and sends it along the circuit to the OP.


Link target specifiers:

  The list of link target specifiers must include at least one address and
  at least one identity fingerprint, in a format that the extending node is
  known to recognize.

  The extending node MUST NOT accept the connection unless at least one
  identity matches, and should follow the current rules for making sure that
  addresses match.

  [00] TLS-over-TCP, IPv4 address
       A four-byte IPv4 address plus two-byte ORPort
  [01] TLS-over-TCP, IPv6 address
       A sixteen-byte IPv6 address plus two-byte ORPort
  [02] Legacy identity
       A 20-byte SHA1 identity fingerprint. At most one may be listed.

  As always, values are sent in network (big-endian) order.

Legacy handshake type:

  The current "onionskin" handshake type is defined to be handshake type
  [00 00], or "legacy".

  The first (client-&gt;relay) message in a handshake of type =93legacy=94
  contains the following data:

        =91Onion skin=92 (as in CREATE cell)      [DH_LEN+KEY_LEN+PK_PAD_LE=
N bytes]

  This value is generated and processed as sections 5.1 and 5.2 of
  tor-spec.txt specify for the current CREATE cell.

  The second (relay-&gt;client) message in a handshake of type =93legacy=94
  contains the following data:

        Relay DH public key                   [DH_LEN bytes]
        KH (see section 5.2 of tor-spec.txt)  [HASH_LEN bytes]

  These values are generated and processed as sections 5.1 and 5.2 of
  tor-spec.txt specify for the current CREATED cell.

  After successfully completing a handshake of type =93legacy=94, the
  client and relay use the current relay cryptography protocol.

Bugs:

  This specification does not accommodate:

  * circuit-extension handshakes requiring more than one round

    No circuit-extension handshake should ever require more than one
    round (i.e. more than one message from the client and one reply
    from the relay).  We can easily extend the protocol to handle
    this, but we will never need to.

  * circuit-extension handshakes in which either message cannot fit in
    a single 512-byte cell along with the other required fields

    This can be handled by specifying a dummy handshake type whose
    data (sent from the client) consists of another handshake type and
    the beginning of the data required by that handshake type, and
    then using several (newly defined) HANDSHAKE_COMPLETION relay
    cells sent in each direction to transport the remaining handshake
    data.

    The specification of a HANDSHAKE_COMPLETION relay cell and its
    associated dummy handshake type can safely be postponed until we
    develop a circuit-extension handshake protocol that would require
    it.

  * link target specifiers that cause EXTEND2 cells to exceed 512
    bytes

    This can be handled by specifying a LONG_COMMAND relay cell type
    that can be used to transport a large =91virtual cell=92 in multiple
    512-byte cells.

    The specification of a LONG_COMMAND relay cell can safely be
    postponed until we develop a link target specifier, a RELAY_BEGIN2
    relay cell and stream target specifier, or some other relay cell
    type that would require it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120322165324</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-22 16:53:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 193: Safe cookie authentication</subject><body>

On 2012-03-16, Sebastian Hahn &lt;hahn.seb@web.de&gt; wrote:
&gt;
&gt; On Feb 10, 2012, at 12:02 AM, Robert Ransom wrote:
&gt;&gt; The sole exception to ‘non-safe cookie authentication must die' is
&gt;&gt; when a controller knows that it is connected to a server process with
&gt;&gt; equal or greater access to the same filesystem it has access to.  In
&gt;&gt; practice, this means ‘only if you're completely sure that Tor is
&gt;&gt; running in the same user account as the controller, and you're
&gt;&gt; completely sure that you're connected to Tor', and no controller is
&gt;&gt; sure of either of those.
&gt;
&gt; Why is it so hard to do this?

I am not aware of any sane way for a program to determine which user
ID is on the other end of a TCP socket, even over the loopback
interface.  (Scraping the output of netstat or sockstat or lsof is
insane.)

&gt; Can't we tell controllers to do a
&gt; check of permissions, and only if they can't be sure refuse to use the
&gt; requested path by default unless a config whitelist or user prompt
&gt; allows it? I think that's a lot easier to implement for controllers, and
&gt; I just don't really see the huge threat here. If you have malicious
&gt; system-wide software on your host, you lost anyway.

* Not every program which can receive connections on the loopback
interface should be allowed to read every 32-byte file which I can
access.  (Such programs might not have access to any part of my
filesystem.)

* If Tor were intended to have read access to every file in my user
account, the Debian package would configure it to keep running as root
(even after startup).

* If an attacker compromises the Tor process after it has dropped
privileges, Tor can fool a controller into opening the wrong file by
dropping a symlink in the whitelisted location for the system-wide
cookie file.  There is no good way to avoid following a symlink when
opening a file.  (O_NOFOLLOW isn't a good way -- it still follows
parent-directory symlinks, it may not be available on all OSes, and it
is not likely to be available in all programming languages.)  fstat
(to check ownership and permissions after opening a cookie file) is
difficult enough to use that someone will not use it, even if their
controller can correctly guess what ownership and permissions the
cookie file should have.

* A user who configures a controller to connect to a remote Tor
instance's control port knows that he/she/it is allowing attackers on
the LAN to control the Tor instance.  He/she/it is unlikely to know
that attackers on the LAN can also read 32-byte files from his/her/its
client system's disk.

* I will have very sensitive 32-byte files in my Unixoid VFS tree Real
Soon Now.  Perhaps other people will, too.

* A subtle complex flaky kludge which most controller implementors
will not realize is necessary is not a valid substitute for a simple
new cookie-based authentication protocol that avoids filesystem
permission-check hacks entirely.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120323203912</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-23 20:39:12-0400</timestampReceived><subject>Re: [tor-dev] Analysis of the Relative Severity of Tagging Attacks</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake The23rd Raccoon (the.raccoon23@gmail.com):

&gt; So, if you have a way to measure circuit failure reliably, you can in
&gt; fact detect the tagging attack, up to a point. It will be
&gt; significantly easier to detect full 3-hop path bias than 2. It would
&gt; be a good idea to solve tagging for this reason.

Ok, I've filed parent ticket
https://trac.torproject.org/projects/tor/ticket/5456 for dealing with
all of this mess.

&gt; &gt; I can turn the bwauthcircs=1 parameter back on independent of the PID
&gt; &gt; feedback and see what happens, but if we could solve this with crypto,
&gt; &gt; that would be better I think.

Turns out I was wrong here. There's a bug in the bwauths that prevent us
from doing this properly right now:
https://trac.torproject.org/projects/tor/ticket/5457

Turtles all the way down...

&gt; Is this even possible without revising the circuit level protocol? We
&gt; looked through the spec and didn't see anything that allows the
&gt; network to migrate to alternate cipher choices easily..
&gt; 
&gt; How quickly can the migration be done?

Pretty slowly, it turns out. We're going to need a new circuit protocol
and we need to decide if we want to do per-hop MACs or use
self-authenticating ciphers. I created a child ticket for the proposals
that will help us figure this out.

https://trac.torproject.org/projects/tor/ticket/5460 if you're
interested in following them.

&gt; Otherwise, I suggest everybody start keeping track of their circuit
&gt; failure rates though major nodes....

I created a child ticket for this, too:
https://trac.torproject.org/projects/tor/ticket/5458

I also created https://trac.torproject.org/projects/tor/ticket/5459 for
building a network scanner to detect this collusion.


It's going to be a long while before all of this stuff gets done though,
I bet. We're waaay overloaded here, development wise. We can barely keep
up with our Sponsor workload, let alone fix surprise monstrous issues
like this one. We'd love the help!

But still, thanks for taking the time to report this (and also for
providing the proofs!).


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120325221831</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-03-25 22:18:31-0400</timestampReceived><subject>Re: [tor-dev] Self publishing over Tor Hidden Services</subject><body>

Hi,

Arturo Filastò wrote (23 Mar 2012 22:45:39 GMT) :
&gt; I believe this project has some common goals with the work TAILS
&gt; wants to do on the "TAILS server edition" [1].

Sure. There's probably some work that can be shared. It's unclear to
me what part of it yet, but we'll see.

It's striking how different those projects are, but not as much as the
fact we independently thought of proposing them for GSoC the very same
year. I think it confirms "something like this" is needed, and I'm
glad of seeing this happen.

Tails server and APAF share something important: they don't exist yet.
There are a few big differences between Tails server and APAF, though.
Let me mention some of those, and we'll see what we can learn from
this. At least I'm sure comparing Tails server with APAF will help
clarify what Tails server would be :)

Amnesia vs. post-mortem analysis of the equipment -- Tails server is
likely to be based on Tails (no kidding), inheriting much, if not all,
of its threat model and specification, including taking radical
measures to avoid writing anything to local storage media unless the
user explicitly asks for it. I did not see any such thing in the APAF
description. Is this part of the APAF threat model? I must say I am
impressed with how far something like the TBB goes to satisfy this
requirement at the application level. At some level, things get out of
control of most applications anyway (hints: swap, usage of various OS
functionality that may, or may not, write stuff to disk), but even if
we disregard that level, I'm not sure how a webapp framework for
a generic language such as Python could try to satisfy this
requirement as well as the TBB.

Target hardware and usage model -- As far as I understand it, APAF is
aimed at running on the Desktop (that is on a desktop or laptop
computer that's running a full-blown desktop environment such as
GNOME). We expect most of the services provided by Tails server to run
24/7 in cupboards, garages and basements. I don't expect users to keep
their desktop or laptop running and online 24/7. This is one of the
reasons why Tails server should be fully functional on boxes people do
not want, or cannot, use as Desktop computers anymore, e.g. because of
hardware being half-broken or not powerful enough to run a modern
Desktop environment plus server software.

Applications -- Tails server is meant to run any existing application
we add and maintain support for, building on existing blocks such as
Gobby and a few others. As far as I understand it, APAF is a framework
to write, and maintain, a set of brand new applications that would be
bound to this specific environment -- in other words, people not
interested in Tor are unlikely to ever contribute to such an
application. I find the APAF approach to be very ambitious.

Future -- Tails server would be a practical contribution to the
FreedomBox project, that should explore some of the FreedomBox
aspects:
  1. In a way that's immediately useful to lots of people.
  2. In a way that _practically_ attacks some of the FreedomBox
     technical challenges (e.g. configuration management on the long
     term, upgrade management, unlocking encrypted storage at boot
     time on a potentially headless machine).
  3. With a specific threat model in mind, that's not shared by all
     people who {are, should be, are supposed to be, could, might} be
     working on the FreedomBox project. Showing them deployed, working
     code and systems will be much better an advocacy for anonymity,
     storage encryption, and location hiding, than trying to explain
     them why they should write support for all of this themselves.
Ideally, the purpose of Tails server should be taken over by the
FreedomBox some day, and the process that leads to Tails server should
help the FreedomBox to actually exist some day. Sometimes, it's great
to start a project while knowing right from the beginning it could
very well become obsoleted by something even greater that will be
maintained by, or with, entirely different people.

Tails server should be able to run APAF applications, right?

Cheers,
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120323231546</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@baculo.org</senderEmail><timestampReceived>2012-03-23 23:15:46-0400</timestampReceived><subject>[tor-dev] Improving Tor Hidden Services</subject><body>

Setting aside the issue related with usability there are also some
interesting
improvements that can be made to make Tor HS more performant.

I will summarize here the ideas that have been brought forward along
with some
that are not detailed anywhere and would like to see more interest in.

I would suggest to start collecting all the information regarded to Tor HS
improvements on this wiki page:
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/HiddenServices.

With respect to what is already on that page I got some feedback from
rransom
on those two items on IRC, but I did not note them down. It would be
good if you
were to summarize the critiques here or on the wiki page.

Also there are a set of proposals that are related to Tor HS
improvements that
have been abandoned for some time and I believe it would be useful to
summarize
them inside of that wiki page.

The proposals are:

#121
Filename: 121-hidden-service-authentication.txt
Title: Hidden Service Authentication
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/121-hidden-service-authentication.txt

#142
Filename: 142-combine-intro-and-rend-points.txt
Title: Combine Introduction and Rendezvous Points
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/142-combine-intro-and-rend-points.txt

#143
Filename: 143-distributed-storage-improvements.txt
Title: Improvements of Distributed Storage for Tor Hidden Service
Descriptors
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/143-distributed-storage-improvements.txt

#155
Filename: 155-four-hidden-service-improvements.txt
Title: Four Improvements of Hidden Service Performance
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/155-four-hidden-service-improvements.txt

#194
Filename: 194-mnemonic-urls.txt
Title: Mnemonic .onion URLs
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/194-mnemonic-urls.txt

and also this inside of the ideas, that is loosely related to #194, but
instead of offering
an encoding it offers a petname system:

Filename: xxx-onion-nyms.txt
Title: .onion nym system
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-onion-nyms.txt

The single most important thing I believe is needed in Tor Hidden
Service is Encrypted services.
These can be seen, in a way, as the reverse of Tor2web mode. It allows
people to publish Hidden Services
with no anonymity, but have the Tor end-to-end encryption and
performance improvements.
I see these to be the future of what was previously done, poorly, with
Tor Exit Enclaves. One that
wishes to have an end-to-end encrypted tunnel from Tor clients can run
an encrypted service and have
a reduced number of hops from the IP and RP.

Roger started writing up a spec on this and it can be found here:

Filename: xxx-encrypted-services.txt
Title: Encrypted services as a replacement to exit enclaving
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-encrypted-services.txt


- Art.




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326142633</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-03-26 14:26:33-0400</timestampReceived><subject>Re: [tor-dev] Missing methodname in proposal 180 example</subject><body>

On Sun, Mar 25, 2012 at 1:02 AM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; I found a little typo in proposal 180.
&gt;
&gt; David Fifield

Thanks; just merged it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321012324</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-21 01:23:24-0400</timestampReceived><subject>[tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

[Attachment #2 (multipart/signed)]


The following proposal should complete SponsorF tickets #5010-5012.

I've pushed the proposal to my torspec.git branch
mikeperry/bridgefinder, since the POSTMESSAGE Proposal ended up with
some garbling at somewhere along the cut and paste chain. That branch
also contains fixes for the POSTMESSAGE proposal's garbling.


Filename: xxx-bridgefinder-integration.txt
Title: Integration of BridgeFinder and BridgeFinderHelper
Author: Mike Perry
Created: 18-03-2012
Status: Proposed
Target: 0.2.3.x+


Overview

  This proposal describes how the Tor client software can interact with
  an external program that performs bridge discovery based on user input
  or information extracted from a web page, QR Code, online game, or
  other transmission medium.


Scope and Audience

  This document describes how all of the components involved in bridge
  discovery communicate this information to the rest of the Tor
  software. The mechanisms of bridge discovery are not discussed, though
  the design aims to be generalized enough to allow arbitrary new
  discovery mechanisms to be added at any time.
  
  This document is also written with the hope that those who wish to
  implement BridgeFinder components and BridgeFinderHelpers can get
  started immediately after a read of this proposal, so that development
  of bridge discovery mechanisms can proceed in parallel to supporting
  functionality improvements in the Tor client software.


Components and Responsibilities

 0. Tor Client
 
    The Tor Client is the piece of software that connects to the Tor
    network (optionally using bridges) and provides a SOCKS proxy for
    use by the user.
 
    In initial implementations, the Tor Client will support only
    standard bridges. In later implementations, it is expected to
    support pluggable transports as defined by Proposal 180.

 1. Tor Control Port
 
    The Tor Control Port provides commands to perform operations,
    configuration, and to obtain status information. It also optionally
    provides event driven status updates.
    
    In initial implementations, it will be used directly by BridgeFinder
    to configure bridge information via GETINFO and SETCONF. It is covered
    by control-spec.txt in the tor-specs git repository.

    In later implementations, it will support the inter-controller
    POSTMESSAGE IPC protocol as defined by Proposal 197 for use
    in conveying bridge information to the Primary Controller.
 
 2. Primary Controller
 
    The Primary Controller is the program that launches and configures the
    Tor client, and monitors its status.
    
    On desktop platforms, this program is Vidalia, and it also launches
    the Tor Browser. On Android, this program is Orbot. Orbot does not
    launch a browser.
    
    On all platforms, this proposal requires that the Primary Controller
    will launch one or more BridgeFinder child processes and provide
    them with authentication information through the environment variables
    TOR_CONTROL_PORT and TOR_CONTROL_PASSWD.

    In later implementations, the Primary Controller will be expected
    to receive Bridge configuration information via the free-form
    POSTMESSAGE protocol from Proposal 197, validate that information,
    and hold that information for user approval.
 
 3. BridgeFinder
 
    A BridgeFinder is a program that discovers bridges and configures
    Tor to use them.
    
    In initial implementations, it is likely to be very dumb, and its main
    purpose will be to serve as a layer of abstraction that should free
    the Primary Controller from having to directly implement numerous ways
    of retrieving bridges for various pluggable transports.
    
    In later implementations, it may perform arbitrary network operations
    to discover, authenticate to, and/or verify bridges, possibly using
    informational hints provided by one or more external
    BridgeFinderHelpers (see next component). It could even go so far as
    to download new pluggable transport plugins and/or transform
    definition files from arbitrary urls.
    
    It will be launched by the Primary Controller and given access to the
    Tor Control Port via the environment variables TOR_CONTROL_PORT and
    TOR_CONTROL_PASSWD.
    
    Initial control port interactions can be command driven via GETINFO
    and SETCONF, and do not need to subscribe to or process control port
    events. Later implementations will use POSTMESSAGE as defined in
    Proposal 197 to pass command requests to Vidalia, which will parse
    them and ask for user confirmation before deploying them. Use of
    POSTMESSAGE may or may not require event driven operation, depending
    on POSTMESSAGE implementation status (POSTMESSAGE is designed to
    support both command and event driven operation, but it is possible 
    event driven operation will happen first).
 
 4. BridgeFinderHelper
 
    Each BridgeFinder implementation can optionally communicate with one
    or more BridgeFinderHelpers. BridgeFinderHelpers are plugins to
    external 3rd party applications that can inspect traffic, handle mime
    types, or implement protocol handlers for accepting bridge discovery
    information to pass to BridgeFinder. Example 3rd party applications
    include Chrome, World of Warcraft, QR Code readers, or simple cut
    and paste.
    
    Due to the arbitrary nature of sandboxing that may be present in
    various BridgeFinderHelper host applications, we do not mandate the
    exact nature of the IPC between BridgeFinder instances and external
    BridgeFinderHelper addons. However, please see the "Security Concerns"
    section for common pitfalls to avoid. 
 
 5. Tor Browser
 
    This is the browser the user uses with Tor. It is not useful until Tor
    is properly configured to use bridges. It fails closed.
    
    It is not expected to run BridgeFinderHelper plugin instances, unless
    those plugin instances exist to ensure the user always has a pool of
    working bridges available after successfully configuring an
    initial bridge. Once all bridges fail, the Tor Browser is useless.
 
 6. Non-Tor Browser (aka BridgeFinderHelper host)
 
    This is the program the user uses for normal Internet activity to
    obtain bridges via a BridgeFinderHelper plugin. It does not have to be
    a browser. In advanced scenarios, this component may not be a browser
    at all, but may be a program such as World of Warcraft instead.


Incremental Deployability

  The system is designed to be incrementally deployable: Simple designs
  should be possible to develop and test immediately. The design is
  flexible enough to be easily upgraded as more advanced features become
  available from both Tor and new pluggable transports.

Initial Implementation

  In the simplest possible initial implementation, BridgeFinder will
  only discover Tor Bridges as they are deployed today. It will use the
  Tor Control Port to configure these bridges directly via the SETCONF
  command. It may or may not receive bridge information from a
  BridgeFinderHelper. In an even more degenerate case,
  BridgeFinderHelper may even be Vidalia or Orbot itself, acting upon
  user input from cut and paste.

 Initial Implementation: BridgeFinder Launch
 
   In the initial implementation, the Primary Controller will launch one
   or more BridgeFinders, providing control port authentication
   information to them through the environment variables TOR_CONTROL_PORT
   and TOR_CONTROL_PASSWD.
   
   BridgeFinder will then directly connect to the control port and
   authenticate. Initial implementations should be able to function
   without using SETEVENTS, and instead only using command-based
   status inquiries and configuration (GETINFO and SETCONF).
 
 Initial Implementation: Obtaining Bridge Hint Information
 
   In the initial implementation, to test functionality,
   BridgeFinderHelper can simply scrape bridges directly from
   https://bridges.torproject.org.
   
   In slightly more advanced implementations, a BridgeFinderHelper
   instance may be written for use in the user's Non-Tor Browser. This
   plugin could extract bridges from images, html comments, and other
   material present in ad banners and slack space on unrelated pages.
 
   BridgeFinderHelper would then communicate with the appropriate
   BridgeFinder instance over an acceptable IPC mechanism. This proposal
   does not seek to specify the nature of that IPC channel (because
   BridgeFinderHelper may be arbitrarily constrained due to host
   application sandboxing), but we do make several security
   recommendations under the section "Security Concerns: BridgeFinder and
   BridgeFinderHelper".
 
 Initial Implementation: Configuring New Bridges
 
   In the initial implementation, Bridge configuration will be done
   directly though the control port using the SETCONF command.
   
   Initial implementations will support only retrieval and configuration
   of standard Tor Bridges. These are configured using SETCONF on the Tor
   Control Port as follows:
     SETCONF Bridge="IP:ORPort [fingerprint]"


Future Implementations

  In future implementations, the system can incrementally evolve in a
  few different directions. As new pluggable transports are created, it
  is conceivable that BridgeFinder may want to download new plugin
  binaries (and/or new transport transform definition files) and
  provide them to Tor.
  
  Furthermore, it may prove simpler to deploy multiple concurrent
  BridgeFinder+BridgeFinderHelper pairs as opposed to adding new
  functionality to existing prototypes.
  
  Finally, it is desirable for BridgeFinder to obtain approval
  from the user before updating bridge configuration, especially for
  cases where BridgeFinderHelper is automatically discovering bridges
  in-band during Non-Tor activity.

  The exact mechanisms for accomplishing these improvements is
  described in the following subsections.

 Future Implementations: BridgeFinder Launch and POSTMESSAGE handshake
 
   The nature of the BridgeFinder launch and the environment variables
   provided is not expected to change. However, future Primary Controller
   implementations may decide to launch more than one BridgeFinder
   instance side by side.
 
   Additionally, to negotiate the IPC channel created by Proposal 197
   for purposes of providing user confirmation, it is recommended that
   BridgeFinder and the Primary Controller perform a handshake using
   POSTMESSAGE upon launch, to establish that all parties properly
   support the feature:
 
     Primary Controller: "POSTMESSAGE @all Controller wants POSTMESSAGE v1.1"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder has POSTMESSAGE v1.0"
     Primary Controller: "POSTMESSAGE @all Controller expects POSTMESSAGE v1.0"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder will POSTMESSAGE v1.0"
 
   If this 4 step handshake proceeds with an acceptable version,
   BridgeFinder must use POSTMESSAGE to transmit SETCONF Bridge lines
   (see "Future Implementations: Configuring New Bridges" below). If
   POSTMESSAGE support is expected, but the handshake does not complete
   for any reason, BridgeFinder should either exit or go dormant.
 
   The exact nature of the version negotiation and exactly how much
   backwards compatibility must be tolerated is unspecified.
   "All-or-nothing" is a safe assumption to get started.
 
 Future Implementations: Obtaining Bridge Hint Information
 
   Future BridgeFinder implementations may download additional
   information based on what is provided by BridgeFinderHelper. They
   may fetch pluggable transport plugins, transformation parameters,
   and other material.
 
 Future Implementations: Configuring New Bridges
 
   Future implementations will be concerned with providing two new pieces
   of functionality with respect to configuring bridges: configuring
   pluggable transports, and properly prompting the user before altering
   Tor configuration.
 
   There are two ways to tell Tor clients about pluggable transports
   (as defined in Proposal 180).
 
   On the control port, an external Proposal 180 transport will be
   configured with
     SETCONF ClientTransportPlugin=&lt;method&gt; socks5 &lt;addr:port&gt; [auth=X]
   as in
     SETCONF ClientTransportPlugin="trebuchet socks5 127.0.0.1:9999".
 
   A managed proxy is configured with
     SETCONF ClientTransportPlugin=&lt;methods&gt; exec &lt;path&gt; [options]
   as in
     SETCONF ClientTransportPlugin="trebuchet exec /usr/libexec/trebuchet --managed".
 
   This example tells Tor to launch an external program to provide a
   socks proxy for 'trebuchet' connections. The Tor client only
   launches one instance of each external program with a given set of
   options, even if the same executable and options are listed for
   more than one method.
 
   Pluggable transport bridges discovered for this transport by
   BridgeFinder would then be set with:
     SETCONF Bridge="trebuchet 3.2.4.1:8080 \
keyid=09F911029D74E35BD84156C5635688C009F909F9 rocks=20 height=5.6m".

   For more information on pluggable transports and supporting Tor
   configuration commands, see Proposal 180.
 
 Future Implementations: POSTMESSAGE and User Confirmation
 
   Because configuring even normal bridges alone can expose the user to
   attacks, it is strongly desired to provide some mechanism to allow
   the user to approve new bridges prior to their use, especially for
   situations where BridgeFinderHelper is extracting them transparently
   while the user performs unrelated activity.
 
   If BridgeFinderHelper grows to the point where it is downloading new
   transform definitions or plugins, user confirmation becomes
   absolutely required.
 
   To achieve user confirmation, we depend upon the POSTMESSAGE command
   defined in Proposal 197. 
 
   If the POSTMESSAGE handshake succeeds, instead of sending SETCONF
   commands directly to the control port, the commands will be wrapped
   inside a POSTMESSAGE:
     POSTMESSAGE @all SETCONF Bridge="www.example.com:8284"
 
   Upon receiving this POSTMESSAGE, the Primary Controller will
   validate it, evaluate it, store it to be later enabled by the
   user, and alert the user that new bridges are available for
   approval. It is only after the user has approved the new bridges
   that the Primary Controller should then re-issue the SETCONF commands
   to configure and deploy them in the tor client.
 
   Additionally, see "Security Concerns: Primary Controller" for more
   discussion on potential pitfalls with POSTMESSAGE.

Security Concerns

  While automatic bridge discovery and configuration is quite compelling
  and powerful, there are several serious security concerns that warrant
  extreme care. We've broken them down by component.
  
 Security Concerns: Primary Controller
 
   In the initial implementation, Orbot and Vidalia must take care to
   transmit the Tor Control password to BridgeFinder in such a way that
   it does not end up in system logs, process list, or viewable by other
   system users. The best known strategy for doing this is by passing the
   information through exported environment variables.
   
   Additionally, in future implementations, Orbot and Vidalia will need
   to validate Proposal 197 POSTMESSAGE input before prompting the user.
   POSTMESSAGE is a free-form message-passing mechanism. All sorts of
   unexpected input may be passed through it by any other authenticated
   Tor Controllers for their own unrelated communication purposes.

   Minimal validation includes verifying that the POSTMESSAGE data is a
   valid Bridge or ClientTransportPlugin line and is acceptable input for
   SETCONF. All unexpected characters should be removed through using a
   whitelist, and format and structure should be checked against a
   regular expression. Additionally, the POSTMESSAGE string should not be
   passed through any string processing engines that automatically decode
   character escape encodings, to avoid arbitrary control port execution.
   
   At the same time, POSTMESSAGE validation should be light. While fully
   untrusted input is not expected due to the need for control port
   authentication and BridgeFinder sanitation, complicated manual string
   parsing techniques during validation should be avoided. Perform simple
   easy-to-verify whitelist-based checks, and ignore unrecognized input.
   
   Beyond POSTMESSAGE validation, the manner in which the Primary
   Controller achieves consent from the user is absolutely crucial to
   security under this scheme. A simple "OK/Cancel" dialog is
   insufficient to protect the user from the dangers of switching
   bridges and running new plugins automatically.
   
   Newly discovered bridge lines from POSTMESSAGE should be added to a
   disabled set that the user must navigate to as an independent window
   apart from any confirmation dialog. The user must then explicitly
   enable recently added plugins by checking them off individually. We
   need the user's brain to be fully engaged and aware that it is
   interacting with Tor during this step.  If they get an "OK/Cancel"
   popup that interrupts their online game play, they will almost
   certainly simply click "OK" just to get back to the game quickly.
 
   The Primary Controller should transmit the POSTMESSAGE content to the
   control port only after obtaining this out-of-band approval.

Security Concerns: BridgeFinder and BridgeFinderHelper

  The unspecified nature of the IPC channel between BridgeFinder and
  BridgeFinderHelper makes it difficult to make concrete security
  suggestions. However, from past experience, the following best
  practices must be employed to avoid security vulnerabilities:

  1. Define a non-webby handshake and/or perform authentication

     The biggest risk is that unexpected applications will be manipulated
     into posting malformed data to the BridgeFinder's IPC channel as if it
     were from BridgeFinderHelper. The best way to defend against this is
     to require a handshake to properly complete before accepting input. If
     the handshake fails at any point, the IPC channel must be abandoned
     and closed. Do not continue scanning for good input after any bad
     input has been encountered.
     
     Additionally, if possible, it is wise to establish a shared secret
     between BridgeFinder and BridgeFinderHelper through the filesystem or
     any other means available for use in authentication. For an a good
     example on how to use such a shared secret properly for
     authentication, see Trac Ticket #5185 and/or the SafeCookie Tor
     Control Port authentication mechanism.

  2. Perform validation before parsing 

     Care must be taken before converting BridgeFinderHelper data into
     Bridge lines, especially for cases where the BridgeFinderHelper data
     is fed directly to the control port after passing through
     BridgeFinder.

     The input should be subjected to a character whitelist and possibly
     also validated against a regular expression to verify format, and if
     any unexpected or poorly-formed data is encountered, the IPC channel
     must be closed.

  3. Fail closed on unexpected input

     If the handshake fails, or if any other part of the BridgeFinderHelper
     input is invalid, the IPC channel must be abandoned and closed. Do
     *not* continue scanning for good input after any bad input has been
     encountered.



-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120321014533</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-03-21 01:45:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and	BridgeFinderHelper</subject><body>

On 03/20/2012 06:23 PM, Mike Perry wrote:
&gt; The following proposal should complete SponsorF tickets #5010-5012.
&gt; 
&gt; I've pushed the proposal to my torspec.git branch
&gt; mikeperry/bridgefinder, since the POSTMESSAGE Proposal ended up with
&gt; some garbling at somewhere along the cut and paste chain. That branch
&gt; also contains fixes for the POSTMESSAGE proposal's garbling.
&gt; 
Hi Mike,

I've added the xxx-bridgefinder-integration.txt proposal to torspec.git:

https://gitweb.torproject.org/torspec.git/commit/1a92597e9d2af8581ff4f5229e5d962c266361bc

I fixed up the status and numbered it in this commit:

https://gitweb.torproject.org/torspec.git/commit/cee63cc90fd6623e1f5b4dad5f608bfd2049cc90

I didn't touch the commit in between - should I also merge that? I
wasn't following along, so I'm not clear on what issues it had to begin
with?

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120321025350</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-21 02:53:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 2012-03-21, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; The following proposal should complete SponsorF tickets #5010-5012.
&gt;
&gt; I've pushed the proposal to my torspec.git branch
&gt; mikeperry/bridgefinder, since the POSTMESSAGE Proposal ended up with
&gt; some garbling at somewhere along the cut and paste chain. That branch
&gt; also contains fixes for the POSTMESSAGE proposal's garbling.
&gt;
&gt;
&gt; Filename: xxx-bridgefinder-integration.txt
&gt; Title: Integration of BridgeFinder and BridgeFinderHelper
&gt; Author: Mike Perry
&gt; Created: 18-03-2012
&gt; Status: Proposed
&gt; Target: 0.2.3.x+
&gt;
&gt;
&gt; Overview
&gt;
&gt;   This proposal describes how the Tor client software can interact with
&gt;   an external program that performs bridge discovery based on user input
&gt;   or information extracted from a web page, QR Code, online game, or
&gt;   other transmission medium.
&gt;
&gt;
&gt; Scope and Audience
&gt;
&gt;   This document describes how all of the components involved in bridge
&gt;   discovery communicate this information to the rest of the Tor
&gt;   software. The mechanisms of bridge discovery are not discussed, though
&gt;   the design aims to be generalized enough to allow arbitrary new
&gt;   discovery mechanisms to be added at any time.
&gt;
&gt;   This document is also written with the hope that those who wish to
&gt;   implement BridgeFinder components and BridgeFinderHelpers can get
&gt;   started immediately after a read of this proposal, so that development
&gt;   of bridge discovery mechanisms can proceed in parallel to supporting
&gt;   functionality improvements in the Tor client software.
&gt;
&gt;
&gt; Components and Responsibilities
&gt;
&gt;  0. Tor Client
&gt;
&gt;     The Tor Client is the piece of software that connects to the Tor
&gt;     network (optionally using bridges) and provides a SOCKS proxy for
&gt;     use by the user.
&gt;
&gt;     In initial implementations, the Tor Client will support only
&gt;     standard bridges. In later implementations, it is expected to
&gt;     support pluggable transports as defined by Proposal 180.
&gt;
&gt;  1. Tor Control Port
&gt;
&gt;     The Tor Control Port provides commands to perform operations,
&gt;     configuration, and to obtain status information. It also optionally
&gt;     provides event driven status updates.
&gt;
&gt;     In initial implementations, it will be used directly by BridgeFinder
&gt;     to configure bridge information via GETINFO and SETCONF. It is covered
&gt;     by control-spec.txt in the tor-specs git repository.
&gt;
&gt;     In later implementations, it will support the inter-controller
&gt;     POSTMESSAGE IPC protocol as defined by Proposal 197 for use
&gt;     in conveying bridge information to the Primary Controller.
&gt;
&gt;  2. Primary Controller
&gt;
&gt;     The Primary Controller is the program that launches and configures the
&gt;     Tor client, and monitors its status.
&gt;
&gt;     On desktop platforms, this program is Vidalia, and it also launches
&gt;     the Tor Browser. On Android, this program is Orbot. Orbot does not
&gt;     launch a browser.
&gt;
&gt;     On all platforms, this proposal requires that the Primary Controller
&gt;     will launch one or more BridgeFinder child processes and provide
&gt;     them with authentication information through the environment variables
&gt;     TOR_CONTROL_PORT and TOR_CONTROL_PASSWD.
&gt;
&gt;     In later implementations, the Primary Controller will be expected
&gt;     to receive Bridge configuration information via the free-form
&gt;     POSTMESSAGE protocol from Proposal 197, validate that information,
&gt;     and hold that information for user approval.
&gt;
&gt;  3. BridgeFinder
&gt;
&gt;     A BridgeFinder is a program that discovers bridges and configures
&gt;     Tor to use them.
&gt;
&gt;     In initial implementations, it is likely to be very dumb, and its main
&gt;     purpose will be to serve as a layer of abstraction that should free
&gt;     the Primary Controller from having to directly implement numerous ways
&gt;     of retrieving bridges for various pluggable transports.
&gt;
&gt;     In later implementations, it may perform arbitrary network operations
&gt;     to discover, authenticate to, and/or verify bridges, possibly using
&gt;     informational hints provided by one or more external
&gt;     BridgeFinderHelpers (see next component). It could even go so far as
&gt;     to download new pluggable transport plugins and/or transform
&gt;     definition files from arbitrary urls.
&gt;
&gt;     It will be launched by the Primary Controller and given access to the
&gt;     Tor Control Port via the environment variables TOR_CONTROL_PORT and
&gt;     TOR_CONTROL_PASSWD.
&gt;
&gt;     Initial control port interactions can be command driven via GETINFO
&gt;     and SETCONF, and do not need to subscribe to or process control port
&gt;     events. Later implementations will use POSTMESSAGE as defined in
&gt;     Proposal 197 to pass command requests to Vidalia, which will parse
&gt;     them and ask for user confirmation before deploying them. Use of
&gt;     POSTMESSAGE may or may not require event driven operation, depending
&gt;     on POSTMESSAGE implementation status (POSTMESSAGE is designed to
&gt;     support both command and event driven operation, but it is possible
&gt;     event driven operation will happen first).
&gt;
&gt;  4. BridgeFinderHelper
&gt;
&gt;     Each BridgeFinder implementation can optionally communicate with one
&gt;     or more BridgeFinderHelpers. BridgeFinderHelpers are plugins to
&gt;     external 3rd party applications that can inspect traffic, handle mime
&gt;     types, or implement protocol handlers for accepting bridge discovery
&gt;     information to pass to BridgeFinder. Example 3rd party applications
&gt;     include Chrome, World of Warcraft, QR Code readers, or simple cut
&gt;     and paste.
&gt;
&gt;     Due to the arbitrary nature of sandboxing that may be present in
&gt;     various BridgeFinderHelper host applications, we do not mandate the
&gt;     exact nature of the IPC between BridgeFinder instances and external
&gt;     BridgeFinderHelper addons. However, please see the "Security Concerns"
&gt;     section for common pitfalls to avoid.
&gt;
&gt;  5. Tor Browser
&gt;
&gt;     This is the browser the user uses with Tor. It is not useful until Tor
&gt;     is properly configured to use bridges. It fails closed.
&gt;
&gt;     It is not expected to run BridgeFinderHelper plugin instances, unless
&gt;     those plugin instances exist to ensure the user always has a pool of
&gt;     working bridges available after successfully configuring an
&gt;     initial bridge. Once all bridges fail, the Tor Browser is useless.

Information received by a Tor Browser MUST NOT EVER EVER EVER be given
to a BridgeFinder or BridgeFinderHelper.  Doing so would immediately
link the user's anonymous/pseudonymous activities to his/her/its
network address.

(If a user wants to obtain a bridge through Tor, he/she/it can
explicitly copy and paste information about a bridge into a Tor
controller or a BridgeFinder.  BridgeFinders which are intended to
accept such information SHOULD warn the user to avoid linking the
bridge to his/her/it sensitive activities.)

A BridgeFinder or BridgeFinderHelper MAY make its own connections
through Tor for the purpose of finding new bridge addresses (or
updating previously acquired addresses), but MUST use Tor's stream
isolation feature to separate BridgeFinder streams from the user's
anonymous/pseudonymous activities.

&gt;
&gt;  6. Non-Tor Browser (aka BridgeFinderHelper host)
&gt;
&gt;     This is the program the user uses for normal Internet activity to
&gt;     obtain bridges via a BridgeFinderHelper plugin. It does not have to be
&gt;     a browser. In advanced scenarios, this component may not be a browser
&gt;     at all, but may be a program such as World of Warcraft instead.
&gt;
&gt;
&gt; Incremental Deployability
&gt;
&gt;   The system is designed to be incrementally deployable: Simple designs
&gt;   should be possible to develop and test immediately. The design is
&gt;   flexible enough to be easily upgraded as more advanced features become
&gt;   available from both Tor and new pluggable transports.
&gt;
&gt; Initial Implementation
&gt;
&gt;   In the simplest possible initial implementation, BridgeFinder will
&gt;   only discover Tor Bridges as they are deployed today. It will use the
&gt;   Tor Control Port to configure these bridges directly via the SETCONF
&gt;   command. It may or may not receive bridge information from a
&gt;   BridgeFinderHelper. In an even more degenerate case,
&gt;   BridgeFinderHelper may even be Vidalia or Orbot itself, acting upon
&gt;   user input from cut and paste.
&gt;
&gt;  Initial Implementation: BridgeFinder Launch
&gt;
&gt;    In the initial implementation, the Primary Controller will launch one
&gt;    or more BridgeFinders, providing control port authentication
&gt;    information to them through the environment variables TOR_CONTROL_PORT
&gt;    and TOR_CONTROL_PASSWD.
&gt;
&gt;    BridgeFinder will then directly connect to the control port and
&gt;    authenticate. Initial implementations should be able to function
&gt;    without using SETEVENTS, and instead only using command-based
&gt;    status inquiries and configuration (GETINFO and SETCONF).
&gt;
&gt;  Initial Implementation: Obtaining Bridge Hint Information
&gt;
&gt;    In the initial implementation, to test functionality,
&gt;    BridgeFinderHelper can simply scrape bridges directly from
&gt;    https://bridges.torproject.org.
&gt;
&gt;    In slightly more advanced implementations, a BridgeFinderHelper
&gt;    instance may be written for use in the user's Non-Tor Browser. This
&gt;    plugin could extract bridges from images, html comments, and other
&gt;    material present in ad banners and slack space on unrelated pages.
&gt;
&gt;    BridgeFinderHelper would then communicate with the appropriate
&gt;    BridgeFinder instance over an acceptable IPC mechanism. This proposal
&gt;    does not seek to specify the nature of that IPC channel (because
&gt;    BridgeFinderHelper may be arbitrarily constrained due to host
&gt;    application sandboxing), but we do make several security
&gt;    recommendations under the section "Security Concerns: BridgeFinder and
&gt;    BridgeFinderHelper".
&gt;
&gt;  Initial Implementation: Configuring New Bridges
&gt;
&gt;    In the initial implementation, Bridge configuration will be done
&gt;    directly though the control port using the SETCONF command.
&gt;
&gt;    Initial implementations will support only retrieval and configuration
&gt;    of standard Tor Bridges. These are configured using SETCONF on the Tor
&gt;    Control Port as follows:
&gt;      SETCONF Bridge="IP:ORPort [fingerprint]"
&gt;
&gt;
&gt; Future Implementations
&gt;
&gt;   In future implementations, the system can incrementally evolve in a
&gt;   few different directions. As new pluggable transports are created, it
&gt;   is conceivable that BridgeFinder may want to download new plugin
&gt;   binaries (and/or new transport transform definition files) and
&gt;   provide them to Tor.

BridgeFinder and BridgeFinderHelper MUST NOT write any data received
from the network to any disk without the user's explicit permission.
In particular, they MUST NOT create files with (entirely or partially)
attacker-controlled contents or files with attacker-controlled names
or file extensions.

&gt;
&gt;   Furthermore, it may prove simpler to deploy multiple concurrent
&gt;   BridgeFinder+BridgeFinderHelper pairs as opposed to adding new
&gt;   functionality to existing prototypes.
&gt;
&gt;   Finally, it is desirable for BridgeFinder to obtain approval
&gt;   from the user before updating bridge configuration, especially for
&gt;   cases where BridgeFinderHelper is automatically discovering bridges
&gt;   in-band during Non-Tor activity.
&gt;
&gt;   The exact mechanisms for accomplishing these improvements is
&gt;   described in the following subsections.
&gt;
&gt;  Future Implementations: BridgeFinder Launch and POSTMESSAGE handshake
&gt;
&gt;    The nature of the BridgeFinder launch and the environment variables
&gt;    provided is not expected to change. However, future Primary Controller
&gt;    implementations may decide to launch more than one BridgeFinder
&gt;    instance side by side.
&gt;
&gt;    Additionally, to negotiate the IPC channel created by Proposal 197
&gt;    for purposes of providing user confirmation, it is recommended that
&gt;    BridgeFinder and the Primary Controller perform a handshake using
&gt;    POSTMESSAGE upon launch, to establish that all parties properly
&gt;    support the feature:
&gt;
&gt;      Primary Controller: "POSTMESSAGE @all Controller wants POSTMESSAGE
&gt; v1.1"
&gt;      BridgeFinder: "POSTMESSAGE @all BridgeFinder has POSTMESSAGE v1.0"
&gt;      Primary Controller: "POSTMESSAGE @all Controller expects POSTMESSAGE
&gt; v1.0"
&gt;      BridgeFinder: "POSTMESSAGE @all BridgeFinder will POSTMESSAGE v1.0"
&gt;
&gt;    If this 4 step handshake proceeds with an acceptable version,
&gt;    BridgeFinder must use POSTMESSAGE to transmit SETCONF Bridge lines
&gt;    (see "Future Implementations: Configuring New Bridges" below). If
&gt;    POSTMESSAGE support is expected, but the handshake does not complete
&gt;    for any reason, BridgeFinder should either exit or go dormant.

"POSTMESSAGE" is the name of the Tor control-port command.  It should
not also be the name of a protocol which BridgeFinder may transmit
over the POSTMESSAGE transport layer.

How does Controller know when BridgeFinder has connected to Tor's
control port, so that it can begin the IPC protocol handshake?

What happens if Controller tries to perform an IPC-protocol handshake
with more than one BridgeFinder at the same time?  What about other
components which try to use this interface?

&gt;
&gt;    The exact nature of the version negotiation and exactly how much
&gt;    backwards compatibility must be tolerated is unspecified.
&gt;    "All-or-nothing" is a safe assumption to get started.

The version negotiation MUST be specified completely before anyone
tries to implement it.

&gt;
&gt;  Future Implementations: Obtaining Bridge Hint Information
&gt;
&gt;    Future BridgeFinder implementations may download additional
&gt;    information based on what is provided by BridgeFinderHelper. They
&gt;    may fetch pluggable transport plugins, transformation parameters,
&gt;    and other material.
&gt;
&gt;  Future Implementations: Configuring New Bridges
&gt;
&gt;    Future implementations will be concerned with providing two new pieces
&gt;    of functionality with respect to configuring bridges: configuring
&gt;    pluggable transports, and properly prompting the user before altering
&gt;    Tor configuration.
&gt;
&gt;    There are two ways to tell Tor clients about pluggable transports
&gt;    (as defined in Proposal 180).
&gt;
&gt;    On the control port, an external Proposal 180 transport will be
&gt;    configured with
&gt;      SETCONF ClientTransportPlugin=&lt;method&gt; socks5 &lt;addr:port&gt; [auth=X]
&gt;    as in
&gt;      SETCONF ClientTransportPlugin="trebuchet socks5 127.0.0.1:9999".
&gt;
&gt;    A managed proxy is configured with
&gt;      SETCONF ClientTransportPlugin=&lt;methods&gt; exec &lt;path&gt; [options]
&gt;    as in
&gt;      SETCONF ClientTransportPlugin="trebuchet exec /usr/libexec/trebuchet
&gt; --managed".
&gt;
&gt;    This example tells Tor to launch an external program to provide a
&gt;    socks proxy for 'trebuchet' connections. The Tor client only
&gt;    launches one instance of each external program with a given set of
&gt;    options, even if the same executable and options are listed for
&gt;    more than one method.
&gt;
&gt;    Pluggable transport bridges discovered for this transport by
&gt;    BridgeFinder would then be set with:
&gt;      SETCONF Bridge="trebuchet 3.2.4.1:8080
&gt; keyid	F911029D74E35BD84156C5635688C009F909F9 rocks  height=5.6m".

For this type of PT, you'll also want the target's position (latitude,
longitude, elevation, and datum), and a signed descriptor proving that
the target is expecting to receive packets from this pluggable
transport.

(Sorry.  Couldn't resist.)

&gt;
&gt;    For more information on pluggable transports and supporting Tor
&gt;    configuration commands, see Proposal 180.
&gt;
&gt;  Future Implementations: POSTMESSAGE and User Confirmation
&gt;
&gt;    Because configuring even normal bridges alone can expose the user to
&gt;    attacks, it is strongly desired to provide some mechanism to allow
&gt;    the user to approve new bridges prior to their use, especially for
&gt;    situations where BridgeFinderHelper is extracting them transparently
&gt;    while the user performs unrelated activity.
&gt;
&gt;    If BridgeFinderHelper grows to the point where it is downloading new
&gt;    transform definitions or plugins, user confirmation becomes
&gt;    absolutely required.
&gt;
&gt;    To achieve user confirmation, we depend upon the POSTMESSAGE command
&gt;    defined in Proposal 197.
&gt;
&gt;    If the POSTMESSAGE handshake succeeds, instead of sending SETCONF
&gt;    commands directly to the control port, the commands will be wrapped
&gt;    inside a POSTMESSAGE:
&gt;      POSTMESSAGE @all SETCONF Bridge="www.example.com:8284"
&gt;
&gt;    Upon receiving this POSTMESSAGE, the Primary Controller will
&gt;    validate it, evaluate it, store it to be later enabled by the
&gt;    user, and alert the user that new bridges are available for
&gt;    approval. It is only after the user has approved the new bridges
&gt;    that the Primary Controller should then re-issue the SETCONF commands
&gt;    to configure and deploy them in the tor client.
&gt;
&gt;    Additionally, see "Security Concerns: Primary Controller" for more
&gt;    discussion on potential pitfalls with POSTMESSAGE.
&gt;
&gt; Security Concerns
&gt;
&gt;   While automatic bridge discovery and configuration is quite compelling
&gt;   and powerful, there are several serious security concerns that warrant
&gt;   extreme care. We've broken them down by component.
&gt;
&gt;  Security Concerns: Primary Controller
&gt;
&gt;    In the initial implementation, Orbot and Vidalia must take care to
&gt;    transmit the Tor Control password to BridgeFinder in such a way that
&gt;    it does not end up in system logs, process list, or viewable by other
&gt;    system users. The best known strategy for doing this is by passing the
&gt;    information through exported environment variables.
&gt;
&gt;    Additionally, in future implementations, Orbot and Vidalia will need
&gt;    to validate Proposal 197 POSTMESSAGE input before prompting the user.
&gt;    POSTMESSAGE is a free-form message-passing mechanism. All sorts of
&gt;    unexpected input may be passed through it by any other authenticated
&gt;    Tor Controllers for their own unrelated communication purposes.
&gt;
&gt;    Minimal validation includes verifying that the POSTMESSAGE data is a
&gt;    valid Bridge or ClientTransportPlugin line and is acceptable input for
&gt;    SETCONF. All unexpected characters should be removed through using a
&gt;    whitelist, and format and structure should be checked against a
&gt;    regular expression. Additionally, the POSTMESSAGE string should not be
&gt;    passed through any string processing engines that automatically decode
&gt;    character escape encodings, to avoid arbitrary control port execution.
&gt;
&gt;    At the same time, POSTMESSAGE validation should be light. While fully
&gt;    untrusted input is not expected due to the need for control port
&gt;    authentication and BridgeFinder sanitation, complicated manual string
&gt;    parsing techniques during validation should be avoided. Perform simple
&gt;    easy-to-verify whitelist-based checks, and ignore unrecognized input.
&gt;
&gt;    Beyond POSTMESSAGE validation, the manner in which the Primary
&gt;    Controller achieves consent from the user is absolutely crucial to
&gt;    security under this scheme. A simple "OK/Cancel" dialog is
&gt;    insufficient to protect the user from the dangers of switching
&gt;    bridges and running new plugins automatically.
&gt;
&gt;    Newly discovered bridge lines from POSTMESSAGE should be added to a
&gt;    disabled set that the user must navigate to as an independent window
&gt;    apart from any confirmation dialog. The user must then explicitly
&gt;    enable recently added plugins by checking them off individually. We
&gt;    need the user's brain to be fully engaged and aware that it is
&gt;    interacting with Tor during this step.  If they get an "OK/Cancel"
&gt;    popup that interrupts their online game play, they will almost
&gt;    certainly simply click "OK" just to get back to the game quickly.
&gt;
&gt;    The Primary Controller should transmit the POSTMESSAGE content to the
&gt;    control port only after obtaining this out-of-band approval.
&gt;
&gt; Security Concerns: BridgeFinder and BridgeFinderHelper
&gt;
&gt;   The unspecified nature of the IPC channel between BridgeFinder and
&gt;   BridgeFinderHelper makes it difficult to make concrete security
&gt;   suggestions. However, from past experience, the following best
&gt;   practices must be employed to avoid security vulnerabilities:
&gt;
&gt;   1. Define a non-webby handshake and/or perform authentication
&gt;
&gt;      The biggest risk is that unexpected applications will be manipulated
&gt;      into posting malformed data to the BridgeFinder's IPC channel as if it
&gt;      were from BridgeFinderHelper. The best way to defend against this is
&gt;      to require a handshake to properly complete before accepting input. If
&gt;      the handshake fails at any point, the IPC channel must be abandoned
&gt;      and closed. Do not continue scanning for good input after any bad
&gt;      input has been encountered.
&gt;
&gt;      Additionally, if possible, it is wise to establish a shared secret
&gt;      between BridgeFinder and BridgeFinderHelper through the filesystem or
&gt;      any other means available for use in authentication. For an a good
&gt;      example on how to use such a shared secret properly for
&gt;      authentication, see Trac Ticket #5185 and/or the SafeCookie Tor
&gt;      Control Port authentication mechanism.

Under Windows, the filesystem is not a good way to transfer an
authentication secret.  (Some computers are used by multiple users
with separate Windows user accounts; files on a USB stick may not have
proper separation of privileges.)  Use environment variables instead;
Tor Browser Bundle users are already rather screwed if those are
available to an attacker.

I was about to say that the protocol described and implemented in
#5185 is not a good example, but it actually is a very good example.
But note that every BridgeFinder/BridgeFinderHelper pair MUST use a
different pair of constant strings as HMAC keys, and note that (at a
minimum) the shared secret (‘cookie') and server nonce must have fixed
length, enforced by the client.  (Also, if you have a real hash
function like CubeHash, you can drop the HMAC and feed all the strings
into a single hash-function call.)

&gt;
&gt;   2. Perform validation before parsing
&gt;
&gt;      Care must be taken before converting BridgeFinderHelper data into
&gt;      Bridge lines, especially for cases where the BridgeFinderHelper data
&gt;      is fed directly to the control port after passing through
&gt;      BridgeFinder.
&gt;
&gt;      The input should be subjected to a character whitelist and possibly

s/should/MUST/
s/ possibly//

&gt;      also validated against a regular expression to verify format, and if
&gt;      any unexpected or poorly-formed data is encountered, the IPC channel
&gt;      must be closed.

s/must/MUST/

&gt;
&gt;   3. Fail closed on unexpected input
&gt;
&gt;      If the handshake fails, or if any other part of the BridgeFinderHelper
&gt;      input is invalid, the IPC channel must be abandoned and closed. Do
&gt;      *not* continue scanning for good input after any bad input has been
&gt;      encountered.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120322012808</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-22 01:28:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt; [ snip ]

I've updated the proposal to address your concerns at mikeperry/bridgefinder2.

I've relaxed some of the requirements a little, but I think I still
properly cover everything you mentioned.

Here's the updated proposal inline for more comment:

Filename: 199-bridgefinder-integration.txt
Title: Integration of BridgeFinder and BridgeFinderHelper
Author: Mike Perry
Reviewed-By: Robert Ransom
Created: 18-03-2012
Status: Open
Target: 0.2.3.x+


Overview

  This proposal describes how the Tor client software can interact with
  an external program that performs bridge discovery based on user input
  or information extracted from a web page, QR Code, online game, or
  other transmission medium.


Scope and Audience

  This document describes how all of the components involved in bridge
  discovery communicate this information to the rest of the Tor
  software. The mechanisms of bridge discovery are not discussed, though
  the design aims to be generalized enough to allow arbitrary new
  discovery mechanisms to be added at any time.
  
  This document is also written with the hope that those who wish to
  implement BridgeFinder components and BridgeFinderHelpers can get
  started immediately after a read of this proposal, so that development
  of bridge discovery mechanisms can proceed in parallel to supporting
  functionality improvements in the Tor client software.


Components and Responsibilities

 0. Tor Client
 
    The Tor Client is the piece of software that connects to the Tor
    network (optionally using bridges) and provides a SOCKS proxy for
    use by the user.
 
    In initial implementations, the Tor Client will support only
    standard bridges. In later implementations, it is expected to
    support pluggable transports as defined by Proposal 180.

 1. Tor Control Port
 
    The Tor Control Port provides commands to perform operations,
    configuration, and to obtain status information. It also optionally
    provides event driven status updates.
    
    In initial implementations, it will be used directly by BridgeFinder
    to configure bridge information via GETINFO and SETCONF. It is covered
    by control-spec.txt in the tor-specs git repository.

    In later implementations, it will support the inter-controller
    POSTMESSAGE IPC protocol as defined by Proposal 197 for use
    in conveying bridge information to the Primary Controller.
 
 2. Primary Controller
 
    The Primary Controller is the program that launches and configures the
    Tor client, and monitors its status.
    
    On desktop platforms, this program is Vidalia, and it also launches
    the Tor Browser. On Android, this program is Orbot. Orbot does not
    launch a browser.
    
    On all platforms, this proposal requires that the Primary Controller
    will launch one or more BridgeFinder child processes and provide
    them with authentication information through the environment variables
    TOR_CONTROL_PORT and TOR_CONTROL_PASSWD.

    In later implementations, the Primary Controller will be expected
    to receive Bridge configuration information via the free-form
    POSTMESSAGE protocol from Proposal 197, validate that information,
    and hold that information for user approval.
 
 3. BridgeFinder
 
    A BridgeFinder is a program that discovers bridges and configures
    Tor to use them.
    
    In initial implementations, it is likely to be very dumb, and its main
    purpose will be to serve as a layer of abstraction that should free
    the Primary Controller from having to directly implement numerous ways
    of retrieving bridges for various pluggable transports.
    
    In later implementations, it may perform arbitrary network operations
    to discover, authenticate to, and/or verify bridges, possibly using
    informational hints provided by one or more external
    BridgeFinderHelpers (see next component). It could even go so far as
    to download new pluggable transport plugins and/or transform
    definition files from arbitrary urls.
    
    It will be launched by the Primary Controller and given access to the
    Tor Control Port via the environment variables TOR_CONTROL_PORT and
    TOR_CONTROL_PASSWD.
    
    Initial control port interactions can be command driven via GETINFO
    and SETCONF, and do not need to subscribe to or process control port
    events. Later implementations will use POSTMESSAGE as defined in
    Proposal 197 to pass command requests to Vidalia, which will parse
    them and ask for user confirmation before deploying them. Use of
    POSTMESSAGE may or may not require event driven operation, depending
    on POSTMESSAGE implementation status (POSTMESSAGE is designed to
    support both command and event driven operation, but it is possible 
    event driven operation will happen first).
 
 4. BridgeFinderHelper
 
    Each BridgeFinder implementation can optionally communicate with one
    or more BridgeFinderHelpers. BridgeFinderHelpers are plugins to
    external 3rd party applications that can inspect traffic, handle mime
    types, or implement protocol handlers for accepting bridge discovery
    information to pass to BridgeFinder. Example 3rd party applications
    include Chrome, World of Warcraft, QR Code readers, or simple cut
    and paste.
    
    Due to the arbitrary nature of sandboxing that may be present in
    various BridgeFinderHelper host applications, we do not mandate the
    exact nature of the IPC between BridgeFinder instances and external
    BridgeFinderHelper addons. However, please see the "Security Concerns:
    BridgeFinder and BridgeFinderHelper" section for common pitfalls to
    avoid. 
 
 5. Tor Browser
 
    This is the browser the user uses with Tor. It is not useful until Tor
    is properly configured to use bridges. It fails closed.
    
    It is not expected to run BridgeFinderHelper plugin instances, unless
    those plugin instances exist to ensure the user always has a pool of
    working bridges available after successfully configuring an
    initial bridge. Once all bridges fail, the Tor Browser is useless.

    Any BridgeFinderHelper implementation that does run in Tor Browser
    has to take special care to avoid linkability by malicious exit nodes.
    See "Security Concerns: BridgeFinder and BridgeFinderHelper" for more
    details.
 
 6. Non-Tor Browser (aka BridgeFinderHelper host)
 
    This is the program the user uses for normal Internet activity to
    obtain bridges via a BridgeFinderHelper plugin. It does not have to be
    a browser. In advanced scenarios, this component may not be a browser
    at all, but may be a program such as World of Warcraft instead.


Incremental Deployability

  The system is designed to be incrementally deployable: Simple designs
  should be possible to develop and test immediately. The design is
  flexible enough to be easily upgraded as more advanced features become
  available from both Tor and new pluggable transports.

Initial Implementation

  In the simplest possible initial implementation, BridgeFinder will
  only discover Tor Bridges as they are deployed today. It will use the
  Tor Control Port to configure these bridges directly via the SETCONF
  command. It may or may not receive bridge information from a
  BridgeFinderHelper. In an even more degenerate case,
  BridgeFinderHelper may even be Vidalia or Orbot itself, acting upon
  user input from cut and paste.

 Initial Implementation: BridgeFinder Launch
 
   In the initial implementation, the Primary Controller will launch one
   or more BridgeFinders, providing control port authentication
   information to them through the environment variables TOR_CONTROL_PORT
   and TOR_CONTROL_PASSWD.
   
   BridgeFinder will then directly connect to the control port and
   authenticate. Initial implementations should be able to function
   without using SETEVENTS, and instead only using command-based
   status inquiries and configuration (GETINFO and SETCONF).
 
 Initial Implementation: Obtaining Bridge Hint Information
 
   In the initial implementation, to test functionality,
   BridgeFinderHelper can simply scrape bridges directly from
   https://bridges.torproject.org.
   
   In slightly more advanced implementations, a BridgeFinderHelper
   instance may be written for use in the user's Non-Tor Browser. This
   plugin could extract bridges from images, html comments, and other
   material present in ad banners and slack space on unrelated pages.
 
   BridgeFinderHelper would then communicate with the appropriate
   BridgeFinder instance over an acceptable IPC mechanism. This proposal
   does not seek to specify the nature of that IPC channel (because
   BridgeFinderHelper may be arbitrarily constrained due to host
   application sandboxing), but we do make several security
   recommendations under the section "Security Concerns: BridgeFinder and
   BridgeFinderHelper".
 
 Initial Implementation: Configuring New Bridges
 
   In the initial implementation, Bridge configuration will be done
   directly though the control port using the SETCONF command.
   
   Initial implementations will support only retrieval and configuration
   of standard Tor Bridges. These are configured using SETCONF on the Tor
   Control Port as follows:
     SETCONF Bridge="IP:ORPort [fingerprint]"


Future Implementations

  In future implementations, the system can incrementally evolve in a
  few different directions. As new pluggable transports are created, it
  is conceivable that BridgeFinder may want to download new plugin
  binaries (and/or new transport transform definition files) and
  provide them to Tor.

  Furthermore, it may prove simpler to deploy multiple concurrent
  BridgeFinder+BridgeFinderHelper pairs as opposed to adding new
  functionality to existing prototypes.
  
  Finally, it is desirable for BridgeFinder to obtain approval
  from the user before updating bridge configuration, especially for
  cases where BridgeFinderHelper is automatically discovering bridges
  in-band during Non-Tor activity.

  The exact mechanisms for accomplishing these improvements is
  described in the following subsections.

 Future Implementations: BridgeFinder Launch and POSTMESSAGE handshake
 
   The nature of the BridgeFinder launch and the environment variables
   provided is not expected to change. However, future Primary Controller
   implementations may decide to launch more than one BridgeFinder
   instance side by side.
 
   Additionally, to negotiate the IPC channel created by Proposal 197
   for purposes of providing user confirmation, it is recommended that
   BridgeFinder and the Primary Controller perform a handshake using
   POSTMESSAGE upon launch, to establish that all parties properly
   support the feature:
 
     Primary Controller: "POSTMESSAGE @all Controller wants POSTMESSAGE v1.0"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder has POSTMESSAGE v1.0"
     Primary Controller: "POSTMESSAGE @all Controller expects POSTMESSAGE v1.0"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder will POSTMESSAGE v1.0"
 
   If this 4 step handshake completes, BridgeFinder MUST only use
   POSTMESSAGE to transmit SETCONF Bridge lines (see "Future
   Implementations: Configuring New Bridges" below). If acknowledgment
   is expected, but the handshake does not complete for any reason,
   BridgeFinder should either exit or go dormant.

   To ensure that there are no race conditions for control port
   access, the Primary Controller should verify that launched
   BridgeFinder instances properly connect by using the Proposal 197
   command "GETINFO list-controllers" prior to initiating the handshake.

   Also, for the near future, it is the responsibility of the Primary
   Controller to avoid launching new BridgeFinder instances before the
   handshake with previous instances completes. Once the CONTROLLERNAME
   and POSTMESSAGE SourceControllerIDs portions of Proposal 197 are fully
   implemented, it will be possible to support concurrent handshakes by
   tracking the SourceControllerID property, if it is so desired.

   The exact nature of the version negotiation and exactly how much
   backwards compatibility should be tolerated is unspecified.
   "All-or-nothing" is a safe assumption to get started.

   The version negotiation should be specified completely before anyone
   tries to implement it, however.
 
 Future Implementations: Obtaining Bridge Hint Information
 
   Future BridgeFinder implementations may download additional
   information based on what is provided by BridgeFinderHelper. They
   may fetch pluggable transport plugins, transformation parameters,
   and other material.
 
 Future Implementations: Configuring New Bridges
 
   Future implementations will be concerned with providing two new pieces
   of functionality with respect to configuring bridges: configuring
   pluggable transports, and properly prompting the user before altering
   Tor configuration.
 
   There are two ways to tell Tor clients about pluggable transports
   (as defined in Proposal 180).
 
   On the control port, an external Proposal 180 transport will be
   configured with
     SETCONF ClientTransportPlugin="&lt;method&gt; socks5 &lt;addr:port&gt; [auth=X]"
   as in
     SETCONF ClientTransportPlugin="trebuchet socks5 127.0.0.1:9999".
 
   A managed proxy is configured with
     SETCONF ClientTransportPlugin="&lt;methods&gt; exec &lt;path&gt; [options]"
   as in
     SETCONF ClientTransportPlugin="trebuchet exec /usr/libexec/trebuchet --managed".
 
   This example tells Tor to launch an external program to provide a
   socks proxy for 'trebuchet' connections. The Tor client only
   launches one instance of each external program with a given set of
   options, even if the same executable and options are listed for
   more than one method.
 
   Pluggable transport bridges discovered for this transport by
   BridgeFinder would then be set with:
     SETCONF Bridge="trebuchet 3.2.4.1:8080 keyid=42 rocks=2 height=5.6m".

   For more information on pluggable transports and supporting Tor
   configuration commands, see Proposal 180.
 
 Future Implementations: POSTMESSAGE and User Confirmation
 
   Because configuring even normal bridges alone can expose the user to
   attacks, it is strongly desired to provide some mechanism to allow
   the user to approve new bridges prior to their use, especially for
   situations where BridgeFinderHelper is extracting them transparently
   while the user performs unrelated activity.
 
   If BridgeFinderHelper grows to the point where it is downloading new
   transform definitions or plugins, user confirmation becomes
   absolutely required.
 
   To achieve user confirmation, we depend upon the POSTMESSAGE command
   defined in Proposal 197. 
 
   If the POSTMESSAGE handshake succeeds, instead of sending SETCONF
   commands directly to the control port, the commands will be wrapped
   inside a POSTMESSAGE:
     POSTMESSAGE @all SETCONF Bridge="www.example.com:8284"
 
   Upon receiving this POSTMESSAGE, the Primary Controller will
   validate it, evaluate it, store it to be later enabled by the
   user, and alert the user that new bridges are available for
   approval. It is only after the user has approved the new bridges
   that the Primary Controller should then re-issue the SETCONF commands
   to configure and deploy them in the tor client.
 
   Additionally, see "Security Concerns: Primary Controller" for more
   discussion on potential pitfalls with POSTMESSAGE.

Security Concerns

  While automatic bridge discovery and configuration is quite compelling
  and powerful, there are several serious security concerns that warrant
  extreme care. We've broken them down by component.
  
 Security Concerns: Primary Controller
 
   In the initial implementation, Orbot and Vidalia MUST take care to
   transmit the Tor Control password to BridgeFinder in such a way that
   it does not end up in system logs, process list, or viewable by other
   system users. The best known strategy for doing this is by passing the
   information through exported environment variables.
   
   Additionally, in future implementations, Orbot and Vidalia will need
   to validate Proposal 197 POSTMESSAGE input before prompting the user.
   POSTMESSAGE is a free-form message-passing mechanism. All sorts of
   unexpected input may be passed through it by any other authenticated
   Tor Controllers for their own unrelated communication purposes.

   Minimal validation includes verifying that the POSTMESSAGE data is a
   valid Bridge or ClientTransportPlugin line and is acceptable input for
   SETCONF. All unexpected characters should be removed through using a
   whitelist, and format and structure should be checked against a
   regular expression. Additionally, the POSTMESSAGE string should not be
   passed through any string processing engines that automatically decode
   character escape encodings, to avoid arbitrary control port execution.
   
   At the same time, POSTMESSAGE validation should be light. While fully
   untrusted input is not expected due to the need for control port
   authentication and BridgeFinder sanitation, complicated manual string
   parsing techniques during validation should be avoided. Perform simple
   easy-to-verify whitelist-based checks, and ignore unrecognized input.
   
   Beyond POSTMESSAGE validation, the manner in which the Primary
   Controller achieves consent from the user is absolutely crucial to
   security under this scheme. A simple "OK/Cancel" dialog is
   insufficient to protect the user from the dangers of switching
   bridges and running new plugins automatically.
   
   Newly discovered bridge lines from POSTMESSAGE should be added to a
   disabled set that the user has to navigate to as an independent window
   apart from any confirmation dialog. The user will then explicitly
   enable recently added plugins by checking them off individually. We
   need the user's brain to be fully engaged and aware that it is
   interacting with Tor during this step.  If they get an "OK/Cancel"
   popup that interrupts their online game play, they will almost
   certainly simply click "OK" just to get back to the game quickly.
 
   The Primary Controller should transmit the POSTMESSAGE content to the
   control port only after obtaining this out-of-band approval.
   Additionally, the Primary Controller MUST NOT store any unapproved
   BridgeFinder data on disk until such time as the user is able to
   either accept or reject it.

   Finally, in the event that multiple BridgeFinderHelper plugins are
   to be deployed concurrently using the same BridgeFinder, a proposal
   should be written to introduce a POSTMESSAGE mechanism for
   BridgeFinderHelper attribution, so that the user is able to see
   which BridgeFinderHelper provided which bridges at which time in
   the Primary Controller UI. Up until that point, the POSTMESSAGE
   SourceControllerID property (set using the CONTROLLERNAME command)
   can be used to attribute bridges to a particular BridgeFinder
   instance.

Security Concerns: BridgeFinder and BridgeFinderHelper

  The unspecified nature of the IPC channel between BridgeFinder and
  BridgeFinderHelper makes it difficult to make concrete security
  suggestions. However, from past experience, the following best
  practices MUST be employed to avoid security vulnerabilities:

  1. Define a non-webby handshake and/or perform authentication

     The biggest risk is that unexpected applications will be manipulated
     into posting malformed data to the BridgeFinder's IPC channel as if it
     were from BridgeFinderHelper. The best way to defend against this is
     to require a handshake to properly complete before accepting input. If
     the handshake fails at any point, the IPC channel MUST be abandoned
     and closed. Do not continue scanning for good input after any bad
     input has been encountered.
     
     Additionally, if possible, it is wise to establish a shared secret
     between BridgeFinder and BridgeFinderHelper through the filesystem or
     any other means available for use in authentication. For an a good
     example on how to use such a shared secret properly for
     authentication, see Trac Ticket #5185 and/or the SafeCookie Tor
     Control Port authentication mechanism.

  2. Perform validation before parsing 

     Care has to be taken before converting BridgeFinderHelper data into
     Bridge lines, especially for cases where the BridgeFinderHelper data
     is fed directly to the control port after passing through
     BridgeFinder.

     In specific, the input MUST be subjected to a character whitelist
     and should also be validated against a regular expression to verify
     format, and if any unexpected or poorly-formed data is encountered,
     the IPC channel MUST be closed.

  3. Fail closed on unexpected input

     If the handshake fails, or if any other part of the BridgeFinderHelper
     input is invalid, the IPC channel must be abandoned and closed. Do
     *not* continue scanning for good input after any bad input has been
     encountered.

  4. Exercise care with disk activity

     If transport plugins or definition/configuration files are to be
     downloaded, the BridgeFinder MUST ensure that they are only written to
     a known, controlled subdirectory of the Tor Browser Bundle, and with
     predictable extensions and properly applied permissions.

     In particular, BridgeFinder MUST NOT create files with (entirely or
     partially) attacker-controlled contents or files with
     attacker-controlled names or file extensions.

  5. Exercise care when operating from within Tor Browser

     Any BridgeFinderHelper operating from within Tor Browser MUST NOT
     use the same passive side-channel and/or steganographic techniques
     employed by the Non-Tor BridgeFinderHelper, as these types of
     techniques can be (ab)used by malicious exit nodes to deanonymize
     users by feeding them specific, malicious bridges.

     Any bridge discovery performed from within Tor Browser MUST be active
     in nature (with bridge sources fully controlled by BridgeFinderHelper)
     and MUST be authenticated (via TLS+cert pinning and/or HMAC).

     Further, a BridgeFinder or BridgeFinderHelper MAY make its own
     connections through Tor for the purpose of finding new bridge
     addresses (or updating previously acquired addresses), but MUST use
     Tor's stream isolation feature to separate BridgeFinder streams from
     the user's anonymous/pseudonymous activities.



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120322024802</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-22 02:48:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 2012-03-22, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):
&gt;
&gt;&gt; [ snip ]
&gt;
&gt; I've updated the proposal to address your concerns at
&gt; mikeperry/bridgefinder2.
&gt;
&gt; I've relaxed some of the requirements a little, but I think I still
&gt; properly cover everything you mentioned.

Yes.

&gt; Here's the updated proposal inline for more comment:


&gt;   4. Exercise care with disk activity
&gt;
&gt;      If transport plugins or definition/configuration files are to be
&gt;      downloaded, the BridgeFinder MUST ensure that they are only written to
&gt;      a known, controlled subdirectory of the Tor Browser Bundle, and with
&gt;      predictable extensions and properly applied permissions.

In particular, on platforms and filesystems which have an ‘execute
bit' (primarily non-FAT filesystems on a Unixoid OS), the execute bit
MUST NOT be set on files which are not intended to be executed
directly by the operating system.  (This *should* be obvious, but I'm
afraid that it isn't.)

&gt;      In particular, BridgeFinder MUST NOT create files with (entirely or
&gt;      partially) attacker-controlled contents or files with
&gt;      attacker-controlled names or file extensions.

Some reasons for this restriction are:

* An attacker can plant illegal data (e.g. pictures of naked ankles)
on a user's computer.

* An attacker can plant data which exploits bugs in code which a
file-manager application will apply to the contents of files in any
directory which the user browses to.

* An attacker could plant malicious software in a subdirectory of the
Tor Browser Bundle, and then persuade users to go run it.

If a user asks a BridgeFinder to store not-yet-authenticated data to
disk, I recommend that BridgeFinder ‘grizzle' the data first.  (See
http://www.cl.cam.ac.uk/~rja14/Papers/grizzle.pdf , and note that the
nonce and integrity check are *very* important here.)


&gt;   5. Exercise care when operating from within Tor Browser
&gt;
&gt;      Any BridgeFinderHelper operating from within Tor Browser MUST NOT
&gt;      use the same passive side-channel and/or steganographic techniques
&gt;      employed by the Non-Tor BridgeFinderHelper, as these types of
&gt;      techniques can be (ab)used by malicious exit nodes to deanonymize
&gt;      users by feeding them specific, malicious bridges.

I was worried about malicious content, not necessarily malicious exit
nodes or servers.  (For example, They send e-mail containing one piece
of BridgeFinderHelper information to a dissident which They want to
locate, and spray the other pieces of information for Their malicious
bridge all over.)

&gt;      Any bridge discovery performed from within Tor Browser MUST be active
&gt;      in nature (with bridge sources fully controlled by BridgeFinderHelper)
&gt;      and MUST be authenticated (via TLS+cert pinning and/or HMAC).

Public-key signatures are better than either of those authentication methods.

&gt;      Further, a BridgeFinder or BridgeFinderHelper MAY make its own
&gt;      connections through Tor for the purpose of finding new bridge
&gt;      addresses (or updating previously acquired addresses), but MUST use
&gt;      Tor's stream isolation feature to separate BridgeFinder streams from
&gt;      the user's anonymous/pseudonymous activities.



Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120322025659</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-22 02:56:59-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 2012-03-22, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):
&gt;
&gt;&gt; [ snip ]
&gt;
&gt; I've updated the proposal to address your concerns at
&gt; mikeperry/bridgefinder2.
&gt;
&gt; I've relaxed some of the requirements a little, but I think I still
&gt; properly cover everything you mentioned.

I missed something: You need to use a protocol name other than
"POSTMESSAGE" for the protocol which will be spoken over the
POSTMESSAGE transport layer.

If you aren't feeling creative, ‘pwgen -0A' might help.  Or look
through a list of names of potential bikeshed colors.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120322041729</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-03-22 04:17:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 03/21/2012 06:28 PM, Mike Perry wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):
&gt; 
&gt;&gt; [ snip ]
&gt; 
&gt; I've updated the proposal to address your concerns at mikeperry/bridgefinder2.

When you and Robert finish hashing this out, please let me know and I'll
merge your final commits with torspec.git.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120322214357</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-22 21:43:57-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt; [ snip ]

Ok, attempt #2. This time I tried to get at the core of your concerns
about attacker controlled input by requring some form of authentication
on all bridge information that is to be automatically configured.

I also added a requirement for end to end encryption to be performed on
the content of any side channels that can be observed by exit nodes, and
made a few other minor tweaks.

Here's the diff (pushed to mikeperry/bridgefinder2 again):
https://gitweb.torproject.org/user/mikeperry/torspec.git/commitdiff/f6fbb43bb59c921449c4f64f13fe26e15e3901dc


And here's the full updated proposal again:

Filename: 199-bridgefinder-integration.txt
Title: Integration of BridgeFinder and BridgeFinderHelper
Author: Mike Perry
Reviewed-By: Robert Ransom
Created: 18-03-2012
Status: Open
Target: 0.2.3.x+


Overview

  This proposal describes how the Tor client software can interact with
  an external program that performs bridge discovery based on user input
  or information extracted from a web page, QR Code, online game, or
  other transmission medium.


Scope and Audience

  This document describes how all of the components involved in bridge
  discovery communicate this information to the rest of the Tor
  software. The mechanisms of bridge discovery are not discussed, though
  the design aims to be generalized enough to allow arbitrary new
  discovery mechanisms to be added at any time.
  
  This document is also written with the hope that those who wish to
  implement BridgeFinder components and BridgeFinderHelpers can get
  started immediately after a read of this proposal, so that development
  of bridge discovery mechanisms can proceed in parallel to supporting
  functionality improvements in the Tor client software.


Components and Responsibilities

 0. Tor Client
 
    The Tor Client is the piece of software that connects to the Tor
    network (optionally using bridges) and provides a SOCKS proxy for
    use by the user.
 
    In initial implementations, the Tor Client will support only
    standard bridges. In later implementations, it is expected to
    support pluggable transports as defined by Proposal 180.

 1. Tor Control Port
 
    The Tor Control Port provides commands to perform operations,
    configuration, and to obtain status information. It also optionally
    provides event driven status updates.
    
    In initial implementations, it will be used directly by BridgeFinder
    to configure bridge information via GETINFO and SETCONF. It is covered
    by control-spec.txt in the tor-specs git repository.

    In later implementations, it will support the inter-controller
    POSTMESSAGE IPC protocol as defined by Proposal 197 for use
    in conveying bridge information to the Primary Controller.
 
 2. Primary Controller
 
    The Primary Controller is the program that launches and configures the
    Tor client, and monitors its status.
    
    On desktop platforms, this program is Vidalia, and it also launches
    the Tor Browser. On Android, this program is Orbot. Orbot does not
    launch a browser.
    
    On all platforms, this proposal requires that the Primary Controller
    will launch one or more BridgeFinder child processes and provide
    them with authentication information through the environment variables
    TOR_CONTROL_PORT and TOR_CONTROL_PASSWD.

    In later implementations, the Primary Controller will be expected
    to receive Bridge configuration information via the free-form
    POSTMESSAGE protocol from Proposal 197, validate that information,
    and hold that information for user approval.
 
 3. BridgeFinder
 
    A BridgeFinder is a program that discovers bridges and configures
    Tor to use them.
    
    In initial implementations, it is likely to be very dumb, and its main
    purpose will be to serve as a layer of abstraction that should free
    the Primary Controller from having to directly implement numerous ways
    of retrieving bridges for various pluggable transports.
    
    In later implementations, it may perform arbitrary network operations
    to discover, authenticate to, and/or verify bridges, possibly using
    informational hints provided by one or more external
    BridgeFinderHelpers (see next component). It could even go so far as
    to download new pluggable transport plugins and/or transform
    definition files from arbitrary urls.
    
    It will be launched by the Primary Controller and given access to the
    Tor Control Port via the environment variables TOR_CONTROL_PORT and
    TOR_CONTROL_PASSWD.
    
    Initial control port interactions can be command driven via GETINFO
    and SETCONF, and do not need to subscribe to or process control port
    events. Later implementations will use POSTMESSAGE as defined in
    Proposal 197 to pass command requests to Vidalia, which will parse
    them and ask for user confirmation before deploying them. Use of
    POSTMESSAGE may or may not require event driven operation, depending
    on POSTMESSAGE implementation status (POSTMESSAGE is designed to
    support both command and event driven operation, but it is possible 
    event driven operation will happen first).
 
 4. BridgeFinderHelper
 
    Each BridgeFinder implementation can optionally communicate with one
    or more BridgeFinderHelpers. BridgeFinderHelpers are plugins to
    external 3rd party applications that can inspect traffic, handle mime
    types, or implement protocol handlers for accepting bridge discovery
    information to pass to BridgeFinder. Example 3rd party applications
    include Chrome, World of Warcraft, QR Code readers, or simple cut
    and paste.
    
    Due to the arbitrary nature of sandboxing that may be present in
    various BridgeFinderHelper host applications, we do not mandate the
    exact nature of the IPC between BridgeFinder instances and external
    BridgeFinderHelper addons. However, please see the "Security Concerns:
    BridgeFinder and BridgeFinderHelper" section for common pitfalls to
    avoid. 
 
 5. Tor Browser
 
    This is the browser the user uses with Tor. It is not useful until Tor
    is properly configured to use bridges. It fails closed.
    
    It is not expected to run BridgeFinderHelper plugin instances, unless
    those plugin instances exist to ensure the user always has a pool of
    working bridges available after successfully configuring an
    initial bridge. Once all bridges fail, the Tor Browser is useless.

    Any BridgeFinderHelper implementation that does run in Tor Browser
    has to take special care to avoid linkability by malicious exit nodes.
    See "Security Concerns: BridgeFinder and BridgeFinderHelper" for more
    details.
 
 6. Non-Tor Browser (aka BridgeFinderHelper host)
 
    This is the program the user uses for normal Internet activity to
    obtain bridges via a BridgeFinderHelper plugin. It does not have to be
    a browser. In advanced scenarios, this component may not be a browser
    at all, but may be a program such as World of Warcraft instead.


Incremental Deployability

  The system is designed to be incrementally deployable: Simple designs
  should be possible to develop and test immediately. The design is
  flexible enough to be easily upgraded as more advanced features become
  available from both Tor and new pluggable transports.

Initial Implementation

  In the simplest possible initial implementation, BridgeFinder will
  only discover Tor Bridges as they are deployed today. It will use the
  Tor Control Port to configure these bridges directly via the SETCONF
  command. It may or may not receive bridge information from a
  BridgeFinderHelper. In an even more degenerate case,
  BridgeFinderHelper may even be Vidalia or Orbot itself, acting upon
  user input from cut and paste.

 Initial Implementation: BridgeFinder Launch
 
   In the initial implementation, the Primary Controller will launch one
   or more BridgeFinders, providing control port authentication
   information to them through the environment variables TOR_CONTROL_PORT
   and TOR_CONTROL_PASSWD.
   
   BridgeFinder will then directly connect to the control port and
   authenticate. Initial implementations should be able to function
   without using SETEVENTS, and instead only using command-based
   status inquiries and configuration (GETINFO and SETCONF).
 
 Initial Implementation: Obtaining Bridge Hint Information
 
   In the initial implementation, to test functionality,
   BridgeFinderHelper can simply scrape bridges directly from
   https://bridges.torproject.org.
   
   In slightly more advanced implementations, a BridgeFinderHelper
   instance may be written for use in the user's Non-Tor Browser. This
   plugin could extract bridges from images, html comments, and other
   material present in ad banners and slack space on unrelated pages.
 
   BridgeFinderHelper would then communicate with the appropriate
   BridgeFinder instance over an acceptable IPC mechanism. This proposal
   does not seek to specify the nature of that IPC channel (because
   BridgeFinderHelper may be arbitrarily constrained due to host
   application sandboxing), but we do make several security
   recommendations under the section "Security Concerns: BridgeFinder and
   BridgeFinderHelper".
 
 Initial Implementation: Configuring New Bridges
 
   In the initial implementation, Bridge configuration will be done
   directly though the control port using the SETCONF command.
   
   Initial implementations will support only retrieval and configuration
   of standard Tor Bridges. These are configured using SETCONF on the Tor
   Control Port as follows:
     SETCONF Bridge="IP:ORPort [fingerprint]"


Future Implementations

  In future implementations, the system can incrementally evolve in a
  few different directions. As new pluggable transports are created, it
  is conceivable that BridgeFinder may want to download new plugin
  binaries (and/or new transport transform definition files) and
  provide them to Tor.

  Furthermore, it may prove simpler to deploy multiple concurrent
  BridgeFinder+BridgeFinderHelper pairs as opposed to adding new
  functionality to existing prototypes.
  
  Finally, it is desirable for BridgeFinder to obtain approval
  from the user before updating bridge configuration, especially for
  cases where BridgeFinderHelper is automatically discovering bridges
  in-band during Non-Tor activity.

  The exact mechanisms for accomplishing these improvements is
  described in the following subsections.

 Future Implementations: BridgeFinder Launch and POSTMESSAGE handshake
 
   The nature of the BridgeFinder launch and the environment variables
   provided is not expected to change. However, future Primary Controller
   implementations may decide to launch more than one BridgeFinder
   instance side by side.
 
   Additionally, to negotiate the IPC channel created by Proposal 197
   for purposes of providing user confirmation, it is recommended that
   BridgeFinder and the Primary Controller perform a handshake using
   POSTMESSAGE upon launch, to establish that all parties properly
   support the feature:
 
     Primary Controller: "POSTMESSAGE @all Controller wants POSTMESSAGE v1.0"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder has POSTMESSAGE v1.0"
     Primary Controller: "POSTMESSAGE @all Controller expects POSTMESSAGE v1.0"
     BridgeFinder: "POSTMESSAGE @all BridgeFinder will POSTMESSAGE v1.0"
 
   If this 4 step handshake completes, BridgeFinder MUST only use
   POSTMESSAGE to transmit SETCONF Bridge lines (see "Future
   Implementations: POSTMESSAGE Request and User Confirmation" below). If
   acknowledgment is expected, but the handshake does not complete for
   any reason, BridgeFinder should either exit or go dormant.

   To ensure that there are no race conditions for control port
   access, the Primary Controller should verify that launched
   BridgeFinder instances properly connect by using the Proposal 197
   command "GETINFO list-controllers" prior to initiating the handshake.

   Also, for the near future, it is the responsibility of the Primary
   Controller to avoid launching new BridgeFinder instances before the
   handshake with previous instances completes. Once the CONTROLLERNAME
   and POSTMESSAGE SourceControllerID portions of Proposal 197 are fully
   implemented, it will be possible to support concurrent handshakes by
   tracking the SourceControllerID property, if it is so desired.

   The exact nature of the version negotiation and exactly how much
   backwards compatibility should be tolerated is unspecified.
   "All-or-nothing" is a safe assumption to get started.

   The version negotiation should be specified completely before anyone
   tries to implement it, however.
 
 Future Implementations: Obtaining Bridge Hint Information
 
   Future BridgeFinder implementations may download additional
   information based on what is provided by BridgeFinderHelper. They
   may fetch pluggable transport plugins, transformation parameters,
   and other material.
 
 Future Implementations: Configuring Pluggable Transport Bridges
 
   Future implementations will be concerned with providing two new pieces
   of functionality with respect to configuring bridges: configuring
   pluggable transports, and properly prompting the user before altering
   Tor configuration.
 
   There are two ways to tell Tor clients about pluggable transports
   (as defined in Proposal 180).
 
   On the control port, an external Proposal 180 transport will be
   configured with
     SETCONF ClientTransportPlugin="&lt;method&gt; socks5 &lt;addr:port&gt; [auth=X]"
   as in
     SETCONF ClientTransportPlugin="trebuchet socks5 127.0.0.1:9999".
 
   A managed proxy is configured with
     SETCONF ClientTransportPlugin="&lt;methods&gt; exec &lt;path&gt; [options]"
   as in
     SETCONF ClientTransportPlugin="trebuchet exec /usr/libexec/trebuchet --managed".
 
   This example tells Tor to launch an external program to provide a
   socks proxy for 'trebuchet' connections. The Tor client only
   launches one instance of each external program with a given set of
   options, even if the same executable and options are listed for
   more than one method.
 
   Pluggable transport bridges discovered for this transport by
   BridgeFinder would then be set with:
     SETCONF Bridge="trebuchet 3.2.4.1:8080 keyid=42 rocks=2 height=5.6m".

   For more information on pluggable transports and supporting Tor
   configuration commands, see Proposal 180.
 
 Future Implementations: POSTMESSAGE Request and User Confirmation
 
   Because configuring even normal bridges alone can expose the user to
   attacks, it is strongly desired to provide some mechanism to allow
   the user to approve new bridges prior to their use, especially for
   situations where BridgeFinderHelper is extracting them transparently
   while the user performs unrelated activity.
 
   If BridgeFinderHelper grows to the point where it is downloading new
   transform definitions or plugins, user confirmation becomes
   absolutely required.
 
   To achieve user confirmation, we depend upon the POSTMESSAGE command
   defined in Proposal 197. We use it to develop the informal and ad-hoc
   "POSTMESSAGE Request" protocol, whereby BridgeFinder implementations
   will use POSTMESSAGE commands to request that bridges be configured
   by the Primary Controller.
 
   If the POSTMESSAGE handshake succeeds, instead of sending SETCONF
   commands directly to the control port, the commands will be wrapped
   inside a POSTMESSAGE:
     POSTMESSAGE @all Request SETCONF Bridge="www.example.com:8284"
                      ^^^^^^^ `````````````````````````````````````

   Notice that the original initial implementation's SETCONF is pasted
   verbatim inside the POSTMESSAGE free-form message body. Notice also
   the addition of the "Request" prefix, which is intended to make it
   easier for POSTMESSAGE subscribers to filter messages of interest.
 
   Upon receiving this POSTMESSAGE Request, the Primary Controller will
   validate it, evaluate it, store it to be later enabled by the
   user, and alert the user that new bridges are available for
   approval. It is only after the user has approved the new bridges
   that the Primary Controller should then re-issue the SETCONF commands
   to configure and deploy them in the tor client.
 
   Additionally, see "Security Concerns: Primary Controller" for more
   discussion on potential pitfalls with POSTMESSAGE.

Security Concerns

  While automatic bridge discovery and configuration is quite compelling
  and powerful, there are several serious security concerns that warrant
  extreme care. We've broken them down by component.
  
 Security Concerns: Primary Controller
 
   In the initial implementation, Orbot and Vidalia MUST take care to
   transmit the Tor Control password to BridgeFinder in such a way that
   it does not end up in system logs, process list, or viewable by other
   system users. The best known strategy for doing this is by passing the
   information through exported environment variables.
   
   Additionally, in future implementations, Orbot and Vidalia will need
   to validate Proposal 197 POSTMESSAGE input before prompting the user.
   POSTMESSAGE is a free-form message-passing mechanism. All sorts of
   unexpected input may be passed through it by any other authenticated
   Tor Controllers for their own unrelated communication purposes.

   Minimal validation includes verifying that each POSTMESSAGE "Request"
   payload is a valid Bridge or ClientTransportPlugin line and is
   acceptable input for SETCONF. All unexpected characters should be
   removed through using a whitelist, and format and structure should be
   checked against a regular expression. Additionally, the POSTMESSAGE
   string should not be passed through any string processing engines that
   automatically decode character escape encodings, to avoid arbitrary
   control port execution.
   
   At the same time, POSTMESSAGE validation should be light. While fully
   untrusted input is not expected due to the need for control port
   authentication and BridgeFinder sanitation, complicated manual string
   parsing techniques during validation should be avoided. Perform simple
   easy-to-verify whitelist-based checks, and ignore unrecognized input.
   
   Beyond POSTMESSAGE validation, the manner in which the Primary
   Controller achieves consent from the user is absolutely crucial to
   security under this scheme. A simple "OK/Cancel" dialog is
   insufficient to protect the user from the dangers of switching
   bridges and running new plugins automatically.
   
   Newly discovered bridge lines from POSTMESSAGE should be added to a
   disabled set that the user has to navigate to as an independent window
   apart from any confirmation dialog. The user will then explicitly
   enable recently added bridges by checking them off individually. We
   need the user's brain to be fully engaged and aware that it is
   interacting with Tor during this step.  If they get an "OK/Cancel"
   popup that interrupts their online game play, they will almost
   certainly simply click "OK" just to get back to the game quickly.
 
   The Primary Controller should transmit the POSTMESSAGE content to the
   control port only after obtaining this out-of-band approval.
   Additionally, the Primary Controller MUST NOT store any unapproved
   BridgeFinder data on disk until such time as the user is able to
   either accept or reject it.

   Finally, in the event that multiple BridgeFinderHelper plugins are
   to be deployed concurrently using the same BridgeFinder, a proposal
   should be written to introduce a POSTMESSAGE mechanism for
   BridgeFinderHelper attribution, so that the user is able to see
   which BridgeFinderHelper provided which bridges at which time in
   the Primary Controller UI. Up until that point, the POSTMESSAGE
   SourceControllerID property (set using the CONTROLLERNAME command)
   can be used to attribute bridges to a particular BridgeFinder
   instance.

 Security Concerns: BridgeFinder and BridgeFinderHelper

  The unspecified nature of the IPC channel between BridgeFinder and
  BridgeFinderHelper makes it difficult to make concrete security
  suggestions. However, from past experience, the following best
  practices MUST be employed to avoid security vulnerabilities:

  1. Define a non-webby handshake and/or perform authentication

     The biggest risk is that unexpected applications will be manipulated
     into posting malformed data to the BridgeFinder's IPC channel as if it
     were from BridgeFinderHelper. The best way to defend against this is
     to require a handshake to properly complete before accepting input. If
     the handshake fails at any point, the IPC channel MUST be abandoned
     and closed. Do not continue scanning for good input after any bad
     input has been encountered.
     
     Additionally, if possible, it is wise to establish a shared secret
     between BridgeFinder and BridgeFinderHelper through the filesystem or
     any other means available for use in authentication. For an a good
     example on how to use such a shared secret properly for
     authentication, see Trac Ticket #5185 and/or the SafeCookie Tor
     Control Port authentication mechanism.

  2. Perform validation before parsing 

     Care has to be taken before converting BridgeFinderHelper data into
     Bridge lines, especially for cases where the BridgeFinderHelper data
     is fed directly to the control port after passing through
     BridgeFinder.

     In specific, the input MUST be subjected to a character whitelist
     and should also be validated against a regular expression to verify
     format, and if any unexpected or poorly-formed data is encountered,
     the IPC channel MUST be closed.

  3. Fail closed on unexpected input

     If the handshake fails, or if any other part of the BridgeFinderHelper
     input is invalid, the IPC channel must be abandoned and closed. Do
     *not* continue scanning for good input after any bad input has been
     encountered.

  4. Authenticate Bridge Information

     One of BridgeFinder or BridgeFinderHelper MUST authenticate all
     discovered bridge information using TLS+cert pinning, HMAC, or 
     public key signatures, to protect against malicious bridge
     injection.

  5. Exercise care with disk activity

     If transport plugins or definition/configuration files are to be
     downloaded, the BridgeFinder MUST ensure that they are only written
     to a known, controlled subdirectory of the Tor Browser Bundle, and
     with predictable extensions and properly applied permissions (such
     as removal of execute permissions for transform definition files).

     In particular, BridgeFinder MUST NOT create files with (entirely or
     partially) attacker-controlled contents or files with
     attacker-controlled names or file extensions. The prior point
     about authenticating Bridge Information applies especially to
     downloaded file content to avoid attacker control over content.

  6. Exercise additional care when operating from within Tor Browser

     In addition to the authentication properties required for all
     automated bridge transmission, any bridge discovery performed from
     within Tor Browser MUST deploy end to end encryption layered
     inside whatever side channels it uses for discovery. This must be
     done to avoid exit node observation of bridge information and
     resulting linkability.

     Further, a BridgeFinder or BridgeFinderHelper MAY make its own
     active connections through Tor for the purpose of finding new bridge
     addresses (or updating previously acquired addresses), but MUST use
     Tor's stream isolation feature (Proposal 171) to separate BridgeFinder
     streams from the user's anonymous/pseudonymous activities.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120326204808</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-26 20:48:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 2012-03-22, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):
&gt;
&gt;&gt; [ snip ]
&gt;
&gt; Ok, attempt #2. This time I tried to get at the core of your concerns
&gt; about attacker controlled input by requring some form of authentication
&gt; on all bridge information that is to be automatically configured.

I rewrote most of the ‘Security Concerns' section for
BridgeFinder/Helper.  Please merge:
      https://git.torproject.org/rransom/torspec.git bridgefinder2



 Security Concerns: BridgeFinder and BridgeFinderHelper

  1. Do not allow attacks on your IPC channel by malicious local 'live data'

     The biggest risk is that unexpected applications will be
     manipulated into posting malformed data to the BridgeFinder's IPC
     channel as if it were from BridgeFinderHelper. The best way to
     defend against this is to require a handshake to properly
     complete before accepting input. If the handshake fails at any
     point, the IPC channel MUST be abandoned and closed. Do *not*
     continue scanning for good input after any bad input has been
     encountered; that practice may allow cross-protocol attacks by
     malicious JavaScript running in the user's non-Tor web browser.

     Additionally, it is wise to establish a shared secret between
     BridgeFinder and BridgeFinderHelper, using an environment
     variable if possible.  For an a good example on how to use such a
     shared secret properly for authentication; see Tor ticket #5185
     and/or the SAFECOOKIE Tor control port authentication method.


  2. Do not allow attacks against the Controller

     Care has to be taken before converting BridgeFinderHelper data into
     Bridge lines, especially for cases where the BridgeFinderHelper data
     is fed directly to the control port after passing through
     BridgeFinder.

     In specific, the input MUST be subjected to a character whitelist
     and should also be validated against a regular expression to
     verify format, and if any unexpected or poorly-formed data is
     encountered, the IPC channel MUST be closed.

     Malicious control-port commands can completely destroy a user's
     anonymity.  BridgeFinder is responsible for preventing strings
     which could plausibly cause execution of arbitrary control-port
     commands from reaching the Controller.


  3. Provide information about bridge sources to users

     BridgeFinder MUST provide complete information about how each
     bridge was obtained (who provided the bridge data, where the
     party which provided the data intended that it be sent to users,
     and what activities BridgeFinder extracted the data from) to
     users so that they can make an informed decision about whether to
     trust the bridge.

     BridgeFinder MUST authenticate, for every piece of discovered
     bridge data, the party which provided the bridge address, the
     party which prepared the bridge data in BridgeFinder's input
     format, and the time, location, and manner in which the latter
     party intended that the bridge data be distributed.  (Use of an
     interactive authentication protocol is not sufficient to
     authenticate the intended location and manner of distribution of
     the bridge data; those facts must be explicitly authenticated.)

     These requirements are intended to prevent or mitigate several
     serious attacks, including the following:

     * A malicious bridge can 'tag' its client's circuits so that a
       malicious exit node can easily recognize them, thereby
       associating the client with some or all of its anonymous or
       pseudonymous activities.  (This attack may be mitigated by new
       cryptographic protocols in a near-future version of Tor.)

     * A malicious bridge can attempt to limit its client's knowledge
       of the Tor network, thereby biasing the client's path selection
       toward attacker-controlled relays.

     * A piece of bridge data containing the address of a malicious
       bridge may be copied to distribution channels other than those
       through which it was intended to be distributed, in order to
       expose more clients to a particular malicious bridge.

     * Pieces of bridge data containing the addresses of non-malicious
       bridges may be copied to other-than-intended distribution
       channels, in order to cause a particular client to attempt to
       connect to a known, unusual set of bridges, thus allowing a
       malicious ISP to monitor the client's movements to other
       network and/or physical locations.

     BridgeFinder MUST warn users about the above attacks, and warn
     that other attacks may also be possible if users accept
     improperly distributed bridge data.


  4. Exercise care with what is written to disk

     BridgeFinder developers must be aware of the following attacks,
     and ensure that their software does not expose users to any of
     them:

     * An attacker could plant illegal data on a user's computer, to
       be used later (after a search) as justification to imprison the
       user.

     * An attacker could plant malicious data intended to exploit bugs
       in processes which automatically inspect all files on a user's
       disks.  (Some examples of such processes are indexing services
       for filesystem search tools, or anti-virus software.)

     * An attacker could plant malicious data intended to exploit code
       used by a file manager to extract metadata or thumbnails from
       files.

     * An attacker could plant malicious data intended to exploit code
       run when a user tries to open or view a file.  (On Unixoid
       systems, executable files which are not in a recognized binary
       format are interpreted by /bin/sh if a user is persuaded to run
       them.  A header is not enough to prevent all attacks of this
       class; malicious data anywhere within a file could take over a
       user's computer.)

     Note that parties which can be trusted to supply bridges to users
     should not be trusted with full code-exec privileges on every
     user's computer.  (For example, bridge descriptors are generated
     and signed by the person who runs a bridge -- but *anyone* can
     run a bridge and start signing bridge descriptors.)

     In order to prevent the above attacks (and others), BridgeFinder
     MUST NOT create files whose contents (entirely or partially) or
     names or file extensions are controlled by a party not intended
     to have full code-exec privileges on every user's computer.

     BridgeFinder SHOULD mark data files which are not intended to be
     executed by the operating system as non-executable, whenever that
     is possible.  (It is not possible when Tor Browser Bundle is run
     on a FAT filesystem on a Unixoid operating system; that
     configuration is supported and known to be used.)

     One way to avoid the code-exec attacks above is to obfuscate data
     (using strong cryptography) before writing it to disk.  Possible
     obfuscation methods include 'grizzling' the data [1] (note that
     the random nonce is important here) or encrypting the data with a
     newly-generated random key and storing the key with the encrypted
     data on disk.  These do not address the illegal-data attack
     (because the user is, in theory, able to de-obfuscate and read
     the data), but they do make it significantly harder for the
     attacker's goons to 'find' the data during a search.

     If a BridgeFinder obfuscates data which it stores on disk, its
     authors MUST provide a simple program to de-obfuscate the data
     (with full source code) so that users can find out what data
     BridgeFinder has collected, and BridgeFinder MUST put a text file
     named "README.txt" in the directory containing the obfuscated
     files explaining how to obtain and use the de-obfuscation tool
     and why such a tool is necessary.


     BridgeFinder SHOULD NOT store information to disk which reveals
     the user's activities in his/her/its non-Tor Browser; some of
     those activities may not otherwise be visible to a censoring
     attacker.  BridgeFinder MUST NOT store such information to disk
     unless the user has explicitly asked it to.


  5. Exercise care with where things are written to disk

     The Tor Browser Bundle is designed to not leave traces that it
     has been run on a computer outside the directory in which it was
     unpacked, and, to the extent possible, to mitigate any such
     traces left by the operating system.

     BridgeFinder MUST NOT write data to disk outside the Tor Browser
     Bundle directory at any time.  BridgeFinder MUST NOT use any
     operating system features which are known to write data to disk
     outside the Tor Browser Bundle directory.

     If BridgeFinderHelper operates as an extension of a program which
     the user has installed on his/her/its computer, it (or
     configuration data needed to cause the non-Tor Browser to load
     it) may need to be installed outside the Tor Browser Bundle
     directory.  However, BridgeFinderHelper SHOULD NOT write data to
     disk or cause data to be written to disk outside the TBB directory.

     BridgeFinderHelper MUST NOT be installed outside the TBB
     directory, and MUST NOT write data to disk, unless the user has
     explicitly permitted that.

     BridgeFinder, BridgeFinderHelper, and their installation
     routines, MUST warn users that traces written to a disk cannot be
     erased without erasing the entire filesystem before asking for
     permission to write outside the TBB directory.  (The user has
     already chosen to leave traces of TBB in the directory it was
     unpacked into.)


     On multi-user operating systems which meaningfully support
     filesystem permissions on the filesystem containing the Tor
     Browser Bundle, BridgeFinder MUST set permissions correctly on
     the files it creates.  In particular, when filesystem permissions
     are available, files containing software meant to be run by
     BridgeFinder MUST NOT be writable by any other OS-level user than
     the one running BridgeFinder, and files containing data not
     intended to be loaded by the operating system as an executable
     file MUST NOT be marked as executable.


  6. Avoid assumptions about BridgeFinder's process environment

     BridgeFinder and BridgeFinderHelper MUST NOT allow any data to be
     sent to their standard output and standard error files.  (On
     Linux, those file descriptors often point to
     $HOME/.xsession-errors; on MacOS, data sent to an application's
     stdout or stderr is recorded in /var/log/system.log.)

     BridgeFinder and BridgeFinderHelper MUST NOT change their
     behaviour based on the values or presence of environment
     variables except as required by IPC protocols which they must
     conform to.  Very few users know that environment variables
     exist, and many of those who do do not understand how environment
     variables work.  Naive users can easily be conned into setting
     environment variables which will cause BridgeFinder or
     BridgeFinderHelper to misbehave.


  7. Do not attempt to operate from within Tor Browser

     BridgeFinder and BridgeFinderHelper MUST NOT attempt to
     automatically obtain information about bridges from within Tor
     Browser.  Doing so would allow an attacker to de-anonymize a
     pseudonymous user by sending pieces of bridge information to
     him/her/it, or learn about a user's anonymous activities by
     planting pieces of bridge information on websites of interest to
     the attacker.  (Checking that pieces of bridge information are
     signed by a party trusted to provide them is not sufficient to
     defend against this class of attack; signatures on a piece of
     bridge information do not authenticate metadata such as the web
     page meant to distribute it or the e-mail address to which it was
     sent.)

     BridgeFinder SHOULD NOT use information obtained by the user
     through the Tor Browser.  If it does, it MUST only use
     information explicitly provided to BridgeFinder by the user for
     the purpose of bridge discovery, and it MUST warn the user that
     maliciously placed bridge information could be used to identify
     and/or locate users who receive and use it.

     A BridgeFinder or BridgeFinderHelper MAY make its own active
     connections through Tor for the purpose of finding new bridge
     addresses (or updating previously acquired addresses), but MUST
     use Tor's stream isolation feature (Tor proposal 171) to separate
     BridgeFinder streams from the user's anonymous/pseudonymous
     activities.


  8. Do not stick beans up the user's nose

     Deployed versions of BridgeFinder and BridgeFinderHelper MUST NOT
     have any debugging features which cause them to log sensitive
     data to disk.  Someone *will* turn them on, whether by accident
     or by malice.

     Development versions of BridgeFinder and BridgeFinderHelper which
     have such debugging features MUST warn users that they are
     development builds and should not be used by non-developers.


     If BridgeFinder and/or BridgeFinderHelper open listening sockets
     for IPC purposes, those sockets MUST be bound to a loopback
     address (not to e.g. IPADDR_ANY).  Otherwise, They could probe
     for your IPC socket's presence on a user's computer.


  9. Inform BridgeFinder developers about these issues

     All documents prepared or promoted by Tor Project, Inc. which are
     intended to be sufficient for the reader to implement a
     BridgeFinder must describe the known security considerations for
     BridgeFinders and their underlying rationales.

     The BridgeFinder interface is intended to allow developers who
     are not experts on Tor, and who may not be aware of the unusual
     threat models which Tor and Tor Browser Bundle address, to write
     software which users and distributors will integrate into Tor
     Browser Bundle.  These developers are unlikely to be aware of
     Tor-specific and BridgeFinder-specific security considerations
     (e.g. attacks involving malicious bridges), and even developers
     who are informed about the rules stated above may see the rules
     as unnecessary and ignore them if their rationales are not
     explicitly stated.


     In general, BridgeFinder developers need to be aware that they
     are writing security-critical code, with a large set of
     application-specific security requirements on top of the usual
     security requirements for all software which interacts with an
     untrusted network.


1. http://www.cl.cam.ac.uk/~rja14/Papers/grizzle.pdf



Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120326210902</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-26 21:09:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt; I rewrote most of the ‘Security Concerns' section for
&gt; BridgeFinder/Helper.  Please merge:
&gt;       https://git.torproject.org/rransom/torspec.git bridgefinder2
&gt; 
&gt;  Security Concerns: BridgeFinder and BridgeFinderHelper
&gt; 
&gt;   1. Do not allow attacks on your IPC channel by malicious local 'live data'
&gt; 
&gt;      The biggest risk is that unexpected applications will be
&gt;      manipulated into posting malformed data to the BridgeFinder's IPC
&gt;      channel as if it were from BridgeFinderHelper. The best way to
&gt;      defend against this is to require a handshake to properly
&gt;      complete before accepting input. If the handshake fails at any
&gt;      point, the IPC channel MUST be abandoned and closed. Do *not*
&gt;      continue scanning for good input after any bad input has been
&gt;      encountered; that practice may allow cross-protocol attacks by
&gt;      malicious JavaScript running in the user's non-Tor web browser.
&gt; 
&gt;      Additionally, it is wise to establish a shared secret between
&gt;      BridgeFinder and BridgeFinderHelper, using an environment
&gt;      variable if possible.  For an a good example on how to use such a
&gt;      shared secret properly for authentication; see Tor ticket #5185
&gt;      and/or the SAFECOOKIE Tor control port authentication method.
&gt; 
&gt; 
&gt;   2. Do not allow attacks against the Controller
&gt; 
&gt;      Care has to be taken before converting BridgeFinderHelper data into
&gt;      Bridge lines, especially for cases where the BridgeFinderHelper data
&gt;      is fed directly to the control port after passing through
&gt;      BridgeFinder.
&gt; 
&gt;      In specific, the input MUST be subjected to a character whitelist
&gt;      and should also be validated against a regular expression to
&gt;      verify format, and if any unexpected or poorly-formed data is
&gt;      encountered, the IPC channel MUST be closed.
&gt; 
&gt;      Malicious control-port commands can completely destroy a user's
&gt;      anonymity.  BridgeFinder is responsible for preventing strings
&gt;      which could plausibly cause execution of arbitrary control-port
&gt;      commands from reaching the Controller.
&gt; 
&gt; 
&gt;   3. Provide information about bridge sources to users
&gt; 
&gt;      BridgeFinder MUST provide complete information about how each
&gt;      bridge was obtained (who provided the bridge data, where the
&gt;      party which provided the data intended that it be sent to users,
&gt;      and what activities BridgeFinder extracted the data from) to
&gt;      users so that they can make an informed decision about whether to
&gt;      trust the bridge.

I like the idea of passing bridge authentication + attribution up to
Vidalia via POSTMESSAGE somehow. However, encoding it properly is likely
to be problematic and situation-specific.

It also feels weird to have this be a MUST, especially if we're not sure
how it can be done right..
 
&gt;      BridgeFinder MUST authenticate, for every piece of discovered
&gt;      bridge data, the party which provided the bridge address, the
&gt;      party which prepared the bridge data in BridgeFinder's input
&gt;      format, and the time, location, and manner in which the latter
&gt;      party intended that the bridge data be distributed.  (Use of an
&gt;      interactive authentication protocol is not sufficient to
&gt;      authenticate the intended location and manner of distribution of
&gt;      the bridge data; those facts must be explicitly authenticated.)
&gt; 
&gt;      These requirements are intended to prevent or mitigate several
&gt;      serious attacks, including the following:
&gt; 
&gt;      * A malicious bridge can 'tag' its client's circuits so that a
&gt;        malicious exit node can easily recognize them, thereby
&gt;        associating the client with some or all of its anonymous or
&gt;        pseudonymous activities.  (This attack may be mitigated by new
&gt;        cryptographic protocols in a near-future version of Tor.)
&gt; 
&gt;      * A malicious bridge can attempt to limit its client's knowledge
&gt;        of the Tor network, thereby biasing the client's path selection
&gt;        toward attacker-controlled relays.
&gt; 
&gt;      * A piece of bridge data containing the address of a malicious
&gt;        bridge may be copied to distribution channels other than those
&gt;        through which it was intended to be distributed, in order to
&gt;        expose more clients to a particular malicious bridge.
&gt; 
&gt;      * Pieces of bridge data containing the addresses of non-malicious
&gt;        bridges may be copied to other-than-intended distribution
&gt;        channels, in order to cause a particular client to attempt to
&gt;        connect to a known, unusual set of bridges, thus allowing a
&gt;        malicious ISP to monitor the client's movements to other
&gt;        network and/or physical locations.
&gt; 
&gt;      BridgeFinder MUST warn users about the above attacks, and warn
&gt;      that other attacks may also be possible if users accept
&gt;      improperly distributed bridge data.

Warning users about technically complicated potential attacks is
unlikely to substantially protect them in practice, and will have many
negative consequences wrt usability... There is a right place to
document this stuff, but I'm not sure the BridgeFinder app itself is
that place.

Warning in the event of unexpected behavior that actually happens is a
good plan. But this again is something that requires another channel
through Vidalia. I doubt most BridgeFinders will have guis :/

We could define a new POSTMESSAGE type "Alert" for example, so Vidalia
can inform the user of something fishy on behalf of BridgeFinder? But
that brings up localization issues... Do we leave it to BridgeFinder
implementations to specify error codes to be sent over POSTMESSAGE, or
do we leave it free-form?

&gt;   4. Exercise care with what is written to disk
&gt; 
&gt;      BridgeFinder developers must be aware of the following attacks,
&gt;      and ensure that their software does not expose users to any of
&gt;      them:
&gt; 
&gt;      * An attacker could plant illegal data on a user's computer, to
&gt;        be used later (after a search) as justification to imprison the
&gt;        user.
&gt; 
&gt;      * An attacker could plant malicious data intended to exploit bugs
&gt;        in processes which automatically inspect all files on a user's
&gt;        disks.  (Some examples of such processes are indexing services
&gt;        for filesystem search tools, or anti-virus software.)
&gt; 
&gt;      * An attacker could plant malicious data intended to exploit code
&gt;        used by a file manager to extract metadata or thumbnails from
&gt;        files.
&gt; 
&gt;      * An attacker could plant malicious data intended to exploit code
&gt;        run when a user tries to open or view a file.  (On Unixoid
&gt;        systems, executable files which are not in a recognized binary
&gt;        format are interpreted by /bin/sh if a user is persuaded to run
&gt;        them.  A header is not enough to prevent all attacks of this
&gt;        class; malicious data anywhere within a file could take over a
&gt;        user's computer.)
&gt; 
&gt;      Note that parties which can be trusted to supply bridges to users
&gt;      should not be trusted with full code-exec privileges on every
&gt;      user's computer.  (For example, bridge descriptors are generated
&gt;      and signed by the person who runs a bridge -- but *anyone* can
&gt;      run a bridge and start signing bridge descriptors.)
&gt; 
&gt;      In order to prevent the above attacks (and others), BridgeFinder
&gt;      MUST NOT create files whose contents (entirely or partially) or
&gt;      names or file extensions are controlled by a party not intended
&gt;      to have full code-exec privileges on every user's computer.
&gt; 
&gt;      BridgeFinder SHOULD mark data files which are not intended to be
&gt;      executed by the operating system as non-executable, whenever that
&gt;      is possible.  (It is not possible when Tor Browser Bundle is run
&gt;      on a FAT filesystem on a Unixoid operating system; that
&gt;      configuration is supported and known to be used.)
&gt; 
&gt;      One way to avoid the code-exec attacks above is to obfuscate data
&gt;      (using strong cryptography) before writing it to disk.  Possible
&gt;      obfuscation methods include 'grizzling' the data [1] (note that
&gt;      the random nonce is important here) or encrypting the data with a
&gt;      newly-generated random key and storing the key with the encrypted
&gt;      data on disk.  These do not address the illegal-data attack
&gt;      (because the user is, in theory, able to de-obfuscate and read
&gt;      the data), but they do make it significantly harder for the
&gt;      attacker's goons to 'find' the data during a search.
&gt; 
&gt;      If a BridgeFinder obfuscates data which it stores on disk, its
&gt;      authors MUST provide a simple program to de-obfuscate the data
&gt;      (with full source code) so that users can find out what data
&gt;      BridgeFinder has collected, and BridgeFinder MUST put a text file
&gt;      named "README.txt" in the directory containing the obfuscated
&gt;      files explaining how to obtain and use the de-obfuscation tool
&gt;      and why such a tool is necessary.
&gt; 
&gt; 
&gt;      BridgeFinder SHOULD NOT store information to disk which reveals
&gt;      the user's activities in his/her/its non-Tor Browser; some of
&gt;      those activities may not otherwise be visible to a censoring
&gt;      attacker.  BridgeFinder MUST NOT store such information to disk
&gt;      unless the user has explicitly asked it to.
&gt; 
&gt; 
&gt;   5. Exercise care with where things are written to disk
&gt; 
&gt;      The Tor Browser Bundle is designed to not leave traces that it
&gt;      has been run on a computer outside the directory in which it was
&gt;      unpacked, and, to the extent possible, to mitigate any such
&gt;      traces left by the operating system.
&gt; 
&gt;      BridgeFinder MUST NOT write data to disk outside the Tor Browser
&gt;      Bundle directory at any time.  BridgeFinder MUST NOT use any
&gt;      operating system features which are known to write data to disk
&gt;      outside the Tor Browser Bundle directory.
&gt; 
&gt;      If BridgeFinderHelper operates as an extension of a program which
&gt;      the user has installed on his/her/its computer, it (or
&gt;      configuration data needed to cause the non-Tor Browser to load
&gt;      it) may need to be installed outside the Tor Browser Bundle
&gt;      directory.  However, BridgeFinderHelper SHOULD NOT write data to
&gt;      disk or cause data to be written to disk outside the TBB directory.
&gt; 
&gt;      BridgeFinderHelper MUST NOT be installed outside the TBB
&gt;      directory, and MUST NOT write data to disk, unless the user has
&gt;      explicitly permitted that.

The above paragraph makes many otherwise useful BridgeFinderHelpers
impossible to implement in practice. It also contradicts the preceding
paragraph in terms of MUST vs SHOULD.

In specific, Chrome addons are installed into the user's Chrome profile
directory (unless you run them in 'unpacked' mode, which no one will do). I
believe WoW addons are similar wrt restricted installation paths. There
likely won't be a way to run BridgeFinderHelper plugins for these
platforms from inside of the TBB dir.
    
Unless this is just a typo and you meant BridgeFinder above?

&gt;      BridgeFinder, BridgeFinderHelper, and their installation
&gt;      routines, MUST warn users that traces written to a disk cannot be
&gt;      erased without erasing the entire filesystem before asking for
&gt;      permission to write outside the TBB directory.  (The user has
&gt;      already chosen to leave traces of TBB in the directory it was
&gt;      unpacked into.)
&gt; 
&gt; 
&gt;      On multi-user operating systems which meaningfully support
&gt;      filesystem permissions on the filesystem containing the Tor
&gt;      Browser Bundle, BridgeFinder MUST set permissions correctly on
&gt;      the files it creates.  In particular, when filesystem permissions
&gt;      are available, files containing software meant to be run by
&gt;      BridgeFinder MUST NOT be writable by any other OS-level user than
&gt;      the one running BridgeFinder, and files containing data not
&gt;      intended to be loaded by the operating system as an executable
&gt;      file MUST NOT be marked as executable.
&gt; 
&gt; 
&gt;   6. Avoid assumptions about BridgeFinder's process environment
&gt; 
&gt;      BridgeFinder and BridgeFinderHelper MUST NOT allow any data to be
&gt;      sent to their standard output and standard error files.  (On
&gt;      Linux, those file descriptors often point to
&gt;      $HOME/.xsession-errors; on MacOS, data sent to an application's
&gt;      stdout or stderr is recorded in /var/log/system.log.)
&gt; 
&gt;      BridgeFinder and BridgeFinderHelper MUST NOT change their
&gt;      behaviour based on the values or presence of environment
&gt;      variables except as required by IPC protocols which they must
&gt;      conform to.  Very few users know that environment variables
&gt;      exist, and many of those who do do not understand how environment
&gt;      variables work.  Naive users can easily be conned into setting
&gt;      environment variables which will cause BridgeFinder or
&gt;      BridgeFinderHelper to misbehave.
&gt; 
&gt; 
&gt;   7. Do not attempt to operate from within Tor Browser
&gt; 
&gt;      BridgeFinder and BridgeFinderHelper MUST NOT attempt to
&gt;      automatically obtain information about bridges from within Tor
&gt;      Browser.  Doing so would allow an attacker to de-anonymize a
&gt;      pseudonymous user by sending pieces of bridge information to
&gt;      him/her/it, or learn about a user's anonymous activities by
&gt;      planting pieces of bridge information on websites of interest to
&gt;      the attacker.  (Checking that pieces of bridge information are
&gt;      signed by a party trusted to provide them is not sufficient to
&gt;      defend against this class of attack; signatures on a piece of
&gt;      bridge information do not authenticate metadata such as the web
&gt;      page meant to distribute it or the e-mail address to which it was
&gt;      sent.)
&gt; 
&gt;      BridgeFinder SHOULD NOT use information obtained by the user
&gt;      through the Tor Browser.  If it does, it MUST only use
&gt;      information explicitly provided to BridgeFinder by the user for
&gt;      the purpose of bridge discovery, and it MUST warn the user that
&gt;      maliciously placed bridge information could be used to identify
&gt;      and/or locate users who receive and use it.
&gt; 
&gt;      A BridgeFinder or BridgeFinderHelper MAY make its own active
&gt;      connections through Tor for the purpose of finding new bridge
&gt;      addresses (or updating previously acquired addresses), but MUST
&gt;      use Tor's stream isolation feature (Tor proposal 171) to separate
&gt;      BridgeFinder streams from the user's anonymous/pseudonymous
&gt;      activities.
&gt; 
&gt; 
&gt;   8. Do not stick beans up the user's nose
&gt; 
&gt;      Deployed versions of BridgeFinder and BridgeFinderHelper MUST NOT
&gt;      have any debugging features which cause them to log sensitive
&gt;      data to disk.  Someone *will* turn them on, whether by accident
&gt;      or by malice.
&gt; 
&gt;      Development versions of BridgeFinder and BridgeFinderHelper which
&gt;      have such debugging features MUST warn users that they are
&gt;      development builds and should not be used by non-developers.

Requiring users to run special development builds to get any logs is
going to mean we won't ever get any logs when things break. I think
we're hamstringing ourselves development-wise with this rather silly
compile-time requirement.

Perhaps instead we should recommend a log scrubbing mechanism similar to
the ones used by Tor and Torbutton.

&gt;      If BridgeFinder and/or BridgeFinderHelper open listening sockets
&gt;      for IPC purposes, those sockets MUST be bound to a loopback
&gt;      address (not to e.g. IPADDR_ANY).  Otherwise, They could probe
&gt;      for your IPC socket's presence on a user's computer.
&gt; 
&gt; 
&gt;   9. Inform BridgeFinder developers about these issues
&gt; 
&gt;      All documents prepared or promoted by Tor Project, Inc. which are
&gt;      intended to be sufficient for the reader to implement a
&gt;      BridgeFinder must describe the known security considerations for
&gt;      BridgeFinders and their underlying rationales.
&gt; 
&gt;      The BridgeFinder interface is intended to allow developers who
&gt;      are not experts on Tor, and who may not be aware of the unusual
&gt;      threat models which Tor and Tor Browser Bundle address, to write
&gt;      software which users and distributors will integrate into Tor
&gt;      Browser Bundle.  These developers are unlikely to be aware of
&gt;      Tor-specific and BridgeFinder-specific security considerations
&gt;      (e.g. attacks involving malicious bridges), and even developers
&gt;      who are informed about the rules stated above may see the rules
&gt;      as unnecessary and ignore them if their rationales are not
&gt;      explicitly stated.
&gt; 
&gt; 
&gt;      In general, BridgeFinder developers need to be aware that they
&gt;      are writing security-critical code, with a large set of
&gt;      application-specific security requirements on top of the usual
&gt;      security requirements for all software which interacts with an
&gt;      untrusted network.
&gt; 
&gt; 
&gt; 1. http://www.cl.cam.ac.uk/~rja14/Papers/grizzle.pdf

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120327100910</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-27 10:09:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

On 2012-03-26, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt;&gt;   3. Provide information about bridge sources to users
&gt;&gt;
&gt;&gt;      BridgeFinder MUST provide complete information about how each
&gt;&gt;      bridge was obtained (who provided the bridge data, where the
&gt;&gt;      party which provided the data intended that it be sent to users,
&gt;&gt;      and what activities BridgeFinder extracted the data from) to
&gt;&gt;      users so that they can make an informed decision about whether to
&gt;&gt;      trust the bridge.
&gt;
&gt; I like the idea of passing bridge authentication + attribution up to
&gt; Vidalia via POSTMESSAGE somehow. However, encoding it properly is likely
&gt; to be problematic and situation-specific.

Perhaps you should have called your IPC command "+POSTMESSAGE".

&gt; It also feels weird to have this be a MUST, especially if we're not sure
&gt; how it can be done right..

It must be done, even if it requires a more thoroughly designed and
specified IPC protocol than you expected.


&gt;&gt;      BridgeFinder MUST authenticate, for every piece of discovered
&gt;&gt;      bridge data, the party which provided the bridge address, the
&gt;&gt;      party which prepared the bridge data in BridgeFinder's input
&gt;&gt;      format, and the time, location, and manner in which the latter
&gt;&gt;      party intended that the bridge data be distributed.  (Use of an
&gt;&gt;      interactive authentication protocol is not sufficient to
&gt;&gt;      authenticate the intended location and manner of distribution of
&gt;&gt;      the bridge data; those facts must be explicitly authenticated.)
&gt;&gt;
&gt;&gt;      These requirements are intended to prevent or mitigate several
&gt;&gt;      serious attacks, including the following:
&gt;&gt;
&gt;&gt;      * A malicious bridge can 'tag' its client's circuits so that a
&gt;&gt;        malicious exit node can easily recognize them, thereby
&gt;&gt;        associating the client with some or all of its anonymous or
&gt;&gt;        pseudonymous activities.  (This attack may be mitigated by new
&gt;&gt;        cryptographic protocols in a near-future version of Tor.)
&gt;&gt;
&gt;&gt;      * A malicious bridge can attempt to limit its client's knowledge
&gt;&gt;        of the Tor network, thereby biasing the client's path selection
&gt;&gt;        toward attacker-controlled relays.
&gt;&gt;
&gt;&gt;      * A piece of bridge data containing the address of a malicious
&gt;&gt;        bridge may be copied to distribution channels other than those
&gt;&gt;        through which it was intended to be distributed, in order to
&gt;&gt;        expose more clients to a particular malicious bridge.
&gt;&gt;
&gt;&gt;      * Pieces of bridge data containing the addresses of non-malicious
&gt;&gt;        bridges may be copied to other-than-intended distribution
&gt;&gt;        channels, in order to cause a particular client to attempt to
&gt;&gt;        connect to a known, unusual set of bridges, thus allowing a
&gt;&gt;        malicious ISP to monitor the client's movements to other
&gt;&gt;        network and/or physical locations.
&gt;&gt;
&gt;&gt;      BridgeFinder MUST warn users about the above attacks, and warn
&gt;&gt;      that other attacks may also be possible if users accept
&gt;&gt;      improperly distributed bridge data.
&gt;
&gt; Warning users about technically complicated potential attacks is
&gt; unlikely to substantially protect them in practice, and will have many
&gt; negative consequences wrt usability... There is a right place to
&gt; document this stuff, but I'm not sure the BridgeFinder app itself is
&gt; that place.

I expect that a bridge datum's distribution channel will need to be
‘fuzzy-matched' to the location where a user received it.  That will
require, at a minimum, telling the user where/how the datum was
intended to be distributed, where/how it actually was distributed to
the user, and that if those items do not match, the user should throw
away that datum.

&gt; Warning in the event of unexpected behavior that actually happens is a
&gt; good plan. But this again is something that requires another channel
&gt; through Vidalia. I doubt most BridgeFinders will have guis :/
&gt;
&gt; We could define a new POSTMESSAGE type "Alert" for example, so Vidalia
&gt; can inform the user of something fishy on behalf of BridgeFinder? But
&gt; that brings up localization issues... Do we leave it to BridgeFinder
&gt; implementations to specify error codes to be sent over POSTMESSAGE, or
&gt; do we leave it free-form?

I like the R6RS ‘conditions' system as a way to handle error codes in
protocols.  You probably don't need a fancy encoding that can handle
arbitrary S-expressions; a list of strings should be sufficient, with
conditions which have associated data (e.g. a fallback message in
English for use if the controller doesn't have a better message that
matches the error) represented as the condition type followed by a
colon followed by the associated data (e.g. "message-en:The sky is
falling!").


&gt;&gt;   5. Exercise care with where things are written to disk
&gt;&gt;
&gt;&gt;      The Tor Browser Bundle is designed to not leave traces that it
&gt;&gt;      has been run on a computer outside the directory in which it was
&gt;&gt;      unpacked, and, to the extent possible, to mitigate any such
&gt;&gt;      traces left by the operating system.
&gt;&gt;
&gt;&gt;      BridgeFinder MUST NOT write data to disk outside the Tor Browser
&gt;&gt;      Bundle directory at any time.  BridgeFinder MUST NOT use any
&gt;&gt;      operating system features which are known to write data to disk
&gt;&gt;      outside the Tor Browser Bundle directory.
&gt;&gt;
&gt;&gt;      If BridgeFinderHelper operates as an extension of a program which
&gt;&gt;      the user has installed on his/her/its computer, it (or
&gt;&gt;      configuration data needed to cause the non-Tor Browser to load
&gt;&gt;      it) may need to be installed outside the Tor Browser Bundle
&gt;&gt;      directory.  However, BridgeFinderHelper SHOULD NOT write data to
&gt;&gt;      disk or cause data to be written to disk outside the TBB directory.
&gt;&gt;
&gt;&gt;      BridgeFinderHelper MUST NOT be installed outside the TBB
&gt;&gt;      directory, and MUST NOT write data to disk, unless the user has
&gt;&gt;      explicitly permitted that.
&gt;
&gt; The above paragraph makes many otherwise useful BridgeFinderHelpers
&gt; impossible to implement in practice. It also contradicts the preceding
&gt; paragraph in terms of MUST vs SHOULD.
&gt;
&gt; In specific, Chrome addons are installed into the user's Chrome profile
&gt; directory (unless you run them in 'unpacked' mode, which no one will do). I
&gt; believe WoW addons are similar wrt restricted installation paths. There
&gt; likely won't be a way to run BridgeFinderHelper plugins for these
&gt; platforms from inside of the TBB dir.
&gt;
&gt; Unless this is just a typo and you meant BridgeFinder above?

It's not a typo.  Those BridgeFinderHelpers MUST NOT be installed
unless the user has explicitly permitted that they be installed.  Even
if the user has explicitly permitted that a BridgeFinderHelper be
installed and write data to disk, it SHOULD NOT write data to disk if
that is not absolutely necessary.

&gt;&gt;      BridgeFinder, BridgeFinderHelper, and their installation
&gt;&gt;      routines, MUST warn users that traces written to a disk cannot be
&gt;&gt;      erased without erasing the entire filesystem before asking for
&gt;&gt;      permission to write outside the TBB directory.  (The user has
&gt;&gt;      already chosen to leave traces of TBB in the directory it was
&gt;&gt;      unpacked into.)

&gt;&gt;   8. Do not stick beans up the user's nose
&gt;&gt;
&gt;&gt;      Deployed versions of BridgeFinder and BridgeFinderHelper MUST NOT
&gt;&gt;      have any debugging features which cause them to log sensitive
&gt;&gt;      data to disk.  Someone *will* turn them on, whether by accident
&gt;&gt;      or by malice.
&gt;&gt;
&gt;&gt;      Development versions of BridgeFinder and BridgeFinderHelper which
&gt;&gt;      have such debugging features MUST warn users that they are
&gt;&gt;      development builds and should not be used by non-developers.
&gt;
&gt; Requiring users to run special development builds to get any logs is
&gt; going to mean we won't ever get any logs when things break. I think
&gt; we're hamstringing ourselves development-wise with this rather silly
&gt; compile-time requirement.

Or it will mean that the logs you get (and which were written to the
user's disk before the user had any idea what would be in them) will
not contain sensitive data.

Or it will mean that a user will have to collect logs in memory with a
debugging tool, and then paste the logs into their MUA.  This sounds
*more* useful to developers than spamming the user's disk with
sensitive data.

&gt; Perhaps instead we should recommend a log scrubbing mechanism similar to
&gt; the ones used by Tor and Torbutton.

That is one way to not write sensitive data to disk.



Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120327103311</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-03-27 10:33:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper (on-disk Data protection)</subject><body>

On 3/27/12 12:09 PM, Robert Ransom wrote:
&gt; It's not a typo.  Those BridgeFinderHelpers MUST NOT be installed
&gt; unless the user has explicitly permitted that they be installed.  Even
&gt; if the user has explicitly permitted that a BridgeFinderHelper be
&gt; installed and write data to disk, it SHOULD NOT write data to disk if
&gt; that is not absolutely necessary.

It arise to my mind the idea discussed to provide a Tor HS Data support
with some specific level of protection in the hands of the Tor operator:

http://www.mail-archive.com/tor-dev@lists.torproject.org/msg00855.html

It was an idea to protect Tor HS but it may be extended as a general
concept for *ALL* tor related data.

Fitting everything into sqlite database protected with sqlcipher (or
other methods) that ask the user for a password, would probably mitigate
this issue and a lot of other ones that are under the hood.

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326201217</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-26 20:12:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 198: Restore semantics of TLS ClientHello</subject><body>

On 2012-03-26, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Mon, Mar 26, 2012 at 3:17 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;  [...]
&gt;&gt;&gt;    (OpenSSL before 1.0.0 did not support ECDHE ciphersuites; OpenSSL
&gt;&gt;&gt;    before 1.0.0e or so had some security issues with them.)
&gt;&gt;
&gt;&gt; Can Tor detect that it is running with a version of OpenSSL with those
&gt;&gt; security issues and refuse to support the broken ciphersuites?
&gt;
&gt; We can detect if the version number is for a broken version, but I
&gt; don't know a good way to detect if the version number is old but the
&gt; issues are fixed (for example, if it's one of those Fedora versions
&gt; that lock the openssl version to something older so that they don't
&gt; run into spurious ABI incompatibility).
&gt;
&gt; I need to find out more about what the security issues actually were:
&gt; when I took a quick look, the only one I was a problem with doing
&gt; multithreaded access to SSL data structures when using ECC.  That
&gt; wouldn't be a problem for us, but if there are other issues, we should
&gt; know about them.

The only security issue that I knew affected ECDHE in old versions of
OpenSSL was http://eprint.iacr.org/2011/633 .  The paper indicates
that that bug was never in any OpenSSL 1.0.0 release.


&gt;&gt;&gt;   Otherwise, the ClientHello has these semantics: The inclusion of any
&gt;&gt;&gt;   cipher supported by OpenSSL 1.0.0 means that the client supports it,
&gt;&gt;&gt;   with the exception of
&gt;&gt;&gt;       SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA
&gt;&gt;&gt;   which is never supported. Clients MUST advertise support for at least
&gt;&gt;&gt; one
&gt;&gt;&gt; of
&gt;&gt;&gt;   TLS_DHE_RSA_WITH_AES_256_CBC_SHA or TLS_DHE_RSA_WITH_AES_128_CBC_SHA.
&gt;&gt;
&gt;&gt; I'm no longer comfortable with 128-bit symmetric keys.  An attacker
&gt;&gt; with many messages encrypted with a 128-bit symmetric cipher can
&gt;&gt; attempt a brute-force search on many messages at once, and is likely
&gt;&gt; to succeed in finding keys for some messages.  (See
&gt;&gt; http://cr.yp.to/papers.html#bruteforce .)
&gt;
&gt; Hm. We'd need to check whether all the servers today support an AES256
&gt; ciphersuite.  Also, wasn't there some dodgy issue in the AES256 key
&gt; schedule?  Or is that basically irrelevant?

I am not aware of any additional bugs in AES-256 that are as severe as
the small keyspace of AES-128.

I am not aware of any bugs (other than very serious side-channel leaks
in most implementations) in AES-256 when used with keys generated by
an acceptable key-derivation function or random number generator.


&gt;&gt;&gt;   Can we get OpenSSL to support the dubious FIPS suite excluded above,
&gt;&gt;&gt;   in order to remove a distinguishing opportunity?  It is not so simple
&gt;&gt;&gt;   as just editing the SSL_CIPHER list in s3_lib.c, since the nonstandard
&gt;&gt;&gt;   SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA cipher is (IIUC) defined to use the
&gt;&gt;&gt;   TLS1 KDF, while declaring itself to be an SSL cipher (!).
&gt;&gt;
&gt;&gt; Would that FIPS ciphersuite provide forward secrecy?  If not, then
&gt;&gt; there is no point in having clients or servers implement it.
&gt;
&gt; The idea would be that, so long as we advertise ciphers we can't
&gt; support, an MITM adversary could make a Tor detector by forging
&gt; ServerHello responses to choose the FIPS suite, and then seeing
&gt; whether the client can finish the handshake to the point where they
&gt; realize that the ServerHello was forged.
&gt;
&gt; This is probably not the best MITM Tor-detection attack, but it might
&gt; be nice to stomp them as we find them.

Does OpenSSL validate the certificate chain at all before Tor allows
it to complete the TLS handshake?  If not, They can MITM a user's
connection by sending a ServerHello with an invalid certificate chain
(e.g. one in which a certificate is not signed correctly), and see
whether the client completes the TLS handshake like Tor or closes the
connection like a normal client.


&gt;&gt;&gt;   [**] Actually, I think it's the Windows SChannel cipher list we
&gt;&gt;&gt;   should be looking at here.
&gt;&gt;&gt;   [***] If we did _that_, we'd want to specify that CREATE_FAST could
&gt;&gt;&gt;   never be used on a non-forward-secure link.  Even so, I don't like the
&gt;&gt;&gt;   implications of leaking cell types and circuit IDs to a future
&gt;&gt;&gt;   compromise.
&gt;&gt;
&gt;&gt; A relay whose link protocol implementations can't provide forward
&gt;&gt; secrecy to its clients cannot be used as an entry guard -- it would be
&gt;&gt; overloaded with CREATE cells very quickly.
&gt;
&gt; Why is that?  It shouldn't be facing more than 2x the number of create
&gt; cells that a relay faces, and with the ntor handshake, create cell
&gt; processing ought to get much faster.

Clients often produce rapid bursts of circuit creation.  If bursts of
CREATE cells from two or three clients hit an entry guard at the same
time, the guard could be overloaded.

I expect that this link-protocol change will be deployed before a new
circuit-extension protocol is deployed.  I expect that the ntor
handshake will not be deployed.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120326215352</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-26 21:53:52-0400</timestampReceived><subject>Re: [tor-dev] Implement JSONP interface for check.torproject.org</subject><body>

Oh, I forgot to mention one requirement:  check.torproject.org must be
usable by people who have turned off JavaScript in their browser
(whether TBB or not).  That rules out XmlHttpRequest.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120327090836</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-03-27 09:08:36-0400</timestampReceived><subject>Re: [tor-dev] Improving Tor Hidden Services</subject><body>

On 2012-03-23, Arturo Filastò &lt;art@baculo.org&gt; wrote:
&gt; Setting aside the issue related with usability there are also some
&gt; interesting
&gt; improvements that can be made to make Tor HS more performant.
&gt;
&gt; I will summarize here the ideas that have been brought forward along
&gt; with some
&gt; that are not detailed anywhere and would like to see more interest in.
&gt;
&gt; I would suggest to start collecting all the information regarded to Tor HS
&gt; improvements on this wiki page:
&gt; https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/HiddenServices.

I would suggest not using the Tor wiki for anything important, and in
particular, I would suggest not using the Tor wiki for anything that
you plan to try to blame me for.  The Tor wiki is nearly unusable, and
it has become a menace to Tor users' safety, and I want it shut down.
I'm never going to use it for anything important.


&gt; With respect to what is already on that page I got some feedback from
&gt; rransom
&gt; on those two items on IRC, but I did not note them down. It would be
&gt; good if you
&gt; were to summarize the critiques here or on the wiki page.

Please send the text to tor-dev.  I'm not going to comment here on
documents which are so easily editable.


&gt; Also there are a set of proposals that are related to Tor HS
&gt; improvements that
&gt; have been abandoned for some time and I believe it would be useful to
&gt; summarize
&gt; them inside of that wiki page.
&gt;
&gt; The proposals are:
&gt;
&gt; #121
&gt; Filename: 121-hidden-service-authentication.txt
&gt; Title: Hidden Service Authentication
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/121-hidden-service-authentication.txt

This was implemented in Tor.


&gt; #142
&gt; Filename: 142-combine-intro-and-rend-points.txt
&gt; Title: Combine Introduction and Rendezvous Points
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/142-combine-intro-and-rend-points.txt

This was rejected, mainly because it would make certain relays appear
to be ‘responsible for' a particular hidden service.  Also, I would
expect it to overload relays' bandwidth.  This one should not be
implemented.


&gt; #143
&gt; Filename: 143-distributed-storage-improvements.txt
&gt; Title: Improvements of Distributed Storage for Tor Hidden Service
&gt; Descriptors
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/143-distributed-storage-improvements.txt

This was not implemented, and is not worth trying to kludge onto the
current (v2) HS directory protocol.  I will re-read it before
specifying a new HS directory protocol.


&gt; #155
&gt; Filename: 155-four-hidden-service-improvements.txt
&gt; Title: Four Improvements of Hidden Service Performance
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/155-four-hidden-service-improvements.txt

Part 1 was already implemented.  I reverted it as the first part of my
fixes for #1297, because it interacted very badly with Tor's adaptive
circuit-build timeout (introduced in 0.2.2.x).

I implemented Part 2 (with a different, CBT-derived time period before
retrying) as the second part of my fixes for #1297.

I don't know whether Part 3 was implemented.  I haven't seen it, but
it wouldn't belong in the code I'm familiar with (it should be in the
‘predicted circuit' code).

Part 4 was already implemented.


&gt; #194
&gt; Filename: 194-mnemonic-urls.txt
&gt; Title: Mnemonic .onion URLs
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/194-mnemonic-urls.txt

* This proposal is not specified thoroughly enough that it could be
  implemented in the near future.

* This proposal cannot be specified thoroughly enough to be
  implemented without significant effort for each language which it is
  intended to support.

* I do not believe that this proposal will be implementable without
  non-trivial code for each language which it is intended to support.

* Adding support to Tor for new hidden service address formats
  partitions Tor clients' anonymity sets.  Each language supported by
  this proposal will be a new hidden service address format; adding
  one new address format in each of several Tor versions is far worse
  than adding a few new address formats all at once.

* Once support for a language is added to Tor, it will be part of the
  Tor protocol, and *every* future implementation of the Tor protocol
  will need to include a copy of the associated dictionary.  It will
  not be possible to change a dictionary once it has become part of
  the Tor protocol.  This increases the minimum size of a Tor client,
  and also risks that an attacker could make malicious changes to the
  supported languages in order to make some of the phrases which Tor
  produces obscene or otherwise unprintable.

* Length limitations on DNS names and their components are likely to
  get in the way of extending this proposal to 255-bit hidden service
  names.

This proposal probably shouldn't be implemented in Tor.  It would be
easier and safer to implement in a separate utility, and it would
probably be more useful as a separate program from Tor as well.


&gt; and also this inside of the ideas, that is loosely related to #194, but
&gt; instead of offering
&gt; an encoding it offers a petname system:
&gt;
&gt; Filename: xxx-onion-nyms.txt
&gt; Title: .onion nym system
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-onion-nyms.txt

This is entirely unrelated to Tor -- it is a design for a tor2web
change, not a Tor change.  It shouldn't even have been added to
torspec.git.

This is also not a petname system -- the relying party is the user who
wants to connect to a service; a different party is trusted to
maintain name bindings honestly.  (Since this is a tor2web feature,
not a Tor feature, the fact that it relies on a trusted party does not
make users vulnerable to new attacks, because tor2web could screw the
user anyway.  But that doesn't make this naming system any better.)


&gt; The single most important thing I believe is needed in Tor Hidden
&gt; Service is Encrypted services.
&gt; These can be seen, in a way, as the reverse of Tor2web mode. It allows
&gt; people to publish Hidden Services
&gt; with no anonymity, but have the Tor end-to-end encryption and
&gt; performance improvements.

Anything which improves Tor for people who want anonymity is more
important than adding another non-anonymous mode.  (I wouldn't even
learn anything new about how HSes really work from implementing this
feature -- it's just a matter of making Tor build one-hop circuits for
its non-hidden services, then testing it and #ifdef-ing out asserts
until it works.)

I also think this feature belongs in a program separate from Tor --
many people and services would be interested in a system which
provides secure names and end-to-end authenticated and encrypted
connections, but are not interested in the other features that Tor
provides. Providing a separate system for ‘encrypted services' would
keep the non-anonymous users and services from overloading Tor's
hidden service directories *and* allow its developers to play around
with a system with a much weaker threat model.  The proposal-194
naming system could be tested and deployed in that system without any
risk to Tor users' anonymity.

&gt; I see these to be the future of what was previously done, poorly, with
&gt; Tor Exit Enclaves. One that
&gt; wishes to have an end-to-end encrypted tunnel from Tor clients can run
&gt; an encrypted service and have
&gt; a reduced number of hops from the IP and RP.

One of the major reasons for Tor's ‘exit enclave' feature was to give
services an incentive to run Tor relays, thus contributing to the Tor
network rather than merely consuming its resources as a non-hidden
service would.

&gt; Roger started writing up a spec on this and it can be found here:
&gt;
&gt; Filename: xxx-encrypted-services.txt
&gt; Title: Encrypted services as a replacement to exit enclaving
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/ideas/xxx-encrypted-services.txt

This can be done without a spec change.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120328014104</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-03-28 01:41:04-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Integration of BridgeFinder and BridgeFinderHelper</subject><body>

[Attachment #2 (multipart/signed)]


Ok, let's try to distill your comments down into some action items for
the proposal. 

Thus spake Robert Ransom (rransom.8774@gmail.com):

&gt; On 2012-03-26, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:

&gt;&gt; 3. Provide information about bridge sources to users 
&gt;&gt;
&gt;&gt;    BridgeFinder MUST provide complete information about how each 
&gt;&gt;    bridge was obtained (who provided the bridge data, where the
&gt;&gt;    party which provided the data intended that it be sent to users,
&gt;&gt;    and what activities BridgeFinder extracted the data from) to
&gt;&gt;    users so that they can make an informed decision about whether to 
&gt;&gt;    trust the bridge. 
&gt; 
&gt; &gt; I like the idea of passing bridge authentication + attribution up to
&gt; &gt; Vidalia via POSTMESSAGE somehow. However, encoding it properly is likely
&gt; &gt; to be problematic and situation-specific.
&gt; 
&gt; Perhaps you should have called your IPC command "+POSTMESSAGE".

Because you want to make it multi-lined? I'm not sure that's a good
idea... It certainly complicates parsing and controller logic..

Line-driven command-based controllers who use this system can be pretty
dumb in how they treat the control port. If we bust into multi-line
events and commands, things will get way more complicated for them.

I think it should stay POSTMESSAGE.

&gt; &gt; It also feels weird to have this be a MUST, especially if we're not sure
&gt; &gt; how it can be done right..
&gt; 
&gt; It must be done, even if it requires a more thoroughly designed and
&gt; specified IPC protocol than you expected.
&gt;
&gt; I expect that a bridge datum's distribution channel will need to be
&gt; ‘fuzzy-matched' to the location where a user received it.  That will
&gt; require, at a minimum, telling the user where/how the datum was
&gt; intended to be distributed, where/how it actually was distributed to
&gt; the user, and that if those items do not match, the user should throw
&gt; away that datum.

Ok. So can/should we encode this as an additional free-form keyword for
the SETCONF commands? It turns out Proposal 180 already allows this for
both Bridge and ClientTransportPlugin commands in question. Tor might
also want this info, but based on my read of 180, it should be free to
ignore it.

Also remember that POSTMESSAGE is freeform wrt Tor.. We don't have to
specify "POSTMESSAGE Request" all up-front. More can be added later, so
long as we have a way to easily pack more in later, and we can recommend
the general approach that people can use to convery additional info like
this...

Based on these, my thinking is to suggest that arbitrary keyword=value
pairs may appended to the SETCONF lines that may hold informational and
other hints hints that signify bridge origin, and Vidalia and Orbot can
figure out how to extract and present this info later (once it actually
exists).

&gt; &gt; Warning in the event of unexpected behavior that actually happens is a
&gt; &gt; good plan. But this again is something that requires another channel
&gt; &gt; through Vidalia. I doubt most BridgeFinders will have guis :/
&gt; &gt;
&gt; &gt; We could define a new POSTMESSAGE type "Alert" for example, so Vidalia
&gt; &gt; can inform the user of something fishy on behalf of BridgeFinder? But
&gt; &gt; that brings up localization issues... Do we leave it to BridgeFinder
&gt; &gt; implementations to specify error codes to be sent over POSTMESSAGE, or
&gt; &gt; do we leave it free-form?
&gt; 
&gt; I like the R6RS ‘conditions' system as a way to handle error codes in
&gt; protocols.  You probably don't need a fancy encoding that can handle
&gt; arbitrary S-expressions; a list of strings should be sufficient, with
&gt; conditions which have associated data (e.g. a fallback message in
&gt; English for use if the controller doesn't have a better message that
&gt; matches the error) represented as the condition type followed by a
&gt; colon followed by the associated data (e.g. "message-en:The sky is
&gt; falling!").

Ok, this sounds great to me. Can you succinctly state this for the
proposal? I am not familiar with R6RS and will probably cite it wrong,
especially since we don't want anything more complicated from it than to
define a list of strings with English alternatives. We want it possible
for these parsers to be very, very dumb and yet still easy to prove
correct.

Again, I don't think we need to over-specify here. We can leave it at
recommendations, so long as we properly prefix the POSTMESSAGE body with
"Alert" and leave room for keywords.

&gt; &gt;&gt;   5. Exercise care with where things are written to disk
&gt; &gt;&gt;
&gt; &gt;&gt;      BridgeFinderHelper MUST NOT be installed outside the TBB
&gt; &gt;&gt;      directory, and MUST NOT write data to disk, unless the user has
&gt; &gt;&gt;      explicitly permitted that.
&gt; &gt;
&gt; &gt; The above paragraph makes many otherwise useful BridgeFinderHelpers
&gt; &gt; impossible to implement in practice. It also contradicts the preceding
&gt; &gt; paragraph in terms of MUST vs SHOULD.
&gt; &gt;
&gt; &gt; In specific, Chrome addons are installed into the user's Chrome profile
&gt; &gt; directory (unless you run them in 'unpacked' mode, which no one will do). I
&gt; &gt; believe WoW addons are similar wrt restricted installation paths. There
&gt; &gt; likely won't be a way to run BridgeFinderHelper plugins for these
&gt; &gt; platforms from inside of the TBB dir.
&gt; &gt;
&gt; &gt; Unless this is just a typo and you meant BridgeFinder above?
&gt; 
&gt; It's not a typo.  Those BridgeFinderHelpers MUST NOT be installed
&gt; unless the user has explicitly permitted that they be installed.  Even
&gt; if the user has explicitly permitted that a BridgeFinderHelper be
&gt; installed and write data to disk, it SHOULD NOT write data to disk if
&gt; that is not absolutely necessary.

Ok, then the proposal could use better wording to convey that user
confirmation is what you want, here. Can you fix that?

&gt; &gt;&gt;      BridgeFinder, BridgeFinderHelper, and their installation
&gt; &gt;&gt;      routines, MUST warn users that traces written to a disk cannot be
&gt; &gt;&gt;      erased without erasing the entire filesystem before asking for
&gt; &gt;&gt;      permission to write outside the TBB directory.  (The user has
&gt; &gt;&gt;      already chosen to leave traces of TBB in the directory it was
&gt; &gt;&gt;      unpacked into.)
&gt; 
&gt; &gt;&gt;   8. Do not stick beans up the user's nose
&gt; &gt;&gt;
&gt; &gt;&gt;      Deployed versions of BridgeFinder and BridgeFinderHelper MUST NOT
&gt; &gt;&gt;      have any debugging features which cause them to log sensitive
&gt; &gt;&gt;      data to disk.  Someone *will* turn them on, whether by accident
&gt; &gt;&gt;      or by malice.
&gt; &gt;&gt;
&gt; &gt;&gt;      Development versions of BridgeFinder and BridgeFinderHelper which
&gt; &gt;&gt;      have such debugging features MUST warn users that they are
&gt; &gt;&gt;      development builds and should not be used by non-developers.
&gt; &gt;
&gt; &gt; Requiring users to run special development builds to get any logs is
&gt; &gt; going to mean we won't ever get any logs when things break. I think
&gt; &gt; we're hamstringing ourselves development-wise with this rather silly
&gt; &gt; compile-time requirement.
&gt; 
&gt; Or it will mean that the logs you get (and which were written to the
&gt; user's disk before the user had any idea what would be in them) will
&gt; not contain sensitive data.
&gt; 
&gt; Or it will mean that a user will have to collect logs in memory with a
&gt; debugging tool, and then paste the logs into their MUA.  This sounds
&gt; *more* useful to developers than spamming the user's disk with
&gt; sensitive data.
&gt; 
&gt; &gt; Perhaps instead we should recommend a log scrubbing mechanism similar to
&gt; &gt; the ones used by Tor and Torbutton.
&gt; 
&gt; That is one way to not write sensitive data to disk.

Ok, I think these are worith suggesting for clarity then. If you would
rather I do that (since I was the one who was confused), I'll get to it
once you handle the above issues?

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120328155139</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2012-03-28 15:51:39-0400</timestampReceived><subject>[tor-dev] txtorcon, async Tor controller</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Erring on the side of "release early, release often" I have put my
Twisted-based (asynchronous, Python) Tor control protocol
implementation online:

   http://readthedocs.org/docs/txtorcon/en/latest/
   https://github.com/meejah/txtorcon

It is MIT licensed (to match Twisted). I would certainly not consider
it "done", and I made it to learn more about Twisted and Python --
criticisms, comments appreciated.

Currently it has the following features (see the above-linked
documentation for more, and examples):

 . TorControlProtocol implements the control protocol
 . TorState tracks the state of Tor (streams, circuits, routers, address-map), listening for updates
 . TorConfig provides read/write configuration access , with HS abstraction (still needs some work)
 . IStringAttacher, a stream-to-circuit attacher interface for new streams
 . launch_tor can launch slave Tor processes
 . integrates into Twisted's endpoints with TCPHiddenServiceEndpoint

The main code is about 1600 LOC, ~4000 with tests and 25% comments
(according to ohcount). There is currently 98% test coverage, if one
believes code-coverage is a good metric.

In the short-term, be aware that I'm planning to re-organize where
things are in files. If you "import txtorcon" and use the classes like
"txtorcon.TorConfig" it will all still work.

Thanks for your attention,
mike


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBAgAGBQJPczCxAAoJEMJgKAMSgGmnTrEH/RG1TLbEsqALWyh5WSm1azYU
7QHx9eup+/NKUE8C6WLPGQyprTkL/snIRZZGYDdkz5grkxcsYaWaVNNtDdUTdctN
KCi2E3rbzdUYHV0aN/VdoNvJdpa8H3J2dpyx4/kFmZ2Z04+VLZOqeX6ANMdYZbYv
FXv37j0dnl15h+t57+65Cf5c8BVbSW50vqXUx/eHWS73BISq3LP30OV4Ut8k3Xbg
IXVf1S/EFeoXxRoGfn9i4i4txeQNyQxCOX0k+fynvIGP+lFuYciSGgGJydYBIkhE
87TMJ//c1tPq41jn5prdbWRTE4mPWA5U03w35wUGrhUWSNUb+OhM6fV4vdRwq30=
=ilGQ
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120328225751</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-03-28 22:57:51-0400</timestampReceived><subject>Re: [tor-dev] SkypeMorph</subject><body>

Hooman &lt;hmohajer@cs.uwaterloo.ca&gt; writes:

&gt;&gt;&gt;&gt; D) The morphing output is basically identical to the naive shaping. Are
&gt;&gt;&gt;&gt; you sure you did it right?
&gt;&gt;&gt; So as mentioned in the report, the original traffic morphing does
&gt;&gt;&gt; not consider timing at all (which makes it less effective against
&gt;&gt;&gt; DPIs) and it aims at minimizing the overhead, ie the number of
&gt;&gt;&gt; padding bytes sent on the wire.
&gt;&gt; Right. Minimizing padding bytes on the wire is a big reason to like it.
&gt;&gt;
&gt;&gt;&gt; When we introduced the inter-packet
&gt;&gt;&gt; timing feature, it was no longer possible to go with the same
&gt;&gt;&gt; construction, since packets may not be send right away. As a result
&gt;&gt;&gt; we tried a different approach for traffic morphing: we buffered
&gt;&gt;&gt; packets received from Tor, then when it is time to send the next
&gt;&gt;&gt; packet, we simply estimate the original packet size by a sample form
&gt;&gt;&gt; the Tor's packet size distribution. I know there are other ways this
&gt;&gt;&gt; can be done, but in our experiment we didn't observe any tangible
&gt;&gt;&gt; difference in the outcome.
&gt;&gt; Hrm. So that means your traffic morphing algorithm doesn't try to reduce
&gt;&gt; padding bytes? That makes your graph 5 make more sense. But is it really
&gt;&gt; accurate to call it morphing still? It would be great to explore that
&gt;&gt; tradeoff more.
&gt; We called it SkypeMorph since we are still using the morphing
&gt; matrix. Although, I personally believe we can find a way to minimize
&gt; the amount of padding while keeping the timing and sizes statistically
&gt; indistinguishable from that of Skype's, the traffic morphing technique
&gt; greatly depends on the characteristics of the source protocol (Tor)
&gt; and it's not easy to guess the timing patterns of user's behind
&gt; Tor. So if we use traces from web-browsing behind Tor as the input to
&gt; our software, and our client uses Tor for downloading multimedia
&gt; content, in this case traffic morphing would not perform very well.

Hm, we encountered the same problem too, while working on the
"morpher" pluggable transport. Traffic morphing would not give us
satisfying results, and some times it would even result in more
overhead than randomly sampling from the probability distribution of
the target protocol.

I think we identified the issue in trac ticket #5023 [0]. and also
wrote a report on it [1].

Another problem of traffic morphing which is not mentioned on that
report, is that traffic morphing works by using an oracle which gives
you an integer 'i' with (0 &lt; 'i' &lt;= MTU), and then you have to send a
packet of size 'i' to the wire. This usually means that you will
_never_ send fragmented IP packets, which looks quite sketchy.

I don't think there are any non-messy solutions to the above problems,
except from realizing that mimicking the packet size probability
distribution of a protocol is probably not worth it at the moment (at
least against most current real-life adversaries). Especially so when
traffic morphing makes your traffic even more distinguishable in other
ways (like in the fact that it's not stateful).

Finally, 6 weeks ago I disabled dream.c in morpher.git [2], because I
suspect that the Matrix Market I/O library of NIST [3], that I was
using, is not the best piece of software engineering out there.

[0]: https://trac.torproject.org/projects/tor/ticket/5023
[1]: https://trac.torproject.org/projects/tor/raw-attachment/ticket/5023/morpher.2.pdf
[2]: https://gitorious.org/morpher/morpher/commit/73d30a0b5aad54d2d52b542d45253c0eedac7456
[3]: http://math.nist.gov/MatrixMarket/mmio/c/mmio.c

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120330042935</emailId><senderName>Sai</senderName><senderEmail>tor@saizai.com</senderEmail><timestampReceived>2012-03-30 04:29:35-0400</timestampReceived><subject>Re: [tor-dev] hide my site in clearweb</subject><body>

Google "tor hidden service".

On Thu, Mar 29, 2012 at 22:36, Salva . &lt;cybero@hotmail.es&gt; wrote:
&gt; Hello, I'm going to launch a website in TOR and I dont wanna it to be
&gt; visible in clearweb.
&gt; So  I want my site was only accessible from TOR.
&gt;
&gt; Anyone knows how can I do this ?
&gt;
&gt; Thanks.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120201020751</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-02-01 02:07:51-0400</timestampReceived><subject>Re: [tor-dev] Improving the tests</subject><body>

Hi Esteban. Another option, if you're interested in python integration
testing and hacking on a project that's currently active, is stem.
It's a controller library that also provides integration testing for
tor. For more information see...

https://gitweb.torproject.org/stem.git
https://trac.torproject.org/projects/tor/wiki/doc/stem

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120201023155</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-02-01 02:31:55-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>


On Feb 1, 2012, at 2:48 AM, Watson Ladd wrote:
&gt; On Tue, Jan 31, 2012 at 2:57 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt; Another possibility is this:
&gt;&gt; 
&gt;&gt; Browser's resolver -&gt; Tor Client (as DNSPort): "Resolve
&gt;&gt; www.example.com, give me an A, and give me DNSSec stuff too."
&gt;&gt; Tor Client-&gt; Tor net-&gt; Tor Exit: "Yeah, resolve that stuff."
&gt;&gt; Tor Exit -&gt; Tor net -&gt; Tor client: "Here's your answer."
&gt;&gt; Tor client -&gt; Browser's resolver: "Here's that A record you wanted,
&gt;&gt; and some dnssec stuff."
&gt;&gt; Browser -&gt; Tor client: "Okay, now connect there."
&gt;&gt; Tor client -&gt; Tor net -&gt; Tor exit: "Connect to &lt;ip address&gt;:80!"
&gt;&gt; Exit node -&gt; Tor net-&gt; Tor Client: "CONNECTED: Connection is open."
&gt;&gt; Tor Client -&gt; Browser: "SOCKS5 connection complete."
&gt;&gt; 
&gt;&gt; But that would involve an extra round trip that I'd rather save if possible.
&gt; We could cross our fingers and be optimistic, opening a connection to
&gt; the server queried. Probably a bad idea.

I'm not sure, maybe the idea isn't so bad after all. If we wait for the
client to tell us whether it likes the dnssec stuff, I could easily be
convinced that this can be used to fingerprint clients. We have the TLS
false start stuff which is kind of similar, I feel.	Maybe that means for
us to go ahead, make the connection, and if we as a client decide not to
like it we just try again on a new exit node a couple of times?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120202034918</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@extc.org</senderEmail><timestampReceived>2012-02-02 03:49:18-0400</timestampReceived><subject>Re: [tor-dev] Extending BridgeDB to reallocate bridges from a blocked country to others that do not</subject><body>

On Mon, Jan 30, 2012 at 1:14 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Sun, Jan 15, 2012 at 09:34:49AM -0800, Aaron wrote:
&gt;&gt; =A0This proposal outlines the required changes for BridgeDB to reallocat=
e bridges
&gt;&gt; =A0from a blocked country to others that do not block.
&gt;
&gt; I guess I'll be the grumpy one here, but: doesn't bridgedb already do
&gt; that, just based on how it picks its answers? Or are we trying to load
&gt; balance by giving out bridges-blocked-in-China more commonly to Saudi
&gt; users? I'm missing the big picture goals here.

No, BridgeDB does not allocate bridges by region, nor is load
balancing a concern
of this proposal. Presently, bridges are served and available to
clients of all countries.

The deliverable "Automated bridge allocation to reallocate bridges
from a blocked
country to others that do not block" either misunderstands how BridgeDB ass=
igns
bridges, or is suggesting that BridgeDB should assign bridges by country.

If bridges are assigned by country, then BridgeDB can limit the
addresses that these
bridges are exposed to, increasing the bridges/addresses ratio for
that region, and
potentially reduce the rate that bridges get blocked. When the bridges
are blocked,
they will be made available to other countries.

&gt;&gt; Required modifications:
&gt;&gt;
&gt;&gt; =A0 1. BridgeDB must be able to produce an unblocked set of bridges for a
&gt;&gt; =A0 =A0 =A0specific country, if these bridges are available.
&gt;
&gt; Ok. Though I'd be nervous about enabling this functionality for normal
&gt; users, since it makes "ask for some bridges, block them; wait for bridgedb
&gt; to notice; ask for new bridges, block them" easier.

This is true, but we can control the rate that bridges are consumed because
we control when the blocked bridge list is updated.

And I think the strongest argument for exposing this functionality to
normal users is
that of usability. How many users are turned away because the bridges
don't work or
"might be blocked"? A censor can afford to check bridges.tpo
continuously and block
bridges as it sees them, but a user is more likely to just give up.

&gt;&gt; =A0 2. If a bridge is blocked in a country, it must be available to user=
s in
&gt;&gt; =A0 =A0 =A0other countries.
&gt;
&gt; Why does this need a modification? It is already the case, right?

Yes, BridgeDB does not allocate bridges to countries. This requirement
only makes
sense if BridgeDB did allocate bridges to countries.

&gt; If the client can specify what country he wants to ask about, that makes
&gt; the above enumeration attack even more effective.

BridgeDB should probably differentiate between requests coming from
the requested
region and requests coming from outside the requested region, though legiti=
mate
requests and requests for legitimate users are likely to arrive from outsid=
e the
requested region.

&gt;
&gt;&gt; =A0 Alternately, BridgeDB could be modified to guarantee that a client r=
equesting
&gt;&gt; =A0 unblocked bridges for a region would receive these bridges, if unblo=
cked
&gt;&gt; =A0 bridges exist. Presently, patches exist for BridgeDB that mark known=
 blocked
&gt;&gt; =A0 bridges as "Might be blocked", but makes no further effort to respon=
d with
&gt;&gt; =A0 unblocked bridges, even if those bridges exist.
&gt;
&gt; Right -- I thought we considered that a feature. We are telling the user
&gt; that we think the bridges we're giving them won't work, and we're not
&gt; giving them replacements because that would accelerate the defeat of
&gt; the rate limiting goals.

That's been our assumption, but I don't think we have any data as to how se=
rial
enumeration compares to parallel enumeration. I do think we can control how=
 fast
bridges are burned via the blocked bridge list update. Ideally we'll
be able to get an
idea of what works and what doesn't experimentally, and use that to guide a=
ny
improvements we make.

&gt;&gt;  Possible Solution 2
&gt;&gt;
&gt;&gt;   Modify BridgeDB to dynamically produce rings of bridges 'Not blocked i=
n' a
&gt;&gt;   specified country. Bridges are not mapped to a specific country or reg=
ion,
&gt;&gt;   but BridgeDB's response would contain only unblocked bridges (if avail=
able).
&gt;
&gt; Again, some security analysis would be good here: in what situations
&gt; are we expecting this to be a good idea?

Upon reflection, I think solution 2 is too limited. I am convinced
that we do want to
be able to assign bridges to specific regions, because our
distribution strategy
should be customizable for different regions.

There are a few questions I'd like to ask too, in the context of this propo=
sal:

1. Although the number of bridges is limited, that may not always be the ca=
se.
 If we had several orders of magnitude more bridges available, how should o=
ur
 strategy change? Do these changes help?

2. Should we be trying to conserve bridges? What about bridges who may not =
stick
 around very long anyway? How long do bridges last, on average?

3. Does limiting the set of addresses (region mapping) that correspond
to a set of
 bridges significantly reduce the ability of a censor to obtain the
set of bridges? Via
 a botnet? Via the national ISP?

4. What about censors who hurt Tor users? Could our distribution strategy c=
hange
 for just those regions? For example, bridges that are handed out a
limited number of
 times, never re-allocated to other countries, etc?

Thanks for your feedback!

--Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120202171409</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2012-02-02 17:14:09-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

[Attachment #2 (multipart/signed)]


&gt; Date: Thu, 26 Jan 2012 16:39:34 +0000
&gt; From: Steven Murdoch &lt;Steven.Murdoch@cl.cam.ac.uk&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Simulating a slow connection
&gt; Message-ID: &lt;CAE309A8-034E-4E6A-B05C-6B9B3EA1CDBE@cl.cam.ac.uk&gt;
&gt; Content-Type: text/plain; charset=us-ascii
&gt; 
&gt; Hi Adam,
&gt; 
&gt; On 20 Jan 2012, at 10:55, Adam Katz wrote:
&gt; 
&gt; &gt; Well, I myself didn't have anything specific in mind but i have some
&gt; &gt; experience with the linux tc utility as well as with generating
&gt; &gt; realistic background traffic. I was wondering whether I could help on
&gt; &gt; any of the existing projects or help establish a new one.
&gt; 
&gt; I think Nick's comments summarized the current state of thinking. ExperimenTor and \
&gt; Shadow are the best Tor simulators to use for this project. The big missing pieces \
&gt;                 are:
&gt; - an automated framework for setting up experiments with slow Internet connections \
&gt;                 with ExperimenTor and Shadow, then collecting and summarizing \
&gt;                 results
&gt; - Tools for generating realistic link characteristics (delay and packet dropping), \
&gt; and for collecting data on the link properties found in particular locations 
&gt; Steven.
&gt; 

As Steven stated, this would be very easy to explore with Shadow. The
network topology is passed in as an XML file: node properties include
bandwidth up/down and link properties include latency, jitter, and
packetloss.

I already have some python scripts to generate topologies, and would be
happy to share them once you have realistic measurements/values for the
slow links you'd like to explore. I'd also be happy to explain more
about how Shadow works or the structure of the XML file.

Rob


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120203164601</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-02-03 16:46:01-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

On Tue, Jan 31, 2012 at 8:49 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
[...]
&gt; So going for a wait-free queue and a normal locked queue, it's not that
&gt; difficult (in terms of APIs/ABIs handling) but the question I think is do we
&gt; want first to do a "normal locking queue" in the tor code tree and than go for a
&gt; lockless from a external lib with a compat layer between lock and lockless ?
&gt;
&gt; Personally, I think we should go straight for one type of data structure and
&gt; make sure we create a decent compat layer on top to be able to switch from one
&gt; technology to an other easily.
&gt;
&gt; Does it makes sense to you?

I think that makes sense, if I understand you correctly.  If what we
need is a work queue, for example, I don't much care what the initial
implementation is, so long as it is easy to add others.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120207190021</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-02-07 19:00:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

&gt;  I don't know whether that would be acceptable to controller authors
&gt; and users.

I'm fine with a couple things...
* adding a tor provided blacklist
* adding a tor provided whitelist *if* Tor itself fails to start when
the torrc has an CookieAuthFile outside of that list and all versions
which allow for non-whitelisted files are flagged as obsolete

It would cause confusion for users to be able to define any arbitrary
cookie path in Tor, then have some controllers provide buggy looking
behavior by failing to authenticate.

As mentioned in irc this Safe Cookie proposal should also include the
deprecation of the current CookieAuthentication option. Otherwise a
malicious socket could simply claim to only support non-safe cookie
authentication to still trick controllers into divulging the cookie.
Users could tell their controller to only allow safe cookie auth but
in practice users, of course, won't do that.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120209165925</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa.sandvik@gmail.com</senderEmail><timestampReceived>2012-02-09 16:59:25-0400</timestampReceived><subject>[tor-dev] Tor developers: completed translations now in separate directories</subject><body>

Hi everyone,

The latest version of the Transifex client allows users to specify a
minimum percentage of completeness for the translations to be accepted
by the client (that is, to be downloaded). The translation.git
repository now has a _completed branch for each of our translation
resources. If you only want to include 100% completed translations in
your project, clone the _completed branch for your project from now
on.

-- 
Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131194602</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-01-31 19:46:02-0400</timestampReceived><subject>[tor-dev] Parallel Crypto - Library dep.</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi everyone,

To help the tor project, I'll contribute some of my spare time to improve
multithreading for the Tor code base.

I've speak a bit with Nick M. and it seems the crypto lib is an important part
to begin with. The wiki page
(https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
indicates, basically, that a worker thread pool with a work queue to dispatch
crypto events should be the right approach and I do agree.

Is it acceptable to link an external library to the project being a dependence?

The library I'm thinking about is "liburcu" which stands for user-space RCU
(http://lttng.org/urcu). It's a complete set of lockless data structure
including wait-free queue which can be very useful for our case. It support a
large variety of architecture and works on BSD and Linux. The Linux kernel use
RCU mechanism for a lot of internal data structure today so it's quite tested
and solid.

The question I think is do we want lockless data structure in Tor or it's not
and will not be necessary for the type of workload ? (lockless re-sizable hash
tables, red-black tree, stack, linked-list (double also) and queue are available
as of today).

Waiting on your feedback guys, either way, I'll begin implementing parallel
crypto largely based on the wiki page (really good ideas there).

Thanks a lot!
David
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJPKET6AAoJEELoaioR9I02OO0H/2lxrvak2ItAdGsXHsyH2dgz
U3ePxZUg8Ix5UuZXA/LnP3T7/HBa47mtPMj3hwuz2Wnarf6FulumYA3A9jKsZyxQ
tf6azD+G7CbZjjYPbe8XYfOZC6+x58mF7SciM/maLoFQLzCvw7ruBBXu8j0Ghw5Q
hcm8RMIa4UyB0szSpMqkt615sYQBgy7hhEkNKqxnfdP4zIqUIK8mJqBING6r7qU+
EhnIT5VNzKG9FZPkYNzXOvzbtH0MegNfePsi6gDYlkjR7gekiT9wYH9n5tFTPQUu
4BwqaaHR/Wk+zfHaQOmz+KC3eefUqcd+XP82mcPTSUDj4mzG1Sio2ZHKX0IeJVw=
=r0da
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120205124650</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-05 12:46:50-0400</timestampReceived><subject>[tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

See attached, because GMail would wrap lines if I sent it inline.


Robert Ransom

["xxx-safe-cookie-authentication.txt" (text/plain)]

Filename: xxx-safe-cookie-authentication.txt
Title: Safe cookie authentication for Tor controllers
Author: Robert Ransom
Created: 2012-02-04
Status: Open

Overview:

  Not long ago, all Tor controllers which automatically attempted
  'cookie authentication' were vulnerable to an information-disclosure
  attack.  (See https://bugs.torproject.org/4303 for slightly more
  information.)

  Now, some Tor controllers which automatically attempt cookie
  authentication are only vulnerable to an information-disclosure
  attack on any 32-byte files they can read.  But the Ed25519
  signature scheme (among other cryptosystems) has 32-byte secret
  keys, and we would like to not worry about Tor controllers leaking
  our secret keys to whatever can listen on what the controller thinks
  is Tor's control port.

  Additionally, we would like to not have to remodel Tor's innards and
  rewrite all of our Tor controllers to use TLS on Tor's control port
  this week (or deal with the many design issues which that would
  raise).

Design:

From af6bf472d59162428a1d7f1d77e6e77bda827414 Mon Sep 17 00:00:00 2001
From: Robert Ransom &lt;rransom.8774@gmail.com&gt;
Date: Sun, 5 Feb 2012 04:02:23 -0800
Subject: [PATCH] Add SAFECOOKIE control-port authentication method

---
 control-spec.txt |   59 ++++++++++++++++++++++++++++++++++++++++++++++-------
 1 files changed, 51 insertions(+), 8 deletions(-)

diff --git a/control-spec.txt b/control-spec.txt
index 66088f7..3651c86 100644
--- a/control-spec.txt
+++ b/control-spec.txt
@@ -323,11 +323,12 @@
   For information on how the implementation securely stores authentication
   information on disk, see section 5.1.
 
-  Before the client has authenticated, no command other than PROTOCOLINFO,
-  AUTHENTICATE, or QUIT is valid.  If the controller sends any other command,
-  or sends a malformed command, or sends an unsuccessful AUTHENTICATE
-  command, or sends PROTOCOLINFO more than once, Tor sends an error reply and
-  closes the connection.
+  Before the client has authenticated, no command other than
+  PROTOCOLINFO, AUTHCHALLENGE, AUTHENTICATE, or QUIT is valid.  If the
+  controller sends any other command, or sends a malformed command, or
+  sends an unsuccessful AUTHENTICATE command, or sends PROTOCOLINFO or
+  AUTHCHALLENGE more than once, Tor sends an error reply and closes
+  the connection.
 
   To prevent some cross-protocol attacks, the AUTHENTICATE command is still
   required even if all authentication methods in Tor are disabled.  In this
@@ -949,6 +950,7 @@
       "NULL"           / ; No authentication is required
       "HASHEDPASSWORD" / ; A controller must supply the original password
       "COOKIE"         / ; A controller must supply the contents of a cookie
+      "SAFECOOKIE"       ; A controller must prove knowledge of a cookie
 
      AuthCookieFile = QuotedString
      TorVersion = QuotedString
@@ -970,9 +972,9 @@
   methods that Tor currently accepts.
 
   AuthCookieFile specifies the absolute path and filename of the
-  authentication cookie that Tor is expecting and is provided iff
-  the METHODS field contains the method "COOKIE".  Controllers MUST handle
-  escape sequences inside this string.
+  authentication cookie that Tor is expecting and is provided iff the
+  METHODS field contains the method "COOKIE" and/or "SAFECOOKIE".
+  Controllers MUST handle escape sequences inside this string.
 
   The VERSION line contains the Tor version.
 
@@ -1033,6 +1035,47 @@
 
   [TAKEOWNERSHIP was added in Tor 0.2.2.28-beta.]
 
+3.24. AUTHCHALLENGE
+
+  The syntax is:
+    "AUTHCHALLENGE" SP "AUTHMETHOD=SAFECOOKIE"
+                    SP "COOKIEFILE=" AuthCookieFile
+                    SP "CLIENTCHALLENGE=" 2*HEXDIG / QuotedString
+                    CRLF
+
+  The server will reject this command with error code 512, then close
+  the connection, if Tor is not using the file specified in the
+  AuthCookieFile argument as a controller authentication cookie file.
+
+  If the server accepts the command, the server reply format is:
+    "250-AUTHCHALLENGE"
+            SP "CLIENTRESPONSE=" 64*64HEXDIG
+            SP "SERVERCHALLENGE=" 2*HEXDIG
+            CRLF
+
+  The CLIENTCHALLENGE, CLIENTRESPONSE, and SERVERCHALLENGE values are
+  encoded/decoded in the same way as the argument passed to the
+  AUTHENTICATE command.
+
+  The CLIENTRESPONSE value is computed as:
+    HMAC-SHA256(HMAC-SHA256("Tor server-to-controller cookie authenticator",
+                            CookieString)
+                ClientChallengeString)
+  (with the HMAC key as its first argument)
+
+  After a controller sends a successful AUTHCHALLENGE command, the
+  next command sent on the connection must be an AUTHENTICATE command,
+  and the only authentication string which that AUTHENTICATE command
+  will accept is:
+    HMAC-SHA256(HMAC-SHA256("Tor controller-to-server cookie authenticator",
+                            CookieString)
+                ServerChallengeString)
+
+  [Unlike other commands besides AUTHENTICATE, AUTHCHALLENGE may be
+  used (but only once!) before AUTHENTICATE.]
+
+  [AUTHCHALLENGE was added in Tor FIXME.]
+
 4. Replies
 
   Reply codes follow the same 3-character format as used by SMTP, with the
-- 
1.7.8.3

Rationale:

  The weird inner HMAC was meant to ensure that whatever impersonates
  Tor's control port cannot even abuse a secret key meant to be used
  with HMAC-SHA256.

  Then I added the server-to-controller challenge-response
  authentication step, to ensure that the server can only use a
  controller as an HMAC oracle if it already knows the contents of the
  cookie file.  Now, the inner HMAC is just a not-very-efficient way
  to keep controllers from using the server as an oracle for its own
  challenges (it could be replaced with a hash function).



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120211121225</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-02-11 12:12:25-0400</timestampReceived><subject>[tor-dev] First test "report"</subject><body>

Hi there,

I'm done with the first batch of work on the test side. You have the  
(rebased just now) work here:  
https://github.com/emanchado/tor/commits/master. The rest of this e-mail  
summarises what I've done and explains my plan for further work.

The content of the commits
--------------------------
I have reviewed the whole test_util.c and made three kinds of changes:

1. Added more tests. Some of them failed, and after checking with other  
people on IRC the conclusion seems to be that they should pass (ie. they  
reproduce actual bugs in the code). To keep the test suite from failing,  
they are inside "#if 0" blocks. So someone should look for "#if 0" inside  
test_util.c and fix the code that makes those fail. Or maybe I should file  
bugs for those?

2. In comparison assertions, the general convention seems to be to place  
the expected value first ("test_eq(0, functioncall(...))" rather than  
"test_eq(functioncall(...), 0)"). I have modified the assertions not  
following that convention, so they all look the same.

3. General clean up, small code reorganisations, fix typos and such. Eg, I  
have turned all the "tt_int_op(a, ==, b)" into "test_eq(a, b)".


I was thinking of blogging about what I saw (esp. related to point 1). I  
think there are valuable lessons to be learned, which will help other  
people writing tests (both for Tor and outside of Tor). I'm not sure if  
there's enough content for a blog post, but if I do it after all, should I  
post the link here?

Plan for the future
-------------------

As I haven't explored coverage yet, I'll start with that for the code in  
src/common/ and see what I can do. My gut feeling (without having looked  
at other parts of the code yet!) is that tackling unit tests for code in  
src/or/ will be hard for me, and it seems better to explain what kind of  
things I have done in src/common/ so others, more familiar with that code,  
can fix/improve the unit tests for src/or/*. In other words, it seems much  
more effective for me to support someone who knows the code in src/or/*,  
rather than the other way around.

After I'm done with what I think is easy enough for me to do with the unit  
tests, I'll have a look at Stem (Damian's suggestion) and chutney (Nick's  
suggestion), and decide what I do next.

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120210125604</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-02-10 12:56:04-0400</timestampReceived><subject>[tor-dev] Obfsproxy client for Android</subject><body>

Thoughts on attempting to port and ship Obfsproxy client functionality
to Android?

We have a good number of Iranian users it seems, and I think we can pull
it off in a few days, if it isn't insanely complex.

Where should we begin? Any details on exactly what was done for the new TBB?

+n
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120210131104</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-02-10 13:11:04-0400</timestampReceived><subject>Re: [tor-dev] Obfsproxy client for Android</subject><body>

On Fri, Feb 10, 2012 at 07:56:04AM -0500, Nathan Freitas wrote:
&gt; Thoughts on attempting to port and ship Obfsproxy client functionality
&gt; to Android?
&gt; 
&gt; We have a good number of Iranian users it seems, and I think we can pull
&gt; it off in a few days, if it isn't insanely complex.
&gt; 
&gt; Where should we begin? Any details on exactly what was done for the new TBB?

Step one, build obfsproxy for Android. I expect your biggest problem
will be libevent2 since you won't have any packages for it. See
https://trac.torproject.org/projects/tor/ticket/5009#comment:17
for some ugly hacks.

Step two, figure out what obfs2 addresses you want your people to use.
In the current testing bundle we're simply hard-coding two (one on moria,
one that marlowe runs). Tomorrow I hope to put out a bundle with more
like 8 or 10, to load balance in case it becomes popular.

Step three, add those obfsproxy bridges and this line to the torrc:

Bridge obfs2 128.31.0.34:1051
ClientTransportPlugin obfs2 exec /path/to/obfsproxy --managed

Now your clients will be good to go. Except every client will launch
obfsproxy by default whether they need it or no, and they'll all go
through that obfsproxy bridge. So you'll want this to be a separate
alternate bundle that people only install when they want it.

Step four, you could change your gui to let people configure new obfs2
bridges that they run across. There's a bug in Vidalia where it tries to
validate your bridge lines, which backfired now that the bridge lines
have become more complex; perhaps Orbot was more future-thinking and
never bothered validating them. :)

Maybe you want to make your interface only add the ClientTransportPlugin
line to the torrc file if they add an obfs2 bridge? Eventually Tor will
be smarter about that.

Oh, and lastly, there's a crash bug in obfsproxy that we're working on
now. Maybe more behind it. This is not what you would call a methodical
planned rollout. :)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120211085535</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-02-11 08:55:35-0400</timestampReceived><subject>Re: [tor-dev] Obfsproxy client for Android</subject><body>

On 02/10/2012 08:11 AM, Roger Dingledine wrote:
&gt; On Fri, Feb 10, 2012 at 07:56:04AM -0500, Nathan Freitas wrote:
&gt;&gt; &gt; Thoughts on attempting to port and ship Obfsproxy client functionality
&gt;&gt; &gt; to Android?
&gt;&gt; &gt; Where should we begin? Any details on exactly what was done for the new TBB?
&gt; Step one, build obfsproxy for Android. I expect your biggest problem
&gt; will be libevent2 since you won't have any packages for it. See

Happy to say that libevent2 and obfsproxy have been successfully
cross-compiled for Android w/o major patching, and all seems to be
working well with a manually hacked version of Orbot. I have to get some
sleep now, but should have a new Orbot proper build in 24 hours (with
the help of Gsathya and Kensen from GP).

I've posted some test binaries with an Android shell-based how to here:
https://github.com/downloads/guardianproject/Orbot/obfsproxy-20120212a.tar.gz
(.asc)

***
This currently requires root, and Orbot should be deactivated.

1) adb push the files about to /data/local

2) adb shell; su

3) mv the files above from /data/local to
/data/data/org.torproject.android/app_bin

4) chown the new files to the uid of the orbot app (e.g. "chmod
app_2.app_2 tor").
find the uid by 'ls'-ing in the
/data/data/org.torproject.android/app_bin folder

5) chmod 700 obfsproxy; chmod 700 tor;

6) export HOME=/data/data/org.torproject.android/app_bin

7) /data/data/org.torproject.android/app_bin/tor DataDirectory
/data/data/org.torproject.android/cache -f
/data/data/org.torproject.android/app_bin/torrc

8) Open Firefox Mobile with ProxyMob add-on, and you should be ready to
roll.


***

Feb 11 03:29:23.275 [notice] Tor v0.2.3.11-alpha (git-9ce9836f853d8a31)
running on Linux armv7l.
Feb 11 03:29:23.276 [notice] Tor can't help you if you use it wrong!
Learn how to be safe at https://www.torproject.org/download/download#warning
...
Feb 11 03:29:31.000 [notice] Bootstrapped 80%: Connecting to the Tor
network.
Feb 11 03:29:31.000 [notice] Bootstrapped 90%: Establishing a Tor circuit.
Feb 11 03:29:32.000 [notice] new bridge descriptor 'maximatorbridge'
(fresh): $55329E0FB775496D4479AC1E0D2CDE3B98D774C3~maximatorbridge at
212.112.242.160
Feb 11 03:29:32.000 [notice] new bridge descriptor 'ghobfsbridge1'
(fresh): $10D5B1C21544B64EBC2A4275FE32A8D4A40405B5~ghobfsbridge1 at
213.108.105.129
Feb 11 03:29:32.000 [notice] new bridge descriptor 'torbridge42'
(fresh): $9459581B2DA5458D19790C28918CB544B3854C8A~torbridge42 at
85.214.131.213
Feb 11 03:29:32.000 [notice] new bridge descriptor 'Unnamed' (fresh):
$7C7DC083FFCFE383268B873D2CB046684B615648~Unnamed at 85.17.20.242
Feb 11 03:29:32.000 [notice] new bridge descriptor 'Unnamed' (fresh):
$478208B87337CAC2E9391AD7B91D125193D5A641~Unnamed at 91.208.34.7
Feb 11 03:29:32.000 [notice] new bridge descriptor 'Unnamed' (fresh):
$5F88FDA345422B32E1A20F2761182C23CD49EA79~Unnamed at 131.215.158.1
Feb 11 03:29:32.000 [notice] new bridge descriptor 'ndnop0' (fresh):
$9D7259A696F7DAB073043B28114112A46D36CFFD~ndnop0 at 109.105.109.163
Feb 11 03:29:32.000 [notice] new bridge descriptor 'Unnamed' (fresh):
$00BC5E7111BD00E9AF463BE9BFE6255FE51CFCD9~Unnamed at 109.163.233.195
Feb 11 03:29:33.000 [notice] Tor has successfully opened a circuit.
Looks like client functionality is working.
Feb 11 03:29:33.000 [notice] Bootstrapped 100%: Done.


***

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120212065723</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-02-12 06:57:23-0400</timestampReceived><subject>Re: [tor-dev] Obfsproxy client for Android</subject><body>

On 02/11/2012 03:55 AM, Nathan Freitas wrote:
&gt; sleep now, but should have a new Orbot proper build in 24 hours (with
&gt; the help of Gsathya and Kensen from GP).

Quick update - good progress on Orbot. obfsproxy binary is fully
integrated into the Orbot Android app, and all the updates to torrc
configuration, etc are in and working. We have a build with bridges
enabled and 10 obfs bridges configured by default. The user can modify
this list through the existing Orbot settings screen.

I am going to sleep on this now a bit, do some more testing tomorrow,
post a public build, then ideally about 18 hours from now, put a build
up for release for Iranian users.

I've pushed what we have so far here:
https://gitweb.torproject.org/n8fr8/orbot.git/shortlog/refs/heads/obfs

G'night,
  n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120212032838</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-02-12 03:28:38-0400</timestampReceived><subject>Re: [tor-dev] First test "report"</subject><body>

On Sat, Feb 11, 2012 at 7:12 AM, Esteban Manchado Velázquez
&lt;emanchado@demiurgo.org&gt; wrote:
&gt; Hi there,
&gt;
&gt; I'm done with the first batch of work on the test side. You have the
&gt; (rebased just now) work here:
&gt; https://github.com/emanchado/tor/commits/master.

A suggestion: In the future, it's best to do commits on one or more
"topic branches", where each branch is for a separate kind of work.
That way, it's way easier for upstream to merge some of the commits,
hold off on others, and decline others.

As it stands, if you do all your commits in a "master" branch, and I
want to take some but not all of them, I have to cherry-pick the
individual commits.  Worse still, your branch and the upstream branch
will then have diverged: if you try to pull the official repository
onto your master again, you won't have the actual history of the Tor
master branch , but some other thing that only exists on your master
branch.  This can make stuff yucky fast.

For now, let's leave the current branches as they are.  Once we've got
the contents of your current master branch reviewed/merged/not-merged,
you can reset your master to match tor's, and then do future work in
topic branches.

All that said: I like the granularity of your commits!  Each one is
logically independent and easy to review.

&gt;  The rest of this e-mail
&gt; summarises what I've done and explains my plan for further work.
&gt;
&gt; The content of the commits
&gt; --------------------------
&gt; I have reviewed the whole test_util.c and made three kinds of changes:
&gt;
&gt; 1. Added more tests. Some of them failed, and after checking with other
&gt; people on IRC the conclusion seems to be that they should pass (ie. they
&gt; reproduce actual bugs in the code). To keep the test suite from failing,
&gt; they are inside "#if 0" blocks. So someone should look for "#if 0" inside
&gt; test_util.c and fix the code that makes those fail. Or maybe I should file
&gt; bugs for those?

Filing bugs is the right move; it looks like you've already started to do this.

&gt;
&gt; 2. In comparison assertions, the general convention seems to be to place the
&gt; expected value first ("test_eq(0, functioncall(...))" rather than
&gt; "test_eq(functioncall(...), 0)"). I have modified the assertions not
&gt; following that convention, so they all look the same.

Hm.  I don't think we actually had a convention on this one.

&gt; 3. General clean up, small code reorganisations, fix typos and such. Eg, I
&gt; have turned all the "tt_int_op(a, ==, b)" into "test_eq(a, b)".

Actually, test_eq was the old way; tt_int_op is the newer way since we
switched to tinytest.

Some other comments:

 In general, the hardest thing for me to review here is not whether
the tests are right, but whether they removed any old tests in
revising them.  I'll need to have another look through the patch
series to be sure.

 On commit 5740e0fc1f00fa91be107ee6c4315d114c5ffdc4, the snprintf()
calls  there should be tor_snprintf().

 On commit f40c04a2137724f7b285e8d69ee62e47df1f9049, "iff" is not a
typo.  It is a standard abbreviation for "if and only if."  We use it
to say things like "Return true iff X", since otherwise we would need
to say "Return true if X; return false otherwise."  (If we just said
"Return true if X," the function would technically be allowed to
_always_ return true.)

&gt; I was thinking of blogging about what I saw (esp. related to point 1). I
&gt; think there are valuable lessons to be learned, which will help other people
&gt; writing tests (both for Tor and outside of Tor). I'm not sure if there's
&gt; enough content for a blog post, but if I do it after all, should I post the
&gt; link here?

Please do!

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120212144114</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-02-12 14:41:14-0400</timestampReceived><subject>Re: [tor-dev] First test "report"</subject><body>

On 12 Feb 2012, at 03:28, Nick Mathewson wrote:
&gt; &gt; 2. In comparison assertions, the general convention seems to be to place the
&gt; &gt; expected value first ("test_eq(0, functioncall(...))" rather than
&gt; &gt; "test_eq(functioncall(...), 0)"). I have modified the assertions not
&gt; &gt; following that convention, so they all look the same.
&gt; 
&gt; Hm.  I don't think we actually had a convention on this one.

It's not so important with tinytest because the output messages don't distinguish \
between expected and actual. In test frameworks where it does matter (e.g. JUnit) \
expected usually comes first in my experience. So I think the proposed convention is \
a good one and could be useful should we wish to change error messages to indicate \
the test failure message to say what was expected. I have found this feature of JUnit \
helpful, although by no means critical.

Steven. 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120205184545</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-02-05 18:45:45-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

&gt; Unlike other commands besides AUTHENTICATE

AUTHENTICATE and PROTOCOLINFO

&gt; HMAC-SHA256("Tor controller-to-server cookie authenticator", CookieString)

I'm more than a little green with HMAC. Does this mean that the hmac
key is that static string, so it would be implemented like...

import hmac
cookie_file = open("/path/to/cookie")
h = hmac.new("Tor controller-to-server cookie authenticator",
cookie_file.read())

# that second wrapper, where it looks like the above is the key
h = hmac.new(h.hexdigest(), server_challenge_response)

# send to the controller
send_to_controller(h.hexdigest())

Also, is "HMAC-SHA256" some special hmac implementation that I need to
look up? Is it part of the builtin python lib?

Speaking as someone who will need to implement the controller side of
this I'm not really sure what I'm supposed to do with this. Some
points of clarification that are needed:

1. Is CLIENTCHALLENGE just any arbitrary client provided string used
as a salt for the hash?
2. The CLIENTRESPONSE is something that I validate then discard, right?
3. What happens if a user issues a AUTHCHALLENGE, PROTOCOLINFO, then
AUTHENTICATE? What about PROTOCOLINFO, AUTHCHALLENGE, AUTHENTICATE?

Personally I don't see the reason for the last handshake. The
controller is proving that it should have access by providing the
cookie contents. Providing both the cookie contents and
SERVERCHALLENGE proves that we sent and received the AUTHCHALLENGE
which isn't terribly interesting.

If we only included the AUTHCHALLENGE message and response then this
would not require a new authentication method so controllers could opt
into the extra cookie validation. That said, if your intent is to
force controllers to do the SAFECOOKIE handshake then this makes
sense.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120205194336</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-05 19:43:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

On 2012-02-05, Damian Johnson &lt;atagar1@gmail.com&gt; wrote:
&gt;&gt; Unlike other commands besides AUTHENTICATE
&gt;
&gt; AUTHENTICATE and PROTOCOLINFO
&gt;
&gt;&gt; HMAC-SHA256("Tor controller-to-server cookie authenticator", CookieString)
&gt;
&gt; I'm more than a little green with HMAC. Does this mean that the hmac
&gt; key is that static string, so it would be implemented like...
&gt;
&gt; import hmac
&gt; cookie_file = open("/path/to/cookie")
&gt; h = hmac.new("Tor controller-to-server cookie authenticator",
&gt; cookie_file.read())
&gt;
&gt; # that second wrapper, where it looks like the above is the key
&gt; h = hmac.new(h.hexdigest(), server_challenge_response)

Yes.  (See the line below that, which tells you which argument is the key.)

&gt; # send to the controller
&gt; send_to_controller(h.hexdigest())

This seems backwards.

&gt; Also, is "HMAC-SHA256" some special hmac implementation that I need to
&gt; look up? Is it part of the builtin python lib?

Some versions of Python include SHA256 and a generic HMAC
implementation (which can be used with SHA256) in their standard
library.

&gt; Speaking as someone who will need to implement the controller side of
&gt; this I'm not really sure what I'm supposed to do with this. Some
&gt; points of clarification that are needed:
&gt;
&gt; 1. Is CLIENTCHALLENGE just any arbitrary client provided string used
&gt; as a salt for the hash?

It is a nonce, used to prove that the CLIENTRESPONSE value is ‘fresh'.

&gt; 2. The CLIENTRESPONSE is something that I validate then discard, right?

Yes.

&gt; 3. What happens if a user issues a AUTHCHALLENGE, PROTOCOLINFO, then
&gt; AUTHENTICATE? What about PROTOCOLINFO, AUTHCHALLENGE, AUTHENTICATE?

The former is an error; the latter is expected behaviour.

The safe cookie authentication protocol is only needed for controllers
which look at Tor's response to the PROTOCOLINFO command to decide
where to look for a cookie file.

&gt; Personally I don't see the reason for the last handshake. The
&gt; controller is proving that it should have access by providing the
&gt; cookie contents. Providing both the cookie contents and
&gt; SERVERCHALLENGE proves that we sent and received the AUTHCHALLENGE
&gt; which isn't terribly interesting.

In the safe cookie authentication protocol, the controller never sends
the cookie itself.  That is the entire point of the protocol.

&gt; If we only included the AUTHCHALLENGE message and response then this
&gt; would not require a new authentication method so controllers could opt
&gt; into the extra cookie validation. That said, if your intent is to
&gt; force controllers to do the SAFECOOKIE handshake then this makes
&gt; sense.

The old cookie authentication protocol exposes the *controller* to an
attack by (what it thinks is) Tor.  Controllers which use PROTOCOLINFO
to determine which cookie file to use should be updated to remove
support for the old COOKIE protocol.  Controllers which only look for
cookie files at paths whitelisted by their users can safely continue
to use COOKIE.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120215230730</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-02-15 23:07:30-0400</timestampReceived><subject>[tor-dev] Unit testing blog posts</subject><body>

I ended up publishing it in two parts :-) Here are the URLs:

    http://hcoder.org/2012/02/13/unit-testing-advice-for-seasoned-hackers-12/
    http://hcoder.org/2012/02/15/unit-testing-advice-for-seasoned-hackers-22/

Now I'll have a look at the coverage and see what I can do for the unit  
tests before I move on to Stem/chutney.

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120229001253</emailId><senderName>Arturo_Filastò</senderName><senderEmail>hellais@torproject.org</senderEmail><timestampReceived>2012-02-29 00:12:53-0400</timestampReceived><subject>[tor-dev] Pluggable Transport through SOCKS proxy</subject><body>

Following up on the discussion at the Tor dev meeting with Nick this
is the proposal for the Pluggable Transport through SOCKS proxies.

You can also find it committed on github:
https://github.com/hellais/torspec/commit/f0a89c8ded1971199fec6ffd0fe7e4056=
2274ced

Filename: xxx-pluggable-transports-through-proxy.txt
Title: Pluggable Transport through SOCKS proxy
Author: Arturo Filast=F2
Created: 28 February 2012
Status: Draft

Overview

  Tor introduced Pluggable Transports in proposal 180 Pluggable Transports
  for circumvention.

  The problem is that Tor currently cannot use a Pluggable Transport proxy
  and a SOCKS proxy at the same time. This has been noticed by users in
  #5195, where Tor would be failing saying "Unacceptable option value:
  You have configured more than one proxy type".


Trivia

  This comes from a discussion that came up with Nick and I promised
  to write a proposal for it if I wanted to hear what he had to say.
  Nick spoke and I am writing this proposal.

Acknowledgements

  Most of the credit goes to Nick Mathewson for the main idea and
  the rest of it goes to George Kadianakis for helping me out in writing
  it.

Motivation

  After looking at some options we decided to go for this solution solution
  since it guarantees backwards compatibility and is not particularly
  costly to implement.

Design overview

  When Tor is configured to use both a Pluggable Transport proxy and SOCKS
  proxy it should delegate the proxying to the pluggable transport proxy.

  This can be achieved by setting the environment variables for the SOCKS
  proxy to that specified inside of the torrc.

  When the pluggable transport proxy starts it will first read the environm=
ent
  variables and if it detects that it should be using a SOCKS proxy make
  all it's traffic go through it. Once the pluggable transport proxy has su=
ccessfully
  established a connection to the SOCKS proxy it should notify Tor of it's
  success or failure.
  When both the SOCKS and the PluggableTransport directives are set Tor
  should set the environemnt variable start the pluggabletransport proxy an=
d wait
  for it to report back on the SOCKS proxy status. If the pluggable transpo=
rt
  reports back a failure or it does not report back at all (maybe because
  it is an outdated version), Tor should notify the user of the failure
  and exit with an error.


  The environment variables can also contain the credentials for accessing
  the proxy.

Specifications: Tor Pluggable Transport communication

  When Tor detects a SOCKS proxy directive and a Pluggable Transport
  proxy directive it sets the environment variable:

    "TOR_PT_PROXY" -- This is the address of the proxy to be used by
    the pluggable transport proxy. It is in the format:
    &lt;proxy_type&gt;://&lt;user_name?&gt;:&lt;password?&gt;@&lt;ip&gt;:&lt;port&gt;
    ex. socks5://tor:test1234@198.51.100.1:8000
        socks4a://198.51.100.2:8001


  If the pluggable transport proxy detects that the TOR_PT_PROXY environment
  variable is set it attempts connecting to it. On successs it will
  write to stdout (as specified in 180-pluggable-transport.txt)
  PROXY true. On failure it should write PROXY-ERROR &lt;errormessage&gt;.

  If Tor does not read any PROXY line or it reads a PROXY-ERROR line
  and it is configured to use both SOCKS and PluggableTransport it should
  exit with error.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120228190527</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-02-28 19:05:27-0400</timestampReceived><subject>[tor-dev] New IP-address for directory authority maatuska</subject><body>

Hi,

The provider where maatuska, my directory authority, has been hosted for
the last two years or so has had some trouble with its switches lately.
I was unable to keep maatuska on the network enough to be a good
participant of making a consensus. I decided to move the machine to a
place where I have physical access 24x7 and can run it on a network
under my control.

Other directory authorities need to change its idea of where maatuska
lives in order to make it part of the consensus making.  Clients benefit
from the same change, for downloading the consensus.

Nick, Roger, can you please apply the following patch.

--8&lt;---------------cut here---------------start-------------&gt;8---
diff --git a/src/or/config.c b/src/or/config.c
index d341d63..3a7bf65 100644
--- a/src/or/config.c
+++ b/src/or/config.c
@@ -928,7 +928,7 @@ add_default_trusted_dir_authorities(dirinfo_type_t type)
       "208.83.223.34:443 0AD3 FA88 4D18 F89E EA2D 89C0 1937 9E0E 7FD9 4417",
     "maatuska orport=80 no-v2 "
       "v3ident=49015F787433103580E3B66A1707A00E60F2D15B "
-      "213.115.239.118:443 BD6A 8292 55CB 08E6 6FBE 7D37 4836 3586 E46B 3810",
+      "171.25.193.9:443 BD6A 8292 55CB 08E6 6FBE 7D37 4836 3586 E46B 3810",
     NULL
   };
   for (i=0; dirservers[i]; i++) {
--8&lt;---------------cut here---------------end---------------&gt;8---

Thanks.

-- 
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120229013857</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-29 01:38:57-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transport through SOCKS proxy</subject><body>

On 2012-02-29, Arturo Filastò &lt;hellais@torproject.org&gt; wrote:

&gt;   When Tor is configured to use both a Pluggable Transport proxy and SOCKS
&gt;   proxy it should delegate the proxying to the pluggable transport proxy.
&gt;
&gt;   This can be achieved by setting the environment variables for the SOCKS
&gt;   proxy to that specified inside of the torrc.
&gt;
&gt;   When the pluggable transport proxy starts it will first read the
&gt; environment
&gt;   variables and if it detects that it should be using a SOCKS proxy make
&gt;   all it's traffic go through it. Once the pluggable transport proxy has
&gt; successfully
&gt;   established a connection to the SOCKS proxy it should notify Tor of it's
&gt;   success or failure.
&gt;   When both the SOCKS and the PluggableTransport directives are set Tor
&gt;   should set the environemnt variable start the pluggabletransport proxy and
&gt; wait
&gt;   for it to report back on the SOCKS proxy status. If the pluggable
&gt; transport
&gt;   reports back a failure or it does not report back at all (maybe because
&gt;   it is an outdated version), Tor should notify the user of the failure
&gt;   and exit with an error.

That's not very nice.  At a minimum, Vidalia users will never be able
to use the GUI to recover from setting such a configuration.  (Users
can put Tor into such a configuration using the GUI, by configuring
Tor to use a proxy while a managed transport which does not support
one is specified in the torrc.)


&gt; Specifications: Tor Pluggable Transport communication
&gt;
&gt;   When Tor detects a SOCKS proxy directive and a Pluggable Transport
&gt;   proxy directive it sets the environment variable:
&gt;
&gt;     "TOR_PT_PROXY" -- This is the address of the proxy to be used by
&gt;     the pluggable transport proxy. It is in the format:
&gt;     &lt;proxy_type&gt;://&lt;user_name?&gt;:&lt;password?&gt;@&lt;ip&gt;:&lt;port&gt;
&gt;     ex. socks5://tor:test1234@198.51.100.1:8000
&gt;         socks4a://198.51.100.2:8001

What does Tor send if a SOCKS username or password contains ':', '@', or '\0'?

How does Tor specify an HTTP proxy?

How does Tor specify an HTTP/HTTPS proxy (i.e. an HTTP proxy which
supports the CONNECT method)?

How does Tor pass proxy settings to a managed transport after it has
started?  (If it can't, then you'll have to either (a) break all OR
connections through that transport by stopping and restarting it or
(b) remember to not use that instance of the transport again, and
launch and start using another instance of the same transport for new
OR connections with the same managed transport specified.  (a) is
easier to implement, but not nice.)


&gt;   If the pluggable transport proxy detects that the TOR_PT_PROXY environment
&gt;   variable is set it attempts connecting to it. On successs it will
&gt;   write to stdout (as specified in 180-pluggable-transport.txt)
&gt;   PROXY true. On failure it should write PROXY-ERROR &lt;errormessage&gt;.

What kinds of failures lead to a PROXY-ERROR response?

&gt;
&gt;   If Tor does not read any PROXY line or it reads a PROXY-ERROR line
&gt;   and it is configured to use both SOCKS and PluggableTransport it should
&gt;   exit with error.

Are managed transports not permitted to report to Tor that they have
had a non-fatal error while attempting to connect to a proxy?


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120229015526</emailId><senderName>Arturo_Filastò</senderName><senderEmail>hellais@torproject.org</senderEmail><timestampReceived>2012-02-29 01:55:26-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transport through SOCKS proxy</subject><body>

On Feb 28, 2012, at 5:38 PM, Robert Ransom wrote:

&gt; On 2012-02-29, Arturo Filast=F2 &lt;hellais@torproject.org&gt; wrote:
&gt; =

&gt;&gt;  When Tor is configured to use both a Pluggable Transport proxy and SOCKS
&gt;&gt;  proxy it should delegate the proxying to the pluggable transport proxy.
&gt;&gt; =

&gt;&gt;  This can be achieved by setting the environment variables for the SOCKS
&gt;&gt;  proxy to that specified inside of the torrc.
&gt;&gt; =

&gt;&gt;  When the pluggable transport proxy starts it will first read the
&gt;&gt; environment
&gt;&gt;  variables and if it detects that it should be using a SOCKS proxy make
&gt;&gt;  all it's traffic go through it. Once the pluggable transport proxy has
&gt;&gt; successfully
&gt;&gt;  established a connection to the SOCKS proxy it should notify Tor of it's
&gt;&gt;  success or failure.
&gt;&gt;  When both the SOCKS and the PluggableTransport directives are set Tor
&gt;&gt;  should set the environemnt variable start the pluggabletransport proxy =
and
&gt;&gt; wait
&gt;&gt;  for it to report back on the SOCKS proxy status. If the pluggable
&gt;&gt; transport
&gt;&gt;  reports back a failure or it does not report back at all (maybe because
&gt;&gt;  it is an outdated version), Tor should notify the user of the failure
&gt;&gt;  and exit with an error.
&gt; =

&gt; That's not very nice.  At a minimum, Vidalia users will never be able
&gt; to use the GUI to recover from setting such a configuration.  (Users
&gt; can put Tor into such a configuration using the GUI, by configuring
&gt; Tor to use a proxy while a managed transport which does not support
&gt; one is specified in the torrc.)
&gt; =

&gt; =

&gt;&gt; Specifications: Tor Pluggable Transport communication
&gt;&gt; =

&gt;&gt;  When Tor detects a SOCKS proxy directive and a Pluggable Transport
&gt;&gt;  proxy directive it sets the environment variable:
&gt;&gt; =

&gt;&gt;    "TOR_PT_PROXY" -- This is the address of the proxy to be used by
&gt;&gt;    the pluggable transport proxy. It is in the format:
&gt;&gt;    &lt;proxy_type&gt;://&lt;user_name?&gt;:&lt;password?&gt;@&lt;ip&gt;:&lt;port&gt;
&gt;&gt;    ex. socks5://tor:test1234@198.51.100.1:8000
&gt;&gt;        socks4a://198.51.100.2:8001
&gt; =

&gt; What does Tor send if a SOCKS username or password contains ':', '@', or =
'\0'?
&gt; =


Well I think no username and password should contain that characters, espec=
ially the
last. If that is not the case I am sure an approach to deal with this probl=
em has been
found by many others in the past. I would just take a look at their solutio=
n.

&gt; How does Tor specify an HTTP proxy?
&gt; =


       HTTPProxy host[:port]
           Tor will make all its directory requests through this host:port =
(or host:80 if port is not specified), rather than connecting directly to a=
ny directory
           servers.


&gt; How does Tor specify an HTTP/HTTPS proxy (i.e. an HTTP proxy which
&gt; supports the CONNECT method)?
&gt; =


       HTTPSProxy host[:port]
           Tor will make all its OR (SSL) connections through this host:por=
t (or host:443 if port is not specified), via HTTP CONNECT rather than conn=
ecting
           directly to servers. You may want to set FascistFirewall to rest=
rict the set of ports you might try to connect to, if your HTTPS proxy only=
 allows
           connecting to certain ports.


&gt; How does Tor pass proxy settings to a managed transport after it has
&gt; started?  (If it can't, then you'll have to either (a) break all OR
&gt; connections through that transport by stopping and restarting it or
&gt; (b) remember to not use that instance of the transport again, and
&gt; launch and start using another instance of the same transport for new
&gt; OR connections with the same managed transport specified.  (a) is
&gt; easier to implement, but not nice.)
&gt; =


via the environment variable TOR_PT_PROXY. This means of communication
is documented inside of proposal 180.

&gt; =

&gt;&gt;  If the pluggable transport proxy detects that the TOR_PT_PROXY environm=
ent
&gt;&gt;  variable is set it attempts connecting to it. On successs it will
&gt;&gt;  write to stdout (as specified in 180-pluggable-transport.txt)
&gt;&gt;  PROXY true. On failure it should write PROXY-ERROR &lt;errormessage&gt;.
&gt; =

&gt; What kinds of failures lead to a PROXY-ERROR response?
&gt; =


That the proxy server in unreachable, that the authentication has failed fo=
r example.

&gt;&gt; =

&gt;&gt;  If Tor does not read any PROXY line or it reads a PROXY-ERROR line
&gt;&gt;  and it is configured to use both SOCKS and PluggableTransport it should
&gt;&gt;  exit with error.
&gt; =

&gt; Are managed transports not permitted to report to Tor that they have
&gt; had a non-fatal error while attempting to connect to a proxy?
&gt; =


Yes that is what is done with PROXY-ERROR. This means of communication
between Tor and pluggable transports is documented better inside of proposa=
l =

180.

- Art.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120121142758</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-01-21 14:27:58-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

Hi,

Ondrej Mikle wrote (21 Jan 2012 01:47:56 GMT) :
&gt; So far I've seen ttdnsd used only in Tails, TorDNSd was seen
&gt; mentioned only in the Tor mailing lists (not sure how many
&gt; individuals may be using it though).

&gt; ttdnsd: kind of works, unless validation is required (ttdnsd fails
&gt; as unbound forwarder, most likely because of not handling DS queries
&gt; correctly)

&gt; It seems that bunch of people who experimented with DNS over Tor
&gt; came to conclusion that using existing caching resolver like unbound
&gt; is simpler than specialized resolvers like ttdnsd.

For the record, Tails uses a combination of the pdnsd caching DNS
server, the Tor resolver (for request types it supports) and ttdnsd
(fallback for other requests); details:

   https://tails.boum.org/contribute/design/Tor_enforcement/DNS/

Cheers,
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
  | Do not be trapped by the need to achieve anything.
  | This way, you achieve everything.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130065939</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 06:59:39-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Thu, Jan 19, 2012 at 05:13:19PM -0500, Nick Mathewson wrote:
&gt; But I think the right design is probably something like allowing
&gt; clients to request more DNS info via exit nodes' nameservers, and get
&gt; more info back. We should think of ways to do this that avoid extra
&gt; round trips, but that should be doable.

Ha. That'll teach me to answer tor-dev threads assuming nobody broke
the threading. :)

So Nick, are you thinking we want a way for exit relays to receive an
already-formatted dns query inside the Tor protocol, and get it onto
the network somehow heading towards their configured nameservers? Or
did you have something else in mind?

I wonder if we want a begin_dns relay command, sort of like the current
begin and begin_dir commands, and then just let them talk TCP to one of
our nameservers? Or is that too much like the previous hacks?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130090920</emailId><senderName>Christian Grothoff</senderName><senderEmail>christian@grothoff.org</senderEmail><timestampReceived>2012-01-30 09:09:20-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/30/2012 07:59 AM, Roger Dingledine wrote:
&gt; On Thu, Jan 19, 2012 at 05:13:19PM -0500, Nick Mathewson wrote:
&gt;&gt; But I think the right design is probably something like allowing
&gt;&gt; clients to request more DNS info via exit nodes' nameservers, and get
&gt;&gt; more info back. We should think of ways to do this that avoid extra
&gt;&gt; round trips, but that should be doable.
&gt;
&gt; So Nick, are you thinking we want a way for exit relays to receive an
&gt; already-formatted dns query inside the Tor protocol, and get it onto
&gt; the network somehow heading towards their configured nameservers? Or
&gt; did you have something else in mind?
&gt;
&gt; I wonder if we want a begin_dns relay command, sort of like the current
&gt; begin and begin_dir commands, and then just let them talk TCP to one of
&gt; our nameservers? Or is that too much like the previous hacks?

In GNUnet, we simply send the raw DNS payload over the mesh network to 
the exit node (in what for you would be a new cell type), the exit node 
sends it out via UDP to whatever DNS server the user provided, and the 
exit sends the response back to the initiator.  So the exit never parses 
the DNS request or response at all.  From what I've seen so far, 512 
byte cells might do just fine &gt;90% of the time, unless of course DNSSEC 
somehow takes off.  However, GNUnet's message size limit is 64k, so this 
is not something I've been studying extensively.

In cases where we need to parse DNS queries (likely outside of Tor's 
scope), we have our own library to do so, but even there we never parse 
DNS queries that did not originate from our own system.

In summary, I think begin_dns is a good idea, but I'm not sure you need 
to then talk TCP to the nameserver -- UDP ought to suffice.

My 2 cents

Happy hacking!

Christian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130101831</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-01-30 10:18:31-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/30/2012 01:09 AM, Christian Grothoff wrote:
&gt; On 01/30/2012 07:59 AM, Roger Dingledine wrote:
&gt;&gt; On Thu, Jan 19, 2012 at 05:13:19PM -0500, Nick Mathewson wrote:
&gt;&gt;&gt; But I think the right design is probably something like allowing
&gt;&gt;&gt; clients to request more DNS info via exit nodes' nameservers, and get
&gt;&gt;&gt; more info back. We should think of ways to do this that avoid extra
&gt;&gt;&gt; round trips, but that should be doable.
&gt;&gt;
&gt;&gt; So Nick, are you thinking we want a way for exit relays to receive an
&gt;&gt; already-formatted dns query inside the Tor protocol, and get it onto
&gt;&gt; the network somehow heading towards their configured nameservers? Or
&gt;&gt; did you have something else in mind?
&gt;&gt;
&gt;&gt; I wonder if we want a begin_dns relay command, sort of like the current
&gt;&gt; begin and begin_dir commands, and then just let them talk TCP to one of
&gt;&gt; our nameservers? Or is that too much like the previous hacks?
&gt; 
&gt; In GNUnet, we simply send the raw DNS payload over the mesh network to
&gt; the exit node (in what for you would be a new cell type), the exit node
&gt; sends it out via UDP to whatever DNS server the user provided, and the
&gt; exit sends the response back to the initiator.  So the exit never parses
&gt; the DNS request or response at all.  From what I've seen so far, 512
&gt; byte cells might do just fine &gt;90% of the time, unless of course DNSSEC
&gt; somehow takes off.  However, GNUnet's message size limit is 64k, so this
&gt; is not something I've been studying extensively.
&gt; 
&gt; In cases where we need to parse DNS queries (likely outside of Tor's
&gt; scope), we have our own library to do so, but even there we never parse
&gt; DNS queries that did not originate from our own system.
&gt; 
&gt; In summary, I think begin_dns is a good idea, but I'm not sure you need
&gt; to then talk TCP to the nameserver -- UDP ought to suffice.
&gt; 

I think begin_dns is a good idea as well.

It seems to me that there are a few ways to do it:

  send the query and the type
  send a raw packet that is then forwarded
  send a variable query and a fixed type (what we do now)

I think that even if DNSSEC dies tomorrow, we'd be silly to stick with
the way we do things now. I also think that sending a raw packet is a
bit sketchy as it basically means that you're sending client side
crafted data - this usually isn't good news from an anonymity perspective.

If begin_dns worked by sending the query and the type, we'd remove
almost all possibilities of client side DNS fingerprinting but we'd add
attack surface to the exit nodes...

However, I imagine that if we wanted, we could add a new flag 'dns' that
would allow various exit nodes to declare themselves open for begin_dns
cells. When a user opens the DNSPort, they could select nodes flagged
with 'dns' to query directly. If none existed or the query was of a
generic CNAME, PTR or A record type, we could use any normally available
node.

On the 'dns' flagged exit nodes, a client could begin_dns and then we'd
parse the query and the type, generate the DNS query and then ask the
our locally configured name server. In an ideal world, we'd use
something like unbound to do the parsing and perhaps even to do caching.

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130162427</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-30 16:24:27-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Mon, Jan 30, 2012 at 1:59 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Thu, Jan 19, 2012 at 05:13:19PM -0500, Nick Mathewson wrote:
&gt;&gt; But I think the right design is probably something like allowing
&gt;&gt; clients to request more DNS info via exit nodes' nameservers, and get
&gt;&gt; more info back. We should think of ways to do this that avoid extra
&gt;&gt; round trips, but that should be doable.
&gt;
&gt; Ha. That'll teach me to answer tor-dev threads assuming nobody broke
&gt; the threading. :)
&gt;
&gt; So Nick, are you thinking we want a way for exit relays to receive an
&gt; already-formatted dns query inside the Tor protocol, and get it onto
&gt; the network somehow heading towards their configured nameservers? Or
&gt; did you have something else in mind?

Approximately.  There are parts of a DNS packet that we wouldn't want
to have the Tor client make up.  For example, DNS transaction IDs
would need to avoid collisions. Similarly, I don't see why the client
should be setting most  of the possible flags.

&gt; I wonder if we want a begin_dns relay command, sort of like the current
&gt; begin and begin_dir commands, and then just let them talk TCP to one of
&gt; our nameservers? Or is that too much like the previous hacks?

I think the exit should be able to make the tcp/udp decision, and we'd
want the first part of any query to nest inside the begin_dns cell
type to avoid using two cells where one would do.  Perhaps it also
should be something where the last cell of a query gets a "this is the
last cell" flag to avoid having to use an END _QUERY cell.

I think exits should do some rudimentary validation on client queries,
to avoid shenanigans.

I think that we should also consider having an improved
resolve+connect mechanism so that we can get the performance of a
BEGIN cell (by avoiding a redundant round-trip) while still getting
the DNS information we want.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131020720</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-31 02:07:20-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/30/2012 11:18 AM, Jacob Appelbaum wrote:
&gt; On 01/30/2012 01:09 AM, Christian Grothoff wrote:
&gt;&gt;
&gt;&gt; In summary, I think begin_dns is a good idea, but I'm not sure you need
&gt;&gt; to then talk TCP to the nameserver -- UDP ought to suffice.
&gt;&gt;
&gt; 
&gt; I think begin_dns is a good idea as well.

Seconded, I also find it as a good idea.

&gt; It seems to me that there are a few ways to do it:
&gt; 
&gt;   send the query and the type
&gt;   send a raw packet that is then forwarded
&gt;   send a variable query and a fixed type (what we do now)
&gt; 
&gt; I think that even if DNSSEC dies tomorrow, we'd be silly to stick with
&gt; the way we do things now. I also think that sending a raw packet is a
&gt; bit sketchy as it basically means that you're sending client side
&gt; crafted data - this usually isn't good news from an anonymity perspective.

I'd suggest that client sends query string, RR type and class in the cell. The
class is almost always INTERNET, but CHAOS can be useful for debugging which
server of anycast cluster are you actually talking to. You'll almost never need
the class CHAOS, but when you do, it will come in handy (see TXT "hostname.bind"
and "version.bind").

DNSSEC: it will become very useful once DANE protocol is standardized (see
https://datatracker.ietf.org/doc/draft-ietf-dane-protocol/). DANE is a
certificate-pinning protocol, saying which site should have which TLS
certificate or which CA should have issued it (maybe Sovereign Keys or Auditable
CAs will catch on first, but there's no way of knowing yet).

&gt; If begin_dns worked by sending the query and the type, we'd remove
&gt; almost all possibilities of client side DNS fingerprinting but we'd add
&gt; attack surface to the exit nodes...

I agree. How do we evaluate exit nodes' attack surface? (I suggested fuzzing
libunbound/ldns as one method). How could we hide the CHAOS queries?

&gt; However, I imagine that if we wanted, we could add a new flag 'dns' that
&gt; would allow various exit nodes to declare themselves open for begin_dns
&gt; cells. When a user opens the DNSPort, they could select nodes flagged
&gt; with 'dns' to query directly. If none existed or the query was of a
&gt; generic CNAME, PTR or A record type, we could use any normally available
&gt; node.

With current code of relays, CNAME, A and PTR for in-addr.arpa would work. These
three RR types have an advantage that they can be easily checked for resolution
of private adresses (like Tor does now; though banning resolution of ".local"
FQDNs might be added, it's a damn special case).

I'd add NS, DNAME and AAAA to the default-allowed set (DNAME is quite rare,
nevertheless used, there's also BNAME RFC draft that seems expired).

If we want to support DNSSEC, then DS, DNSKEY, RRSIG, NSEC, NSEC3 should be
allowed as well.

&gt; On the 'dns' flagged exit nodes, a client could begin_dns and then we'd
&gt; parse the query and the type, generate the DNS query and then ask the
&gt; our locally configured name server. In an ideal world, we'd use
&gt; something like unbound to do the parsing and perhaps even to do caching.

libunbound as well as unbound do caching. ldns can do parsing (libunbound uses
ldns).

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131060848</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-01-31 06:08:48-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/30/2012 06:07 PM, Ondrej Mikle wrote:
&gt; On 01/30/2012 11:18 AM, Jacob Appelbaum wrote:
&gt;&gt; On 01/30/2012 01:09 AM, Christian Grothoff wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; In summary, I think begin_dns is a good idea, but I'm not sure you need
&gt;&gt;&gt; to then talk TCP to the nameserver -- UDP ought to suffice.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; I think begin_dns is a good idea as well.
&gt; 
&gt; Seconded, I also find it as a good idea.
&gt;

Glad to hear it.

&gt;&gt; It seems to me that there are a few ways to do it:
&gt;&gt;
&gt;&gt;   send the query and the type
&gt;&gt;   send a raw packet that is then forwarded
&gt;&gt;   send a variable query and a fixed type (what we do now)
&gt;&gt;
&gt;&gt; I think that even if DNSSEC dies tomorrow, we'd be silly to stick with
&gt;&gt; the way we do things now. I also think that sending a raw packet is a
&gt;&gt; bit sketchy as it basically means that you're sending client side
&gt;&gt; crafted data - this usually isn't good news from an anonymity perspective.
&gt; 
&gt; I'd suggest that client sends query string, RR type and class in the cell. The
&gt; class is almost always INTERNET, but CHAOS can be useful for debugging which
&gt; server of anycast cluster are you actually talking to. You'll almost never need
&gt; the class CHAOS, but when you do, it will come in handy (see TXT "hostname.bind"
&gt; and "version.bind").
&gt; 

I think that almost any record type is fine.

&gt; DNSSEC: it will become very useful once DANE protocol is standardized (see
&gt; https://datatracker.ietf.org/doc/draft-ietf-dane-protocol/). DANE is a
&gt; certificate-pinning protocol, saying which site should have which TLS
&gt; certificate or which CA should have issued it (maybe Sovereign Keys or Auditable
&gt; CAs will catch on first, but there's no way of knowing yet).
&gt; 

Agreed. DANE is an important nail in the CA Racket's coffin. :)

&gt;&gt; If begin_dns worked by sending the query and the type, we'd remove
&gt;&gt; almost all possibilities of client side DNS fingerprinting but we'd add
&gt;&gt; attack surface to the exit nodes...
&gt; 
&gt; I agree. How do we evaluate exit nodes' attack surface? (I suggested fuzzing
&gt; libunbound/ldns as one method). How could we hide the CHAOS queries?
&gt; 

Well - first off, we'd want to determine the places where new code is
added - if we don't change current things and only add a cell type, I
think that's quite easy to do. Secondly, I'd imagine that we'd want to
audit the underlying library quite extensively.

&gt;&gt; However, I imagine that if we wanted, we could add a new flag 'dns' that
&gt;&gt; would allow various exit nodes to declare themselves open for begin_dns
&gt;&gt; cells. When a user opens the DNSPort, they could select nodes flagged
&gt;&gt; with 'dns' to query directly. If none existed or the query was of a
&gt;&gt; generic CNAME, PTR or A record type, we could use any normally available
&gt;&gt; node.
&gt; 
&gt; With current code of relays, CNAME, A and PTR for in-addr.arpa would work. These
&gt; three RR types have an advantage that they can be easily checked for resolution
&gt; of private adresses (like Tor does now; though banning resolution of ".local"
&gt; FQDNs might be added, it's a damn special case).
&gt; 

Right. We could certainly enable inspection at DNSPort time - it can
check for RFC1918 addresses. I personally want a way to know what a
server replied with - even if it might be harmful, I want a true,
verifiable answer. I also want a way to ensure that it doesn't shoot
people in the foot. So, perhaps we can do both?

&gt; I'd add NS, DNAME and AAAA to the default-allowed set (DNAME is quite rare,
&gt; nevertheless used, there's also BNAME RFC draft that seems expired).
&gt; 

I'd like to see - TXT, SSHFP, CHAOS, NS, DNAME, AAAA, A, PTR, CNAME, DS,
DNSKEY, RRSIG, NSEC, NSEC3, CERT, IPSECKEY, KEY, SOA, MX, SRV, SPF

It's becoming very difficult to use Tor without native SRV record for
say, Jabber and the same is true for MX and other types.

Basically, the entire list:
http://en.wikipedia.org/wiki/List_of_DNS_record_types

&gt; If we want to support DNSSEC, then DS, DNSKEY, RRSIG, NSEC, NSEC3 should be
&gt; allowed as well.
&gt; 

Agreed.

&gt;&gt; On the 'dns' flagged exit nodes, a client could begin_dns and then we'd
&gt;&gt; parse the query and the type, generate the DNS query and then ask the
&gt;&gt; our locally configured name server. In an ideal world, we'd use
&gt;&gt; something like unbound to do the parsing and perhaps even to do caching.
&gt; 

I think it's reasonable to separate it into two tasks - 'dns' flagged
exits would require supporting begin_dns - caching is something we
should probably have but a full unbound cache is something perhaps huge
to put into the same process.

&gt; libunbound as well as unbound do caching. ldns can do parsing (libunbound uses
&gt; ldns).

I think that seems OK. I think the first step is a proposal, the second
step is likely to implement whatever "begin_dir" means, a third step is
another proposal where we add the "dns" flag to the Tor spec; likely
we'd find that the second step requires a cache...

Thanks for hacking on this!

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131144226</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 14:42:26-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;
&gt; I think that seems OK. I think the first step is a proposal,

Anybody volunteering for this, or should I throw it on my  pile?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131212227</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-31 21:22:27-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/31/2012 03:42 PM, Nick Mathewson wrote:
&gt; On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;
&gt;&gt; I think that seems OK. I think the first step is a proposal,
&gt; 
&gt; Anybody volunteering for this, or should I throw it on my  pile?

I volunteer for writing the proposal.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131221155</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 22:11:55-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Tue, Jan 31, 2012 at 4:22 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrot=
e:
&gt; On 01/31/2012 03:42 PM, Nick Mathewson wrote:
&gt;&gt; On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; w=
rote:
&gt;&gt;&gt;
&gt;&gt;&gt; I think that seems OK. I think the first step is a proposal,
&gt;&gt;
&gt;&gt; Anybody volunteering for this, or should I throw it on my =A0pile?
&gt;
&gt; I volunteer for writing the proposal.

Great!  If you haven't seen it already, please have a look at the
repository linked from https://gitweb.torproject.org/torspec.git ,
especially spec/proposals/* , for our proposal format.

cheers,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131232044</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-01-31 23:20:44-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/31/2012 06:42 AM, Nick Mathewson wrote:
&gt; On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;
&gt;&gt; I think that seems OK. I think the first step is a proposal,
&gt; 
&gt; Anybody volunteering for this, or should I throw it on my  pile?

I think it might make sense for you, me and Ondrej to write one up?

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120119123924</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-01-19 12:39:24-0400</timestampReceived><subject>[tor-dev] Tor and DNS</subject><body>

Hi,

After some interesting discussions irl last week with knowledgeable DNS
and security people (hi Jakob) I'd like to hear from people involved
with DNS in Tor what current status is and what needs to be done.

More specifically, what's the status of ttdnsd and TorDNSd?  Are they
being used?  Any thoughts about having a local validating resolver?

I know there's been some discussions (4zm, are you here?) about using
libunbound (which could be interesting for DNSSEC support).  Did that
evolve into anything useful?

I'm by no means a DNS expert but would love to see some discussion about
this, partly because future IPv6 work will depend on changes to our DNS
system.

Thanks,
Linus
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120119221319</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-19 22:13:19-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Thu, Jan 19, 2012 at 7:39 AM, Linus Nordberg &lt;linus@nordberg.se&gt; wrote:
&gt; Hi,
&gt;
&gt; After some interesting discussions irl last week with knowledgeable DNS
&gt; and security people (hi Jakob) I'd like to hear from people involved
&gt; with DNS in Tor what current status is and what needs to be done.
&gt;
&gt; More specifically, what's the status of ttdnsd and TorDNSd? =A0Are they
&gt; being used? =A0Any thoughts about having a local validating resolver?
&gt;
&gt; I know there's been some discussions (4zm, are you here?) about using
&gt; libunbound (which could be interesting for DNSSEC support). =A0Did that
&gt; evolve into anything useful?
&gt;
&gt; I'm by no means a DNS expert but would love to see some discussion about
&gt; this, partly because future IPv6 work will depend on changes to our DNS
&gt; system.

Hi, Linus!

So, I think that what we actually need from a proper way to do DNS
over Tor is a way for the Tor client to make real DNS requests to get
handled by an exit node's DNS server or servers.  Right now, we don't
have that; we have a pile of half-measures instead.

Specifically, here's Tor's DNS support now:
   * when the client uses a BEGIN relay cell to open a new stream, the
exit node does a lookup on the requested hostname at its nameservers,
connects there, and tells the client what the IP was.  No info about
the lookup other than the IPv4 address is returned.
  * A client can use a RESOLVE relay cell to do an A lookup, an AAAA
lookup (not supported iirc), or a PTR lookup at the exit node's
nameservers.  But they don't get back the full answer; they only get
back the IP address or hostname.

Originally, we limited the DNS functionality that the exit node would
expose for you because we were worried about what kind of shennanegans
somebody could do with an arbitrarily crafted DNS request, and so we
restricted ourselves to a minimalist subset.  (This was back when Dan
Kaminski's favorite hobby was finding unexpected applications of DNS,
like streaming video and whatnot.)

But I think the right design is probably something like allowing
clients to request more DNS info via exit nodes' nameservers, and get
more info back. We should think of ways to do this that avoid extra
round trips, but that should be doable.

At the most extreme, this could just give clients the ability to
generate arbitrary DNS requests and get the entire response back.  If
that seems worrisome, we could limit the form of the requests to a
reasonable subset, prevent various "christmas-tree" requests, and so
on.  I don't personally understand the security issues here too well,
but I know they exist.

As an aside, DNSSEC for hostname lookup only helps so much here: If I
know for certain that www.example.com is 10.2.3.4, that doesn't really
help me if I can't know whether I'm really talking to 10.2.3.4.  But
there are DNSSEC uses, such as TLS certificate stapling, that would
still be reasonable to do over Tor.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120121014756</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-01-21 01:47:56-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/19/2012 11:13 PM, Nick Mathewson wrote:
&gt; On Thu, Jan 19, 2012 at 7:39 AM, Linus Nordberg &lt;linus@nordberg.se&gt; wrote:
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; After some interesting discussions irl last week with knowledgeable DNS
&gt;&gt; and security people (hi Jakob) I'd like to hear from people involved
&gt;&gt; with DNS in Tor what current status is and what needs to be done.
&gt;&gt;
&gt;&gt; More specifically, what's the status of ttdnsd and TorDNSd?  Are they
&gt;&gt; being used?  Any thoughts about having a local validating resolver?

So far I've seen ttdnsd used only in Tails, TorDNSd was seen mentioned only in
the Tor mailing lists (not sure how many individuals may be using it though).

ttdnsd: kind of works, unless validation is required (ttdnsd fails as unbound
forwarder, most likely because of not handling DS queries correctly)

It seems that bunch of people who experimented with DNS over Tor came to
conclusion that using existing caching resolver like unbound is simpler than
specialized resolvers like ttdnsd.

&gt; Originally, we limited the DNS functionality that the exit node would
&gt; expose for you because we were worried about what kind of shennanegans
&gt; somebody could do with an arbitrarily crafted DNS request, and so we
&gt; restricted ourselves to a minimalist subset.  (This was back when Dan
&gt; Kaminski's favorite hobby was finding unexpected applications of DNS,
&gt; like streaming video and whatnot.)

The same queries can be done by anyone via setting up a tunnel to a recursive
resolver (except the constraint that it has to be over tcp). So video streaming
over DNS and other DNS-tunelling tricks would work.

&gt; But I think the right design is probably something like allowing
&gt; clients to request more DNS info via exit nodes' nameservers, and get
&gt; more info back. We should think of ways to do this that avoid extra
&gt; round trips, but that should be doable.

A naive/straightforward idea is to bundle unbound with Tor/TBB and have it
accessible through exit-enclave (unless new cell is explicitly desired). However
that adds another thing to maintain. And while rare, there exist networks that
either "transparent-proxy" DNS or scrub DNSSEC data from answers.

&gt; At the most extreme, this could just give clients the ability to
&gt; generate arbitrary DNS requests and get the entire response back.  If
&gt; that seems worrisome, we could limit the form of the requests to a
&gt; reasonable subset, prevent various "christmas-tree" requests, and so
&gt; on.  I don't personally understand the security issues here too well,
&gt; but I know they exist.

The only problematic "christmas tree request" I can think of is the DNSSEC
traffic amplification for some crafted queries (but that can be done now over
tunnel to recursive resolver as well).

&gt; As an aside, DNSSEC for hostname lookup only helps so much here: If I
&gt; know for certain that www.example.com is 10.2.3.4, that doesn't really
&gt; help me if I can't know whether I'm really talking to 10.2.3.4.  But
&gt; there are DNSSEC uses, such as TLS certificate stapling, that would
&gt; still be reasonable to do over Tor.

Sure, exit node must be trusted (same way routers must be trusted not to do some
funny DNAT-ing). DNSSEC validation would mitigate a DNS poisoning attack on exit
node's resolver (resolvers using static/sequential ports are still widespread).

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120201090100</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-02-01 09:01:00-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 01/31/2012 03:29 PM, Nick Mathewson wrote:
&gt; On Tue, Jan 31, 2012 at 6:20 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt; On 01/31/2012 06:42 AM, Nick Mathewson wrote:
&gt;&gt;&gt; On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; I think that seems OK. I think the first step is a proposal,
&gt;&gt;&gt;
&gt;&gt;&gt; Anybody volunteering for this, or should I throw it on my  pile?
&gt;&gt;
&gt;&gt; I think it might make sense for you, me and Ondrej to write one up?
&gt; 
&gt; I'll wait to see what Ondrej comes up with; it's pretty normal to do
&gt; revisions on this stuff, after all, and he's already said he'd like to
&gt; give it a try.  If you want to do one too, I'd be glad to take on
&gt; merging.  Or ask Ondrej if he wants to collaborate on the first draft.
&gt; 

That sounds good. I'll wait for the first draft and send feedback.

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120205033851</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-05 03:38:51-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/01/2012 10:01 AM, Jacob Appelbaum wrote:
&gt; 
&gt; That sounds good. I'll wait for the first draft and send feedback.

First draft is ready here:

https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt

Hopefully I reflected all the main points made in the DNS threads. There are a
few TODOs I couldn't decide what the best course of action would be (usually
options are listed).

I tried to keep Tor as much "DNS/DNSSEC-agnostic" as possible. There exists a
combination of answers to the TODOs that Tor won't have to touch the DNSSEC
part, except for calling ub_resolve ;-) And DNS packet itself would be touched
only in the DNSPort/SOCKS part (but still no fiddling with DNSSEC part).

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120207141811</emailId><senderName>Jakob Schlyter</senderName><senderEmail>jakob@kirei.se</senderEmail><timestampReceived>2012-02-07 14:18:11-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

Ondrej,

I may have missed parts of the previous discussion, but why are you not encapsulating \
the whole DNS request from the client? Various flags and other options (e.g. EDNS0) \
would be quite useful to be able to transport across the TOR network.

	jakob

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120207181806</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-02-07 18:18:06-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Sat, Feb 4, 2012 at 10:38 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt; On 02/01/2012 10:01 AM, Jacob Appelbaum wrote:
&gt;&gt;
&gt;&gt; That sounds good. I'll wait for the first draft and send feedback.
&gt;
&gt; First draft is ready here:
&gt;
&gt; https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt

Cool!  Since you're calling it a draft, I'm not assigning it a number
yet; please let me know when you want that to change.

Some initial comments:

&gt;  DNS_BEGIN payload:
&gt;
&gt;    RR type  (2 octets)
&gt;    RR class (2 octets)
&gt;    ID       (2 octets)
&gt;    length   (1 octet)
&gt;    query    (variable)
&gt;
&gt;  The RR type and class match counterparts in DNS packet. ID is for
&gt;  identifying which data belong together, since response can be longer
&gt;  than single cell's payload. The ID MUST be random and MUST NOT be
&gt;  copied from xid of request DNS packet (in case of using DNSPort).

I think you can dispense with the "ID" field entirely; the "StreamID"
part of the relay cell header should already fulfill this role, if I'm
understanding the purpose of "ID" correctly.

Like Jakob, I'm wondering why there isn't any support for setting flags.

I wonder whether the "length" field here is redundant with the
"length" field in the relay header.  Probably not, I guess: Having a
length field here means we can send

&gt;  DNS_RESPONSE payload:
&gt;
&gt;    ID           (2 octets)
&gt;    data length  (2 octets)
&gt;    total length (4 octets)
&gt;    data         (variable)

So to be clear, if the reply is 1200 bytes long, then the user will
receive four cells, with relay payload contents:
 { ID = x, data_len = 490, total_len = 1200, data = (bytes[0..489] }
 { ID = x, data_len = 490, total_len = 1200, data = (bytes[490..979] }
 { ID = x, data_len = 220, total_len = 1200, data = (bytes[980..1199],
zero padding}
}

As above, I think we can eliminate the ID field.  Also, in this case,
I think the length field in this packet _is_ redundant with the length
field of the relay cell header.

I think the total_len field could be replaced with a single bit to
indicate "this is the last cell".

&gt;  Data contains the reply DNS packet. Total length describes length of
&gt;  complete response packet.

I think we want to do some sanitization on the reply DNS packet. In
particular, we have no need to say what the transaction ID was, or


Initial Questions:

When running in dnsport mode, it seems we risk leaking information
about the client resolver based on which requests it makes in what
order.  Is that so?

How many round trips are we looking at here for typical use cases, and
what can we do to reduce them?  We've found that anything that adds
extra round trips to opening a connection in Tor is a real problem for
a lot of use cases, and so we should try to avoid them as much as
possible.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120207210832</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-07 21:08:32-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/07/2012 03:18 PM, Jakob Schlyter wrote:
&gt; 
&gt; I may have missed parts of the previous discussion, but why are you not \
&gt; encapsulating the whole DNS request from the client? Various flags and other \
&gt; options (e.g. EDNS0) would be quite useful to be able to transport across the TOR \
&gt; network.

There were two main objections:

1. full packet might leak identifying information about OS or resolver used,
quoting Nick:
&gt; There are parts of a DNS packet that we wouldn't want
&gt; to have the Tor client make up.  For example, DNS transaction IDs
&gt; would need to avoid collisions. Similarly, I don't see why the client
&gt; should be setting most  of the possible flags.

The query will work as if following was set: flags 0x110 (recursive,
non-authenticated data ok), DO bit set. Is there any reason for setting some
flags otherwise or make some optional?

2. Roger wanted Tor to know as little as possible about DNS internals.


Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120208003335</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-08 00:33:35-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/07/2012 07:18 PM, Nick Mathewson wrote:
&gt; On Sat, Feb 4, 2012 at 10:38 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt; First draft is ready here:
&gt;&gt;
&gt;&gt; https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt
&gt; 
&gt; Some initial comments:
&gt; 
&gt;&gt;  DNS_BEGIN payload:
&gt;&gt;
&gt;&gt;    RR type  (2 octets)
&gt;&gt;    RR class (2 octets)
&gt;&gt;    ID       (2 octets)
&gt;&gt;    length   (1 octet)
&gt;&gt;    query    (variable)
&gt;&gt;
&gt;&gt;  The RR type and class match counterparts in DNS packet. ID is for
&gt;&gt;  identifying which data belong together, since response can be longer
&gt;&gt;  than single cell's payload. The ID MUST be random and MUST NOT be
&gt;&gt;  copied from xid of request DNS packet (in case of using DNSPort).
&gt; 
&gt; I think you can dispense with the "ID" field entirely; the "StreamID"
&gt; part of the relay cell header should already fulfill this role, if I'm
&gt; understanding the purpose of "ID" correctly.

You're understanding the purpose correctly. I thought that more requests could
be used in a single stream, but after re-reading tor-spec.txt, we can just use
StreamID the same way as for RELAY_RESOLVE(D). So let's ditch the ID.

&gt; Like Jakob, I'm wondering why there isn't any support for setting flags.

See my response to Jakob. I don't think it's worth to use anything else than
flags 0x110 (normal query, recursive, non-authenticated data ok) with DO bit
set. Unless there is a really good reason for other flags, that would only have
potential to leak identifying bits.

We could make an extra reserved fields in the spec for flags and OPT RR and for
now the client will memset them to zeros, exit node will ignore them.

&gt; I wonder whether the "length" field here is redundant with the
&gt; "length" field in the relay header.  Probably not, I guess: Having a
&gt; length field here means we can send
&gt; 
&gt;&gt;  DNS_RESPONSE payload:
&gt;&gt;
&gt;&gt;    ID           (2 octets)
&gt;&gt;    data length  (2 octets)
&gt;&gt;    total length (4 octets)
&gt;&gt;    data         (variable)
&gt; 
&gt; So to be clear, if the reply is 1200 bytes long, then the user will
&gt; receive four cells, with relay payload contents:
&gt;  { ID = x, data_len = 490, total_len = 1200, data = (bytes[0..489] }
&gt;  { ID = x, data_len = 490, total_len = 1200, data = (bytes[490..979] }
&gt;  { ID = x, data_len = 220, total_len = 1200, data = (bytes[980..1199],
&gt; zero padding}
&gt; }

Your example with 1200 byte reply is correct.

&gt; Also, in this case,
&gt; I think the length field in this packet _is_ redundant with the length
&gt; field of the relay cell header.

The inner "length" might be useful in case we wanted to add an extra field
(maybe not a good idea for some other reason, like confusing older OP if we did
add a field later?).

&gt; I think the total_len field could be replaced with a single bit to
&gt; indicate "this is the last cell".

"End" bit would work, but I find it easier to know beforehand how much data to
expect - we don't have to worry about realloc and memory fragmentation. Client
could deny request if claimed total_length is too high right away (or later if
OR keeps pushing more data than claimed).

That also means AXFR/IXFR would be off limits (I'm OK with that).

&gt; 
&gt;&gt;  Data contains the reply DNS packet. Total length describes length of
&gt;&gt;  complete response packet.
&gt; 
&gt; I think we want to do some sanitization on the reply DNS packet. In
&gt; particular, we have no need to say what the transaction ID was, or

Sure, we can scrub transaction id in reply (xid should be random and the client
knows anyway where the exit node is, but why not).

&gt; Initial Questions:
&gt; 
&gt; When running in dnsport mode, it seems we risk leaking information
&gt; about the client resolver based on which requests it makes in what
&gt; order.  Is that so?

Yes. For example, validating vs non-validating resolver is very easy to spot. An
attacker eavesdropping on exit node might have it harder due to caching in
libunbound, but malicious exit node can spot validating resolver just by the
fact that it's asking for DS/DNSKEY records.

Thus client-side validation when using DNSPort or SOCKS resolve must be on by
default.

&gt; How many round trips are we looking at here for typical use cases, and
&gt; what can we do to reduce them?  We've found that anything that adds
&gt; extra round trips to opening a connection in Tor is a real problem for
&gt; a lot of use cases, and so we should try to avoid them as much as
&gt; possible.

Requiring client-side validation for A/AAAA in RELAY_BEGIN is pointless (would
only make it slower), client cannot check where exit node connects and
eavesdropping attacker can easily know which DNS request belongs to DNSPort
request and which to RELAY_BEGIN (that's true in current implementation as well
- if TCP connection does not follow, it's DNSPort/SOCKS resolve request).

So no additional overhead for RELAY_BEGIN.

Case of DNSPort queries - example for addons.mozilla.org with empty cache:

 Standard query A addons.mozilla.org
 Standard query DNSKEY &lt;Root&gt;
 Standard query DS org
 Standard query DNSKEY org
 Standard query DS mozilla.org
 Standard query DNSKEY mozilla.org

Note that we could "preheat" cache by resolving DS and DNSKEY for common TLDs
like com, net, org at Tor start (regardless of whether DNSPort is on or not);
like TBB "preheats" check.toproject.org now :-)

To give you an idea how it looks as cache fills up, here are three requests for
"addons.mozilla.org", "api-dev.bugzilla.mozilla.org", "www.torproject.org",
starting with empty cache:

 Standard query A addons.mozilla.org
 Standard query DNSKEY &lt;Root&gt;
 Standard query DS org
 Standard query DNSKEY org
 Standard query DS mozilla.org
 Standard query DNSKEY mozilla.org
 Standard query A api-dev.bugzilla.mozilla.org
 Standard query A www.torproject.org
 Standard query DS torproject.org
 Standard query DNSKEY torproject.org

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120208015926</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-02-08 01:59:26-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt; On 02/07/2012 07:18 PM, Nick Mathewson wrote:

&gt;&gt; part of the relay cell header should already fulfill this role, if I'm
&gt;&gt; understanding the purpose of "ID" correctly.
&gt;
&gt; You're understanding the purpose correctly. I thought that more requests =
could
&gt; be used in a single stream, but after re-reading tor-spec.txt, we can jus=
t use
&gt; StreamID the same way as for RELAY_RESOLVE(D). So let's ditch the ID.

Agreed.  It means you can only have 65536 total streams and requests
inflight per circuit at a time, but that's a pretty generous limit.

&gt;&gt; Like Jakob, I'm wondering why there isn't any support for setting flags.
&gt;
&gt; See my response to Jakob. I don't think it's worth to use anything else t=
han
&gt; flags 0x110 (normal query, recursive, non-authenticated data ok) with DO =
bit
&gt; set. Unless there is a really good reason for other flags, that would onl=
y have
&gt; potential to leak identifying bits.

I can't think of one offhand; I had at first thought that
non-recursive queries were good for something, but I'm not really sure
what.

[...]
&gt; Your example with 1200 byte reply is correct.
&gt;
&gt;&gt; Also, in this case,
&gt;&gt; I think the length field in this packet _is_ redundant with the length
&gt;&gt; field of the relay cell header.
&gt;
&gt; The inner "length" might be useful in case we wanted to add an extra field
&gt; (maybe not a good idea for some other reason, like confusing older OP if =
we did
&gt; add a field later?).

I think if we want an extra field in the future, we want to put it
after the end of the response (that is, after total_len), rather than
having it be optionally in every cell.

&gt;&gt; I think the total_len field could be replaced with a single bit to
&gt;&gt; indicate "this is the last cell".
&gt;
&gt; "End" bit would work, but I find it easier to know beforehand how much da=
ta to
&gt; expect - we don't have to worry about realloc and memory fragmentation. C=
lient
&gt; could deny request if claimed total_length is too high right away (or lat=
er if
&gt; OR keeps pushing more data than claimed).

Hm. If so, maybe total_len only needs to be in the first cell then.

&gt; That also means AXFR/IXFR would be off limits (I'm OK with that).

Me too.

[...]
&gt;&gt; Initial Questions:
&gt;&gt;
&gt;&gt; When running in dnsport mode, it seems we risk leaking information
&gt;&gt; about the client resolver based on which requests it makes in what
&gt;&gt; order. =A0Is that so?
&gt;
&gt; Yes. For example, validating vs non-validating resolver is very easy to s=
pot. An
&gt; attacker eavesdropping on exit node might have it harder due to caching in
&gt; libunbound, but malicious exit node can spot validating resolver just by =
the
&gt; fact that it's asking for DS/DNSKEY records.
&gt;
&gt; Thus client-side validation when using DNSPort or SOCKS resolve must be o=
n by
&gt; default.
&gt;
&gt;&gt; How many round trips are we looking at here for typical use cases, and
&gt;&gt; what can we do to reduce them? =A0We've found that anything that adds
&gt;&gt; extra round trips to opening a connection in Tor is a real problem for
&gt;&gt; a lot of use cases, and so we should try to avoid them as much as
&gt;&gt; possible.
&gt;
&gt; Requiring client-side validation for A/AAAA in RELAY_BEGIN is pointless (=
would
&gt; only make it slower), client cannot check where exit node connects and
&gt; eavesdropping attacker can easily know which DNS request belongs to DNSPo=
rt
&gt; request and which to RELAY_BEGIN (that's true in current implementation a=
s well
&gt; - if TCP connection does not follow, it's DNSPort/SOCKS resolve request).
&gt;
&gt; So no additional overhead for RELAY_BEGIN.
&gt;
&gt; Case of DNSPort queries - example for addons.mozilla.org with empty cache:

Hang on, is each one of these a *round trip*? I don't think so.  That
is, you don't need to get the answer for the A query before you do the
other lookups; the client can launch them all at once.

Having extra queries isn't a huge problem; it's having extra round
trips specifically that would hurt.  From a cursory look, it doesn't
seem like we're adding any extra round trips here.

I wonder, do we want to add a "resolve and connect" mode to
relay_begin, as discussed elsewhere in this thread?

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120208080940</emailId><senderName>Peter Palfrader</senderName><senderEmail>peter@palfrader.org</senderEmail><timestampReceived>2012-02-08 08:09:40-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Tue, 07 Feb 2012, Nick Mathewson wrote:

&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt; &gt; On 02/07/2012 07:18 PM, Nick Mathewson wrote:
&gt; &gt;&gt; Like Jakob, I'm wondering why there isn't any support for setting flags.
&gt; &gt;
&gt; &gt; See my response to Jakob. I don't think it's worth to use anything else than
&gt; &gt; flags 0x110 (normal query, recursive, non-authenticated data ok) with DO bit
&gt; &gt; set. Unless there is a really good reason for other flags, that would only have
&gt; &gt; potential to leak identifying bits.
&gt; 
&gt; I can't think of one offhand; I had at first thought that
&gt; non-recursive queries were good for something, but I'm not really sure
&gt; what.

CD (checking disabled) is quite an important flag in my opinion.  In
fact, we should set it every time that the tor client is able to
validate DNSSSEC themselves.

There also probably ought to be a tor made up flag for "give me the (or
one) entire cert chain from the root so I can validate this thing myself
without a gazillion round trips".  (If we set this we probably also leak
less about what we have cached already.)  That might require we come up
with a way to serialize a number of DNS replies that are the response to
a single query.

Cheers,
-- 
                           |  .''`.       ** Debian **
      Peter Palfrader      | : :' :      The  universal
 http://www.palfrader.org/ | `. `'      Operating System
                           |   `-    http://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120208224718</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-08 22:47:18-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/08/2012 02:59 AM, Nick Mathewson wrote:
&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt; 
&gt; I think if we want an extra field in the future, we want to put it
&gt; after the end of the response (that is, after total_len), rather than
&gt; having it be optionally in every cell.

OK.

&gt;&gt; That also means AXFR/IXFR would be off limits (I'm OK with that).
&gt; 
&gt; Me too.

Without AXFR/IXFR we could limit total_len to 2 octets.

&gt;&gt; "End" bit would work, but I find it easier to know beforehand how much data to
&gt;&gt; expect - we don't have to worry about realloc and memory fragmentation. Client
&gt;&gt; could deny request if claimed total_length is too high right away (or later if
&gt;&gt; OR keeps pushing more data than claimed).
&gt; 
&gt; Hm. If so, maybe total_len only needs to be in the first cell then.

True. Though I'd prefer it in every DNS_RESPONSE cell, I find "firm" cell
structure less error-prone (saving 2 octets per cell does not seem so
substantial). The total_length in following cells belonging to the same StreamID
could be just ignored.

Just to sum up the changes of DNS_RESPONSE, the new structure would be:

    total length (2 octets)
    data (variable)

&gt;&gt; So no additional overhead for RELAY_BEGIN.
&gt;&gt;
&gt;&gt; Case of DNSPort queries - example for addons.mozilla.org with empty cache:
&gt; 
&gt; Hang on, is each one of these a *round trip*? I don't think so.  That
&gt; is, you don't need to get the answer for the A query before you do the
&gt; other lookups; the client can launch them all at once.

libunbound tries to parallelize requests as much as possible, sending bunch of
requests first, continuing as the responses return.

(Hm, I've just noticed that when asking a forwarder, libunbound serializes it
instead. I'll have to ask about this.)

&gt; I wonder, do we want to add a "resolve and connect" mode to
&gt; relay_begin, as discussed elsewhere in this thread?

Only reason I can think of being useful is for getting NSEC/NSEC3 proof that
domain does not exist. Does not seem worth the extra complexity, unless someone
thinks of better use.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120208232110</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-08 23:21:10-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/08/2012 09:09 AM, Peter Palfrader wrote:
&gt; On Tue, 07 Feb 2012, Nick Mathewson wrote:
&gt; 
&gt;&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt;&gt; On 02/07/2012 07:18 PM, Nick Mathewson wrote:
&gt;&gt;&gt;&gt; Like Jakob, I'm wondering why there isn't any support for setting flags.
&gt;&gt;&gt;
&gt;&gt;&gt; See my response to Jakob. I don't think it's worth to use anything else than
&gt;&gt;&gt; flags 0x110 (normal query, recursive, non-authenticated data ok) with DO bit
&gt;&gt;&gt; set. Unless there is a really good reason for other flags, that would only have
&gt;&gt;&gt; potential to leak identifying bits.
&gt;&gt;
&gt;&gt; I can't think of one offhand; I had at first thought that
&gt;&gt; non-recursive queries were good for something, but I'm not really sure
&gt;&gt; what.
&gt; 
&gt; CD (checking disabled) is quite an important flag in my opinion.  In
&gt; fact, we should set it every time that the tor client is able to
&gt; validate DNSSSEC themselves.

Sorry, I named CD flag wrong ("unauthenticated data ok"), but it's set.

&gt; There also probably ought to be a tor made up flag for "give me the (or
&gt; one) entire cert chain from the root so I can validate this thing myself
&gt; without a gazillion round trips".  (If we set this we probably also leak
&gt; less about what we have cached already.)  That might require we come up
&gt; with a way to serialize a number of DNS replies that are the response to
&gt; a single query.

I like the idea - every lookup would be single roundtrip and would not leak
cache state.

It might be very tricky to do it right. There's one (incomplete) draft about
serializing DNSSEC data into own structures
(https://tools.ietf.org/html/draft-agl-dane-serializechain-01). I find using own
structures means essentially rewriting validation from scratch (definitely
should be avoided).

A naive implementation of simply putting DNS packets together and throwing them
in front of libunbound to sort them out might be much less error-prone.

We should also think about error states and corner cases: what happens if exit
node does not send all needed packets? Retry? Declare it fail?


Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120208232400</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-02-08 23:24:00-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/08/2012 11:47 PM, Ondrej Mikle wrote:
&gt; On 02/08/2012 02:59 AM, Nick Mathewson wrote:
&gt;&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; I think if we want an extra field in the future, we want to put it
&gt;&gt; after the end of the response (that is, after total_len), rather than
&gt;&gt; having it be optionally in every cell.
&gt; 
&gt; OK.
&gt; 
&gt;&gt;&gt; That also means AXFR/IXFR would be off limits (I'm OK with that).
&gt;&gt;
&gt;&gt; Me too.
&gt; 
&gt; Without AXFR/IXFR we could limit total_len to 2 octets.

I'd really like to be able to AXFR. I think it's important to have Tor's
DNSPort able to do some of the most basic and common DNS stuff.

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120209215849</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-09 21:58:49-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/09/2012 12:24 AM, Jacob Appelbaum wrote:
&gt; On 02/08/2012 11:47 PM, Ondrej Mikle wrote:
&gt;&gt; On 02/08/2012 02:59 AM, Nick Mathewson wrote:
&gt;&gt;&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; I think if we want an extra field in the future, we want to put it
&gt;&gt;&gt; after the end of the response (that is, after total_len), rather than
&gt;&gt;&gt; having it be optionally in every cell.
&gt;&gt;
&gt;&gt; OK.
&gt;&gt;
&gt;&gt;&gt;&gt; That also means AXFR/IXFR would be off limits (I'm OK with that).
&gt;&gt;&gt;
&gt;&gt;&gt; Me too.
&gt;&gt;
&gt;&gt; Without AXFR/IXFR we could limit total_len to 2 octets.
&gt; 
&gt; I'd really like to be able to AXFR. I think it's important to have Tor's
&gt; DNSPort able to do some of the most basic and common DNS stuff.

What about making a specialized tool for AXFR/IXFR (like tor-resolve)? Its
interface could be listening for DNS packets and returning DNS-stream with
AXFR/IXFR data. Since practically every DNS server open to AXFR/IXRF must listen
on TCP, this can be much easier implemented using the already existing TCP
tunneling in Tor.

I think this solution would make the rest of design simpler.

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120209224236</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-09 22:42:36-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/09/2012 10:58 PM, Ondrej Mikle wrote:
&gt; On 02/09/2012 12:24 AM, Jacob Appelbaum wrote:
&gt;&gt; On 02/08/2012 11:47 PM, Ondrej Mikle wrote:
&gt;&gt;&gt; On 02/08/2012 02:59 AM, Nick Mathewson wrote:
&gt;&gt;&gt;&gt; On Tue, Feb 7, 2012 at 7:33 PM, Ondrej Mikle &lt;ondrej.mikle@gmail.com&gt; wrote:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; I think if we want an extra field in the future, we want to put it
&gt;&gt;&gt;&gt; after the end of the response (that is, after total_len), rather than
&gt;&gt;&gt;&gt; having it be optionally in every cell.
&gt;&gt;&gt;
&gt;&gt;&gt; OK.
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; That also means AXFR/IXFR would be off limits (I'm OK with that).
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Me too.
&gt;&gt;&gt;
&gt;&gt;&gt; Without AXFR/IXFR we could limit total_len to 2 octets.
&gt;&gt;
&gt;&gt; I'd really like to be able to AXFR. I think it's important to have Tor's
&gt;&gt; DNSPort able to do some of the most basic and common DNS stuff.
&gt; 
&gt; What about making a specialized tool for AXFR/IXFR (like tor-resolve)? Its
&gt; interface could be listening for DNS packets and returning DNS-stream with
&gt; AXFR/IXFR data. Since practically every DNS server open to AXFR/IXRF must listen
&gt; on TCP, this can be much easier implemented using the already existing TCP
&gt; tunneling in Tor.
&gt; 
&gt; I think this solution would make the rest of design simpler.

Another good reason for separate tool is to be able to specify the actual server
where to ask for *XFR. Using just standard recursion and asking master NS may
not always give the results you want.

Standard recursion with AXFR never worked for me in cases of servers listed
here: http://axfr.nohack.se/

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120210072006</emailId><senderName>Jakob Schlyter</senderName><senderEmail>jakob@kirei.se</senderEmail><timestampReceived>2012-02-10 07:20:06-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 7 feb 2012, at 22:08, Ondrej Mikle wrote:

&gt; 1. full packet might leak identifying information about OS or resolver used,
&gt; quoting Nick:
&gt; &gt; There are parts of a DNS packet that we wouldn't want
&gt; &gt; to have the Tor client make up.  For example, DNS transaction IDs
&gt; &gt; would need to avoid collisions. Similarly, I don't see why the client
&gt; &gt; should be setting most  of the possible flags.
&gt; 
&gt; The query will work as if following was set: flags 0x110 (recursive,
&gt; non-authenticated data ok), DO bit set. Is there any reason for setting some
&gt; flags otherwise or make some optional?

If you bundle a full resolver (e.g. libunbound) with the TOR client, you will be much \
better off doing full DNS packet transport, or you have to rewrite the upstream \
forwarding code. I do about the potential fingerprinting issues (I'm one of the \
people behind Net::DNS::Fingerprint), but in this case I believe we can mitigate \
these issues (if considered important) by masking/rewriting some DNS request fields \
within the TOR client and/or exit node.

	jakob

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120212195306</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-12 19:53:06-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On 02/10/2012 08:20 AM, Jakob Schlyter wrote:
&gt; On 7 feb 2012, at 22:08, Ondrej Mikle wrote:
&gt; 
&gt; &gt; 1. full packet might leak identifying information about OS or resolver used,
&gt; &gt; quoting Nick:
&gt; &gt; &gt; There are parts of a DNS packet that we wouldn't want
&gt; &gt; &gt; to have the Tor client make up.  For example, DNS transaction IDs
&gt; &gt; &gt; would need to avoid collisions. Similarly, I don't see why the client
&gt; &gt; &gt; should be setting most  of the possible flags.
&gt; &gt; 
&gt; &gt; The query will work as if following was set: flags 0x110 (recursive,
&gt; &gt; non-authenticated data ok), DO bit set. Is there any reason for setting some
&gt; &gt; flags otherwise or make some optional?
&gt; 
&gt; If you bundle a full resolver (e.g. libunbound) with the TOR client, you will be \
&gt; much better off doing full DNS packet transport, or you have to rewrite the \
&gt; upstream forwarding code. I do about the potential fingerprinting issues (I'm one \
&gt; of the people behind Net::DNS::Fingerprint), but in this case I believe we can \
&gt; mitigate these issues (if considered important) by masking/rewriting some DNS \
&gt; request fields within the TOR client and/or exit node.

I guess you are right as long as the DNS packet transmitted to exit node is
always generated by libunbound (BTW fpdns is a neat tool).

Validation must be on by default as well, otherwise it would be really to
fingerprint users that turned it on manually.

I'll update the draft in a few days, just a quick summary of changes:
- drop IDs (use StreamID), drop length from DNS_RESPONSE, keep just uint16_t
total_length
- separate tool for AXFR/IXFR so that server can be specified
- validation always on client side by default

Ondrej
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120216141501</emailId><senderName>Tim Wilde</senderName><senderEmail>twilde@cymru.com</senderEmail><timestampReceived>2012-02-16 14:15:01-0400</timestampReceived><subject>Re: [tor-dev] Unit testing blog posts</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 2/15/2012 6:07 PM, Esteban Manchado Velázquez wrote:
&gt; I ended up publishing it in two parts :-) Here are the URLs:
&gt; 
&gt; 
&gt; http://hcoder.org/2012/02/13/unit-testing-advice-for-seasoned-hackers-12/
&gt;
&gt;  
&gt; http://hcoder.org/2012/02/15/unit-testing-advice-for-seasoned-hackers-22/
&gt;
&gt;  Now I'll have a look at the coverage and see what I can do for the
&gt; unit tests before I move on to Stem/chutney.

Thanks for posting these, and for your work to make Tor and Tor's test
suite better, Esteban!  I found them very interesting and useful
reminders.

Regards,
Tim

- -- 
Tim Wilde, Software Engineer, Team Cymru, Inc.
twilde@cymru.com | +1-847-378-3333 | http://www.team-cymru.org/
-----BEGIN PGP SIGNATURE-----

iEYEARECAAYFAk89D2UACgkQluRbRini9ti4DgCghOQaYM5PTzEOt7dYs/dbM3jl
z0wAnj/QRa4/JgkU3s2qKN1ARojTEkds
=jpm2
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120216210944</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-02-16 21:09:44-0400</timestampReceived><subject>Re: [tor-dev] Unit testing blog posts</subject><body>

Nice posts and thanks for improving the tor tests! I'm not entirely in
agreement with the last point (about tests covering all cases). If the
test space is decently small then exercising everything can better
ensure that you don't violate a set of invariants. For example, one of
stem's unit tests attempt every combination of authentication methods
against every set of failures they can encounter, making sure that we
properly report success/failure and never raise an unexpected type of
exception...
https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/connection/authentication.py#l69

But that said, in general you're probably right. -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120206190043</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-06 19:00:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

See branch safecookie of
https://gitweb.torproject.org/rransom/torspec.git for a revised ‘safe
cookie authentication' protocol (in spec-patch form); see branch
safecookie-023 of https://gitweb.torproject.org/rransom/tor.git for a
completely untested implementation on Tor 0.2.3.x.  This needs testing
and a backport, and a few Trac tickets.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120206205908</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar1@gmail.com</senderEmail><timestampReceived>2012-02-06 20:59:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

&gt; See branch safecookie of
&gt; https://gitweb.torproject.org/rransom/torspec.git for a revised =91safe
&gt; cookie authentication=92 protocol

The spec still doesn't look reader friendly but guess we won't be
expecting too many clients to implement this. One other note is that
keywords like 'must' should be capitalized similar to other parts of
the spec.

&gt; This needs testing
&gt; and a backport, and a few Trac tickets.

We could save some work by writing a handler for this in stem.
Currently when you run...

git clone git://git.torproject.org/stem.git
./stem/run_tests.py --integ --target RUN_ALL --tor /path/to/your/tor

You'll exercise all of the connection and authentication use cases
within around a minute, including...
* no control port or socket
* control port
* control socket
* no auth
* password auth
* cookie auth
* multiple auth methods

This will confirm that you aren't inadvertently breaking something
else. Then if we add the safe cookie handshake and integ test it'll be
easier for you to test this change as it's developed (test runs with a
single target take around eight seconds). I'd be happy to help if you
can get just about any python snippet correctly authenticating to your
feature.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120207173907</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-02-07 17:39:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

On Sun, Feb 5, 2012 at 7:46 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; See attached, because GMail would wrap lines if I sent it inline.

Added as proposal 193.

This seems like a general case of "A and B prove to each other that
they both know some secret S without revealing S."  Are there existing
protocols for that with security proofs?  It seems like something
that's probably been done before.

I wonder, have you got the HMAC arguments reversed in some places?
When you do HMAC("string", cookiestring), you seem to be using the
secret thing as the message, and the not-secret thing as the key.

This would be a little easier to read if the function
HMAC(HMAC(x,y),z) were given a name.

Part of me wants to to incorporate both the ClientChallengeString and
ServerChallengeString in both of the authenticator values, just on the
theory that authenticating more fields of the protocol is probably
smarter.

I'd note that this doesn't actually prevent information leakage
entirely.  Instead of making you reveal some secret 32-byte file S,
the attacker now makes you reveal HMAC(HMAC(k,S),c), where k is
constant and the attacker controls c.   That's fine if S has plenty of
entropy, but not so good if (say) S has 20 bytes of predictable data
and 12 bytes of a user-generated password.  Then again, I'm not so
sure a zero-knowledge protocol is really warranted here.

I am leery of adding this to 0.2.3.x (which is in feature-freeze),
much less backporting it, but I'm having a hard time coming up with a
way to do this entirely in the controller, so I guess we could call it
a "security fix" rather than a "feature" if we can't think of another
way to kludge around the problem.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120207182503</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-07 18:25:03-0400</timestampReceived><subject>Re: [tor-dev] Proposal xxx: Safe cookie authentication</subject><body>

On 2012-02-07, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Sun, Feb 5, 2012 at 7:46 AM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;&gt; See attached, because GMail would wrap lines if I sent it inline.
&gt;
&gt; Added as proposal 193.

Remember to push it.

&gt; This seems like a general case of "A and B prove to each other that
&gt; they both know some secret S without revealing S."  Are there existing
&gt; protocols for that with security proofs?  It seems like something
&gt; that's probably been done before.

Yes.  I believe this is an existing protocol, except for the extra
(inner) HMAC (see next chunk of reply).

&gt; I wonder, have you got the HMAC arguments reversed in some places?
&gt; When you do HMAC("string", cookiestring), you seem to be using the
&gt; secret thing as the message, and the not-secret thing as the key.

I am, but that HMAC is meant only as a ‘tweaked message-digest
function', so that we never ever compute
HMAC(potentially_secret_cookie_string, something_else).  (It's
remotely possible that someone could have a 32-byte HMAC-SHA256 key
stored as a binary file; I want to keep the server from abusing such a
key.)

&gt; This would be a little easier to read if the function
&gt; HMAC(HMAC(x,y),z) were given a name.
&gt;
&gt; Part of me wants to to incorporate both the ClientChallengeString and
&gt; ServerChallengeString in both of the authenticator values, just on the
&gt; theory that authenticating more fields of the protocol is probably
&gt; smarter.

I'll think about this further.

&gt; I'd note that this doesn't actually prevent information leakage
&gt; entirely.  Instead of making you reveal some secret 32-byte file S,
&gt; the attacker now makes you reveal HMAC(HMAC(k,S),c), where k is
&gt; constant and the attacker controls c.   That's fine if S has plenty of
&gt; entropy, but not so good if (say) S has 20 bytes of predictable data
&gt; and 12 bytes of a user-generated password.  Then again, I'm not so
&gt; sure a zero-knowledge protocol is really warranted here.

The server reveals its string first, thereby proving knowledge of the
secret (unless the client e.g. reuses a challenge, in which case it
deserves to lose) or access to an oracle for the server-to-controller
PoK.  (If the server has access to an oracle, it can already
brute-force a low-entropy secret.  An honest server's secret is not
low-entropy, so we don't have to worry about a client using this
attack.)

This is also another reason that I used the weird HMAC-of-HMAC
construction for both proofs -- no one has an excuse for using a
protocol which this authentication protocol could be used to attack.

&gt; I am leery of adding this to 0.2.3.x (which is in feature-freeze),
&gt; much less backporting it, but I'm having a hard time coming up with a
&gt; way to do this entirely in the controller, so I guess we could call it
&gt; a "security fix" rather than a "feature" if we can't think of another
&gt; way to kludge around the problem.

The best that a controller can do without this protocol is to refuse
to use the cookie path Tor specifies in its response to a PROTOCOLINFO
command unless the controller's user has whitelisted that cookie path.
 I don't know whether that would be acceptable to controller authors
and users.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120131200817</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-01-31 20:08:17-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

On Tue, Jan 31, 2012 at 1:46 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA1
&gt;
&gt; Hi everyone,
&gt;
&gt; To help the tor project, I'll contribute some of my spare time to improve
&gt; multithreading for the Tor code base.
Color me confused: This is for taking advantage of multiprocessor
systems, correct?
&gt; I've speak a bit with Nick M. and it seems the crypto lib is an important part
&gt; to begin with. The wiki page
&gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
&gt; indicates, basically, that a worker thread pool with a work queue to dispatch
&gt; crypto events should be the right approach and I do agree.
&gt;
&gt; Is it acceptable to link an external library to the project being a dependence?
&gt;
&gt; The library I'm thinking about is "liburcu" which stands for user-space RCU
&gt; (http://lttng.org/urcu). It's a complete set of lockless data structure
&gt; including wait-free queue which can be very useful for our case. It support a
&gt; large variety of architecture and works on BSD and Linux. The Linux kernel use
&gt; RCU mechanism for a lot of internal data structure today so it's quite tested
&gt; and solid.
One future issue I foresee is the use of batching oriented crypto
operations. If we use binary Edwards curves for speed in the onion
skins, then batching becomes a major timesaver. The obvious way to do
this is with workers grabbing and putting back batches, but we also
want to maintain responsiveness. If a router is getting low traffic it
shouldn't wait forever to fill up a batch.
&gt;
&gt; The question I think is do we want lockless data structure in Tor or it's not
&gt; and will not be necessary for the type of workload ? (lockless re-sizable hash
&gt; tables, red-black tree, stack, linked-list (double also) and queue are available
&gt; as of today).
&gt;
&gt; Waiting on your feedback guys, either way, I'll begin implementing parallel
&gt; crypto largely based on the wiki page (really good ideas there).
&gt;
&gt; Thanks a lot!
&gt; David
&gt; -----BEGIN PGP SIGNATURE-----
&gt; Version: GnuPG v1.4.10 (GNU/Linux)
&gt;
&gt; iQEcBAEBAgAGBQJPKET6AAoJEELoaioR9I02OO0H/2lxrvak2ItAdGsXHsyH2dgz
&gt; U3ePxZUg8Ix5UuZXA/LnP3T7/HBa47mtPMj3hwuz2Wnarf6FulumYA3A9jKsZyxQ
&gt; tf6azD+G7CbZjjYPbe8XYfOZC6+x58mF7SciM/maLoFQLzCvw7ruBBXu8j0Ghw5Q
&gt; hcm8RMIa4UyB0szSpMqkt615sYQBgy7hhEkNKqxnfdP4zIqUIK8mJqBING6r7qU+
&gt; EhnIT5VNzKG9FZPkYNzXOvzbtH0MegNfePsi6gDYlkjR7gekiT9wYH9n5tFTPQUu
&gt; 4BwqaaHR/Wk+zfHaQOmz+KC3eefUqcd+XP82mcPTSUDj4mzG1Sio2ZHKX0IeJVw=
&gt; =r0da
&gt; -----END PGP SIGNATURE-----
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
Sincerely,
Watson Ladd

-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither   Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120201014943</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-02-01 01:49:43-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 12-01-31 03:42 PM, Nick Mathewson wrote:
&gt; On Tue, Jan 31, 2012 at 2:46 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt;&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt;&gt; Hash: SHA1
&gt;&gt;
&gt;&gt; Hi everyone,
&gt;&gt;
&gt;&gt; To help the tor project, I'll contribute some of my spare time to improve
&gt;&gt; multithreading for the Tor code base.
&gt;&gt;
&gt;&gt; I've speak a bit with Nick M. and it seems the crypto lib is an important part
&gt;&gt; to begin with. The wiki page
&gt;&gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
&gt;&gt; indicates, basically, that a worker thread pool with a work queue to dispatch
&gt;&gt; crypto events should be the right approach and I do agree.
&gt;&gt;
&gt;&gt; Is it acceptable to link an external library to the project being a dependence?
&gt; 
&gt; It depends, I'd say.  Most of the data structures we're talking about
&gt; here are ones that allow a lockless and locked implementations.  So my
&gt; ideal implementation would be to have the ability to use lockless
&gt; structures where available, but a locked implementation otherwise.
&gt; This would let us work with better lockless libraries if they come
&gt; along, and continue to run on operating systems or on CPUs that don't
&gt; support librcu, and also migrate to another system in the future in
&gt; case a better one comes along.

I do agree on that! However, sometimes APIs from those kind of libs can be quite
complex (if I think about the red-black tree in URCU...) so having compat layer
between lock and lockless is sometime a bit of work.

So going for a wait-free queue and a normal locked queue, it's not that
difficult (in terms of APIs/ABIs handling) but the question I think is do we
want first to do a "normal locking queue" in the tor code tree and than go for a
lockless from a external lib with a compat layer between lock and lockless ?

Personally, I think we should go straight for one type of data structure and
make sure we create a decent compat layer on top to be able to switch from one
technology to an other easily.

Does it makes sense to you?

&gt; 
&gt; But personally, I would be very surprised if this turned out to make a
&gt; very big difference: even symmetric crypto is pretty slow in
&gt; comparison to even the most obvious work-queue implementations, right?
&gt;  (If I'm missing something there, please let me know.)
&gt; 

Well, I'm not too knowledgeable in crypto implementation but if some hardware
can be use to do the job, it will considerably speed up the process so a
situation where your crypto will go faster than queuing events is a possibility
(if I understand the question right).

Cheers!
David

&gt; cheers,
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJPKJo3AAoJEELoaioR9I02Yt8IAJXv4pgj53jhAtqlMX4DfmpX
SCu/Vnx3+JUFsS1VgJkXXcA1f4pQNNJasoTHcjXDU7eJD2LD/sWkfbM9FrW1vwgd
WjpNwRk0WFFQDZFHULjg72iftEVbLEJNjDhsvX0U/YHwHqgm+OVvoUHEwe22kON1
4peqyGyrem8lutaKA9+SLXhEC7U44Tn7tUqCUj9rWZAtAcCH0AE8baNPiHShNWYx
Av+ddnrCt3Pcpo3KZzVK5ZU7D4Ub7/rolyH4T5FjMm0ukmNv+gAjxfDQpqhzFA0h
Go92OHHno8kB74hsmMDIVCljUbRMbBn/vOMWPpWmvEiYJD6ofC9neV1qnbjhT7s=
=lagt
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120201015253</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-02-01 01:52:53-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 12-01-31 03:08 PM, Watson Ladd wrote:
&gt; On Tue, Jan 31, 2012 at 1:46 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; Hi everyone,
&gt; 
&gt; To help the tor project, I'll contribute some of my spare time to improve
&gt; multithreading for the Tor code base.
&gt;&gt; Color me confused: This is for taking advantage of multiprocessor
&gt;&gt; systems, correct?

Yep :)

&gt; I've speak a bit with Nick M. and it seems the crypto lib is an important part
&gt; to begin with. The wiki page
&gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
&gt; indicates, basically, that a worker thread pool with a work queue to dispatch
&gt; crypto events should be the right approach and I do agree.
&gt; 
&gt; Is it acceptable to link an external library to the project being a dependence?
&gt; 
&gt; The library I'm thinking about is "liburcu" which stands for user-space RCU
&gt; (http://lttng.org/urcu). It's a complete set of lockless data structure
&gt; including wait-free queue which can be very useful for our case. It support a
&gt; large variety of architecture and works on BSD and Linux. The Linux kernel use
&gt; RCU mechanism for a lot of internal data structure today so it's quite tested
&gt; and solid.
&gt;&gt; One future issue I foresee is the use of batching oriented crypto
&gt;&gt; operations. If we use binary Edwards curves for speed in the onion
&gt;&gt; skins, then batching becomes a major timesaver. The obvious way to do
&gt;&gt; this is with workers grabbing and putting back batches, but we also
&gt;&gt; want to maintain responsiveness. If a router is getting low traffic it
&gt;&gt; shouldn't wait forever to fill up a batch.

Indeed. Adding latency to a node is just a no go I think so definitely things to
consider.

Thanks!
David

&gt; 
&gt; The question I think is do we want lockless data structure in Tor or it's not
&gt; and will not be necessary for the type of workload ? (lockless re-sizable hash
&gt; tables, red-black tree, stack, linked-list (double also) and queue are available
&gt; as of today).
&gt; 
&gt; Waiting on your feedback guys, either way, I'll begin implementing parallel
&gt; crypto largely based on the wiki page (really good ideas there).
&gt; 
&gt; Thanks a lot!
&gt; David
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; Sincerely,
&gt; Watson Ladd

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJPKJr1AAoJEELoaioR9I02ymsH/1/30lIjE6UF/lEOxDWdGQp7
JDE9bE6ggoHN8Os/Uuw8Xe6ggE8p7ywbz6ofq+kXZn9PA299gwcH2jtNAa2/Ht9s
3smWlLJkcsNFMx7IXSapictXL1wAV/Mpo7HwmutT3BKRynhwNTmExzutSuEavROD
BN4OUV/3YmhFqwOqkvbA5ohNNHBss+BKrRjeeK+LmyP6o4tLYl1tjdMFP+y5Pol5
NoTM0nW2SS0cVA5GssfBbJyTqBsvOQF6JB5y17VhpPz7yGbK5C4qx1VsfQ9jAoZv
U2BRaMxVMVtwQrxgk5YFhMGoXEBgTAEp2hG2EsSsE18M9v/R9tHBoIwSkDkAnrM=
=IvNp
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120203074611</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-02-03 07:46:11-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Tue, Jan 31, 2012 at 2:46 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; To help the tor project, I'll contribute some of my spare time to improve
&gt; &gt; multithreading for the Tor code base.
&gt; &gt;
&gt; &gt; I've speak a bit with Nick M. and it seems the crypto lib is an important part
&gt; &gt; to begin with. The wiki page
&gt; &gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
&gt; &gt; indicates, basically, that a worker thread pool with a work queue to dispatch
&gt; &gt; crypto events should be the right approach and I do agree.
&gt; &gt;
&gt; &gt; Is it acceptable to link an external library to the project being a dependence?
&gt; 
&gt; It depends, I'd say.  Most of the data structures we're talking about
&gt; here are ones that allow a lockless and locked implementations.  So my
&gt; ideal implementation would be to have the ability to use lockless
&gt; structures where available, but a locked implementation otherwise.
&gt; This would let us work with better lockless libraries if they come
&gt; along, and continue to run on operating systems or on CPUs that don't
&gt; support librcu, and also migrate to another system in the future in
&gt; case a better one comes along.
&gt; 
&gt; But personally, I would be very surprised if this turned out to make a
&gt; very big difference: even symmetric crypto is pretty slow in
&gt; comparison to even the most obvious work-queue implementations, right?
&gt;  (If I'm missing something there, please let me know.)

Linus Tordvalds emerges from 2008 to agree with Nick, and to add:
http://www.realworldtech.com/forums/index.cfm?action=detail&amp;id=91906&amp;threadid=91801&amp;roomid=2

For extra lullz, note the "topic" is "1000 cores SMP is going to
happen". Is this a fake thread, or just some sketch web forum? I can't
find it online anywhere else, and it has a pretty high volume of idiocy,
even for 2008. Other than Linus, of course. My heart goes out to you,
young(er) Torvalds, if that is the real you...

It's also possible that RCU has been through enough trial by fire since
then to have caused Real 2012 Linus to disagree with Fake 2008 Linus.

Either way, it sounds like good sense to make sure we have the option to
say to people "Omg, you hit that crazy crash under heavy crypto load?
Try building with --disable-non-determinism this time."

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120203150239</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-02-03 15:02:39-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 12-02-03 02:46 AM, Mike Perry
&gt; Either way, it sounds like good sense to make sure we have the option to
&gt; say to people "Omg, you hit that crazy crash under heavy crypto load?
&gt; Try building with --disable-non-determinism this time."

Haha! I'll remember that one! :).

I do agree with you!

This class of lockless algorithm can bring more edge cases and cause tremendous
amount of work to debug them often not easily reproducible. The Tor project is
too "sensitive", I think, to hit those kinds of issue in production so normally,
before adding RCU data structures, a huge number of tests has to be done.

Anyhow, you are right, it should be done with the two options at least. We'll
see if RCU brings a significant performance/scalability improvement before going
"full throttle" with it.

Cheers!
David

&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJPK/cPAAoJEELoaioR9I02pJYH/RgdqghIfGZLAXQCXq87n4PX
Kqkdpo9/D/lzSkQKJAeoRIRhCSGpuFV8qME5h7WDeR8VKCECpretUhhhu/x+FM2R
BlScMYp5gLoSQOcE2B2MPDJisXUizUQFkn3NuEN+7bADo9mzDGCGsWMQCTGb4VCJ
a3o+y60b+2mEwRiK5s/ZX0DhzvCQK2hNbMfAaWZOu8UQFqvQfCbOs9ajVQufbAsI
Y4kC1vq6yNGoOCEAiAZOscXZpDmb42PmXmqeH2Y0izRcdmR5vu3QqCUcvGSBB2xe
6HqylDduibCP9d2X3USN6GsYrBBgEipSq0RPQs3PPxj1Befv/UzYDHZ1gs0AWT0=
=rDTD
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120209230221</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-09 23:02:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 193: Safe cookie authentication</subject><body>

I've pushed a revised protocol change to branch safecookie of
git.tpo/rransom/torspec.git, and a (messy, needs rebase,
untested) implementation to branch safecookie-023 of
git.tpo/rransom/tor.git.

Now, the client and server nonces are fed to the same HMAC
invocation, so that the client can believe (modulo Merkle-Damgard
and general iterative hash function ‘features') that the server
knows the cookie (rather than just HMAC(constant, cookie)).

Almost all controllers must drop almost all support for non-safe
cookie authentication ASAP, because a compromised system-wide Tor
process could drop a symlink to /home/rransom/.ed25519-secret-key in
where it was supposed to put a cookie file.

The sole exception to ‘non-safe cookie authentication must die' is
when a controller knows that it is connected to a server process with
equal or greater access to the same filesystem it has access to.  In
practice, this means ‘only if you're completely sure that Tor is
running in the same user account as the controller, and you're
completely sure that you're connected to Tor', and no controller is
sure of either of those.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120212171419</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-02-12 17:14:19-0400</timestampReceived><subject>Re: [tor-dev] First test "report"</subject><body>

On Sun, 12 Feb 2012 04:28:38 +0100, Nick Mathewson &lt;nickm@alum.mit.edu&gt;  
wrote:

&gt; On Sat, Feb 11, 2012 at 7:12 AM, Esteban Manchado Velázquez
&gt; &lt;emanchado@demiurgo.org&gt; wrote:
&gt;&gt; Hi there,
&gt;&gt;
&gt;&gt; I'm done with the first batch of work on the test side. You have the
&gt;&gt; (rebased just now) work here:
&gt;&gt; https://github.com/emanchado/tor/commits/master.
&gt;
&gt; A suggestion: In the future, it's best to do commits on one or more
&gt; "topic branches", where each branch is for a separate kind of work.
&gt; That way, it's way easier for upstream to merge some of the commits,
&gt; hold off on others, and decline others.

    In this concrete case, how would you separate them? One branch per test  
function? Which in this case is more or less one branch per commit?

&gt; As it stands, if you do all your commits in a "master" branch, and I
&gt; want to take some but not all of them, I have to cherry-pick the
&gt; individual commits.  Worse still, your branch and the upstream branch
&gt; will then have diverged: if you try to pull the official repository
&gt; onto your master again, you won't have the actual history of the Tor
&gt; master branch , but some other thing that only exists on your master
&gt; branch.  This can make stuff yucky fast.

    Yeah, I thought of that too late.

&gt; For now, let's leave the current branches as they are.  Once we've got
&gt; the contents of your current master branch reviewed/merged/not-merged,
&gt; you can reset your master to match tor's, and then do future work in
&gt; topic branches.

    OK.

&gt; All that said: I like the granularity of your commits!  Each one is
&gt; logically independent and easy to review.

    Yes, that was my idea. Cool that works for you :-)

&gt;&gt; [...] To keep the test suite from failing,
&gt;&gt; they are inside "#if 0" blocks. So someone should look for "#if 0"  
&gt;&gt; inside
&gt;&gt; test_util.c and fix the code that makes those fail. Or maybe I should  
&gt;&gt; file
&gt;&gt; bugs for those?
&gt;
&gt; Filing bugs is the right move; it looks like you've already started to  
&gt; do this.

    Yes, it seems it was only 3 after all. I didn't know what component to  
use so I left it blank. If there's any better way to file them (component,  
Cc or whatever), I'd be happy to learn that and use it in the future :-)

&gt;&gt; 2. In comparison assertions, the general convention seems to be to  
&gt;&gt; place the
&gt;&gt; expected value first ("test_eq(0, functioncall(...))" rather than
&gt;&gt; "test_eq(functioncall(...), 0)"). I have modified the assertions not
&gt;&gt; following that convention, so they all look the same.
&gt;
&gt; Hm.  I don't think we actually had a convention on this one.

    Yeah, "convention" was a strong word. It was just my impression that  
there were more "expected, actual" than "actual, expected", and I thought  
forcing a convention would be good. Although, as Steven said, tinytest  
doesn't actually specify "expected" an "actual" in the output, I find it's  
less "cognitive load" to debug or make sense of tests if you can assume  
what's the order of the values in the failure output.

&gt;&gt; 3. General clean up, small code reorganisations, fix typos and such.  
&gt;&gt; Eg, I
&gt;&gt; have turned all the "tt_int_op(a, ==, b)" into "test_eq(a, b)".
&gt;
&gt; Actually, test_eq was the old way; tt_int_op is the newer way since we
&gt; switched to tinytest.

    Oh, hehe, oops. I found test_eq much more readable so I thought that  
was the preferred way.

    I can turn everything into tt_* calls and add a comment to test.h  
stating that test_eq and such are deprecated. Should I do that? In that  
case, however, I would place the expected at the end, because otherwise  
the code will look like "tt_int_op(0, ==, strlen(foo))", which I think  
looks pretty awkward.

&gt; Some other comments:
&gt;
&gt;  In general, the hardest thing for me to review here is not whether
&gt; the tests are right, but whether they removed any old tests in
&gt; revising them.  I'll need to have another look through the patch
&gt; series to be sure.

    OK. I *did* remove a couple of assertions, either because I didn't  
think they added anything, or because they were replaced by (in my view)  
better assertions. In particular, I removed the hardcoded gzip magic  
number check (there's already a check_compression_method, see commit  
c4c1d56d96623a45775ec2544c0c6951fbfa2d9f) and I changed some of the  
strcasecmpend cases (commit 03876f0a721ced6ffebb0c61134d5b8396d7600e).  
There are probably others.

&gt;  On commit 5740e0fc1f00fa91be107ee6c4315d114c5ffdc4, the snprintf()
&gt; calls  there should be tor_snprintf().

    Good catch.

&gt;  On commit f40c04a2137724f7b285e8d69ee62e47df1f9049, "iff" is not a
&gt; typo.  It is a standard abbreviation for "if and only if."  We use it
&gt; to say things like "Return true iff X", since otherwise we would need
&gt; to say "Return true if X; return false otherwise."  (If we just said
&gt; "Return true if X," the function would technically be allowed to
&gt; _always_ return true.)

    Right, my bad.

&gt;&gt; I was thinking of blogging about what I saw (esp. related to point 1). I
&gt;&gt; think there are valuable lessons to be learned, which will help other  
&gt;&gt; people
&gt;&gt; writing tests (both for Tor and outside of Tor). I'm not sure if there's
&gt;&gt; enough content for a blog post, but if I do it after all, should I post  
&gt;&gt; the
&gt;&gt; link here?
&gt;
&gt; Please do!

    I went through the commits and I definitely have enough to write about.  
I'll send the link when I'm done.

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120212184930</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-02-12 18:49:30-0400</timestampReceived><subject>Re: [tor-dev] Obfsproxy client for Android</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 02/12/2012 01:57 AM, Nathan Freitas wrote:
&gt; I am going to sleep on this now a bit, do some more testing
&gt; tomorrow, post a public build, then ideally about 18 hours from
&gt; now, put a build up for release for Iranian users.

I've posted a signed test build of Orbot-1.0.7.2+OBFS-BY-DEFAULT here:
http://ge.tt/89SjZWD

** This is for EXTERNAL testing only and NOT for inside Iran users
yet. We have one more round of review tonight, and then should be
ready for targeted public release **

Please test on as many devices as you can, and report issues on trac
or via email. I will be offline for about eight hours, but active
again after that.

+n




-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk84CbUACgkQhemw+yiNNc4xIQCeJAfmPBLWXNbxxAi/2sJBmbob
S/UAoIV07JOJhWSRFtz2msR9z2FJa2ik
=Sc2M
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120213173254</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-02-13 17:32:54-0400</timestampReceived><subject>[tor-dev] Talk on flash proxies Feb. 17</subject><body>

If anyone is interested in the bay area, I'll be giving a short tech
talk on flash proxies 6:30–7:00 PM on February 17.

Gates Computer Science building room 104
353 Serra Street
Stanford, CA  94305
http://infolab.stanford.edu/pub/keller/gates-map.html

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120217202707</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-02-17 20:27:07-0400</timestampReceived><subject>[tor-dev] Fwd: Plan of attack for part (c)</subject><body>

I'm forwarding the following 2 messages about work that I'm thinking
about doing to the Tor code to pave the way towards multiple
cryptographic methods for route extension.
Feel free to comment critically on the proposed design, especially if
it impacts areas you are working on or know about. If you have
alternative ideas that's also good.
Sincerely,
Watson Ladd
---------- Forwarded message ----------
From: Robert Ransom &lt;rransom.8774@gmail.com&gt;
Date: Thu, Feb 16, 2012 at 8:03 PM
Subject: Fwd: Plan of attack for part (c)
To: Nick Mathewson &lt;nickm@torproject.org&gt;, George Kadianakis
&lt;desnacked@riseup.net&gt;
Cc: Watson Ladd &lt;watsonbladd@gmail.com&gt;


Forwarding to Nick and George (who has looked at the crypto code
before), because I'm not going to be able to think about this much
today.

This sort of discussion should probably be on the tor-dev mailing list.

---------- Forwarded message ----------
From: Watson Ladd &lt;watsonbladd@gmail.com&gt;
Date: Thu, 16 Feb 2012 13:15:58 -0600
Subject: Plan of attack for part (c)
To: "rransom.8774" &lt;rransom.8774@gmail.com&gt;

Dear Robert,

I've come up with the following sketch of a plan to handle the
obstacle of crypt_path_t to multiple negotiation methods. It isn't
actually the problem.
The problem is the crypto_dh_t * dh_handshake_state. I propose
defining an enum handshake_methods_t and a handshake_state that looks
like
typedef struct {
     enum method;
     union { crypto_dh_t *dh_handshake; } u;
} handshake_state;

The extend_info_t structure will need to be modified to point to a
list of similar handshake_key structures, probably in the form of a
linked list. This involves modifying the functions that allocate
extend_info_t's, of which thankfully there are few.

Once this is done we can genericize the onion_skin functions by making
new functions which essentially consist of a switch statement on the
value of method. One unresolved issue is selecting the method to be
used when multiple methods are available: I'll probably just take the
first handshake_key and complain if it doesn't match what the
handshake_state should be when processing the response. Servers are a
trickier issue, but if they have a list of handshake_keys we can sort
through it to find the key that matches a particular method, and rely
on the new CREATE2 cell mechanism to tell us what the method is.

Are there requirements for a fix that this idea doesn't meet? Any hard
decisions that I've made the wrong call on?
And thank you very much for taking the time to help me through working
with the tor code.

Sincerely,
Watson Ladd


-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120218165243</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-02-18 16:52:43-0400</timestampReceived><subject>Re: [tor-dev] Unit testing blog posts</subject><body>

Hey Damian!

Wasn't sure if follow up privately or to the list, sending this to the  
list for now.

On Thu, 16 Feb 2012 22:09:44 +0100, Damian Johnson &lt;atagar1@gmail.com&gt;  
wrote:

&gt; Nice posts and thanks for improving the tor tests! I'm not entirely in
&gt; agreement with the last point (about tests covering all cases). If the
&gt; test space is decently small then exercising everything can better
&gt; ensure that you don't violate a set of invariants. For example, one of
&gt; stem's unit tests attempt every combination of authentication methods
&gt; against every set of failures they can encounter, making sure that we
&gt; properly report success/failure and never raise an unexpected type of
&gt; exception...
&gt; https://gitweb.torproject.org/stem.git/blob/HEAD:/test/unit/connection/authentication.py#l69
&gt;
&gt; But that said, in general you're probably right. -Damian

    Thanks for the feedback. You're right, covering all cases is not bad in  
itself. The last point was the weakest, both because I had thought the  
least about it, and because I didn't have an example to back it up.

    The main thing I had in mind when I wrote that point was some test  
cases I had recently reviewed at work. They make some statistical  
computations, and for the tests it *creates* hundreds of test cases (and  
calculates the expected values!) in a loop, then checks the actual values  
are the same as the (calculated) expected. That makes the test code as  
complex as the production code, making it very hard to know if the tests  
are correct, and once something fails, they're pretty hard to debug.

    As I had seen it before, and my impression was that the reason for this  
happening was developers not realising test code is different than  
"production" code (among other things, because it doesn't have to be  
"generic" as in "covering all cases"). In hindsight, after you comment,  
maybe the main/only bad thing about that test was *calculating* the  
expected value.

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120218222947</emailId><senderName>Catalin Patulea</senderName><senderEmail>cat@vv.carleton.ca</senderEmail><timestampReceived>2012-02-18 22:29:47-0400</timestampReceived><subject>Re: [tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

On Thu, Jan 26, 2012 at 1:07 PM, Fabio Pietrosanti (naif)
&lt;lists@infosecurity.ch&gt; wrote:
&gt; Cool, do you have your own github account where to drop-it off?
Sorry for the delay, here it is: https://github.com/cpatulea/TorCap2

Pull requests are most welcome!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120226190500</emailId><senderName>Ondrej Mikle</senderName><senderEmail>ondrej.mikle@gmail.com</senderEmail><timestampReceived>2012-02-26 19:05:00-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

Hi,

I've updated the Tor DNS/DNSSEC draft from what was said in this thread. Short
summary of changes:

- drop IDs (use StreamID), drop length from DNS_RESPONSE, keep just uint16_t
total_length
- separate tool for AXFR so that server can be specified
- validation always on client side by default
- full DNS packets sent in DNS_BEGIN (generated by libunbound)

Other changes (mostly minor):

- IXFR not supported (rare corner case)
- "common" DNS policy - if updates between Tor versions change this "allowed
set" (e.g. new RR type), exit node with old Tor version simply returns REFUSED
- specified the algorithm of TTL normalization

Link to full text (diff is pasted at the end of this mail):

https://github.com/hiviah/torspec/blob/master/proposals/ideas/xxx-dns-dnssec.txt

Ondrej


Diff:

diff --git a/proposals/ideas/xxx-dns-dnssec.txt b/proposals/ideas/xxx-dns-dnssec.txt
index 865e06d..ea711ce 100644
--- a/proposals/ideas/xxx-dns-dnssec.txt
+++ b/proposals/ideas/xxx-dns-dnssec.txt
@@ -33,26 +33,22 @@ Status: Draft

   DNS_BEGIN payload:

-    RR type  (2 octets)
-    RR class (2 octets)
-    ID       (2 octets)
-    length   (1 octet)
-    query    (variable)
+    DNS packet data (variable length)

-  The RR type and class match counterparts in DNS packet. ID is for
-  identifying which data belong together, since response can be longer than
-  single cell's payload. The ID MUST be random and MUST NOT be copied from
-  xid of request DNS packet (in case of using DNSPort).
+  The DNS packet must be generated internally by libunbound to avoid
+  fingerprinting users by differences in client resolvers' behavior.

   DNS_RESPONSE payload:

     ID           (2 octets)
-    data length  (2 octets)
-    total length (4 octets)
+    total length (2 octets)
     data         (variable)

-  Data contains the reply DNS packet. Total length describes length of
-  complete response packet.
+  Data contains the reply DNS packet or its part if packet would not fit into
+  the cell. Total length describes length of complete response packet.
+
+  AXFR and IXRF are not supported in this cell by design (see specialized tool
+  below).

 2. Interfaces to applications

@@ -80,11 +76,9 @@ Status: Draft
   for asking authoritative servers.

   For client side, full validation would be optional described by option
-  DNSValidation (0|1). (TODO: what is a sensible default? Validation is not
-  much useful in A/AAAA case, but for instance SRV, TXT and TLSA are a
-  different case. Only reason for turning validation off is a faster
-  round-trip. We can also leave it to validating resolver that uses DNSPort as
-  forwarder.)
+  DNSValidation (0|1). By default validation is turned on, otherwise it would
+  be easy to fingerprint people who turned it on and asked for not-so-common
+  records like SRV.

 4. Changes to directory flags

@@ -93,9 +87,12 @@ Status: Draft
    - CommonDNS - reflects "common" DNSQueryPolicy
    - FullDNS - reflects "full" DNSQueryPolicy

-  (TODO: how do we handle adding new RR types to "common" as they are created?
-  One option would be to create CommonDNS_1 ... CommonDNS_N such that
-  CommonDNS_{N-1} is subset of CommonDNS_N.)
+  Exit node asked for a RR type not in CommonDNS policy will return REFUSED in
+  as status in the reply DNS packet contained in DNS_RESPONSE cell.
+
+  If new types are added to CommonDNS set (e.g. new RFC adds a record type)
+  and exit node's Tor version does not recognize it as allowed, it will send
+  REFUSED as well.

 5. Implementation notes

@@ -105,8 +102,7 @@ Status: Draft
   Client will periodically purge incomplete DNS replies. Any unexpected
   DNS_RESPONSE will be dropped.

-  Request for special names (.onion, .exit, .noconnect) will return SERVFAIL
-  (for NXDOMAIN we'd have to implement NSEC/NSEC3).
+  Request for special names (.onion, .exit, .noconnect) will return REFUSED.

   RELAY_BEGIN would function "normally", there is no need for returning DNS
   data. In case of malicious exit, client can't check he's really connected to
@@ -116,21 +112,52 @@ Status: Draft

   AD flag must be zeroed out on client unless validation is performed.

-6. Security implications
+6. Separate tool for AXFR

-  Client as well as exit MUST block attempts to resolve local RFC 1918, 4193,
-  4291 adresses (PTR) or local names (e.g. "*.local") in order not to leak
-  unnecessary information about home network. (TODO: TLD whitelist instead of
-  filtering "*.local" names? That would require exit node to periodically
-  update list from ICANN.)
+  The AXFR tool will have similar interface like tor-resolve, but will
+  return raw DNS data.
+
+  Parameters are: query domain, server IP of authoritative DNS.

-  An exit resolving names SHOULD use libunbound for all types of resolving so
-  that an attacker eavesdropping will have it harder to distinguish which
-  names were queried by connect command and which using the DNS subsystem
-  (TODO: will this really help, since attacker can guess from RR type and
-  whether or not a TCP connection follows?)
+  The tool will transfer the data through "ordinary" tunnel using RELAY_BEGIN
+  and related cells.
+
+  This design decision serves two goals:
+
+  - DNS_BEGIN and DNS_RESPONSE will be simpler to implement (lower chance of
+    bugs)
+  - in practice it's often useful do AXFR queries on secondary authoritative
+    DNS servers
+
+  IXFR will not be supported (infrequent corner case, can be done by manual
+  tunnel creation over Tor if truly necessary).
+
+7. Security implications
+
+  Client as well as exit MUST block attempts to resolve local RFC 1918, 4193,
+  4291 adresses (PTR).

-  TTL in reply DNS packet MUST be somehow normalized at exit node so that
-  client won't learn what other clients queried. Transaction ID is provided
-  randomly by libunbound, no need to modify. This affects only DNSPort and
+  An exit node resolving names will use libunbound for all types of resolving,
+  including lookup of A/AAAA records when connecting stream to desired
+  server. Ordinary streams will gain a small benefit of defense against DNS
+  cache poisoning on exit node's network.
+
+  Transaction ID is provided randomly by libunbound, no
+  need to modify. This affects only DNSPort and
   SOCKS interfaces.
+
+8. TTL normalization idea
+
+  Complex on implementation, because it requires parsing DNS packets at exit
+  node.
+
+  TTL in reply DNS packet MUST be normalized at exit node so that client won't
+  learn what other clients queried. The normalization is done in following
+  way:
+
+  - for a RR, the original TTL value received from authoritative DNS server
+    should be used when sending DNS_RESPONSE, trimming the values to interval
+    [5, 600]
+  - does not pose "ghost-cache-attack", since once RR is flushed from
+    libunbound's cache, it must be fetched anew
+
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120229024310</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-02-29 02:43:10-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transport through SOCKS proxy</subject><body>

On 2012-02-29, Arturo Filastò &lt;hellais@torproject.org&gt; wrote:
&gt; On Feb 28, 2012, at 5:38 PM, Robert Ransom wrote:
&gt;
&gt;&gt; On 2012-02-29, Arturo Filastò &lt;hellais@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt;&gt;  When Tor is configured to use both a Pluggable Transport proxy and SOCKS
&gt;&gt;&gt;  proxy it should delegate the proxying to the pluggable transport proxy.
&gt;&gt;&gt;
&gt;&gt;&gt;  This can be achieved by setting the environment variables for the SOCKS
&gt;&gt;&gt;  proxy to that specified inside of the torrc.
&gt;&gt;&gt;
&gt;&gt;&gt;  When the pluggable transport proxy starts it will first read the
&gt;&gt;&gt; environment
&gt;&gt;&gt;  variables and if it detects that it should be using a SOCKS proxy make
&gt;&gt;&gt;  all it's traffic go through it. Once the pluggable transport proxy has
&gt;&gt;&gt; successfully
&gt;&gt;&gt;  established a connection to the SOCKS proxy it should notify Tor of it's
&gt;&gt;&gt;  success or failure.
&gt;&gt;&gt;  When both the SOCKS and the PluggableTransport directives are set Tor
&gt;&gt;&gt;  should set the environemnt variable start the pluggabletransport proxy
&gt;&gt;&gt; and
&gt;&gt;&gt; wait
&gt;&gt;&gt;  for it to report back on the SOCKS proxy status. If the pluggable
&gt;&gt;&gt; transport
&gt;&gt;&gt;  reports back a failure or it does not report back at all (maybe because
&gt;&gt;&gt;  it is an outdated version), Tor should notify the user of the failure
&gt;&gt;&gt;  and exit with an error.
&gt;&gt;
&gt;&gt; That's not very nice.  At a minimum, Vidalia users will never be able
&gt;&gt; to use the GUI to recover from setting such a configuration.  (Users
&gt;&gt; can put Tor into such a configuration using the GUI, by configuring
&gt;&gt; Tor to use a proxy while a managed transport which does not support
&gt;&gt; one is specified in the torrc.)
&gt;&gt;
&gt;&gt;
&gt;&gt;&gt; Specifications: Tor Pluggable Transport communication
&gt;&gt;&gt;
&gt;&gt;&gt;  When Tor detects a SOCKS proxy directive and a Pluggable Transport
&gt;&gt;&gt;  proxy directive it sets the environment variable:
&gt;&gt;&gt;
&gt;&gt;&gt;    "TOR_PT_PROXY" -- This is the address of the proxy to be used by
&gt;&gt;&gt;    the pluggable transport proxy. It is in the format:
&gt;&gt;&gt;    &lt;proxy_type&gt;://&lt;user_name?&gt;:&lt;password?&gt;@&lt;ip&gt;:&lt;port&gt;
&gt;&gt;&gt;    ex. socks5://tor:test1234@198.51.100.1:8000
&gt;&gt;&gt;        socks4a://198.51.100.2:8001
&gt;&gt;
&gt;&gt; What does Tor send if a SOCKS username or password contains ':', '@', or
&gt;&gt; '\0'?
&gt;&gt;
&gt;
&gt; Well I think no username and password should contain that characters,
&gt; especially the
&gt; last. If that is not the case I am sure an approach to deal with this
&gt; problem has been
&gt; found by many others in the past. I would just take a look at their
&gt; solution.

The SOCKS 5 spec permits all of those characters.  (I know this
because I found a bug related to embedded NULs in Tor's SOCKS 5 server
and stream-isolation code.)  If we design our spec to not allow
managed transports to support special characters, someone somewhere
someday will block all Tor managed transports in one fell swoop by
forcing all traffic through a SOCKS proxy that requires one of those
characters in its passwords.

(Since this is a discussion about a proposal, not a final spec, "I
would just take a look at their solution." is a valid answer for now.
But the spec we implement *must* specify an actual solution to this
problem.)


&gt;&gt; How does Tor specify an HTTP proxy?
&gt;&gt;
&gt;
&gt;        HTTPProxy host[:port]
&gt;            Tor will make all its directory requests through this host:port
&gt; (or host:80 if port is not specified), rather than connecting directly to
&gt; any directory
&gt;            servers.

I know how the user specifies an HTTP proxy to Tor.  How does Tor
specify an HTTP proxy to a managed transport?


&gt;&gt; How does Tor specify an HTTP/HTTPS proxy (i.e. an HTTP proxy which
&gt;&gt; supports the CONNECT method)?
&gt;&gt;
&gt;
&gt;        HTTPSProxy host[:port]
&gt;            Tor will make all its OR (SSL) connections through this host:port
&gt; (or host:443 if port is not specified), via HTTP CONNECT rather than
&gt; connecting
&gt;            directly to servers. You may want to set FascistFirewall to
&gt; restrict the set of ports you might try to connect to, if your HTTPS proxy
&gt; only allows
&gt;            connecting to certain ports.
&gt;
&gt;
&gt;&gt; How does Tor pass proxy settings to a managed transport after it has
&gt;&gt; started?  (If it can't, then you'll have to either (a) break all OR
&gt;&gt; connections through that transport by stopping and restarting it or
&gt;&gt; (b) remember to not use that instance of the transport again, and
&gt;&gt; launch and start using another instance of the same transport for new
&gt;&gt; OR connections with the same managed transport specified.  (a) is
&gt;&gt; easier to implement, but not nice.)
&gt;&gt;
&gt;
&gt; via the environment variable TOR_PT_PROXY. This means of communication
&gt; is documented inside of proposal 180.

Tor cannot change a managed transport's environment variables after
the managed transport has been started.

&gt;&gt;&gt;  If the pluggable transport proxy detects that the TOR_PT_PROXY
&gt;&gt;&gt; environment
&gt;&gt;&gt;  variable is set it attempts connecting to it. On successs it will
&gt;&gt;&gt;  write to stdout (as specified in 180-pluggable-transport.txt)
&gt;&gt;&gt;  PROXY true. On failure it should write PROXY-ERROR &lt;errormessage&gt;.
&gt;&gt;
&gt;&gt; What kinds of failures lead to a PROXY-ERROR response?
&gt;&gt;
&gt;
&gt; That the proxy server in unreachable, that the authentication has failed for
&gt; example.

A managed transport should not attempt to connect to the network
before it finishes printing the information Tor expects it to print to
stdout.

&gt;&gt;&gt;  If Tor does not read any PROXY line or it reads a PROXY-ERROR line
&gt;&gt;&gt;  and it is configured to use both SOCKS and PluggableTransport it should
&gt;&gt;&gt;  exit with error.
&gt;&gt;
&gt;&gt; Are managed transports not permitted to report to Tor that they have
&gt;&gt; had a non-fatal error while attempting to connect to a proxy?

&gt; Yes that is what is done with PROXY-ERROR. This means of communication
&gt; between Tor and pluggable transports is documented better inside of proposal
&gt; 180.

If Tor ‘exit[s] with error' when it reads a PROXY-ERROR line, then all
errors which are communicated to Tor using PROXY-ERROR lines are fatal
errors.

A user-configured proxy server being unreachable or rejecting a
username and/or password is not an acceptable reason to end the Tor
process (thereby preventing the user from changing the broken
configuration using Vidalia).


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120229182510</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-02-29 18:25:10-0400</timestampReceived><subject>Re: [tor-dev] New IP-address for directory authority maatuska</subject><body>

On Tue, Feb 28, 2012 at 08:05:27PM +0100, Linus Nordberg wrote:
&gt;      "maatuska orport=80 no-v2 "
&gt;        "v3ident=49015F787433103580E3B66A1707A00E60F2D15B "
&gt; -      "213.115.239.118:443 BD6A 8292 55CB 08E6 6FBE 7D37 4836 3586 E46B 3810",
&gt; +      "171.25.193.9:443 BD6A 8292 55CB 08E6 6FBE 7D37 4836 3586 E46B 3810",

Updated. Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120229191134</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-02-29 19:11:34-0400</timestampReceived><subject>Re: [tor-dev] Mnemonic 80-bit phrases (proposal)</subject><body>

On 02/29/2012 02:58 PM, Sai wrote:
&gt; Reformatted again for your committing pleasure:

I've added this as proposal 194:
https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/194-mnemonic-urls.txt

Thanks!

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120101200618</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-01-01 20:06:18-0400</timestampReceived><subject>Re: [tor-dev] A modest proposal for a petname system in</subject><body>

Hi Jacob

On 17 Dec 2011, at 01:14, Jacob Appelbaum wrote:
&gt; A nym will expire if either the HS goes offline for longer than a
&gt; given time
&gt; threshold or if he explicitly requests removal of the association to that
&gt; particualr nym. This allows dynamic reallocation of nyms and avoids nym
&gt; squatting.

This may be stating the obvious, but a problem here is someone could DoS the hidden \
service for sufficiently long they could steal the nym. If the attacker is smart, \
they will only do the DoS when the nym authority is checking (which suggests the nym \
authority should check at random intervals).

Alternatively, the attacker could hack the hidden service and publish a release \
request. It would be nice if it were easy to run a hidden service with no security \
vulnerabilities but that is not going to be the case any time soon.

One fix to the DoS problem is to permanently bind a nym to an onion address, but as \
you point out allows nym squatiting and other badness. This however does not help if \
the attacker has hacked the hidden service and obtained its private key.

A potential fix to the hacking vulnerability is to bind the nym to a key ID, where \
the private key can be kept offline. If the attacker hacks the hidden service and \
obtains the hidden service private key the legitimate nym owner can recover by \
publishing a new binding request with the same key ID, but signing the request with a \
higher serial number than before.

However, this massively complicates what was otherwise a relatively simple proposal, \
and gives marginal benefit in what I expect to be the common case: where the nym \
binding private key would be stored online and thus precisely as vulnerable to \
compromise as the hidden service key.

Steven.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120107063510</emailId><senderName>"warms0x"</senderName><senderEmail>warms0x@riseup.net</senderEmail><timestampReceived>2012-01-07 06:35:10-0400</timestampReceived><subject>[tor-dev] Using a conf.d instead of a monolithic config file</subject><body>

I'm looking to start developing a Tor module for Puppet, one of the
primary difficulties in making things work together "nicely" is the
monolithic configuration file.


Has there ever been plans or discussion about using a conf.d-style
directory to store configuration file fragments? It would be useful to be
able to drop fragments for hidden service configurations, etc into a
directory to be picked up by the Tor daemon.

If I provided the patches to make this possible, would it be useful?


Cheers,
-warms0x

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120105220530</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-01-05 22:05:30-0400</timestampReceived><subject>[tor-dev] Extending deadline for small features in 0.2.3.x by one</subject><body>

Hi, all!

Previously, I had set the deadline for merging small features into
0.2.3.x as Jan 6.  Due to work that had piled up or suddenly appeared
in the new year, I wasn't able to get patches reviewed this week as
much as I wanted, so I'm going to push the small-feature merge window
back to Jan 13.

This is the deadline for me to merge stuff, not for stuff to get
submitted: I probably will not consider any patches where the first
version is submitted after Monday, unless they are surprisingly tiny
and obviously correct.

Barring exceptional circumstances, any large features must wait for
0.2.4.x, as must any features that don't get merged by Friday. Once
this window closes, only bugfixes will be okay for 0.2.3.x.  As
before, I'm going to leave the definitions of "exceptional", "large",
and "feature" a little vague, and err on the side of getting a good
0.2.3.x release candidate done soon.

happy hacking,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120114021806</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-01-14 02:18:06-0400</timestampReceived><subject>[tor-dev] Transitioning to new crypto (again, but with substance)</subject><body>

Dear all,
After thinking hard about the issues involved with new cryptography in
Tor I came to the following idea for a somewhat reasonable upgrade
path for OP's and OR's that preserves everyone's privacy and security
at all points (to the extent that this is possible: new connections
are by new clients). The only issue is what actually goes out on the
wire needs to be though through.

First note that the connection between the identity used to ensure
EXTEND cells go over canonical connections and the keys actually
presented by two OR's that have formed a connection can be pretty much
arbitrary: it isn't necessary for the client to know what it is. So we
could have each OR have an identity key that stays 1024 bit RSA for
old ORs while newer ORs trust some snazzy new elliptic curve key,
while using the same 1024 bits to form the identity. Note that if we
use elliptic curves to secure the endpoints,(and don't mind
incompatibility with old clients) the RSA key doesn't even need to be
an RSA key.

Also note that the Tor directory spec permits new types of lines. In
particular we could have a curve-ident-key line  and a curve-onionkey
line each containing base-64 encoded keys, and a curve-sig line that's
a signature of the rest of the entry, except for the RSA signature.
The RSA signature would be as normal. To an old client this looks
exactly like an old style directory entry. To a new client this looks
like the elliptic curve key is the root of trust. This is OK: fiddling
with an RSA signature doesn't let you fool a new client into thinking
things about identities, because the identity is derived from the RSA
key which is signed with the curve-ident-key. The onion-key is trusted
by both the curve-ident-key and the RSA identity key. It is still
possible to selectively invalidate one signature, but that signature
is the RSA signature: the curve-ident-signature is also covered by the
RSA signature. This would have the effect of ensuring that only new
clients can connect to the OR: we could require that new clients still
check the RSA signature to prevent this.

Lastly comes the problem of EXTEND cells. All the OR before the new
extension has to do is copy what is given to it without caring about
the version. To signal versions we can just use length: 64 bytes vs.
128 bytes. Sadly this signals what version a client is, but an OR can
guess anyway by how it was connected to if it lists both descriptors.

One thing I have not taken on is the use of the new keys in the TLS
negotiations.We could extend the CERTS and AUTH cells to include them
as possible types, and this is possibly the best solution. I also
haven't addressed the problem of UDP transport: TLS has issues where
instead of sending another packet to be processed by the next router
it resends a dropped packet, holding up the queue.
I've probably missed a lot of issues here, but hopefully this moves
the conversation forward.
Sincerely,
Watson Ladd
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120114143804</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-14 14:38:04-0400</timestampReceived><subject>Re: [tor-dev] Transitioning to new crypto (again, but with substance)</subject><body>

On Fri, Jan 13, 2012 at 08:18:06PM -0600, Watson Ladd wrote:
&gt; Dear all,
&gt; After thinking hard about the issues involved with new cryptography in
&gt; Tor I came to the following idea for a somewhat reasonable upgrade
&gt; path for OP's and OR's that preserves everyone's privacy and security
&gt; at all points (to the extent that this is possible: new connections
&gt; are by new clients). The only issue is what actually goes out on the
&gt; wire needs to be though through.
&gt; 
&gt; First note that the connection between the identity used to ensure
&gt; EXTEND cells go over canonical connections and the keys actually
&gt; presented by two OR's that have formed a connection can be pretty much
&gt; arbitrary: it isn't necessary for the client to know what it is. So we
&gt; could have each OR have an identity key that stays 1024 bit RSA for
&gt; old ORs while newer ORs trust some snazzy new elliptic curve key,
&gt; while using the same 1024 bits to form the identity. Note that if we
&gt; use elliptic curves to secure the endpoints,(and don't mind
&gt; incompatibility with old clients) the RSA key doesn't even need to be
&gt; an RSA key.

I'm not sure what you're saying in this last line.  Are you saying that
the crypto uses the snazzy EC key, and the 1024-bit identity key is now
just an arbitrary 1024-bit string?  That doesn't seem secure to me:
another OR can just publish that same string, along with its own snazzy
keys?

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120110134503</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten.loesing@gmx.net</senderEmail><timestampReceived>2012-01-10 13:45:03-0400</timestampReceived><subject>[tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

Hi Linus, Ian, list,

now that we have bridges running on IPv6 addresses, some bridge
operators enabled that feature on their public bridges and published
descriptors to the bridge authority.

I wonder how to sanitize these addresses for metrics data.  (Currently,
lines containing IPv6 addresses are simply discarded in the sanitized
output.)

Here's how we sanitize IPv4 addresses (from
https://metrics.torproject.org/formats.html#bridgedesc):

&gt; Replace IP address with IP address hash: Of course, the IP address
&gt; needs to be removed, too. It is replaced with 10.x.x.x with x.x.x
&gt; being the 3 byte output of H(IP address | bridge identity |
&gt; secret)[:3]. The input IP address is the 4-byte long binary
&gt; representation of the bridge's current IP address. The bridge
&gt; identity is the 20-byte long binary representation of the bridge's
&gt; long-term identity fingerprint. The secret is a 31-byte long secure
&gt; random string that changes once per month for all descriptors and
&gt; statuses published in that month. H() is SHA-256. The [:3] operator
&gt; means that we pick the 3 most significant bytes of the result.

The idea is that it should be hard to derive the original IPv6 address
from the sanitized address.  At the same time it should be easy to
notice whether the address of a given bridge has changed within the same
month.

Here's my plan for IPv6 addresses:

- Shorter secret: For the hash function input, use the 16 byte long
binary representation of the bridge's current IP address, the 20 bytes
of the fingerprint, but only a 19 byte long secure random string that
changes once per month.  The idea is to keep the input to one SHA block
(447 bits) as suggested by Ian on January 2, 2011 on this list: (16 + 20
+ 19) * 8 = 440.

- Alternative to shorter secret: Use the same 31 byte long secret and
live with the fact that the hash input now spans two SHA blocks.  Maybe
use a 75 byte long secret to have an input of two SHA blocks.

- Write 3 bytes of the sanitized IPv6 address in [::] notation.  We're
writing sanitized IPv4 addresses as 10.x.x.x.  Is there a counterpart
for IPv6 addresses?  It should be obvious that these are "private"
addresses, but I'd like to keep the notation unchanged to keep parsing
tools simple.

- Alternative to using 3 bytes: Should we use fewer or more bytes from
the SHA-256 output for IPv6 addresses?

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120115211550</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-15 21:15:50-0400</timestampReceived><subject>Re: [tor-dev] New paper by Goldberg, Stebila, and Ustaoglu with proposed circuit handshake</subject><body>

On Fri, May 06, 2011 at 10:50:05AM -0400, Nick Mathewson wrote:
&gt; Crypto people who have been following threads about the
&gt; circuit-establishment handshake will be interested in the new paper,
&gt; "Anonymity and one-way authentication in key-exchange protocols", by
&gt; Goldberg, Stebila, and Ostaoglu. Here's the version they updated
&gt; today:
&gt; 
&gt; http://www.cacr.math.uwaterloo.ca/techreports/2011/cacr2011-11.pdf
&gt; 
&gt; If we're moving to an improved handshake, this might be a good
&gt; candidate to consider.  The protocol itself is on page 14.

FYI: it's now been accepted to the Designs, Codes, and Cryptography
jounral:

http://www.springerlink.com/content/nl86n0u547873001/

(The above cacr link has also been updated to the latest version.)

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120115145006</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-15 14:50:06-0400</timestampReceived><subject>[tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

With the recent problems related to SSLv3 with versions of OpenSSL less
than 1.0.0f, we have been investigating how to deal with this on Android
for Orbot. Historically, we have used the version of OpenSSL provided by
the Android device itself, which has ranged from 0.9.8 to 1.0.0e (the
latest on ICS 4.0).

We have now produced a build of OpenSSL 1.0.0f with the necessary
Android patches, and statically linked this into the Tor binary we ship
inside of Orbot. (We already do this for LibEvent, since that is not
included in Android itself). With both OpenSSL and LibEvent linked, the
Tor binary increases from 3MB to about 8MB.

8MB is not terrible, but once you include the Orbot app, Privoxy and
other files, we are getting into the 10MB+ range.

I think this is all fine, and we can enable users to run the app from a
secured partition on their external storage, but I did just want to run
this by all of you to see if there are any options for limiting the size
of libssl.a and libcrypto.a, and the resulting Tor binary.

Thx!

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117081509</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-17 08:15:09-0400</timestampReceived><subject>[tor-dev] Filtering of DA and bootstrap</subject><body>

Hi all,

in a network where the Directory Authority hard-coded in Tor code are
filtered a Tor client cannot bootstrap.

But as far as i understood there are (hundreds?) of Tor DA Mirror.

If so, packaging the Tor clients periodically, bundling the latest
consensus with the software, would provide higher chance for a client to
bootstrap, finding an unfiltered Tor DA Mirror.

Is this assumption true?

Fabio
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120119193050</emailId><senderName>"Nguyen, Giang Truong Khoa"</senderName><senderEmail>nguyen59@illinois.edu</senderEmail><timestampReceived>2012-01-19 19:30:50-0400</timestampReceived><subject>[tor-dev] Port of python Tor controller library to C++</subject><body>

Hi,
As part of my research, I am porting Mike Perry's python Tor controller library \
(pytorctl) to C++. Though the work is not exactly Tor development, tor-dev seems the \
most appropriate mailing list to let others know that I have put my code up on Google \
Code at http://code.google.com/p/cpptorctl/, in case it can be useful to someone.

- Giang
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120120004848</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-20 00:48:48-0400</timestampReceived><subject>[tor-dev] Using Tor w/o GeoIP</subject><body>

Is it the geoip database only required if you are specifying
Exit/Entrances nodes by country code?

I am thinking about not fully unpacking it into Android storage, unless
the user activates those option in Orbot. This will save quite a bit of
internal storage space.

Thanks!

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120111203603</emailId><senderName>Adam Katz</senderName><senderEmail>adamkatz0@gmail.com</senderEmail><timestampReceived>2012-01-11 20:36:03-0400</timestampReceived><subject>[tor-dev] Simulating a slow connection</subject><body>

Hi all

I've noticed the "Simulator for slow Internet connections " project on
the volunteer page and I have relevant experience. Who can I contact
to lend a hand?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120122095550</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-22 09:55:50-0400</timestampReceived><subject>[tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

Hi all,

does anyone know if there is a windows alternative to torsocks/tsocks?

We sketched down a draft to build up an anonymous web application
framework that would allow to build TorHS exposed python webapps on a
desktop computer.

The draft is available at
https://piratenpad.de/p/AnonymousWebApplicationFramework (feel free to
modify)

The idea is to deliver "GlobaLeaks.exe" (but possibly other software)
including Tor, with a web-application framework that include all the
functionalities to handle:
- Tor Hidden Service exposure
- Tor outbound communication

For Tor Outbound outbound connections, the idea is to wrap all the
application (Python, Tornadoweb, scripts) under Torsocks/tsocks.

For Mac OS X / Linux it's easy, we can use torsocks/tsocks:
TorSocks: http://code.google.com/p/torsocks/

But to make this "library preload" under windows we only found:
Torcap: http://www.freehaven.net/~aphex/torcap/
Freecap: http://www.freecap.ru/eng/

Does anyone know if there's something else for win32 that can just run
as a commandline tool to be included in a startup script, handling the
DNS Query and TCP Connect torrifying them?

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120127131859</emailId><senderName>anonym</senderName><senderEmail>anonym@lavabit.com</senderEmail><timestampReceived>2012-01-27 13:18:59-0400</timestampReceived><subject>[tor-dev] Help Tails with tc? [was: Re: Simulating a slow connection]</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

I'm taking this off-list since it isn't strictly Tor-related.

01/20/2012 11:55 AM, Adam Katz:
&gt; Well, I myself didn't have anything specific in mind but i have some
&gt; experience with the linux tc utility as well as with generating
&gt; realistic background traffic. I was wondering whether I could help on
&gt; any of the existing projects or help establish a new one.

We'd gladly accept any help you can offer in the Tails project [1].
We're in need of a test suite where we can simulate slow Internet
connections that you seem have the necessary expertise for (we're
looking at using tc as backend):

  https://tails.boum.org/todo/simulating_internet_connections/

Please let us know if you are interested!

Cheers!

[1] Tails is a Linux based, privacy enhancing LiveCD that uses Tor
extensively. Website: https://tails.boum.org


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120122102848</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-22 10:28:48-0400</timestampReceived><subject>Re: [tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

On Sun, Jan 22, 2012 at 10:55:50AM +0100, Fabio Pietrosanti (naif) wrote:
&gt; does anyone know if there is a windows alternative to torsocks/tsocks?
[snip]
&gt; But to make this "library preload" under windows we only found:
&gt; Torcap: http://www.freehaven.net/~aphex/torcap/
&gt; Freecap: http://www.freecap.ru/eng/

See also TorCap2: http://www.virtualventures.ca/~cat/
but I've never succeeded at getting a license statement out of the author.

&gt; Does anyone know if there's something else for win32 that can just run
&gt; as a commandline tool to be included in a startup script, handling the
&gt; DNS Query and TCP Connect torrifying them?

There isn't a good answer to this question, I believe.

It might be good to look into what the various openvpn tools use. Or
what the open source VM tools use to hook traffic. I haven't seen any
versions of those that are broken out into a modular way though.

There's a recurring theme where some organization realizes there's no
generic open source tool to wrap network syscalls in Windows, so they
write one, but it takes way more effort than they anticipated, and by
the time they're done they don't release it as open source, and instead
try to commercialize it and fail. Goto step 1.

You could be the one to break the cycle. :)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120122105742</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-22 10:57:42-0400</timestampReceived><subject>Re: [tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

On 1/22/12 11:28 AM, Roger Dingledine wrote:
&gt; On Sun, Jan 22, 2012 at 10:55:50AM +0100, Fabio Pietrosanti (naif) wrote:
&gt;&gt; does anyone know if there is a windows alternative to torsocks/tsocks?
&gt; [snip]
&gt;&gt; But to make this "library preload" under windows we only found:
&gt;&gt; Torcap: http://www.freehaven.net/~aphex/torcap/
&gt;&gt; Freecap: http://www.freecap.ru/eng/
&gt; 
&gt; See also TorCap2: http://www.virtualventures.ca/~cat/
&gt; but I've never succeeded at getting a license statement out of the author.

Hi Catalin Patulea,

at some Tor related Project we would like to use TorCap2 as a part of an
OpenSource Project whose concept is described at
https://piratenpad.de/p/AnonymousWebApplicationFramework .

We downloaded the source code of TorCap2
http://www.virtualventures.ca/~cat/code/TorCap2-src.zip

It appear that the source code license it's not defined.

Can you confirm whether the TorCap2 is licensed under BSD, GPL or other
opensource license?

In the source-code and in your home-page it's not defined.

We hope to ear news from you about which license apply to Torcap2, as
it's a tool that can be really helpful if it can be integrated within
other opensource project :-)

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117173507</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-17 17:35:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On Sun, Nov 6, 2011 at 9:12 PM, George Kadianakis &lt;desnacked@gmail.com&gt; wro=
te:

&gt; 3.2. AUTHORIZE cell format
&gt;
&gt; =A0 In shared-secret-based authorization, the MethodFields field of the
&gt; =A0 AUTHORIZE cell becomes:
&gt;
&gt; =A0 =A0 =A0 'shared_secret' =A0 =A0 =A0 =A0 =A0 =A0 =A0 [10 octets]
&gt;
&gt; =A0 where:
&gt;
&gt; =A0 'shared_secret', is the shared secret between the bridge operator
&gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0and the bridge client.

No, dumping the HMAC seems like a step backwards.  In practice,
bridges are needed exactly in those cases where we're worried about
active attacks between clients and the Tor network.  There's no point
in revising a protocol proposal to be MORE vulnerable to MITM;
instead, we need one that is less vulnerable.

Marking this proposal needs-revision.  Not sure what the actual
solution is though. One option might be to look for a way to signal
(undetectably) to the client that the server knows what it's doing as
part of the TLS handshake. For example, by building the
ServerHello.random structure such that instead of having 28 random
bytes and 4 bytes of time, it has 16 random bytes, 4 bytes of time,
and 12 bytes based on a HMAC of (the 16 random bytes, the 4 time
bytes, the ClientHello.Random, and the certificate that it will send).
 Yuck!  But it might work.  It would need analysis, I guess.

I'm probably being too telegraphic here; I should try to expand this
into a real idea if people don't think it's a total nonstarter for
some reason.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117182836</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-01-17 18:28:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On 2012-01-17, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Sun, Nov 6, 2011 at 9:12 PM, George Kadianakis &lt;desnacked@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt; 3.2. AUTHORIZE cell format
&gt;&gt;
&gt;&gt;   In shared-secret-based authorization, the MethodFields field of the
&gt;&gt;   AUTHORIZE cell becomes:
&gt;&gt;
&gt;&gt;       'shared_secret'               [10 octets]
&gt;&gt;
&gt;&gt;   where:
&gt;&gt;
&gt;&gt;   'shared_secret', is the shared secret between the bridge operator
&gt;&gt;                    and the bridge client.
&gt;
&gt; No, dumping the HMAC seems like a step backwards.  In practice,
&gt; bridges are needed exactly in those cases where we're worried about
&gt; active attacks between clients and the Tor network.  There's no point
&gt; in revising a protocol proposal to be MORE vulnerable to MITM;
&gt; instead, we need one that is less vulnerable.

Proposal 190 is only meant to resist identification of a bridge as a
bridge by an attacker actively probing it.  A MITM attacker is far
more likely to be trying to identify the client as a Tor client, so
clients which need to resist MITM attacks must detect them before
reaching the point in the protocol where it would send the AUTHORIZE
cell (thereby identifying it as a Tor client).


&gt; Marking this proposal needs-revision.  Not sure what the actual
&gt; solution is though. One option might be to look for a way to signal
&gt; (undetectably) to the client that the server knows what it's doing as
&gt; part of the TLS handshake. For example, by building the
&gt; ServerHello.random structure such that instead of having 28 random
&gt; bytes and 4 bytes of time, it has 16 random bytes, 4 bytes of time,
&gt; and 12 bytes based on a HMAC of (the 16 random bytes, the 4 time
&gt; bytes, the ClientHello.Random, and the certificate that it will send).
&gt;  Yuck!  But it might work.  It would need analysis, I guess.

With that hack on top of the v3 protocol, any client able to detect
that a bridge is not being MITMed can impersonate the bridge through
the TLS handshake, until after the (honest, victim) client speaks the
Tor protocol at the fake bridge.


The solution is:

* Add a v4 link protocol in which the bridge/relay publishes a list of
fingerprints and cert-chain positions of link certificates in its
descriptor, and the client verifies that the TLS server it's
connecting to presents a cert chain such that one certificate's
fingerprint and position in the cert chain matches one of the
fingerprint/position pairs in the server descriptor.

* Add a v4link=(FINGERPRINT,POSITION,IS-POSITION-RELATIVE-TO-ROOT-OR-LEAF),...
item to the Bridge line parser.

* ...

* Now TLS takes care of MITM detection for us, because we're using it
correctly for the first time since the v1 handshake.  Profit.

* Add EXTEND2 cells so relay-to-relay connections can use v4 links.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117184300</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-01-17 18:43:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

Nick Mathewson &lt;nickm@alum.mit.edu&gt; writes:

&gt; On Sun, Nov 6, 2011 at 9:12 PM, George Kadianakis &lt;desnacked@gmail.com&gt; wrote:
&gt;
&gt;&gt; 3.2. AUTHORIZE cell format
&gt;&gt;
&gt;&gt;   In shared-secret-based authorization, the MethodFields field of the
&gt;&gt;   AUTHORIZE cell becomes:
&gt;&gt;
&gt;&gt;       'shared_secret'               [10 octets]
&gt;&gt;
&gt;&gt;   where:
&gt;&gt;
&gt;&gt;   'shared_secret', is the shared secret between the bridge operator
&gt;&gt;                    and the bridge client.
&gt;
&gt; No, dumping the HMAC seems like a step backwards.  In practice,
&gt; bridges are needed exactly in those cases where we're worried about
&gt; active attacks between clients and the Tor network.  There's no point
&gt; in revising a protocol proposal to be MORE vulnerable to MITM;
&gt; instead, we need one that is less vulnerable.
&gt;
&gt; Marking this proposal needs-revision.  Not sure what the actual
&gt; solution is though. One option might be to look for a way to signal
&gt; (undetectably) to the client that the server knows what it's doing as
&gt; part of the TLS handshake. For example, by building the
&gt; ServerHello.random structure such that instead of having 28 random
&gt; bytes and 4 bytes of time, it has 16 random bytes, 4 bytes of time,
&gt; and 12 bytes based on a HMAC of (the 16 random bytes, the 4 time
&gt; bytes, the ClientHello.Random, and the certificate that it will send).
&gt;  Yuck!  But it might work.  It would need analysis, I guess.
&gt;

Hm, which problem is this idea a solution to?

I seem to recall that the biggest issue with 190 trying to protect
against MITM attacks, was the fact that even though the MITM won't be
able to capture the bridge's password, the Client will still happily
send an AUTHORIZE cell to the MITM, revealing the fact that it's a
connection to a Tor bridge.

I'm not sure if your idea tries to solve the above problem, but an
HMAC of (the 16 random bytes, the 4 time bytes, the
ClientHello.Random, and the certificate that it will send) looks
forgeable by an adversary, leaving the Client to believe that he is
speaking with the correct Tor bridge.

By the way, section 5.1 of proposal 191 tries to solve the above
problem by tagging the SSL handshake with the shared-secret of
proposal 190.

Also, I doubt that vanilla OpenSSL will let us toy with
{Server,Client}Hello.Random. I think that's one of the reasons that
Telex ended up with an OpenSSL patch [0].

&gt; I'm probably being too telegraphic here; I should try to expand this
&gt; into a real idea if people don't think it's a total nonstarter for
&gt; some reason.
&gt;
&gt; yrs,

So, after considering the above problems, we decided to split the
bridge-password problem into two parts, proposal 190 which
authenticates the Client to the Bridge, and proposal 191 which
authenticates the Bridge to the Client.

Building on the above thought, if proposals 190 and 191 authenticate
the two parties based on trusted credentials shared off-band, the v3
link protocol becomes somewhat obsolete, and we are talking about a
new link protocol which two-way authenticates the bridge and the
bridge client based on shared-secrets.

[0]: Did the Telex people clean up the patch, generalize it, and post
it in openssl-dev? Having configurable {Server,Client}Hello.Random in
a future version of OpenSSL would be neat.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20120117184816</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-17 18:48:16-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On Tue, Jan 17, 2012 at 08:43:00PM +0200, George Kadianakis wrote:
&gt; [0]: Did the Telex people clean up the patch, generalize it, and post
&gt; it in openssl-dev? Having configurable {Server,Client}Hello.Random in
&gt; a future version of OpenSSL would be neat.

At USENIX Security, Adam opined that openssl's callback mechanism should
be able to do this with no patches to the source.  (I think there was
one part of Telex that would still need patches to openssl, but I don't
think that was it.)  You basically request a callback right after the
clienthello.random is generated, and in the callback, overwrite the
value.  Or something like that; I don't remember exactly.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120118070708</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-01-18 07:07:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On 2012-01-17, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; On Tue, Jan 17, 2012 at 08:43:00PM +0200, George Kadianakis wrote:
&gt;&gt; [0]: Did the Telex people clean up the patch, generalize it, and post
&gt;&gt; it in openssl-dev? Having configurable {Server,Client}Hello.Random in
&gt;&gt; a future version of OpenSSL would be neat.
&gt;
&gt; At USENIX Security, Adam opined that openssl's callback mechanism should
&gt; be able to do this with no patches to the source.  (I think there was
&gt; one part of Telex that would still need patches to openssl, but I don't
&gt; think that was it.)  You basically request a callback right after the
&gt; clienthello.random is generated, and in the callback, overwrite the
&gt; value.  Or something like that; I don't remember exactly.

In a Telex TLS connection, the client's DH secret key is derived from
the ECDH shared secret between the client's Telex ECDH key and the
Telex server's ECDH key.  (This has the unfortunate side effect that a
client attempting to find Telex servers gives up forward secrecy for
its TLS connections.)  This may be the part of Telex which requires an
OpenSSL patch.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120118124022</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-18 12:40:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On Wed, Jan 18, 2012 at 07:07:08AM +0000, Robert Ransom wrote:
&gt; On 2012-01-17, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; &gt; On Tue, Jan 17, 2012 at 08:43:00PM +0200, George Kadianakis wrote:
&gt; &gt;&gt; [0]: Did the Telex people clean up the patch, generalize it, and post
&gt; &gt;&gt; it in openssl-dev? Having configurable {Server,Client}Hello.Random in
&gt; &gt;&gt; a future version of OpenSSL would be neat.
&gt; &gt;
&gt; &gt; At USENIX Security, Adam opined that openssl's callback mechanism should
&gt; &gt; be able to do this with no patches to the source.  (I think there was
&gt; &gt; one part of Telex that would still need patches to openssl, but I don't
&gt; &gt; think that was it.)  You basically request a callback right after the
&gt; &gt; clienthello.random is generated, and in the callback, overwrite the
&gt; &gt; value.  Or something like that; I don't remember exactly.
&gt; 
&gt; In a Telex TLS connection, the client's DH secret key is derived from
&gt; the ECDH shared secret between the client's Telex ECDH key and the
&gt; Telex server's ECDH key.  (This has the unfortunate side effect that a
&gt; client attempting to find Telex servers gives up forward secrecy for
&gt; its TLS connections.)  This may be the part of Telex which requires an
&gt; OpenSSL patch.

Yes, that seems likely.  (Note, though, that only the *wrapper* TLS
loses forward secrecy, but what was inside that wrapper came out of the
Telex proxy as plaintext, anyway.  If the client actually connects to a
TLS server as the covert destination, that TLS connection is perfectly
normal.)

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120118142528</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-18 14:25:28-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On Tue, Jan 17, 2012 at 1:28 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:

&gt; With that hack on top of the v3 protocol, any client able to detect
&gt; that a bridge is not being MITMed can impersonate the bridge through
&gt; the TLS handshake, until after the (honest, victim) client speaks the
&gt; Tor protocol at the fake bridge.

Seems mostly harmless; the only point of a shared secret there is to
keep scanning from working.  Anybody who tries the above attack
already know that the bridge is there; all they learn is that the
client knew too, which they probably could have figured out as an
eavesdropper.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120118161838</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-01-18 16:18:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

On 2012-01-18, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Tue, Jan 17, 2012 at 1:28 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt; With that hack on top of the v3 protocol, any client able to detect
&gt;&gt; that a bridge is not being MITMed can impersonate the bridge through
&gt;&gt; the TLS handshake, until after the (honest, victim) client speaks the
&gt;&gt; Tor protocol at the fake bridge.
&gt;
&gt; Seems mostly harmless; the only point of a shared secret there is to
&gt; keep scanning from working.  Anybody who tries the above attack
&gt; already know that the bridge is there; all they learn is that the
&gt; client knew too, which they probably could have figured out as an
&gt; eavesdropper.

Censoring MITM attackers tend to MITM all SSL/TLS connections,
regardless of their destination.  No one would benefit from performing
a targeted MITM attack on a bridge, even if we implemented bridge
passwords in such a way that a MITM attacker can obtain the password
needed to connect to (and use) a bridge.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120122211103</emailId><senderName>Catalin Patulea</senderName><senderEmail>cat@vv.carleton.ca</senderEmail><timestampReceived>2012-01-22 21:11:03-0400</timestampReceived><subject>[tor-dev]  Windows Alternative of torsocks/tsocks ?</subject><body>

[resending after subscribing to list]

Hi Fabio,

&gt; On 1/22/12 11:28 AM, Roger Dingledine wrote:
&gt;&gt; See also TorCap2: http://www.virtualventures.ca/~cat/
&gt;&gt; but I've never succeeded at getting a license statement out of the author.
Roger, I'm sorry if I seemed uncooperative when you asked about the
licensing terms of TorCap2. I can see a reference to a discussion with
you back in 2006, but I no longer have copies of the actual
correspondence, so I don't recall what happened.

&gt; Can you confirm whether the TorCap2 is licensed under BSD, GPL or other
&gt; opensource license?
I have released TorCap2 under the LGPL 3.0 (I have updated the readme
and included a license.txt in the zip files). You can use TorCap2
as-is in an application of any license. Any modifications to TorCap2
must be published under the LGPL.

&gt; at some Tor related Project we would like to use TorCap2 as a part of an
&gt; OpenSource Project whose concept is described at
&gt; https://piratenpad.de/p/AnonymousWebApplicationFramework .
On a technical note, I doubt that TorCap2 is the right approach here.
If you can limit yourself to support Python-only applications to
start, then a SOCKS client in Python that implements the same
interface as the 'socket' module seems like a much cleaner solution to
me. This is now platform-independent, less complex (easier to debug),
and gives the Python code the *option* between native sockets and
Tor-ified sockets, under the same interface. (maybe you want to check
connectivity.. or find the hosts's external IP by fetching a URL.. or
talk to hosts on the local network.. etc.)

Porting existing Python code would be a matter of search-replacing
'socket' with 'torsocket' (or even just 'import torsocket as socket').
Of course, with this design you would leak network traffic if you
spawned a separate process, or if you used a Python native library
that directly accesses the OS's socket API. But maybe it's good to
start with supporting Python-only applications initially, given the
complexity of Win32 API hooking..

Just my $0.02..

Catalin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120123002328</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-23 00:23:28-0400</timestampReceived><subject>Re: [tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

On Sun, Jan 22, 2012 at 04:11:03PM -0500, Catalin Patulea wrote:
&gt; &gt; On 1/22/12 11:28 AM, Roger Dingledine wrote:
&gt; &gt;&gt; See also TorCap2: http://www.virtualventures.ca/~cat/
&gt; &gt;&gt; but I've never succeeded at getting a license statement out of the author.
&gt; Roger, I'm sorry if I seemed uncooperative when you asked about the
&gt; licensing terms of TorCap2. I can see a reference to a discussion with
&gt; you back in 2006, but I no longer have copies of the actual
&gt; correspondence, so I don't recall what happened.

Great to see that you're still around; and I'm happy to see that torcap2
has a license now!

(The correspondence in 2006 was me sending one mail and not getting
(or seeing) a response. No worries.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120114031525</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-01-14 03:15:25-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

Hi Adam,

What were you thinking about doing on this project? I'd be happy to help out where I can.

Steven.

On 11 Jan 2012, at 20:36, Adam Katz wrote:

&gt; Hi all
&gt; 
&gt; I've noticed the "Simulator for slow Internet connections " project on
&gt; the volunteer page and I have relevant experience. Who can I contact
&gt; to lend a hand?
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116211449</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-16 21:14:49-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

On Wed, Jan 11, 2012 at 3:36 PM, Adam Katz &lt;adamkatz0@gmail.com&gt; wrote:
&gt; Hi all
&gt;
&gt; I've noticed the "Simulator for slow Internet connections " project on
&gt; the volunteer page and I have relevant experience. Who can I contact
&gt; to lend a hand?

You might want to see whether what the ExperimentTor[1] and Shadow[2]
projects are doing in this area.  They're two of the big tor
simulation projects right now.  (ISTR that there are more that are not
coming to mind right now.)

[1] http://crysp.uwaterloo.ca/software/exptor/index.html
[2] http://shadow.cs.umn.edu/

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120120105518</emailId><senderName>Adam Katz</senderName><senderEmail>adamkatz0@gmail.com</senderEmail><timestampReceived>2012-01-20 10:55:18-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

Well, I myself didn't have anything specific in mind but i have some
experience with the linux tc utility as well as with generating
realistic background traffic. I was wondering whether I could help on
any of the existing projects or help establish a new one.

On Sat, Jan 14, 2012 at 5:15 AM, Steven Murdoch
&lt;Steven.Murdoch@cl.cam.ac.uk&gt; wrote:
&gt; Hi Adam,
&gt;
&gt; What were you thinking about doing on this project? I'd be happy to help out where I can.
&gt;
&gt; Steven.
&gt;
&gt; On 11 Jan 2012, at 20:36, Adam Katz wrote:
&gt;
&gt;&gt; Hi all
&gt;&gt;
&gt;&gt; I've noticed the "Simulator for slow Internet connections " project on
&gt;&gt; the volunteer page and I have relevant experience. Who can I contact
&gt;&gt; to lend a hand?
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120120105934</emailId><senderName>Adam Katz</senderName><senderEmail>adamkatz0@gmail.com</senderEmail><timestampReceived>2012-01-20 10:59:34-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

thanks

On Mon, Jan 16, 2012 at 11:14 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Wed, Jan 11, 2012 at 3:36 PM, Adam Katz &lt;adamkatz0@gmail.com&gt; wrote:
&gt;&gt; Hi all
&gt;&gt;
&gt;&gt; I've noticed the "Simulator for slow Internet connections " project on
&gt;&gt; the volunteer page and I have relevant experience. Who can I contact
&gt;&gt; to lend a hand?
&gt;
&gt; You might want to see whether what the ExperimentTor[1] and Shadow[2]
&gt; projects are doing in this area. =A0They're two of the big tor
&gt; simulation projects right now. =A0(ISTR that there are more that are not
&gt; coming to mind right now.)
&gt;
&gt; [1] http://crysp.uwaterloo.ca/software/exptor/index.html
&gt; [2] http://shadow.cs.umn.edu/
&gt;
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120123011445</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-01-23 01:14:45-0400</timestampReceived><subject>Re: [tor-dev] Using Tor w/o GeoIP</subject><body>


On Jan 20, 2012, at 1:48 AM, Nathan Freitas wrote:

&gt; Is it the geoip database only required if you are specifying
&gt; Exit/Entrances nodes by country code?
&gt; 
&gt; I am thinking about not fully unpacking it into Android storage, unless
&gt; the user activates those option in Orbot. This will save quite a bit of
&gt; internal storage space.
&gt; 
&gt; Thanks!
&gt; 
&gt; +n8fr8

As a client, the geoipdb is only required for specification of nodes by
country code, yes. On relays/bridges, we also use it for statistics. One
idea for you might be to not include the geoip thing by default at all,
and only when the user requests a feature that requires it do you inform
them that they need to fetch another file. I'm not clear if that's legal
on Android, but if it is, it could be an effective mechanism.

Also we've had plans to make the geoip db a thing the tor client
downloads on demand only, but haven't gotten far with that. If you
wanted to help with that on an 0.2.4 timeframe, that'd probably be
fantastic.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120123013844</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-23 01:38:44-0400</timestampReceived><subject>Re: [tor-dev] Using Tor w/o GeoIP</subject><body>

On 01/22/2012 08:14 PM, Sebastian Hahn wrote:
&gt; As a client, the geoipdb is only required for specification of nodes by
&gt; country code, yes. On relays/bridges, we also use it for statistics. One

Thanks for the clarification.

&gt; idea for you might be to not include the geoip thing by default at all,
&gt; and only when the user requests a feature that requires it do you inform
&gt; them that they need to fetch another file. I'm not clear if that's legal
&gt; on Android, but if it is, it could be an effective mechanism.

It is legal on Android, but I have always been concerned about that sort
of secondary download from a Tor perspective, in that you would want to
make sure it was downloaded through the Tor network itself, right?

Maybe I can just create an Orbot-lite version that does not include
privoxy and geoip, etc.

&gt; Also we've had plans to make the geoip db a thing the tor client
&gt; downloads on demand only, but haven't gotten far with that. If you
&gt; wanted to help with that on an 0.2.4 timeframe, that'd probably be
&gt; fantastic.

It would be easier if that was just part of the native Tor
functionality, instead of something tacked on as part of Orbot. I will
do what I can, so keep me in the loop.

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120119194154</emailId><senderName>Tomás_Touceda</senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-01-19 19:41:54-0400</timestampReceived><subject>Re: [tor-dev] Port of python Tor controller library to C++</subject><body>

[Attachment #2 (multipart/signed)]


On 1/19/12 4:30 PM, Nguyen, Giang Truong Khoa wrote:
&gt; Hi,
&gt; As part of my research, I am porting Mike Perry's python Tor controller library \
&gt; (pytorctl) to C++. Though the work is not exactly Tor development, tor-dev seems \
&gt; the most appropriate mailing list to let others know that I have put my code up on \
&gt; Google Code at http://code.google.com/p/cpptorctl/, in case it can be useful to \
&gt; someone. 

Hi,

I'm not sure if you want to work with Qt, but may be you should take a
look at Vidalia's torcontrol classes:
https://gitweb.torproject.org/vidalia.git/tree/HEAD:/src/torcontrol

Cheers,
-- 
Tomás Touceda


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120120174533</emailId><senderName>Giang Nguyen</senderName><senderEmail>cauthu@gmail.com</senderEmail><timestampReceived>2012-01-20 17:45:33-0400</timestampReceived><subject>Re: [tor-dev] Port of python Tor controller library to C++ (Tom?s Touceda)</subject><body>

&gt; I'm not sure if you want to work with Qt, but may be you should take a
&gt; look at Vidalia's torcontrol classes:
&gt; https://gitweb.torproject.org/vidalia.git/tree/HEAD:/src/torcontrol

Thanks, Tomas, for the suggestion.
I actually tried to use Vidalia's Tor control code back in late 2010
when I looked for a C/C++ controller, but I chose not to use it for
several reasons: it lacked (and I think still does) the path
selection, Qt is a huge dependency, and I wasn't yet familiar with Qt
dev.
I was sidetracked for a while -- learning Qt dev in the process -- so
now Vidalia's looks pretty attractive. Since I was almost done with my
port, however, I might as well try to finish it and release it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120115204715</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-01-15 20:47:15-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

[Attachment #2 (multipart/alternative)]


On Jan 15, 2012 9:50 AM, "Nathan Freitas" &lt;nathan@freitas.net&gt; wrote:

&gt;I did just want to run
&gt; this by all of you to see if there are any options for limiting the size
&gt; of libssl.a and libcrypto.a, and the resulting Tor binary.
&gt;

Some stuff to try: openssl has lots of optional features and ciphers; you
could probably disable a lot of them.  There are configuration options to
do so.  If you're not sure what,  I could try to take a look at the list
some time this week.

Another thing to try: recent gccs and their toolchains have a trick where
they can stick every function in its own segment, then tell the linker to
dump the unused ones. I believe it's called "gc-segments" or something. I
have no idea if it would work with openssl, but it could be worth
investigating. I believe there's a ticket for tor to use it by default when
possible.

Yrs,
-- 
Nick

[Attachment #5 (text/html)]

&lt;p&gt;&lt;br&gt;
On Jan 15, 2012 9:50 AM, "Nathan Freitas" &lt;&lt;a \
href="mailto:nathan@freitas.net"&gt;nathan@freitas.net&lt;/a&gt;&gt; wrote:&lt;/p&gt; &lt;p&gt;&gt;I did \
just want to run&lt;br&gt; &gt; this by all of you to see if there are any options for \
limiting the size&lt;br&gt; &gt; of libssl.a and libcrypto.a, and the resulting Tor \
binary.&lt;br&gt; &gt;&lt;/p&gt;
&lt;p&gt;Some stuff to try: openssl has lots of optional features and ciphers; you could \
probably disable a lot of them.  There are configuration options to do so.  If \
you're not sure what,  I could try to take a look at the list some time this \
week.&lt;/p&gt;

&lt;p&gt;Another thing to try: recent gccs and their toolchains have a trick where they can \
stick every function in its own segment, then tell the linker to dump the unused \
ones. I believe it's called "gc-segments" or something. I have no idea \
if it would work with openssl, but it could be worth investigating. I believe \
there's a ticket for tor to use it by default when possible.&lt;/p&gt;

&lt;p&gt;Yrs,&lt;br&gt;
-- &lt;br&gt;
Nick&lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120116003023</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-01-16 00:30:23-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

[Attachment #2 (multipart/alternative)]


On 15 Jan 2012, at 20:47, Nick Mathewson wrote:
&gt; Another thing to try: recent gccs and their toolchains have a trick where they can \
&gt; stick every function in its own segment, then tell the linker to dump the unused \
&gt; ones. I believe it's called "gc-segments" or something. I have no idea if it would \
&gt; work with openssl, but it could be worth investigating. I believe there's a ticket \
&gt; for tor to use it by default when possible. 
I found a presentation on this which looks to contain useful information:

http://elinux.org/images/2/2d/ELC2010-gc-sections_Denys_Vlasenko.pdf

Although post suggests that the Android NKD may have the relevant options on by \
default:

http://stackoverflow.com/questions/7216543/does-android-ndk-build-with-gc-sections-and-how-to-disable


Steven.


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space; "&gt;&lt;div&gt;&lt;div&gt;On 15 Jan 2012, at 20:47, Nick \
Mathewson wrote:&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;p&gt;Another thing to try: recent gccs \
and their toolchains have a trick where they can stick every function in its own \
segment, then tell the linker to dump the unused ones. I believe it's called \
"gc-segments" or something. I have no idea if it would work with openssl, but it \
could be worth investigating. I believe there's a ticket for tor to use it by default \
when possible.&lt;/p&gt;&lt;/blockquote&gt;I found a presentation on this which looks to contain \
useful information:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="http://elinux.org/images/2/2d/ELC2010-gc-sections_Denys_Vlasenko.pdf"&gt;http://eli \
nux.org/images/2/2d/ELC2010-gc-sections_Denys_Vlasenko.pdf&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Although \
post suggests that the Android NKD may have the relevant options on by \
default:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="http://stackoverflow.com/questions/7216543/does-android-ndk-build-with-gc-sectio \
ns-and-how-to-disable"&gt;http://stackoverflow.com/questions/7216543/does-android-ndk-bui \
ld-with-gc-sections-and-how-to-disable&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Steven.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120116061135</emailId><senderName>Eitan Adler</senderName><senderEmail>lists@eitanadler.com</senderEmail><timestampReceived>2012-01-16 06:11:35-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

On Sun, Jan 15, 2012 at 7:30 PM, Steven Murdoch
&lt;Steven.Murdoch@cl.cam.ac.uk&gt; wrote:
&gt; On 15 Jan 2012, at 20:47, Nick Mathewson wrote:
&gt;
&gt; Another thing to try: recent gccs and their toolchains have a trick where
&gt; they can stick every function in its own segment, then tell the linker to
&gt; dump the unused ones. I believe it's called "gc-segments" or something. I
&gt; have no idea if it would work with openssl, but it could be worth
&gt; investigating. I believe there's a ticket for tor to use it by default when
&gt; possible.

clang does something similar with -O4 (link time optimization). See
http://llvm.org/docs/LinkTimeOptimization.html near "In this
example, the linker recognizes that foo2() ...." for more details

-- 
Eitan Adler
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117025827</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-17 02:58:27-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

On 01/16/2012 01:11 AM, Eitan Adler wrote:
&gt; clang does something similar with -O4 (link time optimization). See
&gt; http://llvm.org/docs/LinkTimeOptimization.html near "In this
&gt; example, the linker recognizes that foo2() ...." for more details

Will check it out. Thx!


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117025924</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-17 02:59:24-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

On 01/15/2012 07:30 PM, Steven Murdoch wrote:
&gt; Although post suggests that the Android NKD may have the relevant
&gt; options on by default: 
&gt; http://stackoverflow.com/questions/7216543/does-android-ndk-build-with-gc-sections-and-how-to-disable

We are still actually building with our pre-NDK "droid-gcc" approach,
which most likely means we are not benefiting from NDK optimizations. We
have begun rewriting the build process to be NDK-based, but if it ain't
broke... etc.

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116201631</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-16 20:16:31-0400</timestampReceived><subject>Re: [tor-dev] New paper by Goldberg, Stebila, and Ustaoglu with proposed circuit handshake</subject><body>

On Sun, Jan 15, 2012 at 4:15 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
[...]
&gt; FYI: it's now been accepted to the Designs, Codes, and Cryptography
&gt; jounral:
&gt;
&gt; http://www.springerlink.com/content/nl86n0u547873001/
&gt;
&gt; (The above cacr link has also been updated to the latest version.)

Congratulations, Ian!  Any substantial changes since the CACR version?

Have you been getting any feedback from other vectors?  Any
interesting/useful comments from reviewers?

Is it your sense that folks outside of PCs and this list are reviewing
your work here and giving it the kind of attention we'd want before
deploying it?  And if not, is there anything we can do to help this
design get more attention?

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116202852</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-16 20:28:52-0400</timestampReceived><subject>Re: [tor-dev] New paper by Goldberg, Stebila, and Ustaoglu with proposed circuit handshake</subject><body>

On Mon, Jan 16, 2012 at 03:16:31PM -0500, Nick Mathewson wrote:
&gt; On Sun, Jan 15, 2012 at 4:15 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; [...]
&gt; &gt; FYI: it's now been accepted to the Designs, Codes, and Cryptography
&gt; &gt; jounral:
&gt; &gt;
&gt; &gt; http://www.springerlink.com/content/nl86n0u547873001/
&gt; &gt;
&gt; &gt; (The above cacr link has also been updated to the latest version.)
&gt; 
&gt; Congratulations, Ian!  Any substantial changes since the CACR version?

No, just minor ones, and I don't think any involving the protocol
itself, but just the text.

&gt; Have you been getting any feedback from other vectors?  Any
&gt; interesting/useful comments from reviewers?
&gt; 
&gt; Is it your sense that folks outside of PCs and this list are reviewing
&gt; your work here and giving it the kind of attention we'd want before
&gt; deploying it?  And if not, is there anything we can do to help this
&gt; design get more attention?

As far as I know, only the journal reviewers and this list (and we
authors, of course) have looked at it.  Not too surprising, of course,
as Tor is probably the most obvious use case.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116204111</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-01-16 20:41:11-0400</timestampReceived><subject>Re: [tor-dev] New paper by Goldberg, Stebila, and Ustaoglu with proposed circuit handshake</subject><body>

[Attachment #2 (multipart/alternative)]


On Jan 16, 2012 2:38 PM, "Ian Goldberg" &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt;
&gt; On Mon, Jan 16, 2012 at 03:16:31PM -0500, Nick Mathewson wrote:
&gt; &gt; On Sun, Jan 15, 2012 at 4:15 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt;
wrote:
&gt; &gt; [...]
&gt; &gt; &gt; FYI: it's now been accepted to the Designs, Codes, and Cryptography
&gt; &gt; &gt; jounral:
&gt; &gt; &gt;
&gt; &gt; &gt; http://www.springerlink.com/content/nl86n0u547873001/
&gt; &gt; &gt;
&gt; &gt; &gt; (The above cacr link has also been updated to the latest version.)
&gt; &gt;
&gt; &gt; Congratulations, Ian!  Any substantial changes since the CACR version?
&gt;
&gt; No, just minor ones, and I don't think any involving the protocol
&gt; itself, but just the text.
&gt;
&gt; &gt; Have you been getting any feedback from other vectors?  Any
&gt; &gt; interesting/useful comments from reviewers?
&gt; &gt;
&gt; &gt; Is it your sense that folks outside of PCs and this list are reviewing
&gt; &gt; your work here and giving it the kind of attention we'd want before
&gt; &gt; deploying it?  And if not, is there anything we can do to help this
&gt; &gt; design get more attention?
&gt;
&gt; As far as I know, only the journal reviewers and this list (and we
&gt; authors, of course) have looked at it.  Not too surprising, of course,
&gt; as Tor is probably the most obvious use case.
Most SSL connections involve only one authenticated side.
&gt;
&gt;   - Ian
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;p&gt;&lt;br&gt;
On Jan 16, 2012 2:38 PM, "Ian Goldberg" &lt;&lt;a \
href="mailto:iang@cs.uwaterloo.ca"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; On Mon, Jan 16, 2012 at 03:16:31PM -0500, Nick Mathewson wrote:&lt;br&gt;
&gt; &gt; On Sun, Jan 15, 2012 at 4:15 PM, Ian Goldberg &lt;&lt;a \
href="mailto:iang@cs.uwaterloo.ca"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; &gt; \
[...]&lt;br&gt; &gt; &gt; &gt; FYI: it's now been accepted to the Designs, Codes, and \
Cryptography&lt;br&gt; &gt; &gt; &gt; jounral:&lt;br&gt;
&gt; &gt; &gt;&lt;br&gt;
&gt; &gt; &gt; &lt;a href="http://www.springerlink.com/content/nl86n0u547873001/"&gt;http://www.springerlink.com/content/nl86n0u547873001/&lt;/a&gt;&lt;br&gt;
 &gt; &gt; &gt;&lt;br&gt;
&gt; &gt; &gt; (The above cacr link has also been updated to the latest version.)&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Congratulations, Ian!   Any substantial changes since the CACR version?&lt;br&gt;
&gt;&lt;br&gt;
&gt; No, just minor ones, and I don't think any involving the protocol&lt;br&gt;
&gt; itself, but just the text.&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; Have you been getting any feedback from other vectors?   Any&lt;br&gt;
&gt; &gt; interesting/useful comments from reviewers?&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Is it your sense that folks outside of PCs and this list are reviewing&lt;br&gt;
&gt; &gt; your work here and giving it the kind of attention we'd want before&lt;br&gt;
&gt; &gt; deploying it?   And if not, is there anything we can do to help this&lt;br&gt;
&gt; &gt; design get more attention?&lt;br&gt;
&gt;&lt;br&gt;
&gt; As far as I know, only the journal reviewers and this list (and we&lt;br&gt;
&gt; authors, of course) have looked at it.   Not too surprising, of course,&lt;br&gt;
&gt; as Tor is probably the most obvious use case.&lt;br&gt;
Most SSL connections involve only one authenticated side.&lt;br&gt;
&gt;&lt;br&gt;
&gt;    - Ian&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120110213658</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-01-10 21:36:58-0400</timestampReceived><subject>Re: [tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

Karsten Loesing &lt;karsten.loesing@gmx.net&gt; wrote
Tue, 10 Jan 2012 14:45:03 +0100:

| - Write 3 bytes of the sanitized IPv6 address in [::] notation.  We're
| writing sanitized IPv4 addresses as 10.x.x.x.  Is there a counterpart
| for IPv6 addresses?  It should be obvious that these are "private"
| addresses, but I'd like to keep the notation unchanged to keep parsing
| tools simple.

RFC 3849 defines the prefix 2001:DB8::/32 as being reserved for
documentation.  That should be fine for this.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120111085700</emailId><senderName>Alex Le Heux</senderName><senderEmail>alexlh@funk.org</senderEmail><timestampReceived>2012-01-11 08:57:00-0400</timestampReceived><subject>Re: [tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

Hi,

On Jan 10, 2012, at 22:36, Linus Nordberg wrote:

&gt; Karsten Loesing &lt;karsten.loesing@gmx.net&gt; wrote
&gt; Tue, 10 Jan 2012 14:45:03 +0100:
&gt; 
&gt; | - Write 3 bytes of the sanitized IPv6 address in [::] notation.  We're
&gt; | writing sanitized IPv4 addresses as 10.x.x.x.  Is there a counterpart
&gt; | for IPv6 addresses?  It should be obvious that these are "private"
&gt; | addresses, but I'd like to keep the notation unchanged to keep parsing
&gt; | tools simple.
&gt; 
&gt; RFC 3849 defines the prefix 2001:DB8::/32 as being reserved for
&gt; documentation.  That should be fine for this.

The documentation prefix is for just that, use in documentation :)

ULA (RFC4193) is actually closer to the 10/8 (RFC1918) addresses that you use for IPv4.

Alex
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120111093442</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@nordberg.se</senderEmail><timestampReceived>2012-01-11 09:34:42-0400</timestampReceived><subject>Re: [tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

Alex Le Heux &lt;alexlh@funk.org&gt; wrote
Wed, 11 Jan 2012 09:57:00 +0100:

| &gt; RFC 3849 defines the prefix 2001:DB8::/32 as being reserved for
| &gt; documentation.  That should be fine for this.
| 
| The documentation prefix is for just that, use in documentation :)
| 
| ULA (RFC4193) is actually closer to the 10/8 (RFC1918) addresses that you use for IPv4.

Oh, right.  *blush*

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116074647</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten.loesing@gmx.net</senderEmail><timestampReceived>2012-01-16 07:46:47-0400</timestampReceived><subject>Re: [tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

On 1/11/12 10:34 AM, Linus Nordberg wrote:
&gt; Alex Le Heux &lt;alexlh@funk.org&gt; wrote
&gt; Wed, 11 Jan 2012 09:57:00 +0100:
&gt; 
&gt; | &gt; RFC 3849 defines the prefix 2001:DB8::/32 as being reserved for
&gt; | &gt; documentation.  That should be fine for this.
&gt; | 
&gt; | The documentation prefix is for just that, use in documentation :)
&gt; | 
&gt; | ULA (RFC4193) is actually closer to the 10/8 (RFC1918) addresses that you use for IPv4.
&gt; 
&gt; Oh, right.  *blush*

So, just to get that right: how would we apply RFC4193 here?

- We start with FC00::/7 as the prefix for Local IPv6 unicast addresses.

- We set the 8th bit, the L bit, to 1, because we're generating the
subsequent Global ID locally.

- We generate a random 40-bit Global ID for "Tor sanitized bridge IPv6
addresses."  We don't change it, ever.

- We set the 16-bit Subnet ID to all zeros.

- We use the least significant 24 bits of the 64-bit Interface ID for
the actual sanitized bridge address that was formerly encoded in 10.x.x.x.

As an example, a sanitized IPv6 bridge address would be:

  [fc01:0123:4567:89ab::fedc:ba98:7654]

Does that make sense?



As for using a 19-byte or 75-byte long secret key for the SHA-256 input
(see my original mail in this thread), I think I'll go with 19 bytes.

Whoever wants to break the secret needs to brute-force these 19 bytes
using a known input IPv6 address and known sanitized address from us
(which can easily be acquired by running your own bridge).  The
brute-forcing will take them a while, and it'll only tell them the
secret key for one month.  And once they have it they still need to
brute-force a 16-byte input IPv6 address that matches a given 3-byte
sanitized address.  They'll need to repeat the last step for every
bridge address there is.

There are vastly easier ways to learn bridge addresses.  Heck, we run a
service that tells you those.  Something tells me I'm overthinking this. ;)

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120110003320</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-01-10 00:33:20-0400</timestampReceived><subject>Re: [tor-dev] Extending deadline for small features in 0.2.3.x by</subject><body>

On Thu, Jan 5, 2012 at 5:05 PM, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; Hi, all!
&gt;
&gt; Previously, I had set the deadline for merging small features into
&gt; 0.2.3.x as Jan 6. =A0Due to work that had piled up or suddenly appeared
&gt; in the new year, I wasn't able to get patches reviewed this week as
&gt; much as I wanted, so I'm going to push the small-feature merge window
&gt; back to Jan 13.
&gt;
&gt; This is the deadline for me to merge stuff, not for stuff to get
&gt; submitted: I probably will not consider any patches where the first
&gt; version is submitted after Monday, unless they are surprisingly tiny
&gt; and obviously correct.

I just did an initial triage over all Tor tickets that are in state
"needs_review" in the bugtracker.  If your ticket is not tagged with
"small-feature," or it is not in state "needs_review", then it is not
on my list of small features to review and merge (or not) by Friday.
If I missed something, please let me know!

This was not a triage over bug reports; only feature patches... so
don't worry if there's a pending bugfix (or pending bug) that I didn't
tag.  For my next round of triage, I'll take all remaining tickets
that look like a feature request to me, and remove them from the
0.2.3.x milestone.

yrs,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120110014924</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-01-10 01:49:24-0400</timestampReceived><subject>Re: [tor-dev] Extending deadline for small features in 0.2.3.x by</subject><body>

On 01/09/2012 04:33 PM, Nick Mathewson wrote:
&gt; On Thu, Jan 5, 2012 at 5:05 PM, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;&gt; Hi, all!
&gt;&gt;
&gt;&gt; Previously, I had set the deadline for merging small features into
&gt;&gt; 0.2.3.x as Jan 6.  Due to work that had piled up or suddenly appeared
&gt;&gt; in the new year, I wasn't able to get patches reviewed this week as
&gt;&gt; much as I wanted, so I'm going to push the small-feature merge window
&gt;&gt; back to Jan 13.
&gt;&gt;
&gt;&gt; This is the deadline for me to merge stuff, not for stuff to get
&gt;&gt; submitted: I probably will not consider any patches where the first
&gt;&gt; version is submitted after Monday, unless they are surprisingly tiny
&gt;&gt; and obviously correct.
&gt; 
&gt; I just did an initial triage over all Tor tickets that are in state
&gt; "needs_review" in the bugtracker.  If your ticket is not tagged with
&gt; "small-feature," or it is not in state "needs_review", then it is not
&gt; on my list of small features to review and merge (or not) by Friday.
&gt; If I missed something, please let me know!
&gt; 
&gt; This was not a triage over bug reports; only feature patches... so
&gt; don't worry if there's a pending bugfix (or pending bug) that I didn't
&gt; tag.  For my next round of triage, I'll take all remaining tickets
&gt; that look like a feature request to me, and remove them from the
&gt; 0.2.3.x milestone.
&gt; 


Hey Nick,

My old prop 179 branch has largely been merged but I realize now that
one key change hasn't - it's the two line change at the top of crypto.h
- basically it sets the TLS public key modulus to be 2048:

+/** Length of our TLS keys. */
+#define TLS_PK_BYTES 2048

And later:

+  if (crypto_pk_generate_key_with_bits(rsa,TLS_PK_BYTES)&lt;0)

I made this change and it worked fine - the major objection is that the
DH parameter isn't 2048 bits.

I rather think that we should make the 2048bit rsa key change and also
the DH change. I propose that I hack up
crypto_generate_dynamic_dh_modulus to use a 2048bit modulus. That way,
we'll have by default, a 2048bit key for TLS and a 1024bit DH right away
and if you flip the random DH option, you'll also get a 2048bit DH. And
in the future, I propose that we flip the random DH option by default.

Should I make such a branch and request it for review?

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120110020150</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-10 02:01:50-0400</timestampReceived><subject>Re: [tor-dev] Extending deadline for small features in 0.2.3.x by</subject><body>

On Mon, Jan 9, 2012 at 8:49 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;
&gt; Should I make such a branch and request it for review?

I don't think this is a good idea for 0.2.3.x without data.  Specifically:

   * What fraction of servers on the net right now use 2048-bit RSA
link keys and 2048-bit DH groups?  (Or 1024 bit RSA keys and 1536-bit
DH keys, etc)
   * How much would this slow down typical clients and servers?

From a security POV, increasing the link key modulus size of 2048 bits
doesn't seem to do anything useful.  If somebody wants to decrypt an
intercepted communication, the DH g^x value is what they need to
solve.  OTOH, if we want to stop somebody from *impersonating* a
server, then using a 2048-bit link key wouldn't do any good: factoring
the identity key would give equally good results.

So I think unless we can make identity keys larger, increasing link
key size doesn't help.  And without analysis, making the above changes
on this timeframe seems like a worrying idea.

So my thought is that we should target 0.2.4.x for this kind of thing,
and do it properly.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120110021329</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-01-10 02:13:29-0400</timestampReceived><subject>Re: [tor-dev] Extending deadline for small features in 0.2.3.x by</subject><body>

On 01/09/2012 06:01 PM, Nick Mathewson wrote:
&gt; On Mon, Jan 9, 2012 at 8:49 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;
&gt;&gt; Should I make such a branch and request it for review?
&gt; 
&gt; I don't think this is a good idea for 0.2.3.x without data.  Specifically:
&gt; 
&gt;    * What fraction of servers on the net right now use 2048-bit RSA
&gt; link keys and 2048-bit DH groups?  (Or 1024 bit RSA keys and 1536-bit
&gt; DH keys, etc)

All new EV certs must be 2048-bit RSA - generally speaking, they all use
1024-bit DH groups or a different default provided by the web server
software.

&gt;    * How much would this slow down typical clients and servers?
&gt; 

That's a good question - how shall we answer that?

&gt;&gt;From a security POV, increasing the link key modulus size of 2048 bits
&gt; doesn't seem to do anything useful.  If somebody wants to decrypt an
&gt; intercepted communication, the DH g^x value is what they need to
&gt; solve.  OTOH, if we want to stop somebody from *impersonating* a
&gt; server, then using a 2048-bit link key wouldn't do any good: factoring
&gt; the identity key would give equally good results.
&gt; 

I want to stop sniffers from having useful data. A 2048-bit link key
with a 2048-bit DH group seems like a fine idea and seems to be far
beyond the current reach of anything public - whereas 1024bit seems less
than perfect in short order...

&gt; So I think unless we can make identity keys larger, increasing link
&gt; key size doesn't help.  And without analysis, making the above changes
&gt; on this timeframe seems like a worrying idea.

I think that is only true for active attacks.

&gt; 
&gt; So my thought is that we should target 0.2.4.x for this kind of thing,
&gt; and do it properly.

Ok. I suppose the good news is that this is all server side. So we
really only need a few thousand servers to upgrade rather than millions
of clients, right?

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120103193239</emailId><senderName>Kevin Dyer</senderName><senderEmail>kpdyer@gmail.com</senderEmail><timestampReceived>2012-01-03 19:32:39-0400</timestampReceived><subject>Re: [tor-dev] Browser-based proxies for circumvention</subject><body>

&gt;&gt;&gt; A sample session goes like this:
&gt;&gt;&gt; 1. The user starts a connector and a Tor client. The connector sends its
&gt;&gt;&gt;    address to the facilitator, so that a proxy will know where to
&gt;&gt;&gt;    connect to. (We call this step "rendezvous.")
&gt;&gt;&gt; 2. A flash proxy appears in a browser and asks the facilitator for an
&gt;&gt;&gt;    address.
&gt;&gt;&gt; 3. The facilitator sends a remembered client address to the proxy.
&gt;&gt;&gt; 4. The proxy connects to the client address. The client's connector
&gt;&gt;&gt;    receives the connection.
&gt;&gt;&gt; 5. The proxy connects to a Tor relay, then begins copying data between
&gt;&gt;&gt;    its two sockets.
&gt;&gt;
&gt;&gt; Where is the list of all facilitators?
&gt;
&gt; There is only one (not that there couldn't be more), and its address is
&gt; hardcoded into the proxy badge.

I think I am confused about something: Why is it difficult for the
censor to enumerate, and then block, the facilitators?

-Kevin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120102105945</emailId><senderName>William Waites</senderName><senderEmail>wwaites@tardis.ed.ac.uk</senderEmail><timestampReceived>2012-01-02 10:59:45-0400</timestampReceived><subject>Re: [tor-dev] A modest proposal for a petname system in</subject><body>

[Attachment #2 (Multipart/Signed)]


On Fri, 16 Dec 2011 17:14:52 -0800, jacob at appelbaum.net (Jacob Appelbaum) said:

    ioerror&gt;  Beppe wishes to register "antani" to point to
    ioerror&gt; v2cbb2l4lsnpio4q.onion so he creates a a TCP service
    ioerror&gt; listening on his .onion will respond with the string "reg
    ioerror&gt; antani" when interrogated.

Ok, so far so good.

    ioerror&gt; 3.2 Tor2web implementation

    ioerror&gt;   Beppe creates a file called "onion.txt" containing the
    ioerror&gt; string "reg antani" and uploads it to the root of his web
    ioerror&gt; server. When User visits v2cbb2l4lsnpio4q.tor2web.org the
    ioerror&gt; t2w checks if his database contains a mapping with
    ioerror&gt; v2cbb2l4lsnpio4q.onion, if it does not, it requests the
    ioerror&gt; http://v2cbb2l4lsnpio4q.onion/onion.txt file.

This would appear to either introduce a single point of failure, the
tor2web service, or a race condition leading to differing mappings if
there is more than one such service.

What if instead, we used a similar mechanism as we already have for
the hidden services and do say hash("antani").nym and push that out to
the introduction hosts. The introduction hosts would check if they can
resolve it, if they can, the request is rejected, if they cannot then
they keep the mapping (careful implementation to avoid race conditions
here). Have an cache+expiry mechanism from there so the mapping isn't
trivially lost when the hidden host goes offline.

The requester just computes hash("antani").nym and goes to find that
hidden service in the normal way.

The only difference from the existing hidden service is that in this
case the secret behind the hash, "antani" is publicised.

An added benefit is that only the requestor and the operator of the
hidden service can know the nym a priori, the introduction servers
don't know what nyms they are providing introductions for.

Does this make any sense?

Cheers,
-w
--
	       William Waites &lt;wwaites@tardis.ed.ac.uk&gt;
 Visiting Researcher, Laboratory for Foundations of Computer Science
	    School of Informatics, University of Edinburgh

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120103195200</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-01-03 19:52:00-0400</timestampReceived><subject>Re: [tor-dev] A modest proposal for a petname system in</subject><body>

[Attachment #2 (multipart/signed)]


On 02/01/12 10:59, William Waites wrote:
&gt; What if instead, we used a similar mechanism as we already have for
&gt; the hidden services and do say hash("antani").nym and push that out to
&gt; the introduction hosts. The introduction hosts would check if they can
&gt; resolve it, if they can, the request is rejected, if they cannot then
&gt; they keep the mapping (careful implementation to avoid race conditions
&gt; here). Have an cache+expiry mechanism from there so the mapping isn't
&gt; trivially lost when the hidden host goes offline.

If I'm understanding you correctly...

Let's say Mallory discovers a scripting error and exploits it to
fork-bomb Alice's service. It has insufficient resources to keep the
hidden service online but still responds to pings and even manages to
serve an occasional static page on a non-hidden address, fooling Alice's
home-grown monitoring solution. Alice of course notices the problem when
she manually checks the service, but she attributes the failures to
something else, leaving Mallory free to keep trying. Eventually Alice
takes a vacation and Mallory is successful at keeping the service
offline for $expiry_time. At this point the nym can be hijacked as no
secret is needed to claim it.

Am I missing something?


Julian

--=20
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120102011355</emailId><senderName>曹文明</senderName><senderEmail>caowm2001@mailinator.com</senderEmail><timestampReceived>2012-01-02 01:13:55-0400</timestampReceived><subject>[tor-dev] unscribe</subject><body>

unscribe
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120102023358</emailId><senderName>Erik de Castro Lopo</senderName><senderEmail>mle+tools@mega-nerd.com</senderEmail><timestampReceived>2012-01-02 02:33:58-0400</timestampReceived><subject>[tor-dev] Bug 4810 : Patch in bug tracker</subject><body>

Hi all,

I opened a new bug agains TorButton here:

   https://trac.torproject.org/projects/tor/ticket/4810

and have attached a patch to fix the issue.

Cheers,
Erik
-- 
----------------------------------------------------------------------
Erik de Castro Lopo
http://www.mega-nerd.com/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120103154605</emailId><senderName>"Steve Snyder"</senderName><senderEmail>swsnyder@snydernet.net</senderEmail><timestampReceived>2012-01-03 15:46:05-0400</timestampReceived><subject>[tor-dev] OpenSSL v1.0.1-beta1 OK with Tor v0.2.2.35</subject><body>

FYI, OpenSSL v1.0.1-beta1 seems to work fine when building and running Tor v0.2.2.35 \
(Linux/i686).

Too early to say anything about performance (critical as the crypto is the \
performance bottleneck in Tor) but it definitely works as a drop-in replacement for \
OpenSSL v1.0.0e.

http://marc.info/?l=openssl-announce&amp;m=132338836402522&amp;w=2


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120103160109</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-03 16:01:09-0400</timestampReceived><subject>Re: [tor-dev] DuckDuckGo, iOS and other stuff.</subject><body>

On 01/02/2012 02:39 PM, caine tighe wrote:
&gt; there is serious value in ensuring Tor is an option for both Android
&gt; and iOS.  Currently we support Tor via Orbot on Android via the HTTP/S
&gt; proxy method since the SOCKS method is known to have DNS leaks.

I agree! As a side note, in Orweb v2, when you type a search in the
location bar, it utilizes the DDG hidden service.

The SOCKS method works fine if you support the right type of SOCKS.
There is inherently nothing wrong with Tor's SOCKS support, and it is
what we utilize for the Firefox Mobile ProxyMob add-on.

&gt; application Covert Browser that claims to properly leverage Tor;
&gt; however, since the source is closed, I remain unconvinced.  This

Regardless of the poor approach to transparency they have taken, it does
seem that Tor integrated into a browser or search app directly is the
only way to go on iOS at the moment. I don't quite understand what
happens when multiple apps with Tor embedded in them are running at
once, with the psuedo backgrounding/multitasking that iOS supports.

It is also true that it is best to keep Tor running and connected as
long as possible in order for it to be able to optimize circuits, update
directories, and so on. If you are constantly starting and stopping it
within one app, the performance may suffer.

&gt; application stands to be both an interface to DuckDuckGo for quick and
&gt; secure searching as well as a Tor enabled browser.

It would be fantastic to have you take this on, as an open-source option
is needed for iOS, and the Guardian Project isn't currently able to
expand to that platform.

best,
+n
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120103203025</emailId><senderName>William Waites</senderName><senderEmail>wwaites@tardis.ed.ac.uk</senderEmail><timestampReceived>2012-01-03 20:30:25-0400</timestampReceived><subject>Re: [tor-dev] A modest proposal for a petname system in</subject><body>

[Attachment #2 (Multipart/Signed)]


On Tue, 03 Jan 2012 19:52:00 +0000, Julian Yon &lt;julian@yon.org.uk&gt; said:

    jry&gt; Eventually Alice takes a vacation and Mallory is
    jry&gt; successful at keeping the service offline for $expiry_time. At
    jry&gt; this point the nym can be hijacked as no secret is needed to
    jry&gt; claim it.

Two things here.

Firstly, the advertisement of the nym with the introduction hosts
would be signed with the hidden service's key, the pair
(Hash("somenym"), Srv_PubKey) would be kept cached around the network
allowing it to be reclaimed should the hidden service move
around. Similarly, to flesh things out, a nym could be released or
transferred with a similarly signed message.

Secondly, on the expiry, that idea was copied as I understood it from
the original proposal, designed to mitigate nym squatting, and
allowing nyms to be eventually recycled. I'm not necessarily convinced
by it and haven't thought about this aspect very closely. A malicious
nym squatter could trivially maintain lots of mappings directly
anyways. And likewise a clever DOS designed to cause the registration
to expire would make nym hijacking possible, and this is true, I
think, wherever there is an expiry mechanism.

Cheers,
-w
--
	       William Waites &lt;wwaites@tardis.ed.ac.uk&gt;
 Visiting Researcher, Laboratory for Foundations of Computer Science
	    School of Informatics, University of Edinburgh

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120107111049</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-01-07 11:10:49-0400</timestampReceived><subject>Re: [tor-dev] Using a conf.d instead of a monolithic config file</subject><body>

Hi,

warms0x wrote (07 Jan 2012 06:35:10 GMT) :
&gt; Has there ever been plans or discussion about using a conf.d-style
&gt; directory to store configuration file fragments?

https://trac.torproject.org/projects/tor/ticket/1922

Regards,
--
  intrigeri &lt;intrigeri@boum.org&gt;
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
  | Did you exchange a walk on part in the war
  | for a lead role in the cage?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120108015754</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-01-08 01:57:54-0400</timestampReceived><subject>Re: [tor-dev] Browser-based proxies for circumvention</subject><body>

On Tue, Jan 03, 2012 at 11:32:39AM -0800, Kevin Dyer wrote:
&gt; &gt;&gt;&gt; A sample session goes like this:
&gt; &gt;&gt;&gt; 1. The user starts a connector and a Tor client. The connector sends its
&gt; &gt;&gt;&gt;    address to the facilitator, so that a proxy will know where to
&gt; &gt;&gt;&gt;    connect to. (We call this step "rendezvous.")
&gt; &gt;&gt;&gt; 2. A flash proxy appears in a browser and asks the facilitator for an
&gt; &gt;&gt;&gt;    address.
&gt; &gt;&gt;&gt; 3. The facilitator sends a remembered client address to the proxy.
&gt; &gt;&gt;&gt; 4. The proxy connects to the client address. The client's connector
&gt; &gt;&gt;&gt;    receives the connection.
&gt; &gt;&gt;&gt; 5. The proxy connects to a Tor relay, then begins copying data between
&gt; &gt;&gt;&gt;    its two sockets.
&gt; &gt;&gt;
&gt; &gt;&gt; Where is the list of all facilitators?
&gt; &gt;
&gt; &gt; There is only one (not that there couldn't be more), and its address is
&gt; &gt; hardcoded into the proxy badge.
&gt; 
&gt; I think I am confused about something: Why is it difficult for the
&gt; censor to enumerate, and then block, the facilitators?

That's a good question; it's definitely the most common source of
confusion. We assume that the facilitator is permanently blocked, and
that it is impossible to communicate with it, just as it is impossible
to communicate directly with known relays. Instead client registrations
must go over a special rendezvous channel. I've just uploaded our
research paper, in which we attempt to answer this and other questions:

https://crypto.stanford.edu/flashproxy/flashproxy.pdf

You should look specifically at Section VI, Rendezvous Protocols. I
also tried to address this in my earlier message, under Objections
("Doesn't this shift the problem...?").

https://lists.torproject.org/pipermail/tor-dev/2011-December/003135.html

With the above said, implementations of these rendezvous protocols don't
yet exist except as prototypes. But they are fairly independent from the
rest of the design.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120109234900</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-09 23:49:00-0400</timestampReceived><subject>[tor-dev] A way to block chinese active probe</subject><body>

Hi all,

here's a second chinese-probe discrimination behavior that should allow
to detect them, and block it.

http://pastebin.com/RNcNDYcw

Like the TCP SYN one, this blocking tricks is based on the fact that the
OS &amp; software they run on their server pool to make active-tor-probing
have to be highly optimized, as they need to manage a huge amount of
outbound connections.

Does anyone would like to re-test this behaviour (also for Windows/OSX)
and in case make a small  patch for tor.
Now i made testing with iptables &amp;&amp; -j TARPIT .

It would be nice to have in Tor a set of configurable Timeout?

As any active probe present and future could have some timing issue, not
being able to perfectly emulate the same conditions of a client, as
active probes run on servers (and server get optimized if need to do
high traffic).

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120111013323</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-11 01:33:23-0400</timestampReceived><subject>Re: [tor-dev] Extending deadline for small features in 0.2.3.x by</subject><body>

On Mon, Jan 9, 2012 at 9:13 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt; On 01/09/2012 06:01 PM, Nick Mathewson wrote:
&gt;&gt; On Mon, Jan 9, 2012 at 8:49 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wr=
ote:
&gt;&gt;&gt;
&gt;&gt;&gt; Should I make such a branch and request it for review?
&gt;&gt;
&gt;&gt; I don't think this is a good idea for 0.2.3.x without data. =A0Specifica=
lly:
&gt;&gt;
&gt;&gt; =A0 =A0* What fraction of servers on the net right now use 2048-bit RSA
&gt;&gt; link keys and 2048-bit DH groups? =A0(Or 1024 bit RSA keys and 1536-bit
&gt;&gt; DH keys, etc)
&gt;
&gt; All new EV certs must be 2048-bit RSA - generally speaking, they all use
&gt; 1024-bit DH groups or a different default provided by the web server
&gt; software.

Well, we can't forge EV certs, so we should probably instead be
looking at the fraction of 2048 non-EV certs out there.

Also, having longer RSA keys than DH groups is totally backwards for
our needs. We'd like the work factor for breaking forward-secrecy to
be pretty high, since it's relevant for longer, whereas the work
factor for impersonating a server is less important, since we can move
to longer keys later.

I wonder if EFF's SSL observatory has data here.

&gt;&gt; =A0 =A0* How much would this slow down typical clients and servers?
&gt;&gt;
&gt;
&gt; That's a good question - how shall we answer that?

Testing or calculation, I'd guess.

&gt;&gt;&gt;From a security POV, increasing the link key modulus size of 2048 bits
&gt;&gt; doesn't seem to do anything useful. =A0If somebody wants to decrypt an
&gt;&gt; intercepted communication, the DH g^x value is what they need to
&gt;&gt; solve. =A0OTOH, if we want to stop somebody from *impersonating* a
&gt;&gt; server, then using a 2048-bit link key wouldn't do any good: factoring
&gt;&gt; the identity key would give equally good results.
&gt;&gt;
&gt;
&gt; I want to stop sniffers from having useful data. A 2048-bit link key
&gt; with a 2048-bit DH group seems like a fine idea and seems to be far
&gt; beyond the current reach of anything public - whereas 1024bit seems less
&gt; than perfect in short order...

For beating passive observer, it's the DH group size that matters.

[...]
&gt;&gt; So my thought is that we should target 0.2.4.x for this kind of thing,
&gt;&gt; and do it properly.
&gt;
&gt; Ok. I suppose the good news is that this is all server side. So we
&gt; really only need a few thousand servers to upgrade rather than millions
&gt; of clients, right?

Sounds right. Though really, we should also be looking into similar
increases in key strength for our other crypto too, particularly our
circuit handshake.  My new-crypto-ops draft tried to make progress
here; I should try to revise it soon.

cheers,
-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120114151119</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-01-14 15:11:19-0400</timestampReceived><subject>Re: [tor-dev] Transitioning to new crypto (again, but with substance)</subject><body>

[Attachment #2 (multipart/alternative)]


On Jan 14, 2012 8:55 AM, "Ian Goldberg" &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt;
&gt; On Fri, Jan 13, 2012 at 08:18:06PM -0600, Watson Ladd wrote:
&gt; &gt; Dear all,
&gt; &gt; After thinking hard about the issues involved with new cryptography in
&gt; &gt; Tor I came to the following idea for a somewhat reasonable upgrade
&gt; &gt; path for OP's and OR's that preserves everyone's privacy and security
&gt; &gt; at all points (to the extent that this is possible: new connections
&gt; &gt; are by new clients). The only issue is what actually goes out on the
&gt; &gt; wire needs to be though through.
&gt; &gt;
&gt; &gt; First note that the connection between the identity used to ensure
&gt; &gt; EXTEND cells go over canonical connections and the keys actually
&gt; &gt; presented by two OR's that have formed a connection can be pretty much
&gt; &gt; arbitrary: it isn't necessary for the client to know what it is. So we
&gt; &gt; could have each OR have an identity key that stays 1024 bit RSA for
&gt; &gt; old ORs while newer ORs trust some snazzy new elliptic curve key,
&gt; &gt; while using the same 1024 bits to form the identity. Note that if we
&gt; &gt; use elliptic curves to secure the endpoints,(and don't mind
&gt; &gt; incompatibility with old clients) the RSA key doesn't even need to be
&gt; &gt; an RSA key.
&gt;
&gt; I'm not sure what you're saying in this last line.  Are you saying that
&gt; the crypto uses the snazzy EC key, and the 1024-bit identity key is now
&gt; just an arbitrary 1024-bit string?  That doesn't seem secure to me:
&gt; another OR can just publish that same string, along with its own snazzy
&gt; keys?
Good catch: the identities in this scheme must remained tied to the RSA
key, which I think has to be the case to support all clients. Changing that
will be a flag day.
&gt;
&gt;   - Ian
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;p&gt;&lt;br&gt;
On Jan 14, 2012 8:55 AM, "Ian Goldberg" &lt;&lt;a \
href="mailto:iang@cs.uwaterloo.ca"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; On Fri, Jan 13, 2012 at 08:18:06PM -0600, Watson Ladd wrote:&lt;br&gt;
&gt; &gt; Dear all,&lt;br&gt;
&gt; &gt; After thinking hard about the issues involved with new cryptography in&lt;br&gt;
&gt; &gt; Tor I came to the following idea for a somewhat reasonable upgrade&lt;br&gt;
&gt; &gt; path for OP's and OR's that preserves everyone's privacy and \
security&lt;br&gt; &gt; &gt; at all points (to the extent that this is possible: new \
connections&lt;br&gt; &gt; &gt; are by new clients). The only issue is what actually goes \
out on the&lt;br&gt; &gt; &gt; wire needs to be though through.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; First note that the connection between the identity used to ensure&lt;br&gt;
&gt; &gt; EXTEND cells go over canonical connections and the keys actually&lt;br&gt;
&gt; &gt; presented by two OR's that have formed a connection can be pretty \
much&lt;br&gt; &gt; &gt; arbitrary: it isn't necessary for the client to know what it \
is. So we&lt;br&gt; &gt; &gt; could have each OR have an identity key that stays 1024 bit \
RSA for&lt;br&gt; &gt; &gt; old ORs while newer ORs trust some snazzy new elliptic curve \
key,&lt;br&gt; &gt; &gt; while using the same 1024 bits to form the identity. Note that if \
we&lt;br&gt; &gt; &gt; use elliptic curves to secure the endpoints,(and don't mind&lt;br&gt;
&gt; &gt; incompatibility with old clients) the RSA key doesn't even need to \
be&lt;br&gt; &gt; &gt; an RSA key.&lt;br&gt;
&gt;&lt;br&gt;
&gt; I'm not sure what you're saying in this last line.   Are you saying \
that&lt;br&gt; &gt; the crypto uses the snazzy EC key, and the 1024-bit identity key is \
now&lt;br&gt; &gt; just an arbitrary 1024-bit string?   That doesn't seem secure to \
me:&lt;br&gt; &gt; another OR can just publish that same string, along with its own \
snazzy&lt;br&gt; &gt; keys?&lt;br&gt;
Good catch: the identities in this scheme must remained tied to the RSA key, which I \
think has to be the case to support all clients. Changing that will be a flag \
day.&lt;br&gt; &gt;&lt;br&gt;
&gt;    - Ian&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120116171249</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten.loesing@gmx.net</senderEmail><timestampReceived>2012-01-16 17:12:49-0400</timestampReceived><subject>Re: [tor-dev] Sanitizing IPv6 addresses in bridge descriptors</subject><body>

On 1/16/12 8:46 AM, Karsten Loesing wrote:
&gt; On 1/11/12 10:34 AM, Linus Nordberg wrote:
&gt;&gt; Alex Le Heux &lt;alexlh@funk.org&gt; wrote
&gt;&gt; Wed, 11 Jan 2012 09:57:00 +0100:
&gt;&gt;
&gt;&gt; | &gt; RFC 3849 defines the prefix 2001:DB8::/32 as being reserved for
&gt;&gt; | &gt; documentation.  That should be fine for this.
&gt;&gt; | 
&gt;&gt; | The documentation prefix is for just that, use in documentation :)
&gt;&gt; | 
&gt;&gt; | ULA (RFC4193) is actually closer to the 10/8 (RFC1918) addresses that you use for IPv4.
&gt;&gt;
&gt;&gt; Oh, right.  *blush*
&gt; 
&gt; So, just to get that right: how would we apply RFC4193 here?
&gt; 
&gt; - We start with FC00::/7 as the prefix for Local IPv6 unicast addresses.
&gt; 
&gt; - We set the 8th bit, the L bit, to 1, because we're generating the
&gt; subsequent Global ID locally.
&gt; 
&gt; - We generate a random 40-bit Global ID for "Tor sanitized bridge IPv6
&gt; addresses."  We don't change it, ever.
&gt; 
&gt; - We set the 16-bit Subnet ID to all zeros.
&gt; 
&gt; - We use the least significant 24 bits of the 64-bit Interface ID for
&gt; the actual sanitized bridge address that was formerly encoded in 10.x.x.x.
&gt; 
&gt; As an example, a sanitized IPv6 bridge address would be:
&gt; 
&gt;   [fc01:0123:4567:89ab::fedc:ba98:7654]

Err...  What I meant was something like this:

    [fd9f:2e19:3bcf::f8:2444]

&gt; Does that make sense?

The approach discussed above is now implemented:

  https://gitweb.torproject.org/metrics-db.git/commitdiff/70a3d998

Unless somebody shouts at me within the next 48 hours and tells me the
approach is stupid, I'm going to deploy it.

Best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116115338</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-16 11:53:38-0400</timestampReceived><subject>[tor-dev] Fwd: Re: [tor-talk] Bridge: Why not just stateless TCP socket proxy / forwarders?</subject><body>

Maybe this question is more appropriate for tor-dev mailing list?

How to submit a certain IP:Port to BridgeDB without using Tor?

-naif

-------- Original Message --------
Subject: Re: [tor-talk] Bridge: Why not just stateless TCP socket proxy
/ forwarders?
Date: Mon, 16 Jan 2012 09:29:41 +0100
From: Fabio Pietrosanti (naif) &lt;lists@infosecurity.ch&gt;
To: tor-talk@lists.torproject.org

On 1/15/12 11:54 PM, andrew@torproject.org wrote:
&gt; On Sun, Jan 15, 2012 at 04:58:56PM +0100, lists@infosecurity.ch wrote 0.3K bytes in 11 lines about:
&gt; : does Bridge really need to be Tor Servers?
&gt; : Why they can't be just be simpler TCP socket proxy?
&gt; 
&gt; We've been through this already. ;) No, a bridge is
&gt; just a way to reach the tor network from a tor client,
&gt; it can be any proxy or tcp forwarder. I refer you to
&gt; https://blog.torproject.org/blog/strategies-getting-more-bridge-addresses
&gt; again. Specifically, approach four and five.

So, if a third party would like independently to:
- develop a TCP forwarder (very simple  code)
- submit to the BridgeDB
- decide to which host to connect back

which would be the step do be done from technical standpoint of view?

Because that way it would be possible for a lot of third party to
develop very lightweight "Tor TCP Proxy" that doesn't have inside other
than the basic logic to do the TCP Proxy.

Is the availability for third party software/script for that goals
considered?

Tnx!

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120115173449</emailId><senderName>Aaron</senderName><senderEmail>aagbsn@extc.org</senderEmail><timestampReceived>2012-01-15 17:34:49-0400</timestampReceived><subject>[tor-dev] Extending BridgeDB to reallocate bridges from a blocked country to others that do not bloc</subject><body>

The following is a draft proposal of changes to BridgeDB to address
the deliverable
"Automated bridge allocation to reallocate bridges from a blocked
country to others that do not block"
(https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorE/PhaseThree)

This draft proposes two different approaches -- any feedback or
questions are very welcome!

--Aaron

====
Filename: xxx-bridgedb-reallocates-bridges.txt
Title: BridgeDB Reallocates Bridges
Author: Aaron Gibson
Created: 15 Jan 2015
Status: Draft

Introduction:

 This proposal outlines the required changes for BridgeDB to reallocate bridges
 from a blocked country to others that do not block.

Current Status:

  Presently, BridgeDB does not allocate bridges to specific countries. The
  HTTPS distributor divides bridges into a cluster of rings. Requests for
  bridges are mapped to a single ring in the cluster using the class C network
  of the client, so that the IPv4 space is divided amongst the rings in the
  cluster (presently 4 rings). For an attacker to obtain the complete set of
  bridges she must control a number of IP addresses in diverse networks. The
  email based distributor uses a single ring, and bridge buckets are dumped
  from a single pool of unallocated bridges.

Required modifications:

  1. BridgeDB must be able to produce an unblocked set of bridges for a
     specific country, if these bridges are available.

  2. If a bridge is blocked in a country, it must be available to users in
     other countries.

  BridgeDB could be modified to assign bridges to geographic regions. To do so,
  the cluster concept must be extended to support 'geographic clusters' of
  bridges that correspond to a set of country codes, so that requests will be
  directed to a corresponding cluster, by either automatic geoip detection or
  by client choice.

  Alternately, BridgeDB could be modified to guarantee that a client requesting
  unblocked bridges for a region would receive these bridges, if unblocked
  bridges exist. Presently, patches exist for BridgeDB that mark known blocked
  bridges as "Might be blocked", but makes no further effort to respond with
  unblocked bridges, even if those bridges exist.

Proposed Solution 1

  Modify BridgeDB to assign bridges to geographic regions. Regions are
  designated by a list of country codes.  Regions should be balanced in size,
  or proportional to the number of bridge users. If a bridge is blocked in a
  region, the bridge should be reallocated to another region. Bridges for a
  region are stored in a cluster of rings.

Pitfalls

  Bridges assigned to one geographic area are not available to clients
  requesting bridges from other regions.

Possible Solution 2

  Modify BridgeDB to dynamically produce rings of bridges 'Not blocked in' a
  specified country. Bridges are not mapped to a specific country or region,
  but BridgeDB's response would contain only unblocked bridges (if available).

Pitfalls

  As bridges are not allocated to a specific region, bridges could not be
  reserved for distribution to specific regions.

Common pitfalls

  As BridgeDB learns about blocked bridges that it may no longer provide,
  BridgeDB replaces blocked bridges with good bridges. An attacker with control
  over addresses from many class C networks could iteratively request and block
  bridges, until the entire set has been consumed. The rate of consumption
  could be limited by the rate that blocked bridges are updated, but clients
  would be more likely to receive a bridge that has been blocked.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120116204548</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-01-16 20:45:48-0400</timestampReceived><subject>Re: [tor-dev] New paper by Goldberg, Stebila, and Ustaoglu with proposed circuit handshake</subject><body>

On Mon, Jan 16, 2012 at 02:41:11PM -0600, Watson Ladd wrote:
&gt; &gt; As far as I know, only the journal reviewers and this list (and we
&gt; &gt; authors, of course) have looked at it.  Not too surprising, of course,
&gt; &gt; as Tor is probably the most obvious use case.
&gt; Most SSL connections involve only one authenticated side.

Indeed, we talk about TLS in section 5.5 of the paper.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117030048</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-01-17 03:00:48-0400</timestampReceived><subject>Re: [tor-dev] Size issues with Orbot statically linking OpenSSL</subject><body>

On 01/15/2012 03:47 PM, Nick Mathewson wrote:
&gt; Some stuff to try: openssl has lots of optional features and ciphers;
&gt; you could probably disable a lot of them.  There are configuration
&gt; options to do so.  If you're not sure what,  I could try to take a look
&gt; at the list some time this week.

That would be very helpful, or at least, if you can point me to a spec
that indicates which features of OpenSSL that Tor relies upon I can
start there.

&gt; linker to dump the unused ones. I believe it's called "gc-segments" or
&gt; something. I have no idea if it would work with openssl, but it could be
&gt; worth investigating. I believe there's a ticket for tor to use it by

Yes, will check into this. It seems like Android NDK may do this itself,
so this might accelerate our transition to using its arm cross-compiler.

+n8fr8
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120121190958</emailId><senderName>"K. Macy"</senderName><senderEmail>kmacy@freebsd.org</senderEmail><timestampReceived>2012-01-21 19:09:58-0400</timestampReceived><subject>[tor-dev] Fwd: Tor Transports</subject><body>

I felt it premature to publicly discuss using my user level network
stack as the basis for a tor transport given the number of potential
candidates and the issues that I raise below. However, Sebastian felt
strongly that it belongs on tor-dev.

Cheers

---------- Forwarded message ----------
From: K. Macy &lt;kmacy@freebsd.org&gt;
Date: Sat, Jan 21, 2012 at 3:05 PM
Subject: Re: Tor Transports


On Fri, Jan 20, 2012 at 11:35 PM, Steven Murdoch
&lt;Steven.Murdoch@cl.cam.ac.uk&gt; wrote:
&gt; Hi All,
&gt;
&gt; One hop-by-hop transport protocol we will likely be considering for an al=
ternative Tor transport is TCP, and Kip Macy (a FreeBSD developer, Cc'd) ha=
s been working on porting the FreeBSD network stack to userspace, with the =
Tor use-case in mind. Unlike many other attempts though, maintainability ha=
s been a primary concern, so we should be able to keep in sync with the Fre=
eBSD stack with manageable effort.
&gt;
&gt; Another advantage of this approach is that we will get IPSec for free, wh=
ich could be very useful if we decide DTLS is not the way to go.
&gt;
&gt; The FreeBSD network stack is extremely well tested, so we are in a good p=
osition from that respect. One downside is that the code size might be larg=
e (unless we can find a way to do some clever link-time optimization away o=
f dead code).
&gt;
&gt; His code is here: http://gitorious.org/~kmm/freebsd/kmm-sandbox/commits/w=
ork/svn_trunk_libplebnet

It obviously also supports SCTP to whatever extent that FreeBSD does.
The author of the RFCs and of the reference SCTP stack on all
operating systems except Linux is a FreeBSD committer. Another reason
why I chose to take this approach is you get all of the kernel
firewall bits "for free." =A0Thus one could envision supporting
transparent proxying in the application itself to allow for
transparent Tor usage in an OS independent manner.


I have a few additional comments to add to set expectations appropriately.

1) =A0I have a prototype "safe" BPF API whereby an unprivileged
application can only receive and send packets on a single or
pre-specified set of IP addresses and only advertise its private
stack's MAC address. Without this functionality one needs to either
layer the stack on top of kernel UDP (perfectly reasonable approach,
just requires writing another simple virtual NIC driver) or running as
root, whereby plebeian networking becomes a misnomer - a patrician
poseur as it were. Having even such a simple kernel module goes
against the grain of Tor conventions of not doing anything as root
(although configuring things like transparent proxying require a
certain amount of futzing as root).

2) The libc shim is written with the idea that it overrides the
relevant libc symbols by means of LD_PRELOAD. The library
differentiates between "kernel descriptors" for files, unix sockets,
or anything outside the scope of the network stack and "user
descriptors". For example, when a kernel descriptor is passed to
write() libplebnet will call _write() with the arguments and the call
should functional as it normally does.

3) At this instant libplebnet does not support localhost communication
over TCP/UDP. I believe that the most efficient way of supporting this
would be by means of directing those packets to a tap device.

3) Without a (most likely) substantial amount of work to share user
level network state across address spaces, the apache style
(pre-)forked process with shared accept socket does not work. I have
not given it any thought as I don't see a use case for it.

4) Stack configuration was, to my surprise at least, the biggest
hurdle. The UNIX APIs for configuring network stack state are anything
but user friendly. To enable continued use of the standard tools
(ifconfig, route, arp, etc) I wrote a separate library called
libplebconf which one would LD_PRELOAD with the pid of the the process
to be configured set as an environment variable. At startup libplebnet
creates a thread which listens on a unix socket at "/tmp/&lt;pid&gt;" and
accepts as messages serialized system calls to the various
configuration calls that the aforementioned programs use. To simplify
things a bit I've added an additional environment variable with the
path to an rc.conf which gets executed at startup to configure the
process using libplebnet's ip and route.

Most of this will be moot in the event that you choose to cut out
layer 3 and interface directly between your L4 of choice and DTLS. I
haven't given any thought to how to eliminate this complexity in the
event that you choose to use FreeBSD's IPSEC.

To avoid boring most readers I have kept the discussion rather
superficial. Nonetheless, I hope that this missive clarifies matters
more than it confuses them.

Cheers,
Kip
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130063825</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 06:38:25-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Tor Transports</subject><body>

On Sat, Jan 21, 2012 at 08:09:58PM +0100, K. Macy wrote:
&gt; I felt it premature to publicly discuss using my user level network
&gt; stack as the basis for a tor transport given the number of potential
&gt; candidates and the issues that I raise below. However, Sebastian felt
&gt; strongly that it belongs on tor-dev.

Hi Kip,

Thanks for keeping us informed. I look forward to seeing which transport
Steven picks first for prototyping and testing, and seeing how it goes.
Getting ipsec for 'free' is a big deal, since our other options for
link encryption at the datagram packet level are dtls and "oh come on,
how hard could that be, let's roll our own." In any case, more options
is always good.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130072323</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-01-30 07:23:23-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Tor Transports</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake K. Macy (kmacy@freebsd.org):

&gt; On Fri, Jan 20, 2012 at 11:35 PM, Steven Murdoch wrote:
&gt; &gt; 
&gt; &gt; One hop-by-hop transport protocol we will likely be considering for an \
&gt; &gt; alternative Tor transport is TCP, and Kip Macy (a FreeBSD developer, Cc'd) has \
&gt; &gt; been working on porting the FreeBSD network stack to userspace, with the Tor \
&gt; &gt; use-case in mind. Unlike many other attempts though, maintainability has been a \
&gt; &gt; primary concern, so we should be able to keep in sync with the FreeBSD stack with \
&gt; &gt; manageable effort.

&gt; I have a few additional comments to add to set expectations appropriately.
&gt; 
&gt; 1)  I have a prototype "safe" BPF API whereby an unprivileged
&gt; application can only receive and send packets on a single or
&gt; pre-specified set of IP addresses and only advertise its private
&gt; stack's MAC address. Without this functionality one needs to either
&gt; layer the stack on top of kernel UDP (perfectly reasonable approach,
&gt; just requires writing another simple virtual NIC driver) or running as
&gt; root, whereby plebeian networking becomes a misnomer - a patrician
&gt; poseur as it were. Having even such a simple kernel module goes
&gt; against the grain of Tor conventions of not doing anything as root
&gt; (although configuring things like transparent proxying require a
&gt; certain amount of futzing as root).

Can you explain the privilege separation of the safe BPF api? What
handles ultimately wrapping up packets for your virtual interfaces on
the other side of the BPF API? Does it run as root as a daemon to manage
your virtual interface, providing the BPF API to unprivileged apps
through the LD_PRELOAD wrappers, or .. ?

Also, how portable is the code that provides this virtual interface
support?


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120131212151</emailId><senderName>Esteban_Manchado_Velázquez</senderName><senderEmail>emanchado@demiurgo.org</senderEmail><timestampReceived>2012-01-31 21:21:51-0400</timestampReceived><subject>[tor-dev] Improving the tests</subject><body>

Hey guys,

I wanted to try and help a bit, but I'm not exactly a C wizard or know  
much about networking code. However, I am an experienced developer, do  
understand C and have quite a bit of experience with automated testing.

Luckily, according to  
https://www.torproject.org/getinvolved/volunteer.html.en#unitTesting, it  
seems you guys could use someone spending some time with the tests :-) I'm  
sure it's going to take me a while to get my head around the code and the  
tests, but I can give it a shot and see what happens. How do I get  
started? Any suggestions?

-- 
Esteban
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120117150901</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-17 15:09:01-0400</timestampReceived><subject>Re: [tor-dev] Filtering of DA and bootstrap</subject><body>

On Tue, Jan 17, 2012 at 3:15 AM, Fabio Pietrosanti (naif)
&lt;lists@infosecurity.ch&gt; wrote:
&gt; Hi all,
&gt;
&gt; in a network where the Directory Authority hard-coded in Tor code are
&gt; filtered a Tor client cannot bootstrap.
&gt;
&gt; But as far as i understood there are (hundreds?) of Tor DA Mirror.
&gt;
&gt; If so, packaging the Tor clients periodically, bundling the latest
&gt; consensus with the software, would provide higher chance for a client to
&gt; bootstrap, finding an unfiltered Tor DA Mirror.

Yup.  (In our design documents and specifications, they're called
"directory caches.")

Please see proposal 146 for an initial design here back from 2008, and
the discussions on #572 for a list of obstacles we ran into the last
time we tried to implement it.  Still seems worth doing to me, but
there are some remaining issues to solve there. Designs welcome. Code
also welcome.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120120233728</emailId><senderName>Tomás_Touceda</senderName><senderEmail>chiiph@torproject.org</senderEmail><timestampReceived>2012-01-20 23:37:28-0400</timestampReceived><subject>Re: [tor-dev] Port of python Tor controller library to C++</subject><body>

[Attachment #2 (multipart/signed)]


On 1/20/12 2:45 PM, Giang Nguyen wrote:
&gt;&gt; I'm not sure if you want to work with Qt, but may be you should take a
&gt;&gt; look at Vidalia's torcontrol classes:
&gt;&gt; https://gitweb.torproject.org/vidalia.git/tree/HEAD:/src/torcontrol
&gt; 
&gt; Thanks, Tomas, for the suggestion.
&gt; I actually tried to use Vidalia's Tor control code back in late 2010
&gt; when I looked for a C/C++ controller, but I chose not to use it for
&gt; several reasons: it lacked (and I think still does) the path
&gt; selection, Qt is a huge dependency, and I wasn't yet familiar with Qt
&gt; dev.
&gt; I was sidetracked for a while -- learning Qt dev in the process -- so
&gt; now Vidalia's looks pretty attractive. Since I was almost done with my
&gt; port, however, I might as well try to finish it and release it.

Yes, Qt is a big dep, but we use it for everything (and I prefer it
instead of boost, but that's just me).

Good luck with the port, if you ever want to work on Vidalia's classes
join us in #vidalia or #tor-dev at OFTC or just drop a ticket or two in
trac.torproject.org.

Patches are always welcome :)
-- 
Tomás Touceda


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120123020630</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2012-01-23 02:06:30-0400</timestampReceived><subject>Re: [tor-dev] Using Tor w/o GeoIP</subject><body>


On Jan 23, 2012, at 2:38 AM, Nathan Freitas wrote:
&gt; It is legal on Android, but I have always been concerned about that sort
&gt; of secondary download from a Tor perspective, in that you would want to
&gt; make sure it was downloaded through the Tor network itself, right?
&gt; 
&gt; Maybe I can just create an Orbot-lite version that does not include
&gt; privoxy and geoip, etc.

I think that is kind of what I meant, tell users they need this other
app from the market as well to use geoip features. Users could install
it via the market or separately, in the same way they installed orbot
in the first place.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120126163934</emailId><senderName>Steven Murdoch</senderName><senderEmail>steven.murdoch@cl.cam.ac.uk</senderEmail><timestampReceived>2012-01-26 16:39:34-0400</timestampReceived><subject>Re: [tor-dev] Simulating a slow connection</subject><body>

Hi Adam,

On 20 Jan 2012, at 10:55, Adam Katz wrote:

&gt; Well, I myself didn't have anything specific in mind but i have some
&gt; experience with the linux tc utility as well as with generating
&gt; realistic background traffic. I was wondering whether I could help on
&gt; any of the existing projects or help establish a new one.

I think Nick's comments summarized the current state of thinking. ExperimenTor and \
Shadow are the best Tor simulators to use for this project. The big missing pieces \
                are:
- an automated framework for setting up experiments with slow Internet connections \
                with ExperimenTor and Shadow, then collecting and summarizing results
- Tools for generating realistic link characteristics (delay and packet dropping), \
and for collecting data on the link properties found in particular locations

Steven.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120126180732</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-01-26 18:07:32-0400</timestampReceived><subject>Re: [tor-dev] Windows Alternative of torsocks/tsocks ?</subject><body>

On 1/22/12 10:11 PM, Catalin Patulea wrote:
&gt; [resending after subscribing to list]
&gt; 
&gt; Hi Fabio,
&gt; 
&gt;&gt; On 1/22/12 11:28 AM, Roger Dingledine wrote:
&gt;&gt;&gt; See also TorCap2: http://www.virtualventures.ca/~cat/
&gt;&gt;&gt; but I've never succeeded at getting a license statement out of the author.
&gt; Roger, I'm sorry if I seemed uncooperative when you asked about the
&gt; licensing terms of TorCap2. I can see a reference to a discussion with
&gt; you back in 2006, but I no longer have copies of the actual
&gt; correspondence, so I don't recall what happened.
&gt; 
&gt;&gt; Can you confirm whether the TorCap2 is licensed under BSD, GPL or other
&gt;&gt; opensource license?
&gt; I have released TorCap2 under the LGPL 3.0 (I have updated the readme
&gt; and included a license.txt in the zip files). You can use TorCap2
&gt; as-is in an application of any license. Any modifications to TorCap2
&gt; must be published under the LGPL.

Cool, do you have your own github account where to drop-it off?

Otherwise we can import on github and try to engage interested
developers in making some modifications?

&gt; Porting existing Python code would be a matter of search-replacing
&gt; 'socket' with 'torsocket' (or even just 'import torsocket as socket').
&gt; Of course, with this design you would leak network traffic if you
&gt; spawned a separate process, or if you used a Python native library
&gt; that directly accesses the OS's socket API. But maybe it's good to
&gt; start with supporting Python-only applications initially, given the
&gt; complexity of Win32 API hooking..

That's true, even if the main issue may arise when you start using
several framework and/or libraries that use their lookup system.

As a couple of additional point:
- if you make a mistake, due to a programming error, there's the risk
that something get out un-torrified.
- if someone is able to break into your web-application force it to run
custom python code it would be able to get out un-torrified

The only way to prevent last point is to apply firewall rules, that are
still something to be done at low level and may have a lot of different
conditions.

So the basic idea is to have a sort of "supervisor" that wrap Python
directly, so that all the "Operating Environment" is Tor-Safe and
there's no way to exit from it, even in case of compromise.

That way the Python code would be untouched and it would be possible to use:
- torsocks on OSX/Linux
- TorCap2 on Windows

only doing "system integration" of the tool, that's cheaper than coding
modifications and maintaining different customized python lib.

Thanks again for your code, it's precious!

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120127013808</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-01-27 01:38:08-0400</timestampReceived><subject>[tor-dev] Pre-draft of Proposal XXX: Extended ORPort and TransportControlPort</subject><body>

After discussion in tickets #4773 and #3587 this is a pre-draft of a
proposal that revamps the Extended ORport, introduced in proposal 180,
and specifies the new TransportControlPort.

Comments are marked with '#', and there is also:
https://trac.torproject.org/projects/tor/ticket/4773#comment:5

Note that this proposal is not ready for prime time. It needs more
thought and lots of editing to become functional and implementable.
 
Inlining:

Filename: X
Title: Extended ORPort and TransportControlPort
Author: X
Created: X
Status: worse-than-draft-still-probably-more-thoughtful-than-sopa

1. Overview

  Proposal 180 defined Tor pluggable transports, a way to decouple
  protocol-level obfuscation from the core Tor protocol in order to
  better resist client-bridge censorship. This is achieved by
  introducing pluggable transport proxies, programs that obfuscate Tor
  traffic to resist DPI detection.

  Proposal 180 defined a way for pluggable transport proxies to
  communicate with local tor clients and bridges, so as to exchange
  traffic. This document extends this communication protocol, so that
  pluggable transport proxies can exchange arbitrary operational
  information and metadata with tor clients and bridges.

2. Motivation

   The communication protocol specified in Proposal 180 gives a way
   for transport proxies to announce the IP address of their clients
   to tor. Still, modern pluggable transports might have more (?)
   needs than this. For example:

   1. Tor might want to inform pluggable transport proxies on how to
      rate-limit incoming or outgoing connections.

   2. Server pluggable transport proxies might want to pass client
      information to an anti-active-probing system controlled by tor.

   3. Tor might want to temporarily stop a transport proxy from
      obfuscating traffic.

   To satisfy the above use cases, there must be real-time
   communication between the tor process and the pluggable transport
   proxy. To achieve this, this proposal refactors the extended ORPort
   protocol specified in Proposal 180, and introduces a new port,
   TransportControlPort, whose sole role is the exchange of control
   information between transport proxies and tor.

3. The new extended ORPort protocol

  Server transport proxies may need to connect to the bridge and pass
  additional information about client connections that the bridge
  would ordinarily receive from the kernel's TCP stack.  To do this,
  they connect to the "extended server port" as given in
  EXTENDED_SERVER_PORT, send a short amount of information, wait for a
  response, and then send the user traffic on that port.

  The extended server port protocol is as follows:

     COMMAND [2 bytes, big-endian]
     BODYLEN [2 bytes, big-endian]
     BODY [BODYLEN bytes]

     Commands sent from the transport proxy to the bridge are:

     [0x0000] DONE: There is no more information to give. (body ignored)

     [0x0001] USERADDR: an address:port string that represents the user's
       address.

     [0x0002] WANT_CONTROL: A body-less message which indicates that
       the transport proxy wants to use the TransportControlPort of
       the bridge.  It SHOULD be followed by a CONTROL command from
       the bridge, otherwise the transport may close the connection.

# will this work?

     Replies sent from tor to the proxy are:

     [0x1000] OKAY: Send the user's traffic. (body ignored)

     [0x1001] DENY: Tor would prefer not to get more traffic from
       this address for a while. (body ignored)

     [0x1002] CONTROL: a NUL-terminated "identifier" string, followed
       by a second NUL-terminated string of the &lt;address&gt;:&lt;port&gt; of
       the TransportControlPort. The pluggable transport proxy must
       use the "identifier" to access the TransportControlPort.

# pass TransportControlPort &lt;address&gt;:&lt;port&gt; through env. vars?

# what should parties do when they receive a command they don't
# understand?  should we enforce forward-compatibility with protocol
# versioning or with "ignore commands you don't understand", or what?

  [We could also use an out-of-band signalling method to tell Tor
  about client addresses, but that's a historically error-prone way
  to go about annotating connections.]

The new TransportControlPort protocol

  The TransportControlPort protocol is as follows:

     COMMAND [2 bytes, big-endian]
     BODYLEN [2 bytes, big-endian]
     BODY [BODYLEN bytes]

     Association commands sent from the transport proxy to the bridge
     are:

     [0x0000] ASSOCIATE: a NUL-terminated "identifier" string. See
      'Association' section below.

     Association commands sent from the bridge to the transport proxy
     are:

     [0x1000] ASSOCIATED: Sent upon receiving a legit ASSOCIATE
       command from a transport proxy. (body ignored)

     [0x1001] NOT_ASSOCIATED: Sent after the bridge receives a
       non-legit ASSOCIATE command from a transport proxy. Also sent
       when the bridge receives a non-ASSOCIATE command from a
       non-associated transport proxy. Upon sending this command, the
       bridge SHOULD close the connection. (body ignored)

     Configuration commands sent from the transport proxy to the
     bridge:

     [0x0001] RATE_LIMITED: Message confirming that the rate limiting
       request of the bridge was carried out successfully (body
       ignored). See the 'Rate Limiting' section below.

     [0x0001] NOT_RATE_LIMITED: Message notifying that the transport
       proxy failed to carry out the rate limiting request of the
       bridge (body ignored). See the 'Rate Limiting' section below.

     Configuration commands sent from the bridge to the transport
     proxy are:

     [0x1002] RATE_LIMIT: Carries information on how the pluggable
       transport proxy should rate-limit its traffic. See the 'Rate
       Limiting' section below.

# what should parties do when they receive a command they don't understand?

3.1. Association and identifier creation

For Tor and a transport proxy to communicate using the
TransportControlPort, an identifier must have already been negotiated
using the 'CONTROL' command of Extended ORPort.

The TransportControlPort identifier should not be predictable by a
user who hasn't received a 'CONTROL' command from the Extended
ORPort. For this reason, the TransportControlPort identifier should
not be cryptographically-weak or deterministically created.

Tor should create its identifiers by generating 16 bytes of random
data and hashing them with the SHA256 cryptographic hash function.
The identifier string transmitted with the 'CONTROL' command should be
the hex representation of the SHA256 output.

4. Configuration commands

4.1. Rate Limiting

A tor relay should be able to inform a transport proxy in real-time
about its rate-limiting needs.

This can be achieved by using the TransportControlPort and sending a
'RATE_LIMIT' command to the transport proxy.

The body of the 'RATE_LIMIT' command should carry two integers, in
NUL-terminated ASCII string format, representing the bandwidth rate
and bandwidth burst in 'bytes per second', that the transport proxy
must set.

# better transmit format? After reading langsec.org, I prefer to avoid
# length fields. Not that this format is bug-proof...

When the transport proxy sets the appropriate rate limiting, it should
send back a 'RATE_LIMITED' command. If it fails while setting up rate
limiting, it should send back a 'NOT_RATE_LIMITED' command.

After sending a 'RATE_LIMIT' command. the tor bridge might want to
stop pushing data to the transport proxy, till it receives a
'RATE_LIMITED' command. If, instead, it receives a 'NOT_RATE_LIMITED'
command it might want to shutdown its connections to the transport
proxy.

# is this realistic?

5. Security Considerations

Extended ORPort or TransportControlPort do _not_ provide link
confidentiality, authentication or integrity. Sensitive data, like
cryptographic material, should not be transferred through them.

Note that an attacker with superuser access, is able to sniff network
traffic, and capture TransportControlPort identifiers and any data
passed through those ports.

# Is it worth adding an SSL layer (passing pub. key fpr via
# env. vars?)? :/

# Talk about Incentives of tor or transport proxies to comply to the
# wishes of each other. Ways to detect nonconformism. (threat
# model. Should tor speak with 3v1l transport proxies in the first
# place?)

6. Future

In the future, we might have pluggable transports which require the
_client_ transport proxy to use the TransportControlPort and exchange
control information with the tor client. The current proposal doesn't
yet support this, but we should not add functionality that will
prevent it from being possible.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120127134907</emailId><senderName>anonym</senderName><senderEmail>anonym@lavabit.com</senderEmail><timestampReceived>2012-01-27 13:49:07-0400</timestampReceived><subject>Re: [tor-dev] Help Tails with tc? [was: Re: Simulating a slow	connection]</subject><body>

[Attachment #2 (multipart/signed)]


01/27/2012 02:18 PM, anonym:
&gt; I'm taking this off-list since it isn't strictly Tor-related.

Woops, seems like I forgot about this. Ah well, I hope no one minds if
we're taking this on-list. However, it might be more suitable for you to
respond to the Tails development mailing list though:

  https://mailman.boum.org/listinfo/tails-dev

Cheers!


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20120127185054</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-01-27 18:50:54-0400</timestampReceived><subject>Re: [tor-dev] Proposal 190: Password-based Bridge Client Authorization</subject><body>

Robert Ransom &lt;rransom.8774@gmail.com&gt; writes:

&gt; On 2012-01-17, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt; On Sun, Nov 6, 2011 at 9:12 PM, George Kadianakis &lt;desnacked@gmail.com&gt;
&gt;&gt; wrote:
&gt;
&gt; &lt;snip&gt;
&gt;
&gt;&gt; Marking this proposal needs-revision.  Not sure what the actual
&gt;&gt; solution is though. One option might be to look for a way to signal
&gt;&gt; (undetectably) to the client that the server knows what it's doing as
&gt;&gt; part of the TLS handshake. For example, by building the
&gt;&gt; ServerHello.random structure such that instead of having 28 random
&gt;&gt; bytes and 4 bytes of time, it has 16 random bytes, 4 bytes of time,
&gt;&gt; and 12 bytes based on a HMAC of (the 16 random bytes, the 4 time
&gt;&gt; bytes, the ClientHello.Random, and the certificate that it will send).
&gt;&gt;  Yuck!  But it might work.  It would need analysis, I guess.
&gt;
&gt; With that hack on top of the v3 protocol, any client able to detect
&gt; that a bridge is not being MITMed can impersonate the bridge through
&gt; the TLS handshake, until after the (honest, victim) client speaks the
&gt; Tor protocol at the fake bridge.
&gt;
&gt;
&gt; The solution is:
&gt;
&gt; * Add a v4 link protocol in which the bridge/relay publishes a list of
&gt; fingerprints and cert-chain positions of link certificates in its
&gt; descriptor, and the client verifies that the TLS server it's
&gt; connecting to presents a cert chain such that one certificate's
&gt; fingerprint and position in the cert chain matches one of the
&gt; fingerprint/position pairs in the server descriptor.
&gt;
&gt; * Add a v4link=(FINGERPRINT,POSITION,IS-POSITION-RELATIVE-TO-ROOT-OR-LEAF),...
&gt; item to the Bridge line parser.
&gt;
&gt; * ...
&gt;
&gt; * Now TLS takes care of MITM detection for us, because we're using it
&gt; correctly for the first time since the v1 handshake.  Profit.
&gt;
&gt; * Add EXTEND2 cells so relay-to-relay connections can use v4 links.
&gt;

AFAICT this is the concept of proposal 191, but using certificate
chains instead of single certificates. Before extending proposal 191
to use certificate chains, we should look at whether HTTPS servers
with certificate chains whose roots are _not_ signed by a real CA are
commonplace in the Internet (not many volunteers will be able to set
up bridges with CA-authenticated certificate chains.).

We should also consider whether authenticating certificate chains
provides more security than authenticating single certificates.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130081505</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 08:15:05-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re: [tor-talk] Bridge: Why not just stateless TCP socket proxy / forwarders?</subject><body>

On Mon, Jan 16, 2012 at 12:53:38PM +0100, Fabio Pietrosanti (naif) wrote:
&gt; So, if a third party would like independently to:
&gt; - develop a TCP forwarder (very simple  code)
&gt; - submit to the BridgeDB
&gt; - decide to which host to connect back
&gt; 
&gt; which would be the step do be done from technical standpoint of view?
&gt; 
&gt; Because that way it would be possible for a lot of third party to
&gt; develop very lightweight "Tor TCP Proxy" that doesn't have inside other
&gt; than the basic logic to do the TCP Proxy.
&gt; 
&gt; Is the availability for third party software/script for that goals
&gt; considered?

I know some research groups who are working on various parts of this
problem. But one piece that I believe nobody is working on right now
is a mechanism for having bridgedb hear about other addresses that it
should give out as bridges.

Right now bridgedb only learns about bridges via the networkstatus and
bridge descriptor files it imports from the bridge directory authority;
and it also assumes that whenever it learns about a bridge it also
learns the identity fingerprint for the bridge (so it can decide what
distribution strategy bucket to put it in).

If somebody wants to grab this problem and brainstorm a todo list,
maybe with the help of Aaron and Karsten (the last sighted bridgedb
maintainers :), that'd be grand.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130091400</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-01-30 09:14:00-0400</timestampReceived><subject>Re: [tor-dev] Extending BridgeDB to reallocate bridges from a blocked country to others that do not</subject><body>

On Sun, Jan 15, 2012 at 09:34:49AM -0800, Aaron wrote:
&gt;  This proposal outlines the required changes for BridgeDB to reallocate bridges
&gt;  from a blocked country to others that do not block.

I guess I'll be the grumpy one here, but: doesn't bridgedb already do
that, just based on how it picks its answers? Or are we trying to load
balance by giving out bridges-blocked-in-China more commonly to Saudi
users? I'm missing the big picture goals here.

&gt; Current Status:
&gt; 
&gt;   Presently, BridgeDB does not allocate bridges to specific countries. The
&gt;   HTTPS distributor divides bridges into a cluster of rings. Requests for
&gt;   bridges are mapped to a single ring in the cluster using the class C network
&gt;   of the client, so that the IPv4 space is divided amongst the rings in the
&gt;   cluster (presently 4 rings). For an attacker to obtain the complete set of
&gt;   bridges she must control a number of IP addresses in diverse networks. The
&gt;   email based distributor uses a single ring, and bridge buckets are dumped
&gt;   from a single pool of unallocated bridges.

Ok.

&gt; Required modifications:
&gt; 
&gt;   1. BridgeDB must be able to produce an unblocked set of bridges for a
&gt;      specific country, if these bridges are available.

Ok. Though I'd be nervous about enabling this functionality for normal
users, since it makes "ask for some bridges, block them; wait for bridgedb
to notice; ask for new bridges, block them" easier.

&gt;   2. If a bridge is blocked in a country, it must be available to users in
&gt;      other countries.

Why does this need a modification? It is already the case, right?

&gt;   BridgeDB could be modified to assign bridges to geographic regions. To do so,
&gt;   the cluster concept must be extended to support 'geographic clusters' of
&gt;   bridges that correspond to a set of country codes, so that requests will be
&gt;   directed to a corresponding cluster, by either automatic geoip detection or
&gt;   by client choice.

If the client can specify what country he wants to ask about, that makes
the above enumeration attack even more effective.

&gt;   Alternately, BridgeDB could be modified to guarantee that a client requesting
&gt;   unblocked bridges for a region would receive these bridges, if unblocked
&gt;   bridges exist. Presently, patches exist for BridgeDB that mark known blocked
&gt;   bridges as "Might be blocked", but makes no further effort to respond with
&gt;   unblocked bridges, even if those bridges exist.

Right -- I thought we considered that a feature. We are telling the user
that we think the bridges we're giving them won't work, and we're not
giving them replacements because that would accelerate the defeat of
the rate limiting goals.

&gt; Proposed Solution 1
&gt; 
&gt;   Modify BridgeDB to assign bridges to geographic regions. Regions are
&gt;   designated by a list of country codes.  Regions should be balanced in size,
&gt;   or proportional to the number of bridge users. If a bridge is blocked in a
&gt;   region, the bridge should be reallocated to another region. Bridges for a
&gt;   region are stored in a cluster of rings.
&gt; 
&gt; Pitfalls
&gt; 
&gt;   Bridges assigned to one geographic area are not available to clients
&gt;   requesting bridges from other regions.
&gt; 
&gt; Possible Solution 2
&gt; 
&gt;   Modify BridgeDB to dynamically produce rings of bridges 'Not blocked in' a
&gt;   specified country. Bridges are not mapped to a specific country or region,
&gt;   but BridgeDB's response would contain only unblocked bridges (if available).

Again, some security analysis would be good here: in what situations
are we expecting this to be a good idea?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120130200241</emailId><senderName>"K. Macy"</senderName><senderEmail>kmacy@freebsd.org</senderEmail><timestampReceived>2012-01-30 20:02:41-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Tor Transports</subject><body>

On Mon, Jan 30, 2012 at 8:23 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrot=
e:
&gt; Thus spake K. Macy (kmacy@freebsd.org):
&gt;
&gt;&gt; On Fri, Jan 20, 2012 at 11:35 PM, Steven Murdoch wrote:
&gt;&gt; &gt;
&gt;&gt; &gt; One hop-by-hop transport protocol we will likely be considering for an=
 alternative Tor transport is TCP, and Kip Macy (a FreeBSD developer, Cc'd)=
 has been working on porting the FreeBSD network stack to userspace, with t=
he Tor use-case in mind. Unlike many other attempts though, maintainability=
 has been a primary concern, so we should be able to keep in sync with the =
FreeBSD stack with manageable effort.
&gt;
&gt;&gt; I have a few additional comments to add to set expectations appropriatel=
y.
&gt;&gt;
&gt;&gt; 1) =A0I have a prototype "safe" BPF API whereby an unprivileged
&gt;&gt; application can only receive and send packets on a single or
&gt;&gt; pre-specified set of IP addresses and only advertise its private
&gt;&gt; stack's MAC address. Without this functionality one needs to either
&gt;&gt; layer the stack on top of kernel UDP (perfectly reasonable approach,
&gt;&gt; just requires writing another simple virtual NIC driver) or running as
&gt;&gt; root, whereby plebeian networking becomes a misnomer - a patrician
&gt;&gt; poseur as it were. Having even such a simple kernel module goes
&gt;&gt; against the grain of Tor conventions of not doing anything as root
&gt;&gt; (although configuring things like transparent proxying require a
&gt;&gt; certain amount of futzing as root).
&gt;
&gt; Can you explain the privilege separation of the safe BPF api?

The filter creation / installation is not handled by the unprivileged
process. The most sophisticated possibility is my recollection of
Robert Watson's suggestion: A dedicated privileged daemon accepts
requests for an IP &amp; mac address and returns a descriptor that is a
bpf handle with the corresponding filter installed. Thus libplebnet
would send a message to the daemon saying "my MAC is 80:ee:73:00:ba:be
and my desired IP is 192.168.0.42", the daemon would fill out a filter
template with those values, install it and then hand pass the
descriptor to libplebnet.


&gt; What
&gt; handles ultimately wrapping up packets for your virtual interfaces on
&gt; the other side of the BPF API?

The libplebnet process creates the packets, but if attempts to
advertise a MAC other than its own or spoof source addresses the
packets will be dropped by the egress filter.

&gt; Does it run as root as a daemon to manage
&gt; your virtual interface, providing the BPF API to unprivileged apps
&gt; through the LD_PRELOAD wrappers, or .. ?

The daemon installing filters would run as root. The actual filtering
happens in BPF at L2, see the original McCanne/Van Jacobson paper if
that part is unclear.

&gt; Also, how portable is the code that provides this virtual interface
&gt; support?

I think the biggest portability question is BPF itself, which I have
not looked in to. My virtual ethernet driver is very simple, and my
"safe BPF" extension is a handful of extra checks in BPF.



Thanks,
Kip
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131204236</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 20:42:36-0400</timestampReceived><subject>Re: [tor-dev] Parallel Crypto - Library dep.</subject><body>

On Tue, Jan 31, 2012 at 2:46 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA1
&gt;
&gt; Hi everyone,
&gt;
&gt; To help the tor project, I'll contribute some of my spare time to improve
&gt; multithreading for the Tor code base.
&gt;
&gt; I've speak a bit with Nick M. and it seems the crypto lib is an important part
&gt; to begin with. The wiki page
&gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto)
&gt; indicates, basically, that a worker thread pool with a work queue to dispatch
&gt; crypto events should be the right approach and I do agree.
&gt;
&gt; Is it acceptable to link an external library to the project being a dependence?

It depends, I'd say.  Most of the data structures we're talking about
here are ones that allow a lockless and locked implementations.  So my
ideal implementation would be to have the ability to use lockless
structures where available, but a locked implementation otherwise.
This would let us work with better lockless libraries if they come
along, and continue to run on operating systems or on CPUs that don't
support librcu, and also migrate to another system in the future in
case a better one comes along.

But personally, I would be very surprised if this turned out to make a
very big difference: even symmetric crypto is pretty slow in
comparison to even the most obvious work-queue implementations, right?
 (If I'm missing something there, please let me know.)

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131205714</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 20:57:14-0400</timestampReceived><subject>Re: [tor-dev] DNS/DNSSEC resolving in Tor (PoC implementation)</subject><body>

On Tue, Jan 31, 2012 at 3:35 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Tue, Jan 31, 2012 at 10:04:21AM -0500, Nick Mathewson wrote:
&gt;&gt; On Mon, Jan 30, 2012 at 1:34 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt; &gt; So it looks like Tor would get two new libraries linked in, and exit
&gt;&gt; &gt; relays would inherit whatever security/stability issues libunbound has
&gt;&gt; &gt; since clients can basically hand them packets that they have to parse
&gt;&gt; &gt; and deal with.
&gt;&gt;
&gt;&gt; FWIW, I'm okay thinking about adding new library dependencies so long
&gt;&gt; as the libraries are portable enough; libunbound and ldns have a
&gt;&gt; reasonably good reputation. =A0(And our friends at NLnet labs probably
&gt;&gt; wouldn't mind another bunch of users.)
&gt;&gt;
&gt;&gt; I believe that as we add dnssec support, we are going to cross the
&gt;&gt; threshold of stuff we'd be willing to clone ourselves, since writing
&gt;&gt; our own dnssec code would be absurd.
&gt;
&gt; I totally agree that writing our own dnssec code would be absurd.
&gt;
&gt; But I'm confused here about why we're adding dns support to Tor itself.
&gt; Are we doing it to be able to proxy more requests from applications to
&gt; dns servers? Or are we doing it because the Tor client itself wants to
&gt; be able to learn the answers to dnssec questions?
&gt;
&gt; If it's the former, then we should try as much as we can to *not* learn
&gt; the details of the protocol. After all, Tor doesn't have an ssh protocol
&gt; parser or validator, but it can proxy ssh traffic just fine.

I guess it depends on what you think should happen for SOCKS+hostname
connections.

One possibility is this:

Browser -&gt; Tor Client: "SOCKS5: Connect to www.example.com,port 80"
Tor client -&gt; Tor net -&gt; Exit node: "BEGIN+: Connect to
www.example.com, port 80, and answer the following DNS questions about
it."
Exit node -&gt; Tor net-&gt; Tor Client: "CONNECTED+: Connection is open.
Here's a bunch of DNS replies for you."
Tor Client -&gt; Browser: "SOCKS5 connection complete."

But that would require that Tor recognize DNSSEC traffic.

Another possibility is this:

Browser's resolver -&gt; Tor Client (as DNSPort): "Resolve
www.example.com, give me an A, and give me DNSSec stuff too."
Tor Client-&gt; Tor net-&gt; Tor Exit: "Yeah, resolve that stuff."
Tor Exit -&gt; Tor net -&gt; Tor client: "Here's your answer."
Tor client -&gt; Browser's resolver: "Here's that A record you wanted,
and some dnssec stuff."
Browser -&gt; Tor client: "Okay, now connect there."
Tor client -&gt; Tor net -&gt; Tor exit: "Connect to &lt;ip address&gt;:80!"
Exit node -&gt; Tor net-&gt; Tor Client: "CONNECTED: Connection is open."
Tor Client -&gt; Browser: "SOCKS5 connection complete."

But that would involve an extra round trip that I'd rather save if possible.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131221611</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 22:16:11-0400</timestampReceived><subject>Re: [tor-dev] Improving the tests</subject><body>

On Tue, Jan 31, 2012 at 4:21 PM, Esteban Manchado Velázquez
&lt;emanchado@demiurgo.org&gt; wrote:
&gt; Hey guys,
&gt;
&gt; I wanted to try and help a bit, but I'm not exactly a C wizard or know much
&gt; about networking code. However, I am an experienced developer, do understand
&gt; C and have quite a bit of experience with automated testing.
&gt;
&gt; Luckily, according to
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#unitTesting, it
&gt; seems you guys could use someone spending some time with the tests :-) I'm
&gt; sure it's going to take me a while to get my head around the code and the
&gt; tests, but I can give it a shot and see what happens. How do I get started?
&gt; Any suggestions?

For unit tests:

I'd start by looking at the tests in src/test/*.c , then by running
the unit tests under gcov (there are instructions for using gcov with
Tor somewhere in doc/HACKING).  From that, you'll get some idea for
how the unit tests work, and some idea which parts of the code need
unit tests (most of them).

The easiest stuff to test is going to be things under src/common/*,
but you might also what to think about which parts of src/or/* might
be testable.  The hard part there is going to be that some of them
want to make changes affecting network state.  Unit testing for that
kind of thing will require some refactoring of the code, so that
instead of following the pattern

  act_on_input(input) {
    process input
    take action
  }

it does

  examine_input(input) {
    action = calculate_action(input)
    take action
  }

 calculate_action(input) {
    process input
 }

and then you can write the unit test for calculate_action.


For integration tests:

I started work on a python tool called chutney that configures and
launches a bunch of Tors to run tests on them, but so far it doesn't
actually do any testing.  It'd be neat to have basic tests for things
like, "Does this work as a client? Does it build circuits? Correctly?"
and so on.  But I'm not at all sure the right architecture for making
a test harness for that, and C is probably not the best choice there.

In either case, feel free to ask more questions here, or on the
#tor-dev IRC channel on the OFTC network

Glad you're intested, and looking forward to more tests,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20120131232917</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-01-31 23:29:17-0400</timestampReceived><subject>Re: [tor-dev] Tor and DNS</subject><body>

On Tue, Jan 31, 2012 at 6:20 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrot=
e:
&gt; On 01/31/2012 06:42 AM, Nick Mathewson wrote:
&gt;&gt; On Tue, Jan 31, 2012 at 1:08 AM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; w=
rote:
&gt;&gt;&gt;
&gt;&gt;&gt; I think that seems OK. I think the first step is a proposal,
&gt;&gt;
&gt;&gt; Anybody volunteering for this, or should I throw it on my =A0pile?
&gt;
&gt; I think it might make sense for you, me and Ondrej to write one up?

I'll wait to see what Ondrej comes up with; it's pretty normal to do
revisions on this stuff, after all, and he's already said he'd like to
give it a try.  If you want to do one too, I'd be glad to take on
merging.  Or ask Ondrej if he wants to collaborate on the first draft.

-- =

Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121002192804</emailId><senderName>Sambuddho Chakravarty</senderName><senderEmail>sc2516@columbia.edu</senderEmail><timestampReceived>2012-10-02 19:28:04-0400</timestampReceived><subject>[tor-dev] Tor's current traffic scheduling</subject><body>

[Attachment #2 (multipart/alternative)]


Hi All
 I am a bit curious to know how does the traffic scheduling work in the
present Tor distributions. Is it EWMA or the old round robin method ?

Thanks
Sambuddho

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi All&lt;div&gt;  I am a bit curious to know how does the traffic \
scheduling work in the present Tor distributions. Is it EWMA or the old round robin \
method ?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&lt;/div&gt;&lt;div&gt;Sambuddho&lt;/div&gt;


&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121101170422</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-11-01 17:04:22-0400</timestampReceived><subject>[tor-dev] circuitmux_ewma.c</subject><body>

These gcc extensions:

/*** EWMA circuitmux_policy_t method table ***/

circuitmux_policy_t ewma_policy = {  .alloc_cmux_data = ewma_alloc_cmux_data,
  .free_cmux_data = ewma_free_cmux_data,

Doesn't work well with MSVC. Here is a patch:

--- ..\..\Git-latest\src\or\circuitmux_ewma.c   2012-11-01 15:53:23.125000000 +0100
+++ circuitmux_ewma.c   2012-11-01 17:52:55.371093500 +0100
@@ -200,15 +200,22 @@

 /*** EWMA circuitmux_policy_t method table ***/

-circuitmux_policy_t ewma_policy = {  .alloc_cmux_data = ewma_alloc_cmux_data,
-  .free_cmux_data = ewma_free_cmux_data,
-  .alloc_circ_data = ewma_alloc_circ_data,
-  .free_circ_data = ewma_free_circ_data,
-  .notify_circ_active = ewma_notify_circ_active,
-  .notify_circ_inactive = ewma_notify_circ_inactive,
-  .notify_set_n_cells = NULL, /* EWMA doesn't need this */
-  .notify_xmit_cells = ewma_notify_xmit_cells,
-  .pick_active_circuit = ewma_pick_active_circuit
+#ifdef __GNUC__
+  #define STRUCT_INIT(member,val) member = val
+#else
+  #define STRUCT_INIT(member,val) val
+#endif
+
+circuitmux_policy_t ewma_policy = {
+  STRUCT_INIT (.alloc_cmux_data, ewma_alloc_cmux_data),
+  STRUCT_INIT (.free_cmux_data, ewma_free_cmux_data),
+  STRUCT_INIT (.alloc_circ_data, ewma_alloc_circ_data),
+  STRUCT_INIT (.free_circ_data, ewma_free_circ_data),
+  STRUCT_INIT (.notify_circ_active, ewma_notify_circ_active),
+  STRUCT_INIT (.notify_circ_inactive, ewma_notify_circ_inactive),
+  STRUCT_INIT (.notify_set_n_cells, NULL), /* EWMA doesn't need this */
+  STRUCT_INIT (.notify_xmit_cells, ewma_notify_xmit_cells),
+  STRUCT_INIT (.pick_active_circuit, ewma_pick_active_circuit)
 };

 /*** EWMA method implementations using the below EWMA helper functions ***/

--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127205240</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-27 20:52:40-0400</timestampReceived><subject>[tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

Hi, all.

This is just the ntor proposal draft, as circulated last year, but
with a proposal number assigned to it, and a closing section about how
to make Tor actually work with it.



Filename: 216-ntor-handshake.txt
Title: Improved circuit-creation key exchange
Author:  Nick Mathewson
Created: 11-May-2011
Status: Open

Summary:

  This is an attempt to translate the proposed circuit handshake from
  "Anonymity and one-way authentication in key-exchange protocols" by
  Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.

  It assumes that proposal 200 is implemented, to provide an extended CREATE
  cell format that can indicate what type of handshake is in use.

Notation:

  Let a|b be the concatenation of a with b.

  Let H(x,t) be a tweakable hash function of output width H_LENGTH bytes.

  Let t_mac, t_key, and t_verify be a set of arbitrarily-chosen tweaks
  for the hash function.

  Let EXP(a,b) be a^b in some appropriate group G where the appropriate DH
  parameters hold.  Let's say elements of this group, when represented as
  byte strings, are all G_LENGTH bytes long.  Let's say we are using a
  generator g for this group.

  Let a,A=KEYGEN() yield a new private-public keypair in G, where a is the
  secret key and A = EXP(g,a).  If additional checks are needed to insure
  a valid keypair, they should be performed.

  Let PROTOID be a string designating this variant of the protocol.

  Let KEYID be a collision-resistant (but not necessarily preimage-resistant)
     hash function on members of G, of output length H_LENGTH bytes.

Instantiation:

  Let's call this PROTOID "ntor-curve25519-sha256-1"  (We might want to make
  this shorter if it turns out to save us a block of hashing somewhere.)

  Set H(x,t) == HMAC_SHA256 with message x and key t. So H_LENGTH == 32.
  Set t_mac   == PROTOID | ":mac"
      t_key  == PROTOID | ":key"
      t_verify  == PROTOID | ":verify"

  Set EXP(a,b) == curve25519(.,b,a), and g == 9 .  Let KEYGEN() do the
  appropriate manipulations when generating the secret key (clearing the
  low bits, twiddling the high bits).

  Set KEYID(B) == B.  (We don't need to use a hash function here, since our
     keys are already very short.  It is trivially collision-resistant, since
     KEYID(A)==KEYID(B) iff A==B.)

Protocol:

  Take a router with identity key digest ID.

  As setup, the router generates a secret key b, and a public onion key
  B with b, B = KEYGEN().  The router publishes B in its server descriptor.

  To send a create cell, the client generates a keypair x,X = KEYGEN(), and
  sends a CREATE cell with contents:

    NODEID:     ID             -- H_LENGTH bytes
    KEYID:      KEYID(B)       -- H_LENGTH bytes
    CLIENT_PK:  X              -- G_LENGTH bytes

  The server generates a keypair of y,Y = KEYGEN(), and computes

    secret_input = EXP(X,y) | EXP(X,b) | ID | B | X | Y | PROTOID
    KEY_SEED = H(secret_input, t_key)
    verify = H(secret_input, t_verify)
    auth_input = verify | ID | B | Y | X | PROTOID | "Server"

  The server sends a CREATED cell containing:

    SERVER_PK:  Y                     -- G_LENGTH bytes
    AUTH:       H(auth_input, t_mac)  -- H_LENGTH byets

  The client then checks Y is in G^* [see NOTE below], and computes

    secret_input = EXP(Y,x) | EXP(B,x) | ID | B | X | Y | PROTOID
    KEY_SEED = H(secret_input, t_key)
    verify = H(secret_input, t_verify)
    auth_input = verify | ID | B | Y | X | PROTOID | "Server"

    The client verifies that AUTH == H(auth_input, t_mac).

  [NOTE: It may be adequate to check that EXP(Y,x) is not the point at
  infinity.  See tor-dev thread.]

  Both parties now have a shared value for KEY_SEED.  They expand this into
  the keys needed for the Tor relay protocol.

Key expansion:

  Currently, the key expansion formula used by Tor here is

       K = SHA(K0 | [00]) | SHA(K0 | [01]) | SHA(K0 | [02]) | ...

       where K0==g^xy, and K is divvied up into Df, Db, Kf, and Kb portions.

  Instead, let's have it be

       K = K_0 | K_1 | K_2 | K_3 | ...

       Where K_0     = H(m_expand | INT8(i) , KEY_SEED )
         and K_(i+1) = H(K_i | m_expand | INT8(i) , KEY_SEED )
         and m_expend is an arbitrarily chosen value,
         and INT8(i) is a octet with the value "i".

  Ian says this is due to a construction from Krawczyk at
  http://eprint.iacr.org/2010/264 .

  Let m_expand be PROTOID | ":key_expand"

Performance notes:

  In Tor's current circuit creation handshake, the client does:
     One RSA public-key encryption
     A full DH handshake in Z_p
     A short AES encryption
     Five SHA1s for key expansion
  And the server does:
     One RSA private-key decryption
     A full DH handshake in Z_p
     A short AES decryption
     Five SHA1s for key expansion

  While in the revised handshake, the client does:
     A full DH handshake
     A public-half of a DH handshake
     3 H operations for the handshake
     3 H operations for the key expansion
  and the server does:
     A full DH handshake
     A private-half of a DH handshake
     3 H operations for the handshake
     3 H operations for the key expansion

Integrating with the rest of Tor:

  Add a new optional entry to router descriptors and microdescriptors:

     "onion-key-ntor" SP Base64Key NL

  where Base64Key is a base-64 encoded 32-byte value, with padding
  omitted.

  Add a new consensus method to tell servers to copy "onion-key-ntor"
  entries to from router descriptors to microdescriptors.

  Add a "UseNTorHandshake" configuration option and a corresponding
  consensus parameter to control whether clients use the ntor
  handshake.  If the configuration option is "auto", clients should
  obey the consensus parameter.  Have the configuration default be
  "auto" and the consensus value initially be "0".

  Reserve the handshake type [00 01] for this handshake in CREATE2 and
  EXTEND2 cells.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121130050708</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-11-30 05:07:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@freehaven.net):

&gt; Title: Improved circuit-creation key exchange
&gt; Author:  Nick Mathewson
&gt; 
&gt; Summary:
&gt; 
&gt;   This is an attempt to translate the proposed circuit handshake from
&gt;   "Anonymity and one-way authentication in key-exchange protocols" by
&gt;   Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.
&gt; 
&gt;   It assumes that proposal 200 is implemented, to provide an extended CREATE
&gt;   cell format that can indicate what type of handshake is in use.
&gt; 
&gt; Protocol:
&gt; 
&gt;   Take a router with identity key digest ID.
&gt; 
&gt;   As setup, the router generates a secret key b, and a public onion key
&gt;   B with b, B = KEYGEN().  The router publishes B in its server descriptor.
&gt; 
&gt;   To send a create cell, the client generates a keypair x,X = KEYGEN(), and
&gt;   sends a CREATE cell with contents:
&gt; 
&gt;     NODEID:     ID             -- H_LENGTH bytes
&gt;     KEYID:      KEYID(B)       -- H_LENGTH bytes
&gt;     CLIENT_PK:  X              -- G_LENGTH bytes

I mentioned this on the ntor ticket (#7202), but it's probably worth
repeating here in case anyone has any suggestions or ideas:

I think we really should consider a proof-of-work field on the client's
CREATE cell, so we have some form of response available in the event of
circuit-based CPU DoSes against Tor relays.

The first thing that came to my mind was a hash of the entire cell
contents plus timestamp and a nonce field. The nonce would be repeatedly
altered until the hash prefix matched a value specified by the
consensus.

Then, if a relay receives a cell with either a stale timestamp or an
invalid hash+hash prefix, that cell can be discarded. If the relay's
onionskin queue is full, it can do some additional accounting such as
ensuring that the hash values it sees are unique within the valid
timestamp window. Or perhaps it only needs to inspect this portion of
the cell at all if the onionskin queue is full.

As I see it, there are two serious hurdles to this approach:

1. The timesource of the timestamp needs to not be fingerprintable, yet
still current enough to allow us to feasibly track a list of these
hashes if we want. The client's consensus timestamp is the most readily
available source of such a timestamp, but it would have to be fuzzed to
account for the fact that only 1/4 of all clients will posses a
consensus for that hour.

Do we have other timesources? I seem to recall seeing some tickets about
dirport timesources fly by... Did we ever figure out a way forward for
those?

2. If we're not careful, the hash prefix consensus parameter would cause
most clients to be unable to build circuits until they download the new
consensus instructing them to do the proof of work. Relays would have to
wait several consensus periods before enforcing the hash prefix.


Or, alternatively, are there other proof-of-work mechanisms we could use
instead?



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130124205</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2012-11-30 12:42:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

On Thu, Nov 29, 2012 at 11:07 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;
&gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt;
&gt; &gt; Title: Improved circuit-creation key exchange
&gt; &gt; Author:  Nick Mathewson
&gt; &gt;
&gt; &gt; Summary:
&gt; &gt;
&gt; &gt;   This is an attempt to translate the proposed circuit handshake from
&gt; &gt;   "Anonymity and one-way authentication in key-exchange protocols" by
&gt; &gt;   Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.
&gt; &gt;
&gt; &gt;   It assumes that proposal 200 is implemented, to provide an extended CREATE
&gt; &gt;   cell format that can indicate what type of handshake is in use.
&gt; &gt;
&gt; &gt; Protocol:
&gt; &gt;
&gt; &gt;   Take a router with identity key digest ID.
&gt; &gt;
&gt; &gt;   As setup, the router generates a secret key b, and a public onion key
&gt; &gt;   B with b, B = KEYGEN().  The router publishes B in its server descriptor.
&gt; &gt;
&gt; &gt;   To send a create cell, the client generates a keypair x,X = KEYGEN(), and
&gt; &gt;   sends a CREATE cell with contents:
&gt; &gt;
&gt; &gt;     NODEID:     ID             -- H_LENGTH bytes
&gt; &gt;     KEYID:      KEYID(B)       -- H_LENGTH bytes
&gt; &gt;     CLIENT_PK:  X              -- G_LENGTH bytes
&gt;
&gt; I mentioned this on the ntor ticket (#7202), but it's probably worth
&gt; repeating here in case anyone has any suggestions or ideas:
&gt;
&gt; I think we really should consider a proof-of-work field on the client's
&gt; CREATE cell, so we have some form of response available in the event of
&gt; circuit-based CPU DoSes against Tor relays.

Not an issue: in 10 minutes a Core 2 Quad Intel machine can calculate
10 million ECC calculations.
I think we'll be okay.

--
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121201040926</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-12-01 04:09:26-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

On Fri, Nov 30, 2012 at 12:07 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt;
&gt;&gt; Title: Improved circuit-creation key exchange
&gt;&gt; Author:  Nick Mathewson
&gt;&gt;
&gt;&gt; Summary:
&gt;&gt;
&gt;&gt;   This is an attempt to translate the proposed circuit handshake from
&gt;&gt;   "Anonymity and one-way authentication in key-exchange protocols" by
&gt;&gt;   Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.
&gt;&gt;
&gt;&gt;   It assumes that proposal 200 is implemented, to provide an extended CREATE
&gt;&gt;   cell format that can indicate what type of handshake is in use.
&gt;&gt;
&gt;&gt; Protocol:
&gt;&gt;
&gt;&gt;   Take a router with identity key digest ID.
&gt;&gt;
&gt;&gt;   As setup, the router generates a secret key b, and a public onion key
&gt;&gt;   B with b, B = KEYGEN().  The router publishes B in its server descriptor.
&gt;&gt;
&gt;&gt;   To send a create cell, the client generates a keypair x,X = KEYGEN(), and
&gt;&gt;   sends a CREATE cell with contents:
&gt;&gt;
&gt;&gt;     NODEID:     ID             -- H_LENGTH bytes
&gt;&gt;     KEYID:      KEYID(B)       -- H_LENGTH bytes
&gt;&gt;     CLIENT_PK:  X              -- G_LENGTH bytes
&gt;
&gt; I mentioned this on the ntor ticket (#7202), but it's probably worth
&gt; repeating here in case anyone has any suggestions or ideas:

I responded on that ticket a little when you posted it. I think that a
proof-of-work idea is interesting and worth analyzing, but probably
out-of-scope for #7202 and ntor work in 0.2.4.  Here's why:

1) The ntor handshake will the force multiplier worse for the
attacker, not better.  So this doesn't seem like a regression that
should block ntor.
2) We have 10 days left before the implementation deadline for new
features in 0.2.4, and negative 20 days left for the deadline for
brand-new feature proposals in 0.2.4 [1].
3) I am sure that we would design something better if we take the time
to learn the literature better and write some proposals than we would
if we scramble to get something into 0.2.4.

So unless there's something above that I'm getting wrong, this is a
topic that I'd like to come back to in a week or two, once I'm dug out
from under the stuff I want to get in before the Big Feature deadline
[1].  Stuff I should expand on then includes:
  * "Replay caches can afford be fuzzy and imperfect "
  * "GPUs vs smartphones"
  * etc

[1] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121101185656</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-01 18:56:56-0400</timestampReceived><subject>Re: [tor-dev] circuitmux_ewma.c</subject><body>

[Attachment #2 (multipart/alternative)]


On Thu, Nov 1, 2012 at 1:04 PM, Gisle Vanem &lt;gvanem@broadpark.no&gt; wrote:

&gt; These gcc extensions:
&gt;

Hi, Gisle!

I'm happy to open another ticket for these, but have you tried using the
bugtracker yourself? Is there some UI issue or something that prevents you
from opening tickets?  If so I'd be glad to try to help work around it, but
if not it's really more convenient to have bugtracker tickets to discuss
this stuff.

As for the patch, I don't think it's a good idea as-is, for two reasons:
  * First, the syntax there is *NOT* a GCC extension; it's a standard C99
feature.
  * Second, the workaround is error-prone.  If the fields in the structure
are ever designated in an order that doesn't match their declaration order
in the structure definition, we'll get a situation where C99-compliant
compilers generate the code as intended, but where non-C99-compliant
compilers fail, or worse-- generate different code.  To be concrete,
consider this example:

#include &lt;stdio.h&gt;

struct X {
  const char *important;
  const char *actor;
  const char *victim;
};

#if I_HAVE_C99
  #define STRUCT_INIT(member,val) member = val
#else
  #define STRUCT_INIT(member,val) val
#endif

int main(int argc, char **argv)
{
  struct X y = {
    STRUCT_INIT(.actor, "vendors"),
    STRUCT_INIT(.victim, "programmers"),
    STRUCT_INIT(.important, "Standards")
  };
  printf("%s are important.\n"
    "When %s support them, that makes life easier for %s.\n",
         y.important, y.actor, y.victim);
  return 0;
}

So I think the better fix there is probably to verify that the designated
initializers are indeed given in the structure declaration order, and then
to simply replace them with comments.  It's not as good as it would be if
we could rely on having a C99 compiler (in 2012), but it's better that
risking our code behaving differently on C99 and non-C99 compilers.

yrs,
-- 
Nick

[Attachment #5 (text/html)]

&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Thu, Nov 1, 2012 at \
1:04 PM, Gisle Vanem &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:gvanem@broadpark.no" \
target="_blank"&gt;gvanem@broadpark.no&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex"&gt;These \
gcc extensions:&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;Hi, Gisle!&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm happy to open another ticket for these, but have you \
tried using the bugtracker yourself? Is there some UI issue or something that \
prevents you from opening tickets?  If so I'd be glad to try to help work around \
it, but if not it's really more convenient to have bugtracker tickets to discuss \
this stuff.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As for the patch, I don't think it's a \
good idea as-is, for two reasons:&lt;/div&gt;&lt;div&gt;  * First, the syntax there is *NOT* a \
GCC extension; it's a standard C99 feature.&lt;/div&gt;&lt;div&gt;  * Second, the workaround \
is error-prone.  If the fields in the structure are ever designated in an order that \
doesn't match their declaration order in the structure definition, we'll get \
a situation where C99-compliant compilers generate the code as intended, but where \
non-C99-compliant compilers fail, or worse-- generate different code.  To be \
concrete, consider this example: &lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;#include \
&lt;stdio.h&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;struct X {&lt;/div&gt;&lt;div&gt;  const char \
*important;&lt;/div&gt;&lt;div&gt;  const char *actor;&lt;/div&gt;&lt;div&gt;  const char \
*victim;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; #if I_HAVE_C99&lt;/div&gt;&lt;div&gt;  #define \
STRUCT_INIT(member,val) member = val&lt;/div&gt;&lt;div&gt;#else&lt;/div&gt;&lt;div&gt;  #define \
STRUCT_INIT(member,val) val&lt;/div&gt;&lt;div&gt;#endif&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;int main(int \
argc, char **argv)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt; &lt;div&gt;  struct X y = {&lt;/div&gt;&lt;div&gt;    \
STRUCT_INIT(.actor, "vendors"),&lt;/div&gt;&lt;div&gt;    STRUCT_INIT(.victim, \
"programmers"),&lt;/div&gt;&lt;div&gt;    STRUCT_INIT(.important, \
"Standards")&lt;/div&gt;&lt;div&gt;  };&lt;/div&gt;&lt;div&gt;  printf("%s are \
important.\n"&lt;/div&gt;&lt;div&gt;    "When %s support them, that makes life easier \
for %s.\n",&lt;/div&gt;&lt;div&gt;         y.important, y.actor, y.victim);&lt;/div&gt;&lt;div&gt;  \
return 0;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;So I think the better fix there \
is probably to verify that the designated initializers are indeed given in the \
structure declaration order, and then to simply replace them with comments.  It's \
not as good as it would be if we could rely on having a C99 compiler (in 2012), but \
it's better that risking our code behaving differently on C99 and non-C99 \
compilers.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;yrs,&lt;/div&gt;&lt;div&gt;-- \
&lt;/div&gt;&lt;div&gt;Nick&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121002200152</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-10-02 20:01:52-0400</timestampReceived><subject>Re: [tor-dev] Tor's current traffic scheduling</subject><body>

On Tue, Oct 02, 2012 at 03:28:04PM -0400, Sambuddho Chakravarty wrote:
&gt; Hi All
&gt;  I am a bit curious to know how does the traffic scheduling work in the
&gt; present Tor distributions. Is it EWMA or the old round robin method ?

It's EWMA.

At https://metrics.torproject.org/consensus-health.html#consensusparams
you can see CircuitPriorityHalflifeMsec is set to 30 seconds.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121201061417</emailId><senderName>Andrea Shepard</senderName><senderEmail>andrea@torproject.org</senderEmail><timestampReceived>2012-12-01 06:14:17-0400</timestampReceived><subject>Re: [tor-dev] Parallel relaycrypt data structures for review</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Nov 30, 2012 at 08:12:10AM -0500, Nick Mathewson wrote:
&gt; Hi!  Here are some initial thoughts:
&gt; 
&gt; * If we're going to do it like this, maybe we need to make cell_t
&gt; packed or something eventually.  It's got a fair amount of padding
&gt; overhead right now.

Yeah - but relay_crypt() wants a cell_t, so we'd have to unpack and
repack then.

&gt; * Maybe we'll need a next pointer in cells if we're queueing them?

Hmmm - yeah, I think that could be made to work.  I'm mostly concerned
with avoiding having to have the main thread/worker thread either hold
a lock for the entire time it takes to crypt a bunch of cells/pull them
off the out queue

&gt; * Why is there  only an rc_job for outgoing cells on a circuit? It
&gt; seems for symmetry we'd need to have one for inbound cells and one for
&gt; outbound cells.  It looks like that code isn't there right now?

I was trying to figure out if we can simplify it by just using the queue
for the other circuit, but yeah, think it is necessary to make rc_jobs
(circuit_t, cell_direction_t) tuples.

&gt; * Maybe I'm confused by these queues.  The system of cell queues is
&gt; going to get a little confusing, maybe.  Putting cells on the outgoing
&gt; queue isn't always right, since some cells (e.g., relay_data cells at
&gt; an exit node) need to be handled locally rather than relaying them.
&gt; So we need more new queues?

The outgoing queue is the queue of crypted cells for the main thread
to pick up; it isn't the same as the circuit outgoing queue because a
circuit might get closed while a worker is active, and because the thing
to do after the cell is crypted is a bit complicated and I wanted to
minimize the number of other things that would end up being called from
the worker thread.

See circuit_receive_relay_cell() in relay.c; if the cell is 'recognized',
it gets special handling, or else it goes on the queue for the circuit.
That logic would move to the second half of the main-thread processing,
after the cell is removed from the rc_job output queue.

&gt; * Should the jobs be in some data structure other than an smartlist_t?
&gt;  A queue would seem to make more sense, since jobs are getting added
&gt; and pulled off.  (Yes, protecting the data structure there with a lock
&gt; makes sense.)

Yeah, I just said that as a placeholder - what's really best surely
depends on the selection policy.

&gt; * If you're going to have separate locks, it's important to document
&gt; how they nest, to prevent deadlock conditions.

Yeah - I specified always lock the relaycrypt_dispatcher_t, then the
relaycrypt_job_t in the comments, I believe.

&gt; * Presumably relaycrypt_job_t would need to have a pointer to the
&gt; actual circuit that needs work, and a note about whether it's a job
&gt; for outbound or inbound cells.

Well, it shouldn't be messing with the circuit too much because then a lot
of other stuff that touches the circuit also needs to worry about being
thread-safe, and the case of a circuit being shut down while a worker is
active gets hairy.  The worker will only be touching the queues in the
rc_job, but it will need the circuit for the call to relay_crypt() - hmm,
we need a way to make sure the crypto keys don't get freed out from under
it if a circuit goes away.

&gt; * In the non-threaded-relaycrypt case, presumably the intention is
&gt; that there's a function that would otherwise queue a cell for crypto
&gt; but instead just put it directly on the appropriate circuit queue?

Yeah - the non-thready version would just call whatever (possibly refactored)
relay_crypt() that the worker thread calls and then the handler for crypted
cells, all in the main thread, rather than queueing anything.

&gt; Thanks again! I'll let you know if I think of anything else.

Okay, thanks.  I'm trying to get some code started this weekend, I think.

-- 
Andrea Shepard
&lt;andrea@torproject.org&gt;
PGP fingerprint: 3611 95A4 0740 ED1B 7EA5  DF7E 4191 13D9 D0CF BDA5

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121201215215</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-12-01 21:52:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@freehaven.net):

&gt; On Fri, Nov 30, 2012 at 12:07 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt; &gt;
&gt; &gt;&gt; Title: Improved circuit-creation key exchange
&gt; &gt;&gt; Author:  Nick Mathewson
&gt; &gt;&gt;
&gt; &gt;&gt; Summary:
&gt; &gt;&gt;
&gt; &gt;&gt;   This is an attempt to translate the proposed circuit handshake from
&gt; &gt;&gt;   "Anonymity and one-way authentication in key-exchange protocols" by
&gt; &gt;&gt;   Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.
&gt; &gt;&gt;
&gt; &gt;&gt;   It assumes that proposal 200 is implemented, to provide an extended CREATE
&gt; &gt;&gt;   cell format that can indicate what type of handshake is in use.
&gt; &gt;&gt;
&gt; &gt;&gt; Protocol:
&gt; &gt;&gt;
&gt; &gt;&gt;   Take a router with identity key digest ID.
&gt; &gt;&gt;
&gt; &gt;&gt;   As setup, the router generates a secret key b, and a public onion key
&gt; &gt;&gt;   B with b, B = KEYGEN().  The router publishes B in its server descriptor.
&gt; &gt;&gt;
&gt; &gt;&gt;   To send a create cell, the client generates a keypair x,X = KEYGEN(), and
&gt; &gt;&gt;   sends a CREATE cell with contents:
&gt; &gt;&gt;
&gt; &gt;&gt;     NODEID:     ID             -- H_LENGTH bytes
&gt; &gt;&gt;     KEYID:      KEYID(B)       -- H_LENGTH bytes
&gt; &gt;&gt;     CLIENT_PK:  X              -- G_LENGTH bytes
&gt; &gt;
&gt; &gt; I mentioned this on the ntor ticket (#7202), but it's probably worth
&gt; &gt; repeating here in case anyone has any suggestions or ideas:
&gt; 
&gt; I responded on that ticket a little when you posted it. I think that a
&gt; proof-of-work idea is interesting and worth analyzing, but probably
&gt; out-of-scope for #7202 and ntor work in 0.2.4.  Here's why:
&gt; 
&gt; 1) The ntor handshake will the force multiplier worse for the
&gt; attacker, not better.  So this doesn't seem like a regression that
&gt; should block ntor.
&gt; 2) We have 10 days left before the implementation deadline for new
&gt; features in 0.2.4, and negative 20 days left for the deadline for
&gt; brand-new feature proposals in 0.2.4 [1].
&gt; 3) I am sure that we would design something better if we take the time
&gt; to learn the literature better and write some proposals than we would
&gt; if we scramble to get something into 0.2.4.

You're right. I didn't mean to distract from finishing ntor on time for
0.2.4.x, I was just curious if anyone else had any ideas. Ntor is pretty
darn important by itself, and is also an improvement against this
attack, and it should also now be much easier to change the CREATE
handshake than it used to be.

I also checked the source, and it does seem like there's no obvious way
to send multiple RELAY_COMMAND_EXTENDs down the same circuit.
circuit_extend() will tear down a circuit that has circ-&gt;n_chan set when
it gets a new extend command, and it sets n_chan in the same codepath.

So if nothing else, the attack is somewhat hard to run at full link
speed while still using intermediate nodes. You gotta do a lot of
circuit parallelization, which would allow you to be fingerprinted at
Guards more easily as an attacker than I initially thought.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121201231358</emailId><senderName>Buket_akýn</senderName><senderEmail>buketakinn@gmail.com</senderEmail><timestampReceived>2012-12-01 23:13:58-0400</timestampReceived><subject>[tor-dev] OutreachProgramForWomen</subject><body>

[Attachment #2 (multipart/alternative)]


Hi everybody,
 My name is Buket Ak=FDn and I am from Turkey, =C7anakkale. I am computer
engineering student at =C7anakkale 18 Mart University. I am going to refer
" Stem Usability Improvements" project. Please can you tell me what can I
do about project?  Thanks very much for your kindness.

[Attachment #5 (text/html)]

&lt;div&gt;Hi everybody,&lt;/div&gt;&lt;div&gt; My name is Buket Ak=FDn and I am from Tu=
rkey, =C7anakkale. I am computer engineering student at =C7anakkale 18 Mart=
 University. I am going to refer “ Stem Usability Improvements&amp;r=
dquo; project. Please can you tell me what can I do about project?  Th=
anks very much for your kindness.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121201220434</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-01 22:04:34-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - November 2012</subject><body>

November was a month that included eating far too much pie. There was
some stem work too on the side, though delicious pumpkin pies are
always how that month should be remembered.

My primary focus for November was tor event handling [1], which is the
last major feature we need before having parity with TorCtl. We
presently support nine of the nineteen event types, including the most
commonly used ones (logging, BW, CIRC, STREAM, etc). I'll be spending
a good chunk of December finishing this up.

Besides this I've been really thrilled at how contributors are coming
out of the woodwork to help!

Ravi

* Ravi has volunteered to take a lead on moving stem onto tor's site.
Unfortunately this is presently blocked on getting a subdomain. [2]

* Provided a patch to move stem's controller exceptions to the top
level namespace. [3]

* Fix for the repurpose_circuit() integ test [4] and discovered an
issue with the stem.process test. [5]

Eoin

* Submitted a great patch overhauling and expanding verification of
server descriptor content. [6]

* Caught a possible tor bug related to 'GETINFO orconn-status' queries
when disconnected. [7]

* Numerous spelling fixes [8] and caught an issue with respect to how
the descriptor reader handles archives. [9]

Sean

* Reviewed my event parsing branch, offering feedback [10] and
catching a bug where STREAM events could have a zero port. [11]

* Submitted patches to add close_circuit() to the Controller [12] and
a setup.py [13]. The former led to a discussion about stem's licensing
and copyright for patches.

* Helped resolve an issue with EXTENDCIRCUIT where we weren't taking
into account when the path was optional or not. [14]

Other things I did this month includes...

* Preparation for the 2013 Outreach Program for Women [15], the
application deadline for which is now only two days away. This mostly
involved helping others add their project ideas to the volunteer page
and adding one of my own. [16]

* Made a landing page for stem's bug tracking [17] and linked to it
from stem's site.

* Revamped stem's enum documentation to be both more readable and
support interlinking. [18]

* Provided a code review for Karsten's pygeodate.py. [19]

* Answered a handful of controller inquiries on our lists. Stem's now
at a point where I don't mind suggesting it to developers. If you're
scripting or writing an application around tor then please give stem a
try! I'd love to get more feedback on where its rough edges are before
we make an initial release. [20][21][22][23]

Cheers! -Damian

[1] https://trac.torproject.org/7328
[2] https://trac.torproject.org/7324
[3] https://trac.torproject.org/6357
[4] https://trac.torproject.org/7259
[5] https://trac.torproject.org/7284
[6] https://trac.torproject.org/5810
[7] https://trac.torproject.org/7558
[8] https://gitweb.torproject.org/stem.git/commitdiff/2a59741
[9] https://gitweb.torproject.org/stem.git/commitdiff/69c55ab
[10] https://trac.torproject.org/7328#comment:3
[11] https://trac.torproject.org/7598
[12] https://trac.torproject.org/7566
[13] https://trac.torproject.org/7565
[14] https://trac.torproject.org/6666
[15] https://live.gnome.org/OutreachProgramForWomen
[16] https://www.torproject.org/getinvolved/volunteer.html.en#stemUsability
[17] https://trac.torproject.org/projects/tor/wiki/doc/stem/bugs
[18] https://gitweb.torproject.org/stem.git/commitdiff/0e99a26
[19] https://trac.torproject.org/6471
[20] https://lists.torproject.org/pipermail/tor-relays/2012-November/001774.html
[21] https://lists.torproject.org/pipermail/tor-talk/2012-November/026299.html
[22] https://lists.torproject.org/pipermail/tor-dev/2012-November/004162.html
[23] https://lists.torproject.org/pipermail/tor-dev/2012-November/004195.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121201233925</emailId><senderName>Clay Graham</senderName><senderEmail>claytantor@gmail.com</senderEmail><timestampReceived>2012-12-01 23:39:25-0400</timestampReceived><subject>[tor-dev] Grailo.net is live (but very young)</subject><body>

[Attachment #2 (multipart/alternative)]


Hey all,

You may remember an email from me about a week ago, and I could really use
some pointers.

We just stealth launched an alpha version of http://grailo.net and I would
love all of you to try it out and give me feedback. Its 100% open source,
100% free, and you can even fork the project yourself on github.

Its goal: Create a simple to use client side, RSA public key encryption for
microblogging on the internet.

The reason I am reaching out to you is I am I am interested in creating a
client side plugin for the TOR browser so that people can use the client
side encryption safely and privately, and without fear. Since scripting is
disabled in TOR, with good reason, I want a plugin that is blessed by the
TOR project as open and safe for encryption.

Any leads on where to get started are greatly appreciated.

Clay

[Attachment #5 (text/html)]

Hey all,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You may remember an email from me about a week ago, and I \
could really use some pointers.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We just stealth launched an \
alpha version of &lt;a href="http://grailo.net"&gt;http://grailo.net&lt;/a&gt; and I would love \
all of you to try it out and give me feedback. Its 100% open source, 100% free, and \
you can even fork the project yourself on github. &lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Its \
goal: Create a simple to use client side, RSA public key encryption for microblogging \
on the internet.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;The reason I am reaching out to you is I am I \
am interested in creating a client side plugin for the TOR browser so that people can \
use the client side encryption safely and privately, and without fear. Since \
scripting is disabled in TOR, with good reason, I want a plugin that is blessed by \
the TOR project as open and safe for encryption.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any leads \
on where to get started are greatly \
appreciated.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Clay&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121203031927</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-03 03:19:27-0400</timestampReceived><subject>[tor-dev] Windows binary flash proxy packages</subject><body>

Thanks to Alexandre's work on #7283, we now have Windows .exe packages
of the flash proxy client programs.

http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.9-win32.zip
http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.9-win32.zip.asc

These are in addition to the already existing packages that require you
to have Python installed.

http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.9.zip
http://www.bamsoftware.com/dist/flashproxy/flashproxy-client-0.9.zip.asc

Some people might be interested in the technical details of compiling
Python applications on Windows.

https://gitweb.torproject.org/flashproxy.git/blob/688010d2:/doc/windows-deployment-howto.txt
https://gitweb.torproject.org/flashproxy.git/blob/688010d2:/Makefile

The next step is https://trac.torproject.org/projects/tor/ticket/7621,
which is about installing these programs into a Tor Browser Bundle.
Perhaps we should try to coordinate this into a combined
pyobfsproxy/flash proxy bundle?

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121204031944</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-12-04 03:19:44-0400</timestampReceived><subject>Re: [tor-dev] [tor-reports] George's status report: November 2012</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake George Kadianakis (desnacked@riseup.net):

&gt; Hi,
&gt; 
&gt; - Started researching and developing obfs3, an improved version of the
&gt; obfs2 pluggable transport. The proposed protocol currently looks
&gt; like this:
&gt; https://gitweb.torproject.org/user/asn/pyobfsproxy.git/blob/refs/heads/obfs3:/doc/obfs3-protocol-spec.txt
&gt;  
&gt; The current implementation uses curve25519 to do ECDH, but
&gt; curve25519 public keys don't look random enough on the wire and we
&gt; will probably need to use a curve similar to the one that Telex
&gt; uses.
&gt; 
&gt; Ian, Philipp and Roger helped a lot with this.

Holy crap. In what way are the public keys in curve25519 "not random
enough"?

I don't really know anything of substance about ECC (especially ECC
curve choice), but if the public keys are distributed unevenly over the
keyspace, isn't this a hint of something extremely bad?

At the very least, it sounds like it hints at reduced strength of the
curve: non-uniformity over a 256bit keyspace means it takes less than
256 bits to describe the keypair mapping, which should mean a technique
exists with less than 2^128 operations for solving the ECDLP (as
compared to using Shanks or rho collisions, etc).

Did you write this up anywhere? I see the XXX for the "FAQ" entry in
your spec...

Also, to help reduce my ignorance: Does anyone know if ECC curves are
usually tested for key distribution uniformity?


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204163002</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-12-04 16:30:02-0400</timestampReceived><subject>[tor-dev] tor exit node receive buffer and sending buffer</subject><body>

[Attachment #2 (multipart/alternative)]


are there any specification on how tor exit node manage its receive
buffer(e.g, for receiving packets from remote webserver) and its sending
buffer(for sending packets back to the client)?

[Attachment #5 (text/html)]

are there any specification on how tor exit node manage its receive buffer(e.g, for \
receiving packets from remote webserver) and its sending buffer(for sending packets \
back to the client)?&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204122515</emailId><senderName>Jorge Couchet</senderName><senderEmail>jorge.couchet@gmail.com</senderEmail><timestampReceived>2012-12-04 12:25:15-0400</timestampReceived><subject>[tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

A FlashProxy (https://crypto.stanford.edu/flashproxy/) is a normal
browser that has a Javascript code in order to act as a Proxy. The
browser acting as a Proxy is contacting a special server (the
"Facilitator" developed in Python) in order to ask for a client and a
Tor relay. In the case that the Facilitator 's answer is positive,
then the FlashProxy is acting as a bridge in order to connect the
client with the Tor relay (i.e. helping the client to connect to the
Tor Network from a country with the known relays censored).

I'm working with the ticket 7549
(https://trac.torproject.org/projects/tor/ticket/7549). The ticket 's
goal is to avoid a "Tor in Tor situation" when a FlashProxy is serving
a client request. This "Tor in Tor situation" could be described as
the FlashProxy being itelsf inside of the Tor Network when is trying
to help a client computer to connect to the Tor Network.

In order to avoid this situation, the goal here is that the
Facilitator is checking if the FlashProxy 's public IP belongs to a
Tor Exit node, if so then the Facilitator is giving a negative answer
to the Proxy. One possible solution for this scenario is that the
Facilitator is running an online lookup that queries a locally running
Tor instance in order to known if a given IP address belongs to a Tor
Exit node or not.

So, the question is: is there any other reasonable way (efficient
-development and execution time- and safe) to see if an IP address
belongs to a Tor Exit node?

Thanks in advance for your help!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121207170140</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-07 17:01:40-0400</timestampReceived><subject>[tor-dev] stem mock_method usage</subject><body>

[Attachment #2 (multipart/alternative)]


Damian,

I am attempting to write a test using test.mocking.mock_method, but I do
not understand how to use it correctly.  Could you give me pointers on the
following smallest (non-)working test case.

import stem
from stem.control import Controller
import test.mocking as mocking

socket = stem.socket.ControlSocket()
controller = Controller(socket)

mocking.mock_method(Controller, 'get_version',
mocking.return_value(stem.version.Version('0.1.0.14')))

controller.get_version()

The above code fails with:

Traceback (most recent call last):
  File "mock_method-test.py", line 8, in &lt;module&gt;
    mocking.mock_method(Controller, 'get_version',
mocking.return_value(stem.version.Version('0.1.0.14')))
  File "stem.dev/test/mocking.py", line 317, in mock_method
    target_class.__dict__[method_name] = mock_wrapper
TypeError: 'dictproxy' object does not support item assignment


-- 
Sean Robinson

[Attachment #5 (text/html)]

Damian,&lt;br&gt;&lt;br&gt;I am attempting to write a test using test.mocking.mock_method, but I \
do not understand how to use it correctly.   Could you give me pointers on the \
following smallest (non-)working test case.&lt;br&gt;&lt;br&gt;import stem&lt;br&gt; from stem.control \
import Controller&lt;br&gt;import test.mocking as mocking&lt;br&gt;&lt;br&gt;socket = \
stem.socket.ControlSocket()&lt;br&gt;controller = \
Controller(socket)&lt;br&gt;&lt;br&gt;mocking.mock_method(Controller, 'get_version', \
mocking.return_value(stem.version.Version('0.1.0.14')))&lt;br&gt; \
&lt;br&gt;controller.get_version()&lt;br&gt;&lt;br&gt;The above code fails with:&lt;br&gt;&lt;br&gt;Traceback (most \
recent call last):&lt;br&gt;   File "mock_method-test.py", line 8, in \
&lt;module&gt;&lt;br&gt;       mocking.mock_method(Controller, 'get_version', \
mocking.return_value(stem.version.Version('0.1.0.14')))&lt;br&gt;  File \
"stem.dev/test/mocking.py", line 317, in mock_method&lt;br&gt;       \
target_class.__dict__[method_name] = mock_wrapper&lt;br&gt;TypeError: 'dictproxy' \
                object does not support item assignment&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;
-- &lt;br&gt;Sean Robinson&lt;br&gt;&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121207172404</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-07 17:24:04-0400</timestampReceived><subject>[tor-dev] Stem code review 2012-12-04</subject><body>

[Attachment #2 (multipart/alternative)]


Stem devs,

I did a code review of recent Stem commits ("Tor event handling" merge
(commit 42872dd08e81d6b3) through "Checking for None by identity" (commit
69f72efc9367092c)).  My comments and questions follow.  I will skip my own
contributions (they were great 8-) in that range, as I am biased.

Event._log_if_unrecognized() is a good idea that vastly improves the
readability of Event subclasses and reduces code duplication.

Regarding commit fb0aec5d95e9d2e6 "tidying up boilerplate":
1) I do not like the new _get_event() with assert_class and
assert_content.  There are transformations and tests and returned values
all within what is a mock object builder, meaning it works via
side-effect.  This could be surprising to test writers.
2) I vote to keep "self.assertTrue(isinstance(event,
stem.response.events.StatusEvent))" style tests after producing the event.

The quoted key/value mapping is more readable, now.  Good work.  Why not
look for quoted positional args before non-quoted positional args?  Why not
do just like kwarg handling?

Why restrict SignalEvents to expected_signals when control-spec.txt allows
more?  This may mean changes later to add support for things the protocol
already claims to support.

I set up coverage.py for another project and I wondered if it would work
with Stem.  So, I ran "coverage run --parallel-mode --branch --omit="test*"
./run_tests.py -u -i -t RUN_NONE" in the stem directory.  The results are
66% - 100% coverage per module.  Another impressive accomplishment.  And
this is only running a subset of the possible tests.


-- 
Sean Robinson

[Attachment #5 (text/html)]

Stem devs,&lt;br&gt;&lt;br&gt;I did a code review of recent Stem commits ("Tor event \
handling" merge (commit 42872dd08e81d6b3) through "Checking for None by \
identity" (commit 69f72efc9367092c)).   My comments and questions follow.   I \
will skip my own contributions (they were great 8-) in that range, as I am \
biased.&lt;br&gt; &lt;br&gt;Event._log_if_unrecognized() is a good idea that vastly improves the \
readability of Event subclasses and reduces code duplication.&lt;br&gt;&lt;br&gt; Regarding \
commit fb0aec5d95e9d2e6 "tidying up boilerplate":&lt;br&gt;1) I do not like the \
new _get_event() with assert_class and assert_content.   There are transformations \
and tests and returned values all within what is a mock object builder, meaning it \
works via side-effect.   This could be surprising to test writers.&lt;br&gt; 2) I vote to \
keep "self.assertTrue(isinstance(event, stem.response.events.StatusEvent))" \
style tests after producing the event.&lt;br&gt; &lt;br&gt;The quoted key/value mapping is more \
readable, now.   Good work.   Why not look for quoted positional args before \
non-quoted positional args?   Why not do just like kwarg handling?&lt;br&gt;&lt;br&gt;Why \
restrict SignalEvents to expected_signals when control-spec.txt allows more?   This \
may mean changes later to add support for things the protocol already claims to \
support.&lt;br&gt; &lt;br&gt;I set up coverage.py for another project and I wondered if it would \
work with Stem.   So, I ran "coverage run --parallel-mode --branch \
--omit="test*" ./run_tests.py -u -i -t RUN_NONE" in the stem \
directory.   The results are 66% - 100% coverage per module.   Another impressive \
accomplishment.   And this is only running a subset of the possible tests.&lt;br&gt; &lt;br \
clear="all"&gt;&lt;br&gt;-- &lt;br&gt;Sean Robinson&lt;br&gt;&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121212020249</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-12 02:02:49-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

On Wed, Dec 12, 2012 at 03:13:59AM +0200, George Kadianakis wrote:
&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt; 
&gt; &gt; [Should we not be copying tor-dev on this thread?]
&gt; &gt;
&gt; 
&gt; We definitely should.
&gt; 
&gt; Is it OK if I forward the whole thread to tor-dev (including this mail
&gt; and your reply)? Feel free to do it yourself too if you want.

I'll copy tor-dev on this email, and not snip things in order that
context is mostly preserved.  If you think some past snippage should be
restored, feel free to forward that as well.

&gt; BTW, in my first email, I had tor-assistants CCed, but you stripped it
&gt; off when you replied, so I didn't add it again :)

Oops; that was unintentional.  My bad.  But tor-dev is better, anyway.

&gt; &gt; On Fri, Dec 07, 2012 at 02:09:21AM +0200, George Kadianakis wrote:
&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; &gt;&gt; &gt; You'll also need to be careful about the exact protocol to select
&gt; &gt;&gt; &gt; whether to use the curve or the twist; I remember we discussed this at
&gt; &gt;&gt; &gt; PETS, sitting outside the wine tasting.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; Ugh. I admit that even though I remember our discussion at PETS, I
&gt; &gt;&gt; don't recall that part of our discussion. What do you mean by "the
&gt; &gt;&gt; exact protocol to select whether to use the curve or the twist"?
&gt; &gt;&gt; 
&gt; &gt;&gt; My plan would be to choose randomly between the base point of the
&gt; &gt;&gt; curve and the base point of its twist, make a public key using the
&gt; &gt;&gt; randomly chosen base point, and finally send the public key to the
&gt; &gt;&gt; other party. Looking at the Telex paper, this is similar to the
&gt; &gt;&gt; creation of a_0/a_1 in the 'Setup' phase of appendix 'Tagging Details'.
&gt; &gt;&gt; 
&gt; &gt;&gt; IIUC the other party shouldn't care whether the public key was created
&gt; &gt;&gt; using the curve or its twist, and can just do another point
&gt; &gt;&gt; multiplication to derive the shared secret.
&gt; &gt;&gt; 
&gt; &gt;&gt; Is this the protocol you are talking about, or am I getting my stuff
&gt; &gt;&gt; wrong?
&gt; &gt;
&gt; &gt; That works if clients know a pair of public keys for the bridge in
&gt; &gt; advance.  It was unclear to me whether this would be the case.  Is it?
&gt; &gt; Can we put public keys in with the bridge descriptors?  In this case,
&gt; &gt; you'd need 42 octets for the public key.  The spec I see in gitweb
&gt; &gt; doesn't assume that.  Rather, it has all operations being performed on a
&gt; &gt; common curve.
&gt; &gt;
&gt; 
&gt; Correct. Let's assume that clients _don't_ have any shared-secrets
&gt; beforehand. It makes our transport more deployable and usable, and it
&gt; doesn't rely on non-implemented pluggable transport features.
&gt; 
&gt; (FWIW, adding public keys (or other info) to bridge descriptors is
&gt; supported by the pluggable transport spec (DECLARE option), but it's
&gt; not implemented. Support for passing public keys (or other info) to
&gt; pluggable transport proxies is implemented in ticket #3594 but it's
&gt; not ready for merge yet.)
&gt; 
&gt; &gt; The trick is that both sides need to use the *same* curve: either the
&gt; &gt; main curve or the twist.  So if I watch a host I suspect is an
&gt; &gt; obfs3proxy responder and find that the first 21 bytes it outputs is
&gt; &gt; always on the same curve as the first 21 bytes it received, that's good
&gt; &gt; evidence for my suspicion.
&gt; &gt;
&gt; 
&gt; I see.
&gt; 
&gt; Let me formalize the protocol I tried to describe in my previous mail.
&gt; 
&gt; Alice randomly selects a bit 'b' \in {0,1}. Similar to Telex, the bit
&gt; 'b' selects whether Alice will use the normal curve E or its twist E'). 
&gt; Depending on the bit 'b', Alice generates a public key on E or E'.
&gt; 
&gt; Now, Alice sends to Bob her public key along with padding, as
&gt; described in the obfs3 spec.
&gt; 
&gt; Bob receives Alice's message and parses the first 21 bytes, which he
&gt; considers her public key. Bob checks whether the public key fits E or
&gt; E'. Depending on the curve, Bob loads up the correct domain
&gt; parameters, does a point multiplication with Alice's public key and
&gt; his private key, and derives the shared secret.
&gt; 
&gt; Now, Bob does the same dance with Alice, so that Alice can also derive
&gt; the shared secret.
&gt; 
&gt; What's the problem with this protocol?

When Bob "does a point multiplication with Alice's public key", you mean
"Bob picks a private key y, and multiplies Alice's public key by y to
yield the shared secret".  Note that the resulting shared secret (y
times Alice's public key) will be in the same group (E or E') that
Alice's public key is in.

Now what does Bob send to Alice?  Bob should be sending y times the
generator of the group.  Which group?  If Bob and Alice are to agree on
the shared secret, it has to be the same group Alice used.  Otherwise,
Alice's computation will necessarily end up different from Bob's (since
they'd be in different groups) and the two secrets won't match.

So in order for this protocol to work, Bob has to always choose the same
group he received as a public key from Alice.  But that's now a
distinguisher for the protocol: if I'm watching someone I think is
running an obfsproxy3 bridge, and I notice that the first 21 bytes he
receives on any TCP connection always lies in the same group as the
first 21 bytes he sends in response, then I can be pretty confident in
my suspicion.

&gt; I think it's similar to how Telex generates and inspects tags: Looking
&gt; at the algorithm of the "Telex tag inspection" section of the Telex
&gt; paper, it seems to me that the Telex station doesn't know whether the
&gt; tag is on the curve or its twist either.

The big difference is that Telex uses *static* DH (and gains forward
secrecy by rotating keys): the client comes pre-loaded with (rP, rP')
where P and P' are generators of E and E'.  The Telex client then
randomly picks Q to be either P or P', and randomly picks s, and sends
sQ.  The Telex station then can tell which group sQ is in, and multiply
sQ by r.  Conversely, the client uses whichever of rP and rP'
corresponds to its choice of Q, and multiplies that by s.  Then the
secrets match.

The important distinction is that in Telex, the client *already knows
one public key in each group*.  In the above obfsproxy3 proposal, it
does not.

&gt; I tried to find how the Telex station code does it, but I didn't
&gt; manage to find the telex-relay code on the Internet :(

Indeed, I don't believe the UMich people have (yet?) published it.

&gt; &gt; Are we married to using elliptic curves?  Is performance a serious
&gt; &gt; concern at the moment?  If not, it may be easier to use Z_p, while still
&gt; &gt; using a trick similar to the "twist":
&gt; &gt;
&gt; 
&gt; No, we are not married to elliptic curves. It was just that the only
&gt; trick I knew on hiding DH public keys was the Telex trick, which uses
&gt; ECC.
&gt; 
&gt; &gt; Let p = 3 mod 4 be prime, with q=(p-1)/2 also prime, and p is at least
&gt; &gt; 1536 bits.  (2048 if there's room.)  [Use group 5 or group 14 from RFC
&gt; &gt; 3526.]  Let g be a generator of the order-q subgroup of Z_p^* (g=2 for
&gt; &gt; the two above groups from the RFC.)
&gt; &gt;
&gt; &gt; To pick a private key, pick a random 1536-bit (or 2048-bit) number, and
&gt; &gt; force the low bit to 0.  So there are 1535 (2047) bits of randomness,
&gt; &gt; which is the size of q.  Let x be that private key.  Let X = g^x mod p.
&gt; &gt;
&gt; &gt; Here's the trick:  When you send the public key, randomly decide to send
&gt; &gt; either X or p-X.  That will make the public key part a uniform 1536-bit
&gt; &gt; (2048-bit) string (well, negligibly different from uniform).
&gt; &gt;
&gt; &gt; The other side constructs y and Y=g^y mod p in the same way, and sends
&gt; &gt; either Y or p-Y.
&gt; &gt;
&gt; &gt; Note that both (p-Y)^x = Y^x mod p since x is even, and similarly
&gt; &gt; (p-X)^y = X^y mod p, so key derivation goes through unchanged.
&gt; &gt;
&gt; &gt; The downside of the larger public keys is that it puts a lower bound on
&gt; &gt; the size of the data sent by the initiator before the responder answers.
&gt; &gt;
&gt; 
&gt; Ha. The Z_p stunt you describe is nifty! I will seriously consider it,
&gt; if the telex-curve protocol doesn't work out without a pre-shared
&gt; public key.

Note that the above protocol assumes that p is very close to a power of
256, but that's true of the RFC 3526 groups 5 and 14 I pointed to.

&gt; &gt; On a side note, in Philipp Winter's "put the hash there" trick, I think
&gt; &gt; it would be better to use HMAC(SHARED_SECRET, "obfsproxy3 delimiter
&gt; &gt; string") rather than h(SHARED_SECRET).
&gt; &gt;
&gt; 
&gt; True.
&gt; 
&gt; As a matter of fact, we should probably have two HMACs, one for the
&gt; initiator and another for the responder. Otherwise, hashing the
&gt; SHARED_SECRET with a common key, will result in HASH_LEN bytes that
&gt; appear both in the initiator's and in the responder's traffic stream.

Yes indeed.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213170839</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-12-13 17:08:39-0400</timestampReceived><subject>[tor-dev] Proposal 216 (ntor) redux</subject><body>

Here's a slightly updated version of the ntor proposal, as changed
while I was doing the implementation (see [A]  for more information on
that).  For a diff between the old version and the new one, see [B].

The interesting changes were:
  * To specify that the key expansion uses HKDF from RFC5869. (This is
the standardized version of originally recommended key expansion
approach.)
  * To specify that the length of a node ID is ID_LENGTH bytes, not H_LENGTH.
  * To make the t_key tweak value not be a prefix of the m_expand
value.  This is probably cosmetic.
  * To specify a way for embedding these handshakes in
EXTEND/EXTENDED/CREATE/CREATED cells so that they can be used to
extend from a server that doesn't know about proposal 200.
  * To specify checking EXP() outputs for the point at infinity rather
than checking inputs for group membership.  I am not convinced this is
necessary [C], but Ian Goldberg thought it was a good idea.

The ntor branch has a reference implementation of the handshake in
src/test/ntor_ref.py [D] which has been verified to interoperate with
the C implementation.


[A] https://trac.torproject.org/projects/tor/ticket/7202
[B] https://gitweb.torproject.org/torspec.git/blobdiff/08b4c89058e7704f9cdb1e11407c7d1c8186c0cd..HEAD:/proposals/216-ntor-handshake.txt
 [C] If a client generates a bad public key, it will at worst get no
security.  If a server generates a bad public key, it will at worst
provide no security--but a server that wants to provide no security
can already leak its outputs.  The case to worry about would be if an
MITM attacker replaced the X value or the Y value when communicating
between the server and the client.  But I believe that the inclusion
of X and Y in the auth_input and secret_input steps prevents such an
MITM attacker from successfully convincing the client that the
handshake was successful.  Still, "belt and suspenders."
[D] https://gitweb.torproject.org/nickm/tor.git/blob_plain/ntor:/src/test/ntor_ref.py

====
Filename: 216-ntor-handshake.txt
Title: Improved circuit-creation key exchange
Author:  Nick Mathewson
Created: 11-May-2011
Status: Open

Summary:

  This is an attempt to translate the proposed circuit handshake from
  "Anonymity and one-way authentication in key-exchange protocols" by
  Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.

  It assumes that proposal 200 is implemented, to provide an extended CREATE
  cell format that can indicate what type of handshake is in use.

Notation:

  Let a|b be the concatenation of a with b.

  Let H(x,t) be a tweakable hash function of output width H_LENGTH bytes.

  Let t_mac, t_key, and t_verify be a set of arbitrarily-chosen tweaks
  for the hash function.

  Let EXP(a,b) be a^b in some appropriate group G where the appropriate DH
  parameters hold.  Let's say elements of this group, when represented as
  byte strings, are all G_LENGTH bytes long.  Let's say we are using a
  generator g for this group.

  Let a,A=KEYGEN() yield a new private-public keypair in G, where a is the
  secret key and A = EXP(g,a).  If additional checks are needed to insure
  a valid keypair, they should be performed.

  Let PROTOID be a string designating this variant of the protocol.

  Let KEYID be a collision-resistant (but not necessarily preimage-resistant)
     hash function on members of G, of output length H_LENGTH bytes.

  Let each node have a unique identifier, ID_LENGTH bytes in length.

Instantiation:

  Let's call this PROTOID "ntor-curve25519-sha256-1"  (We might want to make
  this shorter if it turns out to save us a block of hashing somewhere.)

  Set H(x,t) == HMAC_SHA256 with message x and key t. So H_LENGTH == 32.
  Set t_mac   == PROTOID | ":mac"
      t_key  == PROTOID | ":key_extract"
      t_verify  == PROTOID | ":verify"

  Set EXP(a,b) == curve25519(.,b,a), and g == 9 .  Let KEYGEN() do the
  appropriate manipulations when generating the secret key (clearing the
  low bits, twiddling the high bits).

  Set KEYID(B) == B.  (We don't need to use a hash function here, since our
     keys are already very short.  It is trivially collision-resistant, since
     KEYID(A)==KEYID(B) iff A==B.)

Protocol:

  Take a router with identity key digest ID.

  As setup, the router generates a secret key b, and a public onion key
  B with b, B = KEYGEN().  The router publishes B in its server descriptor.

  To send a create cell, the client generates a keypair x,X = KEYGEN(), and
  sends a CREATE cell with contents:

    NODEID:     ID             -- ID_LENGTH bytes
    KEYID:      KEYID(B)       -- H_LENGTH bytes
    CLIENT_PK:  X              -- G_LENGTH bytes

  The server generates a keypair of y,Y = KEYGEN(), and computes

    secret_input = EXP(X,y) | EXP(X,b) | ID | B | X | Y | PROTOID
    KEY_SEED = H(secret_input, t_key)
    verify = H(secret_input, t_verify)
    auth_input = verify | ID | B | Y | X | PROTOID | "Server"

  The server sends a CREATED cell containing:

    SERVER_PK:  Y                     -- G_LENGTH bytes
    AUTH:       H(auth_input, t_mac)  -- H_LENGTH byets

  The client then checks Y is in G^* [see NOTE below], and computes

    secret_input = EXP(Y,x) | EXP(B,x) | ID | B | X | Y | PROTOID
    KEY_SEED = H(secret_input, t_key)
    verify = H(secret_input, t_verify)
    auth_input = verify | ID | B | Y | X | PROTOID | "Server"

    The client verifies that AUTH == H(auth_input, t_mac).

  Both parties check that none of the EXP() operations produced the point at
  infinity. [NOTE: This is an adequate replacement for checking Y for group
  membership, if the group is curve25519.]

  Both parties now have a shared value for KEY_SEED.  They expand this into
  the keys needed for the Tor relay protocol.

Key expansion:

  Currently, the key expansion formula used by Tor here is

       K = SHA(K0 | [00]) | SHA(K0 | [01]) | SHA(K0 | [02]) | ...

       where K0==g^xy, and K is divvied up into Df, Db, Kf, and Kb portions.

  Instead, let's have it be HKDF-SHA256 as defined in RFC5869:

       K = K_1 | K_2 | K_3 | ...

       Where K_1     = H(m_expand | INT8(1) , KEY_SEED )
         and K_(i+1) = H(K_i | m_expand | INT8(i) , KEY_SEED )
         and m_expand is an arbitrarily chosen value,
         and INT8(i) is a octet with the value "i".

  Ian says this is due to a construction from Krawczyk at
  http://eprint.iacr.org/2010/264 .

  Let m_expand be PROTOID | ":key_expand"

  In RFC5869's vocabulary, this is HKDF-SHA256 with info == m_expand,
  salt == t_key, and IKM == secret_input.

Performance notes:

  In Tor's current circuit creation handshake, the client does:
     One RSA public-key encryption
     A full DH handshake in Z_p
     A short AES encryption
     Five SHA1s for key expansion
  And the server does:
     One RSA private-key decryption
     A full DH handshake in Z_p
     A short AES decryption
     Five SHA1s for key expansion

  While in the revised handshake, the client does:
     A full DH handshake
     A public-half of a DH handshake
     3 H operations for the handshake
     3 H operations for the key expansion
  and the server does:
     A full DH handshake
     A private-half of a DH handshake
     3 H operations for the handshake
     3 H operations for the key expansion

Integrating with the rest of Tor:

  Add a new optional entry to router descriptors and microdescriptors:

     "ntor-onion-key" SP Base64Key NL

  where Base64Key is a base-64 encoded 32-byte value, with padding
  omitted.

  Add a new consensus method to tell servers to copy "ntor-onion-key"
  entries to from router descriptors to microdescriptors.

  In microdescriptors, "ntor-onion-key" can go right after the "onion-key"
  line.

  Add a "UseNTorHandshake" configuration option and a corresponding
  consensus parameter to control whether clients use the ntor
  handshake.  If the configuration option is "auto", clients should
  obey the consensus parameter.  Have the configuration default be
  "auto" and the consensus value initially be "0".

  Reserve the handshake type [00 02] for this handshake in CREATE2 and
  EXTEND2 cells.

  Specify that this handshake type can be used in EXTEND/EXTENDED/
  CREATE/CREATED cells as follows: instead of a 190-byte TAP onionskin, send
  the 16-byte string "ntorNTORntorNTOR", followed by the client's ntor
  message.  Instead of a 148-byte TAP response, send the server's ntor
  response.  (We need this so that a client can extend from an 0.2.3 server,
  which doesn't know about CREATE2/CREATED2/EXTEND/EXTENDED2.)

Test vectors for HKDF-SHA256:

 These are some test vectors for HKDF-SHA256 using the values for M_EXPAND
 and T_KEY above, taking 100 bytes of key material.

  INPUT: "" (The empty string)
  OUTPUT: d3490ed48b12a48f9547861583573fe3f19aafe3
          f81dc7fc75eeed96d741b3290f941576c1f9f0b2
          d463d1ec7ab2c6bf71cdd7f826c6298c00dbfe67
          11635d7005f0269493edf6046cc7e7dcf6abe0d2
          0c77cf363e8ffe358927817a3d3e73712cee28d8

  INPUT: "Tor" (546f72)
  OUTPUT: 5521492a85139a8d9107a2d5c0d9c91610d0f959
          89975ebee6c02a4f8d622a6cfdf9b7c7edd3832e
          2760ded1eac309b76f8d66c4a3c4d6225429b3a0
          16e3c3d45911152fc87bc2de9630c3961be9fdb9
          f93197ea8e5977180801926d3321fa21513e59ac

  INPUT: "AN ALARMING ITEM TO FIND ON YOUR CREDIT-RATING STATEMENT"
         (414e20414c41524d494e47204954454d20544f2046494e44204f4e20
          594f5552204352454449542d524154494e472053544154454d454e54)
  OUTPUT: a2aa9b50da7e481d30463adb8f233ff06e9571a0
          ca6ab6df0fb206fa34e5bc78d063fc291501beec
          53b36e5a0e434561200c5f8bd13e0f88b3459600
          b4dc21d69363e2895321c06184879d94b18f0784
          11be70b767c7fc40679a9440a0c95ea83a23efbf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121213154742</emailId><senderName>Alexandre</senderName><senderEmail>al.frank.allaire@gmail.com</senderEmail><timestampReceived>2012-12-13 15:47:42-0400</timestampReceived><subject>[tor-dev] Flashproxy alpha bundles</subject><body>

[Attachment #2 (multipart/alternative)]


Hello everybody,

We now have some flashproxy Tor Browser Bundles ready.
These are alpha bundles, made by adding our files to the existing
obfsproxy bundle. We would appreciate some testing and feedback.
You can get the bundles here:

Windows:
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6=
-alpha-2_en-US.exe
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6=
-alpha-2_en-US.exe.asc

OSX:
=
https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-=
alpha-2-osx-i386-en-US.zip
=
https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-=
alpha-2-osx-i386-en-US.zip.asc

32-bit GNU/Linux:
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-l=
inux-i686-2.4.6-alpha-2-dev-en-US.tar.gz
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-l=
inux-i686-2.4.6-alpha-2-dev-en-US.tar.gz.asc

64-bit GNU/Linux:
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-l=
inux-x86_64-2.4.6-alpha-2-dev-en-US.tar.gz
=
https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-l=
inux-x86_64-2.4.6-alpha-2-dev-en-US.tar.gz.asc

To verify the signatures you will need David Fifield's public key.
You can get it at:

http://bamsoftware.com/david/david.asc

or by fetching key 0x6BC758CBC11F6276 from:

x-hkp://pool.sks-keyservers.net

If your machine is behind a NAT device, you will need to
configure port forwarding. The client listens for incoming
WebSocket connections on port 9000 by default. If you
want to forward a different port, you will need to edit
your torrc. Find this line,

ClientTransportPlugin websocket exec flashproxy-client --register :0 =
:9000

and change 9000 to the port you have chosen to forward.
Once you have configured port forwarding you should be
able to start the Browser Bundle as you normally would.

Some specific things we would like feedback on are:

- Is configuring port forwarding insurmountable for you?
- If it didn't work, was it at least clear what was wrong?
 What was the output in the Vidalia log?
- Were you able to use this as your main Tor process for a day?
- Was it ever obvious to you that you had switched to another proxy
 (this would have broken existing circuits)?

We have a wiki page setup for usability discussions at:

https://trac.torproject.org/projects/tor/wiki/FlashProxyUsability

Feel free to edit it. You can also leave comments on this trac ticket:

https://trac.torproject.org/projects/tor/ticket/7425

Please send feedback, bug reports, etc. to the tor-dev list,
or to dcf@torproject.org. Thanks.

Alex=

[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=us-ascii"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: \
space; -webkit-line-break: after-white-space; "&gt;Hello everybody,&lt;br&gt;&lt;br&gt;We now have \
some flashproxy Tor Browser Bundles ready.&lt;br&gt;These are alpha bundles, made by adding \
our files to the existing&lt;br&gt;obfsproxy bundle. We would appreciate some testing and \
feedback.&lt;br&gt;You can get the bundles here:&lt;br&gt;&lt;br&gt;Windows:&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha \
-2_en-US.exe"&gt;https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe&lt;/a&gt;&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha \
-2_en-US.exe.asc"&gt;https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe.asc&lt;/a&gt;&lt;br&gt;&lt;br&gt;OSX:&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-alpha- \
2-osx-i386-en-US.zip"&gt;https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-alpha-2-osx-i386-en-US.zip&lt;/a&gt;&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-alpha- \
2-osx-i386-en-US.zip.asc"&gt;https://people.torproject.org/~dcf/flashproxy/TorBrowser-FlashProxy-2.4.6-alpha-2-osx-i386-en-US.zip.asc&lt;/a&gt;&lt;br&gt;&lt;br&gt;32-bit \
GNU/Linux:&lt;br&gt;&lt;a href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-br \
owser-gnu-linux-i686-2.4.6-alpha-2-dev-en-US.tar.gz"&gt;https://people.torproject.org/~dc \
f/flashproxy/tor-flashproxy-browser-gnu-linux-i686-2.4.6-alpha-2-dev-en-US.tar.gz&lt;/a&gt;&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-linux-i \
686-2.4.6-alpha-2-dev-en-US.tar.gz.asc"&gt;https://people.torproject.org/~dcf/flashproxy/ \
tor-flashproxy-browser-gnu-linux-i686-2.4.6-alpha-2-dev-en-US.tar.gz.asc&lt;/a&gt;&lt;br&gt;&lt;br&gt;64-bit \
GNU/Linux:&lt;br&gt;&lt;a href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-br \
owser-gnu-linux-x86_64-2.4.6-alpha-2-dev-en-US.tar.gz"&gt;https://people.torproject.org/~ \
dcf/flashproxy/tor-flashproxy-browser-gnu-linux-x86_64-2.4.6-alpha-2-dev-en-US.tar.gz&lt;/a&gt;&lt;br&gt;&lt;a \
href="https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-gnu-linux-x \
86_64-2.4.6-alpha-2-dev-en-US.tar.gz.asc"&gt;https://people.torproject.org/~dcf/flashprox \
y/tor-flashproxy-browser-gnu-linux-x86_64-2.4.6-alpha-2-dev-en-US.tar.gz.asc&lt;/a&gt;&lt;br&gt;&lt;br&gt;To \
verify the signatures you will need David Fifield's public key.&lt;br&gt;You can get it \
at:&lt;br&gt;&lt;br&gt;&lt;a href="http://bamsoftware.com/david/david.asc"&gt;http://bamsoftware.com/david/david.asc&lt;/a&gt;&lt;br&gt;&lt;br&gt;or \
by fetching key 0x6BC758CBC11F6276 from:&lt;br&gt;&lt;br&gt;&lt;a \
href="x-hkp://pool.sks-keyservers.net"&gt;x-hkp://pool.sks-keyservers.net&lt;/a&gt;&lt;br&gt;&lt;br&gt;If \
your machine is behind a NAT device, you will need to&lt;br&gt;configure port forwarding. \
The client listens for incoming&lt;br&gt;WebSocket connections on port 9000 by default. If \
you&lt;br&gt;want to forward a different port, you will need to edit&lt;br&gt;your torrc. Find \
this line,&lt;br&gt;&lt;br&gt;ClientTransportPlugin websocket exec flashproxy-client --register \
:0 :9000&lt;br&gt;&lt;br&gt;and change 9000 to the port you have chosen to forward.&lt;br&gt;Once you \
have configured port forwarding you should be&lt;br&gt;able to start the Browser Bundle as \
you normally would.&lt;br&gt;&lt;br&gt;Some specific things we would like feedback on \
are:&lt;br&gt;&lt;br&gt;- Is configuring port forwarding insurmountable for you?&lt;br&gt;- If it \
didn't work, was it at least clear what was wrong?&lt;br&gt; What was the output in \
the Vidalia log?&lt;br&gt;- Were you able to use this as your main Tor process for a \
day?&lt;br&gt;- Was it ever obvious to you that you had switched to another \
proxy&lt;br&gt; (this would have broken existing circuits)?&lt;br&gt;&lt;br&gt;We have a wiki page \
setup for usability discussions at:&lt;br&gt;&lt;br&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/FlashProxyUsability"&gt;https://trac.torproject.org/projects/tor/wiki/FlashProxyUsability&lt;/a&gt;&lt;br&gt;&lt;br&gt;Feel \
free to edit it. You can also leave comments on this trac ticket:&lt;br&gt;&lt;br&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/7425"&gt;https://trac.torproject.org/projects/tor/ticket/7425&lt;/a&gt;&lt;br&gt;&lt;br&gt;Please \
send feedback, bug reports, etc. to the tor-dev list,&lt;br&gt;or to &lt;a \
href="mailto:dcf@torproject.org"&gt;dcf@torproject.org&lt;/a&gt;. \
Thanks.&lt;br&gt;&lt;br&gt;Alex&lt;/body&gt;&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121214150933</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-14 15:09:33-0400</timestampReceived><subject>[tor-dev] Stem code review 2012-12-10</subject><body>

[Attachment #2 (multipart/alternative)]


Stem devs,

This is a review of recent commits to Stem.  It begins where my last review
ended[0] and finishes at the "Adding a close_stream..." merge.

The pydoc changes to Controller.extend_circuit are good additions.

I do not understand much of the context for changes regarding network
status docs, exit policy, address type, etc.  But, the code appears to do
what the comments claim it should do (e.g. lazy loading address info).
Take that evaluation with a grain of salt.

As to re-attaching event listeners[1], I agree that putting a specialized
hook into BaseController.msg seems bad.  I have an alternate idea[2] that
puts the re-attachment in an authenticate method.  I am not proposing this
as the solution, but I hope this sparks the idea for another way to handle
re-attachment.

I think the 'as' import keyword[3] is mainly for shortening long names and
easily avoiding namespace collision.  For example:
&gt;&gt;&gt; import pkg.reallylongmodulename as rlmn
and
&gt;&gt;&gt; import socket
&gt;&gt;&gt; import niftysocket.socket as nsocket


[0]:
https://lists.torproject.org/pipermail/tor-dev/2012-December/004240.html
[1]:
https://gitweb.torproject.org/stem.git/commit/885a294646703a537c37cd2a5ac9aa8728561744
[2]:
https://gitorious.org/stem-robinson/stem-robinson/commits/exp-reattach-listeners
[3]:
https://gitweb.torproject.org/stem.git/commit/3da47d3b9d6d1ae5c6b2013a4247c45c13461a05
[4]: this footnote intentionally left blank

-- 
Sean Robinson

[Attachment #5 (text/html)]

Stem devs,&lt;br&gt;&lt;br&gt;This is a review of recent commits to Stem.   It begins where my \
last review ended[0] and finishes at the "Adding a close_stream..." \
merge.&lt;br&gt;&lt;br&gt;The pydoc changes to Controller.extend_circuit are good additions.&lt;br&gt; \
&lt;br&gt;I do not understand much of the context for changes regarding network status \
docs, exit policy, address type, etc.   But, the code appears to do what the comments \
claim it should do (e.g. lazy loading address info).   Take that evaluation with a \
grain of salt.&lt;br&gt; &lt;br&gt;As to re-attaching event listeners[1], I agree that putting a \
specialized hook into BaseController.msg seems bad.   I have an alternate idea[2] \
that puts the re-attachment in an authenticate method.   I am not proposing this as \
the solution, but I hope this sparks the idea for another way to handle \
re-attachment.&lt;br&gt; &lt;br&gt;I think the 'as' import keyword[3] is mainly for \
shortening long names and easily avoiding namespace collision.   For \
example:&lt;br&gt;&gt;&gt;&gt; import pkg.reallylongmodulename as \
rlmn&lt;br&gt;and&lt;br&gt;&gt;&gt;&gt; import socket&lt;br&gt; &gt;&gt;&gt; import niftysocket.socket \
as nsocket&lt;br&gt;&lt;br&gt;&lt;br&gt;[0]: &lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2012-December/004240.html"&gt;https://lists.torproject.org/pipermail/tor-dev/2012-December/004240.html&lt;/a&gt;&lt;br \
clear="all"&gt; [1]: &lt;a \
href="https://gitweb.torproject.org/stem.git/commit/885a294646703a537c37cd2a5ac9aa8728 \
561744"&gt;https://gitweb.torproject.org/stem.git/commit/885a294646703a537c37cd2a5ac9aa8728561744&lt;/a&gt;&lt;br&gt;[2]: \
&lt;a href="https://gitorious.org/stem-robinson/stem-robinson/commits/exp-reattach-listen \
ers"&gt;https://gitorious.org/stem-robinson/stem-robinson/commits/exp-reattach-listeners&lt;/a&gt;&lt;br&gt;
 [3]: &lt;a href="https://gitweb.torproject.org/stem.git/commit/3da47d3b9d6d1ae5c6b2013a4 \
247c45c13461a05"&gt;https://gitweb.torproject.org/stem.git/commit/3da47d3b9d6d1ae5c6b2013a4247c45c13461a05&lt;/a&gt;&lt;br&gt;[4]: \
this footnote intentionally left blank&lt;br&gt; &lt;br&gt;-- &lt;br&gt;Sean Robinson&lt;br&gt;
&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121203172004</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-03 17:20:04-0400</timestampReceived><subject>[tor-dev] Opening new SOCKS to client plugin for new circuit?</subject><body>

I noticed a change in behavior in cb62a0b69a7d67b427224ca4c3075b49853a3a1f
or thereabouts. tor opens a new SOCKS connection to a client transport
plugin while bootstrapping at 50% (if descriptors are not cached) or at
85% (if descriptors are not cached). The upshot is that the flash proxy
transport, for which new connections are not free, needs two connected
browser proxies in order to bootstrap. Earlier revisions permit
bootstrapping and circuit creation with just one connection to the
proxy.

I start an external proxy thus:
	$ ./flashproxy-client --external --unsafe-logging
	2012-12-03 09:02:05 Listening remote on 0.0.0.0:9000.
	2012-12-03 09:02:05 Listening remote on [::]:9000.
	2012-12-03 09:02:05 Listening local on 127.0.0.1:9001.
	2012-12-03 09:02:05 Listening local on [::1]:9001.
The "remote" listener is waiting for WebSocket connections from a
browser. The "local" listener is waiting for SOCKS connections from Tor.
Then I start Tor to use the proxy:
	$ ./src/or/tor ClientTransportPlugin "websocket socks4 127.0.0.1:9001" UseBridges 1 \
Bridge "websocket 0.0.1.0:1" LearnCircuitBuildTimeout 0 CircuitBuildTimeout 60 Log \
                "info stderr"
	...
	Dec 03 09:02:13.000 [notice] Bootstrapped 10%: Finishing handshake with directory \
server. flashproxy-client notices Tor's pending SOCKS connection:
	2012-12-03 09:02:13 Local connection from 127.0.0.1:55421.
	2012-12-03 09:02:13 SOCKS request from 127.0.0.1:55421.
	2012-12-03 09:02:13 Got SOCKS request for 0.0.1.0:1.
	2012-12-03 09:02:13 locals  (1): [u'127.0.0.1:55421']
	2012-12-03 09:02:13 remotes (0): []
	2012-12-03 09:02:13 Data from unlinked local 127.0.0.1:55421 (217 bytes).
	2012-12-03 09:02:13 locals  (1): [u'127.0.0.1:55421']
	2012-12-03 09:02:13 remotes (0): []
Then I open a browser to make a single WebSocket connection which will
appear as one of the pluggable transport's "remotes".
	http://crypto.stanford.edu/flashproxy/embed.html?debug=1&amp;client=127.0.0.1:9000&amp;relay=173.255.221.44:9901
 flashproxy-client sees the new remote and starts proxying data.
	2012-12-03 09:02:17 Remote connection from 127.0.0.1:51321.
	2012-12-03 09:02:17 Data from WebSocket-pending 127.0.0.1:51321.
	2012-12-03 09:02:17 locals  (1): [u'127.0.0.1:55421']
	2012-12-03 09:02:17 remotes (1): [u'127.0.0.1:51321']
	2012-12-03 09:02:17 Linking 127.0.0.1:55421 and 127.0.0.1:51321.
Now bootstrapping continues (over the WebSocket channel) until reaching
85%, and then it says "connections all too old, or too non-canonical"
and makes a new SOCKS request:
	Dec 03 09:02:18.000 [notice] new bridge descriptor '3VXRyxz67OeRoqHn' (fresh): \
$7C03D29CA58BE8EED5F483F31A2DEDF6FD7CC444~3VXRyxz67OeRoqHn at 0.0.1.0  Dec 03 \
09:02:18.000 [notice] We now have enough directory information to build circuits.  \
                Dec 03 09:02:18.000 [notice] Bootstrapped 80%: Connecting to the Tor \
                network.
	...
	Dec 03 09:02:18.000 [info] circuit_handle_first_hop(): Next router is [scrubbed]: \
Connections all too old, or too non-canonical.  Launching a new one.  Dec 03 \
09:02:18.000 [notice] Bootstrapped 85%: Finishing handshake with first hop.  Dec 03 \
09:02:18.000 [info] connection_read_proxy_handshake(): Proxy Client: connection to \
0.0.1.0:1 successful flashproxy-client sees the SOCKS request, but because there are \
no more browser connections forthcoming, everything stalls at this point.
	2012-12-03 09:02:18 Local connection from 127.0.0.1:55427.
	2012-12-03 09:02:18 SOCKS request from 127.0.0.1:55427.
	2012-12-03 09:02:18 Got SOCKS request for 0.0.1.0:1.
	2012-12-03 09:02:18 locals  (2): [u'127.0.0.1:55421', u'127.0.0.1:55427']
	2012-12-03 09:02:18 remotes (1): [u'127.0.0.1:51321']
	2012-12-03 09:02:18 Data from unlinked local 127.0.0.1:55427 (231 bytes).

I've verified this failure to bootstrap with recent
190c1d4981e5751aabd3d894095851c830f1d570. After bisecting, I think the
last commit with the old behavior (boostrapped 100%) was
751b3aabb5ab88fca16834e559a8d9835831b05f. There were some compile errors
during bisecting so I couldn't narrow it to a specific revision; git
reports
	There are only 'skip'ped commits left to test.
	The first bad commit could be any of:
	35924435d22c2469ecbe06156c8069a928859d63
	e136f7ccb4e671e33b6c92a48df819082291f5c1
	4768c0efe3e9471cc367c3740d1a4ba0ab79626c
	6cce6241dd4405f6cf21057f9913e07633cf18bb
	519c971f6a3b89f1e81cda3c0290d4d943ec0d78
	77dac97354974e8a819d8e35ad4e7a76199999b4
	32337502f11e6c84e4db8591f5f81c4fc6d1da58
	8b14db9628f0e8982e894034e86c8efdd78cff32
	15303c32ec9d84aff8de5ed9df28e779c36c6e5c
	28f108bcceab59fcf9f27e33065f64bfdb0f159a
	7f952da55334d3a3693d1c6e8531fd96730265db
	f0f87cb68a22feaf552a18b521d3313d843f8793
	838743654c1bed2bfe22789ff53a1993c005f176
	9ad7ba9f2267a9ee34fafda9356f1fa86633f00f
	cb62a0b69a7d67b427224ca4c3075b49853a3a1f
	We cannot bisect more!
Based on the log, cb62a0b69a7d67b427224ca4c3075b49853a3a1f seems a
likely cause of the change: "Use channel_is_bad_for_new_circs(),
connection_or_get_num_circs() in main.c".

I thought I would be able to reproduce this with another transport or
with a simple SOCKS proxy, showing two connections where there used to
be one, but I can't. I see two connections even with the old code. For
example with an ssh SOCKS proxy (ssh -v -D 9001 -N localhost):
	debug1: Connection to port 9001 forwarding to socks port 0 requested.
	debug1: channel 2: new [dynamic-tcpip]
	debug1: Connection to port 9001 forwarding to socks port 0 requested.
	debug1: channel 3: new [dynamic-tcpip]
I guess that the difference is that previously, the second connection
happens after bootstrapping is complete, while now it happens at 85%.
(That is only a guess, I haven't verified it.)

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121212023716</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-12 02:37:16-0400</timestampReceived><subject>Re: [tor-dev] Opening new SOCKS to client plugin for new circuit?</subject><body>

On Mon, Dec 3, 2012 at 12:20 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; I noticed a change in behavior in cb62a0b69a7d67b427224ca4c3075b49853a3a1f
&gt; or thereabouts. tor opens a new SOCKS connection to a client transport
&gt; plugin while bootstrapping at 50% (if descriptors are not cached) or at
&gt; 85% (if descriptors are not cached). The upshot is that the flash proxy
&gt; transport, for which new connections are not free, needs two connected
&gt; browser proxies in order to bootstrap. Earlier revisions permit
&gt; bootstrapping and circuit creation with just one connection to the
&gt; proxy.

Hm. If you haven't figured this out so far, it doesn't seem likely to
get solved on tor-dev.  Open a ticket on the bugtracker, please?

You could also investigate (using extra log messages in Tor or a
debugger or something) whether the reason the first channel isn't
getting reused is because of the "is bad for new circs" test as you
suspect.  If so, that would help confirm the hypothesis, and help come
up with a fix.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213171052</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-13 17:10:52-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Alexandre:
&gt; - Is configuring port forwarding insurmountable for you?

It was always too much to ask the user to set up a port forwarding. Try
asking your non-technical friends or family. You'll see. Alternatively
search for RetroShare, emule, filesharing port forwarding and see how
many people having trouble.

There are also cases, where it is impossible to set up a port
forwarding. Such cases include for example 3G networks, WiFi hotspots or
all other networks where the admin won't do it for you.

I think dropping the requirement for a port forwarding is crucial to let
any non-geek users profit from it. Or wait for IPv6 and such problems
will vanish?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213173718</emailId><senderName>Alexandre</senderName><senderEmail>al.frank.allaire@gmail.com</senderEmail><timestampReceived>2012-12-13 17:37:18-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

It's unfortunately a limitation of the technology we are using.
The proxies run as javascript code in peoples' web browsers,
and use the WebSocket protocol to relay traffic from the client
to the relay. 

This protocol is designed to allow bidirectional
communication from a browser to a web server using a single
connection, as a replacement for the current method, which
is to constantly make new http requests to the server. In this
scenario it doesn't really make sense for  web browsers to accept 
connections, so browser implementations don't let you do it.
So the user has to be able to accept connections on his end.

You can get the full details on flash proxies here:

https://crypto.stanford.edu/flashproxy/

Alex


On 2012-12-13, at 12:10 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:

&gt; Alexandre:
&gt;&gt; - Is configuring port forwarding insurmountable for you?
&gt; 
&gt; It was always too much to ask the user to set up a port forwarding. Try
&gt; asking your non-technical friends or family. You'll see. Alternatively
&gt; search for RetroShare, emule, filesharing port forwarding and see how
&gt; many people having trouble.
&gt; 
&gt; There are also cases, where it is impossible to set up a port
&gt; forwarding. Such cases include for example 3G networks, WiFi hotspots or
&gt; all other networks where the admin won't do it for you.
&gt; 
&gt; I think dropping the requirement for a port forwarding is crucial to let
&gt; any non-geek users profit from it. Or wait for IPv6 and such problems
&gt; will vanish?
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213183803</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-13 18:38:03-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Have you considered Hole punching techniques? [1] TCP, UDP, ICMP hole
punching... There are many techniques. I don't know if the WebSocket
protocol would prevent it.

STUN [2] like techniques where a third non-firewalled server helps to
traversal the NAT. (Only NAT, not used a proxy.)

pwnat [3] also looks interesting. It doesn't need a third server and
lets connect two nat'ed machines with each other.

There are probable more things to consider. For example if the pwnat
method (or any other nat traversal method) could later be easily used to
fingerprint and censor the connection.

[1] https://en.wikipedia.org/wiki/Hole_punching
[2] https://en.wikipedia.org/wiki/STUN
[3] http://samy.pl/pwnat/

Alexandre:
&gt; It's unfortunately a limitation of the technology we are using.
&gt; The proxies run as javascript code in peoples' web browsers,
&gt; and use the WebSocket protocol to relay traffic from the client
&gt; to the relay. 
&gt; 
&gt; This protocol is designed to allow bidirectional
&gt; communication from a browser to a web server using a single
&gt; connection, as a replacement for the current method, which
&gt; is to constantly make new http requests to the server. In this
&gt; scenario it doesn't really make sense for  web browsers to accept 
&gt; connections, so browser implementations don't let you do it.
&gt; So the user has to be able to accept connections on his end.
&gt; 
&gt; You can get the full details on flash proxies here:
&gt; 
&gt; https://crypto.stanford.edu/flashproxy/
&gt; 
&gt; Alex
&gt; 
&gt; 
&gt; On 2012-12-13, at 12:10 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:
&gt; 
&gt;&gt; Alexandre:
&gt;&gt;&gt; - Is configuring port forwarding insurmountable for you?
&gt;&gt;
&gt;&gt; It was always too much to ask the user to set up a port forwarding. Try
&gt;&gt; asking your non-technical friends or family. You'll see. Alternatively
&gt;&gt; search for RetroShare, emule, filesharing port forwarding and see how
&gt;&gt; many people having trouble.
&gt;&gt;
&gt;&gt; There are also cases, where it is impossible to set up a port
&gt;&gt; forwarding. Such cases include for example 3G networks, WiFi hotspots or
&gt;&gt; all other networks where the admin won't do it for you.
&gt;&gt;
&gt;&gt; I think dropping the requirement for a port forwarding is crucial to let
&gt;&gt; any non-geek users profit from it. Or wait for IPv6 and such problems
&gt;&gt; will vanish?
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121126005451</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-26 00:54:51-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

[tl;dr: We should make client-side DNS cacheing off by default.]


On Fri, Jul 20, 2012 at 6:27 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Filename: 205-local-dnscache.txt
&gt; Title: Remove global client-side DNS caching
&gt; Author: Nick Mathewson
&gt; Created: 20 July 2012
&gt; Status: Open
 [...]
For the original proposal, see
https://lists.torproject.org/pipermail/tor-dev/2012-July/003817.html

&gt; 3.1. Why keep client-side DNS caching at all?
&gt;
&gt;    A fine question!  I am not sure it actually buys us anything any
&gt;    longer, since exits also have DNS caching.  Shall we discuss that?
&gt;    It would sure simplify matters.

On consideration, I'm actually reasonably sure that eliminating
client-side DNS cacheing (or at least, turning it off by default) is a
much better answer than making DNS caches per-circuit.  I've got an
implementation of my new approach on ticket #7570
(https://trac.torproject.org/projects/tor/ticket/7570).

So, why is it okay to disable client-side DNS cacheing entirely?

Applications that care about speed should be doing a one-round-trip
connect mechanism: either a SOCKS request with a hostname in it, or a
TransPort request to an automapped address.  If client-side DNS
cacheing is disabled, these behaviors result in Tor sending the exit
node a RELAY_BEGIN cell with a hostname in it.  If the exit node is
has received a request for that hostname recently, it will have the
answer in its DNS cache, and the use of the hostname won't slow the
request down.  If the exit node has _not_ received a request for that
hostname recently, there will be no answer in its cache... but neither
would there be any answer in a per-circuit DNS cache for a circuit to
that exit.

Applications that do a two-step "resolve then connect" approach will
be a little slowed down in cases where Tor would have kept the answer
in the client cache.  But they would already be slowed down somewhat
by proposal 205, which can't be avoided if we want proposal 205's
improved security.  See note on automapping below for a workaround.

(And if you're asking, "Why would I even want to disable client-side
DNS cacheing?", see proposal 205, linked above.)



Incidentally, elsewhere in the proposal I said,

&gt;   If the application is doing its own DNS caching, they won't get
&gt;  much security benefit from here.

It looks like a bunch of applications *do* DNS cacheing.  For them, in
0.2.4, I'd suggest maybe running Tor in a configuration where every
name lookup gets automapped to a random IPv6 address.  That kind of
automapping should be possible in Tor 0.2.4 , if the changes in ticket
#7571 are right and get merged.

Another note that I had forgotten: Applications that do their own DNS
cacheing won't get affected by proposal 205, or by disabling
client-side DNS cacheing, unless they use Tor's DNSPort or Tor's
"SOCKS RESOLVE" extension to do name lookups.  That's because (I
think!) our SOCKS replies don't include IP addresses; If I'm reading
this code right, they just set the address to 0.0.0.0, which
applications should interpret as "Tor isn't going to tell you what the
IP is".


yrs,
-- 
Nick Mathewson
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121126014310</emailId><senderName>Tim Wilde</senderName><senderEmail>twilde@gmail.com</senderEmail><timestampReceived>2012-11-26 01:43:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

[Attachment #2 (multipart/alternative)]


On Sun, Nov 25, 2012 at 7:54 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; [tl;dr: We should make client-side DNS cacheing off by default.]
&gt;

Nitpickery: s/cacheing/caching/g


&gt; Applications that care about speed should be doing a one-round-trip
&gt; connect mechanism: either a SOCKS request with a hostname in it, or a
&gt; TransPort request to an automapped address.  If client-side DNS
&gt; cacheing is disabled, these behaviors result in Tor sending the exit
&gt; node a RELAY_BEGIN cell with a hostname in it.  If the exit node is
&gt; has received a request for that hostname recently, it will have the
&gt; answer in its DNS cache, and the use of the hostname won't slow the
&gt; request down.  If the exit node has _not_ received a request for that
&gt; hostname recently, there will be no answer in its cache... but neither
&gt; would there be any answer in a per-circuit DNS cache for a circuit to
&gt; that exit.
&gt;
&gt; Applications that do a two-step "resolve then connect" approach will
&gt; be a little slowed down in cases where Tor would have kept the answer
&gt; in the client cache.  But they would already be slowed down somewhat
&gt; by proposal 205, which can't be avoided if we want proposal 205's
&gt; improved security.  See note on automapping below for a workaround.
&gt;
&gt; (And if you're asking, "Why would I even want to disable client-side
&gt; DNS cacheing?", see proposal 205, linked above.)
&gt;

FWIW this makes sense to me from a DNS point of view, and I agree that the
one-trip case should be no worse under this proposal than it was previously.


&gt; Incidentally, elsewhere in the proposal I said,
&gt;
&gt; &gt;   If the application is doing its own DNS caching, they won't get
&gt; &gt;  much security benefit from here.
&gt;
&gt; It looks like a bunch of applications *do* DNS cacheing.  For them, in
&gt; 0.2.4, I'd suggest maybe running Tor in a configuration where every
&gt; name lookup gets automapped to a random IPv6 address.  That kind of
&gt; automapping should be possible in Tor 0.2.4 , if the changes in ticket
&gt; #7571 are right and get merged.
&gt;

Alas, yes, and browsers (I'm looking at you, Firefox) are some of the worst
offenders (though hopefully not in the "normal" Tor case of SOCKS).  I have
issued many curses towards applications doing their own caching (often
ignoring TTLs too, of course).  The automapping in question seems sane to
me.

Tim

[Attachment #5 (text/html)]

On Sun, Nov 25, 2012 at 7:54 PM, Nick Mathewson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:nickm@freehaven.net" target="_blank"&gt;nickm@freehaven.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; [tl;dr: We should make client-side DNS cacheing off by \
default.]&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Nitpickery: \
s/cacheing/caching/g&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 \
0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; Applications that care about \
speed should be doing a one-round-trip&lt;br&gt; connect mechanism: either a SOCKS request \
with a hostname in it, or a&lt;br&gt; TransPort request to an automapped address.  If \
client-side DNS&lt;br&gt; cacheing is disabled, these behaviors result in Tor sending the \
exit&lt;br&gt; node a RELAY_BEGIN cell with a hostname in it.  If the exit node is&lt;br&gt;
has received a request for that hostname recently, it will have the&lt;br&gt;
answer in its DNS cache, and the use of the hostname won't slow the&lt;br&gt;
request down.  If the exit node has _not_ received a request for that&lt;br&gt;
hostname recently, there will be no answer in its cache... but neither&lt;br&gt;
would there be any answer in a per-circuit DNS cache for a circuit to&lt;br&gt;
that exit.&lt;br&gt;
&lt;br&gt;
Applications that do a two-step "resolve then connect" approach will&lt;br&gt;
be a little slowed down in cases where Tor would have kept the answer&lt;br&gt;
in the client cache.  But they would already be slowed down somewhat&lt;br&gt;
by proposal 205, which can't be avoided if we want proposal 205's&lt;br&gt;
improved security.  See note on automapping below for a workaround.&lt;br&gt;
&lt;br&gt;
(And if you're asking, "Why would I even want to disable client-side&lt;br&gt;
DNS cacheing?", see proposal 205, linked \
above.)&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;FWIW this makes sense to me from a DNS \
point of view, and I agree that the one-trip case should be no worse under this \
proposal than it was previously.&lt;/div&gt; &lt;div&gt; &lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Incidentally, \
elsewhere in the proposal I said,&lt;br&gt; &lt;br&gt;
&gt;   If the application is doing its own DNS caching, they won't get&lt;br&gt;
&gt;  much security benefit from here.&lt;br&gt;
&lt;br&gt;
It looks like a bunch of applications *do* DNS cacheing.  For them, in&lt;br&gt;
0.2.4, I'd suggest maybe running Tor in a configuration where every&lt;br&gt;
name lookup gets automapped to a random IPv6 address.  That kind of&lt;br&gt;
automapping should be possible in Tor 0.2.4 , if the changes in ticket&lt;br&gt;
#7571 are right and get merged.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alas, yes, and \
browsers (I'm looking at you, Firefox) are some of the worst offenders (though \
hopefully not in the "normal" Tor case of SOCKS).  I have issued many \
curses towards applications doing their own caching (often ignoring TTLs too, of \
course).  The automapping in question seems sane to me.&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tim&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121127054928</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-27 05:49:28-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Sun, Nov 25, 2012 at 07:54:51PM -0500, Nick Mathewson wrote:
&gt; [tl;dr: We should make client-side DNS cacheing off by default.]

Be careful -- we seem to rely on the client-side dns cache to let us
move on to a new circuit if the current circuit's exit policy doesn't
like the stream.

See in connection_ap_process_end_not_open() when we get an END cell
of reason END_STREAM_REASON_EXITPOLICY. In that case we remember the
mapping between the hostname we sent and the IP address we got back in
the END cell:
          client_dns_set_addressmap(circ,
                                    conn-&gt;socks_request-&gt;address, &amp;addr,
                                    conn-&gt;chosen_exit_name, ttl);
and then when we call
        /* rewrite it to an IP if we learned one. */
        if (addressmap_rewrite(conn-&gt;socks_request-&gt;address,
                               sizeof(conn-&gt;socks_request-&gt;address),
                               NULL, NULL)) {
it gets rewritten to the IP address so we'll avoid this circuit when
we call connection_ap_detach_retriable(). If the rewrite doesn't look
at the cache, then we'll just try this circuit once more.

(Also, if we have no client-side dns cache, further streams requesting
the same address, e.g. fetching pictures from the website, might try
the same circuit even if we could know that its exit policy would refuse
the stream.)

While I was looking at this design, I thought of a cool attack on
0.2.3 users: a malicious website embeds a link to an image at the
IP address of the exit relay. The client will check whether her
circuit's exit node can handle it: connection_ap_can_use_exit()
calls compare_tor_addr_to_node_policy() which calls
compare_tor_addr_to_short_policy() which says yes (or more precisely,
not no). When the client attempts the connection, the exit relay (which
probably has ExitPolicyRejectPrivate set) refuses it, and the client
then says:
        /* check if he *ought* to have allowed it */
        if (exitrouter &amp;&amp;
            (rh-&gt;length &lt; 5 ||
             (tor_inet_aton(conn-&gt;socks_request-&gt;address, &amp;in) &amp;&amp;
              !conn-&gt;chosen_exit_name))) {
          log_info(LD_APP,
                 "Exitrouter %s seems to be more restrictive than its exit "
                 "policy. Not using this router as exit for now.",
                 node_describe(exitrouter));
          policies_set_node_exitpolicy_to_reject_all(exitrouter);
        }
i.e. the client never uses that exit as an exit again, until either
it falls out of the consensus or she restarts her client. (Neither
nodelist_set_consensus() nor nodelist_add_microdesc() updates
node-&gt;rejects_all.)

(The website can't launch this attack by linking to a 10.x.y.z IP address,
since the client checks:
          if (get_options()-&gt;ClientDNSRejectInternalAddresses &amp;&amp;
              tor_addr_is_internal(&amp;addr, 0)) {
            log_info(LD_APP,"Address '%s' resolved to internal. Closing,",
)

So the attack is that the website methodically targets all users coming
from all exit relays it doesn't control. If the user logs in to the
website or otherwise identifies herself, then the attack variant is
that the website can target just her. A popular website (say, one of
the ad servers) could potentially get quite thorough attack coverage
quite quickly.

In compare_tor_addr_to_short_policy() I wrote about a similar attack,
but apparently I didn't think about the "website causes you to open a
stream there" angle at the time.)

The bandaid fix is that we should reset node-&gt;rejects_all in
nodelist_set_consensus() just like we reset is_valid, is_running, etc
from the consensus.

The better fix is that we need to either make clients have an accurate
view of the relay's exit policy (is that ticket 1774?), or we need to
stop behaving so drastically when we only know a microdescriptor for
the relay and it declines to exit to an address that its short policy
looks like it should accept.

And assuming this last approach is best, that ties it into the first
half of this email.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127150817</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-11-27 15:08:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 27 Nov 2012 00:49:28 -0500
Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; (Also, if we have no client-side dns cache, further streams requesting
&gt; the same address, e.g. fetching pictures from the website, might try
&gt; the same circuit even if we could know that its exit policy would
&gt; refuse the stream.)

So, perhaps have a cache but only consult it for making decisions about
whether to use a circuit, not for resolving client requests? Although
this is still vulnerable to poisoning, that could perhaps be mitigated
by capping the TTL at some small value.

&gt; The bandaid fix is that we should reset node-&gt;rejects_all in
&gt; nodelist_set_consensus() just like we reset is_valid, is_running, etc
&gt; from the consensus.
&gt; 
&gt; The better fix is that we need to either make clients have an accurate
&gt; view of the relay's exit policy (is that ticket 1774?), or we need to
&gt; stop behaving so drastically when we only know a microdescriptor for
&gt; the relay and it declines to exit to an address that its short policy
&gt; looks like it should accept.

What an interesting vulnerability, especially as it shows that ad
servers can in fact be a serious attack vector. May I propose a more
thorough solution? What if there were some mechanism by which, when an
exit rejects the connection, it can provide its full policy to the
client at that point? This would give it a chance to explain the
situation (i.e. it's not actually rejecting everything), without
requiring any change to the microdescriptor. Obviously the client can
cache this info, and any node which subsequently doesn't honour its
declared policy can still be (temporarily?) blacklisted.

(Please forgive me if I'm missing something obvious. I'm not yet as
familiar with Tor's inner workings as I'd like to be.)


Julian

-- 
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121128014254</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-28 01:42:54-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Tue, Nov 27, 2012 at 12:49 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Sun, Nov 25, 2012 at 07:54:51PM -0500, Nick Mathewson wrote:
&gt;&gt; [tl;dr: We should make client-side DNS cacheing off by default.]
&gt;
&gt; Be careful -- we seem to rely on the client-side dns cache to let us
&gt; move on to a new circuit if the current circuit's exit policy doesn't
&gt; like the stream.
&gt;
&gt; See in connection_ap_process_end_not_open() when we get an END cell
&gt; of reason END_STREAM_REASON_EXITPOLICY. In that case we remember the
&gt; mapping between the hostname we sent and the IP address we got back in
&gt; the END cell:
&gt;           client_dns_set_addressmap(circ,
&gt;                                     conn-&gt;socks_request-&gt;address, &amp;addr,
&gt;                                     conn-&gt;chosen_exit_name, ttl);
&gt; and then when we call
&gt;         /* rewrite it to an IP if we learned one. */
&gt;         if (addressmap_rewrite(conn-&gt;socks_request-&gt;address,
&gt;                                sizeof(conn-&gt;socks_request-&gt;address),
&gt;                                NULL, NULL)) {
&gt; it gets rewritten to the IP address so we'll avoid this circuit when
&gt; we call connection_ap_detach_retriable(). If the rewrite doesn't look
&gt; at the cache, then we'll just try this circuit once more.

I think the right answer in this case is not to touch the cache at
all, but rather to update conn-&gt;socks_request-&gt;address, setting it to
match addr.  Using the cache for this is quite roundabout and silly
IMO.  I'll add a commit to this effect on my branch.

[...]
&gt; While I was looking at this design, I thought of a cool attack on
&gt; 0.2.3 users:
[...]
&gt;
&gt; The bandaid fix is that we should reset node-&gt;rejects_all in
&gt; nodelist_set_consensus() just like we reset is_valid, is_running, etc
&gt; from the consensus.

Agreed.  As another bandaid, we could give same-IP addresses an
exception -- but that wouldn't work for any other interesting exit
policies.

&gt; The better fix is that we need to either make clients have an accurate
&gt; view of the relay's exit policy (is that ticket 1774?),

I don't know if it's 1774, since we really don't have a great answer
for 1774 other than "we should redesign exit policies."  That's not
going to happen for 0.2.3, though, and it's doesn't seem likely for
0.2.4 at this point.

&gt; or we need to
&gt; stop behaving so drastically when we only know a microdescriptor for
&gt; the relay and it declines to exit to an address that its short policy
&gt; looks like it should accept.

I think that's plausible but vague. There are lots of things under the
heading of "less drastic".

At the very least, we need to ensure that this particular stream isn't
attached to this circuit again.  That wouldn't necessarily be so hard.
 There are probably even backportable versions of that we could try.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121128015303</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-28 01:53:03-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Tue, Nov 27, 2012 at 10:08 AM, Julian Yon &lt;julian@yon.org.uk&gt; wrote:
&gt; On Tue, 27 Nov 2012 00:49:28 -0500
&gt; Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;
&gt;&gt; (Also, if we have no client-side dns cache, further streams requesting
&gt;&gt; the same address, e.g. fetching pictures from the website, might try
&gt;&gt; the same circuit even if we could know that its exit policy would
&gt;&gt; refuse the stream.)
&gt;
&gt; So, perhaps have a cache but only consult it for making decisions about
&gt; whether to use a circuit, not for resolving client requests? Although
&gt; this is still vulnerable to poisoning, that could perhaps be mitigated
&gt; by capping the TTL at some small value.

There's an interesting idea! I wonder, can we come up with a way to
tell whether it's necessary?

It's not likely to help typical clients, since microdescriptor-users
(and all IPv6 users) don't see the full exit policy, but only a policy
summary.


&gt;&gt; The bandaid fix is that we should reset node-&gt;rejects_all in
&gt;&gt; nodelist_set_consensus() just like we reset is_valid, is_running, etc
&gt;&gt; from the consensus.
&gt;&gt;
&gt;&gt; The better fix is that we need to either make clients have an accurate
&gt;&gt; view of the relay's exit policy (is that ticket 1774?), or we need to
&gt;&gt; stop behaving so drastically when we only know a microdescriptor for
&gt;&gt; the relay and it declines to exit to an address that its short policy
&gt;&gt; looks like it should accept.
&gt;
&gt; What an interesting vulnerability, especially as it shows that ad
&gt; servers can in fact be a serious attack vector. May I propose a more
&gt; thorough solution? What if there were some mechanism by which, when an
&gt; exit rejects the connection, it can provide its full policy to the
&gt; client at that point? This would give it a chance to explain the
&gt; situation (i.e. it's not actually rejecting everything), without
&gt; requiring any change to the microdescriptor. Obviously the client can
&gt; cache this info, and any node which subsequently doesn't honour its
&gt; declared policy can still be (temporarily?) blacklisted.
&gt;
&gt; (Please forgive me if I'm missing something obvious. I'm not yet as
&gt; familiar with Tor's inner workings as I'd like to be.)

My main worry here is that an exit could give different clients
different exit policies.  I'm not sure yes if there's a clever way to
bootstrap that into a full attack, but generally when you give an
attacker the ability to give different clients different views of the
network, you can run into trouble.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121128015849</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-28 01:58:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Tue, Nov 27, 2012 at 8:42 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Tue, Nov 27, 2012 at 12:49 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
[...]
&gt;&gt; While I was looking at this design, I thought of a cool attack on
&gt;&gt; 0.2.3 users:

This is now Ticket #7582 on trac.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121218234200</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-12-18 23:42:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Thu, Nov 29, 2012 at 06:14:23PM +0000, Julian Yon wrote:
&gt; (3) Don't bother trying to ascertain the full exit policy, but rather
&gt; maintain a simple table of exit/IP/port combinations that have been
&gt; rejected and consult it when building/using circuits. This requires no
&gt; protocol changes (win!) at the cost of no longer blacklisting dishonest
&gt; exits entirely. Some mechanism for expiring entries would probably be a
&gt; good idea, and/or maybe hold it in a circular list so that there's a
&gt; maximum number.

I had this same thought while rereading my earlier message: just prepend
a reject rule for this ip:port to our local version of the relay's
exit policy.

It does let the exit "tag" you with an IP:port combo that you'll never
come back to it with. But that seems a small risk compared to the risk
of an exit relay with a complex enough policy that it causes clients to
spend two circuits for fetching each component of web pages.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121219003433</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-12-19 00:34:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@freehaven.net):

&gt; [tl;dr: We should make client-side DNS cacheing off by default.]
&gt; 
&gt; On Fri, Jul 20, 2012 at 6:27 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; &gt; Filename: 205-local-dnscache.txt
&gt; &gt; Title: Remove global client-side DNS caching
&gt; &gt; Author: Nick Mathewson
&gt;
&gt; For the original proposal, see
&gt; https://lists.torproject.org/pipermail/tor-dev/2012-July/003817.html
&gt; 
&gt; &gt; 3.1. Why keep client-side DNS caching at all?
&gt; &gt;
&gt; &gt;    A fine question!  I am not sure it actually buys us anything any
&gt; &gt;    longer, since exits also have DNS caching.  Shall we discuss that?
&gt; &gt;    It would sure simplify matters.
&gt; 
&gt; On consideration, I'm actually reasonably sure that eliminating
&gt; client-side DNS cacheing (or at least, turning it off by default) is a
&gt; much better answer than making DNS caches per-circuit.  I've got an
&gt; implementation of my new approach on ticket #7570
&gt; (https://trac.torproject.org/projects/tor/ticket/7570).
&gt; 
&gt; So, why is it okay to disable client-side DNS cacheing entirely?

Nick asked me this in private email:

&gt; Every socks response has an IP address in it.  So when Firefox asks
&gt; for "www.mit.edu" in a SOCKS4a or a SOCKS5 request, Tor gives it
&gt; "18.9.22.169" in the SOCKS response.
&gt;
&gt; Does Firefox cache these values?  That is, in the next SOCKS request
&gt; that Firefox makes for "www.mit.edu", will Firefox ask Tor to connect
&gt; to "www.mit.edu", or to "18.9.22.169"?

Under normal non-SOCKS operation, Firefox does attempt to cache DNS
resolutions for a long period of time (I think on the order of an hour
or more). The reason is because of DNS-based subversions of the
same-origin policy:
https://en.wikipedia.org/wiki/DNS_rebinding
http://www.securityfocus.com/columnists/455

Interestingly, the two main vectors discussed there are not as useful
against Tor, but perhaps worth having on your radar when considering DNS
cache alterations.

Further, the SOCKS behavior for Firefox is quite different than
non-proxied use, perhaps because of the limited vectors for rebinding.
It tends to make very few actual SOCKS4a resolutions, instead perferring
to use direct SOCKS4A hostname connects. Unfortunately, the details of
where and why it actually does decide to do a SOCKS4a resolution are
unknown to me and would require some digging.

This reminds me that I plan to re-audit as much of Firefox's networking
glue as I can for Firefox 17-ESR, to verify it hasn't changed in ways
that allow DNS leaks or proxy bypass. I've created this ticket if you
want to add further DNS-related questions for me to look into once I
start that process:
https://trac.torproject.org/projects/tor/ticket/7248

&gt; I'm asking because of proposal-205 reasons.

Proposal 205 might cause problems for DNS rebinding if the dirty circuit
expiry is small enough for evil JS to simply wait for a fresh circuit to
alter the destination IP of important origins.

However, this vector is eliminated by SSL, and will be mitigated
by making circuit use more closely tied to first party origin (using
SOCKS username+password from Prop171).



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121219005151</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-19 00:51:51-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Tue, Dec 18, 2012 at 7:34 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt;
&gt;&gt; [tl;dr: We should make client-side DNS cacheing off by default.]
&gt;&gt;
&gt;&gt; On Fri, Jul 20, 2012 at 6:27 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; &gt; Filename: 205-local-dnscache.txt
&gt;&gt; &gt; Title: Remove global client-side DNS caching
&gt;&gt; &gt; Author: Nick Mathewson
&gt;&gt;
&gt;&gt; For the original proposal, see
&gt;&gt; https://lists.torproject.org/pipermail/tor-dev/2012-July/003817.html
&gt;&gt;
&gt;&gt; &gt; 3.1. Why keep client-side DNS caching at all?
&gt;&gt; &gt;
&gt;&gt; &gt;    A fine question!  I am not sure it actually buys us anything any
&gt;&gt; &gt;    longer, since exits also have DNS caching.  Shall we discuss that?
&gt;&gt; &gt;    It would sure simplify matters.
&gt;&gt;
&gt;&gt; On consideration, I'm actually reasonably sure that eliminating
&gt;&gt; client-side DNS cacheing (or at least, turning it off by default) is a
&gt;&gt; much better answer than making DNS caches per-circuit.  I've got an
&gt;&gt; implementation of my new approach on ticket #7570
&gt;&gt; (https://trac.torproject.org/projects/tor/ticket/7570).
&gt;&gt;
&gt;&gt; So, why is it okay to disable client-side DNS cacheing entirely?
&gt;
&gt; Nick asked me this in private email:
&gt;
&gt;&gt; Every socks response has an IP address in it.  So when Firefox asks
&gt;&gt; for "www.mit.edu" in a SOCKS4a or a SOCKS5 request, Tor gives it
&gt;&gt; "18.9.22.169" in the SOCKS response.
&gt;&gt;
&gt;&gt; Does Firefox cache these values?  That is, in the next SOCKS request
&gt;&gt; that Firefox makes for "www.mit.edu", will Firefox ask Tor to connect
&gt;&gt; to "www.mit.edu", or to "18.9.22.169"?
&gt;
&gt; Under normal non-SOCKS operation, Firefox does attempt to cache DNS
&gt; resolutions for a long period of time (I think on the order of an hour
&gt; or more). The reason is because of DNS-based subversions of the
&gt; same-origin policy:
&gt; https://en.wikipedia.org/wiki/DNS_rebinding
&gt; http://www.securityfocus.com/columnists/455

Importantly, I was wrong above.  Tor does not actually provide DNS
results in response to SOCKS connect requests; only in response to
deliberate hostname lookups.

&gt; Interestingly, the two main vectors discussed there are not as useful
&gt; against Tor, but perhaps worth having on your radar when considering DNS
&gt; cache alterations.
&gt;
&gt; Further, the SOCKS behavior for Firefox is quite different than
&gt; non-proxied use, perhaps because of the limited vectors for rebinding.
&gt; It tends to make very few actual SOCKS4a resolutions, instead perferring
&gt; to use direct SOCKS4A hostname connects. Unfortunately, the details of
&gt; where and why it actually does decide to do a SOCKS4a resolution are
&gt; unknown to me and would require some digging.

This might be a little confused.  There is no such thing as a standard
SOCKS resolution: the ability to do a hostname lookup in SOCKS without
doing a connection is a Tor extension.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213185931</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-12-13 18:59:31-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Alexandre:

&gt; Windows:
&gt; https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe
&gt; https://people.torproject.org/~dcf/flashproxy/tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe.asc

Thanks my platform. (Windows 7 64bit)

&gt; Some specific things we would like feedback on are:
&gt; 
&gt; - Is configuring port forwarding insurmountable for you?

I didn't have to do this. I guess I could do that, but "normal" end
users might not. (I know about the FP design.)

&gt; - If it didn't work, was it at least clear what was wrong?

I thought the progress would have stopped here, but it just took much
longer than expected.

[Notice] Bootstrapped 50%: Loading relay descriptors.

Starting TBB again, reduces the time.

Might be the proxy that is in use, because on retrying again, I "stuck"
at 85% or 90%.

&gt;  What was the output in the Vidalia log?

The bridge log lines were the only difference.

&gt; - Were you able to use this as your main Tor process for a day?

Browsing is slower (due to the proxies in use I assume), but aside from
that I could use it to get the information I require.

&gt; - Was it ever obvious to you that you had switched to another proxy
&gt;  (this would have broken existing circuits)?

Maybe I was lucky. I couldn't say that I noticed that.

When I say proxy I'm referring to the JavaScript proxy that runs in the
browser.

It's an alpha bundle, but I did not expect it to dump everything where
the executable was. (Tor Browser\) I thought I would be able to select
where to extract.

I also saw a, to some maybe scary, console. Might be alpha stuff.

There might be more testing required for the durable of proxies. I
report back if I find something strange.

Regards,
Sebastian (bastik_tor)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213192942</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-12-13 19:29:42-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

On Thu, Dec 13, 2012 at 06:38:03PM +0000, adrelanos wrote:
&gt; Have you considered Hole punching techniques? [1] TCP, UDP, ICMP hole
&gt; punching... There are many techniques. I don't know if the WebSocket
&gt; protocol would prevent it.
&gt; 
&gt; STUN [2] like techniques where a third non-firewalled server helps to
&gt; traversal the NAT. (Only NAT, not used a proxy.)
&gt; 
&gt; pwnat [3] also looks interesting. It doesn't need a third server and
&gt; lets connect two nat'ed machines with each other.

Better nat punching is on the 'future research' list.

The main challenge is that if you're trying to provide a circumvention
system, then relying on a "reliably reachable third party" is exactly
what you can't do.

Whether these various "look, no hands" punching tools and tricks can be
done using only websockets on the remote side is a great question for
somebody to answer.

See also Jake's NAT investigation tech report at
http://research.torproject.org/techreports.html

(I'm cc'ing Christian Grothoff, as our resident nat punching expert.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213201419</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-13 20:14:19-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Roger Dingledine:
&gt; On Thu, Dec 13, 2012 at 06:38:03PM +0000, adrelanos wrote:
&gt;&gt; Have you considered Hole punching techniques? [1] TCP, UDP, ICMP hole
&gt;&gt; punching... There are many techniques. I don't know if the WebSocket
&gt;&gt; protocol would prevent it.
&gt;&gt;
&gt;&gt; STUN [2] like techniques where a third non-firewalled server helps to
&gt;&gt; traversal the NAT. (Only NAT, not used a proxy.)
&gt;&gt;
&gt;&gt; pwnat [3] also looks interesting. It doesn't need a third server and
&gt;&gt; lets connect two nat'ed machines with each other.
&gt; =

&gt; Better nat punching is on the 'future research' list.
&gt; =

&gt; The main challenge is that if you're trying to provide a circumvention
&gt; system, then relying on a "reliably reachable third party" is exactly
&gt; what you can't do.

I agree, the report you linked below gives indeed good reasons against.

&gt; Whether these various "look, no hands" punching tools and tricks can be
&gt; done using only websockets on the remote side is a great question for
&gt; somebody to answer.

I copied the relevant parts about pwnat from the report you linked below
and tried to rephrase it to talk only about pwnat.

&gt; We consider pwnat to be out of scope at this time due because it
requires specialized client software to access services offered behind a
NAT device. The technique implemented by pwnat is much more attractive.
It is generally friendly to privacy and does not rely on NAT router
configuration.

Is "requires specialized client software" is really a blocker? UPnP and
NAT=96PMP are also "requires specialized third party libraries".

&gt; See also Jake's NAT investigation tech report at
&gt; http://research.torproject.org/techreports.html

Great reading!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213220929</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-13 22:09:29-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Alexandre:
&gt; You can get the full details on flash proxies here:
&gt; 
&gt; https://crypto.stanford.edu/flashproxy/

I read the full paper. It's amazing.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213221502</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-13 22:15:02-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Roger Dingledine:
&gt; Whether these various "look, no hands" punching tools and tricks can be
&gt; done using only websockets on the remote side is a great question for
&gt; somebody to answer.

By the way, I found it in their design paper.

Quote:

The fact that clients must not be behind NAT is an impediment to usability.
A NAT traversal mechanism that works within our threat model would be a
great
benefit. Typical NAT traversal technologies, such as STUN (Session Traversal
Utilities for NAT) [21] and RTMFP (Real Time Media Flow Protocol) [22], rely
on a stable third-party server to facilitate the connection, which is
trivially de-
feated by the censor blocking the third party by IP address. (Also we
believe
it is better to avoid informing a third party of each flash proxy
connection if it
can be avoided.) Tricks involving low-level packet manipulation, for
example pw-
nat [23], are not available to browser sockets. Ideally, any NAT
traversal scheme
will not require both the client and the proxy to know each other=92s IP
address,
so that facilitator registration can remain unidirectional. New
technologies like
WebRTC [24] may fill this need in the future, if they become
sufficiently popular
that flash proxies=92 use of them does not stand out as unusual.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214000118</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-14 00:01:18-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Thank you for testing! This report is very helpful.

On Thu, Dec 13, 2012 at 07:59:31PM +0100, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt; &gt; - If it didn't work, was it at least clear what was wrong?
&gt; 
&gt; I thought the progress would have stopped here, but it just took much
&gt; longer than expected.
&gt; 
&gt; [Notice] Bootstrapped 50%: Loading relay descriptors.
&gt; 
&gt; Starting TBB again, reduces the time.
&gt; 
&gt; Might be the proxy that is in use, because on retrying again, I "stuck"
&gt; at 85% or 90%.

That is interesting. I have often seen Tor stall at 50%. During that
time there is no network traffic for about 60 seconds, so it's not just
that downloading descriptors is slow. After about 60 seconds, it starts
downloading descriptors. I haven't figured out why.

Stalling at 85% might mean that you got only one proxy, when two are
required to bootstrap, recently and for yet-unknown reasons.
https://lists.torproject.org/pipermail/tor-dev/2012-December/004260.html
If you go into the bundle and run the flashproxy-reg-email or
flashproxy-reg-http program, that should be enough to get you more
proxies without restarting Vidalia.

You can get better debugging information by adding something like
	--log flashproxy.txt
to the ClientTransportPlugin line in torrc.

&gt; &gt; - Were you able to use this as your main Tor process for a day?
&gt; 
&gt; Browsing is slower (due to the proxies in use I assume), but aside from
&gt; that I could use it to get the information I require.

It's slower for at least three reasons. One is that you're extending the
network path of the circuit (three Tor hops and one flash proxy hop).
Another is that the websocket bridge relay isn't particularly fast.
Another is that some browsers (only Firefox 10 at this point I think)
don't support binary WebSocket frames and we use base64-encoded text
frames for them instead.

&gt; It's an alpha bundle, but I did not expect it to dump everything where
&gt; the executable was. (Tor Browser\) I thought I would be able to select
&gt; where to extract.
&gt; 
&gt; I also saw a, to some maybe scary, console. Might be alpha stuff.

Oh, thank you. This is good to know. Probably I created the
self-extracting executable in a different way than the official bundles.
(BTW the procedure for making the Windows bundle is here:
https://gitweb.torproject.org/flashproxy.git/blob/HEAD:/doc/bundle-windows.txt.)

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214001836</emailId><senderName>Alexandre</senderName><senderEmail>al.frank.allaire@gmail.com</senderEmail><timestampReceived>2012-12-14 00:18:36-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

The "scary console" mentioned in the test report is probably
because of the console=true option in the pyinstaller
spec file. I'll have a look and confirm.

Alex

On 2012-12-13, at 7:01 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:

&gt; Thank you for testing! This report is very helpful.
&gt; 
&gt; On Thu, Dec 13, 2012 at 07:59:31PM +0100, Sebastian G. &lt;bastik.tor&gt; wrote:
&gt;&gt;&gt; - If it didn't work, was it at least clear what was wrong?
&gt;&gt; 
&gt;&gt; I thought the progress would have stopped here, but it just took much
&gt;&gt; longer than expected.
&gt;&gt; 
&gt;&gt; [Notice] Bootstrapped 50%: Loading relay descriptors.
&gt;&gt; 
&gt;&gt; Starting TBB again, reduces the time.
&gt;&gt; 
&gt;&gt; Might be the proxy that is in use, because on retrying again, I "stuck"
&gt;&gt; at 85% or 90%.
&gt; 
&gt; That is interesting. I have often seen Tor stall at 50%. During that
&gt; time there is no network traffic for about 60 seconds, so it's not just
&gt; that downloading descriptors is slow. After about 60 seconds, it starts
&gt; downloading descriptors. I haven't figured out why.
&gt; 
&gt; Stalling at 85% might mean that you got only one proxy, when two are
&gt; required to bootstrap, recently and for yet-unknown reasons.
&gt; https://lists.torproject.org/pipermail/tor-dev/2012-December/004260.html
&gt; If you go into the bundle and run the flashproxy-reg-email or
&gt; flashproxy-reg-http program, that should be enough to get you more
&gt; proxies without restarting Vidalia.
&gt; 
&gt; You can get better debugging information by adding something like
&gt; 	--log flashproxy.txt
&gt; to the ClientTransportPlugin line in torrc.
&gt; 
&gt;&gt;&gt; - Were you able to use this as your main Tor process for a day?
&gt;&gt; 
&gt;&gt; Browsing is slower (due to the proxies in use I assume), but aside from
&gt;&gt; that I could use it to get the information I require.
&gt; 
&gt; It's slower for at least three reasons. One is that you're extending the
&gt; network path of the circuit (three Tor hops and one flash proxy hop).
&gt; Another is that the websocket bridge relay isn't particularly fast.
&gt; Another is that some browsers (only Firefox 10 at this point I think)
&gt; don't support binary WebSocket frames and we use base64-encoded text
&gt; frames for them instead.
&gt; 
&gt;&gt; It's an alpha bundle, but I did not expect it to dump everything where
&gt;&gt; the executable was. (Tor Browser\) I thought I would be able to select
&gt;&gt; where to extract.
&gt;&gt; 
&gt;&gt; I also saw a, to some maybe scary, console. Might be alpha stuff.
&gt; 
&gt; Oh, thank you. This is good to know. Probably I created the
&gt; self-extracting executable in a different way than the official bundles.
&gt; (BTW the procedure for making the Windows bundle is here:
&gt; https://gitweb.torproject.org/flashproxy.git/blob/HEAD:/doc/bundle-windows.txt.)
&gt; 
&gt; David Fifield
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214125217</emailId><senderName>Veggie Monster</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-12-14 12:52:17-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

&gt; connections, so browser implementations don't let you do it.
&gt; So the user has to be able to accept connections on his end.

Apparently Chrome Canary lets you do that:

http://iceddev.github.com/blog/2012/11/05/node-js-in-chrome/ 

Vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214145319</emailId><senderName>Alexandre</senderName><senderEmail>al.frank.allaire@gmail.com</senderEmail><timestampReceived>2012-12-14 14:53:19-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Nice. Im hoping things like browser games will make
APIs like that widely implemented.

Alex
 
On 2012-12-14, at 7:52 AM, Veggie Monster &lt;vmonmoonshine@gmail.com&gt; wrote:

&gt;&gt; connections, so browser implementations don't let you do it.
&gt;&gt; So the user has to be able to accept connections on his end.
&gt; 
&gt; Apparently Chrome Canary lets you do that:
&gt; 
&gt; http://iceddev.github.com/blog/2012/11/05/node-js-in-chrome/ 
&gt; 
&gt; Vmon
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214153403</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-12-14 15:34:03-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Alexandre:
&gt; The "scary console" mentioned in the test report is probably
&gt; because of the console=true option in the pyinstaller
&gt; spec file. I'll have a look and confirm.
&gt; 
&gt; Alex
&gt; 

My report might be misleading.

When I execute "tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe" a
console window pops up and I can see where the bundle is extracted to.

(I expected a dialog, to which folder I'd like to extract it)

I said "scary console" because on Windows you don't use the console
(well yeah some do, but those don't count ;)) and seeing the console,
without knowing what it actually is or does could lead to confusion.

Beside the console during the extraction process (that's what I talked
about in the report) I see console windows when I execute
"flashproxy-reg-email.exe" or "flashproxy-reg-http.exe"; I don't think
those will be a problem, because they just pop-up and are gone; wont
miss them either. (Was not included in my report, because I hadn't
executed them manually)

Regards,
Sebastian (bastik_tor)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214155919</emailId><senderName>Alexandre</senderName><senderEmail>al.frank.allaire@gmail.com</senderEmail><timestampReceived>2012-12-14 15:59:19-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

Thanks for pointing this out. I always run the programs from a console,
in which case there is no extra pop-up console, so I hadn't noticed the issue.
We should be able to get rid of them in future releases.

Alex    

On 2012-12-14, at 10:34 AM, "Sebastian G. &lt;bastik.tor&gt;" &lt;bastik.tor@googlemail.com&gt; wrote:

&gt; Alexandre:
&gt;&gt; The "scary console" mentioned in the test report is probably
&gt;&gt; because of the console=true option in the pyinstaller
&gt;&gt; spec file. I'll have a look and confirm.
&gt;&gt; 
&gt;&gt; Alex
&gt;&gt; 
&gt; 
&gt; My report might be misleading.
&gt; 
&gt; When I execute "tor-flashproxy-browser-2.4.6-alpha-2_en-US.exe" a
&gt; console window pops up and I can see where the bundle is extracted to.
&gt; 
&gt; (I expected a dialog, to which folder I'd like to extract it)
&gt; 
&gt; I said "scary console" because on Windows you don't use the console
&gt; (well yeah some do, but those don't count ;)) and seeing the console,
&gt; without knowing what it actually is or does could lead to confusion.
&gt; 
&gt; Beside the console during the extraction process (that's what I talked
&gt; about in the report) I see console windows when I execute
&gt; "flashproxy-reg-email.exe" or "flashproxy-reg-http.exe"; I don't think
&gt; those will be a problem, because they just pop-up and are gone; wont
&gt; miss them either. (Was not included in my report, because I hadn't
&gt; executed them manually)
&gt; 
&gt; Regards,
&gt; Sebastian (bastik_tor)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213212109</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-13 21:21:09-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216 (ntor) redux</subject><body>


lines 30-32:
#  Let a,A=KEYGEN() yield a new private-public keypair in G, where a is
#  the secret key and A = EXP(g,a).  If additional checks are needed to
#  insure a valid keypair, they should be performed.

s/insure/ensure/

Should those checks be specified?  In particular, you need to ensure
that the low three bits of a are 0.  Ah, I see you say it down at line
52-53; perhaps it should be moved up here?  You also define g down at
51, but use it at 31.  In addition, are a,A,g in the above para meant to
be numbers or strings?  You'll likely need to specify the mapping
between numbers and strings (it's just little-endian bytes, as it turns
out).

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121212025211</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-12-12 02:52:11-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Wed, Dec 12, 2012 at 03:13:59AM +0200, George Kadianakis wrote:
&gt;&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; [Should we not be copying tor-dev on this thread?]
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; We definitely should.
&gt;&gt; 
&gt;&gt; Is it OK if I forward the whole thread to tor-dev (including this mail
&gt;&gt; and your reply)? Feel free to do it yourself too if you want.
&gt;
&gt; I'll copy tor-dev on this email, and not snip things in order that
&gt; context is mostly preserved.  If you think some past snippage should be
&gt; restored, feel free to forward that as well.
&gt;

Sounds good.

Hey tor-dev, if anyone is interested in the snipped parts of the
discussion, send me an email and I will forward them.

&gt;&gt; BTW, in my first email, I had tor-assistants CCed, but you stripped it
&gt;&gt; off when you replied, so I didn't add it again :)
&gt;
&gt; Oops; that was unintentional.  My bad.  But tor-dev is better, anyway.
&gt;
&gt;&gt; &gt; On Fri, Dec 07, 2012 at 02:09:21AM +0200, George Kadianakis wrote:
&gt;&gt; &gt; &lt;snip&gt;
&gt;&gt; &gt;
&gt;&gt; &gt; The trick is that both sides need to use the *same* curve: either the
&gt;&gt; &gt; main curve or the twist.  So if I watch a host I suspect is an
&gt;&gt; &gt; obfs3proxy responder and find that the first 21 bytes it outputs is
&gt;&gt; &gt; always on the same curve as the first 21 bytes it received, that's good
&gt;&gt; &gt; evidence for my suspicion.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; I see.
&gt;&gt; 
&gt;&gt; Let me formalize the protocol I tried to describe in my previous mail.
&gt;&gt; 
&gt;&gt; Alice randomly selects a bit 'b' \in {0,1}. Similar to Telex, the bit
&gt;&gt; 'b' selects whether Alice will use the normal curve E or its twist E'). 
&gt;&gt; Depending on the bit 'b', Alice generates a public key on E or E'.
&gt;&gt; 
&gt;&gt; Now, Alice sends to Bob her public key along with padding, as
&gt;&gt; described in the obfs3 spec.
&gt;&gt; 
&gt;&gt; Bob receives Alice's message and parses the first 21 bytes, which he
&gt;&gt; considers her public key. Bob checks whether the public key fits E or
&gt;&gt; E'. Depending on the curve, Bob loads up the correct domain
&gt;&gt; parameters, does a point multiplication with Alice's public key and
&gt;&gt; his private key, and derives the shared secret.
&gt;&gt; 
&gt;&gt; Now, Bob does the same dance with Alice, so that Alice can also derive
&gt;&gt; the shared secret.
&gt;&gt; 
&gt;&gt; What's the problem with this protocol?
&gt;
&gt; When Bob "does a point multiplication with Alice's public key", you mean
&gt; "Bob picks a private key y, and multiplies Alice's public key by y to
&gt; yield the shared secret".  Note that the resulting shared secret (y
&gt; times Alice's public key) will be in the same group (E or E') that
&gt; Alice's public key is in.
&gt;
&gt; Now what does Bob send to Alice?  Bob should be sending y times the
&gt; generator of the group.  Which group?  If Bob and Alice are to agree on
&gt; the shared secret, it has to be the same group Alice used.  Otherwise,
&gt; Alice's computation will necessarily end up different from Bob's (since
&gt; they'd be in different groups) and the two secrets won't match.
&gt;
&gt; So in order for this protocol to work, Bob has to always choose the same
&gt; group he received as a public key from Alice.  But that's now a
&gt; distinguisher for the protocol: if I'm watching someone I think is
&gt; running an obfsproxy3 bridge, and I notice that the first 21 bytes he
&gt; receives on any TCP connection always lies in the same group as the
&gt; first 21 bytes he sends in response, then I can be pretty confident in
&gt; my suspicion.
&gt;

Oh you are right. Got it now. Thanks!

&gt;&gt; &gt; &lt;snip&gt;
&gt;&gt; &gt; Are we married to using elliptic curves?  Is performance a serious
&gt;&gt; &gt; concern at the moment?  If not, it may be easier to use Z_p, while still
&gt;&gt; &gt; using a trick similar to the "twist":
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; No, we are not married to elliptic curves. It was just that the only
&gt;&gt; trick I knew on hiding DH public keys was the Telex trick, which uses
&gt;&gt; ECC.
&gt;&gt; 
&gt;&gt; &gt; Let p = 3 mod 4 be prime, with q=(p-1)/2 also prime, and p is at least
&gt;&gt; &gt; 1536 bits.  (2048 if there's room.)  [Use group 5 or group 14 from RFC
&gt;&gt; &gt; 3526.]  Let g be a generator of the order-q subgroup of Z_p^* (g=2 for
&gt;&gt; &gt; the two above groups from the RFC.)
&gt;&gt; &gt;
&gt;&gt; &gt; To pick a private key, pick a random 1536-bit (or 2048-bit) number, and
&gt;&gt; &gt; force the low bit to 0.  So there are 1535 (2047) bits of randomness,
&gt;&gt; &gt; which is the size of q.  Let x be that private key.  Let X = g^x mod p.
&gt;&gt; &gt;
&gt;&gt; &gt; Here's the trick:  When you send the public key, randomly decide to send
&gt;&gt; &gt; either X or p-X.  That will make the public key part a uniform 1536-bit
&gt;&gt; &gt; (2048-bit) string (well, negligibly different from uniform).
&gt;&gt; &gt;
&gt;&gt; &gt; The other side constructs y and Y=g^y mod p in the same way, and sends
&gt;&gt; &gt; either Y or p-Y.
&gt;&gt; &gt;
&gt;&gt; &gt; Note that both (p-Y)^x = Y^x mod p since x is even, and similarly
&gt;&gt; &gt; (p-X)^y = X^y mod p, so key derivation goes through unchanged.
&gt;&gt; &gt;
&gt;&gt; &gt; The downside of the larger public keys is that it puts a lower bound on
&gt;&gt; &gt; the size of the data sent by the initiator before the responder answers.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Ha. The Z_p stunt you describe is nifty! I will seriously consider it,
&gt;&gt; if the telex-curve protocol doesn't work out without a pre-shared
&gt;&gt; public key.
&gt;
&gt; Note that the above protocol assumes that p is very close to a power of
&gt; 256, but that's true of the RFC 3526 groups 5 and 14 I pointed to.
&gt;

Right.

The only issue with your trick, is that I'm not looking forward
implementing a custom DH key exchange in Python (especially the DH
parameter generation and public key validation parts).

My current plan is to do some reading and thinking on other
key-exchange schemes that might look uniformly random on the wire, and
if I can't come up with anything I will start thinking of an
implementation plan for your DH over Z_p idea.

Thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121212125901</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-12 12:59:01-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

On Wed, Dec 12, 2012 at 04:52:11AM +0200, George Kadianakis wrote:
&gt; &gt;&gt; &gt; Let p = 3 mod 4 be prime, with q=(p-1)/2 also prime, and p is at least
&gt; &gt;&gt; &gt; 1536 bits.  (2048 if there's room.)  [Use group 5 or group 14 from RFC
&gt; &gt;&gt; &gt; 3526.]  Let g be a generator of the order-q subgroup of Z_p^* (g=2 for
&gt; &gt;&gt; &gt; the two above groups from the RFC.)
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; To pick a private key, pick a random 1536-bit (or 2048-bit) number, and
&gt; &gt;&gt; &gt; force the low bit to 0.  So there are 1535 (2047) bits of randomness,
&gt; &gt;&gt; &gt; which is the size of q.  Let x be that private key.  Let X = g^x mod p.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Here's the trick:  When you send the public key, randomly decide to send
&gt; &gt;&gt; &gt; either X or p-X.  That will make the public key part a uniform 1536-bit
&gt; &gt;&gt; &gt; (2048-bit) string (well, negligibly different from uniform).
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; The other side constructs y and Y=g^y mod p in the same way, and sends
&gt; &gt;&gt; &gt; either Y or p-Y.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Note that both (p-Y)^x = Y^x mod p since x is even, and similarly
&gt; &gt;&gt; &gt; (p-X)^y = X^y mod p, so key derivation goes through unchanged.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; The downside of the larger public keys is that it puts a lower bound on
&gt; &gt;&gt; &gt; the size of the data sent by the initiator before the responder answers.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; Ha. The Z_p stunt you describe is nifty! I will seriously consider it,
&gt; &gt;&gt; if the telex-curve protocol doesn't work out without a pre-shared
&gt; &gt;&gt; public key.
&gt; &gt;
&gt; &gt; Note that the above protocol assumes that p is very close to a power of
&gt; &gt; 256, but that's true of the RFC 3526 groups 5 and 14 I pointed to.
&gt; &gt;
&gt; 
&gt; Right.
&gt; 
&gt; The only issue with your trick, is that I'm not looking forward
&gt; implementing a custom DH key exchange in Python (especially the DH
&gt; parameter generation and public key validation parts).

You're in luck!  You don't get to implement any of those parts!  ;-)

Write a class UniformDH that has hard-coded constants p (the 1536-bit
prime in group 5 of RFC 3526) and g = 2.  Compute len = the number of
bytes of p = 192.  Its init method will pick a uniformly random len-byte
string, and convert it to a long called priv.  Let flip = (priv % 2) and
priv -= flip (so flip is the old low bit of priv, and priv is now even
for sure).  Compute pub = pow(g,priv,p) and if flip == 1: pub = p - pub.
Convert pub to a len-byte string and store it as pubstr.

Add a method getpub() which returns pubstr.

Add a method getsecret(theirpub) which converts theirpub (a len-byte
string) into a long called theirpublong.  Compute secret =
pow(theirpublog,priv,p) and convert secret into a len-byte string and
return that string.

That should be it.

[You can use Crypto.Util.Number.{long_to_bytes,bytes_to_long} to
accomplish the conversions above, if you're allowed to use PyCrypto.
For the randomness, os.urandom() is fine.]

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121212161408</emailId><senderName></senderName><senderEmail>vmonmoonshine</senderEmail><timestampReceived>2012-12-12 16:14:08-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

&gt;The only issue with your trick, is that I'm not looking forward
&gt;implementing a custom DH key exchange in Python (especially the DH
&gt;parameter generation and public key validation parts).

From the conversation of Zack with Steven at the breakfast table at
Hotel Cellai, I'm pretty sure that Stegotorus is using DH based on 
elliptic curve and its twist protocol. So you can find an implementation
of it there. Though I haven't looked at the crypto part of the code myself.

Also could you please refer me to the reference that proves that X or
p-X is uniformly random. It seems to me that you are taking a quadratic
residue to an even power, so you always get a bi-quadratic residue for
X. Then if I'm the distinguisher who knows the public group, and I see that the
bi-quadratic residues appears 1/2 times instead of 1/4 of the times then
I can smell that something going on.

Take care,
Vmon

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121212162810</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-12 16:28:10-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

On Wed, Dec 12, 2012 at 11:14:08AM -0500, vmonmoonshine@gmail.com wrote:
&gt; &gt;The only issue with your trick, is that I'm not looking forward
&gt; &gt;implementing a custom DH key exchange in Python (especially the DH
&gt; &gt;parameter generation and public key validation parts).
&gt; 
&gt; From the conversation of Zack with Steven at the breakfast table at
&gt; Hotel Cellai, I'm pretty sure that Stegotorus is using DH based on 
&gt; elliptic curve and its twist protocol. So you can find an implementation
&gt; of it there. Though I haven't looked at the crypto part of the code myself.
&gt; 
&gt; Also could you please refer me to the reference that proves that X or
&gt; p-X is uniformly random. It seems to me that you are taking a quadratic
&gt; residue to an even power, so you always get a bi-quadratic residue for
&gt; X. Then if I'm the distinguisher who knows the public group, and I see that the
&gt; bi-quadratic residues appears 1/2 times instead of 1/4 of the times then
&gt; I can smell that something going on.

Z_p^* has order 2q, where q=(p-1)/2 is prime.  Since 2 is a quadratic
residue, both 2 and 4 generate all of the order-q subgroup of quadratic
residues (call the group Q), so X will be a uniform (up to
negligibility) element of Q.  Since -1 is a quadratic non-residue, X is
a quadratic residue if and only if p-X is not.  (For all 0 &lt; X &lt; p.)  So
the output (randomly X or p-X) will be a uniform element of Z_p^*, which
is negligibly different from a uniform 1536-bit string.

[There's no such thing as a "bi-quadratic residue" in this setting; all
quadratic residues in this group have one square root which is itself a
quadratic residue and one which is not.]

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213122150</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-12-13 12:21:50-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Wed, Dec 12, 2012 at 04:52:11AM +0200, George Kadianakis wrote:
&gt;&gt; &gt;&gt; &gt; Let p = 3 mod 4 be prime, with q=(p-1)/2 also prime, and p is at least
&gt;&gt; &gt;&gt; &gt; 1536 bits.  (2048 if there's room.)  [Use group 5 or group 14 from RFC
&gt;&gt; &gt;&gt; &gt; 3526.]  Let g be a generator of the order-q subgroup of Z_p^* (g=2 for
&gt;&gt; &gt;&gt; &gt; the two above groups from the RFC.)
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; To pick a private key, pick a random 1536-bit (or 2048-bit) number, and
&gt;&gt; &gt;&gt; &gt; force the low bit to 0.  So there are 1535 (2047) bits of randomness,
&gt;&gt; &gt;&gt; &gt; which is the size of q.  Let x be that private key.  Let X = g^x mod p.
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; Here's the trick:  When you send the public key, randomly decide to send
&gt;&gt; &gt;&gt; &gt; either X or p-X.  That will make the public key part a uniform 1536-bit
&gt;&gt; &gt;&gt; &gt; (2048-bit) string (well, negligibly different from uniform).
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; The other side constructs y and Y=g^y mod p in the same way, and sends
&gt;&gt; &gt;&gt; &gt; either Y or p-Y.
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; Note that both (p-Y)^x = Y^x mod p since x is even, and similarly
&gt;&gt; &gt;&gt; &gt; (p-X)^y = X^y mod p, so key derivation goes through unchanged.
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; The downside of the larger public keys is that it puts a lower bound on
&gt;&gt; &gt;&gt; &gt; the size of the data sent by the initiator before the responder answers.
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt;&gt; Ha. The Z_p stunt you describe is nifty! I will seriously consider it,
&gt;&gt; &gt;&gt; if the telex-curve protocol doesn't work out without a pre-shared
&gt;&gt; &gt;&gt; public key.
&gt;&gt; &gt;
&gt;&gt; &gt; Note that the above protocol assumes that p is very close to a power of
&gt;&gt; &gt; 256, but that's true of the RFC 3526 groups 5 and 14 I pointed to.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Right.
&gt;&gt; 
&gt;&gt; The only issue with your trick, is that I'm not looking forward
&gt;&gt; implementing a custom DH key exchange in Python (especially the DH
&gt;&gt; parameter generation and public key validation parts).
&gt;
&gt; You're in luck!  You don't get to implement any of those parts!  ;-)
&gt;

You are very right!

RFC 3526 did the parameter generation for me, and since we are doing
anonymous DH and our threat model doesn't include active attacks there
is no point in doing public key validation (Initially, I was worried
about attacks like Tor's CVE-2005-2643).

This makes things much easier.

&gt; Write a class UniformDH that has hard-coded constants p (the 1536-bit
&gt; prime in group 5 of RFC 3526) and g = 2.  Compute len = the number of
&gt; bytes of p = 192.  Its init method will pick a uniformly random len-byte
&gt; string, and convert it to a long called priv.  Let flip = (priv % 2) and
&gt; priv -= flip (so flip is the old low bit of priv, and priv is now even
&gt; for sure).  Compute pub = pow(g,priv,p) and if flip == 1: pub = p - pub.
&gt; Convert pub to a len-byte string and store it as pubstr.
&gt;
&gt; Add a method getpub() which returns pubstr.
&gt;
&gt; Add a method getsecret(theirpub) which converts theirpub (a len-byte
&gt; string) into a long called theirpublong.  Compute secret =
&gt; pow(theirpublog,priv,p) and convert secret into a len-byte string and
&gt; return that string.
&gt;
&gt; That should be it.
&gt;
&gt; [You can use Crypto.Util.Number.{long_to_bytes,bytes_to_long} to
&gt; accomplish the conversions above, if you're allowed to use PyCrypto.
&gt; For the randomness, os.urandom() is fine.]
&gt;

Many thanks for the help with the implementation! :)

&gt;    - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121208030148</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-08 03:01:48-0400</timestampReceived><subject>Re: [tor-dev] Stem code review 2012-12-04</subject><body>

Hi Sean. Thanks for code reviewing my recent commits!

&gt; 1) I do not like the new _get_event() with assert_class and assert_content.  There \
&gt; are transformations and tests and returned values all within what is a mock object \
&gt; builder, meaning it works via side-effect.  This could be surprising to test \
&gt; writers. 2) I vote to keep "self.assertTrue(isinstance(event, \
&gt; stem.response.events.StatusEvent))" style tests after producing the event.

The assertions were opt-in (ie, only triggered if the caller sets
assert_class or assert_content) so I doubt that they would be a
surprise for test writers. That said, I went ahead and reverted it. I
agree that mixing those assertions with the event constructor was a
little clunky, and it really didn't end up having the readability
improvements I hoped it would.

&gt; The quoted key/value mapping is more readable, now.  Good work.  Why not look for \
&gt; quoted positional args before non-quoted positional args?  Why not do just like \
&gt; kwarg handling?

The reason I did this for kwargs was because it was necessary to avoid
having new spec additions break us. If a new quoted positional
argument appeared then the parser would ignore it, but a quoted
keyword arg would break all prior args. For instance...

========================================

class MyEvent(Event):
  _POSITIONAL_ARGS = ("foo")
  _KEYWORD_ARGS = {
    'bar': 'bar',
  }

========================================

MY_EVENT arg1 "quoted arg" bar=stuff

... would be parsed as...

foo = arg1
bar = stuff
positional_args = ['arg1', '"quoted', 'arg"']
keyword_args = {'bar': 'stuff'}

========================================

MY_EVENT arg1 bar=stuff blarg="quoted arg"

... would be parsed as...

foo = arg1
bar = None
positional_args = ['arg1', 'bar=stuff', 'blarg="quoted', 'arg"']
keyword_args = {}

========================================

This is because the parser would see the last bit ('arg"') and
conclude that it was a positional argument since it didn't match the
key=value pattern. This isn't strictly wrong according to the spec (it
makes no allowances for new additions being quoted), though that's
probably just an oversight.

I wouldn't mind for positional arguments to also check for quoted
values. I was simply avoiding that because screwy situations could
then break us. For instance...

MY_EVENT "arg1 arg2"

... where the spec says we really *do* have two non-quoted positional
arguments. That said, if we ever saw such a thing I'd probably
conclude that tor was *trying* to confuse us. :P

Patch welcome.

&gt; Why restrict SignalEvents to expected_signals when control-spec.txt allows more?  \
&gt; This may mean changes later to add support for things the protocol already claims \
&gt; to support.

It's not being restricted. The expected_signals is only used so that
we log if we get something else. It doesn't prevent us from having
other values - I'd just like to know if we get them since the pydocs
and spec would then need to be tweaked.

&gt; I set up coverage.py for another project and I wondered if it would work with Stem. \
&gt; So, I ran "coverage run --parallel-mode --branch --omit="test*" ./run_tests.py -u \
&gt; -i -t RUN_NONE" in the stem directory.  The results are 66% - 100% coverage per \
&gt; module.  Another impressive accomplishment.  And this is only running a subset of \
&gt; the possible tests.

Sweet! Mind sending me a link to the coverage tool? I'd like to see
which modules are lacking coverage.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121208144117</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-08 14:41:17-0400</timestampReceived><subject>Re: [tor-dev] Stem code review 2012-12-04</subject><body>

[Attachment #2 (multipart/alternative)]


On Fri, Dec 7, 2012 at 8:01 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt; &gt; The quoted key/value mapping is more readable, now.  Good work.  Why not
&gt; look for quoted positional args before non-quoted positional args?  Why not
&gt; do just like kwarg handling?
&gt;

MY_EVENT "arg1 arg2"
&gt;
&gt; ... where the spec says we really *do* have two non-quoted positional
&gt; arguments. That said, if we ever saw such a thing I'd probably
&gt; conclude that tor was *trying* to confuse us. :P
&gt;
&gt; Patch welcome.
&gt;

I must not be reasoning about Event._parse_standard_attr() correctly.  I
think it is already looking for _QUOTED positional args, but is working at
it backwards from _KEYWORD_ARGS parsing.

Well, I already wanted to write unit tests for Event.  So, I'll try
exercising the class and see what I can see.


&gt; &gt; Why restrict SignalEvents to expected_signals when control-spec.txt
&gt; allows more?  This may mean changes later to add support for things the
&gt; protocol already claims to support.
&gt;
&gt; It's not being restricted. The expected_signals is only used so that
&gt; we log if we get something else. It doesn't prevent us from having
&gt; other values - I'd just like to know if we get them since the pydocs
&gt; and spec would then need to be tweaked.
&gt;

While preparing to argue further, I see the mistake I made: SIGNAL command
versus SIGNAL event.  I was reading the wrong part of the spec.  Please
disregard.


&gt; &gt; I set up coverage.py for another project and I wondered if it would work
&gt; with Stem.
&gt;


&gt; Sweet! Mind sending me a link to the coverage tool? I'd like to see
&gt; which modules are lacking coverage.
&gt;

http://nedbatchelder.com/code/coverage/
http://pypi.python.org/pypi/coverage

I've used this on three projects (not counting Stem) and it helps check
that written tests are reaching all the dark crevices of one's code.  If
you have questions, I'm happy to help. Once installed, do:

1) coverage run --parallel-mode --branch --omit="test*" ./run_tests.py -u
-i -t RUN_NONE (or some variation)
2) coverage combine
3) coverage html
4) read the nice reports in the htmlcov/ directory


-- 
Sean Robinson

[Attachment #5 (text/html)]

&lt;div class="gmail_quote"&gt;On Fri, Dec 7, 2012 at 8:01 PM, Damian Johnson &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &gt; The quoted key/value mapping is more readable, now.   \
Good work.   Why not look for quoted positional args before non-quoted positional \
args?   Why not do just like kwarg handling?&lt;br&gt;  &lt;/blockquote&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

MY_EVENT "arg1 arg2"&lt;br&gt;
&lt;br&gt;
... where the spec says we really *do* have two non-quoted positional&lt;br&gt;
arguments. That said, if we ever saw such a thing I'd probably&lt;br&gt;
conclude that tor was *trying* to confuse us. :P&lt;br&gt;
&lt;br&gt;
Patch welcome.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;I must not be reasoning about \
Event._parse_standard_attr() correctly.   I think it is already looking for _QUOTED \
positional args, but is working at it backwards from _KEYWORD_ARGS parsing.&lt;br&gt; \
&lt;br&gt;Well, I already wanted to write unit tests for Event.   So, I'll try \
exercising the class and see what I can see.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;

&lt;div class="im"&gt;&lt;br&gt;
&gt; Why restrict SignalEvents to expected_signals when control-spec.txt allows more? \
This may mean changes later to add support for things the protocol already claims to \
support.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;It's not being restricted. The expected_signals is only used so that&lt;br&gt;
we log if we get something else. It doesn't prevent us from having&lt;br&gt;
other values - I'd just like to know if we get them since the pydocs&lt;br&gt;
and spec would then need to be tweaked.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;While preparing to \
argue further, I see the mistake I made: SIGNAL command versus SIGNAL event.   I was \
reading the wrong part of the spec.   Please disregard.&lt;br&gt;  &lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="im"&gt; &gt; I set up coverage.py for another \
project and I wondered if it would work with Stem. &lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;div class="im"&gt;
&lt;/div&gt;Sweet! Mind sending me a link to the coverage tool? I'd like to see&lt;br&gt;
which modules are lacking coverage.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;a \
href="http://nedbatchelder.com/code/coverage/"&gt;http://nedbatchelder.com/code/coverage/&lt;/a&gt;&lt;br&gt;&lt;a \
href="http://pypi.python.org/pypi/coverage"&gt;http://pypi.python.org/pypi/coverage&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;I've used this on three projects (not counting Stem) and it helps check that \
written tests are reaching all the dark crevices of one's code.   If you have \
questions, I'm happy to help. Once installed, do:&lt;br&gt; &lt;br&gt;1) coverage run \
--parallel-mode --branch --omit="test*" ./run_tests.py -u -i -t RUN_NONE \
(or some variation)&lt;br&gt;2) coverage combine&lt;br&gt;3) coverage html&lt;br&gt;&lt;/div&gt;&lt;/div&gt;4) read \
the nice reports in the htmlcov/ directory&lt;br clear="all"&gt; &lt;br&gt;&lt;br&gt;-- &lt;br&gt;Sean \
Robinson&lt;br&gt;&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204131050</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-12-04 13:10:50-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 4 Dec 2012 13:25:15 +0100
Jorge Couchet &lt;jorge.couchet@gmail.com&gt; wrote:

&gt; I'm working with the ticket 7549
&gt; (https://trac.torproject.org/projects/tor/ticket/7549).
&gt; ...
&gt; So, the question is: is there any other reasonable way (efficient
&gt; -development and execution time- and safe) to see if an IP address
&gt; belongs to a Tor Exit node?

*looks at the ticket and your approach*

Why not just run and query an Onionoo server? It seems silly to
duplicate this effort. You can still put that code in a separate daemon
if you want to minimise changes to the Facilitator itself, but it won't
have to handle any of the hard stuff. Just ping it a request like GET
http://onionoo.local/details?search=10.9.8.7&amp;type=relay and parse the
returned JSON to check the exit policy.


Julian

-- 
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204175116</emailId><senderName>Michael Zeltner</senderName><senderEmail>m@niij.org</senderEmail><timestampReceived>2012-12-04 17:51:16-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

[Attachment #2 (--=-1354643479-550586-23421-1769-2-=)]


Excerpts from Julian Yon's message of 2012-12-04 14:10:50 +0100:
&gt; On Tue, 4 Dec 2012 13:25:15 +0100
&gt; Jorge Couchet &lt;jorge.couchet@gmail.com&gt; wrote:
&gt; =

&gt; &gt; I'm working with the ticket 7549
&gt; &gt; (https://trac.torproject.org/projects/tor/ticket/7549).
&gt; &gt; ...
&gt; &gt; So, the question is: is there any other reasonable way (efficient
&gt; &gt; -development and execution time- and safe) to see if an IP address
&gt; &gt; belongs to a Tor Exit node?
&gt; =

&gt; *looks at the ticket and your approach*
&gt; =

&gt; Why not just run and query an Onionoo server?

Onionoo isn't really optimised in regards to giving out lists of exits, t=
he
parsing of the JSON sounds like a duplicate effort to me. Also, shipping
Onionoo with every facilitator seems a bit overkill.

Please correct me if I'm missing something, but there's two options that =
are
easy to integrate that already exist:

Tor Bulk Exit List, if all you need is checking for access on port 80
https://check.torproject.org/cgi-bin/TorBulkExitList.py

And TorDNSEL, which would include checking for IP:port
https://www.torproject.org/projects/tordnsel.html.en

Best, Michael
-- =

https://niij.org/

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJQvjgUAAoJEMMqXa25KxLe4bkH/RW1tdSqvjx0UIIPnq32PDNd
CTFlNOWTQR3eQGOhrdz0pbwA8Yepd+knpaJcPwhw6cf2avdsvJ5qo78juIUtO8LY
/GmKj1Z6fpwhirVw2IyeOU11phdcpuRJXfN4Q2JXTYEpC9abpHkBHRFY3Mec61E7
2t7Wy8x2kvlIXMo6EK39C0CgM9VSm6jWKnmcinMlBET/0NZtm0uDuyqJn+6Je7RC
sdHzydpNT7sQJWcQbooJl39Mxhm/SYJmNsWzfH8debOJ0vf0gXeqy0vudEdg2xny
OAuaifgW443y4lCEfw5xsN17echM1SHpSO5SNI340K8G0H57J7GnJlmefJZ7hck=
=e843
-----END PGP SIGNATURE-----


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204202525</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-12-04 20:25:25-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 04 Dec 2012 18:51:16 +0100
Michael Zeltner &lt;m@niij.org&gt; wrote:

&gt; Excerpts from Julian Yon's message of 2012-12-04 14:10:50 +0100:
&gt; &gt; On Tue, 4 Dec 2012 13:25:15 +0100
&gt; &gt; Jorge Couchet &lt;jorge.couchet@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; I'm working with the ticket 7549
&gt; &gt; &gt; (https://trac.torproject.org/projects/tor/ticket/7549).
&gt; &gt; &gt; ...
&gt; &gt; &gt; So, the question is: is there any other reasonable way (efficient
&gt; &gt; &gt; -development and execution time- and safe) to see if an IP address
&gt; &gt; &gt; belongs to a Tor Exit node?
&gt; &gt; 
&gt; &gt; *looks at the ticket and your approach*
&gt; &gt; 
&gt; &gt; Why not just run and query an Onionoo server?
&gt; 
&gt; Onionoo isn't really optimised in regards to giving out lists of
&gt; exits, the parsing of the JSON sounds like a duplicate effort to me.
&gt; Also, shipping Onionoo with every facilitator seems a bit overkill.

Have you actually read the ticket? This is in contrast with running a
full Tor client and connecting to its ControlPort. Now that is what I
call overkill! And parsing JSON is hardly difficult. But you're right:
there's no need to run the entire Onionoo server. But there is need for
a mechanism to retrieve the relevant data.

&gt; Please correct me if I'm missing something, but there's two options
&gt; that are easy to integrate that already exist:
&gt; 
&gt; Tor Bulk Exit List, if all you need is checking for access on port 80
&gt; https://check.torproject.org/cgi-bin/TorBulkExitList.py
&gt; 
&gt; And TorDNSEL, which would include checking for IP:port
&gt; https://www.torproject.org/projects/tordnsel.html.en

While this is the canonical answer to the question, I held back from
saying so because: "This ideally will use a locally cached database of
exits. (Not an on-demand DNS lookup.) It should continue to work
(perhaps with some classification errors) even if the database can't be
refreshed for some time." So, it needs to maintain its own cache, be
explicitly non-realtime, be able to refresh its own database but also
to gracefully degrade to disconnected operation. By the time you've
coded all that up, you've replicated a big chunk functionality.

But, hey, maybe the requirements are poorly stated. It's hard to tell
without further info.


Julian

-- 
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121206043735</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-06 04:37:35-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

On Tue, Dec 04, 2012 at 08:25:25PM +0000, Julian Yon wrote:
&gt; On Tue, 04 Dec 2012 18:51:16 +0100
&gt; Michael Zeltner &lt;m@niij.org&gt; wrote:
&gt; 
&gt; &gt; Excerpts from Julian Yon's message of 2012-12-04 14:10:50 +0100:
&gt; &gt; &gt; On Tue, 4 Dec 2012 13:25:15 +0100
&gt; &gt; &gt; Jorge Couchet &lt;jorge.couchet@gmail.com&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I'm working with the ticket 7549
&gt; &gt; &gt; &gt; (https://trac.torproject.org/projects/tor/ticket/7549).
&gt; &gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; So, the question is: is there any other reasonable way (efficient
&gt; &gt; &gt; &gt; -development and execution time- and safe) to see if an IP address
&gt; &gt; &gt; &gt; belongs to a Tor Exit node?
&gt; &gt; &gt; 
&gt; &gt; &gt; *looks at the ticket and your approach*
&gt; &gt; &gt; 
&gt; &gt; &gt; Why not just run and query an Onionoo server?
&gt; &gt; 
&gt; &gt; Onionoo isn't really optimised in regards to giving out lists of
&gt; &gt; exits, the parsing of the JSON sounds like a duplicate effort to me.
&gt; &gt; Also, shipping Onionoo with every facilitator seems a bit overkill.
&gt; 
&gt; Have you actually read the ticket? This is in contrast with running a
&gt; full Tor client and connecting to its ControlPort. Now that is what I
&gt; call overkill! And parsing JSON is hardly difficult. But you're right:
&gt; there's no need to run the entire Onionoo server. But there is need for
&gt; a mechanism to retrieve the relevant data.

Is running a Tor client really so heavyweight? Let me explain more about
what we're trying to do. The facilitator needs to know, for each
request, whether the requestor is a Tor exit. The facilitator gets many
requests. It's on the order of several per second now, and we haven't
advertised it yet. We're designing for a few thousand requests per
second. I think that rules out anything like a DNS query or
TorBulkExitList.py per request.

A reasonable solution is to update a local cache once an hour. What
Jorge is asking is, what's the best way to feed this cache? Any source
needs to be at least authenticated and should reflect a consensus of
just one authority. This is why I suggested a local Tor client, because
it will check the authentication.

Another design (non-)constraint: There are few facilitators (currently
one), so ease of deployment is not the biggest concern. It does not have
to be as easy as setting up a relay (figure that there will be many more
websocket relays than facilitators).

The command in the ticket
	cat $HOME/auto-naming/moria1/cached-des* | python $HOME/git/contrib/exitlist &lt;ip&gt;:&lt;port&gt; &gt; exitlist
seems to me that it is reading a list of exits from a local Tor. This
seems pretty reasonable to me. I read that Onionoo reads its information
from metrics; where does metrics get the data from?

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121206073909</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-12-06 07:39:09-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

&gt;&gt;&gt;&gt; Why not just run and query an Onionoo server?
&gt;&gt;&gt;
&gt;&gt;&gt; Onionoo isn't really optimised in regards to giving out lists of
&gt;&gt;&gt; exits, the parsing of the JSON sounds like a duplicate effort to me.
&gt;&gt;&gt; Also, shipping Onionoo with every facilitator seems a bit overkill.

It's not Onionoo's primary purpose to give out lists of exit addresses,
but it provides that information, too.  It just doesn't offer good query
parameters for that use case.  But I think you should do okay
downloading the full set of relay summaries once per hour and cache that
data locally.  The URL is:

https://onionoo.torproject.org/summary?type=relay&amp;running=true

The protocol specification is here:

https://onionoo.torproject.org/

I wouldn't recommend running your own Onionoo server, particularly not
on every facilitator.  But if you cache results, you don't really have
to do that.

&gt; Is running a Tor client really so heavyweight? Let me explain more about
&gt; what we're trying to do. The facilitator needs to know, for each
&gt; request, whether the requestor is a Tor exit.

A Tor client won't tell you that, or at least not very reliably.  The
reason is that some relays are multi-homed, using different IP addresses
for registering in the network (which is what the Tor client would tell
you) and for exiting to the Internet.

If you want to learn about both network-internal and external IP
addresses, you want to download TorDNSEL's exit list.  The URL is:

http://exitlist.torproject.org/exit-addresses

Metrics archives these exit lists and has a format description here:

https://metrics.torproject.org/formats.html#exitlist

&gt; I read that Onionoo reads its information
&gt; from metrics; where does metrics get the data from?

Metrics aggregates data from network statuses, relay descriptors, and
TorDNSEL exit lists, among others.

So, in summary, I could see you using either TorDNSEL's original data or
Onionoo's summaries.

If you decide to use Onionoo, we should add Flashproxy to the list of
known clients on Onionoo's project page, so that we who we have to
contact when we're planning changes to Onionoo's protocol.

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121207040504</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-07 04:05:04-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

On Thu, Dec 06, 2012 at 08:39:09AM +0100, Karsten Loesing wrote:
&gt; &gt;&gt;&gt;&gt; Why not just run and query an Onionoo server?
&gt; &gt;&gt;&gt;
&gt; &gt;&gt;&gt; Onionoo isn't really optimised in regards to giving out lists of
&gt; &gt;&gt;&gt; exits, the parsing of the JSON sounds like a duplicate effort to me.
&gt; &gt;&gt;&gt; Also, shipping Onionoo with every facilitator seems a bit overkill.
&gt; 
&gt; It's not Onionoo's primary purpose to give out lists of exit addresses,
&gt; but it provides that information, too.  It just doesn't offer good query
&gt; parameters for that use case.  But I think you should do okay
&gt; downloading the full set of relay summaries once per hour and cache that
&gt; data locally.  The URL is:
&gt; 
&gt; https://onionoo.torproject.org/summary?type=relay&amp;running=true
&gt; 
&gt; The protocol specification is here:
&gt; 
&gt; https://onionoo.torproject.org/
&gt; 
&gt; I wouldn't recommend running your own Onionoo server, particularly not
&gt; on every facilitator.  But if you cache results, you don't really have
&gt; to do that.

Thank you, Karsten, for the helpful information.

Jorge, I think that using Onionoo as a data source is the thing to do.
You should be able to adapt your program from
https://trac.torproject.org/projects/tor/ticket/7549#comment:4. You can
assume that the Python json library is present.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121204033654</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-04 03:36:54-0400</timestampReceived><subject>Re: [tor-dev] [tor-reports] George's status report: November 2012</subject><body>

On Mon, Dec 3, 2012 at 10:19 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake George Kadianakis (desnacked@riseup.net):
&gt; 
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; - Started researching and developing obfs3, an improved version of the
&gt; &gt; obfs2 pluggable transport. The proposed protocol currently looks
&gt; &gt; like this:
&gt; &gt; https://gitweb.torproject.org/user/asn/pyobfsproxy.git/blob/refs/heads/obfs3:/doc/obfs3-protocol-spec.txt
&gt; &gt;  
&gt; &gt; The current implementation uses curve25519 to do ECDH, but
&gt; &gt; curve25519 public keys don't look random enough on the wire and we
&gt; &gt; will probably need to use a curve similar to the one that Telex
&gt; &gt; uses.
&gt; &gt; 
&gt; &gt; Ian, Philipp and Roger helped a lot with this.
&gt; 
&gt; Holy crap. In what way are the public keys in curve25519 "not random
&gt; enough"?
&gt; 
&gt; I don't really know anything of substance about ECC (especially ECC
&gt; curve choice), but if the public keys are distributed unevenly over the
&gt; keyspace, isn't this a hint of something extremely bad?

It isn't, really.

The issue is that curve25519's members do not occupy the entirety of
all 256-bit binary strings.  So when you make a "public key", there
are some 256-bit binary values it can't be.  (Roughly half of them
IIUC.)

IIUC, these 'impossible' values represent points on a related curve,
called the "twist" of curve25519. There are circumstances under which
properties of the twist can give you bad security properties, but I'm
told curve25519 doesn't have them.

Corrections on the above are welcome!

DJB's curve25519 paper is pretty easy to read and understand; I'd
suggest reading it and following up on its references.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121202012055</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-12-02 01:20:55-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, 1 Dec 2012 15:39:25 -0800
Clay Graham &lt;claytantor@gmail.com&gt; wrote:

&gt; The reason I am reaching out to you is I am I am interested in
&gt; creating a client side plugin for the TOR browser so that people can
&gt; use the client side encryption safely and privately, and without
&gt; fear. Since scripting is disabled in TOR, with good reason, I want a
&gt; plugin that is blessed by the TOR project as open and safe for
&gt; encryption.
&gt; 
&gt; Any leads on where to get started are greatly appreciated.

"Scripting is disabled in Tor" is not an entirely correct statement.
The Tor *Browser* disables scripts via NoScript; this provides the
ability to selectively enable scripting on sites you trust. However,
Tor itself is agnostic to what you use it for. If you write an
application that can talk to a SOCKS proxy, it can be pointed directly
at Tor with no need to interface with the browser.


Julian

-- 
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121202134416</emailId><senderName></senderName><senderEmail>tor</senderEmail><timestampReceived>2012-12-02 13:44:16-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

[Attachment #2 (multipart/signed)]


On 01/12/12 23:39, Clay Graham wrote:

&gt; You may remember an email from me about a week ago, and I could really
&gt; use some pointers.
&gt; 
&gt; We just stealth launched an alpha version of http://grailo.net and I
&gt; would love all of you to try it out and give me feedback. Its 100% open
&gt; source, 100% free, and you can even fork the project yourself on github. 
&gt; 
&gt; Its goal: Create a simple to use client side, RSA public key encryption
&gt; for microblogging on the internet.
&gt;  
&gt; The reason I am reaching out to you is I am I am interested in creating
&gt; a client side plugin for the TOR browser so that people can use the
&gt; client side encryption safely and privately, and without fear. Since
&gt; scripting is disabled in TOR, with good reason, I want a plugin that is
&gt; blessed by the TOR project as open and safe for encryption.
&gt; 
&gt; Any leads on where to get started are greatly appreciated.

I can't trust any javascript that your service sends to my browser over
Tor, because you don't use https. That javascript on the signup page
which generates your private key... How do I know that script came from
your server and that it's not a modified version which came from an exit
node, which is going to report the key back to them after it is generated?

At a bare minimum, before I would even start considering using this
service, every single resource that your site delivers should be sent
over https, all http connections should be redirected to https. HSTS
should be used so browsers remember to use https, and you should contact
the Chromium project to get yourself on their list of pinned SSL sites
for first time visitors (which is also used in Firefox now I believe),
and is also used in the HTTPS-Everywhere project for rule generation.

-- 
Mike Cardwell  https://grepular.com/     http://cardwellit.com/
OpenPGP Key    35BC AF1D 3AA2 1F84 3DC3  B0CF 70A5 F512 0018 461F
XMPP OTR Key   8924 B06A 7917 AAF3 DBB1  BF1B 295C 3C78 3EF1 46B4


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121202174741</emailId><senderName>Clay Graham</senderName><senderEmail>claytantor@gmail.com</senderEmail><timestampReceived>2012-12-02 17:47:41-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

[Attachment #2 (multipart/alternative)]


Mike,

&gt;I can't trust any javascript that your service sends to my browser over Tor,
because you don't use https.

Great feedback. We are installing the cert in the next couple of weeks,
there is a process for that, and the kind of cert we want takes a little
time and work. We are still looking for feedback during that period.

&gt;How do I know that script came from your server and that it's not a
modified version which came from an exit node, which is going to report the
key back to them after it is generated?

This is one reason we would like to create a client side plugin for the TOR
browser. Any ideas how this would be done? I would also like some online
pointers about how the javascript client side encryption (we are using
cryptico https://github.com/wwwtyro/cryptico)  could be hijacked so we can
endeavor to thwart these exploits.

&gt;HSTS should be used so browsers remember to use https, and you should
contact the Chromium project to get yourself on their list of pinned SSL
sites for first time visitors (which is also used in Firefox now I
believe), and is also used in the HTTPS-Everywhere project for rule
generation.

Wonderful! Thank you so much! All pointers and references are aprecciated!

Clay



On Sun, Dec 2, 2012 at 5:44 AM, &lt;tor@lists.grepular.com&gt; wrote:

&gt; On 01/12/12 23:39, Clay Graham wrote:
&gt;
&gt; &gt; You may remember an email from me about a week ago, and I could really
&gt; &gt; use some pointers.
&gt; &gt;
&gt; &gt; We just stealth launched an alpha version of http://grailo.net and I
&gt; &gt; would love all of you to try it out and give me feedback. Its 100% open
&gt; &gt; source, 100% free, and you can even fork the project yourself on github.
&gt; &gt;
&gt; &gt; Its goal: Create a simple to use client side, RSA public key encryption
&gt; &gt; for microblogging on the internet.
&gt; &gt;
&gt; &gt; The reason I am reaching out to you is I am I am interested in creating
&gt; &gt; a client side plugin for the TOR browser so that people can use the
&gt; &gt; client side encryption safely and privately, and without fear. Since
&gt; &gt; scripting is disabled in TOR, with good reason, I want a plugin that is
&gt; &gt; blessed by the TOR project as open and safe for encryption.
&gt; &gt;
&gt; &gt; Any leads on where to get started are greatly appreciated.
&gt;
&gt; I can't trust any javascript that your service sends to my browser over
&gt; Tor, because you don't use https. That javascript on the signup page
&gt; which generates your private key... How do I know that script came from
&gt; your server and that it's not a modified version which came from an exit
&gt; node, which is going to report the key back to them after it is generated?
&gt;
&gt; At a bare minimum, before I would even start considering using this
&gt; service, every single resource that your site delivers should be sent
&gt; over https, all http connections should be redirected to https. HSTS
&gt; should be used so browsers remember to use https, and you should contact
&gt; the Chromium project to get yourself on their list of pinned SSL sites
&gt; for first time visitors (which is also used in Firefox now I believe),
&gt; and is also used in the HTTPS-Everywhere project for rule generation.
&gt;
&gt; --
&gt; Mike Cardwell  https://grepular.com/     http://cardwellit.com/
&gt; OpenPGP Key    35BC AF1D 3AA2 1F84 3DC3  B0CF 70A5 F512 0018 461F
&gt; XMPP OTR Key   8924 B06A 7917 AAF3 DBB1  BF1B 295C 3C78 3EF1 46B4
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;


-- 
=================
Founder Welocally
http://welocally.com
helping local thrive

[Attachment #5 (text/html)]

&lt;div&gt;Mike,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;I can't trust any javascript \
that your service sends to my browser over &lt;/span&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;Tor, because you don't use \
https.&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Great feedback. We are installing the cert in \
the next couple of weeks, there is a process for that, and the kind of cert we want \
takes a little time and work. We are still looking for feedback during that \
period.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;How do I know that script came \
from &lt;/span&gt;&lt;span class="" style="font-family:arial,sans-serif;font-size:13px"&gt;your \
server and that it's not a modified version which came from an exit &lt;/span&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;node, which is going to \
report the key back to them after it is generated?&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;This is one reason we \
would like to create a client side plugin for the TOR browser. Any ideas how this \
would be done? I would also like some online pointers about how the javascript client \
side encryption (we are using cryptico &lt;a \
href="https://github.com/wwwtyro/cryptico"&gt;https://github.com/wwwtyro/cryptico&lt;/a&gt;)  \
could be hijacked so we can endeavor to thwart these exploits.&lt;/span&gt;&lt;/div&gt; \
&lt;div&gt;&lt;span class="" style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;&gt;&lt;/span&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;HSTS &lt;/span&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;should be used so \
browsers remember to use https, and you should contact &lt;/span&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;the Chromium project to get \
yourself on their list of pinned SSL sites &lt;/span&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;for first time visitors (which is \
also used in Firefox now I believe), &lt;/span&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;and is also used in the \
HTTPS-Everywhere project for rule generation.&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;Wonderful! Thank you so \
much! All pointers and references are aprecciated!&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Clay&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sun, Dec 2, 2012 at 5:44 AM,  \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:tor@lists.grepular.com" \
target="_blank"&gt;tor@lists.grepular.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;On 01/12/12 23:39, Clay \
Graham wrote:&lt;br&gt; &lt;br&gt;
&gt; You may remember an email from me about a week ago, and I could really&lt;br&gt;
&gt; use some pointers.&lt;br&gt;
&gt;&lt;br&gt;
&gt; We just stealth launched an alpha version of &lt;a href="http://grailo.net" \
target="_blank"&gt;http://grailo.net&lt;/a&gt; and I&lt;br&gt; &gt; would love all of you to try it \
out and give me feedback. Its 100% open&lt;br&gt; &gt; source, 100% free, and you can even \
fork the project yourself on github.&lt;br&gt; &gt;&lt;br&gt;
&gt; Its goal: Create a simple to use client side, RSA public key encryption&lt;br&gt;
&gt; for microblogging on the internet.&lt;br&gt;
&gt;&lt;br&gt;
&gt; The reason I am reaching out to you is I am I am interested in creating&lt;br&gt;
&gt; a client side plugin for the TOR browser so that people can use the&lt;br&gt;
&gt; client side encryption safely and privately, and without fear. Since&lt;br&gt;
&gt; scripting is disabled in TOR, with good reason, I want a plugin that is&lt;br&gt;
&gt; blessed by the TOR project as open and safe for encryption.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Any leads on where to get started are greatly appreciated.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;I can't trust any javascript that your service sends to my browser \
over&lt;br&gt; Tor, because you don't use https. That javascript on the signup page&lt;br&gt;
which generates your private key... How do I know that script came from&lt;br&gt;
your server and that it's not a modified version which came from an exit&lt;br&gt;
node, which is going to report the key back to them after it is generated?&lt;br&gt;
&lt;br&gt;
At a bare minimum, before I would even start considering using this&lt;br&gt;
service, every single resource that your site delivers should be sent&lt;br&gt;
over https, all http connections should be redirected to https. HSTS&lt;br&gt;
should be used so browsers remember to use https, and you should contact&lt;br&gt;
the Chromium project to get yourself on their list of pinned SSL sites&lt;br&gt;
for first time visitors (which is also used in Firefox now I believe),&lt;br&gt;
and is also used in the HTTPS-Everywhere project for rule generation.&lt;br&gt;
&lt;span class="HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
--&lt;br&gt;
Mike Cardwell  &lt;a href="https://grepular.com/" \
target="_blank"&gt;https://grepular.com/&lt;/a&gt;     &lt;a href="http://cardwellit.com/" \
target="_blank"&gt;http://cardwellit.com/&lt;/a&gt;&lt;br&gt; OpenPGP Key    35BC AF1D 3AA2 1F84 \
3DC3  B0CF 70A5 F512 0018 461F&lt;br&gt; XMPP OTR Key   8924 B06A 7917 AAF3 DBB1  BF1B 295C \
3C78 3EF1 46B4&lt;br&gt; &lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;br&gt;_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;=================&lt;br&gt;Founder Welocally&lt;br&gt;&lt;a href="http://welocally.com" \
target="_blank"&gt;http://welocally.com&lt;/a&gt;&lt;div&gt;helping local thrive&lt;/div&gt;&lt;br&gt; &lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121202190132</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-02 19:01:32-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

Clay Graham:
&gt; This is one reason we would like to create a client side plugin for the TOR
&gt; browser.

Firefox Addon, Firefox Plugin or Firefox Patch?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202191423</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-02 19:14:23-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

Clay Graham:
&gt; This is one reason we would like to create a client side plugin for the TOR
&gt; browser. Any ideas how this would be done?

What is the Tor specific question here?

I think this is a normal Firefox question "how to create a Firefox
Addon? or do I misunderstand? Just make sure your Addon goes through Tor
and does not create a Tor Browser proxy bypass.

There are a few Tor/proxy related Addons in Mozilla Addon. I'd read
their source.

https://addons.mozilla.org/en-US/firefox/search/?q=Tor&amp;appver=10.0&amp;platform=windows

Or is you specific question how to get your new Addon installed by
default in Tor Browser?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121104230314</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-11-04 23:03:14-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

Matthew Finkel:
&gt; On 11/02/2012 07:36 PM, Jacob Appelbaum wrote:
&gt;&gt; Nick Mathewson:
&gt;&gt;&gt; On Fri, Nov 2, 2012 at 1:34 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Could you blog it please?
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; I'd like to see more discussion from more people here first, and see
&gt;&gt;&gt; whether somebody steps up to say, "Yeah, I can maintain that" here, or
&gt;&gt;&gt; whether somebody else who knows more than me about the issues has something
&gt;&gt;&gt; to say.  Otherwise I don't know whether to write a "looking for maintainer"
&gt;&gt;&gt; post, a "who wants to fork" post, a "don't use Torsocks, use XYZZY" post,
&gt;&gt;&gt; or what.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; If Robert wants someone to maintain it, I'd be happy to do so. I had
&gt;&gt; wanted to extend it to do some various things anyway. I think it would
&gt;&gt; be a suitable base for a bunch of things I'd like to do in the next year.
&gt;&gt;
&gt;&gt; All the best,
&gt;&gt; Jake
&gt;&gt;
&gt; 
&gt; I saw this thread earlier but didn't have a chance to reply. I was
&gt; thinking about volunteering to patch it up and maintain it if no one
&gt; else wanted to take it on, also, but if you want to take the lead on it
&gt; then I'm more than happy to help you where ever possible...assuming this
&gt; is the direction that's decided upon.
&gt; 

Hi,

I've pushed my first branch to fix the dlopen bugs:

  https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror

It seems to fix the issues on my Ubuntu system. I could use some testing
on OS X, other GNU/Linux, and *BSD systems.

I've also updated the bug:

 http://code.google.com/p/torsocks/issues/detail?id=3

One person has found that it fixed the issue for them as well.

Also - it seems that we probably should address this issue very soon:

 http://code.google.com/p/torsocks/issues/detail?id=37

 https://trac.torproject.org/projects/tor/wiki/doc/torsocks#WorkaroundforIPv6leakbug

I've taken a stab at at least blocking IPv6 connect() calls:

  https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/ipv6

https://gitweb.torproject.org/torsocks.git/commit/95528585c1d13b0e17e9d35387c45adec9774457

Thoughts?

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202050449</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2012-12-02 05:04:49-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

On 11/25/2012 10:13 AM, Sean Robinson wrote:
&gt; On Sun, Nov 4, 2012 at 4:03 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;
&gt;&gt; I've pushed my first branch to fix the dlopen bugs:
&gt;&gt;
&gt;&gt;   https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror
&gt;&gt;
&gt;&gt; It seems to fix the issues on my Ubuntu system. I could use some testing
&gt;&gt; on OS X, other GNU/Linux, and *BSD systems.
&gt; 
&gt;   I can confirm that the dlopen branch version fixes the res_* error
&gt; output on Slackware 14.0.
&gt; 
&gt;   Thank you.  This certainly makes it easier to look for real errors.
&gt; 
Hi Sean (and list),

There's another patch available[1] that we'd like you to test. I've
already performed some simple tests, but nothing too extensive so if you
can try it and provide feedback I'd really appreciate it.

Thanks!
Matt

[1] https://code.google.com/p/torsocks/issues/detail?id=3
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202050920</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2012-12-02 05:09:20-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

On 11/25/2012 10:13 AM, Sean Robinson wrote:
&gt; On Sun, Nov 4, 2012 at 4:03 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;&gt;
&gt;&gt; I've pushed my first branch to fix the dlopen bugs:
&gt;&gt;
&gt;&gt;   https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror
&gt;&gt;
&gt;&gt; It seems to fix the issues on my Ubuntu system. I could use some testing
&gt;&gt; on OS X, other GNU/Linux, and *BSD systems.
&gt; 
&gt;   I can confirm that the dlopen branch version fixes the res_* error
&gt; output on Slackware 14.0.
&gt; 
&gt;   Thank you.  This certainly makes it easier to look for real errors.
&gt; 

This is probably a better link actually:
https://code.google.com/p/torsocks/issues/detail?id=3#c47

Thanks everyone!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202062717</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2012-12-02 06:27:17-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

&gt;&gt;&gt;   https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror
&gt;&gt;&gt; It seems to fix the issues on my Ubuntu system. I could use some testing

&gt; https://code.google.com/p/torsocks/issues/detail?id=3#c47

These compile on freebsd 8.x:
eea4dab master [production]
655e673 dlerror [untested]
6bfd0a7 dlerror+0001 [untested]

Comment or drop this:
test_torsocks.c:145: warning: 'txtquery' defined but not used
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202060815</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-02 06:08:15-0400</timestampReceived><subject>Re: [tor-dev] OutreachProgramForWomen</subject><body>

&gt; Hi everybody,
&gt;  My name is Buket Akın and I am from Turkey, Çanakkale. I am computer
&gt; engineering student at Çanakkale 18 Mart University. I am going to refer "
&gt; Stem Usability Improvements" project. Please can you tell me what can I do
&gt; about project?  Thanks very much for your kindness.

Hi Buket. Glad you want to hack on stem!

The OPW application deadline is only two days away so this is gonna be
tricky, but to apply you need to...

1. Make a contribution to stem. This doesn't need to be big, but it
does need to be something helpful that gets your hands dirty with the
codebase. See stem's bug page for some ideas...

https://trac.torproject.org/projects/tor/wiki/doc/stem/bugs
https://live.gnome.org/OutreachProgramForWomen#Make_a_Small_Contribution

2. Write an application for the project that you want to do with
details for how you'd implement it.

https://live.gnome.org/OutreachProgramForWomen#Send_in_an_Application

Let me know if you have any questions! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121202070612</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2012-12-02 07:06:12-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

On 12/02/2012 01:27 AM, grarpamp wrote:
&gt;&gt;&gt;&gt;   https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror
&gt;&gt;&gt;&gt; It seems to fix the issues on my Ubuntu system. I could use some testing
&gt; 
&gt;&gt; https://code.google.com/p/torsocks/issues/detail?id=3#c47
&gt; 
&gt; These compile on freebsd 8.x:
&gt; eea4dab master [production]
&gt; 655e673 dlerror [untested]
&gt; 6bfd0a7 dlerror+0001 [untested]

Thanks for trying them!

&gt; 
&gt; Comment or drop this:
&gt; test_torsocks.c:145: warning: 'txtquery' defined but not used

Yeah, that will be a separate commit. There are also two unused
variables that warn on Linux that I want to fix.

Thanks again.

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121202174316</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-02 17:43:16-0400</timestampReceived><subject>Re: [tor-dev] Damian's Status Report - November 2012</subject><body>

[Attachment #2 (multipart/alternative)]


On Sat, Dec 1, 2012 at 3:04 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt;
&gt; * Answered a handful of controller inquiries on our lists. Stem's now
&gt; at a point where I don't mind suggesting it to developers. If you're
&gt; scripting or writing an application around tor then please give stem a
&gt; try! I'd love to get more feedback on where its rough edges are before
&gt; we make an initial release.
&gt;

Hi all,

I agree that Stem is ready for script/application development use.  I did a
five-hour solo sprint[0] this week and I was able to move my desktop client
controller from a branch of Damian's TorCtl to a branch of Damian's
personal Stem repository with about 80% functionality.

The main changes to my controller were removing large swathes of code that
are not needed, because Stem handles error conditions well and classes
inherit from object.  So, I do less error checking on my own and I can
directly sub-class from stem.control.Controller.

I have been using Stem with gevent[1] using monkey patching for socket and
threading.  I have not had crashes from this unforeseen mixing of
libraries.  This as an indication of the high quality of the Stem code.  I
have thrown Stem into a vastly different execution context and it still
operates correctly.

[0] This sounds so much better than, "I sat in front of my computer for
five hours straight, on a Saturday."
[1] http://www.gevent.org/

-- 
Sean Robinson

[Attachment #5 (text/html)]

&lt;div class="gmail_quote"&gt;On Sat, Dec 1, 2012 at 3:04 PM, Damian Johnson &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;br&gt;
* Answered a handful of controller inquiries on our lists. Stem's now&lt;br&gt;
at a point where I don't mind suggesting it to developers. If you're&lt;br&gt;
scripting or writing an application around tor then please give stem a&lt;br&gt;
try! I'd love to get more feedback on where its rough edges are before&lt;br&gt;
we make an initial release.&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;Hi all,&lt;br&gt;&lt;br&gt;I agree that \
Stem is ready for script/application development use.   I did a five-hour solo \
sprint[0] this week and I was able to move my desktop client controller from a branch \
of Damian's TorCtl to a branch of Damian's personal Stem repository with \
about 80% functionality.&lt;br&gt; &lt;br&gt;The main changes to my controller were removing \
large swathes of code that are not needed, because Stem handles error conditions well \
and classes inherit from object.   So, I do less error checking on my own and I can \
directly sub-class from stem.control.Controller.&lt;br&gt; &lt;br&gt;I have been using Stem with \
gevent[1] using monkey patching for socket and threading.   I have not had crashes \
from this unforeseen mixing of libraries.   This as an indication of the high quality \
of the Stem code.   I have thrown Stem into a vastly different execution context and \
it still operates correctly.&lt;br&gt; &lt;br&gt;[0] This sounds so much better than, "I sat \
in front of my computer for five hours straight, on a Saturday."&lt;br&gt;[1] &lt;a \
href="http://www.gevent.org/"&gt;http://www.gevent.org/&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- &lt;br&gt;Sean \
Robinson&lt;br&gt; &lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121202203007</emailId><senderName>Clay Graham</senderName><senderEmail>claytantor@gmail.com</senderEmail><timestampReceived>2012-12-02 20:30:07-0400</timestampReceived><subject>Re: [tor-dev] Grailo.net is live (but very young)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;What is the Tor specific question here?

So the TOR Browser supports firefox add-ons? That's good to know, I assumed
they were disabled or had to be blessed. That clearly was a poor assumption.

&gt;There are a few Tor/proxy related Addons in Mozilla Addon. I'd read their
source.

This is exactly what I needed!!! Thank you so much!!! I will put my
implementation on github for peer review when we are a little carter down
the road.

Clay



On Sun, Dec 2, 2012 at 11:14 AM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:

&gt; Clay Graham:
&gt; &gt; This is one reason we would like to create a client side plugin for the
&gt; TOR
&gt; &gt; browser. Any ideas how this would be done?
&gt;
&gt; What is the Tor specific question here?
&gt;
&gt; I think this is a normal Firefox question "how to create a Firefox
&gt; Addon? or do I misunderstand? Just make sure your Addon goes through Tor
&gt; and does not create a Tor Browser proxy bypass.
&gt;
&gt; There are a few Tor/proxy related Addons in Mozilla Addon. I'd read
&gt; their source.
&gt;
&gt;
&gt; https://addons.mozilla.org/en-US/firefox/search/?q=Tor&amp;appver=10.0&amp;platform=windows
&gt;
&gt; Or is you specific question how to get your new Addon installed by
&gt; default in Tor Browser?
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;



-- 
=================
Founder Welocally
http://welocally.com
helping local thrive

[Attachment #5 (text/html)]

&gt;&lt;span class="" style="font-family:arial,sans-serif;font-size:13px"&gt;What is the \
Tor specific question here?&lt;/span&gt;&lt;div&gt;&lt;span class="" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;So the TOR Browser \
supports firefox add-ons? That's good to know, I assumed they were disabled or \
had to be blessed. That clearly was a poor assumption.&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;&gt;&lt;/span&gt;&lt;span \
class="" style="font-family:arial,sans-serif;font-size:13px"&gt;There are a few \
Tor/proxy related Addons in Mozilla Addon. I'd read &lt;/span&gt;&lt;span \
class="Apple-style-span" style="font-family:arial,sans-serif;font-size:13px"&gt;their \
source.&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span class="Apple-style-span" \
style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="Apple-style-span" style="font-family:arial,sans-serif;font-size:13px"&gt;This is \
exactly what I needed!!! Thank you so much!!! I will put my implementation on github \
for peer review when we are a little carter down the road.&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;font \
class="Apple-style-span" face="arial, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="Apple-style-span" \
style="font-family:arial,sans-serif;font-size:13px"&gt;Clay&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="Apple-style-span" style="font-family:arial,sans-serif;font-size:13px"&gt;&lt;br&gt; \
&lt;/span&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sun, Dec 2, \
2012 at 11:14 AM, adrelanos &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:adrelanos@riseup.net" \
target="_blank"&gt;adrelanos@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Clay Graham:&lt;br&gt; &lt;div class="im"&gt;&gt; This is one reason we \
would like to create a client side plugin for the TOR&lt;br&gt; &gt; browser. Any ideas how \
this would be done?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;What is the Tor specific question here?&lt;br&gt;
&lt;br&gt;
I think this is a normal Firefox question "how to create a Firefox&lt;br&gt;
Addon? or do I misunderstand? Just make sure your Addon goes through Tor&lt;br&gt;
and does not create a Tor Browser proxy bypass.&lt;br&gt;
&lt;br&gt;
There are a few Tor/proxy related Addons in Mozilla Addon. I'd read&lt;br&gt;
their source.&lt;br&gt;
&lt;br&gt;
&lt;a href="https://addons.mozilla.org/en-US/firefox/search/?q=Tor&amp;appver=10.0&amp;platform=windows" \
target="_blank"&gt;https://addons.mozilla.org/en-US/firefox/search/?q=Tor&amp;appver=10.0&amp;platform=windows&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Or is you specific question how to get your new Addon installed by&lt;br&gt;
default in Tor Browser?&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;_______________________________________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;=================&lt;br&gt;Founder Welocally&lt;br&gt;&lt;a href="http://welocally.com" \
target="_blank"&gt;http://welocally.com&lt;/a&gt;&lt;div&gt;helping local thrive&lt;/div&gt;&lt;br&gt;

&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121203203736</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-03 20:37:36-0400</timestampReceived><subject>Re: [tor-dev] Windows binary flash proxy packages</subject><body>

David Fifield:
&gt; The next step is
&gt; https://trac.torproject.org/projects/tor/ticket/7621, which is
&gt; about installing these programs into a Tor Browser Bundle. Perhaps
&gt; we should try to coordinate this into a combined pyobfsproxy/flash
&gt; proxy bundle?

There is no need for one bundle with obfsproxy, one bundle without
obfsproxy, one bundle with flash proxy, one bundle without flash proxy...

obfsproxy is so small (in file size) and flashproxy perhaps as well?

Just make one package with all binaries... Configuration is best done
in Vidalia...

Or make different packages and only differ the configuration files.

I see no need for different packages with different binaries.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121204100220</emailId><senderName>Leonardo Camargo</senderName><senderEmail>camargoleon4rdo@gmail.com</senderEmail><timestampReceived>2012-12-04 10:02:20-0400</timestampReceived><subject>[tor-dev] Looking for ways to get involved</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

First of all, if that's not a suitable message for [tor-dev], I apologise
and will promptly go for [tor-talk] instead.

I'm a CS undergrad and am time-pressed to present a graduation project
proposal. Getting involved with Tor is something that has been on my mind
for a long time, but I only now started taking the time to actually look
into it. I need to present a proposal about something specific in the next
few days, though I probably can refine/redirect my objectives in the
following weeks.

Something that really interests me is the possible move of tor traffic from
tcp to udp, in the foreseeable future. I'd like to work on something that
helps moving Tor closer to the point where this architectural change can
start happening. Network programming and security are two topics that
interest me a lot.

I need something specific of the likes of "Look into X and tell us how to
best achieve Y" or "Research W looking for a, b and c" ; something that
could realistically help and something that can be a proposal. I'm not
expecting people to teach me anything, just to point me in the right
direction so I don't waste time on something that won't be realistically
useful.

I'm not simply looking for anything that will fit as a graduation project,
I'm actually trying to combine* several goals in one*: (a) study tor in
depth, (b) help out with something realistically useful, (c) graduate. And
my wish in to continue my involvement with tor after my project is done.

My desire is to work on "my thing" rather than my (future) advisor's
thing(whatever he's got), if I come up to him with something already
thought-throught he'll be less likely to try and sway me towards something
else.

I'm reading up the docs. But right now something specific for me to present
as proposal would help a lot.

Any ideas are welcome.
Thanks,

[Attachment #5 (text/html)]

Hi, &lt;br&gt;&lt;br&gt;First of all, if that's not a suitable message for [tor-dev=
], I apologise and will promptly go for [tor-talk] instead.&lt;br&gt;&lt;br&gt;I'm =
a CS undergrad and am time-pressed to present a graduation project proposal=
. Getting involved with Tor is something that has been on my mind for a lon=
g time, but I only now started taking the time to actually look into it. I =
need to present a proposal about something specific in the next few days, t=
hough I probably can refine/redirect my objectives in the following weeks.&lt;=
br&gt;
&lt;br&gt;Something that really interests me is the possible move of tor traffic =
from tcp to udp, in the foreseeable future. I'd like to work on somethi=
ng that helps moving Tor closer to the point where this architectural chang=
e can start happening. Network programming and security are two topics that=
 interest me a lot.&lt;br&gt;
&lt;br&gt;I need something specific of the likes of "Look into X and tell us=
 how to best achieve Y" or "Research W looking for a, b and c&amp;quo=
t; ; something that could realistically help and something that can be a pr=
oposal. I'm not expecting people to teach me anything, just to point me=
 in the right direction so I don't waste time on something that won'=
;t be realistically useful.&lt;br&gt;
&lt;br&gt;I'm not simply looking for anything that will fit as a graduation p=
roject, I'm actually trying to combine&lt;b&gt; several goals in one&lt;/b&gt;: (a)=
 study tor in depth, (b) help out with something realistically useful, (c) =
graduate. And my wish in to continue my involvement with tor after my proje=
ct is done.&lt;br&gt;
&lt;br&gt;My desire is to work on "my thing" rather than my (future) ad=
visor's thing(whatever he's got), if I come up to him with somethin=
g already thought-throught he'll be less likely to try and sway me towa=
rds something else.&lt;br&gt;
&lt;br&gt;I'm reading up the docs. But right now something specific for me to=
 present as proposal would help a lot.&lt;br&gt;&lt;br&gt;Any ideas are welcome.&lt;br&gt;Tha=
nks,&lt;br&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204130148</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-04 13:01:48-0400</timestampReceived><subject>Re: [tor-dev] [tor-reports] George's status report: November 2012</subject><body>

On Mon, Dec 03, 2012 at 10:36:54PM -0500, Nick Mathewson wrote:
&gt; On Mon, Dec 3, 2012 at 10:19 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Thus spake George Kadianakis (desnacked@riseup.net):
&gt; &gt; 
&gt; &gt; &gt; Hi,
&gt; &gt; &gt; 
&gt; &gt; &gt; - Started researching and developing obfs3, an improved version of the
&gt; &gt; &gt; obfs2 pluggable transport. The proposed protocol currently looks
&gt; &gt; &gt; like this:
&gt; &gt; &gt; https://gitweb.torproject.org/user/asn/pyobfsproxy.git/blob/refs/heads/obfs3:/doc/obfs3-protocol-spec.txt
&gt; &gt; &gt;  
&gt; &gt; &gt; The current implementation uses curve25519 to do ECDH, but
&gt; &gt; &gt; curve25519 public keys don't look random enough on the wire and we
&gt; &gt; &gt; will probably need to use a curve similar to the one that Telex
&gt; &gt; &gt; uses.
&gt; &gt; &gt; 
&gt; &gt; &gt; Ian, Philipp and Roger helped a lot with this.
&gt; &gt; 
&gt; &gt; Holy crap. In what way are the public keys in curve25519 "not random
&gt; &gt; enough"?
&gt; &gt; 
&gt; &gt; I don't really know anything of substance about ECC (especially ECC
&gt; &gt; curve choice), but if the public keys are distributed unevenly over the
&gt; &gt; keyspace, isn't this a hint of something extremely bad?
&gt; 
&gt; It isn't, really.
&gt; 
&gt; The issue is that curve25519's members do not occupy the entirety of
&gt; all 256-bit binary strings.  So when you make a "public key", there
&gt; are some 256-bit binary values it can't be.  (Roughly half of them
&gt; IIUC.)

It's actually less than 1/2.  (1/8 I think it is.)  That's because 1/2
are on the twist, but then curve25519 isn't a prime-order group, so djb
(properly) suggests using the prime-order subgroup, which further cuts
things down.

&gt; IIUC, these 'impossible' values represent points on a related curve,
&gt; called the "twist" of curve25519. There are circumstances under which
&gt; properties of the twist can give you bad security properties, but I'm
&gt; told curve25519 doesn't have them.

That's right, except for the non-primeness, which is slightly
unfortunate, but Edwards curves like curve25519 can't have prime order,
so it's as close as it can be.  Using a curve like Telex's (prime order
with prime twist) saves you from having to worry about that.  The
new EC implementation in openssl should be plenty fast (but as
implemented, only gets the speed improvements on 64-bit architectures).

   - Ian (offline most of today)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121204163021</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-12-04 16:30:21-0400</timestampReceived><subject>Re: [tor-dev] tor exit node receive buffer and sending buffer</subject><body>

[Attachment #2 (multipart/alternative)]


thanks!

2012/12/4 esolve esolve &lt;esolvepolito@gmail.com&gt;

&gt; are there any specification on how tor exit node manage its receive
&gt; buffer(e.g, for receiving packets from remote webserver) and its sending
&gt; buffer(for sending packets back to the client)?
&gt;
&gt;

[Attachment #5 (text/html)]

thanks!&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2012/12/4 esolve esolve &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:esolvepolito@gmail.com" \
target="_blank"&gt;esolvepolito@gmail.com&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; are there any specification on how tor exit node manage its \
receive buffer(e.g, for receiving packets from remote webserver) and its sending \
buffer(for sending packets back to the client)?&lt;br&gt;&lt;br&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121213062209</emailId><senderName>"Angus Gardner"</senderName><senderEmail>angus@auscert.org.au</senderEmail><timestampReceived>2012-12-13 06:22:09-0400</timestampReceived><subject>[tor-dev] Idle connections in netstat</subject><body>

This is a multipart message in MIME format.

[Attachment #2 (multipart/alternative)]
This is a multipart message in MIME format.


Hi,

 

I am fairly new to Tor and have been running a relay for a couple of weeks.

I have configured a RelayBandwithRate of only 100 KB and so only see a few
active connections at any one time.

 

Recently I have been noticing, in netstat output, a high level of
established but idle TCP connections to other tor-hosts.

(Out of 96 ESTABLISHED connections there are 90 with Recv-Q &amp; Send-Q of 0.)

 

Is this part of the rolling connection set of this host or something else?

 

Eg:

#netstat -e 

Active Internet connections (w/o servers)

Proto Recv-Q Send-Q Local Address           Foreign Address         State
User       Inode    

...

tcp        0      0 my.ip:55528 digi00299.digicube:9001
ESTABLISHED tor        449100     

tcp        0      0 my.ip:56308 tor01.spacedump.ne:9001        ESTABLISHED
tor        440912     

tcp        0      0 my.ip:57934 torsrvo.snydernet:https
ESTABLISHED tor        443309     

tcp        0      0 my.ip:9001 tor18.anonymizer.:57588             TIME_WAIT
root       0          

tcp        0      0 my.ip:46943 tor.parad0x.org:https
ESTABLISHED tor        449313     

tcp        0      0 my.ip:9001 vodka.projekt16.b:51520
ESTABLISHED tor        449337     

tcp        0      0 my.ip:9001 gamma.rueckgr.at:39215
ESTABLISHED tor        449218     

tcp        0      0 my.ip:44622 dannenberg.ccc.de:https          ESTABLISHED
tor        431598     

tcp        0      0 my.ip:39656 torsrvn.snydernet:https
ESTABLISHED tor        446435     

tcp        0      0 my.ip:9001 76.72.169.90:40606
TIME_WAIT   root       0          

tcp        0    93 my.ip:9001 torproxy10.teamcy:58154           ESTABLISHED
tor        449452     

tcp        0      0 my.ip:60081 v-603-kalfa-23-10:https
ESTABLISHED tor        448047     

tcp        0   1846 my.ip:35776 tor5.anonymizer.c:https        ESTABLISHED
tor        440943     

.

 

Cheers,

Gus

 


[Attachment #5 (text/html)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=us-ascii"&gt;&lt;meta name=Generator content="Microsoft Word 14 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";
	mso-fareast-language:EN-US;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-family:"Calibri","sans-serif";
	mso-fareast-language:EN-US;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body lang=EN-AU link=blue vlink=purple&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Hi,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;I am fairly new to Tor and \
have been running a relay for a couple of weeks.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;I \
have configured a RelayBandwithRate of only 100 KB and so only see a few active \
connections at any one time.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Recently I have been noticing, in netstat output, a high level of \
established but idle TCP connections to other tor-hosts.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;(Out of 96 ESTABLISHED connections there are 90 with Recv-Q &amp; \
Send-Q of 0.)&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Is this part of the rolling connection set of this host or something \
else?&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Eg:&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;#netstat -e &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Active Internet connections (w/o servers)&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Proto Recv-Q Send-Q Local \
Address           Foreign \
Address         \
State       User       \
Inode    &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;...&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:55528 digi00299.digicube:9001 \
            ESTABLISHED \
tor        449100     \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;tcp        \
0      0 my.ip:56308 tor01.spacedump.ne:9001 \
       ESTABLISHED \
tor        440912     \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;tcp        \
0      0 my.ip:57934 torsrvo.snydernet:https \
           ESTABLISHED \
tor        443309     \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;tcp        \
0      0 my.ip:9001 tor18.anonymizer.:57588 \
            \
TIME_WAIT   root       0  \
        &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:46943 tor.parad0x.org:https   \
              \
ESTABLISHED tor        \
449313     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:9001 vodka.projekt16.b:51520 \
            ESTABLISHED \
tor        449337     \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;tcp        \
0      0 my.ip:9001 gamma.rueckgr.at:39215  \
           ESTABLISHED \
tor        449218     \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;tcp        \
0      0 my.ip:44622 \
dannenberg.ccc.de:https          \
ESTABLISHED tor        \
431598     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:39656 \
torsrvn.snydernet:https            \
ESTABLISHED tor        \
446435     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:9001 \
76.72.169.90:40606      \
                   \
TIME_WAIT   root       \
0          &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        0    93 \
my.ip:9001 torproxy10.teamcy:58154           \
ESTABLISHED tor        \
449452     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        \
0      0 my.ip:60081 \
v-603-kalfa-23-10:https              \
ESTABLISHED tor        \
448047     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;tcp        0   1846 \
my.ip:35776 tor5.anonymizer.c:https        \
ESTABLISHED tor        \
440943     &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;…&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Cheers,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Gus&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121213073129</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-12-13 07:31:29-0400</timestampReceived><subject>Re: [tor-dev] Idle connections in netstat</subject><body>

On Thu, 13 Dec 2012 16:22:09 +0000, Angus Gardner wrote:
...
&gt; Recently I have been noticing, in netstat output, a high level of
&gt; established but idle TCP connections to other tor-hosts.
&gt; 
&gt; (Out of 96 ESTABLISHED connections there are 90 with Recv-Q &amp; Send-Q of 0.)

That pretty normal. Recv-Q get drained as fast as the tor process can
read it (I don't see any nonzero on my relay), and Send-Q only takes
the time of the TCP ACK from the other side to go back to zero, so
with casual surfing over the circuits you don't see many nonzero
Q values - only a dozen of the hundreds of connections on my relay.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121222154102</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-22 15:41:02-0400</timestampReceived><subject>[tor-dev] Stem code review 2012-12-21</subject><body>

[Attachment #2 (multipart/alternative)]


Stem devs,

This is a review of Stem commits from 2012-12-11 through 2012-12-21.

Damian, you are very good at documentation, concise and informative.  I
tend to hit one or the other, but not both.  I recognize when someone gets
the right mix.  Good work.

I, too, have found logging.basicConfig[0] hides too much about how it works
and, now, I roll my own logging handler early.

Would GETINFO/GETCONF cache hit logging[1] benefit from log_once?  Or even
something between log and log_once (e.g. rate_limited_log)?

Is there any particular reason for moving away from readthedocs.org?  I'm
curious if there was more than a desire to self-host as much as possible.

Good work on the Controller.get_conf() clean-up[2].  This is easier to code
against with the predictable return types.  I have already written a new
method with this and always getting a list (event empty) reduces the amount
of error checking I had to do.

The heartbeat time tracking is a good idea[3].  But, I wonder, should this
bother with an accessor method?  Could this work as just well as an
(non-callable) attribute?

[0]:
https://gitweb.torproject.org/stem.git/commit/a7b275a3d64301da4d23137dbadd4842cc7a041f
[1]:
https://gitweb.torproject.org/stem.git/commit/9b5ff19be35ebbf8c75772a63406ba23762b37de
[2]:
https://gitweb.torproject.org/stem.git/commit/5b45d3125c811067d7c3ba0a11e324423c88d925
[3]:
https://gitweb.torproject.org/stem.git/commit/6bc92816dc4356a204fdde0f160ee344875143a3

-- 
Sean Robinson

[Attachment #5 (text/html)]

Stem devs,&lt;br&gt;&lt;br&gt;This is a review of Stem commits from 2012-12-11 through \
2012-12-21.&lt;br&gt;&lt;br&gt;Damian, you are very good at documentation, concise and \
informative.   I tend to hit one or the other, but not both.   I recognize when \
someone gets the right mix.   Good work.&lt;br&gt; &lt;br&gt;I, too, have found \
logging.basicConfig[0] hides too much about how it works and, now, I roll my own \
logging handler early.&lt;br&gt;&lt;br&gt;Would GETINFO/GETCONF cache hit logging[1] benefit from \
log_once?   Or even something between log and log_once (e.g. rate_limited_log)?&lt;br&gt; \
&lt;br&gt;Is there any particular reason for moving away from &lt;a \
href="http://readthedocs.org"&gt;readthedocs.org&lt;/a&gt;?   I'm curious if there was \
more than a desire to self-host as much as possible.&lt;br&gt;&lt;br&gt;Good work on the \
Controller.get_conf() clean-up[2].   This is easier to code against with the \
predictable return types.   I have already written a new method with this and always \
getting a list (event empty) reduces the amount of error checking I had to do.&lt;br&gt; \
&lt;br&gt;The heartbeat time tracking is a good idea[3].   But, I wonder, should this \
bother with an accessor method?   Could this work as just well as an (non-callable) \
attribute?&lt;br&gt;&lt;br clear="all"&gt;[0]: &lt;a \
href="https://gitweb.torproject.org/stem.git/commit/a7b275a3d64301da4d23137dbadd4842cc \
7a041f"&gt;https://gitweb.torproject.org/stem.git/commit/a7b275a3d64301da4d23137dbadd4842cc7a041f&lt;/a&gt;&lt;br&gt;
 [1]: &lt;a href="https://gitweb.torproject.org/stem.git/commit/9b5ff19be35ebbf8c75772a63 \
406ba23762b37de"&gt;https://gitweb.torproject.org/stem.git/commit/9b5ff19be35ebbf8c75772a63406ba23762b37de&lt;/a&gt;&lt;br&gt;[2]: \
&lt;a href="https://gitweb.torproject.org/stem.git/commit/5b45d3125c811067d7c3ba0a11e3244 \
23c88d925"&gt;https://gitweb.torproject.org/stem.git/commit/5b45d3125c811067d7c3ba0a11e324423c88d925&lt;/a&gt;&lt;br&gt;
 [3]: &lt;a href="https://gitweb.torproject.org/stem.git/commit/6bc92816dc4356a204fdde0f1 \
60ee344875143a3"&gt;https://gitweb.torproject.org/stem.git/commit/6bc92816dc4356a204fdde0f160ee344875143a3&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- \
&lt;br&gt;Sean Robinson&lt;br&gt; &lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121213165910</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-13 16:59:10-0400</timestampReceived><subject>Re: [tor-dev] Idle connections in netstat</subject><body>

Hi Gus. If you're trying to make sense of tor's netstat output then
you might find arm to be useful. Its connection panel was made for
that...

http://www.atagar.com/arm/
http://www.atagar.com/arm/images/screenshot_page2_full.png
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220013459</emailId><senderName>"Angus Gardner"</senderName><senderEmail>angus@auscert.org.au</senderEmail><timestampReceived>2012-12-20 01:34:59-0400</timestampReceived><subject>Re: [tor-dev] Idle connections in netstat</subject><body>

Hi,

Just thought I would follow up on this.

Arm is a neat tool which allows 'top'-like output on a tor relay, current
bandwith, cpu utilization, connections to other relays etc.

This dose require the control-port to be enabled in your torrc file.  eg:

## The port on which Tor will listen for local connections from Tor
## controller applications, as documented in control-spec.txt.
ControlPort 9051

And one of:
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
#HashedControlPassword
16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C
or
#CookieAuthentication 1

Tor will now listen on port 9051 for control information, this includes
instructions to shut down (and stuff which may hurt your install) or even
list connections (which may hurt the anonymity of the Tor network.)

I also have had success in using the following:
ControlListenAddress 127.0.0.1:9051
Which binds the control port to 127.0.0.1 (localhost) and is thus not
visible to the outside world. 
(Including the people on the internet port scan you just for running a Tor
node.)

Once that is set up running arm is a piece of cake.


Hope this helps someone.

Cheers,
Gus


-----Original Message-----
From: tor-dev-bounces@lists.torproject.org
[mailto:tor-dev-bounces@lists.torproject.org] On Behalf Of Damian Johnson
Sent: Friday, December 14, 2012 2:59 AM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] Idle connections in netstat

Hi Gus. If you're trying to make sense of tor's netstat output then you
might find arm to be useful. Its connection panel was made for that...

http://www.atagar.com/arm/
http://www.atagar.com/arm/images/screenshot_page2_full.png
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121219214945</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-19 21:49:45-0400</timestampReceived><subject>[tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 2:29 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
 [...]
&gt; Maybe there is no automated testing for any Tor projects? At least a
&gt; quick search on the wiki only found [1] which lists possible ways to
&gt; test (but was created 7 months ago and apparently not updated since
&gt; and collecting dust) and [2] discussing a manual test procedure for
&gt; TBB. However, tor-0.2.3.25.tar.gz does reveal some test files but the
&gt; source code ratio of production code to test code is not inspiring at
&gt; first glance:
[...]

Be aware that we've also been using 'chutney' and 'experimentor' for
integration testing.  They supplement coverage a bit, though they need
more tests, and each tends to hide certain classes of error.

&gt; Tor seems to have good planning compared to most open source projects.
&gt; So I would be interested in hearing why testing is apparently 'falling
&gt; between the cracks'. Why isn't there just 10 times more test LOC?

Not because of any hatred or disapproval of tests--just because
nobody's written that 100 kloc of testing code yet.

I think that's for two main reasons:
  * We were in a hurry when we wrote lots of the stuff we wrote.
  * Large parts of the codebase have been written in a tightly coupled
style that needs refactoring before it can be tested without a live
Tor network at hand.
  * Until Tor 0.2.2, our testing framework didn't let us have tests
that touched global state, which made our tests in general pretty
fragile.

&gt;   What
&gt; about implementing a new policy immediately: Any new production LOC
&gt; committed must be covered by tests, or peer reviewed and
&gt; democratically excluded?

Goodness knows we need more review and testing.

It doesn't seem fair to reject patches for lacking test coverage when
they are patches to code that itself lacks coverage, though.  If you
write a 5-line patch to connection_ap_rewrite_and_attach, for
instance, you probably shouldn't be on the hook for refactoring the
whole function to make it testable, though you will be hard-pressed to
write any tests for that monster without a complete refactor.

It might be a reasonable goal to try to set a plan for increasing test
coverage by a certain percentage with each release.

If you like and you have time, it would be cool to stop by the tickets
on trac.torproject.org for milestone "Tor: 0.2.4.x-final" in state
"needs_review" and look to see whether you think any of them have code
that would be amenable to new tests, or to look through currently
untested functions and try to figure out how to make more of them
tested and testable.

yrs,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220203110</emailId><senderName></senderName><senderEmail>meejah</senderEmail><timestampReceived>2012-12-20 20:31:10-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


You want to point at your tor binary, I think, not just the path
(i.e. something like "--tor ../tor-2.3.*/src/or/tor")

If you're liking Python, I'd also love some feedback on txtorcon's API
(it has 98% unit-test coverage, but doesn't depend on a running Tor,
so doesn't really help your use-case of testing Tor I suppose).

I do have a very, very experimental thing for Chutney that rips out
its templating + subprocess stuff and puts txtorcon there instead.

https://txtorcon.readthedocs.org

Cheers,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Processed by Mailcrypt 3.5.8 &lt;http://mailcrypt.sourceforge.net/&gt;

iQEcBAEBAgAGBQJQ03WNAAoJEMJgKAMSgGmnGIQIAJmerVsS0xrDnxztf5rs68W+
7V28sKVtzrCDA7N57bxGeK634J1ob4wsjftWL1tYaGwBkW+rN+h9X0tdDgH/R9vT
v0+TD3HdipZA5ICCsPL2+OBgzdXIeDqImJXqh+1K5JlA5A3BYaKsqv+AlM69pNTR
hiwjXeMoN4+19cWYOHcDkAHG7E2hRCMMcyqrVCWK6XvzzgICTfoyStFIn4bVMiDi
EkK1ff+9nag5EKC3sGpHI1EMyn9WR7dojwRj0s0QeSH4oUEdkwu+0AyDGpmMpy+/
ZP1GchgNFIuU9L70g+mgAATQpFMpTbpCXDqAWNPWK8qycoFre3bZTzWZwRhfFVk=
=/jt/
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220210657</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-20 21:06:57-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

On Thu, Dec 20, 2012 at 12:31 PM,  &lt;meejah@meejah.ca&gt; wrote:
&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA1
&gt;
&gt; You want to point at your tor binary, I think, not just the path
&gt; (i.e. something like "--tor ../tor-2.3.*/src/or/tor")

That did the trick, thanks:

$ time ./run_tests.py --integ --tor ../tor-0.2.3.25/src/or/tor
...
Shutting down tor... done
21 TESTS WERE SKIPPED
ALL OTHER TESTS PASSED (34 seconds)
real    0m34.456s

Why do the tests take so long to run? I noticed that most of the time
almost no CPU is used and hardly any network is used. Could the
individual tests be somehow run in parallel to speed things up? I
noticed a few time.sleep() calls in the .py files :-(

--
Simon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121224072959</emailId><senderName>Debamitro Chakraborti</senderName><senderEmail>debamitro@gmail.com</senderEmail><timestampReceived>2012-12-24 07:29:59-0400</timestampReceived><subject>[tor-dev] want to contribute to tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

I am a C/C++ programmer wanting to dabble in the world of open source. I
got to know of Tor and I felt the product is an important one for humanity.
I have downloaded, built and run tor and also torsocks. Are there any
coding tasks needed in tor at present? Do let me know.

Regards,
Debamitro Chakraborti
-- 
http://about.me/debamitro

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am a C/C++ programmer wanting to dabble in \
the world of open source. I got to know of Tor and I felt the product is an important \
one for humanity. I have downloaded, built and run tor and also torsocks. Are there \
any coding tasks needed in tor at present? Do let me know.&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;br clear="all"&gt;&lt;div style&gt;Debamitro Chakraborti&lt;/div&gt;-- \
&lt;br&gt;&lt;a href="http://about.me/debamitro" \
target="_blank"&gt;http://about.me/debamitro&lt;/a&gt;&lt;br&gt; &lt;/div&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121218190717</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-12-18 19:07:17-0400</timestampReceived><subject>[tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

Hi there,

Deliverable 6 for sponsor Z says:

&gt; 6. Start a tool that a censored developer can run to discover why their Tor is
&gt; failing to connect: brainstorm a list of "things to check", and sort them by
&gt; how useful they'd be to check / how hard they'd be to build. (#7137)

The deliverable is due on Feb. 28, 2013 so we should get started.

Some background about the deliverable:
The reason for this project is that debugging possible censorship events is
tedious right now. We often have no access to machines in censoring countries
and we are dependent on users creating packet dumps for us. This tool should
speed up and automate this process to some extent. Censored users should run it
and the tool should then collect data which should then somehow reach us.

I created the following wiki page which should contain all the necessary
information:
https://censorshipwiki.torproject.org/TorCensorshipAnalyzer

Please add/modify stuff and share your opinion. Since there is quite some
overlap with OONI, it would be great if the OONI people could give feedback.

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121227035500</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2012-12-27 03:55:00-0400</timestampReceived><subject>[tor-dev] Xeronet's torrc</subject><body>


I was just made aware of this "advanced" torrc configuration below. Any
comments on it, from a client-only/mobile device perspective? I can
understand how it might deanonymize you, but it might be a trade-off
that users seeking fast circumvention only may want to make.

http://xeronet.primeoptic.net/tor/torrc.php

***
Advanced Torrc Settings - Did You Edit The Config ?

This is a working example of an advanced configuration for use with the
Tor Browser Bundle.

N.B. Vidalia will show the following 'warning' message if you use this
Torrc file and specifically StrictNodes 1 : "You have asked to exclude
certain relays from all positions in your circuits. Expect hidden
services and other Tor features to be broken in unpredictable ways." If
something is broken or you cannot connect, your should set StrictNodes
to 0 again. If you don't want to see warning messages the you can always
switch them off in Vidalia &gt; Messages &gt; Options.

xeronet Torrc - v1.4 - 12/12/2012 - Download ... 'Save As'.

This file can be used to replace the existing Torrc file in your Tor
Browser Bundle &gt; Data &gt; Tor

The idea is to make Tor faster and safer for regular internet browsing
and it does work !

How does it work ? Well, Tor works just great 'out-of-the-box', however,
by tweaking settings and controlling how Tor connects to its own network
we can improve on privacy and security.

(1) Block 'Bad' Exit Nodes using: ExcludeNodes

'Bad' Exit Nodes are flagged in red here: http://torstatus.blutmagie.de

N.B. torstatus.blutmagie.de will probably load very slowly in your web
browser and might even appear to 'freeze' ! It contains a lot of 'live'
data. Be patient and it will load up OK.

(2) Block 'problematic' internet countries using: ExcludeNodes

'problematic' internet countries can be found here: http://map.opennet.net

and here: https://wikipedia.org/wiki/Internet_censorship_by_country

N.B. The 'default' list of blocked Countries has been selected by
including those Countries using Pervasive and Substantial blocking of
Internet Tools and Political, Social, Conflict and/or Security website
filtering... You have lots of Tor servers to choose from... Why should
you use a Tor server in a country that heavily filters its own citizens
or perhaps even worse... (Don't worry - In doing this you will not be
preventing access to the Tor network from users in these Countries.)

Recommended: 'problem' internet countries Block List: Afghanistan,
Algeria, Armenia, Argentina, Azerbaijan, Bangladesh, Belarus, Burma,
China, Colombia, Cuba, Egypt, Eritrea, Ethiopia, Gambia, Georgia, Ghana,
Guatemala, India, Indonesia, Iraq, Iran, Israel, Jordan, Kazakhstan,
Kuwait, Kyrgyzstan, Laos, Lebanon, Libya, Macau, Malawi, Mali, Malaysia,
Mauritania, Mexico, Moldova, Mongolia, Morocco, Nepal, Nigeria, North
Korea, Oman, Pakistan, Palestinian Territories, Paraguay, Peru,
Philippines, Qatar, Russia, Rwanda, Saudi Arabia, Somalia, South Africa,
South Korea, Sudan, Sri Lanka, Syria, Taiwan, Tajikistan, Thailand,
Tunisia, Turkey, Turkmenistan, UAE, Uganda, Uzbekistan, Venezuela,
Vietnam, Yemen, Zimbabwe.

See: https://wikipedia.org/wiki/List_of_Internet_top-level_domains for
Country Codes.

N.B. You might also consider adding / blocking your own country or
location, if it is not already included in the list. This will have
obvious benefits in increasing both your privacy and anonymity.

Additional: 'slow' internet countries (below 1000 kbps avg.) Avoid List:
Angola, Benin, Bolivia, Botswana, Burkina Faso, Burundi, Cameroon,
Central African Republic, Chad, Comoros, Republic of the Congo,
Democratic Republic of the Congo, C=F4te d'Ivoire, Djibouti, Equatorial
Guinea, Gabon, Guinea, Guinea-Bissau, Guyana, Liberia, Mozambique,
Namibia, Niger, Rwanda, Sao Tome and Pr=EDncipe, Senegal, Sierra Leone,
Swaziland, Tanzania, Uganda, Zambia.

See: http://www.akamai.com/stateoftheinternet/ for avg. internet speeds.

(3) Block potentially mis-configured servers using: ExcludeNodes

Mis-configured nodes might include: default or Unnamed servers etc.

(4) Select fast (high bandwidth) Entry servers using: EntryNodes

(5) Select fast (high bandwidth) Exit servers using: ExitNodes

Fast (high bandwidth) servers can be found here:
http://torstatus.blutmagie.de

N.B. Servers selected for this example Torrc have been chosen because
they are run by individuals or non-profit organizations with an interest
or involvement in supporting internet privacy and security, freedom of
speech and / or the free software movements i.e. torservers.net,
globenet.org, riseup.net, privacyfoundation.ch, privacyfoundation.de,
tor.noisebridge.net, fsf.org, team-cymru.org, eff.org and others.

(6) Use StrictNodes 1 to enforce the server selection.

N.B. "If StrictNodes is set to 1, Tor will treat the ExcludeNodes option
as a requirement to follow for all the circuits you generate, even if
doing so will break functionality for you. If StrictNodes is set to 0,
Tor will still try to avoid nodes in the ExcludeNodes list, but it will
err on the side of avoiding unexpected errors. Specifically, StrictNodes
0 tells Tor that it is okay to use an excluded node when it is necessary
to perform relay reachability self-tests, connect to a hidden service,
provide a hidden service to a client, fulfill a .exit request, upload
directory information, or download directory information. (Default: 0)"

(7) Use FascistFirewall 1 to force port 80 (http) and port 443 (https)
access.

N.B. "If 1, Tor will only create outgoing connections to ORs running on
ports that your firewall allows (defaults to 80 and 443; see
FirewallPorts). This will allow you to run Tor as a client behind a
firewall with restrictive policies, but will not allow you to run as a
server behind such a firewall. If you prefer more fine-grained control,
use ReachableAddresses instead." If you choose to do this then make sure
that your selected Nodes use port 80 and/or port 443

(8) Use UseEntryGuards 1 for increased security.

N.B. "If this option is set to 1, we pick a few long-term entry servers,
and try to stick with them. This is desirable because constantly
changing servers increases the odds that an adversary who owns some
servers will observe a fraction of your paths. (Defaults to 1.)"

(9) Use ClientOnly 1 for the Tor Browser Bundle.

N.B. "If set to 1, Tor will under no circumstances run as a server or
serve directory requests. The default is to run as a client unless
ORPort is configured. (Usually, you don=92t need to set this; Tor is
pretty smart at figuring out whether you are reliable and high-bandwidth
enough to be a useful server.) (Default: 0)"

(10) Tips: Do add Authority servers to your EntryNodes list. Do add
ExitNodes as EntryNodes. Don't add EntryNodes as ExitNodes ! Do block
new 'bad' Nodes in ExcludeNodes.

Do check the status of the nodes that you have selected on a regular
basis. Do find and add new bridge nodes as EnrtyNodes if you require
them for access. If you have problems connecting to Tor then changing
FascistFirewall to 0 and/or StrictNodes to 0 will probably fix the issue.

Do read the Tor Manual: https://www.torproject.org/docs/tor-manual.html
&gt; CLIENT OPTIONS

Remember: You can view or edit your Torrc file using Notepad.exe or
another text editor.

This example Torrc file will be updated when necessary, So do check back
here occasionally for a new version.

Thank you and safe browsing.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121228232625</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2012-12-28 23:26:25-0400</timestampReceived><subject>[tor-dev] Fwd: [Wikitech-l] Can we help Tor users make legitimate edits?</subject><body>

The author asked me to forward this message to tor-dev.  I can vouch
for their personal interest in making something happen here and their
being in a position of ability to do so from Wikimedia's end.  Replies
should go to wikitech-l and/or the author as well as here.  It looks
like there was quite a bit of a thread there already:
http://lists.wikimedia.org/pipermail/wikitech-l/2012-December/065345.html
(note in particular that their primary concern seems to be
"sockpuppets" rather than spammers).

---- Begin forwarded message:
From: Sumana Harihareswara &lt;sumanah@wikimedia.org&gt;
To: wikitech-l@lists.wikimedia.org
Subject: [Wikitech-l] Can we help Tor users make legitimate edits?

TL;DR: A few ideas follow on how we could possibly help legit editors
contribute from behind Tor proxies.  I am just conversant enough with
the security problems to make unworkable suggestions ;-), so please
correct me, critique &amp; suggest solutions, and perhaps volunteer to help.

The current situation:
https://en.wikipedia.org/wiki/Wikipedia:Advice_to_users_using_Tor_to_bypass_the_Great_Firewall#Need_an_account_.26_Tor_won.27t_let_you_create_one.3F
 We generally don't let anyone edit or upload from behind Tor; the
TorBlock extension stops them.  One exception: a person can create an
account, accumulate lots of good edits, and then ask for an IP block
exemption, and then use that account to edit from behind Tor.  This is
unappealing because then there's still a bunch of in-the-clear editing
that has to happen first, and because then site functionaries know that
the account is going to be making controversial edits (and could
possibly connect it to IPs in the future, right?).  And right now
there's no way to truly *anonymously* contribute from behind Tor
proxies; you have to log in.  However, since JavaScript delivery is hard
for Tor users, I'm not sure how much editing from Tor -- vandalism or
legit -- is actually happening.  (I hope for analytics on this and thus
added it to https://www.mediawiki.org/wiki/Analytics/Dreams .)  We know
at least that there are legitimate editors who would prefer to use Tor
and can't.

People have been talking about how to improve the situation for some
time -- see http://cryptome.info/wiki-no-tor.htm and
https://lists.torproject.org/pipermail/tor-dev/2012-October/004116.html
.  It'd be nice if it could actually move forward.

I've floated this problem past Tor and privacy people, and here are a
few ideas:

1) Just use the existing mechanisms more leniently.  Encourage the
communities (Wikimedia &amp; Tor) to use
https://en.wikipedia.org/wiki/Wikipedia:Request_an_account (to get an
account from behind Tor) and to let more people get IP block exemptions
even before they've made any edits (&lt; 30 people have gotten exemptions
on en.wp in 2012).  Add encouraging "get an exempt account" language to
the "you're blocked because you're using Tor" messaging.  Then if
there's an uptick in vandalism from Tor then they can just tighten up again.

2) Encourage people with closed proxies to re-vitalize
https://en.wikipedia.org/wiki/Wikipedia:WOCP .  Problem: using closed
proxies is okay for people with some threat models but not others.

3) Look at Nymble - http://freehaven.net/anonbib/#oakland11-formalizing
and http://cgi.soic.indiana.edu/~kapadia/nymble/overview.php .  It would
allow Wikimedia to distance itself from knowing people's identities, but
still allow admins to revoke permissions if people acted up.  The user
shows a real identity, gets a token, and exchanges that token over tor
for an account.  If the user abuses the site, Wikimedia site admins can
blacklist the user without ever being able to learn who they were or
what other edits they did.  More: https://cs.uwaterloo.ca/~iang/ Ian
Golberg's, Nick Hopper's, and Apu Kapadia's groups are all working on
Nymble or its derivatives.  It's not ready for production yet, I bet,
but if someone wanted a Big Project....

3a) A token authorization system (perhaps a MediaWiki extension) where
the server blindly signs a token, and then the user can use that token
to bypass the Tor blocks.  (Tyler mentioned he saw this somewhere in a
Bugzilla suggestion; I haven't found it.)

4) Allow more users the IP block exemption, possibly even automatically
after a certain number of unreverted edits, but with some kind of
FlaggedRevs integration; Tor users can edit but their changes have to be
reviewed before going live.  We could combine this with (3); Nymble
administrators or token-issuers could pledge to review edits coming from
Tor. But that latter idea sounds like a lot of social infrastructure to
set up and maintain.


Thoughts? Are any of you interested in working on this problem?  #tor on
the OFTC IRC server is full of people who'd be interested in talking
about this.

-- 
Sumana Harihareswara
Engineering Community Manager
Wikimedia Foundation
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121219132013</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-12-19 13:20:13-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

Philipp Winter &lt;identity.function@gmail.com&gt; writes:

&gt; Hi there,
&gt;
&gt; Deliverable 6 for sponsor Z says:
&gt;
&gt;&gt; 6. Start a tool that a censored developer can run to discover why their Tor is
&gt;&gt; failing to connect: brainstorm a list of "things to check", and sort them by
&gt;&gt; how useful they'd be to check / how hard they'd be to build. (#7137)
&gt;
&gt; The deliverable is due on Feb. 28, 2013 so we should get started.
&gt;
&gt; Some background about the deliverable:
&gt; The reason for this project is that debugging possible censorship events is
&gt; tedious right now. We often have no access to machines in censoring countries
&gt; and we are dependent on users creating packet dumps for us. This tool should
&gt; speed up and automate this process to some extent. Censored users should run it
&gt; and the tool should then collect data which should then somehow reach us.
&gt;
&gt; I created the following wiki page which should contain all the necessary
&gt; information:
&gt; https://censorshipwiki.torproject.org/TorCensorshipAnalyzer
&gt;
&gt; Please add/modify stuff and share your opinion. Since there is quite some
&gt; overlap with OONI, it would be great if the OONI people could give feedback.
&gt;

One thing I consider important in such a tool is unit and integration
testing. Ideally, it should be possible to run unit tests on all of
its features, to test whether they would work in a real environment
and whether any of them are trivially broken.

Unfortunately, designing and writing such unit tests is not easy since
you have to emulate a censored network. While developing daphne, me
and Arturo considered doing that by using iptables or by
monkey-patching the networking methods of Python/Twisted with methods
that censor outgoing traffic. Both of those ideas wouldn't fully
emulate a censored network, but if developed correctly they would give
you an idea of whether a test will work in Real Life or not.

I'm mentioning this because I noticed that you don't have testability
included in your feature list, and that might bite you in the
long-term. Either because you will have to spend lots of unscheduled
time writing tests, or because you won't have the time to write any
tests (and your features will break frequently, like in OONI).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121231223630</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-31 22:36:30-0400</timestampReceived><subject>[tor-dev] TorCtl Deprecation and Stem Plans</subject><body>

Hi all. Just a friendly heads up concerning a couple things going on
in our python controller space.

The first is that Mike and I have decided to deprecate TorCtl [1] and
make it a part of TorFlow (the framework used to support the Bandwidth
Authorities and SoaT). The TorCtl codebase has largely been frozen for
years out of concern for the stability of the Bandwidth Authorities
(which lack any tests).

If you're writing scripts or controller applications for Tor then
you're encouraged to move to either...

* Stem (https://stem.torproject.org/)

Library with a similar design to TorCtl, but friendlier APIs and
documentation. This has reached feature parity with TorCtl and is
still being actively developed, so if there's something it can do to
better suit your needs then please let me know!

* Txtorcon (https://txtorcon.readthedocs.org/)

Twisted controller library written by Meejah, and used in projects
like Ooni Probe.

Both of these libraries have extensive test suites and are being very
actively maintained.

========================================

The second part are my plans regarding Stem. As of early December
we've reached feature completion, covering just about everything in
the control-spec and dir-spec.

Next up is migrating our controllers. So far we've moved arm [2] (the
largest python controller we have) and the consensus-tracker [3].
Other controllers we have queued up to move are TorBEL, Tor Weather,
and the control interpretor.

I've avoided making an initial release announcement for stem because
until we have actual users of the library we won't be sure that we
nailed a nice, intuitive API (and hence, can't promise that it'll be
frozen).

On reflection this is letting the perfect be the enemy of the good.
Stem's API is unlikely to change substantially, and holding off on an
initial release poses a chicken-and-egg situation. Users want a frozen
API before using stem, but we need users before feeling confident
enough to lock down the API.

So here's what I propose. For the next couple months stem will have an
open beta. If you'd like to have input on the future of our python
controller space then please give Stem a try and tell me the
following...

* What pain points did you encounter? Is there anything that you'd
like to see changed or that we're missing?

* If your project is public then please tell me where I can find your
code. I'll review it, both to suggest improvements and see how we can
tweak stem to better suit your needs.

In the unlikely event we make a backward incompatible change I'll
check with the beta participants to be sure we don't break anyone (and
submit fixes if we do).

Thoughts? -Damian

PS. Many thanks to Ravi, Sean, Eoin, Beck, Erik, Megan,
Sathyanarayanan, and everyone else who has helped stem get to this
point. Happy New Year!

[1] https://gitweb.torproject.org/pytorctl.git
[2] http://www.atagar.com/arm/
[3] https://gitweb.torproject.org/atagar/tor-utils.git/blob/HEAD:/consensusTracker.py
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121219192920</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-19 19:29:20-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

On Wed, Dec 19, 2012 at 5:20 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; Philipp Winter &lt;identity.function@gmail.com&gt; writes:
&gt;
&gt;&gt; Hi there,
&gt;&gt;
&gt;&gt; Deliverable 6 for sponsor Z says:
&gt;&gt;
&gt;&gt;&gt; 6. Start a tool that a censored developer can run to discover why their Tor is
&gt;&gt;&gt; failing to connect: brainstorm a list of "things to check", and sort them by
&gt;&gt;&gt; how useful they'd be to check / how hard they'd be to build. (#7137)
&gt;&gt;
&gt;&gt; The deliverable is due on Feb. 28, 2013 so we should get started.
&gt;&gt;
&gt;&gt; Some background about the deliverable:
&gt;&gt; The reason for this project is that debugging possible censorship events is
&gt;&gt; tedious right now. We often have no access to machines in censoring countries
&gt;&gt; and we are dependent on users creating packet dumps for us. This tool should
&gt;&gt; speed up and automate this process to some extent. Censored users should run it
&gt;&gt; and the tool should then collect data which should then somehow reach us.
&gt;&gt;
&gt;&gt; I created the following wiki page which should contain all the necessary
&gt;&gt; information:
&gt;&gt; https://censorshipwiki.torproject.org/TorCensorshipAnalyzer
&gt;&gt;
&gt;&gt; Please add/modify stuff and share your opinion. Since there is quite some
&gt;&gt; overlap with OONI, it would be great if the OONI people could give feedback.
&gt;&gt;
&gt;
&gt; One thing I consider important in such a tool is unit and integration
&gt; testing. Ideally, it should be possible to run unit tests on all of
&gt; its features, to test whether they would work in a real environment
&gt; and whether any of them are trivially broken.
&gt;
&gt; Unfortunately, designing and writing such unit tests is not easy since
&gt; you have to emulate a censored network. While developing daphne, me
&gt; and Arturo considered doing that by using iptables or by
&gt; monkey-patching the networking methods of Python/Twisted with methods
&gt; that censor outgoing traffic. Both of those ideas wouldn't fully
&gt; emulate a censored network, but if developed correctly they would give
&gt; you an idea of whether a test will work in Real Life or not.
&gt;
&gt; I'm mentioning this because I noticed that you don't have testability
&gt; included in your feature list, and that might bite you in the
&gt; long-term. Either because you will have to spend lots of unscheduled
&gt; time writing tests, or because you won't have the time to write any
&gt; tests (and your features will break frequently, like in OONI).

Maybe there is no automated testing for any Tor projects? At least a
quick search on the wiki only found [1] which lists possible ways to
test (but was created 7 months ago and apparently not updated since
and collecting dust) and [2] discussing a manual test procedure for
TBB. However, tor-0.2.3.25.tar.gz does reveal some test files but the
source code ratio of production code to test code is not inspiring at
first glance:

$ find src/ -type f | egrep "\.c" | egrep -v "/test/" | xargs wc -l
   3721 src/or/connection_edge.c
...
   4553 src/common/util.c
 117674 total

$ find src/ -type f | egrep "\.c" | egrep "/test/" | xargs wc -l
   143 src/test/test_pt.c
...
  3134 src/test/test_util.c
 10328 total

I tried ./configure &amp;&amp; make &amp;&amp; make test and got the following output:
...
config/addressmap: OK
89 tests ok.  (1 skipped)

That's one test for every 1,322 (== 117,674 / 89) LOC.

To test code coverage then I added '-fprofile-arcs -ftest-coverage' to
the CFLAGS in the Makefiles and did make clean &amp;&amp; make &amp;&amp; make test to
rebuild and test. Next to see the code coverage in e.g. src/or/* then
I ran the following perl one-liner which runs gcov and tots up
everything:

$ gcov *.c | perl -lane 'if(m~File (.*)~){$file=$1;next;} if(m~Lines
executed:([\d\.]+)\% of (\d+)~){next if($file=~m~(/|\.h)~);
($pc,$loc)=($1,$2); $tloc+=$loc; $tlocc+=int($loc*$pc/100); $t++;
printf qq[Lines executed:%6s%% of %5u LOC in %s\n], $pc, $loc, $file;}
sub END{printf qq[Lines executed:%6.2f%% of %5u LOC in src/or/*.c or
%u lines covered in $t c source files\n], $tlocc/$tloc*100, $tloc,
$tlocc;}'
Lines executed: 44.73% of   825 LOC in 'buffers.c'
Lines executed: 16.04% of  2300 LOC in 'circuitbuild.c'
Lines executed:  0.00% of   626 LOC in 'circuitlist.c'
Lines executed:  0.00% of   739 LOC in 'circuituse.c'
Lines executed:  0.00% of   528 LOC in 'command.c'
Lines executed: 12.40% of  2855 LOC in 'config.c'
Lines executed:  0.00% of     2 LOC in 'config_codedigest.c'
Lines executed:  0.00% of  1552 LOC in 'connection.c'
Lines executed:  8.19% of  1441 LOC in 'connection_edge.c'
Lines executed:  0.00% of   821 LOC in 'connection_or.c'
Lines executed:  1.44% of  2008 LOC in 'control.c'
Lines executed:  0.00% of   187 LOC in 'cpuworker.c'
Lines executed:  4.59% of  1633 LOC in 'directory.c'
Lines executed:  6.91% of  1592 LOC in 'dirserv.c'
Lines executed: 44.72% of  1648 LOC in 'dirvote.c'
Lines executed:  0.00% of   646 LOC in 'dns.c'
Lines executed:  0.00% of   141 LOC in 'dnsserv.c'
Lines executed: 57.39% of   582 LOC in 'geoip.c'
Lines executed:  2.07% of   387 LOC in 'hibernate.c'
Lines executed:  0.00% of   943 LOC in 'main.c'
Lines executed: 66.46% of   328 LOC in 'microdesc.c'
Lines executed: 11.78% of  1053 LOC in 'networkstatus.c'
Lines executed: 17.71% of   350 LOC in 'nodelist.c'
Lines executed: 31.74% of   167 LOC in 'onion.c'
Lines executed: 63.45% of   632 LOC in 'policies.c'
Lines executed:  0.00% of   140 LOC in 'reasons.c'
Lines executed:  0.00% of  1057 LOC in 'relay.c'
Lines executed:  0.00% of   474 LOC in 'rendclient.c'
Lines executed: 25.60% of   629 LOC in 'rendcommon.c'
Lines executed:  0.00% of   123 LOC in 'rendmid.c'
Lines executed:  0.29% of  1045 LOC in 'rendservice.c'
Lines executed: 23.14% of  1223 LOC in 'rephist.c'
Lines executed: 10.75% of  1088 LOC in 'router.c'
Lines executed:  9.03% of  2513 LOC in 'routerlist.c'
Lines executed: 51.81% of  2297 LOC in 'routerparse.c'
Lines executed:  0.00% of    44 LOC in 'status.c'
Lines executed: 25.69% of   436 LOC in 'transports.c'
Lines executed: 15.57% of 35184 LOC in 'transports.c'
Lines executed: 15.55% of 70239 LOC in src/or/*.c or 10924 lines
covered in 38 c source files

Code coverage in src/common/* is somewhat better although still poor:

$ gcov *.c | perl -lane 'if(m~File (.*)~){$file=$1;next;} if(m~Lines
executed:([\d\.]+)\% of (\d+)~){next if($file=~m~(/|\.h)~);
($pc,$loc)=($1,$2); $tloc+=$loc; $tlocc+=int($loc*$pc/100); $t++;
printf qq[Lines executed:%6s%% of %5u LOC in %s\n], $pc, $loc, $file;}
sub END{printf qq[Lines executed:%6.2f%% of %5u LOC in src/common/*.c
or %u lines covered in $t c source files\n], $tlocc/$tloc*100, $tloc,
$tlocc;}'
Lines executed: 69.04% of   604 LOC in 'address.c'
Lines executed:100.00% of    23 LOC in 'aes.c'
Lines executed: 45.64% of   642 LOC in 'compat.c'
Lines executed:100.00% of    17 LOC in 'strlcat.c'
Lines executed:100.00% of    13 LOC in 'strlcpy.c'
Lines executed:  0.00% of   143 LOC in 'compat_libevent.c'
Lines executed: 91.76% of   534 LOC in 'container.c'
Lines executed: 70.94% of  1091 LOC in 'crypto.c'
Lines executed:100.00% of    21 LOC in 'di_ops.c'
Lines executed:  8.92% of   426 LOC in 'log.c'
Lines executed: 80.53% of   113 LOC in 'memarea.c'
Lines executed: 85.29% of   238 LOC in 'mempool.c'
Lines executed:  0.00% of    42 LOC in 'procmon.c'
Lines executed: 59.90% of   192 LOC in 'torgzip.c'
Lines executed:  0.00% of   918 LOC in 'tortls.c'
Lines executed: 76.27% of  1412 LOC in 'util.c'
Lines executed:  0.00% of     2 LOC in 'util_codedigest.c'
Lines executed: 55.59% of  6507 LOC in 'util_codedigest.c'
Lines executed: 55.52% of 12938 LOC in src/common/*.c or 7183 lines
covered in 18 c source files

Overall gcc sees 70,239 + 12,938 == 83,177 LOC total for src/or/*.c
and src/common/*.c, and sees 10,924 + 7,183 == 18,107 of these lines
executed after running make test. That's a grand total code coverage
of 21.77% of lines covered via make test. Better than no tests but
still very poor :-(

An interesting paper about the effects of automated testing,
production to test LOC ratios, and code coverage can be found here
[3].

Tor seems to have good planning compared to most open source projects.
So I would be interested in hearing why testing is apparently 'falling
between the cracks'. Why isn't there just 10 times more test LOC? What
about implementing a new policy immediately: Any new production LOC
committed must be covered by tests, or peer reviewed and
democratically excluded?

[1] https://trac.torproject.org/projects/tor/wiki/doc/Testing
[2] https://trac.torproject.org/projects/tor/wiki/doc/Testing/TBBSmokeTest
[3] http://research.microsoft.com/en-us/groups/ese/nagappan_tdd.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121219222006</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa@torproject.org</senderEmail><timestampReceived>2012-12-19 22:20:06-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

On Tue, Dec 18, 2012 at 7:07 PM, Philipp Winter
&lt;identity.function@gmail.com&gt; wrote:
&gt; Hi there,

Hi Philipp,

&gt; Deliverable 6 for sponsor Z says:
&gt;
&gt;&gt; 6. Start a tool that a censored developer can run to discover why their Tor is
&gt;&gt; failing to connect: brainstorm a list of "things to check", and sort them by
&gt;&gt; how useful they'd be to check / how hard they'd be to build. (#7137)
&gt;
&gt; The deliverable is due on Feb. 28, 2013 so we should get started.
&gt;
&gt; Some background about the deliverable:
&gt; The reason for this project is that debugging possible censorship events is
&gt; tedious right now. We often have no access to machines in censoring countries
&gt; and we are dependent on users creating packet dumps for us. This tool should
&gt; speed up and automate this process to some extent. Censored users should run it
&gt; and the tool should then collect data which should then somehow reach us.
&gt;
&gt; I created the following wiki page which should contain all the necessary
&gt; information:
&gt; https://censorshipwiki.torproject.org/TorCensorshipAnalyzer
&gt;
&gt; Please add/modify stuff and share your opinion. Since there is quite some
&gt; overlap with OONI, it would be great if the OONI people could give feedback.

Thanks for starting this! I have updated the page with a few extra things.

-- 
Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121221151632</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-12-21 15:16:32-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

On Dec 18, 2012, at 8:07 PM, Philipp Winter &lt;identity.function@gmail.com&gt; wrote:

&gt; Hi there,
&gt; 
&gt; Deliverable 6 for sponsor Z says:
&gt; 
&gt; &gt; 6. Start a tool that a censored developer can run to discover why their Tor is
&gt; &gt; failing to connect: brainstorm a list of "things to check", and sort them by
&gt; &gt; how useful they'd be to check / how hard they'd be to build. (#7137)
&gt; 
&gt; The deliverable is due on Feb. 28, 2013 so we should get started.
&gt; 
&gt; Some background about the deliverable:
&gt; The reason for this project is that debugging possible censorship events is
&gt; tedious right now. We often have no access to machines in censoring countries
&gt; and we are dependent on users creating packet dumps for us. This tool should
&gt; speed up and automate this process to some extent. Censored users should run it
&gt; and the tool should then collect data which should then somehow reach us.
&gt; 
&gt; I created the following wiki page which should contain all the necessary
&gt; information:
&gt; https://censorshipwiki.torproject.org/TorCensorshipAnalyzer
&gt; 
&gt; Please add/modify stuff and share your opinion. Since there is quite some
&gt; overlap with OONI, it would be great if the OONI people could give feedback.
&gt; 

I believe you should be using ooniprobe to build a the tests you are interested
in building, or you may at least be interested in looking at our code to see 
how to do the things you are interested in doing.

The main points where ooniprobe would be of use to you (now) are:

# Standard reporting format

All ooniprobe tests share a common base format depending on the test template 
your test is based on.

I recommend you look at the Test Writing tutorial to get an idea of how this
looks like:
https://ooni.torproject.org/docs/writing_tests.html

# Collection of packet captures

When you run an ooniprobe test and you have set your ooniprobe.conf file to 
"includepcap: true" then you will collect a full pcap of what has happened on 
the probes network during the test run.

Note: This requires the test to be run as root and will include *all* the network
traffic during the testing session (i.e. if the user is looking at their favorite 
kitten website while running the test, such data will be in the pcap)

# Collection of packet captures specific to the sent and received packets

When you run a ooniprobe test that inherits from the scapy test template \
(https://ooni.torproject.org/docs/api/ooni.templates.html#module-ooni.templates.scapyt) \
 the packets sent and received (i.e. that are answers to the packet(s) sent) will be 
captured.

When configured to not include the probe IP address, source IP of sent packets 
and dst IP of received packets is replaced with 127.0.0.1. (warning: if the IP 
address of the probe is present in some other parts of the packet it will not get 
stripped, for example if it's present in the ICMP citation)

# Reporting system

Currently we only support collection of YAML formatted reports (that means not 
.pcap files) and only via Tor Hidden Services.

Extending it to support reporting via HTTP(s) should be trivial and is a feature 
that we have already received a request for.

Adding support for collecting also .pcaps also probably does not require that much 
amount of time and is something that will happen in the near future.

# Things to come

ooniprobe will soon expose a HTTP based API that binds to localhost that can then
be (optionally) exposed as a Tor Hidden Service. Such API will allow researchers to
connect to a probe and run some tests and will allow us to build a JS/HTML5 client
interface to allow users to select which tests to run and monitor the status of \
running tests.

More details here:
https://ooni.torproject.org/docs/architecture.html#ooniprobe-api

For a birds-eye view of the project see:
https://ooni.torproject.org/docs/architecture.html

Even if you do not end up using ooniprobe for developing your system today, I 
highly encourage you to use the libraries that we are using so that in the 
future we can find a way to integrate code from each others projects.

The main libraries that we are using are:

* Twisted http://twistedmatrix.com
* Scapy http://www.secdev.org/projects/scapy/
* txtorcon https://github.com/meejah/txtorcon


~ Art.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121224092115</emailId><senderName>"Sebastian G. &lt;bastik.tor&gt;"</senderName><senderEmail>bastik.tor@googlemail.com</senderEmail><timestampReceived>2012-12-24 09:21:15-0400</timestampReceived><subject>Re: [tor-dev] want to contribute to tor</subject><body>

Debamitro Chakraborti:
&gt; Hi,
&gt; 
&gt; I am a C/C++ programmer wanting to dabble in the world of open source. I
&gt; got to know of Tor and I felt the product is an important one for humanity.
&gt; I have downloaded, built and run tor and also torsocks. Are there any
&gt; coding tasks needed in tor at present? Do let me know.
&gt; 
&gt; Regards,
&gt; Debamitro Chakraborti
&gt; 

Hi,

as non-Tor person I'd like to point you to:

https://www.torproject.org/getinvolved/volunteer.html.en#Projects

which lists projects with their use case and what it's written in. Below
this list there are some ideas of what could be done.

Getting an overview over the past:
https://www.torproject.org/docs/documentation.html.en#UpToSpeed

Design documents:
https://www.torproject.org/docs/documentation.html.en#DesignDoc

For developers:
https://www.torproject.org/docs/documentation.html.en#Developers

Papers about the research of anonymity:
http://freehaven.net/anonbib/topic.html#Anonymous_20communication

List of papers sorted by date, some cover Tor directly:
http://freehaven.net/anonbib/date.html

The Bug Tracker gives something to do on Tor [1], when looking for open
tickets regarding Tor with the keyword "easy" and Vidalia [2] looking
for all open tickets.

[1]
https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status= \
new&amp;status=reopened&amp;component=Tor&amp;order=priority&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=priority&amp;col=milestone&amp;keywords=~easy


[2]
https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status=new&amp;status=reopened&amp;component=Vidalia&amp;order=priority


Actual developers and Tor officials have more insight on what's useful
to read and what you could do.

Thank you for your interest in Tor.

Regards,
Sebastian (bastik_tor)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121220224324</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 22:43:24-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

&gt;&gt; You want to point at your tor binary, I think, not just the path
&gt;&gt; (i.e. something like "--tor ../tor-2.3.*/src/or/tor")
&gt;
&gt; That did the trick, thanks:

Oops, I'm sorry about not being clearer about that.

&gt; Why do the tests take so long to run? I noticed that most of the time
&gt; almost no CPU is used and hardly any network is used.

You consider 34 seconds a long time? Heh, the test suite we have at my
work takes on the order of twenty minutes to run...

You can see the individual test runtimes to get an idea of where the
time's going. The longest tests are things that parse the entire
consensus. The sleep() calls you mentioned account for precious little
(in total a few seconds) which is mostly to test things like "Tor
emits a BW event every second". Patches welcome.

&gt; Could the
&gt; individual tests be somehow run in parallel to speed things up?

See "Run integration targets in parallel" on...

https://trac.torproject.org/projects/tor/wiki/doc/stem

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121221161033</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-21 16:10:33-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

Hi Simon, I've made some fixes to hopefully avoid confusion about this
in the future (admittedly it was a really bad error message).

Better sanity checking for the tor command...
https://gitweb.torproject.org/stem.git/commitdiff/e22a753058a2b9c61301c62e2d2123ccea046f29

Reporting testing as having failed if tor can't start...
https://gitweb.torproject.org/stem.git/commitdiff/bf2f7f2a461b535ddd21728e29dc2091ef35a74d

Thanks for the catches! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121223011632</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-23 01:16:32-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

On Thu, Dec 20, 2012 at 2:43 PM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt;&gt; You want to point at your tor binary, I think, not just the path
&gt;&gt;&gt; (i.e. something like "--tor ../tor-2.3.*/src/or/tor")
&gt;&gt;
&gt;&gt; That did the trick, thanks:
&gt;
&gt; Oops, I'm sorry about not being clearer about that.

No problem.

&gt;&gt; Why do the tests take so long to run? I noticed that most of the time
&gt;&gt; almost no CPU is used and hardly any network is used.
&gt;
&gt; You consider 34 seconds a long time? Heh, the test suite we have at my
&gt; work takes on the order of twenty minutes to run...

Yes :-) I've seen projects which have tests which take nearly 10 hours
to run. However, the longer the tests take to run then the less likely
that developers will run them. IMO all tests should ideally take no
more than 1 to 2 minutes to run. So 34 seconds is pretty good except
that ideally Tor needs to have about 100 times as many tests to get
code coverage and quality (of Tor itself) up to the 90% plus range. So
with this few tests taking 34 seconds then 100 times more tests would
take in the many minutes / hours range. I'm thinking that many
thousands of tests should take no longer than 1 to 2 minutes to run.

&gt; You can see the individual test runtimes to get an idea of where the
&gt; time's going. The longest tests are things that parse the entire
&gt; consensus. The sleep() calls you mentioned account for precious little
&gt; (in total a few seconds) which is mostly to test things like "Tor
&gt; emits a BW event every second". Patches welcome.

It would be great if the tests themselves reported their own times.
And also had a common output format to the standard Tor make test
results. When I run the tests then it's easy to see which ones take
longer because there are large pauses as text scrolls up the screen.
However, during those pauses then I'm seeing almost no CPU, network,
or disk activity which leads me to believe that some tests are not
written as well as they could be.

&gt;&gt; Could the
&gt;&gt; individual tests be somehow run in parallel to speed things up?
&gt;
&gt; See "Run integration targets in parallel" on...
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/doc/stem

Thanks. So that's a feature on the todo list :-) It looks like the
tests are starting up daemons using fixed ports which stops other
tests from running in parallel. In the past I have solved this problem
by getting common test code to start a particular daemon listening on
port zero which makes the OS choose a non-used port for listening on.
When doing this then the common test code needs to somehow discover
which port the daemon ends up listening on when it is started. A
common way to do this is to get the daemon to output the port to its
log file. In this way the common test code not only discovers which
unique port the daemon is listening on, but also for daemons which
take a little time to start up, then the log output with the listening
port may also signify when the daemon is ready for work. In this way
many tests can run in parallel without having to worry about port
collision. However, the production code for the daemon being tested
may have to be changed in order to be able to listen on port zero
and/or report the port that it actually ends up listening on.

So what's the difference between Stem tests and 'Chutney'? AFAIK
Chutney is a bunch of WIP Python scripts to setup and execute
end-to-end Tor tests. Are the Stem tests not also doing something very
similar? Why are neither set of tests included in the Tor repo so that
they can be run using make test?

--
Simon

&gt; Cheers! -Damian
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121223024250</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-23 02:42:50-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

&gt; Yes :-) I've seen projects which have tests which take nearly 10 hours
&gt; to run. However, the longer the tests take to run then the less likely
&gt; that developers will run them.

Agreed. I run stem's unit tests more often than the integ tests since
those have the runtime of around five seconds. For the integ tests I
usually supply the '--test' argument so it only runs the test that I'm
interested in.

&gt; ... except
&gt; that ideally Tor needs to have about 100 times as many tests to get
&gt; code coverage and quality (of Tor itself) up to the 90% plus range. So
&gt; with this few tests taking 34 seconds then 100 times more tests would
&gt; take in the many minutes / hours range.

Not necessarily. It mostly depends on what the tests do - there's a
few tests that take around five seconds each and a whole lot of other
ones that take a few milliseconds. We could greatly expand stem's test
coverage of tor without impacting the runtime much, and could probably
lower the runtime a fair bit if we put some more effort into it.

&gt; It would be great if the tests themselves reported their own times.

Feel free to add an option for this, it would be reasonably easy to
do. Personally I find that it's enough to know the test module that's
taking a while, but I could see per-test runtimes being helpful.

&gt; And also had a common output format to the standard Tor make test
&gt; results.

I haven't looked at tor's testing output. Is it better? I invested
quite a bit of time in making stem's test output nice and easily
readable.

&gt; However, during those pauses then I'm seeing almost no CPU, network,
&gt; or disk activity which leads me to believe that some tests are not
&gt; written as well as they could be.

I just ran the integ tests and it pegged the cpu of my poor little
netbook (it also took 63 seconds - it would be nice if it only took 34
seconds like your system...). I'm not sure why it isn't showing
significant resource use on your system.

&gt; It looks like the
&gt; tests are starting up daemons using fixed ports which stops other
&gt; tests from running in parallel.

This shouldn't be an issue. Multiple controller can bind to the control port.

&gt; So what's the difference between Stem tests and 'Chutney'?

Stem is a controller library with integration tests to check its
interaction with a live tor instance. Its tests focus on the behavior
of tor's control interface.

Chutney however is a framework specifically for testing how multiple
tor instances interact. It's under very light development by
comparison to stem...

https://gitweb.torproject.org/nickm/chutney.git/shortlog
https://gitweb.torproject.org/stem.git/shortlog

&gt; Why are neither set of tests included in the Tor repo so that
&gt; they can be run using make test?

Because they're both separate applications from the core tor
executable. Mixing the projects (and their git histories) would be
confusing. I would like to see stem be more actively used in core tor
development for testing though. In an ideal world new tor controller
features would include a corresponding test in stem...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121223204108</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-23 20:41:08-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

[Attachment #2 (multipart/alternative)]


On Sat, Dec 22, 2012 at 7:42 PM, Damian Johnson &lt;atagar@torproject.org&gt;wrote:

&gt;
&gt; On Sat, Dec 22, 2012 at 6:16 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt; &gt; So what's the difference between Stem tests and 'Chutney'?
&gt;
&gt; Stem is a controller library with integration tests to check its
&gt; interaction with a live tor instance. Its tests focus on the behavior
&gt; of tor's control interface.
&gt;
&gt; Chutney however is a framework specifically for testing how multiple
&gt; tor instances interact. It's under very light development by
&gt; comparison to stem...
&gt;
&gt; https://gitweb.torproject.org/nickm/chutney.git/shortlog
&gt; https://gitweb.torproject.org/stem.git/shortlog
&gt;
&gt; &gt; Why are neither set of tests included in the Tor repo so that
&gt; &gt; they can be run using make test?
&gt;
&gt; Because they're both separate applications from the core tor
&gt; executable. Mixing the projects (and their git histories) would be
&gt; confusing. I would like to see stem be more actively used in core tor
&gt; development for testing though. In an ideal world new tor controller
&gt; features would include a corresponding test in stem...
&gt;

Simon,

I don't know about Chutney, but Stem is a separate effort from Tor.  Stem
is related to Tor, is hosted by the project, and there is much
communication between the two, but running the Stem tests to learn about
Tor code would not be helpful.

As Damian says, Stem could be used to build tests exercising the controller
side of Tor code.  However, those would be Tor tests, not Stem tests.

-- 
Sean Robinson

[Attachment #5 (text/html)]

&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Dec 22, 2012 at 7:42 PM, Damian Johnson \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;div class="im"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="im"&gt;On Sat, Dec 22, \
2012 at 6:16 PM, Simon &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:simonhf@gmail.com" \
target="_blank"&gt;simonhf@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &gt; So what's the \
difference between Stem tests and 'Chutney'?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;Stem is a controller library with integration tests to check its&lt;br&gt;
interaction with a live tor instance. Its tests focus on the behavior&lt;br&gt;
of tor's control interface.&lt;br&gt;
&lt;br&gt;
Chutney however is a framework specifically for testing how multiple&lt;br&gt;
tor instances interact. It's under very light development by&lt;br&gt;
comparison to stem...&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/nickm/chutney.git/shortlog" \
target="_blank"&gt;https://gitweb.torproject.org/nickm/chutney.git/shortlog&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://gitweb.torproject.org/stem.git/shortlog" \
target="_blank"&gt;https://gitweb.torproject.org/stem.git/shortlog&lt;/a&gt;&lt;br&gt; &lt;div \
class="im"&gt;&lt;br&gt; &gt; Why are neither set of tests included in the Tor repo so \
that&lt;br&gt; &gt; they can be run using make test?&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Because they're both separate applications from the core tor&lt;br&gt;
executable. Mixing the projects (and their git histories) would be&lt;br&gt;
confusing. I would like to see stem be more actively used in core tor&lt;br&gt;
development for testing though. In an ideal world new tor controller&lt;br&gt;
features would include a corresponding test in \
stem...&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Simon,&lt;br&gt;&lt;br&gt;I don't know about Chutney, but \
Stem is a separate effort from Tor.   Stem is related to Tor, is hosted by the \
project, and there is much communication between the two, but running the Stem tests \
to learn about Tor code would not be helpful.&lt;br&gt; &lt;br&gt;As Damian says, Stem could be \
used to build tests exercising the controller side of Tor code.   However, those \
would be Tor tests, not Stem tests.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;-- &lt;br&gt;Sean Robinson&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121219224559</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-19 22:45:59-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 1:49 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Wed, Dec 19, 2012 at 2:29 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt;  [...]
&gt;&gt; Tor seems to have good planning compared to most open source projects.
&gt;&gt; So I would be interested in hearing why testing is apparently 'falling
&gt;&gt; between the cracks'. Why isn't there just 10 times more test LOC?
&gt;
&gt; Not because of any hatred or disapproval of tests--just because
&gt; nobody's written that 100 kloc of testing code yet.
&gt;
&gt; I think that's for two main reasons:
&gt;   * We were in a hurry when we wrote lots of the stuff we wrote.

I'm not trying to start a flame war but this sounds similar to excuses
from fat people who don't want to do exercise :-) So I'm just going to
pretend you never wrote this :-)

&gt;   * Large parts of the codebase have been written in a tightly coupled
&gt; style that needs refactoring before it can be tested without a live
&gt; Tor network at hand.

Much automated (unit) testing is done my mocking data structures used
by functions and/or mocking functions used by functions. This is
possible even with tight coupling.

Personally I think the most effective way to test with code coverage
is to test at the system/integration level to get the majority of
low-hanging-fruit coverage, and then make up the rest of the coverage
with more complicated-to-write unit testing. For the
system/integration level testing then it would be great to actually
start up a complete test Tor network e.g. on localhost, containing all
the components necessary for end-to-end testing using real UDP &amp; TCP
traffic. Maybe some of the production code isn't beneficial for such
an end-to-end automated test right now, but that's the beauty of
developers writing their own tests; they can change the production
code to make it more easily support such activities. With an
end-to-end Tor network test then I would guess that 'happy path'
coverage would jump up to somewhere between 40% and 60%. At least
numbers in this range are what I have seen with other projects.

&gt;   * Until Tor 0.2.2, our testing framework didn't let us have tests
&gt; that touched global state, which made our tests in general pretty
&gt; fragile.
&gt;
&gt;&gt;   What
&gt;&gt; about implementing a new policy immediately: Any new production LOC
&gt;&gt; committed must be covered by tests, or peer reviewed and
&gt;&gt; democratically excluded?
&gt;
&gt; Goodness knows we need more review and testing.
&gt;
&gt; It doesn't seem fair to reject patches for lacking test coverage when
&gt; they are patches to code that itself lacks coverage, though.  If you
&gt; write a 5-line patch to connection_ap_rewrite_and_attach, for
&gt; instance, you probably shouldn't be on the hook for refactoring the
&gt; whole function to make it testable, though you will be hard-pressed to
&gt; write any tests for that monster without a complete refactor.

I agree with you that it seems unfair. But the alternative is
systematically writing tests to cover all code which is unrealistic
and will never happen. There is no other alternative, or? The
developer who submits the patch has already comprehended the code in
question and is therefore in an excellent position to create the
necessary automated tests. Even if the patch comes without tests then
presumably the person reviewing and integrating and patch can start a
discussion and/or add the test for coverage themselves if necessary.

&gt; It might be a reasonable goal to try to set a plan for increasing test
&gt; coverage by a certain percentage with each release.

One thing is for sure, coverage figures won't improve much without
developer discipline :-( I've also seen teams where coverage is
enforced, but only prior to releasing and coverage expectations is set
below 100%, e.g. at 70% to 90%. Personally I think this is not good
for a bunch of reasons: The code being covered is long forgotten by
the developer and therefore the test code takes unnecessarily longer.
The developers/testers doing the test code will just go for the low
hanging fruit, just to get the coverage numbers up. Having to go back
and revisit code just seems like a chore and makes the word coverage
in the team seem like a dirty word instead of the joyous word which is
should be :-) It's a case of  'Look after the pennies and the pounds
will look after themselves' :-)

&gt; If you like and you have time, it would be cool to stop by the tickets
&gt; on trac.torproject.org for milestone "Tor: 0.2.4.x-final" in state
&gt; "needs_review" and look to see whether you think any of them have code
&gt; that would be amenable to new tests, or to look through currently
&gt; untested functions and try to figure out how to make more of them
&gt; tested and testable.

If I were you then I'd first try to create an end-to-end
system/integration test via localhost that works via make test. This
might involve refactoring the production code or even re-arranging
source bases etc. The test script would build and/or mock all
necessary parts, bring up the localhost Tor network, run a variety of
end-to-end tests, and shut down the localhost Tor network. Next the
makefiles should be doctored so that it is easier to discover the
coverage, e.g. something like make test-coverage ? At this point the
happy path coverage should be much larger than it is today but still
way off the desirable 80% to 100% range. At this point one would
consider adding the discipline to cover all new lines. The patch
author has the personal choice of using unit and/or system/integration
level testing to achieve coverage. And there is also a chance that no
extra coverage is necessary because the patch is already coverage in
the happy path.

If you like the end-to-end localhost Tor network idea then I would be
happy to collaborate on creating such a mechanism as a first step.

HTH,
Simon

&gt; yrs,
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220003500</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-20 00:35:00-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 5:45 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt; On Wed, Dec 19, 2012 at 1:49 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt; On Wed, Dec 19, 2012 at 2:29 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
 [...]
&gt;&gt;   * Large parts of the codebase have been written in a tightly coupled
&gt;&gt; style that needs refactoring before it can be tested without a live
&gt;&gt; Tor network at hand.
&gt;
&gt; Much automated (unit) testing is done my mocking data structures used
&gt; by functions and/or mocking functions used by functions. This is
&gt; possible even with tight coupling.

What's your favorite C mocking solution for integrating with existing
codebases without much disruption?

FWIW, I'd be interested in starting to try some of what you're
describing about mandatory coverage in the 0.2.5 release series, for
which the merge window should open in Feb/March.

  [...]
&gt;&gt; If you like and you have time, it would be cool to stop by the tickets
&gt;&gt; on trac.torproject.org for milestone "Tor: 0.2.4.x-final" in state
&gt;&gt; "needs_review" and look to see whether you think any of them have code
&gt;&gt; that would be amenable to new tests, or to look through currently
&gt;&gt; untested functions and try to figure out how to make more of them
&gt;&gt; tested and testable.
&gt;
&gt; If I were you then I'd first try to create an end-to-end
&gt; system/integration test via localhost that works via make test. This
&gt; might involve refactoring the production code or even re-arranging
&gt; source bases etc. The test script would build and/or mock all
&gt; necessary parts, bring up the localhost Tor network, run a variety of
&gt; end-to-end tests, and shut down the localhost Tor network.

We're a part of the way there, then. Like I said, we've got multiple
network mocking/simulation tools.  With a simple Chutney network plus
the unit tests, we're at ~ 53% coverage... and all Chutney is doing
there is setting up a 10-node network and letting it all bootstrap,
without actually doing any end-to-end tests.

(ExperimenTor and Shadow are both heavier-weight alternatives for
running bigger networks, but I think that here they might not be
needed, since their focus seems to be on performance measurement.
Chutney is enough for basic integration testing, and has the advantage
that it's running unmodified Tor binaries.  Stem is interesting here
too, since it exercises Tor's control port protocol pretty heavily.)

I've uploaded the gcov output for running the unit tests, then running
chutney with the networks/basic configuration, at
http://www.wangafu.net/~nickm/volatile/gcov-20121219.tar.xz .
(Warning, evil archive file! It will dump all the gcov files in your
cwd.)

The 5 most covered modules (by LOC exercised) are:
dirvote.c.gcov 553 1222 68.85
config.c.gcov 1429 1229 46.24
util.c.gcov 470 1352 74.20
routerparse.c.gcov 932 1436 60.64
routerlist.c.gcov 858 1509 63.75

The 5 most uncovered modules (by LOC not exercised) are:
routerparse.c.gcov 932 1436 60.64
connection_edge.c.gcov 972 384 28.32
rendservice.c.gcov 1249 202 13.92
config.c.gcov 1429 1229 46.24
control.c.gcov 2076 201 8.83

The 5 most uncovered nontrivial modules (by % not exercised) are:
dnsserv.c.gcov 148 0 0.00
procmon.c.gcov 48 0 0.00
rendmid.c.gcov 135 0 0.00
status.c.gcov 50 0 0.00
rendclient.c.gcov 506 26 4.89


&gt; Next the
&gt; makefiles should be doctored so that it is easier to discover the
&gt; coverage, e.g. something like make test-coverage ? At this point the
&gt; happy path coverage should be much larger than it is today but still
&gt; way off the desirable 80% to 100% range. At this point one would
&gt; consider adding the discipline to cover all new lines. The patch
&gt; author has the personal choice of using unit and/or system/integration
&gt; level testing to achieve coverage. And there is also a chance that no
&gt; extra coverage is necessary because the patch is already coverage in
&gt; the happy path.
&gt;
&gt; If you like the end-to-end localhost Tor network idea then I would be
&gt; happy to collaborate on creating such a mechanism as a first step.

Yes, I like this idea a lot, especially if you're able to help with
it, especially if it's based on an already-existing
launch-a-network-on-localhost tool. I'm going to be travelling a lot
for the rest of December, but let's set up a time to chat in the new
year about how to get started.


Preemptive Happy New Year,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220015721</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-20 01:57:21-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 4:35 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Wed, Dec 19, 2012 at 5:45 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt;&gt; On Wed, Dec 19, 2012 at 1:49 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt;&gt; On Wed, Dec 19, 2012 at 2:29 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt;  [...]
&gt;&gt;&gt;   * Large parts of the codebase have been written in a tightly coupled
&gt;&gt;&gt; style that needs refactoring before it can be tested without a live
&gt;&gt;&gt; Tor network at hand.
&gt;&gt;
&gt;&gt; Much automated (unit) testing is done my mocking data structures used
&gt;&gt; by functions and/or mocking functions used by functions. This is
&gt;&gt; possible even with tight coupling.
&gt;
&gt; What's your favorite C mocking solution for integrating with existing
&gt; codebases without much disruption?

This could be worth a separate thread. I'm not aware of really good
solutions for C. I have mocked certain system API calls for networking
before using e.g #define recvfrom() ... to cause recvfrom() to be
called via an indirect pointer. This causes almost no detectable
performance penalty in most cases and allows the test author to not
only mock but also to tamper with real results e.g. on the third
invocation. I.e. the indirect pointer for the #define points to
recvfrom() by default but can be changed to point to test_recvfrom()
which can optionally call the 'real' recvfrom() and optionally tamper
with the results. This technique allows very difficult to simulate
network stack conditions to be created with ease. Although the #define
mechanism is a chore to initially setup.

I have also thought about experimenting with a different technique for
mocking which uses the same technique under the covers but less
developer intervention to set it up and maintain it. This could work
by using the feature of the C compiler which creates an assembler file
from C instead of the usual object file. The assembler file can still
be assembled to the object file. The resulting binary is exactly the
same except an extra artefact of the build is all the assembler files.
Using this mechanism then before compiling the assembler files to
object files then the assembler files could be munged, e.g. call
my_func in assembler could be changed to call indirect_my_func and
another assembler file can be created automatically containing all the
indirect pointers. In this way all callable functions could be easily
manipulated in unit tests at run-time.

I'd be interested in hearing battle stories about how other people do
their mocking. I have heard of the technique of making test functions
override production library functions at test link time. But I think
this technique isn't as powerful as the above techniques since the
original production function isn't available anymore at test run-time.

&gt; FWIW, I'd be interested in starting to try some of what you're
&gt; describing about mandatory coverage in the 0.2.5 release series, for
&gt; which the merge window should open in Feb/March.
&gt;
&gt;   [...]
&gt;&gt;&gt; If you like and you have time, it would be cool to stop by the tickets
&gt;&gt;&gt; on trac.torproject.org for milestone "Tor: 0.2.4.x-final" in state
&gt;&gt;&gt; "needs_review" and look to see whether you think any of them have code
&gt;&gt;&gt; that would be amenable to new tests, or to look through currently
&gt;&gt;&gt; untested functions and try to figure out how to make more of them
&gt;&gt;&gt; tested and testable.
&gt;&gt;
&gt;&gt; If I were you then I'd first try to create an end-to-end
&gt;&gt; system/integration test via localhost that works via make test. This
&gt;&gt; might involve refactoring the production code or even re-arranging
&gt;&gt; source bases etc. The test script would build and/or mock all
&gt;&gt; necessary parts, bring up the localhost Tor network, run a variety of
&gt;&gt; end-to-end tests, and shut down the localhost Tor network.
&gt;
&gt; We're a part of the way there, then. Like I said, we've got multiple
&gt; network mocking/simulation tools.  With a simple Chutney network plus
&gt; the unit tests, we're at ~ 53% coverage... and all Chutney is doing
&gt; there is setting up a 10-node network and letting it all bootstrap,
&gt; without actually doing any end-to-end tests.

Sounds good.

I guess Chutney must be a separate project since I can't find it in
the Tor sources .tar.gz ?

&gt; (ExperimenTor and Shadow are both heavier-weight alternatives for
&gt; running bigger networks, but I think that here they might not be
&gt; needed, since their focus seems to be on performance measurement.
&gt; Chutney is enough for basic integration testing, and has the advantage
&gt; that it's running unmodified Tor binaries.  Stem is interesting here
&gt; too, since it exercises Tor's control port protocol pretty heavily.)
&gt;
&gt; I've uploaded the gcov output for running the unit tests, then running
&gt; chutney with the networks/basic configuration, at
&gt; http://www.wangafu.net/~nickm/volatile/gcov-20121219.tar.xz .
&gt; (Warning, evil archive file! It will dump all the gcov files in your
&gt; cwd.)
&gt;
&gt; The 5 most covered modules (by LOC exercised) are:
&gt; dirvote.c.gcov 553 1222 68.85
&gt; config.c.gcov 1429 1229 46.24
&gt; util.c.gcov 470 1352 74.20
&gt; routerparse.c.gcov 932 1436 60.64
&gt; routerlist.c.gcov 858 1509 63.75
&gt;
&gt; The 5 most uncovered modules (by LOC not exercised) are:
&gt; routerparse.c.gcov 932 1436 60.64
&gt; connection_edge.c.gcov 972 384 28.32
&gt; rendservice.c.gcov 1249 202 13.92
&gt; config.c.gcov 1429 1229 46.24
&gt; control.c.gcov 2076 201 8.83
&gt;
&gt; The 5 most uncovered nontrivial modules (by % not exercised) are:
&gt; dnsserv.c.gcov 148 0 0.00
&gt; procmon.c.gcov 48 0 0.00
&gt; rendmid.c.gcov 135 0 0.00
&gt; status.c.gcov 50 0 0.00
&gt; rendclient.c.gcov 506 26 4.89
&gt;
&gt;
&gt;&gt; Next the
&gt;&gt; makefiles should be doctored so that it is easier to discover the
&gt;&gt; coverage, e.g. something like make test-coverage ? At this point the
&gt;&gt; happy path coverage should be much larger than it is today but still
&gt;&gt; way off the desirable 80% to 100% range. At this point one would
&gt;&gt; consider adding the discipline to cover all new lines. The patch
&gt;&gt; author has the personal choice of using unit and/or system/integration
&gt;&gt; level testing to achieve coverage. And there is also a chance that no
&gt;&gt; extra coverage is necessary because the patch is already coverage in
&gt;&gt; the happy path.
&gt;&gt;
&gt;&gt; If you like the end-to-end localhost Tor network idea then I would be
&gt;&gt; happy to collaborate on creating such a mechanism as a first step.
&gt;
&gt; Yes, I like this idea a lot, especially if you're able to help with
&gt; it, especially if it's based on an already-existing
&gt; launch-a-network-on-localhost tool.

I'm not aware of such a tool. The way I have done it in the past is to
use Perl to lunch and monitor the various processes. The good thing
about Perl is that it can run unmodified on both *nix and Windows,
plus you can do one-liners. And Perl is also heavily tested itself and
comes with various testing frameworks, e.g. [1]. Plus Perl I usually
installed already on *nix distributions.

An interesting tidbit about localhost is that it's possible for
processes to just listen on any IP in the 127.* IP address space
without having to first setup an alias at the NIC level. So for
example, process 'a' can just start listening on 127.0.100.1:8080 and
process 'b' can just start listening on 127.0.200.1:8080. This is
useful for example for testing with many connections, e.g. up to IPs *
port range TCP connections (not sure if this is relevant for Tor...).
Test scripts written in Perl can then test the end-to-end network. For
example, by turning up the verbosity of the logging on certain daemons
and monitoring that certain events happen. And/or by talking to
daemons directly and expecting certain results. Like the existing Tor
unit tests then each fulfilled expectation would result in an extra
test 'OK' output.

The most important thing is that the testing happens quickly so that
developers exercise it all the time. Using make test to start up an
end-to-end localhost test with anything from 10 to 100 processes
shouldn't be a problem as long as enough RAM is available and the
whole thing should take seconds to run all tests.

[1] http://perldoc.perl.org/Test/More.html

&gt; I'm going to be travelling a lot
&gt; for the rest of December, but let's set up a time to chat in the new
&gt; year about how to get started.
&gt;
&gt; Preemptive Happy New Year,

Dito. Sure let's set up a time.

--
Simon

&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220023133</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 02:31:33-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

&gt;  [...]
&gt;&gt; Maybe there is no automated testing for any Tor projects? At least a
&gt;&gt; quick search on the wiki only found [1] which lists possible ways to
&gt;&gt; test (but was created 7 months ago and apparently not updated since
&gt;&gt; and collecting dust) and [2] discussing a manual test procedure for
&gt;&gt; TBB. However, tor-0.2.3.25.tar.gz does reveal some test files but the
&gt;&gt; source code ratio of production code to test code is not inspiring at
&gt;&gt; first glance:
&gt; [...]
&gt;
&gt; Be aware that we've also been using 'chutney' and 'experimentor' for
&gt; integration testing.  They supplement coverage a bit, though they need
&gt; more tests, and each tends to hide certain classes of error.

I hate being forgotten in testing discussions. Stem provides rather
extensive integration testing targeted at Tor's controller interface.

https://stem.torproject.org/

To run it simply...

git clone https://git.torproject.org/stem.git
cd stem
./run_tests.py --integ

Help expanding the tests even further would be greatly appreciated. -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220181520</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-20 18:15:20-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 6:31 PM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt;  [...]
&gt;&gt;&gt; Maybe there is no automated testing for any Tor projects? At least a
&gt;&gt;&gt; quick search on the wiki only found [1] which lists possible ways to
&gt;&gt;&gt; test (but was created 7 months ago and apparently not updated since
&gt;&gt;&gt; and collecting dust) and [2] discussing a manual test procedure for
&gt;&gt;&gt; TBB. However, tor-0.2.3.25.tar.gz does reveal some test files but the
&gt;&gt;&gt; source code ratio of production code to test code is not inspiring at
&gt;&gt;&gt; first glance:
&gt;&gt; [...]
&gt;&gt;
&gt;&gt; Be aware that we've also been using 'chutney' and 'experimentor' for
&gt;&gt; integration testing.  They supplement coverage a bit, though they need
&gt;&gt; more tests, and each tends to hide certain classes of error.
&gt;
&gt; I hate being forgotten in testing discussions. Stem provides rather
&gt; extensive integration testing targeted at Tor's controller interface.
&gt;
&gt; https://stem.torproject.org/
&gt;
&gt; To run it simply...
&gt;
&gt; git clone https://git.torproject.org/stem.git
&gt; cd stem
&gt; ./run_tests.py --integ
&gt;
&gt; Help expanding the tests even further would be greatly appreciated. -Damian

So I have a built and make tested tor-0.2.3.25/ folder and stem/ in a
parallel folder. When I run the command then I get the following:

$ ./run_tests.py --integ
Unable to start tor, 'tor' does not exists.

How can I run the tests on the Tor built in the tor-0.2.3.25/ folder?

Thanks,
Simon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220185045</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 18:50:45-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

&gt; So I have a built and make tested tor-0.2.3.25/ folder and stem/ in a
&gt; parallel folder. When I run the command then I get the following:
&gt;
&gt; $ ./run_tests.py --integ
&gt; Unable to start tor, 'tor' does not exists.
&gt;
&gt; How can I run the tests on the Tor built in the tor-0.2.3.25/ folder?

Just run './run_tests.py --integ --tor /path/to/tor'. Without the
'--tor' argument it uses the tor instance in your path (and you
evidently don't have one).

Another argument that you might be interested in is '--target RUN_ALL'
which will exercise all of the connection and authentication
mechanisms. This'll take quite a while to run but provides the best
test coverage. You can provide '--help' to see the other options.

Stem's integration tests were designed to test stem. Coincidentally
they provide basic verification testing of Tor, though I'd love to see
them be expanded to more dedicatedly test Tor! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220191300</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-20 19:13:00-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Thu, Dec 20, 2012 at 10:50 AM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt; So I have a built and make tested tor-0.2.3.25/ folder and stem/ in a
&gt;&gt; parallel folder. When I run the command then I get the following:
&gt;&gt;
&gt;&gt; $ ./run_tests.py --integ
&gt;&gt; Unable to start tor, 'tor' does not exists.
&gt;&gt;
&gt;&gt; How can I run the tests on the Tor built in the tor-0.2.3.25/ folder?
&gt;
&gt; Just run './run_tests.py --integ --tor /path/to/tor'. Without the
&gt; '--tor' argument it uses the tor instance in your path (and you
&gt; evidently don't have one).

Thanks. That gets me a bit further but it fails as follows:

$ ./run_tests.py --integ --tor ../tor-0.2.3.25
======================================================================
                             INITIALISING
======================================================================

Performing startup activities...
  checking for orphaned .pyc files... done

======================================================================
                          INTEGRATION TESTS
======================================================================

Setting up a test instance...
  making test directory (/home/simon/work/20121219-tor/stem/test/data)... done
  configuring logger (/home/simon/work/20121219-tor/stem/test/data/log)... done
  writing torrc (/home/simon/work/20121219-tor/stem/test/data/torrc)... done
    # configuration for stem integration tests
    DataDirectory /home/simon/work/20121219-tor/stem/test/data
    SocksPort 1112
    DownloadExtraInfo 1
    ControlPort 1111

Starting tor...

  failed to start tor: [Errno 13] Permission denied

Shutting down tor... done
Shutting down tor... done
TESTING PASSED (0.1 seconds)

Is that a bug that it says 'TESTING PASSED' even though it failed to
start Tor? Is the permission denied error because I need to be root to
run the tests? If so, how to change the tests so that being root isn't
necessary?

Thanks,
Simon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220192548</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-20 19:25:48-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Wed, Dec 19, 2012 at 8:57 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt; On Wed, Dec 19, 2012 at 4:35 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt; What's your favorite C mocking solution for integrating with existing
&gt;&gt; codebases without much disruption?
&gt;
&gt; This could be worth a separate thread. I'm not aware of really good
&gt; solutions for C.
 [....]

I had a look around and found a few more possibilities, including:

  https://code.google.com/p/test-dept/
  http://throwtheswitch.org/white-papers/cmock-intro.html
  https://code.google.com/p/cmockery/

None of them looks compellingly great, TBH.  The methods that people
seem to be using code-rewriting tricks, mandatory macro tricks, LLVM
tricks, x86 assembly tricks, and uglier stuff still.

Perhaps somebody else has a good recommendation?  It would be sad if
we went ant built our own.

[...]
&gt;&gt; We're a part of the way there, then. Like I said, we've got multiple
&gt;&gt; network mocking/simulation tools.  With a simple Chutney network plus
&gt;&gt; the unit tests, we're at ~ 53% coverage... and all Chutney is doing
&gt;&gt; there is setting up a 10-node network and letting it all bootstrap,
&gt;&gt; without actually doing any end-to-end tests.
&gt;
&gt; Sounds good.
&gt;
&gt; I guess Chutney must be a separate project since I can't find it in
&gt; the Tor sources .tar.gz ?

Yup.  It's accessible from gitweb.torproject.org.  I'd be surprised if
more than 5 people have tried to run it, ever.

(More results: unittests + chutney gives 52.60% coverage.  Unittests +
stem gives 39.03% coverage.  Unit tests + stem + chutney gives 54.49%
coverage.)

&gt;&gt; (ExperimenTor and Shadow are both heavier-weight alternatives for
&gt;&gt; running bigger networks, but I think that here they might not be
&gt;&gt; needed, since their focus seems to be on performance measurement.
&gt;&gt; Chutney is enough for basic integration testing, and has the advantage
&gt;&gt; that it's running unmodified Tor binaries.  Stem is interesting here
&gt;&gt; too, since it exercises Tor's control port protocol pretty heavily.)

More links:
https://shadow.cs.umn.edu/
http://crysp.uwaterloo.ca/software/exptor/

I'm not sure anybody's ever tried to do coverage with them.

 [..]
&gt;&gt; Yes, I like this idea a lot, especially if you're able to help with
&gt;&gt; it, especially if it's based on an already-existing
&gt;&gt; launch-a-network-on-localhost tool.
&gt;
&gt; I'm not aware of such a tool.

Chutney is such a tool; ExperimenTor can be made (I think) to act as
such a tool; Shadow is a little more complicated.

&gt; The way I have done it in the past is to
&gt; use Perl to lunch and monitor the various processes. The good thing
&gt; about Perl is that it can run unmodified on both *nix and Windows,
&gt; plus you can do one-liners.
[...]

Hm.  I'm not going to say that I'd turn down work in perl, but the
rest of the Tor developers don't spend much time using perl.  I don't
know that any of us have done a perl program of over 100 lines in the
last 5-6 years.  I'm not saying "perl sucks" or "I refuse to use
anything written in perl", but you should be aware that if you do
write anything in perl, there probably aren't a lot of other people
involved with Tor right now with the knowhow to effectively
collaborate on the perl parts or help to maintain them.

 [....]
&gt;&gt; I'm going to be travelling a lot
&gt;&gt; for the rest of December, but let's set up a time to chat in the new
&gt;&gt; year about how to get started.
&gt;&gt;
&gt;&gt; Preemptive Happy New Year,
&gt;
&gt; Dito. Sure let's set up a time.

[email sent off-list]

yrs,
-- 
Nick Mathewson
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220194851</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 19:48:51-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

&gt; Is that a bug that it says 'TESTING PASSED' even though it failed to
&gt; start Tor? Is the permission denied error because I need to be root to
&gt; run the tests? If so, how to change the tests so that being root isn't
&gt; necessary?

Yea, saying 'PASSED' rather than 'FAILED' would be a bug.

No, the tests definitely don't need to be ran as root. Did you clone
stem as root? It expects to be able to make a data directory within
the test directory.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220200648</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-20 20:06:48-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Thu, Dec 20, 2012 at 11:48 AM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt; Is that a bug that it says 'TESTING PASSED' even though it failed to
&gt;&gt; start Tor? Is the permission denied error because I need to be root to
&gt;&gt; run the tests? If so, how to change the tests so that being root isn't
&gt;&gt; necessary?
&gt;
&gt; Yea, saying 'PASSED' rather than 'FAILED' would be a bug.
&gt;
&gt; No, the tests definitely don't need to be ran as root. Did you clone
&gt; stem as root? It expects to be able to make a data directory within
&gt; the test directory.

It looks like the data directory was created as expected:

$ find test/data/
test/data/
test/data/log
test/data/torrc

Unfortunately ./run_tests.py --help isn't telling me about e.g. a
verbosity level option to help give more of a clue as to what is going
wrong :-(

Any more ideas?

--
Simon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220205853</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 20:58:53-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

&gt; It looks like the data directory was created as expected:
&gt;
&gt; $ find test/data/
&gt; test/data/
&gt; test/data/log
&gt; test/data/torrc
&gt;
&gt; Unfortunately ./run_tests.py --help isn't telling me about e.g. a
&gt; verbosity level option to help give more of a clue as to what is going
&gt; wrong :-(
&gt;
&gt; Any more ideas?

What happens when you run '/path/to/tor -f
/path/to/stem/test/data/torrc'? That's all that stem is doing to start
tor. If it's failing like this then running tor itself should also be
failing.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121205022107</emailId><senderName>"succer110 () tiscali ! it"</senderName><senderEmail>succer110@tiscali.it</senderEmail><timestampReceived>2012-12-05 02:21:07-0400</timestampReceived><subject>[tor-dev] R: Re:  questions about extending circuit</subject><body>

[Attachment #2 (multipart/alternative)]


HiFrom your code,  does not seems possible to create new circuits specifying \
fingerprint. https://stem.readthedocs.org/en/latest/_modules/stem/control.html#Controller.extend_circuit \
Also i don't think it's possibile to extendcircuits with fingerprint from command \
line with control port... i've tried but i failed. This sounds very strange to me: it \
should be possibile to create circuits with the 500 "unnamed" router constantly \
connected!Where Am I wrong?Thankyou


----Messaggio originale----
Da: atagar@torproject.org
Data: 30/11/2012 2.21
A: &lt;tor-dev@lists.torproject.org&gt;
Ogg: Re: [tor-dev] questions about extending circuit

Hi. Both HackerSpaceSeoul and HackerspaceSeoul lack the named flag,
which likely is why tor isn't allowing you to refer to it by the
nickname. Have you tried referring to it by the fingerprint instead?

Speaking of which, TorCtl is being deprecated in favor of a couple
newer controller libraries...

https://stem.readthedocs.org/en/latest/ - replacement with a similar
design to TorCtl, see the tutorial for usage
https://txtorcon.readthedocs.org/en/latest/ - twisted controller library

If you try using stem then let me know if run into any issues or have
questions! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev





Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più di uno \
spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui! Un amico al \
mese e parli e navighi sempre gratis: http://freelosophy.tiscali.it/ 


[Attachment #5 (text/html)]

Hi&lt;div&gt;&lt;span style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; \
font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: \
normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; \
-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: \
rgb(255, 255, 255); display: inline !important; float: none;"&gt;From your code, \
 does not seems possible to create new circuits specifying \
fingerprint. &lt;/span&gt;&lt;div style="color: rgb(0, 0, 0); font-family: Times; \
font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; \
letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; \
text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: \
0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: \
0px;"&gt;https://stem.readthedocs.org/en/latest/_modules/stem/control.html#Controller.extend_circuit &lt;/div&gt;&lt;div \
style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: \
normal; font-variant: normal; font-weight: normal; letter-spacing: normal; \
line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: \
none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: \
auto; -webkit-text-stroke-width: 0px;"&gt;Also i don't think it's possibile to \
extendcircuits with fingerprint from command line with control port... i've tried but \
i failed.&lt;/div&gt; This sounds very strange to me: it should be possibile to create \
circuits with the 500 "unnamed" router constantly connected!&lt;/div&gt;&lt;div&gt;Where Am I \
wrong?&lt;/div&gt;&lt;div&gt;Thankyou&lt;br&gt; &lt;blockquote&gt;
----Messaggio originale----&lt;br&gt;Da: atagar@torproject.org&lt;br&gt;Data: 30/11/2012 \
2.21&lt;br&gt;A: &lt;tor-dev@lists.torproject.org&gt;&lt;br&gt;Ogg: Re: [tor-dev] questions about \
extending circuit&lt;br&gt;&lt;br&gt;Hi. Both HackerSpaceSeoul and HackerspaceSeoul lack the \
named flag,&lt;br&gt;which likely is why tor isn't allowing you to refer to it by \
the&lt;br&gt;nickname. Have you tried referring to it by the fingerprint \
instead?&lt;br&gt;&lt;br&gt;Speaking of which, TorCtl is being deprecated in favor of a \
couple&lt;br&gt;newer controller \
libraries...&lt;br&gt;&lt;br&gt;https://stem.readthedocs.org/en/latest/ - replacement with a \
similar&lt;br&gt;design to TorCtl, see the tutorial for \
usage&lt;br&gt;https://txtorcon.readthedocs.org/en/latest/ - twisted controller \
library&lt;br&gt;&lt;br&gt;If you try using stem then let me know if run into any issues or \
have&lt;br&gt;questions! -Damian&lt;br&gt;_______________________________________________&lt;br&gt;tor-dev \
mailing list&lt;br&gt;tor-dev@lists.torproject.org&lt;br&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
 &lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico \
vale più di uno spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per \
lui! Un amico al mese e parli e navighi sempre gratis: &lt;a target='_blank'  \
href="http://freelosophy.tiscali.it/" \
target=_blank&gt;http://freelosophy.tiscali.it/&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121207071626</emailId><senderName>Jorge Couchet</senderName><senderEmail>jorge.couchet@gmail.com</senderEmail><timestampReceived>2012-12-07 07:16:26-0400</timestampReceived><subject>Re: [tor-dev] Detecting if a IP address belongs to a Tor Exit node.</subject><body>

Thanks to all for the help!

Best!

Jorge

On Fri, Dec 7, 2012 at 5:05 AM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; On Thu, Dec 06, 2012 at 08:39:09AM +0100, Karsten Loesing wrote:
&gt;&gt; &gt;&gt;&gt;&gt; Why not just run and query an Onionoo server?
&gt;&gt; &gt;&gt;&gt;
&gt;&gt; &gt;&gt;&gt; Onionoo isn't really optimised in regards to giving out lists of
&gt;&gt; &gt;&gt;&gt; exits, the parsing of the JSON sounds like a duplicate effort to me.
&gt;&gt; &gt;&gt;&gt; Also, shipping Onionoo with every facilitator seems a bit overkill.
&gt;&gt;
&gt;&gt; It's not Onionoo's primary purpose to give out lists of exit addresses,
&gt;&gt; but it provides that information, too.  It just doesn't offer good query
&gt;&gt; parameters for that use case.  But I think you should do okay
&gt;&gt; downloading the full set of relay summaries once per hour and cache that
&gt;&gt; data locally.  The URL is:
&gt;&gt;
&gt;&gt; https://onionoo.torproject.org/summary?type=relay&amp;running=true
&gt;&gt;
&gt;&gt; The protocol specification is here:
&gt;&gt;
&gt;&gt; https://onionoo.torproject.org/
&gt;&gt;
&gt;&gt; I wouldn't recommend running your own Onionoo server, particularly not
&gt;&gt; on every facilitator.  But if you cache results, you don't really have
&gt;&gt; to do that.
&gt;
&gt; Thank you, Karsten, for the helpful information.
&gt;
&gt; Jorge, I think that using Onionoo as a data source is the thing to do.
&gt; You should be able to adapt your program from
&gt; https://trac.torproject.org/projects/tor/ticket/7549#comment:4. You can
&gt; assume that the Python json library is present.
&gt;
&gt; David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121207165352</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-12-07 16:53:52-0400</timestampReceived><subject>Re: [tor-dev] R: Re: questions about extending circuit</subject><body>

[Attachment #2 (multipart/alternative)]


 Hi,

  I see both Ravi and Damian have contributed fixes to extend_circuit in
the last few days, including better examples.  Please try your test with
the latest version in the repository &lt;https://gitweb.torproject.org/stem.git&gt;.
Let us know whether this works for you.

On Tue, Dec 4, 2012 at 7:21 PM, succer110@tiscali.it
&lt;succer110@tiscali.it&gt;wrote:

&gt; Hi
&gt; From your code,  does not seems possible to create new circuits specifying
&gt; fingerprint.
&gt;
&gt; https://stem.readthedocs.org/en/latest/_modules/stem/control.html#Controller.extend_circuit
&gt;
&gt; Also i don't think it's possibile to extendcircuits with fingerprint from
&gt; command line with control port... i've tried but i failed.
&gt; This sounds very strange to me: it should be possibile to create circuits
&gt; with the 500 "unnamed" router constantly connected!
&gt; Where Am I wrong?
&gt; Thankyou
&gt;
&gt; ----Messaggio originale----
&gt; Da: atagar@torproject.org
&gt; Data: 30/11/2012 2.21
&gt; A: &lt;tor-dev@lists.torproject.org&gt;
&gt; Ogg: Re: [tor-dev] questions about extending circuit
&gt;
&gt; Hi. Both HackerSpaceSeoul and HackerspaceSeoul lack the named flag,
&gt; which likely is why tor isn't allowing you to refer to it by the
&gt; nickname. Have you tried referring to it by the fingerprint instead?
&gt;
&gt; Speaking of which, TorCtl is being deprecated in favor of a couple
&gt; newer controller libraries...
&gt;
&gt; https://stem.readthedocs.org/en/latest/ - replacement with a similar
&gt; design to TorCtl, see the tutorial for usage
&gt; https://txtorcon.readthedocs.org/en/latest/ - twisted controller library
&gt;
&gt; If you try using stem then let me know if run into any issues or have
&gt; questions! -Damian
&gt;
&gt;

-- 
Sean Robinson

[Attachment #5 (text/html)]

  Hi,&lt;br&gt;&lt;br&gt;   I see both Ravi and Damian have contributed fixes to extend_circuit \
in the last few days, including better examples.   Please try your test with the \
latest version in the repository &lt;&lt;a \
href="https://gitweb.torproject.org/stem.git"&gt;https://gitweb.torproject.org/stem.git&lt;/a&gt;&gt;. \
Let us know whether this works for you.&lt;br&gt; &lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Dec \
4, 2012 at 7:21 PM, &lt;a href="mailto:succer110@tiscali.it"&gt;succer110@tiscali.it&lt;/a&gt; \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:succer110@tiscali.it" \
target="_blank"&gt;succer110@tiscali.it&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi&lt;div&gt;&lt;span \
style="text-indent:0px;letter-spacing:normal;font-variant:normal;text-align:start;font \
-style:normal;display:inline!important;font-weight:normal;float:none;line-height:norma \
l;text-transform:none;font-size:medium;white-space:normal;font-family:Times;word-spacing:0px"&gt;From \
your code,   does not seems possible to create new circuits specifying fingerprint.  \
&lt;/span&gt;&lt;div style="text-indent:0px;letter-spacing:normal;font-variant:normal;text-alig \
n:start;font-style:normal;font-weight:normal;line-height:normal;text-transform:none;font-size:medium;white-space:normal;font-family:Times;word-spacing:0px"&gt;
 &lt;a href="https://stem.readthedocs.org/en/latest/_modules/stem/control.html#Controller.extend_circuit" \
target="_blank"&gt;https://stem.readthedocs.org/en/latest/_modules/stem/control.html#Controller.extend_circuit&lt;/a&gt; \
&lt;/div&gt;&lt;div style="text-indent:0px;letter-spacing:normal;font-variant:normal;text-align \
:start;font-style:normal;font-weight:normal;line-height:normal;text-transform:none;font-size:medium;white-space:normal;font-family:Times;word-spacing:0px"&gt;
 Also i don't think it's possibile to extendcircuits with fingerprint from \
command line with control port... i've tried but i failed.&lt;/div&gt; This sounds very \
strange to me: it should be possibile to create circuits with the 500 \
"unnamed" router constantly connected!&lt;/div&gt;&lt;div&gt;Where Am I \
wrong?&lt;/div&gt;&lt;div&gt;Thankyou&lt;br&gt; &lt;blockquote&gt;
----Messaggio originale----&lt;br&gt;Da: &lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&lt;br&gt;Data: 30/11/2012 2.21&lt;br&gt;A: &lt;&lt;a \
href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&gt;&lt;br&gt;
Ogg: Re: [tor-dev] questions about extending circuit&lt;br&gt;&lt;br&gt;Hi. Both HackerSpaceSeoul \
and HackerspaceSeoul lack the named flag,&lt;br&gt;which likely is why tor isn't \
allowing you to refer to it by the&lt;br&gt;nickname. Have you tried referring to it by the \
fingerprint instead?&lt;br&gt; &lt;br&gt;Speaking of which, TorCtl is being deprecated in favor \
of a couple&lt;br&gt;newer controller libraries...&lt;br&gt;&lt;br&gt;&lt;a \
href="https://stem.readthedocs.org/en/latest/" \
target="_blank"&gt;https://stem.readthedocs.org/en/latest/&lt;/a&gt; - replacement with a \
similar&lt;br&gt; design to TorCtl, see the tutorial for usage&lt;br&gt;&lt;a \
href="https://txtorcon.readthedocs.org/en/latest/" \
target="_blank"&gt;https://txtorcon.readthedocs.org/en/latest/&lt;/a&gt; - twisted controller \
library&lt;br&gt;&lt;br&gt;If you try using stem then let me know if run into any issues or \
have&lt;br&gt; questions! -Damian&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br \
clear="all"&gt;&lt;br&gt;-- &lt;br&gt;Sean Robinson&lt;br&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121208022239</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-08 02:22:39-0400</timestampReceived><subject>Re: [tor-dev] stem mock_method usage</subject><body>

Hi Sean. You're using the mock_method() function correctly...

========================================

class Foo:
  def greeting(self):
    return 'hi'

f = Foo()
print f.greeting()

mocking.mock_method(Foo, 'greeting', mocking.return_value('bye'))

print f.greeting()

========================================

atagar@morrigan:~/Desktop/stem$ python example.py
hi
bye

========================================

The trouble is that the Controller __dict__ is a dictproxy (a
read-only dictionary). After some experimentation this seems to be a
product of extending object...

========================================

&gt;&gt;&gt; class Foo:
...   pass

&gt;&gt;&gt; type(Foo.__dict__)
&lt;type 'dict'&gt;

&gt;&gt;&gt; class Bar(object):
...   pass

&gt;&gt;&gt; type(Bar.__dict__)
&lt;type 'dictproxy'&gt;

========================================

So... um, shame on us for doing the right thing. ;)

We've probably never encountered this before because the mock_method()
function is presently completely unused...

atagar@morrigan:~/Desktop/stem$ grep -Rl "mock_method" * | grep -v '.pyc'
test/mocking.py

It was added in a500dbc to help test the BaseController, then its
usage was removed in 4ff7efe. Strangely method mocking hasn't come up
again since then. Unfortunately I don't have a good suggestion on how
to work around this...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121208175153</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-08 17:51:53-0400</timestampReceived><subject>Re: [tor-dev] Stem code review 2012-12-04</subject><body>

&gt; I must not be reasoning about Event._parse_standard_attr() correctly.  I
&gt; think it is already looking for _QUOTED positional args, but is working at
&gt; it backwards from _KEYWORD_ARGS parsing.

Right. The thing that I'm talking about is *new* quoted arguments (ie,
things not presently in the spec and hence not in _POSITIONAL_ARGS,
_KEYWORD_ARGS, or _QUOTED). Presently positional and keyword work a
little differently from each other for those new additions...

* With positional arguments we only parse them as being quoted if
they're in _QUOTED. Hence new positional additions that are quoted
will result multiple values in positional_args until we update the
parser.

* With keyword arguments _QUOTED is not consulted. Instead we
determine if they're quoted or not based on which regex they match.

The former is a strict parsing approach, where we're assured to parse
the things we presently support correctly but new additions could put
mis-parsed content in our positional_args.

The later is a more permissive parsing approach where it's possible
(though highly unlikely) that some content could confuse us but we
more gracefully handle new additions.

Probably the best of both worlds would be to use the strict approach
for things we presently parse, and a permissive approach for new
additions. Ie...

if len(unparsed_positional_args) &gt; len(_POSITIONAL_ARGS):
  # Get the positional argument content that isn't recognized by
  # our parser. This probably represents a new addition to the
  # spec, and might or might not be quoted values.

  unrecognized_content = "
".join(unparsed_positional_args[len(_POSITIONAL_ARGS):])

  # TODO: Try to parse out quoted values, falling back to
  # parse them as being unquoted.

... then move on to the present parsing for _POSITIONAL_ARGS

Hope that helps. -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121213210059</emailId><senderName>Veggie Monster</senderName><senderEmail>vmonmoonshine@gmail.com</senderEmail><timestampReceived>2012-12-13 21:00:59-0400</timestampReceived><subject>Re: [tor-dev] RFC on obfs3 pluggable transport</subject><body>

Hey Ian,

&gt; [There's no such thing as a "bi-quadratic residue" in this setting; all
&gt; quadratic residues in this group have one square root which is itself a
&gt; quadratic residue and one which is not.]

I guess you are right. Because (q,2) = 1, all quadratic residues are
bi-quadratic residues, hence no meaningful distinction:

[vmon@telly biquad-attack]$ sage mount_attack.sage
Key oracle biquadratic residue ratio: 0.500503540039062
Random oracle biquadratic residue ratio: 0.496414184570312

[https://github.com/vmon/biquad-attack]

Thanks,
Vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121214184640</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-14 18:46:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216 (ntor) redux</subject><body>

On Thu, Dec 13, 2012 at 4:21 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt;
&gt; lines 30-32:
&gt; #  Let a,A=KEYGEN() yield a new private-public keypair in G, where a is
&gt; #  the secret key and A = EXP(g,a).  If additional checks are needed to
&gt; #  insure a valid keypair, they should be performed.
&gt;
&gt; s/insure/ensure/

Fixed.

&gt; Should those checks be specified?

My understanding is that whether more checking is needed at that point
is going to be dependent on the actual group. But if you can tell me
what sentences to add, I will add them.

&gt;     In particular, you need to ensure
&gt; that the low three bits of a are 0.  Ah, I see you say it down at line
&gt; 52-53; perhaps it should be moved up here?  You also define g down at
&gt; 51, but use it at 31.

It's defined in 27-28 : "Let's say we are using a generator g for this group."

&gt;    In addition, are a,A,g in the above para meant to
&gt; be numbers or strings?

Hm. I believe that you can't go wrong reading the document if you
assume that everywhere I talk about transmitting group elements, they
must be strings, but everywhere I talk about operating on them, they
must be group elements. Then again, that's hardly a good way to write
stuff.

&gt;  You'll likely need to specify the mapping
&gt; between numbers and strings (it's just little-endian bytes, as it turns
&gt; out).

Okay; my understanding is that the curve25519 specification
encompasses that encoding; I've tried to make that explicit, though.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121215053139</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-15 05:31:39-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy alpha bundles</subject><body>

On Thu, Dec 13, 2012 at 05:10:52PM +0000, adrelanos wrote:
&gt; Or wait for IPv6 and such problems will vanish?

In fact IPv6 is one solution to the NAT problem. To my surprise, there
are a few IPv6 flash proxies operating. I was able to bootstrap and surf
over a couple of them, using an he.net tunnel and without configuring
port forwarding. There is a bug, though
(https://trac.torproject.org/projects/tor/ticket/6124) which means the
facilitator may give your address to IPv4-only proxies who are unable to
connect to you. Once that is fixed, it will be reliable; until then, you
just have to be a bit lucky.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121215061706</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-15 06:17:06-0400</timestampReceived><subject>Re: [tor-dev] Stem code review 2012-12-10</subject><body>

Hi Sean, thanks for the code review!

&gt; As to re-attaching event listeners[1], I agree that putting a specialized
&gt; hook into BaseController.msg seems bad.  I have an alternate idea[2] that
&gt; puts the re-attachment in an authenticate method.  I am not proposing this
&gt; as the solution, but I hope this sparks the idea for another way to handle
&gt; re-attachment.

I'd like to find a better option, but the trouble is that there's
multiple methods for authenticating to a Controller. In particular
there's three that come to mind...

1. Using the Controller's authenticate() method.
2. Using stem.connection's authenticate() function.
3. Using the BaseController's msg() function to send an 'AUTHENTICATE' request.

Your suggestion of moving the hook to Controller.authenticate() just
covers the first. Mine covers all three but feels a bit icky.
Suggestions welcome! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121215090609</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-15 09:06:09-0400</timestampReceived><subject>Re: [tor-dev] Opening new SOCKS to client plugin for new circuit?</subject><body>

On Tue, Dec 11, 2012 at 09:37:16PM -0500, Nick Mathewson wrote:
&gt; On Mon, Dec 3, 2012 at 12:20 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; I noticed a change in behavior in cb62a0b69a7d67b427224ca4c3075b49853a3a1f
&gt; &gt; or thereabouts. tor opens a new SOCKS connection to a client transport
&gt; &gt; plugin while bootstrapping at 50% (if descriptors are not cached) or at
&gt; &gt; 85% (if descriptors are not cached). The upshot is that the flash proxy
&gt; &gt; transport, for which new connections are not free, needs two connected
&gt; &gt; browser proxies in order to bootstrap. Earlier revisions permit
&gt; &gt; bootstrapping and circuit creation with just one connection to the
&gt; &gt; proxy.
&gt; 
&gt; Hm. If you haven't figured this out so far, it doesn't seem likely to
&gt; get solved on tor-dev.  Open a ticket on the bugtracker, please?
&gt; 
&gt; You could also investigate (using extra log messages in Tor or a
&gt; debugger or something) whether the reason the first channel isn't
&gt; getting reused is because of the "is bad for new circs" test as you
&gt; suspect.  If so, that would help confirm the hypothesis, and help come
&gt; up with a fix.

https://trac.torproject.org/projects/tor/ticket/7733

I will update the ticket if I get more debugging information.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121218232205</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-12-18 23:22:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tuning the Parameters for the Path Bias Defense</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Mike Perry (mikeperry@torproject.org):

&gt; Thus spake Mike Perry (mikeperry@torproject.org):
&gt; 
&gt; &gt; Also exists at
&gt; &gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/xxx-path-bias-tuning.txt
&gt; &gt; 
&gt; 
&gt; I've updated this proposal to address some questions and comments from
&gt; people who have reviewed it via private email. The url for these changes
&gt; is:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/209-path-bias-tuning.txt
&gt;  
&gt; The following sections were added:
&gt; "Security Considerations: Targeted Failure Attacks"
&gt; "Implementation Notes: Differences between this proposal and source"
&gt; 
&gt; I also added a couple paragraphs to the Motivation and Design
&gt; Description sections, to clarify some points.

During the course of off-list discussion, implementation, and testing,
I've decided to make the following major changes in the code that are
not yet reflected in the proposal:

1. Instead of counting circuit attempts after the first hop succeeds, we
want to wait until the second hop also succeeds. The reason is because
there currently is a large amount of variation in the per-hop rate of
onionskin failure due to CPU overload conditions. During testing, I
watched the end-to-end circuit success rate repeatedly fluctuate between
90% and 50%, with the difference being due almost entirely to per-hop
onionskin failure with reasons RESOURCELIMIT and/or INTERNAL (CPU
overload).

Waiting until the second hop completes removes a lot of the effect of
this without impacting what we're looking for (guard-to-exit bias). To
see why, imagine that each node occasionally experiences as much as 25%
onionskin failure. If we count after the first hop in such a network,
that's a success rate of only (1-.25)*(1-.25) = 0.56, which triggers our
notice alarm (set at 70%). However, if we wait until two hops, the alarm
should not trigger in this same scenario.

Further, because of this squaring of the per-hop success rates, per-hop
failure is way less appealing to the adversary than end-to-end tagging
for the same amount of network compromise. An adversary that controls
30% of the network would have to drive the end-to-end circuit success
rate down to 9% for per-hop failure, but only 30% for end-to-end
tagging-based failure. In either case, we'd still catch the per-hop
adversary as they failed their last hop, just as the end-to-end tagger
would.

Thanks for Anupam Das for bringing the per-hop failure issue up.


2. It turns out we also need to track successful circuit use as opposed
to just construction. There are ways to use cryptographic tagging after
a circuit is successfully built that enable an adversary to either
destroy that circuit before use, or simply timeout/fail all stream
attempts on that circuit.

In the implementation, we wait until the circuit is marked for close to
decide this. I currently consider a circuit successfully used if it gets
a valid RELAY response in its lifetime. A circuit is unsuccessfully
used if it is marked dirty but did not receive any successful cells back
from the exit, or if it closes unexpectedly before we get a chance to
try to use it.

Thanks to Rob Jansen for pointing this out.


3. We can't count path bias for circuits where the adversary controls
our destination node, because that node could be selected to cause us to
repeatedly fail circuits to it and make us distrust our guard nodes.
Right now, this is limited to client-side hidden service INTRO circuits,
and server-side REND circuits.

Arguably the server-side REND case is more serious than the client-side
INTRO case, except for the fact that malicious hidden service web pages
could source lots of third party content elements from failing .onions,
causing us to mistrust our guard nodes. (Per-origin stream isolation
can't fix this, unfortunately.)

This one I discovered during testing.


4. Related to 2 and 3: If a stream merely times out or experiences any
other "retriable" failure that causes us to simply try another circuit,
we need to "probe" that circuit with a faux RELAY_BEGIN cell to ensure
if we get that cell back, and don't get any (potentially tagged)
unrecognized garbage in the interim. In addition to catching RELAY-cell
taggers, this also helps us avoid the situation where an adversary
forces us to repeatedly connect to an unresponsive Internet server. See
#7691.

This one I discovered during testing.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121219010508</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-12-19 01:05:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

On Tue, Dec 18, 2012 at 6:42 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Thu, Nov 29, 2012 at 06:14:23PM +0000, Julian Yon wrote:
&gt;&gt; (3) Don't bother trying to ascertain the full exit policy, but rather
&gt;&gt; maintain a simple table of exit/IP/port combinations that have been
&gt;&gt; rejected and consult it when building/using circuits. This requires no
&gt;&gt; protocol changes (win!) at the cost of no longer blacklisting dishonest
&gt;&gt; exits entirely. Some mechanism for expiring entries would probably be a
&gt;&gt; good idea, and/or maybe hold it in a circular list so that there's a
&gt;&gt; maximum number.
&gt;
&gt; I had this same thought while rereading my earlier message: just prepend
&gt; a reject rule for this ip:port to our local version of the relay's
&gt; exit policy.
&gt;
&gt; It does let the exit "tag" you with an IP:port combo that you'll never
&gt; come back to it with. But that seems a small risk compared to the risk
&gt; of an exit relay with a complex enough policy that it causes clients to
&gt; spend two circuits for fetching each component of web pages.

Good idea!  I've added it to
https://trac.torproject.org/projects/tor/ticket/7582

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121220022132</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-20 02:21:32-0400</timestampReceived><subject>Re: [tor-dev] Idle connections in netstat</subject><body>

&gt; I also have had success in using the following:
&gt; ControlListenAddress 127.0.0.1:9051
&gt; Which binds the control port to 127.0.0.1 (localhost) and is thus not
&gt; visible to the outside world.
&gt; (Including the people on the internet port scan you just for running a Tor
&gt; node.)

Or set 'ControlPort 9051' - binding to localhost is the default. This
is all discussed in the README...
https://gitweb.torproject.org/arm.git/blob/HEAD:/README

Patches welcome if you have improvements for it. -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121222221917</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-22 22:19:17-0400</timestampReceived><subject>Re: [tor-dev] Stem code review 2012-12-21</subject><body>

Hi Sean, thanks for the code review!

&gt; Would GETINFO/GETCONF cache hit logging[1] benefit from log_once?  Or even \
&gt; something between log and log_once (e.g. rate_limited_log)?

Interesting thought, but I don't think so. When I look for cache hits
it's usually to answer the question of 'did doing activity X result in
requesting parameter Y'. Having stem log once or drop logging when it
exceeds a certain rate would make that more confusing.

&gt; Is there any particular reason for moving away from readthedocs.org?  I'm curious \
&gt; if there was more than a desire to self-host as much as possible.

I talked a bit about the reason for moving on
'https://trac.torproject.org/7324'. Mostly the reasons were (in order
by how much I cared about them)...

1. A shorter and more official sounding tpo domain.

2. The daily autobuilds on read-the-docs were always stuck, so the
documentation was only updated when I manually built it. This meant
that we usually had stale docs. Now that we're on our own hardware I
also bumped the rate of checking for new content so the site updates
within five minutes of a push.

3. Self-hosting provides better security and visitor privacy. I didn't
experiment to see how good the sandboxing of read-the-docs builds
were, but a community system that runs arbitrary code is a little
spooky.

&gt; The heartbeat time tracking is a good idea[3].  But, I wonder, should this bother \
&gt; with an accessor method?  Could this work as just well as an (non-callable) \
&gt; attribute?

I'd be fine with that. The only advantage I can think for having it as
a method is if we want custom handling in certain situations (for
instance, returning None if we're disconnected). However, we don't
presently do that so I could go either way.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121223054342</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-12-23 05:43:42-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor [was Re: Brainstorming a Tor censorship analysis tool]</subject><body>

On Thu, Dec 20, 2012 at 11:25 AM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Wed, Dec 19, 2012 at 8:57 PM, Simon &lt;simonhf@gmail.com&gt; wrote:
&gt;&gt; On Wed, Dec 19, 2012 at 4:35 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt;&gt; What's your favorite C mocking solution for integrating with existing
&gt;&gt;&gt; codebases without much disruption?
&gt;&gt;
&gt;&gt; This could be worth a separate thread. I'm not aware of really good
&gt;&gt; solutions for C.
&gt;  [....]
&gt;
&gt; I had a look around and found a few more possibilities, including:
&gt;
&gt;   https://code.google.com/p/test-dept/
&gt;   http://throwtheswitch.org/white-papers/cmock-intro.html
&gt;   https://code.google.com/p/cmockery/
&gt;
&gt; None of them looks compellingly great, TBH.  The methods that people
&gt; seem to be using code-rewriting tricks, mandatory macro tricks, LLVM
&gt; tricks, x86 assembly tricks, and uglier stuff still.
&gt;
&gt; Perhaps somebody else has a good recommendation?  It would be sad if
&gt; we went ant built our own.

Yep, I've seen those and like you my socks have not been knocked off
:-) It is sad but the reality is that there are relatively few teams
actively measuring and/or enforcing code coverage. And from those that
do then most say it's too difficult to get coverage above the 70% to
90% range... probably because the tools for mocking etc don't exist
and/or are too limiting e.g. compiler specific. And then there are
even less teams doing high levels of cross platform coverage. I've
only ever heard of one open source project that has 100% code coverage
with 1000s of tests that run in seconds and happens to be C and cross
platform too.

&gt; [...]
&gt;&gt;&gt; We're a part of the way there, then. Like I said, we've got multiple
&gt;&gt;&gt; network mocking/simulation tools.  With a simple Chutney network plus
&gt;&gt;&gt; the unit tests, we're at ~ 53% coverage... and all Chutney is doing
&gt;&gt;&gt; there is setting up a 10-node network and letting it all bootstrap,
&gt;&gt;&gt; without actually doing any end-to-end tests.
&gt;&gt;
&gt;&gt; Sounds good.
&gt;&gt;
&gt;&gt; I guess Chutney must be a separate project since I can't find it in
&gt;&gt; the Tor sources .tar.gz ?
&gt;
&gt; Yup.  It's accessible from gitweb.torproject.org.  I'd be surprised if
&gt; more than 5 people have tried to run it, ever.

:-)

Why make it a separate project? Why not make it part of make test in
the Tor project?

&gt; (More results: unittests + chutney gives 52.60% coverage.  Unittests +
&gt; stem gives 39.03% coverage.  Unit tests + stem + chutney gives 54.49%
&gt; coverage.)
&gt;
&gt;&gt;&gt; (ExperimenTor and Shadow are both heavier-weight alternatives for
&gt;&gt;&gt; running bigger networks, but I think that here they might not be
&gt;&gt;&gt; needed, since their focus seems to be on performance measurement.
&gt;&gt;&gt; Chutney is enough for basic integration testing, and has the advantage
&gt;&gt;&gt; that it's running unmodified Tor binaries.  Stem is interesting here
&gt;&gt;&gt; too, since it exercises Tor's control port protocol pretty heavily.)
&gt;
&gt; More links:
&gt; https://shadow.cs.umn.edu/
&gt; http://crysp.uwaterloo.ca/software/exptor/
&gt;
&gt; I'm not sure anybody's ever tried to do coverage with them.
&gt;
&gt;  [..]
&gt;&gt;&gt; Yes, I like this idea a lot, especially if you're able to help with
&gt;&gt;&gt; it, especially if it's based on an already-existing
&gt;&gt;&gt; launch-a-network-on-localhost tool.
&gt;&gt;
&gt;&gt; I'm not aware of such a tool.
&gt;
&gt; Chutney is such a tool; ExperimenTor can be made (I think) to act as
&gt; such a tool; Shadow is a little more complicated.
&gt;
&gt;&gt; The way I have done it in the past is to
&gt;&gt; use Perl to lunch and monitor the various processes. The good thing
&gt;&gt; about Perl is that it can run unmodified on both *nix and Windows,
&gt;&gt; plus you can do one-liners.
&gt; [...]
&gt;
&gt; Hm.  I'm not going to say that I'd turn down work in perl, but the
&gt; rest of the Tor developers don't spend much time using perl.  I don't
&gt; know that any of us have done a perl program of over 100 lines in the
&gt; last 5-6 years.  I'm not saying "perl sucks" or "I refuse to use
&gt; anything written in perl", but you should be aware that if you do
&gt; write anything in perl, there probably aren't a lot of other people
&gt; involved with Tor right now with the knowhow to effectively
&gt; collaborate on the perl parts or help to maintain them.

We could just write everything in C?

--
Simon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121223214908</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-12-23 21:49:08-0400</timestampReceived><subject>Re: [tor-dev] Testing in Tor</subject><body>

&gt; ... but running the Stem tests to learn about Tor code would
&gt; not be helpful.

I have mixed feelings on this. Stem's tests are chiefly to test Stem,
but the integration tests are for checking how our library interacts
with a live Tor instance. There's a lot of value to Stem for us to
prevent bugs and regression in the Tor controller interface - it helps
Stem's users and prevents us from needing to implement gross hacks
(see for instance the connection.py code for handling #4881).

I'd love for Tor developers to expand Stem's integ tests to better
test's Tor's controller interface. I'm not, however, interested in
having Stem test Tor's other functionality (relaying, hidden service,
etc). I very much agree that down that road lies terrible scope creep.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121224130220</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-12-24 13:02:20-0400</timestampReceived><subject>Re: [tor-dev] want to contribute to tor</subject><body>

Debamitro Chakraborti:
&gt; Hi,
&gt; 
&gt; I am a C/C++ programmer wanting to dabble in the world of open source. I
&gt; got to know of Tor and I felt the product is an important one for humanity.
&gt; I have downloaded, built and run tor and also torsocks. Are there any
&gt; coding tasks needed in tor at present? Do let me know.
&gt; 
&gt; Regards,
&gt; Debamitro Chakraborti

Hi,

perhaps solving the ticket "add http proxy support to Tor"?
https://trac.torproject.org/projects/tor/ticket/6060

Or working on torsocks maybe?

At the moment the torsocks input methods are a bit weird. The and
usewithtor, torify and uwt wrappers should be be redundant.

https://trac.torproject.org/projects/tor/wiki/doc/torsocks
https://lists.torproject.org/pipermail/tor-talk/2012-July/024925.html

The uwt interface could be extended to a point where all settings which
can be defined in the config file can also be defined by command line.
And if that's too much, an option to supply the configuration file by
command line would help as well.

Interface could look like this:

Usage: torsocks [-h] [-v] -t server_type -i ip -p port &lt;command&gt;
[&lt;options&gt;...]
Example: torsocks -t 5 -i 127.0.0.1 -p 9050 wget
https://check.torproject.org
         sudo torsocks -t 5 -i 192.168.0.10 -p 9104 /usr/bin/apt-get
--yes dist-upgrade

The list of other torsocks issues also looks reasonable small.

https://code.google.com/p/torsocks/issues/list?can=2&amp;q=&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&amp;cells=tiles


https://trac.torproject.org/projects/tor/wiki/doc/torsocks#Tickets

And if I am not mistaken, Vidalia is currently lacking development.

Cheers,
adrelanos
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121226215220</emailId><senderName>Philipp Winter</senderName><senderEmail>identity.function@gmail.com</senderEmail><timestampReceived>2012-12-26 21:52:20-0400</timestampReceived><subject>Re: [tor-dev] Brainstorming a Tor censorship analysis tool</subject><body>

First of all thanks a lot for summing all of that up in such great detail,
Arturo. Comments inline.

On Fri, Dec 21, 2012 at 04:16:32PM +0100, Arturo Filast=F2 wrote:
&gt; # Collection of packet captures specific to the sent and received packets
&gt;
&gt; When you run a ooniprobe test that inherits from the scapy test template
&gt; (https://ooni.torproject.org/docs/api/ooni.templates.html#module-ooni.tem=
plates.scapyt)
&gt; the packets sent and received (i.e. that are answers to the packet(s) sen=
t)
&gt; will be captured.
&gt;
&gt; When configured to not include the probe IP address, source IP of sent pa=
ckets =

&gt; and dst IP of received packets is replaced with 127.0.0.1. (warning: if t=
he IP =

&gt; address of the probe is present in some other parts of the packet it will=
 not get =

&gt; stripped, for example if it's present in the ICMP citation)

Sounds like a good thing to have.


&gt; # Reporting system
&gt;
&gt; Currently we only support collection of YAML formatted reports (that mean=
s not =

&gt; .pcap files) and only via Tor Hidden Services.
&gt;
&gt; Extending it to support reporting via HTTP(s) should be trivial and is a =
feature =

&gt; that we have already received a request for.
&gt;
&gt; Adding support for collecting also .pcaps also probably does not require =
that much =

&gt; amount of time and is something that will happen in the near future.

That sounds good. Hidden services will not be useful in this case because T=
or is
expected to be unavailable but HTTPS could work.


&gt; # Things to come
&gt;
&gt; ooniprobe will soon expose a HTTP based API that binds to localhost that =
can then
&gt; be (optionally) exposed as a Tor Hidden Service. Such API will allow rese=
archers to
&gt; connect to a probe and run some tests and will allow us to build a JS/HTM=
L5 client
&gt; interface to allow users to select which tests to run and monitor the sta=
tus of running
&gt; tests.

Hmm, what's the use case here? To provide an "anonymous" ooniprobe which ca=
n be
controlled remotely by people I trust? I guess it won't be possible to hide=
 the
probe's IP address since I can just run a test which makes it connect to an=
 IP
address under my control?


&gt; More details here:
&gt; https://ooni.torproject.org/docs/architecture.html#ooniprobe-api
&gt;
&gt; For a birds-eye view of the project see:
&gt; https://ooni.torproject.org/docs/architecture.html

Thanks. On a more general note, a core requirements is to make the analysis=
 tool
easy to use since we can't expect users to mess around with configuration. =
How
easy do you think would it be to package an ooniprobe with our analysis tes=
ts in
a self-contained executable which can then simply be run by users?


&gt; Even if you do not end up using ooniprobe for developing your system toda=
y, I =

&gt; highly encourage you to use the libraries that we are using so that in th=
e =

&gt; future we can find a way to integrate code from each others projects.

Yes, agreed.

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121228155947</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2012-12-28 15:59:47-0400</timestampReceived><subject>[tor-dev] Opt-in model for flash proxy</subject><body>

Alexandre recently finished up work adding an opt-in option for flash
proxies. Now, clicking on the badge will bring up this page with yes/no
buttons:

http://crypto.stanford.edu/flashproxy/options.html

The default model is still opt-out, though this may change in the
future. If you want to make the badge on your site opt-in-only, add the
cookierequired query parameter to your iframe, and encourage your
visitors to visit the options page. The options work by setting a
cookie.

&lt;iframe src="//crypto.stanford.edu/flashproxy/embed.html?cookierequired" width="80" \
height="15" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;

To summarize, here is what happens if you use cookierequired or not. The
only difference is when the user hasn't set a cookie at all.

Without cookierequired:
				no cookie	cookie=no	cookie=yes
	Will I be a proxy?	yes		no		yes
With cookierequired:
				no cookie	cookie=no	cookie=yes
	Will I be a proxy?	no		no		yes

If we switch to opt-in by default in the future, we'll ignore the
cookierequired parameter and always use the no/no/yes part of the table.
It will also help us switch to opt-in-only if we can get lots of people
to opt in in advance.

David Fifield
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121231184837</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-12-31 18:48:37-0400</timestampReceived><subject>Re: [tor-dev] Xeronet's torrc</subject><body>

On Thu, 27 Dec 2012 09:22:00 +0545
Nathan Freitas &lt;nathan@freitas.net&gt; wrote:

&gt; How does it work ? Well, Tor works just great 'out-of-the-box',
&gt; however, by tweaking settings and controlling how Tor connects to its
&gt; own network we can improve on privacy and security.

...based on what evidence?

&gt; (1) Block 'Bad' Exit Nodes using: ExcludeNodes

If the 'Bad' flag is assigned, then you already cannot exit from the
relay. No need to block it.

&gt; Recommended: 'problem' internet countries Block List: Afghanistan,
&gt; Algeria, Armenia, Argentina, Azerbaijan, Bangladesh, Belarus, Burma,
&gt; China, Colombia, Cuba, Egypt, Eritrea, Ethiopia, Gambia, Georgia,
&gt; Ghana, Guatemala, India, Indonesia, Iraq, Iran, Israel, Jordan,
&gt; Kazakhstan, Kuwait, Kyrgyzstan, Laos, Lebanon, Libya, Macau, Malawi,
&gt; Mali, Malaysia, Mauritania, Mexico, Moldova, Mongolia, Morocco,
&gt; Nepal, Nigeria, North Korea, Oman, Pakistan, Palestinian Territories,
&gt; Paraguay, Peru, Philippines, Qatar, Russia, Rwanda, Saudi Arabia,
&gt; Somalia, South Africa, South Korea, Sudan, Sri Lanka, Syria, Taiwan,
&gt; Tajikistan, Thailand, Tunisia, Turkey, Turkmenistan, UAE, Uganda,
&gt; Uzbekistan, Venezuela, Vietnam, Yemen, Zimbabwe.

Why not just say 'block countries not full of white people'? Seriously,
wtf is up with that list.

This whole list is like alchemy and trying to turn water to wine. Using
the default torrc is probably far safer for 99.9% of users. I don't see
how this custom torrc is going to improve anything, other than an
attacker learning how unique you are in the tor network.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121231185234</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-12-31 18:52:34-0400</timestampReceived><subject>Re: [tor-dev] Fwd: [Wikitech-l] Can we help Tor users make legitimate edits?</subject><body>

On Fri, 28 Dec 2012 15:26:25 -0800
Zack Weinberg &lt;zackw@panix.com&gt; wrote:

&gt; 3) Look at Nymble -
&gt; http://freehaven.net/anonbib/#oakland11-formalizing and
&gt; http://cgi.soic.indiana.edu/~kapadia/nymble/overview.php .  It would
&gt; allow Wikimedia to distance itself from knowing people's identities,
&gt; but still allow admins to revoke permissions if people acted up.  The
&gt; user shows a real identity, gets a token, and exchanges that token
&gt; over tor for an account.  If the user abuses the site, Wikimedia site
&gt; admins can blacklist the user without ever being able to learn who
&gt; they were or what other edits they did.  More:
&gt; https://cs.uwaterloo.ca/~iang/ Ian Golberg's, Nick Hopper's, and Apu
&gt; Kapadia's groups are all working on Nymble or its derivatives.  It's
&gt; not ready for production yet, I bet, but if someone wanted a Big
&gt; Project....

I think nymble is superceded by blacr,
http://freehaven.net/anonbib/cache/blacr-ndss.pdf. It's model usecase
is Tor-using editors wishing to work with Wikipedia.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121231233258</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-12-31 23:32:58-0400</timestampReceived><subject>Re: [tor-dev] TorCtl Deprecation and Stem Plans</subject><body>

On Mon, Dec 31, 2012 at 02:36:30PM -0800, Damian Johnson wrote:
&gt; So here's what I propose. For the next couple months stem will have an
&gt; open beta. If you'd like to have input on the future of our python
&gt; controller space then please give Stem a try and tell me the
&gt; following...
&gt; 
&gt; * What pain points did you encounter? Is there anything that you'd
&gt; like to see changed or that we're missing?

One thing I used the old controller library for is:

- Create a bunch of circuits, possibly using Tor's default circuit
  creation algorithm, but usually by specifying an explicit list of ORs.

- When a new stream is created, attach it to a (cleverly selected)
  circuit.

How would I do this in stem?  I don't see anything obvious in the API
documentation.

Thanks,

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121101151945</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-11-01 15:19:45-0400</timestampReceived><subject>[tor-dev] gsathya's October</subject><body>

[Attachment #2 (multipart/alternative)]


I was mostly busy with giving the required exams for grad school and
generally worrying about. I did manage to do a bunch of Tor stuff -

- Implemented DisableNetwork in Orbot. Orbot stops making new connections
and drops existing ones once you lose network connectivity, saving battery
life. Also, one of the features I implemented during GSoC11 is now finally
merged into master -- Orbot now shows usage statistics(bandwidth).

- Wrote a whole bunch of tests for Pyonionoo -- which in hindsight weren't
really good. I will mostly need to refactor them and make them more modular.

- Added more functionality to Pyonionoo -- /bandwidths and /details work now

- Hacked on #1854[0]

- Set up a pyobfsproxy bridge to help test.

- Found some bugs in stem - #7133, #7250, #7251

- Generally hung around #tor providing support. Hopefully I can do this a
lot more.

[0] - https://trac.torproject.org/projects/tor/ticket/1854

[Attachment #5 (text/html)]

&lt;div&gt;I was mostly busy with giving the required exams for grad school and generally \
worrying about. I did manage to do a bunch of Tor stuff - &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- \
Implemented DisableNetwork in Orbot. Orbot stops making new connections and drops \
existing ones once you lose network connectivity, saving battery life. Also, one of \
the features I implemented during GSoC11 is now finally merged into master -- Orbot \
now shows usage statistics(bandwidth).&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;- Wrote a whole bunch of tests for Pyonionoo -- which in hindsight \
weren't really good. I will mostly need to refactor them and make them more \
modular.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Added more functionality to Pyonionoo -- /bandwidths \
and /details work now&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Hacked on #1854[0]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Set up a \
pyobfsproxy bridge to help test.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Found some bugs in stem - \
#7133, #7250, #7251&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Generally hung around #tor providing \
support. Hopefully I can do this a lot more.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[0] - &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1854"&gt;https://trac.torproject.org/projects/tor/ticket/1854&lt;/a&gt;&lt;/div&gt;




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121101171111</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-11-01 17:11:11-0400</timestampReceived><subject>[tor-dev] [Patch] tools\tor-fw-helper\tor-fw-helper-natpmp.c</subject><body>

The code in tools\tor-fw-helper\tor-fw-helper-natpmp.c does
things wrong on Winsock where e.g. errno isn't set on 
socket-errors and 'fd' is (always?) &gt;= FD_SETSIZE. 
Patch attached.

--gv



["diffs-1.txt;" (text/plain)]

--- Git-latest\src\tools\tor-fw-helper\tor-fw-helper-natpmp.c	2012-11-01 18:05:12.246093500 +0100
+++ tor-fw-helper-natpmp.c	2012-11-01 16:37:16.699218500 +0100
@@ -93,16 +93,20 @@
 {
   int r;
   fd_set fds;
+
+#ifndef WIN32
   if (fd &gt;= FD_SETSIZE) {
     fprintf(stderr, "E: NAT-PMP FD_SETSIZE error %d\n", fd);
     return -1;
   }
+#endif
+
   FD_ZERO(&amp;fds);
   FD_SET(fd, &amp;fds);
   r = select(fd+1, &amp;fds, NULL, NULL, timeout);
   if (r == -1) {
     fprintf(stderr, "V: select failed in wait_until_fd_readable: %s\n",
-            strerror(errno));
+            tor_socket_strerror(tor_socket_errno(fd)));
     return -1;
   }
   /* XXXX we should really check to see whether fd was readable, or we timed
@@ -140,12 +144,12 @@
     if (is_verbose)
       fprintf(stderr, "V: attempting to readnatpmpreponseorretry...\n");
     r = readnatpmpresponseorretry(&amp;(state-&gt;natpmp), &amp;(state-&gt;response));
-    sav_errno = errno;
+    sav_errno = tor_socket_errno(state-&gt;natpmp.s);

     if (r&lt;0 &amp;&amp; r!=NATPMP_TRYAGAIN) {
       fprintf(stderr, "E: readnatpmpresponseorretry failed %d\n", r);
       fprintf(stderr, "E: errno=%d '%s'\n", sav_errno,
-              strerror(sav_errno));
+              tor_socket_strerror(sav_errno));
     }

   } while (r == NATPMP_TRYAGAIN);
@@ -198,7 +202,7 @@
     if (tor_fw_options-&gt;verbose)
       fprintf(stderr, "V: NAT-PMP attempting to read reponse...\n");
     r = readnatpmpresponseorretry(&amp;(state-&gt;natpmp), &amp;(state-&gt;response));
-    sav_errno = errno;
+    sav_errno = tor_socket_errno(state-&gt;natpmp.s);

     if (tor_fw_options-&gt;verbose)
       fprintf(stderr, "V: NAT-PMP readnatpmpresponseorretry returned"
@@ -208,7 +212,7 @@
       fprintf(stderr, "E: NAT-PMP readnatpmpresponseorretry failed %d\n",
               r);
       fprintf(stderr, "E: NAT-PMP errno=%d '%s'\n", sav_errno,
-              strerror(sav_errno));
+              tor_socket_strerror(sav_errno));
     }

   } while (r == NATPMP_TRYAGAIN );


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121101173733</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-01 17:37:33-0400</timestampReceived><subject>Re: [tor-dev] [Patch] tools\tor-fw-helper\tor-fw-helper-natpmp.c</subject><body>

[Attachment #2 (multipart/alternative)]


On Thu, Nov 1, 2012 at 1:11 PM, Gisle Vanem &lt;gvanem@broadpark.no&gt; wrote:

&gt; The code in tools\tor-fw-helper\tor-fw-**helper-natpmp.c does
&gt; things wrong on Winsock where e.g. errno isn't set on socket-errors and
&gt; 'fd' is (always?) &gt;= FD_SETSIZE. Patch attached.


Thanks. I've copied this information to the bugtracker as bug 7280 (
https://trac.torproject.org/projects/tor/ticket/7280 ).

best wishes,
-- 
Nick

[Attachment #5 (text/html)]

On Thu, Nov 1, 2012 at 1:11 PM, Gisle Vanem &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:gvanem@broadpark.no" target="_blank"&gt;gvanem@broadpark.no&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex"&gt;
 The code in tools\tor-fw-helper\tor-fw-&lt;u&gt;&lt;/u&gt;helper-natpmp.c does&lt;br&gt;
things wrong on Winsock where e.g. errno isn't set on socket-errors and \
'fd' is (always?) &gt;= FD_SETSIZE. Patch \
attached.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks. I've copied this information to \
the bugtracker as bug 7280 ( &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/7280"&gt;https://trac.torproject.org/projects/tor/ticket/7280&lt;/a&gt; \
).&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;best wishes,&lt;/div&gt;&lt;div&gt;-- \
&lt;/div&gt;&lt;div&gt;Nick&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121101194122</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-01 19:41:22-0400</timestampReceived><subject>[tor-dev] Reminder of November, December deadlines for Tor 0.2.4</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, all!

From the Tor 0.2.4 schedule at
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :

"""November 20, 2012: Big feature proposal freeze. Any big feature which
requires a design proposal must have its design proposal finished by this
date.  If it needs changes after this date, then maybe we didn't design it
well enough, and we probably shouldn't merge it.

December 10, 2012: Big feature merge freeze. No big features will be merged
after this date.

December 15, 2012: Small feature proposal freeze. Any small feature which
requires a design proposal must have its tiny little design proposal
finished by this date.

January 10, 2013: Feature merge freeze. No features after this date. I mean
it.
...
The definition of "big patch" is deliberately vague.

Note that the cutoffs above are merge freezes, not submission freezes."""

(I've just added 10 days to that first deadline, and 5 days to the third.)

Also, I'm currently thinking that, to give these deadlines teeth, I
shouldn't self-enforce, since I've veered between "pushover" and "insane
zealot" in the past in ways that didn't make a lot of sense.  Rather, I'm
going to say that in cases of doubt ("Is this a little feature") and cases
where I'd like to violate freezes ("surely this can go in on December 12"),
I'm not going to merge patches on my sole discretion any more. Rather, I'm
going to say that at least two of me, Roger, and Andrea ought to agree to
violate a freeze before we do so.  (I will try not to forget and mess this
up.)  With any luck, this will let us get closer to a reasonable 6 month
release cycle.

yrs,
-- 
Nick

[Attachment #5 (text/html)]

Hi, all!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From the Tor 0.2.4 schedule at &lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024"&gt;https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024&lt;/a&gt; \
:&lt;br&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"""November 20, 2012: Big feature \
proposal freeze. Any big feature which requires a design proposal must have its \
design proposal finished by this date.  If it needs changes after this date, then \
maybe we didn't design it well enough, and we probably shouldn't merge \
it.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;December 10, 2012: Big feature merge freeze. No big \
features will be merged after this date.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;December 15, 2012: \
Small feature proposal freeze. Any small feature which requires a design proposal \
must have its tiny little design proposal finished by this date.&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;January 10, 2013: Feature merge freeze. No features after this \
date. I mean it.&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;The definition of "big patch" is \
deliberately vague.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note that the cutoffs above are merge \
freezes, not submission freezes."""&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(I've just added 10 days to that first deadline, and 5 days \
to the third.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, I'm currently thinking that, to \
give these deadlines teeth, I shouldn't self-enforce, since I've veered \
between "pushover" and "insane zealot" in the past in ways that \
didn't make a lot of sense.  Rather, I'm going to say that in cases of doubt \
("Is this a little feature") and cases where I'd like to violate \
freezes ("surely this can go in on December 12"), I'm not going to \
merge patches on my sole discretion any more. Rather, I'm going to say that at \
least two of me, Roger, and Andrea ought to agree to violate a freeze before we do \
so.  (I will try not to forget and mess this up.)  With any luck, this will let us \
get closer to a reasonable 6 month release cycle.&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;yrs,&lt;/div&gt;&lt;div&gt;-- &lt;/div&gt;&lt;div&gt;Nick&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121101200453</emailId><senderName>Gisle Vanem</senderName><senderEmail>gvanem@broadpark.no</senderEmail><timestampReceived>2012-11-01 20:04:53-0400</timestampReceived><subject>Re: [tor-dev] circuitmux_ewma.c</subject><body>

"Nick Mathewson" &lt;nickm@alum.mit.edu&gt; wrote:

&gt; I'm happy to open another ticket for these, but have you tried using the
&gt; bugtracker yourself? Is there some UI issue or something that prevents you
&gt; from opening tickets? 

I used the easy way-out; sent an email. It didn't occured at the time, there
was a bugtracker. Will use that next time,.

&gt;  * Second, the workaround is error-prone.  If the fields in the structure
&gt; are ever designated in an order that doesn't match their declaration order
&gt; in the structure definition, we'll get a situation where C99-compliant
&gt; compilers generate the code as intended, but where non-C99-compliant
&gt; compilers fail, or worse-- generate different code.

I'm aware of that. That's probably why that C99 feature was added.

--gv

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121102171342</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-02 17:13:42-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - October 2012</subject><body>

Ahhh, the beginning of winter. That very special time of the year when
Seattle skies are perpetual overcast and gloomy. When crowds flock to
the coffee shops and the best thing to do with your time is hook up to
a caffeine IV and code.

... on a side note it has been a really productive month.

========================================

* Stem Website

Stem now has a far more developer friendly website!

https://stem.readthedocs.org/en/latest/index.html

Barring the obvious new sections I revised vast swaths of stem's API
documentation.

Feedback welcome! The tutorial section is just starting, but I have
some ideas for expanding it.

========================================

* Network Status Document Parsing

After a couple months of work by Ravi and me the network status
document handling is *finally* done. It turned out to be a... very big
feature branch.

Announcement: https://lists.torproject.org/pipermail/tor-dev/2012-October/004092.html
Docs: https://stem.readthedocs.org/en/latest/api/descriptor/networkstatus.html
Code: https://gitweb.torproject.org/stem.git/commitdiff/ea356b7?hp=5cd457b

With this done we're very nearly at feature parity with metrics-lib
(and I suspect a bit past it in terms of testing). In finishing this
up I also spotted an undocumented oddity with microdescriptor
'directory-signature' lines. [1]

========================================

* GSoC Mentor Summit

Met with the developers of numerous other open source projects. I was
really impressed at how many worthwhile conversations were crammed
into such a short conference. Highlights include...

* Arc from Python had distutils suggestions, thanks to which stem and
arm will soon have both Python 2.x and 3.x support.
* OSU's Open Source Labs are entertaining the thought of running Tor relays.
* Discussed TorBirdy and other Tor projects with Sukhbir. He mentioned
an issue with trac permissions that is now fixed. [2]
* Talked with Terri from Python about Mailman 3, which would be a
great answer for the requests we get to have a Tor forum. [3]
* Attended a talk led by Marina from Gnome about their outreach
program for women. We'll likely be taking part in it this year.

For the full trip report see...
https://lists.torproject.org/pipermail/tor-dev/2012-October/004115.html

========================================

Other changes include...

* Cleaning up orphaned pyc files as a part of running our tests
(feature suggested by Ravi) [4]
* Ported arm's str_tools module to stem and added unit tests [5][6]
* Code reviewed Ravi's attach_stream addition, waiting on the revisions [7]
* Arm troubleshooting on irc with zack and ultramage. Also fixed a
broken link on arm's site spotted by wh6iQ.

* A new contributor, Eoin, spotted some great issues and contributed
patches. Tickets include...
  * python 2.5 compatibility bugs [8]
  * count of the number of skipped tests [9]
  * error with the whitespace checker [10]
  * spelling corrections [11]

* Sathyanarayanan spotted some nice bugs including...
  * on python 2.5-2.6 a missing microdescriptor consensus wasn't
causing the related test to be skipped [12]
  * integ tests for the process module would fail if tor was already
running [13]

========================================

Next up: Ravi and I are working on tor event handling, the last major
feature stem is missing as a controller library. After that we plan to
port arm over, then tidy up loose ends in preparation for stem's
initial release.

Cheers! -Damian

[1] https://trac.torproject.org/7072
[2] https://trac.torproject.org/7186
[3] https://trac.torproject.org/3592
[4] https://trac.torproject.org/7103
[5] https://trac.torproject.org/7158
[6] https://stem.readthedocs.org/en/latest/api/util/str_tools.html
[7] https://trac.torproject.org/7152
[8] https://trac.torproject.org/7244
[9] https://trac.torproject.org/7246
[10] https://trac.torproject.org/7263
[11] https://trac.torproject.org/7245
[12] https://trac.torproject.org/7250
[13] https://trac.torproject.org/7251
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106134138</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-11-06 13:41:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Tue, 06 Nov 2012 11:51:10 +0000, Julian Yon wrote:
&gt; On Tue, 6 Nov 2012 01:06:56 -0500
&gt; Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt; &gt; If we ripped out stream-level sendmes, then as you say, we'd have to
&gt; &gt; choose between "queue all the data for the stream, no matter how big
&gt; &gt; it gets" and "tell the whole circuit to shut up".

I had a third one - which isn't quite practical: Just kill that stream. :-)

&gt; A possible compromise: A stream level XOFF/XON instead of SENDME would
&gt; allow us to save the flow control bandwidth for properly flowing
&gt; streams and still have a way to deal with stalled ones.

In another protocol I tended to piggyback the SENDME equivalent
onto the data frames of the other direction, but here there is
typically no data flowing in the other direction when you need
to SENDME: Big downloads.

Another idea: Put the stream-level SENDMEs into the circuit-level
ones. As far as I can see there should be sufficient space to
do so, even for several streams at once. At that point, we could
also change the SENDME to include a specific number of cells
to additionally allow on each level, instead of the fixed 100/50.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121108133455</emailId><senderName>anonym</senderName><senderEmail>anonym@lavabit.com</senderEmail><timestampReceived>2012-11-08 13:34:55-0400</timestampReceived><subject>Re: [tor-dev] [Tails-dev]  Working on GUI</subject><body>

07/11/12 18:41, intrigeri wrote:
&gt; Hi,
&gt; 
&gt; Damian Johnson wrote (06 Nov 2012 23:31:02 GMT) :
&gt;&gt; Runa A. Sandvik wrote (06 Nov 2012 22:44:03 GMT) :
&gt;&gt;&gt; Actually, both Tails and the Tor Browser Bundle could benefit from
&gt;&gt;&gt; a usability study.
&gt; 
&gt; Thank you, Runa, for mentioning Tails here.

Seconded! Thank you!

&gt;&gt; Usability studies only help if there's development resources to make
&gt;&gt; the suggestions happen. Mike and Tails should be the ones to make
&gt;&gt; the call about if they have the bandwidth to take advantage of
&gt;&gt; a usability study or not.

The TBB usability study [1] mentioned by Greg Norcie in this thread is
quite interesting, even for Tails. It identifies several UX or
documentation failures in TBB that lead to "stop-points" (a point which
a given user cannot proceed beyond) that are also directly applicable to
Tails, or that have some more or less obvious parallel in Tails. Several
of these issues are similar to what Andrew observed in his Tails
usability study.

Cheers!

[1] http://petsymposium.org/2012/papers/hotpets12-1-usability.pdf
[2] https://lists.torproject.org/pipermail/tor-dev/2012-April/003472.html

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121108141610</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-11-08 14:16:10-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

[Attachment #2 (multipart/alternative)]


On 11/6/12 10:00 PM, vimalathithan wrote:
&gt;
&gt; Hi, I am new to this community.
&gt;
&gt;  
&gt;
&gt; A group consists of 5 members from School of Informatics and
&gt; Computing, working with Professor Jean Camp on a research paper.
&gt;
&gt; Our research is to carry out a case study after making changes in the
&gt; UI of Tor Browser.
&gt;
&gt;  
&gt;
&gt; Could anyone here, please provide a link to learn more about Tor UI to
&gt; get started with the development activities.
&gt;
Imho, creating a simplifier Tor Browser Bundle without Vidalia, with a
single executable on which you make "click-click" and it open an
Option-less browser would be a very cool stuff.

Starting back from the *most simplified solution*

Fabio

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    &lt;div class="moz-cite-prefix"&gt;On 11/6/12 10:00 PM, vimalathithan
      wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote cite="mid:015f01cdbc61$ba65b650$2f3122f0$@com"
      type="cite"&gt;
      &lt;meta http-equiv="Content-Type" content="text/html;
        charset=ISO-8859-1"&gt;
      &lt;meta name="Generator" content="Microsoft Word 12 (filtered
        medium)"&gt;
      &lt;style&gt;&lt;!--
/* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;
      &lt;div class="WordSection1"&gt;
        &lt;p class="MsoNormal"&gt;Hi, I am new to this community. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;
        &lt;p class="MsoNormal"&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;
        &lt;p class="MsoNormal"&gt;A group consists of 5 members from School
          of Informatics and Computing, working with Professor Jean Camp
          on a research paper.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;
        &lt;p class="MsoNormal"&gt;Our research is to carry out a case study
          after making changes in the UI of Tor Browser.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;
        &lt;p class="MsoNormal"&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;
        &lt;p class="MsoNormal"&gt;Could anyone here, please provide a link to
          learn more about Tor UI to get started with the development
          activities. &lt;/p&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Imho, creating a simplifier Tor Browser Bundle without Vidalia, with
    a single executable on which you make "click-click" and it open an
    Option-less browser would be a very cool stuff.&lt;br&gt;
    &lt;br&gt;
    Starting back from the *most simplified solution*&lt;br&gt;
    &lt;br&gt;
    Fabio&lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121104233151</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-04 23:31:51-0400</timestampReceived><subject>[tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

Filename: 213-remove-stream-sendmes.txt
Title: Remove stream-level sendmes from the design
Author: Roger Dingledine
Created: 4-Nov-2012
Status: Open

1. Motivation

  Tor uses circuit-level sendme cells to handle congestion / flow
  fairness at the circuit level, but it has a second stream-level
  flow/congestion/fairness layer under that to share a given circuit
  between multiple streams.

  The circuit-level flow control, or something like it, is needed
  because different users are competing for the same resources. But the
  stream-level flow control has a different threat model, since all the
  streams belong to the same user.

  When the circuit has only one active stream, the downsides are a)
  that we waste 2% of our bandwidth sending stream-level sendmes, and b)
  because of the circuit-level and stream-level window parameters we
  picked, we end up sending only half the cells we might otherwise send.

  When the circuit has two active streams, they each get to send 500
  cells for their window, because the circuit window is 1000. We still
  spend the 2% overhead.

  When the circuit has three or more active streams, they're all typically
  limited by the circuit window, since the stream-level window won't
  kick in. We still spend the 2% overhead though. And depending on their
  sending pattern, we could experience cases where a given stream might
  be able to send more data on the circuit, but it chooses not to because
  its stream-level window is empty.

  More generally, we don't have a good handle on the interactions between
  all the layers of congestion control in Tor. It would behoove us to
  simplify in the case where we're not clear on what it buys us.

2. Design

  We should strip all aspects of this stream-level flow control from
  the Tor design and code.

2.1. But doesn't having a lower stream window than circuit window save
     room for new streams?

  It could be that a feature of the stream window is that there's always
  space in the circuit window for another begin cell, so new streams
  will open faster than otherwise. But first, if there are two or more
  active streams going, there won't be any extra space. Second, since
  begin cells are client-to-exit, and typical circuits don't fill their
  outbound circuit windows very often anyway, and also since we're hoping
  to move to a world where we isolate more activities between circuits,
  I'm not inclined to worry much about losing this maybe-feature.

  See also proposal 168, "reduce default circuit window" -- it's
  interesting to note that proposal 168 was unknowingly dabbling in
  exactly this question, since reducing the default circuit window to
  500 or less made stream windows moot. It might be worth resurrecting
  the proposal 168 experiments once this proposal is implemented.

2.2. If we dump stream windows, we're effectively doubling them.

  Right now the circuit window starts at 1000, and the stream window
  starts at 500. So if we just rip out stream windows, we'll effectively
  change the stream window default to 1000, doubling the amount of data
  in flight and potentially clogging up the network more.

  We could either live with that, or we could change the default circuit
  window to 500 (which is easy to do even in a backward compatible way,
  since the edge connection can simply choose to not send as many cells).

3. Evaluation

  It would be wise to have some plan for making sure we didn't screw
  up the network too much with this change. The main trouble there is
  that torperf et al only do one stream at a time, so we really have no
  good baseline, or measurement tools, to capture network performance
  for multiple parallel streams.

  Maybe we should resolve task 7168 before the transition, so we're
  more prepared.

4. Transition

  Option one is to do a two-phase transition. In the first phase,
  edges stop enforcing the deliver window (i.e. stop closing circuits
  when the stream deliver goes negative, but otherwise they send and
  receive stream-level sendmes as now). In the second phase (once all
  old versions are gone), we can start disobeying the deliver window,
  and also stop sending stream-level sendmes back.

  That approach takes a while before it will matter. As an optimization,
  since clients can know which relay versions support the new behavior,
  we could have relays interpret violating the deliver window as signaling
  support for removed stream-level sendmes: the relay would then stop
  sending or expecting sendmes. That optimization is somewhat klunky
  though, first because web-browsing clients don't generally finish out
  a stream window in the upstream direction (so the klunky trick will
  probably never happen by accident), and second because if we lower
  the circuit window to 500 (see Sec 2.2), there's now no way to violate
  stream deliver windows.

  Option two is to introduce another relay cell type, which the client
  sends before opening any streams to let the other side know that
  it shouldn't use or expect stream-level sendmes. A variation here
  is to extend either the create cell or the begin cell (ha -- and they
  thought I was crazy when I included the explicit \0 at the end of the
  current begin cell payload), so we can specify our circuit preferences
  without any extra overhead.

  Option three is to wait until we switch to a new circuit protocol
  (e.g. when we move to ntor or ace), and use that as the signal to
  drop stream-level sendmes from the design. And hey, if we're lucky,
  by then we'll have sorted out the n23 questions (see ticket 4506)
  and we might be dumping circuit-level sendmes at that point too.

  Options two or three seem way better than option one.

  And since it's not super-urgent, I suggest we hold off on option two
  to see if option three makes sense.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106210017</emailId><senderName>"vimalathithan"</senderName><senderEmail>vimalathithanit@gmail.com</senderEmail><timestampReceived>2012-11-06 21:00:17-0400</timestampReceived><subject>[tor-dev] Working on GUI</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, I am new to this community. 

 

A group consists of 5 members from School of Informatics and Computing,
working with Professor Jean Camp on a research paper.

Our research is to carry out a case study after making changes in the UI of
Tor Browser.

 

Could anyone here, please provide a link to learn more about Tor UI to get
started with the development activities. 

Also it would be of great help, if some related document are shared.

 

Please apologize me, if I posted my query to a wrong mailing list or my
query sounds naive.

 

Regards,

Vimalathithan Rajasekaran

Graduate Student - Computer Science

School of Informatics and Computing

Indiana University - Bloomington


[Attachment #5 (text/html)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=us-ascii"&gt;&lt;meta name=Generator content="Microsoft Word 12 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink=purple&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Hi, I am new to this community. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;A group \
consists of 5 members from School of Informatics and Computing, working with \
Professor Jean Camp on a research paper.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Our \
research is to carry out a case study after making changes in the UI of Tor \
Browser.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Could anyone here, please provide a link to learn more about Tor UI \
to get started with the development activities. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Also it would be of great help, if some related document are \
shared.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Please apologize me, if I posted my query to a wrong mailing list or \
my query sounds naive.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Regards,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Vimalathithan \
Rajasekaran&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Graduate Student – Computer \
Science&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;School of Informatics and \
Computing&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Indiana University - \
Bloomington&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121108174734</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-11-08 17:47:34-0400</timestampReceived><subject>[tor-dev] authentication questions on Tor controller</subject><body>

[Attachment #2 (multipart/alternative)]


I just start to use tor controller,  I notice the mannual says:

 pass Tor the "--CookieAuthentication 1" option when you start it.
Tor will create a file in its data directory
 called "control_auth_cookie".  All your controller needs to do is to
pass the contents of this file to authenticate()
 when it connects to Tor.


 there are two kinds of Tor, one is installed and can be run by command
"tor"
the other is Tor Browser Bundle,

1) with command "tor", when it establishes, if I run example.py
the result is
           "Connection refused. Is the ControlPort enabled?"

I tried command:  "tor --CookieAuthentication 1"  to start Tor,
but I can't find the so called data directory, and the running information
says：
                        Could not open "/etc/tor/torrc": Permission denied

2) with TBB, after I started TBB, if I run example.py,
it seems it can connect to ControlPort, but it prompts for a password
there is a Data directory in TBB, but I can't find the  so called "
control_auth_cookie"
file, so when I run TBB, how can I pass "--CookieAuthentication 1" to tor?


example.py :

import time
import TorCtl

class BandwidthListener(TorCtl.PostEventListener):
  def __init__(self):
    TorCtl.PostEventListener.__init__(self)

  def bandwidth_event(self, event):
    print "tor read %i bytes and wrote %i bytes" % (event.read,
event.written)

# constructs a listener that prints BW events
myListener = BandwidthListener()

# initiates a TorCtl connection, returning None if it was unsuccessful
conn = TorCtl.connect()

if conn:
  # tells tor to send us BW events
  conn.set_events(["BW"])

  # attaches the listener so it'll receive BW events
  conn.add_event_listener(myListener)

  # run until we get a keyboard interrupt
  try:
    while True:
      time.sleep(10)
  except KeyboardInterrupt: pass

[Attachment #5 (text/html)]

&lt;font size="4"&gt;I &lt;font size="4"&gt;just start to use tor cont&lt;font size="4"&gt;roller,   \
&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;I no&lt;font size="4"&gt;tice the mannual says:&lt;br&gt; \
&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;pre&gt;&lt;font \
size="4"&gt; pass Tor the "--CookieAuthentication 1" option when you start it. \
Tor will create a file in its data directory&lt;br&gt;  called \
"control_auth_cookie".  All your controller needs to do is to pass&lt;font \
size="4"&gt; &lt;/font&gt;the contents of this file to authenticate() &lt;br&gt;&lt;font size="4"&gt; \
&lt;/font&gt;when it connects to Tor.&lt;/font&gt;&lt;br&gt;&lt;br&gt; &lt;br&gt; &lt;/pre&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;  there are two \
kind&lt;font size="4"&gt;s of Tor, on&lt;font size="4"&gt;e i&lt;font size="4"&gt;s ins&lt;font \
size="4"&gt;talled and can be r&lt;font size="4"&gt;un by command "tor"&lt;br&gt; &lt;font \
size="4"&gt;the other is Tor &lt;font size="4"&gt;Browser Bundle, &lt;br&gt;&lt;br&gt;1) with command \
"tor", when it establishe&lt;font size="4"&gt;s, if I run &lt;font \
size="4"&gt;example.py&lt;br&gt;the result is &lt;br&gt;&lt;font size="4"&gt;                     \
"Connection refused. Is the ControlPort enabled?"&lt;br&gt; \
&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/ \
font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt;
 &lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;I \
tried command:   &lt;font \
size="4"&gt;"tor&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font \
size="4"&gt; --CookieAuthentication 1&lt;/font&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;"&lt;font size="4"&gt;   to \
start &lt;font size="4"&gt;Tor&lt;font size="4"&gt;,&lt;/font&gt;&lt;br&gt; &lt;font size="4"&gt;but I can't \
find the so called data dire&lt;font size="4"&gt;ctory, and the running information \
says：&lt;br&gt;&lt;font size="4"&gt;                                               Could not \
open "/etc/tor/torrc": Permission denied&lt;br&gt; \
&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/fon \
t&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;2) \
with TBB, after I start&lt;font size="4"&gt;ed TBB, if I run example.py,&lt;br&gt; &lt;font \
size="4"&gt;it seems it can connect to \
&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/ \
font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;ControlPort, but it promp&lt;font size="4"&gt;ts for a pas&lt;font size="4"&gt;sword&lt;br&gt; \
&lt;font size="4"&gt;there is a Data directory in TBB, but I can't find the   so called \
&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/ \
font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/fo \
nt&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font \
&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt; \
&gt; /font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;"&lt;/font&gt;control_auth_cookie&lt;/font&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
&gt; size="4"&gt;&lt;font size="4"&gt;" &lt;br&gt;
&lt;font size="4"&gt;file, so when I run TBB,&lt;font size="4"&gt; &lt;/font&gt;&lt;/font&gt;how can I \
pas&lt;font size="4"&gt;s "&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/fo \
nt&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font size="4"&gt;&lt;font \
size="4"&gt;--CookieAuthentication 1&lt;/font&gt;" to tor?&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt; \
&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;font \
size="4"&gt;example.&lt;font size="4"&gt;py&lt;font size="4"&gt; : \
&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;import \
time&lt;br&gt; import TorCtl&lt;br&gt;&lt;br&gt;class BandwidthListener(TorCtl.PostEventListener):&lt;br&gt;  \
def __init__(self):&lt;br&gt;       TorCtl.PostEventListener.__init__(self)&lt;br&gt;&lt;br&gt;   def \
bandwidth_event(self, event):&lt;br&gt;       print "tor read %i bytes and wrote %i \
bytes" % (event.read, event.written)&lt;br&gt; &lt;br&gt;# constructs a listener that prints \
BW events&lt;br&gt;myListener = BandwidthListener()&lt;br&gt;&lt;br&gt;# initiates a TorCtl connection, \
returning None if it was unsuccessful&lt;br&gt;conn = TorCtl.connect()&lt;br&gt;&lt;br&gt;if conn:&lt;br&gt;  \
# tells tor to send us BW events&lt;br&gt;  conn.set_events(["BW"])&lt;br&gt;&lt;br&gt;   # \
attaches the listener so it'll receive BW events&lt;br&gt;   \
conn.add_event_listener(myListener)&lt;br&gt;&lt;br&gt;   # run until we get a keyboard \
                interrupt&lt;br&gt;   try:&lt;br&gt;       while True:&lt;br&gt;
           time.sleep(10)&lt;br&gt;   except KeyboardInterrupt: \
pass&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121107023634</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-07 02:36:34-0400</timestampReceived><subject>[tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

[Attachment #2 (multipart/alternative)]


Filename: 214-longer-circids.txt
Title: Allow 4-byte circuit IDs in a new link protocol
Author: Nick Mathewson
Created: 6 Nov 2012
Status: Open


0. Overview

   Relays are running out of circuit IDs.  It's time to make the field
   bigger.

1. Background and Motivation

   Long ago, we thought that 65535 circuit IDs would be enough for anybody.
   It wasn't.  But our cell format in link protocols is still:

    Cell [512 bytes]
      CircuitID [2 bytes]
      Command [1 byte]
      Payload [509 bytes]

    Variable-length cell [Length+5 bytes]
       CircID   [4 bytes]
       Command  [1 byte]
       Length   [2 bytes]
       Payload  [Length bytes]

   This means that a relay can run out of circuit IDs pretty easily.

2. Design

   I propose a new link cell format for relays that support it.  It should
   be:

    Cell [514 bytes]
       CircuitID [4 bytes]
       Command [1 byte]
       Payload [509 bytes]

    Variable cell (Length+7 bytes)
       CircID   [4 bytes]
       Command  [1 byte]
       Length   [2 bytes]
       Payload  [Length bytes]

   We need to keep the payload size in fixed-length cells to its current
   value, since otherwise the relay protocol won't work.

   This new cell format should be used only when the link protocol is 4.
   (To negotiation link protocol 4, both sides need to use the "v3"
   handshake, and include "4" in their version cells.  If version 4 or
   later is negotiated, this is the cell format to use.)

2.1. Better allocation of circuitID space

   In the current Tor design, circuit ID allocation is determined by
   whose RSA public key has the lower modulus.  How ridiculous!
   Instead, I propose that when the version 4 link protocol is in use,
   the connection initiator use the low half of the circuit ID space,
   and the responder use the low half of the circuit ID space.

3. Discussion

   * Why 4 bytes?

     Because 3 would result in an odd cell size, and 8 seems like
     overkill.

   * Will this be distinguishable from the v3 protocol?

     Yes. Anybody who knows they're seeing the Tor protocol can probably
     tell by the TLS record sizes which version of the protocol is in
     use.  Probably not a huge deal though; which approximate range of
     versions of Tor a client or server is running is not something
     we've done much to hide in the past.

   * Why a new link protocol and not a new cell type?

     Because pretty much every cell has a meaningful circuit ID.

   * Okay, why a new link protocol and not a new _set of_ cell types?

     Because it's a bad idea to mix short and long circIDs on the same
     channel.  (That would leak which cells go with what kind of
     circuits ID, potentially.)

   * How hard is this to implement?

     I wasn't sure, so I coded it up.  I've got a probably-buggy
     implementation in branch "wide_cird_ids" in my public repository.
     Be afraid!  More testing is needed!

[Attachment #5 (text/html)]

&lt;div&gt;Filename: 214-longer-circids.txt&lt;/div&gt;&lt;div&gt;Title: Allow 4-byte circuit=
 IDs in a new link protocol&lt;/div&gt;&lt;div&gt;Author: Nick Mathewson&lt;/div&gt;&lt;div&gt;Crea=
ted: 6 Nov 2012&lt;/div&gt;&lt;div&gt;Status: Open&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;div&gt;0. Overview&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0Relays are running out of =
circuit IDs. =A0It's time to make the field&lt;/div&gt;&lt;div&gt;=A0 =A0bigger.&lt;/d=
iv&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Background and Motivation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;di=
v&gt;=A0 =A0Long ago, we thought that 65535 circuit IDs would be enough for an=
ybody.&lt;/div&gt;
&lt;div&gt;=A0 =A0It wasn't. =A0But our cell format in link protocols is stil=
l:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 Cell [512 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =
CircuitID [2 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 Command [1 byte]&lt;/div&gt;&lt;div&gt;=A0 =
=A0 =A0 Payload [509 bytes]&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 Variable-length cell [Length+5 bytes]&lt;/div&gt;&lt;div=
&gt;=A0 =A0 =A0 =A0CircID =A0 [4 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0Command =A0[1=
 byte]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0Length =A0 [2 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =
=A0Payload =A0[Length bytes]&lt;/div&gt;&lt;div&gt;&lt;br&gt;
&lt;/div&gt;&lt;div&gt;=A0 =A0This means that a relay can run out of circuit IDs pretty=
 easily.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Design&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =
=A0I propose a new link cell format for relays that support it. =A0It shoul=
d&lt;/div&gt;&lt;div&gt;
=A0 =A0be:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 Cell [514 bytes]&lt;/div&gt;&lt;div&gt;=A0 =
=A0 =A0 =A0CircuitID [4 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0Command [1 byte]&lt;/d=
iv&gt;&lt;div&gt;=A0 =A0 =A0 =A0Payload [509 bytes]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0=
 Variable cell (Length+7 bytes)&lt;/div&gt;
&lt;div&gt;=A0 =A0 =A0 =A0CircID =A0 [4 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0Command =
=A0[1 byte]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0Length =A0 [2 bytes]&lt;/div&gt;&lt;div&gt;=A0 =A0=
 =A0 =A0Payload =A0[Length bytes]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0We need t=
o keep the payload size in fixed-length cells to its current&lt;/div&gt;
&lt;div&gt;=A0 =A0value, since otherwise the relay protocol won't work.&lt;/div&gt;=
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0This new cell format should be used only when th=
e link protocol is 4.&lt;/div&gt;&lt;div&gt;=A0 =A0(To negotiation link protocol 4, bot=
h sides need to use the "v3"&lt;/div&gt;
&lt;div&gt;=A0 =A0handshake, and include "4" in their version cells. =
=A0If version 4 or&lt;/div&gt;&lt;div&gt;=A0 =A0later is negotiated, this is the cell f=
ormat to use.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.1. Better allocation of circuitID=
 space&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0In the current Tor design, circuit ID allocation=
 is determined by&lt;/div&gt;&lt;div&gt;=A0 =A0whose RSA public key has the lower modul=
us. =A0How ridiculous!&lt;/div&gt;&lt;div&gt;=A0 =A0Instead, I propose that when the ve=
rsion 4 link protocol is in use,&lt;/div&gt;
&lt;div&gt;=A0 =A0the connection initiator use the low half of the circuit ID spa=
ce,&lt;/div&gt;&lt;div&gt;=A0 =A0and the responder use the low half of the circuit ID s=
pace.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3. Discussion&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =
=A0* Why 4 bytes?&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0Because 3 would result in an odd cell size, =
and 8 seems like&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0overkill.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=
=A0 =A0* Will this be distinguishable from the v3 protocol?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=
/div&gt;&lt;div&gt;=A0 =A0 =A0Yes. Anybody who knows they're seeing the Tor prot=
ocol can probably&lt;/div&gt;
&lt;div&gt;=A0 =A0 =A0tell by the TLS record sizes which version of the protocol =
is in&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0use. =A0Probably not a huge deal though; which a=
pproximate range of&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0versions of Tor a client or server=
 is running is not something&lt;/div&gt;
&lt;div&gt;=A0 =A0 =A0we've done much to hide in the past.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/di=
v&gt;&lt;div&gt;=A0 =A0* Why a new link protocol and not a new cell type?&lt;/div&gt;&lt;div&gt;=
&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0Because pretty much every cell has a meaningful c=
ircuit ID.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0* Okay, why a new link protocol and not a new _s=
et of_ cell types?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0Because it's a b=
ad idea to mix short and long circIDs on the same&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0chan=
nel. =A0(That would leak which cells go with what kind of&lt;/div&gt;
&lt;div&gt;=A0 =A0 =A0circuits ID, potentially.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0=
* How hard is this to implement?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0I wasn=
't sure, so I coded it up. =A0I've got a probably-buggy&lt;/div&gt;&lt;div&gt;=
=A0 =A0 =A0implementation in branch "wide_cird_ids" in my public =
repository.&lt;/div&gt;
&lt;div&gt;=A0 =A0 =A0Be afraid! =A0More testing is needed!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121119220658</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-11-19 22:06:58-0400</timestampReceived><subject>Re: [tor-dev] Request for comments on notes on parallel cell crypto</subject><body>

On Sun, Nov 18, 2012 at 7:43 PM, Andrea Shepard &lt;andrea@torproject.org&gt; wrote:
&gt; I've made some notes on parallelizing cell crypto on relays which I've
&gt; attached to this mail and added to the wiki page on this [1], which I
&gt; would like comment on.  Particularly, I want to resolve the following
&gt; points:
&gt;
&gt;  * Should we operate on cell_t or packed_cell_t?

After reading your comments, I don't feel strongly that packed_cell_t
is correct.  Either would probably be okay.  I think I might have said
"packed_cell_t" on the grounds that we already have a specialized
allocator for them, whereas we don't currently heap-allocate as many
cell_t as we would need for this.  I might also have said
"packed_cell_t" on the theory that copying data from cell_t to
packed_cell_t would waste cycles, but I'm not sure that's significant
here.  Or maybe I was thinking of the amount of space wasted in
packed_cell_t vs cell_t, and worried about the number of queued cells
we're likely to have at once.

For queueing the cell_ts, and where to put a next pointer: I *think*
(but can't be sure) that most of our cell_t objects are currently
short-lived, and most of our long-lived cell objects are currently
packed_cell_t.  So adding fields to cell_t wouldn't hurt much, since
they don't currently represent very much of our total allocation, I
think.  (We should double-check that!)

&gt;  * Is it acceptable for the main thread to call functions to
&gt;    manipulate job-dispatching data structures that need to
&gt;    acquire a lock if we can be sure everything that ever
&gt;    holds the lock only does so very briefly to manipulate
&gt;    those structures and will never block while holding it,
&gt;    or do we need to design something that's lock-free for
&gt;    the main thread?

I don't think the main thread needs to be lock-free so long as it
won't often block for too long.  I was initially planning to have
locks protect the work-queues initially, and only substitute in a
lock-free work-queue implementation if it turned out to matter.

(How long the lock is held by the main thread is less important for
performance IIUC than whether the main thread will spend much time
blocked waiting for the lock, or how much lock contention there will
be.)



&gt;  * The functions that currently call relay_crypt()/
&gt;    relay_crypt_one_payload() will have to be split into
&gt;    two parts, one that queues a cell to be crypted and
&gt;    another that handles the finished, crypted cell.
&gt;    How will the worker threads cause the second part to
&gt;    be called in the main thread?  (NickM, there's probably
&gt;    some libevent voodoo I don't know about yet for this?)

So, I'd suggest the we start with a work queue each way: one queue (or
set of queues) to enqueue stuff for worker threads, and one to enqueue
the crypted stuff for the main cell to process it.

That said, we'll need a way to alert the main thread "Hey, you have
more data on your queue!"  The easiest way to do that is, using
Libevent 2.0 or later, to just call event_active() on a "struct event"
whose callback processes the data.  (This needs to require Libevent
2.0 or later, since Libevent 1.4 and earlier didn't let you do this
threadsafely.)

The next easiest alternative would be to construct a socketpair, have
the main thread listen on the read side of it (using a read event),
and have the worker thread write a byte to the socketpair whenever the
queue went from "observed" .

There are faster ways to do all of the above, and more ways we could
optimize libevent to help with our particular case, but for now I'll
suggest we ignore them: getting even one extra core to do crypto with
will more than pay for all the overhead in a v1 implementation.  We
can find the painful points and optimize them later -- and waiting to
do so will ensure we don't waste time optimizing outside of critical
paths.  In fact, we should probably be doing this for the rest of the
design: looking to see if there are cases where even if we think we
might need to get complex eventually, we can still do them simply at
first.

(For the case of sending work to the worker threads, a
mutex/condition-var pair will do.  Windows Vista added real condition
variables, and there's plenty of compat code around to fake them with
earlier Windowses.)

I suggest that for the first implementation of this, we can just make
the multithreaded crypto stuff require Libevent 2.0 or later.  We'll
want a compile option to turn it off for old OpenBSDs anyway.

Turning multithreaded cypto off should be easy, right?  Instead of
"Thread1: enqueue. Thread2: unqueue, encrypt, enqueue. Thread1:
unqueue, process", you just replace the first "enqueue" operation with
"encrypt and process" -- perhaps making a stub relaycrypt_dispatcher_t
that doesn't actually dispatch anything, but just does the crypto
operation immediately.  This might even be a good intermediate step
while refactoring the crypto.

&gt; Once these are resolved I'll be making a branch for this and
&gt; writing the headers with proposed data structures and interfaces
&gt; for review.

Cool; thank you!

Another observation about your design sketch: If we implement this
nicely, I think it will be possible to stress-test it and load-test
the relaycrypt_dispatcher_t part of it without actually requiring the
rest of Tor to be running.  IOW, we could have a performance-test for
this component that didn't require any actual Tor traffic to be
happening, or circuits to exist.  IMO that would be a pretty good
idea, since it would help us optimize as needed, and it would
encourage loose coupling.


cheers,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121119221848</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-11-19 22:18:48-0400</timestampReceived><subject>Re: [tor-dev] Request for comments on notes on parallel cell crypto</subject><body>

On Mon, Nov 19, 2012 at 05:06:58PM -0500, Nick Mathewson wrote:
&gt; On Sun, Nov 18, 2012 at 7:43 PM, Andrea Shepard &lt;andrea@torproject.org&gt; wrote:
&gt; &gt; I've made some notes on parallelizing cell crypto on relays which I've
&gt; &gt; attached to this mail and added to the wiki page on this [1], which I
&gt; &gt; would like comment on.  Particularly, I want to resolve the following
&gt; &gt; points:
&gt; &gt;
&gt; &gt;  * Should we operate on cell_t or packed_cell_t?

I seem to have missed the original email here.  What is the link [1]?

Having just upgraded my exit node to a reasonable machine, I found that
even though the AES should be super-fast (with AES-NI, etc.), the
public-key ops are still killing the CPU.  I split the node into two
processes, but multithreading the public-key ops (to a configurable
number of threads, like say 7) would appear to be a big bang-for-buck
win.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121126200559</emailId><senderName>Christian Kujau</senderName><senderEmail>lists@nerdbynature.de</senderEmail><timestampReceived>2012-11-26 20:05:59-0400</timestampReceived><subject>[tor-dev] RIAA v Verizon: 404</subject><body>

Hi,

the Tor DMCA response[0] has a link inside for the RIAA v. Verizon case:

   https://www.eff.org/legal/cases/RIAA_v_Verizon/opinion-20031219.pdf

But this document is no longer available at this address, thus producing a 
404. @EFF Webmaster, could you please fix this or provide the new address 
of this document? Is this perhaps the following:

   https://www.eff.org/sites/default/files/filenode/RIAA_v_Verizon/20030121-riaa-v-verizon-order.pdf

I've cc'ed tor-dev, because the link is included in 
contrib/tor-exit-notice.html for the Tor exit nodes to present.

Thanks,
Christian.

[0] https://www.torproject.org/eff/tor-dmca-response
-- 
BOFH excuse #60:

system has been recalled
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127224003</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-11-27 22:40:03-0400</timestampReceived><subject>[tor-dev] Proposal: Tor Extended ORPort Authentication</subject><body>

Greetings,

I'm attaching a proposal for adding authentication to the Extended
ORPort. The Extended ORPort is a yet unimplemented feature, that
allows pluggable transports proxies to communicate with Tor; it's a
prerequisite for pluggable transport statistics, rate limiting, and
other cool things.

Filename: XXX-ext-orport-auth.txt
Title: Tor Extended ORPort Authentication
Author: George Kadianakis
Created: 28-11-2012
Status: Open
Target: 0.2.5.x

1. Overview

  This proposal defines a scheme for Tor components to authenticate to
  each other using a shared-secret.

2. Motivation

  Proposal 196 introduced new ways for pluggable transport proxies to
  communicate with Tor. The communication happens using TCP in the same
  fashion that controllers speak to the ControlPort.

  To defend against cross-protocol attacks [0] on the transport ports,
  we need to define an authentication scheme that will restrict passage
  to unknown clients.

  Tor's ControlPort uses an authentication scheme called safe-cookie
  authentication [1]. Unfortunately, the design of the safe-cookie
  authentication was influenced by the protocol structure of the
  ControlPort and the need for backwards compatibility of the
  cookie-file and can't be easily reused in other use cases.

3. Goals

  The general goal of Extended ORPort authentication is to authenticate
  the client based on a shared-secret that only authorized clients
  should know.

  Furthermore, its implementation should be flexible and easy to reuse,
  so that it can be used as the authentication mechanism in front of
  future Tor helper ports (for example, in proposal 199).

  Finally, the protocol is able to support multiple authentication
  schemes and each of them has different goals.

4. Protocol Specification

4.1. Initial handshake

  When a client connects to the Extended ORPort, the server sends:

    AuthTypes                                   [variable]
    EndAuthTypes                                [1 octet]

  Where,

  + AuthTypes are the authentication schemes that the server supports
    for this session. They are multiple concatenated 1-octet values that
    take values from 1 to 255.
  + EndAuthTypes is the special value 0.

  The client reads the list of supported authentication schemes and
  replies with the one he prefers to use:

    AuthType                                    [1 octet]

  Where,

  + AuthType is the authentication scheme that the client wants to use
    for this session. A valid authentication type takes values from 1 to
    255. A value of 0 means that the client did not like the
    authentication types offered by the server.

  If the client sent an AuthType of value 0, or an AuthType that the
  server does not support, the server MUST close the connection.

4.2. Authentication types

4.2.1 SAFE_COOKIE handshake

  Authentication type 1 is called SAFE_COOKIE.

4.2.1.1. Motivation and goals

  The SAFE_COOKIE scheme is pretty-much identical to the authentication
  scheme that was introduced for the ControlPort in proposal 193.

  An additional goal of the SAFE_COOKIE authentication scheme (apart
  from the goals of section 2), is that it should not leak the contents
  of the cookie-file to untrusted parties.

  Specifically, the SAFE_COOKIE protocol will never leak the actual
  contents of the file. Instead, it uses a challenge-response protocol
  (similar to the HTTP digest authentication of RFC2617) to ensure that
  both parties know the cookie without leaking it.

4.2.1.2. Cookie-file format

  The format of the cookie-file is:

     StaticHeader                                [32 octets]
     Cookie                                      [32 octets]

  Where,
  + StaticHeader is the following string:
    "! Extended ORPort Auth Cookie !\x0a"
  + Cookie is the shared-secret. During the SAFE_COOKIE protocol, the
    cookie is called CookieString.

  Extended ORPort clients MUST make sure that the StaticHeader is
  present in the cookie file, before proceeding with the
  authentication protocol.

  Details on how Tor locates the cookie file can be found in section 5
  of proposal 196. Details on how transport proxies locate the cookie
  file can be found in pt-spec.txt.

4.2.1.3. Protocol specification

  A client that performs the SAFE_COOKIE handshake begins by sending:

     ClientNonce                                 [32 octets]

  Where,
  + ClientNonce is 32 octets of random data.

  Then, the server replies with:

     ServerHash                                  [32 octets]
     ServerNonce                                 [32 octets]

  Where,
  + ServerHash is computed as:
      HMAC-SHA256(CookieString,
        "ExtORPort authentication server-to-client hash" | ClientNonce | ServerNonce)
  + ServerNonce is 32 random octets.

  Upon receiving that data, the client computers ServerHash herself and
  validates it against the ServerHash provided by the server.

  If the server-provided ServerHash is invalid, the client MUST
  terminate the connection.

  Otherwise the client replies with:

     ClientHash                                  [32 octets]

  Where,
  + ClientHash is computed as:
      HMAC-SHA256(CookieString,
        "ExtORPort authentication client-to-server hash" | ClientNonce | ServerNonce)

  Upon receiving that data, the server computers ClientHash herself and
  validates it against the ClientHash provided by the client.

  Finally, the server replies with:

     Status                                      [1 octet]

  Where,
  + Status is 1 if the authentication was successfull. If the
    authentication failed, Status is 0.

4.3. Post-authentication

  After completing the Extended ORPort authentication successfully, the
  two parties should proceed with the Extended ORPort protocol on the
  same TCP connection.

[0]:
http://archives.seul.org/or/announce/Sep-2007/msg00000.html

[1]:
https://gitweb.torproject.org/torspec.git/blob/79f488c32c43562522e5592f2c19952dc7681a65:/control-spec.txt#l1069
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130003833</emailId><senderName>"succer110 () tiscali ! it"</senderName><senderEmail>succer110@tiscali.it</senderEmail><timestampReceived>2012-11-30 00:38:33-0400</timestampReceived><subject>[tor-dev] questions about extending circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

I need to create specific circuit, specifying the exit route.
I've already found http://www.thesprawl.org/research/tor-control-protocol/ but this \
explain how to create circuit with nickames.Suddenly, nickname are not univoque and i \
think tor have problem creating circuit when the nickname of the exitroute is \
"Unnamed".Sometimes the creation of a new circuit fails:extendcircuit 0 \
hackerspaceseoul552 No such router "hackerspaceseoul"extendcircuit 0 \
HackerSpaceSeoul552 No such router "HackerSpaceSeoul"extendcircuit 0 \
HackerspaceSeoul552 No such router "HackerspaceSeoul"Even if \
https://atlas.torproject.org/#search/hack told me they are online. And sometimes this \
appends even with TorCtl.py DEBUG[Thu Nov 29 23:40:45 2012]:Extending circuit[!!!] \
Error creating circuit:  552 No such router "Communist"

How can i fix? 
Thank you :)

Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più di uno \
spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui! Un amico al \
mese e parli e navighi sempre gratis: http://freelosophy.tiscali.it/ 


[Attachment #5 (text/html)]

Hi all,&lt;br&gt;&lt;br&gt;&lt;div&gt;I need to create specific circuit, specifying the exit \
route.&lt;br&gt;I've already found http://www.thesprawl.org/research/tor-control-protocol/ \
but this explain how to create circuit with nickames.&lt;/div&gt;&lt;div&gt;Suddenly, nickname \
are not univoque and i think tor have problem creating circuit when the nickname of \
the exitroute is "Unnamed".&lt;/div&gt;&lt;div&gt;Sometimes the creation of a new circuit \
fails:&lt;/div&gt;&lt;div&gt;&lt;div&gt;extendcircuit 0 hackerspaceseoul&lt;/div&gt;&lt;div&gt;552 No such router \
"hackerspaceseoul"&lt;/div&gt;&lt;div&gt;extendcircuit 0 HackerSpaceSeoul&lt;/div&gt;&lt;div&gt;552 No such \
router "HackerSpaceSeoul"&lt;/div&gt;&lt;div&gt;extendcircuit 0 HackerspaceSeoul&lt;/div&gt;&lt;div&gt;552 No \
such router "HackerspaceSeoul"&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Even \
if https://atlas.torproject.org/#search/hack told me they are \
online.&lt;/div&gt;&lt;div&gt;&lt;br&gt;And sometimes this appends even with \
TorCtl.py&lt;br&gt;&lt;div&gt;DEBUG[Thu Nov 29 23:40:45 2012]:Extending circuit&lt;/div&gt;&lt;div&gt;[!!!] \
Error creating circuit:  552 No such router \
"Communist"&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;How can i fix? &lt;br&gt;Thank you \
:)&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico \
vale più di uno spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per \
lui! Un amico al mese e parli e navighi sempre gratis: &lt;a target='_blank'  \
href="http://freelosophy.tiscali.it/" \
target=_blank&gt;http://freelosophy.tiscali.it/&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130022948</emailId><senderName>Andrea Shepard</senderName><senderEmail>andrea@torproject.org</senderEmail><timestampReceived>2012-11-30 02:29:48-0400</timestampReceived><subject>[tor-dev] Parallel relaycrypt data structures for review</subject><body>

[Attachment #2 (multipart/signed)]


Please review first draft proposed parallel relaycrypt structures
in my parallel_relay_crypt branch.

--=20
Andrea Shepard
&lt;andrea@torproject.org&gt;
PGP fingerprint: 3611 95A4 0740 ED1B 7EA5  DF7E 4191 13D9 D0CF BDA5

[Attachment #5 (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130131210</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-30 13:12:10-0400</timestampReceived><subject>Re: [tor-dev] Parallel relaycrypt data structures for review</subject><body>

On Nov 29, 2012 9:30 PM, "Andrea Shepard" &lt;andrea@torproject.org&gt; wrote:
&gt;
&gt; Please review first draft proposed parallel relaycrypt structures
&gt; in my parallel_relay_crypt branch.
&gt;


Hi!  Here are some initial thoughts:

* If we're going to do it like this, maybe we need to make cell_t
packed or something eventually.  It's got a fair amount of padding
overhead right now.

* Maybe we'll need a next pointer in cells if we're queueing them?

* Why is there  only an rc_job for outgoing cells on a circuit? It
seems for symmetry we'd need to have one for inbound cells and one for
outbound cells.  It looks like that code isn't there right now?

* Maybe I'm confused by these queues.  The system of cell queues is
going to get a little confusing, maybe.  Putting cells on the outgoing
queue isn't always right, since some cells (e.g., relay_data cells at
an exit node) need to be handled locally rather than relaying them.
So we need more new queues?

* Should the jobs be in some data structure other than an smartlist_t?
 A queue would seem to make more sense, since jobs are getting added
and pulled off.  (Yes, protecting the data structure there with a lock
makes sense.)

* If you're going to have separate locks, it's important to document
how they nest, to prevent deadlock conditions.

* Presumably relaycrypt_job_t would need to have a pointer to the
actual circuit that needs work, and a note about whether it's a job
for outbound or inbound cells.

* In the non-threaded-relaycrypt case, presumably the intention is
that there's a function that would otherwise queue a cell for crypto
but instead just put it directly on the appropriate circuit queue?

Thanks again! I'll let you know if I think of anything else.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127233011</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2012-11-27 23:30:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor Extended ORPort Authentication</subject><body>

Ugh, forgot the Acknowledgments section in my previous mail. This
proposal is identical to the previous one, but with acknowledgments
included. Enjoy.

Filename: XXX-ext-orport-auth.txt
Title: Tor Extended ORPort Authentication
Author: George Kadianakis
Created: 28-11-2012
Status: Open
Target: 0.2.5.x

1. Overview

  This proposal defines a scheme for Tor components to authenticate to
  each other using a shared-secret.

2. Motivation

  Proposal 196 introduced new ways for pluggable transport proxies to
  communicate with Tor. The communication happens using TCP in the same
  fashion that controllers speak to the ControlPort.

  To defend against cross-protocol attacks [0] on the transport ports,
  we need to define an authentication scheme that will restrict passage
  to unknown clients.

  Tor's ControlPort uses an authentication scheme called safe-cookie
  authentication [1]. Unfortunately, the design of the safe-cookie
  authentication was influenced by the protocol structure of the
  ControlPort and the need for backwards compatibility of the
  cookie-file and can't be easily reused in other use cases.

3. Goals

  The general goal of Extended ORPort authentication is to authenticate
  the client based on a shared-secret that only authorized clients
  should know.

  Furthermore, its implementation should be flexible and easy to reuse,
  so that it can be used as the authentication mechanism in front of
  future Tor helper ports (for example, in proposal 199).

  Finally, the protocol is able to support multiple authentication
  schemes and each of them has different goals.

4. Protocol Specification

4.1. Initial handshake

  When a client connects to the Extended ORPort, the server sends:

    AuthTypes                                   [variable]
    EndAuthTypes                                [1 octet]

  Where,

  + AuthTypes are the authentication schemes that the server supports
    for this session. They are multiple concatenated 1-octet values that
    take values from 1 to 255.
  + EndAuthTypes is the special value 0.

  The client reads the list of supported authentication schemes and
  replies with the one he prefers to use:

    AuthType                                    [1 octet]

  Where,

  + AuthType is the authentication scheme that the client wants to use
    for this session. A valid authentication type takes values from 1 to
    255. A value of 0 means that the client did not like the
    authentication types offered by the server.

  If the client sent an AuthType of value 0, or an AuthType that the
  server does not support, the server MUST close the connection.

4.2. Authentication types

4.2.1 SAFE_COOKIE handshake

  Authentication type 1 is called SAFE_COOKIE.

4.2.1.1. Motivation and goals

  The SAFE_COOKIE scheme is pretty-much identical to the authentication
  scheme that was introduced for the ControlPort in proposal 193.

  An additional goal of the SAFE_COOKIE authentication scheme (apart
  from the goals of section 2), is that it should not leak the contents
  of the cookie-file to untrusted parties.

  Specifically, the SAFE_COOKIE protocol will never leak the actual
  contents of the file. Instead, it uses a challenge-response protocol
  (similar to the HTTP digest authentication of RFC2617) to ensure that
  both parties know the cookie without leaking it.

4.2.1.2. Cookie-file format

  The format of the cookie-file is:

     StaticHeader                                [32 octets]
     Cookie                                      [32 octets]

  Where,
  + StaticHeader is the following string:
    "! Extended ORPort Auth Cookie !\x0a"
  + Cookie is the shared-secret. During the SAFE_COOKIE protocol, the
    cookie is called CookieString.

  Extended ORPort clients MUST make sure that the StaticHeader is
  present in the cookie file, before proceeding with the
  authentication protocol.

  Details on how Tor locates the cookie file can be found in section 5
  of proposal 196. Details on how transport proxies locate the cookie
  file can be found in pt-spec.txt.

4.2.1.3. Protocol specification

  A client that performs the SAFE_COOKIE handshake begins by sending:

     ClientNonce                                 [32 octets]

  Where,
  + ClientNonce is 32 octets of random data.

  Then, the server replies with:

     ServerHash                                  [32 octets]
     ServerNonce                                 [32 octets]

  Where,
  + ServerHash is computed as:
      HMAC-SHA256(CookieString,
        "ExtORPort authentication server-to-client hash" | ClientNonce | ServerNonce)
  + ServerNonce is 32 random octets.

  Upon receiving that data, the client computers ServerHash herself and
  validates it against the ServerHash provided by the server.

  If the server-provided ServerHash is invalid, the client MUST
  terminate the connection.

  Otherwise the client replies with:

     ClientHash                                  [32 octets]

  Where,
  + ClientHash is computed as:
      HMAC-SHA256(CookieString,
        "ExtORPort authentication client-to-server hash" | ClientNonce | ServerNonce)

  Upon receiving that data, the server computers ClientHash herself and
  validates it against the ClientHash provided by the client.

  Finally, the server replies with:

     Status                                      [1 octet]

  Where,
  + Status is 1 if the authentication was successfull. If the
    authentication failed, Status is 0.

4.3. Post-authentication

  After completing the Extended ORPort authentication successfully, the
  two parties should proceed with the Extended ORPort protocol on the
  same TCP connection.

5. Acknowledgments

  Thanks to Robert Ransom for helping with the proposal and designing
  the original safe-cookie authentication scheme. Thanks to Nick
  Mathewson for advices and reviews of the proposal.

[0]:
http://archives.seul.org/or/announce/Sep-2007/msg00000.html

[1]:
https://gitweb.torproject.org/torspec.git/blob/79f488c32c43562522e5592f2c19952dc7681a65:/control-spec.txt#l1069
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121126210311</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-11-26 21:03:11-0400</timestampReceived><subject>Re: [tor-dev] RIAA v Verizon: 404</subject><body>

On Mon, 26 Nov 2012 12:05:59 -0800 (PST)
Christian Kujau &lt;lists@nerdbynature.de&gt; wrote:
&gt; the Tor DMCA response[0] has a link inside for the RIAA v. Verizon
&gt; case:
&gt; 
&gt;    https://www.eff.org/legal/cases/RIAA_v_Verizon/opinion-20031219.pdf
&gt; 
&gt; But this document is no longer available at this address, thus
&gt; producing a 404. @EFF Webmaster, could you please fix this or provide
&gt; the new address of this document? Is this perhaps the following:

Fixed on our website too.  Thanks!

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121119222950</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-19 22:29:50-0400</timestampReceived><subject>Re: [tor-dev] Request for comments on notes on parallel cell crypto</subject><body>

On Mon, Nov 19, 2012 at 5:18 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; On Mon, Nov 19, 2012 at 05:06:58PM -0500, Nick Mathewson wrote:
&gt;&gt; On Sun, Nov 18, 2012 at 7:43 PM, Andrea Shepard &lt;andrea@torproject.org&gt; wrote:
&gt;&gt; &gt; I've made some notes on parallelizing cell crypto on relays which I've
&gt;&gt; &gt; attached to this mail and added to the wiki page on this [1], which I
&gt;&gt; &gt; would like comment on.  Particularly, I want to resolve the following
&gt;&gt; &gt; points:
&gt;&gt; &gt;
&gt;&gt; &gt;  * Should we operate on cell_t or packed_cell_t?
&gt;
&gt; I seem to have missed the original email here.  What is the link [1]?

[1] https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/MultithreadedCrypto


&gt; Having just upgraded my exit node to a reasonable machine, I found that
&gt; even though the AES should be super-fast (with AES-NI, etc.), the
&gt; public-key ops are still killing the CPU.  I split the node into two
&gt; processes, but multithreading the public-key ops (to a configurable
&gt; number of threads, like say 7) would appear to be a big bang-for-buck
&gt; win.

Circuit-related public key should already be parallelized
(configurably, via the NumCPUs option).  Parallelizing most SSL public
key will be a little trickier, though I guess we could farm off
certificate verification and the public key parts of the v3 handshake
to cpuworkers too, with a nontrivial amount of effort.

We once had code that tried to track how many PK operations of each
kind Tor does, for what purpose, so we could figure out which ones
were costing us the most.  We should try to get that working again.
note_crypto_pk_op() is the core function in question -- for some
incomprehensible reason, it would report its results via the directory
port.  Instead, it should probably use the heartbeat code or
something.

Also on the crypto performance front, I'm hoping that enabling ECDHE
ciphersuites for TLS will save some of the time we currently spend on
PK, and that ntor with a good EC group will save some more.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121107025515</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-07 02:55:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

On Tue, Nov 06, 2012 at 09:36:34PM -0500, Nick Mathewson wrote:
&gt;    Relays are running out of circuit IDs.  It's time to make the field
&gt;    bigger.

I don't doubt the second sentence, but is the first sentence actually
true? Do we have any evidence / measurements / something here?

(Since circids are relative to the connection they're on, it's not clear
to me that any given TLS connection accrues more than a few tens of
thousands of circuits. And if a very few do, maybe the solution is to
move to a new TLS connection for those rare cases, rather than impose
a 2-byte penalty on every cell in all cases.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121107031015</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-07 03:10:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, Nov 6, 2012 at 9:55 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; On Tue, Nov 06, 2012 at 09:36:34PM -0500, Nick Mathewson wrote:
&gt; &gt;    Relays are running out of circuit IDs.  It's time to make the field
&gt; &gt;    bigger.
&gt;
&gt; I don't doubt the second sentence, but is the first sentence actually
&gt; true? Do we have any evidence / measurements / something here?
&gt;
&gt; (Since circids are relative to the connection they're on, it's not clear
&gt; to me that any given TLS connection accrues more than a few tens of
&gt; thousands of circuits.


I think that's enough?  32K from A to B, or from B to A, is where we run
out.  So if A is a popular middle node, and B is a popular exit, most of
the circuits between A and B will be A-&gt;B.  So if we get "a few tens of
thousands" of circuits from A to B, we hit the limit.


&gt; And if a very few do, maybe the solution is to
&gt; move to a new TLS connection for those rare cases, rather than impose
&gt; a 2-byte penalty on every cell in all cases.)
&gt;

Maaaybe, but I sure can't think of a sane testable design for that.  Can
you?  To do this sanely, we'd need to negotiate this before we exchange any
actual data, and predict in advance that we'd want it. (We wouldn't want to
do it on-the-fly for connections that happen to have large numbers of
circuits: that way lies madness.)

Also, I think those "rare cases" are communications between the busiest Tor
nodes.  I think those communications might represent a reasonably large
fraction of total Tor bytes, such that having a fallback mode might not
save us so much.

And also, this only adds 1/256 additonal overhead before TLS happens.  Not
huge IMO.  We could save far more than that by more intelligent TLS use, if
we needed to.

-- 
Nick

[Attachment #5 (text/html)]

&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Nov 6, 2012 at 9:55 \
PM, Roger Dingledine &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:arma@mit.edu" \
target="_blank"&gt;arma@mit.edu&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; &lt;div \
class="im"&gt;On Tue, Nov 06, 2012 at 09:36:34PM -0500, Nick Mathewson wrote:&lt;br&gt; &gt;   \
Relays are running out of circuit IDs.  It's time to make the field&lt;br&gt; &gt;    \
bigger.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;I don't doubt the second sentence, but is the first sentence actually&lt;br&gt;
true? Do we have any evidence / measurements / something here?&lt;br&gt;
&lt;br&gt;
(Since circids are relative to the connection they're on, it's not clear&lt;br&gt;
to me that any given TLS connection accrues more than a few tens of&lt;br&gt;
thousands of circuits.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think that's enough?  \
32K from A to B, or from B to A, is where we run out.  So if A is a popular middle \
node, and B is a popular exit, most of the circuits between A and B will be A-&gt;B.  \
So if we get "a few tens of thousands" of circuits from A to B, we hit the \
limit.&lt;/div&gt; &lt;div&gt; &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; And if a very few do, maybe the \
solution is to&lt;br&gt; move to a new TLS connection for those rare cases, rather than \
impose&lt;br&gt; a 2-byte penalty on every cell in all \
cases.)&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Maaaybe, but I sure can't think of a \
sane testable design for that.  Can you?  To do this sanely, we'd need to \
negotiate this before we exchange any actual data, and predict in advance that \
we'd want it. (We wouldn't want to do it on-the-fly for connections that \
happen to have large numbers of circuits: that way lies madness.)&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, I think those "rare cases" are communications \
between the busiest Tor nodes.  I think those communications might represent a \
reasonably large fraction of total Tor bytes, such that having a fallback mode might \
not save us so much.&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And also, this only adds 1/256 \
additonal overhead before TLS happens.  Not huge IMO.  We could save far more than \
that by more intelligent TLS use, if we needed to.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-- \
&lt;/div&gt;&lt;div&gt; Nick&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121107055137</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-07 05:51:37-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

On Tue, Nov 06, 2012 at 10:10:15PM -0500, Nick Mathewson wrote:
&gt; &gt; And if a very few do, maybe the solution is to
&gt; &gt; move to a new TLS connection for those rare cases, rather than impose
&gt; &gt; a 2-byte penalty on every cell in all cases.)
&gt; 
&gt; Maaaybe, but I sure can't think of a sane testable design for that.  Can
&gt; you?  To do this sanely, we'd need to negotiate this before we exchange any
&gt; actual data, and predict in advance that we'd want it. (We wouldn't want to
&gt; do it on-the-fly for connections that happen to have large numbers of
&gt; circuits: that way lies madness.)
&gt; 
&gt; Also, I think those "rare cases" are communications between the busiest Tor
&gt; nodes.  I think those communications might represent a reasonably large
&gt; fraction of total Tor bytes, such that having a fallback mode might not
&gt; save us so much.

Ah. By "a new TLS connection", I didn't mean a new design or anything --
I meant simply a second TLS connection.

&gt; And also, this only adds 1/256 additonal overhead before TLS happens.  Not
&gt; huge IMO.  We could save far more than that by more intelligent TLS use, if
&gt; we needed to.

I agree that it's an ok price to pay if we decide it's the best way to go.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121107192829</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-07 19:28:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

[Attachment #2 (multipart/alternative)]


On Wed, Nov 7, 2012 at 12:51 AM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; On Tue, Nov 06, 2012 at 10:10:15PM -0500, Nick Mathewson wrote:
&gt; &gt; &gt; And if a very few do, maybe the solution is to
&gt; &gt; &gt; move to a new TLS connection for those rare cases, rather than impose
&gt; &gt; &gt; a 2-byte penalty on every cell in all cases.)
&gt; &gt;
&gt; &gt; Maaaybe, but I sure can't think of a sane testable design for that.  Can
&gt; &gt; you?  To do this sanely, we'd need to negotiate this before we exchange
&gt; any
&gt; &gt; actual data, and predict in advance that we'd want it. (We wouldn't want
&gt; to
&gt; &gt; do it on-the-fly for connections that happen to have large numbers of
&gt; &gt; circuits: that way lies madness.)
&gt; &gt;
&gt; &gt; Also, I think those "rare cases" are communications between the busiest
&gt; Tor
&gt; &gt; nodes.  I think those communications might represent a reasonably large
&gt; &gt; fraction of total Tor bytes, such that having a fallback mode might not
&gt; &gt; save us so much.
&gt;
&gt; Ah. By "a new TLS connection", I didn't mean a new design or anything --
&gt; I meant simply a second TLS connection.


I wouldn't feel very good about this route: there are enough places in our
design that assume one canonical OR connection with any given relay that
changing this assumption would be emphatically nontrivial and error-prone.

 On the other hand, reports of circuid ID exhaustion might be premature; I
get no hits searching for "No unused circ IDs. Failing" except for our
source code.  Has anybody seem that warning IRL?


-- 
Nick

[Attachment #5 (text/html)]

&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Wed, Nov 7, 2012 at \
12:51 AM, Roger Dingledine &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:arma@mit.edu" \
target="_blank"&gt;arma@mit.edu&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px \
0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex"&gt;
 &lt;div class="im"&gt;On Tue, Nov 06, 2012 at 10:10:15PM -0500, Nick Mathewson wrote:&lt;br&gt;
&gt; &gt; And if a very few do, maybe the solution is to&lt;br&gt;
&gt; &gt; move to a new TLS connection for those rare cases, rather than impose&lt;br&gt;
&gt; &gt; a 2-byte penalty on every cell in all cases.)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Maaaybe, but I sure can't think of a sane testable design for that.  Can&lt;br&gt;
&gt; you?  To do this sanely, we'd need to negotiate this before we exchange \
any&lt;br&gt; &gt; actual data, and predict in advance that we'd want it. (We \
wouldn't want to&lt;br&gt; &gt; do it on-the-fly for connections that happen to have \
large numbers of&lt;br&gt; &gt; circuits: that way lies madness.)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Also, I think those "rare cases" are communications between the \
busiest Tor&lt;br&gt; &gt; nodes.  I think those communications might represent a \
reasonably large&lt;br&gt; &gt; fraction of total Tor bytes, such that having a fallback \
mode might not&lt;br&gt; &gt; save us so much.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Ah. By "a new TLS connection", I didn't mean a new design or \
anything --&lt;br&gt; I meant simply a second TLS connection.&lt;/blockquote&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;I wouldn't feel very good about this route: there are enough places in \
our design that assume one canonical OR connection with any given relay that changing \
this assumption would be emphatically nontrivial and error-prone.&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; On the other hand, reports of circuid ID exhaustion might be \
premature; I get no hits searching for "No unused circ IDs. Failing" except \
for our source code.  Has anybody seem that warning IRL?&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;-- &lt;/div&gt;&lt;div \
class="gmail_extra"&gt;Nick&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121110165017</emailId><senderName>Tim Wilde</senderName><senderEmail>twilde@gmail.com</senderEmail><timestampReceived>2012-11-10 16:50:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, Nov 6, 2012 at 9:36 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:

&gt; 2.1. Better allocation of circuitID space
&gt;
&gt;    In the current Tor design, circuit ID allocation is determined by
&gt;    whose RSA public key has the lower modulus.  How ridiculous!
&gt;    Instead, I propose that when the version 4 link protocol is in use,
&gt;    the connection initiator use the low half of the circuit ID space,
&gt;    and the responder use the low half of the circuit ID space.
&gt;

Shouldn't this say "the responder use the high half of the circuit ID
space"?

Tim

[Attachment #5 (text/html)]

On Tue, Nov 6, 2012 at 9:36 PM, Nick Mathewson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:nickm@freehaven.net" target="_blank"&gt;nickm@freehaven.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;div&gt;2.1. Better allocation of circuitID space&lt;br&gt;&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   In the current Tor design, circuit ID allocation is determined \
by&lt;/div&gt;&lt;div&gt;   whose RSA public key has the lower modulus.  How \
ridiculous!&lt;/div&gt;&lt;div&gt;   Instead, I propose that when the version 4 link protocol is \
in use,&lt;/div&gt;

&lt;div&gt;   the connection initiator use the low half of the circuit ID space,&lt;/div&gt;&lt;div&gt; \
and the responder use the low half of the circuit ID \
space.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Shouldn't this say "the \
responder use the high half of the circuit ID space"?&lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tim&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121106222018</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-06 22:20:18-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

Hi Vimalathithan. By "Tor UI" I suspect that you mean Vidalia?

https://www.torproject.org/projects/vidalia.html.en

I'm not sure if it would benefit much from a usability study at the
moment since development on it seems to be on hiatus (I might be
wrong, Tom=E1s would know).

On Tue, Nov 6, 2012 at 1:00 PM, vimalathithan &lt;vimalathithanit@gmail.com&gt; w=
rote:
&gt; Hi, I am new to this community.
&gt;
&gt;
&gt;
&gt; A group consists of 5 members from School of Informatics and Computing,
&gt; working with Professor Jean Camp on a research paper.
&gt;
&gt; Our research is to carry out a case study after making changes in the UI =
of
&gt; Tor Browser.
&gt;
&gt;
&gt;
&gt; Could anyone here, please provide a link to learn more about Tor UI to get
&gt; started with the development activities.
&gt;
&gt; Also it would be of great help, if some related document are shared.
&gt;
&gt;
&gt;
&gt; Please apologize me, if I posted my query to a wrong mailing list or my
&gt; query sounds naive.
&gt;
&gt;
&gt;
&gt; Regards,
&gt;
&gt; Vimalathithan Rajasekaran
&gt;
&gt; Graduate Student =96 Computer Science
&gt;
&gt; School of Informatics and Computing
&gt;
&gt; Indiana University - Bloomington
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106224403</emailId><senderName>"Runa A. Sandvik"</senderName><senderEmail>runa.sandvik@gmail.com</senderEmail><timestampReceived>2012-11-06 22:44:03-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

On Tue, Nov 6, 2012 at 10:20 PM, Damian Johnson &lt;atagar@torproject.org&gt; wro=
te:
&gt; I'm not sure if it would benefit much from a usability study at the
&gt; moment since development on it seems to be on hiatus (I might be
&gt; wrong, Tom=E1s would know).

Actually, both Tails and the Tor Browser Bundle could benefit from a
usability study.

-- =

Runa A. Sandvik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106225052</emailId><senderName>k e bera</senderName><senderEmail>keb@cyblings.on.ca</senderEmail><timestampReceived>2012-11-06 22:50:52-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

By Torbrowser UI they might mean the whole "anonymous browsing" experience.  There \
are some reports of real user feedback that were posted to Tor-Talk mailing list \
awhile back that may give some start on the problems involved: \
https://lists.torproject.org/pipermail/tor-talk/2012-January/022893.html \
https://lists.torproject.org/pipermail/tor-talk/2011-July/020838.html

The design documents for Torbrowser itself are at
https://www.torproject.org/projects/torbrowser/design/

The blog on the Tor website is one place to search for changes in how the various \
parts of the Tor experience are put together and distributed.



On Tue, 6 Nov 2012 14:20:18 -0800
Damian Johnson &lt;atagar@torproject.org&gt; wrote:

&gt; Hi Vimalathithan. By "Tor UI" I suspect that you mean Vidalia?
&gt; 
&gt; https://www.torproject.org/projects/vidalia.html.en
&gt; 
&gt; I'm not sure if it would benefit much from a usability study at the
&gt; moment since development on it seems to be on hiatus (I might be
&gt; wrong, Tomás would know).
&gt; 
&gt; On Tue, Nov 6, 2012 at 1:00 PM, vimalathithan &lt;vimalathithanit@gmail.com&gt; wrote:
&gt; &gt; Hi, I am new to this community.
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; A group consists of 5 members from School of Informatics and Computing,
&gt; &gt; working with Professor Jean Camp on a research paper.
&gt; &gt; 
&gt; &gt; Our research is to carry out a case study after making changes in the UI of
&gt; &gt; Tor Browser.
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; Could anyone here, please provide a link to learn more about Tor UI to get
&gt; &gt; started with the development activities.
&gt; &gt; 
&gt; &gt; Also it would be of great help, if some related document are shared.
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; Please apologize me, if I posted my query to a wrong mailing list or my
&gt; &gt; query sounds naive.
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; Regards,
&gt; &gt; 
&gt; &gt; Vimalathithan Rajasekaran
&gt; &gt; 
&gt; &gt; Graduate Student – Computer Science
&gt; &gt; 
&gt; &gt; School of Informatics and Computing
&gt; &gt; 
&gt; &gt; Indiana University - Bloomington
&gt; &gt; 
&gt; &gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121106233102</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-06 23:31:02-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

&gt; Actually, both Tails and the Tor Browser Bundle could benefit from a
&gt; usability study.

Usability studies only help if there's development resources to make
the suggestions happen. Mike and Tails should be the ones to make the
call about if they have the bandwidth to take advantage of a usability
study or not.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106233453</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-11-06 23:34:53-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

vimalathithan:
&gt; Hi, I am new to this community.
&gt; 
&gt; 
&gt; 
&gt; A group consists of 5 members from School of Informatics and
&gt; Computing, working with Professor Jean Camp on a research paper.
&gt; 
&gt; Our research is to carry out a case study after making changes in the
&gt; UI of Tor Browser.
&gt; 

Hello and welcome!

The code is here:
https://gitweb.torproject.org/torbrowser.git

You should be able to build the entire project for many platforms by
using that git repository.

The main starter program on Windows and other platforms is the "Start
Tor Browser" program - on Windows it is the RelativeLink Win32 C
program, OS X and GNU/Linux it is a shell script.

&gt; 
&gt; 
&gt; Could anyone here, please provide a link to learn more about Tor UI
&gt; to get started with the development activities.

There are two other components - the first is the actual Browser, which
we custom build from Firefox sources. The second is the Tor controller
Vidalia, which confuses users greatly as being Tor. It technically
launches Tor but it is not Tor per se. It is merely the controller of Tor.

Here's a few bugs I've opened about the UX concerns I've seen lately:

  https://trac.torproject.org/projects/tor/ticket/7182
  https://trac.torproject.org/projects/tor/ticket/7183

I've also cc'ed the two main Tor Browser developers.

&gt; 
&gt; Also it would be of great help, if some related document are shared.
&gt; 
&gt; 

Please read this document:

  https://www.torproject.org/projects/torbrowser/design/

&gt; 
&gt; Please apologize me, if I posted my query to a wrong mailing list or
&gt; my query sounds naive.
&gt; 

This is the right mailing list. Thank you for your interest in Tor Browser!

All the best,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106234455</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-11-06 23:44:55-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

Damian Johnson:
&gt;&gt; Actually, both Tails and the Tor Browser Bundle could benefit from a
&gt;&gt; usability study.
&gt; 
&gt; Usability studies only help if there's development resources to make
&gt; the suggestions happen.

Tor Browser has had a study or two. It has been helpful even though we
have not yet had the ability to implement the results.

&gt;&lt; Mike and Tails should be the ones to make the
&gt; call about if they have the bandwidth to take advantage of a usability
&gt; study or not.

There are more people that can help - a study could also include a patch
to move things in the right direction. Especially if they have evidence
that suggests that they deployed the patch and found it to move things
in the right direction.

All the best,
Jake

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106235013</emailId><senderName>Greg Norcie</senderName><senderEmail>greg@norcie.com</senderEmail><timestampReceived>2012-11-06 23:50:13-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

Hi, I'm Greg, I'm a PhD student at Indiana University, and I', helping
supervise Vimalathithan on this project.

You're right Damian: a usability eval on it's own is not very useful to Tor.

The usability evaluation has actually been done (and was presented at
HotPETS 2012[1])

What we're doing now is implementing the suggestions made in my HotPETS
paper, then testing that said changes really do increase usability in a
lab study. Vimalathithan (along with some undergraduates doing a
capstone project) will be coding the changes suggested in the HotPETS
paper, and I'll be using the resultant code to do some experiments to
verify that our changes actually did increase the usability.

I had discussed this with Roger, Andrew, and a few other Tor devs while
in Spain. Everyone seemed to like the feedback, but expressed your same
concern - without someone to code said changes, they weren't very useful.

I told the students I'm supervising to make sure they stay connected
with the development community, so that any changes we make can be more
easily incorporated into the TBB if so desired, hence the email to the list.

[1] http://petsymposium.org/2012/papers/hotpets12-1-usability.pdf

--
Greg Norcie (greg@norcie.com)
GPG key: 0x1B873635

On 11/6/12 6:31 PM, Damian Johnson wrote:
&gt;&gt; Actually, both Tails and the Tor Browser Bundle could benefit from a
&gt;&gt; usability study.
&gt; 
&gt; Usability studies only help if there's development resources to make
&gt; the suggestions happen. Mike and Tails should be the ones to make the
&gt; call about if they have the bandwidth to take advantage of a usability
&gt; study or not.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121107160636</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-07 16:06:36-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

&gt; What we're doing now is implementing the suggestions made in my HotPETS
&gt; paper, then testing that said changes really do increase usability in a
&gt; lab study.

Ahhh, gotcha. That's great! Let us know if you have any questions. If
they aren't yet on #tor-dev then that would be a great place for
development discussions...

https://www.torproject.org/about/contact.html.en#irc
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121107174125</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2012-11-07 17:41:25-0400</timestampReceived><subject>Re: [tor-dev] Working on GUI</subject><body>

Hi,

Damian Johnson wrote (06 Nov 2012 23:31:02 GMT) :
&gt; Runa A. Sandvik wrote (06 Nov 2012 22:44:03 GMT) :
&gt;&gt; Actually, both Tails and the Tor Browser Bundle could benefit from
&gt;&gt; a usability study.

Thank you, Runa, for mentioning Tails here.

&gt; Usability studies only help if there's development resources to make
&gt; the suggestions happen. Mike and Tails should be the ones to make
&gt; the call about if they have the bandwidth to take advantage of
&gt; a usability study or not.

A part of Tails that we know does need usability improvements is the
tails-greeter boot menu (ticket [1]).

  [1] https://tails.boum.org/todo/tails-greeter:_revamp_UI/

Some thought was given to it, and a few mockups [2] were produced.
This is probably not enough foundations for a proper usability study,
but it shows we do want to revamp that thing with usability in mind,
and at least one of us is up to development work on it.

 [2] https://mailman.boum.org/pipermail/tails-dev/2012-October/001781.html

I'm unsure if any one of us has the bandwidth needed to take advantage
of a full-blown usability study, but that's clearly worth proposing
and discussing. I'm thus Cc'ing tails-dev to initiate the
discussion there.

(Side note: we've also had some bolder and crazier ideas that are
still to be written clearly somewhere public (e.g. integrate the
persistence setup within the greeter, allow persisting some greeter
settings), and may be worth integrating in a usability study, whose
scale would get much bigger, though.)

Cheers,
--
  intrigeri
  | GnuPG key @ https://gaffer.ptitcanardnoir.org/intrigeri/intrigeri.asc
  | OTR fingerprint @ https://gaffer.ptitcanardnoir.org/intrigeri/otr.asc
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121104235006</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-04 23:50:06-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Sun, Nov 04, 2012 at 06:31:51PM -0500, Roger Dingledine wrote:
&gt; 2. Design
&gt; 
&gt;   We should strip all aspects of this stream-level flow control from
&gt;   the Tor design and code.

See also https://trac.torproject.org/projects/tor/ticket/4485
wherein I point to a git branch that implements this part of the proposal.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121105055748</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-11-05 05:57:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Sun, 04 Nov 2012 18:31:51 +0000, Roger Dingledine wrote:
...
&gt;   The circuit-level flow control, or something like it, is needed
&gt;   because different users are competing for the same resources. But the
&gt;   stream-level flow control has a different threat model, since all the
&gt;   streams belong to the same user.

But still separate flow control is in the expectation of the, erm,
this user.  When I have to ssh open via tor to the same host, they take
the same circuit. And I don't expect the other session to block just
because I ^S-ed (stopped the output of) the first session.

...
&gt;   It could be that a feature of the stream window is that there's always
&gt;   space in the circuit window for another begin cell, so new streams
&gt;   will open faster than otherwise.

Or at all. With no per-stream window a single stalled stream would
block the circuit forever. Besides the ssh scenario think 'large
put/post request and server hiccuping' - a twitpic post not working
out does not make me expect that another browser tab to a differnt
host, but same circuit, will block.

&gt;   But first, if there are two or more
&gt;   active streams going, there won't be any extra space.

When a stream announces window to the other side I expect it
to be capable to accept that data somewhere, so even if the
stream windows currently overbook the circuit window that
data should drain into the local buffers and let the circuit
window reopen.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121105070121</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-05 07:01:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Mon, Nov 05, 2012 at 06:57:48AM +0100, Andreas Krey wrote:
&gt;  With no per-stream window a single stalled stream would
&gt; block the circuit forever.

Wait, what?

Can you define 'stalled' here? I think you are misunderstanding the
current (and proposed) design.

With no per-stream window, the circuit will round-robin between the
streams that want to send a cell, just as it does now. The only difference
in the proposed change is that it would stop ignoring streams who have
sent their whole stream window but not yet heard a stream-level sendme
back. In either case it would continue obeying the circuit sendme windows.

&gt; When a stream announces window to the other side I expect it
&gt; to be capable to accept that data somewhere, so even if the
&gt; stream windows currently overbook the circuit window that
&gt; data should drain into the local buffers and let the circuit
&gt; window reopen.

It does.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121105073105</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2012-11-05 07:31:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Mon, 05 Nov 2012 02:01:21 +0000, Roger Dingledine wrote:
&gt; On Mon, Nov 05, 2012 at 06:57:48AM +0100, Andreas Krey wrote:
&gt; &gt;  With no per-stream window a single stalled stream would
&gt; &gt; block the circuit forever.
&gt; 
&gt; Wait, what?
&gt; 
&gt; Can you define 'stalled' here?

'Receiver of the stream does not read anymore, for whatever reason.'

...
&gt; With no per-stream window, the circuit will round-robin between the
&gt; streams that want to send a cell, just as it does now.

But where does the data go when the end (socks client or the server the
exit node is talking to) isn't accepting any more (and tor can't write
to the TCP socket)?

The sending side is pushing stream data into the circuit, and the
receiving side (tor process) must either collect it locally (thereby
growing the memory footprint), or not allow new circuit window, thereby
affecting the other streams on the circuit.

Or did I miss another per-stream feedback/flow control mechanism?

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106060656</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-11-06 06:06:56-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

On Mon, Nov 05, 2012 at 08:31:05AM +0100, Andreas Krey wrote:
&gt; 'Receiver of the stream does not read anymore, for whatever reason.'
&gt; 
&gt; &gt; With no per-stream window, the circuit will round-robin between the
&gt; &gt; streams that want to send a cell, just as it does now.
&gt; 
&gt; But where does the data go when the end (socks client or the server the
&gt; exit node is talking to) isn't accepting any more (and tor can't write
&gt; to the TCP socket)?
&gt; 
&gt; The sending side is pushing stream data into the circuit, and the
&gt; receiving side (tor process) must either collect it locally (thereby
&gt; growing the memory footprint), or not allow new circuit window, thereby
&gt; affecting the other streams on the circuit.
&gt; 
&gt; Or did I miss another per-stream feedback/flow control mechanism?

Ah ha!

Yes, I think you're right.

Looking at it from the exit relay's perspective (which is where it matters
most, since most use of Tor is sending a little bit and receiving a lot):
when a create cell shows up to establish a circuit, that circuit is
allowed to send back at most 1000 cells. When a begin relay cell shows
up to ask that circuit to open a new stream, that stream is allowed to
send back at most 500 cells.

Whenever the Tor client has received 100 cells on that circuit, she
immediately sends a circuit-level sendme back towards the exit, to let
it know to increment its "number of cells it's allowed to send on the
circuit" by 100.

However, a stream-level sendme is only sent when both a) the Tor client
has received 50 cells on a particular stream, *and* b) the application
that initiated the stream is willing to accept more data.

If we ripped out stream-level sendmes, then as you say, we'd have to
choose between "queue all the data for the stream, no matter how big it
gets" and "tell the whole circuit to shut up".

I believe you have just poked a hole in the n23 ("defenstrator") design
as well: http://freehaven.net/anonbib/#pets2011-defenestrator
since it lacks any stream-level pushback for streams that are blocking
on writes. Nicely done!

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121106115110</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-11-06 11:51:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal 213: Remove stream-level sendmes from the design</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 6 Nov 2012 01:06:56 -0500
Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; If we ripped out stream-level sendmes, then as you say, we'd have to
&gt; choose between "queue all the data for the stream, no matter how big
&gt; it gets" and "tell the whole circuit to shut up".

A possible compromise: A stream level XOFF/XON instead of SENDME would
allow us to save the flow control bandwidth for properly flowing
streams and still have a way to deal with stalled ones.

Julian

--=20
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121108182536</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-08 18:25:36-0400</timestampReceived><subject>Re: [tor-dev] authentication questions on Tor controller</subject><body>

Hi Jiang. First, TorCtl is being deprecated by two newer (more
actively developed) controller libraries...

Stem (https://stem.readthedocs.org/en/latest/) - Threaded library with
a similar design to TorCtl.
Txtorcon (https://txtorcon.readthedocs.org/en/latest/) - Twisted based
controller library.

Please try one of those. Here's a tutorial that should help you with
getting started...

https://stem.readthedocs.org/en/latest/tutorial.html#the-little-relay-that-could

&gt; 1) with command "tor", when it establishes, if I run example.py
&gt; the result is
&gt;            "Connection refused. Is the ControlPort enabled?"

Maybe the browser bundle uses a non-standard port or a control socket?
By default TorCtl and Stem look for 9051 since that's the default
control port by convention. The browser bundle pops up an instance of
Vidalia and you can look in its settings for the details of how it
connects to Tor.

Simplest solution is to not use the browser bundle at all, and instead
make a text file with...

ControlPort 9051
CookieAuthentication 1

... then start Tor with "tor -f /path/to/that/file". The example
you're running should then work.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121110171329</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-11-10 17:13:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal 214: Allow 4-byte circuit IDs in a new link protocol</subject><body>

On 11/10/12 11:50 AM, Tim Wilde wrote:
&gt; On Tue, Nov 6, 2012 at 9:36 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; 
&gt;&gt; 2.1. Better allocation of circuitID space
&gt;&gt;
&gt;&gt;    In the current Tor design, circuit ID allocation is determined by
&gt;&gt;    whose RSA public key has the lower modulus.  How ridiculous!
&gt;&gt;    Instead, I propose that when the version 4 link protocol is in use,
&gt;&gt;    the connection initiator use the low half of the circuit ID space,
&gt;&gt;    and the responder use the low half of the circuit ID space.
&gt;&gt;
&gt; 
&gt; Shouldn't this say "the responder use the high half of the circuit ID
&gt; space"?

Yes.  Nick already fixed this in the torspec.git repository:

-   and the responder use the low half of the circuit ID space.
+   and the responder use the high half of the circuit ID space.

https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/214-longer-circids.txt

Best,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121116091347</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-11-16 09:13:47-0400</timestampReceived><subject>[tor-dev] Free and Open Source Software internships for women</subject><body>

Free and Open Source Software (FOSS) is software that gives the user
the freedom to use, copy, study, change, and improve it. FOSS
contributors believe that this is the best way to develop software
because it benefits society, creates a fun collaborative community
around a project, and allows anyone to make innovative changes that
reach many people.

In an effort to get more women involved in FOSS, a number of
organizations are offering Outreach Program for Women internships from
January 2 to April 2, 2013. The application deadline is December 3,
2012. The applicants need to get in touch with individual projects
they are interested in working on and make a small contribution ahead
of the application deadline.

Participants will work remotely from home, while getting guidance from
an assigned mentor and collaborating within their project=92s team and
the rest of the FOSS community. The projects include software
development, system administration, web development, user experience
design, graphic design, documentation, and marketing. The stipend for
the program is $5,000 (USD). Any woman available for a full time
internship who has not previously participated in the Outreach Program
for Women or Google Summer of Code is welcome to apply. College women
from the Southern Hemisphere who will have a school summer break
during most of this time are particularly encouraged to apply.

Please visit https://www.torproject.org/getinvolved/volunteer.html.en#opw
to learn more and apply.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121119145808</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-11-19 14:58:08-0400</timestampReceived><subject>[tor-dev] Proposal 215: Let the minimum consensus method change with time</subject><body>

Filename: 215-update-min-consensus-ver.txt
Title: Let the minimum consensus method change with time
Author: Nick Mathewson
Created: 15 Nov 2012
Status: Open


0. Overview

   This proposal suggests that we drop the requirement that
   authorities support the very old consensus method "1", and instead
   move to a wider window of recognized consensus methods as Tor
   evolves.

1. Background and Motivation

   When we designed the directory voting system, we added the notion
   of "consensus method" so that we could smoothly upgrade the voting
   process over time.  We also said that all authorities must support
   the consensus method '1', and must fall back to it if they don't
   support the method that the supermajority of authorities will
   choose.

   Consensus method 1 is no longer viable for the Tor network.  It
   doesn't result in a microdescriptor consensus, and omits other
   fields that clients need in order to work well.  Consensus methods
   under 12 have security issues, since they let a single authority
   set a consensus parameter.

   In the future, new consensus methods will be needed so that
   microdescriptor-using clients can use IPv6 exits and ECC
   onion-keys.  Rolling back from those would degrade functionality.

   We need a way to change the minimum consensus method over time.

2. Design

   I propose that we change the minimum consensus method about once
   per release cycle, or once per ever other release cycle.

   As a rule of thumb, let the minimum consensus method in Tor series
   X be the highest method supported by the oldest version that
   "anybody reasonable" would use for running an authority.
   Typically, that's the stable version of the previous release
   series.

   For flexibility, it might make sense to choose a slightly older
   method, if falling back to that method wouldn't cause security
   problems.


   For example, while Tor 0.2.4.x is under development, authorities
   should really not be running anything before Tor 0.2.3.x.  Tor
   0.2.3.x has supported consensus method 13 since 0.2.3.21-rc, so
   it's okay for 0.2.4.x to require 13 as the minimum method.  We even
   might go back to method 12, since the worst outcome of not using 13
   would be some warnings in client logs.  Consensus method 12 was a
   security improvement, so we don't want to roll back before that.

2.1. Behavior when the method used is one we don't know

   The spec currently says that if an authority sees that a method
   will be used that it doesn't support, it should act as if the
   consensus method will be "1".  This attempt will be doomed, since
   the other authorities will be computing the consensus with a more
   recent method, and any attempt to use method "1" won't get enough
   signatures.

   Instead, let's say that authorities fall back to the most recent
   method that they *do* support.  This isn't any likelier to reach
   consensus, but it is less likely to result in anybody signing
   something they don't like.


3. Likely outcomes

   If a bunch of authorities were to downgrade to a much older
   version, all at once, then newer authorities would not be able to
   sign the consensus they made.  That's probably for the best: if a
   bunch of authorities were to suddenly start running 0.2.0.x,
   consensing along with them would be a poor idea.

4. Alternatives

   We might choose a less narrow window of allowable method, when we
   can do so securely.  Maybe two release series, rather than one,
   would be a good interval to do when the consensus format isn't
   changing rapidly.

   We might want to have the behavior when we see that everybody else
   will be using a method we don't support be "Don't make a consensus
   at all."  That's harder to program, though.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121119230129</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-11-19 23:01:29-0400</timestampReceived><subject>Re: [tor-dev] Request for comments on notes on parallel cell crypto</subject><body>

On Mon, Nov 19, 2012 at 05:29:50PM -0500, Nick Mathewson wrote:
&gt; Circuit-related public key should already be parallelized
&gt; (configurably, via the NumCPUs option).

Wow; I totally missed that.  I've turned the node back to a single
process with a 14MB limit, and set NumCPUs to 4.  Let's see what
happens.

Thanks!

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121125151347</emailId><senderName>Sean Robinson</senderName><senderEmail>seankrobinson@gmail.com</senderEmail><timestampReceived>2012-11-25 15:13:47-0400</timestampReceived><subject>Re: [tor-dev] [tor-talk] torsocks is broken and unmaintained</subject><body>

On Sun, Nov 4, 2012 at 4:03 PM, Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:
&gt;
&gt; I've pushed my first branch to fix the dlopen bugs:
&gt;
&gt;   https://gitweb.torproject.org/torsocks.git/shortlog/refs/heads/dlerror
&gt;
&gt; It seems to fix the issues on my Ubuntu system. I could use some testing
&gt; on OS X, other GNU/Linux, and *BSD systems.

  I can confirm that the dlopen branch version fixes the res_* error
output on Slackware 14.0.

  Thank you.  This certainly makes it easier to look for real errors.

-- 
Sean Robinson
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127010040</emailId><senderName>Andrew Cady</senderName><senderEmail>d@jerkface.net</senderEmail><timestampReceived>2012-11-27 01:00:40-0400</timestampReceived><subject>[tor-dev] [PATCH 1/2] New option LocalOutboundBindAddress</subject><body>

This works just like OutboundBindAddress, but instead of excluding
connections to loopback addresses, it affects only connections to
loopback addresses.

The whitespace in this commit is a bit nutty, in order to put whitespace
changes into a separate commit.
---
 doc/tor.1.txt       |   11 +++++++++++
 src/or/config.c     |   25 ++++++++++++++++---------
 src/or/connection.c |   17 ++++++++++-------
 src/or/or.h         |    6 ++++++
 4 files changed, 43 insertions(+), 16 deletions(-)

diff --git a/doc/tor.1.txt b/doc/tor.1.txt
index 1e1ff1e..f25234d 100644
--- a/doc/tor.1.txt
+++ b/doc/tor.1.txt
@@ -477,6 +477,17 @@ GENERAL OPTIONS
     This setting will be ignored for connections to the loopback addresses
     (127.0.0.0/8 and ::1).
 
+**LocalOutboundBindAddress** __IP__::
+    Like OutboundBindAddress, but _only_ for connections to loopback
+    addresses (e.g., inbound connections to local hidden services).
+    This is useful to distinguish Tor traffic from local traffic in
+    the log files of your hidden services. +
+ +
+    The IP should be in the 127.0.0.0/8 range for maximum compatibility.
+    I recommend using 127.84.111.114, since 84.111.114 is the ASCII
+    encoding of "Tor".  I also recommend adding \'127.84.111.114 tor' to
+    your /etc/hosts file.
+
 **PidFile** __FILE__::
     On startup, write our PID to FILE. On clean shutdown, remove
     FILE.
diff --git a/src/or/config.c b/src/or/config.c
index 206ccc8..03e07f9 100644
--- a/src/or/config.c
+++ b/src/or/config.c
@@ -285,6 +285,7 @@ static config_var_t option_vars_[] = {
   OBSOLETE("IgnoreVersion"),
   V(KeepalivePeriod,             INTERVAL, "5 minutes"),
   VAR("Log",                     LINELIST, Logs,             NULL),
+  V(LocalOutboundBindAddress,    LINELIST,   NULL),
   V(LogMessageDomains,           BOOL,     "0"),
   OBSOLETE("LinkPadding"),
   OBSOLETE("LogLevel"),
@@ -5556,15 +5557,20 @@ getinfo_helper_config(control_connection_t *conn,
 static int
 parse_outbound_addresses(or_options_t *options, int validate_only, char **msg)
 {
-  const config_line_t *lines = options-&gt;OutboundBindAddress;
-  int found_v4 = 0, found_v6 = 0;
+ int i;
+ for (i=0; i&lt;2; ++i) {
+
+  tor_addr_t *out4 = i ? &amp;options-&gt;OutboundBindAddressIPv4_ : \
&amp;options-&gt;LocalOutboundBindAddressIPv4_; +  tor_addr_t *out6 = i ? \
&amp;options-&gt;OutboundBindAddressIPv6_ : &amp;options-&gt;LocalOutboundBindAddressIPv6_;  
   if (!validate_only) {
-    memset(&amp;options-&gt;OutboundBindAddressIPv4_, 0,
-           sizeof(options-&gt;OutboundBindAddressIPv4_));
-    memset(&amp;options-&gt;OutboundBindAddressIPv6_, 0,
-           sizeof(options-&gt;OutboundBindAddressIPv6_));
+    memset(out4, 0, sizeof(*out4));
+    memset(out6, 0, sizeof(*out6));
   }
+
+  const config_line_t *lines = i ? options-&gt;OutboundBindAddress : \
options-&gt;LocalOutboundBindAddress; +  int found_v4 = 0, found_v6 = 0;
+
   while (lines) {
     tor_addr_t addr, *dst_addr = NULL;
     int af = tor_addr_parse(&amp;addr, lines-&gt;value);
@@ -5577,7 +5583,7 @@ parse_outbound_addresses(or_options_t *options, int \
validate_only, char **msg)  return -1;
       }
       found_v4 = 1;
-      dst_addr = &amp;options-&gt;OutboundBindAddressIPv4_;
+      dst_addr = out4;
       break;
     case AF_INET6:
       if (found_v6) {
@@ -5587,7 +5593,7 @@ parse_outbound_addresses(or_options_t *options, int \
validate_only, char **msg)  return -1;
       }
       found_v6 = 1;
-      dst_addr = &amp;options-&gt;OutboundBindAddressIPv6_;
+      dst_addr = out6;
       break;
     default:
       if (msg)
@@ -5599,7 +5605,8 @@ parse_outbound_addresses(or_options_t *options, int \
validate_only, char **msg)  tor_addr_copy(dst_addr, &amp;addr);
     lines = lines-&gt;next;
   }
-  return 0;
+ }
+ return 0;
 }
 
 /** Load one of the geoip files, &lt;a&gt;family&lt;/a&gt; determining which
diff --git a/src/or/connection.c b/src/or/connection.c
index dbcfc41..397a2dc 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -1451,14 +1451,17 @@ connection_connect(connection_t *conn, const char *address,
 
   make_socket_reuseable(s);
 
-  if (!tor_addr_is_loopback(addr)) {
+  {
+    const int is_local = tor_addr_is_loopback(addr);
     const tor_addr_t *ext_addr = NULL;
-    if (protocol_family == AF_INET &amp;&amp;
-        !tor_addr_is_null(&amp;options-&gt;OutboundBindAddressIPv4_))
-      ext_addr = &amp;options-&gt;OutboundBindAddressIPv4_;
-    else if (protocol_family == AF_INET6 &amp;&amp;
-             !tor_addr_is_null(&amp;options-&gt;OutboundBindAddressIPv6_))
-      ext_addr = &amp;options-&gt;OutboundBindAddressIPv6_;
+    const tor_addr_t *maybe_ext_addr4 = is_local ? \
&amp;options-&gt;LocalOutboundBindAddressIPv4_ : &amp;options-&gt;OutboundBindAddressIPv4_; +    \
const tor_addr_t *maybe_ext_addr6 = is_local ? \
&amp;options-&gt;LocalOutboundBindAddressIPv6_ : &amp;options-&gt;OutboundBindAddressIPv6_; +
+    if (protocol_family == AF_INET &amp;&amp; !tor_addr_is_null(maybe_ext_addr4))
+      ext_addr = maybe_ext_addr4;
+    else if (protocol_family == AF_INET6 &amp;&amp; !tor_addr_is_null(maybe_ext_addr6))
+      ext_addr = maybe_ext_addr6;
+
     if (ext_addr) {
       struct sockaddr_storage ext_addr_sa;
       socklen_t ext_addr_len = 0;
diff --git a/src/or/or.h b/src/or/or.h
index a8645f8..a832e4f 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -3181,6 +3181,12 @@ typedef struct {
   tor_addr_t OutboundBindAddressIPv4_;
   /** IPv6 address derived from OutboundBindAddress. */
   tor_addr_t OutboundBindAddressIPv6_;
+  /** Local address to bind outbound sockets -- for loopback connections (e.g., \
hidden services) */ +  config_line_t *LocalOutboundBindAddress;
+  /** IPv4 address derived from LocalOutboundBindAddress. */
+  tor_addr_t LocalOutboundBindAddressIPv4_;
+  /** IPv6 address derived from LocalOutboundBindAddress. */
+  tor_addr_t LocalOutboundBindAddressIPv6_;
   /** Directory server only: which versions of
    * Tor should we tell users to run? */
   config_line_t *RecommendedVersions;
-- 
1.7.10.4

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121127010041</emailId><senderName>Andrew Cady</senderName><senderEmail>d@jerkface.net</senderEmail><timestampReceived>2012-11-27 01:00:41-0400</timestampReceived><subject>[tor-dev] [PATCH 2/2] New option LocalOutboundBindAddress: whitespace changes only</subject><body>

---
 src/or/config.c     |   88 +++++++++++++++++++++++++--------------------------
 src/or/connection.c |   60 +++++++++++++++++------------------
 2 files changed, 73 insertions(+), 75 deletions(-)

diff --git a/src/or/config.c b/src/or/config.c
index 03e07f9..12f4f79 100644
--- a/src/or/config.c
+++ b/src/or/config.c
@@ -5557,55 +5557,55 @@ getinfo_helper_config(control_connection_t *conn,
 static int
 parse_outbound_addresses(or_options_t *options, int validate_only, char **msg)
 {
- int i;
- for (i=0; i&lt;2; ++i) {
+  int i;
+  for (i=0; i&lt;2; ++i) {
 
-  tor_addr_t *out4 = i ? &amp;options-&gt;OutboundBindAddressIPv4_ : \
                &amp;options-&gt;LocalOutboundBindAddressIPv4_;
-  tor_addr_t *out6 = i ? &amp;options-&gt;OutboundBindAddressIPv6_ : \
&amp;options-&gt;LocalOutboundBindAddressIPv6_; +    tor_addr_t *out4 = i ? \
&amp;options-&gt;OutboundBindAddressIPv4_ : &amp;options-&gt;LocalOutboundBindAddressIPv4_; +    \
tor_addr_t *out6 = i ? &amp;options-&gt;OutboundBindAddressIPv6_ : \
&amp;options-&gt;LocalOutboundBindAddressIPv6_;  
-  if (!validate_only) {
-    memset(out4, 0, sizeof(*out4));
-    memset(out6, 0, sizeof(*out6));
-  }
-
-  const config_line_t *lines = i ? options-&gt;OutboundBindAddress : \
                options-&gt;LocalOutboundBindAddress;
-  int found_v4 = 0, found_v6 = 0;
-
-  while (lines) {
-    tor_addr_t addr, *dst_addr = NULL;
-    int af = tor_addr_parse(&amp;addr, lines-&gt;value);
-    switch (af) {
-    case AF_INET:
-      if (found_v4) {
-        if (msg)
-          tor_asprintf(msg, "Multiple IPv4 outbound bind addresses "
-                       "configured: %s", lines-&gt;value);
-        return -1;
-      }
-      found_v4 = 1;
-      dst_addr = out4;
-      break;
-    case AF_INET6:
-      if (found_v6) {
-        if (msg)
-          tor_asprintf(msg, "Multiple IPv6 outbound bind addresses "
-                       "configured: %s", lines-&gt;value);
-        return -1;
+    if (!validate_only) {
+      memset(out4, 0, sizeof(*out4));
+      memset(out6, 0, sizeof(*out6));
+    }
+
+    const config_line_t *lines = i ? options-&gt;OutboundBindAddress : \
options-&gt;LocalOutboundBindAddress; +    int found_v4 = 0, found_v6 = 0;
+
+    while (lines) {
+      tor_addr_t addr, *dst_addr = NULL;
+      int af = tor_addr_parse(&amp;addr, lines-&gt;value);
+      switch (af) {
+      case AF_INET:
+	if (found_v4) {
+	  if (msg)
+	    tor_asprintf(msg, "Multiple IPv4 outbound bind addresses "
+			 "configured: %s", lines-&gt;value);
+	  return -1;
+	}
+	found_v4 = 1;
+	dst_addr = out4;
+	break;
+      case AF_INET6:
+	if (found_v6) {
+	  if (msg)
+	    tor_asprintf(msg, "Multiple IPv6 outbound bind addresses "
+			 "configured: %s", lines-&gt;value);
+	  return -1;
+	}
+	found_v6 = 1;
+	dst_addr = out6;
+	break;
+      default:
+	if (msg)
+	  tor_asprintf(msg, "Outbound bind address '%s' didn't parse.",
+		       lines-&gt;value);
+	return -1;
       }
-      found_v6 = 1;
-      dst_addr = out6;
-      break;
-    default:
-      if (msg)
-        tor_asprintf(msg, "Outbound bind address '%s' didn't parse.",
-                     lines-&gt;value);
-      return -1;
+      if (!validate_only)
+	tor_addr_copy(dst_addr, &amp;addr);
+      lines = lines-&gt;next;
     }
-    if (!validate_only)
-      tor_addr_copy(dst_addr, &amp;addr);
-    lines = lines-&gt;next;
   }
- }
  return 0;
 }
 
diff --git a/src/or/connection.c b/src/or/connection.c
index 397a2dc..021f7ab 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -1451,37 +1451,35 @@ connection_connect(connection_t *conn, const char *address,
 
   make_socket_reuseable(s);
 
-  {
-    const int is_local = tor_addr_is_loopback(addr);
-    const tor_addr_t *ext_addr = NULL;
-    const tor_addr_t *maybe_ext_addr4 = is_local ? \
                &amp;options-&gt;LocalOutboundBindAddressIPv4_ : \
                &amp;options-&gt;OutboundBindAddressIPv4_;
-    const tor_addr_t *maybe_ext_addr6 = is_local ? \
                &amp;options-&gt;LocalOutboundBindAddressIPv6_ : \
                &amp;options-&gt;OutboundBindAddressIPv6_;
-
-    if (protocol_family == AF_INET &amp;&amp; !tor_addr_is_null(maybe_ext_addr4))
-      ext_addr = maybe_ext_addr4;
-    else if (protocol_family == AF_INET6 &amp;&amp; !tor_addr_is_null(maybe_ext_addr6))
-      ext_addr = maybe_ext_addr6;
-
-    if (ext_addr) {
-      struct sockaddr_storage ext_addr_sa;
-      socklen_t ext_addr_len = 0;
-      memset(&amp;ext_addr_sa, 0, sizeof(ext_addr_sa));
-      ext_addr_len = tor_addr_to_sockaddr(ext_addr, 0,
-                                          (struct sockaddr *) &amp;ext_addr_sa,
-                                          sizeof(ext_addr_sa));
-      if (ext_addr_len == 0) {
-        log_warn(LD_NET,
-                 "Error converting OutboundBindAddress %s into sockaddr. "
-                 "Ignoring.", fmt_and_decorate_addr(ext_addr));
-      } else {
-        if (bind(s, (struct sockaddr *) &amp;ext_addr_sa, ext_addr_len) &lt; 0) {
-          *socket_error = tor_socket_errno(s);
-          log_warn(LD_NET,"Error binding network socket to %s: %s",
-                   fmt_and_decorate_addr(ext_addr),
-                   tor_socket_strerror(*socket_error));
-          tor_close_socket(s);
-          return -1;
-        }
+  const int is_local = tor_addr_is_loopback(addr);
+  const tor_addr_t *ext_addr = NULL;
+  const tor_addr_t *maybe_ext_addr4 = is_local ? \
&amp;options-&gt;LocalOutboundBindAddressIPv4_ : &amp;options-&gt;OutboundBindAddressIPv4_; +  \
const tor_addr_t *maybe_ext_addr6 = is_local ? \
&amp;options-&gt;LocalOutboundBindAddressIPv6_ : &amp;options-&gt;OutboundBindAddressIPv6_; +
+  if (protocol_family == AF_INET &amp;&amp; !tor_addr_is_null(maybe_ext_addr4))
+    ext_addr = maybe_ext_addr4;
+  else if (protocol_family == AF_INET6 &amp;&amp; !tor_addr_is_null(maybe_ext_addr6))
+    ext_addr = maybe_ext_addr6;
+
+  if (ext_addr) {
+    struct sockaddr_storage ext_addr_sa;
+    socklen_t ext_addr_len = 0;
+    memset(&amp;ext_addr_sa, 0, sizeof(ext_addr_sa));
+    ext_addr_len = tor_addr_to_sockaddr(ext_addr, 0,
+					(struct sockaddr *) &amp;ext_addr_sa,
+					sizeof(ext_addr_sa));
+    if (ext_addr_len == 0) {
+      log_warn(LD_NET,
+	       "Error converting OutboundBindAddress %s into sockaddr. "
+	       "Ignoring.", fmt_and_decorate_addr(ext_addr));
+    } else {
+      if (bind(s, (struct sockaddr *) &amp;ext_addr_sa, ext_addr_len) &lt; 0) {
+	*socket_error = tor_socket_errno(s);
+	log_warn(LD_NET,"Error binding network socket to %s: %s",
+		 fmt_and_decorate_addr(ext_addr),
+		 tor_socket_strerror(*socket_error));
+	tor_close_socket(s);
+	return -1;
       }
     }
   }
-- 
1.7.10.4

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121127023816</emailId><senderName>Christian Kujau</senderName><senderEmail>lists@nerdbynature.de</senderEmail><timestampReceived>2012-11-27 02:38:16-0400</timestampReceived><subject>Re: [tor-dev] RIAA v Verizon: 404</subject><body>

On Mon, 26 Nov 2012 at 17:40, leez wrote:
&gt; The lost document was actually this one:
&gt; https://www.eff.org/document/dc-circuit-opinion-granting-verizons-motion-quash
&gt; 
&gt; I've added a redirect from the broken link, so either will get you
&gt; there now.

Thanks for fixing this!

Christian.
-- 
BOFH excuse #171:

NOTICE: alloc: /dev/null: filesystem full
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121127180131</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-11-27 18:01:31-0400</timestampReceived><subject>[tor-dev] tor exit node modules in Tor source codes</subject><body>

[Attachment #2 (multipart/alternative)]


I'm doing research on Tor and I want to modify the tor exit node functions.

I downloaded the source codes from this link
https://gitweb.torproject.org/tor.git/tree/b13c6becc892d9716d8645f16b5d03bdb0b34651:/src

but I can't find the modules/files which are related to tor exit
functions(like receive cells from previous relay router, send HTTP/TCP
connection request to webserver/remote_host, buffer management)

can anyone give some hints? thanks!

[Attachment #5 (text/html)]

I'm doing research on Tor and I want to modify the tor exit node \
functions.&lt;br&gt;&lt;br&gt;I downloaded the source codes from this link&lt;br&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/b13c6becc892d9716d8645f16b5d03bdb0b34 \
651:/src"&gt;https://gitweb.torproject.org/tor.git/tree/b13c6becc892d9716d8645f16b5d03bdb0b34651:/src&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;but I can't find the modules/files which are related to tor exit \
functions(like receive cells from previous relay router, send HTTP/TCP connection \
request to webserver/remote_host, buffer management)&lt;br&gt;&lt;br&gt;can anyone give some \
hints? thanks!&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121127212912</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2012-11-27 21:29:12-0400</timestampReceived><subject>[tor-dev] questions about parallel Tor circuits en masse &amp; adoption drivers</subject><body>

Hello,

I'm interesting in discussing the development aspects of using Tor as
a massively distributed anonymous file server where blocks (e.g. 4KB)
of a particular file (e.g. even several GB in size) might be
redundantly distributed on very many hidden service nodes (e.g. a
unique 4KB block of a file redundantly duplicated on ~ x hidden nodes
from y million total hidden service nodes) and access to the file
would be high through-put because very many (e.g. cable bandwidth /
4KB, e.g. 50 Mbps is 6.25 MB/s or 1600 * 4KB blocks per second)
concurrent but high latency Tor circuits. Thus each Tor circuit would
still be the usual high latency, but very many Tor circuits in
parallel would deliver fantastic through-put. What if Tor could handle
several rolling window bundles of e.g. 1,600 parallel Tor circuits
which request one small block of info from 1,600 unique hidden service
nodes? Does Tor parallelized, high bandwidth file sharing already
exist? Does Tor already handle a massively parallelized number of Tor
circuits, on the scale of thousands or tens of thousands of Tor
circuits? Is many concurrent Tor circuits desirable? Who is working on
it? Would using Tor as a massively distributed anonymous file server
dramatically increase the number of Tor nodes (due to file sharing
being more desirable than anonymity) and therefore make the entire Tor
system more resilient to attack due to high growth and orders of
magnitude more nodes? Is such an expansion -- on the back of a new
functional focal point; i.e. not anonymity -- politically desirable
for the Tor project?

Thanks,
Simon

Experienced network programming enthusiast from Vancouver, Canada
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121128010003</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-11-28 01:00:03-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor Extended ORPort Authentication</subject><body>

Added as proposal 217; thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121128181000</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-11-28 18:10:00-0400</timestampReceived><subject>[tor-dev] More TBB usability challenges</subject><body>

I was asked to meet with some people doing work in dangerous areas of
Latin America. In general, these people can get around and work with
Microsoft Windows competently. They are all fluent in English, Spanish,
and various dialects found in Latin American countries.  Most of them
had Spanish-language versions of Windows 7 on their laptops.

# Getting TBB

During the discussion, an informal usability study happened. I thought
having a discussion about this may be better than simply opening a trac
ticket.

Here's roughly the scenario. I asked people to download Tor Browser from
our website. All found Tor's website via Bing. Interestingly, some
searched for "tor", others for "tor browser", and one for "tor project".
They were all using Internet Explorer and Bing because that's the
default for Windows 7. Thankfully, our website is the top result for all
three queries at Bing.

They all found the big purple "Download Tor" button on the index page.

Issue #1: Running TBB from the website. When clicking the orange
"Download Tor Browser Bundle" button, IE prompts them to "Run", "Save",
or "Cancel". All of them chose "Run".

Issue #1A: When choosing "Run", a prompt appears, "The publisher of
tor-browser-2.2.39-5_en-US.exe couldn't be verified. Are you sure you
want to run the program?". All of them hit "Yes" and ignored the
warning.

Issue #1B: When the download completed, they were prompted with the
7zip self-extractor giving them a path similar to this:
"C:\Users\tor\AppData\Local\Microsoft\Windows\Temporary Internet
Files\Content.IE5\T868H68M\".  All of them pushed the "Extract" button
and let 7zip extract TBB into that temporary directory.

A few of them went to the Downloads folder to try to find TBB.
However, it's not there because it's extracted into a temporary folder.
This folder is not reachable by the user through File Explorer.

Issue #2: Downloading TBB. After some Q&amp;A about what happened, I asked
them to "Save" rather than "Run". TBB then downloads. The user is
prompted with a warning box stating, "The publisher of
tor-browser-2.2.39-5_en-US.exe couldn't be verified." And the user is
left to choose between "Run" and "View downloads". When clicking "Run"
the user is prompted with the 7-zip self-extractor prompt and
"C:\Users\tor\Downloads\" is the default path. All of them hit the
"Extract" button. None of them were sure what just happened nor why TBB
needs to be extracted.

Issue #2A: The self-extract completes and the user is left looking at
their IE window with the TBB download page. Three of them went to their
Downloads folder to find Tor. The other few waited for something to
happen. When I asked the waiting few why they were waiting, they said
because they "ran TBB" and expected the extraction to automatically
start TBB for them.

Issue #3: In the Downloads folder there are two things called "tor
browser", one is an application the other is a file folder. See
https://people.torproject.org/~andrew/2012-11-28-tbb-usability-test/2012-11-28-tbb-downloads-default-icons.png
 for an example. Most of the people had hundreds of files in the
Download folder, so it wasn't as clear as this example screenshot.

Some people wanted to run the application, because in their mind, you
run an application.

When asked to go into the Tor Browser folder, they all found "Start Tor
Browser" and ran it (some double-left click, some right click and
choose "Open"). See
https://people.torproject.org/~andrew/2012-11-28-tbb-usability-test/2012-11-28-tbb-downloads-default-icons-2.png
 for what it looks like by default.

Issue #4: Once TBB was started, the users would alt-tab between
applications or choose various apps in their task bar at the bottom of
the screen. They kept clicking the onion icon because they thought it
was TBB, when it brings up the Vidalia control panel. This is what it
looks like,
https://people.torproject.org/~andrew/2012-11-28-tbb-usability-test/2012-11-28-tbb-downloads-default-icons-3.png


Issue #5: No one knew what "Startpage" was nor why it was in the top
bar. Just like IE, they all wanted to search from the awesome bar by
default. This does work, and they can search via startpage.com via the
awesome bar.

From here on out, the normal TBB issues apply, as demonstrated by
Greg's HotPETS paper,
https://people.torproject.org/~andrew/hotpets12-1-usability.pdf

# Feedback

I asked how we can improve this entire process. The consensus is that
TBB needs to be a single application people can just run and get the
browser going. The extraction process was confusing and was sometimes
called an installation process. They felt that "running" it from the
tor download site was fine, so long as everything just worked and a
browser window popped up.

They also felt that the Vidalia control panel was unnecessary. It just
confused them. The only thing they felt was valuable was the Network
Map. A caveat is that we were on a US network which didn't censor. The
Message Log and bridge/obfsproxy functionality wasn't needed in this
case. I suspect it will be when they try this in Latin America.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121129061103</emailId><senderName>Clay Graham</senderName><senderEmail>claytantor@gmail.com</senderEmail><timestampReceived>2012-11-29 06:11:03-0400</timestampReceived><subject>[tor-dev] Tor Safe RSA Plugin</subject><body>

[Attachment #2 (multipart/alternative)]


I am creating a twitter clone with RSA public key encryption and making it
feely available.

tweet from my feed:
=================
new: http://grailo.org  &lt;http://t.co/M1Pbgkdn&gt; twitter clone meets public
key encryption github: http://bit.ly/UmUsxm  &lt;http://t.co/SCVAvVa4&gt; pic:
http://bit.ly/UmUdCn  &lt;http://t.co/hchO3QWL&gt;

https://twitter.com/claytantor

Looking to create a Tor Browser plugin that can do client side decryption.

Happy to use javascript, c or java.

Clay

[Attachment #5 (text/html)]

&lt;div&gt;I am creating a twitter clone with RSA public key encryption and making it feely \
available.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;tweet from my \
feed:&lt;/div&gt;&lt;div&gt;=================&lt;/div&gt;&lt;div&gt;&lt;span class="" \
style="color:rgb(51,51,51);font-family:'Helvetica \
Neue',Arial,sans-serif;font-size:14px;line-height:18px;border-collapse:separate"&gt;new: \
&lt;a href="http://t.co/M1Pbgkdn" class="" target="_blank" title="http://grailo.org" \
dir="ltr" style="color:rgb(112,88,37);text-decoration:none"&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt;http://&lt;/span&gt;&lt;span \
class=""&gt;grailo.org&lt;/span&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt;&lt;/span&gt;&lt;span class=""&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/a&gt; twitter clone meets public \
key encryption github: &lt;a href="http://t.co/SCVAvVa4" class="" target="_blank" \
title="http://bit.ly/UmUsxm" dir="ltr" \
style="color:rgb(112,88,37);text-decoration:none"&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt;http://&lt;/span&gt;&lt;span \
class=""&gt;bit.ly/UmUsxm&lt;/span&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt;&lt;/span&gt;&lt;span class=""&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/a&gt; pic: &lt;a \
href="http://t.co/hchO3QWL" class="" target="_blank" title="http://bit.ly/UmUdCn" \
dir="ltr" style="color:rgb(112,88,37);text-decoration:none"&gt;&lt;span class="" \
style="color:rgb(112,88,37);text-decoration:none;font-size:0px;line-height:0"&gt;http://&lt;/span&gt;&lt;span \
class="" style="color:rgb(112,88,37);text-decoration:none"&gt;bit.ly/UmUdCn&lt;/span&gt;&lt;font \
class="" color="#705825"&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt;&lt;/span&gt;&lt;/font&gt;&lt;span class="" \
style="color:rgb(112,88,37);text-decoration:none"&gt;&lt;span class="" \
style="font-size:0px;line-height:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br&gt; \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a \
href="https://twitter.com/claytantor"&gt;https://twitter.com/claytantor&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Looking \
to create a Tor Browser plugin that can do client side decryption. &lt;/div&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Happy to use javascript, c or \
java.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Clay&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121129181423</emailId><senderName>Julian Yon</senderName><senderEmail>julian@yon.org.uk</senderEmail><timestampReceived>2012-11-29 18:14:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 205: Remove global client-side DNS caching</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 27 Nov 2012 20:53:03 -0500
Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:

&gt; On Tue, Nov 27, 2012 at 10:08 AM, Julian Yon &lt;julian@yon.org.uk&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; So, perhaps have a cache but only consult it for making decisions
&gt; &gt; about whether to use a circuit, not for resolving client requests?
&gt; &gt; Although this is still vulnerable to poisoning, that could perhaps
&gt; &gt; be mitigated by capping the TTL at some small value.
&gt; 
&gt; There's an interesting idea! I wonder, can we come up with a way to
&gt; tell whether it's necessary?

It might be possible experimentally. Implement it as an optional
codepath. Run in both configurations for a while, and in each case
monitor the number/percentage of refused connections the average added
latency due to refusal, and the percentage of total latency that this
represents.

&gt; It's not likely to help typical clients, since microdescriptor-users
&gt; (and all IPv6 users) don't see the full exit policy, but only a policy
&gt; summary.

Hmm. From the summary we know which destination ports we can use, so
the time we have a problem is (e.g.) when an exit allows port 80 in
general but not for the particular IP/netblock in question. This is a
rare case, but when we do hit it, without DNS caching every single
request is going to bounce, isn't it? Given the number of resources on
a typical modern webpage, this implies that occasionally somebody is
going to find that suddenly their latency goes through the roof because
of an unlucky combination of website and exit. And so maybe it's
not quite as simple as the above experiment :-/

What's needed is to determine whether the effect is large enough that
it needs to be accounted for, or whether it's just an inconvenient
corner case. So I think maybe performing some measurements using an
artificially small ExitNodes list, giving a high probability of hitting
a restrictive exit, may be necessary (obviously the call that Roger
mentioned to policies_set_node_exitpolicy_to_reject_all needs to be
disabled or it'll just get blacklisted on the first hit).

And of course you're right, unless clients have some way of knowing to
avoid the exit it's a moot point, so...

&gt; My main worry here is that an exit could give different clients
&gt; different exit policies.  I'm not sure yes if there's a clever way to
&gt; bootstrap that into a full attack, but generally when you give an
&gt; attacker the ability to give different clients different views of the
&gt; network, you can run into trouble.

Ok, that's a fair concern. Two variations sprang to mind immediately:

(1) Add a hash of each router's full exit policy to the consensus. The
client can use this to verify that it's being given the same info as
everyone else. For policies that are fully covered by the summary, this
line could be omitted (as it should never be needed).

(2) The first time an exit rejects a connection, ask another party
(directory authority/mirror) for the full policy at that point. However,
I see that a related idea has been floated before (Proposal 141).
Presumably there were good reasons why that proposal wasn't
implemented. Certainly I can immediately see the potential for
information leakage.

But as I was writing the top half of this email I then thought:

(3) Don't bother trying to ascertain the full exit policy, but rather
maintain a simple table of exit/IP/port combinations that have been
rejected and consult it when building/using circuits. This requires no
protocol changes (win!) at the cost of no longer blacklisting dishonest
exits entirely. Some mechanism for expiring entries would probably be a
good idea, and/or maybe hold it in a circular list so that there's a
maximum number.

As far as I can see, all of these would mitigate Roger's attack, and
(3) feels like it should be particularly easy to implement and while it
doesn't solve #1774 I can't see how it introduces any new problems.
Thoughts? Is it really that simple?


Julian

-- 
3072D/F3A66B3A Julian Yon (2012 General Use) &lt;pgp.2012@jry.me&gt;

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130012158</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-11-30 01:21:58-0400</timestampReceived><subject>Re: [tor-dev] questions about extending circuit</subject><body>

Hi. Both HackerSpaceSeoul and HackerspaceSeoul lack the named flag,
which likely is why tor isn't allowing you to refer to it by the
nickname. Have you tried referring to it by the fingerprint instead?

Speaking of which, TorCtl is being deprecated in favor of a couple
newer controller libraries...

https://stem.readthedocs.org/en/latest/ - replacement with a similar
design to TorCtl, see the tutorial for usage
https://txtorcon.readthedocs.org/en/latest/ - twisted controller library

If you try using stem then let me know if run into any issues or have
questions! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121130161059</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2012-11-30 16:10:59-0400</timestampReceived><subject>Re: [tor-dev] Parallel relaycrypt data structures for review</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi everyone,

This is quite interesting. I wrote back an initial proposal for this
kind of work in Tor and I'm happy to see some similarities :).

I've attached to the email the ideas I had based on some discussions
with Nick and reading the ticket #1749. (Sorry for any obvious huge
English mistakes, it's not my primary language :)

I remember a discussion about parallel relay cell crypto with Nick and
there was an important thing which is to prioritize quiet circuit(s).
This implies that once a cell is scheduled for crypto. processing, the
dispatcher should somehow know the "noise" of the circuit and dispatch
accordingly. It brings the concept of priority for cells/circuit in a
parallel environment which makes dispatching a bit more tricky.

(More inline).

Nick Mathewson:
&gt; On Nov 29, 2012 9:30 PM, "Andrea Shepard" &lt;andrea@torproject.org&gt;
&gt; wrote:
&gt;&gt; 
&gt;&gt; Please review first draft proposed parallel relaycrypt
&gt;&gt; structures in my parallel_relay_crypt branch.
&gt;&gt; 
&gt; 
&gt; 
&gt; Hi!  Here are some initial thoughts:
&gt; 
&gt; * If we're going to do it like this, maybe we need to make cell_t 
&gt; packed or something eventually.  It's got a fair amount of padding 
&gt; overhead right now.
&gt; 
&gt; * Maybe we'll need a next pointer in cells if we're queueing them?
&gt; 
&gt; * Why is there  only an rc_job for outgoing cells on a circuit? It 
&gt; seems for symmetry we'd need to have one for inbound cells and one
&gt; for outbound cells.  It looks like that code isn't there right
&gt; now?
&gt; 
&gt; * Maybe I'm confused by these queues.  The system of cell queues
&gt; is going to get a little confusing, maybe.  Putting cells on the
&gt; outgoing queue isn't always right, since some cells (e.g.,
&gt; relay_data cells at an exit node) need to be handled locally rather
&gt; than relaying them. So we need more new queues?

What about if the main thread, when dequeuing encrypted cells, could
check that and decide if it goes outbound or stays locally for more
processing ?

&gt; 
&gt; * Should the jobs be in some data structure other than an
&gt; smartlist_t? A queue would seem to make more sense, since jobs are
&gt; getting added and pulled off.  (Yes, protecting the data structure
&gt; there with a lock makes sense.)

I would also propose the use of a priority queue because (or at least)
of the aforementioned use case.

&gt; 
&gt; * If you're going to have separate locks, it's important to
&gt; document how they nest, to prevent deadlock conditions.
&gt; 
&gt; * Presumably relaycrypt_job_t would need to have a pointer to the 
&gt; actual circuit that needs work, and a note about whether it's a
&gt; job for outbound or inbound cells.

Looks like there is ? ..

&gt; 
&gt; * In the non-threaded-relaycrypt case, presumably the intention is 
&gt; that there's a function that would otherwise queue a cell for
&gt; crypto but instead just put it directly on the appropriate circuit
&gt; queue?
&gt; 
&gt; Thanks again! I'll let you know if I think of anything else.

I have question/remark on the circuit_t pointer in relaycrypt_job_s
structure. I wonder if a lock might be needed since if the circuit is
closed but some cells are still being processed by a relaycrypt worker
thread, simply setting the circ to NULL will not indicate the thread
to stop using CPU for this invalid circuit.

I don't really know if Tor as some kind of refcount mechanism for
circuits but in my experience this is a "time trap" when setting a
pointer to NULL but still using some objects associated to that
pointer. The cleanup becomes a nightmare if a thread still has ref. to
some circuit's object which is invalidated when holding them.

Would it be safer to simply have a STOP/CANCEL mechanism for worker
thread and avoid nullifying references that might be in used?

That's it for now. I'm quite happy to see this work going forward! :)

Cheers!
David

&gt; 
&gt; yrs,
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBCgAGBQJQuNqNAAoJEELoaioR9I025KMIALXE81lm0zpTRUWlM52HawyD
lGVBqMRf/V+F/g8EFqGpyZ3drs9o3+uNhY7/+qdSY6IhWJGUfyL7vrwYSk1/yuBf
RWBFE050zLhd9QwCARCoxb0E+oGsh/Z6hq8NgcDxba28Z2II+azE3KrNkwAuUnob
N/6gUd8ceWpyXmFgCpf3MJLNqZKOcYXax2LFA+ocQdQ368VD+Lq8jqPXfR62Npr4
Ujhp9i2REALbbV6dOmxBVdytK9v2NfFGZIXp9n5onU8/Ym9a8fg0ZvUk+i5bwb+6
eOCYeLeVe7yNK8yzxnk6J8TbwuCRMLTSIhEfov6f+WgQYR9hfmBcY7shqFvpef4=
=OQrF
-----END PGP SIGNATURE-----

["multithread-crypto-spec.txt" (text/plain)]

Title: Multithreaded cryptographic scheme for Tor relay cells
Author: David Goulet &lt;dgoulet@ev0ke.net&gt;
Created: 18 September 2012
Status: Open

The master bug for this proposal is #1749.

Overview:

  This document proposes a multithreaded design for cells cryptographic j=
obs.
  The goal here is to take advantage of SMP machines especially on powerf=
ul
  servers running Tor exit nodes nowadays. Moreover, nowadays, almost all=
 OSes
  running Tor nodes support multithreading which should be use to increas=
e Tor
  performance.

  TODO: OUTLINE

1. Background

1.1 Overview of current cell's crypto

  As stated in [WikiThreadCrypto], three main kinds of crypto occurs:

  1) Onion skin processing (already parallelized on the server side).
  2) SSL handshakes and crypto
  3) AES-crypto on cells

  This proposal focuses on the third kind which is direct AES cell crypto=
graphy
  jobs (encryption and decryption).

  The relay cell crypto is done in relay_crypt_one_payload(), which gets =
called
  at a few places, all of which are fortunately in relay.c making things =
easier
  to change.

  * circuit_package_relay_cell(), it gets called 1..N times for a cell th=
at
    we're packaging from an edge connection and about to stick on a cell =
queue.

  * relay_crypt(...), we just got a relay cell on a circuit, and we are a=
bout
    to decrypt it, see whether it should get handled by us, and maybe pas=
s it
    on or maybe process it. If we handle it, we are going to pass it to
    connection_edge_process_relay_cell(...). If we pass it on, we are goi=
ng to
    append it to a cell_queue_t.

  This function is called by circuit_package_relay_cell(...) which is use=
d when
  we just received a relay cell on a circuit.

  For pure relays, the relay_crypt() case dominates. For exit nodes, the
  circuit_package_relay_cell() case matters too.

  The whole concept of using a new threading model is to offload the cryp=
to
  part from the main loop and, has stated, take advantage of SMP systems.

2. Design

  Since cells order matters on a circuit, it makes sense to create two ne=
w
  priority queues in the circuit.

  * Crypto cell queue
    The cell has NOT been processed for encryption/decryption task.

  * Transport cell queue
    The cell is ready to be sent and has passed through the crypto cell q=
ueue.

  The following schema shows the cell movement once it arrives on circuit=
 A
  where Cq is the Crypto queue and Tq is the Transport queue. This is as =
simple
  as it gets. The tricky and fun part of this scheme is describe in detai=
ls in
  section 3, threading and synchronization.

                        circuit A
                       +----------------------------------+
  +--------+  enqueue  |    +------+------+     +-------+ |
  | cell c |----------&gt;| Cq |      |      | ... |   c   | |
  +--------+           |    +------+------+     +-------+ |
                       +----------------------------------+
                                                 | dispatch(Cq, Tq)
                                                 |
               Thread pool                       v
               +-------+-------+     +--------+--------+
               |       |       | ... |        | circ A |
               +-------+-------+     +--------+--------+
                                                 |
                          exec crypto job() &lt;--- |
                                                 v
                       +----------------------------------+
  +--------+   dequeue | +-------+     +------+------+    |
  | cell c |&lt;----------| |   c   | ... |      |      | Tq |
  +--------+           | +-------+     +------+------+    |
                       +----------------------------------+
                        circuit A

  It goes like this. Enqueue the cell c of circuit A to its crypto queue =
(Cq).
  Each circuits are dispatched to a thread pool where they are assigned t=
o an
  available thread that process N (value is TBD) cells from the Cq and en=
queue
  them in Tq once done.

  The main loop of Tor only needs to empty out the transport queue of eac=
h
  circuit at each round it does. The rest is handled by the crypto thread=
 pool.

  This thread pool model is describe in detail in the next section.

3. Threading and Synchronization

  The basic idea is to dispatch relay cell's cryptographic jobs to a thre=
ad
  pool upon reception to offload the Tor main loop. The thread pool shoul=
d
  handle circuits rather than cells. Reordering cells after encryption is=
 an
  unnecessary steps that we absolutely want to avoid for complexity and l=
atency
  reasons.

  The next section describes the threading model and dynamics between the
  dispatcher and the pool (worker threads).

3.1 Threading model

  This section first explains how the dispatcher mechanism works and desc=
ribes
  the worker thread of the pool in the following section.

3.1.1 Dispatcher

  The dispatch mechanism is part of the main loop and has two roles. Firs=
t, it
  assigns the received cells to the corresponding crypto queue in its cir=
cuit.
  We have to make sure that the dispatcher is the one and only one writer=
 of
  that queue so we can avoid complex synchronization between threads and =
keep
  the design simple for this proposal.

  New circuit are also managed by the dispatcher to assign it to a worker=
 in
  the thread pool.

  The second role is to keep a priority queue of all worker threads order=
ed by
  the number of cells they are currently handling in all of their crypto
  queues. After adding a cell or a new circuit to a thread, this queue is
  rebalanced. This rebalancing process is tricky since we might need to s=
teal
  circuit from other threads and push them back to new ones. This process=
 might
  be hard on locks contention but for this first proposal it's should be =
good
  enough.

  Section 3.3 describes the priority queue data structure proposed for th=
e
  dispatcher.

3.1.2 Worker thread

  This thread is quite simpler. Each of them contains a priority queue of
  circuits ordered by the EWMA value so the quietest circuit gets handled=
 first
  which is an important design requirements for the current state of Tor.

  As proposed by Nick Mathewson, it might also be okay to do the EWMA
  implementation strictly when adding stuff to the transport queue (outbo=
und).
  Tests should be done to see if it could make things faster.

  Once the thread has CPU time, it chooses N cells from the crypto priori=
ty
  queue depending on each circuit load, process them one at a time and mo=
ve
  them to the transport queue (Tq) of the corresponding circuit once done=
. This
  N value has to be determined with tests. Another possibility is to make=
 this
  value change depending on the rate of the relay or the CPU power availa=
ble.

  Since the cells insertion is done by the dispatcher and we want to put =
as
  less work as we can to it, the priority queue balancing operation shoul=
d be
  done in the worker thread. So, after N cells round of work, the queue s=
hould
  be rebalanced since the dispatcher could have added more. This can be
  verified by setting a simple flag in the priority queue.

3.2 Locking scheme

  For this first draft I will not propose some lockless mechanism since t=
his
  kind of changes is non trivial and maybe unnecessary for a first
  implementation. So the locking scheme is a simple lock for each propose=
d
  queue. We can improve over time and also during the stabilization proce=
ss.

3.3 Data structures

  For the priority queue, the minimum value of the queue is the most impo=
rtant
  node since we have to process the quietest circuit ordered by the numbe=
r of
  the EWMA value.

  A binary heap makes sense since the minimum value can be looked up in O=
(1)
  (called min-heap). This structure is simple, known and can be improved
  afterwards by all sort of funky structures such as the Fibonacci heap o=
r the
  Brodal queue [BrodalQueue].

4. Conclusion

  In a nutshell, this proposal is probably not the most efficient way to =
do
  multithreading crypto jobs in Tor but it's goal is to add a simple and
  scalable implementation that can be improved over time with testing,
  measurements and better algorithms such as more efficient data structur=
es or
  lockless mechanism.

5. Acknowledgments

TODO

References:
----------------
[WikiThreadCrypto] Multithreaded crypto on Tor
	https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/Multithre=
adedCrypto
[BrodalQueue] Gerth St=C3=B8lting Brodal (1996) - Worst-Case Efficient Pr=
iority Queues
    https://users.info.unicaen.fr/~karczma/TEACH/Doc/brodal_okasaki.pdf


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121130201153</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-11-30 20:11:53-0400</timestampReceived><subject>Re: [tor-dev] Proposal 216: Improved circuit-creation key exchange</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Watson Ladd (watsonbladd@gmail.com):

&gt; On Thu, Nov 29, 2012 at 11:07 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt;
&gt; &gt; Thus spake Nick Mathewson (nickm@freehaven.net):
&gt; &gt;
&gt; &gt; &gt; Title: Improved circuit-creation key exchange
&gt; &gt; &gt; Author:  Nick Mathewson
&gt; &gt; &gt;
&gt; &gt; &gt; Summary:
&gt; &gt; &gt;
&gt; &gt; &gt;   This is an attempt to translate the proposed circuit handshake from
&gt; &gt; &gt;   "Anonymity and one-way authentication in key-exchange protocols" by
&gt; &gt; &gt;   Goldberg, Stebila, and Ustaoglu, into a Tor proposal format.
&gt; &gt; &gt;
&gt; &gt; &gt;   It assumes that proposal 200 is implemented, to provide an extended CREATE
&gt; &gt; &gt;   cell format that can indicate what type of handshake is in use.
&gt; &gt; &gt;
&gt; &gt; &gt; Protocol:
&gt; &gt; &gt;
&gt; &gt; &gt;   Take a router with identity key digest ID.
&gt; &gt; &gt;
&gt; &gt; &gt;   As setup, the router generates a secret key b, and a public onion key
&gt; &gt; &gt;   B with b, B = KEYGEN().  The router publishes B in its server descriptor.
&gt; &gt; &gt;
&gt; &gt; &gt;   To send a create cell, the client generates a keypair x,X = KEYGEN(), and
&gt; &gt; &gt;   sends a CREATE cell with contents:
&gt; &gt; &gt;
&gt; &gt; &gt;     NODEID:     ID             -- H_LENGTH bytes
&gt; &gt; &gt;     KEYID:      KEYID(B)       -- H_LENGTH bytes
&gt; &gt; &gt;     CLIENT_PK:  X              -- G_LENGTH bytes
&gt; &gt;
&gt; &gt; I mentioned this on the ntor ticket (#7202), but it's probably worth
&gt; &gt; repeating here in case anyone has any suggestions or ideas:
&gt; &gt;
&gt; &gt; I think we really should consider a proof-of-work field on the client's
&gt; &gt; CREATE cell, so we have some form of response available in the event of
&gt; &gt; circuit-based CPU DoSes against Tor relays.
&gt; 
&gt; Not an issue: in 10 minutes a Core 2 Quad Intel machine can calculate
&gt; 10 million ECC calculations.
&gt; I think we'll be okay.

Hrmm.. If you used all 4 cores for this test, this is ~4000 ECC
calculations per second, per core. If I'm reading the proposal right,
the handshake requires two ECC calculations and three hashes per create
cell.. Let's just call this 1000 create cells per second per core for
now, but it's probably a bit lower than that.

This is substantially fast and worlds better than current onionskins,
but it still worries me that clients don't need to spend any CPU on this
attack, only bandwidth. This client-vs-server CPU asymmetry means that a
client with 512KBytes/sec of upstream could take down any single-core
relay instance it wanted. This is somewhat close to the upstream
capacity for residential cable modems.

This means a very small botnet could bring down the Tor network, even
with the new handshake. Worse, it will be very hard to rate limit such
clients by IP in the event of an attack, because they get to route their
CREATE cells through other hops first.


On the other hand, making the proof-of-work system not be buggy and
failure prone might be quite a bit of dev effort. So there is that to
consider.

I suppose a simpler solution might be to make it hard/impossible to
blast unlimited RELAY_EXTEND/CREATE cells through intermediate nodes
without waiting for any round trips/responses. Maybe this is already the
case, unless there are ways to re-use partially constructed/initial
portions of circuits to send RELAY_EXTENDs... Does the "leaky-circuit"
support code still exist, for example?



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121004181627</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-10-04 18:16:27-0400</timestampReceived><subject>[tor-dev] how to configure the window size of tor browser</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

   I want to make the tor browser with certain size, eg. 650*650, so as to
do some test on some webpages
   I used command line like:

       App/Firefox/firefox --profile Data/profile -height 650 -width 650

   but it doesn't work

   I tried to modify localstore.rdf in Data/profile, but it is dynamically
changed by running the browser

   does anybody know how the size is set in the TBB and which configuration
file can I modify ? thanks

[Attachment #5 (text/html)]

Hi,&lt;br&gt;&lt;br&gt;=A0=A0 I want to make the tor browser with certain size, eg. 650=
*650, so as to do some test on some webpages&lt;br&gt;=A0=A0 I used command line =
like:&lt;br&gt;&lt;br&gt;=A0=A0=A0=A0=A0=A0 App/Firefox/firefox --profile Data/profile =
-height 650 -width 650&lt;br&gt;
&lt;br&gt;=A0=A0 but it doesn't work&lt;br&gt;&lt;br&gt;=A0=A0 I tried to modify localsto=
re.rdf in Data/profile, but it is dynamically changed by running the browse=
r&lt;br&gt;&lt;br&gt;=A0=A0 does anybody know how the size is set in the TBB and which =
configuration file can I modify ? thanks&lt;br&gt;


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121004162030</emailId><senderName>Eugen Leitl</senderName><senderEmail>eugen@leitl.org</senderEmail><timestampReceived>2012-10-04 16:20:30-0400</timestampReceived><subject>[tor-dev] resistance to rubberhose and UDP questions</subject><body>


I've had an IRC session with the designer of cjdns (on cjdns)
who made a few interesting points, and suggestions. Comments?

Verbatim chat snip below.

18:03 &lt;@cjd&gt; if you took the components from cjdns, you could build a TOR like \
protocol which used UDP if  possible and made connections much faster
18:04 &lt;+eleitl&gt; I wonder why they didn't choose UDP
18:05 &lt;@cjd&gt; you need to fall back on tcp in case you're firewalled to hell
18:05 &lt;+eleitl&gt; Apparently, they're thinking about it
                https://blog.torproject.org/blog/moving-tor-datagram-transport
18:06 &lt;@cjd&gt; problem with tor is (correct me if I)
18:06 &lt;@cjd&gt; 'm wrong)
18:06 &lt;@cjd&gt; the directory is signed by the tor foundation
18:07 &lt;@cjd&gt; so they can sign a fake directory and run a bunch of directory servers \
and when Alice connects to  their directory server, they give her a bunch of fake \
nodes 18:07 &lt;@cjd&gt; run their own botnet with fake tor nodes so your circuit is always \
owned 18:07 &lt;+eleitl&gt; I don't really know for sure, but there's intrinsic trust to \
Tor developers, yes. 18:08 &lt;+eleitl&gt; You can run your own Tor network, though.
18:08 &lt;+eleitl&gt; Some botnets do that.
18:08 &lt;@cjd&gt; I trust them to make the software right, esp. since I could check if \
they did. 18:09 &lt;@cjd&gt; But a little arm twisting can change someone's motives pretty \
fast. 18:09 &lt;+eleitl&gt; Maintaining signing secrets is a problem.
18:09 &lt;+eleitl&gt; They should have used a P2P design.
18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your life \
hell...   I wouldn't fault them  for doing what the man says.
18:10 &lt;@cjd&gt; *wouldn't fault you
18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario, and see how \
they squirm. 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
18:12 &lt;@cjd&gt; cjdns does the same thing
18:13 &lt;+eleitl&gt; Can I use snippage from this chat verbatim, or will I need to \
rephrase? 18:14 &lt;@cjd&gt; sure go ahead
18:14 &lt;+eleitl&gt; Thanks!
18:14 &lt;@cjd&gt; can only speak for myself ofc
18:14 &lt;+eleitl&gt; Sure.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121001164948</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-10-01 16:49:48-0400</timestampReceived><subject>[tor-dev] 10 days left for proposals for hard stuff [Re: Reminder: Big/tricky/interesting features f</subject><body>

On Mon, Sep 17, 2012 at 11:47 AM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; Hi, all!
&gt;
&gt; From https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :
&gt;
&gt; "October 10, 2012: Big feature proposal checkpoint. Any large
&gt; complicated feature which requires a design proposal must have its
&gt; first design proposal draft by this date."
&gt;
&gt; There are only 23 days till October 10.  If there's something you want
&gt; in 0.2.4.x, and it is the kind of thing that needs a design proposal,
&gt; and there is no proposal yet, it could be time to start writing!
&gt;
&gt; What needs a design proposal? Generally: anything that involves a
&gt; change to the Tor protocol; anything whose security implications are
&gt; nontrivial and need discussion; and anything that will change any Tor
&gt; specification.  Err on the side of "it needs a proposal."
&gt;
&gt; What is a "large complicated feature"? Please assume I'm going to be
&gt; extremely grumpy here, and err on the side of "it is big".  If the
&gt; writeup of the proposal that explains how it works, or why to do it
&gt; this way is going to take more than a few paragraphs, it is probably
&gt; 'big' or 'complex'.
&gt;
&gt; (Note to would-be system-gamers:  Please don't send a sketchy
&gt; incomplete draft as a placeholder to get your foot in the door. That's
&gt; not cool. If you don't have a draft ready, the feature can wait till
&gt; 0.2.5.)
&gt;
&gt; (Note also: a feature proposal by this deadline is a necessary
&gt; condition for getting your big/tricky/complicated feature into 0.2.4,
&gt; but not a sufficient condition.  It also needs to have a working
&gt; implementation on schedule.)
&gt;
&gt; (Note finally: This is not a promise to not merge stuff that violates
&gt; this deadline, but I sure will be trying not to merge such stuff.)
&gt;
&gt; yrs,
&gt; --
&gt; Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121011093214</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-11 09:32:14-0400</timestampReceived><subject>[tor-dev] Proposal: Faster Headless Consensus Bootstrapping</subject><body>

[Attachment #2 (multipart/signed)]


Also at:
https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/consensus-bootstrap:/proposals/xxx-faster-headless-consensus-bootstrap.txt


-------------------------------------------------------------------------

Title: Faster Headless Consensus Bootstrapping
Author: Mike Perry
Created: 01-10-2012
Status: Open
Target: 0.2.4.x+


Overview and Motiviation

 This proposal describes a way for clients to fetch the initial
 consensus more quickly in situations where some or all of the directory
 authorities are unreachable. This proposal is meant to describe a
 solution for bug #4483.

Design: Bootstrap Process Changes

 The core idea is to attempt to establish bootstrap connections in
 parallel during the bootstrap process, and download the consensus from
 the first connection that completes.

 Connection attempts will be done in batches of three. Only one
 connection will be performed to one of the canonical directory
 authorities. Two connections will be performed to randomly chosen hard
 coded directory mirrors.

 If no connections complete within 5 seconds, another batch of three
 connections will be launched. Otherwise, the first connection to
 complete will be used to download the consensus document and the others
 will be closed, after which bootstrapping will proceed as normal.

 If at any time, the total outstanding bootstrap connection attempts
 exceeds 15, no new connection attempts are to be launched until existing
 connection attempts experience full timeout.

Design: Fallback Dir Mirror Selection

 The set of hard coded directory mirrors from #572 shall be chosen using
 the 100 Guard nodes with the longest uptime.

 The fallback weights will be set using each mirror's fraction of
 consensus bandwidth out of the total of all 100 mirrors.

 This list of fallback dir mirrors should be updated with every
 major Tor release. In future releases, the number of dir mirrors
 should be set at 20% of the current Guard nodes, rather than fixed at
 100.

Performance: Additional Load with Current Parameter Choices

 This design and the connection count parameters were chosen such that
 no additional bandwidth load would be placed on the directory
 authorities. In fact, the directory authorities should experience less
 load, because they will not need to serve the consensus document for a
 connection in the event that one of the directory mirrors complete their
 connection before the directory authority does.

 However, the scheme does place additional TLS connection load on the
 fallback dir mirrors. Because bootstrapping is rare and all but one of 
 the TLS connections will be very short-lived and unused, this should not
 be a substantial issue.

 The dangerous case is in the event of a prolonged consensus failure
 that induces all clients to enter into the bootstrap process. In this
 case, the number of initial TLS connections to the fallback dir mirrors
 would be 2*C/100, or 10,000 for C=500,000 users. If no connections
 complete before the five retries, this could reach as high as 50,000
 connection attempts, but this is extremely unlikely to happen in full
 aggregate.

 However, in the no-consensus scenario today, the directory authorities
 would already experience C/9 or 55,555 connection attempts. The
 5-retry scheme increases their total maximum load to about 275,000
 connection attempts, but again this is unlikely to be reached
 in aggregate. Additionally, with this scheme, even if the dirauths
 are taken down by this load, the dir mirrors should be able to survive
 it.

Implementation Notes: Code Modifications

 The implementation of the bootstrap process is unfortunately mixed 
 in with many types of directory activity.

 The process starts in update_consensus_networkstatus_downloads(),
 which initiates a single directory connection through
 directory_get_from_dirserver(). Depending on bootstrap state,
 a single directory server is selected and a connection is
 eventually made through directory_initiate_command_rend().

 There appear to be a few options for altering this code to perform
 multiple connections. Without refactoring, one approach would be
 to make multiple calls to directory_initiate_command_routerstatus()
 from directory_get_from_dirserver() if the purpose is
 DIR_PURPOSE_FETCH_CONSENSUS and the only directory servers available
 are the authorities and the fallback dir mirrors.

 The code in directory_initiate_command_rend() would then need to be
 altered to maintain a list of the dircons created for this purpose as
 well as avoid immediately queuing the directory_send_command() request
 for the DIR_PURPOSE_FETCH_CONSENSUS purpose. A flag would need to be set
 on the dircon to be checked in connection_dir_finished_connecting().

 The function connection_dir_finished_connecting() would need to be
 altered to examine the list of pending dircons, determine if this one is
 the first to complete, and if so, then call directory_send_command() to
 download the consensus and close the other pending dircons.

 An additional timer would need to be installed to re-call
 update_consensus_networkstatus_downloads() or a related helper after 5
 seconds. connection_dir_finished_connecting() would cancel this timer.
 The helper would check the list of pending connections and ensure it
 never exceeds 15.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121011093844</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-11 09:38:44-0400</timestampReceived><subject>[tor-dev] Proposal: Internal Mapaddress for Tor Configuration Testing</subject><body>

[Attachment #2 (multipart/signed)]


Also at:
https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/mapaddress-check:/proposals/xxx-mapaddress-tor-status.txt


---------------------------------------------------------------

Title: Internal Mapaddress for Tor Configuration Testing
Author: Mike Perry
Created: 08-10-2012
Status: Open
Target: 0.2.4.x+


Overview

 This proposal describes a method by which we can replace the
 https://check.torproject.org/ testing service with an internal XML
 document provided by the Tor client.

Motivation

 The Tor Check service is a central point of failure in terms of Tor
 usability. If it is ever out of sync with the set of exit nodes on the
 Tor network or down, user experience is degraded considerably. Moreover,
 the check itself is very time-consuming. Users must wait seconds or more
 for the result to come back. Worse still, if the user's software *was*
 in fact misconfigured, the check.torproject.org DNS resolution and
 request leaks out on to the network.

Design Overview

 The system will have three parts: an internal hard-coded IP address
 mapping (127.84.111.114:80), a hard-coded mapaddress to a DNS name
 (selftest.torproject.org:80), and a DirPortFrontPage-style simple
 HTTP server that serves an XML document for both addresses.

 Upon receipt of a request to the IP address mapping, the system will 
 create a new 128 bit randomly generated nonce and provide it
 in the XML document.
 
 Requests to http://selftest.torproject.org/ must include a valid,
 recent nonce as the GET url path. Upon receipt of a valid nonce,
 it is removed from the list of valid nonces. Nonces are only valid
 for 60 seconds or until SIGNAL NEWNYM, which ever comes first.

 The list of pending nonces should not be allowed to grow beyond 10
 entries. 

 The timeout period and nonce limit should be configurable in torrc.

Design: XML document format for http://127.84.111.114

 To avoid the need to localize the message in Tor, Tor will only provide
 a XML object with connectivity information. Here is an example form:

 &lt;tor-test&gt;
  &lt;tor-bootstrap-percent&gt;100&lt;/tor-bootstrap-percent&gt;
  &lt;tor-version-current&gt;true&lt;/tor-version-current&gt;
  &lt;dns-nonce&gt;4977eb4842c7c59fa5b830ac4da896d9&lt;/dns-nonce&gt;
 &lt;tor-test/&gt;

 The tor-bootstrap-percent field represents the results of the Tor client
 bootstrap status as integer percentages from bootstrap_status_t.

 The tor-version-current field represents the results of the Tor client
 consensus version check. If the bootstrap process has not yet
 downloaded a consensus document, this field will have the value
 null.

 The dns-nonce field contains a 128-bit secret, encoded in base16. This
 field is only present for requests that list the Host: header as
 127.84.111.114.

Design: XML document format for http://selftest.torproject.org/nonce

 &lt;tor-test&gt;
  &lt;tor-bootstrap-percent&gt;100&lt;/tor-bootstrap-percent&gt;
  &lt;tor-version-current&gt;true&lt;/tor-version-current&gt;
  &lt;dns-nonce-valid&gt;true&lt;/dns-nonce-valid&gt;
 &lt;tor-test/&gt;

 The first two fields are the same as for the IP address version.

 The dns-nonce-valid field is only true if the Host header matches
 selftest.torproject.org and the nonce is current and valid. Upon
 receipt of a valid nonce, that nonce is removed from the list of
 valid nonces.

Design: Request Servicing

 Care must be taken with the dns-nonce generation and usage, to prevent
 users from being tracked through leakage of nonce value to application
 content. While the usage of XML appears to make this impossible
 due to stricter same-origin policy enforcement than JSON, same-origin
 enforcement is still fraught with exceptions and loopholes.

 In particular: 

 Any requests that contain the Origin: header MUST be ignored,
 as the Origin: header is only included for third party web content
 (CORS).

 dns-nonce fields MUST be omitted if the HTTP Host: header does not
 match the IP address 127.84.111.114.

 Requests to selftest.torproject.org MUST return false for the
 dns-nonce-valid field if the HTTP Host: header does not match
 selftest.torproject.org, regardless of nonce value.

 Further, requests to selftest.torproject.org MUST validate that
 'selftest.torproject.org' was the actual hostname provided to
 SOCKS4A, and not some alternate address mapping (due to DNS rebinding
 attacks, for example).

Design: Application Usage

 Applications will use the system in two steps. First, they will make an
 HTTP request to http://127.84.111.114:80/ over Tor's SOCKS port and
 parse the resulting XML, if any.

 If the request at this stage fails, the application should inform the
 user that either their Tor client is too old, or that it is
 misconfigured, depending upon the nature of the failure.

 If the request succeeds and valid XML is returned, the application
 will record the value of the dns-nonce field, and then perform a second
 request to http://selftest.torproject.org/nonce_value. If the second
 request succeeds, and the dns-nonce-valid field is true, the application
 may inform the user that their Tor settings are valid.

 If the second request fails, or does not provide the correct dns-nonce,
 the application will inform the user that their Tor DNS proxy settings
 are incorrect.
 
 If either tor-bootstrap-percent is not 100, or tor-version-current is
 false, applications may choose to inform the user of these facts using
 properly localized strings and appropriate UI.

Security Considerations

 XML was chosen over JSON due to the risks of the identifier leaking
 in a way that could enable websites to track the user[1].

 Because there are many exceptions and circumvention techniques
 to the same-origin policy, we have also opted for strict controls
 on dns-nonce lifetimes and usage, as well as validation of the Host
 header and SOCKS4A request hostnames.


1. http://www.hpenterprisesecurity.com/vulncat/en/vulncat/dotnet/javascript_hijacking_vulnerable_framework.html



-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121014090300</emailId><senderName>Christian Grothoff</senderName><senderEmail>christian@grothoff.org</senderEmail><timestampReceived>2012-10-14 09:03:00-0400</timestampReceived><subject>[tor-dev] [patch] fix cparser/firm compiler warnings</subject><body>

Hi!

We're trying to compile Tor with cparser and got some warnings and an
error.

src/or/dirserv.c:803:1: error: declaration 'was_router_added_t
dirserv_add_extrainfo(extrainfo_t*, const char**)' is incompatible with
'int dirserv_add_extrainfo(extrainfo_t*, const char**)' (declared at
line 96:12)
src/or/dirserv.c:81:14: warning: unnecessary static forward declaration
for 'char* format_versions_list(config_line_t*)' [-Wredundant-decls]
src/or/dirserv.c:2186:8: warning: statement is empty [-Wempty-statement]
src/or/dirserv.c:2210:8: warning: statement is empty [-Wempty-statement]
src/or/dirserv.c:2752:51: warning: statement is empty
[-Wempty-statement]
src/or/dirserv.c:3009:51: warning: statement is empty
[-Wempty-statement]
src/or/dirserv.c:3280:112: warning: statement is empty
[-Wempty-statement]
src/or/dirserv.c:3483:54: warning: statement is empty
[-Wempty-statement]
src/or/dirserv.c:3603:129: warning: statement is empty
[-Wempty-statement]
1 error(s), 47 warning(s)

The attached patch fixes those the warnings that are unambiguously due
to inconsistent style ("if (cond) {body};" -- removing extra semicolon)
and fixes the warning due to inconsistently declared a return type (once
declared as 'enum', once as 'int').

Is there a better place for sending patches that do not really require
broad discussion?


Happy hacking!

Christian

["fix-compiler-warnings.diff" (text/x-diff)]

diff --git a/src/or/dirserv.c b/src/or/dirserv.c
index ec4ecfa..3851043 100644
--- a/src/or/dirserv.c
+++ b/src/or/dirserv.c
@@ -93,7 +93,7 @@ static const signed_descriptor_t *get_signed_descriptor_by_fp(
                                                         const char *fp,
                                                         int extrainfo,
                                                         time_t publish_cutoff);
-static int dirserv_add_extrainfo(extrainfo_t *ei, const char **msg);
+static was_router_added_t dirserv_add_extrainfo(extrainfo_t *ei, const char **msg);
 
 /************** Measured Bandwidth parsing code ******/
 #define MAX_MEASUREMENT_AGE (3*24*60*60) /* 3 days */
@@ -2183,7 +2183,7 @@ routerstatus_format_entry(char *buf, size_t buf_len,
             "(wanted descriptor %s).",
             id, dd);
         return -1;
-      };
+      }
 
       /* This assert can fire for the control port, because
        * it can request NS documents before all descriptors
@@ -2207,7 +2207,7 @@ routerstatus_format_entry(char *buf, size_t buf_len,
         tor_assert(tor_memeq(desc-&gt;cache_info.signed_descriptor_digest,
               rs-&gt;descriptor_digest,
               DIGEST_LEN));
-      };
+      }
     }
 
     if (format == NS_CONTROL_PORT &amp;&amp; rs-&gt;has_bandwidth) {


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121011034651</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-10-11 03:46:51-0400</timestampReceived><subject>[tor-dev] Proposal 207: Directory guards</subject><body>

Filename: 207-directory-guards.txt
Title: Directory guards
Author: Nick Mathewson
Created: 10-Oct-2012
Status: Open
Target: 0.2.4.x


Motivation:

   When we added guard nodes to resist profiling attacks, we made it so
   that clients won't build general-purpose circuits through just any
   node.  But clients don't use their guard nodes when downloading
   general-purpose directory information from the Tor network.  This
   allows a directory cache, over time, to learn a large number of IPs
   for non-bridge-using users of the Tor network.

Proposal:

   In the same way as they currently pick guard nodes as needed, adding more
   guards as those nodes are down, clients should also pick a small-ish set
   of directory guard nodes, to persist in Tor's state file.

   Clients should not pick their own guards as directory guards, or pick
   their directory guards as regular guards.

   When downloading a regular directory object (that is, not a hidden
   service descriptor), clients should prefer their directory guards
   first.  Then they should try more directories from a recent consensus
   (if they have one) and pick one of those as a new guard if the
   existing guards are down and a new one is up.  Failing that, they
   should fall back to a directory authority (or a directory source, if
   those get implemented-- see proposal 206).

   If a client has only one directory guard running, they should add new
   guards and try them, and then use their directory guards to fetch multiple
   descriptors in parallel.

Discussion:

   The rule that the set of guards and the set of directory guards need to
   be disjoint, and the rule that multiple directory guards need to be
   providing descriptors, are both attempts to make it harder for a
   single node to capture a route.

Open questions and notes:

   What properties does a node need to be a suitable directory guard?
   If we require that it have the Guard flag, we'll lose some nodes:
   only 74% of the directory caches have it (weighted by bandwidth).

   We may want to tune the algorithm used to update guards.

   For future-proofing, we may want to have the DirCache flag from 185
   be the one that nodes must have in order to be directory guards.  For
   now, we could have authorities set it to Guard &amp;&amp; DirPort!=0, with a
   better algorithm to follow.  Authorities should never get the
   DirCache flag.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121015203543</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 20:35:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal 210: Faster Headless Consensus Bootstrapping</subject><body>

On Thu, Oct 11, 2012 at 5:32 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/consensus-bootstrap:/proposals/xxx-faster-headless-consensus-bootstrap.txt
&gt;  
&gt; -------------------------------------------------------------------------
&gt; 
&gt; Title: Faster Headless Consensus Bootstrapping
&gt; Author: Mike Perry
&gt; Created: 01-10-2012
&gt; Status: Open
&gt; Target: 0.2.4.x+
&gt; 
&gt; 
&gt; Overview and Motiviation
&gt; 
&gt; This proposal describes a way for clients to fetch the initial
&gt; consensus more quickly in situations where some or all of the directory
&gt; authorities are unreachable. This proposal is meant to describe a
&gt; solution for bug #4483.
&gt; 
&gt; Design: Bootstrap Process Changes
&gt; 
&gt; The core idea is to attempt to establish bootstrap connections in
&gt; parallel during the bootstrap process, and download the consensus from
&gt; the first connection that completes.
&gt; 
&gt; Connection attempts will be done in batches of three. Only one
&gt; connection will be performed to one of the canonical directory
&gt; authorities. Two connections will be performed to randomly chosen hard
&gt; coded directory mirrors.

I misread this paragraph at first.  I thought you were suggesting 3
parallel directory downloads when in fact you were discussing 3
parallel TLS connections, with only the first one that finishes
actually getting a download.

[...]
&gt; Design: Fallback Dir Mirror Selection

Out of scope for this proposal; relevant for proposal 206.

&gt; Performance: Additional Load with Current Parameter Choices
&gt; 
&gt; This design and the connection count parameters were chosen such that
&gt; no additional bandwidth load would be placed on the directory
&gt; authorities. In fact, the directory authorities should experience less
&gt; load, because they will not need to serve the consensus document for a
&gt; connection in the event that one of the directory mirrors complete their
&gt; connection before the directory authority does.

To be clear, it's the part of this proposal that's shared with
proposal 206 (directory sources) that would lower load on the
authorities.

&gt; However, the scheme does place additional TLS connection load on the
&gt; fallback dir mirrors. Because bootstrapping is rare and all but one of
&gt; the TLS connections will be very short-lived and unused, this should not
&gt; be a substantial issue.

How do we know that bootstrapping is rare?

&gt; The dangerous case is in the event of a prolonged consensus failure
&gt; that induces all clients to enter into the bootstrap process. In this
&gt; case, the number of initial TLS connections to the fallback dir mirrors
&gt; would be 2*C/100, or 10,000 for C=500,000 users. If no connections
&gt; complete before the five retries, this could reach as high as 50,000
&gt; connection attempts, but this is extremely unlikely to happen in full
&gt; aggregate.
&gt; 
&gt; However, in the no-consensus scenario today, the directory authorities
&gt; would already experience C/9 or 55,555 connection attempts. The
&gt; 5-retry scheme increases their total maximum load to about 275,000
&gt; connection attempts, but again this is unlikely to be reached
&gt; in aggregate. Additionally, with this scheme, even if the dirauths
&gt; are taken down by this load, the dir mirrors should be able to survive
&gt; it.

This looks like an argument of the form "The outcome would be
horrible, but the current outcome is also horrible, so we wouldn't
break stuff any worse."  Right?

I wonder if in this case the answer isn't to actually back off from
fetching after N minutes or M servers, like a sane system.  Or to
treat "hey, that's not a good consensus!" as different from "couldn't
connect to directory server" in terms of what it means for how we back
off.


-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121015195701</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 19:57:01-0400</timestampReceived><subject>Re: [tor-dev] Proposal 211: Internal Mapaddress for Tor Configuration Testing</subject><body>

On Thu, Oct 11, 2012 at 5:38 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/mapaddress-check:/proposals/xxx-mapaddress-tor-status.txt
&gt;  
&gt; ---------------------------------------------------------------
&gt; 
&gt; Title: Internal Mapaddress for Tor Configuration Testing
&gt; Author: Mike Perry
&gt; Created: 08-10-2012
&gt; Status: Open
&gt; Target: 0.2.4.x+
&gt; 
&gt; 
&gt; Overview
&gt; 
&gt; This proposal describes a method by which we can replace the
&gt; https://check.torproject.org/ testing service with an internal XML
&gt; document provided by the Tor client.
&gt; 
&gt; Motivation
&gt; 
&gt; The Tor Check service is a central point of failure in terms of Tor
&gt; usability. If it is ever out of sync with the set of exit nodes on the
&gt; Tor network or down, user experience is degraded considerably. Moreover,
&gt; the check itself is very time-consuming. Users must wait seconds or more
&gt; for the result to come back. Worse still, if the user's software *was*
&gt; in fact misconfigured, the check.torproject.org DNS resolution and
&gt; request leaks out on to the network.
&gt; 
&gt; Design Overview
&gt; 
&gt; The system will have three parts: an internal hard-coded IP address
&gt; mapping (127.84.111.114:80), a hard-coded mapaddress to a DNS name
&gt; (selftest.torproject.org:80), and a DirPortFrontPage-style simple
&gt; HTTP server that serves an XML document for both addresses.

The use of XML and HTTP here are both reasons for some unhappiness.
Both of them pull in a fair amount of complexity that I'd prefer not
to need.  (Yes, Tor already has a sort of an HTTP implementation, but
at least clients aren't currently required to run what amounts to a
local HTTP server.)

I seriously wonder whether the benefits of HTTP (easier to access from
within a locked-down web browser environment) aren't actually the
_defects_ of HTTP here: it's easier to poke it from a web page.

I understand that your design takes some steps to prevent
browser-based attacks on this, but I'm not currently sure how to
become sure that that it solves them all.  Right now, I'm nervous.

&gt; Upon receipt of a request to the IP address mapping, the system will
&gt; create a new 128 bit randomly generated nonce and provide it
&gt; in the XML document.
&gt; 
&gt; Requests to http://selftest.torproject.org/ must include a valid,
&gt; recent nonce as the GET url path. Upon receipt of a valid nonce,
&gt; it is removed from the list of valid nonces. Nonces are only valid
&gt; for 60 seconds or until SIGNAL NEWNYM, which ever comes first.

So, I'm not totally sure what the nonce field is for.  The idea as I
understand it is that when you connect to the IPv4 address, you get a
nonce, and later when you connect to the hostname, you provide that
nonce, and Tor tells you "yes" if you gave it the same nonce.

What does that protect against?  My first thought is that you're
trying to prevent the case where a malicious local DNS server maps
"selftest.torproject.org" to some IP address in their control, and
then just runs a server at that IP address to say "yes I'm Tor".  But
that doesn't make sense, since you could just make one of those that
said "yes I'm Tor" no matter what you say for the nonce.

Also, how useful is the followup DNS check?  If it's checking that DNS
leaks aren't happening... You're going to need torbrowser or something
of equivalent complexity for this to work at all; isn't it easier then
for torbrowser to make sure that it  set up SOCKS ?

&gt; The list of pending nonces should not be allowed to grow beyond 10
&gt; entries.

This means that any webpage could flush out the list of pending
nonces.  Does that matter?

&gt; The timeout period and nonce limit should be configurable in torrc.
&gt; 
&gt; Design: XML document format for http://127.84.111.114
&gt; 
[...]
&gt; Security Considerations
&gt; 
&gt; XML was chosen over JSON due to the risks of the identifier leaking
&gt; in a way that could enable websites to track the user[1].

Well, that's a nuclear-powered-flyswatter!

If I read that page right, the problem with using JSON is that it can
be parsed and executed as Javascript, and the advantage of XML is that
it's unlikely to be syntactically correct javascript, then maybe
instead we should

If that's the issue, I'd strongly suggest that instead of going with a
more complex data format, we could add a layer of encoding over the
json, or use an even simpler format.

&gt; Because there are many exceptions and circumvention techniques
&gt; to the same-origin policy, we have also opted for strict controls
&gt; on dns-nonce lifetimes and usage, as well as validation of the Host
&gt; header and SOCKS4A request hostnames.

Of course, this all comes down to the fact that we're using http.  Can
we spell out why we need HTTP for this?

&gt; 1. http://www.hpenterprisesecurity.com/vulncat/en/vulncat/dotnet/javascript_hijacking_vulnerable_framework.html
&gt;  

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121011092057</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-11 09:20:57-0400</timestampReceived><subject>[tor-dev] Proposal: Tuning the Parameters for the Path Bias Defense</subject><body>

[Attachment #2 (multipart/signed)]


Also exists at
https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/xxx-path-bias-tuning.txt


--------------------------------------------------------------------

Title: Tuning the Parameters for the Path Bias Defense
Author: Mike Perry
Created: 01-10-2012
Status: Open
Target: 0.2.4.x+


Overview

 This proposal describes how we can use the results of simulations in
 combination with network scans to set reasonable limits for the Path
 Bias defense, which causes clients to be informed about and ideally
 rotate away from Guards that provide extremely low circuit success
 rates.

Motivation

 The Path Bias defense is designed to defend against a type of route capture
 where malicious Guard nodes deliberately fail circuits that extend to
 non-colluding Exit nodes to maximize their network utilization in favor of
 carrying only compromised traffic.

 This attack was explored in the academic literature in [1], and a
 variant involving cryptographic tagging was posted to tor-dev[2] in
 March.

 In the extreme, the attack allows an adversary that carries c/n
 of the network capacity to deanonymize c/n of the network
 connections, breaking the O((c/n)^2) property of Tor's original
 threat model.

Design Description

 The Path Bias defense is a client-side accounting mechanism in Tor that
 tracks the circuit failure rate for each of the client's guards.

 Clients maintain two integers for each of their guards: a count of the
 number of times a circuit was extended at least one hop through that
 guard, and a count of the number of circuits that successfully complete
 through that guard. The ratio of these two numbers is used to determine
 a circuit success rate for that Guard.

 The system should issue a notice log message when Guard success rate
 falls below 70%, a warn when Guard success rate falls below 50%, and
 should drop the Guard when the success rate falls below 30%.

 To ensure correctness, checks are performed to ensure that
 we do not count successes without also counting the first hop.

 Similarly, to provide a moving average of recent Guard activity while
 still preserving the ability to ensure correctness, we "scale" the
 success counts by an integer divisor (currently 2) when the counts
 exceed the moving average window (300) and when the division
 does not produce integer truncation.

 No log messages should be displayed, nor should any Guard be
 dropped until it has completed at least 150 first hops (inclusive).

Analysis: Simulation

 To test the defense in the face of various types of malicious and
 non-malicious Guard behavior, I wrote a simulation program in
 Python[3].

 The simulation confirmed that without any defense, an adversary
 that provides c/n of the network capacity is able to observe c/n
 of the network flows using circuit failure attacks.

 It also showed that with the defense, an adversary that wishes to
 evade detection has compromise rates bounded by:

   P(compromise) &lt;= (c/n)^2 * (100/CUTOFF_PERCENT)
   circs_per_client &lt;= circuit_attempts*(c/n)

 In this way, the defense restores the O((c/n)^2) compromise property,
 but unfortunately only over long periods of time (see Security
 Considerations below).

 The spread between the cutoff values and the normal rate of circuit
 success has a substantial effect on false positives. From the
 simulation's results, the sweet spot for the size of this spread appears
 to be 10%. In other words, we want to set the cutoffs such that they are
 10% below the success rate we expect to see in normal usage.

 The simulation also demonstrates that larger "scaling window" sizes
 reduce false positives for instances where non-malicious guards
 experience some ambient rate of circuit failure.

Analysis: Live Scan

 Preliminary Guard node scanning using the txtorcon circuit scanner[4]
 shows normal circuit completion rates between 80-90% for most Guard
 nodes.
 
 However, it also showed that CPU overload conditions can easily push
 success rates as low as 45%. Even more concerning is that for a brief
 period during the live scan, success rates dropped to 50-60%
 network-wide (regardless of Guard node choice).

 Based on these results, the notice condition should be 70%, the warn 
 condition should be 50%, and the drop condition should be 30%.

Future Analysis: Deployed Clients

 It's my belief that further analysis should be done by deploying 
 loglines for all three thresholds in clients in the live network
 to utilize user reports on how often high rates of circuit failure
 are seen before we deploy changes to rotate away from failing Guards.

 I believe these log lines should be deployed in 0.2.3.x clients,
 to maximize the exposure of the code to varying network conditions,
 so that we have enough data to consider deploying the Guard-dropping
 cutoff in 0.2.4.x.

Security Considerations

 While the scaling window does provide freshness and can help mitigate
 "bait-and-switch" attacks, it also creates the possibility of conditions
 where clients can be forced off their Guards due to temporary
 network-wide CPU DoS. This provides another reason beyond false positive
 concerns to set the scaling window as large as is reasonable.

 A DoS directed at specific Guard nodes is unlikely to allow an
 adversary to cause clients to rotate away from that Guard, because it
 is unlikely that the DoS can be precise enough to allow first hops to
 that Guard to succeed, but also cause extends to fail. This leaves
 network-wide DoS as the primary vector for influencing clients.

 Simulation results show that in order to cause clients to rotate away
 from a Guard node that previously succeeded 80% of its circuits, an
 adversary would need to induce a 25% success rate for around 350 circuit
 attempts before the client would reject it, or a 5% success rate
 for around 215 attempts, both using a scaling window of 300 circuits.
 
 Assuming one circuit per Guard per 10 minutes of active client
 activity, this is a sustained network-wide DoS attack of 60 hours
 for the 25% case, or 38 hours for the 5% case.

 Presumably this is enough time for the directory authorities to respond by
 altering the pb_disablepct consensus parameter before clients rotate,
 especially given that most clients are not active for even 38 hours on end,
 and will tend to stop building circuits while idle.

 If we raised the scaling window to 500 circuits, it would require 1050
 circuits if the DoS brought circuit success down to 25% (175 hours), and
 415 circuits if the DoS brought the circuit success down to 5% (69 hours).

 The tradeoff, though, is that larger scaling window values allow Guard nodes
 to compromise clients for duty cycles of around the size of this window (up to
 the (c/n)^2 * 100/CUTOFF_PERCENT limit in aggregate), so we do have to find
 balance between these concerns.

Implementation Notes: Log Messages

 Log messages need to be chosen with care to avoid alarming users.
 I suggest:

 Notice: "Your Guard %s is failing more circuits than usual. Most likely
 this means the Tor network is overloaded. Success counts are %d/%d."

 Warn: "Your Guard %s is failing a very large amount of circuits. Most likely
 this means the Tor network is overloaded, but it could also mean an attack
 against you or potentially the Guard itself. Success counts are %d/%d."

 Drop: "Your Guard %s is failing an extremely large amount of circuits. [Tor
 has disabled use of this Guard.] Success counts are %d/%d."

 The second piece of the Drop message would not be present in 0.2.3.x,
 since the Guard won't actually be dropped.

Implementation Notes: Consensus Parameters

 The following consensus parameters reflect the constants listed
 in the proposal. These parameters should also be available 
 for override in torrc.

 pb_mincircs=150
   The minimum number of first hops before we log or drop Guards.

 pb_noticepct=70
   The threshold of circuit success below which we display a notice.

 pb_warnpct=50
   The threshold of circuit success below which we display a warn.

 pb_disablepct=30
   The threshold of circuit success below which we disable the guard.

 pb_scalecircs=300
   The number of first hops at which we scale the counts down.

 pb_scalefactor=2
   The integer divisor by which we scale.



1. http://freehaven.net/anonbib/cache/ccs07-doa.pdf
2. https://lists.torproject.org/pipermail/tor-dev/2012-March/003347.html
3. https://gitweb.torproject.org/torflow.git/tree/HEAD:/CircuitAnalysis/PathBias
4. https://github.com/meejah/txtorcon/blob/exit_scanner/apps/exit_scanner/failure-rate-scanner.py



-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121016224111</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-16 22:41:11-0400</timestampReceived><subject>[tor-dev] Proposal: Increase Acceptable Consensus Age</subject><body>

[Attachment #2 (multipart/signed)]


Also available at:
https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/tolerate-old-consensus:/proposals/xxx-using-old-consensus.txt


----------------------------------

Title: Increase Acceptable Consensus Age
Author: Mike Perry
Created: 01-10-2012
Status: Open
Target: 0.2.4.x+

Overview

  This proposal aims to extend the duration that clients will accept
  old consensus material under conditions where the directory authorities
  are either down or fail to produce a valid consensus for an extended
  period of time.

Motivation

  Currently, if the directory authorities are down or fail to consense
  for 24 hours, the entire Tor network will cease to function. Worse,
  clients will enter into a state where they all need to re-bootstrap
  directly from the directory authorities, which will likely exacerbate
  any potential DoS condition that may have triggered the downtime in the
  first place.

  The Tor network has had such close calls before. In the past, we've
  been able to mobilize a majority of the directory authority operators
  within this 24 hour window, but that is only because we've been
  exceedingly lucky and the DoS conditions were accidental rather than
  deliberate.

  If a DoS attack was deliberately timed to coincide with a major US
  and European combined holiday such as Christmas Eve, New Years Eve, or
  Easter, it is very unlikely we would be able to muster the resources to
  diagnose and deploy a fix to the authorities in time to prevent network
  collapse.

Description

  Based on the need to survive multi-day holidays and long weekends
  balanced with the need to ensure clients can't be captured on an old
  consensus forever, I propose that the consensus liveness constants be
  set at 3 days rather than 24 hours.

  This requires updating two consensus defines in the source, and one
  descriptor freshness variable. The descriptor freshness should be
  set to a function of the consensus freshness.

  See Implementation Notes for further details.

Security Concerns: Using an Old Consensus

  Clients should not trust old consensus data without an attempt to
  download fresher data from a directory mirror.

  As far as I could tell, the code already does this. The minimum
  consensus age before we try to download new data is two hours.

  However, the ability to accept old consensus documents does introduce
  the ability of malicious directory mirrors to feed their favorite old
  consensus document to clients to alter their paths until they
  download a fresher consensus from elsewhere. Directory guards
  (Proposal 207) may exacerbate this ability.

  This proposal does not address such attacks, and seeks only a modest
  increase in the valid timespan as a compromise.

  Future consideration of these and other targeted-consensus attacks
  will be left to proposals related to ticket #7126[1]. Once those
  proposals are complete and implemented, raising the freshness limit
  beyond 3 days should be possible.

Implementation Notes

  There appear to be at least three constants in the code involved with
  using potentially expired consensus data. Two of them
  (REASONABLY_LIVE_TIME and NS_EXPIRY_SLOP) involve the consensus itself,
  and two (OLD_ROUTER_DESC_MAX_AGE and TOLERATE_MICRODESC_AGE) deal with
  descriptor liveness.

  Two additional constants ROUTER_MAX_AGE and ROUTER_MAX_AGE_TO_PUBLISH
  are only used when submitting descriptors for consensus voting.

  FORCE_REGENERATE_DESCRIPTOR_INTERVAL is the maximum age a router
  descriptor will get before a relay will re-publish. It is set to 18
  hours.

  OLD_ROUTER_DESC_MAX_AGE is set at 5 days. TOLERATE_MICRODESC_AGE
  is set at 7 days.

  The consensus timestamps are used in
  networkstatus_get_reasonably_live_consensus() and 
  networkstatus_set_current_consensus().

  OLD_ROUTER_DESC_MAX_AGE is checked in routerlist_remove_old_routers(), 
  router_add_to_routerlist(), and client_would_use_router().

  It is my opinion that we should combine REASONABLY_LIVE_TIME and
  NS_EXPIRY_SLOP into a single define, and make OLD_ROUTER_DESC_MAX_AGE a
  function of REASONABLY_LIVE_TIME and FORCE_REGENERATE_DESCRIPTOR_INTERVAL:

  #define REASONABLY_LIVE_TIME           (3*24*60*60)
  #define NS_EXPIRY_SLOP                 REASONABLY_LIVE_TIME
  #define OLD_ROUTER_DESC_MAX_AGE        \
          (REASONABLY_LIVE_TIME+FORCE_REGENERATE_DESCRIPTOR_INTERVAL)

  Based on my review of the above code paths, these changes should be all
  we need to enable clients to use older consensuses for longer while
  still attempting to fetch new ones.

1. https://trac.torproject.org/projects/tor/ticket/7126


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121009042838</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-10-09 04:28:38-0400</timestampReceived><subject>[tor-dev] Even more notes on relay-crypto constructions</subject><body>

I should share with the list an update of where I am with a design for
an improved relay crypto protocol.  For background and motivation,
please see the last thread on the topic [Prop202].

There are three main questions remaining for me in choosing among new
relay crypto protocols.  Basically, they are: "Am I comfortable with
this system?", "Among systems I'm comfortable with, how good is this
system?", and "Do I know how to implement this system?"

Unfortunately, the stuff I am currently comfortable with and know that
I could implement is not nearly as good as the stuff that I'm _nearly_
comfortable enough to use and I don't know how to implement.

Let's talk about some designs in detail, using the same terminology as
proposal 202.

Note:

   As usual, this is probably largely wrong.  If you find it on a
   mailing list archive years from now, please don't try to learn
   cryptography from it.

   What I'm looking for most right now is places where my reasoning is
   wrong, places where I'm mistaken about what tradeoffs I need need
   to make, and places where there's research that I should have read
   or remembered.

I. MAC-AND-PAD DESIGNS

These are the least involved to implement: all you need is an AEAD
construction and a PRNG.  Those are both pretty well-understood: you
can build a good PRNG out of any stream cipher, and you can build the
AEAD mode out of a stream cipher and a MAC, or out of various other
constructions.

As a wrinkle: it would be good to have a system that generates "two
MACs for the price of one."  That's because in our topology, we need
the ability to address relay cells to any node in the circuit, and one
easy way to do that here is to have a construction that generates two
MACs, and uses one for "cells that should arrive here" and another for
"cells that we should relay".  We also want shorter MACs: 16 bytes per
hop is excessive for our needs.

Authenticators like GCM whose output is the raw result of a polynomial
evaluation aren't safe to truncate: Ferguson [Ferguson] has a result
showing that it's easier than it should be to perform forgery against
truncated-MAC GCM constructions.

On the other hand, polynomial authenticators seem safe to truncate
(generally) if the encryption step comes _after_ the polynomial
evaluation.  See for example [Poly1305-Trunc]'s discussion of truncated
Poly1305 -- I hope it's right.



So to be concrete, let me suggest a few modes of operation.  I believe
I'm competent to implement these:

  AES-GCM+AES: AES-GCM, except that we add (modulo 2^128) the output
  of AES(nonce) to each GCM output, in hopes that it will make GCM
  safe to truncate.  (This is probably crazy somehow.)

  AES-CTR + HMAC-SHA512/256.

  AES-CTR + Poly1305.  Poly1305 requires nonces, but we can use a
  counter for those.

  Salsa20 + Poly1305.

For a padding PRNG, we could use any stream cipher we like.

In each case, we'd want to authenticate not only the content of the
cell, but also the previous cell's authenticator and the position of
the cell within the stream.

AES-GCM+AES is going to be the fastest on CPUs with specific support
for AES and GCM, but not on other architectures until/unless more
chips grow instructions specialized for AES and GF(2^128).
Salsa20+Poly1305 should be fastest on other architectures.



This entire category of designs still has the problems that it had
before: it leaks the length of the circuit to the last node in the
circuit, and consumes a fairly large portion of each cell (for one
truncated mac per hop).  Further, it's going to be a bit fiddly
(though not impossible) to get it to work with rendezvous circuits.



II. WIDE-BLOCK DESIGNS

Turn we now to designs where we encrypt each block of the cipher using
a 509-byte SPRP, such that each block's SPRP is keyed dependently on
the original key and on the encrypted value of the previous block.

There be dragons here.  Let's talk about some ways we could build
that.  I'll start by talking about wide-block encryption, then talk
about getting the "unrecoverability" property where any missing or
corrupted block makes all future blocks unrecoverable.


The wide-block SPRP I've used before is LIONESS [Bear-Lion].  It
requires two keyed hash operations and two stream cipher operations,
so it's going to be at best half the speed of the mac-and-pad designs
above: a little worse, maybe, since it forces us to rekey with every
block.

Might that be acceptable?  Right now, AES is not a huge fraction of
our runtime, and a relay does AES on each cell three times (TLS,relay
crypto,TLS) and SHA1 on each cell twice (TLS,TLS).  An exit does AES
on each cell twice (TLS,relay) and SHA1 on each cell twice
(TLS,relay). So for relays, with a naive SHA1-AES LIONESS, we'd be
increasing the stream-cipher operations by 25% and the digests by
100%.  On an exit, we'd be increasing the stream-cipher operations by
33% and the digests by 100%.

If we were to go with LIONESS, we'd surely want to look into faster,
better keyed-hash algorithms than SHA1.   I don't know whether one of
the polynomial MACs above would be good enough, or whether we need
other cryptographic digest properties that those don't give us and
we'd need to turn to SHA256 or something.



I've heard some suggestions that we should look into BEAR or LION
instead, but I'm leery of the idea.  They are faster, requiring one
fewer application of their primitives, but they are PRPs, not SPRPs --
meaning I think that they don't give you Ind-CCA2 [Bear-Lion, section
6].  I don't know a way to exploit this in the Tor network, but
deviating from an ideal block cipher seems to me like one of those
ideas that's practically begging for disaster.



Can we get faster than LIONESS?  Indeed we can!  There are a pile of
constructions.  If I understand correctly, and I'm not missing
anything, the ones we might want to use fall into two broad
categories: those that (like LIONESS) split the message into a short
bit and a long bit, then treat them differently; and those that apply
a transformation on the message, encrypt the message, and transform it
again.

The first category (split, then frob each part based on the other once
or twice) would appear to be more of a patent minefield, thanks to the
XCB patent.  The ones to look at here are [HCTR] and [HCH], which
require two applications of a universal hash function (can be
polynomial-based) and approximately one encryption pass.  HCH is a
little more unlike XCB.  Neither is exactly trivial.  We could build
either one out of whatever field and stream cipher we wanted, as
above, though bitsliced AES-CTR wouldn't be efficient in this case: we
aren't generating enough stream at once for bitslicing to pay off.

The second category (frob, encrypt, frob) is pretty elegant IMO. The
best-explained of these I've seen so far are in a
paper by Palash Sarkar [Efficient-Tweakable], though the earlier TET
construction [TET] might also be cool.  For these, you need an
invertible block-wise (Almost) (Xor-)Universal hash function,
typically implemented with GF(2^128).  I'm not sure if you could use a
different field.  The multiplication operations here appear to be
multiplication by a primitive element, and multiplication by a per-key
element.  The encryption step can be realized with a somewhat
unorthodox counter-mode stream cipher, or a ciphertext-stealing ECB
approach.  I don't know what you'd need to do to substitute in an
orthodox stream cipher for the one used in iHCH.  Sarkar seems to see
iHCH as a successor to HCH, which is a little worrisome given that HCH
is a spiritual descendant of the patented XCB, but to me the two
constructions (HCH, iHCH) look practically nothing alike except for
their use of a counter mode step.

I am a little intimidated by the idea of trying to implement one of
these ciphers.



Above, I haven't taken one of our requirements into account: that any
change to a single cell must make all future cells unrecoverable.

There are modes that are supposed to prevent this, and applying them
to a decent wide-block cipher might solve the issue. IGE is one of
them [IGE], but it turns out to be broken by an attacker who knows
some plaintext.  The Accumulated Block Chaining [ABC] construction is
supposed to fix that; I'm not too sure whether it's correct or
efficient.

As a blunt-force approach to the problem, we could rekey between each
block, using new keys based on a MAC of the last block.  This would be
pretty inefficient for primitives that need any serious amount of
per-key computation.

Finally, we could look into constructions that produce an extra secret
output incidental to their regular operation, and which are easily
rekeyed for each operation.



In this whole field, we need to keep an eye out for the patents on
CMC, EME, and XCB.  "Joy."



III. CHOICE OF CIPHERS AND OTHER PRIMITIVES

I am hearing exactly two recommendations for encryption primitives
nowadays: AES and Salsa20 (and its family).  Nobody's recommending
anything else as far as I can tell.

AES is still the IBM of the block cipher world, which "Nobody Ever Got
Fired For Using."  It's a bit of a pain to use it in software, though.
Its most obvious implementations have timing attacks due to table
lookups [DJB-Timing].  OpenSSL has three fast x86 implementations: one
of them uses vector permutations, one uses bit-slicing, and one uses
the aesni instructions to invoke the chip's built-in AES capabilities.
On high-end Intel chips, these take about 12-25, 7-9, and 1.5 cycles
per byte respectively.  The bitsliced one really needs to encrypt 4KiB
at a time (yes, kibibytes), which makes it fine for counter mode but
not so good for CBC.  (Those numbers are from the OpenSSL source.)
Key setup times are cheap for all of these (I think!), but the
bitsliced implementation gets expensive if you change the key (or
the stream position).


Salsa20 (and its descendant, ChaCha) is the Obvious Second Choice for
people who don't want to use AES.  It is faster than AES on every
platform except those with hardware support for AES; 4-7 cycles per
byte seems typical for high-end Intel stuff.  You would probably have
to go out of your way to implement it in a way that was vulnerable to
timing side-channel attacks.  The only arguments for its insecurity
that I'm aware of are that although it has fewer known flaws than AES,
it has received less attention than AES, therefore is likelier to
_unsuspected_ problems.  The counterargument there is that there _are_
several dozen cryptographers who have tried to attack it (or attack
reduced-round variants of it), several of whom have also done
successful results against AES. [DJB-Comm] Per-key setup time is
basically nonexistent.


There are a lot of constructions out there that want to do
multiplication in GF(2^128) as a basic operation.  That turns out to
be less than totally straightforward, though.  On newer intel chips,
you've got a "multiply without carry" instruction that can supposedly
let you get to around 2 cycles per byte.  On other platforms, you're
reduced to worse trickery to try to get good performance without
timing side-channels, for an amount of trickery dependent on what
operation you're trying to do exactly.

The easiest GF(2^128) operation to implement safely and quickly is
multiplication by a known compile-time value. (It's easy enough that
even I could do it.)  Next easiest is multiply a large number of
values by the same run-time-fixed value -- you do precomputation on
the value in order to generate some tables.  (The scary, fast variants
use big tables; the still-a-little-scary variants use 256-byte tables,
and get performance on high-end Intel boxes around 7-10 cycles per
byte when doing GCM.)  Full-on multiplication of two arbitrary
GF(2^128) values is slowest still.

As a further wrinkle with GF(2^128), OpenSSL doesn't seem to actually
expose its "multiply in GF(2^128)" functions as far as I can tell: we
would need to snarf such code from elsewhere.


Oh! ARMv8 has an optional crypto instruction set that supports AES,
SHA256, and GF(2^128) multiplication [ARMv8].  If it looks like most
of the ARMs we care about are going to get it, that could factor into
our planning.


IV. HOW MUCH DOES PERFORMANCE MATTER HERE ANYWAY?


A fine question.  The right place too look would IMO be at profiles
on a busy non-exit non-AESNI server, to see how much time is spent in
AES there.  Make sure you look at all the AES variants, since it's not
uncommon to see more than one used at once.

A ridiculously large amount of that time will be in bn_sqr4x_mont
and its unindicted co-conspirators , but expect this to get cut a great
deal when we move to ECC for TLS DHE and for circuit extension.

So if we're willing to make a lot of assumptions, then you can figure
out a worst-case performance impact like this.  Take the fraction of
the time spent in bn_and_friends and remove them from the profile.
(Assume that circuit creation dominates over TLS renegotiation because
hey why not.)  Then assume that the AES calls used for relay crypto's
counter mode turn into whatever new relay encryption thing we're
proposing.  See how much that change costs Tor's performance overall.




V. ACKNOWLEDGMENTS

Thanks to everybody who's schooled me about this stuff, especially
Daniel J. Bernstein, Ian Goldberg, and Robert Ransom.  Assume that the
good ideas are here due to their patience and that the bad ideas are
here due to my slowness on the uptake.  Thanks to Susan Born for a
much-needed copy-edit.  Assume that every correctly structured
sentence is one she fixed, and that the bad ones I messed up after her
editing.



VI. References


[Prop202] https://lists.torproject.org/pipermail/tor-dev/2012-June/003649.html

[Ferguson] Niels Ferguson, "Authentication weaknesses in GCM",
   2005. http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/comments/CWC-GCM/Ferguson2.pdf

[DJB-Timing] Daniel J. Bernstein, "Cache-timing attacks on AES", 2004.
   http://cr.yp.to/papers.html#cachetiming

[DJB-Comm] Daniel J. Bernstein, personal communication

[Poly1305-Trunc] http://osdir.com/ml/encryption.poly1305/2005-09/msg00007.html

[ARMv8] "ARMv8 Instruction Set Overview", 2011,
http://board.flatassembler.net/download.php?id=5698

[Bear-Lion] Ross Anderson and Eli Biham. "Two Practical and Provably
   Secure Block Ciphers: BEAR and LION".
   http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf

[Efficient-Tweakable] Palash Sarkar, "Efficient Tweakable Enciphering
  Schemes from (Block-Wise) Universal Hash Functions". 2008.
  http://eprint.iacr.org/2008/004.pdf

[IGE] Gligor and Donescu, "On Message Integrity in Symmetric
      Encryption" has the good IGE analysis:
      http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/ige/ige-spec.pdf
      The original IGE proposal was by Carl Campell in an old NIST
      publication that I can't find online; the paper above has a
      reference for it if you want to chase it more.

[ABC] Lars R. Knudsen, "Block Cipher Chaining Modes of
      Operation".
http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/abc/abc-spec.pdf

[HCTR] Peng Wang, Dengguo Feng, and Wenling Wu. "HCTR: A
       variable-input-length enciphering mode." 2005.
       http://delta.cs.cinvestav.mx/~debrup/hctr.pdf

[HCH] Debrup Chakraborty and Palash Sarkar. "HCH: A new tweakable
      enciphering scheme using the hash-encrypt-hash approach."
      http://biblioteca.cinvestav.mx/indicadores/texto_completo/cinvestav/2006/136034_1.pdf

[TET] Shai Halevi. "Invertible universal hashing and the TET
      encryption mode."  2007.
      http://www.iacr.org/archive/crypto2007/46220405/46220405.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013203008</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-10-13 20:30:08-0400</timestampReceived><subject>Re: [tor-dev] Extending Pyonionoo to provide statistics</subject><body>

Hi Karsten. This is actually really good timing. As you probably
noticed from tor-commits@ I just pushed support for network status
documents (v2 and v3 votes, consensus, and microdescriptor
consensuses). It's the combination of a month of work from Ravi and a
couple more from me.

Stem's descriptor parsing functionality is one of its most well
developed features and I'm anxious for it to start to get some users.
The feature gap between stem and metrics-lib is now pretty small, so
I'd love for it to start to take over some of metrics-lib's
responsibilities (and hopefully in turn get direct involvement from
you and Sathyanarayanan so it'll better meet your needs).

&gt; We would start with daily users, both direct and bridge users, and later add
&gt; aggregate statistics about relays and bridges, and after that torperf
&gt; performance statistics.

Gotcha. As I understand it the document types that stem is still missing are...

* microdescriptors
* bridge pool assignments
* exit list entry
* torperf output

So what you'll need from me is primarily the ability to parse torperf
output? Or is there another document type that I'm missing?

&gt; I think we'd need Damian's help for the descriptor-parsing side

Happy to help, though I'm not entirely sure yet what kind of
additional parsing support you'll need.

&gt; Sathya, Damian, can you already say how much of 2013 you will be around
&gt; for doing Tor stuff and how much time you think you could spend on this
&gt; project?

For my part a fair bit. This is, of course, a hobby that I do outside
of a full time job so work and life might get in the way. That said,
any project that includes collaborating with other developers to make
use of stem goes to the top of my todo list.

&gt; I'm thinking one ticket for implementing
&gt; usage statistics in Pyonionoo, a second ticket for the censorship
&gt; detector integration which depends on the first ticket, and two more
&gt; tickets for network statistics and torperf statistics integration into
&gt; Pyonionoo.  I'd probably suggest the first two tickets only for trying
&gt; to get funding from sponsor F year 3 and save the other two tickets for
&gt; later.

Hmm, aren't those last two tickets the only ones where I'd be
involved? It sounds like this project mostly concerns pyonionoo so
guess we should wait for input from Sathyanarayanan...

Cheers! -Damian

PS. Sathyanarayanan: I was gonna ping you separately but might as well
hijack this thread - would you mind giving stem's new networkstatus
module a try in pyonionoo? You can find documentation for it at...

https://stem.readthedocs.org/en/latest/stem.descriptor.html#module-stem.descriptor.networkstatus

... let me know if you run into any issues!

PPS. Grrr, their pydocs have some rendering bugs... &gt;:(

On Fri, Oct 12, 2012 at 9:57 AM, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; Hi Sathya, hi Damian,
&gt;
&gt; I have been working on improving bridge usage statistics in the past
&gt; weeks, and I discussed my results with George in the context of
&gt; improving the censorship detector.  We concluded that we need to write a
&gt; fair amount of new code and that it would be nice to integrate this new
&gt; code into Pyonionoo.
&gt;
&gt; Let me explain in more detail: I'm not yet done with the bridge usage
&gt; analysis, but early results are that we can calculate daily bridge users
&gt; similar to how we calculate daily direct users.  We need a more precise
&gt; implementation than what we have in metrics-web though.  So, we either
&gt; need to redesign the complex beast called metrics-web, or start from
&gt; scratch, ideally in a programming language that attracts more potential
&gt; contributors.
&gt;
&gt; The censorship detector takes the output of metrics-web's daily direct
&gt; usage numbers and tries to detect sudden drops or increases in usage.
&gt; It would be good to also look at bridge usage for censorship events, and
&gt; it would be quite important to have a tighter integration of the
&gt; censorship detector into the usage-calculating process and look at raw
&gt; numbers there.  Right now, the vast majority of events that the
&gt; censorship detector reports are just false positives.
&gt;
&gt; We first thought about implementing this in a new Python project that
&gt; has several modules: the first module would calculate daily users, the
&gt; second would determine possible censorship events, the third would
&gt; export data via JSON, the fourth would graph results on a website, and
&gt; the fifth would send out email notifications.
&gt;
&gt; However, that codebase would share a lot of functionality with
&gt; Onionoo/Pyonionoo.  We could instead extend Pyonionoo and Atlas/Compass
&gt; to not only provide network status data, but also statistics about the
&gt; Tor network and its usage.  We would start with daily users, both direct
&gt; and bridge users, and later add aggregate statistics about relays and
&gt; bridges, and after that torperf performance statistics.  Once we're
&gt; there we can retire a large part of metrics-web.
&gt;
&gt; This project is huge, which is why I'm thinking we should apply for
&gt; funding.  I expect the project to take at least 6 months of developer
&gt; time, in addition to the time to make Pyonionoo a full replacement of
&gt; Onionoo.  Before we ask for money, we should have a very rough idea
&gt; who's going to work on this project.  Once we have the money, we'll
&gt; actually have to do it, and I can't do this all by myself.
&gt;
&gt; I think we'd need Damian's help for the descriptor-parsing side and
&gt; general help with Python and Sathya to make Pyonionoo modular enough to
&gt; provide all these different features.  I'd either write or help write
&gt; the user-counting code, and I think George would help with integrating
&gt; and improving the existing censorship-detecting code.
&gt;
&gt; Sathya, Damian, can you already say how much of 2013 you will be around
&gt; for doing Tor stuff and how much time you think you could spend on this
&gt; project?  If the answer is "maybe not very much", by all means, please
&gt; say so.
&gt;
&gt; If there's at least some interest in this project, I'd create Trac
&gt; tickets in the next few days.  I'm thinking one ticket for implementing
&gt; usage statistics in Pyonionoo, a second ticket for the censorship
&gt; detector integration which depends on the first ticket, and two more
&gt; tickets for network statistics and torperf statistics integration into
&gt; Pyonionoo.  I'd probably suggest the first two tickets only for trying
&gt; to get funding from sponsor F year 3 and save the other two tickets for
&gt; later.
&gt;
&gt; Thanks,
&gt; Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121022002255</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-10-22 00:22:55-0400</timestampReceived><subject>[tor-dev] Trip Report: GSoC Mentor Summit</subject><body>

As per conferencing tradition Friday was spent on travel and meeting
the other attendees. Some of the highlights for me were...

* David from KDE

Besides demoing some KDE eye candy we discussed their project
infrastructure. KDE is a federation of smaller projects and had over
sixty students this year (ten times the number mentored by Tor).

Their project's scale has led to some unusual infrastructure
decisions. For instance, they have a partly decentralized git
infrastructure where pushes go to a single master host and pulls are
from any of several mirrors. The config they use to do this leads to
some... odd behavior. For instance a 'git pull' updates your tracking
branch but not the origin branch reference. The result is that to do a
pull for realz you need to call *both* pull and fetch. No doubt they
also get fun behavior from mirroring delays...

We also talked a bit about post-review and defaults they could set to
better support their setup. KDE has the largest public ReviewBoard
instance, but the above git setup makes it a bit confusing to use.

* Sukhbir from Debian

In 2011 Sukhbir applied to us for GSoC to work on TorBirdy. We loved
his proposal, but due to prior commitments he ended up working with
Debian instead. Since then he has become a GSoC mentor for Debian and
involved with the Tor by implementing his earlier proposal for
TorBirdy.

Sukhbir's interested in getting even more involved with Tor so we
discussed other projects that might interest him, and ways that we
could better publicize TorBirdy on our site.

* Arc from Python

When I found out that Python had a mentor at the summit I made a
mental note to hunt him down and ask about packaging best practices.
After an unexpected discussion about rugby I found out that it's
actually easy to support both python's 2.x and 3.x series by including
a 2to3 conversion at build time. This can be done via either distutils
or distribute...

distutils: http://python3porting.com/2to3.html#running-2to3-on-install
distribute: http://packages.python.org/distribute/python3.html

I also asked him to look into his crystal ball for when python 3 would
take over the world and he said 'Next year. Ubuntu and Fedora are
ready and willing to make the switch. The last main holdout is Gnome.
They tried to migrate but work there isn't finished yet.'

========================================

Saturday was the first day of the unconference. After an amusingly
confused attempt to have each of the couple hundred attendees shake
each other's hand there were sessions. Some were a little interesting,
but I spent more time on the hallway track since that's the real
benefit of the summit. The only useful tidbits I got from the talks
were...

- Do outreach early. The successful GSoC students who stick around
tend to be the ones that get involved before the application phase. We
should try harder to recruit college students to hack on tor, with the
carrot that this'll give them a leg up when applying for the program.
OpenHatch (http://openhatch.org/) might be something to look into for
this.

This would be a nice task for a community manager if we get one.

- Google Code In (https://code.google.com/gci/) is a program somewhat
similar to GSoC where highschool students become involved with open
source. Last year they had 18 organizations and this year they're
narrowing it down to 10. I was already highly tentative about having
us apply and now that I've heard more I'm sure we don't have enough
bandwidth for the hand-holding this would require.

As for the hallway track...

* Adriano and Luis from Umit

Last year Adriano showed me Open Monitor
(http://www.openmonitor.org/), a censorship detector written in
python. Sounds familiar? I thought so too, and tried a few times to
get them to talk with Ooni Probe and vice versa without success. My
impression is that they're UI developers (a skillset we sorely lack in
the tor project) with a rather unscalable backend, while Ooni Probe's
backend is far more mature but lacks any sort of UI for rendering real
time censorship information.

I made another stab at getting the two projects to talk, after which
the meeting took a weird turn with Adriano arguing that 'some
censorship is good'. Evidently they decided that Open Monitor won't
look for censorship concerning 'porn or terrorism'. I argued that this
was a slippery slope and that censorship monitoring shouldn't try to
pass a moral judgment on the content being censored, but after a time
it was clear that we were talking past each other.

I still think that we should leverage their UI expertise, but that's
up to the Ooni Probe devs.

* Open Source Lab

Met with a couple administrators from the OSU's Open Source Labs
(https://osuosl.org/). They provide hosting for several of the largest
open source projects including Apache and the Linux Foundation. Mostly
we talked about amusing legal threats they get for hosting the phpBB
project. Evidently lawyers are quite skilled at clicking the 'this is
a phpBB forum' link followed by 'hosted by the OSL' before sending
their angry emails. We also talked a bit about setting up non-exit
relays. They might be pretty receptive to this if we want to follow
up.

* Sumana and Rob from Wikimedia

Unsurprisingly Wikipedia occasionally has issues with spammers using
Tor. We talked about some possible options, such as requiring accounts
for Tor users to edit with a sort of proof of work in account creation
to make ban evasion more of a pita.

* Terri from Python

Mailman 3 is coming, and with it an interface that *doesn't* look like
it came from the 1980s! Most importantly for us, the new version of
Mailman provides a forum interface, letting email and forum users
communicate by whichever method they prefer. This would be a good
answer to our forums ticket (https://trac.torproject.org/3592). She
estimates that it'll be ready in six months or so.

========================================

Flying out on Sunday cut my day short, but there was one session that
I thought was interesting. Gnome and Wikimedia are launching a program
similar to GSoC to encourage more women to get involved with open
source. It runs later this winter. One gotcha is that Google's not
involved so mentoring orgs need to cover the $5k stipend.

I like the idea. Is this something we want to take part in? If so then
I'd be happy to administer the non-financial parts of it.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121012224809</emailId><senderName>Isis</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2012-10-12 22:48:09-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Karsten!

Oh sheesh. I did not see it...I will have to figure out why. That is slightly
worrying.

So, I am rushing to meet the final deadline, but I still think it is doable. I
have mostly finished up my OONI work for the month, and I planned to spend the
remainder of this month working on the bridge test.

I have finished most of the actual Tor connection code, as well as one of the
four basic packet level scans (the icmp8 one). Two of the other packet level
scans, the TCP SYN and ACK ones, are pretty much copies of the icmp8 one with
a couple lines changed, and they shouldn't be a big deal. 

There is still the vanilla TLS handshake test/scan/thing, which has not been
started yet, and will take a bit more time than the others because Python
notoriously has problems with SSL bindings and libraries, so I'll need to do a
bit of research on newer ones and updates and see which is the best to use
now. I hear that tlslite[1] is the current best choice; if anyone else has any
input on this it would be very helpful. :)

There were a couple minor hups: 

    1) When George asked me to test pluggable transports, this required
     significantly more refactoring than I previously thought was necessary.

    2) Arturo redesigned the OONI testing framework API again to use a
    completely different structure, which was supposed to be backwards
    compatible and turned out not to be (though I believe that my recent OONI
    commits fixed that). 
       However, I have been fighting the framework already, because the main
    scripts in OONI (/ooni/oonicli.py and /ooni/ooniprobe.py) control the
    reactor, and also expect static iterations through single test and single
    control functions for each asset (an asset in this case would be one
    bridge address). The bridge testing is rather dynamic (I would like it to
    be able to evaluate an approximate danger level to running the next test)
    and so the framework is kind of troublesome. Also, because the framework
    handles calling the reactor (in Twisted, the reactor is a sort of event
    scheduler), and it also expects a rather linear progression of
    defer.Deferreds (in Twisted, those are standin objects which execute
    callbacks when they get results from some previous deferred/callback), it
    would be nicer if I had full control of these myself without needing to
    hack around the parent scripts. I think it's wise that OONI deals with
    these things for the testwriter in most cases, because the testwriter
    shouldn't be expected to be an expert in using Twisted. However, I also
    think that, in the long term, OONI shouldn't prohibit people who know what
    they are doing or are doing odd things from being able to do so.
       As a result, I've decided (for now), to use bits are parts of the OONI
    code before the recent refactoring, and later (after the deliverable) I
    will work on adding flags to OONI to give the test script full control of
    the reactor and deferreds, as well as evaluating whether or not the bridge
    test is even compatible with the new API. I do not want to get caught up
    in dealing with this right now, I just want to have it all working and
    deployable in a way that I know will work.

    3) The indirect scans are becoming quite complicated to automate in any
    sane fashion. I still would like to continue working on this, as I'm quite
    enjoying the difficulty, but due to their temporary and volatile nature
    (they will change frequently depending on the blocking methods of a
    particular country and the currently available in-country
    bounces/proxies/whatever-thing-the-indirect-scan-uses), as well as the
    fact that many of these methods are still undiscovered, I think it is safe
    to add them as specialty cases after the fact without impacting overall
    general testing. There is one in particular that I would like to finish
    before the deadline because I am quite proud of it and am having a lot of
    fun working on it, but I'm first going to concentrate on wrapping up the
    active scans.

There are other things which I've marked as helpful things to do, but which
are not necessarily part of this deliverable:

    1) Having a parser for bridge descriptors to turn them into test inputs,
    and vice versa.

    2) Having some undiscoverable method for setting up lots of IPv6 bridges
    on one OR (Tor currently only allows up to eight, I believe) and having
    these be discoverable by bridgedb and no one else. I was thinking of this
    while talking with Aaron, because he reminded me that people on IPv6 have
    tons of IPs available, and I was thinking that if we configured some type
    of one-way hash function, we could say that a bridge descriptor for
    2001:db8::1:1 should actually mean multiple descriptors for
    2001:db8::fa98:38d2 2001:db8::e099:2188 2001:db8::88aa:3b7 or something,
    derived from the output of hashing the original descriptor with the OR's
    key or something else. This would help distribute bridges in the future
    quite a bit, though it doesn't do much for the current bridge situation.

Anyone wanting to help with the above two things, or with an idea for another
indirect scan, or with feedback on anything I'm working on, should feel free
to contact me and it will be greatly appreciated. :D

.-- .. ... ....
- -- . 
.-.. ..- -.-. -.-
&lt;(A)3
isis agora lovecruft
.-.-.

[1] https://github.com/trevp/tlslite

On Fri 12 Oct 2012 at 14:56, thus spake Karsten Loesing:
&gt; Hi Isis,
&gt; 
&gt; did you see this email?
&gt; 
&gt; Sorry for being pushy, but we're less than three weeks away from the
&gt; deadline, which makes me kinda nervous.
&gt; 
&gt; Thanks,
&gt; Karsten
&gt; 
&gt; 
&gt; On 10/8/12 9:14 AM, Karsten Loesing wrote:
&gt; &gt; Hi Isis,
&gt; &gt; 
&gt; &gt; can you give me a brief status update on the sponsor F year 2
&gt; &gt; deliverable "Automating Bridge Reachability Testing", ticket #6414?
&gt; &gt; 
&gt; &gt; In particular, how did the two project-internal milestones on September
&gt; &gt; 15 and October 7 go?
&gt; &gt; 
&gt; &gt; Do you mind updating #6414 with the status?
&gt; &gt; 
&gt; &gt; The overall deadline is on November 1, which is in 3.5 weeks.  How
&gt; &gt; realistic do you think it is that we'll have automated bridge
&gt; &gt; reachability tests by then?
&gt; &gt; 
&gt; &gt; Thanks,
&gt; &gt; Karsten
&gt; &gt; 
&gt; 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBCgAGBQJQeJ4pAAoJEKOttnos24s1GlkP/1ODucFe9q9a7KaKisgVqBcx
Cg1X3yGI+dsWvKtMwzgNqT/hcS+95GAYQiaa8fDlbiLY3nCWEsGYSOTjsbAmp04O
qPCdBiSFE4VqiZy4PYUHUkf8qZTYkXqAiMnyuuLVJINJ+BHLAdwEmEWB77ncQUxV
PvG6sxQ3GY64ZqRaSHwudf3H8mEPN/tNWRIXubnvAGM16EV0hWb51uORwo6CG86m
lKwpBqbSX5uDgG+B6HCeZps0Zv7cDypI3dtdd8hJHncUpFmfuj2y+Oad1M5DVbMC
4UMvCv/4tMPoPyjTYjWgLQRHEFiMdMwQcdPntnF6XqUBMLvd6v1fk1IxaaqNCDah
JWxK8ymUu90FLmmiyaSHQE/tfkFoEDCXz3XzR8xQA1zI2aq0hHdxA+G2JmW8yadQ
wt0N4EeCzK154r4+YRC1eJLrsSOhmA7SaAE6A+/iEOgasdMY0YWchTDnlUbUB5iv
acbMVITSGqmcRMos5xi450V98Qw1nW3UoBj5wi8uh0BWqnhqfomqL6oloQEdgAze
MqtCZ91adKKXntIsEZW0C/klBYg5mZIxdtmAW5eO/j+ogLB/L0/hX4/TZ6OH5i/N
7jJWAF0MbSWI2Q1Gk+oFFulib5m3XWzqg5Yq/+8VfE5n1R5xM1FgBwC932SWLOFZ
BV5c9ntZ+iJlbhpdL5yJ
=jk13
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013000806</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-10-13 00:08:06-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

Isis:
&gt; Hi Karsten!
&gt; 
&gt; Oh sheesh. I did not see it...I will have to figure out why. That is
&gt; slightly worrying.
&gt; 
&gt; So, I am rushing to meet the final deadline, but I still think it is
&gt; doable. I have mostly finished up my OONI work for the month, and I
&gt; planned to spend the remainder of this month working on the bridge
&gt; test.
&gt; 
&gt; I have finished most of the actual Tor connection code, as well as
&gt; one of the four basic packet level scans (the icmp8 one). Two of the
&gt; other packet level scans, the TCP SYN and ACK ones, are pretty much
&gt; copies of the icmp8 one with a couple lines changed, and they
&gt; shouldn't be a big deal.

A TCP SYN scan seems rather straight forward and quite useful. The ACK
scan is weird if only because I'm not clear on how it would work - you'd
have a bridge emit an ACK to a client? Wouldn't that fail for everything
that doesn't have a real IPv{4,6} address? All NAT clients would fail,
right? There are tricks to add an item to the NAT state table upstream
that won't leak out to the larger network - so we could work around it...

&gt; 
&gt; There is still the vanilla TLS handshake test/scan/thing, which has
&gt; not been started yet, and will take a bit more time than the others
&gt; because Python notoriously has problems with SSL bindings and
&gt; libraries, so I'll need to do a bit of research on newer ones and
&gt; updates and see which is the best to use now. I hear that tlslite[1]
&gt; is the current best choice; if anyone else has any input on this it
&gt; would be very helpful. :)
&gt; 

My thought is that txtorcon is what you'd want here - implementing a Tor
client in Python is madness. I mean, I'm all for the madness but you
can't actually do very much with such a vanilla handshake - you can open
a TLS connection with a few lines of tlslite - that though is basically
it. You might as well just use any python tls library for that though.
tlslite is awesome but hardly anyone actually ships with it.

&gt; There were a couple minor hups:
&gt; 
&gt; 1) When George asked me to test pluggable transports, this required 
&gt; significantly more refactoring than I previously thought was
&gt; necessary.
&gt; 
&gt; 2) Arturo redesigned the OONI testing framework API again to use a 
&gt; completely different structure, which was supposed to be backwards 
&gt; compatible and turned out not to be (though I believe that my recent
&gt; OONI commits fixed that). However, I have been fighting the framework
&gt; already, because the main scripts in OONI (/ooni/oonicli.py and
&gt; /ooni/ooniprobe.py) control the reactor, and also expect static
&gt; iterations through single test and single control functions for each
&gt; asset (an asset in this case would be one bridge address). The bridge
&gt; testing is rather dynamic (I would like it to be able to evaluate an
&gt; approximate danger level to running the next test) and so the
&gt; framework is kind of troublesome. Also, because the framework handles
&gt; calling the reactor (in Twisted, the reactor is a sort of event 
&gt; scheduler), and it also expects a rather linear progression of 
&gt; defer.Deferreds (in Twisted, those are standin objects which execute 
&gt; callbacks when they get results from some previous
&gt; deferred/callback), it would be nicer if I had full control of these
&gt; myself without needing to hack around the parent scripts. I think
&gt; it's wise that OONI deals with these things for the testwriter in
&gt; most cases, because the testwriter shouldn't be expected to be an
&gt; expert in using Twisted. However, I also think that, in the long
&gt; term, OONI shouldn't prohibit people who know what they are doing or
&gt; are doing odd things from being able to do so. As a result, I've
&gt; decided (for now), to use bits are parts of the OONI code before the
&gt; recent refactoring, and later (after the deliverable) I will work on
&gt; adding flags to OONI to give the test script full control of the
&gt; reactor and deferreds, as well as evaluating whether or not the
&gt; bridge test is even compatible with the new API. I do not want to get
&gt; caught up in dealing with this right now, I just want to have it all
&gt; working and deployable in a way that I know will work.
&gt; 

It seems like OONI needs to learn what you want to do and to help you to
do it. The notion that you know what you're doing is correct and OONI
should do what you're doing for you - so other people, who wish to do
the same, can just do it the OONI way...

&gt; 3) The indirect scans are becoming quite complicated to automate in
&gt; any sane fashion. I still would like to continue working on this, as
&gt; I'm quite enjoying the difficulty, but due to their temporary and
&gt; volatile nature (they will change frequently depending on the
&gt; blocking methods of a particular country and the currently available
&gt; in-country bounces/proxies/whatever-thing-the-indirect-scan-uses), as
&gt; well as the fact that many of these methods are still undiscovered, I
&gt; think it is safe to add them as specialty cases after the fact
&gt; without impacting overall general testing. There is one in particular
&gt; that I would like to finish before the deadline because I am quite
&gt; proud of it and am having a lot of fun working on it, but I'm first
&gt; going to concentrate on wrapping up the active scans.
&gt; 

I think at this point - perhaps I'm wrong - that merely having txtorcon
try to connect through a bridge and download a file with
trivsocks-client or something similar, is a perfectly fine test.

&gt; There are other things which I've marked as helpful things to do, but
&gt; which are not necessarily part of this deliverable:
&gt; 
&gt; 1) Having a parser for bridge descriptors to turn them into test
&gt; inputs, and vice versa.

In an ideal world, I think a list of ip:port fingerprint would be a good
bet. Realistically, I think just having ip:port is also fine - we're
talking about reachability testing - in theory, if Tor can build a
circuit, we're happy. Even if there was a man in the middle, we wouldn't
really care, right? If it can reach the Tor network, we still win... :)

&gt; 
&gt; 2) Having some undiscoverable method for setting up lots of IPv6
&gt; bridges on one OR (Tor currently only allows up to eight, I believe)
&gt; and having these be discoverable by bridgedb and no one else. I was
&gt; thinking of this while talking with Aaron, because he reminded me
&gt; that people on IPv6 have tons of IPs available, and I was thinking
&gt; that if we configured some type of one-way hash function, we could
&gt; say that a bridge descriptor for 2001:db8::1:1 should actually mean
&gt; multiple descriptors for 2001:db8::fa98:38d2 2001:db8::e099:2188
&gt; 2001:db8::88aa:3b7 or something, derived from the output of hashing
&gt; the original descriptor with the OR's key or something else. This
&gt; would help distribute bridges in the future quite a bit, though it
&gt; doesn't do much for the current bridge situation.
&gt; 
&gt; Anyone wanting to help with the above two things, or with an idea for
&gt; another indirect scan, or with feedback on anything I'm working on,
&gt; should feel free to contact me and it will be greatly appreciated.
&gt; :D

I think the indirect scan stuff doesn't really make a lot of sense.
Unless by indirect, you still mean that alice (in country x) is talking
to bob (the bridge) on various protocols other than the single TCP port
that is a Tor bridge listener.

I imagine in direct to mean that you try to say, traceroute to the
upstream network where bob is known to be located. That doesn't tip
anyone off about bob at all - not to the remote network, nor to the
local network or the networks in between.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013080837</emailId><senderName>Isis</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2012-10-13 08:08:37-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

On Sat 13 Oct 2012 at 00:08, thus spake Jacob Appelbaum:
&gt; Isis:
&gt; &gt; Hi Karsten!
&gt; &gt; 
&gt; &gt; Oh sheesh. I did not see it...I will have to figure out why. That is
&gt; &gt; slightly worrying.
&gt; &gt; 
&gt; &gt; So, I am rushing to meet the final deadline, but I still think it is
&gt; &gt; doable. I have mostly finished up my OONI work for the month, and I
&gt; &gt; planned to spend the remainder of this month working on the bridge
&gt; &gt; test.
&gt; &gt; 
&gt; &gt; I have finished most of the actual Tor connection code, as well as
&gt; &gt; one of the four basic packet level scans (the icmp8 one). Two of the
&gt; &gt; other packet level scans, the TCP SYN and ACK ones, are pretty much
&gt; &gt; copies of the icmp8 one with a couple lines changed, and they
&gt; &gt; shouldn't be a big deal.
&gt; 
&gt; A TCP SYN scan seems rather straight forward and quite useful. The ACK
&gt; scan is weird if only because I'm not clear on how it would work - you'd
&gt; have a bridge emit an ACK to a client? Wouldn't that fail for everything
&gt; that doesn't have a real IPv{4,6} address? All NAT clients would fail,
&gt; right? There are tricks to add an item to the NAT state table upstream
&gt; that won't leak out to the larger network - so we could work around it...
&gt; 

Derp, /facepalm. s/ACK/FIN/

Although, you're right! We could do neat things with having the OP/testpoint
send a SYN to a fixed IP, then have the bridge send a SYN/ACK back with the
sourceIP set to the same fixed IP, the same way that pwnat thing does it with
ICMP8 and time exceeded packets.

&gt; &gt; 
&gt; &gt; There is still the vanilla TLS handshake test/scan/thing, which has
&gt; &gt; not been started yet, and will take a bit more time than the others
&gt; &gt; because Python notoriously has problems with SSL bindings and
&gt; &gt; libraries, so I'll need to do a bit of research on newer ones and
&gt; &gt; updates and see which is the best to use now. I hear that tlslite[1]
&gt; &gt; is the current best choice; if anyone else has any input on this it
&gt; &gt; would be very helpful. :)
&gt; &gt; 
&gt; 
&gt; My thought is that txtorcon is what you'd want here - implementing a Tor
&gt; client in Python is madness. I mean, I'm all for the madness but you
&gt; can't actually do very much with such a vanilla handshake - you can open
&gt; a TLS connection with a few lines of tlslite - that though is basically
&gt; it. You might as well just use any python tls library for that though.
&gt; tlslite is awesome but hardly anyone actually ships with it.
&gt; 

I already used txtorcon, and wrote the full Tor connection case. It's here[1].
I want to see what happens when the OP pretends to be simply connecting to any
normal TLS/SSL service instead of Tor. It's important to know if they are
blocking TLS completely, or fingerprinting something in Tor specifically.

&gt; &gt; There were a couple minor hups:
&gt; &gt; 
&gt; &gt; 1) When George asked me to test pluggable transports, this required 
&gt; &gt; significantly more refactoring than I previously thought was
&gt; &gt; necessary.
&gt; &gt; 
&gt; &gt; 2) Arturo redesigned the OONI testing framework API again to use a 
&gt; &gt; completely different structure, which was supposed to be backwards 
&gt; &gt; compatible and turned out not to be (though I believe that my recent
&gt; &gt; OONI commits fixed that). However, I have been fighting the framework
&gt; &gt; already, because the main scripts in OONI (/ooni/oonicli.py and
&gt; &gt; /ooni/ooniprobe.py) control the reactor, and also expect static
&gt; &gt; iterations through single test and single control functions for each
&gt; &gt; asset (an asset in this case would be one bridge address). The bridge
&gt; &gt; testing is rather dynamic (I would like it to be able to evaluate an
&gt; &gt; approximate danger level to running the next test) and so the
&gt; &gt; framework is kind of troublesome. Also, because the framework handles
&gt; &gt; calling the reactor (in Twisted, the reactor is a sort of event 
&gt; &gt; scheduler), and it also expects a rather linear progression of 
&gt; &gt; defer.Deferreds (in Twisted, those are standin objects which execute 
&gt; &gt; callbacks when they get results from some previous
&gt; &gt; deferred/callback), it would be nicer if I had full control of these
&gt; &gt; myself without needing to hack around the parent scripts. I think
&gt; &gt; it's wise that OONI deals with these things for the testwriter in
&gt; &gt; most cases, because the testwriter shouldn't be expected to be an
&gt; &gt; expert in using Twisted. However, I also think that, in the long
&gt; &gt; term, OONI shouldn't prohibit people who know what they are doing or
&gt; &gt; are doing odd things from being able to do so. As a result, I've
&gt; &gt; decided (for now), to use bits are parts of the OONI code before the
&gt; &gt; recent refactoring, and later (after the deliverable) I will work on
&gt; &gt; adding flags to OONI to give the test script full control of the
&gt; &gt; reactor and deferreds, as well as evaluating whether or not the
&gt; &gt; bridge test is even compatible with the new API. I do not want to get
&gt; &gt; caught up in dealing with this right now, I just want to have it all
&gt; &gt; working and deployable in a way that I know will work.
&gt; &gt; 
&gt; 
&gt; It seems like OONI needs to learn what you want to do and to help you to
&gt; do it. The notion that you know what you're doing is correct and OONI
&gt; should do what you're doing for you - so other people, who wish to do
&gt; the same, can just do it the OONI way...
&gt; 

Right, but there is a case to be made for simplicity. Which is why I was
thinking that it should handle these by default and then require extra flags
to hand control back to the testwriter.

&gt; &gt; 3) The indirect scans are becoming quite complicated to automate in
&gt; &gt; any sane fashion. I still would like to continue working on this, as
&gt; &gt; I'm quite enjoying the difficulty, but due to their temporary and
&gt; &gt; volatile nature (they will change frequently depending on the
&gt; &gt; blocking methods of a particular country and the currently available
&gt; &gt; in-country bounces/proxies/whatever-thing-the-indirect-scan-uses), as
&gt; &gt; well as the fact that many of these methods are still undiscovered, I
&gt; &gt; think it is safe to add them as specialty cases after the fact
&gt; &gt; without impacting overall general testing. There is one in particular
&gt; &gt; that I would like to finish before the deadline because I am quite
&gt; &gt; proud of it and am having a lot of fun working on it, but I'm first
&gt; &gt; going to concentrate on wrapping up the active scans.
&gt; &gt; 
&gt; 
&gt; I think at this point - perhaps I'm wrong - that merely having txtorcon
&gt; try to connect through a bridge and download a file with
&gt; trivsocks-client or something similar, is a perfectly fine test.
&gt; 

But this burns bridges in places where Tor is blocked. I want to test *from
blocked countries* without their damned DPI boxes catching me, and I want to
automate it in a way they can't catch!

&gt; &gt; There are other things which I've marked as helpful things to do, but
&gt; &gt; which are not necessarily part of this deliverable:
&gt; &gt; 
&gt; &gt; 1) Having a parser for bridge descriptors to turn them into test
&gt; &gt; inputs, and vice versa.
&gt; 
&gt; In an ideal world, I think a list of ip:port fingerprint would be a good
&gt; bet. Realistically, I think just having ip:port is also fine - we're
&gt; talking about reachability testing - in theory, if Tor can build a
&gt; circuit, we're happy. Even if there was a man in the middle, we wouldn't
&gt; really care, right? If it can reach the Tor network, we still win... :)
&gt; 

Yep! 

I've just realised that I'm not sure about the protocol for an OP connecting
for the first time...and acking torspec.git for 'directory authority'
obviously just gave me way to many results. I'm assuming that Tor has the
dirauths' public keys baked in, and thus checks the consensus signatures when
they come in. Is this right? 

So, provided you actually have a non-tampered Tor binary, and provided your
region/ISP/govt isn't blocking the dirauths by IP, then we know that if the
sigs check out okay on the consensus and you can reach a listed OR that you're
actually connected. So we don't really care about the fingerprints here,
except to tell the bridges apart, but then we can do that anyway by IP:Port.

&gt; &gt; 
&gt; &gt; 2) Having some undiscoverable method for setting up lots of IPv6
&gt; &gt; bridges on one OR (Tor currently only allows up to eight, I believe)
&gt; &gt; and having these be discoverable by bridgedb and no one else. I was
&gt; &gt; thinking of this while talking with Aaron, because he reminded me
&gt; &gt; that people on IPv6 have tons of IPs available, and I was thinking
&gt; &gt; that if we configured some type of one-way hash function, we could
&gt; &gt; say that a bridge descriptor for 2001:db8::1:1 should actually mean
&gt; &gt; multiple descriptors for 2001:db8::fa98:38d2 2001:db8::e099:2188
&gt; &gt; 2001:db8::88aa:3b7 or something, derived from the output of hashing
&gt; &gt; the original descriptor with the OR's key or something else. This
&gt; &gt; would help distribute bridges in the future quite a bit, though it
&gt; &gt; doesn't do much for the current bridge situation.
&gt; &gt; 
&gt; &gt; Anyone wanting to help with the above two things, or with an idea for
&gt; &gt; another indirect scan, or with feedback on anything I'm working on,
&gt; &gt; should feel free to contact me and it will be greatly appreciated.
&gt; &gt; :D
&gt; 
&gt; I think the indirect scan stuff doesn't really make a lot of sense.
&gt; Unless by indirect, you still mean that alice (in country x) is talking
&gt; to bob (the bridge) on various protocols other than the single TCP port
&gt; that is a Tor bridge listener.
&gt; 

Really? I think it makes the most sense for certain countries...

You're right that a lot of the indirect scans will only tell us if the
Bridge's ORport is open, and not if the Bridge is actually up and running and
able to accept clients, but in countries where Tor is blocked, clandestinely
obtaining that information in a non-fingerprintable manner combined with a
full Tor connection from a non-blocked country tells us that the Bridge is in
fact up and running and that, at the time of the scan, the ORport was
reachable from the censoring country. The trick is to do the indirect scan in
a way that the DPI boxes cannot catch, otherwise we might as well just be
doing a full Tor connection and burning the Bridge.

&gt; I imagine in direct to mean that you try to say, traceroute to the
&gt; upstream network where bob is known to be located. That doesn't tip
&gt; anyone off about bob at all - not to the remote network, nor to the
&gt; local network or the networks in between.
&gt; 

No...that wouldn't work...or maybe it would if there winds up being some
strange case of a government blocking entire IP ranges. I've not heard of that
happening, have you? That seems inefficient, and like it would break more
things than it would "fix" (from the censor's POV) -- but then I wouldn't put
it past governments to do the first dumbass thing that appears to "fix" their
"problem".

China, for example, blocks by IP -- unless they find a service(s) running on
the box (as would be in the case of a host with multiple vhosts, then they
block the offending service by IP:port. So I don't think scanning the
neighbouring netblock tells us anything.

&lt;(A)3
isis agora lovecruft

[1] https://gitweb.torproject.org/ooni-probe.git/blob/HEAD:/ooni/plugins/bridget.py
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013110010</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-10-13 11:00:10-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

Isis:
&gt; On Sat 13 Oct 2012 at 00:08, thus spake Jacob Appelbaum:
&gt;&gt; Isis:
&gt;&gt;&gt; Hi Karsten!
&gt;&gt;&gt;
&gt;&gt;&gt; Oh sheesh. I did not see it...I will have to figure out why. That is
&gt;&gt;&gt; slightly worrying.
&gt;&gt;&gt;
&gt;&gt;&gt; So, I am rushing to meet the final deadline, but I still think it is
&gt;&gt;&gt; doable. I have mostly finished up my OONI work for the month, and I
&gt;&gt;&gt; planned to spend the remainder of this month working on the bridge
&gt;&gt;&gt; test.
&gt;&gt;&gt;
&gt;&gt;&gt; I have finished most of the actual Tor connection code, as well as
&gt;&gt;&gt; one of the four basic packet level scans (the icmp8 one). Two of the
&gt;&gt;&gt; other packet level scans, the TCP SYN and ACK ones, are pretty much
&gt;&gt;&gt; copies of the icmp8 one with a couple lines changed, and they
&gt;&gt;&gt; shouldn't be a big deal.
&gt;&gt;
&gt;&gt; A TCP SYN scan seems rather straight forward and quite useful. The ACK
&gt;&gt; scan is weird if only because I'm not clear on how it would work - you'd
&gt;&gt; have a bridge emit an ACK to a client? Wouldn't that fail for everything
&gt;&gt; that doesn't have a real IPv{4,6} address? All NAT clients would fail,
&gt;&gt; right? There are tricks to add an item to the NAT state table upstream
&gt;&gt; that won't leak out to the larger network - so we could work around it...
&gt;&gt;
&gt; 
&gt; Derp, /facepalm. s/ACK/FIN/
&gt; 
&gt; Although, you're right! We could do neat things with having the OP/testpoint
&gt; send a SYN to a fixed IP, then have the bridge send a SYN/ACK back with the
&gt; sourceIP set to the same fixed IP, the same way that pwnat thing does it with
&gt; ICMP8 and time exceeded packets.

Ha. Well, we just invented a new way to test. Oh the perils of
censorship resistance...

&gt; 
&gt;&gt;&gt;
&gt;&gt;&gt; There is still the vanilla TLS handshake test/scan/thing, which has
&gt;&gt;&gt; not been started yet, and will take a bit more time than the others
&gt;&gt;&gt; because Python notoriously has problems with SSL bindings and
&gt;&gt;&gt; libraries, so I'll need to do a bit of research on newer ones and
&gt;&gt;&gt; updates and see which is the best to use now. I hear that tlslite[1]
&gt;&gt;&gt; is the current best choice; if anyone else has any input on this it
&gt;&gt;&gt; would be very helpful. :)
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; My thought is that txtorcon is what you'd want here - implementing a Tor
&gt;&gt; client in Python is madness. I mean, I'm all for the madness but you
&gt;&gt; can't actually do very much with such a vanilla handshake - you can open
&gt;&gt; a TLS connection with a few lines of tlslite - that though is basically
&gt;&gt; it. You might as well just use any python tls library for that though.
&gt;&gt; tlslite is awesome but hardly anyone actually ships with it.
&gt;&gt;
&gt; 
&gt; I already used txtorcon, and wrote the full Tor connection case. It's here[1].
&gt; I want to see what happens when the OP pretends to be simply connecting to any
&gt; normal TLS/SSL service instead of Tor. It's important to know if they are
&gt; blocking TLS completely, or fingerprinting something in Tor specifically.

Ok - though it seems like dowser is already doing that, no? I can see
the purpose of doing a straight tls connection but I guess that unless
we emulate popular browsers, we'll have a lot of false negatives. If the
goal is _any_ tls session, sure, I agree and that is a good thing to do.

&gt; 
&gt;&gt;&gt; There were a couple minor hups:
&gt;&gt;&gt;
&gt;&gt;&gt; 1) When George asked me to test pluggable transports, this required 
&gt;&gt;&gt; significantly more refactoring than I previously thought was
&gt;&gt;&gt; necessary.
&gt;&gt;&gt;
&gt;&gt;&gt; 2) Arturo redesigned the OONI testing framework API again to use a 
&gt;&gt;&gt; completely different structure, which was supposed to be backwards 
&gt;&gt;&gt; compatible and turned out not to be (though I believe that my recent
&gt;&gt;&gt; OONI commits fixed that). However, I have been fighting the framework
&gt;&gt;&gt; already, because the main scripts in OONI (/ooni/oonicli.py and
&gt;&gt;&gt; /ooni/ooniprobe.py) control the reactor, and also expect static
&gt;&gt;&gt; iterations through single test and single control functions for each
&gt;&gt;&gt; asset (an asset in this case would be one bridge address). The bridge
&gt;&gt;&gt; testing is rather dynamic (I would like it to be able to evaluate an
&gt;&gt;&gt; approximate danger level to running the next test) and so the
&gt;&gt;&gt; framework is kind of troublesome. Also, because the framework handles
&gt;&gt;&gt; calling the reactor (in Twisted, the reactor is a sort of event 
&gt;&gt;&gt; scheduler), and it also expects a rather linear progression of 
&gt;&gt;&gt; defer.Deferreds (in Twisted, those are standin objects which execute 
&gt;&gt;&gt; callbacks when they get results from some previous
&gt;&gt;&gt; deferred/callback), it would be nicer if I had full control of these
&gt;&gt;&gt; myself without needing to hack around the parent scripts. I think
&gt;&gt;&gt; it's wise that OONI deals with these things for the testwriter in
&gt;&gt;&gt; most cases, because the testwriter shouldn't be expected to be an
&gt;&gt;&gt; expert in using Twisted. However, I also think that, in the long
&gt;&gt;&gt; term, OONI shouldn't prohibit people who know what they are doing or
&gt;&gt;&gt; are doing odd things from being able to do so. As a result, I've
&gt;&gt;&gt; decided (for now), to use bits are parts of the OONI code before the
&gt;&gt;&gt; recent refactoring, and later (after the deliverable) I will work on
&gt;&gt;&gt; adding flags to OONI to give the test script full control of the
&gt;&gt;&gt; reactor and deferreds, as well as evaluating whether or not the
&gt;&gt;&gt; bridge test is even compatible with the new API. I do not want to get
&gt;&gt;&gt; caught up in dealing with this right now, I just want to have it all
&gt;&gt;&gt; working and deployable in a way that I know will work.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; It seems like OONI needs to learn what you want to do and to help you to
&gt;&gt; do it. The notion that you know what you're doing is correct and OONI
&gt;&gt; should do what you're doing for you - so other people, who wish to do
&gt;&gt; the same, can just do it the OONI way...
&gt;&gt;
&gt; 
&gt; Right, but there is a case to be made for simplicity. Which is why I was
&gt; thinking that it should handle these by default and then require extra flags
&gt; to hand control back to the testwriter.

We can have a different interface for the non-simple thing, I think.

&gt; 
&gt;&gt;&gt; 3) The indirect scans are becoming quite complicated to automate in
&gt;&gt;&gt; any sane fashion. I still would like to continue working on this, as
&gt;&gt;&gt; I'm quite enjoying the difficulty, but due to their temporary and
&gt;&gt;&gt; volatile nature (they will change frequently depending on the
&gt;&gt;&gt; blocking methods of a particular country and the currently available
&gt;&gt;&gt; in-country bounces/proxies/whatever-thing-the-indirect-scan-uses), as
&gt;&gt;&gt; well as the fact that many of these methods are still undiscovered, I
&gt;&gt;&gt; think it is safe to add them as specialty cases after the fact
&gt;&gt;&gt; without impacting overall general testing. There is one in particular
&gt;&gt;&gt; that I would like to finish before the deadline because I am quite
&gt;&gt;&gt; proud of it and am having a lot of fun working on it, but I'm first
&gt;&gt;&gt; going to concentrate on wrapping up the active scans.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; I think at this point - perhaps I'm wrong - that merely having txtorcon
&gt;&gt; try to connect through a bridge and download a file with
&gt;&gt; trivsocks-client or something similar, is a perfectly fine test.
&gt;&gt;
&gt; 
&gt; But this burns bridges in places where Tor is blocked. I want to test *from
&gt; blocked countries* without their damned DPI boxes catching me, and I want to
&gt; automate it in a way they can't catch!

Many of the testing modes will burn bridges, perhaps. In practice,
anything that will detect them and automatically block them will, well,
block anything that would be used there anyway. At that point, we've
lost and need a (wire) protocol change.

So if you're really worried about it - consider this:

Testing bridges are nearly free. Spin up an EC2 node or any other cloud
provider node.

If you have a shell or a proxy positioned behind the firewall... it is
far far more valuable than a bridge.

&gt; 
&gt;&gt;&gt; There are other things which I've marked as helpful things to do, but
&gt;&gt;&gt; which are not necessarily part of this deliverable:
&gt;&gt;&gt;
&gt;&gt;&gt; 1) Having a parser for bridge descriptors to turn them into test
&gt;&gt;&gt; inputs, and vice versa.
&gt;&gt;
&gt;&gt; In an ideal world, I think a list of ip:port fingerprint would be a good
&gt;&gt; bet. Realistically, I think just having ip:port is also fine - we're
&gt;&gt; talking about reachability testing - in theory, if Tor can build a
&gt;&gt; circuit, we're happy. Even if there was a man in the middle, we wouldn't
&gt;&gt; really care, right? If it can reach the Tor network, we still win... :)
&gt;&gt;
&gt; 
&gt; Yep! 
&gt; 
&gt; I've just realised that I'm not sure about the protocol for an OP connecting
&gt; for the first time...and acking torspec.git for 'directory authority'
&gt; obviously just gave me way to many results. I'm assuming that Tor has the
&gt; dirauths' public keys baked in, and thus checks the consensus signatures when
&gt; they come in. Is this right? 

Yes.

&gt; 
&gt; So, provided you actually have a non-tampered Tor binary, and provided your
&gt; region/ISP/govt isn't blocking the dirauths by IP, then we know that if the
&gt; sigs check out okay on the consensus and you can reach a listed OR that you're
&gt; actually connected. So we don't really care about the fingerprints here,
&gt; except to tell the bridges apart, but then we can do that anyway by IP:Port.
&gt; 

If Tor can build a circuit, we have a valid consensus and we can reach
the Tor network. The simplest test is just:

Airplane mode on
Configure Tor to use a bridge
Airplane mode off
Connect to check.torproject.org
...
Profit^HIt works

&gt;&gt;&gt;
&gt;&gt;&gt; 2) Having some undiscoverable method for setting up lots of IPv6
&gt;&gt;&gt; bridges on one OR (Tor currently only allows up to eight, I believe)
&gt;&gt;&gt; and having these be discoverable by bridgedb and no one else. I was
&gt;&gt;&gt; thinking of this while talking with Aaron, because he reminded me
&gt;&gt;&gt; that people on IPv6 have tons of IPs available, and I was thinking
&gt;&gt;&gt; that if we configured some type of one-way hash function, we could
&gt;&gt;&gt; say that a bridge descriptor for 2001:db8::1:1 should actually mean
&gt;&gt;&gt; multiple descriptors for 2001:db8::fa98:38d2 2001:db8::e099:2188
&gt;&gt;&gt; 2001:db8::88aa:3b7 or something, derived from the output of hashing
&gt;&gt;&gt; the original descriptor with the OR's key or something else. This
&gt;&gt;&gt; would help distribute bridges in the future quite a bit, though it
&gt;&gt;&gt; doesn't do much for the current bridge situation.
&gt;&gt;&gt;
&gt;&gt;&gt; Anyone wanting to help with the above two things, or with an idea for
&gt;&gt;&gt; another indirect scan, or with feedback on anything I'm working on,
&gt;&gt;&gt; should feel free to contact me and it will be greatly appreciated.
&gt;&gt;&gt; :D
&gt;&gt;
&gt;&gt; I think the indirect scan stuff doesn't really make a lot of sense.
&gt;&gt; Unless by indirect, you still mean that alice (in country x) is talking
&gt;&gt; to bob (the bridge) on various protocols other than the single TCP port
&gt;&gt; that is a Tor bridge listener.
&gt;&gt;
&gt; 
&gt; Really? I think it makes the most sense for certain countries...
&gt; 
&gt; You're right that a lot of the indirect scans will only tell us if the
&gt; Bridge's ORport is open, and not if the Bridge is actually up and running and
&gt; able to accept clients, but in countries where Tor is blocked, clandestinely
&gt; obtaining that information in a non-fingerprintable manner combined with a
&gt; full Tor connection from a non-blocked country tells us that the Bridge is in
&gt; fact up and running and that, at the time of the scan, the ORport was
&gt; reachable from the censoring country. The trick is to do the indirect scan in
&gt; a way that the DPI boxes cannot catch, otherwise we might as well just be
&gt; doing a full Tor connection and burning the Bridge.

I mean, I see that but I'm not seeing how any of this is actually
indirect? If alice talks to bob, it's direct. If alice talks to bob's
upstream, it's alice talking to bob's network. An indirect relationship
to bob is implied as bob's network isn't censoring alice's access to bob.

All of these things are finger printable. Things that don't include
protocol specific bits are still test finger printable - we'll likely
have a (small) while to go before ooni is fingerprinted but it will happen.

I think the most indirect (for us) test an analysis of the number of
users from a given country that the bridge observes. If it reports to
the metrics system, we'll see censorship events that happen by protocol.

The next up is talking to things nearby or even on the expected ports
without the tor protocol.

&gt; 
&gt;&gt; I imagine in direct to mean that you try to say, traceroute to the
&gt;&gt; upstream network where bob is known to be located. That doesn't tip
&gt;&gt; anyone off about bob at all - not to the remote network, nor to the
&gt;&gt; local network or the networks in between.
&gt;&gt;
&gt; 
&gt; No...that wouldn't work...or maybe it would if there winds up being some
&gt; strange case of a government blocking entire IP ranges. I've not heard of that
&gt; happening, have you? That seems inefficient, and like it would break more
&gt; things than it would "fix" (from the censor's POV) -- but then I wouldn't put
&gt; it past governments to do the first dumbass thing that appears to "fix" their
&gt; "problem".
&gt; 

Egypt's TEData blocked twitter by IP during the #jan25 revolution.

Later, one of their shit head managers on a panel in Cairo tried to tell
me that I was wrong, even lying about their complicity in assisting the
Mubarak regime. It was implied that there was a routing issue. I pointed
out that I could reach all of the IPs in a given netblock except the
webservers - it turns out, they only censored the load balancer IP
addresses - which weren't the full /24. In other cases, I saw entire
/24s blocked and the way I tested was to see if I could reach the /16
upstream - so sure enough, we only hit filters (at the third hop up from
the router in Egypt) if we went for the /24.

The guy called me a liar, I offered him data; he then said "I'm not
saying you're lying..."

Boy did that guy look like an asshole! ;-)

That kind of indirect test is useful as it tells us what we believe
should be reachable - as we can reach the thing we're not interested in
really - so routing works, etc. Then we can try the same test to the
host we do care about - now we see if the specific ip is blocked. Later
we can test a specific resource (say a Tor TCP port), now we see if the
specific resource is blocked.

If those are all TCP traceroute, I'm guessing such indirect tests won't
burn bridges.

&gt; China, for example, blocks by IP -- unless they find a service(s) running on
&gt; the box (as would be in the case of a host with multiple vhosts, then they
&gt; block the offending service by IP:port. So I don't think scanning the
&gt; neighbouring netblock tells us anything.
&gt; 

It tells us about general reachability - a good thing to know about a
kind of base reachability before we try to draw conclusions about
specifics. Furthermore, if we can't reach the netblock later, we now may
be able to trigger blocking of entire netblocks, etc.

All the best,
Jake
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013122012</emailId><senderName>Arturo_Filastò</senderName><senderEmail>art@torproject.org</senderEmail><timestampReceived>2012-10-13 12:20:12-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

On Fri, Oct 12, 2012 at 10:48 PM, Isis &lt;isis@torproject.org&gt; wrote:
&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA512
&gt;
&gt; Hi Karsten!
&gt;
&gt; Oh sheesh. I did not see it...I will have to figure out why. That is slightly
&gt; worrying.
&gt;
&gt;
&gt;     2) Arturo redesigned the OONI testing framework API again to use a
&gt;     completely different structure, which was supposed to be backwards
&gt;     compatible and turned out not to be (though I believe that my recent OONI
&gt;     commits fixed that).
&gt;        However, I have been fighting the framework already, because the main
&gt;     scripts in OONI (/ooni/oonicli.py and /ooni/ooniprobe.py) control the
&gt;     reactor, and also expect static iterations through single test and single
&gt;     control functions for each asset (an asset in this case would be one
&gt;     bridge address).

What do you mean exactly by the fact that your tests control the
reactor? The twisted reactor is an event loop and it should be started
only once and stopped only once. Can you show me the piece of code
that you wrote that "controls it"?
There is a proper way to do more or less anything, but some things
require gotchas.

&gt;     The bridge testing is rather dynamic (I would like it to
&gt;     be able to evaluate an approximate danger level to running the next test)
&gt;     and so the framework is kind of troublesome. Also, because the framework
&gt;     handles calling the reactor (in Twisted, the reactor is a sort of event
&gt;     scheduler), and it also expects a rather linear progression of
&gt;     defer.Deferreds (in Twisted, those are standin objects which execute
&gt;     callbacks when they get results from some previous deferred/callback), it
&gt;     would be nicer if I had full control of these myself without needing to
&gt;     hack around the parent scripts.

The twisted reactor is not like a scheduler. It is an event loop. This
means that you register deferred with it (promises that your function
will eventually return) and when you fire the event for the fact that
your operation has concluded it will run the callbacks.
This pattern is common to (I think) all event loops (like libevent for example).

The neat thing though is that the new API actually supports
"automatically" blocking operations transparently. This means that if
you run a test that is blocking and you don't want to fiddle around
with twisted deferreds you can do it none the less.
Check out the documentation for it https://ooni.readthedocs.org and
for more details on what is possible you can do most of what is
possible with twisted trial:
http://twistedmatrix.com/documents/current/api/twisted.trial.html.

If you give me some examples of where you are encountering
difficulties I can help you out.

&gt;     I think it's wise that OONI deals with
&gt;     these things for the testwriter in most cases, because the testwriter
&gt;     shouldn't be expected to be an expert in using Twisted. However, I also
&gt;     think that, in the long term, OONI shouldn't prohibit people who know what
&gt;     they are doing or are doing odd things from being able to do so.

Being a framework I believe this is not the ideal path. A framework is
made to impose on you certain design decisions that you do not have to
make. There is a right way to use such frameworks and if you don't use
them as they are designed you will obviously have some issues.

Could you provide me with examples of what you are trying to do and
you are not able to do or experiencing problems with?

Whatever you need to do should be possible and if it is not possible
this functionality should be exposed to whoever will use OONI in the
future.

&gt;        As a result, I've decided (for now), to use bits are parts of the OONI
&gt;     code before the recent refactoring, and later (after the deliverable) I
&gt;     will work on adding flags to OONI to give the test script full control of
&gt;     the reactor and deferreds, as well as evaluating whether or not the bridge
&gt;     test is even compatible with the new API. I do not want to get caught up
&gt;     in dealing with this right now, I just want to have it all working and
&gt;     deployable in a way that I know will work.

I still do not understand exactly what you mean by "full control of
the reactor". I am very keen in learning what you are trying to do
though and I bet there is a way to do it, since the new OONI is just
an extension of twisted trial unittesting framework to support inputs
and reporting with the OONI format.

- Art.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121030184036</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-10-30 18:40:36-0400</timestampReceived><subject>[tor-dev] use tor controller to detect circuit/path change</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, I'm new to Tor controller,

Tor client usually open 3 circuits, one for current use and the other 2 for
standby.

Tor will change the current circuit/path in use from time to time,
depending on the network load dynamics

I'm wondering whether it is possible to use Tor controller to detect when
the circuit/path in use is changed
and obtain the list of IP addresses of those relay nodes.

thanks!

[Attachment #5 (text/html)]

Hi, I'm new to Tor controller, &lt;br&gt;&lt;br&gt;Tor client usually open 3 circuits, one \
for current use and the other 2 for standby.&lt;br&gt;&lt;br&gt;Tor will change the current \
circuit/path in use from time to time, depending on the network load dynamics&lt;br&gt; \
&lt;br&gt;I'm wondering whether it is possible to use Tor controller to detect when the \
circuit/path in use is changed&lt;br&gt;and obtain the list of IP addresses of those relay \
nodes.&lt;br&gt;&lt;br&gt;thanks!&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121030193136</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-10-30 19:31:36-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

&gt; Hi, I'm new to Tor controller,
&gt;
&gt; Tor client usually open 3 circuits, one for current use and the other 2 for
&gt; standby.
&gt;
&gt; Tor will change the current circuit/path in use from time to time, depending
&gt; on the network load dynamics
&gt;
&gt; I'm wondering whether it is possible to use Tor controller to detect when
&gt; the circuit/path in use is changed
&gt; and obtain the list of IP addresses of those relay nodes.

Hi esolve. I'm pretty sure that you'll simply want to write a script
that listens for CIRC events...
https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt#l1232

The main controller libraries at present are...

- txtorcon (https://txtorcon.readthedocs.org/en/latest/) - controller
library for twisted apps
- stem (https://stem.readthedocs.org/en/latest/index.html) - general
controller library that'll replace TorCtl
- torctl (https://gitweb.torproject.org/pytorctl.git/) - the original
and most stable controller library

If you want an example for using stem then I'd be happy to write you
one later. Ravi and I are currently working to improve its event
handling support so it's presently a bit rough for your use case, but
still perfectly doable.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121030210023</emailId><senderName></senderName><senderEmail>meejah</senderEmail><timestampReceived>2012-10-30 21:00:23-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt;&gt; I'm wondering whether it is possible to use Tor controller to
&gt;&gt; detect when the circuit/path in use is changed and obtain the list
&gt;&gt; of IP addresses of those relay nodes.

&gt; - txtorcon (https://txtorcon.readthedocs.org/en/latest/) - controller
&gt; library for twisted apps

Specifically, try this example:

   https://github.com/meejah/txtorcon/blob/master/examples/stream_circuit_logger.py

You'll be interested in the last hop in the "path" attribute of
Circuit objects. If you want to know which streams are exiting via
which circuits, listen for STREAM events and look at the Circuit to
which they're connected.

- -- 
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Processed by Mailcrypt 3.5.8 &lt;http://mailcrypt.sourceforge.net/&gt;

iQEcBAEBAgAGBQJQkD/eAAoJEMJgKAMSgGmnUNcH/2hZvHQ3N+MvqT7zN764Jt0j
YwbCMfSpVNcOyidDyHIVU3uoT+Ji+il50yhhkCOHelCJAUWuJZjva5K80bpdlNVM
QbQ6IW5AuoX4ToCLKJ0qSsNeKlt66tI54G5c0TrZfiS/JVD8viz/iQ/x6/rzvsG/
Qr11AeVY5O9Oo/1Xl1kw/kTHUhCisXX+kou/ZEAh12Hvkkwy6zg4HlX1/z+uh/9J
0PCzGp+Lu5WEKwms+ROd6b8jf48h93S0HiJshFvb4YB5vIy9RStXC203G0ZR415G
oQ7ex30NroPtb260nYyi+n6k+Jp0POLwXzgzbljvBlaqdTDgsl5kJL2klbbGeUg=
=U4KO
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121031001357</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-10-31 00:13:57-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

[Attachment #2 (multipart/alternative)]


OK, thank you very much!
besides,  is it possible to get the cypher key for decoding the tcpdump
captured packets on the TOR client??

2012/10/30 Damian Johnson &lt;atagar@torproject.org&gt;

&gt; &gt; Hi, I'm new to Tor controller,
&gt; &gt;
&gt; &gt; Tor client usually open 3 circuits, one for current use and the other 2
&gt; for
&gt; &gt; standby.
&gt; &gt;
&gt; &gt; Tor will change the current circuit/path in use from time to time,
&gt; depending
&gt; &gt; on the network load dynamics
&gt; &gt;
&gt; &gt; I'm wondering whether it is possible to use Tor controller to detect when
&gt; &gt; the circuit/path in use is changed
&gt; &gt; and obtain the list of IP addresses of those relay nodes.
&gt;
&gt; Hi esolve. I'm pretty sure that you'll simply want to write a script
&gt; that listens for CIRC events...
&gt; https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt#l1232
&gt;
&gt; The main controller libraries at present are...
&gt;
&gt; - txtorcon (https://txtorcon.readthedocs.org/en/latest/) - controller
&gt; library for twisted apps
&gt; - stem (https://stem.readthedocs.org/en/latest/index.html) - general
&gt; controller library that'll replace TorCtl
&gt; - torctl (https://gitweb.torproject.org/pytorctl.git/) - the original
&gt; and most stable controller library
&gt;
&gt; If you want an example for using stem then I'd be happy to write you
&gt; one later. Ravi and I are currently working to improve its event
&gt; handling support so it's presently a bit rough for your use case, but
&gt; still perfectly doable.
&gt;
&gt; Cheers! -Damian
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

OK, thank you very much!&lt;br&gt;besides,  is it possible to get the cypher key for \
decoding the tcpdump captured packets on the TOR client??&lt;br&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2012/10/30 Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&gt; Hi, I'm new to \
Tor controller,&lt;br&gt; &gt;&lt;br&gt;
&gt; Tor client usually open 3 circuits, one for current use and the other 2 for&lt;br&gt;
&gt; standby.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Tor will change the current circuit/path in use from time to time, depending&lt;br&gt;
&gt; on the network load dynamics&lt;br&gt;
&gt;&lt;br&gt;
&gt; I'm wondering whether it is possible to use Tor controller to detect \
when&lt;br&gt; &gt; the circuit/path in use is changed&lt;br&gt;
&gt; and obtain the list of IP addresses of those relay nodes.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;Hi esolve. I'm pretty sure that you'll simply want to write a \
script&lt;br&gt; that listens for CIRC events...&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt#l1232" \
target="_blank"&gt;https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt#l1232&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
The main controller libraries at present are...&lt;br&gt;
&lt;br&gt;
- txtorcon (&lt;a href="https://txtorcon.readthedocs.org/en/latest/" \
target="_blank"&gt;https://txtorcon.readthedocs.org/en/latest/&lt;/a&gt;) - controller&lt;br&gt; \
                library for twisted apps&lt;br&gt;
- stem (&lt;a href="https://stem.readthedocs.org/en/latest/index.html" \
target="_blank"&gt;https://stem.readthedocs.org/en/latest/index.html&lt;/a&gt;) - general&lt;br&gt; \
                controller library that'll replace TorCtl&lt;br&gt;
- torctl (&lt;a href="https://gitweb.torproject.org/pytorctl.git/" \
target="_blank"&gt;https://gitweb.torproject.org/pytorctl.git/&lt;/a&gt;) - the original&lt;br&gt; \
and most stable controller library&lt;br&gt; &lt;br&gt;
If you want an example for using stem then I'd be happy to write you&lt;br&gt;
one later. Ravi and I are currently working to improve its event&lt;br&gt;
handling support so it's presently a bit rough for your use case, but&lt;br&gt;
still perfectly doable.&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121031005230</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-10-31 00:52:30-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

&gt; OK, thank you very much!
&gt; besides,  is it possible to get the cypher key for decoding the tcpdump
&gt; captured packets on the TOR client??

I don't follow, do you mean the traffic between tor and the first hop?
Why not just intercept the communication with the socks port?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121031111758</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-10-31 11:17:58-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

[Attachment #2 (multipart/alternative)]


oh, I don't understand this


what you mean is, for example, when browsing webpages

browser application                sock
Tor                            Ethernet interface

         send   packet ----------&gt;    forward -------------&gt; encrypt and
-----------------&gt; send to the entry node

make tor cells


         receive packet&lt;---------   forward&lt;-------------- decrypt tor
cells &lt;---------------  receive from the entry node


tcpdump -i eth0(this is my capturing)

 but you mean I can capture between the browser application and the sock=A3=
=BF



so I used tcpdump on the ethernet interface
the packets are  encrypted
you mean I can capture the packets before

2012/10/31 Damian Johnson &lt;atagar@torproject.org&gt;

&gt; &gt; OK, thank you very much!
&gt; &gt; besides,  is it possible to get the cypher key for decoding the tcpdump
&gt; &gt; captured packets on the TOR client??
&gt;
&gt; I don't follow, do you mean the traffic between tor and the first hop?
&gt; Why not just intercept the communication with the socks port?
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

oh, I don't understand this&lt;br&gt;&lt;br&gt;&lt;br&gt;what you mean is, for example, when \
browsing webpages&lt;br&gt;&lt;br&gt;browser \
application                \
sock                        \
Tor                \
            Ethernet \
interface&lt;br&gt;        &lt;br&gt; \
         send   packet \
----------&gt;    forward -------------&gt; encrypt and   \
-----------------&gt; send to the entry \
node&lt;br&gt;              \
              &amp;n \
bsp;             &amp;nbs \
p;               \
                 \
make tor cells&lt;br&gt;&lt;br&gt; &lt;br&gt;         receive \
packet&lt;---------   forward&lt;-------------- decrypt tor cells \
&lt;---------------  receive from the entry \
node&lt;br&gt;&lt;br&gt;            &amp;n \
bsp;             &amp;nbs \
p;               \
              &amp;n \
bsp;             &amp;nbs \
p;                            \
tcpdump -i eth0(this is my capturing)&lt;br&gt; &lt;br&gt; but you mean I can capture \
between the browser application and the sock£¿&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;so I used tcpdump on \
the ethernet interface&lt;br&gt;the packets are  encrypted&lt;br&gt;you mean I can capture \
the packets before &lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt; 2012/10/31 Damian Johnson &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;div class="im"&gt;&gt; OK, thank you very much!&lt;br&gt;
&gt; besides,  is it possible to get the cypher key for decoding the tcpdump&lt;br&gt;
&gt; captured packets on the TOR client??&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;I don't follow, do you mean the traffic between tor and the first hop?&lt;br&gt;
Why not just intercept the communication with the socks port?&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;_______________________________________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121014064457</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-10-14 06:44:57-0400</timestampReceived><subject>Re: [tor-dev] Extending Pyonionoo to provide statistics</subject><body>

Hi Damian!

On Sun, Oct 14, 2012 at 2:00 AM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;
&gt; PS. Sathyanarayanan: I was gonna ping you separately but might as well
&gt; hijack this thread - would you mind giving stem's new networkstatus
&gt; module a try in pyonionoo? You can find documentation for it at...
&gt;
&gt; https://stem.readthedocs.org/en/latest/stem.descriptor.html#module-stem.descriptor.networkstatus
&gt;
&gt; ... let me know if you run into any issues!
&gt;

Awesome! I can retire the custom parser that I wrote and use this
instead. The current plan is to finish the frontend(which is just the
web service) first, and then start hacking on the backend(which is the
processing code that is going to use stem). The backend part might not
happen until next month. I'll start bugging you once I start working
on it :)

Thanks,
--Sathya
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121009163155</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-09 16:31:55-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On 10/8/12, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; I should share with the list an update of where I am with a design for
&gt; an improved relay crypto protocol.  For background and motivation,
&gt; please see the last thread on the topic [Prop202].
&gt;
&gt; There are three main questions remaining for me in choosing among new
&gt; relay crypto protocols.  Basically, they are: "Am I comfortable with
&gt; this system?", "Among systems I'm comfortable with, how good is this
&gt; system?", and "Do I know how to implement this system?"
&gt;
&gt; Unfortunately, the stuff I am currently comfortable with and know that
&gt; I could implement is not nearly as good as the stuff that I'm _nearly_
&gt; comfortable enough to use and I don't know how to implement.
&gt;
&gt; Let's talk about some designs in detail, using the same terminology as
&gt; proposal 202.
&gt;
&gt; Note:
&gt;
&gt;    As usual, this is probably largely wrong.  If you find it on a
&gt;    mailing list archive years from now, please don't try to learn
&gt;    cryptography from it.
&gt;
&gt;    What I'm looking for most right now is places where my reasoning is
&gt;    wrong, places where I'm mistaken about what tradeoffs I need need
&gt;    to make, and places where there's research that I should have read
&gt;    or remembered.
&gt;
&gt; I. MAC-AND-PAD DESIGNS
&gt;
&gt; These are the least involved to implement: all you need is an AEAD
&gt; construction and a PRNG.  Those are both pretty well-understood: you
&gt; can build a good PRNG out of any stream cipher, and you can build the
&gt; AEAD mode out of a stream cipher and a MAC, or out of various other
&gt; constructions.
&gt;
&gt; As a wrinkle: it would be good to have a system that generates "two
&gt; MACs for the price of one."  That's because in our topology, we need
&gt; the ability to address relay cells to any node in the circuit, and one
&gt; easy way to do that here is to have a construction that generates two
&gt; MACs, and uses one for "cells that should arrive here" and another for
&gt; "cells that we should relay".  We also want shorter MACs: 16 bytes per
&gt; hop is excessive for our needs.
&gt;
&gt; Authenticators like GCM whose output is the raw result of a polynomial
&gt; evaluation aren't safe to truncate: Ferguson [Ferguson] has a result
&gt; showing that it's easier than it should be to perform forgery against
&gt; truncated-MAC GCM constructions.
&gt;
&gt; On the other hand, polynomial authenticators seem safe to truncate
&gt; (generally) if the encryption step comes _after_ the polynomial
&gt; evaluation.  See for example [Poly1305-Trunc]'s discussion of truncated
&gt; Poly1305 -- I hope it's right.

That reference contains a rather large amount of bullshit; if any of
the results stated there are correct, it's purely by accident.  Read
the security proofs in http://cr.yp.to/papers.html#securitywcs and
http://cr.yp.to/papers.html#poly1305 (I have told you to read them
multiple times now) if you want to use a truncated
polynomial-evaluation MAC.

Or, you can pass the polynomial-evaluation MAC output through a yucky
messy one-way function, then truncate the result of *that*.  (But note
that the only suitable one-way functions that you can compute
efficiently are Salsa20 or ChaCha; AES is not suitable and cannot be
computed efficiently.)


&gt; So to be concrete, let me suggest a few modes of operation.  I believe
&gt; I'm competent to implement these:
&gt;
&gt;   AES-GCM+AES: AES-GCM, except that we add (modulo 2^128) the output
&gt;   of AES(nonce) to each GCM output, in hopes that it will make GCM
&gt;   safe to truncate.  (This is probably crazy somehow.)

This is utter crap.  AES-GCM already adds (in GF(2^128)) the output of
AES(nonce) (roughly) to each GCM output; adding the same value in a
different field/group (a) will not help and (b) will almost certainly
totally break the construction.

&gt;   AES-CTR + HMAC-SHA512/256.
&gt;
&gt;   AES-CTR + Poly1305.  Poly1305 requires nonces, but we can use a
&gt;   counter for those.

Poly1305AES requires nonces.  Poly1305 itself requires
(computationally-indistinguishable-from-) independent keys for each
message.  Please actually read the paper (see also
http://cr.yp.to/papers.html#pema section 2.5 for how DJB uses Poly1305
now).

&gt;   Salsa20 + Poly1305.
&gt;
&gt; For a padding PRNG, we could use any stream cipher we like.
&gt;
&gt; In each case, we'd want to authenticate not only the content of the
&gt; cell, but also the previous cell's authenticator and the position of
&gt; the cell within the stream.
&gt;
&gt; AES-GCM+AES is going to be the fastest on CPUs with specific support
&gt; for AES and GCM, but not on other architectures until/unless more
&gt; chips grow instructions specialized for AES and GF(2^128).
&gt; Salsa20+Poly1305 should be fastest on other architectures.
&gt;
&gt;
&gt;
&gt; This entire category of designs still has the problems that it had
&gt; before: it leaks the length of the circuit to the last node in the
&gt; circuit, and consumes a fairly large portion of each cell (for one
&gt; truncated mac per hop).  Further, it's going to be a bit fiddly
&gt; (though not impossible) to get it to work with rendezvous circuits.

Explicitly leaking the circuit length is very very bad.

The MAC-based designs do not mention how to prevent end-to-end tagging
in the exit-to-client direction.  I suspect they won't try to prevent
it at all.


&gt; II. WIDE-BLOCK DESIGNS
&gt;
&gt; Turn we now to designs where we encrypt each block of the cipher using
&gt; a 509-byte SPRP, such that each block's SPRP is keyed dependently on
&gt; the original key and on the encrypted value of the previous block.
&gt;
&gt; There be dragons here.  Let's talk about some ways we could build
&gt; that.  I'll start by talking about wide-block encryption, then talk
&gt; about getting the "unrecoverability" property where any missing or
&gt; corrupted block makes all future blocks unrecoverable.
&gt;
&gt;
&gt; The wide-block SPRP I've used before is LIONESS [Bear-Lion].  It
&gt; requires two keyed hash operations and two stream cipher operations,
&gt; so it's going to be at best half the speed of the mac-and-pad designs
&gt; above: a little worse, maybe, since it forces us to rekey with every
&gt; block.
&gt;
&gt; Might that be acceptable?  Right now, AES is not a huge fraction of
&gt; our runtime, and a relay does AES on each cell three times (TLS,relay
&gt; crypto,TLS) and SHA1 on each cell twice (TLS,TLS).  An exit does AES
&gt; on each cell twice (TLS,relay) and SHA1 on each cell twice
&gt; (TLS,relay). So for relays, with a naive SHA1-AES LIONESS, we'd be
&gt; increasing the stream-cipher operations by 25% and the digests by
&gt; 100%.  On an exit, we'd be increasing the stream-cipher operations by
&gt; 33% and the digests by 100%.
&gt;
&gt; If we were to go with LIONESS, we'd surely want to look into faster,
&gt; better keyed-hash algorithms than SHA1.   I don't know whether one of
&gt; the polynomial MACs above would be good enough, or whether we need
&gt; other cryptographic digest properties that those don't give us and
&gt; we'd need to turn to SHA256 or something.
&gt;
&gt;
&gt;
&gt; I've heard some suggestions that we should look into BEAR or LION
&gt; instead, but I'm leery of the idea.  They are faster, requiring one
&gt; fewer application of their primitives, but they are PRPs, not SPRPs --
&gt; meaning I think that they don't give you Ind-CCA2 [Bear-Lion, section
&gt; 6].  I don't know a way to exploit this in the Tor network, but
&gt; deviating from an ideal block cipher seems to me like one of those
&gt; ideas that's practically begging for disaster.

The notion of ‘Ind-CCA2' is defined for public-key encryption systems;
it doesn't make sense for permutations.

Even LIONESS is not an ‘ideal block cipher' -- that term has an actual
definition, and it is a much stronger assumption than Tor's relay
crypto needs.  (http://cs.nyu.edu/~dodis/ps/ic-ro.pdf and
http://cs.nyu.edu/~dodis/ps/ext-cipher.pdf contain some potentially
useful, potentially interesting information.)

Keep in mind that Tor's current relay crypto breaks *completely* if
the circuit-extension handshake ever produces the same session key
twice, and some parts of Tor's protocols will still require that
assumption even if the relay crypto doesn't.  Therefore, you really
don't need to worry about attacks that require more than one call to
the permutation in either direction.


&gt; Can we get faster than LIONESS?  Indeed we can!  There are a pile of
&gt; constructions.  If I understand correctly, and I'm not missing
&gt; anything, the ones we might want to use fall into two broad
&gt; categories: those that (like LIONESS) split the message into a short
&gt; bit and a long bit, then treat them differently; and those that apply
&gt; a transformation on the message, encrypt the message, and transform it
&gt; again.
&gt;
&gt; The first category (split, then frob each part based on the other once
&gt; or twice) would appear to be more of a patent minefield, thanks to the
&gt; XCB patent.  The ones to look at here are [HCTR] and [HCH], which
&gt; require two applications of a universal hash function (can be
&gt; polynomial-based) and approximately one encryption pass.  HCH is a
&gt; little more unlike XCB.  Neither is exactly trivial.  We could build
&gt; either one out of whatever field and stream cipher we wanted, as
&gt; above, though bitsliced AES-CTR wouldn't be efficient in this case: we
&gt; aren't generating enough stream at once for bitslicing to pay off.
&gt;
&gt; The second category (frob, encrypt, frob) is pretty elegant IMO. The
&gt; best-explained of these I've seen so far are in a
&gt; paper by Palash Sarkar [Efficient-Tweakable], though the earlier TET
&gt; construction [TET] might also be cool.  For these, you need an
&gt; invertible block-wise (Almost) (Xor-)Universal hash function,
&gt; typically implemented with GF(2^128).  I'm not sure if you could use a
&gt; different field.

Please actually *read* http://cr.yp.to/papers.html#securitywcs this
time (read the appendix first).  If you use polynomial evaluation over
a different field, your ‘hash function' will have small differential
properties with respect to addition *in that field*.  The Poly1305
paper then proves that the polynomial-evaluation part of Poly1305 also
has small differential properties with respect to addition in
Z/(2^128)Z .

In short, you can use a different field for polynomial evaluation *if*
you also use a different addition operation.

(If you're going to pass the result of the polynomial-evaluation
function through a one-way function so that you can tee off some bits
for a chaining output, you can use whatever addition operation you
want after the OWF.)

&gt;  The multiplication operations here appear to be
&gt; multiplication by a primitive element, and multiplication by a per-key
&gt; element.  The encryption step can be realized with a somewhat
&gt; unorthodox counter-mode stream cipher, or a ciphertext-stealing ECB
&gt; approach.  I don't know what you'd need to do to substitute in an
&gt; orthodox stream cipher for the one used in iHCH.  Sarkar seems to see
&gt; iHCH as a successor to HCH, which is a little worrisome given that HCH
&gt; is a spiritual descendant of the patented XCB, but to me the two
&gt; constructions (HCH, iHCH) look practically nothing alike except for
&gt; their use of a counter mode step.
&gt;
&gt; I am a little intimidated by the idea of trying to implement one of
&gt; these ciphers.

LION (implemented with ChaCha and CubeHash512, with an extra 256 bits
of chaining output from each step) sounds like the safe-and-sane
approach for now; changing the protocol again if the U.S. patent
system expires won't be nearly as hard as changing the protocol the
first time.

(BLAKE-512 might be a faster hash function on some processors, but
requires 64-bit operations.  BLAKE-256 would be faster, but then (a)
you don't get a chaining output from any function computed directly
over R, and (b) you still need to produce 512 bits of
(computationally-indistinguishable-from-)independent key material from
some hash function in the chaining step.  CubeHash512 will never be
broken as an entropy extractor in less time than the Curve25519-based
circuit-extension handshake.)


(Does the XCB patent cover LION-like constructions with the ‘hash
function' in the middle replaced with a polynomial-evaluation
function?  I'm not convinced that a suitable approximately-256-bit
polynomial-evaluation function will be much faster than ChaCha,
especially in 32-bit code.)


&gt; Above, I haven't taken one of our requirements into account: that any
&gt; change to a single cell must make all future cells unrecoverable.
&gt;
&gt; There are modes that are supposed to prevent this, and applying them
&gt; to a decent wide-block cipher might solve the issue. IGE is one of
&gt; them [IGE], but it turns out to be broken by an attacker who knows
&gt; some plaintext.  The Accumulated Block Chaining [ABC] construction is
&gt; supposed to fix that; I'm not too sure whether it's correct or
&gt; efficient.
&gt;
&gt; As a blunt-force approach to the problem, we could rekey between each
&gt; block, using new keys based on a MAC of the last block.  This would be
&gt; pretty inefficient for primitives that need any serious amount of
&gt; per-key computation.

Use a ‘PRF', not a MAC.  (And don't use primitives that need per-key
precomputation.)

&gt; Finally, we could look into constructions that produce an extra secret
&gt; output incidental to their regular operation, and which are easily
&gt; rekeyed for each operation.

This is the only option that you actually have a design for.

You'll still need to process the chaining outputs from LION with a PRF
(i.e. keyed hash function).


&gt; In this whole field, we need to keep an eye out for the patents on
&gt; CMC, EME, and XCB.  "Joy."
&gt;
&gt;
&gt;
&gt; III. CHOICE OF CIPHERS AND OTHER PRIMITIVES
&gt;
&gt; I am hearing exactly two recommendations for encryption primitives
&gt; nowadays: AES and Salsa20 (and its family).  Nobody's recommending
&gt; anything else as far as I can tell.
&gt;
&gt; AES is still the IBM of the block cipher world, which "Nobody Ever Got
&gt; Fired For Using."  It's a bit of a pain to use it in software, though.
&gt; Its most obvious implementations have timing attacks due to table
&gt; lookups [DJB-Timing].  OpenSSL has three fast x86 implementations: one
&gt; of them uses vector permutations, one uses bit-slicing, and one uses
&gt; the aesni instructions to invoke the chip's built-in AES capabilities.
&gt; On high-end Intel chips, these take about 12-25, 7-9, and 1.5 cycles
&gt; per byte respectively.  The bitsliced one really needs to encrypt 4KiB
&gt; at a time (yes, kibibytes), which makes it fine for counter mode but
&gt; not so good for CBC.  (Those numbers are from the OpenSSL source.)
&gt; Key setup times are cheap for all of these (I think!), but the
&gt; bitsliced implementation gets expensive if you change the key (or
&gt; the stream position).
&gt;
&gt;
&gt; Salsa20 (and its descendant, ChaCha) is the Obvious Second Choice for
&gt; people who don't want to use AES.  It is faster than AES on every
&gt; platform except those with hardware support for AES; 4-7 cycles per
&gt; byte seems typical for high-end Intel stuff.  You would probably have
&gt; to go out of your way to implement it in a way that was vulnerable to
&gt; timing side-channel attacks.  The only arguments for its insecurity
&gt; that I'm aware of are that although it has fewer known flaws than AES,
&gt; it has received less attention than AES, therefore is likelier to
&gt; _unsuspected_ problems.  The counterargument there is that there _are_
&gt; several dozen cryptographers who have tried to attack it (or attack
&gt; reduced-round variants of it), several of whom have also done
&gt; successful results against AES. [DJB-Comm] Per-key setup time is
&gt; basically nonexistent.

Per-key setup time consists of one vector addition (of the first half
of the key into the constants).  (DJB's timing reports in
http://cr.yp.to/papers.html#chacha repeat this operation for each
block, but I would rather do it once per key if at all possible.)


&gt; There are a lot of constructions out there that want to do
&gt; multiplication in GF(2^128) as a basic operation.  That turns out to
&gt; be less than totally straightforward, though.  On newer intel chips,
&gt; you've got a "multiply without carry" instruction that can supposedly
&gt; let you get to around 2 cycles per byte.  On other platforms, you're
&gt; reduced to worse trickery to try to get good performance without
&gt; timing side-channels, for an amount of trickery dependent on what
&gt; operation you're trying to do exactly.
&gt;
&gt; The easiest GF(2^128) operation to implement safely and quickly is
&gt; multiplication by a known compile-time value. (It's easy enough that
&gt; even I could do it.)  Next easiest is multiply a large number of
&gt; values by the same run-time-fixed value -- you do precomputation on
&gt; the value in order to generate some tables.  (The scary, fast variants
&gt; use big tables; the still-a-little-scary variants use 256-byte tables,
&gt; and get performance on high-end Intel boxes around 7-10 cycles per
&gt; byte when doing GCM.)  Full-on multiplication of two arbitrary
&gt; GF(2^128) values is slowest still.

The obvious way to implement GF(2^128) multiplication of a large
number of secret inputs y by one learned-at-runtime secret c is:

* Compute a table of c*X^i for i = 0, ..., 127.  (This table takes
128*128 bits, or 2048 bytes.  Multiplication by X is easy and
tolerably fast.)
* For each input y (= y_0*X^0 + ... + y_127*X^127, with the y_i in
GF(2)), compute y_0*(c*X^0) + ... + y_127*(c*X^127).  (You've done
this step for Pynchon Gate already; hopefully that runs in constant
time.)


&gt; As a further wrinkle with GF(2^128), OpenSSL doesn't seem to actually
&gt; expose its "multiply in GF(2^128)" functions as far as I can tell: we
&gt; would need to snarf such code from elsewhere.
&gt;
&gt;
&gt; Oh! ARMv8 has an optional crypto instruction set that supports AES,
&gt; SHA256, and GF(2^128) multiplication [ARMv8].  If it looks like most
&gt; of the ARMs we care about are going to get it, that could factor into
&gt; our planning.

I won't believe claims that AES hardware will be widely available
until it actually is present in every new processor from a major
manufacturer.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121009185310</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-09 18:53:10-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On 10/9/12, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
&gt; On 10/8/12, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:

&gt;&gt; The second category (frob, encrypt, frob) is pretty elegant IMO. The
&gt;&gt; best-explained of these I've seen so far are in a
&gt;&gt; paper by Palash Sarkar [Efficient-Tweakable], though the earlier TET
&gt;&gt; construction [TET] might also be cool.  For these, you need an
&gt;&gt; invertible block-wise (Almost) (Xor-)Universal hash function,
&gt;&gt; typically implemented with GF(2^128).  I'm not sure if you could use a
&gt;&gt; different field.
&gt;
&gt; Please actually *read* http://cr.yp.to/papers.html#securitywcs this
&gt; time (read the appendix first).  If you use polynomial evaluation over
&gt; a different field, your ‘hash function' will have small differential
&gt; properties with respect to addition *in that field*.  The Poly1305
&gt; paper then proves that the polynomial-evaluation part of Poly1305 also
&gt; has small differential properties with respect to addition in
&gt; Z/(2^128)Z .
&gt;
&gt; In short, you can use a different field for polynomial evaluation *if*
&gt; you also use a different addition operation.

Sorry -- that paper does require polynomials over a field of the same
size as a block cipher's block size (for AES, that means GF(2^128)),
and does not work with general almost-(xor-)universal hash functions.

&gt; (If you're going to pass the result of the polynomial-evaluation
&gt; function through a one-way function so that you can tee off some bits
&gt; for a chaining output, you can use whatever addition operation you
&gt; want after the OWF.)

I don't see a way to obtain a chaining output from iHCH or HOH.

&gt;&gt;  The multiplication operations here appear to be
&gt;&gt; multiplication by a primitive element, and multiplication by a per-key
&gt;&gt; element.  The encryption step can be realized with a somewhat
&gt;&gt; unorthodox counter-mode stream cipher, or a ciphertext-stealing ECB
&gt;&gt; approach.  I don't know what you'd need to do to substitute in an
&gt;&gt; orthodox stream cipher for the one used in iHCH.  Sarkar seems to see
&gt;&gt; iHCH as a successor to HCH, which is a little worrisome given that HCH
&gt;&gt; is a spiritual descendant of the patented XCB, but to me the two
&gt;&gt; constructions (HCH, iHCH) look practically nothing alike except for
&gt;&gt; their use of a counter mode step.

iHCH and HOH use a block cipher, not just a stream cipher.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121009205233</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-09 20:52:33-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On Tue, Oct 9, 2012 at 12:31 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt; wrote:
 [...]
&gt;&gt;   AES-CTR + HMAC-SHA512/256.
&gt;&gt;
&gt;&gt;   AES-CTR + Poly1305.  Poly1305 requires nonces, but we can use a
&gt;&gt;   counter for those.
&gt;
&gt; Poly1305AES requires nonces.  Poly1305 itself requires
&gt; (computationally-indistinguishable-from-) independent keys for each
&gt; message.

Right; I meant to say the output of a stream cipher used as a PRF, but
what I meant isn't what I said.  Should've proofed more carefully

&gt;  Please actually read the paper (see also
&gt; http://cr.yp.to/papers.html#pema section 2.5 for how DJB uses Poly1305
&gt; now).

I read everything I cited.  If there is something I didn't understand,
or something I missed, or something I got wrong, or something I said
wrong, that doesn't mean I didn't read the paper.

I am not going to be able to draw all the right inferences from every
paper on my own, though.  And I am *definitely*, *frequently*, going
to read papers, come up with questions, and post those questions here
sometimes even when the paper, properly understood, would answer my
questions.  If I were writing for publication, I'd want to keep all my
ideas secret until I could answer all my questions and make sure all
my answers were right, but I'm not writing for publication -- I am
writing to get feedback from other people and learn things.  Thank you
for helping me learn things!

Also thank you for reminding me to read
http://cr.yp.to/antiforgery/securitywcs-20050227.pdf again.  I'll
check it out.

&gt;&gt;   Salsa20 + Poly1305.
&gt;&gt;
&gt;&gt; For a padding PRNG, we could use any stream cipher we like.
&gt;&gt;
&gt;&gt; In each case, we'd want to authenticate not only the content of the
&gt;&gt; cell, but also the previous cell's authenticator and the position of
&gt;&gt; the cell within the stream.
&gt;&gt;
&gt;&gt; AES-GCM+AES is going to be the fastest on CPUs with specific support
&gt;&gt; for AES and GCM, but not on other architectures until/unless more
&gt;&gt; chips grow instructions specialized for AES and GF(2^128).
&gt;&gt; Salsa20+Poly1305 should be fastest on other architectures.
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; This entire category of designs still has the problems that it had
&gt;&gt; before: it leaks the length of the circuit to the last node in the
&gt;&gt; circuit, and consumes a fairly large portion of each cell (for one
&gt;&gt; truncated mac per hop).  Further, it's going to be a bit fiddly
&gt;&gt; (though not impossible) to get it to work with rendezvous circuits.
&gt;
&gt; Explicitly leaking the circuit length is very very bad.

Are there any non-obvious reasons why?  Does it lead to any better
attacks than the obvious ones?

&gt; The MAC-based designs do not mention how to prevent end-to-end tagging
&gt; in the exit-to-client direction.  I suspect they won't try to prevent
&gt; it at all.

That's correct.  Why would it be an attack for the exit to send a
covert signal to the client?  The exit already has valid means to send
overt signals to the client, and the client Tor is presumed not to
want to break its own anonymity.

&gt;&gt; II. WIDE-BLOCK DESIGNS
&gt;&gt;
&gt;&gt; Turn we now to designs where we encrypt each block of the cipher using
&gt;&gt; a 509-byte SPRP, such that each block's SPRP is keyed dependently on
&gt;&gt; the original key and on the encrypted value of the previous block.
&gt;&gt;
&gt;&gt; There be dragons here.  Let's talk about some ways we could build
&gt;&gt; that.  I'll start by talking about wide-block encryption, then talk
&gt;&gt; about getting the "unrecoverability" property where any missing or
&gt;&gt; corrupted block makes all future blocks unrecoverable.
&gt;&gt;
&gt;&gt;
&gt;&gt; The wide-block SPRP I've used before is LIONESS [Bear-Lion].  It
&gt;&gt; requires two keyed hash operations and two stream cipher operations,
&gt;&gt; so it's going to be at best half the speed of the mac-and-pad designs
&gt;&gt; above: a little worse, maybe, since it forces us to rekey with every
&gt;&gt; block.
&gt;&gt;
&gt;&gt; Might that be acceptable?  Right now, AES is not a huge fraction of
&gt;&gt; our runtime, and a relay does AES on each cell three times (TLS,relay
&gt;&gt; crypto,TLS) and SHA1 on each cell twice (TLS,TLS).  An exit does AES
&gt;&gt; on each cell twice (TLS,relay) and SHA1 on each cell twice
&gt;&gt; (TLS,relay). So for relays, with a naive SHA1-AES LIONESS, we'd be
&gt;&gt; increasing the stream-cipher operations by 25% and the digests by
&gt;&gt; 100%.  On an exit, we'd be increasing the stream-cipher operations by
&gt;&gt; 33% and the digests by 100%.
&gt;&gt;
&gt;&gt; If we were to go with LIONESS, we'd surely want to look into faster,
&gt;&gt; better keyed-hash algorithms than SHA1.   I don't know whether one of
&gt;&gt; the polynomial MACs above would be good enough, or whether we need
&gt;&gt; other cryptographic digest properties that those don't give us and
&gt;&gt; we'd need to turn to SHA256 or something.
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; I've heard some suggestions that we should look into BEAR or LION
&gt;&gt; instead, but I'm leery of the idea.  They are faster, requiring one
&gt;&gt; fewer application of their primitives, but they are PRPs, not SPRPs --
&gt;&gt; meaning I think that they don't give you Ind-CCA2 [Bear-Lion, section
&gt;&gt; 6].  I don't know a way to exploit this in the Tor network, but
&gt;&gt; deviating from an ideal block cipher seems to me like one of those
&gt;&gt; ideas that's practically begging for disaster.
&gt;
&gt; The notion of ‘Ind-CCA2’ is defined for public-key encryption systems;
&gt; it doesn't make sense for permutations.
&gt;
&gt; Even LIONESS is not an ‘ideal block cipher’ -- that term has an actual
&gt; definition, and it is a much stronger assumption than Tor's relay
&gt; crypto needs.  (http://cs.nyu.edu/~dodis/ps/ic-ro.pdf and
&gt; http://cs.nyu.edu/~dodis/ps/ext-cipher.pdf contain some potentially
&gt; useful, potentially interesting information.)
&gt;
&gt; Keep in mind that Tor's current relay crypto breaks *completely* if
&gt; the circuit-extension handshake ever produces the same session key
&gt; twice, and some parts of Tor's protocols will still require that
&gt; assumption even if the relay crypto doesn't.  Therefore, you really
&gt; don't need to worry about attacks that require more than one call to
&gt; the permutation in either direction.

Ah, so I think you are claiming that LION or BEAR on its own is fine
if they are only used once with each key, and that any sane cell
chaining construction we use will involve re-keying them with each
block, so we can ignore any attack on them that would require multiple
invocations of the encryption/decryption function with the same key.

Do I understand you correctly there?

[...]
&gt;&gt; The multiplication operations here appear to be
&gt;&gt; multiplication by a primitive element, and multiplication by a per-key
&gt;&gt; element.  The encryption step can be realized with a somewhat
&gt;&gt; unorthodox counter-mode stream cipher, or a ciphertext-stealing ECB
&gt;&gt; approach.  I don't know what you'd need to do to substitute in an
&gt;&gt; orthodox stream cipher for the one used in iHCH.  Sarkar seems to see
&gt;&gt; iHCH as a successor to HCH, which is a little worrisome given that HCH
&gt;&gt; is a spiritual descendant of the patented XCB, but to me the two
&gt;&gt; constructions (HCH, iHCH) look practically nothing alike except for
&gt;&gt; their use of a counter mode step.
&gt;&gt;
&gt;&gt; I am a little intimidated by the idea of trying to implement one of
&gt;&gt; these ciphers.
&gt;
&gt; LION (implemented with ChaCha and CubeHash512, with an extra 256 bits
&gt; of chaining output from each step) sounds like the safe-and-sane
&gt; approach for now; changing the protocol again if the U.S. patent
&gt; system expires won't be nearly as hard as changing the protocol the
&gt; first time.
&gt;
&gt; (BLAKE-512 might be a faster hash function on some processors, but
&gt; requires 64-bit operations.  BLAKE-256 would be faster, but then (a)
&gt; you don't get a chaining output from any function computed directly
&gt; over R, and (b) you still need to produce 512 bits of
&gt; (computationally-indistinguishable-from-)independent key material from
&gt; some hash function in the chaining step.  CubeHash512 will never be
&gt; broken as an entropy extractor in less time than the Curve25519-based
&gt; circuit-extension handshake.)

Interesting; I had stopped considering CubeHash when got dropped from
the SHA-3 competition.  I'll have to find out who's been working on
analyzing it since then.

Can you be more explicit about where the chaining output is taken from
when, and how exactly it gets used, in this design?

Also, why LION and not BEAR?


&gt; (Does the XCB patent cover LION-like constructions with the ‘hash
&gt; function’ in the middle replaced with a polynomial-evaluation
&gt; function?  I'm not convinced that a suitable approximately-256-bit
&gt; polynomial-evaluation function will be much faster than ChaCha,
&gt; especially in 32-bit code.)

I haven't read the XCB patent, and won't, pending legal advice from
Wendy telling me that it's okay to read it.

 [...]
&gt; The obvious way to implement GF(2^128) multiplication of a large
&gt; number of secret inputs y by one learned-at-runtime secret c is:
&gt;
&gt; * Compute a table of c*X^i for i = 0, ..., 127.  (This table takes
&gt; 128*128 bits, or 2048 bytes.  Multiplication by X is easy and
&gt; tolerably fast.)
&gt; * For each input y (= y_0*X^0 + ... + y_127*X^127, with the y_i in
&gt; GF(2)), compute y_0*(c*X^0) + ... + y_127*(c*X^127).  (You've done
&gt; this step for Pynchon Gate already; hopefully that runs in constant
&gt; time.)

Hm. Did you figure out cycles-per-byte on that one?

Back-of-the-envelope:

Assuming 64-bit words, we're looking at a 128 instances of "get a bit
from y," 128*2 instances of "Load the corresponding word from the
table, then constant-time-conditionally-xor that word to the
accumulator."

The fast portable implementation of the conditional-xor I know, for a
single bit in 'b', and a value in 'x' to be conditionally xored into
'a' is:  "a ^=  x &amp; ~(b-1)".

I *think* that's roughly 128 (and, sub, not) to get a mask for each
bit, 128 shifts, then 256 loads, 256 ands (to apply the mask), and 256
xors.  (Some of these operations are unnecessary; I am committing
fencepost errors here. I'm also assuming all loads are one-cycle.)

So that's about 1280 operations for 16 bytes of input to be multiplied
by c, so that seems like something like 80 instructions per byte for a
naive implementation. There are still probably more optimizations to
be done, especially if we have wacky SIMD features to play with, or we
can combine some of the operations above into single ones.  Dynamic
multiple issue and such CPU architectural tricks might get it down
even more.  Nevertheless, it still looks like it'd be expensive enough
getting GF(2^128) right to make GF(2^128) unattractive.

Still, maybe somebody should hack this up for the public good, whether
we turn out to need GF(2^128) or not.

&gt;&gt; As a further wrinkle with GF(2^128), OpenSSL doesn't seem to actually
&gt;&gt; expose its "multiply in GF(2^128)" functions as far as I can tell: we
&gt;&gt; would need to snarf such code from elsewhere.
&gt;&gt;
&gt;&gt;
&gt;&gt; Oh! ARMv8 has an optional crypto instruction set that supports AES,
&gt;&gt; SHA256, and GF(2^128) multiplication [ARMv8].  If it looks like most
&gt;&gt; of the ARMs we care about are going to get it, that could factor into
&gt;&gt; our planning.
&gt;
&gt; I won't believe claims that AES hardware will be widely available
&gt; until it actually is present in every new processor from a major
&gt; manufacturer.

Agreed.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121010031628</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-10 03:16:28-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On 10/9/12, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Tue, Oct 9, 2012 at 12:31 PM, Robert Ransom &lt;rransom.8774@gmail.com&gt;
&gt; wrote:
&gt;  [...]
&gt;&gt;&gt;   AES-CTR + HMAC-SHA512/256.
&gt;&gt;&gt;
&gt;&gt;&gt;   AES-CTR + Poly1305.  Poly1305 requires nonces, but we can use a
&gt;&gt;&gt;   counter for those.
&gt;&gt;
&gt;&gt; Poly1305AES requires nonces.  Poly1305 itself requires
&gt;&gt; (computationally-indistinguishable-from-) independent keys for each
&gt;&gt; message.
&gt;
&gt; Right; I meant to say the output of a stream cipher used as a PRF, but
&gt; what I meant isn't what I said.  Should've proofed more carefully
&gt;
&gt;&gt;  Please actually read the paper (see also
&gt;&gt; http://cr.yp.to/papers.html#pema section 2.5 for how DJB uses Poly1305
&gt;&gt; now).
&gt;
&gt; I read everything I cited.  If there is something I didn't understand,
&gt; or something I missed, or something I got wrong, or something I said
&gt; wrong, that doesn't mean I didn't read the paper.
&gt;
&gt; I am not going to be able to draw all the right inferences from every
&gt; paper on my own, though.  And I am *definitely*, *frequently*, going
&gt; to read papers, come up with questions, and post those questions here
&gt; sometimes even when the paper, properly understood, would answer my
&gt; questions.  If I were writing for publication, I'd want to keep all my
&gt; ideas secret until I could answer all my questions and make sure all
&gt; my answers were right, but I'm not writing for publication -- I am
&gt; writing to get feedback from other people and learn things.

You have been talking about using Poly1305 truncated to 64 bits for
weeks.  It is truly not difficult to find Theorem 3.3 in the Poly1305
paper and figure out that the polynomial-evaluation part of Poly1305
truncated to its first (least significant) 64 bits has differential
probabilities of at most 2^(-34) for Tor-cell-size messages (and thus
Poly1305 has a probability of forgery of at most 2^(-34) when
truncated to its first 64 bits).



&gt;&gt;&gt; This entire category of designs still has the problems that it had
&gt;&gt;&gt; before: it leaks the length of the circuit to the last node in the
&gt;&gt;&gt; circuit, and consumes a fairly large portion of each cell (for one
&gt;&gt;&gt; truncated mac per hop).  Further, it's going to be a bit fiddly
&gt;&gt;&gt; (though not impossible) to get it to work with rendezvous circuits.
&gt;&gt;
&gt;&gt; Explicitly leaking the circuit length is very very bad.
&gt;
&gt; Are there any non-obvious reasons why?  Does it lead to any better
&gt; attacks than the obvious ones?

* Cannibalized circuits are one hop longer than non-cannibalized
circuits; knowing that a particular circuit was cannibalized leaks
information about the client's previous exit-selection behaviour.

* Some users might want to use alternate path-selection algorithms
(e.g. http://freehaven.net/anonbib/#ccs2011-trust ); they might not
want to leak the fact that they are using such algorithms to the
non-first relays in their entry-guard chains.


&gt;&gt; The MAC-based designs do not mention how to prevent end-to-end tagging
&gt;&gt; in the exit-to-client direction.  I suspect they won't try to prevent
&gt;&gt; it at all.
&gt;
&gt; That's correct.  Why would it be an attack for the exit to send a
&gt; covert signal to the client?  The exit already has valid means to send
&gt; overt signals to the client, and the client Tor is presumed not to
&gt; want to break its own anonymity.

* Mallory's malicious entry and exit relays suspect (based on timing
correlation) that they control both ends of a circuit, and want to
confirm that.  The exit tags a cell it sends to the client by XORing
it with a secret random constant; the entry XORs (what it believes is)
that cell with the same constant.  If the circuit survives, Mallory's
relays know that they control both ends.

* Mallory doesn't want to pay the bandwidth costs for non-compromised
traffic, so his/her/its entry and exit relays tag *every* circuit's
first exit-to-client cell with the same secret random constant.  (You
added a crapload of bugs to 0.2.3.x based on Mike Perry's claim that
someone is likely to actually perform an ‘attack' of this form.)



&gt;&gt;&gt; I've heard some suggestions that we should look into BEAR or LION
&gt;&gt;&gt; instead, but I'm leery of the idea.  They are faster, requiring one
&gt;&gt;&gt; fewer application of their primitives, but they are PRPs, not SPRPs --
&gt;&gt;&gt; meaning I think that they don't give you Ind-CCA2 [Bear-Lion, section
&gt;&gt;&gt; 6].  I don't know a way to exploit this in the Tor network, but
&gt;&gt;&gt; deviating from an ideal block cipher seems to me like one of those
&gt;&gt;&gt; ideas that's practically begging for disaster.
&gt;&gt;
&gt;&gt; The notion of ‘Ind-CCA2' is defined for public-key encryption systems;
&gt;&gt; it doesn't make sense for permutations.
&gt;&gt;
&gt;&gt; Even LIONESS is not an ‘ideal block cipher' -- that term has an actual
&gt;&gt; definition, and it is a much stronger assumption than Tor's relay
&gt;&gt; crypto needs.  (http://cs.nyu.edu/~dodis/ps/ic-ro.pdf and
&gt;&gt; http://cs.nyu.edu/~dodis/ps/ext-cipher.pdf contain some potentially
&gt;&gt; useful, potentially interesting information.)
&gt;&gt;
&gt;&gt; Keep in mind that Tor's current relay crypto breaks *completely* if
&gt;&gt; the circuit-extension handshake ever produces the same session key
&gt;&gt; twice, and some parts of Tor's protocols will still require that
&gt;&gt; assumption even if the relay crypto doesn't.  Therefore, you really
&gt;&gt; don't need to worry about attacks that require more than one call to
&gt;&gt; the permutation in either direction.
&gt;
&gt; Ah, so I think you are claiming that LION or BEAR on its own is fine
&gt; if they are only used once with each key, and that any sane cell
&gt; chaining construction we use will involve re-keying them with each
&gt; block, so we can ignore any attack on them that would require multiple
&gt; invocations of the encryption/decryption function with the same key.
&gt;
&gt; Do I understand you correctly there?

Yes.


&gt; [...]
&gt;&gt;&gt; The multiplication operations here appear to be
&gt;&gt;&gt; multiplication by a primitive element, and multiplication by a per-key
&gt;&gt;&gt; element.  The encryption step can be realized with a somewhat
&gt;&gt;&gt; unorthodox counter-mode stream cipher, or a ciphertext-stealing ECB
&gt;&gt;&gt; approach.  I don't know what you'd need to do to substitute in an
&gt;&gt;&gt; orthodox stream cipher for the one used in iHCH.  Sarkar seems to see
&gt;&gt;&gt; iHCH as a successor to HCH, which is a little worrisome given that HCH
&gt;&gt;&gt; is a spiritual descendant of the patented XCB, but to me the two
&gt;&gt;&gt; constructions (HCH, iHCH) look practically nothing alike except for
&gt;&gt;&gt; their use of a counter mode step.
&gt;&gt;&gt;
&gt;&gt;&gt; I am a little intimidated by the idea of trying to implement one of
&gt;&gt;&gt; these ciphers.
&gt;&gt;
&gt;&gt; LION (implemented with ChaCha and CubeHash512, with an extra 256 bits
&gt;&gt; of chaining output from each step) sounds like the safe-and-sane
&gt;&gt; approach for now; changing the protocol again if the U.S. patent
&gt;&gt; system expires won't be nearly as hard as changing the protocol the
&gt;&gt; first time.
&gt;&gt;
&gt;&gt; (BLAKE-512 might be a faster hash function on some processors, but
&gt;&gt; requires 64-bit operations.  BLAKE-256 would be faster, but then (a)
&gt;&gt; you don't get a chaining output from any function computed directly
&gt;&gt; over R, and (b) you still need to produce 512 bits of
&gt;&gt; (computationally-indistinguishable-from-)independent key material from
&gt;&gt; some hash function in the chaining step.  CubeHash512 will never be
&gt;&gt; broken as an entropy extractor in less time than the Curve25519-based
&gt;&gt; circuit-extension handshake.)
&gt;
&gt; Interesting; I had stopped considering CubeHash when got dropped from
&gt; the SHA-3 competition.  I'll have to find out who's been working on
&gt; analyzing it since then.
&gt;
&gt; Can you be more explicit about where the chaining output is taken from
&gt; when, and how exactly it gets used, in this design?

For encryption:

* Split the 512-byte plaintext cell into 480-byte R and 32-byte L.
(The names are reversed to match the original description of LION.)
* Let header be the first 3 bytes of R; replace the first 3 bytes of R
with zeros.
* Let C_1 be the first 32 bytes of ChaCha(L XOR K_1, "LION p.1"); let
T be the next 480 bytes.
* XOR T into R.  Replace the first 3 bytes of R with zeros.
* Let T be the first 32 bytes of CubeHash512(R); let C_2 be the other 32 bytes.
* XOR T into L.
* Let C_3 be the first 32 bytes of ChaCha(L XOR K_2, "LION p.2"); let
T be the next 480 bytes.
* XOR T into R.  Replace the first 3 bytes of R with header.
* The ciphertext is concat(R, L).

(Decryption is easy, and produces the same C_i.)

To compute keys for the next block:

* Compute CubeHash512(concat(K_3, C_1, C_2, C_3)); let K_1 be its
first 32 bytes; let K_2 be the next 32 bytes.


The chaining step absolutely requires 512 bits of output.  That could
be obtained by computing one ChaCha block using the output of
BLAKE-256 as a key, but CubeHash is simpler, at least as secure, and
probably as fast.


&gt; Also, why LION and not BEAR?

ChaCha12 is definitely faster than BLAKE-256 or CubeHash, and you
aren't going to use a reduced-round variant of a hash function.


&gt;  [...]
&gt;&gt; The obvious way to implement GF(2^128) multiplication of a large
&gt;&gt; number of secret inputs y by one learned-at-runtime secret c is:
&gt;&gt;
&gt;&gt; * Compute a table of c*X^i for i = 0, ..., 127.  (This table takes
&gt;&gt; 128*128 bits, or 2048 bytes.  Multiplication by X is easy and
&gt;&gt; tolerably fast.)
&gt;&gt; * For each input y (= y_0*X^0 + ... + y_127*X^127, with the y_i in
&gt;&gt; GF(2)), compute y_0*(c*X^0) + ... + y_127*(c*X^127).  (You've done
&gt;&gt; this step for Pynchon Gate already; hopefully that runs in constant
&gt;&gt; time.)
&gt;
&gt; Hm. Did you figure out cycles-per-byte on that one?

Nope.  This was just a proof-of-concept.  (It also provides an upper
bound on the amount of table that a secure implementation can
reasonably use; anything with a larger table will need to do too much
I/O.)

&gt; Back-of-the-envelope:
&gt;
&gt; Assuming 64-bit words, we're looking at a 128 instances of "get a bit
&gt; from y," 128*2 instances of "Load the corresponding word from the
&gt; table, then constant-time-conditionally-xor that word to the
&gt; accumulator."

All 64-bit processors have SIMD instructions.  In general, consider
32-bit words and 4-element (128-bit) vectors of 32-bit words; those
are efficient enough everywhere.

&gt; The fast portable implementation of the conditional-xor I know, for a
&gt; single bit in 'b', and a value in 'x' to be conditionally xored into
&gt; 'a' is:  "a ^=  x &amp; ~(b-1)".

Invert y (bitwise) first (in one vector instruction or four word
instructions); then you can skip inverting each b-1 .  (Someone may
need to patch your Pynchon Gate code.)

&gt; I *think* that's roughly 128 (and, sub, not) to get a mask for each
&gt; bit, 128 shifts, then 256 loads, 256 ands (to apply the mask), and 256
&gt; xors.  (Some of these operations are unnecessary; I am committing
&gt; fencepost errors here. I'm also assuming all loads are one-cycle.)
&gt;
&gt; So that's about 1280 operations for 16 bytes of input to be multiplied
&gt; by c, so that seems like something like 80 instructions per byte for a
&gt; naive implementation. There are still probably more optimizations to
&gt; be done, especially if we have wacky SIMD features to play with, or we
&gt; can combine some of the operations above into single ones.  Dynamic
&gt; multiple issue and such CPU architectural tricks might get it down
&gt; even more.  Nevertheless, it still looks like it'd be expensive enough
&gt; getting GF(2^128) right to make GF(2^128) unattractive.

With the not operation for each bit removed, the 64-bit-word operation
count drops to around 1024.

With 32-bit words, that's 512 each of load, and, xor ; the total
number of instructions is around 1920 on a plain 32-bit processor.

With SIMD, that's 128 each of load, and, xor , but the ‘compute a mask
for each bit' step is annoying and processor-specific, so it's not
much better in terms of instruction count than 64-bit words.  However,
the table can be computed in a slightly different format to make it
easier to compute masks in the SIMD registers; that should get down to
not much more than 768 instructions.

&gt; Still, maybe somebody should hack this up for the public good, whether
&gt; we turn out to need GF(2^128) or not.

Look for a better algorithm first -- there should be one.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121011191722</emailId><senderName>unknown</senderName><senderEmail>unknown@pgpru.com</senderEmail><timestampReceived>2012-10-11 19:17:22-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On Tue, 9 Oct 2012 00:28:38 -0400
Nick Mathewson &lt;nickm@torproject.org&gt; wrote:

&gt; So to be concrete, let me suggest a few modes of operation.  I believe
&gt; I'm competent to implement these:

I think (IMHO) Keccak makes many (most?) symmetric encryption modes
obsolete in the near future. 

Now Keccak-Hash is SHA-3 winner. It is not only a hash.
Keccak is universal and can be used to authenticated stream encryption
with one pass with input any amount of pads and output any amount
of additional MACs from one-pass operation (so called duplexing mode).

http://sponge.noekeon.org/SpongeDuplex.pdf

"Duplexing the sponge: single-pass authenticated encryption and
other applications"
Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van
Assche.

In this year Keccak will recieve only a hash status officialy. Later we
can see many other modes of using Keccak as universal
RO-indistinguishable PRF with good
security proofs and tons of analysis published already. 
Some parts of protocols can be done more simply with Keccak: new padding
modes for RSA instead of OAEP is one example. 

Cite:
"
In a sponge function, the input is like a white page: It does not
impose any speciﬁc structure to it. Additional optional inputs (e.g.,
key, nonce, personalization data) can be appended or prepended to the
input message according to a well-deﬁned convention, possibly under the
hood of diversiﬁcation as proposed in [6, Section "Domain separation"].
K supports all the possible applications of sponge functions and duplex
objects described in [6, Chapters "Sponge applications" and "Duplex
applications"]. These include hash function, randomized hash function,
hash function instance diﬀerentiation, slow one-way function, parallel
and tree hashing, mask generating function, key derivation function,
deterministic random bit generator, reseedable pseudo random bit
sequence generator, message authentication code (MAC) function,
stream cipher, random-access stream cipher and authenticated encryption.
"

http://keccak.noekeon.org/Keccak-submission-3.pdf

"The Keccak SHA-3 submission"

Guido Bertoni, Joan Daemen, Michael Peeters, Gilles Van Asshe


Keccak is hardware fast and can be realased in GPU at first.

"Keccak Tree hashing on GPU, using Nvidia Cuda API"
https://sites.google.com/site/keccaktreegpu/

If NIST adopt many uses Keccak as standards then
the most of cryptoinfrastructure migrate to it. Keccak in the
future is more then AES today and makes many uses of AES 
(and any other blockciphers) unnecessary 
(excluding PRP-modes for disk encryption, but
PRF-PRP transformation modes is potentially possible too).

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121012175304</emailId><senderName>unknown</senderName><senderEmail>unknown@pgpru.com</senderEmail><timestampReceived>2012-10-12 17:53:04-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

&gt;On Thu, 11 Oct 2012 19:17:22 +0000
&gt;unknown &lt;unknown@pgpru.com&gt; wrote:

&gt; On Tue, 9 Oct 2012 00:28:38 -0400
&gt; Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; &gt; So to be concrete, let me suggest a few modes of operation.  I believe
&gt; &gt; I'm competent to implement these:
&gt; 
&gt; I think (IMHO) Keccak makes many (most?) symmetric encryption modes
&gt; obsolete in the near future. 
&gt; 

What I wrote about Keccak one year ago:

https://lists.torproject.org/pipermail/tor-dev/2011-November/003020.html

Now Keccak is SHA-3. I hope Keccak will soon replace everything:
from old messy code in the entropy accumulator and distillator
in /dev/random to AES-CTR-HMAC encryption in SSL.
From complex RSA-OAEP padding mode in signatures to exotic tweaked
block-ciphers.

Keccak is simpler to implement without mistakes and easier to design
a protocols with solid security proofs. It's universal by
generic inner structure properties without need any special
additional modules or switches.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121018221047</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-18 22:10:47-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@torproject.org):

&gt; I should share with the list an update of where I am with a design for
&gt; an improved relay crypto protocol.  For background and motivation,
&gt; please see the last thread on the topic [Prop202].
&gt; 
&gt; There are three main questions remaining for me in choosing among new
&gt; relay crypto protocols.  Basically, they are: "Am I comfortable with
&gt; this system?", "Among systems I'm comfortable with, how good is this
&gt; system?", and "Do I know how to implement this system?"
&gt; 
&gt; Unfortunately, the stuff I am currently comfortable with and know that
&gt; I could implement is not nearly as good as the stuff that I'm _nearly_
&gt; comfortable enough to use and I don't know how to implement.
&gt; 
&gt; Let's talk about some designs in detail, using the same terminology as
&gt; proposal 202.
&gt;
&gt; [*snip*]
&gt; 
&gt; II. WIDE-BLOCK DESIGNS
&gt;
&gt; [*snip*]
&gt; 
&gt; I am a little intimidated by the idea of trying to implement one of
&gt; these ciphers.

I too am worried that trying to code and deploy relatively new
constructions is likely risky, or at least very tricky.

&gt; Above, I haven't taken one of our requirements into account: that any
&gt; change to a single cell must make all future cells unrecoverable.

Will UDP transports make this even more tricky?

&gt; There are modes that are supposed to prevent this, and applying them
&gt; to a decent wide-block cipher might solve the issue. IGE is one of
&gt; them [IGE], but it turns out to be broken by an attacker who knows
&gt; some plaintext.  The Accumulated Block Chaining [ABC] construction is
&gt; supposed to fix that; I'm not too sure whether it's correct or
&gt; efficient.

Am I crazy to think we might try to stop the bleeding of tagging attacks
by figuring out a way to use ABC or IGE mode as a stopgap until people
can code and evaluate new constructions for performance and timing
side-channels? ABC/IGE would "only" involve a mode change, rather than
an entire relay protocol upgrade and new cipher coding..

IGE might also actually exist in OpenSSL:
http://www.links.org/?p=137

It also sounds like IGE is only broken if we try to use it for
authentication.. We don't really need that property, do we? What we
really want is the plaintext corruption property at the middle node upon
ciphertext modification..

We could also remove a lot of known plaintext by replacing zero-fill
with random fill in RELAY_RESOLVE, RELAY_BEGIN, and other short relay
cells. That should only be expensive at the client...


&gt; VI. References
&gt; 
&gt; 
&gt; [Prop202] https://lists.torproject.org/pipermail/tor-dev/2012-June/003649.html
&gt; 
&gt; [Ferguson] Niels Ferguson, "Authentication weaknesses in GCM",
&gt;    2005. http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/comments/CWC-GCM/Ferguson2.pdf
&gt; 
&gt; [DJB-Timing] Daniel J. Bernstein, "Cache-timing attacks on AES", 2004.
&gt;    http://cr.yp.to/papers.html#cachetiming
&gt; 
&gt; [DJB-Comm] Daniel J. Bernstein, personal communication
&gt; 
&gt; [Poly1305-Trunc] http://osdir.com/ml/encryption.poly1305/2005-09/msg00007.html
&gt; 
&gt; [ARMv8] "ARMv8 Instruction Set Overview", 2011,
&gt; http://board.flatassembler.net/download.php?id=5698
&gt; 
&gt; [Bear-Lion] Ross Anderson and Eli Biham. "Two Practical and Provably
&gt;    Secure Block Ciphers: BEAR and LION".
&gt;    http://www.cl.cam.ac.uk/~rja14/Papers/bear-lion.pdf
&gt; 
&gt; [Efficient-Tweakable] Palash Sarkar, "Efficient Tweakable Enciphering
&gt;   Schemes from (Block-Wise) Universal Hash Functions". 2008.
&gt;   http://eprint.iacr.org/2008/004.pdf
&gt; 
&gt; [IGE] Gligor and Donescu, "On Message Integrity in Symmetric
&gt;       Encryption" has the good IGE analysis:
&gt;       http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/ige/ige-spec.pdf
&gt;       The original IGE proposal was by Carl Campell in an old NIST
&gt;       publication that I can't find online; the paper above has a
&gt;       reference for it if you want to chase it more.
&gt; 
&gt; [ABC] Lars R. Knudsen, "Block Cipher Chaining Modes of
&gt;       Operation".
&gt; http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/abc/abc-spec.pdf
&gt; 
&gt; [HCTR] Peng Wang, Dengguo Feng, and Wenling Wu. "HCTR: A
&gt;        variable-input-length enciphering mode." 2005.
&gt;        http://delta.cs.cinvestav.mx/~debrup/hctr.pdf
&gt; 
&gt; [HCH] Debrup Chakraborty and Palash Sarkar. "HCH: A new tweakable
&gt;       enciphering scheme using the hash-encrypt-hash approach."
&gt;       http://biblioteca.cinvestav.mx/indicadores/texto_completo/cinvestav/2006/136034_1.pdf
&gt; 
&gt; [TET] Shai Halevi. "Invertible universal hashing and the TET
&gt;       encryption mode."  2007.
&gt;       http://www.iacr.org/archive/crypto2007/46220405/46220405.pdf
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121018223624</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-18 22:36:24-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On Thu, Oct 18, 2012 at 6:10 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
 [...]
&gt;&gt; There are modes that are supposed to prevent this, and applying them
&gt;&gt; to a decent wide-block cipher might solve the issue. IGE is one of
&gt;&gt; them [IGE], but it turns out to be broken by an attacker who knows
&gt;&gt; some plaintext.  The Accumulated Block Chaining [ABC] construction is
&gt;&gt; supposed to fix that; I'm not too sure whether it's correct or
&gt;&gt; efficient.
&gt;
&gt; Am I crazy to think we might try to stop the bleeding of tagging attacks
&gt; by figuring out a way to use ABC or IGE mode as a stopgap until people
&gt; can code and evaluate new constructions for performance and timing
&gt; side-channels? ABC/IGE would "only" involve a mode change, rather than
&gt; an entire relay protocol upgrade and new cipher coding..

ABC or IGE wouldn't help us much on their own without a wide-block
cipher, and IGE is just plain broken. (See explanation below.)

Remember, in the document I originally sent, I was talking about using
ABC or some other corruption-propagation mode at a block level.  That
requires a wide-block cipher, though.  And it turns out we can do
better if the corruption-propagation is part of the wide-block idea.

We'd also burn our performance on platforms without AES acceleration, I think.

&gt; IGE might also actually exist in OpenSSL:
&gt; http://www.links.org/?p=137
&gt;
&gt; It also sounds like IGE is only broken if we try to use it for
&gt; authentication.. We don't really need that property, do we? What we
&gt; really want is the plaintext corruption property at the middle node upon
&gt; ciphertext modification..

That _is_ a kind of authentication, or an analogue to it.  And the
point is that an adversary can repair a hole in the stream, and *stop*
the plaintext corruption.  So IGE does not deliver the property we
would want for it, even if we could use it.

Check out this thread, and the stuff it references:
   http://www.mail-archive.com/cryptography@metzdowd.com/msg06599.html

&gt; We could also remove a lot of known plaintext by replacing zero-fill
&gt; with random fill in RELAY_RESOLVE, RELAY_BEGIN, and other short relay
&gt; cells. That should only be expensive at the client...

So long as there is a block's worth of known or guessed plaintext, IGE
fails to ensure that changes propagate forward.  Like, 16 bytes worth
of guessable HTTP in a payload (if you're thinking about this in a
non-wide-block scenario).

Two general process thoughts:

* I may be saying this from an overabundance of caution, but: I don't
think we should use cryptographic primitives and constructions with
known flaws, even if we can't see a way for them to hurt us right now,
and even if we can come up with a solid-seeming argument for how those
flaws can't hurt us..  That's how we got into our AES-CTR mess in the
first place.

* I know everybody wants our crypto problems to get solved, but it's
critical to get this stuff right.  I think that the way to do right by
our users is by taking the time we will need to design the right thing
properly, rather than jumping into something halfcocked.  We all
acknowledge that it's easy for people and organizations to screw this
stuff up: so let's take our time and actually come up with something
solid.  Against the current pain and badness of our current system, we
must weigh the potential harm of jumping precipitously into something
that turns out to be broken because we didn't think about it hard
enough.

And a more general observation:

* I think the only thing we could get designed &amp; analyzed enough to
include in Tor 0.2.4 would be hmac-and-pad, which nobody actually
likes much.  I think that by the time we get anything good here well
designed and discussed enough to reach a sensible consensus about it,
it will be 2013, and time to start adding features to 0.2.5 (at the
earliest).


So here's to getting it right!


yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121019031846</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-19 03:18:46-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Thu, Oct 18, 2012 at 6:10 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;  [...]
&gt; &gt;&gt; There are modes that are supposed to prevent this, and applying them
&gt; &gt;&gt; to a decent wide-block cipher might solve the issue. IGE is one of
&gt; &gt;&gt; them [IGE], but it turns out to be broken by an attacker who knows
&gt; &gt;&gt; some plaintext.  The Accumulated Block Chaining [ABC] construction is
&gt; &gt;&gt; supposed to fix that; I'm not too sure whether it's correct or
&gt; &gt;&gt; efficient.
&gt; &gt;
&gt; &gt; Am I crazy to think we might try to stop the bleeding of tagging attacks
&gt; &gt; by figuring out a way to use ABC or IGE mode as a stopgap until people
&gt; &gt; can code and evaluate new constructions for performance and timing
&gt; &gt; side-channels? ABC/IGE would "only" involve a mode change, rather than
&gt; &gt; an entire relay protocol upgrade and new cipher coding..
&gt; 
&gt; ABC or IGE wouldn't help us much on their own without a wide-block
&gt; cipher, and IGE is just plain broken. (See explanation below.)
&gt; 
&gt; Remember, in the document I originally sent, I was talking about using
&gt; ABC or some other corruption-propagation mode at a block level.  That
&gt; requires a wide-block cipher, though.  And it turns out we can do
&gt; better if the corruption-propagation is part of the wide-block idea.
&gt; 
&gt; We'd also burn our performance on platforms without AES acceleration, I think.
&gt; 
&gt; &gt; IGE might also actually exist in OpenSSL:
&gt; &gt; http://www.links.org/?p=137
&gt; &gt;
&gt; &gt; It also sounds like IGE is only broken if we try to use it for
&gt; &gt; authentication.. We don't really need that property, do we? What we
&gt; &gt; really want is the plaintext corruption property at the middle node upon
&gt; &gt; ciphertext modification..
&gt; 
&gt; That _is_ a kind of authentication, or an analogue to it.  And the
&gt; point is that an adversary can repair a hole in the stream, and *stop*
&gt; the plaintext corruption.  So IGE does not deliver the property we
&gt; would want for it, even if we could use it.

I am still wondering if it is possible to eliminate enough consecutive
regions of known plaintext to make this acceptable for the short-term,
until we figure out the wide-block thing for real. From the attack here:
http://www.mail-archive.com/cryptography@metzdowd.com/msg06599.html it
looks as though as long as we can avoid 32 consecutive bytes of known
plaintext (two consecutive 128bit cipher blocks), we can prevent
hole-closing.

If you want to know why I'm crazy enough to still be wondering this,
see subsequent paragraphs.

&gt; Check out this thread, and the stuff it references:
&gt;    http://www.mail-archive.com/cryptography@metzdowd.com/msg06599.html
&gt; 
&gt; &gt; We could also remove a lot of known plaintext by replacing zero-fill
&gt; &gt; with random fill in RELAY_RESOLVE, RELAY_BEGIN, and other short relay
&gt; &gt; cells. That should only be expensive at the client...
&gt; 
&gt; So long as there is a block's worth of known or guessed plaintext, IGE
&gt; fails to ensure that changes propagate forward.  Like, 16 bytes worth
&gt; of guessable HTTP in a payload (if you're thinking about this in a
&gt; non-wide-block scenario).

Hrmm.. I think that failures after the stream is established are way
less dangerous than ways you can tag and cause failures *before* the
stream is established. In the pre-established case, Tor keeps retrying
transparently behind the user's back until it gets a compromised exit.
In the post-established case, the user is completely unable to use Tor
80% or 90% of the time, because the circuit is torn down *after* their
user agent has begun sending data.. In other words, at least we would
fail closed.

This reminds me of something I also wanted to ask about. Technically for
the tagging attack, all we need to authenticate is circuit construction
and RELAY_RESOLVE and RELAY_BEGIN. Might there be ways to get this
without the expense and complications of either truncated MAC's or
wide-block ciphers? Or at least remove known-plaintext from *those*
cells?

&gt; Two general process thoughts:
&gt; 
&gt; * I may be saying this from an overabundance of caution, but: I don't
&gt; think we should use cryptographic primitives and constructions with
&gt; known flaws, even if we can't see a way for them to hurt us right now,
&gt; and even if we can come up with a solid-seeming argument for how those
&gt; flaws can't hurt us..  That's how we got into our AES-CTR mess in the
&gt; first place.

I would argue that where we *really* need an overabundance of caution is
to ensure we provide the agility to change the cipher mode/construction
for this scheme in a very short period of time. I don't think our *real*
woes are because we didn't think hard enough about cryptography or the
security properties of AES_CTR. They're because we fixed the cipher and
mode at "AES_CTR", and now we're going to be stuck with vulnerability to
a very dangerous attack for years.. "If you're typing the letters AES
into your code, you're doing it wrong."

Based on this idea, I'm wondering if we should spend more of our time
thinking hard about making the relay protocol be able to support
changing the construction/primitive so we can support a readily
available but non-ideal mode for 0.2.4.x, but then upgrade to something
stronger for 0.2.5.x. (And when *that* construction/implementation turns
out to be flawed or have side-channels, we can switch again in 0.2.6.x).

If we spend time on ensuring this agility instead of pondering the deep
magic of wide-block ciphers, we might be able to roll out AES_IGE +
eliminate consecutive regions of pre-established relay cell known
plaintext for 0.2.4.x, and then save the deep magic for 0.2.5.x or
beyond.

I looked through Proposal 202, and I don't see any mechanism for
switching constructions/cipher choices in there?

&gt; * I know everybody wants our crypto problems to get solved, but it's
&gt; critical to get this stuff right.  I think that the way to do right by
&gt; our users is by taking the time we will need to design the right thing
&gt; properly, rather than jumping into something halfcocked.  We all
&gt; acknowledge that it's easy for people and organizations to screw this
&gt; stuff up: so let's take our time and actually come up with something
&gt; solid.  Against the current pain and badness of our current system, we
&gt; must weigh the potential harm of jumping precipitously into something
&gt; that turns out to be broken because we didn't think about it hard
&gt; enough.

Will I ever be able to convince you of the value of "jumping early and
often?" ;)

Related, have you seen this drunken rant (I'm linking to a summary
because the original rant is very TL;DR):
http://cryptochaos.com/liberal-vs-conservative-software-engineering

I think one of the main reasons most Tor folks find my development style
so obnoxious is because I'm definitely from the extreme-liberal school
of thought :).

&gt; And a more general observation:
&gt; 
&gt; * I think the only thing we could get designed &amp; analyzed enough to
&gt; include in Tor 0.2.4 would be hmac-and-pad, which nobody actually
&gt; likes much.  I think that by the time we get anything good here well
&gt; designed and discussed enough to reach a sensible consensus about it,
&gt; it will be 2013, and time to start adding features to 0.2.5 (at the
&gt; earliest).
&gt; 
&gt; So here's to getting it right!

I agree.. But if we don't leave room to get the crypto wrong and still
swap it out quickly, we're going to be here again in another year or
three, being even more sad than this time :/.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121011143511</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-11 14:35:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tuning the Parameters for the Path Bias Defense</subject><body>

On Thu, Oct 11, 2012 at 5:20 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also exists at
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/xxx-path-bias-tuning.txt
&gt;  

This is now Proposal 209.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121015203835</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-15 20:38:35-0400</timestampReceived><subject>Re: [tor-dev] Proposal 211: Internal Mapaddress for Tor Configuration Testing</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Thu, Oct 11, 2012 at 5:38 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Design Overview
&gt; &gt; 
&gt; &gt; The system will have three parts: an internal hard-coded IP address
&gt; &gt; mapping (127.84.111.114:80), a hard-coded mapaddress to a DNS name
&gt; &gt; (selftest.torproject.org:80), and a DirPortFrontPage-style simple
&gt; &gt; HTTP server that serves an XML document for both addresses.
&gt; 
&gt; The use of XML and HTTP here are both reasons for some unhappiness.
&gt; Both of them pull in a fair amount of complexity that I'd prefer not
&gt; to need.  (Yes, Tor already has a sort of an HTTP implementation, but
&gt; at least clients aren't currently required to run what amounts to a
&gt; local HTTP server.)
&gt; 
&gt; I seriously wonder whether the benefits of HTTP (easier to access from
&gt; within a locked-down web browser environment) aren't actually the
&gt; _defects_ of HTTP here: it's easier to poke it from a web page.
&gt; 
&gt; I understand that your design takes some steps to prevent
&gt; browser-based attacks on this, but I'm not currently sure how to
&gt; become sure that that it solves them all.  Right now, I'm nervous.

This is a reasonable fear. I think the major risk with the proposal
revolve around the need to prevent the nonces from being used as 
tracking beacon...

I did my best to protect against this, but we probably could use a few
web-heads reviewing it, too.

&gt; &gt; Upon receipt of a request to the IP address mapping, the system will
&gt; &gt; create a new 128 bit randomly generated nonce and provide it
&gt; &gt; in the XML document.
&gt; &gt; 
&gt; &gt; Requests to http://selftest.torproject.org/ must include a valid,
&gt; &gt; recent nonce as the GET url path. Upon receipt of a valid nonce,
&gt; &gt; it is removed from the list of valid nonces. Nonces are only valid
&gt; &gt; for 60 seconds or until SIGNAL NEWNYM, which ever comes first.
&gt; 
&gt; So, I'm not totally sure what the nonce field is for.  The idea as I
&gt; understand it is that when you connect to the IPv4 address, you get a
&gt; nonce, and later when you connect to the hostname, you provide that
&gt; nonce, and Tor tells you "yes" if you gave it the same nonce.
&gt; 
&gt; What does that protect against?  My first thought is that you're
&gt; trying to prevent the case where a malicious local DNS server maps
&gt; "selftest.torproject.org" to some IP address in their control, and
&gt; then just runs a server at that IP address to say "yes I'm Tor".  But
&gt; that doesn't make sense, since you could just make one of those that
&gt; said "yes I'm Tor" no matter what you say for the nonce.

*Headdesk*. Doh. Yes, the DNS test needs to be given a transform of the
nonce (SHA1? SHA1+salt?), and needs to spit the original back out again
in the response for validation by the client.

But yes, that is exactly what we're trying to protect against.
 
&gt; Also, how useful is the followup DNS check?  If it's checking that DNS
&gt; leaks aren't happening... You're going to need torbrowser or something
&gt; of equivalent complexity for this to work at all; isn't it easier then
&gt; for torbrowser to make sure that it  set up SOCKS ?

Hrmm. I was under the impression most apps have url fetch capabilities.
Pidgin appears to. Thunderbird definitely does. Both have XML deps
already (as does any XMPP chat app).

But yes, the plan was for this to be used by custom software we wrote.

&gt; &gt; The list of pending nonces should not be allowed to grow beyond 10
&gt; &gt; entries.
&gt; 
&gt; This means that any webpage could flush out the list of pending
&gt; nonces.  Does that matter?

Hrmm. Maybe. I was balancing this with other issues:

1. Without any limit, web pages could oom the tor client.

2. A website that managed to access this service could track a user
for a long period of time by getting a pile of nonces to use, all known
to be bound to that user.

We could rely only on a shorter default timeout instead, though.

&gt; &gt; The timeout period and nonce limit should be configurable in torrc.
&gt; &gt; 
&gt; &gt; Design: XML document format for http://127.84.111.114
&gt; &gt; 
&gt; [...]
&gt; &gt; Security Considerations
&gt; &gt; 
&gt; &gt; XML was chosen over JSON due to the risks of the identifier leaking
&gt; &gt; in a way that could enable websites to track the user[1].
&gt; 
&gt; Well, that's a nuclear-powered-flyswatter!
&gt; 
&gt; If I read that page right, the problem with using JSON is that it can
&gt; be parsed and executed as Javascript, and the advantage of XML is that
&gt; it's unlikely to be syntactically correct javascript, then maybe
&gt; instead we should

Assuming "write our own format." finishes this paragraph.

&gt; If that's the issue, I'd strongly suggest that instead of going with a
&gt; more complex data format, we could add a layer of encoding over the
&gt; json, or use an even simpler format.

I wanted to avoid requiring our clients write parsers, and everything I
could think of already parses XML.

But if you think hand-parsing is less dangerous than relying on an XML
lib, we can do line-based key=value instead. 

&gt; &gt; Because there are many exceptions and circumvention techniques
&gt; &gt; to the same-origin policy, we have also opted for strict controls
&gt; &gt; on dns-nonce lifetimes and usage, as well as validation of the Host
&gt; &gt; header and SOCKS4A request hostnames.
&gt; 
&gt; Of course, this all comes down to the fact that we're using http.  Can
&gt; we spell out why we need HTTP for this?

See https://trac.torproject.org/projects/tor/ticket/6546#comment:18 and
the following comment.

Do you want that in the proposal, you mean?
 
&gt; &gt; 1. http://www.hpenterprisesecurity.com/vulncat/en/vulncat/dotnet/javascript_hijacking_vulnerable_framework.html
&gt; &gt; 

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121015210832</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 21:08:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal 211: Internal Mapaddress for Tor Configuration Testing</subject><body>

On Mon, Oct 15, 2012 at 4:38 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
[...]
&gt;&gt; What does that protect against?  My first thought is that you're
&gt;&gt; trying to prevent the case where a malicious local DNS server maps
&gt;&gt; "selftest.torproject.org" to some IP address in their control, and
&gt;&gt; then just runs a server at that IP address to say "yes I'm Tor".  But
&gt;&gt; that doesn't make sense, since you could just make one of those that
&gt;&gt; said "yes I'm Tor" no matter what you say for the nonce.
&gt;
&gt; *Headdesk*. Doh. Yes, the DNS test needs to be given a transform of the
&gt; nonce (SHA1? SHA1+salt?), and needs to spit the original back out again
&gt; in the response for validation by the client.
&gt;
&gt; But yes, that is exactly what we're trying to protect against.

Okay.  So to write up crypto/protocols that work, you actually need to
start by writing up the security features you actually get from your
protocol: what the client needs to do, what the attacker might do, and
so forth.

Let's say we want the property where a client who has connected via an
IP address learns something that the client can use to conclude that
it is talking to the same Tor when it connects by hostname.  Let's say
that the attacker *can* cause the client to make connections to
Tor-by-IP or Tor-by-hostname, but can't learn or interfere with the
content.  Let's say that the attacker can't make his own connections
both to Tor-by-IP or Tor-by-hostname.  Let's say that the attacker
_can_ impersonate Tor-by-hostname.

Is that about right?

Incidentally: No new SHA1 in Tor!

&gt;&gt; Also, how useful is the followup DNS check?  If it's checking that DNS
&gt;&gt; leaks aren't happening... You're going to need torbrowser or something
&gt;&gt; of equivalent complexity for this to work at all; isn't it easier then
&gt;&gt; for torbrowser to make sure that it  set up SOCKS ?
&gt;
&gt; Hrmm. I was under the impression most apps have url fetch capabilities.
&gt; Pidgin appears to. Thunderbird definitely does. Both have XML deps
&gt; already (as does any XMPP chat app).
&gt;
&gt; But yes, the plan was for this to be used by custom software we wrote.

So, why can't this custom software just check the SOCKS settings?

(Sure, there might be a SOCKS bypass.  But there might also be a SOCKS
bypass anywhere in the application that doesn't use the same path to
the network as the URL fetch code.)

&gt;&gt; &gt;  The list of pending nonces should not be allowed to grow beyond 10
&gt;&gt; &gt;  entries.
&gt;&gt;
&gt;&gt; This means that any webpage could flush out the list of pending
&gt;&gt; nonces.  Does that matter?
&gt;
&gt; Hrmm. Maybe. I was balancing this with other issues:
&gt;
&gt; 1. Without any limit, web pages could oom the tor client.
&gt;
&gt; 2. A website that managed to access this service could track a user
&gt; for a long period of time by getting a pile of nonces to use, all known
&gt; to be bound to that user.
&gt;
&gt; We could rely only on a shorter default timeout instead, though.

Or design something that uses less server-side memory.

Like, instead of remembering every N, you could construct each N as
"r, HMAC(X,r)" where n is a one-off random value and X is an HMAC key
Tor creates at startup.  Then you could recognize all of the N that
you generated without having to remember more than a single HMAC key.

(This doesn't solve the actual protocol problem, but it does show how
you can avoid storage issues.)

[...]
&gt;&gt; If that's the issue, I'd strongly suggest that instead of going with a
&gt;&gt; more complex data format, we could add a layer of encoding over the
&gt;&gt; json, or use an even simpler format.
&gt;
&gt; I wanted to avoid requiring our clients write parsers, and everything I
&gt; could think of already parses XML.
&gt;
&gt; But if you think hand-parsing is less dangerous than relying on an XML
&gt; lib, we can do line-based key=value instead.

Not all hand-parsing is less dangerous/bloaty than XML, but some sure is.

&gt;&gt; &gt;  Because there are many exceptions and circumvention techniques
&gt;&gt; &gt;  to the same-origin policy, we have also opted for strict controls
&gt;&gt; &gt;  on dns-nonce lifetimes and usage, as well as validation of the Host
&gt;&gt; &gt;  header and SOCKS4A request hostnames.
&gt;&gt;
&gt;&gt; Of course, this all comes down to the fact that we're using http.  Can
&gt;&gt; we spell out why we need HTTP for this?
&gt;
&gt; See https://trac.torproject.org/projects/tor/ticket/6546#comment:18 and
&gt; the following comment.
&gt;
&gt; Do you want that in the proposal, you mean?

Yeah, and also we should discuss it.

The argument as I understand it is that your browser's TCP sockets API
is not guaranteed to use the same proxies as the browser uses for http
URL access.

(Of course, that goes the other way: if we were trying this for
something like a chat client, there would be no guarantee that the URL
access would use the same proxies as are used for regular chat.)

I don't think, though, that "Are my socks proxies configured right?"
is the primary use for this tool.  Any application we write had
*better* get the socks proxies right, and verify that they're right,
and audit to make sure they're not bypassable, etc etc.  The "is my
Tor running" and "can my Tor build circuits" questions seem much more
useful.



-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121012191722</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-12 19:17:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@torproject.org):

&gt; Filename: 207-directory-guards.txt
&gt; Title: Directory guards
&gt; 
&gt; Motivation:
&gt; 
&gt;    When we added guard nodes to resist profiling attacks, we made it so
&gt;    that clients won't build general-purpose circuits through just any
&gt;    node.  But clients don't use their guard nodes when downloading
&gt;    general-purpose directory information from the Tor network.  This
&gt;    allows a directory cache, over time, to learn a large number of IPs
&gt;    for non-bridge-using users of the Tor network.
&gt; 
&gt; Proposal:
&gt; 
&gt;    In the same way as they currently pick guard nodes as needed, adding more
&gt;    guards as those nodes are down, clients should also pick a small-ish set
&gt;    of directory guard nodes, to persist in Tor's state file.
&gt; 
&gt;    Clients should not pick their own guards as directory guards, or pick
&gt;    their directory guards as regular guards.
&gt; 
&gt;    When downloading a regular directory object (that is, not a hidden
&gt;    service descriptor), clients should prefer their directory guards
&gt;    first.  Then they should try more directories from a recent consensus
&gt;    (if they have one) and pick one of those as a new guard if the
&gt;    existing guards are down and a new one is up.  Failing that, they
&gt;    should fall back to a directory authority (or a directory source, if
&gt;    those get implemented-- see proposal 206).
&gt; 
&gt;    If a client has only one directory guard running, they should add new
&gt;    guards and try them, and then use their directory guards to fetch multiple
&gt;    descriptors in parallel.
&gt; 
&gt; Discussion:
&gt; 
&gt;    The rule that the set of guards and the set of directory guards need to
&gt;    be disjoint, and the rule that multiple directory guards need to be
&gt;    providing descriptors, are both attempts to make it harder for a
&gt;    single node to capture a route.

Can you explain the route capture opportunities available to directory
guards? Is it #5343/#5956?

And how does the attack work? Can directory mirrors simply say "Sorry
man, that descriptor doesn't exist", even though the client sees it
listed in the consensus? Shouldn't clients just try another directory
source in this case?

The reason I'm asking is because if we use the same Guard nodes for both
directory and normal traffic, this adds additional traffic patterns to
the set of things that Website Traffic Fingerprinting attacks must
classify, which further reduces the accuracy of that attack.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121013014738</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-13 01:47:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

On Fri, Oct 12, 2012 at 3:17 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Nick Mathewson (nickm@torproject.org):
&gt;&gt; Discussion:
&gt;&gt;
&gt;&gt;    The rule that the set of guards and the set of directory guards need to
&gt;&gt;    be disjoint, and the rule that multiple directory guards need to be
&gt;&gt;    providing descriptors, are both attempts to make it harder for a
&gt;&gt;    single node to capture a route.
&gt;
&gt; Can you explain the route capture opportunities available to directory
&gt; guards? Is it #5343/#5956?

Like that general class, yes.  It worries me to have too few sources
of directory info; with bridges we have no choice, but with directory
guards, we can make sure that we have multiple sources.

In particular, it's a little obnoxious for the same party to be both
the first hop of your circuit, *and* to know exactly what you know
about possible candidates for hop 2 and hop 3.

&gt; And how does the attack work? Can directory mirrors simply say "Sorry
&gt; man, that descriptor doesn't exist", even though the client sees it
&gt; listed in the consensus?

No, but they can say "Sorry, I don't have that descriptor."  (Same
thing actually, but not totally suspicious.  But maybe let's analyze
it and figure out how much it really happens in practice for an honest
guard.)

&gt; Shouldn't clients just try another directory
&gt; source in this case?

Maaybe. If all their directory guards but *one* are down, my claim is
that they should not rely on just that guard.  There are alternative
designs where you don't add directory guards unless all your guards
are down, and I don't think those are right.

&gt; The reason I'm asking is because if we use the same Guard nodes for both
&gt; directory and normal traffic, this adds additional traffic patterns to
&gt; the set of things that Website Traffic Fingerprinting attacks must
&gt; classify, which further reduces the accuracy of that attack.

Hm.  An interesting thought.

My first inclination here is to ask, "Can we analyze this to figure
out the benefit/risk of each approach and somehow make a
mathy/quantitative argument about which is better?"  I don't know that
we'll come up with a final answer, but I think we could do well to try
to figure out how large/small benefits are likely to be.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121013025353</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-13 02:53:53-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Fri, Oct 12, 2012 at 3:17 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Thus spake Nick Mathewson (nickm@torproject.org):
&gt; &gt;&gt; Discussion:
&gt; &gt;&gt;
&gt; &gt;&gt;    The rule that the set of guards and the set of directory guards need to
&gt; &gt;&gt;    be disjoint, and the rule that multiple directory guards need to be
&gt; &gt;&gt;    providing descriptors, are both attempts to make it harder for a
&gt; &gt;&gt;    single node to capture a route.
&gt; &gt;
&gt; &gt; Can you explain the route capture opportunities available to directory
&gt; &gt; guards? Is it #5343/#5956?
&gt; 
&gt; Like that general class, yes.  It worries me to have too few sources
&gt; of directory info; with bridges we have no choice, but with directory
&gt; guards, we can make sure that we have multiple sources.
&gt; 
&gt; In particular, it's a little obnoxious for the same party to be both
&gt; the first hop of your circuit, *and* to know exactly what you know
&gt; about possible candidates for hop 2 and hop 3.

Ok, so it sounds like this is more the second rule than the first rule?

&gt; &gt; And how does the attack work? Can directory mirrors simply say "Sorry
&gt; &gt; man, that descriptor doesn't exist", even though the client sees it
&gt; &gt; listed in the consensus?
&gt; 
&gt; No, but they can say "Sorry, I don't have that descriptor."  (Same
&gt; thing actually, but not totally suspicious.  But maybe let's analyze
&gt; it and figure out how much it really happens in practice for an honest
&gt; guard.)
&gt; 
&gt; &gt; Shouldn't clients just try another directory
&gt; &gt; source in this case?
&gt; 
&gt; Maaybe. If all their directory guards but *one* are down, my claim is
&gt; that they should not rely on just that guard.  There are alternative
&gt; designs where you don't add directory guards unless all your guards
&gt; are down, and I don't think those are right.

Ok, this makes sense. Also second rule?

&gt; &gt; The reason I'm asking is because if we use the same Guard nodes for both
&gt; &gt; directory and normal traffic, this adds additional traffic patterns to
&gt; &gt; the set of things that Website Traffic Fingerprinting attacks must
&gt; &gt; classify, which further reduces the accuracy of that attack.
&gt; 
&gt; Hm.  An interesting thought.
&gt; 
&gt; My first inclination here is to ask, "Can we analyze this to figure
&gt; out the benefit/risk of each approach and somehow make a
&gt; mathy/quantitative argument about which is better?"  I don't know that
&gt; we'll come up with a final answer, but I think we could do well to try
&gt; to figure out how large/small benefits are likely to be.

My favorite work in the Tor Website Traffic Fingerprinting space[1]
actually measures this effect quite well. Have a look at Figure 4 in
section 5.2.2 in the "Open World" dataset (page 8). As we add more
background noise to the "Open World" of things that are fetched through
Tor Guard nodes, the true positive accuracy of the attack drops off.

In general, with more objects to classify and few features to extract,
either true positive accuracy goes down, or false positive rate goes up.
Especially when the objects are relatively low-resolution in terms of
additional reliable features to extract.

Further, because of the base rate fallacy[2], the adversary needs to
make heavy, heavy tradeoffs to ensure their false positive rate stays
way, way down. This means any objects we add to the "world" of Tor Guard
traffic pretty much are guaranteed to decrease true positive accuracy of
the attack in terms of webpages they can reliably recognize.

(Incidentally, I believe the authors of [1] understood the danger of
false positives, and that's why their graphs look the way they do. It's
not clear other traffic fingerprinting authors understand this concept.
In fact, for many of them, it's quite clear they do not.)


So, any games we can play to make directory activity look like client
web activity (especially different types and sizes of web activity) are
bonus win against the attack that cost us no traffic overhead.


[1]. http://lorre.uni.lu/~andriy/papers/acmccs-wpes11-fingerprinting.pdf
[2]. http://ksubrick.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.8982

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121015174924</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 17:49:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

On Fri, Oct 12, 2012 at 10:53 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Nick Mathewson (nickm@alum.mit.edu):
&gt;
&gt;&gt; On Fri, Oct 12, 2012 at 3:17 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;&gt; &gt; Thus spake Nick Mathewson (nickm@torproject.org):
&gt;&gt; &gt;&gt; Discussion:
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt;    The rule that the set of guards and the set of directory guards need to
&gt;&gt; &gt;&gt;    be disjoint, and the rule that multiple directory guards need to be
&gt;&gt; &gt;&gt;    providing descriptors, are both attempts to make it harder for a
&gt;&gt; &gt;&gt;    single node to capture a route.
&gt;&gt; &gt;
&gt;&gt; &gt; Can you explain the route capture opportunities available to directory
&gt;&gt; &gt; guards? Is it #5343/#5956?
&gt;&gt;
&gt;&gt; Like that general class, yes.  It worries me to have too few sources
&gt;&gt; of directory info; with bridges we have no choice, but with directory
&gt;&gt; guards, we can make sure that we have multiple sources.
&gt;&gt;
&gt;&gt; In particular, it's a little obnoxious for the same party to be both
&gt;&gt; the first hop of your circuit, *and* to know exactly what you know
&gt;&gt; about possible candidates for hop 2 and hop 3.
&gt;
&gt; Ok, so it sounds like this is more the second rule than the first rule?

I think it's both, perhaps.  If only one source is providing you with
directory info, you're in trouble either way.  But if that source is
also your first hop, it is farther along in its attempts to manipulate
you than it would be otherwise, and has an easier time taking
advantage of them.   It can also take advantage of knowledge a little
better.

In particular, if I'm your guard, and you ask me for descriptors some
nodes including node X, and you then immediately build a circuit
through me before I tell you node X, I know you didn't know know node
X when you built that circuit.  Contrast that with the case where I'm
only a guard -- I don't know what you're downloading. And contrast
that with the case where I'm only a directory -- I don't know when,
exactly, you're building circuits.

Even if you *do* have multiple working guards, the issue still exists.
 Once I see that you're building circuits for traffic, I know that any
descriptor I give you *after* that point wasn't used for those
circuits.  This lets me narrow down the set of circuits you might have
built.

(Incidentally, a directory guard can probably tell how many other
functional directory guards you have based on what fraction of the
descriptors it serves you.  It can probably even tell when one of your
other dirguards is down, based on when it gets asked for more
descriptors on a timeframe that implies that this is a retry. Not sure
the best way to build an attack out of that.)

[...]
&gt; So, any games we can play to make directory activity look like client
&gt; web activity (especially different types and sizes of web activity) are
&gt; bonus win against the attack that cost us no traffic overhead.

Hm. I think you make an okay argument that doing directory fetches
over the same connections as web traffic *might* make fingerprinting
harder, especially if the directory fetches happen roughly
concurrently with the web traffic.[1] I don't think we can upgrade
this "might" into a "will" without actual experimentation here.

But the analysis I was hoping we could think about was the good old
one about tradeoffs between the two designs here (design A: disjoint
guards and dirguards; design B: dirguards are guards).  In your
message, you make a case that there could be benefit to B.  I think
you're right, but that's only half the analysis we need.  We need to
know whether the benefit from B is likely to be greater than the
benefit from A.  To do that, we also need a way to examine both and
compare them.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121015184808</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-15 18:48:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Fri, Oct 12, 2012 at 10:53 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Thus spake Nick Mathewson (nickm@alum.mit.edu):
&gt; &gt;
&gt; &gt;&gt; On Fri, Oct 12, 2012 at 3:17 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt;&gt; &gt; Thus spake Nick Mathewson (nickm@torproject.org):
&gt; &gt;&gt; &gt;&gt; Discussion:
&gt; &gt;&gt; &gt;&gt;
&gt; &gt;&gt; &gt;&gt;    The rule that the set of guards and the set of directory guards need to
&gt; &gt;&gt; &gt;&gt;    be disjoint, and the rule that multiple directory guards need to be
&gt; &gt;&gt; &gt;&gt;    providing descriptors, are both attempts to make it harder for a
&gt; &gt;&gt; &gt;&gt;    single node to capture a route.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Can you explain the route capture opportunities available to directory
&gt; &gt;&gt; &gt; guards? Is it #5343/#5956?
&gt; &gt;&gt;
&gt; &gt;&gt; Like that general class, yes.  It worries me to have too few sources
&gt; &gt;&gt; of directory info; with bridges we have no choice, but with directory
&gt; &gt;&gt; guards, we can make sure that we have multiple sources.
&gt; &gt;&gt;
&gt; &gt;&gt; In particular, it's a little obnoxious for the same party to be both
&gt; &gt;&gt; the first hop of your circuit, *and* to know exactly what you know
&gt; &gt;&gt; about possible candidates for hop 2 and hop 3.
&gt; &gt;
&gt; &gt; Ok, so it sounds like this is more the second rule than the first rule?
&gt; 
&gt; I think it's both, perhaps.  If only one source is providing you with
&gt; directory info, you're in trouble either way.  But if that source is
&gt; also your first hop, it is farther along in its attempts to manipulate
&gt; you than it would be otherwise, and has an easier time taking
&gt; advantage of them.   It can also take advantage of knowledge a little
&gt; better.
&gt; 
&gt; In particular, if I'm your guard, and you ask me for descriptors some
&gt; nodes including node X, and you then immediately build a circuit
&gt; through me before I tell you node X, I know you didn't know know node
&gt; X when you built that circuit.  Contrast that with the case where I'm
&gt; only a guard -- I don't know what you're downloading. And contrast
&gt; that with the case where I'm only a directory -- I don't know when,
&gt; exactly, you're building circuits.
&gt; 
&gt; Even if you *do* have multiple working guards, the issue still exists.
&gt;  Once I see that you're building circuits for traffic, I know that any
&gt; descriptor I give you *after* that point wasn't used for those
&gt; circuits.  This lets me narrow down the set of circuits you might have
&gt; built.

If we set limits before building circuits to large sections of the
consensus for each position (for example 75% of the consensus
bandwidth for that position), it seems that we can put whatever bounds
on this attack we choose...

It's also an attack that can only happen for a very small window of
time, in contrast to the benefit against the traffic fingerprinting
attack, which is time invariant (if we do it right - see below).

&gt; &gt; So, any games we can play to make directory activity look like client
&gt; &gt; web activity (especially different types and sizes of web activity) are
&gt; &gt; bonus win against the attack that cost us no traffic overhead.
&gt; 
&gt; Hm. I think you make an okay argument that doing directory fetches
&gt; over the same connections as web traffic *might* make fingerprinting
&gt; harder, especially if the directory fetches happen roughly
&gt; concurrently with the web traffic.[1] I don't think we can upgrade
&gt; this "might" into a "will" without actual experimentation here.

Again, this experimentation is already done. It's quite clear that
adding more objects to the world of Guard activity reduces traffic
fingerprinting accuracy, regardless of if that activity is concurrent
with client traffic or not.

The only thing that would change this is if the adversary could somehow
detect your directory activity using some other information channel
other than the actual traffic patterns to specific Guards. If such a
side channel exists, then yes, we would likely only experience the
benefit during concurrent activity (due to feature resolution
degradation).

Unfortunately, it would seem that to a local observer, any directory
guards that are not also Guards would provide this information channel,
since all directory activity happens at roughly the same time, right?


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121014224510</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-14 22:45:10-0400</timestampReceived><subject>Re: [tor-dev] [patch] fix cparser/firm compiler warnings</subject><body>

On 10/14/12, Christian Grothoff &lt;christian@grothoff.org&gt; wrote:

&gt; Is there a better place for sending patches that do not really require
&gt; broad discussion?

Post them in the bug tracker (https://trac.torproject.org/),
preferably as the URL and branch name of a Git branch or as a patch in
‘git format-patch' format.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121001183624</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2012-10-01 18:36:24-0400</timestampReceived><subject>Re: [tor-dev] 10 days left for proposals for hard stuff [Re: Reminder: Big/tricky/interesting featur</subject><body>

On Mon, Oct 1, 2012 at 12:49 PM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; On Mon, Sep 17, 2012 at 11:47 AM, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; Hi, all!
&gt;&gt;
&gt;&gt; From https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :
&gt;&gt;
&gt;&gt; "October 10, 2012: Big feature proposal checkpoint. Any large
&gt;&gt; complicated feature which requires a design proposal must have its
&gt;&gt; first design proposal draft by this date."

Because I've had at least one question:

"Proposal" in this case means a Tor Proposal, as explained at
https://gitweb.torproject.org/torspec.git/blob_plain/HEAD:/proposals/001-process.txt

A proposal is not a research paper, is not a trac ticket, is not an
IRC conversation, and is not a patch.

"What needs a proposal" and "what qualifies as big" are explained in
my original email, upthread.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121006143204</emailId><senderName>"Fabio Pietrosanti (naif)"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2012-10-06 14:32:04-0400</timestampReceived><subject>Re: [tor-dev] 10 days left for proposals for hard stuff [Re: Reminder: Big/tricky/interesting featur</subject><body>

On 10/1/12 6:49 PM, Nick Mathewson wrote:
&gt;&gt; Hi, all!
&gt;&gt;
&gt;&gt; From https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :
&gt;&gt;
&gt;&gt; "October 10, 2012: Big feature proposal checkpoint. Any large
&gt;&gt; complicated feature which requires a design proposal must have its
&gt;&gt; first design proposal draft by this date."

Do you think that this feature to handle TorHS Key via Tor CP would
require to take a proposal to be within 0.2.4.x ?

Ref:
https://trac.torproject.org/projects/tor/ticket/6411
https://trac.torproject.org/projects/tor/ticket/5976

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121004162859</emailId><senderName>Eugen Leitl</senderName><senderEmail>eugen@leitl.org</senderEmail><timestampReceived>2012-10-04 16:28:59-0400</timestampReceived><subject>[tor-dev] resistance to rubberhose and UDP questions</subject><body>


I've had an IRC session with the designer of cjdns (on cjdns)
who made a few interesting points, and suggestions. Comments?

Verbatim chat snip below.

18:03 &lt;@cjd&gt; if you took the components from cjdns, you could build a TOR like \
protocol which used UDP if  possible and made connections much faster
18:04 &lt;+eleitl&gt; I wonder why they didn't choose UDP
18:05 &lt;@cjd&gt; you need to fall back on tcp in case you're firewalled to hell
18:05 &lt;+eleitl&gt; Apparently, they're thinking about it
                https://blog.torproject.org/blog/moving-tor-datagram-transport
18:06 &lt;@cjd&gt; problem with tor is (correct me if I)
18:06 &lt;@cjd&gt; 'm wrong)
18:06 &lt;@cjd&gt; the directory is signed by the tor foundation
18:07 &lt;@cjd&gt; so they can sign a fake directory and run a bunch of directory servers \
and when Alice connects to  their directory server, they give her a bunch of fake \
nodes 18:07 &lt;@cjd&gt; run their own botnet with fake tor nodes so your circuit is always \
owned 18:07 &lt;+eleitl&gt; I don't really know for sure, but there's intrinsic trust to \
Tor developers, yes. 18:08 &lt;+eleitl&gt; You can run your own Tor network, though.
18:08 &lt;+eleitl&gt; Some botnets do that.
18:08 &lt;@cjd&gt; I trust them to make the software right, esp. since I could check if \
they did. 18:09 &lt;@cjd&gt; But a little arm twisting can change someone's motives pretty \
fast. 18:09 &lt;+eleitl&gt; Maintaining signing secrets is a problem.
18:09 &lt;+eleitl&gt; They should have used a P2P design.
18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your life \
hell...   I wouldn't fault them  for doing what the man says.
18:10 &lt;@cjd&gt; *wouldn't fault you
18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario, and see how \
they squirm. 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
18:12 &lt;@cjd&gt; cjdns does the same thing
18:13 &lt;+eleitl&gt; Can I use snippage from this chat verbatim, or will I need to \
rephrase? 18:14 &lt;@cjd&gt; sure go ahead
18:14 &lt;+eleitl&gt; Thanks!
18:14 &lt;@cjd&gt; can only speak for myself ofc
18:14 &lt;+eleitl&gt; Sure.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121004175047</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-04 17:50:47-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

On 10/4/12, Eugen Leitl &lt;eugen@leitl.org&gt; wrote:
&gt;
&gt; I've had an IRC session with the designer of cjdns (on cjdns)
&gt; who made a few interesting points, and suggestions. Comments?
&gt;
&gt; Verbatim chat snip below.
&gt;
&gt; 18:03 &lt;@cjd&gt; if you took the components from cjdns, you could build a TOR
&gt; like protocol which used UDP if
&gt;              possible and made connections much faster
&gt; 18:04 &lt;+eleitl&gt; I wonder why they didn't choose UDP

Presumably because TCP was easier.

&gt; 18:05 &lt;@cjd&gt; you need to fall back on tcp in case you're firewalled to hell
&gt; 18:05 &lt;+eleitl&gt; Apparently, they're thinking about it
&gt;
&gt; https://blog.torproject.org/blog/moving-tor-datagram-transport

Yes.  TCP was a bad choice for Tor.

&gt; 18:06 &lt;@cjd&gt; problem with tor is (correct me if I)
&gt; 18:06 &lt;@cjd&gt; 'm wrong)
&gt; 18:06 &lt;@cjd&gt; the directory is signed by the tor foundation
&gt; 18:07 &lt;@cjd&gt; so they can sign a fake directory and run a bunch of directory
&gt; servers and when Alice connects to
&gt;              their directory server, they give her a bunch of fake nodes

The v3 network consensus document must be signed by a majority of the
(currently nine) directory authorities' signing keys.  None of the
directory authorities are operated by Tor Project, Inc..

&gt; 18:07 &lt;@cjd&gt; run their own botnet with fake tor nodes so your circuit is
&gt; always owned

TPI does not have the expertise needed to run a botnet for this purpose.

&gt; 18:07 &lt;+eleitl&gt; I don't really know for sure, but there's intrinsic trust to
&gt; Tor developers, yes.
&gt; 18:08 &lt;+eleitl&gt; You can run your own Tor network, though.
&gt; 18:08 &lt;+eleitl&gt; Some botnets do that.

Interesting.  Do you have a reference describing one of these botnets?

&gt; 18:08 &lt;@cjd&gt; I trust them to make the software right, esp. since I could
&gt; check if they did.
&gt; 18:09 &lt;@cjd&gt; But a little arm twisting can change someone's motives pretty
&gt; fast.
&gt; 18:09 &lt;+eleitl&gt; Maintaining signing secrets is a problem.
&gt; 18:09 &lt;+eleitl&gt; They should have used a P2P design.

Do you have a ‘P2P design' for Tor which doesn't rely on trusted
parties ‘maintaining signing secrets' and which isn't broken?
(Hint: No, you don't.)

Do you have any ‘P2P design' for Tor at all which isn't broken?

&gt; 18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your
&gt; life hell...   I wouldn't fault them
&gt;              for doing what the man says.
&gt; 18:10 &lt;@cjd&gt; *wouldn't fault you
&gt; 18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario,
&gt; and see how they squirm.
&gt; 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
&gt; 18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
&gt; 18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
&gt; 18:12 &lt;@cjd&gt; cjdns does the same thing

If this refers to including the circuit-extension packet which caused
a relay to open an OR connection in the first UDP packet that it sends
in order to open that connection, I agree that that would be a good
thing to do, although mostly for reasons that cjd isn't mentioning.

If this refers to setting up a complete three-node Tor circuit with
only one outgoing packet sent by the client, that can be implemented
without a UDP-based transport (and early versions of Tor did implement
it).


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121004184929</emailId><senderName>Eugen Leitl</senderName><senderEmail>eugen@leitl.org</senderEmail><timestampReceived>2012-10-04 18:49:29-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

On Thu, Oct 04, 2012 at 01:50:47PM -0400, Robert Ransom wrote:

&gt; The v3 network consensus document must be signed by a majority of the
&gt; (currently nine) directory authorities' signing keys.  None of the

Nice.

&gt; directory authorities are operated by Tor Project, Inc..

Is there a documented process by how these authorities are chosen,
and ways for third parties to audit that it's not a tentacle operation?
 
&gt; &gt; 18:07 &lt;@cjd&gt; run their own botnet with fake tor nodes so your circuit is
&gt; &gt; always owned
&gt; 
&gt; TPI does not have the expertise needed to run a botnet for this purpose.

TPI being...?
 
&gt; &gt; 18:07 &lt;+eleitl&gt; I don't really know for sure, but there's intrinsic trust to
&gt; &gt; Tor developers, yes.
&gt; &gt; 18:08 &lt;+eleitl&gt; You can run your own Tor network, though.
&gt; &gt; 18:08 &lt;+eleitl&gt; Some botnets do that.
&gt; 
&gt; Interesting.  Do you have a reference describing one of these botnets?

Sorry, that was typed in haste. The only botnet using Tor
I'm aware of is 

http://www.reddit.com/r/IAmA/comments/sq7cy/iama_a_malware_coder_and_botnet_operator_ama/

which uses the regular Tor network. Not aware of a botnet
running a private Tor network, though such a thing can be
not far behind.
 
&gt; &gt; 18:08 &lt;@cjd&gt; I trust them to make the software right, esp. since I could
&gt; &gt; check if they did.
&gt; &gt; 18:09 &lt;@cjd&gt; But a little arm twisting can change someone's motives pretty
&gt; &gt; fast.
&gt; &gt; 18:09 &lt;+eleitl&gt; Maintaining signing secrets is a problem.
&gt; &gt; 18:09 &lt;+eleitl&gt; They should have used a P2P design.
&gt; 
&gt; Do you have a ‘P2P design' for Tor which doesn't rely on trusted
&gt; parties ‘maintaining signing secrets' and which isn't broken?

No need to be snarky, I mean well. There are obviously ways in which
network quorum can eliminate authorities as a single point of failure
(see Bitcoin, Tahoe LAFS, etc).

&gt; (Hint: No, you don't.)
&gt; 
&gt; Do you have any ‘P2P design' for Tor at all which isn't broken?

What very few people know: I'm actually a dog. W00f. I don't have the money or 
the skills to do anything which would survive more than a friendly sandbox.
Don't ask me for patches, I'll drag you in a wet skunk which has been dead for
a while.
 
&gt; &gt; 18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your
&gt; &gt; life hell...   I wouldn't fault them
&gt; &gt;              for doing what the man says.
&gt; &gt; 18:10 &lt;@cjd&gt; *wouldn't fault you
&gt; &gt; 18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario,
&gt; &gt; and see how they squirm.
&gt; &gt; 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
&gt; &gt; 18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
&gt; &gt; 18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
&gt; &gt; 18:12 &lt;@cjd&gt; cjdns does the same thing
&gt; 
&gt; If this refers to including the circuit-extension packet which caused
&gt; a relay to open an OR connection in the first UDP packet that it sends
&gt; in order to open that connection, I agree that that would be a good
&gt; thing to do, although mostly for reasons that cjd isn't mentioning.
&gt; 
&gt; If this refers to setting up a complete three-node Tor circuit with
&gt; only one outgoing packet sent by the client, that can be implemented
&gt; without a UDP-based transport (and early versions of Tor did implement
&gt; it).

Thanks, I'll pass that on when I'm cjdnsland again.

By the way, I would be very interested in Tor developer's opinions about
the design of cjdns (of course, that's still pretty much in flux, and
parts of infrastructure missing, particularly P2P DNS).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121004190648</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-10-04 19:06:48-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

On Thu, Oct 04, 2012 at 01:50:47PM -0400, Robert Ransom wrote:
&gt; &gt; 18:04 &lt;+eleitl&gt; I wonder why they didn't choose UDP
&gt; 
&gt; Presumably because TCP was easier.

Yep.

&gt; &gt; 18:05 &lt;@cjd&gt; you need to fall back on tcp in case you're firewalled to hell
&gt; &gt; 18:05 &lt;+eleitl&gt; Apparently, they're thinking about it
&gt; &gt;
&gt; &gt; https://blog.torproject.org/blog/moving-tor-datagram-transport
&gt; 
&gt; Yes.  TCP was a bad choice for Tor.

That said, transporting IP packets end-to-end (i.e., having TCP sessions
end-to-end across the network) is likely a bad choice as well. TCP is
designed for a situation where the core pipes have extra capacity, and
the edges are tiny. The Tor network is the opposite: the edges have lots
of capacity, and the core network is overloaded. The result would be tens
(hundreds?) of thousands of TCP streams all in slow-start talking over
each other.

It's hard to win this one.

&gt; Do you have a ???P2P design??? for Tor which doesn't rely on trusted
&gt; parties ???maintaining signing secrets??? and which isn't broken?
&gt; (Hint: No, you don't.)
&gt; 
&gt; Do you have any ???P2P design??? for Tor at all which isn't broken?

For some reading, see
http://freehaven.net/anonbib/#wpes09-dht-attack
and all the papers around it.

&gt; &gt; 18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your
&gt; &gt; life hell...   I wouldn't fault them
&gt; &gt;              for doing what the man says.
&gt; &gt; 18:10 &lt;@cjd&gt; *wouldn't fault you
&gt; &gt; 18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario,
&gt; &gt; and see how they squirm.

See also
https://www.torproject.org/docs/faq#KeyManagement
https://gitweb.torproject.org/tor.git/blob/HEAD:/doc/contrib/authority-policy.txt

https://gitweb.torproject.org/tor.git/blob/HEAD:/src/or/config.c#l741

as for who the directory authority operators are, I suggest you attend
one of the Tor developer meetings. I think we have enough diversity that
nobody can roll over silently in a way that damages users.

If somebody wants to hack on
https://metrics.torproject.org/consensus-health.html
to make it better at noticing anomalies, please do.

&gt; &gt; 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
&gt; &gt; 18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
&gt; &gt; 18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
&gt; &gt; 18:12 &lt;@cjd&gt; cjdns does the same thing
&gt; 
&gt; If this refers to including the circuit-extension packet which caused
&gt; a relay to open an OR connection in the first UDP packet that it sends
&gt; in order to open that connection, I agree that that would be a good
&gt; thing to do, although mostly for reasons that cjd isn't mentioning.
&gt; 
&gt; If this refers to setting up a complete three-node Tor circuit with
&gt; only one outgoing packet sent by the client, that can be implemented
&gt; without a UDP-based transport (and early versions of Tor did implement
&gt; it).

I think http://freehaven.net/anonbib/#sphinx-onion-fc10 is a good
introduction to this topic.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121005120739</emailId><senderName>Jacob Appelbaum</senderName><senderEmail>jacob@appelbaum.net</senderEmail><timestampReceived>2012-10-05 12:07:39-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

Eugen Leitl:
&gt;&gt;&gt; 18:08 &lt;@cjd&gt; I trust them to make the software right, esp. since I could
&gt;&gt;&gt; check if they did.
&gt;&gt;&gt; 18:09 &lt;@cjd&gt; But a little arm twisting can change someone's motives pretty
&gt;&gt;&gt; fast.
&gt;&gt;&gt; 18:09 &lt;+eleitl&gt; Maintaining signing secrets is a problem.
&gt;&gt;&gt; 18:09 &lt;+eleitl&gt; They should have used a P2P design.
&gt;&gt;
&gt;&gt; Do you have a ‘P2P design' for Tor which doesn't rely on trusted
&gt;&gt; parties ‘maintaining signing secrets' and which isn't broken?
&gt; 
&gt; No need to be snarky, I mean well. There are obviously ways in which
&gt; network quorum can eliminate authorities as a single point of failure
&gt; (see Bitcoin, Tahoe LAFS, etc).

He isn't being snarky - he's being honest and knows the research better
than most.

&gt; 
&gt;&gt; (Hint: No, you don't.)
&gt;&gt;
&gt;&gt; Do you have any ‘P2P design' for Tor at all which isn't broken?
&gt; 
&gt; What very few people know: I'm actually a dog. W00f. I don't have the money or 
&gt; the skills to do anything which would survive more than a friendly sandbox.
&gt; Don't ask me for patches, I'll drag you in a wet skunk which has been dead for
&gt; a while.
&gt;  
&gt;&gt;&gt; 18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your
&gt;&gt;&gt; life hell...   I wouldn't fault them
&gt;&gt;&gt;              for doing what the man says.
&gt;&gt;&gt; 18:10 &lt;@cjd&gt; *wouldn't fault you
&gt;&gt;&gt; 18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario,
&gt;&gt;&gt; and see how they squirm.
&gt;&gt;&gt; 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
&gt;&gt;&gt; 18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
&gt;&gt;&gt; 18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
&gt;&gt;&gt; 18:12 &lt;@cjd&gt; cjdns does the same thing
&gt;&gt;

Huh. Wow. I just... Excuse me? Who suggests that no Tor developers
haven't already had their arm twisted and stood their ground? Who
suggests that those who run a Tor Directory Authority would comply with
the "man" and what "they" say? On what evidence do they say these
things? Do they understand the moral and ethical character of the people
running those systems? No, they most certainly do not. Do they even know
the history of harassment that Tor people have faced in various
circumstances? No, they clearly do not know these things.

I certainly have had attempts, serious attempts by powerful people, to
crush my spirit, to push me out of the anonymity space and to punish me
for speaking out about anonymity as a fundamental human right.

I don't take kindly to anyone suggesting that 1) such harassment hasn't
happened and 2) if it were to happen, we'd just roll over like a bunch
of assholes.

Did I mention how offensive that uneducated kind of statement is to
people who work day and night on these problems? To those who have
struggled against state surveillance, state harassment and other
extra-legal issues?

It's bad enough that someone would suggest a bunch of broken designs
would be better. It suggests a lack of understanding of the anonymity
space and that is self-evident, hardly worth refuting. However, the rest
of the comments are just over the top in their absolutely ridiculous
nature. Such statements are totally offensive and absurd to the core.

Run Tor nodes if you're worried about the integrity of Tor nodes and the
integrity of the network as a whole; be part of the solution by taking
practical action on the matter.

Sincerely,
Jacob
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20121005145745</emailId><senderName>Andrew Lewman</senderName><senderEmail>andrew@torproject.is</senderEmail><timestampReceived>2012-10-05 14:57:45-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

On Fri, 05 Oct 2012 12:07:39 +0000
Jacob Appelbaum &lt;jacob@appelbaum.net&gt; wrote:

&gt; Huh. Wow. I just... Excuse me? Who suggests that no Tor developers
&gt; haven't already had their arm twisted and stood their ground? Who
&gt; suggests that those who run a Tor Directory Authority would comply
&gt; with the "man" and what "they" say? On what evidence do they say these
&gt; things? Do they understand the moral and ethical character of the
&gt; people running those systems? No, they most certainly do not. Do they
&gt; even know the history of harassment that Tor people have faced in
&gt; various circumstances? No, they clearly do not know these things.

Towards this point, very few know who run the DirAuths, where they are,
and how we vetted these people. We've done a bad job of communicating
this info.

-- 
Andrew
http://tpo.is/contact
pgp 0x6B4D6475
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121006091001</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-06 09:10:01-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Jacob Appelbaum (jacob@appelbaum.net):

&gt; &gt;&gt;&gt; 18:10 &lt;@cjd&gt; If someone (with government hat?) tells you they can make your
&gt; &gt;&gt;&gt; life hell...  I wouldn't fault them for doing what the man says.
&gt; &gt;&gt;&gt; 18:10 &lt;@cjd&gt; *wouldn't fault you
&gt; &gt;&gt;&gt; 18:10 &lt;+eleitl&gt; I'll try bugging some Tor developers about that scenario,
&gt; &gt;&gt;&gt; and see how they squirm.
&gt; &gt;&gt;&gt; 18:11 &lt;+eleitl&gt; Also, the UDP connection thing.
&gt; &gt;&gt;&gt; 18:11 &lt;@cjd&gt; You can "stack" your circuit setup packets if you're using UDP
&gt; &gt;&gt;&gt; 18:11 &lt;@cjd&gt; stack -&gt; all headers in the same packet
&gt; &gt;&gt;&gt; 18:12 &lt;@cjd&gt; cjdns does the same thing
&gt; 
&gt; Huh. Wow. I just... Excuse me? Who suggests that no Tor developers
&gt; haven't already had their arm twisted and stood their ground? Who
&gt; suggests that those who run a Tor Directory Authority would comply with
&gt; the "man" and what "they" say? On what evidence do they say these
&gt; things? Do they understand the moral and ethical character of the people
&gt; running those systems? No, they most certainly do not. Do they even know
&gt; the history of harassment that Tor people have faced in various
&gt; circumstances? No, they clearly do not know these things.
&gt; 
&gt; I certainly have had attempts, serious attempts by powerful people, to
&gt; crush my spirit, to push me out of the anonymity space and to punish me
&gt; for speaking out about anonymity as a fundamental human right.
&gt; 
&gt; I don't take kindly to anyone suggesting that 1) such harassment hasn't
&gt; happened and 2) if it were to happen, we'd just roll over like a bunch
&gt; of assholes.

I agree: the assumption was a little rude, and it's clear that cjd
doesn't understand what we're made of. It's an easy assumption to make,
though. After all, the world hasn't seen European Enlightenment values
seriously defended in at least 50 years (or more). :/

However, the real problem here is that the rubberhose attack vector
isn't limited to beating down the few renegade buddhists that the Tor
Project manages to somehow authenticate, locate, and vet as capable of
being beyond pain...

*Anyone* with *any* access to the data centers that host the directory
authorities is potentially subject to either a coercive or subversive
attack to gain access to a majority of the dirauth key material, and
thus generate fraudulent, targeted consensuses...


As you know, I've been digging down the rabbit hole of how to ensure the
integrity of a remote machine, and it seems impossible to do this
without both secure boot *and* a way to verify the current runtime
integrity. Without these properties, it would seem our current model is
untenable long-term.

Yet still, as Roger and Robert point out, there are some serious
questions about the viability of decentralized directory/consensus
systems. Or, at least questions that sexified attack papers can make to
seem serious. (For example: I don't believe TorSK was actually broken
beyond Tor's current properties...).


However, as a stopgap, perhaps we might consider a Perspectives-style
component/addon to HTTPS-Everywhere/TBB/Vidalia for multipath consensus
verification. For example, random people could publish signed statements
of the latest SHA512 hash of the current consensus for the hour to a git
repository or other append-only data structure. This repository could be
easily mirrored widely, and it would be trivial for mirrors to ensure
the integrity of their copies...

With such methods (which can surely start as manual-only), we can
provide multiple mechanisms of consensus validation in tandem, and the
security of the network directory would be governed by the security of
the union of all of these systems.

In fact, it should even be possible for Tor clients to store such
consensus hashes for later validation, to see if they had been
compromised at points in the past. One could even physically smuggle a
USB key out of a potentially targeted location to verify consensus
integrity from another location, at a later date...


Unfortunately, the fake consensus attack is arguably *not* the easiest
way to perform route capture on the Tor network today. It might be #2,
though...


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121005143750</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-10-05 14:37:50-0400</timestampReceived><subject>Re: [tor-dev] how to configure the window size of tor browser</subject><body>

jiang song:
&gt; Hi,
&gt; 
&gt;    I want to make the tor browser with certain size, eg. 650*650, so as to
&gt; do some test on some webpages
&gt;    I used command line like:
&gt; 
&gt;        App/Firefox/firefox --profile Data/profile -height 650 -width 650
&gt; 
&gt;    but it doesn't work
&gt; 
&gt;    I tried to modify localstore.rdf in Data/profile, but it is dynamically
&gt; changed by running the browser
&gt; 
&gt;    does anybody know how the size is set in the TBB and which configuration
&gt; file can I modify ? thanks

Does User.js help?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121005145937</emailId><senderName>jiang song</senderName><senderEmail>luolisongjiang@gmail.com</senderEmail><timestampReceived>2012-10-05 14:59:37-0400</timestampReceived><subject>Re: [tor-dev] how to configure the window size of tor browser</subject><body>

[Attachment #2 (multipart/alternative)]


thanks, there is no user.js in the folder



On Fri, Oct 5, 2012 at 4:37 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:

&gt; jiang song:
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt;    I want to make the tor browser with certain size, eg. 650*650, so as
&gt; to
&gt; &gt; do some test on some webpages
&gt; &gt;    I used command line like:
&gt; &gt;
&gt; &gt;        App/Firefox/firefox --profile Data/profile -height 650 -width 650
&gt; &gt;
&gt; &gt;    but it doesn't work
&gt; &gt;
&gt; &gt;    I tried to modify localstore.rdf in Data/profile, but it is
&gt; dynamically
&gt; &gt; changed by running the browser
&gt; &gt;
&gt; &gt;    does anybody know how the size is set in the TBB and which
&gt; configuration
&gt; &gt; file can I modify ? thanks
&gt;
&gt; Does User.js help?
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

thanks, there is no user.js in the folder&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On \
Fri, Oct 5, 2012 at 4:37 PM, adrelanos &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:adrelanos@riseup.net" \
target="_blank"&gt;adrelanos@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt; &lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;jiang song:&lt;br&gt; &lt;div&gt;&lt;div class="h5"&gt;&gt; Hi,&lt;br&gt;
&gt;&lt;br&gt;
&gt;    I want to make the tor browser with certain size, eg. 650*650, so as to&lt;br&gt;
&gt; do some test on some webpages&lt;br&gt;
&gt;    I used command line like:&lt;br&gt;
&gt;&lt;br&gt;
&gt;        App/Firefox/firefox --profile Data/profile -height 650 -width 650&lt;br&gt;
&gt;&lt;br&gt;
&gt;    but it doesn't work&lt;br&gt;
&gt;&lt;br&gt;
&gt;    I tried to modify localstore.rdf in Data/profile, but it is dynamically&lt;br&gt;
&gt; changed by running the browser&lt;br&gt;
&gt;&lt;br&gt;
&gt;    does anybody know how the size is set in the TBB and which configuration&lt;br&gt;
&gt; file can I modify ? thanks&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;Does User.js help?&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121003042929</emailId><senderName>Sambuddho Chakravarty</senderName><senderEmail>sc2516@columbia.edu</senderEmail><timestampReceived>2012-10-03 04:29:29-0400</timestampReceived><subject>Re: [tor-dev] Tor's current traffic scheduling</subject><body>

[Attachment #2 (multipart/alternative)]


Great! Thanks a lot !
Sambuddho

On Tue, Oct 2, 2012 at 4:01 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; On Tue, Oct 02, 2012 at 03:28:04PM -0400, Sambuddho Chakravarty wrote:
&gt; &gt; Hi All
&gt; &gt;  I am a bit curious to know how does the traffic scheduling work in the
&gt; &gt; present Tor distributions. Is it EWMA or the old round robin method ?
&gt;
&gt; It's EWMA.
&gt;
&gt; At https://metrics.torproject.org/consensus-health.html#consensusparams
&gt; you can see CircuitPriorityHalflifeMsec is set to 30 seconds.
&gt;
&gt; --Roger
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Great! Thanks a lot !&lt;div&gt;Sambuddho&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On \
Tue, Oct 2, 2012 at 4:01 PM, Roger Dingledine &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:arma@mit.edu" target="_blank"&gt;arma@mit.edu&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;On Tue, Oct 02, 2012 at \
03:28:04PM -0400, Sambuddho Chakravarty wrote:&lt;br&gt; &gt; Hi All&lt;br&gt;
&gt;   I am a bit curious to know how does the traffic scheduling work in the&lt;br&gt;
&gt; present Tor distributions. Is it EWMA or the old round robin method ?&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;It's EWMA.&lt;br&gt;
&lt;br&gt;
At &lt;a href="https://metrics.torproject.org/consensus-health.html#consensusparams" \
target="_blank"&gt;https://metrics.torproject.org/consensus-health.html#consensusparams&lt;/a&gt;&lt;br&gt;
 you can see CircuitPriorityHalflifeMsec is set to 30 seconds.&lt;br&gt;
&lt;br&gt;
--Roger&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121003143135</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-10-03 14:31:35-0400</timestampReceived><subject>[tor-dev] gsathya's August devlog</subject><body>

Tickets I hacked on -

### Compass

#6498 - make compass, add FastExits, AlmostFastExits options
#6679 - Make Compass' website interface more intuitive
#6618 - Convert Compass to a single page app
#6692 - Displaying more information when using 'group by' feature
#6696 - add Byte/s to Advertised Bandwidth column
#6617 - fix links to atlas
#6681 - change top to default to -1

* Code reviewed Karsten's patches to #6680, #6702, #6693.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121003143304</emailId><senderName>Sathyanarayanan Gunasekaran</senderName><senderEmail>gsathya@torproject.org</senderEmail><timestampReceived>2012-10-03 14:33:04-0400</timestampReceived><subject>[tor-dev] gsathya's September devlog</subject><body>

Tickets I hacked on, closed, discussed, code reviewed, etc  -

### Pyonionoo
* Hacked on the Pyonionoo front end to make it deployable. I've mostly
finished implementing all the features. Thanks to karsten for the
really fast code reviews!

#6708: Pyonionoo returns code 500 for a few parameters
#6954: Internal Pyonionoo thread prints out traceback after 1 minute
#6953: (relays|bridges)_published in Pyonionoo should not depend on
relays/bridges contained in result
#6956: lookup and country parameters in Pyonionoo should not be case-sensitive
#6955: Illegal value for type parameter leads to uncaught exception in Pyonionoo
#6707: Pyonionoo leaves out "relays[ _published]" when asking only for bridges

### Onionoo
#6864: search shouldn't use space separated values

### Metrics Analysis
#1854: Investigate raising the minimum bandwidth for getting the Fast flag
* Made https://pad.riseup.net/p/tormetrics with asn and Aaron's help
-- need to start working on it rsn.

### Atlas
#6711: Replace full exit policy with exit policy summary on relay details page

### Compass
#6618: convert compass to a single page app
#6677: add a 'total' line at the bottom of the table
#6818: compass appears broken
#6807: Add a loading image when doing an Ajax request
#6639: Rename navigation bar entries, add About page and logo
#6691: BaseFilter isn't really an abstract class... yet
#6959: compass calls itself tor metrics

Things to do in October -
* Deploy pyonionoo front end.
* Hack on my undergrad thesis - Measuring the diversity of Tor network
* Restart work on pyonionoo back end.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121004143402</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2012-10-04 14:34:02-0400</timestampReceived><subject>[tor-dev] Damian's Status Report - September 2012</subject><body>

Hi all. As is often the case work and such meant not too much time for
tor. For September all I have to report is...

* Network Status Document Parsing

This has been my main focus for September and it's still not
finished... but it's close! Version 3 document parsing just has a
couple days of work left, then abstracting it to cover v2 documents
and microdescriptors should be relatively easy-ish. I'm really looking
forward to merging this feature branch. It has grown quite
monstrous...

https://gitweb.torproject.org/user/atagar/stem.git/shortlog/refs/heads/document-parsing

* Stem Documentation Hosting

For a while now I've had a TODO item for making a nightly cron that
built and hosted Stem's new sphinx documentation. I was about to do
this when I recalled that meejah once recommended ReadTheDocs, a
service that does... well, exactly that. After a few minor bumps
[1][2][3] it's now live...

https://stem.readthedocs.org/

We definitely need to put effort into making them more reader
friendly. At present it's just a dump of all the pydocs which, while
informative, is actually a bit overwhelming for new users. Module
summary pages would greatly help.

* MAPADDRESS Support

Ravi submitted a patch for adding MAPADDRESS support to stem's
controller. It's a nice addition, especially the integ test...

https://trac.torproject.org/6951

* Arm Issues

Looked into a couple arm issues...

- Tor's start time didn't show up if the system has proc contents but
we fail to parse it [5].
- Can't connect when using a control socket with password auth [6].

* Updated Dev Wiki

In response to a potential volunteer I wrote a summary of several
development tasks [4]. Updated stem's wiki with what was in that
email...

https://trac.torproject.org/projects/tor/wiki/doc/stem

Cheers! -Damian

[1] https://github.com/rtfd/readthedocs.org/issues/255
[2] https://github.com/rtfd/readthedocs.org/issues/256
[3] https://gitweb.torproject.org/stem.git/commitdiff/705b61674e8cec9e5608a32c6a50a708fee8c5f7
[4] https://lists.torproject.org/pipermail/tor-dev/2012-September/004021.html
[5] https://trac.torproject.org/6862
[6] https://trac.torproject.org/6881
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121005074917</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2012-10-05 07:49:17-0400</timestampReceived><subject>[tor-dev] The Tor Project is looking for a Pluggable Transport developer</subject><body>

We have funding initially for part-time work, and hopefully it will grow
into full-time work. Please spread the word!

This job is for the development and maintenance of the flash proxy
circumvention system, with a focus on deployment and getting tools in
the hands of users:
https://crypto.stanford.edu/flashproxy/
https://gitweb.torproject.org/flashproxy.git/
If it goes well, we might have you branch out into improving usability
and deployability of other Tor pluggable transports.

Applicants must be familiar with Python, JavaScript, and web technologies,
particularly WebSocket. You will do usability testing and be in charge
of producing binary packages of client software for GNU/Linux, Windows,
and OS X. The system's supporting infrastructure is already in place,
but may require changes depending on the future development of the
client programs. There also is the potential for the development and
implementation of new covert rendezvous methods that may have broader
use outside the flash proxy system.

You will be assisted and mentored by David Fifield, the primary developer
of the flash proxy software and co-author of its research paper, and
all-around good guy.

See the job posting for information on how to apply and what you need
to send in with your application:
https://www.torproject.org/about/jobs-pluggabletransport

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121005113917</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-10-05 11:39:17-0400</timestampReceived><subject>[tor-dev] about plugins enable/disable and window size</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

    I want to control the window size of Firefox browser and whether a
plugin is enabled or disabled when a new firefox browser is opened.

    Currently I'm using a Tor browser which is a modified firefox browser,
when I open it, the window size is set by default and flash plugin  is by
default disabled. even if I try to set them mannually, the next time  I
open a new firefox window, the setting return to default. I want to know
which configuration files or what part of the source codes are controling
this default setting, and I want to modify it.

    can anybody give me some solution or hints? thanks!

[Attachment #5 (text/html)]

Hi,&lt;br&gt;&lt;br&gt;    I want to control the window size of Firefox browser and whether a 
plugin is enabled or disabled when a new firefox browser is opened.&lt;br&gt;&lt;br&gt; 
   Currently I'm using a Tor browser which is a modified firefox 
browser, when I open it, the window size is set by default and flash 
plugin  is by default disabled. even if I try to set them mannually, the
 next time  I open a new firefox window, the setting return to default. I
 want to know which configuration files or what part of the source codes
 are controling this default setting, and I want to modify it.&lt;br&gt;
&lt;br&gt;    can anybody give me some solution or hints? thanks!


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121005161425</emailId><senderName>adrelanos</senderName><senderEmail>adrelanos@riseup.net</senderEmail><timestampReceived>2012-10-05 16:14:25-0400</timestampReceived><subject>Re: [tor-dev] how to configure the window size of tor browser</subject><body>

On the dev list I expect you to do basic searches with your favorite
search engine: "firefox user.js".

http://kb.mozillazine.org/User.js_file

&gt; thanks, there is no user.js in the folder
&gt; 
&gt; 
&gt; 
&gt; On Fri, Oct 5, 2012 at 4:37 PM, adrelanos &lt;adrelanos@riseup.net&gt; wrote:
&gt; 
&gt;&gt; jiang song:
&gt;&gt;&gt; Hi,
&gt;&gt;&gt;
&gt;&gt;&gt;    I want to make the tor browser with certain size, eg. 650*650, so as
&gt;&gt; to
&gt;&gt;&gt; do some test on some webpages
&gt;&gt;&gt;    I used command line like:
&gt;&gt;&gt;
&gt;&gt;&gt;        App/Firefox/firefox --profile Data/profile -height 650 -width 650
&gt;&gt;&gt;
&gt;&gt;&gt;    but it doesn't work
&gt;&gt;&gt;
&gt;&gt;&gt;    I tried to modify localstore.rdf in Data/profile, but it is
&gt;&gt; dynamically
&gt;&gt;&gt; changed by running the browser
&gt;&gt;&gt;
&gt;&gt;&gt;    does anybody know how the size is set in the TBB and which
&gt;&gt; configuration
&gt;&gt;&gt; file can I modify ? thanks
&gt;&gt;
&gt;&gt; Does User.js help?
&gt;&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121006140841</emailId><senderName>Robert Ransom</senderName><senderEmail>rransom.8774@gmail.com</senderEmail><timestampReceived>2012-10-06 14:08:41-0400</timestampReceived><subject>Re: [tor-dev] resistance to rubberhose and UDP questions</subject><body>

On 10/6/12, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:

&gt; Yet still, as Roger and Robert point out, there are some serious
&gt; questions about the viability of decentralized directory/consensus
&gt; systems. Or, at least questions that sexified attack papers can make to
&gt; seem serious. (For example: I don't believe TorSK was actually broken
&gt; beyond Tor's current properties...).

Torsk relied on a trusted party to sign relay descriptors.  Its goal
was to reduce the (asymptotic) total amount of directory
communication, not to remove the need for directory authorities.


Robert Ransom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121008024817</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-08 02:48:17-0400</timestampReceived><subject>Re: [tor-dev] 10 days left for proposals for hard stuff [Re: Reminder: Big/tricky/interesting featur</subject><body>

On Sat, Oct 6, 2012 at 10:32 AM, Fabio Pietrosanti (naif)
&lt;lists@infosecurity.ch&gt; wrote:
&gt; On 10/1/12 6:49 PM, Nick Mathewson wrote:
&gt;&gt;&gt; Hi, all!
&gt;&gt;&gt;
&gt;&gt;&gt; From https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/024 :
&gt;&gt;&gt;
&gt;&gt;&gt; "October 10, 2012: Big feature proposal checkpoint. Any large
&gt;&gt;&gt; complicated feature which requires a design proposal must have its
&gt;&gt;&gt; first design proposal draft by this date."
&gt;
&gt; Do you think that this feature to handle TorHS Key via Tor CP would
&gt; require to take a proposal to be within 0.2.4.x ?
&gt;
&gt; Ref:
&gt; https://trac.torproject.org/projects/tor/ticket/6411
&gt; https://trac.torproject.org/projects/tor/ticket/5976

I tagged it as "maybe proposal" because it involves a protocol change.
 I am not sure whether the change it requires would be big enough to
require a proposal for the 10th of this month or not.

I don't need a huge writeup: Just enough to explain how it's supposed
to work and why you'd want to do it that way.  The "write the whole
private key in one argument" thing seems off to me, as does putting
the responsibility for private key management on the controller
exclusively.

(That patch is a nonstarter for other reasons, too; see the comment I
just posted to the ticket.  Heap overflows are not our friends.)

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121011034619</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-10-11 03:46:19-0400</timestampReceived><subject>[tor-dev] Proposal 206: Preconfigured directory sources for bootstrapping</subject><body>

Filename: 206-directory-sources.txt
Title: Preconfigured directory sources for bootstrapping
Author: Nick Mathewson
Created: 10-Oct-2012
Status: Open
Target: 0.2.4.x


Motivation and History:

   We've long wanted a way for clients to do their initial
   bootstrapping not from the directory authorities, but from some
   other set of nodes expected to probably be up when future clients are
   starting.

   We tried to solve this a while ago by adding a feature where we could
   ship a 'fallback' networkstatus file -- one that would get parsed
   when we had no current networkstatus file, and which we would use to
   learn about possible directory sources.  But we couldn't actually use
   it, since it turns out that a randomly chosen list of directory
   caches from 4-5 months ago is a terrible place to go when
   bootstrapping.

   Then for a while we considered an "Extra-Stable" flag so that clients
   could use only nodes with a long history of existence from these
   fallback networkstatus files.  We never built it, though.

   Instead, we can do this so much more simply.  If we want to ship Tor
   with a list of initial locations to go for directory information, why
   not just do so?

Proposal:

   In the same way that Tor currently ships with a list of directory
   authorities, Tor should also ship with a list of directory sources --
   places to go for an initial consensus if you don't have a somewhat
   recent one.

   These need to include an address for the cache's ORPort, and its
   identity key.  Additionally, they should include a selection weight.

   They can be configured with a torrc option, just like directory
   authorities are now.

   Whenever Tor is starting without a consensus, if it would currently
   ask a directory authority for a consensus, it should instead ask one
   of these preconfigured directory sources.

   I have code for this (see git branch fallback_dirsource_v2) in my
   public repository.

   When we deploy this, we can (and should) rip out the Fallback
   Networkstatus File logic.


How to find nodes to make into directory sources:

   We could take any of three approaches for selecting these initial
   directory sources.

   First, we could try to vet them a little, with a light variant of the
   process we use for authorities.  We'd want to look for nodes where we knew
   the operators, verify that they were okay with keeping the same IP for a
   very long time, and so forth.

   Second, we could try to pick nodes for listing with each Tor release
   based entirely on how long those nodes have been up.  Anything that's
   been a high-reliability directory for a long time on the same IP
   (like, say, a year) could be a good choice.

   Third, we could blend the approach and start by looking for
   up-for-a-long-time nodes, and then also ask the operators whether
   their nodes are likely to stay running for a long time.

   I think the third model is best.


Some notes on security:

   Directory source nodes have an opportunity to learn about new users
   connecting to the network for the first time.  Once we have directory
   guards, that's going to be a fairly uncommon ability.  We should be
   careful in any directory guard design to make sure that we don't fall
   back to the directory sources any more than we need to.  See proposal 207.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121011034737</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2012-10-11 03:47:37-0400</timestampReceived><subject>[tor-dev] Proposal 208: IPv6 Exits Redux</subject><body>

Filename: 208-ipv6-exits-redux.txt
Title: IPv6 Exits Redux
Author: Nick Mathewson
Created: 10-Oct-2012
Status: Open
Target: 0.2.4.x


1. Obligatory Motivation Section

   [Insert motivations for IPv6 here.  Mention IPv4 address exhaustion.

   Insert official timeline for official IPv6 adoption here.

   Insert general desirability of being able to connect to whatever
   address there is here.

   Insert profession of firm conviction that eventually there will be
   something somebody wants to connect to which requires the ability to
   connect to an IPv6 address.]

2. Proposal

   Proposal 117 has been there since coderman wrote it in 2007, and it's
   still mostly right.  Rather than replicate it in full, I'll describe
   this proposal as a patch to it.

2.1. Exit policies

   Rather than specify IPv6 policies in full, we should move (as we have
   been moving with IPv4 addresses) to summaries of which IPv6 ports
   are generally permitted.  So let's allow server descriptors to include
   a list of accepted IPv6 ports, using the same format as the "p" line
   in microdescriptors, using the "ipv6-policy" keyword.

        "ipv6-policy" SP ("accept" / "reject") SP PortList NL

   Exits should still, of course, be able to configure more complex
   policies, but they should no longer need to tell the whole world
   about them.

   After this ipv6-policy line is validated, it should get copied into a
   "p6" line in microdescriptors.


   This change breaks the existing exit enclave idea for IPv6, but the
   exiting exit enclave implementation never worked right in the first
   place.  If we can come up with a good way to support it, we can add
   that back in.

2.2. Which addresses should we connect to?

   One issue that's tripped us up a few times is how to decide whether
   we can use IPv6 addresses.  You can't use them with SOCKS4 or
   SOCKS4a, IIUC.  With SOCKS5, there's no way to indicate that you
   prefer IPv4 or IPv6.  It's possible that some SOCKS5 users won't
   understand IPv6 addresses.

   With this in mind, I'm going to suggest that with SOCKS4 or SOCKS4a,
   clients should always require IPv4.  With SOCKS5, clients should
   accept IPv6.

   If it proves necessary, we can also add per-SOCKSPort configuration
   flags to override the above default behavior.

   See also partitioning discussion in Security Notes below.

2.3. Extending BEGIN cells.

   Prop117 (and the section above) says that clients should prefer one
   address or another, but doesn't give them a means to tell the exit to
   do so.  Here's one.

   We define an extension to the BEGIN cell as follows.  After the
   ADDRESS | ':' | PORT | [00] portion, the cell currently contains all
   [00] bytes.  We add a 32-bit flags field, stored as an unsigned 32
   bit value, after the [00].  All these flags default to 0, obviously.
   We define the following flags:

     bit
      1 -- IPv6 okay.  We support learning about IPv6 addresses and
           connecting to IPv6 addresses.
      2 -- IPv4 not okay.  We don't want to learn about IPv4 addresses
           or connect to them.
      3 -- IPv6 preferred.  If there are both IPv4 and IPv6 addresses,
           we want to connect to the IPv6 one.  (By default, we connect
           to the IPv4 address.)
      4..32 -- Reserved.

   As with so much else, clients should look at the platform version of
   the exit they're using to see if it supports these flags before
   sending them.

2.4. Minor changes to proposal 117

   GETINFO commands that return an address, and which should return two,
   should not in fact begin returning two addresses separated by CRLF.
   They should retain their current behavior, and there should be a new
   "all my addresses" GETINFO target.

3. Security notes:

   Letting clients signal that they want or will accept IPv6 addresses
   creates two partitioning issues that didn't exist before.  One is the
   version partitioning issue: anybody who supports IPv6 addresses is
   obviously running the new software.  Another is option partitioning:
   anybody who is using a SOCKS4a application will look different from
   somebody who is using a SOCKS5 application.

   We can't do much about version partitioning, I think.  If we felt
   especially clever, we could have a flag day.  Is that necessary?

   For option partitioning, are there many applications whose behavior
   is indistinguishable except that they are sometimes configured to use
   SOCKS4a and sometimes to use SOCKS5?  If so, the answer may well be
   to persuade as many users as possible to switch those to SOCKS5, so
   that they get IPv6 support and have a large anonymity set.



   IPv6 addresses are plentiful, which makes caching them dangerous
   if you're hoping to avoid tracking over time.  (With IPv4 addresses,
   it's harder to give every user a different IPv4 address for a target
   hostname with a long TTL, and then accept connections to those IPv4
   addresses from different exits over time.  With IPv6, it's easy.)
   This makes proposal 205 especially necessary here.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121011143649</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-11 14:36:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Faster Headless Consensus Bootstrapping</subject><body>

On Thu, Oct 11, 2012 at 5:32 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/consensus-bootstrap:/proposals/xxx-faster-headless-consensus-bootstrap.txt
&gt;  

Added this as proposal 210.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121011143845</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-11 14:38:45-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Internal Mapaddress for Tor Configuration Testing</subject><body>

On Thu, Oct 11, 2012 at 5:38 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/mapaddress-check:/proposals/xxx-mapaddress-tor-status.txt
&gt;  

This is now proposal 211.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121012155104</emailId><senderName></senderName><senderEmail>meejah</senderEmail><timestampReceived>2012-10-12 15:51:04-0400</timestampReceived><subject>[tor-dev] txtorcon 0.6</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1



txtorcon 0.6 is now tagged and released. 

txtorcon is a Twisted-based Python asynchronous implementation of the
Tor control protocol. It includes a state-tracking abstraction,
configuration abstraction, Twisted endpoint support for hidden
services, 96%+ unit-test coverage and many examples.

New in this release:

 . debian packaging (mmaker);
 . psutil fully gone;
 . *changed API* for launch_tor() to use TorConfig instead of args;
 . TorConfig.save() works properly with no connected Tor;
 . fix incorrect handling of 650 immediately after connect;
 . pep8 compliance;
 . use assertEqual in tests;
 . messages with embdedded keywords work properly;
 . fix bug with setup.py + pip;
 . issue #15 reported along with patch by Isis Lovecruft;
 . consolidate requirements (from aagbsn);
 . increased test coverage and various minor fixes;
 . https URIs for ReadTheDocs

Code and built documentation may be obtained:

   https://github.com/meejah/txtorcon
   https://txtorcon.readthedocs.org/en/latest/index.html

   git clone git://github.com/meejah/txtorcon.git

You may also install it directly:

   pip install txtorcon
   easy_install txtorcon

The sha256sum output is:

4f939e217ea3149175bb1285fa7296edc02ac245a71a60ec77b9cf48511e991e  txtorcon-0.6.tar.gz

thanks,
meejah

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Processed by Mailcrypt 3.5.8 &lt;http://mailcrypt.sourceforge.net/&gt;

iQEcBAEBAgAGBQJQd5uqAAoJEMJgKAMSgGmnTCkIAOGT6QaE+Q8jaBOedE79j/B3
QYMXh1SSfrvxn2x/utmjIgRbvCrCE+lzkxv9T9GXXjAhKSRN2xyyhRxq/Mbxvucd
FWb2zHyZIjsTcc//veHYNpRNEWORl1ZIG2kU0muHQPpxY5ZAvtEkW+RA5zMJbhHp
LF/JyltsAEu1Ja6HMFsfPmlLZiOtWBkBi3MgGGenUVJsScrtGRNCjWutGEkXxKXe
9pw2W0IGH5YmBAUiAuSW6q4cnyPQroqjSgO+RFfKMVGJNAaSqgUE8UCkcCifyjjM
2cDtGNA50kU0obT8QLgsiRyavePCQSfn9Jr1y8/Ck45Toa9a4FOQbBlOOyQSgrY=
=bORU
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121015024909</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 02:49:09-0400</timestampReceived><subject>Re: [tor-dev] [patch] fix cparser/firm compiler warnings</subject><body>

On Sun, Oct 14, 2012 at 5:03 AM, Christian Grothoff
&lt;christian@grothoff.org&gt; wrote:
&gt; Hi!
&gt;
&gt; We're trying to compile Tor with cparser and got some warnings and an
&gt; error.

Patch looks okay to me!  In the future, it is indeed best to use the
bugtracker.  I've added it at
https://trac.torproject.org/projects/tor/ticket/7115 , with a question
to consider (on the tracker) about which branch to merge it into.

(I've made a ticket for it because one possible answer is "0.2.3", and
we shouldn't merge anything into 0.2.3 without a ticket.)

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121015191233</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-15 19:12:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 207: Directory guards</subject><body>

On Mon, Oct 15, 2012 at 2:48 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
[...]
&gt; Again, this experimentation is already done. It's quite clear that
&gt; adding more objects to the world of Guard activity reduces traffic
&gt; fingerprinting accuracy, regardless of if that activity is concurrent
&gt; with client traffic or not.

If that's the case, then it would amount to, what? the equivalent of
every user visiting one additional website on a regular basis?  Every
user visiting approximately the same website (since everybody
downloads the same directory info)?

My understanding is that while users *would* resist fingerprinting
better if everybody picked a random website off the internet and
visited it periodically, it wouldn't help much if (say) we told
everybody to visit CNN once a day. Gotta reread that paper and see if
it says differently.

&gt; The only thing that would change this is if the adversary could somehow
&gt; detect your directory activity using some other information channel
&gt; other than the actual traffic patterns to specific Guards. If such a
&gt; side channel exists, then yes, we would likely only experience the
&gt; benefit during concurrent activity (due to feature resolution
&gt; degradation).

Huh. If they're observing you, I bet directory traffic would be
relatively easy to note.  It's going to happen periodically whenever
consensuses become unfresh; and it's doing to involve simultaneous
requests to (approximately) all your guards; and has a characteristic
"make one request for the consensus, then make a lot of requests to
everybody for the descriptors" pattern; and it has a characteristic
patterns of retries that probably doesn't look the same as retrying a
failed circuit.

Further, the observer *knows* that the client is going to be making
directory requests periodically: part of their algorithm is now going
to be identifying which requests are directory requests, so that they
can be ignored.

&gt; Unfortunately, it would seem that to a local observer, any directory
&gt; guards that are not also Guards would provide this information channel,
&gt; since all directory activity happens at roughly the same time, right?

That seems to be the case too.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121015212331</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-15 21:23:31-0400</timestampReceived><subject>Re: [tor-dev] Proposal 210: Faster Headless Consensus Bootstrapping</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Thu, Oct 11, 2012 at 5:32 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; Title: Faster Headless Consensus Bootstrapping
&gt; &gt; Author: Mike Perry
&gt; &gt;
&gt; &gt; Design: Bootstrap Process Changes
&gt; &gt;
&gt; &gt;  The core idea is to attempt to establish bootstrap connections in
&gt; &gt;  parallel during the bootstrap process, and download the consensus from
&gt; &gt;  the first connection that completes.
&gt; &gt;
&gt; &gt;  Connection attempts will be done in batches of three. Only one
&gt; &gt;  connection will be performed to one of the canonical directory
&gt; &gt;  authorities. Two connections will be performed to randomly chosen hard
&gt; &gt;  coded directory mirrors.
&gt; 
&gt; I misread this paragraph at first.  I thought you were suggesting 3
&gt; parallel directory downloads when in fact you were discussing 3
&gt; parallel TLS connections, with only the first one that finishes
&gt; actually getting a download.
&gt;
&gt; &gt; Design: Fallback Dir Mirror Selection
&gt; 
&gt; Out of scope for this proposal; relevant for proposal 206.

Ok. Consider it a vote for your "third option" in proposal 206 then.

Also consider that I wrote this proposal in such a way that it both
depends on 206, and is meant to make it possible to relax our
requirements mirror selection for 206.

I think the parallel connection idea makes us have to worry much less
about vetting the fallback dir mirrors quite so rigorously for
uptime+longevity, in addition to improving bootstrap delay in the event
of dirauth downtime.

&gt; &gt; Performance: Additional Load with Current Parameter Choices
&gt; &gt;
&gt; &gt;  This design and the connection count parameters were chosen such that
&gt; &gt;  no additional bandwidth load would be placed on the directory
&gt; &gt;  authorities. In fact, the directory authorities should experience less
&gt; &gt;  load, because they will not need to serve the consensus document for a
&gt; &gt;  connection in the event that one of the directory mirrors complete their
&gt; &gt;  connection before the directory authority does.
&gt; 
&gt; To be clear, it's the part of this proposal that's shared with
&gt; proposal 206 (directory sources) that would lower load on the
&gt; authorities.

Yes, this proposal depends upon 206. It doesn't make as much sense to
implement it by itself, I don't think.

&gt; &gt;  However, the scheme does place additional TLS connection load on the
&gt; &gt;  fallback dir mirrors. Because bootstrapping is rare and all but one of
&gt; &gt;  the TLS connections will be very short-lived and unused, this should not
&gt; &gt;  be a substantial issue.
&gt; 
&gt; How do we know that bootstrapping is rare?

I guess it depends on the definition of rare. I meant compared to normal
directory activity.

The lack of a TBB update mechanism probably does make bootstrap more
prevalent than we'd like, I guess.

Also, if idle clients bootstrap if they've been idle more than 24 hours,
then it's probably quite prevalent. I assumed they at least attempted to
keep their consensus fresh, even if they were not being used. Am I
wrong?

&gt; &gt;  The dangerous case is in the event of a prolonged consensus failure
&gt; &gt;  that induces all clients to enter into the bootstrap process. In this
&gt; &gt;  case, the number of initial TLS connections to the fallback dir mirrors
&gt; &gt;  would be 2*C/100, or 10,000 for C=500,000 users. If no connections
&gt; &gt;  complete before the five retries, this could reach as high as 50,000
&gt; &gt;  connection attempts, but this is extremely unlikely to happen in full
&gt; &gt;  aggregate.
&gt; &gt;
&gt; &gt;  However, in the no-consensus scenario today, the directory authorities
&gt; &gt;  would already experience C/9 or 55,555 connection attempts. The
&gt; &gt;  5-retry scheme increases their total maximum load to about 275,000
&gt; &gt;  connection attempts, but again this is unlikely to be reached
&gt; &gt;  in aggregate. Additionally, with this scheme, even if the dirauths
&gt; &gt;  are taken down by this load, the dir mirrors should be able to survive
&gt; &gt;  it.
&gt; 
&gt; This looks like an argument of the form "The outcome would be
&gt; horrible, but the current outcome is also horrible, so we wouldn't
&gt; break stuff any worse."  Right?

Well, more like "the outcome would be slightly less horrible, but also
more resilient to unavailability, and more performant."

I analyzed the extreme case specifically because it allows us to more
easily see the load consequences of the scheme than if we were to get
bogged down by say, trying to estimate bootstrap frequency in normal
operations. I think that is a distraction.

&gt; I wonder if in this case the answer isn't to actually back off from
&gt; fetching after N minutes or M servers, like a sane system.  Or to
&gt; treat "hey, that's not a good consensus!" as different from "couldn't
&gt; connect to directory server" in terms of what it means for how we back
&gt; off.

I have limits on the number of retries and total concurrent connection
counts in the proposals. We can tweak them.

I thought about putting in a back-off in terms of retry frequency, but
it didn't seem like a clear win over just limiting things in the first
place, because there's already an implicit backoff by virtue of simply
waiting for the TLS connection timeouts to expire once we hit the total
pending connection limit.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121015215356</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-15 21:53:56-0400</timestampReceived><subject>Re: [tor-dev] Proposal 211: Internal Mapaddress for Tor Configuration Testing</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Nick Mathewson (nickm@alum.mit.edu):

&gt; On Mon, Oct 15, 2012 at 4:38 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; [...]
&gt; &gt;&gt; What does that protect against?  My first thought is that you're
&gt; &gt;&gt; trying to prevent the case where a malicious local DNS server maps
&gt; &gt;&gt; "selftest.torproject.org" to some IP address in their control, and
&gt; &gt;&gt; then just runs a server at that IP address to say "yes I'm Tor".  But
&gt; &gt;&gt; that doesn't make sense, since you could just make one of those that
&gt; &gt;&gt; said "yes I'm Tor" no matter what you say for the nonce.
&gt; &gt;
&gt; &gt; *Headdesk*. Doh. Yes, the DNS test needs to be given a transform of the
&gt; &gt; nonce (SHA1? SHA1+salt?), and needs to spit the original back out again
&gt; &gt; in the response for validation by the client.
&gt; &gt;
&gt; &gt; But yes, that is exactly what we're trying to protect against.
&gt; 
&gt; Okay.  So to write up crypto/protocols that work, you actually need to
&gt; start by writing up the security features you actually get from your
&gt; protocol: what the client needs to do, what the attacker might do, and
&gt; so forth.
&gt; 
&gt; Let's say we want the property where a client who has connected via an
&gt; IP address learns something that the client can use to conclude that
&gt; it is talking to the same Tor when it connects by hostname.  Let's say
&gt; that the attacker *can* cause the client to make connections to
&gt; Tor-by-IP or Tor-by-hostname, but can't learn or interfere with the
&gt; content.  Let's say that the attacker can't make his own connections
&gt; both to Tor-by-IP or Tor-by-hostname.  Let's say that the attacker
&gt; _can_ impersonate Tor-by-hostname.
&gt; 
&gt; Is that about right?

Yeah.

However, I am beginning to wonder if the nonce complexity is worth it at
all. It sure is hard to get right, and check.tp.o already does *not*
tell you if your DNS is configured properly today.

This is making me think we should table this multi-request nonce idea
and instead just focus on the simple case: Replacing check with a local
IP-only test.

We can then consider bringing the nonce+DNS test back later on, if we
decide we do actually want the DNS test.

&gt; &gt;&gt; &gt;  The list of pending nonces should not be allowed to grow beyond 10
&gt; &gt;&gt; &gt;  entries.
&gt; &gt;&gt;
&gt; &gt;&gt; This means that any webpage could flush out the list of pending
&gt; &gt;&gt; nonces.  Does that matter?
&gt; &gt;
&gt; &gt; Hrmm. Maybe. I was balancing this with other issues:
&gt; &gt;
&gt; &gt; 1. Without any limit, web pages could oom the tor client.
&gt; &gt;
&gt; &gt; 2. A website that managed to access this service could track a user
&gt; &gt; for a long period of time by getting a pile of nonces to use, all known
&gt; &gt; to be bound to that user.
&gt; &gt;
&gt; &gt; We could rely only on a shorter default timeout instead, though.
&gt; 
&gt; Or design something that uses less server-side memory.
&gt; 
&gt; Like, instead of remembering every N, you could construct each N as
&gt; "r, HMAC(X,r)" where r is a one-off random value and X is an HMAC key
&gt; Tor creates at startup.  Then you could recognize all of the N that
&gt; you generated without having to remember more than a single HMAC key.
&gt; 
&gt; (This doesn't solve the actual protocol problem, but it does show how
&gt; you can avoid storage issues.)

But then, wouldn't we need to have a way to handle expiry for r, or you
could be tracked by simple replay? That's the main reason I opted
against making the nonce generated by a function. I suppose an HMAC
construction would allow us encode a timestamp as part of that r,
though...

&gt; &gt;&gt; &gt;  Because there are many exceptions and circumvention techniques
&gt; &gt;&gt; &gt;  to the same-origin policy, we have also opted for strict controls
&gt; &gt;&gt; &gt;  on dns-nonce lifetimes and usage, as well as validation of the Host
&gt; &gt;&gt; &gt;  header and SOCKS4A request hostnames.
&gt; &gt;&gt;
&gt; &gt;&gt; Of course, this all comes down to the fact that we're using http.  Can
&gt; &gt;&gt; we spell out why we need HTTP for this?
&gt; &gt;
&gt; &gt; See https://trac.torproject.org/projects/tor/ticket/6546#comment:18 and
&gt; &gt; the following comment.
&gt; &gt;
&gt; &gt; Do you want that in the proposal, you mean?
&gt; 
&gt; Yeah, and also we should discuss it.
&gt; 
&gt; The argument as I understand it is that your browser's TCP sockets API
&gt; is not guaranteed to use the same proxies as the browser uses for http
&gt; URL access.
&gt; 
&gt; (Of course, that goes the other way: if we were trying this for
&gt; something like a chat client, there would be no guarantee that the URL
&gt; access would use the same proxies as are used for regular chat.)
&gt; 
&gt; I don't think, though, that "Are my socks proxies configured right?"
&gt; is the primary use for this tool.  Any application we write had
&gt; *better* get the socks proxies right, and verify that they're right,
&gt; and audit to make sure they're not bypassable, etc etc.  The "is my
&gt; Tor running" and "can my Tor build circuits" questions seem much more
&gt; useful.

Should we forget the nonce+DNS stuff then, and just scale this back to a
simpler local-IP HTTP status port?

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121016154422</emailId><senderName>esolve esolve</senderName><senderEmail>esolvepolito@gmail.com</senderEmail><timestampReceived>2012-10-16 15:44:22-0400</timestampReceived><subject>[tor-dev] tor decrypt packet</subject><body>

[Attachment #2 (multipart/alternative)]


HI,

    I capture packets on the tor client using tcpdump and I want to decrypt
the captured packets for analysis.  I think there are two steps

   1 obtain the session keys
   2 use some tools to decrypt the packets

  Are there any ways, tools, methodology to decrypt the packets?

  thanks!

[Attachment #5 (text/html)]

HI,&lt;br&gt;&lt;br&gt;    I capture packets on the tor client using tcpdump and I 
want to decrypt the captured packets for analysis.  I think there are 
two steps&lt;br&gt;&lt;br&gt;   1 obtain the session keys&lt;br&gt;   2 use some tools to decrypt the packets&lt;br&gt;
&lt;br&gt;  Are there any ways, tools, methodology to decrypt the packets? &lt;br&gt;   &lt;br&gt;  thanks!


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121016202240</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2012-10-16 20:22:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tuning the Parameters for the Path Bias Defense</subject><body>

[Attachment #2 (multipart/signed)]


Thus spake Mike Perry (mikeperry@torproject.org):

&gt; Also exists at
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/xxx-path-bias-tuning.txt
&gt; 

I've updated this proposal to address some questions and comments from
people who have reviewed it via private email. The url for these changes
is:
https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/path-bias-tuning:/proposals/209-path-bias-tuning.txt


The following sections were added:
"Security Considerations: Targeted Failure Attacks"
"Implementation Notes: Differences between this proposal and source"

I also added a couple paragraphs to the Motivation and Design
Description sections, to clarify some points.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121017015850</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-17 01:58:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Increase Acceptable Consensus Age</subject><body>

On Tue, Oct 16, 2012 at 6:41 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Also available at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/tolerate-old-consensus:/proposals/xxx-using-old-consensus.txt
&gt;  
&gt; ----------------------------------
&gt; 
&gt; Title: Increase Acceptable Consensus Age
&gt; Author: Mike Perry
&gt; Created: 01-10-2012
&gt; Status: Open
&gt; Target: 0.2.4.x+
&gt; 

Added as proposal 212.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121019035907</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2012-10-19 03:59:07-0400</timestampReceived><subject>Re: [tor-dev] Even more notes on relay-crypto constructions</subject><body>

On Thu, Oct 18, 2012 at 11:18 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Thus spake Nick Mathewson (nickm@alum.mit.edu):
&gt;
&gt;&gt; On Thu, Oct 18, 2012 at 6:10 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;&gt;  [...]
&gt;&gt; &gt;&gt; There are modes that are supposed to prevent this, and applying them
&gt;&gt; &gt;&gt; to a decent wide-block cipher might solve the issue. IGE is one of
&gt;&gt; &gt;&gt; them [IGE], but it turns out to be broken by an attacker who knows
&gt;&gt; &gt;&gt; some plaintext.  The Accumulated Block Chaining [ABC] construction is
&gt;&gt; &gt;&gt; supposed to fix that; I'm not too sure whether it's correct or
&gt;&gt; &gt;&gt; efficient.
&gt;&gt; &gt;
&gt;&gt; &gt; Am I crazy to think we might try to stop the bleeding of tagging attacks
&gt;&gt; &gt; by figuring out a way to use ABC or IGE mode as a stopgap until people
&gt;&gt; &gt; can code and evaluate new constructions for performance and timing
&gt;&gt; &gt; side-channels? ABC/IGE would "only" involve a mode change, rather than
&gt;&gt; &gt; an entire relay protocol upgrade and new cipher coding..
&gt;&gt;
&gt;&gt; ABC or IGE wouldn't help us much on their own without a wide-block
&gt;&gt; cipher, and IGE is just plain broken. (See explanation below.)
&gt;&gt;
&gt;&gt; Remember, in the document I originally sent, I was talking about using
&gt;&gt; ABC or some other corruption-propagation mode at a block level.  That
&gt;&gt; requires a wide-block cipher, though.  And it turns out we can do
&gt;&gt; better if the corruption-propagation is part of the wide-block idea.
&gt;&gt;
&gt;&gt; We'd also burn our performance on platforms without AES acceleration, I think.
&gt;&gt;
&gt;&gt; &gt; IGE might also actually exist in OpenSSL:
&gt;&gt; &gt; http://www.links.org/?p=137
&gt;&gt; &gt;
&gt;&gt; &gt; It also sounds like IGE is only broken if we try to use it for
&gt;&gt; &gt; authentication.. We don't really need that property, do we? What we
&gt;&gt; &gt; really want is the plaintext corruption property at the middle node upon
&gt;&gt; &gt; ciphertext modification..
&gt;&gt;
&gt;&gt; That _is_ a kind of authentication, or an analogue to it.  And the
&gt;&gt; point is that an adversary can repair a hole in the stream, and *stop*
&gt;&gt; the plaintext corruption.  So IGE does not deliver the property we
&gt;&gt; would want for it, even if we could use it.
&gt;
&gt; I am still wondering if it is possible to eliminate enough consecutive
&gt; regions of known plaintext to make this acceptable for the short-term,
&gt; until we figure out the wide-block thing for real. From the attack here:
&gt; http://www.mail-archive.com/cryptography@metzdowd.com/msg06599.html it
&gt; looks as though as long as we can avoid 32 consecutive bytes of known
&gt; plaintext (two consecutive 128bit cipher blocks), we can prevent
&gt; hole-closing.

But 32 consecutive bytes of known plaintext are pretty much
inevitable, right?  That's how protocols work.

Also, that is *one* attack on IGE.  That one needs a given amount of
known plaintext.  I have no idea which others exist.  Generally once
there's one known attack on a system, it gets less attention from
cryptographers, since who'd bother going around enumerating all the
other circumstances under which a broken thing is broken.  So when you
read that the system isn't secure because it breaks if you do X, you
can't usually infer that it's okay so long as you _don't_ do X -- you
need to look for actual proofs or whatever that it is safe under the
circumstance you propose.

&gt; If you want to know why I'm crazy enough to still be wondering this,
&gt; see subsequent paragraphs.
&gt;
&gt;&gt; Check out this thread, and the stuff it references:
&gt;&gt;    http://www.mail-archive.com/cryptography@metzdowd.com/msg06599.html
&gt;&gt;
&gt;&gt; &gt; We could also remove a lot of known plaintext by replacing zero-fill
&gt;&gt; &gt; with random fill in RELAY_RESOLVE, RELAY_BEGIN, and other short relay
&gt;&gt; &gt; cells. That should only be expensive at the client...
&gt;&gt;
&gt;&gt; So long as there is a block's worth of known or guessed plaintext, IGE
&gt;&gt; fails to ensure that changes propagate forward.  Like, 16 bytes worth
&gt;&gt; of guessable HTTP in a payload (if you're thinking about this in a
&gt;&gt; non-wide-block scenario).
&gt;
&gt; Hrmm.. I think that failures after the stream is established are way
&gt; less dangerous than ways you can tag and cause failures *before* the
&gt; stream is established. In the pre-established case, Tor keeps retrying
&gt; transparently behind the user's back until it gets a compromised exit.
&gt; In the post-established case, the user is completely unable to use Tor
&gt; 80% or 90% of the time, because the circuit is torn down *after* their
&gt; user agent has begun sending data.. In other words, at least we would
&gt; fail closed.

So could one workaround right answer be to time out after fewer exits,
and/or notice differential stream failure rates between different
guards?  That would be a pretty neat thing to do; I wonder if it would
work.

Of course we'd need to figure it out nice and get it implemented solidly.

&gt; This reminds me of something I also wanted to ask about. Technically for
&gt; the tagging attack, all we need to authenticate is circuit construction
&gt; and RELAY_RESOLVE and RELAY_BEGIN. Might there be ways to get this
&gt; without the expense and complications of either truncated MAC's or
&gt; wide-block ciphers? Or at least remove known-plaintext from *those*
&gt; cells?

I don't think those are the only attack opportunities here.  Again,
they're ones that have been explained and proposed, but there's surely
more stuff too.

&gt;&gt; Two general process thoughts:
&gt;&gt;
&gt;&gt; * I may be saying this from an overabundance of caution, but: I don't
&gt;&gt; think we should use cryptographic primitives and constructions with
&gt;&gt; known flaws, even if we can't see a way for them to hurt us right now,
&gt;&gt; and even if we can come up with a solid-seeming argument for how those
&gt;&gt; flaws can't hurt us..  That's how we got into our AES-CTR mess in the
&gt;&gt; first place.
&gt;
&gt; I would argue that where we *really* need an overabundance of caution is
&gt; to ensure we provide the agility to change the cipher mode/construction
&gt; for this scheme in a very short period of time. I don't think our *real*
&gt; woes are because we didn't think hard enough about cryptography or the
&gt; security properties of AES_CTR. They're because we fixed the cipher and
&gt; mode at "AES_CTR", and now we're going to be stuck with vulnerability to
&gt; a very dangerous attack for years.. "If you're typing the letters AES
&gt; into your code, you're doing it wrong."

Well, keep in mind that we didn't, and still don't, have a drop-in
replacement that's any good.  Our design right now has a place where
you plug in a stream cipher.  Sure, we could have made it so you can
drop in RC4 or 3DES-OFB or whatever craziness we would have come up
with in 2004.  But dropping in something *good* instead of AES_CTR
requires that it not be a stream cipher.  And we don't have a
non-stream-cipher mode that works here.

&gt; Based on this idea, I'm wondering if we should spend more of our time
&gt; thinking hard about making the relay protocol be able to support
&gt; changing the construction/primitive so we can support a readily
&gt; available but non-ideal mode for 0.2.4.x, but then upgrade to something
&gt; stronger for 0.2.5.x. (And when *that* construction/implementation turns
&gt; out to be flawed or have side-channels, we can switch again in 0.2.6.x).
&gt;
&gt; If we spend time on ensuring this agility instead of pondering the deep
&gt; magic of wide-block ciphers, we might be able to roll out AES_IGE +
&gt; eliminate consecutive regions of pre-established relay cell known
&gt; plaintext for 0.2.4.x, and then save the deep magic for 0.2.5.x or
&gt; beyond.
&gt;
&gt; I looked through Proposal 202, and I don't see any mechanism for
&gt; switching constructions/cipher choices in there?

That'd be semi-implicit in proposal 200, where you use the create cell
type to select the crypto you want.

Migrating to a new algorithm here will be kind of fun -- or rather,
disabling the old one will be -- since the only way to turn off the
old one entirely is to stop allowing servers who don't support the new
one on the network.  That could use a better writeup and thought
process than we've given it yet.

&gt;&gt; * I know everybody wants our crypto problems to get solved, but it's
&gt;&gt; critical to get this stuff right.  I think that the way to do right by
&gt;&gt; our users is by taking the time we will need to design the right thing
&gt;&gt; properly, rather than jumping into something halfcocked.  We all
&gt;&gt; acknowledge that it's easy for people and organizations to screw this
&gt;&gt; stuff up: so let's take our time and actually come up with something
&gt;&gt; solid.  Against the current pain and badness of our current system, we
&gt;&gt; must weigh the potential harm of jumping precipitously into something
&gt;&gt; that turns out to be broken because we didn't think about it hard
&gt;&gt; enough.
&gt;
&gt; Will I ever be able to convince you of the value of "jumping early and
&gt; often?" ;)

Only by having it pay off.   :)



yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121019170705</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-10-19 17:07:05-0400</timestampReceived><subject>Re: [tor-dev] Extending Pyonionoo to provide statistics</subject><body>

On 10/13/12 4:30 PM, Damian Johnson wrote:
&gt; Hi Karsten. This is actually really good timing. As you probably
&gt; noticed from tor-commits@ I just pushed support for network status
&gt; documents (v2 and v3 votes, consensus, and microdescriptor
&gt; consensuses). It's the combination of a month of work from Ravi and a
&gt; couple more from me.

Neat!

&gt; Stem's descriptor parsing functionality is one of its most well
&gt; developed features and I'm anxious for it to start to get some users.
&gt; The feature gap between stem and metrics-lib is now pretty small, so
&gt; I'd love for it to start to take over some of metrics-lib's
&gt; responsibilities (and hopefully in turn get direct involvement from
&gt; you and Sathyanarayanan so it'll better meet your needs).

Sounds great!  I'd say let's give stem some usage then.

&gt;&gt; We would start with daily users, both direct and bridge users, and later add
&gt;&gt; aggregate statistics about relays and bridges, and after that torperf
&gt;&gt; performance statistics.
&gt; 
&gt; Gotcha. As I understand it the document types that stem is still missing are...
&gt; 
&gt; * microdescriptors
&gt; * bridge pool assignments
&gt; * exit list entry
&gt; * torperf output
&gt; 
&gt; So what you'll need from me is primarily the ability to parse torperf
&gt; output? Or is there another document type that I'm missing?

No, we wouldn't need Torperf parsing support yet.  Extending Pyonionoo
to provide Torperf statistics would be one of the last steps.

&gt;&gt; I think we'd need Damian's help for the descriptor-parsing side
&gt; 
&gt; Happy to help, though I'm not entirely sure yet what kind of
&gt; additional parsing support you'll need.

I was mostly thinking of your help if things don't work as expected.
Also, having your input on Pyonionoo's design might be very valuable.

&gt;&gt; Sathya, Damian, can you already say how much of 2013 you will be around
&gt;&gt; for doing Tor stuff and how much time you think you could spend on this
&gt;&gt; project?
&gt; 
&gt; For my part a fair bit. This is, of course, a hobby that I do outside
&gt; of a full time job so work and life might get in the way. That said,
&gt; any project that includes collaborating with other developers to make
&gt; use of stem goes to the top of my todo list.

Cool!

&gt;&gt; I'm thinking one ticket for implementing
&gt;&gt; usage statistics in Pyonionoo, a second ticket for the censorship
&gt;&gt; detector integration which depends on the first ticket, and two more
&gt;&gt; tickets for network statistics and torperf statistics integration into
&gt;&gt; Pyonionoo.  I'd probably suggest the first two tickets only for trying
&gt;&gt; to get funding from sponsor F year 3 and save the other two tickets for
&gt;&gt; later.
&gt; 
&gt; Hmm, aren't those last two tickets the only ones where I'd be
&gt; involved? It sounds like this project mostly concerns pyonionoo so
&gt; guess we should wait for input from Sathyanarayanan...

That's correct.

I just created #7154, #7155, and #7156 (combining the last two tickets).

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121022022022</emailId><senderName>Paul Syverson</senderName><senderEmail>syverson@itd.nrl.navy.mil</senderEmail><timestampReceived>2012-10-22 02:20:22-0400</timestampReceived><subject>Re: [tor-dev] Trip Report: GSoC Mentor Summit</subject><body>

On Sun, Oct 21, 2012 at 05:22:55PM -0700, Damian Johnson wrote:
&gt; 
&gt; * Sumana and Rob from Wikimedia
&gt; 
&gt; Unsurprisingly Wikipedia occasionally has issues with spammers using
&gt; Tor. We talked about some possible options, such as requiring accounts
&gt; for Tor users to edit with a sort of proof of work in account creation
&gt; to make ban evasion more of a pita.
&gt; 

FYI. We've discussed this with Wikipedia folks and presented solutions
since about 2005. Whoever we've talked to has generally been very
enthusiastic about suggested solutions but never seem interested in
following up. Technical solutions have been evolving all the while:
nym, nymble, verbs, blakr, etc.  (cf. the freehaven anonbib for papers
and/or websearch for system names) It would be great if this
engagement actually moves forward to actual success, but I thought you
should know this disappointing history. (The panel I arranged that
Jimmy Wales was very enthusiastic and extensively engaged about but
then bailed on as final arrangements were being made led ultimately to
the following paper with Geoff Goodell ``The Right Place at the Right
Time: Examining the Use of Network Location in Authentication and
Abuse Prevention,'' Comm. ACM, vol. 50, no. 5, 2007.)

aloha,
Paul
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121023183000</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-10-23 18:30:00-0400</timestampReceived><subject>Re: [tor-dev] Automating Bridge Reachability Testing (#6414)</subject><body>

Hi Isis!

On 10/12/12 6:48 PM, Isis wrote:
&gt; So, I am rushing to meet the final deadline, but I still think it is doable. I
&gt; have mostly finished up my OONI work for the month, and I planned to spend the
&gt; remainder of this month working on the bridge test.

Sounds good.  Does "working" include something deployed?  Do we need to
involve weasel or anybody else to make this happen?

Can I help by analyzing any data produced by your bridge reachability
scanner?  I can probably make room for that.

Also, what shall we do with your tech report draft from the #6414 ticket
description?  We did not promise to write such a report in the
deliverable text, so we can drop that if it helps you make more progress
on the code.  Of course, if the report is almost ready and you want to
include it in the deliverable, then let's do that.

&gt; ... [technical details] ...

Sorry for not being able to give you feedback on technical details.

My only comment is something that, I think, Nick or Roger taught me a
few years ago: perfect is the enemy of good.  I'd rather see us deliver
a very basic bridge reachability scanner than have a great plan and then
not deliver anything.

Thanks,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121024155839</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2012-10-24 15:58:39-0400</timestampReceived><subject>[tor-dev] New tech report: Counting daily bridge users</subject><body>

Hi everyone,

I just finished a new tech report titled "Counting daily bridge users":

https://research.torproject.org/techreports/counting-daily-bridge-users-2012-10-24.pdf

From the abstract: "As part of the Tor Metrics Project, we want to learn
how many people use the Tor network on a daily basis.  Counting users in
an anonymity network is, obviously, a difficult task for which we cannot
collect too sensitive usage data.  We came up with a privacy-preserving
approach for estimating directly connecting user numbers by counting
requests to the directory mirrors and deriving approximate user numbers
from there.  In this report we describe a modified approach for
estimating the number of users connecting via bridges by evaluating
directory requests made to bridges.  We compare this new approach to our
current approach that estimates bridge user numbers from total unique IP
addresses seen at bridges.  We think that results from the new approach
are closer to reality, even though that means there are significantly
fewer daily bridge users than originally expected."

Feedback is much appreciated and could influence our implementation of
user number estimates in the future (#7154).

Thanks,
Karsten

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
</body></email><email><emailId>20121025101612</emailId><senderName></senderName><senderEmail>vmonmoonshine</senderEmail><timestampReceived>2012-10-25 10:16:12-0400</timestampReceived><subject>[tor-dev] [Stegotorus] Re: Do you have time to poke at ST</subject><body>

Hello Zack,

Sorry for being bit out of touch as I'm traveling and my access to Internet is \
sporadic.

I'm still working on Stegonotorus. I developed the webpage_tester (now
on f--webpage-tester branch on github), that is curl using Stegotorus to
download anything on the web and compare it with the original. It is
based on assumption that is my best approximation for a browser. I did
that in a hope to catch the bug, but I haven't. Basically I failed to browse anything \
unreliably. I can download 20 megabytes or so with no error. It takes a long time, \
but It doesn't fail.

My payload server is the apache payload server but that shouldn't make a
huge difference. I think my payloads even have smaller capacity and less
efficient than your fake ones.

Anyway, I'm going to tweak the tester proxy to drops packets at random,
to force the ack into play, I'll get back to you with more update.

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20121031115200</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2012-10-31 11:52:00-0400</timestampReceived><subject>Re: [tor-dev] use tor controller to detect circuit/path change</subject><body>

On Wed, Oct 31, 2012 at 12:17:58PM +0100, esolve esolve wrote:
&gt; oh, I don't understand this
&gt; 
&gt; 
&gt; what you mean is, for example, when browsing webpages
&gt; 
&gt; browser application                sock
&gt; Tor                            Ethernet interface
&gt; 
&gt;          send   packet ----------&gt;    forward -------------&gt; encrypt and
&gt; -----------------&gt; send to the entry node
&gt; 
&gt; make tor cells
&gt; 
&gt; 
&gt;          receive packet&lt;---------   forward&lt;-------------- decrypt tor
&gt; cells &lt;---------------  receive from the entry node
&gt; 
&gt; 
&gt; tcpdump -i eth0(this is my capturing)
&gt; 
&gt;  but you mean I can capture between the browser application and the sock？
&gt; 
&gt; 
&gt; 
&gt; so I used tcpdump on the ethernet interface
&gt; the packets are  encrypted
&gt; you mean I can capture the packets before

Yes.  capture on the lo interface, on whatever port your Tor SOCKS proxy
is listening on.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email></emails>