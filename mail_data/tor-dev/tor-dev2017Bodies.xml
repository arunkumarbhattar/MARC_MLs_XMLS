<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20170104223400</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-04 22:34:00-0400</timestampReceived><subject>[tor-dev] ExcludeExitNodes and ExcludeNodes but no "ExcludeEntryNodes"?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

is there a possibility to blacklist guard relays (only in that position)
from a client perspective?
I didn't find one in the torrc man page.

It is generally a bad idea to create custom tor client footprints by
excluding relays but maybe it is less bad to exclude a certain relay
just in the guard position than to exclude it completely via
ExcludeNodes + StrictNodes since guards are used for a longer timeperiod.=


thanks,
nusenu



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126130526</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-26 13:05:26-0400</timestampReceived><subject>[tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

Hey list,

with service-side prop224 implementation moving forward, we need to pin down
the directory structure of prop224 onion services. This will be very similar to
the current directory structure, but with some mods to facilitate assymetric
client authorization keys and offline keys.

As people have pointed out, the HS directory structure matters less after the
introduction of ephemeral ADD_ONION onion services, but still it's an important
part of onion service sysadmin UX.

So the HiddenServiceDir directory will contain the following items:

- "./hostname"    [FILE]

   This is a file containing the onion address of the onion service.

   As you can see it's the same filename as in v2. Should we suffix it with v3
   to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
   living in the same directory?

- "./private_key_ed25519"  [FILE]

   This is the file containing the private master ed25519 key of the onion service.

   If offline keys are _enabled_, then this file doesn't exist and instead a
   directory is made containing blinded keys for every day [TODO: The directory
   format here will be specified in the future].

- "./client_authorized_pubkeys"   [FILE]

  If client authorization is _enabled_, this is a newline-separated file of
  "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
  as the ~/.ssh/authorized_keys of onion services.

- "./client_authorized_privkeys/"          [DIRECTORY]
  "./client_authorized_privkeys/alice"     [FILE] 
  "./client_authorized_privkeys/bob"       [FILE]
  "./client_authorized_privkeys/charlie"   [FILE]
  
  If client authorization is _enabled_ _AND_ if the hidden service is
  responsible for generating and distributing private keys for its clients,
  then this directory contains files with client's private keys. The idea is
  that these files can be shredded and deleted after the private key has been
  passed to the client. For more context here, please read the client
  authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
  details on how this works.

So this is it. The above should handle most uses of onion services + client
authorization. The directory format of offline keys will be specified as we
move forward with implementation. 

Hope things here are not too controversial. Looking forward to your feedback.

In a few days, I will add a small Appendix section to prop224 with the
above, and also fix the parts of 'Appendix F' that got outdated since then.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170504200300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-04 20:03:00-0400</timestampReceived><subject>[tor-dev] making sure I configure OutboundBindAddressExit correctly</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

since I really like this new feature
I added [1] initial autoconfiguration support for it to ansible-relayor
(user can opt-in via a single boolean and we automate the rest).

I want to make sure I do this correctly and would like your feedback on
the following questions:

a)
Is 'OutboundBindAddressOR' in the following context optional (in the
sense that it does not change tor's behavior)?

ExitRelay 1
ExitPolicy reject *:25,accept *:*
ORPort 1.2.3.4:9001
OutboundBindAddress 1.2.3.4
OutboundBindAddressOR 1.2.3.4
OutboundBindAddressExit 7.7.7.7

is identical to:

ExitRelay 1
ExitPolicy reject *:25,accept *:*
ORPort 1.2.3.4:9001
OutboundBindAddress 1.2.3.4
OutboundBindAddressExit 7.7.7.7


(since according to the manual page OutboundBindAddress*OR* would just
override OutboundBindAddress, which is not needed in the above example
since they match)

b)
Is it ok to set OutboundBindAddressExit for IPv4 only, even if we set
'IPv6Exit 1' or is setting an IPv6 OutboundBindAddressExit address
required after setting OutboundBindAddressExit for IPv4?

Since this question might be a bit confusing I'll give an example in
form of torrc lines:


ORPort 1.2.3.4:9001
OutboundBindAddress 1.2.3.4
OutboundBindAddressExit 7.7.7.7
IPv6Exit 1
ExitRelay 1
ExitPolicy reject *:25,accept *:*

(this config has an IPv4 OutboundBindAddressExit entry but no IPv6
OutboundBindAddressExit entry)


c)
Similar to (b) is it ok to enable OutboundBindAddressExit for IPv6 only?

d)
Is it ok if multiple tor instances on the same host use the same
OutboundBindAddressExit address?
(ignoring the fact that big exits might run out of source ports?)

thanks,
nusenu



[1]
https://github.com/nusenu/ansible-relayor/commit/00fa7c571e8b6f6256092d992831598ad73201db

-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170307182416</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-07 18:24:16-0400</timestampReceived><subject>[tor-dev] Tor in Google Summer of Code 2017</subject><body>

Interested in coding on Tor and getting paid for it by Google? If you
are a student, we have good news for you: we have been accepted as a
mentoring organization for Google Summer of Code 2017!

  https://summerofcode.withgoogle.com/organizations/5675829762719744/

Here's the facts: GSoC gives you the opportunity to work on your own
Tor-related coding project with one of the Tor developers as your
mentor. Your mentor will help you when you're stuck and guide you in
becoming part of the Tor community. Google pays you for the
three months of your project, so that you can focus on coding and
don't have to worry about how to pay your bills.

  https://www.torproject.org/getinvolved/volunteer.html.en#Projects

Did we catch your attention? These are your next steps: Go look at
the Google Summer of Code FAQ [1] to make sure you are eligible to
participate. Have a look at our ideas list [2] to see if one of those
projects matches your interests. If there is no project on that list
that you'd want to work on, read the documentation on our website [3]
and make up your own! Come to #tor-dev on OFTC [4] or let us know about
your project idea here. Communication is essential to success in the
summer of code, and we're unlikely to accept students we haven't heard
from before reading their application. So really, speak up on this list
or come to our IRC channel and talk to us!

Finally, write down your project idea using our template [5] and submit
your application to Google before March 25th [6].

We are looking forward to discussing your project idea with you!

[1] https://developers.google.com/open-source/gsoc/faq
[2] https://www.torproject.org/getinvolved/volunteer.html.en#Coding
[3] https://www.torproject.org/docs/documentation.html.en#UpToSpeed
[4] https://www.torproject.org/about/contact.html.en#irc
[5] https://www.torproject.org/about/gsoc.html.en#Template
[6] https://developers.google.com/open-source/gsoc/timeline
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170307185400</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-03-07 18:54:00-0400</timestampReceived><subject>Re: [tor-dev] Tor in Google Summer of Code 2017</subject><body>

Hi Damian,

On Tuesday 07 March 2017 11:54 PM, Damian Johnson wrote:

&gt; Finally, write down your project idea using our template [5] and submit
&gt; your application to Google before March 25th [6].

I think the deadline is April 3 this year.

Regards,
Jaskaran
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170401111948</emailId><senderName>Florian Tschorsch</senderName><senderEmail>tschorsch@informatik.hu-berlin.de</senderEmail><timestampReceived>2017-04-01 11:19:48-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>


Hi Samir,

this sounds like an interesting summer project.

Since you are interested in using PCSA, our work on privacy-preserving statistics, \
which actually develops a privacy-enhanced version of PCSA, might be helpful. We also \
propose it as a way to collect distributed statistics.

In our HotPETs paper [1], we sketch the basic idea. In our journal paper [2], we \
provide additional details on the algorithm. If you have any questions, just let me \
know.

Cheers,
Florian.

[1] https://petsymposium.org/2011/papers/hotpets11-final5Tschorsch.pdf
[2] https://www.sciencedirect.com/science/article/pii/S1389128613001941



&gt; On 30. Mar 2017, at 03:45, samir menon &lt;menon.samir@gmail.com&gt; wrote:
&gt; 
&gt; Hi there!
&gt; 
&gt; I'm Samir, a Computer Science student at Stanford University, with a
&gt; focus in applied cryptography and computer security. This summer, I
&gt; want to work (through GSoC) on computing usage statistics without
&gt; keeping IP addresses in memory (see tickets #7532 and #15469) [1] [2].
&gt; 
&gt; Currently, we keep sets of IP's (or hashed IP's) in memory so that we
&gt; can compute the number of unique client connections. This has been
&gt; pointed out as a pretty serious concern, because the IP's themselves
&gt; are sensitive info that we don't want an attacker to acquire, but the
&gt; statistics are relatively valuable.
&gt; 
&gt; As Nick first pointed out in #15469, we can use proven techniques to
&gt; compute these statistics without actually explicitly storing any IP's
&gt; (or IP hashes) in memory. The technique I want to use, "Probabilistic
&gt; Counting with Stochastic Averaging", or PCSA, is relatively
&gt; well-studied, and can provide good estimates (&lt;5% error) of the number
&gt; of unique elements in a time series.
&gt; 
&gt; The basic idea is to count the number of 0's before the least
&gt; significant 1 in every (Jenkins hashed) IP, and then recognize that
&gt; the more unique IP's we encounter, the more likely it is that we see a
&gt; hashed IP with a large number of 0's before the least significant 1.
&gt; (Shoutout to Jaskaran and [3] for helping me understand this). A more
&gt; detailed explanation and more resources for understanding PCSA are in
&gt; the proposal.
&gt; 
&gt; Here is my draft proposal (also attached, but links don't work):
&gt; http://stanford.edu/~samir2/TorGSoCApplication.html
&gt; 
&gt; I'd love to hear feedback on it - what's feasible, what's most useful,
&gt; and what I should focus on, etc. You can also chat with me about it on
&gt; IRC at `samir2`!
&gt; 
&gt; Thanks,
&gt; ~Samir Menon
&gt; menon.samir@gmail.com
&gt; Stanford University, B.S. Computer Science, 2019
&gt; 
&gt; [1] https://trac.torproject.org/projects/tor/ticket/7532
&gt; [2] https://trac.torproject.org/projects/tor/ticket/15469
&gt; [3] https://www.cs.princeton.edu/~rs/talks/AC11-Cardinality.pdf
&gt; &lt;TorGSoCAnonymousLocalStats.pdf&gt;_______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401172927</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-04-01 17:29:27-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

Hi Samir,

It is my understanding that the Tor metrics team plans to handle this problem in a \
different way. IPs are kept in memory to provide statistics about users' countries, \
and so they will instead just keep the country statistics directly. That is, a \
counter will be kept for all countries, upon the establishment of a new "OR \
connection" (a Tor term that I believe translates to a TLS connection) the IP address \
will be mapped to a country, and then that country's counter will be incremented. As \
is done currently, further privacy-preserving techniques would be applied to these \
counters before publishing them, such as rounding, adding random noise, or removing \
some of the counters. These counters could even potentially be locally stored in a \
differentially-private way, which would make the local counters even less interesting \
to a possible attacker. The suitability of adding such local noise depends on on how \
inaccurate this would make the results.

You may wish to contact Karsten Loesing of the Tor Metrics team to verify my \
understanding.

Best,
Aaron

&gt; On Apr 1, 2017, at 7:19 AM, Florian Tschorsch &lt;tschorsch@informatik.hu-berlin.de&gt; \
&gt; wrote: 
&gt; 
&gt; Hi Samir,
&gt; 
&gt; this sounds like an interesting summer project.
&gt; 
&gt; Since you are interested in using PCSA, our work on privacy-preserving statistics, \
&gt; which actually develops a privacy-enhanced version of PCSA, might be helpful. We \
&gt; also propose it as a way to collect distributed statistics. 
&gt; In our HotPETs paper [1], we sketch the basic idea. In our journal paper [2], we \
&gt; provide additional details on the algorithm. If you have any questions, just let me \
&gt; know. 
&gt; Cheers,
&gt; Florian.
&gt; 
&gt; [1] https://petsymposium.org/2011/papers/hotpets11-final5Tschorsch.pdf
&gt; [2] https://www.sciencedirect.com/science/article/pii/S1389128613001941
&gt; 
&gt; 
&gt; 
&gt; &gt; On 30. Mar 2017, at 03:45, samir menon &lt;menon.samir@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Hi there!
&gt; &gt; 
&gt; &gt; I'm Samir, a Computer Science student at Stanford University, with a
&gt; &gt; focus in applied cryptography and computer security. This summer, I
&gt; &gt; want to work (through GSoC) on computing usage statistics without
&gt; &gt; keeping IP addresses in memory (see tickets #7532 and #15469) [1] [2].
&gt; &gt; 
&gt; &gt; Currently, we keep sets of IP's (or hashed IP's) in memory so that we
&gt; &gt; can compute the number of unique client connections. This has been
&gt; &gt; pointed out as a pretty serious concern, because the IP's themselves
&gt; &gt; are sensitive info that we don't want an attacker to acquire, but the
&gt; &gt; statistics are relatively valuable.
&gt; &gt; 
&gt; &gt; As Nick first pointed out in #15469, we can use proven techniques to
&gt; &gt; compute these statistics without actually explicitly storing any IP's
&gt; &gt; (or IP hashes) in memory. The technique I want to use, "Probabilistic
&gt; &gt; Counting with Stochastic Averaging", or PCSA, is relatively
&gt; &gt; well-studied, and can provide good estimates (&lt;5% error) of the number
&gt; &gt; of unique elements in a time series.
&gt; &gt; 
&gt; &gt; The basic idea is to count the number of 0's before the least
&gt; &gt; significant 1 in every (Jenkins hashed) IP, and then recognize that
&gt; &gt; the more unique IP's we encounter, the more likely it is that we see a
&gt; &gt; hashed IP with a large number of 0's before the least significant 1.
&gt; &gt; (Shoutout to Jaskaran and [3] for helping me understand this). A more
&gt; &gt; detailed explanation and more resources for understanding PCSA are in
&gt; &gt; the proposal.
&gt; &gt; 
&gt; &gt; Here is my draft proposal (also attached, but links don't work):
&gt; &gt; http://stanford.edu/~samir2/TorGSoCApplication.html
&gt; &gt; 
&gt; &gt; I'd love to hear feedback on it - what's feasible, what's most useful,
&gt; &gt; and what I should focus on, etc. You can also chat with me about it on
&gt; &gt; IRC at `samir2`!
&gt; &gt; 
&gt; &gt; Thanks,
&gt; &gt; ~Samir Menon
&gt; &gt; menon.samir@gmail.com
&gt; &gt; Stanford University, B.S. Computer Science, 2019
&gt; &gt; 
&gt; &gt; [1] https://trac.torproject.org/projects/tor/ticket/7532
&gt; &gt; [2] https://trac.torproject.org/projects/tor/ticket/15469
&gt; &gt; [3] https://www.cs.princeton.edu/~rs/talks/AC11-Cardinality.pdf
&gt; &gt; &lt;TorGSoCAnonymousLocalStats.pdf&gt;_______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401184822</emailId><senderName>samir menon</senderName><senderEmail>menon.samir@gmail.com</senderEmail><timestampReceived>2017-04-01 18:48:22-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

Aaron,

I think Jaskaran explained it well - basically, we compute statistics
other than requests per country, and one of those stats is unique
clients, which we can use PCSA for. The
`format_client_stats_heartbeat` function in `/src/or/geoip.c` is where
we actually compute the unique clients and log that in the heartbeat
message.

I think perhaps my proposal doesn't make clear that this PCSA change
is in addition to other methods of getting IP's out of memory - I will
try to update it to emphasize this. I also will do more research on
the 'fuzzing' of country counts, and I will definitely contact Karsten
Loesing.

Thanks,
~Samir Menon

On Sat, Apr 1, 2017 at 11:41 AM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt; Hi Aaron,
&gt;
&gt; These statistics not just tell about the user's country but also keep a
&gt; track of unique IP addresses connecting from each country. This is
&gt; needed so as to present more realistic stats. If we increment counter on
&gt; any IP address instead of unique IP address then the statistics would
&gt; also reflect  user(s) connecting again and again. If we don't count
&gt; Unique IPs, we would have stats about per country usage rather than per
&gt; country users. We could do much better and implement a way(as described
&gt; by the OP of thread) that counts unique IPs at the same time preserves
&gt; privacy.
&gt;
&gt; And for your second point about hiding the actual counter from
&gt; adversary, I agree that this can potentially de-anonymize a client.
&gt; An adversary (let's say the government of some small, less populous
&gt; country) could try to fingerprint the traffic of it's target(s) and
&gt; later correlate it with the data we publish on the metrics site. This
&gt; attack could work very well for countries where the Tor users can be
&gt; counted on fingers. So, I believe hiding the counter data should also be
&gt; implemented along with hiding the IP addresses.
&gt;
&gt; Regards,
&gt; --
&gt; Jaskaran Veer Singh (jvsg)
&gt; jvsg1303 at gmail dot com
&gt; PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170401185322</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-04-01 18:53:22-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

Hi Aaron,

These statistics not just tell about the user's country but also keep a
track of unique IP addresses connecting from each country. This is
needed so as to present more realistic stats. If we increment counter on
any IP address instead of unique IP address then the statistics would
also reflect  user(s) connecting again and again. If we don't count
Unique IPs, we would have stats about per country usage rather than per
country users. We could do much better and implement a way(as described
by the OP of thread) that counts unique IPs at the same time preserves
privacy.

And for your second point about hiding the actual counter from
adversary, I agree that this can potentially de-anonymize a client.
An adversary (let's say the government of some small, less populous
country) could try to fingerprint the traffic of it's target(s) and
later correlate it with the data we publish on the metrics site. This
attack could work very well for countries where the Tor users can be
counted on fingers. So, I believe hiding the counter data should also be
implemented along with hiding the IP addresses.

Regards,
--
Jaskaran Veer Singh (jvsg)
jvsg1303 at gmail dot com
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402121558</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-04-02 12:15:58-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

&gt; These statistics not just tell about the user's country but also keep a
&gt; track of unique IP addresses connecting from each country. This is
&gt; needed so as to present more realistic stats. If we increment counter on
&gt; any IP address instead of unique IP address then the statistics would
&gt; also reflect  user(s) connecting again and again. If we don't count
&gt; Unique IPs, we would have stats about per country usage rather than per
&gt; country users. We could do much better and implement a way(as described
&gt; by the OP of thread) that counts unique IPs at the same time preserves
&gt; privacy.

It is true that this would count connections rather than unique IPs. However, Tor \
already infers the number of users by counting directory downloads and then adjusting \
that number based on  how many each user is expected to make. In addition, each user \
doesn't necessarily correspond to a different IP because of NAT, and so counting \
connections may actually be more accurate.

Best,
Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402125125</emailId><senderName>Veer Kalantri</senderName><senderEmail>mads.531998@gmail.com</senderEmail><timestampReceived>2017-04-02 12:51:25-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

[Attachment #2 (multipart/alternative)]


about which stats are you talking Aaron?


On Sun, Apr 2, 2017 at 5:45 PM, Aaron Johnson &lt;aaron.m.johnson@nrl.navy.mil&gt;
wrote:

&gt; &gt; These statistics not just tell about the user's country but also keep a
&gt; &gt; track of unique IP addresses connecting from each country. This is
&gt; &gt; needed so as to present more realistic stats. If we increment counter on
&gt; &gt; any IP address instead of unique IP address then the statistics would
&gt; &gt; also reflect  user(s) connecting again and again. If we don't count
&gt; &gt; Unique IPs, we would have stats about per country usage rather than per
&gt; &gt; country users. We could do much better and implement a way(as described
&gt; &gt; by the OP of thread) that counts unique IPs at the same time preserves
&gt; &gt; privacy.
&gt;
&gt; It is true that this would count connections rather than unique IPs.
&gt; However, Tor already infers the number of users by counting directory
&gt; downloads and then adjusting that number based on  how many each user is
&gt; expected to make. In addition, each user doesn't necessarily correspond to
&gt; a different IP because of NAT, and so counting connections may actually be
&gt; more accurate.
&gt;
&gt; Best,
&gt; Aaron
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;about which stats are you talking Aaron?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sun, Apr 2, 2017 at 5:45 PM, \
Aaron Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:aaron.m.johnson@nrl.navy.mil" \
target="_blank"&gt;aaron.m.johnson@nrl.navy.mil&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&gt; These statistics not just tell about the user's \
country but also keep a&lt;br&gt; &gt; track of unique IP addresses connecting from each \
country. This is&lt;br&gt; &gt; needed so as to present more realistic stats. If we \
increment counter on&lt;br&gt; &gt; any IP address instead of unique IP address then the \
statistics would&lt;br&gt; &gt; also reflect   user(s) connecting again and again. If we \
don't count&lt;br&gt; &gt; Unique IPs, we would have stats about per country usage \
rather than per&lt;br&gt; &gt; country users. We could do much better and implement a \
way(as described&lt;br&gt; &gt; by the OP of thread) that counts unique IPs at the same \
time preserves&lt;br&gt; &gt; privacy.&lt;br&gt;
&lt;br&gt;
It is true that this would count connections rather than unique IPs. However, Tor \
already infers the number of users by counting directory downloads and then adjusting \
that number based on   how many each user is expected to make. In addition, each user \
doesn't necessarily correspond to a different IP because of NAT, and so counting \
connections may actually be more accurate.&lt;br&gt; &lt;br&gt;
Best,&lt;br&gt;
Aaron&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402130706</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-04-02 13:07:06-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry, I should have been more clear there. Tor Metrics estimates the total number of \
users by counting the number of directory downloads and dividing by an estimated \
expected number of directory downloads per user per day (10, I believe). This \
statistic is in the graph under the "Relay Users" tab on \
&lt;https://metrics.torproject.org/userstats-relay-country.html&gt;.

Best,
Aaron

&gt; On Apr 2, 2017, at 8:51 AM, Veer Kalantri &lt;mads.531998@gmail.com&gt; wrote:
&gt; 
&gt; about which stats are you talking Aaron?
&gt; 
&gt; 
&gt; On Sun, Apr 2, 2017 at 5:45 PM, Aaron Johnson &lt;aaron.m.johnson@nrl.navy.mil \
&gt; &lt;mailto:aaron.m.johnson@nrl.navy.mil&gt;&gt; wrote:
&gt; &gt; These statistics not just tell about the user's country but also keep a
&gt; &gt; track of unique IP addresses connecting from each country. This is
&gt; &gt; needed so as to present more realistic stats. If we increment counter on
&gt; &gt; any IP address instead of unique IP address then the statistics would
&gt; &gt; also reflect  user(s) connecting again and again. If we don't count
&gt; &gt; Unique IPs, we would have stats about per country usage rather than per
&gt; &gt; country users. We could do much better and implement a way(as described
&gt; &gt; by the OP of thread) that counts unique IPs at the same time preserves
&gt; &gt; privacy.
&gt; 
&gt; It is true that this would count connections rather than unique IPs. However, Tor \
&gt; already infers the number of users by counting directory downloads and then \
&gt; adjusting that number based on  how many each user is expected to make. In \
&gt; addition, each user doesn't necessarily correspond to a different IP because of \
&gt; NAT, and so counting connections may actually be more accurate. 
&gt; Best,
&gt; Aaron
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev \
&gt; &lt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;Sorry, I should have been more clear \
there. Tor Metrics estimates the total number of users by counting the number of \
directory downloads and dividing by an estimated expected number of directory \
downloads per user per day (10, I believe). This statistic is in the graph under the \
"Relay Users" tab on &lt;&lt;a \
href="https://metrics.torproject.org/userstats-relay-country.html" \
class=""&gt;https://metrics.torproject.org/userstats-relay-country.html&lt;/a&gt;&gt;.&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On Apr 2, \
2017, at 8:51 AM, Veer Kalantri &lt;&lt;a href="mailto:mads.531998@gmail.com" \
class=""&gt;mads.531998@gmail.com&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div dir="ltr" class=""&gt;about which \
stats are you talking Aaron?&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br class=""&gt;&lt;div class="gmail_quote"&gt;On Sun, Apr 2, 2017 at 5:45 \
PM, Aaron Johnson &lt;span dir="ltr" class=""&gt;&lt;&lt;a \
href="mailto:aaron.m.johnson@nrl.navy.mil" target="_blank" \
class=""&gt;aaron.m.johnson@nrl.navy.mil&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br class=""&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&gt; These statistics not just tell about the user's country \
but also keep a&lt;br class=""&gt; &gt; track of unique IP addresses connecting from each \
country. This is&lt;br class=""&gt; &gt; needed so as to present more realistic stats. If \
we increment counter on&lt;br class=""&gt; &gt; any IP address instead of unique IP address \
then the statistics would&lt;br class=""&gt; &gt; also reflect  user(s) connecting \
again and again. If we don't count&lt;br class=""&gt; &gt; Unique IPs, we would have stats \
about per country usage rather than per&lt;br class=""&gt; &gt; country users. We could do \
much better and implement a way(as described&lt;br class=""&gt; &gt; by the OP of thread) \
that counts unique IPs at the same time preserves&lt;br class=""&gt; &gt; privacy.&lt;br \
class=""&gt; &lt;br class=""&gt;
It is true that this would count connections rather than unique IPs. However, Tor \
already infers the number of users by counting directory downloads and then adjusting \
that number based on  how many each user is expected to make. In addition, each \
user doesn't necessarily correspond to a different IP because of NAT, and so counting \
connections may actually be more accurate.&lt;br class=""&gt; &lt;br class=""&gt;
Best,&lt;br class=""&gt;
Aaron&lt;br class=""&gt;
______________________________&lt;wbr class=""&gt;_________________&lt;br class=""&gt;
tor-dev mailing list&lt;br class=""&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class=""&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank" class=""&gt;https://lists.torproject.org/&lt;wbr \
class=""&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr class=""&gt;dev&lt;/a&gt;&lt;br class=""&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt; \
_______________________________________________&lt;br class=""&gt;tor-dev mailing list&lt;br \
class=""&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402132234</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-04-02 13:22:34-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

[Attachment #2 (multipart/alternative)]


Also, I think that counting users by IP is still a fine way to do it (absent the \
privacy issue that PCSA tries to address). I was just stating that my understanding \
based on talking to the Tor Metrics people is that the plan is to handle the privacy \
issue by moving to per-connection country statistics instead of by implementing PCSA.

I would also wonder how the privacy of PCSA actually compares to the privacy of \
per-country (noisy) counting, especially if the local statistics could be locally \
stored in a differentially-private way (again, this requires an accuracy analysis). \
As Tschorsch and Scheuermann note [0], the FM sketch used by PCSA  can indicate the \
presence of an individual user (Sec. 4). Thus they propose to add noise by \
independently flipping some of the PCSA bits (Sec. 5). This seems quite similar to \
the differentially-private technique of adding noise to a counter. It is not clear to \
me that it is better to suffer the inaccuracy of the PCSA sketching plus that of the \
added noise when one could simply rely on adding differentially-private noise, \
especially when the latter provides a precise notion of privacy where the former does \
not.

Best,
Aaron

[0] Florian Tschorsch and Björn Scheuermann, "An algorithm for privacy-preserving \
distributed user statistics", Computer Networks 57 (2013).

&gt; On Apr 2, 2017, at 9:07 AM, Aaron Johnson &lt;aaron.m.johnson@nrl.navy.mil&gt; wrote:
&gt; 
&gt; Sorry, I should have been more clear there. Tor Metrics estimates the total number \
&gt; of users by counting the number of directory downloads and dividing by an estimated \
&gt; expected number of directory downloads per user per day (10, I believe). This \
&gt; statistic is in the graph under the "Relay Users" tab on \
&gt; &lt;https://metrics.torproject.org/userstats-relay-country.html \
&gt; &lt;https://metrics.torproject.org/userstats-relay-country.html&gt;&gt;. 
&gt; Best,
&gt; Aaron
&gt; 
&gt; &gt; On Apr 2, 2017, at 8:51 AM, Veer Kalantri &lt;mads.531998@gmail.com \
&gt; &gt; &lt;mailto:mads.531998@gmail.com&gt;&gt; wrote: 
&gt; &gt; about which stats are you talking Aaron?
&gt; &gt; 
&gt; &gt; 
&gt; &gt; On Sun, Apr 2, 2017 at 5:45 PM, Aaron Johnson &lt;aaron.m.johnson@nrl.navy.mil \
&gt; &gt; &lt;mailto:aaron.m.johnson@nrl.navy.mil&gt;&gt; wrote:
&gt; &gt; &gt; These statistics not just tell about the user's country but also keep a
&gt; &gt; &gt; track of unique IP addresses connecting from each country. This is
&gt; &gt; &gt; needed so as to present more realistic stats. If we increment counter on
&gt; &gt; &gt; any IP address instead of unique IP address then the statistics would
&gt; &gt; &gt; also reflect  user(s) connecting again and again. If we don't count
&gt; &gt; &gt; Unique IPs, we would have stats about per country usage rather than per
&gt; &gt; &gt; country users. We could do much better and implement a way(as described
&gt; &gt; &gt; by the OP of thread) that counts unique IPs at the same time preserves
&gt; &gt; &gt; privacy.
&gt; &gt; 
&gt; &gt; It is true that this would count connections rather than unique IPs. However, Tor \
&gt; &gt; already infers the number of users by counting directory downloads and then \
&gt; &gt; adjusting that number based on  how many each user is expected to make. In \
&gt; &gt; addition, each user doesn't necessarily correspond to a different IP because of \
&gt; &gt; NAT, and so counting connections may actually be more accurate. 
&gt; &gt; Best,
&gt; &gt; Aaron
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev \
&gt; &gt; &lt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;Also, I think that counting users by \
IP is still a fine way to do it (absent the privacy issue that PCSA tries to \
address). I was just stating that my understanding based on talking to the Tor \
Metrics people is that the plan is to handle the privacy issue by moving to \
per-connection country statistics instead of by implementing PCSA.&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;I would also wonder how the privacy of PCSA actually \
compares to the privacy of per-country (noisy) counting, especially if the local \
statistics could be locally stored in a differentially-private way (again, this \
requires an accuracy analysis). As Tschorsch and Scheuermann note [0], the FM sketch \
used by PCSA  can indicate the presence of an individual user (Sec. 4). Thus \
they propose to add noise by independently flipping some of the PCSA bits (Sec. 5). \
This seems quite similar to the differentially-private technique of adding noise to a \
counter. It is not clear to me that it is better to suffer the inaccuracy of the PCSA \
sketching plus that of the added noise when one could simply rely on adding \
differentially-private noise, especially when the latter provides a precise notion of \
privacy where the former does not.&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;[0] Florian Tschorsch and Björn Scheuermann, "An \
algorithm for privacy-preserving distributed user statistics", Computer Networks \
57 (2013).&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;div&gt;&lt;blockquote type="cite" \
class=""&gt;&lt;div class=""&gt;On Apr 2, 2017, at 9:07 AM, Aaron Johnson &lt;&lt;a \
href="mailto:aaron.m.johnson@nrl.navy.mil" \
class=""&gt;aaron.m.johnson@nrl.navy.mil&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;meta http-equiv="Content-Type" \
content="text/html charset=utf-8" class=""&gt;&lt;div style="word-wrap: break-word; \
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" class=""&gt;Sorry, I \
should have been more clear there. Tor Metrics estimates the total number of users by \
counting the number of directory downloads and dividing by an estimated expected \
number of directory downloads per user per day (10, I believe). This statistic is in \
the graph under the "Relay Users" tab on &lt;&lt;a \
href="https://metrics.torproject.org/userstats-relay-country.html" \
class=""&gt;https://metrics.torproject.org/userstats-relay-country.html&lt;/a&gt;&gt;.&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;div class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On \
Apr 2, 2017, at 8:51 AM, Veer Kalantri &lt;&lt;a href="mailto:mads.531998@gmail.com" \
class=""&gt;mads.531998@gmail.com&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div dir="ltr" class=""&gt;about which \
stats are you talking Aaron?&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br class=""&gt;&lt;div class="gmail_quote"&gt;On Sun, Apr 2, 2017 at 5:45 \
PM, Aaron Johnson &lt;span dir="ltr" class=""&gt;&lt;&lt;a \
href="mailto:aaron.m.johnson@nrl.navy.mil" target="_blank" \
class=""&gt;aaron.m.johnson@nrl.navy.mil&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br class=""&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&gt; These statistics not just tell about the user's country \
but also keep a&lt;br class=""&gt; &gt; track of unique IP addresses connecting from each \
country. This is&lt;br class=""&gt; &gt; needed so as to present more realistic stats. If \
we increment counter on&lt;br class=""&gt; &gt; any IP address instead of unique IP address \
then the statistics would&lt;br class=""&gt; &gt; also reflect  user(s) connecting \
again and again. If we don't count&lt;br class=""&gt; &gt; Unique IPs, we would have stats \
about per country usage rather than per&lt;br class=""&gt; &gt; country users. We could do \
much better and implement a way(as described&lt;br class=""&gt; &gt; by the OP of thread) \
that counts unique IPs at the same time preserves&lt;br class=""&gt; &gt; privacy.&lt;br \
class=""&gt; &lt;br class=""&gt;
It is true that this would count connections rather than unique IPs. However, Tor \
already infers the number of users by counting directory downloads and then adjusting \
that number based on  how many each user is expected to make. In addition, each \
user doesn't necessarily correspond to a different IP because of NAT, and so counting \
connections may actually be more accurate.&lt;br class=""&gt; &lt;br class=""&gt;
Best,&lt;br class=""&gt;
Aaron&lt;br class=""&gt;
______________________________&lt;wbr class=""&gt;_________________&lt;br class=""&gt;
tor-dev mailing list&lt;br class=""&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class=""&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank" class=""&gt;https://lists.torproject.org/&lt;wbr \
class=""&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr class=""&gt;dev&lt;/a&gt;&lt;br class=""&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt; \
_______________________________________________&lt;br class=""&gt;tor-dev mailing list&lt;br \
class=""&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class=""&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402144642</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-04-02 14:46:42-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 02.04.17 15:22, Aaron Johnson wrote:
&gt; Also, I think that counting users by IP is still a fine way to do it (a=
bsent the privacy issue that PCSA tries to address). I was just stating t=
hat my understanding based on talking to the Tor Metrics people is that t=
he plan is to handle the privacy issue by moving to per-connection countr=
y statistics instead of by implementing PCSA.

That's true, and thanks, Aaron, for responding here!

The metrics team indeed has plans in this direction:

https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam#Objec=
tivesandKeyResultsfortheMetricsTeaminQ22017

"""
  - 1.4. Reduce the amount of sensitive, potentially personally
identifying data stored in memory of Tor relays and bridges by
implementing new directory-request statistics based on requests by
country, transport, and IP version and removing existing
directory-request statistics based on unique IP addresses by country,
transport, or IP version (Sponsor X 4.2. Tor daemon)
"""

Note that this is a plan of the metrics team for the current quarter
which is not yet discussed in detail with the network team.  But that
discussion won't happen before the GSoC student application deadline,
which is in ~24 hours day, I believe.  We're planning to write a
proposal in the next few weeks and then discuss it here.

Also note that there are still other unique IP statistics than the ones
on connecting directory clients, even though they are disabled by
default and thus less relevant.  Still, protecting unique IP addresses
of clients connecting to entry guards seems like a worthwhile project.

Sorry for not being more helpful.

Good luck with GSoC applications, everyone!

All the best,
Karsten



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170505014219</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-05-05 01:42:19-0400</timestampReceived><subject>Re: [tor-dev] making sure I configure OutboundBindAddressExit correctly</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 5 May 2017, at 06:03, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; since I really like this new feature
&gt; I added [1] initial autoconfiguration support for it to ansible-relayor
&gt; (user can opt-in via a single boolean and we automate the rest).
&gt; 
&gt; I want to make sure I do this correctly and would like your feedback on
&gt; the following questions:

You should probably specify OutboundBindAddressOR [IPv6] as well.

Several upcoming IPv6 features require relays to make outgoing IPv6
OR connections:
* Missing IPv6 ORPort reachability check
  https://trac.torproject.org/projects/tor/ticket/6939
* Enable relays to talk to other relays via IPv6
  https://trac.torproject.org/projects/tor/ticket/4565

And maybe:
* Change clients to automatically use IPv6 if they can bootstrap over it
  https://trac.torproject.org/projects/tor/ticket/17217

If you don't specify OutboundBindAddressOR [IPv6], any IPv6 connections
a relay makes will go via the OS routing table, which may use the same
address as OutboundBindAddressExit.

&gt; a)
&gt; Is 'OutboundBindAddressOR' in the following context optional (in the
&gt; sense that it does not change tor's behavior)?
&gt; 
&gt; ExitRelay 1
&gt; ExitPolicy reject *:25,accept *:*
&gt; ORPort 1.2.3.4:9001
&gt; OutboundBindAddress 1.2.3.4
&gt; OutboundBindAddressOR 1.2.3.4
&gt; OutboundBindAddressExit 7.7.7.7
&gt; 
&gt; is identical to:
&gt; 
&gt; ExitRelay 1
&gt; ExitPolicy reject *:25,accept *:*
&gt; ORPort 1.2.3.4:9001
&gt; OutboundBindAddress 1.2.3.4
&gt; OutboundBindAddressExit 7.7.7.7
&gt; 
&gt; (since according to the manual page OutboundBindAddress*OR* would just
&gt; override OutboundBindAddress, which is not needed in the above example
&gt; since they match)

Yes, they are identical in current tor versions.

There is currently no OutboundBindAddressDNS, but there might be in
future.

So please use OutboundBindAddress if you mean "all non-exit connections",
and OutboundBindAddressOR if you mean
"remote ORPort and DirPort connections".

Also, the documentation is unclear, and we need to fix it:
https://trac.torproject.org/projects/tor/ticket/22145

&gt; b)
&gt; Is it ok to set OutboundBindAddressExit for IPv4 only, even if we set
&gt; 'IPv6Exit 1' or is setting an IPv6 OutboundBindAddressExit address
&gt; required after setting OutboundBindAddressExit for IPv4?
&gt; 
&gt; Since this question might be a bit confusing I'll give an example in
&gt; form of torrc lines:
&gt; 
&gt; 
&gt; ORPort 1.2.3.4:9001
&gt; OutboundBindAddress 1.2.3.4
&gt; OutboundBindAddressExit 7.7.7.7
&gt; IPv6Exit 1
&gt; ExitRelay 1
&gt; ExitPolicy reject *:25,accept *:*
&gt; 
&gt; (this config has an IPv4 OutboundBindAddressExit entry but no IPv6
&gt; OutboundBindAddressExit entry)

This means that IPv6 Exit connections will use the OS routing table.

&gt; c)
&gt; Similar to (b) is it ok to enable OutboundBindAddressExit for IPv6 only?

This means that IPv4 Exit connections will use the OS routing table.

&gt; d)
&gt; Is it ok if multiple tor instances on the same host use the same
&gt; OutboundBindAddressExit address?
&gt; (ignoring the fact that big exits might run out of source ports?)

Yes, tor does not use any specific source ports for outgoing
connections.

&gt; ...
&gt; [1]
&gt; https://github.com/nusenu/ansible-relayor/commit/00fa7c571e8b6f6256092d992831598ad73201db

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZC9h7AAoJEHQNnjkCUnKicrkP/1F7yTAl88BH8dioMoJvBHGZ
J6Lbd79Udx780nAftCAnHDi2zMSB0I29FrOhYaeaylqZY271ZPSoJlqgcBaJBxwT
XYE2popSAt2Q8zhlfvv9+iLkTzdqrJj+YYdWexEoAsPXkLKHJJnpRRWDDHDV9hkr
sXWpk/8DJc/RU/kaecKE2FWnHBLdVJk3sNJK3BINM4sJJvvYCO7w6BmwJ2gN8iHi
Mai3B8qZ4ZCyx+hzliBrJ2ibCcjHP9ONQ16gJzQ7wKzIJFZfoG8o+sM5dGWygfwI
+vVhFGsQsgGDRlp7u4g/MgGokeEhgCxm5F07ZhsIkqV7tpaLYv1zrfPqcmmJHHX1
Y4lWf2+aNu+C55vNxNYKbaGNQKBD9+068Rlf5qs3ofX8x63lRBNvmvgXY6n7TBvY
A1fUx1INnmCOCzVZ6C4DhyGwPqOGrYg1BEb7UHqpV/tJ2MYANIaAO3QYD/WjR/DQ
4zkeP3zOZ0XPjeIyB44z1lqjjzWw1CZRDiRmm3dq4nV/p4i3wftyOyxU/TxvLKas
ckykAXJNM4ozZ9UwsPR1lmEr0jdzxCGsBkHkWaph+Ho7oXR69KI9FQyMqILrCxDU
e2saBzRB792KCXEKy6EsUsfi03u+V5MqgnEwbGpW/sp2peRG0Xd583S5v2T3J8E0
PepX34MD6x9wIH4xRKoH
=Hai8
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126145813</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-26 14:58:13-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 26 Jan (15:05:26), George Kadianakis wrote:
&gt; Hey list,

Hi!

First, big thanks for this write up!

&gt; 
&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt; the directory structure of prop224 onion services. This will be very similar to
&gt; the current directory structure, but with some mods to facilitate assymetric
&gt; client authorization keys and offline keys.
&gt; 
&gt; As people have pointed out, the HS directory structure matters less after the
&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt; part of onion service sysadmin UX.
&gt; 
&gt; So the HiddenServiceDir directory will contain the following items:
&gt; 
&gt; - "./hostname"    [FILE]
&gt; 
&gt;    This is a file containing the onion address of the onion service.
&gt; 
&gt;    As you can see it's the same filename as in v2. Should we suffix it with v3
&gt;    to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt;    living in the same directory?

I don't believe we should suffix here because for almost 10 years, users/apps
have been exposed to "hostname" and it does make sense that it's the goto file
for that.

Current implementation doesn't allow two services in the same HiddenServiceDir
and for prop224, the ongoing implementation doesn't allow it either. Sharing a
directory brings all sorts of uneeded complexity. So if the directory is v3,
everything in it will be v3.

&gt; 
&gt; - "./private_key_ed25519"  [FILE]
&gt; 
&gt;    This is the file containing the private master ed25519 key of the onion service.
&gt; 
&gt;    If offline keys are _enabled_, then this file doesn't exist and instead a
&gt;    directory is made containing blinded keys for every day [TODO: The directory
&gt;    format here will be specified in the future].

If that file doesn't exists, the public key is needed else the service can't
derive the .onion and create the hostname file. The offline case is an extra
use case but I suspect we would use "public_key_ed25519" along with the
blinded keys specific file name. (Unless we make our "tor-genkey" tool
generate the hostname file as well. #bikesheding)

&gt; 
&gt; - "./client_authorized_pubkeys"   [FILE]
&gt; 
&gt;   If client authorization is _enabled_, this is a newline-separated file of
&gt;   "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
&gt;   as the ~/.ssh/authorized_keys of onion services.
&gt; 
&gt; - "./client_authorized_privkeys/"          [DIRECTORY]
&gt;   "./client_authorized_privkeys/alice"     [FILE] 
&gt;   "./client_authorized_privkeys/bob"       [FILE]
&gt;   "./client_authorized_privkeys/charlie"   [FILE]

Small clarification. The "&lt;client name&gt;" field in the the pubkey file is the
same for the privkey file name. So if "alice" is in the pubkey file, it will
be "alice" in this privkey directory.

&gt;   
&gt;   If client authorization is _enabled_ _AND_ if the hidden service is
&gt;   responsible for generating and distributing private keys for its clients,
&gt;   then this directory contains files with client's private keys. The idea is
&gt;   that these files can be shredded and deleted after the private key has been
&gt;   passed to the client. For more context here, please read the client
&gt;   authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
&gt;   details on how this works.

Also, expected behavior that we should go for when implementing this within
the "tor" code base. We could think of many ways to make this more complex
that it could be but going *simple* is what I'm aiming for:

- The torrc option HiddenServiceAuthorizeClient as to match the list of client
  in the pubkey file in so if the pubkey file has extra entries, we error at
  startup. With this in mind, here are the behaviors:

i) if a privkey file exists but no entry in the pubkey file, add the entry to
   pubkey file as long as the client name is found in
   HiddenServiceAuthorizeClient.

ii) a pubkey entries does NOT need a corresponding privkey to be used. As long
    as the client name is found in HiddenServiceAuthorizeClient.

iii) if a client name is specified in the HiddenServiceAuthorizeClient option but
     NOT in the pubkey file, generate pubkey/privkey unless the privkey file
     exists which is (i) behavior where pubkey is derived from privkey.

So the great thing about this is that you can create a keypair on a different
machine (or client side), put the privkey file in the
client_authorized_privkeys directory and add the client name to torrc, HUP tor
and done. We could see ultimately an auto update of the service configuration
with the client name but I'm not a big fan of changing the torrc file
automagically...

Thanks!
David

&gt; 
&gt; So this is it. The above should handle most uses of onion services + client
&gt; authorization. The directory format of offline keys will be specified as we
&gt; move forward with implementation. 
&gt; 
&gt; Hope things here are not too controversial. Looking forward to your feedback.
&gt; 
&gt; In a few days, I will add a small Appendix section to prop224 with the
&gt; above, and also fix the parts of 'Appendix F' that got outdated since then.
&gt; 
&gt; Cheers!
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
LPDGvjmCLxb+bnFoopeN77JIq714VtyU6DdFrKs4R08=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130141607</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-30 14:16:07-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; On 26 Jan (15:05:26), George Kadianakis wrote:
&gt;&gt; Hey list,
&gt;
&gt; Hi!
&gt;
&gt; First, big thanks for this write up!
&gt;
&gt;&gt; 
&gt;&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt;&gt; the directory structure of prop224 onion services. This will be very similar to
&gt;&gt; the current directory structure, but with some mods to facilitate assymetric
&gt;&gt; client authorization keys and offline keys.
&gt;&gt; 
&gt;&gt; As people have pointed out, the HS directory structure matters less after the
&gt;&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt;&gt; part of onion service sysadmin UX.
&gt;&gt; 
&gt;&gt; So the HiddenServiceDir directory will contain the following items:
&gt;&gt; 
&gt;&gt; - "./hostname"    [FILE]
&gt;&gt; 
&gt;&gt;    This is a file containing the onion address of the onion service.
&gt;&gt; 
&gt;&gt;    As you can see it's the same filename as in v2. Should we suffix it with v3
&gt;&gt;    to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt;&gt;    living in the same directory?
&gt;
&gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt; for that.
&gt;
&gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt; everything in it will be v3.
&gt;
&gt;&gt; 
&gt;&gt; - "./private_key_ed25519"  [FILE]
&gt;&gt; 
&gt;&gt;    This is the file containing the private master ed25519 key of the onion service.
&gt;&gt; 
&gt;&gt;    If offline keys are _enabled_, then this file doesn't exist and instead a
&gt;&gt;    directory is made containing blinded keys for every day [TODO: The directory
&gt;&gt;    format here will be specified in the future].
&gt;
&gt; If that file doesn't exists, the public key is needed else the service can't
&gt; derive the .onion and create the hostname file. The offline case is an extra
&gt; use case but I suspect we would use "public_key_ed25519" along with the
&gt; blinded keys specific file name. (Unless we make our "tor-genkey" tool
&gt; generate the hostname file as well. #bikesheding)
&gt;
&gt;&gt; 
&gt;&gt; - "./client_authorized_pubkeys"   [FILE]
&gt;&gt; 
&gt;&gt;   If client authorization is _enabled_, this is a newline-separated file of
&gt;&gt;   "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
&gt;&gt;   as the ~/.ssh/authorized_keys of onion services.
&gt;&gt; 
&gt;&gt; - "./client_authorized_privkeys/"          [DIRECTORY]
&gt;&gt;   "./client_authorized_privkeys/alice"     [FILE] 
&gt;&gt;   "./client_authorized_privkeys/bob"       [FILE]
&gt;&gt;   "./client_authorized_privkeys/charlie"   [FILE]
&gt;
&gt; Small clarification. The "&lt;client name&gt;" field in the the pubkey file is the
&gt; same for the privkey file name. So if "alice" is in the pubkey file, it will
&gt; be "alice" in this privkey directory.
&gt;
&gt;&gt;   
&gt;&gt;   If client authorization is _enabled_ _AND_ if the hidden service is
&gt;&gt;   responsible for generating and distributing private keys for its clients,
&gt;&gt;   then this directory contains files with client's private keys. The idea is
&gt;&gt;   that these files can be shredded and deleted after the private key has been
&gt;&gt;   passed to the client. For more context here, please read the client
&gt;&gt;   authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
&gt;&gt;   details on how this works.
&gt;
&gt; Also, expected behavior that we should go for when implementing this within
&gt; the "tor" code base. We could think of many ways to make this more complex
&gt; that it could be but going *simple* is what I'm aiming for:
&gt;
&gt; - The torrc option HiddenServiceAuthorizeClient as to match the list of client
&gt;   in the pubkey file in so if the pubkey file has extra entries, we error at
&gt;   startup. With this in mind, here are the behaviors:
&gt;
&gt; i) if a privkey file exists but no entry in the pubkey file, add the entry to
&gt;    pubkey file as long as the client name is found in
&gt;    HiddenServiceAuthorizeClient.
&gt;
&gt; ii) a pubkey entries does NOT need a corresponding privkey to be used. As long
&gt;     as the client name is found in HiddenServiceAuthorizeClient.
&gt;
&gt; iii) if a client name is specified in the HiddenServiceAuthorizeClient option but
&gt;      NOT in the pubkey file, generate pubkey/privkey unless the privkey file
&gt;      exists which is (i) behavior where pubkey is derived from privkey.
&gt;
&gt; So the great thing about this is that you can create a keypair on a different
&gt; machine (or client side), put the privkey file in the
&gt; client_authorized_privkeys directory and add the client name to torrc, HUP tor
&gt; and done. We could see ultimately an auto update of the service configuration
&gt; with the client name but I'm not a big fan of changing the torrc file
&gt; automagically...
&gt;

Hey David,

thanks for the useful comments.

Please check my torspec branch `prop224-directory-format`.

FWIW, I agree with all the expected behavior details you noted at the
end of your email. I encoded some of those behaviors in the spec, but I
didn't provide a complete formal algorithm of how the whole process
works because I don't think it's spec material and also because I feel
that during implementation we will get new insights on how this should
work.

Let me know how you feel about the spec patch :)

Cheers!

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130144804</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-30 14:48:04-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 30 Jan (16:16:07), George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt; 
&gt; &gt; On 26 Jan (15:05:26), George Kadianakis wrote:
&gt; &gt;&gt; Hey list,
&gt; &gt;
&gt; &gt; Hi!
&gt; &gt;
&gt; &gt; First, big thanks for this write up!
&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt; &gt;&gt; the directory structure of prop224 onion services. This will be very similar to
&gt; &gt;&gt; the current directory structure, but with some mods to facilitate assymetric
&gt; &gt;&gt; client authorization keys and offline keys.
&gt; &gt;&gt; 
&gt; &gt;&gt; As people have pointed out, the HS directory structure matters less after the
&gt; &gt;&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt; &gt;&gt; part of onion service sysadmin UX.
&gt; &gt;&gt; 
&gt; &gt;&gt; So the HiddenServiceDir directory will contain the following items:
&gt; &gt;&gt; 
&gt; &gt;&gt; - "./hostname"    [FILE]
&gt; &gt;&gt; 
&gt; &gt;&gt;    This is a file containing the onion address of the onion service.
&gt; &gt;&gt; 
&gt; &gt;&gt;    As you can see it's the same filename as in v2. Should we suffix it with v3
&gt; &gt;&gt;    to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt; &gt;&gt;    living in the same directory?
&gt; &gt;
&gt; &gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt; &gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt; &gt; for that.
&gt; &gt;
&gt; &gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt; &gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt; &gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt; &gt; everything in it will be v3.
&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; - "./private_key_ed25519"  [FILE]
&gt; &gt;&gt; 
&gt; &gt;&gt;    This is the file containing the private master ed25519 key of the onion service.
&gt; &gt;&gt; 
&gt; &gt;&gt;    If offline keys are _enabled_, then this file doesn't exist and instead a
&gt; &gt;&gt;    directory is made containing blinded keys for every day [TODO: The directory
&gt; &gt;&gt;    format here will be specified in the future].
&gt; &gt;
&gt; &gt; If that file doesn't exists, the public key is needed else the service can't
&gt; &gt; derive the .onion and create the hostname file. The offline case is an extra
&gt; &gt; use case but I suspect we would use "public_key_ed25519" along with the
&gt; &gt; blinded keys specific file name. (Unless we make our "tor-genkey" tool
&gt; &gt; generate the hostname file as well. #bikesheding)
&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; - "./client_authorized_pubkeys"   [FILE]
&gt; &gt;&gt; 
&gt; &gt;&gt;   If client authorization is _enabled_, this is a newline-separated file of
&gt; &gt;&gt;   "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
&gt; &gt;&gt;   as the ~/.ssh/authorized_keys of onion services.
&gt; &gt;&gt; 
&gt; &gt;&gt; - "./client_authorized_privkeys/"          [DIRECTORY]
&gt; &gt;&gt;   "./client_authorized_privkeys/alice"     [FILE] 
&gt; &gt;&gt;   "./client_authorized_privkeys/bob"       [FILE]
&gt; &gt;&gt;   "./client_authorized_privkeys/charlie"   [FILE]
&gt; &gt;
&gt; &gt; Small clarification. The "&lt;client name&gt;" field in the the pubkey file is the
&gt; &gt; same for the privkey file name. So if "alice" is in the pubkey file, it will
&gt; &gt; be "alice" in this privkey directory.
&gt; &gt;
&gt; &gt;&gt;   
&gt; &gt;&gt;   If client authorization is _enabled_ _AND_ if the hidden service is
&gt; &gt;&gt;   responsible for generating and distributing private keys for its clients,
&gt; &gt;&gt;   then this directory contains files with client's private keys. The idea is
&gt; &gt;&gt;   that these files can be shredded and deleted after the private key has been
&gt; &gt;&gt;   passed to the client. For more context here, please read the client
&gt; &gt;&gt;   authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
&gt; &gt;&gt;   details on how this works.
&gt; &gt;
&gt; &gt; Also, expected behavior that we should go for when implementing this within
&gt; &gt; the "tor" code base. We could think of many ways to make this more complex
&gt; &gt; that it could be but going *simple* is what I'm aiming for:
&gt; &gt;
&gt; &gt; - The torrc option HiddenServiceAuthorizeClient as to match the list of client
&gt; &gt;   in the pubkey file in so if the pubkey file has extra entries, we error at
&gt; &gt;   startup. With this in mind, here are the behaviors:
&gt; &gt;
&gt; &gt; i) if a privkey file exists but no entry in the pubkey file, add the entry to
&gt; &gt;    pubkey file as long as the client name is found in
&gt; &gt;    HiddenServiceAuthorizeClient.
&gt; &gt;
&gt; &gt; ii) a pubkey entries does NOT need a corresponding privkey to be used. As long
&gt; &gt;     as the client name is found in HiddenServiceAuthorizeClient.
&gt; &gt;
&gt; &gt; iii) if a client name is specified in the HiddenServiceAuthorizeClient option but
&gt; &gt;      NOT in the pubkey file, generate pubkey/privkey unless the privkey file
&gt; &gt;      exists which is (i) behavior where pubkey is derived from privkey.
&gt; &gt;
&gt; &gt; So the great thing about this is that you can create a keypair on a different
&gt; &gt; machine (or client side), put the privkey file in the
&gt; &gt; client_authorized_privkeys directory and add the client name to torrc, HUP tor
&gt; &gt; and done. We could see ultimately an auto update of the service configuration
&gt; &gt; with the client name but I'm not a big fan of changing the torrc file
&gt; &gt; automagically...
&gt; &gt;
&gt; 
&gt; Hey David,
&gt; 
&gt; thanks for the useful comments.
&gt; 
&gt; Please check my torspec branch `prop224-directory-format`.
&gt; 
&gt; FWIW, I agree with all the expected behavior details you noted at the
&gt; end of your email. I encoded some of those behaviors in the spec, but I
&gt; didn't provide a complete formal algorithm of how the whole process
&gt; works because I don't think it's spec material and also because I feel
&gt; that during implementation we will get new insights on how this should
&gt; work.
&gt; 
&gt; Let me know how you feel about the spec patch :)

Good stuff! And yes, I don't think it's spec material at all but good to have
in an Appendfix for reference. Once this file structure will be released in a
tor version, we *must* update the man page FILES section.

Thanks!
David

&gt; 
&gt; Cheers!
&gt; 

-- 
IOA3vUozzhhCnEz3vEUUkbz+AJwvgSYAkuxkheMCHHA=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130220235</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-30 22:02:35-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 27 Jan 2017, at 01:58, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt;&gt; - "./hostname"    [FILE]
&gt;&gt; 
&gt;&gt;   This is a file containing the onion address of the onion service.
&gt;&gt; 
&gt;&gt;   As you can see it's the same filename as in v2. Should we suffix it with v3
&gt;&gt;   to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt;&gt;   living in the same directory?
&gt; 
&gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt; for that.

This works for applications that simply display the hostname without any
further processing.

But code that expects a short hostname file may become confused when
exposed to a longer hostname. It may fail silently, refuse to work,
or have some other issue.

Have you tested any applications that use the hostname file with longer
names?

&gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt; everything in it will be v3.

How does an application tell the difference between a v2 and v3
directory?

What's the supported method, that we will continue to support in
future, regardless of key or algorithm changes?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYj7f7AAoJEEUMun+WjwlLziAP/iopaXlIvk34g3YpjiQ+eIBP
kFSI81XGvpKq2yi9D5bZUGYIDcyj5Q/crZrLB30Y8ouAEs+OTq/0AReWMf/qZHEp
/+LgvoOZARnswp7hVuAv3bC9RgO2tojIi3zmBKjse4PAma2FCEqkToIlTjO3trZU
WBWCMk43OVCI/8494HJlqiSS4wEYl1bJ2sZk31I/vc+SGA1z1Uk3+tXgr0LuAhDX
4b/RlKqRaXuUYnoDkG9qJ3MpdgY+rTYQwiuOmF6F+iSW7y2vOKaQmO7O/fwYUhPm
sRYOgmoH1952n+PL0wKnCaVprCR8J/C/cZ1p12XCsIssFD0vv/09DtMJQsak5N8B
mSOrIg+bE63bz+F+nIYUUT9sb1ThHqrbr7X9CCfw1s8PoTGacby6ob1gqaQR6Yrp
7gOmkwkWXCC/Hf/LUUuh+PnbSmFUIIFetMtweonJPoafnvYqA+hofMJEZQrELBgR
6mmfypx67xq+Rzrv2380uR0y0mDIPGbxA4JaxGIqJpcvt4NEsdZWJFYIwIovWlPp
3PVBX+wobigHNR+y29PNRUu0HF+5uzIQmGNsPNiN85RsDOOq2vIsmP8Pjkz7sUX8
nmmo8ssCqAneqy55SvftuLCsVQ1QN3tYj5TJKwuS0Rc+CXk4WzmqNhExbFWNtrP0
2kq8VOXBakwHOXCXJzYT
=KhFL
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130230233</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-01-30 23:02:33-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

On Tue, Jan 31, 2017 at 09:02:35AM +1100, teor wrote:
&gt; How does an application tell the difference between a v2 and v3
&gt; directory?
&gt; 
&gt; What's the supported method, that we will continue to support in
&gt; future, regardless of key or algorithm changes?

I guess by looking at the address and checking its validity and/or
looking at the vesion field in v3 (see recent discussion on onion
address encoding). So if there will be crypto changes there will be
version field changes as well.

--
Ivan Makrin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170131000909</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-01-31 00:09:09-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt; for that.

I'm +1 on keeping the filename as "hostname".

txtorcon doesn't do processing on it, per se.

Might be worth noting here that it's not always "a" hostname: if you
have an authenticated hidden-service, it is multiple lines. In "basic"
auth case, each line starts with the same .onion address -- in "stealth"
case, each line has its own .onion address.

cheers,

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170131033825</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-01-31 03:38:25-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

David Goulet wrote:
&gt; On 30 Jan (16:16:07), George Kadianakis wrote:
&gt;&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt;&gt;
&gt;&gt;&gt; On 26 Jan (15:05:26), George Kadianakis wrote:
&gt;&gt;&gt;&gt; Hey list,
&gt;&gt;&gt;
&gt;&gt;&gt; Hi!
&gt;&gt;&gt;
&gt;&gt;&gt; First, big thanks for this write up!
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt;&gt;&gt;&gt; the directory structure of prop224 onion services. This will be very similar to
&gt;&gt;&gt;&gt; the current directory structure, but with some mods to facilitate assymetric
&gt;&gt;&gt;&gt; client authorization keys and offline keys.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; As people have pointed out, the HS directory structure matters less after the
&gt;&gt;&gt;&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt;&gt;&gt;&gt; part of onion service sysadmin UX.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; So the HiddenServiceDir directory will contain the following items:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; - "./hostname"    [FILE]
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;    This is a file containing the onion address of the onion service.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;    As you can see it's the same filename as in v2. Should we suffix it with v3
&gt;&gt;&gt;&gt;    to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt;&gt;&gt;&gt;    living in the same directory?
&gt;&gt;&gt;
&gt;&gt;&gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt;&gt;&gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt;&gt;&gt; for that.
&gt;&gt;&gt;
&gt;&gt;&gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt;&gt;&gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt;&gt;&gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt;&gt;&gt; everything in it will be v3.
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; - "./private_key_ed25519"  [FILE]
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;    This is the file containing the private master ed25519 key of the onion service.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;    If offline keys are _enabled_, then this file doesn't exist and instead a
&gt;&gt;&gt;&gt;    directory is made containing blinded keys for every day [TODO: The directory
&gt;&gt;&gt;&gt;    format here will be specified in the future].
&gt;&gt;&gt;
&gt;&gt;&gt; If that file doesn't exists, the public key is needed else the service can't
&gt;&gt;&gt; derive the .onion and create the hostname file. The offline case is an extra
&gt;&gt;&gt; use case but I suspect we would use "public_key_ed25519" along with the
&gt;&gt;&gt; blinded keys specific file name. (Unless we make our "tor-genkey" tool
&gt;&gt;&gt; generate the hostname file as well. #bikesheding)
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; - "./client_authorized_pubkeys"   [FILE]
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;   If client authorization is _enabled_, this is a newline-separated file of
&gt;&gt;&gt;&gt;   "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
&gt;&gt;&gt;&gt;   as the ~/.ssh/authorized_keys of onion services.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; - "./client_authorized_privkeys/"          [DIRECTORY]
&gt;&gt;&gt;&gt;   "./client_authorized_privkeys/alice"     [FILE] 
&gt;&gt;&gt;&gt;   "./client_authorized_privkeys/bob"       [FILE]
&gt;&gt;&gt;&gt;   "./client_authorized_privkeys/charlie"   [FILE]
&gt;&gt;&gt;
&gt;&gt;&gt; Small clarification. The "&lt;client name&gt;" field in the the pubkey file is the
&gt;&gt;&gt; same for the privkey file name. So if "alice" is in the pubkey file, it will
&gt;&gt;&gt; be "alice" in this privkey directory.
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;   
&gt;&gt;&gt;&gt;   If client authorization is _enabled_ _AND_ if the hidden service is
&gt;&gt;&gt;&gt;   responsible for generating and distributing private keys for its clients,
&gt;&gt;&gt;&gt;   then this directory contains files with client's private keys. The idea is
&gt;&gt;&gt;&gt;   that these files can be shredded and deleted after the private key has been
&gt;&gt;&gt;&gt;   passed to the client. For more context here, please read the client
&gt;&gt;&gt;&gt;   authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
&gt;&gt;&gt;&gt;   details on how this works.
&gt;&gt;&gt;
&gt;&gt;&gt; Also, expected behavior that we should go for when implementing this within
&gt;&gt;&gt; the "tor" code base. We could think of many ways to make this more complex
&gt;&gt;&gt; that it could be but going *simple* is what I'm aiming for:
&gt;&gt;&gt;
&gt;&gt;&gt; - The torrc option HiddenServiceAuthorizeClient as to match the list of client
&gt;&gt;&gt;   in the pubkey file in so if the pubkey file has extra entries, we error at
&gt;&gt;&gt;   startup. With this in mind, here are the behaviors:
&gt;&gt;&gt;
&gt;&gt;&gt; i) if a privkey file exists but no entry in the pubkey file, add the entry to
&gt;&gt;&gt;    pubkey file as long as the client name is found in
&gt;&gt;&gt;    HiddenServiceAuthorizeClient.
&gt;&gt;&gt;
&gt;&gt;&gt; ii) a pubkey entries does NOT need a corresponding privkey to be used. As long
&gt;&gt;&gt;     as the client name is found in HiddenServiceAuthorizeClient.
&gt;&gt;&gt;
&gt;&gt;&gt; iii) if a client name is specified in the HiddenServiceAuthorizeClient option but
&gt;&gt;&gt;      NOT in the pubkey file, generate pubkey/privkey unless the privkey file
&gt;&gt;&gt;      exists which is (i) behavior where pubkey is derived from privkey.
&gt;&gt;&gt;
&gt;&gt;&gt; So the great thing about this is that you can create a keypair on a different
&gt;&gt;&gt; machine (or client side), put the privkey file in the
&gt;&gt;&gt; client_authorized_privkeys directory and add the client name to torrc, HUP tor
&gt;&gt;&gt; and done. We could see ultimately an auto update of the service configuration
&gt;&gt;&gt; with the client name but I'm not a big fan of changing the torrc file
&gt;&gt;&gt; automagically...
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; Hey David,
&gt;&gt;
&gt;&gt; thanks for the useful comments.
&gt;&gt;
&gt;&gt; Please check my torspec branch `prop224-directory-format`.
&gt;&gt;
&gt;&gt; FWIW, I agree with all the expected behavior details you noted at the
&gt;&gt; end of your email. I encoded some of those behaviors in the spec, but I
&gt;&gt; didn't provide a complete formal algorithm of how the whole process
&gt;&gt; works because I don't think it's spec material and also because I feel
&gt;&gt; that during implementation we will get new insights on how this should
&gt;&gt; work.
&gt;&gt;
&gt;&gt; Let me know how you feel about the spec patch :)
&gt; 
&gt; Good stuff! And yes, I don't think it's spec material at all but good to have
&gt; in an Appendfix for reference. Once this file structure will be released in a
&gt; tor version, we *must* update the man page FILES section.
&gt; 

Directory structure looks good to me.

I agree the file containing the address should just be called 'hostname'
with no version suffix or anything, it will be redundant and create
confusions as soon as v2 is entirely deprecated. Also, 'hostname' file
is only responsible to provide the right address that can be used to
connect to the onion service, it should not care about the version or
include this information it the containing file name.

What we will do here to avoid accidents is that we will use the
public_key_ed25519 file as the starting point. If this file is present,
we will assume the onion service is generated and existent. If not,
compute it and save to disk either from private_key_ed25519 (if
available) or the blinded keys (if available).

I like the protocol suggested by David very much for managing auth keys
for clients. Nice, logic and should leave no room for accidents.

Here's another protocol for managing the onion service identity (keys).
This is not urgent but I am writing it now so I won't forget something
and we will have it here when needed:

1. Check if private_key_ed25519 exists. If it doesn't exist, move to
step 2.
1.1 If it exists, compute public_key_ed25519 and hostname, or validate
the latter two if they exist. If there is a mismatch, exit with error,
user accidentally mixed something.

2. Check if public_key_ed25519 exists. If it doesn't exist, move to step 3.
2.1 If it exists, compute hostname or validate the latter one if it
exists, If there is a mismatch, exit with error, used accidentally mixed
something.

3. Check if a blinded key exists.
3.1 If it doesn't exist, and private_key_ed25519 is available, compute
it and go to step 3.2, otherwise go to step 4.
3.2 If it exists and is valid, compute public_key_ed25519 and hostname,
or validate the latter two if they exist. If there is a mismatch, exit
with error, user accidentally mixed something.
3.3 If it is invalid and private_key_ed25519 is available, compute a new
one and go back to step 3.2, otherwise exit with error asking for manual
further action with genkey tool.

4. If offline onion service keys is not set, create a new
private_key_ed25519 and go to step 1 again.
4.1 If offline onion service keys is set, exit with error asking for
manual further action with genkey tool.


As always, epic work. Thanks !


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131130056</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-31 13:00:56-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; On 30 Jan (16:16:07), George Kadianakis wrote:
&gt;&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; On 26 Jan (15:05:26), George Kadianakis wrote:
&gt;&gt; &gt;&gt; Hey list,
&gt;&gt; &gt;
&gt;&gt; &gt; Hi!
&gt;&gt; &gt;
&gt;&gt; &gt; First, big thanks for this write up!
&gt;&gt; &gt;
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt;&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt;&gt; &gt;&gt; the directory structure of prop224 onion services. This will be very similar to
&gt;&gt; &gt;&gt; the current directory structure, but with some mods to facilitate assymetric
&gt;&gt; &gt;&gt; client authorization keys and offline keys.
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt;&gt; As people have pointed out, the HS directory structure matters less after the
&gt;&gt; &gt;&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt;&gt; &gt;&gt; part of onion service sysadmin UX.
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt;&gt; &lt;snip&gt;
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Hey David,
&gt;&gt; 
&gt;&gt; thanks for the useful comments.
&gt;&gt; 
&gt;&gt; Please check my torspec branch `prop224-directory-format`.
&gt;&gt; 
&gt;&gt; FWIW, I agree with all the expected behavior details you noted at the
&gt;&gt; end of your email. I encoded some of those behaviors in the spec, but I
&gt;&gt; didn't provide a complete formal algorithm of how the whole process
&gt;&gt; works because I don't think it's spec material and also because I feel
&gt;&gt; that during implementation we will get new insights on how this should
&gt;&gt; work.
&gt;&gt; 
&gt;&gt; Let me know how you feel about the spec patch :)
&gt;
&gt; Good stuff! And yes, I don't think it's spec material at all but good to have
&gt; in an Appendfix for reference. Once this file structure will be released in a
&gt; tor version, we *must* update the man page FILES section.
&gt;

OK, I merged this patch to torspec as well!

Thanks for the feedback everyone.

We can edit it if we figure out something is wrong; and we need to
update it anyway to add the offline keys info.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170131143629</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-31 14:36:29-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 31 Jan (09:02:35), teor wrote:
&gt; 
&gt; &gt; On 27 Jan 2017, at 01:58, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; 
&gt; &gt;&gt; - "./hostname"    [FILE]
&gt; &gt;&gt; 
&gt; &gt;&gt;   This is a file containing the onion address of the onion service.
&gt; &gt;&gt; 
&gt; &gt;&gt;   As you can see it's the same filename as in v2. Should we suffix it with v3
&gt; &gt;&gt;   to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt; &gt;&gt;   living in the same directory?
&gt; &gt; 
&gt; &gt; I don't believe we should suffix here because for almost 10 years, users/apps
&gt; &gt; have been exposed to "hostname" and it does make sense that it's the goto file
&gt; &gt; for that.
&gt; 
&gt; This works for applications that simply display the hostname without any
&gt; further processing.
&gt; 
&gt; But code that expects a short hostname file may become confused when
&gt; exposed to a longer hostname. It may fail silently, refuse to work,
&gt; or have some other issue.
&gt; 
&gt; Have you tested any applications that use the hostname file with longer
&gt; names?

To be honest, I would really hope applications just don't blindly open the
file and regex on a 16 char onion... They will be really sad with client auth.
But, we can't assume they are all perfect so yes that could be a problem. And
I hope that if it's the case, they error gracefully if regex fails. It's kind
of unreasonable to ask us to make sure we don't break any applications out
there doing such. The only assertion they should make on the "hostname" file
is that it contains the address of the address.

Your next question is a good one actually so jumping into it!

&gt; 
&gt; &gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt; &gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt; &gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt; &gt; everything in it will be v3.
&gt; 
&gt; How does an application tell the difference between a v2 and v3
&gt; directory?

Right now, apart from the "key tag" in the public key file that will be
something like "v3", I don't see any :S ... And I think you are raising a good
point. How can we make it easy for any application *only* looking on disk what
version the hidden service is?

The onion address has the version encoded into it *but* that would require the
application to do some base32 decode and truncation magic. Not user friendly
enough? Maybe but apart from that, we would need to make it obvious either
with a filename or litterally an extra "version file".

However, there is kind of an issue rising from this. Imagine that v4 changes
the onion address format because new crypto. We'll end up with a problem where
the how to extract the version from the address is actually version
specific... A solution to that is that "whatever size/encoding the address is,
version will ALWAYS be the last 1 byte."

Thoughts?

&gt; 
&gt; What's the supported method, that we will continue to support in
&gt; future, regardless of key or algorithm changes?

Not 100% sure what you mean by "supported method" but I'll take a guess. Those
are the one that comes to mind:

- Single onion service
- Client auth (only basic for now, we don't have stealth specified)

Also, every single Hidden Service torrc option will be supported for v3
*EXCEPT* the Tor2Web one.

Hope that answers.

Thanks!
David

&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 
&gt; 
-- 
laomWpXMwfgJQSD00XsC6WR0haEh1gK8WeNTaAPQf20=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170201004711</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-02-01 00:47:11-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

On Wed, Feb 01, 2017 at 09:36:54AM +1100, teor wrote:
&gt; 
&gt; &gt; On 1 Feb 2017, at 01:36, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; 
&gt; &gt; On 31 Jan (09:02:35), teor wrote:
&gt; &gt;&gt; 
&gt; &gt;&gt;&gt; On 27 Jan 2017, at 01:58, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; However, there is kind of an issue rising from this. Imagine that v4 changes
&gt; &gt; the onion address format because new crypto. We'll end up with a problem where
&gt; &gt; the how to extract the version from the address is actually version
&gt; &gt; specific... A solution to that is that "whatever size/encoding the address is,
&gt; &gt; version will ALWAYS be the last 1 byte."
&gt; &gt; 
&gt; &gt; Thoughts?
&gt; 
&gt; I think it is a good idea to make the version the last byte of the
&gt; address.

Sure, if stays here it's effectively a version suffix (label). Another
version will imply address length, encoding, checksum, etc.
 
&gt; But I also think that a version file is a good idea to make it easy for
&gt; applications to discover the on-disk version.
&gt; 
&gt; Otherwise, the algorithm would have to be something like:
&gt; * look for a hostname file
&gt; * read the first line
&gt; * find the address in that line
&gt; * if the address is N characters long, version 2
&gt;   * do we promise we will never have addresses this long in future versions?
&gt; * base32 decode that line
&gt;   * do we promise addresses will always be base32?
&gt; * read the last byte
&gt;   * do we promise addresses will always have the version in the last byte?

This entire idea to do something for some apps to detect onion service
version "just by looking at disk" looks like a feature creep to me. Why should 
we bother at all while we have onion address that is self-descriptive?*
It's not a big deal really to parse onion address from a 'hostname'
file. Especially for an app that wants to know the protocol version (what
for?).
Personally I belive that there are no(t so many) apps that would
mess with onion services without using an onion-related library such
as stem which will make it as simple as one function call over
onion address.

[*] Yeah, for that there should always be Base32 and version byte at the
end.
--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170401225113</emailId><senderName>Pushkar Pathak</senderName><senderEmail>pushkarpathak21@gmail.com</senderEmail><timestampReceived>2017-04-01 22:51:13-0400</timestampReceived><subject>[tor-dev] [GSoC] Proposal for Ahmia - Hidden Service Search</subject><body>

[Attachment #2 (multipart/alternative)]


Hello everyone

I am a third year undergrad at International Institute of Information
Technology, Hyderabad. I have been working on Ahmia for some time now.
There are several fixes and upgrades required in the codebase. Below is the
list of tasks I plan to complete under GSoC17:

   - Automate Blacklisting of child abuse websites
   - Add Hidden Services page
   - Data visualization under statistics page. Examples include i) Linking
   structure between sites and keyword based labeling for onions in the graph.
   ii) Popularity of domains according to backlinks and search clicks
   - Replace Polipo with TorSocks5 for ahmia-crawler
   - Upgrade support from Elastic 2.4.0 to 5.X.X
   - Add advanced search options like operators for multiple search terms
   in a single query
   - Complete Documentation on ahmia.fi and Github page

Details of the above tasks along with timeline and other relevant details
are included in the proposal attached.

You are welcome to comment on it and give your suggestions.

Cheers,
Pushkar Pathak
​​​
 Proposal for Tor Project: Ahmia - Hidden Servic...
&lt;https://docs.google.com/document/d/1h6ZbUMzKCkvyXQ9UTOy8nKVjV4fgps9UxTkBQCUZ4ao/edit?usp=drive_web&gt;
​

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;font color="#000000"&gt;Hello everyone&lt;/font&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;I am a third year \
undergrad at International Institute of Information Technology, Hyderabad. I have \
been working on Ahmia for some time now. There are several fixes and upgrades \
required in the codebase. Below is the list of tasks I plan to complete under \
GSoC17:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;font face="arial, helvetica, sans-serif" \
color="#000000"&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;Automate Blacklisting of \
child abuse websites&lt;/span&gt;&lt;br&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="arial, helvetica, \
sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;Add Hidden Services \
page&lt;/span&gt;&lt;br&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="arial, helvetica, sans-serif" \
color="#000000"&gt;&lt;span \
style="background-color:transparent;font-variant-ligatures:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"&gt;Data \
visualization under statistics page. Examples include  &lt;/span&gt;&lt;span \
style="background-color:transparent;font-variant-ligatures:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"&gt;i) \
&lt;/span&gt;&lt;span style="white-space:pre-wrap;background-color:transparent"&gt;Linking \
structure between sites and keyword based labeling for onions in the graph. ii) \
&lt;/span&gt;&lt;span style="white-space:pre-wrap;background-color:transparent"&gt;Popularity of \
domains according to backlinks and search clicks&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font \
face="arial, helvetica, sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;Replace Polipo with \
TorSocks5 for ahmia-crawler&lt;/span&gt;&lt;br&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="arial, helvetica, \
sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;Upgrade support from \
Elastic 2.4.0 to 5.X.X&lt;/span&gt;&lt;br&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;&lt;font face="arial, \
helvetica, sans-serif" color="#000000"&gt;Add advanced search options like operators for \
multiple search terms in a single query&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="white-space:pre-wrap;background-color:transparent"&gt;&lt;font face="arial, \
helvetica, sans-serif" color="#000000"&gt;Complete Documentation on &lt;a \
href="http://ahmia.fi" target="_blank"&gt;ahmia.fi&lt;/a&gt; and Github \
page&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;font face="arial, helvetica, sans-serif" \
color="#000000"&gt;&lt;span style="white-space:pre-wrap"&gt;Details of the above tasks along \
with timeline and other relevant details are included in the proposal attached.  \
&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="arial, helvetica, sans-serif" \
color="#000000"&gt;&lt;span style="white-space:pre-wrap"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="arial, helvetica, sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap"&gt;You are welcome to comment on it and give your \
suggestions.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="arial, helvetica, sans-serif" \
color="#000000"&gt;&lt;span style="white-space:pre-wrap"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="arial, helvetica, sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap"&gt;Cheers,&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="white-space:pre-wrap;color:rgb(0,0,0);font-family:arial,helvetica,sans-serif"&gt;Pushkar \
Pathak&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="white-space:pre-wrap;color:rgb(0,0,0);font-family:arial,helvetica,sans-serif"&gt;&lt;/span&gt;&lt;font \
face="arial, helvetica, sans-serif" color="#000000"&gt;&lt;span \
style="white-space:pre-wrap"&gt;​​​&lt;br&gt;&lt;div class="gmail_chip gmail_drive_chip" \
style="width:396px;height:18px;max-height:18px;background-color:#f5f5f5;padding:5px;co \
lor:#222;font-family:arial;font-style:normal;font-weight:bold;font-size:13px;border:1px \
solid #ddd;line-height:1"&gt;&lt;a \
href="https://docs.google.com/document/d/1h6ZbUMzKCkvyXQ9UTOy8nKVjV4fgps9UxTkBQCUZ4ao/edit?usp=drive_web" \
target="_blank" style="display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;text-decoration:none;padding:1px \
0px;border:none;width:100%"&gt;&lt;img style="vertical-align: bottom; border: none;" \
src="https://drive-thirdparty.googleusercontent.com/16/type/application/vnd.google-apps.document"&gt; \
&lt;span dir="ltr" style="color:#15c;text-decoration:none;vertical-align:bottom"&gt;Proposal \
for Tor Project: Ahmia - Hidden \
Servic...&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;​&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;span \
id="m_8109849563711721917gmail-docs-internal-guid-8d51bca9-2ae1-54a3-477d-3c5cc8c3056e"&gt;&lt;p \
style="font-weight:700;font-family:arial,helvetica,sans-serif;line-height:1.56;margin-top:10pt;margin-bottom:0pt"&gt;&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402054454</emailId><senderName>Ivan Tham</senderName><senderEmail>pickfire@riseup.net</senderEmail><timestampReceived>2017-04-02 05:44:54-0400</timestampReceived><subject>[tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

I have created a proposal at http://dl.pickfire.tk/tor/proposal.md
Feel free to review it and give comments, python script still WIP.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402135103</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-04-02 13:51:03-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

&gt; We should also consider how this proposal would interact with other
&gt; proposed secure aggregation solutions, like Privcount [1] and/or some
&gt; other kind of PrivEx [2].  I'd like to hear what the designers of
&gt; those ideas think of this one.

As you know, PrivCount is a secure aggregation system. In particular, it allows you \
to count some value (i.e. compute some sum) across relays and over time such that the \
only output anyone learns is a noisy (and differentially-private) version of the sum.

As you also know, PCSA allows one to locally store a count of unique items in a way \
that provides some privacy if the machine is compromised. PrivCount isn't designed to \
support such counting of unique items, but it does provide such "forward privacy" \
(actually it provides perfect, information-theoretic privacy).

So, it seems that PCSA and PrivCount do similar but different counting and provide \
similar but different kinds of forward privacy. These ideas could be combined to \
provide some combination of their functionality and privacy features. To do so, have \
each relay maintain an FM sketch as a sequence of PrivCount counters (recall that \
these counters are blinded and thus appear random at any given time). Represent a 0 \
in each counter by storing (in a blinded way) 0, and represent 1 by storing (in a \
blinded way) a random value (with b bits in the counter it is non-zero with \
probability 1-2^(-b)). Given a new item, a relay turns bits from 0 to 1 in the sketch \
by adding a random value. The PrivCount aggregation protocol would reveal each bit of \
the FM sketch aggregated across all relays, which would thus reveal the PCSA count of \
unique IPs seen across all relays. Note that this output would not be differentially \
private - it isn't obvious how FM sketches can support differential privacy with any \
accuracy as some single user does cause all bits to flip to one. The output would \
provide whatever privacy FM sketches provide, and this idea would support the \
privacy-enhancement of flipping random bits proposed by Tschorsch and Scheuermann.

This scheme would provide better forward privacy than PCSA alone, because PrivCount \
would secure the counters perfectly during the measurement period. It would provide \
better unique counting than per-relay PCSA because it would be counting uniquely \
across all relays. Again, it wouldn't provide the differential privacy guarantee of \
PrivCount, but it would provide whatever privacy is provided by PCSA.

This is an idea I had considered a while ago but gave up on because of the lack of a \
differential-privacy guarantee for the output and my general lack of confidence in \
the privacy provided by PCSA. However, it may well be an improvement on what Tor is \
doing currently :-)

Best,
Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402161249</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-04-02 16:12:49-0400</timestampReceived><subject>Re: [tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

Oops, clicked the SEND button accidentally.
Sorry! You can ignore it.


&gt; Ah! That reminds me that OP(of this thread) should also aim to fix #8786
&gt; along with that could enable such a counting technique for Pluggable
&gt; transports.
&gt; 
&gt; Now coming to the main point,
&gt; 
&gt;&gt; In addition, each user doesn't necessarily correspond to
&gt;&gt; a different IP because of NAT, and so counting connections may actually be
&gt;&gt; more accurate.
&gt; I agree,

-- 
Jaskaran Veer Singh (jvsg)
jvsg1303 at gmail dot com
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402200034</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-04-02 20:00:34-0400</timestampReceived><subject>[tor-dev] Mailing List Etiquette Reminder</subject><body>

New members are very welcome and valued whether
through gradual accretion or project influx such as GSOC's.
In order to ensure messaging efficiency and clarity...

- Reply *below* what others have written. Do not "top post".
- Trim out and *delete* irrelavant portions of what others
have written, so to clearly include only that part of which
you are replying to. Do not "bulk quote" chains of replies.
- *Interleave* your replies within the physical lines others
have written so that what specific part you are replying
to is clear. "Reply in context."
- Use "text/plain UTF-8" encoding, disable all "HTML" when sending.
- Wrap message lines at roughly 68-72 characters long.
- Be aware of how changing subject line, and reply-to
and references headers can break threading, and use it
carefully.

For more info you can search "mailing list etiquette"
on any search engine.

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403121930</emailId><senderName>ng0</senderName><senderEmail>contact.ng0@cryptolab.net</senderEmail><timestampReceived>2017-04-03 12:19:30-0400</timestampReceived><subject>Re: [tor-dev] Tor in a safer language: Network team update from Amsterdam</subject><body>

zaki@manian.org transcribed 12K bytes:
&gt; Rust seems like the best available choice for Tor in a safer language.
&gt; 
&gt; Rust has several issues with securely obtaining a Rust toolchain that the
&gt; Tor community should be attentive to.

Interesting development, but logical. Leaving the obvious issues
(bootstrap, etc) aside:

Will you stick to stable features? From a package maintainers position
it is generally unacceptable (and hard) to follow (and maintain)
nightly/unstable releases of a programming language. Rust stable has
proven features which are expected to stick around for a reliable long
time (at least that is my understanding).

&gt; Rust is a self hosted compiler. Building Rust requires obtaining binaries
&gt; for a recent Rust compiler. The Rust toolchain is vulnerable to a "trusting
&gt; trust" attack. Manish made a prototype and discussed future mitigations.[0]
&gt; 
&gt; The Rust toolchain is built by an automated continuous integration system
&gt; and distributed without human verification or intervention. Rust's build
&gt; artifacts distributed by the RustUp tool are only authenticated by TLS
&gt; certificates. RustUp Github issue 241 discusses a mitigation to address
&gt; some of these concerns but development seems to be stalled.[1]
&gt; 
&gt; 
&gt; [0]
&gt; https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/
&gt; [1] https://github.com/rust-lang-nursery/rustup.rs/issues/241
&gt; 
&gt; 
&gt; 
&gt; On Fri, Mar 31, 2017 at 2:23 PM Sebastian Hahn &lt;sebastian@torproject.org&gt;
&gt; wrote:
&gt; 
&gt; &gt; Hi there tor-dev,
&gt; &gt;
&gt; &gt; as an update to those who didn't have the chance to meet with us in
&gt; &gt; Amsterdam or those who haven't followed the efforts to rely on C less,
&gt; &gt; here's what happened at the "let's not fight about Go versus Rust, but
&gt; &gt; talk about how to migrate Tor to a safer language" session and what
&gt; &gt; happened after.
&gt; &gt;
&gt; &gt; Notes from session:
&gt; &gt;
&gt; &gt; We didn't fight about Rust or Go or modern C++. Instead, we focused on
&gt; &gt; identifying goals for migrating Tor to a memory-safe language, and how
&gt; &gt; to get there. With that frame of reference, Rust emerged as a extremely
&gt; &gt; strong candidate for the incremental improvement style that we
&gt; &gt; considered necessary. We were strongly advised to not use cgo, by people
&gt; &gt; who have used it extensively.
&gt; &gt;
&gt; &gt; As there are clearly a lot of unknowns with this endeavor, and a lot
&gt; &gt; that we will learn/come up against along the way, we feel that Rust is a
&gt; &gt; compelling option to start with,  with the caveat that we will first
&gt; &gt; experiment, learn from the experience, and then build on what we learn.
&gt; &gt;
&gt; &gt; You can also check out the session notes on the wiki (submitted, but not
&gt; &gt; posted yet).[1]
&gt; &gt;
&gt; &gt; The real fun part started after the session. We got together to actually
&gt; &gt; make a plan for an experiment and to give Rust a serious chance. We
&gt; &gt; quickly got a few trivial things working like statically linking Rust
&gt; &gt; into Tor, integrating with the build system to call out to cargo for the
&gt; &gt; Rust build, and using Tor's allocator from Rust.
&gt; &gt;
&gt; &gt; We're planning to write up a blog post summarizing our experiences so
&gt; &gt; far while hopefully poking the Rust developers to prioritize the missing
&gt; &gt; features so we can stop using nightly Rust soon (~months, instead of
&gt; &gt; years).
&gt; &gt;
&gt; &gt; We want to have a patch merged into tor soon so you can all play with
&gt; &gt; your dev setup to help identify any challenges. We want to stress that
&gt; &gt; this is an optional experiment for now, we would love feedback but
&gt; &gt; nobody is paid to work on this and nobody is expected to spend more
&gt; &gt; time than they have sitting around.
&gt; &gt;
&gt; &gt; We have committed to reviewing any patch that includes any Rust code to
&gt; &gt; provide feedback, get experience to develop a style, and actually make
&gt; &gt; use of this experiment. This means we're not ready to take on big
&gt; &gt; patches that add lots of tricky stuff quite now, we want to take it slow
&gt; &gt; and learn from this.
&gt; &gt;
&gt; &gt; We would like to do a session at the next dev meeting to give updates on
&gt; &gt; this effort, but in the meantime, if team members would like to start
&gt; &gt; learning Rust and helping us identify/implement small and well-isolated
&gt; &gt; areas to begin migration, or new pieces of functionality that we can
&gt; &gt; build  immediately in Rust, that would be really great.
&gt; &gt;
&gt; &gt; So, for a TLDR:
&gt; &gt;
&gt; &gt; What has already been done:
&gt; &gt; - Rust in Tor build
&gt; &gt; - Putting together environment setup instructions and a (very small)
&gt; &gt;  initial draft for coding standards
&gt; &gt; - Initial work to identify good candidates for migration (not tightly
&gt; &gt;  interdependent)
&gt; &gt;
&gt; &gt; What we think are next steps:
&gt; &gt; - Define conventions for the API boundary between Rust and C
&gt; &gt; - Add a non-trivial Rust API and deploy with a flag to optionally use
&gt; &gt;  (to test support with a safe fallback)
&gt; &gt; - Learn from similar projects
&gt; &gt; - Add automated tooling for Rust, such as linting and testing
&gt; &gt;
&gt; &gt;
&gt; &gt; Cheers
&gt; &gt; Alex, Chelsea, Sebastian
&gt; &gt;
&gt; &gt; [1]: Will be visible here
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403122216</emailId><senderName>Veer Kalantri</senderName><senderEmail>mads.531998@gmail.com</senderEmail><timestampReceived>2017-04-03 12:22:16-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Feedback Extension for Tor Browser</subject><body>

[Attachment #2 (multipart/alternative)]


Isn't there any difference in the draft and the first application we have
submitted...Plz answer soon as I've to submit mine before 2130 hrs
tonight...

Best,
Veer

On 02-Apr-2017 8:16 PM, "Jayati Dev" &lt;devjayati@outlook.com&gt; wrote:

&gt; Dear Mentor,
&gt;
&gt;
&gt; Please find my draft application here: https://docs.google.com/
&gt; document/d/1AItxT3k-K1tSHa0OJDl3AC4BL_xYoCUWv6IHDnb4if8/edit?usp=sharing.
&gt; I have also uploaded it through the GSoC 2017 Official Website.
&gt;
&gt;
&gt; Thank you for your time and effort,
&gt;
&gt;
&gt; Sincerely,
&gt;
&gt; Jayati Dev
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Isn't there any difference in the draft and the first application \
we have submitted...Plz answer soon as I've to submit mine before 2130 hrs \
tonight...&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Best,&lt;div \
dir="auto"&gt;Veer&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On 02-Apr-2017 8:16 PM, "Jayati Dev" &lt;&lt;a \
href="mailto:devjayati@outlook.com"&gt;devjayati@outlook.com&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;




&lt;div dir="ltr"&gt;
&lt;div id="m_-5324614138310386887divtagdefaultwrapper" \
style="font-size:12pt;color:#000000;font-family:Calibri,Arial,Helvetica,sans-serif" \
dir="ltr"&gt; &lt;p&gt;Dear Mentor,  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Please find my draft application here:  &lt;a \
href="https://docs.google.com/document/d/1AItxT3k-K1tSHa0OJDl3AC4BL_xYoCUWv6IHDnb4if8/edit?usp=sharing" \
class="m_-5324614138310386887OWAAutoLink" id="m_-5324614138310386887LPlnk907123" \
target="_blank"&gt;https://docs.google.com/&lt;wbr&gt;document/d/1AItxT3k-&lt;wbr&gt;K1tSHa0OJDl3AC4BL_&lt;wbr&gt;xYoCUWv6IHDnb4if8/edit?usp=&lt;wbr&gt;sharing&lt;/a&gt;.
  I have also uploaded it through the GSoC 2017  Official Website.  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Thank you for your time and effort,&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;Jayati Dev&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403124707</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-04-03 12:47:07-0400</timestampReceived><subject>Re: [tor-dev] GSoC: Questions on allowing for more DNS request types</subject><body>

On Sun, Apr 2, 2017 at 10:20 AM, Lucille Newman &lt;newmanlucy@uchicago.edu&gt; wrote:
&gt; Hello,
&gt;
&gt; I was interested in the project for allowing any kind of DNS support in Tor
&gt; for GSoC, or, since it is late for that deadline, then also otherwise. After
&gt; reading proposal 219, I have some questions.
&gt;
&gt; 1. A comment by NM suggests that we should specify exact behavior when
&gt; generating DNS packets (line 56). Should the DNS packets not be generated as
&gt; according to RFC 1035? Are there other things that need to be taken into
&gt; consideration here?

HI!

The issue is that RFC 1035 and other DNS RFCs allow a certain amount
of latitude in how DNS requests are encoded specifically.  As one
simple example: name compression is recommended but not required. I
believe there are other examples too.

On the request side, that's bad for anonymity: we'd rather have all
clients encoding their requests in the same way, so that exits can't
tell them apart any more than necessary.

On the response side, I think it's okay to have different exits encode
responses differently.

&gt; 2. Another comment (line 63) asks whether 496 bytes is enough for the DNS
&gt; packet of a DNS_BEGIN cell. Since QNAME can be arbitrarily long, I suppose
&gt; it is possible that 496 is not enough? If this seems like a reasonable
&gt; concern, then maybe we could do a similar thing to the DNS_RESPONSE cells
&gt; with allowing multiple cells for a single question and having a flag to
&gt; indicate the last cell?

That would probably be fine.

&gt; 3. What would cause a DNS_BEGIN request or response to be aborted (line
&gt; 105)?

It might make sense to abort a request if the client realizes that the
application no longer wants it -- for example, if it's happening in
response to a TCP DNS request (not currently supported on the client
side) and the TCP connection is closed.

I don't know if it's absolutely necessary to support that.

&gt; 4. How do we differentiate special names like .onion, .exit, .noconnect
&gt; (line 145)?

I think we could go with the list in addr-spec.txt in the torspec repository.

&gt; 5. The comments at (lines 135-143) indicate that it might not be necessary
&gt; or practical to refuse requests that resolve to local addresses. This means
&gt; that such queries will not be sent, but an error will be returned before
&gt; sending to a DNS server?

I think that's the intended behavior, if it makes good security sense.


Peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402015452</emailId><senderName>"zaki () manian ! org"</senderName><senderEmail>zaki@manian.org</senderEmail><timestampReceived>2017-04-02 01:54:52-0400</timestampReceived><subject>Re: [tor-dev] Tor in a safer language: Network team update from Amsterdam</subject><body>

[Attachment #2 (multipart/alternative)]


Rust seems like the best available choice for Tor in a safer language.

Rust has several issues with securely obtaining a Rust toolchain that the
Tor community should be attentive to.

Rust is a self hosted compiler. Building Rust requires obtaining binaries
for a recent Rust compiler. The Rust toolchain is vulnerable to a "trusting
trust" attack. Manish made a prototype and discussed future mitigations.[0]

The Rust toolchain is built by an automated continuous integration system
and distributed without human verification or intervention. Rust's build
artifacts distributed by the RustUp tool are only authenticated by TLS
certificates. RustUp Github issue 241 discusses a mitigation to address
some of these concerns but development seems to be stalled.[1]


[0]
https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/
[1] https://github.com/rust-lang-nursery/rustup.rs/issues/241



On Fri, Mar 31, 2017 at 2:23 PM Sebastian Hahn &lt;sebastian@torproject.org&gt;
wrote:

&gt; Hi there tor-dev,
&gt;
&gt; as an update to those who didn't have the chance to meet with us in
&gt; Amsterdam or those who haven't followed the efforts to rely on C less,
&gt; here's what happened at the "let's not fight about Go versus Rust, but
&gt; talk about how to migrate Tor to a safer language" session and what
&gt; happened after.
&gt;
&gt; Notes from session:
&gt;
&gt; We didn't fight about Rust or Go or modern C++. Instead, we focused on
&gt; identifying goals for migrating Tor to a memory-safe language, and how
&gt; to get there. With that frame of reference, Rust emerged as a extremely
&gt; strong candidate for the incremental improvement style that we
&gt; considered necessary. We were strongly advised to not use cgo, by people
&gt; who have used it extensively.
&gt;
&gt; As there are clearly a lot of unknowns with this endeavor, and a lot
&gt; that we will learn/come up against along the way, we feel that Rust is a
&gt; compelling option to start with,  with the caveat that we will first
&gt; experiment, learn from the experience, and then build on what we learn.
&gt;
&gt; You can also check out the session notes on the wiki (submitted, but not
&gt; posted yet).[1]
&gt;
&gt; The real fun part started after the session. We got together to actually
&gt; make a plan for an experiment and to give Rust a serious chance. We
&gt; quickly got a few trivial things working like statically linking Rust
&gt; into Tor, integrating with the build system to call out to cargo for the
&gt; Rust build, and using Tor's allocator from Rust.
&gt;
&gt; We're planning to write up a blog post summarizing our experiences so
&gt; far while hopefully poking the Rust developers to prioritize the missing
&gt; features so we can stop using nightly Rust soon (~months, instead of
&gt; years).
&gt;
&gt; We want to have a patch merged into tor soon so you can all play with
&gt; your dev setup to help identify any challenges. We want to stress that
&gt; this is an optional experiment for now, we would love feedback but
&gt; nobody is paid to work on this and nobody is expected to spend more
&gt; time than they have sitting around.
&gt;
&gt; We have committed to reviewing any patch that includes any Rust code to
&gt; provide feedback, get experience to develop a style, and actually make
&gt; use of this experiment. This means we're not ready to take on big
&gt; patches that add lots of tricky stuff quite now, we want to take it slow
&gt; and learn from this.
&gt;
&gt; We would like to do a session at the next dev meeting to give updates on
&gt; this effort, but in the meantime, if team members would like to start
&gt; learning Rust and helping us identify/implement small and well-isolated
&gt; areas to begin migration, or new pieces of functionality that we can
&gt; build  immediately in Rust, that would be really great.
&gt;
&gt; So, for a TLDR:
&gt;
&gt; What has already been done:
&gt; - Rust in Tor build
&gt; - Putting together environment setup instructions and a (very small)
&gt;  initial draft for coding standards
&gt; - Initial work to identify good candidates for migration (not tightly
&gt;  interdependent)
&gt;
&gt; What we think are next steps:
&gt; - Define conventions for the API boundary between Rust and C
&gt; - Add a non-trivial Rust API and deploy with a flag to optionally use
&gt;  (to test support with a safe fallback)
&gt; - Learn from similar projects
&gt; - Add automated tooling for Rust, such as linting and testing
&gt;
&gt;
&gt; Cheers
&gt; Alex, Chelsea, Sebastian
&gt;
&gt; [1]: Will be visible here
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Rust seems like the best available choice for Tor in a safer \
language.&lt;br&gt;&lt;br&gt;Rust has several issues with securely obtaining a Rust toolchain \
that the Tor community should be attentive to.&lt;br&gt;&lt;br&gt;Rust is a self hosted compiler. \
Building Rust requires obtaining binaries for a recent Rust compiler. The Rust \
toolchain is vulnerable to a "trusting trust" attack. Manish made a \
prototype and discussed future mitigations.[0]&lt;br&gt;&lt;br&gt;The Rust toolchain is built by \
an automated continuous integration system and distributed without human verification \
or intervention. Rust's build artifacts distributed by the RustUp tool are only \
authenticated by TLS certificates. RustUp Github issue 241 discusses a mitigation to \
address some of these concerns but development seems to be stalled.[1]&lt;br&gt;&lt;br&gt;&lt;br&gt;[0] \
&lt;a href="https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/"&gt; \
https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/&lt;/a&gt;&lt;br&gt;[1] \
&lt;a href="https://github.com/rust-lang-nursery/rustup.rs/issues/241"&gt;https://github.com/rust-lang-nursery/rustup.rs/issues/241&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Fri, Mar 31, 2017 at 2:23 PM Sebastian Hahn \
&lt;&lt;a href="mailto:sebastian@torproject.org"&gt;sebastian@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi there tor-dev,&lt;br \
class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
as an update to those who didn't have the chance to meet with us in&lt;br \
class="gmail_msg"&gt; Amsterdam or those who haven't followed the efforts to rely on \
C less,&lt;br class="gmail_msg"&gt; here's what happened at the "let's not \
fight about Go versus Rust, but&lt;br class="gmail_msg"&gt; talk about how to migrate Tor \
to a safer language" session and what&lt;br class="gmail_msg"&gt; happened after.&lt;br \
class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
Notes from session:&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
We didn't fight about Rust or Go or modern C++. Instead, we focused on&lt;br \
class="gmail_msg"&gt; identifying goals for migrating Tor to a memory-safe language, and \
how&lt;br class="gmail_msg"&gt; to get there. With that frame of reference, Rust emerged as \
a extremely&lt;br class="gmail_msg"&gt; strong candidate for the incremental improvement \
style that we&lt;br class="gmail_msg"&gt; considered necessary. We were strongly advised to \
not use cgo, by people&lt;br class="gmail_msg"&gt; who have used it extensively.&lt;br \
class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
As there are clearly a lot of unknowns with this endeavor, and a lot&lt;br \
class="gmail_msg"&gt; that we will learn/come up against along the way, we feel that \
Rust is a&lt;br class="gmail_msg"&gt; compelling option to start with,   with the caveat \
that we will first&lt;br class="gmail_msg"&gt; experiment, learn from the experience, and \
then build on what we learn.&lt;br class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
You can also check out the session notes on the wiki (submitted, but not&lt;br \
class="gmail_msg"&gt; posted yet).[1]&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
The real fun part started after the session. We got together to actually&lt;br \
class="gmail_msg"&gt; make a plan for an experiment and to give Rust a serious chance. \
We&lt;br class="gmail_msg"&gt; quickly got a few trivial things working like statically \
linking Rust&lt;br class="gmail_msg"&gt; into Tor, integrating with the build system to \
call out to cargo for the&lt;br class="gmail_msg"&gt; Rust build, and using Tor's \
allocator from Rust.&lt;br class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
We're planning to write up a blog post summarizing our experiences so&lt;br \
class="gmail_msg"&gt; far while hopefully poking the Rust developers to prioritize the \
missing&lt;br class="gmail_msg"&gt; features so we can stop using nightly Rust soon \
(~months, instead of&lt;br class="gmail_msg"&gt; years).&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
We want to have a patch merged into tor soon so you can all play with&lt;br \
class="gmail_msg"&gt; your dev setup to help identify any challenges. We want to stress \
that&lt;br class="gmail_msg"&gt; this is an optional experiment for now, we would love \
feedback but&lt;br class="gmail_msg"&gt; nobody is paid to work on this and nobody is \
expected to spend more&lt;br class="gmail_msg"&gt; time than they have sitting around.&lt;br \
class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
We have committed to reviewing any patch that includes any Rust code to&lt;br \
class="gmail_msg"&gt; provide feedback, get experience to develop a style, and actually \
make&lt;br class="gmail_msg"&gt; use of this experiment. This means we're not ready to \
take on big&lt;br class="gmail_msg"&gt; patches that add lots of tricky stuff quite now, we \
want to take it slow&lt;br class="gmail_msg"&gt; and learn from this.&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
We would like to do a session at the next dev meeting to give updates on&lt;br \
class="gmail_msg"&gt; this effort, but in the meantime, if team members would like to \
start&lt;br class="gmail_msg"&gt; learning Rust and helping us identify/implement small and \
well-isolated&lt;br class="gmail_msg"&gt; areas to begin migration, or new pieces of \
functionality that we can&lt;br class="gmail_msg"&gt; build   immediately in Rust, that \
would be really great.&lt;br class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
So, for a TLDR:&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
What has already been done:&lt;br class="gmail_msg"&gt;
- Rust in Tor build&lt;br class="gmail_msg"&gt;
- Putting together environment setup instructions and a (very small)&lt;br \
class="gmail_msg"&gt;  initial draft for coding standards&lt;br class="gmail_msg"&gt;
- Initial work to identify good candidates for migration (not tightly&lt;br \
class="gmail_msg"&gt;  interdependent)&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
What we think are next steps:&lt;br class="gmail_msg"&gt;
- Define conventions for the API boundary between Rust and C&lt;br class="gmail_msg"&gt;
- Add a non-trivial Rust API and deploy with a flag to optionally use&lt;br \
class="gmail_msg"&gt;  (to test support with a safe fallback)&lt;br class="gmail_msg"&gt;
- Learn from similar projects&lt;br class="gmail_msg"&gt;
- Add automated tooling for Rust, such as linting and testing&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
Cheers&lt;br class="gmail_msg"&gt;
Alex, Chelsea, Sebastian&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
[1]: Will be visible here &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes" \
rel="noreferrer" class="gmail_msg" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; _______________________________________________&lt;br \
class="gmail_msg"&gt; tor-dev mailing list&lt;br class="gmail_msg"&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" class="gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class="gmail_msg"&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="gmail_msg" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402143206</emailId><senderName>Jayati Dev</senderName><senderEmail>devjayati@outlook.com</senderEmail><timestampReceived>2017-04-02 14:32:06-0400</timestampReceived><subject>[tor-dev] GSoC 2017 - Feedback Extension for Tor Browser</subject><body>

Dear Mentors,


I am a final year student in Electronics and Communication Engineering, and=
 I wanted to work on the 'Feedback Extension for Tor Browser' project as a =
part of GSoC 2017. I have been working on the design and implementation of =
the extension here https://github.com/devjayati/TestExtension (which also s=
erves as a qualifcation task). I have also made a draft proposal and submit=
ted it for review.


If there isn't anyone already assigned to the project, it would be wonderfu=
l if you could please consider my proposal and also comment on the draft.


Sincerely,

Jayati Dev

[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;style type="text/css" style="display:none;"&gt;&lt;!-- P {margin-top:0;margin-bottom:0;} \
--&gt;&lt;/style&gt; &lt;/head&gt;
&lt;body dir="ltr"&gt;
&lt;div id="divtagdefaultwrapper" dir="ltr" style="font-size:12pt; color:#000000; \
font-family:Calibri,Arial,Helvetica,sans-serif"&gt; &lt;p&gt;Dear Mentors,  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;I am a final year student in Electronics and Communication Engineering, and I \
wanted to work on the 'Feedback Extension for Tor Browser' project as a part of GSoC \
2017. I have been working on the design and implementation of the extension \
here &lt;a href="https://github.com/devjayati/TestExtension" class="OWAAutoLink" \
id="LPlnk374569" previewremoved="true"&gt;https://github.com/devjayati/TestExtension&lt;/a&gt; (which
  also serves as a qualifcation task). I have also made a draft proposal and \
submitted it for review. &lt;/p&gt; &lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;If there isn't anyone already assigned to the project, it would be wonderful if \
you could please consider my proposal and also comment on the draft. &lt;/p&gt; \
&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;Jayati Dev&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402142003</emailId><senderName>Lucille Newman</senderName><senderEmail>newmanlucy@uchicago.edu</senderEmail><timestampReceived>2017-04-02 14:20:03-0400</timestampReceived><subject>[tor-dev] GSoC: Questions on allowing for more DNS request types</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I was interested in the project for allowing any kind of DNS support in Tor
for GSoC, or, since it is late for that deadline, then also otherwise.
After reading proposal 219, I have some questions.

1. A comment by NM suggests that we should specify exact behavior when
generating DNS packets (line 56). Should the DNS packets not be generated
as according to RFC 1035? Are there other things that need to be taken into
consideration here?

2. Another comment (line 63) asks whether 496 bytes is enough for the DNS
packet of a DNS_BEGIN cell. Since QNAME can be arbitrarily long, I suppose
it is possible that 496 is not enough? If this seems like a reasonable
concern, then maybe we could do a similar thing to the DNS_RESPONSE cells
with allowing multiple cells for a single question and having a flag to
indicate the last cell?

3. What would cause a DNS_BEGIN request or response to be aborted (line
105)?

4. How do we differentiate special names like .onion, .exit, .noconnect
(line 145)?

5. The comments at (lines 135-143) indicate that it might not be necessary
or practical to refuse requests that resolve to local addresses. This means
that such queries will not be sent, but an error will be returned before
sending to a DNS server?

Thanks so much.
Best,
Lucy

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;font face="monospace, monospace"&gt;Hello,&lt;/font&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;I \
was interested in the project for allowing any kind of DNS support in Tor for GSoC, \
or, since it is late for that deadline, then also otherwise. After reading proposal \
219, I have some questions.&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, \
monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;1. A comment by NM \
suggests that we should specify exact behavior when generating DNS packets (line 56). \
Should the DNS packets not be generated as according to RFC 1035? Are there other \
things that need to be taken into consideration here?&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, \
monospace"&gt;2. Another comment (line 63) asks whether 496 bytes is enough for the DNS \
packet of a DNS_BEGIN cell. Since QNAME can be arbitrarily long, I suppose it is \
possible that 496 is not enough? If this seems like a reasonable concern, then maybe \
we could do a similar thing to the DNS_RESPONSE cells with allowing multiple cells \
for a single question and having a flag to indicate the last \
cell?&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;3. What would cause a DNS_BEGIN request or response to be \
aborted (line 105)?&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, \
monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;4. How do we \
differentiate special names like .onion, .exit, .noconnect (line 145)?  \
&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font \
face="monospace, monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font face="monospace, monospace"&gt;5. \
The comments at (lines 135-143) indicate that it might not be necessary or practical \
to refuse requests that resolve to local addresses. This means that such queries will \
not be sent, but an error will be returned before sending to a DNS \
server?&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font face="monospace, \
monospace"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font face="monospace, \
monospace"&gt;Thanks so much.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font face="monospace, monospace"&gt; \
Best,&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(0,0,0);white-space:pre-wrap"&gt;&lt;font face="monospace, \
monospace"&gt;Lucy&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402144542</emailId><senderName>Jayati Dev</senderName><senderEmail>devjayati@outlook.com</senderEmail><timestampReceived>2017-04-02 14:45:42-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Feedback Extension for Tor Browser</subject><body>

Dear Mentor,


Please find my draft application here: \
https://docs.google.com/document/d/1AItxT3k-K1tSHa0OJDl3AC4BL_xYoCUWv6IHDnb4if8/edit?usp=sharing. \
I have also uploaded it through the GSoC 2017 Official Website.


Thank you for your time and effort,


Sincerely,

Jayati Dev


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;style type="text/css" style="display:none;"&gt;&lt;!-- P {margin-top:0;margin-bottom:0;} \
--&gt;&lt;/style&gt; &lt;/head&gt;
&lt;body dir="ltr"&gt;
&lt;div id="divtagdefaultwrapper" \
style="font-size:12pt;color:#000000;font-family:Calibri,Arial,Helvetica,sans-serif;" \
dir="ltr"&gt; &lt;p&gt;Dear Mentor, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Please find my draft application here: &lt;a \
href="https://docs.google.com/document/d/1AItxT3k-K1tSHa0OJDl3AC4BL_xYoCUWv6IHDnb4if8/edit?usp=sharing" \
class="OWAAutoLink" id="LPlnk907123" \
previewremoved="true"&gt;https://docs.google.com/document/d/1AItxT3k-K1tSHa0OJDl3AC4BL_xYoCUWv6IHDnb4if8/edit?usp=sharing&lt;/a&gt;.
  I have also uploaded it through the GSoC 2017 Official Website. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Thank you for your time and effort,&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;Jayati Dev&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170320140149</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-20 14:01:49-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 19 Mar 2017, at 19:02, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; 
&gt; Hi!
&gt; I'm interesred with project "Crash Reporter for Tor Browser".
&gt; I'm working on that idea, but I need some specifications about how it should work, \
&gt; what kind of crash information we have to get and what technologies I can use on \
&gt;                 server side (for collect information).
&gt; ...

Hi Nur-Magomed,

I've cc'd the mentors for the Crash Reporter project on this email.

Please be aware that we have a meeting this week and next week, so some
of us are busy travelling and working together in person.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYz+DNAAoJEHQNnjkCUnKitKUQAI+GfJgPXfDV0bZm7X14Ht6i
G94yhAiP44FKfW2Y5iTg/KnnfE029ObpxS0JzmAqRbUyziX21DIQKeK1jYZFU45j
uNlnYgln0Vl6FXIp2q21CNEo+uAeX1IXH4Z9lzYa5vPC5zEY+gZay0Da/jkJMzIO
ftA6WgtdJv3WzMr8lf326qdP3JdKCRnXs+C6OEPHYHI27pqNzP+0SuhAVV0pwjba
PR93LtaVn5M1/AvlN49egy3JwaCmSpdQW9thwAdtbJxAstYwuEe4WWfPKK8PtvQK
JklCW/4V6EhPi3uQoli9ADifvMdQGKVYLIZ5t73DlugeSyPxmIo7qV3T99keJL1b
S+9+MKFwQaX2BkfCKh2OLdXtmvH+bm064n67ClEPAfSCbIljzE1Dn7e1l5q6uB3b
KZur4cYFGRwyxBDabBPDHMmEY4WXP7ojZ4/amHCAhZ9Ps8xk9KZuZ8wIlSB7Bxyr
gqg+RdtEseKbLcxSbt6tiaCHqCfWPzRnrgb5Awt90114gsbgmzh7lYKkpvNUpq7I
lWRnBxE5GPPaRJtWHA7SinNyzTYyols6Xjw47jy2BVi/VB+sPMRL4ZP8vduSa/Om
TpC2CdoowoV1ExrsghKv45Yhouxt3rEMKL2JjXeMmVbBnQv9yR/tUFchYFrJmSu4
Qd0HoxsEdcbvgyO6ooS2
=/uXq
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170320151806</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-03-20 15:18:06-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

Hi Nur-Magomed,

Great to have you interested in this!

So we would want to use the Crash Reporter that's built into Mozilla
Firefox (which is called Breakpad, and is adapted from Chromium).  At
a high level, I would break down the project into the following
sections:

1) Get the crash reporter built (at all) in our toolchain. We
currently disable it and I know there will be at least one or two
hurdles to overcome here as we've never tried to built this on
Linux-for-Windows.  If you wish you could focus on a single platform
for this at a time (e.g. Linux) so you can move onto the next step.

2) Audit the crash reporter data and see what it is that gets
reported, when, and how. We'd want to err on the side of caution about
what we report in a dump. So we'd need to enumerate each field that
gets reported, get some samples of the data, and review if we'd want
to include it or not. We'd also want to review what prefs govern crash
submissions, how crashes get stored (which I think is on-disk next to
Tor Browser), and when they get reported.

3) Change the way they get reported. We absolutely cannot have crashes
sitting around on disk next to Tor Browser for the next time the user
starts the browser - no matter how much data we strip out of them. So
we'll need to brainstorm how we might try submitting them immediately
upon crash instead of next startup.

4) Get a submission server running. Mozilla has a ton of tools to
analyze crashes (https://crash-stats.mozilla.org/home/product/Firefox
is one and https://github.com/mozilla/socorro is the general backend).
We should look at Socorro and probably adapt it for use by Tor rather
than building our own.

5) Circle back and get the crash reporter built reproducibly, and for
all platforms. I put this one last because it may be the case that
there are annoying time-sinks here, and I think by doing this last
you'll be able to make the most headway on things that will take the
most time - like enumerating, documenting, and evaluating the fields;
and fiddling with Socorro.


This is my take on it - Georg may have additional thoughts.

-tom

On 20 March 2017 at 09:01, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; 
&gt; &gt; On 19 Mar 2017, at 19:02, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Hi!
&gt; &gt; I'm interesred with project "Crash Reporter for Tor Browser".
&gt; &gt; I'm working on that idea, but I need some specifications about how it should \
&gt; &gt; work, what kind of crash information we have to get and what technologies I can \
&gt; &gt;                 use on server side (for collect information).
&gt; &gt; ...
&gt; 
&gt; Hi Nur-Magomed,
&gt; 
&gt; I've cc'd the mentors for the Crash Reporter project on this email.
&gt; 
&gt; Please be aware that we have a meeting this week and next week, so some
&gt; of us are busy travelling and working together in person.
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170322063026</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-22 06:30:26-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tom,


Thank you for the response!

I've started to dive in process, collecting information about BreakPad
and Socorro.
Also I created the blog for project - https://torcrashreporter.wordpress.com.
In few days I'll try to send draft of proposal.

Regards

Nur-Magomed

2017-03-20 18:18 GMT+03:00 Tom Ritter &lt;tom@ritter.vg&gt;:

&gt; Hi Nur-Magomed,
&gt;
&gt; Great to have you interested in this!
&gt;
&gt; So we would want to use the Crash Reporter that's built into Mozilla
&gt; Firefox (which is called Breakpad, and is adapted from Chromium).  At
&gt; a high level, I would break down the project into the following
&gt; sections:
&gt;
&gt; 1) Get the crash reporter built (at all) in our toolchain. We
&gt; currently disable it and I know there will be at least one or two
&gt; hurdles to overcome here as we've never tried to built this on
&gt; Linux-for-Windows.  If you wish you could focus on a single platform
&gt; for this at a time (e.g. Linux) so you can move onto the next step.
&gt;
&gt; 2) Audit the crash reporter data and see what it is that gets
&gt; reported, when, and how. We'd want to err on the side of caution about
&gt; what we report in a dump. So we'd need to enumerate each field that
&gt; gets reported, get some samples of the data, and review if we'd want
&gt; to include it or not. We'd also want to review what prefs govern crash
&gt; submissions, how crashes get stored (which I think is on-disk next to
&gt; Tor Browser), and when they get reported.
&gt;
&gt; 3) Change the way they get reported. We absolutely cannot have crashes
&gt; sitting around on disk next to Tor Browser for the next time the user
&gt; starts the browser - no matter how much data we strip out of them. So
&gt; we'll need to brainstorm how we might try submitting them immediately
&gt; upon crash instead of next startup.
&gt;
&gt; 4) Get a submission server running. Mozilla has a ton of tools to
&gt; analyze crashes (https://crash-stats.mozilla.org/home/product/Firefox
&gt; is one and https://github.com/mozilla/socorro is the general backend).
&gt; We should look at Socorro and probably adapt it for use by Tor rather
&gt; than building our own.
&gt;
&gt; 5) Circle back and get the crash reporter built reproducibly, and for
&gt; all platforms. I put this one last because it may be the case that
&gt; there are annoying time-sinks here, and I think by doing this last
&gt; you'll be able to make the most headway on things that will take the
&gt; most time - like enumerating, documenting, and evaluating the fields;
&gt; and fiddling with Socorro.
&gt;
&gt;
&gt; This is my take on it - Georg may have additional thoughts.
&gt;
&gt; -tom
&gt;
&gt; On 20 March 2017 at 09:01, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt;
&gt; &gt;&gt; On 19 Mar 2017, at 19:02, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt;&gt;
&gt; &gt;&gt; Hi!
&gt; &gt;&gt; I'm interesred with project "Crash Reporter for Tor Browser".
&gt; &gt;&gt; I'm working on that idea, but I need some specifications about how it
&gt; should work, what kind of crash information we have to get and what
&gt; technologies I can use on server side (for collect information).
&gt; &gt;&gt; ...
&gt; &gt;
&gt; &gt; Hi Nur-Magomed,
&gt; &gt;
&gt; &gt; I've cc'd the mentors for the Crash Reporter project on this email.
&gt; &gt;
&gt; &gt; Please be aware that we have a meeting this week and next week, so some
&gt; &gt; of us are busy travelling and working together in person.
&gt; &gt;
&gt; &gt; T
&gt; &gt;
&gt; &gt; --
&gt; &gt; Tim Wilson-Brown (teor)
&gt; &gt;
&gt; &gt; teor2345 at gmail dot com
&gt; &gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; &gt; ricochet:ekmygaiu4rzgsk6n
&gt; &gt; xmpp: teor at torproject dot org
&gt; &gt; ------------------------------------------------------------------------
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;

&lt;p class="MsoNormal"&gt;&lt;span lang="EN-US"&gt;Hi Tom,&lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span lang="EN-US"&gt;&lt;br&gt;Thank you
for the response!&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span lang="EN-US"&gt;I've
started to dive in process, collecting information about BreakPad and&lt;span&gt; \
                &lt;/span&gt;Socorro. Also I created the blog for project
- &lt;a href="https://torcrashreporter.wordpress.com"&gt;https://torcrashreporter.wordpress.com&lt;/a&gt;. \
In few days I'll try to send draft of proposal.&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class="MsoNormal"&gt;&lt;span lang="EN-US"&gt;Regards&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="MsoNormal"&gt;&lt;span \
lang="EN-US"&gt;Nur-Magomed&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-20 18:18 \
GMT+03:00 Tom Ritter &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:tom@ritter.vg" \
target="_blank"&gt;tom@ritter.vg&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi \
Nur-Magomed,&lt;br&gt; &lt;br&gt;
Great to have you interested in this!&lt;br&gt;
&lt;br&gt;
So we would want to use the Crash Reporter that's built into Mozilla&lt;br&gt;
Firefox (which is called Breakpad, and is adapted from Chromium).   At&lt;br&gt;
a high level, I would break down the project into the following&lt;br&gt;
sections:&lt;br&gt;
&lt;br&gt;
1) Get the crash reporter built (at all) in our toolchain. We&lt;br&gt;
currently disable it and I know there will be at least one or two&lt;br&gt;
hurdles to overcome here as we've never tried to built this on&lt;br&gt;
Linux-for-Windows.   If you wish you could focus on a single platform&lt;br&gt;
for this at a time (e.g. Linux) so you can move onto the next step.&lt;br&gt;
&lt;br&gt;
2) Audit the crash reporter data and see what it is that gets&lt;br&gt;
reported, when, and how. We'd want to err on the side of caution about&lt;br&gt;
what we report in a dump. So we'd need to enumerate each field that&lt;br&gt;
gets reported, get some samples of the data, and review if we'd want&lt;br&gt;
to include it or not. We'd also want to review what prefs govern crash&lt;br&gt;
submissions, how crashes get stored (which I think is on-disk next to&lt;br&gt;
Tor Browser), and when they get reported.&lt;br&gt;
&lt;br&gt;
3) Change the way they get reported. We absolutely cannot have crashes&lt;br&gt;
sitting around on disk next to Tor Browser for the next time the user&lt;br&gt;
starts the browser - no matter how much data we strip out of them. So&lt;br&gt;
we'll need to brainstorm how we might try submitting them immediately&lt;br&gt;
upon crash instead of next startup.&lt;br&gt;
&lt;br&gt;
4) Get a submission server running. Mozilla has a ton of tools to&lt;br&gt;
analyze crashes (&lt;a href="https://crash-stats.mozilla.org/home/product/Firefox" \
rel="noreferrer" target="_blank"&gt;https://crash-stats.mozilla.&lt;wbr&gt;org/home/product/Firefox&lt;/a&gt;&lt;br&gt;
 is one and &lt;a href="https://github.com/mozilla/socorro" rel="noreferrer" \
target="_blank"&gt;https://github.com/mozilla/&lt;wbr&gt;socorro&lt;/a&gt; is the general \
backend).&lt;br&gt; We should look at Socorro and probably adapt it for use by Tor \
rather&lt;br&gt; than building our own.&lt;br&gt;
&lt;br&gt;
5) Circle back and get the crash reporter built reproducibly, and for&lt;br&gt;
all platforms. I put this one last because it may be the case that&lt;br&gt;
there are annoying time-sinks here, and I think by doing this last&lt;br&gt;
you'll be able to make the most headway on things that will take the&lt;br&gt;
most time - like enumerating, documenting, and evaluating the fields;&lt;br&gt;
and fiddling with Socorro.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
This is my take on it - Georg may have additional thoughts.&lt;br&gt;
&lt;br&gt;
-tom&lt;br&gt;
&lt;div&gt;&lt;div class="h5"&gt;&lt;br&gt;
On 20 March 2017 at 09:01, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;&gt; On 19 Mar 2017, at 19:02, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&gt; Hi!&lt;br&gt;
&gt;&gt; I'm interesred with project "Crash Reporter for Tor \
Browser".&lt;br&gt; &gt;&gt; I'm working on that idea, but I need some \
specifications about how it should work, what kind of crash information we have to \
get and what technologies I can use on server side (for collect information).&lt;br&gt; \
&gt;&gt; ...&lt;br&gt; &gt;&lt;br&gt;
&gt; Hi Nur-Magomed,&lt;br&gt;
&gt;&lt;br&gt;
&gt; I've cc'd the mentors for the Crash Reporter project on this email.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Please be aware that we have a meeting this week and next week, so some&lt;br&gt;
&gt; of us are busy travelling and working together in person.&lt;br&gt;
&gt;&lt;br&gt;
&gt; T&lt;br&gt;
&gt;&lt;br&gt;
&gt; --&lt;br&gt;
&gt; Tim Wilson-Brown (teor)&lt;br&gt;
&gt;&lt;br&gt;
&gt; teor2345 at gmail dot com&lt;br&gt;
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
&gt; ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
&gt; xmpp: teor at torproject dot org&lt;br&gt;
&gt; ------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &gt;&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326152300</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-03-26 15:23:00-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Tom Ritter:
&gt; Hi Nur-Magomed,
&gt; 
&gt; Great to have you interested in this!
&gt; 
&gt; So we would want to use the Crash Reporter that's built into Mozilla
&gt; Firefox (which is called Breakpad, and is adapted from Chromium).  At
&gt; a high level, I would break down the project into the following
&gt; sections:

Those look all good to me. I just have one small addition/clarification
below.

&gt; 1) Get the crash reporter built (at all) in our toolchain. We
&gt; currently disable it and I know there will be at least one or two
&gt; hurdles to overcome here as we've never tried to built this on
&gt; Linux-for-Windows.  If you wish you could focus on a single platform
&gt; for this at a time (e.g. Linux) so you can move onto the next step.
&gt; 
&gt; 2) Audit the crash reporter data and see what it is that gets
&gt; reported, when, and how. We'd want to err on the side of caution about
&gt; what we report in a dump. So we'd need to enumerate each field that
&gt; gets reported, get some samples of the data, and review if we'd want
&gt; to include it or not. We'd also want to review what prefs govern crash
&gt; submissions, how crashes get stored (which I think is on-disk next to
&gt; Tor Browser), and when they get reported.
&gt; 
&gt; 3) Change the way they get reported. We absolutely cannot have crashes
&gt; sitting around on disk next to Tor Browser for the next time the user
&gt; starts the browser - no matter how much data we strip out of them. So
&gt; we'll need to brainstorm how we might try submitting them immediately
&gt; upon crash instead of next startup.

Even though it seems to me the critical UX part is implicit in the
section above, I thought it might be better to point it out explicitly
as well:

We should have a good user interface ready giving the user at least an
explanation on what is going on and a way to check what is about to be sent.

Georg

&gt; 4) Get a submission server running. Mozilla has a ton of tools to
&gt; analyze crashes (https://crash-stats.mozilla.org/home/product/Firefox
&gt; is one and https://github.com/mozilla/socorro is the general backend).
&gt; We should look at Socorro and probably adapt it for use by Tor rather
&gt; than building our own.
&gt; 
&gt; 5) Circle back and get the crash reporter built reproducibly, and for
&gt; all platforms. I put this one last because it may be the case that
&gt; there are annoying time-sinks here, and I think by doing this last
&gt; you'll be able to make the most headway on things that will take the
&gt; most time - like enumerating, documenting, and evaluating the fields;
&gt; and fiddling with Socorro.
&gt; 
&gt; 
&gt; This is my take on it - Georg may have additional thoughts.
&gt; 
&gt; -tom



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328212222</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-28 21:22:22-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, Georg,
Thank you!

&gt; We should have a good user interface ready giving the user at least an
&gt; explanation on what is going on and a way to check what is about to be
sent.

I've also thought about that, I suppose we could just put text explanations
on Crash Reporter client UI form [1].

I've wrote the Proposal [2], could you review it and leave comments?
Thanks.

P.S. Have I to send proposal to GSoc as draft?

1) http://kb.mozillazine.org/images/MozillaCrashReporter-Fx7.png
2)
https://docs.google.com/document/d/13q3D1UYYbmUv4DlZBYFLnHuLnbz7-GI2L_lMM9igZ_o/

2017-03-26 18:23 GMT+03:00 Georg Koppen &lt;gk@torproject.org&gt;:

&gt; Tom Ritter:
&gt; &gt; Hi Nur-Magomed,
&gt; &gt;
&gt; &gt; Great to have you interested in this!
&gt; &gt;
&gt; &gt; So we would want to use the Crash Reporter that's built into Mozilla
&gt; &gt; Firefox (which is called Breakpad, and is adapted from Chromium).  At
&gt; &gt; a high level, I would break down the project into the following
&gt; &gt; sections:
&gt;
&gt; Those look all good to me. I just have one small addition/clarification
&gt; below.
&gt;
&gt; &gt; 1) Get the crash reporter built (at all) in our toolchain. We
&gt; &gt; currently disable it and I know there will be at least one or two
&gt; &gt; hurdles to overcome here as we've never tried to built this on
&gt; &gt; Linux-for-Windows.  If you wish you could focus on a single platform
&gt; &gt; for this at a time (e.g. Linux) so you can move onto the next step.
&gt; &gt;
&gt; &gt; 2) Audit the crash reporter data and see what it is that gets
&gt; &gt; reported, when, and how. We'd want to err on the side of caution about
&gt; &gt; what we report in a dump. So we'd need to enumerate each field that
&gt; &gt; gets reported, get some samples of the data, and review if we'd want
&gt; &gt; to include it or not. We'd also want to review what prefs govern crash
&gt; &gt; submissions, how crashes get stored (which I think is on-disk next to
&gt; &gt; Tor Browser), and when they get reported.
&gt; &gt;
&gt; &gt; 3) Change the way they get reported. We absolutely cannot have crashes
&gt; &gt; sitting around on disk next to Tor Browser for the next time the user
&gt; &gt; starts the browser - no matter how much data we strip out of them. So
&gt; &gt; we'll need to brainstorm how we might try submitting them immediately
&gt; &gt; upon crash instead of next startup.
&gt;
&gt; Even though it seems to me the critical UX part is implicit in the
&gt; section above, I thought it might be better to point it out explicitly
&gt; as well:
&gt;
&gt; We should have a good user interface ready giving the user at least an
&gt; explanation on what is going on and a way to check what is about to be
&gt; sent.
&gt;
&gt; Georg
&gt;
&gt; &gt; 4) Get a submission server running. Mozilla has a ton of tools to
&gt; &gt; analyze crashes (https://crash-stats.mozilla.org/home/product/Firefox
&gt; &gt; is one and https://github.com/mozilla/socorro is the general backend).
&gt; &gt; We should look at Socorro and probably adapt it for use by Tor rather
&gt; &gt; than building our own.
&gt; &gt;
&gt; &gt; 5) Circle back and get the crash reporter built reproducibly, and for
&gt; &gt; all platforms. I put this one last because it may be the case that
&gt; &gt; there are annoying time-sinks here, and I think by doing this last
&gt; &gt; you'll be able to make the most headway on things that will take the
&gt; &gt; most time - like enumerating, documenting, and evaluating the fields;
&gt; &gt; and fiddling with Socorro.
&gt; &gt;
&gt; &gt;
&gt; &gt; This is my take on it - Georg may have additional thoughts.
&gt; &gt;
&gt; &gt; -tom
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi, Georg,&lt;br&gt;&lt;/div&gt;Thank you! &lt;br&gt;&lt;div&gt;&lt;br&gt;&gt; We should have a \
good user interface ready giving the user at least an&lt;br&gt; &gt; explanation on what is \
going on and a way to check what is about to be sent.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've also \
thought about that, I suppose we could just put text explanations on Crash Reporter \
client UI form [1].&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've wrote the Proposal [2], could you \
review it and leave comments? Thanks.   &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;P.S. Have I to send \
proposal to GSoc as draft?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;1) &lt;a \
href="http://kb.mozillazine.org/images/MozillaCrashReporter-Fx7.png" \
target="_blank"&gt;http://kb.mozillazine.org/imag&lt;wbr&gt;es/MozillaCrashReporter-Fx7.&lt;wbr&gt;png&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;2) &lt;a \
href="https://docs.google.com/document/d/13q3D1UYYbmUv4DlZBYFLnHuLnbz7-GI2L_lMM9igZ_o/ \
"&gt;https://docs.google.com/document/d/13q3D1UYYbmUv4DlZBYFLnHuLnbz7-GI2L_lMM9igZ_o/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2017-03-26 18:23 GMT+03:00 Georg Koppen &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:gk@torproject.org" \
target="_blank"&gt;gk@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Tom Ritter:&lt;br&gt; &lt;span&gt;&gt; Hi Nur-Magomed,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Great to have you interested in this!&lt;br&gt;
&gt;&lt;br&gt;
&gt; So we would want to use the Crash Reporter that's built into Mozilla&lt;br&gt;
&gt; Firefox (which is called Breakpad, and is adapted from Chromium).   At&lt;br&gt;
&gt; a high level, I would break down the project into the following&lt;br&gt;
&gt; sections:&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Those look all good to me. I just have one small addition/clarification&lt;br&gt;
below.&lt;br&gt;
&lt;span&gt;&lt;br&gt;
&gt; 1) Get the crash reporter built (at all) in our toolchain. We&lt;br&gt;
&gt; currently disable it and I know there will be at least one or two&lt;br&gt;
&gt; hurdles to overcome here as we've never tried to built this on&lt;br&gt;
&gt; Linux-for-Windows.   If you wish you could focus on a single platform&lt;br&gt;
&gt; for this at a time (e.g. Linux) so you can move onto the next step.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2) Audit the crash reporter data and see what it is that gets&lt;br&gt;
&gt; reported, when, and how. We'd want to err on the side of caution about&lt;br&gt;
&gt; what we report in a dump. So we'd need to enumerate each field that&lt;br&gt;
&gt; gets reported, get some samples of the data, and review if we'd want&lt;br&gt;
&gt; to include it or not. We'd also want to review what prefs govern crash&lt;br&gt;
&gt; submissions, how crashes get stored (which I think is on-disk next to&lt;br&gt;
&gt; Tor Browser), and when they get reported.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3) Change the way they get reported. We absolutely cannot have crashes&lt;br&gt;
&gt; sitting around on disk next to Tor Browser for the next time the user&lt;br&gt;
&gt; starts the browser - no matter how much data we strip out of them. So&lt;br&gt;
&gt; we'll need to brainstorm how we might try submitting them immediately&lt;br&gt;
&gt; upon crash instead of next startup.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Even though it seems to me the critical UX part is implicit in the&lt;br&gt;
section above, I thought it might be better to point it out explicitly&lt;br&gt;
as well:&lt;br&gt;
&lt;br&gt;
We should have a good user interface ready giving the user at least an&lt;br&gt;
explanation on what is going on and a way to check what is about to be sent.&lt;br&gt;
&lt;span class="gmail-m_6793940637254820654HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
Georg&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;div class="gmail-m_6793940637254820654HOEnZb"&gt;&lt;div \
class="gmail-m_6793940637254820654h5"&gt;&lt;br&gt; &gt; 4) Get a submission server running. \
Mozilla has a ton of tools to&lt;br&gt; &gt; analyze crashes (&lt;a \
href="https://crash-stats.mozilla.org/home/product/Firefox" rel="noreferrer" \
target="_blank"&gt;https://crash-stats.mozilla.o&lt;wbr&gt;rg/home/product/Firefox&lt;/a&gt;&lt;br&gt; \
&gt; is one and &lt;a href="https://github.com/mozilla/socorro" rel="noreferrer" \
target="_blank"&gt;https://github.com/mozilla/soc&lt;wbr&gt;orro&lt;/a&gt; is the general \
backend).&lt;br&gt; &gt; We should look at Socorro and probably adapt it for use by Tor \
rather&lt;br&gt; &gt; than building our own.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5) Circle back and get the crash reporter built reproducibly, and for&lt;br&gt;
&gt; all platforms. I put this one last because it may be the case that&lt;br&gt;
&gt; there are annoying time-sinks here, and I think by doing this last&lt;br&gt;
&gt; you'll be able to make the most headway on things that will take the&lt;br&gt;
&gt; most time - like enumerating, documenting, and evaluating the fields;&lt;br&gt;
&gt; and fiddling with Socorro.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; This is my take on it - Georg may have additional thoughts.&lt;br&gt;
&gt;&lt;br&gt;
&gt; -tom&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330203150</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-03-30 20:31:50-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

On 28 March 2017 at 16:22, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; Hi, Georg,
&gt; Thank you!
&gt;
&gt;&gt; We should have a good user interface ready giving the user at least an
&gt;&gt; explanation on what is going on and a way to check what is about to be
&gt;&gt; sent.
&gt;
&gt; I've also thought about that, I suppose we could just put text explanations
&gt; on Crash Reporter client UI form [1].

I think we'd want to enhance this form. IIRC the 'Details' view is
small and obtuse and it's not easy to review. I'm not saying we
_should_ create these features, but here are a few I brainstormed:

- A much bigger, more clear Details window with:
- The ability to include to exclude individual sections of the report
(for example, Hardware information would not be included by default,
but maybe we give the user the ability to include it)
- The ability to perform text searches for keywords of their choosing
to spot-check if they are present in the report

Just ideas.

&gt; I've wrote the Proposal [2], could you review it and leave comments? Thanks.

Let's try and avoid GDocs if you don't mind :)

I put your document here:
https://storm.torproject.org/shared/DHc8GjUYr8aUNeO2ZcOjTc1xG3pwbburIQoLYB9wkAz
(I don't know if you can create storm documents, but you could use
pad.riseup.net ) and put comments on it.

&gt; P.S. Have I to send proposal to GSoc as draft?

I don't know the answer to this, but hopefully Damian does?

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330214423</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-30 21:44:23-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

&gt;&gt; P.S. Have I to send proposal to GSoc as draft?
&gt;
&gt; I don't know the answer to this, but hopefully Damian does?

It would be useful if you uploaded a draft to the site, but really the
only hard requirement is that the proposal is uploaded before the
deadline. ;)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170331152757</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-31 15:27:57-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt; _should_ create these features, but here are a few I brainstormed:

Yes, actually that form only shows "Key: Value" list, we can break it down
in several GroupBoxes which consist of grouped data field and checkboxes to
include.

&gt; Let's try and avoid GDocs if you don't mind :)

Sorry :) I already registered on storm, but I had no access to create.
Thanks for review, I'll update proposal accordint to your requiments.

And question: could we throw Windows or MacOS or both versions from
timeline, and develop them after summer?


2017-03-31 0:44 GMT+03:00 Damian Johnson &lt;atagar@torproject.org&gt;:

&gt; &gt;&gt; P.S. Have I to send proposal to GSoc as draft?
&gt; &gt;
&gt; &gt; I don't know the answer to this, but hopefully Damian does?
&gt;
&gt; It would be useful if you uploaded a draft to the site, but really the
&gt; only hard requirement is that the proposal is uploaded before the
&gt; deadline. ;)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&gt; I think we'd want to enhance this form. \
IIRC the 'Details' view is&lt;br&gt;&gt; small and obtuse and it's not easy to \
review. I'm not saying we&lt;br&gt; &gt; _should_ create these features, but here are a \
few I brainstormed:&lt;br&gt;&lt;br&gt;&lt;/div&gt;Yes, actually that form only shows "Key: \
Value" list, we can break it down  in several GroupBoxes which consist of \
grouped data field and checkboxes to include. &lt;br&gt;&lt;br&gt;&gt; Let's try and avoid \
GDocs if you don't mind :)&lt;br&gt;&lt;br&gt;&lt;/div&gt;Sorry :) I already registered on storm, \
but I had no access to create. &lt;br&gt;&lt;/div&gt;Thanks for review, I'll update proposal \
accordint to your requiments.&lt;br&gt;&lt;br&gt;&lt;/div&gt;And question: could we throw Windows or \
MacOS or both versions from timeline, and develop them after summer? \
&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2017-03-31 0:44 GMT+03:00 Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;&gt;&gt; P.S. Have I to send proposal to GSoc \
as draft?&lt;br&gt; &gt;&lt;br&gt;
&gt; I don't know the answer to this, but hopefully Damian does?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;It would be useful if you uploaded a draft to the site, but really the&lt;br&gt;
only hard requirement is that the proposal is uploaded before the&lt;br&gt;
deadline. ;)&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401142226</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-04-01 14:22:26-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tom,
I've updated Proposal[1] according to your recommendations.

1) https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/

2017-03-31 19:46 GMT+03:00 Tom Ritter &lt;tom@ritter.vg&gt;:

&gt; On 31 March 2017 at 10:27, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt; &gt;&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt; &gt;&gt; _should_ create these features, but here are a few I brainstormed:
&gt; &gt;
&gt; &gt; Yes, actually that form only shows "Key: Value" list, we can break it
&gt; down
&gt; &gt; in several GroupBoxes which consist of grouped data field and checkboxes
&gt; to
&gt; &gt; include.
&gt; &gt;
&gt; &gt;&gt; Let's try and avoid GDocs if you don't mind :)
&gt; &gt;
&gt; &gt; Sorry :) I already registered on storm, but I had no access to create.
&gt; &gt; Thanks for review, I'll update proposal accordint to your requiments.
&gt;
&gt; No worries.
&gt;
&gt; &gt; And question: could we throw Windows or MacOS or both versions from
&gt; &gt; timeline, and develop them after summer?
&gt;
&gt; Yes, I think that's fine. I think getting one platform to completion
&gt; would be a great accomplishment and would lay the groundwork and
&gt; improve the momentum to getting the subsequent platforms there.
&gt;
&gt; -tom
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi Tom,&lt;br&gt;&lt;/div&gt;I've updated Proposal[1] according to your \
recommendations.&lt;br&gt;&lt;br&gt;1) &lt;a \
href="https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/"&gt;https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-31 19:46 GMT+03:00 Tom \
Ritter &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:tom@ritter.vg" \
target="_blank"&gt;tom@ritter.vg&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;span \
class=""&gt;On 31 March 2017 at 10:27, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&gt; I think \
we'd want to enhance this form. IIRC the 'Details' view is&lt;br&gt; &gt;&gt; \
small and obtuse and it's not easy to review. I'm not saying we&lt;br&gt; &gt;&gt; \
_should_ create these features, but here are a few I brainstormed:&lt;br&gt; &gt;&lt;br&gt;
&gt; Yes, actually that form only shows "Key: Value" list, we can break it \
down&lt;br&gt; &gt; in several GroupBoxes which consist of grouped data field and \
checkboxes to&lt;br&gt; &gt; include.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&gt; Let's try and avoid GDocs if you don't mind :)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Sorry :) I already registered on storm, but I had no access to create.&lt;br&gt;
&gt; Thanks for review, I'll update proposal accordint to your requiments.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;No worries.&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; And question: could we throw Windows or MacOS or both versions from&lt;br&gt;
&gt; timeline, and develop them after summer?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Yes, I think that's fine. I think getting one platform to completion&lt;br&gt;
would be a great accomplishment and would lay the groundwork and&lt;br&gt;
improve the momentum to getting the subsequent platforms there.&lt;br&gt;
&lt;span class="HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
-tom&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328192316</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-03-28 19:23:16-0400</timestampReceived><subject>[tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

I am a Computer Engineering student at the Federal Technological
University of Parana in Brazil and I would like to present you a
peer-to-peer privacy enhanced instant messenger called unMessage [0].
I have been working on it for a while with David Andersen [1] (my
advisor) and we have recently released an alpha version which should
be easy for developers to install and test.

It uses the Double Ratchet Algorithm [2] for encryption, Onion
Services for transport metadata minimization, its own protocol for
application metadata minimization, and as a result, provides private
and anonymous conversations. It currently has basic features such as
message exchange, user authentication and we very recently enabled
voice chat using the Opus codec [3] for constant bitrate encoding.
unMessage is a Python application that mainly uses pyaxo's [4]
implementation of Double Ratchet Algorithm and txtorcon's [5]
implementation of the Tor Control Protocol.

Since its current (alpha) release, we have been discussing it with
Patrick Schleizer [6] and HulaHoop [7] from Whonix [8], who are making
great contributions to help us test it, as well as suggesting new
features and improvements. We are also working to run it on Whonix
(which will also allow it to be run on Tails) with help from
meejah [9] by adding a new feature to txtorcon to make unMessage (and
all the apps that use txtorcon) "Control Port Filter friendly".

As we believe unMessage has potential to become a great privacy
enhancing app with a code that is simple, readable and therefore easy
to maintain, Patrick suggested that I submitted a proposal to have
unMessage as one of the GSoC projects. We expect to implement fixes,
improvements and features from our discussions in order to turn it
into a maintainable, feature-rich and useful app which the community
can benefit from.

There are currently some "developer centered" tasks I can work on
such as:

- Create a test suite (with pytest)
- Make unMessage's own functions/methods behave like a Twisted API
  should
- Use automat for its finite-state machines
- Make use of a logging tool
- Improve comments/document the code

As well as some "user centered" tasks:

- Whonix/Tails support
- Improve the GUI and CLI
- File transfer
- Use a friendlier approach for users to handle keys instead of
  the current base32/64 encodings
- Connect/launch Tor automatically depending on what is available
- Offline messages

(All the other ones can be found in the issue tracker [10])

My intention with this post is not only to present unMessage to
tor-dev but also see if someone is interested in mentoring me as it
is not one of the official ideas but hopefully sounds like a good
project. If someone gets interested, please let me know so that we can
discuss which tasks would be interesting for this project and I am
able to write a proposal.

Thanks!
-Felipe

[0]: https://github.com/AnemoneLabs/unmessage
[1]: https://github.com/rxcomm
[2]: https://whispersystems.org/docs/specifications/doubleratchet
[3]: https://opus-codec.org
[4]: https://github.com/anemonelabs/pyaxo
[5]: https://github.com/meejah/txtorcon
[6]: https://github.com/adrelanos
[7]: https://github.com/HulaHoopWhonix
[8]: https://whonix.org
[9]: https://github.com/meejah
[10]: https://github.com/AnemoneLabs/unmessage/issues

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401022047</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-04-01 02:20:47-0400</timestampReceived><subject>[tor-dev] [prop269] [prop270] Ideas from Tor Meeting Discussion on Post-Quantum Crypto</subject><body>

[Attachment #2 (multipart/signed)]


Hey hey,

In summary of the breakaway group we had last Saturday on post-quantum
cryptography in Tor, there were a few potentially good ideas I wrote down,
just in case they didn't make it into the meeting notes:

 * A client should be able to configure "I require my entire circuit to have
   PQ handshakes" and "I require at least one handshake in my circuits to be
   PQ".  (Previously, we had only considered having consensus parameters, in
   order to turn the feature on e.g. once 20% of relays supported the new
   handshake method.)

 * Using stateful hash-based signatures to sign descriptors and/or consensus
   documents, and (later) if state has been lost or compromised, then request
   the last such document submitted to regain state (probably skipping over
   all the leaves of the last used node in the tree, or the equivalent, to be
   safe).  (This requires more concrete design analysis, including the effects
   of the large size of hash-based signatures on the directory bandwidth
   usage, probably in a proposal or longer write up, should someone awesome
   decides to research this idea further. :)

Thanks to everyone involved in the breakaway group, and I apologise, but I
don't actually remember all the attendants off the top of my head.  If either
of these were your idea, please message me off-list and I'll ensure you're
credited in the eventual proposal(s)/documentation.

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403130624</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-04-03 13:06:24-0400</timestampReceived><subject>Re: [tor-dev] [prop269] [prop270] Ideas from Tor Meeting Discussion on Post-Quantum Crypto</subject><body>

On Fri, Mar 31, 2017 at 10:20 PM, isis agora lovecruft
&lt;isis@torproject.org&gt; wrote:
&gt; Hey hey,
&gt;
&gt; In summary of the breakaway group we had last Saturday on post-quantum
&gt; cryptography in Tor, there were a few potentially good ideas I wrote down,
&gt; just in case they didn't make it into the meeting notes:
&gt;
&gt;  * A client should be able to configure "I require my entire circuit to have
&gt;    PQ handshakes" and "I require at least one handshake in my circuits to be
&gt;    PQ".  (Previously, we had only considered having consensus parameters, in
&gt;    order to turn the feature on e.g. once 20% of relays supported the new
&gt;    handshake method.)

+1 on having something like this happen in some way, -0 on having
client configuration be the recommended way for any purpose other than
testing (Having clients behave differently is best avoided.)

Our usual approach for this kind of thing a consensus parameter that
can be overridden with a local option.


&gt;  * Using stateful hash-based signatures to sign descriptors and/or consensus
&gt;    documents, and (later) if state has been lost or compromised, then request
&gt;    the last such document submitted to regain state (probably skipping over
&gt;    all the leaves of the last used node in the tree, or the equivalent, to be
&gt;    safe).  (This requires more concrete design analysis, including the effects
&gt;    of the large size of hash-based signatures on the directory bandwidth
&gt;    usage, probably in a proposal or longer write up, should someone awesome
&gt;    decides to research this idea further. :)

Interesting!  I'd hope we do this as a separate proposal.

Also my hope is that in our timeline, we prioritize PQ encryption over
authentication, since PQ encryption provides us forward secrecy
against future quantum computers, whereas PQ authentication is only
useful once a sufficient quantum computer exists.

(That's no reason not to think about PQ authentication, but with any
luck, we can wait a few years for the PQ crypto world to invent some
even better algorithms.)

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328214312</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-03-28 21:43:12-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


Hey,

Cool project.

Yes... write unit tests with pytest. Sounds good but I would
suggest writing tests earlier in the development process next time.

Does your project have a specification for this software?
Otherwise I have to read the code to learn how it works.

Using automat for the fsm sounds like a great idea. You probably
will end up making several finite state machines and connecting them
together in a graph. If you end up doing that you should probably first
draw a picture... it helps to clarify.

I've recently started to experiment with automat myself and I've heard
good things about it from my associates.

also you could add :

- hypothesis tests (fuzzing/property based tests)
https://hypothesis.readthedocs.io/
- changes to setup.py and add a requirements.txt
- use python attrs to eliminate boiler plate code in your classes
https://attrs.readthedocs.io/

as an example here's my fork of sphinx, a mixnet crypto library with
100% unit test coverage, hypothesis fuzzing, usage of attrs and a
proper setup.py and requirements.txt file:

https://github.com/applied-mixnetworks/sphinxmixcrypto


I'd be interested in collaborating with you and mentoring this project.
I'm not sure how much time I'll have in the coming months... we'll see.


Cheers,

David



On Tue, Mar 28, 2017 at 07:23:16PM +0000, Felipe Dau wrote:
&gt; Hello,
&gt; 
&gt; I am a Computer Engineering student at the Federal Technological
&gt; University of Parana in Brazil and I would like to present you a
&gt; peer-to-peer privacy enhanced instant messenger called unMessage [0].
&gt; I have been working on it for a while with David Andersen [1] (my
&gt; advisor) and we have recently released an alpha version which should
&gt; be easy for developers to install and test.
&gt; 
&gt; It uses the Double Ratchet Algorithm [2] for encryption, Onion
&gt; Services for transport metadata minimization, its own protocol for
&gt; application metadata minimization, and as a result, provides private
&gt; and anonymous conversations. It currently has basic features such as
&gt; message exchange, user authentication and we very recently enabled
&gt; voice chat using the Opus codec [3] for constant bitrate encoding.
&gt; unMessage is a Python application that mainly uses pyaxo's [4]
&gt; implementation of Double Ratchet Algorithm and txtorcon's [5]
&gt; implementation of the Tor Control Protocol.
&gt; 
&gt; Since its current (alpha) release, we have been discussing it with
&gt; Patrick Schleizer [6] and HulaHoop [7] from Whonix [8], who are making
&gt; great contributions to help us test it, as well as suggesting new
&gt; features and improvements. We are also working to run it on Whonix
&gt; (which will also allow it to be run on Tails) with help from
&gt; meejah [9] by adding a new feature to txtorcon to make unMessage (and
&gt; all the apps that use txtorcon) "Control Port Filter friendly".
&gt; 
&gt; As we believe unMessage has potential to become a great privacy
&gt; enhancing app with a code that is simple, readable and therefore easy
&gt; to maintain, Patrick suggested that I submitted a proposal to have
&gt; unMessage as one of the GSoC projects. We expect to implement fixes,
&gt; improvements and features from our discussions in order to turn it
&gt; into a maintainable, feature-rich and useful app which the community
&gt; can benefit from.
&gt; 
&gt; There are currently some "developer centered" tasks I can work on
&gt; such as:
&gt; 
&gt; - Create a test suite (with pytest)
&gt; - Make unMessage's own functions/methods behave like a Twisted API
&gt;   should
&gt; - Use automat for its finite-state machines
&gt; - Make use of a logging tool
&gt; - Improve comments/document the code
&gt; 
&gt; As well as some "user centered" tasks:
&gt; 
&gt; - Whonix/Tails support
&gt; - Improve the GUI and CLI
&gt; - File transfer
&gt; - Use a friendlier approach for users to handle keys instead of
&gt;   the current base32/64 encodings
&gt; - Connect/launch Tor automatically depending on what is available
&gt; - Offline messages
&gt; 
&gt; (All the other ones can be found in the issue tracker [10])
&gt; 
&gt; My intention with this post is not only to present unMessage to
&gt; tor-dev but also see if someone is interested in mentoring me as it
&gt; is not one of the official ideas but hopefully sounds like a good
&gt; project. If someone gets interested, please let me know so that we can
&gt; discuss which tasks would be interesting for this project and I am
&gt; able to write a proposal.
&gt; 
&gt; Thanks!
&gt; -Felipe
&gt; 
&gt; [0]: https://github.com/AnemoneLabs/unmessage
&gt; [1]: https://github.com/rxcomm
&gt; [2]: https://whispersystems.org/docs/specifications/doubleratchet
&gt; [3]: https://opus-codec.org
&gt; [4]: https://github.com/anemonelabs/pyaxo
&gt; [5]: https://github.com/meejah/txtorcon
&gt; [6]: https://github.com/adrelanos
&gt; [7]: https://github.com/HulaHoopWhonix
&gt; [8]: https://whonix.org
&gt; [9]: https://github.com/meejah
&gt; [10]: https://github.com/AnemoneLabs/unmessage/issues



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328223824</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-03-28 22:38:24-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, Mar 28, 2017 at 09:43:12PM +0000, dawuud wrote:
&gt; 
&gt; Hey,
&gt; 
&gt; Cool project.

Thanks!

&gt; Yes... write unit tests with pytest. Sounds good but I would
&gt; suggest writing tests earlier in the development process next time.

I completely agree (and I feel bad for that).

&gt; Does your project have a specification for this software?
&gt; Otherwise I have to read the code to learn how it works.

I would not call that a specification, but we have written a few
pages of documentation. I totally forgot to add these references to
the post. There are currently usage instructions for the GUI [0] and
the CLI [1], and also its protocol [2]. The latter basically tells how
conversations are established and how the packets look like. That's
what we have written so far... That does not tell everything about
the app, but a very important part of it. Are there any specific
aspects you would like to see? I will start writing a bit about its
functioning.

&gt; Using automat for the fsm sounds like a great idea. You probably
&gt; will end up making several finite state machines and connecting them
&gt; together in a graph. If you end up doing that you should probably first
&gt; draw a picture... it helps to clarify.
&gt; 
&gt; I've recently started to experiment with automat myself and I've heard
&gt; good things about it from my associates.
&gt; 
&gt; also you could add :
&gt; 
&gt; - hypothesis tests (fuzzing/property based tests)
&gt; https://hypothesis.readthedocs.io/
&gt; - changes to setup.py and add a requirements.txt
&gt; - use python attrs to eliminate boiler plate code in your classes
&gt; https://attrs.readthedocs.io/
&gt; 
&gt; as an example here's my fork of sphinx, a mixnet crypto library with
&gt; 100% unit test coverage, hypothesis fuzzing, usage of attrs and a
&gt; proper setup.py and requirements.txt file:
&gt; 
&gt; https://github.com/applied-mixnetworks/sphinxmixcrypto

Thanks! Those are great ideas! Very interesting!

&gt; I'd be interested in collaborating with you and mentoring this project.

Thanks for the interest! From your suggestions, I believe the project
would be more "developer centered" and I think that is the right way
to go. The earlier we do that, the less we are going to regret when
things start to grow and get more complex. That is also a great
improvement to prevent bugs which can harm the UX as well as
anonymity/privacy/security. Do you think that's the approach we should
use for this proposal then? I am asking that because I do not know if
people would expect more features than "just" code improvements for a
project, if that makes sense.

&gt; I'm not sure how much time I'll have in the coming months... we'll see.

Well, let me know if there is anything I can do about that.

Thanks David!
-Felipe

[0]: https://unmessage.readthedocs.io/en/latest/gui/gui.html
[1]: https://unmessage.readthedocs.io/en/latest/cli/cli.html
[2]: https://unmessage.readthedocs.io/en/latest/protocol.html

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328230829</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-03-28 23:08:29-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


I suggest making sure your UI follows the pricinples outlined here:

User Interaction Design for Secure Systems
http://zesty.ca/pubs/icics-2002-uidss.pdf
by Ka-Ping Yee


for example:
"Path of Least Resistance.  The most natural way to do any task should
also be the most secure way."


Does your client support revocation?
Ka-Ping Yee says:

"Revocability.  The interface should allow the user to easily revoke
authorities that the user has granted, wherever revocation is
possible."



cheers,

David

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170329000344</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-03-29 00:03:44-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, Mar 28, 2017 at 11:08:29PM +0000, dawuud wrote:
&gt; 
&gt; 
&gt; I suggest making sure your UI follows the pricinples outlined here:
&gt; 
&gt; User Interaction Design for Secure Systems
&gt; http://zesty.ca/pubs/icics-2002-uidss.pdf
&gt; by Ka-Ping Yee
&gt; 
&gt; 
&gt; for example:
&gt; "Path of Least Resistance.  The most natural way to do any task should
&gt; also be the most secure way."

Thanks David, that is a good suggestion. We did design it with
security in mind, but there is certainly room for improvement and I am
going to review the UIs.

&gt; Does your client support revocation?
&gt; Ka-Ping Yee says:
&gt; 
&gt; "Revocability.  The interface should allow the user to easily revoke
&gt; authorities that the user has granted, wherever revocation is
&gt; possible."

That will also be included in the review. An example of something that
unMessage does similarly is enabling presence. By default you do not
tell your contacts when you are online (i.e., you do not connect to
all of your contacts on startup), but it is possible to enable which
contacts you wish to notify (as well as disable).

Do you think the tasks for the project should be a mix of
code/structure and UI improvements?

P.S. I opened issues for all your suggestions and mentioned you on
all of them. I just realized that is probably very annoying - I'm
sorry for that. Let me know if you would like to copied though.

Thanks,
-Felipe

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170329075729</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-03-29 07:57:29-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

You may want to link unmessage into the I2P network as well.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170329193829</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-03-29 19:38:29-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, Mar 29, 2017 at 03:57:29AM -0400, grarpamp wrote:
&gt; You may want to link unmessage into the I2P network as well.

Hi grarpamp,

Thanks for the suggestion. It should be possible to support multiple
kinds of transport, but we still need to do some research on that
because it might make some attacks
possible/easier (e.g., partitioning attacks)? It would be great to
have a discussion about that.

Thanks,
-Felipe

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401134433</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-04-01 13:44:33-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, Mar 30, 2017 at 02:48:45AM -0400, grarpamp wrote:
&gt; It's suggested and welcome that all overlay networks publicly
&gt; review, audit, analyze, each others work and offerings. Unfortunately
&gt; that hasn't develop much yet in a formal dedicated as responsibility
&gt; manner among even the larger opensource community, or even
&gt; discussion if that is a good idea. (But there is some good work in
&gt; some projects out there lately of their own work... automated code
&gt; linting, and the rarer procured third party audit.)
&gt; 
&gt; Then shall we presume all our networks are equivalently secure?,
&gt; or equivalently flawed, as each network happens to advertise now and then.

Makes sense.

&gt; This may leave the matter of partitioning up to the user to consider
&gt; pursuant to any note about that in the app documentation.

I agree. Giving power of choice to the users is ideal.

&gt; The app could enable simultaneous multihome based on commandline
&gt; options... --tor --i2p --cjdns --other, default [whatever] .
&gt; And of course all the ports / addresses / bindings would need to
&gt; be flexible.
&gt;
&gt; On equivalent networks, presence is maybe a bigger issue than partitioning.
&gt; This includes concept to drop the network identity off the network itself,
&gt; or use new ID, not just managing announces to buddy list entries.

Interesting! I opened an issue [0] to discuss this feature (copied
your post there). It might take a while to work on that as we have
other tasks with a higher priority, but I intend to get back to it at
some point.

Thanks,
-Felipe

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401135139</emailId><senderName>Alan S</senderName><senderEmail>agshuman@gmail.com</senderEmail><timestampReceived>2017-04-01 13:51:39-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/alternative)]


Delete my accountf

On Apr 1, 2017 9:45 AM, "Felipe Dau" &lt;dau@riseup.net&gt; wrote:

&gt; On Thu, Mar 30, 2017 at 02:48:45AM -0400, grarpamp wrote:
&gt; &gt; It's suggested and welcome that all overlay networks publicly
&gt; &gt; review, audit, analyze, each others work and offerings. Unfortunately
&gt; &gt; that hasn't develop much yet in a formal dedicated as responsibility
&gt; &gt; manner among even the larger opensource community, or even
&gt; &gt; discussion if that is a good idea. (But there is some good work in
&gt; &gt; some projects out there lately of their own work... automated code
&gt; &gt; linting, and the rarer procured third party audit.)
&gt; &gt;
&gt; &gt; Then shall we presume all our networks are equivalently secure?,
&gt; &gt; or equivalently flawed, as each network happens to advertise now and
&gt; then.
&gt;
&gt; Makes sense.
&gt;
&gt; &gt; This may leave the matter of partitioning up to the user to consider
&gt; &gt; pursuant to any note about that in the app documentation.
&gt;
&gt; I agree. Giving power of choice to the users is ideal.
&gt;
&gt; &gt; The app could enable simultaneous multihome based on commandline
&gt; &gt; options... --tor --i2p --cjdns --other, default [whatever] .
&gt; &gt; And of course all the ports / addresses / bindings would need to
&gt; &gt; be flexible.
&gt; &gt;
&gt; &gt; On equivalent networks, presence is maybe a bigger issue than
&gt; partitioning.
&gt; &gt; This includes concept to drop the network identity off the network
&gt; itself,
&gt; &gt; or use new ID, not just managing announces to buddy list entries.
&gt;
&gt; Interesting! I opened an issue [0] to discuss this feature (copied
&gt; your post there). It might take a while to work on that as we have
&gt; other tasks with a higher priority, but I intend to get back to it at
&gt; some point.
&gt;
&gt; Thanks,
&gt; -Felipe
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Delete my accountf&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Apr 1, 2017 9:45 AM, "Felipe Dau" &lt;&lt;a \
href="mailto:dau@riseup.net"&gt;dau@riseup.net&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Thu, Mar 30, 2017 at 02:48:45AM \
-0400, grarpamp wrote:&lt;br&gt; &gt; It's suggested and welcome that all overlay \
networks publicly&lt;br&gt; &gt; review, audit, analyze, each others work and offerings. \
Unfortunately&lt;br&gt; &gt; that hasn't develop much yet in a formal dedicated as \
responsibility&lt;br&gt; &gt; manner among even the larger opensource community, or \
even&lt;br&gt; &gt; discussion if that is a good idea. (But there is some good work in&lt;br&gt;
&gt; some projects out there lately of their own work... automated code&lt;br&gt;
&gt; linting, and the rarer procured third party audit.)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Then shall we presume all our networks are equivalently secure?,&lt;br&gt;
&gt; or equivalently flawed, as each network happens to advertise now and then.&lt;br&gt;
&lt;br&gt;
Makes sense.&lt;br&gt;
&lt;br&gt;
&gt; This may leave the matter of partitioning up to the user to consider&lt;br&gt;
&gt; pursuant to any note about that in the app documentation.&lt;br&gt;
&lt;br&gt;
I agree. Giving power of choice to the users is ideal.&lt;br&gt;
&lt;br&gt;
&gt; The app could enable simultaneous multihome based on commandline&lt;br&gt;
&gt; options... --tor --i2p --cjdns --other, default [whatever] .&lt;br&gt;
&gt; And of course all the ports / addresses / bindings would need to&lt;br&gt;
&gt; be flexible.&lt;br&gt;
&gt;&lt;br&gt;
&gt; On equivalent networks, presence is maybe a bigger issue than partitioning.&lt;br&gt;
&gt; This includes concept to drop the network identity off the network itself,&lt;br&gt;
&gt; or use new ID, not just managing announces to buddy list entries.&lt;br&gt;
&lt;br&gt;
Interesting! I opened an issue [0] to discuss this feature (copied&lt;br&gt;
your post there). It might take a while to work on that as we have&lt;br&gt;
other tasks with a higher priority, but I intend to get back to it at&lt;br&gt;
some point.&lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
-Felipe&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401135752</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-04-01 13:57:52-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


And here is the issue [0].

[0]: https://github.com/AnemoneLabs/unmessage/issues/40

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170401152000</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-01 15:20:00-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


Dear Damian Johnson,

i presume you are the one i should be sending this e-mail to.
i can be the mentor for this unmessage project.


~david

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402165140</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-02 16:51:40-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


Hi. I registered with Google to be a GSoC mentor for Tor Project.
Hopefully Meejah will agree to be the backup mentor for this
and register today or tomorrow before the deadline on Monday.

Let me know if there's anything else timely that I must do for this.


Cheers,
David


On Wed, Mar 29, 2017 at 12:03:44AM +0000, Felipe Dau wrote:
&gt; On Tue, Mar 28, 2017 at 11:08:29PM +0000, dawuud wrote:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; I suggest making sure your UI follows the pricinples outlined here:
&gt; &gt; 
&gt; &gt; User Interaction Design for Secure Systems
&gt; &gt; http://zesty.ca/pubs/icics-2002-uidss.pdf
&gt; &gt; by Ka-Ping Yee
&gt; &gt; 
&gt; &gt; 
&gt; &gt; for example:
&gt; &gt; "Path of Least Resistance.  The most natural way to do any task should
&gt; &gt; also be the most secure way."
&gt; 
&gt; Thanks David, that is a good suggestion. We did design it with
&gt; security in mind, but there is certainly room for improvement and I am
&gt; going to review the UIs.
&gt; 
&gt; &gt; Does your client support revocation?
&gt; &gt; Ka-Ping Yee says:
&gt; &gt; 
&gt; &gt; "Revocability.  The interface should allow the user to easily revoke
&gt; &gt; authorities that the user has granted, wherever revocation is
&gt; &gt; possible."
&gt; 
&gt; That will also be included in the review. An example of something that
&gt; unMessage does similarly is enabling presence. By default you do not
&gt; tell your contacts when you are online (i.e., you do not connect to
&gt; all of your contacts on startup), but it is possible to enable which
&gt; contacts you wish to notify (as well as disable).
&gt; 
&gt; Do you think the tasks for the project should be a mix of
&gt; code/structure and UI improvements?
&gt; 
&gt; P.S. I opened issues for all your suggestions and mentioned you on
&gt; all of them. I just realized that is probably very annoying - I'm
&gt; sorry for that. Let me know if you would like to copied though.
&gt; 
&gt; Thanks,
&gt; -Felipe



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402174251</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-04-02 17:42:51-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


On Sun, Apr 02, 2017 at 04:51:40PM +0000, dawuud wrote:
&gt; 
&gt; Hi. I registered with Google to be a GSoC mentor for Tor Project.
&gt; Hopefully Meejah will agree to be the backup mentor for this
&gt; and register today or tomorrow before the deadline on Monday.
&gt; 
&gt; Let me know if there's anything else timely that I must do for this.

Thanks David!

Here is the proposal I have so far. Please let me know what you think.
(It is also hosted at
https://gist.github.com/felipedau/8b48c6fde875e673f62d7569a27f254a)

I intend to upload to the GSoC website tonight and add updates until
the deadline.

Thanks,
-Felipe

# unMessage: an anonymity enhanced instant messenger

In an age where spying, surveillance and censorship evidently became
regular practices by various kinds of attackers, it is sensible to be
concerned about instant messaging applications, which are very popular
communication tools that handle private and identifying information.
Such a scenario demands solutions to prevent users from harm these
attacks might cause.

There are currently good solutions such as [Signal], [Wire] and
[OMEMO] apps that make end-to-end encrypted conversations possible.
Although such apps successfully provide privacy, they have a great
dependency on servers and metadata in order to work and they are not
able to provide anonymity. An app that solves this problem is
[Ricochet], by not having such dependencies. However, it heavily
relies on the transport it uses and does not offer its own encryption
layer.

[unMessage] is also one of those solutions: a peer-to-peer anonymity
enhanced instant messenger written in Python that I have been working
on for a while with [David Andersen] - my advisor. unMessage uses on
its own end-to-end encrypted [protocol] to maintain conversations,
focusing in not depending on servers, metadata and transport. We have
recently released an alpha version which should be easy for developers
to install and test its current features such as message exchanges,
authentication, and voice chat, but there is still a lot of work to do
in order to achieve a mature state where users can trust it due to its
properties and usability. As we believe unMessage has potential to
become a great anonymity enhancing app with a code that is simple,
readable and therefore easy to maintain, I propose to work on it
during this year's Google Summer of Code with the support of the Tor
Community to to make it closer to maturity. We expect to implement
fixes, improvements and features from our discussions (on its
[tracker] and [tor-dev]) in order to turn it into a maintainable,
feature-rich and useful app which everyone can benefit
from.

## Technologies

unMessage's features were possible with the use of the following
technologies:

- Transport makes use of [Twisted], [Tor Onion Services] and
  [txtorcon]

- Encryption is performed using the [Double Ratchet Algorithm]
  implemented in [pyaxo] - which uses [PyNaCl]

- Authentication makes use of the [Socialist Millionaire Protocol]
  implemented in [Cryptully]

- Transport metadata is minimized by Tor and application metadata by
  the unMessage [protocol]

- User interfaces are created with [Tkinter] for the [GUI] and
  [curses] for the [CLI]

- Voice chat uses the [Opus codec] for constant bitrate encoding

## Contributions

Since its current (alpha) release, we have been discussing it with
[Patrick Schleizer] and [HulaHoop] from [Whonix], who are making
great contributions to help us test it, as well as suggesting new
features and improvements. We are also working to run it on Whonix
(which will allow it to be run on Tails as well) with help from
[meejah] by adding a new feature to txtorcon to make unMessage (and
all the apps that use txtorcon) "Control Port Filter friendly".

Since the introduction of this project for GSoC, [dawuud] became
interested in contributing and mentoring it and assisted me on making
this proposal.

## Tasks

The project is split into tasks, each assigned an ID (in parenthesis)
that is used to compose the timeline. I have been generous with how
much time each task will demand and I am also leaving the whole week
of each evaluation to review and make sure the deliverables meet
expectations. Therefore, it is possible that I am able to work on
additional tasks in case they consume less time than planned.

### Improve setup script (T1)

This task will improve unMessage's `setup.py` by removing redundant
package metadata, use files for the requirements and offer development
requirements. This task will be tracked in [issue 35].

### Use attrs (T2)

[attrs] is used to simplify the code by removing boilerplate, make it
more concise, and consequently improve its quality. Classes
definitions will be modified to use attrs' declarations so that
attributes have default types and values, as well as validation. This
task will be tracked in [issue 34].

### Support file transfer (T3)

unMessage is able to support various elements of a conversation such
as requests, messages and authentication. New elements to transmit
file requests and the actual files will be added and handle by the
elements parser. This task will be tracked in [issue 12].
 
### Add a logger (T4)

There is currently no logging being done and in order to debug, the
only possible approach is using the UIs. A module will be added to
send logs to the terminal and a file. This task will be tracked in
[issue 30].

### Use automat (T5)

There are certain objects in unMessage that are state machines. Their
implementation are very simple and limited as initially they were not
designed as state machines. In order to turn them into real state
machines, [automat] will be used. This task will be tracked in
[issue 26].

#### Design the concept (T5A)

Before implementing, I will map the state machines to be created, draw
the graphs and have a clear understanding of their transitions and
behavior.

#### Use automat state machines (T5B)

With a design to follow once T5A is done, I will convert the objects
into automat state machines.

### Make functions/methods asynchronous (T6)

unMessage's initial implementation did not use Twisted and it had
pre-defined callbacks in order to continue the path of the action it
was performing. It later migrated to Twisted but the pre-defined
callbacks are still used. Such callbacks will be removed and the
functions that are part of these asynchronous actions will return
`Deferred`s to make an actual callback chain. This task will be
tracked in [issue 21].

### Add a test suite (T7)

There is not a single test written for unMessage and that is crucial
to continue its development. The test suite will be made with [pytest]
and will also use [hypothesis] for fuzzing/property tests. I do not
expect to achieve 100% converage, test the most important parts of
unMessage (mainly the `Peer` module). Also, as I am not familiar with
User Interface tests, these will not be part of the task (we are also
planning to use a different framework for the GUI, so its tests will
only be created after there is a decision). This task will be tracked
in [issue 33].

### Offline messages (T8)

As part of unMessage's design, no servers are used to establish and
maintain conversations. As a consequence, peer-to-peer communication
requires users to only be able to chat while both are online. Although
unMessage's protocol supports asynchronous communication, this
limitation forces conversations to be synchronous. In order to solve
this problem, a [Tahoe-LAFS] server will be used to temporarily store
unMessage's packets for peers that were not available when they were
sent and can be retrieved later once the peers are online. This task
will be tracked in [issue 32].
 
### Timeline

Tasks/Weeks | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12
------------+---+---+---+---+---+---+---+---+---+----+----+----
T1          | X |   |   |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T2          | X |   |   |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T3          | X |   |   |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T4          |   | X |   |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T5A         |   | X |   |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
Mid-term 1  |   |   | X |   |   |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T5B         |   |   |   | X | X |   |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T6          |   |   |   |   | X | X |   |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
Mid-term 2  |   |   |   |   |   |   | X |   |   |    |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T7          |   |   |   |   |   |   |   | X | X | X  |    |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
T8          |   |   |   |   |   |   |   |   |   |    | X  |   
------------+---+---+---+---+---+---+---+---+---+----+----+----
Final       |   |   |   |   |   |   |   |   |   |    |    | X 

# Background

I am a Senior studying Computer Engineering at the Federal
Technological University of Parana in Brazil. In January of 2014 I
went to the U.S. for an exchange program, which lasted until December.
During the Summer of that same year, I joined a research project lead
by David Andersen where I learned about Anonymous Communication and
became so attracted to the field that I continued to be part of the
project since then. We have mostly worked on [nymphemeral], [pyaxo],
[nymserv] and recently, unMessage. 

# Code sample

I have a few repositories on my [GitHub profile] and I recommend
taking a look at the ones referenced above, but specially [unMessage]
and [nymphemeral], which are the ones I have mostly worked on.

# Why The Tor Project?

As I mentioned, I have been studying Anonymous Communication for
almost three years now and I intend to keep doing it not only because
I enjoy it, but because it is an important field capable of helping
millions of people around the world.

In my opinion, The Tor Project is the biggest organization of its
kind and working with people responsible for software I run everyday
is a dream of every developer.

The Tor community continues to grow every day and I believe that
participating in the Google Summer of Code will also contribute to
that.

# Experiences with free software development environments

Since I joined the research project, I have been mostly working with
David Andersen on the projects I mentioned previously and git/GitHub
make our work a lot easier to work in parallel on the same code,
manage tickets to help us keep track of the development and interact
with contributors interested in what we do.

Whenever I see a project which I can contribute to, even if a it is a
small change, I open a ticket or make a pull request if I am able to.
My [GitHub profile] lists all my contributions.

PyNaCl is one of the recent projects I contributed to. While working
on pyaxo I noticed some of the encryption calls could be improved to
simplify their usage by making an argument optional. The developer
who reviewed the pull request was very positive about it and assisted
me while updating the docs to cover this new change.

While working on unMessage I asked Patrick Schleizer and HulaHoop for
help as it would be great to have it running on Whonix. We have had
great discussions and contributed to both projects in order to provide
this feature. Along with the development, some changes to txtorcon
were appreciated and we have also been working with meejah on that.

# Commitment

I have concluded all classes for my degree and I am currently
an industrial IT intern at an Engineering and Software company, which
is the only commitment I will have besides GSoC throught the duration
of the program. I intend to work on unMessage 5~6 hours on weekdays
and the remainder of the workload on weekends.

# Post GSoC

The tasks we picked to work on GSoC are a subset of all the ones we
have been discussing during unMessage's development, which means that
there will be more work to be done after GSoC. Also, unMessage is
quite a big project. There are lots of possibilities to explore in the
instant messaging field as well as many challenges to overcome when
offering an application with usability and features as good as the
popular ones, while protecting users' privacy and anonymity. I intend
to keep working on unMessage until we have an application that
accomplishes our goals.

Also, as I have been working with anonymous communication for a while,
I do not see myself going somewhere else soon, so the chances of
keeping contributing the Tor community are high.

# Communication

I intend to use IRC to discuss with my mentor and other tor devs (who
wish to contribute to the project) about ideas and actions to be
taken.

To formalize what is discussed on IRC, I will use unMessage's tracker
on GitHub to manage features/enhancements/issues to keep records and
maintain an organized environment for the development of the project,
as well as interact with contributors. I am suggesting this tracker as
we have already been using it for a while, but I can migrate to Tor's
Trac if needed.

To summarize everything, I will do what seems to have worked well for
previous students: regular reports on the mailing list to keep people
updated with what is happening on the project from a higher level.

## Contact info

OFTC: dau

Email: dau@riseup.net

PGP: 0xC5A49047572A0D47

# Other GSoC projects in mind?

I am only applying to this one.

# Anything else?

I encourage you to take a look at the git logs and issue trackers from
[unMessage], [nymphemeral] and [pyaxo]. I think I am a very organized
developer and I have been trying my best to follow the gitflow model
and take advantage of the features offered by GitHub.

[attrs]: https://attrs.readthedocs.io
[automat]: https://github.com/glyph/automat
[cli]: https://unmessage.readthedocs.io/en/latest/cli/cli.html
[cryptully]: https://github.com/shanet/Cryptully
[curses]: https://docs.python.org/2/library/curses.html
[david andersen]: https://github.com/rxcomm
[dawuud]: https://github.com/david415
[documentation]: https://unmessage.readthedocs.io
[double ratchet algorithm]: https://whispersystems.org/docs/specifications/doubleratchet
[github profile]: https://github.com/felipedau
[gui]: https://unmessage.readthedocs.io/en/latest/gui/gui.html
[hulahoop]: https://github.com/HulaHoopWhonix
[hypothesis]: https://hypothesis.readthedocs.io
[issue 12]: https://github.com/AnemoneLabs/unmessage/issues/12
[issue 21]: https://github.com/AnemoneLabs/unmessage/issues/21
[issue 26]: https://github.com/AnemoneLabs/unmessage/issues/26
[issue 30]: https://github.com/AnemoneLabs/unmessage/issues/30
[issue 32]: https://github.com/AnemoneLabs/unmessage/issues/32
[issue 33]: https://github.com/AnemoneLabs/unmessage/issues/33
[issue 34]: https://github.com/AnemoneLabs/unmessage/issues/34
[issue 35]: https://github.com/AnemoneLabs/unmessage/issues/35
[meejah]: https://github.com/meejah
[nymphemeral]: https://github.com/felipedau/nymphemeral
[nymserv]: https://github.com/rxcomm/nymserv
[omemo]: https://conversations.im/omemo
[opus codec]: https://opus-codec.org
[patrick schleizer]: https://github.com/adrelanos
[protocol]: https://unmessage.readthedocs.io/en/latest/protocol.html
[pyaxo]: https://github.com/rxcomm/pyaxo
[pynacl]: https://github.com/pyca/pynacl
[pytest]: http://docs.pytest.org
[ricochet]: https://ricochet.im
[signal]: https://whispersystems.org
[socialist millionaire protocol]: https://en.wikipedia.org/wiki/Socialist_millionaire
[tahoe-lafs]: https://github.com/tahoe-lafs/tahoe-lafs
[tkinter]: https://docs.python.org/2/library/tkinter.html
[tor onion services]: https://www.torproject.org/docs/hidden-services.html
[tor-dev]: https://lists.torproject.org/pipermail/tor-dev
[tracker]: https://github.com/AnemoneLabs/unmessage/issues
[twisted]: https://twistedmatrix.com
[txtorcon]: https://github.com/meejah/txtorcon
[unmessage]: https://github.com/AnemoneLabs/unmessage
[whonix]: https://whonix.org
[wire]: https://wire.com

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403051003</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-04-03 05:10:03-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

On 1 April 2017 at 09:22, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; Hi Tom,
&gt; I've updated Proposal[1] according to your recommendations.
&gt;
&gt; 1) https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/

Looks good to me!

&gt; 2017-03-31 19:46 GMT+03:00 Tom Ritter &lt;tom@ritter.vg&gt;:
&gt;&gt;
&gt;&gt; On 31 March 2017 at 10:27, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt;&gt; &gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt;&gt; &gt;&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt;&gt; &gt;&gt; _should_ create these features, but here are a few I brainstormed:
&gt;&gt; &gt;
&gt;&gt; &gt; Yes, actually that form only shows "Key: Value" list, we can break it
&gt;&gt; &gt; down
&gt;&gt; &gt; in several GroupBoxes which consist of grouped data field and checkboxes
&gt;&gt; &gt; to
&gt;&gt; &gt; include.
&gt;&gt; &gt;
&gt;&gt; &gt;&gt; Let's try and avoid GDocs if you don't mind :)
&gt;&gt; &gt;
&gt;&gt; &gt; Sorry :) I already registered on storm, but I had no access to create.
&gt;&gt; &gt; Thanks for review, I'll update proposal accordint to your requiments.
&gt;&gt;
&gt;&gt; No worries.
&gt;&gt;
&gt;&gt; &gt; And question: could we throw Windows or MacOS or both versions from
&gt;&gt; &gt; timeline, and develop them after summer?
&gt;&gt;
&gt;&gt; Yes, I think that's fine. I think getting one platform to completion
&gt;&gt; would be a great accomplishment and would lay the groundwork and
&gt;&gt; improve the momentum to getting the subsequent platforms there.
&gt;&gt;
&gt;&gt; -tom
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403054200</emailId><senderName>Antonio Groza</senderName><senderEmail>antoniogroza@gmail.com</senderEmail><timestampReceived>2017-04-03 05:42:00-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


It would be cool to build the browser with
https://github.com/google/sanitizers this way you could get bug reports for
bugs that don't panic the browser

Il lun 3 apr 2017, 07:10 Tom Ritter &lt;tom@ritter.vg&gt; ha scritto:

&gt; On 1 April 2017 at 09:22, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt; Hi Tom,
&gt; &gt; I've updated Proposal[1] according to your recommendations.
&gt; &gt;
&gt; &gt; 1) https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/
&gt;
&gt; Looks good to me!
&gt;
&gt; &gt; 2017-03-31 19:46 GMT+03:00 Tom Ritter &lt;tom@ritter.vg&gt;:
&gt; &gt;&gt;
&gt; &gt;&gt; On 31 March 2017 at 10:27, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt;&gt; &gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt; &gt;&gt; &gt;&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt; &gt;&gt; &gt;&gt; _should_ create these features, but here are a few I brainstormed:
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Yes, actually that form only shows "Key: Value" list, we can break it
&gt; &gt;&gt; &gt; down
&gt; &gt;&gt; &gt; in several GroupBoxes which consist of grouped data field and
&gt; checkboxes
&gt; &gt;&gt; &gt; to
&gt; &gt;&gt; &gt; include.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt;&gt; Let's try and avoid GDocs if you don't mind :)
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Sorry :) I already registered on storm, but I had no access to create.
&gt; &gt;&gt; &gt; Thanks for review, I'll update proposal accordint to your requiments.
&gt; &gt;&gt;
&gt; &gt;&gt; No worries.
&gt; &gt;&gt;
&gt; &gt;&gt; &gt; And question: could we throw Windows or MacOS or both versions from
&gt; &gt;&gt; &gt; timeline, and develop them after summer?
&gt; &gt;&gt;
&gt; &gt;&gt; Yes, I think that's fine. I think getting one platform to completion
&gt; &gt;&gt; would be a great accomplishment and would lay the groundwork and
&gt; &gt;&gt; improve the momentum to getting the subsequent platforms there.
&gt; &gt;&gt;
&gt; &gt;&gt; -tom
&gt; &gt;&gt; _______________________________________________
&gt; &gt;&gt; tor-dev mailing list
&gt; &gt;&gt; tor-dev@lists.torproject.org
&gt; &gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;p dir="ltr"&gt;It would be cool to build the browser with &lt;a \
href="https://github.com/google/sanitizers"&gt;https://github.com/google/sanitizers&lt;/a&gt; \
this way you could get bug reports for bugs that don't panic the browser&lt;/p&gt; \
&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;Il lun 3 apr 2017, 07:10 Tom Ritter \
&lt;&lt;a href="mailto:tom@ritter.vg"&gt;tom@ritter.vg&lt;/a&gt;&gt; ha \
scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On 1 April 2017 at 09:22, \
Nur-Magomed &lt;&lt;a href="mailto:nmagoru@gmail.com" class="gmail_msg" \
target="_blank"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br class="gmail_msg"&gt; &gt; Hi \
Tom,&lt;br class="gmail_msg"&gt; &gt; I've updated Proposal[1] according to your \
recommendations.&lt;br class="gmail_msg"&gt; &gt;&lt;br class="gmail_msg"&gt;
&gt; 1) &lt;a href="https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/" \
rel="noreferrer" class="gmail_msg" \
target="_blank"&gt;https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; &lt;br class="gmail_msg"&gt;
Looks good to me!&lt;br class="gmail_msg"&gt;
&lt;br class="gmail_msg"&gt;
&gt; 2017-03-31 19:46 GMT+03:00 Tom Ritter &lt;&lt;a href="mailto:tom@ritter.vg" \
class="gmail_msg" target="_blank"&gt;tom@ritter.vg&lt;/a&gt;&gt;:&lt;br class="gmail_msg"&gt; \
&gt;&gt;&lt;br class="gmail_msg"&gt; &gt;&gt; On 31 March 2017 at 10:27, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com" class="gmail_msg" \
target="_blank"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br class="gmail_msg"&gt; &gt;&gt; \
&gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view \
is&lt;br class="gmail_msg"&gt; &gt;&gt; &gt;&gt; small and obtuse and it's not easy to \
review. I'm not saying we&lt;br class="gmail_msg"&gt; &gt;&gt; &gt;&gt; _should_ create \
these features, but here are a few I brainstormed:&lt;br class="gmail_msg"&gt; &gt;&gt; \
&gt;&lt;br class="gmail_msg"&gt; &gt;&gt; &gt; Yes, actually that form only shows \
"Key: Value" list, we can break it&lt;br class="gmail_msg"&gt; &gt;&gt; &gt; \
down&lt;br class="gmail_msg"&gt; &gt;&gt; &gt; in several GroupBoxes which consist of \
grouped data field and checkboxes&lt;br class="gmail_msg"&gt; &gt;&gt; &gt; to&lt;br \
class="gmail_msg"&gt; &gt;&gt; &gt; include.&lt;br class="gmail_msg"&gt;
&gt;&gt; &gt;&lt;br class="gmail_msg"&gt;
&gt;&gt; &gt;&gt; Let's try and avoid GDocs if you don't mind :)&lt;br \
class="gmail_msg"&gt; &gt;&gt; &gt;&lt;br class="gmail_msg"&gt;
&gt;&gt; &gt; Sorry :) I already registered on storm, but I had no access to \
create.&lt;br class="gmail_msg"&gt; &gt;&gt; &gt; Thanks for review, I'll update \
proposal accordint to your requiments.&lt;br class="gmail_msg"&gt; &gt;&gt;&lt;br \
class="gmail_msg"&gt; &gt;&gt; No worries.&lt;br class="gmail_msg"&gt;
&gt;&gt;&lt;br class="gmail_msg"&gt;
&gt;&gt; &gt; And question: could we throw Windows or MacOS or both versions from&lt;br \
class="gmail_msg"&gt; &gt;&gt; &gt; timeline, and develop them after summer?&lt;br \
class="gmail_msg"&gt; &gt;&gt;&lt;br class="gmail_msg"&gt;
&gt;&gt; Yes, I think that's fine. I think getting one platform to completion&lt;br \
class="gmail_msg"&gt; &gt;&gt; would be a great accomplishment and would lay the \
groundwork and&lt;br class="gmail_msg"&gt; &gt;&gt; improve the momentum to getting the \
subsequent platforms there.&lt;br class="gmail_msg"&gt; &gt;&gt;&lt;br class="gmail_msg"&gt;
&gt;&gt; -tom&lt;br class="gmail_msg"&gt;
&gt;&gt; _______________________________________________&lt;br class="gmail_msg"&gt;
&gt;&gt; tor-dev mailing list&lt;br class="gmail_msg"&gt;
&gt;&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" class="gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class="gmail_msg"&gt; &gt;&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="gmail_msg" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; &gt;&lt;br class="gmail_msg"&gt;
&gt;&lt;br class="gmail_msg"&gt;
&gt;&lt;br class="gmail_msg"&gt;
&gt; _______________________________________________&lt;br class="gmail_msg"&gt;
&gt; tor-dev mailing list&lt;br class="gmail_msg"&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" class="gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class="gmail_msg"&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="gmail_msg" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; &gt;&lt;br class="gmail_msg"&gt;
_______________________________________________&lt;br class="gmail_msg"&gt;
tor-dev mailing list&lt;br class="gmail_msg"&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" class="gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class="gmail_msg"&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="gmail_msg" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class="gmail_msg"&gt; &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402145051</emailId><senderName>Veer Kalantri</senderName><senderEmail>mads.531998@gmail.com</senderEmail><timestampReceived>2017-04-02 14:50:51-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Feedback Extension for Tor Browser</subject><body>

[Attachment #2 (multipart/alternative)]


Plz send the link of your draft Jayanti so I can submit my draft by
reviving your format..

Best,
Veer

On 02-Apr-2017 8:02 PM, "Jayati Dev" &lt;devjayati@outlook.com&gt; wrote:

&gt; Dear Mentors,
&gt;
&gt;
&gt; I am a final year student in Electronics and Communication Engineering,
&gt; and I wanted to work on the 'Feedback Extension for Tor Browser' project as
&gt; a part of GSoC 2017. I have been working on the design and implementation
&gt; of the extension here https://github.com/devjayati/TestExtension (which
&gt; also serves as a qualifcation task). I have also made a draft proposal and
&gt; submitted it for review.
&gt;
&gt;
&gt; If there isn't anyone already assigned to the project, it would be
&gt; wonderful if you could please consider my proposal and also comment on the
&gt; draft.
&gt;
&gt;
&gt; Sincerely,
&gt;
&gt; Jayati Dev
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Plz send the link of your draft Jayanti so I can submit my draft by \
reviving your format..&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Best,&lt;/div&gt;&lt;div \
dir="auto"&gt;Veer&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On \
02-Apr-2017 8:02 PM, "Jayati Dev" &lt;&lt;a \
href="mailto:devjayati@outlook.com"&gt;devjayati@outlook.com&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;




&lt;div dir="ltr"&gt;
&lt;div id="m_-285994162045118669divtagdefaultwrapper" dir="ltr" \
style="font-size:12pt;color:#000000;font-family:Calibri,Arial,Helvetica,sans-serif"&gt; \
&lt;p&gt;Dear Mentors,   &lt;/p&gt; &lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;I am a final year student in Electronics and Communication Engineering, and I \
wanted to work on the 'Feedback Extension for Tor Browser' project as a part \
of GSoC 2017. I have been working on the design and implementation of the extension \
here  &lt;a href="https://github.com/devjayati/TestExtension" \
class="m_-285994162045118669OWAAutoLink" id="m_-285994162045118669LPlnk374569" \
target="_blank"&gt;https://github.com/&lt;wbr&gt;devjayati/TestExtension&lt;/a&gt;  (which  also \
serves as a qualifcation task). I have also made a draft proposal and submitted it \
for review.  &lt;/p&gt; &lt;p&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;If there isn't anyone already assigned to the project, it would be wonderful \
if you could  please consider my proposal and also comment on the draft.  &lt;/p&gt; \
&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;Jayati Dev&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402160149</emailId><senderName>Allen Gunn</senderName><senderEmail>gunner@aspirationtech.org</senderEmail><timestampReceived>2017-04-02 16:01:49-0400</timestampReceived><subject>Re: [tor-dev] Tor in a safer language: Network team update from Amsterdam</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Howdy,

Thanks for making these points. They made me realize that this initiative:

http://bootstrappable.org/

Might not be on folks' radars.

It was an outcome of the last Reproducible Builds Summit in December [1].

It just does a good job of articulating problems and proposed some
possible collaborative steps forward.

peace,
gunner

[1] https://reproducible-builds.org/events/

On 04/01/2017 06:54 PM, zaki@manian.org wrote:
&gt; Rust seems like the best available choice for Tor in a safer language.
&gt; 
&gt; Rust has several issues with securely obtaining a Rust toolchain that
&gt; the Tor community should be attentive to.
&gt; 
&gt; Rust is a self hosted compiler. Building Rust requires obtaining
&gt; binaries for a recent Rust compiler. The Rust toolchain is vulnerable to
&gt; a "trusting trust" attack. Manish made a prototype and discussed future
&gt; mitigations.[0]
&gt; 
&gt; The Rust toolchain is built by an automated continuous integration
&gt; system and distributed without human verification or intervention.
&gt; Rust's build artifacts distributed by the RustUp tool are only
&gt; authenticated by TLS certificates. RustUp Github issue 241 discusses a
&gt; mitigation to address some of these concerns but development seems to be
&gt; stalled.[1]
&gt; 
&gt; 
&gt; [0] https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/
&gt; [1] https://github.com/rust-lang-nursery/rustup.rs/issues/241
&gt; 
&gt; 
&gt; 
&gt; On Fri, Mar 31, 2017 at 2:23 PM Sebastian Hahn &lt;sebastian@torproject.org
&gt; &lt;mailto:sebastian@torproject.org&gt;&gt; wrote:
&gt; 
&gt;     Hi there tor-dev,
&gt; 
&gt;     as an update to those who didn't have the chance to meet with us in
&gt;     Amsterdam or those who haven't followed the efforts to rely on C less,
&gt;     here's what happened at the "let's not fight about Go versus Rust, but
&gt;     talk about how to migrate Tor to a safer language" session and what
&gt;     happened after.
&gt; 
&gt;     Notes from session:
&gt; 
&gt;     We didn't fight about Rust or Go or modern C++. Instead, we focused on
&gt;     identifying goals for migrating Tor to a memory-safe language, and how
&gt;     to get there. With that frame of reference, Rust emerged as a extremely
&gt;     strong candidate for the incremental improvement style that we
&gt;     considered necessary. We were strongly advised to not use cgo, by people
&gt;     who have used it extensively.
&gt; 
&gt;     As there are clearly a lot of unknowns with this endeavor, and a lot
&gt;     that we will learn/come up against along the way, we feel that Rust is a
&gt;     compelling option to start with,  with the caveat that we will first
&gt;     experiment, learn from the experience, and then build on what we learn.
&gt; 
&gt;     You can also check out the session notes on the wiki (submitted, but not
&gt;     posted yet).[1]
&gt; 
&gt;     The real fun part started after the session. We got together to actually
&gt;     make a plan for an experiment and to give Rust a serious chance. We
&gt;     quickly got a few trivial things working like statically linking Rust
&gt;     into Tor, integrating with the build system to call out to cargo for the
&gt;     Rust build, and using Tor's allocator from Rust.
&gt; 
&gt;     We're planning to write up a blog post summarizing our experiences so
&gt;     far while hopefully poking the Rust developers to prioritize the missing
&gt;     features so we can stop using nightly Rust soon (~months, instead of
&gt;     years).
&gt; 
&gt;     We want to have a patch merged into tor soon so you can all play with
&gt;     your dev setup to help identify any challenges. We want to stress that
&gt;     this is an optional experiment for now, we would love feedback but
&gt;     nobody is paid to work on this and nobody is expected to spend more
&gt;     time than they have sitting around.
&gt; 
&gt;     We have committed to reviewing any patch that includes any Rust code to
&gt;     provide feedback, get experience to develop a style, and actually make
&gt;     use of this experiment. This means we're not ready to take on big
&gt;     patches that add lots of tricky stuff quite now, we want to take it slow
&gt;     and learn from this.
&gt; 
&gt;     We would like to do a session at the next dev meeting to give updates on
&gt;     this effort, but in the meantime, if team members would like to start
&gt;     learning Rust and helping us identify/implement small and well-isolated
&gt;     areas to begin migration, or new pieces of functionality that we can
&gt;     build  immediately in Rust, that would be really great.
&gt; 
&gt;     So, for a TLDR:
&gt; 
&gt;     What has already been done:
&gt;     - Rust in Tor build
&gt;     - Putting together environment setup instructions and a (very small)
&gt;      initial draft for coding standards
&gt;     - Initial work to identify good candidates for migration (not tightly
&gt;      interdependent)
&gt; 
&gt;     What we think are next steps:
&gt;     - Define conventions for the API boundary between Rust and C
&gt;     - Add a non-trivial Rust API and deploy with a flag to optionally use
&gt;      (to test support with a safe fallback)
&gt;     - Learn from similar projects
&gt;     - Add automated tooling for Rust, such as linting and testing
&gt; 
&gt; 
&gt;     Cheers
&gt;     Alex, Chelsea, Sebastian
&gt; 
&gt;     [1]: Will be visible here
&gt;     https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes
&gt;     _______________________________________________
&gt;     tor-dev mailing list
&gt;     tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt;     https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

-- 

Allen Gunn
Executive Director, Aspiration
+1.415.216.7252
www.aspirationtech.org

Aspiration: "Better Tools for a Better World"

Read our Manifesto: http://aspirationtech.org/publications/manifesto

Twitter:  www.twitter.com/aspirationtech

--


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403132333</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-04-03 13:23:33-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

[Attachment #2 (multipart/alternative)]


Tom, thanks for review,
I've sent the proposal final version through gsoc site.

__

&gt;It would be cool to build the browser with https://github.com/google/sani
tizers this way you could get bug reports for bugs that don't &gt;panic the
browser

Hi Antonio,
Thanks for your reply!
I've add it to the proposal as optional.


2017-04-03 8:42 GMT+03:00 Antonio Groza &lt;antoniogroza@gmail.com&gt;:

&gt; It would be cool to build the browser with https://github.com/google/sani
&gt; tizers this way you could get bug reports for bugs that don't panic the
&gt; browser
&gt;
&gt; Il lun 3 apr 2017, 07:10 Tom Ritter &lt;tom@ritter.vg&gt; ha scritto:
&gt;
&gt;&gt; On 1 April 2017 at 09:22, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt;&gt; &gt; Hi Tom,
&gt;&gt; &gt; I've updated Proposal[1] according to your recommendations.
&gt;&gt; &gt;
&gt;&gt; &gt; 1) https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/
&gt;&gt;
&gt;&gt; Looks good to me!
&gt;&gt;
&gt;&gt; &gt; 2017-03-31 19:46 GMT+03:00 Tom Ritter &lt;tom@ritter.vg&gt;:
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt; On 31 March 2017 at 10:27, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt;&gt; &gt;&gt; &gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt;&gt; &gt;&gt; &gt;&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt;&gt; &gt;&gt; &gt;&gt; _should_ create these features, but here are a few I brainstormed:
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; Yes, actually that form only shows "Key: Value" list, we can break it
&gt;&gt; &gt;&gt; &gt; down
&gt;&gt; &gt;&gt; &gt; in several GroupBoxes which consist of grouped data field and
&gt;&gt; checkboxes
&gt;&gt; &gt;&gt; &gt; to
&gt;&gt; &gt;&gt; &gt; include.
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt;&gt; Let's try and avoid GDocs if you don't mind :)
&gt;&gt; &gt;&gt; &gt;
&gt;&gt; &gt;&gt; &gt; Sorry :) I already registered on storm, but I had no access to
&gt;&gt; create.
&gt;&gt; &gt;&gt; &gt; Thanks for review, I'll update proposal accordint to your requiments.
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt; No worries.
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt; &gt; And question: could we throw Windows or MacOS or both versions from
&gt;&gt; &gt;&gt; &gt; timeline, and develop them after summer?
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt; Yes, I think that's fine. I think getting one platform to completion
&gt;&gt; &gt;&gt; would be a great accomplishment and would lay the groundwork and
&gt;&gt; &gt;&gt; improve the momentum to getting the subsequent platforms there.
&gt;&gt; &gt;&gt;
&gt;&gt; &gt;&gt; -tom
&gt;&gt; &gt;&gt; _______________________________________________
&gt;&gt; &gt;&gt; tor-dev mailing list
&gt;&gt; &gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; &gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; _______________________________________________
&gt;&gt; &gt; tor-dev mailing list
&gt;&gt; &gt; tor-dev@lists.torproject.org
&gt;&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt; &gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Tom, thanks for review, &lt;br&gt;I've sent the proposal final \
version through gsoc site.&lt;br&gt;&lt;br&gt;__&lt;br&gt;&lt;br&gt;&gt;It would be cool to build the browser \
with &lt;a href="https://github.com/google/sanitizers" \
target="_blank"&gt;https://github.com/google/sani&lt;wbr&gt;tizers&lt;/a&gt; this way you could get \
bug reports for bugs that don't &gt;panic the browser&lt;br&gt;&lt;br&gt;&lt;/div&gt;Hi \
Antonio,&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for your reply!&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've add it to the \
proposal as optional.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2017-04-03 8:42 GMT+03:00 Antonio Groza &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:antoniogroza@gmail.com" \
target="_blank"&gt;antoniogroza@gmail.com&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;p dir="ltr"&gt;It would be cool to build the browser with &lt;a \
href="https://github.com/google/sanitizers" \
target="_blank"&gt;https://github.com/google/sani&lt;wbr&gt;tizers&lt;/a&gt; this way you could get \
bug reports for bugs that don't panic the browser&lt;/p&gt;&lt;div \
class="m_6262978377727755312HOEnZb"&gt;&lt;div class="m_6262978377727755312h5"&gt; &lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;Il lun 3 apr 2017, 07:10 Tom Ritter &lt;&lt;a \
href="mailto:tom@ritter.vg" target="_blank"&gt;tom@ritter.vg&lt;/a&gt;&gt; ha \
scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On 1 April 2017 at 09:22, \
Nur-Magomed &lt;&lt;a href="mailto:nmagoru@gmail.com" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; Hi Tom,&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; I've updated \
Proposal[1] according to your recommendations.&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; 1) &lt;a \
href="https://storm.torproject.org/grain/ECCJ3Taeq93qCvPJoWJkkY/" rel="noreferrer" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;https://storm.torproject.org/g&lt;wbr&gt;rain/ECCJ3Taeq93qCvPJoWJkkY/&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; Looks good to me!&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; 2017-03-31 19:46 \
GMT+03:00 Tom Ritter &lt;&lt;a href="mailto:tom@ritter.vg" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;tom@ritter.vg&lt;/a&gt;&gt;:&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; On 31 March \
2017 at 10:27, Nur-Magomed &lt;&lt;a href="mailto:nmagoru@gmail.com" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt;&gt; I \
think we'd want to enhance this form. IIRC the 'Details' view is&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt;&gt; small \
and obtuse and it's not easy to review. I'm not saying we&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt;&gt; \
_should_ create these features, but here are a few I brainstormed:&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; Yes, \
actually that form only shows "Key: Value" list, we can break it&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; down&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; in several \
GroupBoxes which consist of grouped data field and checkboxes&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; to&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; \
include.&lt;br class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; \
&gt;&lt;br class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; \
&gt;&gt; Let's try and avoid GDocs if you don't mind :)&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; Sorry :) I \
already registered on storm, but I had no access to create.&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; Thanks for \
review, I'll update proposal accordint to your requiments.&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; No worries.&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; And \
question: could we throw Windows or MacOS or both versions from&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &gt; timeline, \
and develop them after summer?&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; Yes, I think \
that's fine. I think getting one platform to completion&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; would be a \
great accomplishment and would lay the groundwork and&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; improve the \
momentum to getting the subsequent platforms there.&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; -tom&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; \
______________________________&lt;wbr&gt;_________________&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; tor-dev mailing \
list&lt;br class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; \
______________________________&lt;wbr&gt;_________________&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; tor-dev mailing \
list&lt;br class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; \
______________________________&lt;wbr&gt;_________________&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; tor-dev mailing list&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
class="m_6262978377727755312m_2826442817836053732gmail_msg" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br \
class="m_6262978377727755312m_2826442817836053732gmail_msg"&gt; &lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403151822</emailId><senderName>Felipe Dau</senderName><senderEmail>dau@riseup.net</senderEmail><timestampReceived>2017-04-03 15:18:22-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

[Attachment #2 (multipart/signed)]


Here is an update with the final proposal I submitted to GSoC.

Thanks,
-Felipe

# unMessage: an anonymity enhanced instant messenger

In an age where spying, surveillance and censorship evidently became
regular practices by various kinds of attackers, it is sensible to be
concerned about instant messaging applications, which are very popular
communication tools that handle private and identifying information.
Such a scenario demands solutions to prevent users from harm these
attacks might cause.

There are currently good solutions such as [Signal], [Wire] and
[OMEMO] apps that make end-to-end encrypted conversations possible.
Although such apps successfully provide privacy, they have a great
dependency on servers and metadata in order to work and they are not
able to provide anonymity. An app that solves this problem is
[Ricochet], by not having such dependencies. However, it heavily
relies on the transport it uses and does not offer its own encryption
layer.

[unMessage] is also one of those solutions: a peer-to-peer anonymity
enhanced instant messenger written in Python that I have been working
on for a while with [David Andersen] - my advisor. unMessage uses its
own end-to-end encrypted [protocol] to maintain conversations,
focusing in not depending on servers, metadata and transport. We have
recently released an alpha version which should be easy for developers
to install and test its current features such as message exchanges,
authentication, and voice chat, but there is still a lot of work to do
in order to achieve a mature state where users can trust it due to its
properties and usability. As we believe unMessage has potential to
become a great anonymity enhancing app with a code that is simple,
readable and therefore easy to maintain, I propose to work on it
during this year's Google Summer of Code with the support of the Tor
Community to to make it closer to maturity. We expect to implement
fixes, improvements and features from our discussions (on its
[tracker] and [tor-dev]) in order to turn it into a maintainable,
feature-rich and useful app which everyone can benefit
from.

## Technologies

unMessage's features were possible with the use of the following
technologies:

- Transport makes use of [Twisted], [Tor Onion Services] and
  [txtorcon]

- Encryption is performed using the [Double Ratchet Algorithm]
  implemented in [pyaxo] - which uses [PyNaCl]

- Authentication makes use of the [Socialist Millionaire Protocol]
  implemented in [Cryptully]

- Transport metadata is minimized by Tor and application metadata by
  the unMessage [protocol]

- User interfaces are created with [Tkinter] for the [GUI] and
  [curses] for the [CLI]

- Voice chat uses the [Opus codec] for constant bitrate encoding

## Contributions

Since its current (alpha) release, we have been discussing it with
[Patrick Schleizer] and [HulaHoop] from [Whonix], who are making
great contributions to help us test it, as well as suggesting new
features and improvements. We are also working to run it on Whonix
(which will allow it to be run on Tails as well) with help from
[meejah] by adding a new feature to txtorcon to make unMessage (and
all the apps that use txtorcon) "Control Port Filter friendly".

Since the introduction of this project for GSoC, [dawuud] and [meejah]
became interested in contributing and mentoring it and also assisted
me on making this proposal.

## Tasks

The project is split into tasks, each assigned an ID (in parenthesis)
that is used to compose the timeline. I have been generous with how
much time each task will demand and I am also leaving the whole week
of each evaluation to review and make sure the deliverables meet
expectations. Therefore, it is possible that I am able to work on
additional tasks in case they consume less time than planned.

### Improve setup script (T1)

This task will improve unMessage's `setup.py` by removing redundant
package metadata, use files for the requirements and offer development
requirements. This task will be tracked in [issue 35].

### Use attrs (T2)

[attrs] is used to simplify the code by removing boilerplate, make it
more concise, and consequently improve its quality. Classes
definitions will be modified to use attrs' declarations so that
attributes have default types and values, as well as validation. This
task will be tracked in [issue 34].

### Support file transfer (T3)

unMessage is able to support various elements of a conversation such
as requests, messages and authentication. New elements to transmit
file requests and the actual files will be added and handle by the
elements parser. This task will be tracked in [issue 12].
 
### Add a logger (T4)

There is currently no logging being done and in order to debug, the
only possible approach is using the UIs. A module will be added to
send logs to the terminal and a file. This task will be tracked in
[issue 30].

### Make functions/methods asynchronous (T5)

unMessage's initial implementation did not use Twisted and it had
pre-defined callbacks in order to continue the path of the action it
was performing. It later migrated to Twisted but the pre-defined
callbacks are still used. Such callbacks will be removed and the
functions that are part of these asynchronous actions will return
`Deferred`s to make an actual callback chain. This task will be
tracked in [issue 21].

*This task will be split into two (T5A and T5B) as it poses a higher
level of complexity. I intend to deliver its first version, receive
feedback from mentors and make another iteration so that it meets our
expectations.*

### Add a test suite (T6)

There is not a single test written for unMessage and that is crucial
to continue its development. The test suite will be made with [pytest]
and will also use [hypothesis] for fuzzing/property tests. Not only
tests will be written, but some parts of the code will be refactored.
I do not expect to achieve 100% converage, but test the most important
parts of unMessage (mainly the `peer` module). Also, as I am not
familiar with User Interface tests, these will not be part of the task
(we are also planning to use a different framework for the GUI, so its
tests will only be created after there is a decision). This task will
be tracked in [issue 33].

*This task will be split into two (T6A and T6B) as it poses a higher
level of complexity. I intend to deliver its first version, receive
feedback from mentors and make another iteration so that it meets our
expectations.*

### Deliverables

- Mid-term 1: Tasks 1, 2, 3 and 4
- Mid-term 2: Tasks 5A and 6A
- Final: Tasks 5B and 6B

### Timeline

Tasks/Weeks | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T1          | X |   |   |   |   |   |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T2          | X |   |   |   |   |   |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T3          | X | X |   |   |   |   |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T4          |   | X | X |   |   |   |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T5A         |   |   |   | X |   | X |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
Mid-term 1  |   |   |   |   | X |   |   |   |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T6A         |   |   |   |   |   |   | X | X |   |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
Mid-term 2  |   |   |   |   |   |   |   |   | X |    |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T5B         |   |   |   |   |   |   |   |   |   | X  |    |    |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
T6B         |   |   |   |   |   |   |   |   |   |    | X  | X  |
------------+---+---+---+---+---+---+---+---+---+----+----+----+----
Final       |   |   |   |   |   |   |   |   |   |    |    |    | X

### Stretch goals

As mentioned in the previous section, depending on how the development
of each task it is possible that there will be more time avaialable to
work on other ones. We would like to prioritize The following tasks in
case that happens.

#### Use automat 

There are certain objects in unMessage that are state machines. Their
implementation are very simple and limited as initially they were not
designed as state machines. In order to turn them into real state
machines, [automat] will be used. This task will be tracked in
[issue 26].

#### Offline messages 

As part of unMessage's design, no servers are used to establish and
maintain conversations. As a consequence, peer-to-peer communication
requires users to only be able to chat while both are online. Although
unMessage's protocol supports asynchronous communication, this
limitation forces conversations to be synchronous. In order to solve
this problem, a [Tahoe-LAFS] grid will be used to temporarily store
unMessage's packets for peers that were not available when they were
sent and can be retrieved later once the peers are online. This task
will be tracked in [issue 32].

# Background

I am a Senior studying Computer Engineering at the Federal
Technological University of Parana in Brazil. In January of 2014 I
went to the U.S. for an exchange program, which lasted until December.
During the Summer of that same year, I joined a research project lead
by David Andersen where I learned about Anonymous Communication and
became so attracted to the field that I continued to be part of the
project since then. We have mostly worked on [nymphemeral], [pyaxo],
[nymserv] and recently, unMessage. 

# Code sample

I have a few repositories on my [GitHub profile] and I recommend
taking a look at the ones referenced above, but specially [unMessage]
and [nymphemeral], which are the ones I have mostly worked on.

# Why The Tor Project?

As I mentioned, I have been studying Anonymous Communication for
almost three years now and I intend to keep doing it not only because
I enjoy it, but because it is an important field capable of helping
millions of people around the world.

In my opinion, The Tor Project is the biggest organization of its
kind and working with people responsible for software I run everyday
is a dream of every developer.

The Tor community continues to grow every day and I believe that
participating in the Google Summer of Code will also contribute to
that.

# Experiences with free software development environments

Since I joined the research project, I have been mostly working with
David Andersen on the projects I mentioned previously and git/GitHub
make our work a lot easier to work in parallel on the same code,
manage tickets to help us keep track of the development and interact
with contributors interested in what we do.

Whenever I see a project which I can contribute to, even if a it is a
small change, I open a ticket or make a pull request if I am able to.
My [GitHub profile] lists all my contributions.

PyNaCl is one of the recent projects I contributed to. While working
on pyaxo I noticed some of the encryption calls could be improved to
simplify their usage by making an argument optional. The developer
who reviewed the pull request was very positive about it and assisted
me while updating the docs to cover this new change.

While working on unMessage I asked Patrick Schleizer and HulaHoop for
help as it would be great to have it running on Whonix. We have had
great discussions and contributed to both projects in order to provide
this feature. Along with the development, some changes to txtorcon
were appreciated and we have also been working with meejah on that.

# Commitment

I have concluded all classes for my degree and I am currently
an industrial IT intern at an Engineering and Software company, which
is the only commitment I will have besides GSoC throught the duration
of the program. I intend to work on unMessage 5~6 hours on weekdays
and the remainder of the workload on weekends.

# Post GSoC

The tasks we picked to work on GSoC are a subset of all the ones we
have been discussing during unMessage's development, which means that
there will be more work to be done after GSoC. Also, unMessage is
quite a big project. There are lots of possibilities to explore in the
instant messaging field as well as many challenges to overcome when
offering an application with usability and features as good as the
popular ones, while protecting users' privacy and anonymity. I intend
to keep working on unMessage until we have an application that
accomplishes our goals as well as maintain it to fix bugs and add
features demanded by the community.

Also, as I have been working with anonymous communication for a while,
I do not see myself going somewhere else soon, so the chances of
keeping contributing the Tor community are high.

# Communication

I intend to use IRC to discuss with my mentor and other tor devs (who
wish to contribute to the project) about ideas and actions to be
taken.

To formalize what is discussed on IRC, I will use unMessage's tracker
on GitHub to manage features/enhancements/issues to keep records and
maintain an organized environment for the development of the project,
as well as interact with contributors. I am suggesting this tracker as
we have already been using it for a while, but I can migrate to Tor's
Trac if needed.

To summarize everything, I will do what seems to have worked well for
previous students: regular reports on the mailing list to keep people
updated with what is happening on the project from a higher level.

## Contact info

OFTC: dau

Email: dau@riseup.net

PGP: 0xC5A49047572A0D47

# Other GSoC projects in mind?

I am only applying to this one.

# Anything else?

I encourage you to take a look at the git logs and issue trackers from
[unMessage], [nymphemeral] and [pyaxo]. I think I am a very organized
developer and I have been trying my best to follow the gitflow model
and take advantage of the features offered by GitHub.

[attrs]: https://attrs.readthedocs.io
[automat]: https://github.com/glyph/automat
[cli]: https://unmessage.readthedocs.io/en/latest/cli/cli.html
[cryptully]: https://github.com/shanet/Cryptully
[curses]: https://docs.python.org/2/library/curses.html
[david andersen]: https://github.com/rxcomm
[dawuud]: https://github.com/david415
[documentation]: https://unmessage.readthedocs.io
[double ratchet algorithm]: https://whispersystems.org/docs/specifications/doubleratchet
[github profile]: https://github.com/felipedau
[gui]: https://unmessage.readthedocs.io/en/latest/gui/gui.html
[hulahoop]: https://github.com/HulaHoopWhonix
[hypothesis]: https://hypothesis.readthedocs.io
[issue 12]: https://github.com/AnemoneLabs/unmessage/issues/12
[issue 21]: https://github.com/AnemoneLabs/unmessage/issues/21
[issue 26]: https://github.com/AnemoneLabs/unmessage/issues/26
[issue 30]: https://github.com/AnemoneLabs/unmessage/issues/30
[issue 32]: https://github.com/AnemoneLabs/unmessage/issues/32
[issue 33]: https://github.com/AnemoneLabs/unmessage/issues/33
[issue 34]: https://github.com/AnemoneLabs/unmessage/issues/34
[issue 35]: https://github.com/AnemoneLabs/unmessage/issues/35
[meejah]: https://github.com/meejah
[nymphemeral]: https://github.com/felipedau/nymphemeral
[nymserv]: https://github.com/rxcomm/nymserv
[omemo]: https://conversations.im/omemo
[opus codec]: https://opus-codec.org
[patrick schleizer]: https://github.com/adrelanos
[protocol]: https://unmessage.readthedocs.io/en/latest/protocol.html
[pyaxo]: https://github.com/rxcomm/pyaxo
[pynacl]: https://github.com/pyca/pynacl
[pytest]: http://docs.pytest.org
[ricochet]: https://ricochet.im
[signal]: https://whispersystems.org
[socialist millionaire protocol]: https://en.wikipedia.org/wiki/Socialist_millionaire
[tahoe-lafs]: https://github.com/tahoe-lafs/tahoe-lafs
[tkinter]: https://docs.python.org/2/library/tkinter.html
[tor onion services]: https://www.torproject.org/docs/hidden-services.html
[tor-dev]: https://lists.torproject.org/pipermail/tor-dev
[tracker]: https://github.com/AnemoneLabs/unmessage/issues
[twisted]: https://twistedmatrix.com
[txtorcon]: https://github.com/meejah/txtorcon
[unmessage]: https://github.com/AnemoneLabs/unmessage
[whonix]: https://whonix.org
[wire]: https://wire.com

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403204215</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-04-03 20:42:15-0400</timestampReceived><subject>Re: [tor-dev] [prop269] [prop270] Ideas from Tor Meeting Discussion on Post-Quantum Crypto</subject><body>

[Attachment #2 (multipart/signed)]


Nick Mathewson transcribed 2.9K bytes:
&gt; On Fri, Mar 31, 2017 at 10:20 PM, isis agora lovecruft
&gt; &lt;isis@torproject.org&gt; wrote:
&gt; &gt; Hey hey,
&gt; &gt; 
&gt; &gt; In summary of the breakaway group we had last Saturday on post-quantum
&gt; &gt; cryptography in Tor, there were a few potentially good ideas I wrote down,
&gt; &gt; just in case they didn't make it into the meeting notes:
&gt; &gt; 
&gt; &gt; * A client should be able to configure "I require my entire circuit to have
&gt; &gt; PQ handshakes" and "I require at least one handshake in my circuits to be
&gt; &gt; PQ".  (Previously, we had only considered having consensus parameters, in
&gt; &gt; order to turn the feature on e.g. once 20% of relays supported the new
&gt; &gt; handshake method.)
&gt; 
&gt; +1 on having something like this happen in some way, -0 on having
&gt; client configuration be the recommended way for any purpose other than
&gt; testing (Having clients behave differently is best avoided.)
&gt; 
&gt; Our usual approach for this kind of thing a consensus parameter that
&gt; can be overridden with a local option.

So it sounds like we want one consensus parameter that is a preference-ordered
list of handshake types to use, e.g. "RecommendedHandshakes 3 2", to turn
on/off usage of a particular handshake.  And we also want a consensus
parameter particular to PQ handshakes, something like "PQHandshakesPerCircuit
{none,one,all}" which only has an effect if "RecommendedHandshakes" includes a
PQ one.

Does that sound like it would give the desired configurability?

&gt; &gt; * Using stateful hash-based signatures to sign descriptors and/or consensus
&gt; &gt; documents, and (later) if state has been lost or compromised, then request
&gt; &gt; the last such document submitted to regain state (probably skipping over
&gt; &gt; all the leaves of the last used node in the tree, or the equivalent, to be
&gt; &gt; safe).  (This requires more concrete design analysis, including the effects
&gt; &gt; of the large size of hash-based signatures on the directory bandwidth
&gt; &gt; usage, probably in a proposal or longer write up, should someone awesome
&gt; &gt; decides to research this idea further. :)
&gt; 
&gt; Interesting!  I'd hope we do this as a separate proposal.

Yes, as I recall (avoiding naming names so as not to volunteer anyone) others
were interested in looking into this.  A good start would be to come up with
some napkin numbers on the impacts of signature and key sizes.

For anyone interested in exploring this idea, good starting resources for
hash-based signatures:

 * For a light introduction to hash-based signatures, Adam Langley has a good
   blog post. [0]

 * For stateful: "XMSS-T: Mitigating Multi-target Attacks in
   Hash-based Signatures" (2016), by Hülsing, Rijneveld, and Song. [1]

 * For stateless: "SPHINCS: practical stateless hash-based signatures" (2014)
   by Bernstein, Hopwood, Hüsling, Lange, Niederhagen, Papachristodoulou,
   Schwabe, and Zooko. [2]

 * For background/history: Andy Hülsing keeps up-to-date lists of papers
   and recommendations. [3]

&gt; Also my hope is that in our timeline, we prioritize PQ encryption over
&gt; authentication, since PQ encryption provides us forward secrecy
&gt; against future quantum computers, whereas PQ authentication is only
&gt; useful once a sufficient quantum computer exists.
&gt; 
&gt; (That's no reason not to think about PQ authentication, but with any
&gt; luck, we can wait a few years for the PQ crypto world to invent some
&gt; even better algorithms.)

Yes, I agree.  (Personally, I'm not inclined to work on this, at least not
any time in the next few years.)

If other people want to do it as a fun research project, though, I think
that's fine, since it wouldn't hurt to have a decent proposal on the table
if/when the "quantum computers we care about are for real" day comes.

Also, for what it's worth, I know Andy is always looking for specific
applications/design constraints for hash-based sigs, since constructions can
often be hand-tailored/optimised.  And, obviously, from an academic-incentives
perspective, this is both a fun problem to solve and a paper.

[0]: https://www.imperialviolet.org/2013/07/18/hashsig.html
[1]: https://github.com/isislovecruft/library--/blob/master/cryptography%20%26%20mathe \
matics/post-quantum%20cryptography/XMSS-T:%20Mitigating%20Multi-target%20Attacks%20in% \
20Hash-based%20Signatures%20(2016)%20-%20H%C3%BClsing%2C%20Rijneveld%2C%20Song.pdf \
[2]: https://github.com/isislovecruft/library--/blob/master/cryptography%20%26%20mathe \
matics/post-quantum%20cryptography/SPHINCS:%20practical%20stateless%20hash-based%20sig \
natures%20(2014)%20-%20Bernstein%2C%20Hopwood%2C%20Lange%2C%20Wilcox-OHearn%2C%20et.%20al.pdf
 [3]: https://huelsing.wordpress.com/hash-based-signature-schemes/literature/

Best,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170404021243</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-04-04 02:12:43-0400</timestampReceived><subject>[tor-dev] Circuit times</subject><body>

Anything going to blow up if set anywhere from 1k to 1M?
CBT_NCIRCUITS_TO_OBSERVE
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170405111742</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-05 11:17:42-0400</timestampReceived><subject>Re: [tor-dev] ***SPAM*** Re: Proposition: Applying an AONT to Prop224 addresses?</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Mon, Apr 03, 2017 at 02:53:17PM +0100, Alec Muffett wrote:
&gt;&gt; On 3 April 2017 at 13:04, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; &gt; I'm calling it weird because I'm not sure how an
&gt;&gt; &gt; attacker can profit from being able to provide two addresses that
&gt;&gt; &gt; correspond to the same key, but I can probably come up with a few
&gt;&gt; &gt; scenarios if I think about it.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; Hi George!
&gt;&gt; 
&gt;&gt; I'll agree it's a weird edge case :-)
&gt;&gt; 
&gt;&gt; I think the reason my spider-sense is tingling is because years of cleaning
&gt;&gt; up after intrusions has taught me that sysadmins and human beings are very
&gt;&gt; bad at non-canonical address formats, especially where they combine them
&gt;&gt; with either blacklisting, or else case-statements-with-default-conditions.
&gt;&gt; 
&gt;&gt; If one creates scope for saying "the address is &lt;foo&gt;.onion but you can
&gt;&gt; actually use &lt;foo'&gt;.onion or &lt;foo''&gt;.onion which are equivalent" - then
&gt;&gt; someone will somehow leverage that either a) for hackery, or b) for social
&gt;&gt; engineering.
&gt;&gt; 
&gt;&gt; Compare:
&gt;&gt; 
&gt;&gt; * http://017700000001
&gt;&gt; * http://2130706433
&gt;&gt; * http://0177.0.0.1  &lt;- this one tends to surprise people
&gt;&gt; * http://127.0.0.1
&gt;&gt; 
&gt;&gt; …and the sort of fun shenanigans that can be done with those "equivalent
&gt;&gt; forms"
&gt;&gt; 
&gt;&gt; People who've been trained not to type [X] into their browser, might be
&gt;&gt; convinced to type [X']
&gt;&gt; 
&gt;&gt; It's a lot easier for people to cope with there being one-and-only-one
&gt;&gt; viable form for any given hostname or address-representation.
&gt;
&gt; But as I said to Alec in AMS, anyone on the internet can register
&gt; "facebook.mydomain.com" and have the A record point to the same thing as
&gt; facebook.com.  So there are always alternate names for any given
&gt; website.  TLS, of course, is designed to protect against these
&gt; shenanigans.
&gt;

Hey,

sorry for the slow responses to this thread. Got lots of post-meeting
backlog to handle, and I'm also working on the various ed25519 stuff.

Specifically, I'm now working on the suggested check of multiplying any
received curve25519 point with the group order and ensuring the result
is the identity element.

&gt; Prop224 *also* (mostly) protects against these shenanigans, because even
&gt; if there were two onion addresses that resolved to the same pubkey, the
&gt; daily blinded version incorporates the original onion address (not just
&gt; the pubkey, right?  *Right?*), so the alternate address-with-same-pubkey
&gt; won't actually point anywhere.  However, an adversary can upload a
&gt; descriptor there; I'm not sure what the implications of that are just
&gt; now.
&gt;

Actually, I *don't* think that the blind factor of the derived key
incorporates the actual onion address. Citing the proposal:

  Let the basepoint be written as B. Assume B has prime order l, so
  lB=0. Let a master keypair be written as (a,A), where a is the private
  key and A is the public key (A=aB)

  To derive the key for a nonce N and an optional secret s, compute the
  blinding factor h as H(A | s, B, N), and let:

Perhaps we can add another component to h as follows:
         h = H(A, s, B, N, ONIONADDRESS)
where ONIONADDRESS is a string representation of the service's onion address.

I think this code is already implemented, but this might be worth fixing anyhow.
I'll make a ticket.

&gt; The other thing to remember is that didn't we already say that
&gt;
&gt; facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion
&gt;
&gt; and
&gt;
&gt; face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion
&gt;
&gt; will mean the same thing?  So we're already past the "one (st)ring to
&gt; rule them all" point?
&gt;

I don't think we have actually decided on such a feature yet. It was
suggested but the tradeoffs are not clearly skewed to the "let's do it"
direction.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170301043915</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-01 04:39:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; On 1 Mar 2017, at 04:11, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; On Tue, Feb 28, 2017 at 6:42 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; Hi, Tim!
&gt; 
&gt; This looks pretty plausible to me. Do you have time to write up a
&gt; quick&amp;dirty python function that actually performs the smoothing?

Well, it's a function, but it's not pretty, because it needs to know
all the consensus bandwidth values to find the percentile to do the
smoothing.

&gt;  If
&gt; so, I can test it out on the January consensuses and measure the
&gt; impact on compressed diff sizes.

To generate a list of bandwidths, run:
cat cached-microdesc-consensus | grep ^w | cut -d= -f2 | cut -d" " -f1 &gt; bandwidth_list

To generate a list of pairs:
bandwidth rounded_bandwidth

Run:
./bwround.py bandwidth_list

There's an alternative scheme available in the script, to use
it, comment out the line:
rounding_configs = excess_rounding

(The alternative scheme rounds the 99th percentile to 2 significant
figures rather than 3.)

I'd be interested in how each scheme performs.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["bwround.py" (bwround.py)]

#!/usr/bin/python

import math
import bisect
import sys

# define error functions and midpoint functions

def error_ratio(mid, minmax):
    '''The ratio between the rounded value and the actual value
       | n / r(n) - 1 | 
    '''
    return abs(minmax / mid - 1.0)

def mid_min_error_ratio(l, h):
    '''Minimise the ratio between the rounded value and the actual value
    '''
    # if low is 0, map everything to 0
    if l == 0.0:
        return h
    return math.sqrt(l * h)

def error_difference(mid, minmax):
    '''The difference between the rounded value and the actual value
       | n - r(n) |
    '''
    return abs(minmax - mid)

def mid_min_difference(l, h):
    '''Minimise difference between the rounded value and the actual value
    '''
    return (l + h)/2.0

# define rounding table generation functions
def rounding_table(precision, geometric = True,
                   low = None, high = None, values = None):
    '''Create a table of geometric rounding values
    The number of distinct values is the same as that used to round to
    precision significant digits, or 9*10**(precision - 1)
    '''
    # we effectively round to a number of values corresponding to 'precision'
    # significant digits, but we need an extra digit of precision to accurately
    # capture the values around the low end
    precision += 1.0
    if low is None:
        low = math.pow(10.0, precision - 1.0)
    else:
        low = float(low)
    if high is None:
        high = low*10.0
    else:
        high = float(high)
    # Create the same number of values as there are in the existing scheme
    # (an appropriate midpoint function should be used to choose whether to
    # round to the lower or higher value)
    if values is None:
        values = int((high - low) / 10.0)
    else:
        values = int(values)
    assert values &gt; 0
    bounds = [low, high]
    scale = (high-low)/values

    if values == 1:
        # use the values supplied: high is the lower bound of the next table
        bounds = [int(low), int(high)]
    elif not geometric:
        # alternative implementation: increase the values linerly between low
        # and high
        bounds = range(int(low), int(high)+1, scale)
    else:
        # increase the values geometrically between low and high
        step = math.pow(high/low, 1.0/values)
        #print step
        next = low/scale
        bounds = []
        while next &lt;= (high/scale + 1.0):
            bounds.append(next)
            next *= step

        # round each bound to the nearest integer
        bounds = [int(round(b*scale, 0)) for b in bounds]

    # turns out we need this to calculate the midpoint
    # chop off the upper bound: it belongs to the next decile
    #if bounds[-1] == high:
    #    del bounds[-1]

    return bounds

# define analysis functions
midpoint = mid_min_error_ratio
tests = [error_ratio, error_difference]
def analyse_bounds_variance(bounds):
    '''Analyse the variance when rounding to the values in the bounds table
    '''
    print len(bounds)
    b_prev = None
    for b in bounds:
        comparison = "{:.0f}".format(b)
        if b_prev is not None:
            for test in tests:
                comparison += " {:.5f}".format(test(midpoint(b_prev, b), b))
        print comparison
        b_prev = b
    print bounds

def calculate_rounding_tables(configs, geometric = True):
    '''Calculate the set of rounding values for each config in configs
    '''
    for config in configs:
        table = rounding_table(config['precision'],
                               geometric,
                               config.get('min_value'),
                               config.get('max_value'),
                               config.get('values'),
                               )
        config['table'] = table
        #print config
        #analyse_bounds_variance(table)

def get_rounding_config(configs, value, percentile):
    '''Return the relevant rounding config for value, which is at percentile
    '''
    # first, see if value corresponds to a config without a percentile
    for config in configs:
        if config.get('max_percentile') is None:
            if value &gt;= config['min_value'] and value &lt; config['max_value']:
                return config
    # now check the configs with a percentile
    for config in configs:
        if (config.get('max_percentile') is not None and
            config.get('min_percentile') is not None):
            if (percentile &gt;= config['min_percentile'] and
                percentile &lt; config['max_percentile']):
                return config
    # the table should be comprehensive
    assert False

def get_percentile_for_value(bandwidths, value):
    '''Given a list of bandwidths, find the percentile for value.
    '''
    bandwidths.sort()
    # if there are several instances of value, choose the highest percentile
    idx = bisect.bisect_right(bandwidths,value)
    return (100.0 * idx) / len(bandwidths)

def get_closest_entries(table, value):
    '''Return the pair of table entries that are closest to value
    '''
    low = table[0]
    for high in table:
        if value &gt;= low and value &lt;= high:
            return (low, high)
        low = high
    assert False

def get_scale(table, value):
    '''Get the ratio required to scale value within table
    '''
    # find the bounds that we have to scale within
    tmin = table[0]
    tmax = table[-1]
    if tmin &gt; 0.0:
        factor = tmax / tmin
    else:
        factor = tmax
    scale = 1.0
    while True:
        # prefer the lower end of the table
        if value / scale &gt;= tmax:
            scale *= factor
        elif value / scale &lt; tmin:
            scale /= factor
        else:
            return scale

def round_using_table(table, value, geometric = True):
    '''Round value according to table
    '''
    # choose the midpoint function
    if geometric:
        mp = mid_min_error_ratio
    else:
        mp = mid_min_difference
    scale = get_scale(table, value)
    #print scale
    (low, high) = get_closest_entries(table, value/scale)
    mid = mp(low, high)
    # if it's equal to the midpoint, choose the higher value
    if value/scale &gt;= mid:
        return int(high*scale)
    else:
        return int(low*scale)

def round_value(bandwidths, rounding_configs, value):
    '''Round value based on its position in bandwidths and the relevent config
    '''
    percentile = get_percentile_for_value(bandwidths, value)
    config = get_rounding_config(rounding_configs, value, percentile)
    rounded = round_using_table(config['table'], value, geometric)
    #print config
    #print value, percentile, rounded
    return rounded

# define concrete rounding configs
# a table is used from its max_percentile to the next max_percentile of
# relay bandwidths, or for configs without a percentile, from [min_value, max_value)

# this rounding config has excess precision for the 99th percentile, because
# the input values are already rounded to 3 significant figures
excess_rounding = [
    # use 100.1 to include the 100th percentile
    { 'max_percentile': 100.1, 'min_percentile': 99.0, 'precision': 3 },
    { 'max_percentile':  99.0, 'min_percentile': 90.0, 'precision': 2 },
    { 'max_percentile':  90.0, 'min_percentile':  0.0, 'precision': 1 },
    # max_percentile: None is used for the tail end bandwidths 1 - 100
    { 'max_percentile':  None, 'min_percentile': None, 'precision': 0,
      'max_value': 100.0, 'min_value': 1.0, 'values': 3 },
    # anything below the tail rounds to itself (that is, 0 rounds to 0)
    { 'max_percentile':  None, 'min_percentile': None, 'precision': 0,
      'max_value':   1.0, 'min_value': 0.0, 'values': 1 },
    ]

# this rounding config should be highly compressible, but discards some
# information from the 99th percentile
basic_rounding = [
    # use 100.1 to include the 100th percentile
    { 'max_percentile': 100.1, 'min_percentile': 99.0, 'precision': 2 },
    { 'max_percentile':  99.0, 'min_percentile': 90.0, 'precision': 1 },
    { 'max_percentile':  90.0, 'min_percentile':  0.0, 'precision': 0,
      'values': 3 },
    # max_percentile: None is used for the tail end bandwidths 1 - 100
    { 'max_percentile':  None, 'min_percentile': None, 'precision': 0,
      'max_value': 100.0, 'min_value': 1.0, 'values': 3 },
    # anything below the tail rounds to itself (that is, 0 rounds to 0)
    { 'max_percentile':  None, 'min_percentile': None, 'precision': 0,
      'max_value':   1.0, 'min_value': 0.0, 'values': 1 },
    ]

geometric = True

rounding_configs = basic_rounding
rounding_configs = excess_rounding

calculate_rounding_tables(rounding_configs, geometric)

# create the bandwidths file using:
# cat cached-microdesc-consensus | grep ^w | cut -d= -f2 | cut -d" " -f1
bandwidths = []
with open(sys.argv[1], 'r') as bandwidths_file:
    for line in bandwidths_file:
        line.strip()
        bandwidths.append(int(line))

# round values supplied on the command line
if len(sys.argv) &gt; 2:
# round values supplied on the command line
    for value in sys.argv[2:]:
        value = int(value)
        rounded = round_value(bandwidths, rounding_configs, value)
        print value, rounded
else:
# round the entire file
    for value in bandwidths:
        value = int(value)
        rounded = round_value(bandwidths, rounding_configs, value)
        print value, rounded



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYtlBzAAoJEEUMun+WjwlLznEP/izWyZtxpXpG51lP6rZowfVg
qaB0Pr35/4aecGE7vTy9wlh1AeFLi5m8OWzhlNIDi9B4eoP4WGNL0X4Ik4FltcyP
WciCLgmIENi08GhxzGnEBBirtlR16ICJACgC36CachprkrqD8066orNy8O4Q/RdC
erpoxqSfpDfmU4umtXJ0/eIzy1zfHOUpDUSAM7d+oE0xae1oBswX9MN9kIB8jrm/
k/BZ5ZjsYSWQK6X5gVRgOiuDZ1em7ld51lm8LZx5v5ocaEYrqb6MgG/s+0VGUtGM
EWZRjCHlKOZ7tdkdMbbb6K0PEr52dznjhDSpJsfkmlQgG5X/HDaUhpWfH7mOmg4P
gYyVtgOX9LLbBUV0Yra095cFxljQac7HZORT34UbryT4yprFfhz7WF/TMHPTfMBp
RzETrZDUbUIz6de44sRC4NtQkyUEVETQIRb0F880F7HGULTXYCXY64L3EBXbhsgt
+WR+7ahH1e+lV+LGOYN0GtPsvKojSZzp2YKqI0IJ+ZjTrw9U1XEFPXWE8bRg6CIU
Nua3/PeNpr1fDPELD76sln5GIFWRKB0i6kEDef7yy3imd0op+bkm/Snryz5lKqYU
pG1cruKWPTtk82kRqVN0Y6CdrUrlU6znJs9zTld7Kq3FowasffC552JkKuaZLaqC
54X2+VbXle1y2R14TMI0
=yOCF
-----END PGP SIGNATURE-----

[Attachment #10 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170301052325</emailId><senderName>Siddharth Bhayana</senderName><senderEmail>siddharthbhayana@gmail.com</senderEmail><timestampReceived>2017-03-01 05:23:25-0400</timestampReceived><subject>Re: [tor-dev] Unable to Join the IRC Channel #tor.</subject><body>

[Attachment #2 (multipart/alternative)]


I originally wanted to enter #tor-dev, but thought that beginning with #tor
might be a better idea. Any way, yes, I do want to join #tor-dev and have
already set up my nickname and other basic pre-requisites ChatZilla asks us
for fulfilment.
Am going to try another chat agent (HexChat) today to see if that works.






Regards
Siddharth Bhayana

On 01-Mar-2017 01:39, "teor" &lt;teor2345@gmail.com&gt; wrote:

&gt;
&gt; &gt; On 1 Mar 2017, at 04:10, Siddharth Bhayana &lt;siddharthbhayana@gmail.com&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; It's my first time entering an IRC channel and after having read the
&gt; documentation for ChatZilla, I'm still unable to find my way. These are the
&gt; steps I've been following:
&gt; &gt; 1) Open ChatZilla extension on Firefox.
&gt; &gt; 2) Click on IRC -&gt; Join Channel.
&gt; &gt; 3) The two fields that appear are - Network and Channel. From this point
&gt; on, I have no idea as to how to proceed.
&gt; &gt;
&gt; &gt; Any help would be appreciated.
&gt;
&gt; If you want to talk about tor development, use #tor-dev, not #tor.
&gt; (If you want to talk about using tor, use #tor.)
&gt;
&gt; We use irc.oftc.net, for instructions, see:
&gt; https://www.torproject.org/about/contact.html.en#irc
&gt; https://www.oftc.net/
&gt;
&gt; You might need to register your nickname to access some channels, this
&gt; is a spam mitigation measure.
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;I originally wanted to enter #tor-dev, but thought that beginning \
with #tor might be a better idea. Any way, yes, I do want to join #tor-dev and have \
already set up my nickname and other basic pre-requisites ChatZilla asks us for \
fulfilment.&lt;div dir="auto"&gt;Am going to try another chat agent (HexChat) today to see \
if that works.&lt;br&gt;&lt;br&gt;&lt;div data-smartmail="gmail_signature" \
dir="auto"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Regards&lt;br&gt;Siddharth Bhayana&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 01-Mar-2017 01:39, \
"teor" &lt;&lt;a href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;br&gt; &gt; On 1 Mar 2017, at 04:10, \
Siddharth Bhayana &lt;&lt;a \
href="mailto:siddharthbhayana@gmail.com"&gt;siddharthbhayana@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; It's my first time entering an IRC channel and after having read the \
documentation for ChatZilla, I'm still unable to find my way. These are the steps \
I've been following:&lt;br&gt; &gt; 1) Open ChatZilla extension on Firefox.&lt;br&gt;
&gt; 2) Click on IRC -&gt; Join Channel.&lt;br&gt;
&gt; 3) The two fields that appear are - Network and Channel. From this point on, I \
have no idea as to how to proceed.&lt;br&gt; &gt;&lt;br&gt;
&gt; Any help would be appreciated.&lt;br&gt;
&lt;br&gt;
If you want to talk about tor development, use #tor-dev, not #tor.&lt;br&gt;
(If you want to talk about using tor, use #tor.)&lt;br&gt;
&lt;br&gt;
We use &lt;a href="http://irc.oftc.net" rel="noreferrer" \
target="_blank"&gt;irc.oftc.net&lt;/a&gt;, for instructions, see:&lt;br&gt; &lt;a \
href="https://www.torproject.org/about/contact.html.en#irc" rel="noreferrer" \
target="_blank"&gt;https://www.torproject.org/&lt;wbr&gt;about/contact.html.en#irc&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://www.oftc.net/" rel="noreferrer" \
target="_blank"&gt;https://www.oftc.net/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
You might need to register your nickname to access some channels, this&lt;br&gt;
is a spam mitigation measure.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Tim Wilson-Brown (teor)&lt;br&gt;
&lt;br&gt;
teor2345 at gmail dot com&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
xmpp: teor at torproject dot org&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170306211406</emailId><senderName>Alexander Færøy</senderName><senderEmail>ahf@0x90.dk</senderEmail><timestampReceived>2017-03-06 21:14:06-0400</timestampReceived><subject>[tor-dev] Proposal: Directory Compression Scheme Negotiation</subject><body>

Hello,

Here's my draft proposal for extending the directory protocol to
support compression scheme negotiation using the semantics of the HTTP
protocol. This is part of the work that Nick and I are looking into
for our Sponsor4 design.

All feedback is highly appreciated :-)

Cheers,
Alex.

Filename: xxx-directory-compression-scheme-negotiation.txt
Title: Directory Compression Scheme Negotiation
Author: Alexander Færøy
Created: 2017-03-06
Status: Draft
Target: N/A

0. Overview

  This document describes a method to provide and use different
  compression schemes in Tor's directory specification[0] and let it be
  up the client and server to negotiate a mutually supported scheme
  using the semantics of the HTTP protocol.

  Furthermore this proposal also extends Tor's directory protocol with
  support for the LZMA2 and Zstandard compression schemes.

1. Motivation

  Currently Tor serves each directory client with its different document
  flavours in either an uncompressed format or, if the client adds a
  ".z"-suffix to the URL file path, a zlib-compressed document.

  This have historically been non-problematic, but it disallows us from
  easily extending the set of supported compression schemes.

  Some of the problems this proposal is trying to aid:

    - We currently only support zlib-based compression schemes and there
      is no way for directory servers or clients to announce which
      compression schemes they support. Zlib might not be the ideal
      compression scheme for all purposes.

    - It is not easily possible to add support for additional
      compression schemes without adding additional file extensions or
      flavours of the directory documents.

    - In low-bandwidth and/or low-memory client scenarios it is useful
      to be able to limit the amount of supported compression schemes to
      have a client only support the most efficient compression scheme
      for the given use-case and have the directory servers support the
      most commonly available compression schemes used throughout the
      network.

    - We add support for the LZMA2 compression scheme, which yields
      better compressed size and decompression time at the expensive of
      higher compression time and higher memory usage.

    - We add support for the Zstandard compression scheme, which yields
      better compression ratio than GZip, but slightly worse than LZMA2,
      but with a smaller CPU and memory footprint than LZMA2.

2. Analysis

  We investigated the compression ratio, memory usage, memory allocation
  strategies, and execution time for compression and decompression of
  the GZip, BZip2, LZMA2, and Zstandard compression schemes at
  compression levels 1 through 9.

  The data used in this analysis can be found in [1] and the `bench`
  tool for generating the data can be found in [2].

  During the preparation for this proposal Nick have analysed
  compressing consensus diffs using both GZip, LZMA2, and Zstandard. The
  result of Nick's analysis can be found in [3].

  We must continue to support both "gzip", "deflate", and "identity"
  which are the currently available compression schemes in the Tor
  network.

  Further to enhance the compression ratio Nick have also worked on
  proposal #274 (Rotate onion keys less frequently), #275 (Stop
  including meaningful "published" time in microdescriptor consensus),
  #276 (Report bandwidth with lower granularity in consensus documents),
  and #277 (Detect multiple relay instances running with same ID) which
  all aid in making our consensus documents less dynamic.

3. Proposal

  We extend the directory client requests to include the
  "Accept-Encoding" header as part of its request. The "Accept-Encoding"
  header should contain a comma-separated list of names of the
  compression schemes of which the client supports.

  For example:

    GET / HTTP/1.0
    Accept-Encoding: zstd, xz, gzip, deflate

  When a directory server receives a request with the "Accept-Encoding"
  header included it must decide on a mutually supported compression
  scheme and add the "Content-Encoding" header to its response and thus
  notifying the client of its decision. The "Content-Encoding" header
  can at most contain one supported compression scheme. If no mutual
  compression scheme can be negotiated the server must respond with an
  HTTP error status code of 415 "Unsupported Media Type".

  For example:

    HTTP/1.0 200 OK
    Content-Length: 1337
    Connection: close
    Content-Encoding: zstd

  Currently supported compression scheme names includes "identity",
  "gzip", and "deflate". This proposal adds two additional compression
  scheme named "xz" (LZMA2) and "zstd" (Zstandard).

  All compression scheme names are case-insensitive.

  The "deflate", "gzip", and "identity" compression schemes must be
  supported by directory servers for backwards compatibility.

  Additionally, when a client, that supports this proposals, makes a
  request to a directory document with the ".z"-suffix it must send an
  ordered set of supported compression schemes where the last elements
  in the set contains compression schemes that are supported by all of
  the currently available Tor nodes ("gzip", "deflate", "identity"). In
  this way older relays will simply respond with the document compressed
  using zlib deflate without any prior knowledge of the newly added
  compression schemes.

  The "Content-Length" header contains the number of compressed bytes
  sent to the client.

  The new compression schemes will be available for directory clients
  over both clearnet and BEGIN_DIR-style connections.

4. Security Implications

4.1 Compression and Decompression Bombs

  We currently detect compression and decompression "bombs" and must
  continue to do so with any additional compression schemes that we add.

  The detection of compression and decompression bombs are handled in
  `is_compression_bomb()` in torgzip.c and the same functionality is
  used both for compression and decompression. These functions must be
  extended to support LZMA2 and Zstandard.

4.2 Detection of Compression Algorithms

  To ensure that we do not pass compressed data through the incorrect
  decompression handler, when we have received data from another peer,
  Tor tries to detect the compression scheme in
  `detect_compression_method()`` in torgzip.c. This function should be
  extended to also detect the LZMA2 and Zstandard formats. Possible
  methods of applying this detection is looking at xz-tools, zstd's CLI,
  and the libmagic 'compress' module.

4.3 Fingerprinting

  All clients should aim at supporting the same set of supported
  compression schemes to avoid fingerprinting.

5. Compatibility

  This proposal does not break any backwards compatibility.

  Tor will continue to support serving uncompressed and zlib-compressed
  objects using the method defined in the directory specification[0],
  but will allow newer clients to negotiate a mutually supported
  compression scheme.

6. Performance and Scalability

  Each newly added compression scheme adds to the compression cache of a
  relay, which increases the memory requirements of a relay.

  The LZMA2 compression scheme yields better compression ratio at the
  expense of higher memory and CPU requirements for compression and
  slightly higher memory and CPU requirements for decompression.

  The Zstandard compression scheme yields better compression ratio than
  GZip does, but does not suffer from the same high CPU and memory
  requirements for compression as LZMA2 does.

  Because of the high requirements for CPU and memory usage for LZMA2 it
  is possible that we do not support this scheme for all available
  documents or that we only support it in situations where it is
  possible to pre-compute and cache the compressed document.

7. References

  [0]: https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
  [1]: https://docs.google.com/spreadsheets/d/1devQlUOzMPStqUl9mPawFWP99xSsRM8xWv7DNcqjFdo
  [2]: https://gitlab.com/ahf/tor-sponsor4-compression
  [3]: https://github.com/nmathewson/consensus-diff-analysis


-- 
Alexander Færøy
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170307205516</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-07 20:55:16-0400</timestampReceived><subject>Re: [tor-dev] Tor in Google Summer of Code 2017</subject><body>

Oops! My bad. Great catch, thanks for pointing that out.


On Tue, Mar 7, 2017 at 10:53 AM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt; Hi Damian,
&gt;
&gt; On Tuesday 07 March 2017 11:54 PM, Damian Johnson wrote:
&gt;
&gt;&gt; Finally, write down your project idea using our template [5] and submit
&gt;&gt; your application to Google before March 25th [6].
&gt;
&gt; I think the deadline is April 3 this year.
&gt;
&gt; Regards,
&gt; Jaskaran
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170309130818</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-03-09 13:08:18-0400</timestampReceived><subject>Re: [tor-dev] Tor Arch Diagrams</subject><body>

On 03/08/2017 02:01 PM, Nick Mathewson wrote:

&gt; Thanks, Chelsea!  How would you like to get these into the
&gt; documentation?  I was thinking that adding them to
&gt;   https://people.torproject.org/~nickm/tor-auto/internal/
&gt; [generated from
&gt;    https://gitweb.torproject.org/user/nickm/tor-guts.git
&gt; ]
&gt; might be a good place, but there could be other logical locations too.

Yes, sounds like a good place for them.

&gt; I'd be glad to integrate them if you like, or collaborate on
&gt; explanatory text to go along with them.

Collaborating would be great, and we might even get new information out
of the process.

Thanks, I'll write you to organize.
Chelsea


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170309150651</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-03-09 15:06:51-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] prop224: Trivial improvements to HS ntor section</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hey David,
&gt;
&gt; please check my `prop224-ntor` torspec branch for some basic
&gt; improvements to the HS ntor section that came up while implementing it.
&gt;
&gt; Here it is:
&gt;    https://gitweb.torproject.org/user/asn/torspec.git/log/?h=prop224-ntor
&gt;

Hey again David,

here is another round of easy prop224 fixes based on our discussions
in IRC: https://gitweb.torproject.org/user/asn/torspec.git/log/?h=prop224-more-ntor

Namely the first commit updates our MAC definition to fit the latest
code, and the second commit fixes some more undefined variables around
the ntor part of the proposal.

Let me know if you like them and I'll merge them.

Thanks!
   
    
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170311054407</emailId><senderName>Boter42</senderName><senderEmail>boter42@protonmail.com</senderEmail><timestampReceived>2017-03-11 05:44:07-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

-------- Original Message -------- On Mar 10, 2017, 11:49 PM, David Fifield wrote: On \
Fri, Mar 10, 2017 at 03:46:03PM -0500, Boter42 wrote: &gt; I'm also trying to implement \
an automatic scan of specific lists of websites to &gt; check their behaviour towards \
Tor. I'm using ooniprobe but I lack some &gt; technical skills (mainly to filter out \
false positives), I'll see if I can set &gt; up a team. You might be able to use/adapt \
some code we wrote to mine OONI reports for cases of Tor blocking: \
http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ndss16doyousee.pdf \
https://archive.org/details/ndss16doyousee


I've already got my hands on this paper but I haven't studied yet. Thanks!


&gt; The actual OONI-processing code is in a Git repo at: \
&gt; https://www.bamsoftware.com/git/ooni-tor-blocks.git One catch, though, is that \
&gt; you'll have to adapt the ooni.py file to handle OONI's web_connectivity tests. The \
&gt; code was originally written before web_connectivity existed, so it only works with \
&gt; the http_requests test. If you want to run your own active tests, we have some \
&gt; patches on top of exitmap: git clone -b l7_tor_limits \
&gt; https://www.bamsoftware.com/git/exitmap.git But you will need to do some work to \
&gt; bring them up to date.

Not sure I have enough skills to deal with it, but I'll consider to join the OONI \
partnership program. Maybe I can set up something more organic.


[Attachment #5 (text/html)]

-------- Original Message -------- On Mar 10, 2017, 11:49 PM, David Fifield wrote: On \
Fri, Mar 10, 2017 at 03:46:03PM -0500, Boter42 wrote: &gt; I'm also trying to implement \
an automatic scan of specific lists of websites to &gt; check their behaviour towards \
Tor. I'm using ooniprobe but I lack some &gt; technical skills (mainly to filter out \
false positives), I'll see if I can set &gt; up a team. You might be able to use/adapt \
some code we wrote to mine OONI reports for cases of Tor blocking: \
http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ndss16doyousee.pdf \
https://archive.org/details/ndss16doyousee &lt;br&gt;&lt;br&gt;&lt;br&gt;I've already got my hands on \
this paper but I  haven't studied yet. Thanks!&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt;The actual OONI-processing \
code is in a Git repo at: https://www.bamsoftware.com/git/ooni-tor-blocks.git One \
catch, though, is that you'll have to adapt the ooni.py file to handle OONI's \
web_connectivity tests. The code was originally written before web_connectivity \
existed, so it only works with the http_requests test. If you want to run your own \
active tests, we have some patches on top of exitmap: git clone -b l7_tor_limits \
https://www.bamsoftware.com/git/exitmap.git But you will need to do some work to \
bring them up to date. &lt;br&gt;&lt;br&gt;Not sure I have enough skills to deal with it, but \
I'll consider to join the OONI partnership program. Maybe I can set up something more \
organic.&lt;br&gt;&lt;br&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170312074418</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-03-12 07:44:18-0400</timestampReceived><subject>Re: [tor-dev] Flashproxy has been Deactivated by Stanford? Why?</subject><body>

On Mon, Dec 19, 2016 at 09:53:25AM -0800, David Fifield wrote:
&gt; The badge was deactivated by Stanford (without my knowledge, but I found
&gt; out a while ago). I arranged with them to move it to alternate hosting
&gt; and have them install a redirect, but that has been a low priority
&gt; behind other work on Snowflake.
&gt; 
&gt; I'm sorry about the confusion. If I get some time I'll add a notice to
&gt; the flash proxy main page saying that it's been retired.

I've set up separate hosting for the flash proxy badge files at
https://flashproxy.bamsoftware.com/, and added redirects from the
https://crypto.stanford.edu/flashproxy/ URLs to there. Already deployed
badges should continue to work, given the redirects. I added a note to
the top of the home page saying that flash proxy is deprecated.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170312203134</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-12 20:31:34-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17- Intro</subject><body>

Hi Pasan. For Ahmia Juha will be your best point of contact. Cc-ed him
here. If he doesn't respond to you in a few days give me a nudge and
I'll nag him. ;)

Cheers! -Damian

On 3/12/17, Pasan Chamikara &lt;gwpc92@gmail.com&gt; wrote:
&gt; Hi,
&gt; I am Pasan Chamiekara, a final year undergraduate in BSc in Biological
&gt; Science at University of Colombo and a final year undergraduate at Sri
&gt; Lanka Institute
&gt; of Information Technology (BSc Hons in IT specializing in Cyber Security).
&gt; (Simply a dual degree expectee) . I do pocess 7 months of completed
&gt; internship at Sri Lanka CERT | CC as an
&gt; Intern - Information Security.
&gt; My main research interests are in automated malware analysis, Intrusion
&gt; detection and Neural Networking.
&gt;
&gt; I do pocess strong skills in html, css, php, javascript, python, C, C++
&gt; ,java, ASM and intermediate level skills in Android,scala.
&gt;
&gt; I am interested in the following components,
&gt; *Ahmia - Hidden Service Search*
&gt;
&gt; Regards
&gt; Pasan
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170307044210</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-03-07 04:42:10-0400</timestampReceived><subject>[tor-dev] Tor Arch Diagrams</subject><body>

Hello All,

I've published object diagrams created from a conversation with Nick at
the last Tor meeting, along with the original sketches (hopefully very
similar).

github.com/chelseakomlo/tor_arch

The plan for these is to include them into documentation. These should
definitely evolve along with tor's architecture, so please don't think
of them as set in stone.

A couple questions/comments:

- What else should be included? The most important thing is that these
are good visual assets for future discussions on topics such as
modularization, where code/responsibility should belong, if any new
structures are needed, etc.

- Some of these may need more information. For example, the scheduler
diagram.

- If object diagrams do not capture tor's architecture accurately, we
can also look at event modeling. This would model what happens as
different events occur from start to finish in the tor network.

- If it is useful for these to be UML, I can do that. But more
importantly is that they are useful.

Feedback welcome!

Chelsea


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170308190102</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-03-08 19:01:02-0400</timestampReceived><subject>Re: [tor-dev] Tor Arch Diagrams</subject><body>

On Mon, Mar 6, 2017 at 11:42 PM, chelsea komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt; Hello All,
&gt;
&gt; I've published object diagrams created from a conversation with Nick at
&gt; the last Tor meeting, along with the original sketches (hopefully very
&gt; similar).
&gt;
&gt; github.com/chelseakomlo/tor_arch
&gt;
&gt; The plan for these is to include them into documentation. These should
&gt; definitely evolve along with tor's architecture, so please don't think
&gt; of them as set in stone.

Thanks, Chelsea!  How would you like to get these into the
documentation?  I was thinking that adding them to
  https://people.torproject.org/~nickm/tor-auto/internal/
[generated from
   https://gitweb.torproject.org/user/nickm/tor-guts.git
]
might be a good place, but there could be other logical locations too.

I'd be glad to integrate them if you like, or collaborate on
explanatory text to go along with them.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310132701</emailId><senderName>Boter42</senderName><senderEmail>boter42@protonmail.com</senderEmail><timestampReceived>2017-03-10 13:27:01-0400</timestampReceived><subject>[tor-dev] Flag blocked websites</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hi,

I think it would be important to have a way to flag/report those websites that can't \
be access by the users while they're using the tor browser.

Is there already a solution to do this? Do you think it would be a good tool?

It would be great to have an updated records of this kind of websites so that we can \
push website owners to make the Tor user-experience as smooth as possible.

Thanks


[Attachment #5 (text/html)]

&lt;br&gt;Hi, &lt;br&gt;&lt;br&gt;I think it would be important to have a way to flag/report those \
websites that can't be access by the users while they're using the tor browser. \
&lt;br&gt;&lt;br&gt;Is there already a solution to do this? Do you think it would be a good tool? \
&lt;br&gt;&lt;br&gt;It would be great to have an updated records of this kind of websites so that \
we can push website owners to make the Tor user-experience as smooth as possible. \
&lt;br&gt;&lt;br&gt;Thanks &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310164557</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-03-10 16:45:57-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

On Fri, Mar 10, 2017 at 08:27:01AM -0500, Boter42 wrote:
&gt; I think it would be important to have a way to flag/report those websites that
&gt; can't be access by the users while they're using the tor browser. 
&gt; 
&gt; Is there already a solution to do this? Do you think it would be a good tool? 
&gt; 
&gt; It would be great to have an updated records of this kind of websites so that
&gt; we can push website owners to make the Tor user-experience as smooth as
&gt; possible. 

There's an informal yet quite large list here:
https://trac.torproject.org/projects/tor/wiki/org/doc/ListOfServicesBlockingTor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170312144053</emailId><senderName>Pasan Chamikara</senderName><senderEmail>gwpc92@gmail.com</senderEmail><timestampReceived>2017-03-12 14:40:53-0400</timestampReceived><subject>[tor-dev] GSoC 17- Intro</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,
I am Pasan Chamiekara, a final year undergraduate in BSc in Biological
Science at University of Colombo and a final year undergraduate at Sri
Lanka Institute
of Information Technology (BSc Hons in IT specializing in Cyber Security).
(Simply a dual degree expectee) . I do pocess 7 months of completed
internship at Sri Lanka CERT | CC as an
Intern - Information Security.
My main research interests are in automated malware analysis, Intrusion
detection and Neural Networking.

I do pocess strong skills in html, css, php, javascript, python, C, C++
,java, ASM and intermediate level skills in Android,scala.

I am interested in the following components,
*Ahmia - Hidden Service Search*

Regards
Pasan

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;I am Pasan Chamiekara, a final year \
undergraduate in  BSc in Biological Science at University of Colombo and a final year \
 undergraduate at Sri Lanka Institute&lt;/div&gt;&lt;div&gt;of Information Technology
 (BSc Hons in IT specializing in Cyber Security). (Simply a dual degree 
expectee) . I do pocess 7 months of completed internship at Sri Lanka 
CERT | CC as an&lt;/div&gt;&lt;div&gt;Intern - Information Security.&lt;/div&gt;&lt;div&gt;My main research \
interests are in automated malware analysis, Intrusion detection and Neural \
Networking.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I  do pocess strong skills in html, css, php, \
javascript, python, C, C++  ,java, ASM and intermediate level skills in \
Android,scala.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am interested in the following \
components,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Ahmia - Hidden Service \
Search&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Regards&lt;br&gt;&lt;/div&gt;Pasan&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310173515</emailId><senderName>Boter42</senderName><senderEmail>boter42@protonmail.com</senderEmail><timestampReceived>2017-03-10 17:35:15-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

-------- Original Message -------- On Mar 10, 2017, 5:45 PM, David Fifield wrote: On \
Fri, Mar 10, 2017 at 08:27:01AM -0500, Boter42 wrote: &gt; I think it would be important \
to have a way to flag/report those websites that &gt; can't be access by the users while \
they're using the tor browser. &gt; &gt; Is there already a solution to do this? Do you \
think it would be a good tool? &gt; &gt; It would be great to have an updated records of \
this kind of websites so that &gt; we can push website owners to make the Tor \
user-experience as smooth as &gt; possible. There's an informal yet quite large list \
here: https://trac.torproject.org/projects/tor/wiki/org/doc/ListOfServicesBlockingTor

Thank you. Is the list updated manually? Cause I think a button to let users report \
websites could be really helpful too.


[Attachment #5 (text/html)]

-------- Original Message -------- On Mar 10, 2017, 5:45 PM, David Fifield wrote: On \
Fri, Mar 10, 2017 at 08:27:01AM -0500, Boter42 wrote: &gt; I think it would be important \
to have a way to flag/report those websites that &gt; can't be access by the users while \
they're using the tor browser.  &gt; &gt; Is there already a solution to do this? Do you \
think it would be a good tool?  &gt; &gt; It would be great to have an updated records of \
this kind of websites so that &gt; we can push website owners to make the Tor \
user-experience as smooth as &gt; possible.  There's an informal yet quite large list \
here: https://trac.torproject.org/projects/tor/wiki/org/doc/ListOfServicesBlockingTor \
&lt;br&gt;&lt;br&gt;Thank you. Is the list updated manually? Cause I think a button to let users \
report websites could be really helpful too.


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310201840</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-03-10 20:18:40-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

On Fri, Mar 10, 2017 at 12:35 PM, Boter42 &lt;boter42@protonmail.com&gt; wrote:
&gt; https://trac.torproject.org/projects/tor/wiki/org/doc/ListOfServicesBlockingTor

&gt; It would be great to have an updated records of this kind of websites so that we \
&gt; can push website owners to make the Tor user-experience as smooth as possible.

Yes you will see page below that has this as exactly one of the goals.

&gt; Thank you. Is the list updated manually? Cause I think a button to let users
&gt; report websites could be really helpful too.

You will read at the top of the above page this link to the parent project...
https://trac.torproject.org/projects/tor/wiki/org/projects/DontBlockMe

They talk about 'user submissions to server' at bottom.
So definitely feel free to create and announce your ideas
for automatic submissions, to notify websites, to get some review
and even collect a team of people to work on it [1] :)

[1] Maybe from tor-talk or linked to your idea from the wiki page.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310202148</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-03-10 20:21:48-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

&gt; [1] Maybe from tor-talk or linked to your idea from the wiki page.

You also see some discussions here
https://lists.torproject.org/pipermail/tor-access/
and here
https://lists.torproject.org/pipermail/tor-talk/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310204603</emailId><senderName>Boter42</senderName><senderEmail>boter42@protonmail.com</senderEmail><timestampReceived>2017-03-10 20:46:03-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

-------- Original Message -------- On Mar 10, 2017, 9:21 PM, grarpamp wrote: &gt; [1] \
Maybe from tor-talk or linked to your idea from the wiki page. You also see some \
discussions here https://lists.torproject.org/pipermail/tor-access/ and here \
https://lists.torproject.org/pipermail/tor-talk/ \
_______________________________________________ tor-dev mailing list \
tor-dev@lists.torproject.org \
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


Great! Thanks.

I'm also trying to implement an automatic scan of specific lists of websites to check \
their behaviour towards Tor. I'm using ooniprobe but I lack some technical skills \
(mainly to filter out false positives), I'll see if I can set up a team.


[Attachment #5 (text/html)]

-------- Original Message -------- On Mar 10, 2017, 9:21 PM, grarpamp wrote: &gt; [1] \
Maybe from tor-talk or linked to your idea from the wiki page. You also see some \
discussions here https://lists.torproject.org/pipermail/tor-access/ and here \
https://lists.torproject.org/pipermail/tor-talk/ \
_______________________________________________ tor-dev mailing list \
tor-dev@lists.torproject.org \
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev &lt;br&gt;&lt;br&gt;&lt;br&gt;Great! \
Thanks.&lt;br&gt;&lt;br&gt;I'm also trying to implement an automatic scan of specific lists of \
websites to check their behaviour towards Tor. I'm using ooniprobe but I lack some \
technical skills (mainly to filter out false positives), I'll see if I can set up a \
team.


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310224914</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-03-10 22:49:14-0400</timestampReceived><subject>Re: [tor-dev] Flag blocked websites</subject><body>

On Fri, Mar 10, 2017 at 03:46:03PM -0500, Boter42 wrote:
&gt; I'm also trying to implement an automatic scan of specific lists of websites to
&gt; check their behaviour towards Tor. I'm using ooniprobe but I lack some
&gt; technical skills (mainly to filter out false positives), I'll see if I can set
&gt; up a team.

You might be able to use/adapt some code we wrote to mine OONI reports
for cases of Tor blocking:

http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ndss16doyousee.pdf
https://archive.org/details/ndss16doyousee

The actual OONI-processing code is in a Git repo at:
https://www.bamsoftware.com/git/ooni-tor-blocks.git

One catch, though, is that you'll have to adapt the ooni.py file to
handle OONI's web_connectivity tests. The code was originally written
before web_connectivity existed, so it only works with the http_requests
test.

If you want to run your own active tests, we have some patches on top of
exitmap:
git clone -b l7_tor_limits https://www.bamsoftware.com/git/exitmap.git
But you will need to do some work to bring them up to date.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170502202913</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-05-02 20:29:13-0400</timestampReceived><subject>[tor-dev] Leekspin and Stem descriptor creation</subject><body>

Hi Isis. For kicks and giggles this weekend I added the ability for
Stem to create descriptors...

https://stem.torproject.org/tutorials/mirror_mirror_on_the_wall.html#can-i-create-descriptors
https://gitweb.torproject.org/stem.git/commit/?id=b2a54ad

This is something Stem has always been able to do but it was buried in
our testing helpers. Now descriptor subclasses have a static create()
and content() method.

This *doesn't* yet support signing descriptors. I'm looking into that
next. To that end I took a peek today at leekspin
(https://pypi.python.org/pypi/leekspin) and... damn. Beautiful work!
Besides the crypto are there any other aspects of your library you
think we should incorporate?

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170505101400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-05 10:14:00-0400</timestampReceived><subject>Re: [tor-dev] making sure I configure OutboundBindAddressExit correctly</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello teor,




teor:
&gt; If you don't specify OutboundBindAddressOR [IPv6], any IPv6 connections
&gt; a relay makes will go via the OS routing table, which may use the same
&gt; address as OutboundBindAddressExit.

Thank you for this input, I added an OutboundBindAddress line (without
"OR") for IPv6 as well (IPv6 ORPort line is already in place).

https://github.com/nusenu/ansible-relayor/commit/d708e9c85963455de1975a0af4e30414f7118ec0


&gt; Also, the documentation is unclear, and we need to fix it:
&gt; https://trac.torproject.org/projects/tor/ticket/22145

That was me filing that ticket.


thanks,
nusenu


-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170507044903</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-05-07 04:49:03-0400</timestampReceived><subject>[tor-dev] Chutney Default: DNS or Offline?</subject><body>

[Attachment #2 (multipart/signed)]


Dear chutney users,

Do you use DNS with chutney?
(Chutney uses IP addresses by default.)

Chutney has never worked offline, because Tor Exits check DNS before
publishing their exit policy. And if DNS fails while a test is being
run, chutney fails. (See Tor bug #21900.)

We can make chutney work offline by disabling DNS.
See the chutney bug at:
https://trac.torproject.org/projects/tor/ticket/21903

But we need to decide what the default is:

Do you want chutney to work offline by default?
Or do you want chutney to have working DNS by default?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZDqdAAAoJEHQNnjkCUnKij8wQAITTmz60seFbFAmsD1UNgjhI
8D39olXN7C7CLOV4WKgGj9yi9jSuGR+Irvj0zX8D68idlFRl+QTDz0CAJ2DPbixO
78vvwwSqNyuVtyEGcSF+UyGl51e2KyzoGbVwiW/lZOgN8i9BgB8jAoFkpSj904RT
pcEiZsYftxEO8ttx3mmMXOASC+lP3ebN9HkQlxFhbmj6QFIXbLp7UcD/m/ekNlKL
6tztJF73TQt3i0n51tLhSKFLO6ixJxc+6A647ne5Ng+5LbvULE3R1t1v090zDhF1
LYt/9ELqp6iDBCb3nBc6tBprvW0bLmV8T9Hty4gtruaOQ5jcvL949haVaxHGng3d
NWIIhWMCmpwzhcQ/JRs9zsEbVVSAj+EffZFrcVk4+MHTigo59gZcSSgfyD16Xat1
UMCARA1qTdc5x3qCDKoTMSm/wEEvTRFdYKgjZA5xtueOPuge6TPswbv28ooUxGyk
+kPRne4gLWTCCUMf2hBqSPrm1+ryB5o/5XHE4a0mb/wEntuui5MqemUFmHfKy1tj
Gs4oRVz++AWlFD/zgd/UAXk5je7RjYgKEV4De5XBgROVdrgdrqFerFDyrPNBj0+7
VYzxGCPKDz3YKZCetPe2KEZhnw805z+L3FZIpixMHjwZxyiEsMxk4PYic7r6ti6V
QonM+mgEGiPTNc7u91AJ
=HiIp
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170507045351</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-05-07 04:53:51-0400</timestampReceived><subject>Re: [tor-dev] Why is my bridge not publishing statistics?</subject><body>

On Sat, May 06, 2017 at 09:25:11AM -0700, David Fifield wrote:
&gt; &gt; You're right that this is a fragile situation. Maybe we should recommend
&gt; &gt; that if you firewall your ORPort, you also set "AssumeReachable 1"
&gt; &gt; in your torrc?
&gt; 
&gt; I've just set "AssumeReachable 1"; let's see if that helps anything.

Setting "AssumeReachable 1" seems to have worked.

https://atlas.torproject.org/#details/5481936581E23D2D178105D44DB6915AB06BFB7F
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170509032403</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-05-09 03:24:03-0400</timestampReceived><subject>Re: [tor-dev] [tor-commits] [tor/master] Bug 17592: Clean up connection timeout logic.</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 9 May 2017, at 11:20, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt; On Mon, May 08, 2017 at 06:00:18PM +0000, nickm@torproject.org wrote:
&gt;&gt; commit d5a151a06788c28ac1c50398c6e571d484774f47
&gt;&gt; Author: Mike Perry &lt;mikeperry-git@torproject.org&gt;
&gt;&gt; Date:   Tue Feb 21 21:28:00 2017 -0500
&gt; [...]
&gt;&gt; +   - Increase the intial circuit build timeout testing frequency, to help
&gt;&gt; +     ensure that ReducedConnectionPadding clients finish learning a timeout
&gt;&gt; +     before their orconn would expire. The initial testing rate was set back
&gt;&gt; +     in the days of TAP and before the Tor Browser updater, when we had to be
&gt;&gt; +     much more careful about new clients making lots of circuits. With this
&gt;&gt; +     change, a circuit build time is learned in about 15-20 minutes, instead
&gt;&gt; +     of ~100-120 minutes.
&gt; 
&gt; Fyi, the current Tor network has "cbttestfreq=60" set in its consensus
&gt; params.
&gt; 
&gt; Is this something we should change?

Yes, otherwise the change to the default will have no effect for
clients that successfully download a consensus.

I suggest we change it to 10 now, as it will immediately improve the
timeout behaviour for mobile clients.

I think there is even a sponsor for this, ahf and nickm can tell you
which.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZETZTAAoJEHQNnjkCUnKiK80P/ig+4dNqRjEDAECbfUldWvw9
Ww5/42r+AKFWP7NGrVVynJMxl74joMPmImra4AAF4r2sGAk9rBj3SXdyuJvSeXHu
QW/IZra7G5Y8Xa0/sznXFzCVt+5BkpOURM9Vd6jhlAbykxmycwOlRCm4rHcVuPNk
bAXt0uOxuQrfdKZ5H79LdAFkcb0bsgsBqqpP4MZGc1ZjOXP39STUpq79APT2WgGF
jGPdWvnwLpMhPLBSEveWymD3YFqOPSHIayhMylzf1/sQJ43oaDZOmWWZMoxbBpcz
LuZt1szEe/3P+q/pAxv3UvxUGuTcxCxSmgFBllx0WC6GLQr+en3sxOWlUFswaJhh
4Rf6eJ/ZbZ9i0ZVuxnUtUTuPpyifjE11QDQkLbkD5g8WXnHa0SWchDAwLZr3VuWn
6czZlrZBcEC06ePwHApUf4nhL3hmDcEH9g65+wrewxzN0S2JTlqFhdGSbnM0cjFH
waFB/AnZr/jAmM49n/tUDoG2JtnTkCsqKkiUh6+t0SkblJNpH3sbDdq5lihrX+p5
7+522FTOI2WEDjdQuTn2sYVYEZq1PSygTEz3753XsYyK3DY6WMJ5VjPuq6+vJ7P3
RrqqhizBmt+3FhuMGsvsKYHHjaNrkpsYZFVcHPbqjCnnlSgS6jYpF526HAhwe4Yk
F2J5DeKiBsupmQdIZu0x
=6ZVl
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170509121125</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2017-05-09 12:11:25-0400</timestampReceived><subject>Re: [tor-dev] blacklisting relays with end-to-end correlation capabilities?</subject><body>

Dear all,

below mail was meant to make it to tor-dev, but I got a bounce and didn't
notice until now. Whoops, my apologies.

&gt; On 8. Dec 2016, at 14:29, Sebastian Hahn &lt;tor@sebastianhahn.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt;&gt; On 08 Dec 2016, at 14:03, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt;&gt; 
&gt;&gt; Dear tor directory authorities,
&gt;&gt; 
&gt;&gt; TLDR: Would you blacklist relays with end-to-end correlation capabilities?
&gt;&gt; 
&gt;&gt; I'm asking to find out whether it makes sense to put any effort into
&gt;&gt; finding such operators [2]. If most dir auths would not blacklist such
&gt;&gt; relays than it does not make sense to look for them I guess.
&gt;&gt; 
&gt;&gt; So please let us know whats your opinion on that - thank you.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; More information below and there [1]:
&gt;&gt; 
&gt;&gt; 
&gt;&gt; The process could look something like this:
&gt;&gt; 
&gt;&gt; - someone identifies such a relay groups (basically based on contactinfo
&gt;&gt; [2])
&gt;&gt; - contact the operators asking to fix this (ideally this would be a
&gt;&gt; @torproject.org sender)
&gt;&gt; - give them 15 days to fix it
&gt;&gt; - if not fixed: blacklist respective guard relays
&gt;&gt; - give them the possibility to get removed from the blacklist once fixed
&gt; 
&gt; I do not think that this is worthwhile. It establishes a precedent where
&gt; setting your contact info is something that gets you banned, potentially
&gt; incorrectly because it's unauthenticated, whereas we're unable to identify
&gt; people who actually maliciously run several relays without such indicators.
&gt; 
&gt; Additionally, it's yet one more thing to update the dirauths' configs
&gt; for, but with rather more overhead as we might get multiple mails back
&gt; and forth about how MyFamily is annoying to maintain, how they're just
&gt; trying to help, etc. All not so bad arguments.
&gt; 
&gt; If we did this, also why would we blacklist the nonexit relays? That
&gt; seems to not make sense, as a relay operator could have multiple relays
&gt; that act as guard and exit simultaneously. I think we'd need to
&gt; blacklist at least all the exit relays, if not all of them. BadExiting
&gt; them would then be the more sensible choice. Scarcity of resources has
&gt; in the past led us to bad designs like Valid/Invalid relays etc, which
&gt; causes way more annoyances than good things.
&gt; 
&gt; Cheers
&gt; Sebastian

Cheers
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170511074500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-11 07:45:00-0400</timestampReceived><subject>Re: [tor-dev] man page: MyFamily</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Trac please, emails are easy to lose track of.

https://trac.torproject.org/projects/tor/ticket/22223


&gt; And we prefer branches if possible:

Actually I aimed for a github url for you but the import failed
https://twitter.com/nusenu_/status/862364712570421249

so I made a quick 'n dirty version (instead of no version).


--=20
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170511132035</emailId><senderName>Matt Traudt</senderName><senderEmail>sirmatt@ksu.edu</senderEmail><timestampReceived>2017-05-11 13:20:35-0400</timestampReceived><subject>Re: [tor-dev] Which network simulator are you using/suggesting for testing Tor</subject><body>

On 5/11/17 09:08, vmon wrote:
&gt; Hello Tor-devers,
&gt; 
&gt; A friend of mine wants to simulate Tor and measure the network
&gt; performance by tweaking various node selection heuristics etc. He was
&gt; wondering what simulator usually people who perform and study Tor
&gt; uses. This was the best he came up with
&gt; 
&gt; https://shadow.github.io/
&gt; 
&gt; but was wondering if anyone has a better suggestion.
&gt; 
&gt; Thanks a lot for your help,
&gt; vmon

There is also Chutney[1], which is popular with other Tor developers.

But as someone who uses Shadow every day, go for Shadow :). I think 
you'll find it already comes with the ability to graph many things you 
might be interested in. And if you will be interested in simulating 
large networks, it should do so better than Chutney.

Hoping I don't sound too much like a fanboy.

Matt

[1]: https://gitweb.torproject.org/chutney.git
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170512033550</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-05-12 03:35:50-0400</timestampReceived><subject>[tor-dev] txtorcon 0.19.2</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing two more problems with the 0.19.1 release, I hereby give you
version 0.19.2 which adds:

 * Work around a bug in "incremental" library (Issue 233)
 * Fix for Issue 190 from Felipe Dau
 * add txtorcon.Circuit.when_built

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

https://pypi.python.org/pypi/txtorcon/0.19.2
https://github.com/meejah/txtorcon/releases/tag/v0.19.2

Releases are also available from the hidden service:

http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz
http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
c0e05ff4878468474167536a7b30edec23ae69eb26869c3e9ed9878e63ddc882  \
dist/txtorcon-0.19.2.tar.gz \
0e2e85424c8f4c4627066ceebee59a931300e3712007f0a7620791729c80d459  \
dist/txtorcon-0.19.2-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZFSkrAAoJEMJgKAMSgGmnlwYIAIc2mFs0tQngDVYauEdg+WTD
0TMDGpXoQTFXgAj2st6MA+UITgc1od3PveIeNkYi7bCYxGndQbZeGJ14itXTwTZR
lce9jHkn2ZG7LHhqcqC1Zdzp1+6lHQSgT81tPYzfUXhrqUHWjJjEHlSjAllZDD4E
zbV9y8zdSuQYK65VqFPnGl4BzOKBAL3VEwrtzf2wYejykodZsXp5Aygl7WAmuSXv
bl5avMfp0GLAu+5XvpfAqdAUQimtSE5/ODIWogF1Emqvu19qIwspQJk81A3yUSCa
wD22S3BQc8RuE9GSjk75ykA8fYAfv8n1fYSqbaJazR7fe9ZMRsNPcwEiyF86jlw=
=cZ/A
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170513132341</emailId><senderName>Jayati Dev</senderName><senderEmail>devjayati@outlook.com</senderEmail><timestampReceived>2017-05-13 13:23:41-0400</timestampReceived><subject>Re: [tor-dev] Feedback Extension for Tor Browser</subject><body>

Hello,

The feedback extension project is not a part of GSoC this year, but I was wondering \
if its still possible to help with the project, if someone isn't already working on \
it? 

Thanks,
Jayati

&gt; On 11-May-2017, at 5:30 PM, "tor-dev-request@lists.torproject.org" \
&gt; &lt;tor-dev-request@lists.torproject.org&gt; wrote: 
&gt; Send tor-dev mailing list submissions to
&gt; tor-dev@lists.torproject.org
&gt; 
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt; tor-dev-request@lists.torproject.org
&gt; 
&gt; You can reach the person managing the list at
&gt; tor-dev-owner@lists.torproject.org
&gt; 
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt; 
&gt; 
&gt; Today's Topics:
&gt; 
&gt; 1. man page: MyFamily (nusenu)
&gt; 2. Re: man page: MyFamily (nusenu)
&gt; 3. Re: man page: MyFamily (teor)
&gt; 4. Re: man page: MyFamily (nusenu)
&gt; 
&gt; 
&gt; ----------------------------------------------------------------------
&gt; 
&gt; Message: 1
&gt; Date: Wed, 10 May 2017 21:30:00 +0000
&gt; From: nusenu &lt;nusenu-lists@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] man page: MyFamily
&gt; Message-ID: &lt;65cc7527-0dff-fa55-5442-0f1ba7fe1b7c@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; Hi,
&gt; 
&gt; I wanted to help improve the man page section for MyFamily in the light
&gt; of today's MyFamily change [1].
&gt; 
&gt; I sometimes contact relay operators about their MyFamily configuration
&gt; and a common request is: "Please send me an example"
&gt; 
&gt; So I added an example to the man page (including the new multiline
&gt; support in 031)
&gt; 
&gt; - replaced "node" with "fingerprint"
&gt; (no one is using nicknames anymore, or onionoo does not display
&gt; fingerprints?) Are nicknames still supported? (Roger started to remove
&gt; remaining bits of the past Named "world" so this might be another place?)
&gt; - made clear that you can still have multiple fingerprints in a single
&gt; line (if this will be deprecated at some point I can add a deprecation info)
&gt; - added info that the fingerprint can be prefixed with $
&gt; - changed "This option can be repeated many times, for multiple families"
&gt; to
&gt; "This option can be repeated many times, for multiple fingerprints"
&gt; (from one relay's view there is only one family)
&gt; 
&gt; nusenu
&gt; 
&gt; inline patch below (I can paste it to trac if you like)
&gt; 
&gt; [1]
&gt; https://gitweb.torproject.org/tor.git/commit/?id=d76cffda601eed40d6a81eadb1240d98ee1e70a2
&gt;  https://trac.torproject.org/projects/tor/ticket/4998#comment:11
&gt; 
&gt; 1735c1735
&gt; &lt; [[MyFamily]] **MyFamily** __node__::
&gt; ---
&gt; &gt; [[MyFamily]] **MyFamily** __fingerprint__,__fingerprint__,__...__::
&gt; 1738,1739c1738,1741
&gt; &lt;     their identity fingerprints. This option can be repeated many
&gt; times, for
&gt; &lt;     multiple families. When two servers both declare that they are in the
&gt; ---
&gt; &gt; their (possibly $-prefixed) identity fingerprints.
&gt; &gt; This option can be repeated many times, for
&gt; &gt; multiple fingerprints, all fingerprints in all MyFamily lines will
&gt; be merged.
&gt; &gt; When two servers both declare that they are in the
&gt; 1745,1746c1747,1753
&gt; &lt;     When listing a node, it's better to list it by fingerprint than by
&gt; &lt;     nickname: fingerprints are more reliable.
&gt; ---
&gt; &gt; Example: +
&gt; &gt; MyFamily
&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
&gt; +
&gt; &gt; MyFamily CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC +
&gt; &gt; +
&gt; &gt; is identical to: +
&gt; &gt; +
&gt; &gt; MyFamily
&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
&gt;  
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 801 bytes
&gt; Desc: OpenPGP digital signature
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20170510/068e51ea/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 2
&gt; Date: Wed, 10 May 2017 21:54:00 +0000
&gt; From: nusenu &lt;nusenu-lists@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] man page: MyFamily
&gt; Message-ID: &lt;9c027ab0-b0f6-d9cc-8e9e-5af3cd9fb1b8@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; nusenu:
&gt; &gt; no one is using nicknames anymore, or onionoo does not display
&gt; &gt; fingerprints?) Are nicknames still supported?
&gt; 
&gt; correction, I found some nicknames in onionoo's alleged_family field of
&gt; the following relays, so they use it, but didn't find any in
&gt; effective_family. So it should be fine to use 'fingerprint' only in the
&gt; documentation?
&gt; 
&gt; 
&gt; list of relays with nicknames in their alleged_family
&gt; 02326AE8AAA771BFF9718012672636BC31156E51
&gt; 0C039F35C2E40DCB71CD8A07E97C7FD7787D42D6
&gt; 0CA982E2458AA0CC5A31B426D27B40D538C8DFD1
&gt; 12E7506C5842B51BA0F6C3A9B0390158688D7CFA
&gt; 16446628702AD87A369C63DA6F0D0FDD28B405D3
&gt; 16F7E9E93D6CC469392AD0BA020A3F359DF98345
&gt; 16F8469B848F9DCB4590BCC5CEA5F24980BDC806
&gt; 1802AE6297FAC65BEF81401BB82207F8A40E5F7E
&gt; 1A51BD3B4BC752D175CC5123E83C099F2A0D5004
&gt; 1BF05882C1C103731DB2CA7E4D07302CEDED2256
&gt; 1C5E0E941F46B5B0219C0893298688994D517236
&gt; 1D8ED54EA9DF2D46558AD0096DD5D9DD297F13A8
&gt; 1E5A7C498A9F085ACB12B6C10CC510E1426121E9
&gt; 233864ABC44228059D8BC21058E45F586719050F
&gt; 346019C3757C1649E7586F06A69993D68883D25F
&gt; 38594065185DD418373F9AE365A8030DBC29EE64
&gt; 38B63BB8DE8B63BBE634C8AB84E51BA733EBE874
&gt; 3B50CF566B45E0BCC47FE90DE0A7103AF00C1B67
&gt; 3C4814E9C1C4BD558A4D46B0DD848A0BDB7A159F
&gt; 3FDD2586B98C33652F2F1512321EF43A5874C9AD
&gt; 40F32747DA9C12CF59B7CAF2EA0FA918528C993B
&gt; 4185C7D340B73B081F181C094B30032B59082BE3
&gt; 4E1A81B90F4FB498EFB1CA023260C8BEC2E02083
&gt; 56BF3B636ADF50B2013B3164EBEDE59D0C1C2ACE
&gt; 5E99CA5F45A8757FACA7628278A08F8D6C1891E2
&gt; 62652D3DB1D8CD7873E01BB4089545BE0567DE80
&gt; 6DFBF0FF50456125AD98DE665CC60031863FEB98
&gt; 8096EA61F733C3030351401944F54F254185098C
&gt; 88F413062CF8A702B01F43BDEF9E43A2669A76EF
&gt; 8CB33A002002ABAE3F3E2C91E006494FD64A09DD
&gt; 8CB3BBC8CEEA91734CF2A275FA52FC55ECBC8A5B
&gt; 9231DF741915AA1630031A93026D88726877E93A
&gt; 94541F30DE462C066F4504D397C10776DFAD475F
&gt; 9536B457F01F40696B131A72BC102343759F46AA
&gt; 97FC02820912441BC2DFE3ACF433E455714B0AF5
&gt; 9A9BC34468AC1677782E4E56B27D947A9C991E2E
&gt; 9F7B124E664F37938B36ED0E73EECFF7D653C3B4
&gt; A5E3D05A4F44A915C429BF712334A4E28E46A10C
&gt; AC9803701F9EE18194D40B38E47CE4C68CF2F567
&gt; BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E
&gt; C3636ECA4B40900056590AA7DBFC6ED09379852F
&gt; CFEC81B97F6C15689ED8451C3DB0F8C399C01724
&gt; D50DF76982F0D2BFDB28A753079CDD63A192C32F
&gt; D8C1E05325C108D848057F42A881D511CFB12409
&gt; D9065F9E57899B3D272AA212317AF61A9B14D204
&gt; DA379D7B0CD1F7CF2FB3F0AC64B54150E784BF5B
&gt; DCAA1CED7183B561D18CF580BE9933BD9168D101
&gt; DFF328E9305A4D22AD19D1F9D54404F8DDCD85E5
&gt; E3DB2E354B883B59E8DC56B3E7A353DDFD457812
&gt; E41B16F7DDF52EBB1DB4268AB2FE340B37AD8904
&gt; E727D0B4179549BB3F82ED3C256F209E54CE0B23
&gt; EBDE762412D1F0D75338053F5A5A9B6EE053D642
&gt; F0A13CA98D8F392EE9FC3AF331DE0C3E69B073AD
&gt; F7181ED08E1A2E564105C3620AFA0D78A131F4E5
&gt; FB61107EAC51E731334FD56FBD6C4C4A647714B9
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 801 bytes
&gt; Desc: OpenPGP digital signature
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20170510/0be2c37c/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 3
&gt; Date: Thu, 11 May 2017 12:16:01 +1000
&gt; From: teor &lt;teor2345@gmail.com&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] man page: MyFamily
&gt; Message-ID: &lt;B5FFDC83-1AD3-47C6-B977-AB19FBFB3A76@gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; &gt; 
&gt; &gt; On 11 May 2017, at 07:30, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; ...
&gt; &gt; 
&gt; &gt; inline patch below (I can paste it to trac if you like)
&gt; 
&gt; Trac please, emails are easy to lose track of.
&gt; 
&gt; And we prefer branches if possible:
&gt; 
&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md#n13
&gt; 
&gt; &gt; On 11 May 2017, at 07:54, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; nusenu:
&gt; &gt; &gt; no one is using nicknames anymore, or onionoo does not display
&gt; &gt; &gt; fingerprints?) Are nicknames still supported?
&gt; 
&gt; Nicknames are supported, but deprecated, as multiple relays can have
&gt; the same nickname.
&gt; 
&gt; &gt; correction, I found some nicknames in onionoo's alleged_family field of
&gt; &gt; the following relays, so they use it, but didn't find any in
&gt; &gt; effective_family. So it should be fine to use 'fingerprint' only in the
&gt; &gt; documentation?
&gt; 
&gt; That's ok, there's no need to mention a deprecated, insecure feature.
&gt; 
&gt; &gt; ...
&gt; 
&gt; T
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 801 bytes
&gt; Desc: Message signed with OpenPGP
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20170511/e8195812/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 4
&gt; Date: Thu, 11 May 2017 07:45:00 +0000
&gt; From: nusenu &lt;nusenu-lists@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] man page: MyFamily
&gt; Message-ID: &lt;b8a90bc7-16c1-a304-a4ee-c7359719aa91@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; &gt; Trac please, emails are easy to lose track of.
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/22223
&gt; 
&gt; 
&gt; &gt; And we prefer branches if possible:
&gt; 
&gt; Actually I aimed for a github url for you but the import failed
&gt; https://twitter.com/nusenu_/status/862364712570421249
&gt; 
&gt; so I made a quick 'n dirty version (instead of no version).
&gt; 
&gt; 
&gt; -- 
&gt; https://mastodon.social/@nusenu
&gt; https://twitter.com/nusenu_
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 801 bytes
&gt; Desc: OpenPGP digital signature
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20170511/c43f44f6/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Subject: Digest Footer
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; End of tor-dev Digest, Vol 76, Issue 7
&gt; **************************************
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170514134715</emailId><senderName>harshit tandon</senderName><senderEmail>harshittandon24@gmail.com</senderEmail><timestampReceived>2017-05-14 13:47:15-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


I would like to contribute to tor browser how can I help
regards,
Harshit

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;I would like to contribute to tor browser how can I help \
&lt;br&gt;&lt;/div&gt;regards,&lt;br&gt;Harshit&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170515053123</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-05-15 05:31:23-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

On Sun, May 14, 2017 at 9:35 AM, harshit tandon
&lt;harshittandon24@gmail.com&gt; wrote:
&gt; I would like to contribute to tor browser how can I help

Start by filling out the "^Subject: ' lines of your emails
with a relavant "Subject" so people know what you're
talking about instead of leaving them blank.
You can learn more details by searching "email etiquette".
Thank you for volunteer.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170505233052</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-05-05 23:30:52-0400</timestampReceived><subject>[tor-dev] Why is my bridge not publishing statistics?</subject><body>

I searched for the Snowflake bridge in Atlas, and couldn't find it. Its
fingerprint is 2B280B23E1107BB62ABFC40DDCC8824814F80A72. Its torrc is
stock "Last updated 9 October 2013 for Tor 0.2.5.2-alpha" except for
these settings:
	ContactInfo David Fifield &lt;dcf@torproject.org&gt;
	SOCKSPort 0
	ORPort 9001
	BridgeRelay 1
	ExtORPort auto
	ServerTransportPlugin snowflake exec /usr/local/bin/snowflake-server \
--acme-hostnames snowflake.bamsoftware.com --acme-email dcf@torproject.org --log \
/var/log/tor/snowflake-server.log  ServerTransportListenAddr snowflake 0.0.0.0:443

Its ORPort 9001 is blocked by the local firewall, because it is meant to
be only a Snowflake bridge, and not a vanilla bridge. (Most of the
default Tor Browser obfs4 bridges are configured the same way, with
their ORPort blocked.) There are these messages in the log (which I
exxpected):
	[warn] Your server (37.218.242.151:9001) has not managed to confirm that its ORPort \
is reachable. Please check your firewalls, ports, address, /etc/hosts file, etc.

Why is the bridge not appearing in Atlas? I initially suspected
https://bugs.torproject.org/18050, whose changelog entry is:
	- Check that both the ORPort and DirPort (if present) are reachable
	  before publishing a relay descriptor. Otherwise, relays publish a
	  descriptor with DirPort 0 when the DirPort reachability test takes
	  longer than the ORPort reachability test.
	  Closes bug #18050. Reported by "starlight", patch by "teor".
	  Bugfix on 0.1.0.1-rc, commit a1f1fa6ab on 27 Feb 2005.
But if it's the case that an unreachable ORPort causes descriptors not
to be uploaded, then why do the default obfs4 bridges appear in Atlas?
For example:
	https://atlas.torproject.org/#details/D9C805C955CB124D188C0D44F271E9BE57DE2109
	https://atlas.torproject.org/#details/D3D4A456FCB5F301F092F6A49ED671B84B432FB8
	https://atlas.torproject.org/#details/11A3982C417AF37230F576006405BE5338F41C09
Actually, now that I look at it, I notice some other default bridges are
not present in Atlas, for example the two from
https://bugs.torproject.org/21917, which went out in Tor Browser 6.5.2:
	C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4
	0BAC39417268B96B9F514E7F63FA6FBA1A788955

What's going on and how can we fix it? You can find a list of default
bridge fingerprints here:
https://gitweb.torproject.org/builders/tor-browser-bundle.git/tree/Bundle-Data/PTConfigs/bridge_prefs.js
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170509012019</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-05-09 01:20:19-0400</timestampReceived><subject>Re: [tor-dev] [tor-commits] [tor/master] Bug 17592: Clean up connection timeout logic.</subject><body>

On Mon, May 08, 2017 at 06:00:18PM +0000, nickm@torproject.org wrote:
&gt; commit d5a151a06788c28ac1c50398c6e571d484774f47
&gt; Author: Mike Perry &lt;mikeperry-git@torproject.org&gt;
&gt; Date:   Tue Feb 21 21:28:00 2017 -0500
[...]
&gt; +   - Increase the intial circuit build timeout testing frequency, to help
&gt; +     ensure that ReducedConnectionPadding clients finish learning a timeout
&gt; +     before their orconn would expire. The initial testing rate was set back
&gt; +     in the days of TAP and before the Tor Browser updater, when we had to be
&gt; +     much more careful about new clients making lots of circuits. With this
&gt; +     change, a circuit build time is learned in about 15-20 minutes, instead
&gt; +     of ~100-120 minutes.

Fyi, the current Tor network has "cbttestfreq=60" set in its consensus
params.

Is this something we should change?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170510213000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-10 21:30:00-0400</timestampReceived><subject>[tor-dev] man page: MyFamily</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

 I wanted to help improve the man page section for MyFamily in the light
of today's MyFamily change [1].

I sometimes contact relay operators about their MyFamily configuration
and a common request is: "Please send me an example"

So I added an example to the man page (including the new multiline
support in 031)

- replaced "node" with "fingerprint"
(no one is using nicknames anymore, or onionoo does not display
fingerprints?) Are nicknames still supported? (Roger started to remove
remaining bits of the past Named "world" so this might be another place?)
- made clear that you can still have multiple fingerprints in a single
line (if this will be deprecated at some point I can add a deprecation info)
- added info that the fingerprint can be prefixed with $
- changed "This option can be repeated many times, for multiple families"
to
"This option can be repeated many times, for multiple fingerprints"
(from one relay's view there is only one family)

nusenu

inline patch below (I can paste it to trac if you like)

[1]
https://gitweb.torproject.org/tor.git/commit/?id=d76cffda601eed40d6a81eadb1240d98ee1e70a2
 https://trac.torproject.org/projects/tor/ticket/4998#comment:11

1735c1735
&lt; [[MyFamily]] **MyFamily** __node__::
---
&gt; [[MyFamily]] **MyFamily** __fingerprint__,__fingerprint__,__...__::
1738,1739c1738,1741
&lt;     their identity fingerprints. This option can be repeated many
times, for
&lt;     multiple families. When two servers both declare that they are in the
---
&gt; their (possibly $-prefixed) identity fingerprints.
&gt; This option can be repeated many times, for
&gt; multiple fingerprints, all fingerprints in all MyFamily lines will
be merged.
&gt; When two servers both declare that they are in the
1745,1746c1747,1753
&lt;     When listing a node, it's better to list it by fingerprint than by
&lt;     nickname: fingerprints are more reliable.
---
&gt; Example: +
&gt; MyFamily
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
+
&gt; MyFamily CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC +
&gt; +
&gt; is identical to: +
&gt; +
&gt; MyFamily
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170511130804</emailId><senderName>vmon</senderName><senderEmail>vmon@riseup.net</senderEmail><timestampReceived>2017-05-11 13:08:04-0400</timestampReceived><subject>[tor-dev] Which network simulator are you using/suggesting for testing Tor</subject><body>

Hello Tor-devers,

A friend of mine wants to simulate Tor and measure the network
performance by tweaking various node selection heuristics etc. He was
wondering what simulator usually people who perform and study Tor
uses. This was the best he came up with 

https://shadow.github.io/

but was wondering if anyone has a better suggestion.

Thanks a lot for your help,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170519082700</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-05-19 08:27:00-0400</timestampReceived><subject>[tor-dev] Clarifications on guard-spec.txt</subject><body>

Hi folks!

I'm catching up on my proposals, and I really like guard-spec.txt.
Nicely done!

I made some fixes that I hope are straightforward:
https://lists.torproject.org/pipermail/tor-commits/2017-May/122942.html
https://lists.torproject.org/pipermail/tor-commits/2017-May/122948.html
https://lists.torproject.org/pipermail/tor-commits/2017-May/122986.html

And I have four remaining questions/topics that could use some feedback
from the spec authors/implementors rather than just having me bust in
and change things.

---------------------------------------------------------------

A) We don't really say what we mean by "adding" a guard to an ordered
list. In particular:

&gt;  We add new members to {CONFIRMED_GUARDS} when we mark a circuit
&gt;  built through a guard as "for user traffic."

When we say "add", do we mean "append" here?

&gt;  To compute primary guards, take the ordered intersection of
&gt;  {CONFIRMED_GUARDS} and {FILTERED_GUARDS}, and take the first
&gt;  {N_PRIMARY_GUARDS} elements.  If there are fewer than
&gt;  {N_PRIMARY_GUARDS} elements, add additional elements to
&gt;  PRIMARY_GUARDS chosen _uniformly_ at random from
&gt;  ({FILTERED_GUARDS} - {CONFIRMED_GUARDS}).

Similarly, does "add" mean "append"?

&gt;  Once an element has been added to {PRIMARY_GUARDS}, we do not remove it
&gt;  until it is replaced by some element from {CONFIRMED_GUARDS}. Confirmed
&gt;  elements always proceed unconfirmed ones in the {PRIMARY_GUARDS} list.

This one looks like a bug as currently stated: by "proceed", do we mean
"precede"?

---------------------------------------------------------------

B) In Sec 4.10, whenever we get a new consensus, we:

&gt;  For every guard in {SAMPLED_GUARDS}, we update {IS_LISTED} and
&gt;  {FIRST_UNLISTED_AT}.

In the old design, we also believed the Running flag in the new
consensus, that is, we marked the guards as reachable again. It looks
from sampled_guards_update_from_consensus() like we no longer do that.

Is that old behavior considered a bug and we intentionally stopped,
or did we not consider it?

I am ok with "that was stupid behavior, so we stopped", but if we didn't
know that we used to do it, maybe we should decide whether it is stupid
behavior. :)

---------------------------------------------------------------

C) In Sec A.4, in the state file we have

&gt;         "bridge_addr" -- If the guard is a bridge, its configured
&gt;         address and OR port. Optional.

How does this play with bridges that have pluggable transports? In my
"bridge obfs2 128.31.0.34:51715" line, the ORPort of the bridge is
not listed.

It looks from
https://trac.torproject.org/projects/tor/ticket/21027
like we did some fixing here, but the spec didn't get an update?

---------------------------------------------------------------

D) In Sec 4.8, when a circuit succeeds:

&gt;      * If this circuit was &lt;usable_if_no_better_guard&gt;, it is now
&gt;        &lt;waiting_for retry&gt;.  You may not yet attach streams to it.
&gt;        Then check whether the {last_time_on_internet} is more than
&gt;        {INTERNET_LIKELY_DOWN_INTERVAL} seconds ago:
&gt;
&gt;           * If it is, then mark all {PRIMARY_GUARDS} as "maybe"
&gt;             reachable.
&gt;
&gt;           * If it is not, update the list of waiting circuits. (See
&gt;             [UPDATE_WAITING] below)

[Where INTERNET_LIKELY_DOWN_INTERVAL has been picked as 10 minutes.]

To make sure I understand this one, consider the following scenario:

* We go offline, and our current circuits fail.
* We try to make new circuits through each of our primary guards,
  failing for each (because we're offline) and marking them down.
* Then we move to the remaining confirmed+usable ones, and mark those
  down too.
* Then we work through the rest of USABLE_FILTERED_GUARDS, marking them
  down too. As we mark them down, USABLE_FILTERED_GUARDS shrinks,
  causing us to add new elements to SAMPLED_GUARDS to replenish
  USABLE_FILTERED_GUARDS.
* After we've brought SAMPLED GUARDS to 60, we stop adding new ones.
  At this point, we are out of tries:

&gt;  * Otherwise, if USABLE_FILTERED_GUARDS is empty, we have exhausted
&gt;      all the sampled guards.  In this case we proceed by marking all guards
&gt;      as &lt;maybe&gt; reachable so that we can keep on sampling.

Does this mean that we mark our *already-sampled* guards as reachable,
thus making USABLE_FILTERED_GUARDS big again, and we loop through the
above steps again, and we keep looping until we come back online?

The above "so that we can keep on sampling" phrase confuses me, because it
seems like there's no way that we would arrive at "USABLE_FILTERED_GUARDS
is empty" without also having SAMPLED_GUARDS at its maximum size:

&gt;     Whenever we are going to sample from {USABLE_FILTERED_GUARDS},
&gt;     and it contains fewer than {MIN_FILTERED_SAMPLE} elements, we
&gt;     add new elements to {SAMPLED_GUARDS} until one of the following
&gt;     is true:
&gt;
&gt;       * {USABLE_FILTERED_GUARDS} is large enough,
&gt;     OR
&gt;       * {SAMPLED_GUARDS} is at its maximum size.

So, perhaps we mean "so that we can keep on trying circuits"?

Or, oh! Do we mean "sampling from USABLE_FILTERED_GUARDS", not "sampling
from GUARDS"?

Ok, proceeding with my scenario: let's further say that we're offline
in such a way that we get quick failures for the connect attempts,
so we burn through each connect attempt at one per second, meaning we
blow through our CONFIRMED set within the first 10 minutes of going
offline. Let's also say we come back online within those 10 minutes. A
circuit (to some guard in SAMPLED_GUARDS) succeeds, and the circuit is
now of type &lt;waiting_for_better_guard&gt;.

Since last_time_on_internet isn't very long ago, and there aren't any
other circuits open, the new circuit becomes &lt;complete&gt;, and we mark
this new guard as CONFIRMED, and stick it on the end of the CONFIRMED set.

We keep using the newly CONFIRMED guard (since it's the only one
we think is reachable) for about a half hour, at which point the
PRIMARY_GUARDS_RETRY_SCHED schedule makes us forgive our primary guards,
and we switch back to our favorite primary guard.

Do I have it right?

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170519075200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-19 07:52:00-0400</timestampReceived><subject>[tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Karsten,

onionoo is hardly reachable since about 17 hours ago.

Is this only externally facing or will this also cause onionoo to miss
descriptors internally?

Any ETA on when this will improve?

thanks,
nusenu


--=20
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170517115148</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-05-17 11:51:48-0400</timestampReceived><subject>[tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

Hello,

here is some background information and summarizing of proposal 247
"Defending Against Guard Discovery Attacks using Vanguards" for people
who plan to work on this in the short-term future.

I include a list of open design topics (probably not exhaustive) and a list of
engineering topics. Some engineering stuff can be done parallel to the design stuff.

==================== Background info ====================

* Proposal: https://gitweb.torproject.org/torspec.git/tree/proposals/247-hs-guard-discovery.txt
                
* Discussion:
** Initial prop247 thread: \
                https://lists.torproject.org/pipermail/tor-dev/2015-July/009066.html
** Recent prop247 thread: \
                https://lists.torproject.org/pipermail/tor-dev/2015-September/009497.html
                
** Reading group notes of prop247: \
https://lists.torproject.org/pipermail/tor-dev/2016-January/010265.html

==================== Design topics ====================

* Optimize proposal parameters
** Optimize guardset sizes
** Optimize guardset lifetimes and prob distributions (minXX/maxXX/uniform?)
** To take informed decision, we might need a prop247 simulator, or an actual PoC \
with txtorcon

* HOW to choose second-layer and third-layer guards?
** Should they be Guards? middles? Vanguards? Serious security / load balancing \
                implications!
** Can guardsets share guards between them or are they disjoint? Particularly \
                third-layer sets
** background: https://lists.torproject.org/pipermail/tor-dev/2016-January/010265.html


* HOW to avoid side-channel guard discovery threats?
** Can IP/RP be the same as first-layer guard?
** Can first-layer guard be the same as third-layer guard?
** background: https://gitweb.torproject.org/user/mikeperry/torspec.git/commit/?h=guard_discovery_dev2


* Change path selection for IP circs to avoid third-layer guard linkability threats.
** Switch from [HS-&gt;G1-&gt;M-&gt;IP] to [HS-&gt;G1-&gt;G2-&gt;G3-&gt;IP] or even to \
                [HS-&gt;G1-&gt;G2-&gt;G3-&gt;M-&gt;IP].
** Consider the latter option for HSDir circs as well?
** background: https://gitweb.torproject.org/user/mikeperry/torspec.git/commit/?h=guard_discovery_dev2


* Should prop247 be optional or default?
** Consider making it optional for a testing period?

* How does prop247 affects network performance and load balancing?
** especially if it's enabled by default?
** Update load balancing proposal?

* Correct behavior for multiple HSes on single host?

* Does prop247 influence guard fingerprinting (#10969) and should we care enough?

==================== Engineering topics ====================

* What's a good entrynodes API to implement prop247? 
* What's a good state file API to implement prop247?

* Write prop247 simulator to verify security goals and optimize proposal parameters \
(see above).

* Write PoC with txtorcon!
* Write PoC with little-t-tor!

============================================================
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170528210128</emailId><senderName>Andreas Stieger</senderName><senderEmail>astieger@suse.com</senderEmail><timestampReceived>2017-05-28 21:01:28-0400</timestampReceived><subject>[tor-dev] [PATCH] fix GCC 7 implicit fallthroug warnings</subject><body>

Hello,

6 patches that fix -Wimplicit-fallthrough in GCC 7 on master, by adding

 __attribute__ ((fallthrough));

or break, as required.


Additionally, the patch fixes the same on maint-0.3.0, the warning is no
longer present in master.
0001-Fix-implicit-fallthrough-warning-in-GCC-7-in-tor_gzi.patch

Please review,
Andreas

-- 
Andreas Stieger &lt;astieger@suse.com&gt;
Project Manager Security
SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton,
HRB 21284 (AG Nürnberg)



["0001-Fix-implicit-fallthrough-warning-with-GCC-7-in-sipha.patch" (text/x-patch)]

From 089c07448260fb9df1aed6cafd36334d64f8dfe7 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 21:50:38 +0200
Subject: [PATCH 1/6] Fix implicit fallthrough warning with GCC 7 in
 siphash24()

---
 src/ext/csiphash.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/ext/csiphash.c b/src/ext/csiphash.c
index 1029bbbad..6dfa480a0 100644
--- a/src/ext/csiphash.c
+++ b/src/ext/csiphash.c
@@ -88,13 +88,13 @@ uint64_t siphash24(const void *src, unsigned long src_sz, const struct sipkey *k
 	}
 
 	switch (src_sz - blocks) {
-		case 7: last7 |= (uint64_t)m[i + 6] &lt;&lt; 48;
-		case 6: last7 |= (uint64_t)m[i + 5] &lt;&lt; 40;
-		case 5: last7 |= (uint64_t)m[i + 4] &lt;&lt; 32;
-		case 4: last7 |= (uint64_t)m[i + 3] &lt;&lt; 24;
-		case 3: last7 |= (uint64_t)m[i + 2] &lt;&lt; 16;
-		case 2: last7 |= (uint64_t)m[i + 1] &lt;&lt;  8;
-		case 1: last7 |= (uint64_t)m[i + 0]      ;
+		case 7: last7 |= (uint64_t)m[i + 6] &lt;&lt; 48; __attribute__ ((fallthrough));
+		case 6: last7 |= (uint64_t)m[i + 5] &lt;&lt; 40; __attribute__ ((fallthrough));
+		case 5: last7 |= (uint64_t)m[i + 4] &lt;&lt; 32; __attribute__ ((fallthrough));
+		case 4: last7 |= (uint64_t)m[i + 3] &lt;&lt; 24; __attribute__ ((fallthrough));
+		case 3: last7 |= (uint64_t)m[i + 2] &lt;&lt; 16; __attribute__ ((fallthrough));
+		case 2: last7 |= (uint64_t)m[i + 1] &lt;&lt;  8; __attribute__ ((fallthrough));
+		case 1: last7 |= (uint64_t)m[i + 0]      ; __attribute__ ((fallthrough));
 		case 0:
 		default:;
 	}
-- 
2.13.0



["0002-Fix-implicit-fallthrough-warning-with-GCC-7-in-ed255.patch" (text/x-patch)]

From d9d548d0de44b0fd46d366836c58bab383457612 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 21:50:38 +0200
Subject: [PATCH 2/6] Fix implicit fallthrough warning with GCC 7 in
 ed25519-donna

---
 src/ext/ed25519/donna/modm-donna-64bit.h | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/ext/ed25519/donna/modm-donna-64bit.h \
b/src/ext/ed25519/donna/modm-donna-64bit.h index 012ea9ea0..ff2dd72a5 100644
--- a/src/ext/ed25519/donna/modm-donna-64bit.h
+++ b/src/ext/ed25519/donna/modm-donna-64bit.h
@@ -294,10 +294,10 @@ sub256_modm_batch(bignum256modm out, const bignum256modm a, \
const bignum256modm  size_t i = 0;
 	bignum256modm_element_t carry = 0;
 	switch (limbsize) {
-		case 4: out[i] = (a[i] - b[i])        ; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 3: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 2: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 1: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
0xffffffffffffff; i++; +		case 4: out[i] = (a[i] - b[i])        ; carry = (out[i] &gt;&gt; \
63); out[i] &amp;= 0xffffffffffffff; i++; __attribute__ ((fallthrough)); +		case 3: \
out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= 0xffffffffffffff; \
i++; __attribute__ ((fallthrough)); +		case 2: out[i] = (a[i] - b[i]) - carry; carry \
= (out[i] &gt;&gt; 63); out[i] &amp;= 0xffffffffffffff; i++; __attribute__ ((fallthrough)); \
+		case 1: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
0xffffffffffffff; i++; __attribute__ ((fallthrough));  case 0: 
 		default: out[i] = (a[i] - b[i]) - carry;
 	}
@@ -310,10 +310,10 @@ lt256_modm_batch(const bignum256modm a, const bignum256modm b, \
size_t limbsize)  size_t i = 0;
 	bignum256modm_element_t t, carry = 0;
 	switch (limbsize) {
-		case 4: t = (a[i] - b[i])        ; carry = (t &gt;&gt; 63); i++;
-		case 3: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 2: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 1: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
+		case 4: t = (a[i] - b[i])        ; carry = (t &gt;&gt; 63); i++; __attribute__ \
((fallthrough)); +		case 3: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++; \
__attribute__ ((fallthrough)); +		case 2: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; \
63); i++; __attribute__ ((fallthrough)); +		case 1: t = (a[i] - b[i]) - carry; carry \
= (t &gt;&gt; 63); i++; __attribute__ ((fallthrough));  case 0: t = (a[i] - b[i]) - carry; \
carry = (t &gt;&gt; 63);  }
 	return (int)carry;
@@ -325,10 +325,10 @@ lte256_modm_batch(const bignum256modm a, const bignum256modm b, \
size_t limbsize)  size_t i = 0;
 	bignum256modm_element_t t, carry = 0;
 	switch (limbsize) {
-		case 4: t = (b[i] - a[i])        ; carry = (t &gt;&gt; 63); i++;
-		case 3: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 2: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 1: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
+		case 4: t = (b[i] - a[i])        ; carry = (t &gt;&gt; 63); i++; __attribute__ \
((fallthrough)); +		case 3: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++; \
__attribute__ ((fallthrough)); +		case 2: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; \
63); i++; __attribute__ ((fallthrough)); +		case 1: t = (b[i] - a[i]) - carry; carry \
= (t &gt;&gt; 63); i++; __attribute__ ((fallthrough));  case 0: t = (b[i] - a[i]) - carry; \
carry = (t &gt;&gt; 63);  }
 	return (int)!carry;
-- 
2.13.0


["0003-Fix-implicit-fallthrough-warning-with-GCC-7-in-parse.patch" (text/x-patch)]

From be85c79304a0eb16e50777219d296d1f7c88bbc1 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 22:27:26 +0200
Subject: [PATCH 3/6] Fix implicit fallthrough warning with GCC 7 in
 parse_socks

---
 src/or/buffers.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/or/buffers.c b/src/or/buffers.c
index 58cfdeee8..3692ed4d0 100644
--- a/src/or/buffers.c
+++ b/src/or/buffers.c
@@ -1715,6 +1715,7 @@ parse_socks(const char *data, size_t datalen, socks_request_t *req,
           return -1;
       }
       tor_assert(0);
+      break;
     case 4: { /* socks4 */
       enum {socks4, socks4a} socks4_prot = socks4a;
       const char *authstart, *authend;
-- 
2.13.0



["0004-Fix-implicit-fallthrough-warning-with-GCC-7-in-conne.patch" (text/x-patch)]

From ed503e58894b11845f0cb5a4f0035d808c86a8e6 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 22:32:47 +0200
Subject: [PATCH 4/6] Fix implicit fallthrough warning with GCC 7 in
 connection_edge_process_inbuf

---
 src/or/connection_edge.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/or/connection_edge.c b/src/or/connection_edge.c
index fd9c97bd3..62d5d1773 100644
--- a/src/or/connection_edge.c
+++ b/src/or/connection_edge.c
@@ -261,6 +261,7 @@ connection_edge_process_inbuf(edge_connection_t *conn, int package_partial)
       }
       /* Fall through if the connection is on a circuit without optimistic
        * data support. */
+      __attribute__ ((fallthrough));
     case EXIT_CONN_STATE_CONNECTING:
     case AP_CONN_STATE_RENDDESC_WAIT:
     case AP_CONN_STATE_CIRCUIT_WAIT:
-- 
2.13.0



["0005-Fix-implicit-fallthrough-warning-with-GCC-7-in-DNS-c.patch" (text/x-patch)]

From e79e63c7c3224b9fe2b40316b60e0f15a685c08f Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 22:37:19 +0200
Subject: [PATCH 5/6] Fix implicit fallthrough warning with GCC 7 in DNS code

---
 src/or/dns.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/or/dns.c b/src/or/dns.c
index 8a40a70d7..f5b86bf78 100644
--- a/src/or/dns.c
+++ b/src/or/dns.c
@@ -523,6 +523,7 @@ send_resolved_cell,(edge_connection_t *conn, uint8_t answer_type,
         answer_type = RESOLVED_TYPE_ERROR;
         /* fall through. */
       }
+      __attribute__ ((fallthrough));
     case RESOLVED_TYPE_ERROR_TRANSIENT:
     case RESOLVED_TYPE_ERROR:
       {
-- 
2.13.0



["0006-Fix-implicit-fallthrough-warning-with-GCC-7-in-relay.patch" (text/x-patch)]

From df72046d124fb5083bcb0067f2e3234ad5716a74 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 22:40:04 +0200
Subject: [PATCH 6/6] Fix implicit fallthrough warning with GCC 7 in relay code

---
 src/or/relay.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/or/relay.c b/src/or/relay.c
index 7082002f8..a7bf66ac2 100644
--- a/src/or/relay.c
+++ b/src/or/relay.c
@@ -994,6 +994,7 @@ connection_ap_process_end_not_open(
           break; /* break means it'll close, below */
         /* Else fall through: expire this circuit, clear the
          * chosen_exit_name field, and try again. */
+        __attribute__ ((fallthrough));
       case END_STREAM_REASON_RESOLVEFAILED:
       case END_STREAM_REASON_TIMEOUT:
       case END_STREAM_REASON_MISC:
-- 
2.13.0



["0001-Fix-implicit-fallthrough-warning-in-GCC-7-in-tor_gzi.patch" (text/x-patch)]

From a7400446b76977bb84b9b00fd92bd49a0694d028 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 22:08:56 +0200
Subject: [PATCH] Fix implicit fallthrough warning in GCC 7 in
 tor_gzip_compress, tor_gzip_uncompress

---
 src/common/torgzip.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/common/torgzip.c b/src/common/torgzip.c
index 04ae353cf..7f6e7deae 100644
--- a/src/common/torgzip.c
+++ b/src/common/torgzip.c
@@ -181,6 +181,7 @@ tor_gzip_compress(char **out, size_t *out_len,
         /* In case zlib doesn't work as I think .... */
         if (stream-&gt;avail_out &gt;= stream-&gt;avail_in+16)
           break;
+        __attribute__ ((fallthrough));
       case Z_BUF_ERROR:
         offset = stream-&gt;next_out - ((unsigned char*)*out);
         old_size = out_size;
@@ -319,6 +320,7 @@ tor_gzip_uncompress(char **out, size_t *out_len,
         /* In case zlib doesn't work as I think.... */
         if (stream-&gt;avail_out &gt;= stream-&gt;avail_in+16)
           break;
+        __attribute__ ((fallthrough));
       case Z_BUF_ERROR:
         if (stream-&gt;avail_out &gt; 0) {
           log_fn(protocol_warn_level, LD_PROTOCOL,
-- 
2.13.0



[Attachment #10 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170528215223</emailId><senderName>Andreas Stieger</senderName><senderEmail>astieger@suse.com</senderEmail><timestampReceived>2017-05-28 21:52:23-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] fix GCC 7 implicit fallthroug warnings</subject><body>

Hello,

On 05/28/2017 11:01 PM, Andreas Stieger wrote:
&gt;  __attribute__ ((fallthrough));

It turns out that this may not be as portable as I thought. Instead, the
attached patch adds magic comments recognized by default
-Wimplicit-fallthrough=3 or break, as required.

Andreas

-- 
Andreas Stieger &lt;astieger@suse.com&gt;
Project Manager Security
SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton,
HRB 21284 (AG Nürnberg)

["0001-Fix-GCC-7-Wimplicit-fallthrough-warnings.patch" (text/x-patch)]

From 845ff6dbb4fcaff7fc5f5422f33d8d3a99a2a108 Mon Sep 17 00:00:00 2001
From: Andreas Stieger &lt;astieger@suse.com&gt;
Date: Sun, 28 May 2017 23:49:31 +0200
Subject: [PATCH] Fix GCC 7 -Wimplicit-fallthrough warnings

Add magic comments recognized by default -Wimplicit-fallthrough=3
or break, as required.
---
 src/ext/csiphash.c                       | 14 +++++++-------
 src/ext/ed25519/donna/modm-donna-64bit.h | 24 ++++++++++++------------
 src/or/buffers.c                         |  1 +
 src/or/connection_edge.c                 |  1 +
 src/or/dns.c                             |  1 +
 src/or/relay.c                           |  1 +
 6 files changed, 23 insertions(+), 19 deletions(-)

diff --git a/src/ext/csiphash.c b/src/ext/csiphash.c
index 1029bbbad..508e4f6ce 100644
--- a/src/ext/csiphash.c
+++ b/src/ext/csiphash.c
@@ -88,13 +88,13 @@ uint64_t siphash24(const void *src, unsigned long src_sz, const \
struct sipkey *k  }
 
 	switch (src_sz - blocks) {
-		case 7: last7 |= (uint64_t)m[i + 6] &lt;&lt; 48;
-		case 6: last7 |= (uint64_t)m[i + 5] &lt;&lt; 40;
-		case 5: last7 |= (uint64_t)m[i + 4] &lt;&lt; 32;
-		case 4: last7 |= (uint64_t)m[i + 3] &lt;&lt; 24;
-		case 3: last7 |= (uint64_t)m[i + 2] &lt;&lt; 16;
-		case 2: last7 |= (uint64_t)m[i + 1] &lt;&lt;  8;
-		case 1: last7 |= (uint64_t)m[i + 0]      ;
+		case 7: last7 |= (uint64_t)m[i + 6] &lt;&lt; 48; /* Falls through. */
+		case 6: last7 |= (uint64_t)m[i + 5] &lt;&lt; 40; /* Falls through. */
+		case 5:	last7 |= (uint64_t)m[i + 4] &lt;&lt; 32; /* Falls through. */
+		case 4: last7 |= (uint64_t)m[i + 3] &lt;&lt; 24; /* Falls through. */
+		case 3:	last7 |= (uint64_t)m[i + 2] &lt;&lt; 16; /* Falls through. */
+		case 2:	last7 |= (uint64_t)m[i + 1] &lt;&lt;  8; /* Falls through. */
+		case 1: last7 |= (uint64_t)m[i + 0]      ; /* Falls through. */
 		case 0:
 		default:;
 	}
diff --git a/src/ext/ed25519/donna/modm-donna-64bit.h \
b/src/ext/ed25519/donna/modm-donna-64bit.h index 012ea9ea0..06c98e303 100644
--- a/src/ext/ed25519/donna/modm-donna-64bit.h
+++ b/src/ext/ed25519/donna/modm-donna-64bit.h
@@ -294,10 +294,10 @@ sub256_modm_batch(bignum256modm out, const bignum256modm a, \
const bignum256modm  size_t i = 0;
 	bignum256modm_element_t carry = 0;
 	switch (limbsize) {
-		case 4: out[i] = (a[i] - b[i])        ; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 3: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 2: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
                0xffffffffffffff; i++;
-		case 1: out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= \
0xffffffffffffff; i++; +		case 4: out[i] = (a[i] - b[i])        ; carry = (out[i] &gt;&gt; \
63); out[i] &amp;= 0xffffffffffffff; i++; /* Falls through. */ +		case 3: out[i] = (a[i] \
- b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= 0xffffffffffffff; i++; /* Falls \
through. */ +		case 2:	out[i] = (a[i] - b[i]) - carry; carry = (out[i] &gt;&gt; 63); out[i] \
&amp;= 0xffffffffffffff; i++; /* Falls through. */ +		case 1:	out[i] = (a[i] - b[i]) - \
carry; carry = (out[i] &gt;&gt; 63); out[i] &amp;= 0xffffffffffffff; i++; /* Falls through. */  \
case 0:   default: out[i] = (a[i] - b[i]) - carry;
 	}
@@ -310,10 +310,10 @@ lt256_modm_batch(const bignum256modm a, const bignum256modm b, \
size_t limbsize)  size_t i = 0;
 	bignum256modm_element_t t, carry = 0;
 	switch (limbsize) {
-		case 4: t = (a[i] - b[i])        ; carry = (t &gt;&gt; 63); i++;
-		case 3: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 2: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 1: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++;
+		case 4: t = (a[i] - b[i])        ; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 3: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 2: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 1: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
 		case 0: t = (a[i] - b[i]) - carry; carry = (t &gt;&gt; 63);
 	}
 	return (int)carry;
@@ -325,10 +325,10 @@ lte256_modm_batch(const bignum256modm a, const bignum256modm b, \
size_t limbsize)  size_t i = 0;
 	bignum256modm_element_t t, carry = 0;
 	switch (limbsize) {
-		case 4: t = (b[i] - a[i])        ; carry = (t &gt;&gt; 63); i++;
-		case 3: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 2: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
-		case 1: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++;
+		case 4: t = (b[i] - a[i])        ; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 3: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 2: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
+		case 1: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63); i++; /* Falls through. */
 		case 0: t = (b[i] - a[i]) - carry; carry = (t &gt;&gt; 63);
 	}
 	return (int)!carry;
diff --git a/src/or/buffers.c b/src/or/buffers.c
index 58cfdeee8..3692ed4d0 100644
--- a/src/or/buffers.c
+++ b/src/or/buffers.c
@@ -1715,6 +1715,7 @@ parse_socks(const char *data, size_t datalen, socks_request_t \
*req,  return -1;
       }
       tor_assert(0);
+      break;
     case 4: { /* socks4 */
       enum {socks4, socks4a} socks4_prot = socks4a;
       const char *authstart, *authend;
diff --git a/src/or/connection_edge.c b/src/or/connection_edge.c
index fd9c97bd3..fc1b2c3bb 100644
--- a/src/or/connection_edge.c
+++ b/src/or/connection_edge.c
@@ -261,6 +261,7 @@ connection_edge_process_inbuf(edge_connection_t *conn, int \
package_partial)  }
       /* Fall through if the connection is on a circuit without optimistic
        * data support. */
+      /* Falls through. */
     case EXIT_CONN_STATE_CONNECTING:
     case AP_CONN_STATE_RENDDESC_WAIT:
     case AP_CONN_STATE_CIRCUIT_WAIT:
diff --git a/src/or/dns.c b/src/or/dns.c
index 8a40a70d7..98b684c90 100644
--- a/src/or/dns.c
+++ b/src/or/dns.c
@@ -523,6 +523,7 @@ send_resolved_cell,(edge_connection_t *conn, uint8_t answer_type,
         answer_type = RESOLVED_TYPE_ERROR;
         /* fall through. */
       }
+      /* Falls through. */
     case RESOLVED_TYPE_ERROR_TRANSIENT:
     case RESOLVED_TYPE_ERROR:
       {
diff --git a/src/or/relay.c b/src/or/relay.c
index 7082002f8..c119c3df1 100644
--- a/src/or/relay.c
+++ b/src/or/relay.c
@@ -994,6 +994,7 @@ connection_ap_process_end_not_open(
           break; /* break means it'll close, below */
         /* Else fall through: expire this circuit, clear the
          * chosen_exit_name field, and try again. */
+        /* Falls through. */
       case END_STREAM_REASON_RESOLVEFAILED:
       case END_STREAM_REASON_TIMEOUT:
       case END_STREAM_REASON_MISC:
-- 
2.13.0


[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170611194615</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-06-11 19:46:15-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

Hi George,

On Wednesday 17 May 2017 05:21 PM, George Kadianakis wrote:
&gt; 1.1. Visuals
&gt;
&gt;  Here is how a hidden service rendezvous circuit currently looks like:
&gt;
&gt;                     -&gt; middle_1 -&gt; middle_A
&gt;                     -&gt; middle_2 -&gt; middle_B
&gt;                     -&gt; middle_3 -&gt; middle_C
&gt;                     -&gt; middle_4 -&gt; middle_D
&gt;       HS -&gt; guard   -&gt; middle_5 -&gt; middle_E -&gt; Rendezvous Point
&gt;                     -&gt; middle_6 -&gt; middle_F
&gt;                     -&gt; middle_7 -&gt; middle_G
&gt;                     -&gt; middle_8 -&gt; middle_H
&gt;                     -&gt;   ...    -&gt;  ...
&gt;                     -&gt; middle_n -&gt; middle_n
&gt;
&gt;  this proposal pins the two middles nodes to a much more restricted
&gt;  set, as follows:
&gt;
&gt;                                  -&gt; guard_3A_A
&gt;                     -&gt; guard_2_A -&gt; guard_3A_B
&gt;                                  -&gt; guard_3A_C -&gt; Rendezvous Point
&gt;       HS -&gt; guard_1
&gt;                                  -&gt; guard_3B_D
&gt;                     -&gt; guard_2_B -&gt; guard_3B_E
&gt;                                  -&gt; guard_3B_F -&gt; Rendezvous Point
&gt;
&gt;
&gt;  Note that the third level guards are partitioned into buckets such that
&gt;  they are only used with one specific second-level guard. In this way,
&gt;  we ensure that even if an adversary is able to execute a Sybil attack
&gt;  against the third layer, they only get to learn one of the second layer
&gt;  Guards, and not all of them. This prevents the adversary from gaining
&gt;  the ability to take their pick of the weakest of the second-level
&gt;  guards for further attack.

I think this scheme works like if there are x number of third level
guards, then they are divided into buckets of x/k number of guards each,
where k is the number of second level guards. Now, I feel that dividing
guards into buckets is a little pointless. Suppose we have 1000 possible
third level guards, and 500 possible second level guards. We have to
select 4 third level guards for each bucket, and 2 second level guard
for each hidden service. Now even in this case the adversary has to do
as much effort as before. What if the guards are divided into buckets,
at least now the possible pool of third level guards in which the sybil
attack is to be conducted get reduced. So the 1000 third level guards
get divided into pool of 500 each. Hence easier to accomplish that
attack, but for that the adversary has to allocate 2x resources if she
wants to take advantage of that. So net result is zero.

I haven't had my coffee, so please correct me if I'm wrong somewhere :)

Regards,
-- 
Jaskaran Veer Singh (jvsg)
jvsg1303 at gmail dot com
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170702200256</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-07-02 20:02:56-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis wrote:
&gt; Hello,
&gt; 
&gt; here is some background information and summarizing of proposal 247
&gt; "Defending Against Guard Discovery Attacks using Vanguards" for people
&gt; who plan to work on this in the short-term future.
&gt; 

Hello,

I have discussed in Amsterdam briefly with David about this and want to
further discuss it here where everyone can throw an eye on it. I have an
idea to use a different technique that will replace the concept of
vanguards and will only activate in case the hidden service might be
under attack - I refer here to Hidden Service Guard Discovery Attack,
which is currently fast, easy, (relatively, depending on adversary)
cheap and effective. It will also address the load balancing questions
we have in the context of using vanguards and make it much harder and
more expensive for an adversary to mount a HS Guard Discovery attack.

The main idea was discussed last year a little bit:
https://lists.torproject.org/pipermail/tor-dev/2016-January/010291.html

but its initial logic (banning a suspicious rendezvous point for a
period of time) had some issues as pointed out by arma:
https://lists.torproject.org/pipermail/tor-dev/2016-January/010292.html

So, to mitigate those, we could do something different:

Each hidden service server will keep in persistent memory the following
information and always validate a rule before selecting the path for any
rendezvous circuit:
- total number of successfully established rendezvous circuits for the
last 24 hours;
- middle probability based on consensus weight fraction for each
rendezvous relay in the list (if this value is less than 0.3, it
defaults to 0.3);
- hop 2 and 3 from the last circuit used to each rendezvous relay in the
list;
- number of successfully established rendezvous circuits per each
rendezvous relay fingerprint in the last 24 hours.

A table with the required columns would look like this:
Fingerprint | Middle Prob | Last circ hop2,hop3 | num circs last 24 hrs

A rendezvous relay is considered suspicious when the number of
successfully established circuits in the last 24 hours per a certain
rendezvous relay exceeds with more than x2 factor the number of expected
circuits having that relay as rendezvous point.

The number of expected circuits having a relay as rendezvous point is
simply computed:
n = total number of successfully established rendezvous circuits in the
last 24 hours
p = middle probability based on consensus weight fraction for a relay
that is used as a rendezvous point / 100.

Example:
n = 1000
p = 0.032 / 100 = 0.00032

1000 * 0.00032 = 0.32. Let's further call this result Q.
* If the result of this equation is &lt; 5, we default to 5 (any relay is
allowed to have at least 5 established rendezvous circuits in the last
24 hours).
* If the result is not a whole number, we approximate to the next whole
number regardless. (For example if the result is 5.03, we treat it as 6).

The protection is triggered when the number of successfully established
rendezvous circuits per a given rendezvous relay is greater than Q * 2.

Part of an issue still remains: the attacker can grow the popularity of
the hidden service (global number of established rendezvous circuits) by
using dummy clients that build rendezvous circuits using random honest
relays in order to grow the number of expected rendezvous circuits for
his evil relay. At least this requires more resources, time and effort
from the attacker, but maybe we can better mitigate it by setting a hard
limit per fingerprint that will trigger the protection regardless the
global number of established rendezvous circuits. It's hard to come with
a right number here without relying on something dynamic (such as the
total number of established circuits) - for example we currently have a
relay with 0.8% probability in the consensus, this means that out of
1.000.000 rendezvous circuits, 8000 clients could have genuinely
selected it as rendezvous point. It is very hard to come up with a
proper estimation for how many total rendezvous circuits we expect in a
given time frame.

When a relay triggers it, instead of banning it and refusing to use it
any longer, we just use hop 2 and hop 3 from the last circuit to further
build new rendezvous circuits with this relay as rendezvous point for a
random period between 24 to 72 hours. This ensures we mitigate the issue
where the attacker DoS-es the HS by making all the relays in the
consensus suspicious by hitting the limit for every relay, one by one.

If during this period either hop 2 and hop 3 disappear from the
consensus or fail to build circuits we replace the one missing or not
being usable after one retry. Note that I suggest to only remember hop 2
and hop 3 because the Guard rotation period should be independent from this.

It is assumed that the protection is not usually triggered, only in
exceptional cases (a normal Tor client will just randomly pick
rendezvous points based on middle probability, this should not be able
to trigger the protection). In the exceptional cases where we reuse hop
2 and hop 3 of the last circuit for a 24 to 72 hours period, the load
balancing issues shouldn't be a problem given we talk about isolated cases.

One question:
Are we creating an additional risk by keeping this additional
information (hop2, hop3 of every rendezvous circuit) on the hidden
service server side? How useful can this historic information be for an
attacker that comes aware of the location of the hidden service? We
already keep this information regarding the Guard. From my point of view
this is irrelevant, given this information only becomes available after
the location of the hidden service is already discovered (which is
pretty much maximum damage).

Thanks.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170702231617</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-02 23:16:17-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 3 Jul 2017, at 06:02, s7r &lt;s7r@sky-ip.org&gt; wrote:
&gt; 
&gt; George Kadianakis wrote:
&gt;&gt; Hello,
&gt;&gt; 
&gt;&gt; here is some background information and summarizing of proposal 247
&gt;&gt; "Defending Against Guard Discovery Attacks using Vanguards" for people
&gt;&gt; who plan to work on this in the short-term future.
&gt;&gt; 
&gt; 
&gt; Hello,
&gt; 
&gt; I have discussed in Amsterdam briefly with David about this and want to
&gt; further discuss it here where everyone can throw an eye on it. I have an
&gt; idea to use a different technique that will replace the concept of
&gt; vanguards and will only activate in case the hidden service might be
&gt; under attack - I refer here to Hidden Service Guard Discovery Attack,
&gt; which is currently fast, easy, (relatively, depending on adversary)
&gt; cheap and effective. It will also address the load balancing questions
&gt; we have in the context of using vanguards and make it much harder and
&gt; more expensive for an adversary to mount a HS Guard Discovery attack.
&gt; 
&gt; The main idea was discussed last year a little bit:
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-January/010291.html
&gt; 
&gt; but its initial logic (banning a suspicious rendezvous point for a
&gt; period of time) had some issues as pointed out by arma:
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-January/010292.html

I recommend people interested in this proposal re-read the old thread.
It contains several objections, many of which apply to this proposal as
well.

&gt; ...
&gt; 
&gt; A rendezvous relay is considered suspicious when the number of
&gt; successfully established circuits in the last 24 hours per a certain
&gt; rendezvous relay exceeds with more than x2 factor the number of expected
&gt; circuits having that relay as rendezvous point.


Why 2x?
Is it just a number you picked?

In general, why the particular numbers in this proposal?
Are they just guesses (most of our proposal numbers are), or are they
evidence-based?

&gt; ...
&gt; 
&gt; When a relay triggers it, instead of banning it and refusing to use it
&gt; any longer, we just use hop 2 and hop 3 from the last circuit to further
&gt; build new rendezvous circuits with this relay as rendezvous point for a
&gt; random period between 24 to 72 hours. This ensures we mitigate the issue
&gt; where the attacker DoS-es the HS by making all the relays in the
&gt; consensus suspicious by hitting the limit for every relay, one by one.

Here's an attack that's enabled by this proposal:
1. Send lots of traffic through various rend points until you trigger the
   limit on a particular hop2 or hop3 or rend you control.
2. Stop sending traffic on that particular rend.
3. Observe encrypted client traffic/paths on hop2, hop3 or rend for
   24 to 72 hours.
4. When hop2 or hop3 rotate, repeat from 1.

This attack can be performed in parallel on multiple rend points for the
same service, and only needs to succeed once.

How much effort would it take to bind all the rend points in the consensus
to a particular hop2, hop3 for a service?
(I think the minimum answer is min(Q) * count(rend), or about 15000-20000
connections.)

Why not just use this defence (slow hop2, hop3 rotation) all the time?
If we did, that makes this attack pointless, because you can't keep
rotating hop2, hop3 fast until you get the ones you want.

Why not also use this defence (slow hop2, hop3 rotation) for clients?
In the last thread, you said that clients can't be forced to make
circuits. But with features like refresh and JavaScript, this just
isn't true.

In general, how do we know the suspicion thresholds are right?

Also, in general, it is harder to test and maintain software that
changes its behaviour in rare circumstances. That doesn't mean this
is a bad design: just that it costs extra to do right and make sure
it's right. How would you test this?

&gt; ...
&gt; 
&gt; It is assumed that the protection is not usually triggered, only in
&gt; exceptional cases (a normal Tor client will just randomly pick
&gt; rendezvous points based on middle probability, this should not be able
&gt; to trigger the protection). In the exceptional cases where we reuse hop
&gt; 2 and hop 3 of the last circuit for a 24 to 72 hours period, the load
&gt; balancing issues shouldn't be a problem given we talk about isolated cases.

How much would it cost an attacker to *not* make it an isolated case?
Could an attacker bring down a relay by making multiple hidden services
go through a hop2 or hop3?

For example:
1. Perform the attack above until the victim relay is in the hop3 position
   (with a malicious rend point, the client knows hop3).
2. Repeat 1 with a different service and the same malicious rend point.

Also, Tor2web with Tor2webRendezvousPoints will always trigger this case,
as I said in response to the last proposal:
(for "break" read "trigger on")

&gt; * This will break some Tor2Web installations, which deliberately choose
&gt; rendezvous points on the same server or network for latency reasons.
&gt; (Forcing Tor2Web installations to choose multiple RPs may be a worthwhile
&gt; security tradeoff.)

https://lists.torproject.org/pipermail/tor-dev/2016-January/010293.html

I won't repeat the entire thread here, but if this protection will always
be triggered when Tor2webRendezvousPoints is on, please document that in
the proposal, and talk about the load balancing implications.

(Tor2webRendezvousPoints allows a Tor2web client to chose set rendezvous
points for every connection. Please re-read the thread or the tor man page
for details.)

&gt; One question:
&gt; Are we creating an additional risk by keeping this additional
&gt; information (hop2, hop3 of every rendezvous circuit) on the hidden
&gt; service server side? How useful can this historic information be for an
&gt; attacker that comes aware of the location of the hidden service?

It provides the entire path to the rendezvous point.
This is useful for an attacker that knows the rendezvous point. It is also
useful for an attacker whose priority is to locate clients, rather than
locate the service.

&gt; We
&gt; already keep this information regarding the Guard. From my point of view
&gt; this is irrelevant, given this information only becomes available after
&gt; the location of the hidden service is already discovered (which is
&gt; pretty much maximum damage).

... to the hidden service, not necessarily its clients.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZWX7BAAoJEHQNnjkCUnKiCUAP/1z4p9JNbzHaofU3HESVePKb
/mr7foE9jmyz6q9Httvu1N/ET+2aesvig8kCTQKbPezXEbnA6r4OtuzMQfUnAZGr
ya21ZQq6uL0tlxL1PmykVVjw4qM52RBvEeA6IuFojrpG6rl1EZuU2aNK9TZahg8C
TY6mZJHX13KxMhlw6bHxsJeHzjEpj/U9h24tazMukUlKHw5GeuiD/GuyfuM4YmiJ
ipEFdLhACqsaN1aD6j24rLn98q8T2ngJwIKD09GNzQ59VYYGrPByTG4C2xtSPcKI
xdQaxHhtUz7W8MUlFTJiG+F0PD30tnAIEXf6COg4ARBLAWaMRoL4NLro8f4/ZgQ4
yri4Hjv068LTqMFs4Mq0xuCL+kdRqEcugORjsY9Q0BFi9e6EjzlZGZJcw/QC14Y1
4k9ukR+1q9/izZraHDJcjcqCxKPs0qYsPGwJlBKZWOmw25O99zIb/fH6M/8Lf+f8
EhrYBfUcIh1dXK91w8vZaNzfKfP9YboiUALPxFwtj1M7XVfL42KOfcOBA5WV1xAm
yEq+bA2KAtnK3MCBqEDtUe3R2c0d//lNvDKLQptp+SY5ltijrMrDKJJDqEKw9N9F
tRW0Xovp5Tuiy12a8qs/cOORWTp42IBuveSTWzFjcSibG53ZnzTphcqcQn/qJl6F
KDtEdNtEcMjjOY+RmdkI
=JAsB
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170703092825</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-07-03 09:28:25-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

s7r &lt;s7r@sky-ip.org&gt; writes:

&gt; George Kadianakis wrote:
&gt;&gt; Hello,
&gt;&gt; 
&gt;&gt; here is some background information and summarizing of proposal 247
&gt;&gt; "Defending Against Guard Discovery Attacks using Vanguards" for people
&gt;&gt; who plan to work on this in the short-term future.
&gt;&gt; 
&gt;
&gt; Hello,
&gt;
&gt; I have discussed in Amsterdam briefly with David about this and want to
&gt; further discuss it here where everyone can throw an eye on it. I have an
&gt; idea to use a different technique that will replace the concept of
&gt; vanguards and will only activate in case the hidden service might be
&gt; under attack - I refer here to Hidden Service Guard Discovery Attack,
&gt; which is currently fast, easy, (relatively, depending on adversary)
&gt; cheap and effective. It will also address the load balancing questions
&gt; we have in the context of using vanguards and make it much harder and
&gt; more expensive for an adversary to mount a HS Guard Discovery attack.
&gt;
&gt; The main idea was discussed last year a little bit:
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-January/010291.html
&gt;
&gt; but its initial logic (banning a suspicious rendezvous point for a
&gt; period of time) had some issues as pointed out by arma:
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-January/010292.html
&gt;
&gt; So, to mitigate those, we could do something different:
&gt;
&gt; Each hidden service server will keep in persistent memory the following
&gt; information and always validate a rule before selecting the path for any
&gt; rendezvous circuit:
&gt; - total number of successfully established rendezvous circuits for the
&gt; last 24 hours;
&gt; - middle probability based on consensus weight fraction for each
&gt; rendezvous relay in the list (if this value is less than 0.3, it
&gt; defaults to 0.3);
&gt; - hop 2 and 3 from the last circuit used to each rendezvous relay in the
&gt; list;
&gt; - number of successfully established rendezvous circuits per each
&gt; rendezvous relay fingerprint in the last 24 hours.
&gt;
&gt; A table with the required columns would look like this:
&gt; Fingerprint | Middle Prob | Last circ hop2,hop3 | num circs last 24 hrs
&gt;
&gt; A rendezvous relay is considered suspicious when the number of
&gt; successfully established circuits in the last 24 hours per a certain
&gt; rendezvous relay exceeds with more than x2 factor the number of expected
&gt; circuits having that relay as rendezvous point.
&gt;

Hello s7r,

and thanks for helping with this and approaching it from a different
direction.

Personally, I'd be really surprised if any solution that statistically
marks relays or paths as "suspicious" will ever work for this particular
problem. That's because the adversary does not need that many paths to
succeed, and also because the adversary has lots of time to carry out
the attack. I also dislike these solutions since the HS operator cannot
really distinguish between an actual attack that just happened, or their
HS getting slashdotted, or someone trolling them by connecting a
thousand times.

Furthermore, I don't understand why your proposal marks rendezvous
points as suspicious, and not the paths themselves. After all, the
attacker can choose a diffferent rendezvous point everytime, as long as
the HS makes fresh circuits for each one.

Also if you are suggesting the reuse of hops 2 and 3 for multiple
circuits, you are basically suggesting a layered guard approach which is
what prop247 also tries to do, and FWIW it's not simple at all
(especially from an engineering perspective).

Cheers!

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170704110806</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-07-04 11:08:06-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello Tim,

Thank you very much for the comments. Please see my inline answers as I
think I didn't explain good enough, most of the issues are not actually
a problem.

teor wrote:
&gt;&gt; ...
&gt;&gt;
&gt;&gt; A rendezvous relay is considered suspicious when the number of
&gt;&gt; successfully established circuits in the last 24 hours per a certain
&gt;&gt; rendezvous relay exceeds with more than x2 factor the number of expected
&gt;&gt; circuits having that relay as rendezvous point.
&gt; 
&gt; 
&gt; Why 2x?
&gt; Is it just a number you picked?
&gt; 
&gt; In general, why the particular numbers in this proposal?
&gt; Are they just guesses (most of our proposal numbers are), or are they
&gt; evidence-based?
&gt; 

The numbers are not evidence based. I have picked the 2x factor to allow
a margin for rare cases when genuine clients honestly pick a rendezvous
relay more than its probability calculated considering its consensus
weight. There is a nonzero chance this can (rarely) happen, because the
probability calculation does not ensure 100% fixed accurate result so
the 2x factor was chosen to minimize its impact as much as possible
while maintaining a reasonable level of protection.

&gt;&gt; ...
&gt;&gt;
&gt;&gt; When a relay triggers it, instead of banning it and refusing to use it
&gt;&gt; any longer, we just use hop 2 and hop 3 from the last circuit to further
&gt;&gt; build new rendezvous circuits with this relay as rendezvous point for a
&gt;&gt; random period between 24 to 72 hours. This ensures we mitigate the issue
&gt;&gt; where the attacker DoS-es the HS by making all the relays in the
&gt;&gt; consensus suspicious by hitting the limit for every relay, one by one.
&gt; 
&gt; Here's an attack that's enabled by this proposal:
&gt; 1. Send lots of traffic through various rend points until you trigger the
&gt;    limit on a particular hop2 or hop3 or rend you control.
&gt; 2. Stop sending traffic on that particular rend.
&gt; 3. Observe encrypted client traffic/paths on hop2, hop3 or rend for
&gt;    24 to 72 hours.
&gt; 4. When hop2 or hop3 rotate, repeat from 1.
&gt; 
&gt; This attack can be performed in parallel on multiple rend points for the
&gt; same service, and only needs to succeed once.
&gt; 

I am not sure I understand the attack. You cannot get to choose to
trigger the limit on particulars hop2 and hop3. These are chosen by the
hidden service server side (where the protection is implemented), they
are chosen randomly, and when you trigger the limit on a particular
rendezvous relay, the last hop 2 and hop 3 used to connect to that
particular relay as RP are used for further new rend circuits only with
that RP, circuits for other rendezvous relays that did not hit the limit
are unaffected and chosen randomly as in normal conditions.

If multiple rendezvous relays hit the limit at the same time, each one
will have different hop 2 and hop 3 static paths for the given period.
It is exactly like vanguards, except it is activated only under some
conditions and we have different Vanguards for each suspicious
rendezvous relay.

&gt; How much effort would it take to bind all the rend points in the consensus
&gt; to a particular hop2, hop3 for a service?
&gt; (I think the minimum answer is min(Q) * count(rend), or about 15000-20000
&gt; connections.)
&gt; 

I believe this is answered above, you cannot bind all the rend points in
the consensus to particular hop 2 and hop 3 for a service, each rend
point will have its own hop 2 and hop 3, the ones used in the last
circuit before the limit was reached and protection triggered.

&gt; Why not just use this defence (slow hop2, hop3 rotation) all the time?
&gt; If we did, that makes this attack pointless, because you can't keep
&gt; rotating hop2, hop3 fast until you get the ones you want.
&gt; 
&gt; Why not also use this defence (slow hop2, hop3 rotation) for clients?
&gt; In the last thread, you said that clients can't be forced to make
&gt; circuits. But with features like refresh and JavaScript, this just
&gt; isn't true.
&gt; 

Clients are not subject to this attack (HS Guard Discovery attack). This
is why they are not addressed. Clients choose the RP and request the HS
to connect to it, as much as they want, without any limit. If you mean a
malicious honeypot HS trying to de-anonymize clients or mount Guard
Discovery attacks on clients, the chances for such an attack to succeed
are orders or magnitude lower than vice versa, because the hidden
service cannot make the client connect to an evil RP (RP is selected by
the client).

&gt; In general, how do we know the suspicion thresholds are right?
&gt; 

From my point of view they should be pretty right, based on a simple logic:

a relay is selected by a client in a path based on its consensus weight
fraction and position probability (guard, middle, exit). So, out of a
given number of circuits a relay should appear in a position somewhere
close to its position probability (more or less, which is why we use the
2x factor). You can test in practice, create 10000 rend circuits using
the last consensus and take the relay that was chosen mostly, you will
see that one has the highest middle probability. We consider the
probability theory is tested and worthy of taking into consideration of
course, we rely on it for this protection to work. I think we can safely
do this.

&gt; Also, in general, it is harder to test and maintain software that
&gt; changes its behaviour in rare circumstances. That doesn't mean this
&gt; is a bad design: just that it costs extra to do right and make sure
&gt; it's right. How would you test this?
&gt; 

I understand this can be a PITA from engineering point of view, we just
have to put in balance and see if it's worth it and if it helps us more
than Vanguards do, eliminate the load balancing problems and at the same
time gain some other benefits. I don't see it MUCH more complicated than
the vanguards proposal to be honest, it's just some more information we
need to keep track of and validate a single rule before creating
rendezvous circuits from hidden service server side only (not applied to
HS client mode).

&gt;&gt; It is assumed that the protection is not usually triggered, only in
&gt;&gt; exceptional cases (a normal Tor client will just randomly pick
&gt;&gt; rendezvous points based on middle probability, this should not be able
&gt;&gt; to trigger the protection). In the exceptional cases where we reuse hop
&gt;&gt; 2 and hop 3 of the last circuit for a 24 to 72 hours period, the load
&gt;&gt; balancing issues shouldn't be a problem given we talk about isolated cases.
&gt; 
&gt; How much would it cost an attacker to *not* make it an isolated case?
&gt; Could an attacker bring down a relay by making multiple hidden services
&gt; go through a hop2 or hop3?
&gt; 

No, an attacker cannot do it because he does not get to choose hop 2 and
hop 3 as described above. An attacker can mostly make all rend points in
the consensus have different static paths (hop 2 and hop 3) for a random
short period. This requires some effort, since the attacker needs to
take all the rend points one by one and trigger the limit on each. It
gets even more complicated when the HS is popular, because more and more
circuits are needed to trigger the limit on a particular rendezvous
relay. Also, the number of circuits an attacker needs to do to trigger
the limit grows exponentially, because as he hits the limit on some rend
points the total number of established circuits grow, thus requiring
more and more rend circuits to trigger the limit on new RPs.

Even if we come to this, having static hop 2 and hop 3 (different ones)
for each RP in the consensus for a random period of time the result is
exactly as if we were using vangaurds in the first place, except:

 -&gt; we talk about different hop 2 and hop 3 for each RP, so we have
considerably less load balancing problems and we do not need to care
about vanguard flag or logic for selecting which relays to use as vanguards.

 - &gt; the protection is no active all the time for all the hidden
services existing in the network, it is only active in some conditions
we consider suspect, as described above.

It is unclear how different is having the same hop 2 and hop 3 for each
rend circuit (with any rend point) for a random period of time as
vanguards proposal suggests better than this.

&gt; For example:
&gt; 1. Perform the attack above until the victim relay is in the hop3 position
&gt;    (with a malicious rend point, the client knows hop3).
&gt; 2. Repeat 1 with a different service and the same malicious rend point.
&gt; 

This method always assumes the rend point is evil, this should be the
default thinking anyway since it's selected by the client all the time,
and when an attacker wants to de-anonymize a hidden service, he is
always obviously a client.

In the described attack, say you are the attacker and control rend point X:

HS -&gt; Guard -&gt; random_hop2 -&gt; random_hop3 -&gt; RP (X)

You know hop 3 of course. Now say you control some hostile consensus
weight in the network and try your chances to get be picked as hop3,
with the same X rend point so you learn hop 2. So you request more and
more rend circuits having the same evil RP.

The HS will grant you more circuits:
HS -&gt; Guard -&gt; random_hop2 -&gt; random_hop3 -&gt; RP (X)
HS -&gt; Guard -&gt; random_hop2 -&gt; random_hop3 -&gt; RP (X)
HS -&gt; Guard -&gt; random_hop2 -&gt; random_hop3 -&gt; RP (X)
[...]

Until the limit is triggered for your RP (X), based on its consensus
weight middle probability and total number of rend circuits established
by that hidden service from server side.

When the limit is triggered, you will have this:
HS -&gt; Guard -&gt; static_hop2 -&gt; static_hop3 -&gt; RP (X)

Hop 2 and 3 will be static for a random period with that RP(X), and your
tries are finished for being chosen in hop 3 position.

Now you have to either wait, until the random period for RP (X) runs
out, either try a different hostile RP you control. Soon you will hit
the limit on the second hostile RP as well.

As you can see this clearly makes it harder and requires more time and
resources from the attacker, while not affecting the hidden service in
any way.

Why the load balancing is not a problem here?
When a RP is marked as suspicious and 2 relays act as hop 2 and hop 3
only for rend circuits to this particular RP, the only circuits being
created here are:

-&gt; the circuits requested by the attacker, controlling the suspect RP
-&gt; the circuits requested by honest clients, that randomly pick the
suspect RP under normal conditions (since this is based on its middle
probability, we are not talking about concerning numbers).

&gt; Also, Tor2web with Tor2webRendezvousPoints will always trigger this case,
&gt; as I said in response to the last proposal:
&gt; (for "break" read "trigger on")
&gt; 
&gt;&gt; * This will break some Tor2Web installations, which deliberately choose
&gt;&gt; rendezvous points on the same server or network for latency reasons.
&gt;&gt; (Forcing Tor2Web installations to choose multiple RPs may be a worthwhile
&gt;&gt; security tradeoff.)
&gt; 
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-January/010293.html
&gt; 
&gt; I won't repeat the entire thread here, but if this protection will always
&gt; be triggered when Tor2webRendezvousPoints is on, please document that in
&gt; the proposal, and talk about the load balancing implications.
&gt; 
&gt; (Tor2webRendezvousPoints allows a Tor2web client to chose set rendezvous
&gt; points for every connection. Please re-read the thread or the tor man page
&gt; for details.)
&gt; 

Exactly. Allows a Tor2web _client_ to set rendezvous point for every
connection. Nothing will break here. What will happen is if a Tor2Web
service is popular and many users browse via that Tor2Web proxy a
particular hidden service, that hidden service will at some point
trigger the limit and have static hop 2 and hop 3 to the
Tor2webRendezvousPoints selected by this particular Tor2Web client. They
will be rotated after some time of course.

There is absolutely no problem here and the Tor2web clients will not
even notice it.

&gt;&gt; One question:
&gt;&gt; Are we creating an additional risk by keeping this additional
&gt;&gt; information (hop2, hop3 of every rendezvous circuit) on the hidden
&gt;&gt; service server side? How useful can this historic information be for an
&gt;&gt; attacker that comes aware of the location of the hidden service?
&gt; 
&gt; It provides the entire path to the rendezvous point.
&gt; This is useful for an attacker that knows the rendezvous point. It is also
&gt; useful for an attacker whose priority is to locate clients, rather than
&gt; locate the service.
&gt; 
&gt;&gt; We
&gt;&gt; already keep this information regarding the Guard. From my point of view
&gt;&gt; this is irrelevant, given this information only becomes available after
&gt;&gt; the location of the hidden service is already discovered (which is
&gt;&gt; pretty much maximum damage).
&gt; 
&gt; ... to the hidden service, not necessarily its clients.
&gt; 

Yes, but we only have info, from the hidden service server side for the
path to the RP:

HS - Guard - hop2 - hop3 - RP

On the other hand, there's also:
RP &lt;- Hop 2 &lt;- HS client Guard &lt;- HS client

So we don't actually know much. The design assumes anyway a HS can be
malicious, which is why the client selects the RP and makes a 2 hop
circuit to it, while the HS server makes a 3 hop circuit to the RP
because it was chosen by someone else.

if logging this information (hop2, hop3 and all rend points used) at
hidden service server side is risky, this means all clients connecting
to honey pot HSes are at risk? I doubt this.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170704112024</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-07-04 11:20:24-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi George,

George Kadianakis wrote:
&gt; Hello s7r,
&gt; 
&gt; and thanks for helping with this and approaching it from a different
&gt; direction.
&gt; 
&gt; Personally, I'd be really surprised if any solution that statistically
&gt; marks relays or paths as "suspicious" will ever work for this particular
&gt; problem. That's because the adversary does not need that many paths to
&gt; succeed, and also because the adversary has lots of time to carry out
&gt; the attack. I also dislike these solutions since the HS operator cannot
&gt; really distinguish between an actual attack that just happened, or their
&gt; HS getting slashdotted, or someone trolling them by connecting a
&gt; thousand times.
&gt; 
&gt; Furthermore, I don't understand why your proposal marks rendezvous
&gt; points as suspicious, and not the paths themselves. After all, the
&gt; attacker can choose a diffferent rendezvous point everytime, as long as
&gt; the HS makes fresh circuits for each one.
&gt; 
&gt; Also if you are suggesting the reuse of hops 2 and 3 for multiple
&gt; circuits, you are basically suggesting a layered guard approach which is
&gt; what prop247 also tries to do, and FWIW it's not simple at all
&gt; (especially from an engineering perspective).
&gt; 

This should be invisible for the HS operator. It should not be noticed.
Trolling with a HS is something which happens now also, and we cannot
stop, if that HS is accessible to the world. If someone will troll,
worst case it hits  the limit for some (or many) RPs in the consensus,
and makes the HS server use static hop 2 and hop 3 for a random period
of time, which is exactly what vanguards does except it does it by
default under any circumstances and with all the RPs, not just the
suspicious ones. There should be no tradeoff here.

If the attacker doesn't control the RP, he should not be able to learn
hop 3 (unless we are talking about adversaries that are able to watch a
huge part of the network at the same time, which is a different attack
harder to mitigate) which is why this protection assumes the RP is evil
and defends against it by making it hard to learn hop 3 and hop 2,
directly leading to making it very hard to learn the HS server Guard.

I am not suggesting to reuse hop 2 and hop 3 for multiple circuits, only
for rend circuits with a suspicious RP point. If we have more suspicious
RP points at the same time, we have different hop 2 and hop 3 for each,
for a random period of time (Please see my previous longer email sent in
reply to teor for something more clear).

I understand this might not be simple at all from engineering
perspective. I only wanted to discuss it in depth so that we can decide
if it's worth it, if it brings us more benefits than tradeoffs. If we
decide it's not worth it, we'll move on with the vanguards proposal and
brainstorm for a good selection logic that load balances properly.
Either way, there are ways we can do HS guard discovery harder and more
expensive for attackers, and we'll surely do it!

Thanks for the time! Always a pleasure.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170519142055</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-05-19 14:20:55-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 19.05.17 09:52, nusenu wrote:
&gt; Hi Karsten,

Hi nusenu,

&gt; onionoo is hardly reachable since about 17 hours ago.

Indeed.  For some reason Onionoo saw an increase in requests from 700 to
4000 per second 24 hours or so ago.

There's now a third host answering Onionoo requests from a local cache,
so that might improve the situation.  (Thanks, weasel!)

&gt; Is this only externally facing or will this also cause onionoo to miss
&gt; descriptors internally?

The former.  If the hourly updater is overloaded, it will simply run
less often than once per hour.  But it won't miss any data.

&gt; Any ETA on when this will improve?

It should be better now.  If it's still bad after the weekend, we'll
make a new plan.

Thanks for the report!

&gt; thanks,
&gt; nusenu

All the best,
Karsten



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170520102500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-20 10:25:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; onionoo is hardly reachable since about 17 hours ago.
&gt; 
&gt; Indeed.  For some reason Onionoo saw an increase in requests from 700 to
&gt; 4000 per second 24 hours or so ago.
&gt; 
&gt; There's now a third host answering Onionoo requests from a local cache,
&gt; so that might improve the situation.  (Thanks, weasel!)
&gt; 
&gt;&gt; Is this only externally facing or will this also cause onionoo to miss
&gt;&gt; descriptors internally?
&gt; 
&gt; The former.  If the hourly updater is overloaded, it will simply run
&gt; less often than once per hour.  But it won't miss any data.
&gt; 
&gt;&gt; Any ETA on when this will improve?
&gt; 
&gt; It should be better now.  If it's still bad after the weekend, we'll
&gt; make a new plan.

It got better after your email, but now it is back at 4 out of 5 atlas
searches running into a backend error message.

-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170520194000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-20 19:40:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Since thecthulhu onionoo mirror is also gone: Is there any other public
onionoo instance that one can use?


Did the onionoo requirements for a private instance change since I last
asked that question two years ago? (8GB RAM, 250GB disk)
https://lists.torproject.org/pipermail/tor-dev/2015-April/008711.html


--=20
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170522182104</emailId><senderName>Patrick O'Doherty</senderName><senderEmail>p@trickod.com</senderEmail><timestampReceived>2017-05-22 18:21:04-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Is this something that an org such as noisetor could help out with by
contributing a public mirror? We'd be more than happy to do so if it'd
be useful to the project/community.

p

On 5/20/17 12:40 PM, nusenu wrote:
&gt; Since thecthulhu onionoo mirror is also gone: Is there any other public
&gt; onionoo instance that one can use?
&gt; 
&gt; 
&gt; Did the onionoo requirements for a private instance change since I last
&gt; asked that question two years ago? (8GB RAM, 250GB disk)
&gt; https://lists.torproject.org/pipermail/tor-dev/2015-April/008711.html
&gt; 
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170522182600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-22 18:26:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Patrick O'Doherty:
&gt; Is this something that an org such as noisetor could help out with by
&gt; contributing a public mirror? We'd be more than happy to do so if it'd
&gt; be useful to the project/community.

Since the previous mirror is gone and onionoo.tpo is still struggling
an onionoo(+atlas) mirror is certainly helpful from my point of view.

--=20
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170522205944</emailId><senderName>Patrick O'Doherty</senderName><senderEmail>p@trickod.com</senderEmail><timestampReceived>2017-05-22 20:59:44-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 5/22/17 11:26 AM, nusenu wrote:
&gt; 
&gt; 
&gt; Patrick O'Doherty:
&gt;&gt; Is this something that an org such as noisetor could help out with by
&gt;&gt; contributing a public mirror? We'd be more than happy to do so if it'd
&gt;&gt; be useful to the project/community.
&gt; 
&gt; Since the previous mirror is gone and onionoo.tpo is still struggling
&gt; an onionoo(+atlas) mirror is certainly helpful from my point of view.
&gt; 

Great. I'll aim to do this in the next day or two and report back to the
list when we have a functioning mirror to share.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170522211100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-22 21:11:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; Patrick O'Doherty:
&gt;&gt;&gt; Is this something that an org such as noisetor could help out with by
&gt;&gt;&gt; contributing a public mirror? We'd be more than happy to do so if it'd
&gt;&gt;&gt; be useful to the project/community.
&gt;&gt;
&gt;&gt; Since the previous mirror is gone and onionoo.tpo is still struggling
&gt;&gt; an onionoo(+atlas) mirror is certainly helpful from my point of view.
&gt;&gt;
&gt; 
&gt; Great. I'll aim to do this in the next day or two and report back to the
&gt; list when we have a functioning mirror to share.

great to hear that onionoo gets a mirror
 (it might take a bit longer than a day since the initial onionoo import
of all these CollecTor archives will take its time)



-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170523132517</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-05-23 13:25:17-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 22.05.17 23:11, nusenu wrote:
&gt;&gt;&gt; Patrick O'Doherty:
&gt;&gt;&gt;&gt; Is this something that an org such as noisetor could help out with by
&gt;&gt;&gt;&gt; contributing a public mirror? We'd be more than happy to do so if it'd
&gt;&gt;&gt;&gt; be useful to the project/community.
&gt;&gt;&gt;
&gt;&gt;&gt; Since the previous mirror is gone and onionoo.tpo is still struggling
&gt;&gt;&gt; an onionoo(+atlas) mirror is certainly helpful from my point of view.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; Great. I'll aim to do this in the next day or two and report back to the
&gt;&gt; list when we have a functioning mirror to share.
&gt; 
&gt; great to hear that onionoo gets a mirror
&gt;  (it might take a bit longer than a day since the initial onionoo import
&gt; of all these CollecTor archives will take its time)

Hi all,

we're working on resolving the load issues of the main server and its
two caching frontends, which really get hammered since last week for no
obvious reason.  I hope that we'll have that resolved in the next couple
of days.  No data will be lost during this time, the service is just
hard to reach these days.

But if people want to set up mirrors in the meantime to work around the
current issues, please feel free to do that.  Though I have to admit
that we can't provide much support for that.  Sorry!

All the best,
Karsten



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170523194800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-23 19:48:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; we're working on resolving the load issues of the main server and its
&gt; two caching frontends, which really get hammered since last week for no
&gt; obvious reason.  

I wanted to compare atlas weblogs with onionoo data but didn't find any
onionoo data on https://webstats.torproject.org/




-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170519113059</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-05-19 11:30:59-0400</timestampReceived><subject>Re: [tor-dev] Clarifications on guard-spec.txt</subject><body>

Roger Dingledine &lt;arma@mit.edu&gt; writes:

&gt; Hi folks!
&gt;
&gt; I'm catching up on my proposals, and I really like guard-spec.txt.
&gt; Nicely done!
&gt;
&gt; I made some fixes that I hope are straightforward:
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122942.html
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122948.html
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122986.html
&gt;

Hello,

all three commits above LGTM. Thanks for cleaning up the proposal!

&gt; And I have four remaining questions/topics that could use some feedback
&gt; from the spec authors/implementors rather than just having me bust in
&gt; and change things.
&gt;
&gt; ---------------------------------------------------------------
&gt;
&gt; A) We don't really say what we mean by "adding" a guard to an ordered
&gt; list. In particular:
&gt;
&gt;&gt;  We add new members to {CONFIRMED_GUARDS} when we mark a circuit
&gt;&gt;  built through a guard as "for user traffic."
&gt;
&gt; When we say "add", do we mean "append" here?
&gt;
&gt;&gt;  To compute primary guards, take the ordered intersection of
&gt;&gt;  {CONFIRMED_GUARDS} and {FILTERED_GUARDS}, and take the first
&gt;&gt;  {N_PRIMARY_GUARDS} elements.  If there are fewer than
&gt;&gt;  {N_PRIMARY_GUARDS} elements, add additional elements to
&gt;&gt;  PRIMARY_GUARDS chosen _uniformly_ at random from
&gt;&gt;  ({FILTERED_GUARDS} - {CONFIRMED_GUARDS}).
&gt;
&gt; Similarly, does "add" mean "append"?
&gt;
&gt;&gt;  Once an element has been added to {PRIMARY_GUARDS}, we do not remove it
&gt;&gt;  until it is replaced by some element from {CONFIRMED_GUARDS}. Confirmed
&gt;&gt;  elements always proceed unconfirmed ones in the {PRIMARY_GUARDS} list.
&gt;
&gt; This one looks like a bug as currently stated: by "proceed", do we mean
&gt; "precede"?
&gt;

All the suggestions above seem correct.
We should open a ticket and make a patch.

&gt; ---------------------------------------------------------------
&gt;
&gt; B) In Sec 4.10, whenever we get a new consensus, we:
&gt;
&gt;&gt;  For every guard in {SAMPLED_GUARDS}, we update {IS_LISTED} and
&gt;&gt;  {FIRST_UNLISTED_AT}.
&gt;
&gt; In the old design, we also believed the Running flag in the new
&gt; consensus, that is, we marked the guards as reachable again. It looks
&gt; from sampled_guards_update_from_consensus() like we no longer do that.
&gt;
&gt; Is that old behavior considered a bug and we intentionally stopped,
&gt; or did we not consider it?
&gt;
&gt; I am ok with "that was stupid behavior, so we stopped", but if we didn't
&gt; know that we used to do it, maybe we should decide whether it is stupid
&gt; behavior. :)
&gt;

Hmm, I also don't see us currently doing this, but it might be worth doing.

I imagine it's not going to do much in most cases since primary guards
have a pretty short retry period, but still it might be a good idea
since it will keep our guard list more up to date.

Perhaps we should consider adding this behavior to the spec and code.

&gt; ---------------------------------------------------------------
&gt;
&gt; C) In Sec A.4, in the state file we have
&gt;
&gt;&gt;         "bridge_addr" -- If the guard is a bridge, its configured
&gt;&gt;         address and OR port. Optional.
&gt;
&gt; How does this play with bridges that have pluggable transports? In my
&gt; "bridge obfs2 128.31.0.34:51715" line, the ORPort of the bridge is
&gt; not listed.
&gt;
&gt; It looks from
&gt; https://trac.torproject.org/projects/tor/ticket/21027
&gt; like we did some fixing here, but the spec didn't get an update?
&gt;

Hmm, seems like that part of the spec is not really accurate indeed!

Maybe we can just update the spec and say that `bridge_addr` contains
the configured address and port of the bridge which can be either the
ORPort or PT port?

&gt; ---------------------------------------------------------------
&gt;
&gt; D) In Sec 4.8, when a circuit succeeds:
&gt;
&gt;&gt;      * If this circuit was &lt;usable_if_no_better_guard&gt;, it is now
&gt;&gt;        &lt;waiting_for retry&gt;.  You may not yet attach streams to it.
&gt;&gt;        Then check whether the {last_time_on_internet} is more than
&gt;&gt;        {INTERNET_LIKELY_DOWN_INTERVAL} seconds ago:
&gt;&gt;
&gt;&gt;           * If it is, then mark all {PRIMARY_GUARDS} as "maybe"
&gt;&gt;             reachable.
&gt;&gt;
&gt;&gt;           * If it is not, update the list of waiting circuits. (See
&gt;&gt;             [UPDATE_WAITING] below)
&gt;
&gt; [Where INTERNET_LIKELY_DOWN_INTERVAL has been picked as 10 minutes.]
&gt;
&gt; To make sure I understand this one, consider the following scenario:
&gt;
&gt; * We go offline, and our current circuits fail.
&gt; * We try to make new circuits through each of our primary guards,
&gt;   failing for each (because we're offline) and marking them down.
&gt; * Then we move to the remaining confirmed+usable ones, and mark those
&gt;   down too.
&gt; * Then we work through the rest of USABLE_FILTERED_GUARDS, marking them
&gt;   down too. As we mark them down, USABLE_FILTERED_GUARDS shrinks,
&gt;   causing us to add new elements to SAMPLED_GUARDS to replenish
&gt;   USABLE_FILTERED_GUARDS.
&gt; * After we've brought SAMPLED GUARDS to 60, we stop adding new ones.
&gt;   At this point, we are out of tries:
&gt;

Seems like a reasonable description. I haven't looked at this part of
the code in a while to be 100% sure of what you described being true.

&gt;&gt;  * Otherwise, if USABLE_FILTERED_GUARDS is empty, we have exhausted
&gt;&gt;      all the sampled guards.  In this case we proceed by marking all guards
&gt;&gt;      as &lt;maybe&gt; reachable so that we can keep on sampling.
&gt;
&gt; Does this mean that we mark our *already-sampled* guards as reachable,
&gt; thus making USABLE_FILTERED_GUARDS big again, and we loop through the
&gt; above steps again, and we keep looping until we come back online?
&gt;
&gt; The above "so that we can keep on sampling" phrase confuses me, because it
&gt; seems like there's no way that we would arrive at "USABLE_FILTERED_GUARDS
&gt; is empty" without also having SAMPLED_GUARDS at its maximum size:
&gt;

Hmm, I think "we can keep on sampling" actually means keep on sampling
new guards for circuits, and not "keep on sampling new
SAMPLED_GUARDS". I think we overloaded the term "sample" there; we
should fix it.

(FWIW, that functionality was added in #21052.)

&gt;&gt;     Whenever we are going to sample from {USABLE_FILTERED_GUARDS},
&gt;&gt;     and it contains fewer than {MIN_FILTERED_SAMPLE} elements, we
&gt;&gt;     add new elements to {SAMPLED_GUARDS} until one of the following
&gt;&gt;     is true:
&gt;&gt;
&gt;&gt;       * {USABLE_FILTERED_GUARDS} is large enough,
&gt;&gt;     OR
&gt;&gt;       * {SAMPLED_GUARDS} is at its maximum size.
&gt;
&gt; So, perhaps we mean "so that we can keep on trying circuits"?
&gt;

Yep.

&gt; Or, oh! Do we mean "sampling from USABLE_FILTERED_GUARDS", not "sampling
&gt; from GUARDS"?
&gt;
&gt; Ok, proceeding with my scenario: let's further say that we're offline
&gt; in such a way that we get quick failures for the connect attempts,
&gt; so we burn through each connect attempt at one per second, meaning we
&gt; blow through our CONFIRMED set within the first 10 minutes of going
&gt; offline. Let's also say we come back online within those 10 minutes. A
&gt; circuit (to some guard in SAMPLED_GUARDS) succeeds, and the circuit is
&gt; now of type &lt;waiting_for_better_guard&gt;.
&gt;
&gt; Since last_time_on_internet isn't very long ago, and there aren't any
&gt; other circuits open, the new circuit becomes &lt;complete&gt;, and we mark
&gt; this new guard as CONFIRMED, and stick it on the end of the CONFIRMED set.
&gt;
&gt; We keep using the newly CONFIRMED guard (since it's the only one
&gt; we think is reachable) for about a half hour, at which point the
&gt; PRIMARY_GUARDS_RETRY_SCHED schedule makes us forgive our primary guards,
&gt; and we switch back to our favorite primary guard.
&gt;
&gt; Do I have it right?
&gt;

I think so yes.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170519121834</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-05-19 12:18:34-0400</timestampReceived><subject>Re: [tor-dev] Clarifications on guard-spec.txt</subject><body>

Roger Dingledine &lt;arma@mit.edu&gt; writes:

&gt; Hi folks!
&gt;
&gt; I'm catching up on my proposals, and I really like guard-spec.txt.
&gt; Nicely done!
&gt;
&gt; I made some fixes that I hope are straightforward:
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122942.html
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122948.html
&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122986.html
&gt;
&gt; And I have four remaining questions/topics that could use some feedback
&gt; from the spec authors/implementors rather than just having me bust in
&gt; and change things.
&gt;

Second email:

Please check branch `guard_spec_roger` in my torspec repo for fixes to
all the issues below (I think), apart from issue (B) which probably
deserves its own ticket.

Feel free to merge, and let me know if I missed something.

&gt; ---------------------------------------------------------------
&gt;
&gt; A) We don't really say what we mean by "adding" a guard to an ordered
&gt; list. In particular:
&gt;
&gt;&gt;  We add new members to {CONFIRMED_GUARDS} when we mark a circuit
&gt;&gt;  built through a guard as "for user traffic."
&gt;
&gt; When we say "add", do we mean "append" here?
&gt;
&gt;&gt;  To compute primary guards, take the ordered intersection of
&gt;&gt;  {CONFIRMED_GUARDS} and {FILTERED_GUARDS}, and take the first
&gt;&gt;  {N_PRIMARY_GUARDS} elements.  If there are fewer than
&gt;&gt;  {N_PRIMARY_GUARDS} elements, add additional elements to
&gt;&gt;  PRIMARY_GUARDS chosen _uniformly_ at random from
&gt;&gt;  ({FILTERED_GUARDS} - {CONFIRMED_GUARDS}).
&gt;
&gt; Similarly, does "add" mean "append"?
&gt;
&gt;&gt;  Once an element has been added to {PRIMARY_GUARDS}, we do not remove it
&gt;&gt;  until it is replaced by some element from {CONFIRMED_GUARDS}. Confirmed
&gt;&gt;  elements always proceed unconfirmed ones in the {PRIMARY_GUARDS} list.
&gt;
&gt; This one looks like a bug as currently stated: by "proceed", do we mean
&gt; "precede"?
&gt;
&gt; ---------------------------------------------------------------
&gt;
&gt; B) In Sec 4.10, whenever we get a new consensus, we:
&gt;
&gt;&gt;  For every guard in {SAMPLED_GUARDS}, we update {IS_LISTED} and
&gt;&gt;  {FIRST_UNLISTED_AT}.
&gt;
&gt; In the old design, we also believed the Running flag in the new
&gt; consensus, that is, we marked the guards as reachable again. It looks
&gt; from sampled_guards_update_from_consensus() like we no longer do that.
&gt;
&gt; Is that old behavior considered a bug and we intentionally stopped,
&gt; or did we not consider it?
&gt;
&gt; I am ok with "that was stupid behavior, so we stopped", but if we didn't
&gt; know that we used to do it, maybe we should decide whether it is stupid
&gt; behavior. :)
&gt;
&gt; ---------------------------------------------------------------
&gt;
&gt; C) In Sec A.4, in the state file we have
&gt;
&gt;&gt;         "bridge_addr" -- If the guard is a bridge, its configured
&gt;&gt;         address and OR port. Optional.
&gt;
&gt; How does this play with bridges that have pluggable transports? In my
&gt; "bridge obfs2 128.31.0.34:51715" line, the ORPort of the bridge is
&gt; not listed.
&gt;
&gt; It looks from
&gt; https://trac.torproject.org/projects/tor/ticket/21027
&gt; like we did some fixing here, but the spec didn't get an update?
&gt;
&gt; ---------------------------------------------------------------
&gt;
&gt; D) In Sec 4.8, when a circuit succeeds:
&gt;
&gt;&gt;      * If this circuit was &lt;usable_if_no_better_guard&gt;, it is now
&gt;&gt;        &lt;waiting_for retry&gt;.  You may not yet attach streams to it.
&gt;&gt;        Then check whether the {last_time_on_internet} is more than
&gt;&gt;        {INTERNET_LIKELY_DOWN_INTERVAL} seconds ago:
&gt;&gt;
&gt;&gt;           * If it is, then mark all {PRIMARY_GUARDS} as "maybe"
&gt;&gt;             reachable.
&gt;&gt;
&gt;&gt;           * If it is not, update the list of waiting circuits. (See
&gt;&gt;             [UPDATE_WAITING] below)
&gt;
&gt; [Where INTERNET_LIKELY_DOWN_INTERVAL has been picked as 10 minutes.]
&gt;
&gt; To make sure I understand this one, consider the following scenario:
&gt;
&gt; * We go offline, and our current circuits fail.
&gt; * We try to make new circuits through each of our primary guards,
&gt;   failing for each (because we're offline) and marking them down.
&gt; * Then we move to the remaining confirmed+usable ones, and mark those
&gt;   down too.
&gt; * Then we work through the rest of USABLE_FILTERED_GUARDS, marking them
&gt;   down too. As we mark them down, USABLE_FILTERED_GUARDS shrinks,
&gt;   causing us to add new elements to SAMPLED_GUARDS to replenish
&gt;   USABLE_FILTERED_GUARDS.
&gt; * After we've brought SAMPLED GUARDS to 60, we stop adding new ones.
&gt;   At this point, we are out of tries:
&gt;
&gt;&gt;  * Otherwise, if USABLE_FILTERED_GUARDS is empty, we have exhausted
&gt;&gt;      all the sampled guards.  In this case we proceed by marking all guards
&gt;&gt;      as &lt;maybe&gt; reachable so that we can keep on sampling.
&gt;
&gt; Does this mean that we mark our *already-sampled* guards as reachable,
&gt; thus making USABLE_FILTERED_GUARDS big again, and we loop through the
&gt; above steps again, and we keep looping until we come back online?
&gt;
&gt; The above "so that we can keep on sampling" phrase confuses me, because it
&gt; seems like there's no way that we would arrive at "USABLE_FILTERED_GUARDS
&gt; is empty" without also having SAMPLED_GUARDS at its maximum size:
&gt;
&gt;&gt;     Whenever we are going to sample from {USABLE_FILTERED_GUARDS},
&gt;&gt;     and it contains fewer than {MIN_FILTERED_SAMPLE} elements, we
&gt;&gt;     add new elements to {SAMPLED_GUARDS} until one of the following
&gt;&gt;     is true:
&gt;&gt;
&gt;&gt;       * {USABLE_FILTERED_GUARDS} is large enough,
&gt;&gt;     OR
&gt;&gt;       * {SAMPLED_GUARDS} is at its maximum size.
&gt;
&gt; So, perhaps we mean "so that we can keep on trying circuits"?
&gt;
&gt; Or, oh! Do we mean "sampling from USABLE_FILTERED_GUARDS", not "sampling
&gt; from GUARDS"?
&gt;
&gt; Ok, proceeding with my scenario: let's further say that we're offline
&gt; in such a way that we get quick failures for the connect attempts,
&gt; so we burn through each connect attempt at one per second, meaning we
&gt; blow through our CONFIRMED set within the first 10 minutes of going
&gt; offline. Let's also say we come back online within those 10 minutes. A
&gt; circuit (to some guard in SAMPLED_GUARDS) succeeds, and the circuit is
&gt; now of type &lt;waiting_for_better_guard&gt;.
&gt;
&gt; Since last_time_on_internet isn't very long ago, and there aren't any
&gt; other circuits open, the new circuit becomes &lt;complete&gt;, and we mark
&gt; this new guard as CONFIRMED, and stick it on the end of the CONFIRMED set.
&gt;
&gt; We keep using the newly CONFIRMED guard (since it's the only one
&gt; we think is reachable) for about a half hour, at which point the
&gt; PRIMARY_GUARDS_RETRY_SCHED schedule makes us forgive our primary guards,
&gt; and we switch back to our favorite primary guard.
&gt;
&gt; Do I have it right?
&gt;
&gt; Thanks!
&gt; --Roger
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170515043708</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-05-15 04:37:08-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 14 May 2017, at 23:35, harshit tandon &lt;harshittandon24@gmail.com&gt; wrote:
&gt; 
&gt; I would like to contribute to tor browser how can I help

Try:
https://www.torproject.org/getinvolved/volunteer.html.en#project-torbrowser
tbb-dev at lists.torproject.org

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZGTB0AAoJEHQNnjkCUnKisG4P/3GbaL2Pd45T2VVNlPadYnQR
r0UbrpEAKyroQhpgA7lls6M030gDpiOxFL66LgU4LCW6REtoIAY1rrrEtVrOcl2+
Y+l/I2mEXNxhpkiCH05Wi28rIjjicHQynuar6ltG7mMY6x41XMEPnfvmyZeJma0i
nAqMP3ZO55om1suQSmC2cr+7Mm4/N98mmaMcLNGVbQF58abvuCIaF6S48xgibP/B
1maWi4xKHTwj4Ll653KnoUBQXfVLoACmgMDE3csyQJ8e52/Ylaf0Hi3g6w8iqCSu
lGkkF1/CjNBpLVIHGexEl0Yo/owNUCkbmEeYpIXS01LZ1rnhw9fddlhOdIQgqo5S
oZ1s6/1t5hj8dJlijmRZz5UU5+dQ4Hxnm45LPi1dNCMgoisTZhVaUXyKo2V1XHbN
AkhtOQJwZWjnft4kzWIIKJ03h1c9MqYxhFDEcjtJ81nWi9uqtdnNdtVKwwWWOpnb
9zinzmLi10dVMZ9jGpz5jxAL1sdO+WrZGDj1jqbYXnQVyKRv/6/mEVLQhSHb/1E2
a+mDjEaK91PduL7N7hw2w/aOSQxqZFL2Hz3VCA4VwOgs86pkvH5Kdxa5qzBXf2CL
iaUXWAhwxwo6p5K+OXuiViG+daXC+jvP9ibl/vsu2xvku1nCfoY/SzPMvTmqO6la
tCsp/QM1XnOxEcLdTafY
=c+KX
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170510215400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-10 21:54:00-0400</timestampReceived><subject>Re: [tor-dev] man page: MyFamily</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; no one is using nicknames anymore, or onionoo does not display
&gt; fingerprints?) Are nicknames still supported?

correction, I found some nicknames in onionoo's alleged_family field of
the following relays, so they use it, but didn't find any in
effective_family. So it should be fine to use 'fingerprint' only in the
documentation?


list of relays with nicknames in their alleged_family
02326AE8AAA771BFF9718012672636BC31156E51
0C039F35C2E40DCB71CD8A07E97C7FD7787D42D6
0CA982E2458AA0CC5A31B426D27B40D538C8DFD1
12E7506C5842B51BA0F6C3A9B0390158688D7CFA
16446628702AD87A369C63DA6F0D0FDD28B405D3
16F7E9E93D6CC469392AD0BA020A3F359DF98345
16F8469B848F9DCB4590BCC5CEA5F24980BDC806
1802AE6297FAC65BEF81401BB82207F8A40E5F7E
1A51BD3B4BC752D175CC5123E83C099F2A0D5004
1BF05882C1C103731DB2CA7E4D07302CEDED2256
1C5E0E941F46B5B0219C0893298688994D517236
1D8ED54EA9DF2D46558AD0096DD5D9DD297F13A8
1E5A7C498A9F085ACB12B6C10CC510E1426121E9
233864ABC44228059D8BC21058E45F586719050F
346019C3757C1649E7586F06A69993D68883D25F
38594065185DD418373F9AE365A8030DBC29EE64
38B63BB8DE8B63BBE634C8AB84E51BA733EBE874
3B50CF566B45E0BCC47FE90DE0A7103AF00C1B67
3C4814E9C1C4BD558A4D46B0DD848A0BDB7A159F
3FDD2586B98C33652F2F1512321EF43A5874C9AD
40F32747DA9C12CF59B7CAF2EA0FA918528C993B
4185C7D340B73B081F181C094B30032B59082BE3
4E1A81B90F4FB498EFB1CA023260C8BEC2E02083
56BF3B636ADF50B2013B3164EBEDE59D0C1C2ACE
5E99CA5F45A8757FACA7628278A08F8D6C1891E2
62652D3DB1D8CD7873E01BB4089545BE0567DE80
6DFBF0FF50456125AD98DE665CC60031863FEB98
8096EA61F733C3030351401944F54F254185098C
88F413062CF8A702B01F43BDEF9E43A2669A76EF
8CB33A002002ABAE3F3E2C91E006494FD64A09DD
8CB3BBC8CEEA91734CF2A275FA52FC55ECBC8A5B
9231DF741915AA1630031A93026D88726877E93A
94541F30DE462C066F4504D397C10776DFAD475F
9536B457F01F40696B131A72BC102343759F46AA
97FC02820912441BC2DFE3ACF433E455714B0AF5
9A9BC34468AC1677782E4E56B27D947A9C991E2E
9F7B124E664F37938B36ED0E73EECFF7D653C3B4
A5E3D05A4F44A915C429BF712334A4E28E46A10C
AC9803701F9EE18194D40B38E47CE4C68CF2F567
BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E
C3636ECA4B40900056590AA7DBFC6ED09379852F
CFEC81B97F6C15689ED8451C3DB0F8C399C01724
D50DF76982F0D2BFDB28A753079CDD63A192C32F
D8C1E05325C108D848057F42A881D511CFB12409
D9065F9E57899B3D272AA212317AF61A9B14D204
DA379D7B0CD1F7CF2FB3F0AC64B54150E784BF5B
DCAA1CED7183B561D18CF580BE9933BD9168D101
DFF328E9305A4D22AD19D1F9D54404F8DDCD85E5
E3DB2E354B883B59E8DC56B3E7A353DDFD457812
E41B16F7DDF52EBB1DB4268AB2FE340B37AD8904
E727D0B4179549BB3F82ED3C256F209E54CE0B23
EBDE762412D1F0D75338053F5A5A9B6EE053D642
F0A13CA98D8F392EE9FC3AF331DE0C3E69B073AD
F7181ED08E1A2E564105C3620AFA0D78A131F4E5
FB61107EAC51E731334FD56FBD6C4C4A647714B9


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170511021601</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-05-11 02:16:01-0400</timestampReceived><subject>Re: [tor-dev] man page: MyFamily</subject><body>

[Attachment #2 (multipart/signed)]


&gt; 
&gt; On 11 May 2017, at 07:30, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; ...
&gt; 
&gt; inline patch below (I can paste it to trac if you like)

Trac please, emails are easy to lose track of.

And we prefer branches if possible:

https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md#n13

&gt; On 11 May 2017, at 07:54, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; nusenu:
&gt;&gt; no one is using nicknames anymore, or onionoo does not display
&gt;&gt; fingerprints?) Are nicknames still supported?

Nicknames are supported, but deprecated, as multiple relays can have
the same nickname.

&gt; correction, I found some nicknames in onionoo's alleged_family field of
&gt; the following relays, so they use it, but didn't find any in
&gt; effective_family. So it should be fine to use 'fingerprint' only in the
&gt; documentation?

That's ok, there's no need to mention a deprecated, insecure feature.

&gt; ...

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZE8lhAAoJEHQNnjkCUnKijesP/RPA3rky57kZxFPuEGRsRX8I
sAGj9J0HsJ0Vw8marGm0u7OoOLvUbar4TJm5JBG5DlmoleriWwLH1GKggcpxlY3i
EtmvQFPNrOVxsnMBkOV5s0YhFcKvR58WjDH9cmE6ZhkpzzpbYr7pbV7KGrFPAXzh
ZWmn0Hh3eBDOQm0/foATunHVHY1h7RRuSjnv6oOwVoIxHayVpraHsQsCCdoo/1bR
j7s31CAC9uO0jhQLFjHCfmjt78DCWQXN8iIZd81KotyPRkdiOUSWvPUcxsPnOr7r
Nm2D3oQUWM8+L+OP+JTpAKxA/zxUj/TETzzVNm5qzfJzE8ci7cdZeQ8zvAioq4AM
N/Z+C66y3VQtTYPq2PuYXbmv0tZX3eH25McQHqLDzpAn9Uk+C8iNFMW9OBE4ubd3
EFBXfZmmVEeUUnCoC4oonVcFNe0VGc/KBxioNypzO8Ep1trL4S3TM9kuer0LHlRp
NPL0dgUqTGeXYICWdBJlhTU/c4TNzT4Qx09hu2KQndOADk7aKBkhIdHcJftBmB3l
zPmqhTYzWq8viu3HPDv8MDbsi7snVCYObeAXq3cNnOh9RuacdS0/BUg3DmihUhTA
y1Y1iXBwh1B3mWCagAf9ZXuTA3JXFyIPm+YoTS1VCPUdgDIhUwyJq8LMS/Dr8GVP
SEOLkIdb3eCmP3gJGxfe
=qZ1F
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170506074128</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-05-06 07:41:28-0400</timestampReceived><subject>Re: [tor-dev] Why is my bridge not publishing statistics?</subject><body>

On Fri, May 05, 2017 at 04:30:52PM -0700, David Fifield wrote:
&gt; But if it's the case that an unreachable ORPort causes descriptors not
&gt; to be uploaded, then why do the default obfs4 bridges appear in Atlas?

Tor relays (and bridges) test their reachability by making circuits
that loop back to themselves, and they consider themselves reachable
when an incoming connection sends a create cell (see the end of
onionskin_answer()).

You might think that these two actions are more connected, i.e. that
it needs to be one of the loop circuits that sends the create cell,
but no, they're completely disconnected. So the relay (or bridge)
can launch all the loop circuits it wants, and they can all fail, but
if something causes an incoming connection that sends a create cell,
it will happily conclude that it's reachable.

So it's likely that the reason the default bridges are publishing to
the bridge authority is because somebody used them via obfs4, at which
point they decided they were reachable, at which point they decided it
was cool to publish.

You're right that this is a fragile situation. Maybe we should recommend
that if you firewall your ORPort, you also set "AssumeReachable 1"
in your torrc?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170506162511</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-05-06 16:25:11-0400</timestampReceived><subject>Re: [tor-dev] Why is my bridge not publishing statistics?</subject><body>

On Sat, May 06, 2017 at 03:41:28AM -0400, Roger Dingledine wrote:
&gt; On Fri, May 05, 2017 at 04:30:52PM -0700, David Fifield wrote:
&gt; &gt; But if it's the case that an unreachable ORPort causes descriptors not
&gt; &gt; to be uploaded, then why do the default obfs4 bridges appear in Atlas?
&gt; 
&gt; Tor relays (and bridges) test their reachability by making circuits
&gt; that loop back to themselves, and they consider themselves reachable
&gt; when an incoming connection sends a create cell (see the end of
&gt; onionskin_answer()).
&gt; 
&gt; You might think that these two actions are more connected, i.e. that
&gt; it needs to be one of the loop circuits that sends the create cell,
&gt; but no, they're completely disconnected. So the relay (or bridge)
&gt; can launch all the loop circuits it wants, and they can all fail, but
&gt; if something causes an incoming connection that sends a create cell,
&gt; it will happily conclude that it's reachable.
&gt; 
&gt; So it's likely that the reason the default bridges are publishing to
&gt; the bridge authority is because somebody used them via obfs4, at which
&gt; point they decided they were reachable, at which point they decided it
&gt; was cool to publish.

Okay, thanks. It still doesn't fully make sense to me, because while
some of the default bridges are in Atlas, not all of them are (for
example the two from https://bugs.torproject.org/18050). I don't think
it's possible that they haven't gotten *any* client traffic.

I wonder if it has something to do with the tor version number?

&gt; You're right that this is a fragile situation. Maybe we should recommend
&gt; that if you firewall your ORPort, you also set "AssumeReachable 1"
&gt; in your torrc?

I've just set "AssumeReachable 1"; let's see if that helps anything.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170517121039</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-05-17 12:10:39-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib/DescripTor 1.7.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

During the next time several releases of metrics-lib/DescripTor
are planned culminating in a major release around the end of June.

The first of this series is 1.7.0:

     https://dist.torproject.org/descriptor/1.7.0/

- From the change-log:

 * Medium changes
   - Parse "padding-counts" lines in extra-info descriptors [0].
   - Some bug fixes avoiding dropped content
   - and test improvements.
 
for details see [1].

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1160
[1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=6941084f258130d53301769a332b7a501321b3ae
 [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZHD24AAoJEPeEx9Sa/gvi8f4P/AgD8VU99oifrGT9z7GKJgwS
+dAb9ba14MpT0Jk1/RuP8CQQgsoV2AcqcDI1xsOpmR9nbIEbxGmAJxCsu8IxoC9L
0n1gvdIo7034yEPPv4vI+AI+KnS4KgHJAhpOcCPKsbeHsjSqCHRpphyJehkm53os
dhFPRuQWmyHJ7pvN5R6HIJJ7htluzyt+zhz9XNhdyQ4OrNSgl/M76PAMRfeJt3WX
0e2eOeGk92zXxv+fYtUbTsrr6UwjQkR7Nx4qW49tqKyLy/0CDdHUnFmmYnrddOAs
b0ZMpKzRCN8cKPXxFedV/uKD5eNNy//p1w/WAKeuKONGXogNKHsxxrnQ68CuEypx
OTVq8cI4XPX62hMw61P9HhepCHzj3LPjhZ8t19IZ0jAguT2ESh2R0UkTO/v9Ul33
DwiJd3U1yWxYyKGGIJg988jk8KNUiM83aoyclriGFwUwolxbD+pBmmZicGRnR031
xOzP+f6Q0v/RnJG4GyydF+X+B2RO6/bllM9YDogWAwoj7DGS1CAP8/YEorkCQXg+
RBLsaZIXjRh0uPpanao6iL6xX+yBzu35ihRhLKNusX6bDubiA95Mr0F4OoDzj4sa
9d3wWX2OyGXQmfS+tVrLCtOQn1CkkLOVYo9G+DDomouhgzUM/TBAefy2IMz0IeJS
ioVzKXE2IC4UTX1Y7sWh
=pe7s
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170519095222</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-05-19 09:52:22-0400</timestampReceived><subject>[tor-dev] Simulating how Laplace noise added to directory-request statistics would affect user numbe</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi everyone,

we'd like to improve directory-request statistics by obfuscating values
on relays before they are reported to the directory authorities.

A possible obfuscation method is to add Laplace noise to request counts
for all ~250 countries, so that it's unclear whether a request was
actually made by a user or is just noise.  In fact, we did a similar
thing to onion service statistics two years ago.

But before we do this we need to find out whether obfuscated values
would still be useful enough to estimate user numbers in the Tor network.=


We ran a simulation using archived descriptors and put our results
including a graph, CSV files, and simulation code on this wiki page:

https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam/Obfus=
cationSimulationAnalysis

The result is that we can't just go ahead and put in this noise, because
we'd have to improve our user number estimation algorithms first.
Otherwise we might risk losing one of our most important statistics: the
number of daily Tor users by country.

If you have any thoughts on these results or want to help make the
simulation more accurate, please let us know!

All the best,
Karsten (for the metrics team)


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170519201252</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-05-19 20:12:52-0400</timestampReceived><subject>Re: [tor-dev] Clarifications on guard-spec.txt</subject><body>

On Fri, May 19, 2017 at 8:18 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; Roger Dingledine &lt;arma@mit.edu&gt; writes:
&gt;
&gt;&gt; Hi folks!
&gt;&gt;
&gt;&gt; I'm catching up on my proposals, and I really like guard-spec.txt.
&gt;&gt; Nicely done!
&gt;&gt;
&gt;&gt; I made some fixes that I hope are straightforward:
&gt;&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122942.html
&gt;&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122948.html
&gt;&gt; https://lists.torproject.org/pipermail/tor-commits/2017-May/122986.html
&gt;&gt;
&gt;&gt; And I have four remaining questions/topics that could use some feedback
&gt;&gt; from the spec authors/implementors rather than just having me bust in
&gt;&gt; and change things.
&gt;&gt;
&gt;
&gt; Second email:
&gt;
&gt; Please check branch `guard_spec_roger` in my torspec repo for fixes to
&gt; all the issues below (I think), apart from issue (B) which probably
&gt; deserves its own ticket.
&gt;
&gt; Feel free to merge, and let me know if I missed something.
&gt;

Looks good -- merged that to torspec.git.  Roger, please let us know
is there's something more to do.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170522180751</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-05-22 18:07:51-0400</timestampReceived><subject>[tor-dev] Tomorrow (5/23) is a core-tor trac-attack day!</subject><body>

Hi!

At our meeting just now, the network team discussed our needs for a
more organized set of trac tickets about past and previous versions.

(This is about tickets against Tor itself, though if you want to jump
in on some other component, you're welcome to do so!)

So, tomorrow, I'm planning to spend (nearly?) all my work hours on
#tor-dev, working on organizing trac tickets.  And more help is always
welcome! Drop by and say hi and help us clean out our bugtracker!

 Areas of interest will be:
   * Wrapping up tickets that are associated with older release milestones
   * Trying to make sure all current-milestone tickets get owners
   * Making sure 0.3.2.x is not just a dumping ground for "things we
didn't get around to doing in 0.3.1.x."
   * Improving the accuracy of the "easy" keyword by applying it to
more tickets and removing it from any that weren't so easy after all.
   * Looking for a way to get the "Tor: Unspecified" milestone under control.

I'm likeliest to be around during 1230-1800 UTC and 2230-0000 UTC.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170523142313</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-05-23 14:23:13-0400</timestampReceived><subject>[tor-dev] Latest draft policy on handling tor security issues</subject><body>

Hi, all!

I put this on the wiki, but I think it should have more attention.

https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/SecurityPolicy

 It's the draft policy that we're using to guide our action when we
run into security issues in the program "tor".  It's not finalized,
but we've been trying to follow it as we notice issues in order to
identify any problems in it.  It's had some review already, but more
is always welcome.

Have a look!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170523161741</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-05-23 16:17:41-0400</timestampReceived><subject>[tor-dev] Further New Hope Improvements</subject><body>

New paper released a week ago makes further improvements on New Hope, 
reducing decryption failure rates, ciphertext size and amount of entropy 
needed. This new version will be submitted as a NIST PQ competition 
candidate.

https://eprint.iacr.org/2017/424
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170524001913</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-05-24 00:19:13-0400</timestampReceived><subject>[tor-dev] R-LWE KEX error reconciliation improvements (was: Further New Hope Improvements)</subject><body>

[Attachment #2 (multipart/signed)]


bancfc@openmailbox.org transcribed 0.6K bytes:
&gt; New paper released a week ago makes further improvements on New Hope,
&gt; reducing decryption failure rates, ciphertext size and amount of entropy
&gt; needed. This new version will be submitted as a NIST PQ competition
&gt; candidate.
&gt; 
&gt; https://eprint.iacr.org/2017/424

Hi!

Thanks for sharing this!

Point of clarification: rather than a new version of NewHope, it's a more
efficient reconciliation method for R-LWE based KEX (and encryption schemes
too, since the newer reconciliation makes the error rate low enough).  The
only connection to NewHope is that it uses the same parameter choices for
the underlying polynomial ring.

But!  This is exciting, not only because it has smaller message sizes and
specifications for constant-time implementations (and decent reference
code!), but because it appears to me ¹ that this new method is not subject to
the same patent claims as NewHope theoretically is.

 ¹ I am not a lawyer.  (Fortunately.)

Best,
-- 
 â™¥â’¶ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170524072526</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-05-24 07:25:26-0400</timestampReceived><subject>[tor-dev] txtorcon 0.19.3</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing another regression, 0.19.3 causes txtorcon to (once again)
correctly work with SocksPort lines containing unix socket options
when used with txtorcon.connect(). Thas bug was introduced in 0.19.0
which reduced the number of GETINFO and GETCONF calls (to help
filtering-proxies).

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

  https://pypi.python.org/pypi/txtorcon/0.19.3
  https://github.com/meejah/txtorcon/releases/tag/v0.19.3

Releases are also available from the hidden service:

  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz
  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
f73396667909a3c7a98f4dd865edf4ed6a2518ee5a935d92e18b8a479ec244fd  txtorcon-0.19.3.tar.gz
e0901f7743a43ed6389f0de31c1f547d89b32723a5ae9316d6cae9ad8eacdbea  txtorcon-0.19.3-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZJTJVAAoJEMJgKAMSgGmn5woIAIyFRa7NhSNm/zMMJE92jtgA
C3UY55q3FF4VycC7K77EkaudHPMqlr9MA3EeGkx4NVu0KAX7lIT4GFCsZTlnOdXm
rglZ7FFYh49KoAWSMGCMJ7LlauYUitXptynte3lWcqbvjGJkCqMd6WuXslTooSI2
68gq/aoTbXoHWNg1C6DtBhR0JqvN+Vq7ARHyqc4bDloh1LXAvEUwsbKvDtrpXTbe
eRwMlKTKoUXhXjxO37NtoNSxT6HUFNcOFOYcLnWtBMPty9W90xY2wC1LbWwYymbY
Pk97OUceSyoHxAGsBYjKCdTXEWB6TO5lmHE3+t48OqiYt4ELAWkJFUBf5d6Mnto=
=ZRcE
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170524074554</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-05-24 07:45:54-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo hardly reachable</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 23.05.17 21:48, nusenu wrote:
&gt;&gt; we're working on resolving the load issues of the main server and its
&gt;&gt; two caching frontends, which really get hammered since last week for no
&gt;&gt; obvious reason.  
&gt; 
&gt; I wanted to compare atlas weblogs with onionoo data but didn't find any
&gt; onionoo data on https://webstats.torproject.org/

That's expected.  Onionoo uses Varnish as frontend to the Java backend,
and webstats.torproject.org only contains sanitized Apache web logs.  We
don't have anything similar for Onionoo requests.

All the best,
Karsten



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170525043145</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-05-25 04:31:45-0400</timestampReceived><subject>[tor-dev] Default bridges that are not publishing statistics</subject><body>

On Sat, May 06, 2017 at 09:25:11AM -0700, David Fifield wrote:
&gt; Okay, thanks. It still doesn't fully make sense to me, because while
&gt; some of the default bridges are in Atlas, not all of them are (for
&gt; example the two from https://bugs.torproject.org/21917). I don't think
&gt; it's possible that they haven't gotten *any* client traffic.
&gt; 
&gt; I wonder if it has something to do with the tor version number?

I checked all the other default bridges and all of them but 2 are
publishing statistics:
C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4  cymrubridge31
0BAC39417268B96B9F514E7F63FA6FBA1A788955  cymrubridge33
I will contact the operators and ask them to try setting
"AssumeReachable 1".

I suspect it has something to do with the Tor version number. Here are
the other default bridges and their version numbers. The only old one is
the last one, which is the one I had to set AssumeReachable on to get it
to show up.

A09D536DD1752D542E1FBB3C9CE4449D51298239  LeifEricson      obfs3,obfs4,fte  Tor \
0.3.1.0-alpha-dev on Linux 1E05F577A0EC0213F971D81BF4D86A9E4E8229ED  ndnop0           \
obfs3  Tor 0.2.9.10 on Linux 4C331FA9B3D1D6D8FB0D8FBBF0C259C360D97E6A  ndnop2         \
obfs3  Tor 0.2.9.10 on Linux AF9F66B7B04F8FF6F32D455F05135250A16543C9  Unnamed        \
Tor 0.2.8.7 on Linux 0E858AC201BF0F3FA3C462F64844CBFFC7297A42  pdxtorbridge01         \
Tor 0.2.9.10 on Linux 1E326AAFB3FCB515015250D8FCCC8E37F91A153B  wisctorbridge01       \
Tor 0.2.8.8 on Linux FC562097E1951DCC41B7D7F324D88157119BB56D  wisctorbridge02        \
Tor 0.2.9.10 on Linux A17A40775FBD2CA1184BF80BFC330A77ECF9D0E9  wisctorbridge03       \
Tor 0.2.9.10 on Linux 8DFCD8FB3285E855F5A55EDDA35696C743ABFC4E  ndnop3           \
obfs4  Tor 0.2.9.10 on Linux BBB28DF0F201E706BE564EFE690FE9577DD8386D  ndnop5         \
obfs4  Tor 0.2.9.10 on Linux 752CF7825B3B9EA6A98C83AC41F7099D67007EA5  riemann        \
obfs4  Tor 0.2.8.9 on Linux 7B126FAB960E5AC6A629C729434FF84FB5074EC2  noether         \
obfs4  Tor 0.2.8.7 on Linux A832D176ECD5C7C6B58825AE22FC4C90FA249637  MaBishomarim    \
obfs4  Tor 0.2.9.10 on Linux 8FB9F4319E89E5C6223052AA525A192AFBC85D55  Mosaddegh      \
obfs4  Tor 0.2.9.10 on Linux 00DC6C4FA49A65BD1472993CF6730D54F11E0DBB  JonbesheSabz   \
obfs4  Tor 0.2.9.10 on Linux C73ADBAC8ADFDBF0FC0F3F4E8091C0107D093716  GreenBelt      \
obfs4  Tor 0.2.9.8 on Linux FE7840FE1E21FE0A0639ED176EDA00A3ECA1E34D  Azadi           \
obfs4  Tor 0.2.9.10 on Linux CDF2E852BF539B82BD10E27E9115A31734E378C2  Lisbeth        \
obfs4  Tor 0.2.9.10 on Linux FC259A04A328A07FED1413E9FC6526530D9FD87A  NX01           \
obfs4  Tor 0.3.0.6 on Linux B9E7141C594AF25699E0079C1F0146F409495296  TorLandMeek     \
meek   Tor 0.2.9.10 on Linux 97700DFE9F483596DDA6264C4D7DF7641E1E39CE  cymrubridge02  \
meek   Tor 0.2.9.9 on Linux 2B280B23E1107BB62ABFC40DDCC8824814F80A72  Unnamed         \
snowflake  Tor 0.2.5.12 on Linux


appendix: commands to generate this data:
grep -o -E '"\w+ [0-9.:]+ [0-9A-F]+' bridge_prefs.js | sed -e 's/.//' | while read \
transport addr fpr; do wget -c -O $fpr.json \
https://onionoo.torproject.org/details?fingerprint=$(echo $fpr | xxd -r -p | sha1sum \
| awk '{print $1}'); done for a in *.json; do echo -n "$a "; jq -j \
'.bridges[]|(.hashed_fingerprint,"\t",.nickname,"\t",(.transports//[]|join(",")),"\t",.platform)' \
$a; echo; done _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170525182000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-05-25 18:20:00-0400</timestampReceived><subject>[tor-dev] specific From: for tor-bugs ML emails (like tor-wiki-changes)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I like how tor-wiki-changes ML emails have a specific From: so you can
directly see who made a change without looking into the body of the email.

It would be great if we could get the same level of information into the
From of tor-bugs ML emails.
(currently it is a static string "Tor Bug Tracker &amp; Wiki")

regards,
nusenu

-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170530112527</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-05-30 11:25:27-0400</timestampReceived><subject>Re: [tor-dev] Open topics of prop247: Defending Against Guard Discovery Attacks using Vanguards</subject><body>

On Wed, May 17, 2017 at 02:51:48PM +0300, George Kadianakis wrote:
&gt; ==================== Design topics ====================
&gt; 
&gt; * Optimize proposal parameters
&gt; ** Optimize guardset sizes
&gt; ** Optimize guardset lifetimes and prob distributions (minXX/maxXX/uniform?)
&gt; ** To take informed decision, we might need a prop247 simulator, or an actual PoC with txtorcon

Thanks George.

I've just looked through prop#247 and the past tor-dev threads.

Another item to add to the design discussion list, unless it got
resolved while I wasn't looking:

* Do we do the vanguard design for *client* connections to onion
services too?

* And slipping further down that slope, how does this vanguard design
compare to Mike's virtual circuit hopes for all user circuits:
https://bugs.torproject.org/15458

We're going to have to think about scope for the meeting, so we cover
all the breadth of things we ought to cover, without also letting it
balloon into a "I think Tor should do X \forall X" week.

In particular, I think it might be smart to sort through (make a list
of) all the various attacks and concerns we want to consider, so we can
optimize against them all without forgetting some.

For example, based on what I've read so far, I'm planning to propose that
we have one 3rd level vanguard for each 2nd level vanguard, since that way
we have the option to rotate it most quickly (if we decide we want that),
and the load balancing works out better than the other options I've heard
(e.g. compared to choosing a slow 2nd level vanguard and then four 3rd
level vanguards which don't help us much because the bottleneck is at
the 2nd level).

Oh, and finally, for those who don't know about phrases like "the downhill
path algorithm", which was where many of these "multi hop guard" designs
started, be sure to look through
https://www.freehaven.net/anonbib/#ccs2011-trust

Whew,
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170530123400</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-05-30 12:34:00-0400</timestampReceived><subject>Re: [tor-dev] [PATCH] fix GCC 7 implicit fallthroug warnings</subject><body>

On Sun, May 28, 2017 at 5:52 PM, Andreas Stieger &lt;astieger@suse.com&gt; wrote:
&gt; Hello,
&gt;
&gt; On 05/28/2017 11:01 PM, Andreas Stieger wrote:
&gt;&gt;  __attribute__ ((fallthrough));
&gt;
&gt; It turns out that this may not be as portable as I thought. Instead, the
&gt; attached patch adds magic comments recognized by default
&gt; -Wimplicit-fallthrough=3 or break, as required.

Hi!  I've applied this one to master, and opened
https://trac.torproject.org/projects/tor/ticket/22446#no5 to track it.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326122441</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-03-26 12:24:41-0400</timestampReceived><subject>[tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

So: a bunch of us were discussing Prop224 Onion addresses, and their
UX-malleability.

Specifically: that there are small bit fields in the current Prop224 Onion
Address schema (eg: version, and other future structure?) which can be
tweaked or amended without otherwise changing the functionality of the
address, or without much changing what the user sees in the (say) browser
address bar.

This is a point of significant concern because of issues like phishing and
passing-off - by analogy: t0rpr0ject.0rg versus torproject.org  - and other
games that can be played with a prop224 address now, or in future, to game
user experience.

We discussed the existing "hash the public key before base-32 encoding"
approach, but hashing breaks the prop224 key blinding.

Ian Goldberg - thank you Ian - offered this attractive solution: apply a
*reversible* "All Or Nothing Transform" (AONT) to the entire Prop224 Onion
Address, prior to Base32 Encoding.

This way, even a single-bit mutation of (say) version number will have a
"diffusion" effect, impacting ~ N/2 of the bits whilst having O(1) cost and
being reversible so as not to impact the rest of Prop224.

The result would be onion addresses which are less "tamperable" / more
deterministic, that closer to one-and-only-one published onion address will
correspond to an onion endpoint.

What does the panel think?

    - alec

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So: a bunch of us were discussing \
Prop224 Onion addresses, and their \
UX-malleability.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Specifically: that there are small bit \
fields in the current Prop224 Onion Address schema (eg: version, and other future \
structure?) which can be tweaked or amended without otherwise changing the \
functionality of the address, or without much changing what the user sees in the \
(say) browser address bar.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This is a point of significant \
concern because of issues like phishing and passing-off - by analogy: t0rpr0ject.0rg \
versus &lt;a href="http://torproject.org"&gt;torproject.org&lt;/a&gt;   - and other games that \
can be played with a prop224 address now, or in future, to game user \
experience.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We discussed the existing "hash the public \
key before base-32 encoding" approach, but hashing breaks the prop224 key \
blinding.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ian Goldberg - thank you Ian - offered this \
attractive solution: apply a *reversible* "All Or Nothing Transform" (AONT) \
to the entire Prop224 Onion Address, prior to Base32 \
Encoding.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This way, even a single-bit mutation of (say) \
version number will have a "diffusion" effect, impacting ~ N/2 of the bits \
whilst having O(1) cost and being reversible so as not to impact the rest of \
Prop224.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The result would be onion addresses which are less \
"tamperable" / more deterministic, that closer to one-and-only-one \
published onion address will correspond to an onion \
endpoint.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What does the panel \
think?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      - alec&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--  &lt;/div&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405043608</emailId><senderName>Yixin Sun</senderName><senderEmail>yixins@cs.princeton.edu</senderEmail><timestampReceived>2017-04-05 04:36:08-0400</timestampReceived><subject>[tor-dev] Counter-RAPTOR Paper</subject><body>

Hi all,

Our proposed defenses (Counter-RAPTOR) against active routing attacks on Tor will \
soon appear at IEEE S&amp;P in May. It's also available here: \
https://arxiv.org/abs/1704.00843

In short, we have two lines of defenses:
(1) Entry Guard Selection (proactive defense, \
https://github.com/inspire-group/Counter-Raptor-Tor-Client) (2) BGP Monitoring on Tor \
relays (reactive defense, in progress of making it public)

Please let us know if you have any questions/comments.

Thanks!
Yixin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328153100</emailId><senderName>Donncha O'Cearbhaill</senderName><senderEmail>donncha@donncha.is</senderEmail><timestampReceived>2017-03-28 15:31:00-0400</timestampReceived><subject>[tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Browser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi all,

The Tor bad-relay team regularly detects malicious exit relays which are
actively manipulating Tor traffic. These attackers appear financial
motivated and have primarily been observed modifying Bitcoin and onion
address which are displayed on non-HTTPS web pages.

Increasingly these attackers are becoming more selective in their
targeting. Some attackers are only targeting a handful of pre-configured
pages. As a result, we often rely on Tor users to report bad exits and
the URLs which are being targeted.

In Firefox 51, Mozilla started to highlight HTTP pages containing
password form fields as insecure [1]. This UI clearly and directly
highlights the risk involved in communicating sensitive data over HTTP.

I'd like to investigate ways that we can extend a similar UI to Tor
Browser which highlight Bitcoin and onion addressed served over HTTP. I
understand that implementing this type of Bitcoin and onion address
detection would be less reliable than Firefox's password field
detection. However even if unreliable it could increase safety and
increase user awareness about the risks of non-secure transports.

There is certainly significant design work that needs to be done to
implement this feature. For example, .onion origins need be treated as
secure, but only if they don't included resources from non-secure
origins. We would also need to make the onion/bitcoin address detection
reliable against active obfuscation attempts by malicious exits.

I'd like to hear any and all feedback, suggestions or criticism of this
proposal.

Kind Regards,
Donncha


[1]
https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of=
-non-secure-http/



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170402032258</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-02 03:22:58-0400</timestampReceived><subject>Re: [tor-dev] GSoC: Support all kinds of DNS queries</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Daniel Achleitner:
&gt; Hi everyone,
&gt; 
&gt; I'm a Software Engineering master's student at TU Wien, Austria, 
&gt; with a recent focus on computer security and privacy issues. I am 
&gt; interested in participating in GSoC 2017, particularily in the
&gt; task to support all kinds of DNS queries via Tor [1].
&gt; 
&gt; I've seen the mailing list discussions of 2012 and read the 
&gt; resulting proposition 219 [2]. What do you think, which parts of
&gt; it (if any) would need to be adapted for DNS in 2017? My current 
&gt; impression is that not much has changed, particularily regarding 
&gt; DNSSEC support and deployment.
&gt; 
&gt; As of now, the proposal looks fairly complete with few questions 
&gt; remaining, the biggest research task being how to utilize 
&gt; libunbound for query/response parsing and construction. 
&gt; Implementing the RELAY DNS cells then seems fairly
&gt; straightforward. Unit/integration tests and some fuzzing would be a
&gt; good idea. The problem of reducing DNSSEC roundtrips
&gt; (serialization) to be investigated in a later phase, I would say.
&gt; 
&gt; Is a separate AXFR tool still something that is desired? I have no
&gt;  experience with zone transfers -- can't the existing tooling just 
&gt; be used over a normal TCP conn through Tor?
&gt; 
&gt; This project idea would make a good match to my thesis in
&gt; progress, for which I am researching and evaluating
&gt; privacy-improving DNS tools in the context of Tor (DNSCrypt,
&gt; DNS-over-TLS) [3], inspired by the awesome paper on DNS correlation
&gt; [4]. For example, I recently built a SOCKS-to-SOCKS translator
&gt; which allows to resolve hostnames using a resolver of choice, e.g.
&gt; using DNSCrypt with TBB.
&gt; 
&gt; Looking forward to hearing your thoughts, concerns and opinions!
&gt; 
&gt; Best regards, Daniel
&gt; 
&gt; IRC handle on OFTC: idealchain

(Thinking out loud.)  It would be interesting to have some kind of
algorithm agility here.  For example, a Tor client could send a
request for a Namecoin domain name, and the exit relay would return a
Namecoin merkle proof in the same way that it would return a DNSSEC
signature if were a DNS doman name.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY4G6EAAoJELPy0WV4bWVw2UMQAKEbpa5u0zHHHAYrZS5huMcM
LsCmd5o1q5fQXzVyncWiYVasYUUQHcMp7SygqLJK6mCNgvDgytYGQ6S9qbt/xnqO
aPxIBBM0zYEnmn2QMg35AxjV8P9uc0TuAHpfA03shlD8adgRqSsUocYjeI2fa0P4
ZxggtLhPXrk3CHJqfKL1gwr/+fSFTS7MrXc9HnnmwCUaB3h+5tggMjEXeQxjsfES
mdgL/Y9ecQD+k+dxtuWoTFrqoOLE1Asa8Ve1dGo4hUSyD6MkPKnjj2wQKAditj+w
zXB1ETd0ZQEKX/mguZXff9596AJklDRsU+HTKplNJsyh/nkqpL05PKeaaQerSynf
5bgc2Z4U4eHenMvnh4QGq+Ce9xuS+8moSfU218GLilJz1jz2K5P9YxLG2KFl3Bhu
O99merBZbBxgGpism/C/Ae9GgtH20pvgKeN/rgy+80DbowF5e+m+9qH/DXoKArIu
+u1LYHM4dT02VHONy2y31RS8maWebsm6tWQ4ciit2vRg2dukzzDmQQt/Wj6L2pal
4o24cp6CsIU/kifb/gEYYE5id4mbr1u580jXFvMeTrWRMvRp1o6uxFaaV4GtY1OG
VTCuQuuuEXysA8I0+SYpVnAyM6zoq/mJkZGhl/doRgMdn7RA5XEJHrxsE5z8PYTE
vl/kcBsLKuO6EKxJ8TAt
=Ctku
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170408092340</emailId><senderName>Razvan Dragomirescu</senderName><senderEmail>razvan.dragomirescu@veri.fi</senderEmail><timestampReceived>2017-04-08 09:23:40-0400</timestampReceived><subject>[tor-dev] minimizing traffic for IoT Tor node over 3G/LTE</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I am working on a project to create very small Tor nodes on embedded
devices connected over LTE or 3G. I have it working fine with OpenWRT and
just 128MB of RAM, but the main issue is now the amount of data needed to
download the consensus. The consensus files appear to be around 2.3MB at
the moment and I think the default is to re-download every 3 hours, so
that's 18.4MB/day or 552MB/month. Is there any way to reduce this while
still maintaining good citizenship on the Tor network? Are there any
recommended options for low-bandwidth nodes?

Thank you,
Razvan

--
Razvan Dragomirescu
Chief Technology Officer
Cayenne Graphics SRL

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am working on a project to create very \
small Tor nodes on embedded devices connected over LTE or 3G. I have it working fine \
with OpenWRT and just 128MB of RAM, but the main issue is now the amount of data \
needed to download the consensus. The consensus files appear to be around 2.3MB at \
the moment and I think the default is to re-download every 3 hours, so that's \
18.4MB/day or 552MB/month. Is there any way to reduce this while still maintaining \
good citizenship on the Tor network? Are there any recommended options for \
low-bandwidth nodes?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank \
you,&lt;/div&gt;&lt;div&gt;Razvan&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--&lt;/div&gt;&lt;div&gt;Razvan \
Dragomirescu&lt;/div&gt;&lt;div&gt;Chief Technology Officer&lt;/div&gt;&lt;div&gt;Cayenne Graphics \
SRL&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330164118</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-03-30 16:41:18-0400</timestampReceived><subject>[tor-dev] Comments on proposal 279 (Name API)</subject><body>

Hi !  I'll make some comments here on the draft onion naming API at

https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt

(Some of  these are probably things you already meant, or already said
elsewhere.)



Section 2.1 and elsewhere:

I suggest that we require all address suffixes to end with .onion;
other TLDs are not reserved like .onion is, and maybe we shouldn't
squat any we haven't squatted already.   I think we might also want to
have all output addresses end with .onion too.

I suggest  also that we might want to reserve part of the namespace
for standardized namespaces and some for experimental or local ones.
Like, if we standardize on namecoin that could be .bit.onion, but if
we don't, it could be .bit.x.onion.

I finally suggest that we distinguish names that are supposed to be
global from ones that aren't.

Section 2.3:

How about we require that the suffixes be distinct?  If we do that, we
can drop this "priority" business and we can make the system's
behavior much easier to understand and explain.

Let's require that the TLDs actually begin with a dot.  (That is, I
think that ".foo.onion" can include "bar.foo.onion", but I don't like
the idea of "foo.onion" including "barfoo.onion".)


Section 2.3.1:

Does the algorithm apply recursively?  That is, can more then one
plugin rewrite the same address, or can one plugin rewrite its own
output?

(I would suggest "no".)

I think there should be a way for a plugin to say "This address
definitely does not exist" and stop resolution.  Otherwise no plugin
can be authoritative over a TLD.

Section 2.5.1:

Is the algorithm allowed to produce non-onion addresses?  Should it be?

Must query IDs be unique?  Over what scope must they be unique? Who
enforces that?

May query IDs be negative?  Can they be arbitrarily large?

I think result should indeed be optional on failure.

Section 2.5.1 and 2.5.2:

We should specify what exactly clients and plugins will do if they
receive an unrecognized message, or a malformed message.

Section 2.5.3.

See security notes on caching below; client-side caching can lead to
undesirable results.

As noted above, I agree with requiring all result addresses to be .onion.

Section 3.1:

I prefer the "put everything under .onion" option.   I also think that
we should require that the second-level domain be 10 characters or
less, to avoid confusion with existing onion addresses.



General questions:

I know we've done stdout/stdin for communication before, but I wonder
if we should consider how well it's worked for us.  The portability on
Windows can be kind of hard.

Two alternatives are TCP and named pipes.

Another alternative might be just using the DNS protocol and asking
for some kind of "ONION_CNAME" record.  (DNS is ugly, but at least
it's nice and standard.)


Security notes:

I'd like to know what the browser people think about the risks here of
(eg) probing to see whether the user has certain extensions installed
or names mapped.  Maybe .hosts.onion should only be allowed in the
address bar, not in HREF attributes et al?

We might want to think about cache-related timing attacks here.
Perhaps we should have a "no caching" rule.

We should probably add a security notes section for how to write
plugins that aren't dangerous: a bad plugin potentially breaks user
anonymity.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170409163302</emailId><senderName>Jayati Dev</senderName><senderEmail>devjayati@outlook.com</senderEmail><timestampReceived>2017-04-09 16:33:02-0400</timestampReceived><subject>Re: [tor-dev] Feedback Extension for Tor Browser</subject><body>

Dear Mentors,

Is the project 'Feedback Extension for Tor Browser' still a part of GSoC 2017? I have \
already submitted a proposal and would like to work on it. Please help.

Regards,
Jayati Dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403184119</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-04-03 18:41:19-0400</timestampReceived><subject>[tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

Hi!

As you may know, the Tor control port assumes that if you can
authenticate to it, you are completely trusted with respect to the Tor
instance you have authenticated to.  But there are a few programs and
tools that filter access to the Tor control port, in an attempt to
provide more restricted access.

When I've been asked to think about including such a feature in Tor in
the past, I've pointed out that while filtering commands is fairly
easy, defining a safe subset of the Tor control protocol is not.  The
problem is that many subsets of the control port protocol are
sufficient for a hostile application to deanonymize users in
surprising ways.

But I could be wrong!  Maybe there are subsets that are safer than others.

Let me try to illustrate. I'll be looking at a few filter sets for example.
=====
Filters from https://github.com/subgraph/roflcoptor/filters :

1. gnome-shell.json

This filter allows "SIGNAL NEWNYM", which can potentially be used to
deanonymize a user who is on a single site for a long time by causing
that user to rebuild new circuits with a given timing pattern.

2. onioncircuits.json

Allows "GETINFO circuit-status" and "GETINFO stream-status", which
expose to the application a complete list of where the user is
visiting and how they are getting there.

3. onionshare-gui.json

Allows "SETEVENTS HS_DESC", which is exposes to the application every
hidden service which the user is visiting.

4. ricochet.json

Allows "SETEVENTS HS_DESC", for which see "onionshare-gui" above.

5. tbb.json

Allows "SETEVENTS STREAM" and "GETINFO circuit-status", for which see
"onioncircuits" above.

=====
Filters from https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/etc/tor-controlport-filter.d
 :

1. onioncircuits.yml

See onioncircuits.json above; it allows the same GETINFO stuff.

2. onionshare.yml

As above, appears to allow HS_DESC events.  It allows "GETINFO
onions/current", which can expose a list of every onion service
locally hosted, even those not launched through onionshare.

3. tor-browser.yml

As "tbb.json" above.

4. tor-launcher.yml

Allows setconf of bridges, which allows the app to pick a hostile
bridge on purpose.  Similar issues with Socks*Proxy.  The app can also
use ReachableAddresses to restrict guards on the .

Allows SAVECONF, which lets the application make the above changes
permanent (for as long as the torrc file is persisted)
=====

So above, I see a few common patterns:
  * Many restrictive filters still let the application learn enough
about the user's behavior to deanonymize them.  If the threat model is
intended to resist a hostile application, then that application can't
be allowed to communicate with the outside world, even over Tor.

  * Many restrictive filters block SETCONF and SAVECONF.  These two
changes together should be enough to make sure that a hostile
application can only deanonymize _current_ traffic, not future Tor
traffic. Is that the threat model?  It's coherent, at least.

  * Some applications that care about their own onion services
inadvertantly find themselves informed about everyone else's onion
services.  I wonder if there's a way around that?

  * The NEWNYM-based side-channel above is a little scary.


And where do we go forward from here?

The filters above seem to have been created by granting the
applications only the commands that they actually need, and by
filtering all the other commands.  But if we'd like filters that
actually provide some security against hostile applications using the
control port, we'll need to take a different tactic: we'll need to
define the threat models that we're trying to work within, and see
what we can safely expose under those models.

Here are a few _possible_ models we could think about, but I'd like to
hear from app developers and filter authors and distributors more
about what they think:

 A. Completely trusted controller.  (What we have now)

 B. Controller is untrusted, but is blocked from exfiltrating information.
    B.1. Controller can't connect to the network at all.
    B.2. Controller can't connect to the network except over tor.

 C. Controller is trusted wrt all current private information, but
future private information must remain secure.

 D. Controller is trusted wrt a fraction of the requests that the
clients are handling. (For example, all requests going over a single
SOCKSPort, or all ADD_ONION requests that it makes itself.)

 E.  Your thoughts here....?




signing-off-before-this-turns-into-a-capabilities-based-system,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410001928</emailId><senderName>Mike Guidry</senderName><senderEmail>mike@mikeguidry.net</senderEmail><timestampReceived>2017-04-10 00:19:28-0400</timestampReceived><subject>[tor-dev] Tracing TCP Connections online..</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

Here is a document I've wrote regarding a concept to trace connections even
through TOR.  If you have any questions feel free to respond, and I'll
attempt to explain.  I have also considered a way to mitigate this
situation being allowing TOR to be traced by using 'Transactional
Requests.'  I'll proceed to write it up, and post soon.

I have released some other short papers as well.  It contains several files
regarding a few vulnerabilities, and a couple concepts regarding things
like quantum resistant cryptography, etc..

URL: https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ

Feel free to e-mail me directly..

Thanks,
Mike Guidry

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a document I've wrote regarding \
a concept to trace connections even through TOR.   If you have any questions feel \
free to respond, and I'll attempt to explain.   I have also considered a way to \
mitigate this situation being allowing TOR to be traced by using 'Transactional \
Requests.'   I'll proceed to write it up, and post \
soon.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have released some other short papers as well.   \
&lt;span style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;It \
contains several files regarding a few vulnerabilities, and a couple concepts \
regarding things like quantum resistant cryptography, etc..&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;URL: \
&lt;a href="https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ"&gt;https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;Feel \
free to e-mail me directly..&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;Thanks,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(51,51,51);font-family:source_sans_proregular,arial;font-size:13px"&gt;Mike \
Guidry&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;


["tcp_tracing_internet.pdf" (application/pdf)]
[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410151713</emailId><senderName>Mike Guidry</senderName><senderEmail>mike@mikeguidry.net</senderEmail><timestampReceived>2017-04-10 15:17:13-0400</timestampReceived><subject>Re: [tor-dev] Contents of tor-dev digest...</subject><body>

[Attachment #2 (multipart/alternative)]


I am not trolling you.  I attached a PDF which explains how to trace TOR
connections over the internet.  It is not a joke.  I have some other
vulnerabilities at that URL I am releasing.

I'll include here:

Michael Guidry March 15, 2017

Tracing connections online from the virtual landscape to the physical world

Hacking is the intrusion of a computer by an unwanted guest, and is usually
used to express gaining access to corporate, or government networks. It
requires either installing using malware, phishing, or directly connecting
to machines and attacking their software with exploits. It is currently
impossible to accurately trace hackers online unless they use the same
software, and techniques for all their targets. It has become a major
problem within the last decade due to globalization, and corporate networks
directly connected to the Internet.

Tracing Transmission Control Protocol (TCP) connections across the Internet
is inaccurate due to how routing is performed across global backbones. The
global routing table is modified constantly with nodes, and routes being
adjusted for optimization, or quality of service needs. TCP is the most
used protocol therefore it is the only protocol which really matters to
attempt to trace. User Datagram Protocol (UDP) is state less therefore less
reliable for tracking, however has the same vulnerability. UDP is usually
used by hackers for exfiltration, or remote control after other actions
have been performed.

It is currently impossible to track connections over the Internet
accurately. Several cases relate to The Onion Router (TOR) sites aka "Dark
Web," which were somehow uncovered using private technologies. Technologies
used for those cases do not work properly over regular hacking via proxies
online. Its an issue for the landscape of political hacking worldwide which
has been increasing annually across the globe.

China, for example, has been having a lot of blame lately due to Internet
Protocol (IP) addresses assigned within its borders being used in massive
amounts of attacks. Some of these attacks have been supposedly verified,
however it is impossible for China to have performed them all. Proxy
servers being used in chains may just be victims themselves. The problem
arises due to possible evidence planting being similar to proxying through
their others networks, or borders. It is completely different comparing
cyber war to traditional conflicts due to evidence being traceable, and
soldiers physical evidence being easily recovered.

Hacking back is a concept any government, or corporation is now detailing
within their playbook to understand how the liabilities may affect them. It
is the terminology used to attack the source of an intrusion by means of
hacking itself. Repercussions of hacking a country due to incorrectly
assuming an attack was originating there is highly possible. Cyber war
policies exists for a lot of nations, and it may easily escalate their
attention on whom they believe is performing the attacks. The same happens
with ‘proxy wars' currently within the middle east, etc. Proxy wars
traditionally will have global evidence allowing verification of weapon
deliveries, or monetary exchanges to determine the origin of funding.
Soldiers training methods, and other strategies may be impossible to cloak.
It is generally accepted once verified, and escalation is directed towards
the proper perpetrator.

Internet Service Providers (ISP) have the ability to perform various tasks
internally to determine the pathways through their networks which would
reflect lateral hacking movements. Connections leaving a single network
that enter the realm of dynamic routing via Border Gateway Protocol (BGP)
become a nightmare. The percentage of accuracy decreases

exponentially as each separate network is used to route the connection to
its destination. It becomes nearly impossible to trace after just a few
gateways at least publicly, or academically.

Unorthodox methods are required to allow tracing of connections under these
circumstances. Distributed Denial of Service (DDoS) is a solution that
allows you to turn the internet's own packet distribution system into a
tracking mechanism. Most people do not consider performing DDoS attacks for
positive reasons. DDoS may have been used by targets to "quarantine" their
hacking source temporarily from the Internet. This strategy is beyond the
scope of this technique, and is literally only a bandaid for a single
attack originating from possibly just a proxy.

DDoS is also illegal in most nations which have advanced their cyber crime
laws. The fact that this technique requires many computers performing
attacks strategically placed across the globe also ensures that they will
be performed from countries where these laws are being enforced. The attack
requires attacking all networks that you wish to verify against therefore
you are immediately breaking laws on the destination side of most of the
world simultaneously. It should not be used lightly, or regularly without
cause and understanding.

DDoS attacks transmit more data to a destination than a that network can
handle which forces it to stop responding in a timely fashion. The latency
is so high that the TCP timeouts are reached, and connections break. New
connections are also impossible during these attacks. It has only had
negative effects since it began being used globally regularly. This
technique could be considered a reverse DDoS.

The approach is to attack the entire world in a very strategically timed
manner using worldwide machines. Each separate DDoS attack using machines
worldwide would use different synchronization, and timing information which
would allow embedding information directly into the latency it causes on
those networks. The purpose is to compare that latency with the hack taking
place to verify its source location. If the attack disrupts networks your
attempting to verify against for milliseconds up to a few seconds then you
can perform several of these sequentially to embed information in this
timing itself. DDoS then becomes a positive useful solution even though
technically illegal to a currently difficult problem.

You wouldn't necessarily have to attack the entire world. Conceptually it
would be better to use databases of networks wishing to verify against.
Residential, and commercial IP delegations throughout most nations would
cover a large portion. Government hacking groups have their IPs leaked
often as well. It is possible to just perform the attacks on these
particular sets of IP addresses rather than the world as a whole. It is
also equally possible to perform the attacks on entire ISPs, and countries
to quickly determine although this would not be accurate due to possible
proxies in between being within that country.

If the technique is used on a major ISP network rather than a gateway going
into an office then it is possible that a proxy exists within their network
which would read off as a false positive. Accuracy relies on the networks
your verifying against to be actual end user machines which would have
human attackers. If you were to attack a network, or router of a network
which has an office then it is highly likely they are going to notice other
hackers using their network to hack externally on scales which would
involve this type of solution. If you were to attack an entire country then
you are going to have a problem of not recognizing from timing alone
whether or not a proxy (of possibly several) just exist in that country. It
is imperative to understand this, and always attempt to get as close to the
networks in question being verified.

Original message:

Are you trolling us? I don't get it!


On Sun, Apr 09, 2017 at 08:19:28PM -0400, Mike Guidry wrote:
&gt; Hello,
&gt;
&gt; Here is a document I've wrote regarding a concept to trace connections
even
&gt; through TOR.  If you have any questions feel free to respond, and I'll
&gt; attempt to explain.  I have also considered a way to mitigate this
&gt; situation being allowing TOR to be traced by using 'Transactional
&gt; Requests.'  I'll proceed to write it up, and post soon.
&gt;
&gt; I have released some other short papers as well.  It contains several
files
&gt; regarding a few vulnerabilities, and a couple concepts regarding things
&gt; like quantum resistant cryptography, etc..
&gt;
&gt; URL: https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ
&gt;
&gt; Feel free to e-mail me directly..
&gt;
&gt; Thanks,
&gt; Mike Guidry

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;I am not trolling you.   I attached a PDF which explains how to \
trace TOR connections over the internet.   It is not a joke.   I have some other \
vulnerabilities at that URL I am releasing.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'll include \
here:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  
	
	
		&lt;div class="gmail-page" title="Page 1"&gt;
			&lt;div class="gmail-section"&gt;
				&lt;div class="gmail-layoutArea"&gt;
					&lt;div class="gmail-column"&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Michael Guidry
March 15, 2017
&lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Tracing connections \
online from the virtual landscape to the physical world &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Hacking is the intrusion \
of a computer by an unwanted guest, and is usually used to express gaining access to \
corporate, or government networks. It requires either installing using malware, \
phishing, or directly connecting to machines and attacking their software with \
exploits. It is currently impossible to accurately trace hackers online unless they \
use the same software, and techniques for all their targets. It has become a major \
problem within the last decade due to globalization, and corporate networks directly \
connected to the Internet. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Tracing Transmission \
Control Protocol (TCP) connections across the Internet is inaccurate due to how \
routing is performed across global backbones. The global routing table is modified \
constantly with nodes, and routes being adjusted for optimization, or quality of \
service needs. TCP is the most used protocol therefore it is the only protocol which \
really matters to attempt to trace. User Datagram Protocol (UDP) is state less \
therefore less reliable for tracking, however has the same vulnerability. UDP is \
usually used by hackers for exfiltration, or remote control after other actions have \
been performed. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;It is currently \
impossible to track connections over the Internet accurately. Several cases relate to \
The Onion Router (TOR) sites aka "Dark Web," which were somehow uncovered using \
private technologies. Technologies used for those cases do not work properly over \
regular hacking via proxies online. Its an issue for the landscape of political \
hacking worldwide which has been increasing annually across the globe.
&lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;China, for example, has \
been having a lot of blame lately due to Internet Protocol (IP) addresses assigned \
within its borders being used in massive amounts of attacks. Some of these attacks \
have been supposedly verified, however it is impossible for China to have performed \
them all. Proxy servers being used in chains may just be victims themselves. The \
problem arises due to possible evidence planting being similar to proxying through \
their others networks, or borders. It is completely different comparing cyber war to \
traditional conflicts due to evidence being traceable, and soldiers physical evidence \
being easily recovered. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Hacking back is a concept \
any government, or corporation is now detailing within their playbook to understand \
how the liabilities may affect them. It is the terminology used to attack the source \
of an intrusion by means of hacking itself. Repercussions of hacking a country due to \
incorrectly assuming an attack was originating there is highly possible. Cyber war \
policies exists for a lot of nations, and it may easily escalate their attention on \
whom they believe is performing the attacks. The same happens with ‘proxy wars' \
currently within the middle east, etc. Proxy wars traditionally will have global \
evidence allowing verification of weapon deliveries, or monetary exchanges to \
determine the origin of funding. Soldiers training methods, and other strategies may \
be impossible to cloak. It is generally accepted once verified, and escalation is \
directed towards the proper perpetrator. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Internet Service \
Providers (ISP) have the ability to perform various tasks internally to determine the \
pathways through their networks which would reflect lateral hacking movements. \
Connections leaving a single network that enter the realm of dynamic routing via \
Border Gateway Protocol (BGP) become a nightmare. The percentage of accuracy \
decreases &lt;/span&gt;&lt;/p&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class="gmail-page" title="Page 2"&gt;
			&lt;div class="gmail-section"&gt;
				&lt;div class="gmail-layoutArea"&gt;
					&lt;div class="gmail-column"&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;exponentially as each \
separate network is used to route the connection to its destination. It becomes \
nearly impossible to trace after just a few gateways at least publicly, or \
academically. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;Unorthodox methods are \
required to allow tracing of connections under these circumstances. Distributed \
Denial of Service (DDoS) is a solution that allows you to turn the internet's own \
packet distribution system into a tracking mechanism. Most people do not consider \
performing DDoS attacks for positive reasons. DDoS may have been used by targets to \
"quarantine" their hacking source temporarily from the Internet. This strategy is \
beyond the scope of this technique, and is literally only a bandaid for a single \
attack originating from possibly just a proxy. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;DDoS is also illegal in \
most nations which have advanced their cyber crime laws. The fact that this technique \
requires many computers performing attacks strategically placed across the globe also \
ensures that they will be performed from countries where these laws are being \
enforced. The attack requires attacking all networks that you wish to verify against \
therefore you are immediately breaking laws on the destination side of most of the \
world simultaneously. It should not be used lightly, or regularly without cause and \
understanding. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;DDoS attacks transmit \
more data to a destination than a that network can handle which forces it to stop \
responding in a timely fashion. The latency is so high that the TCP timeouts are \
reached, and connections break. New connections are also impossible during these \
attacks. It has only had negative effects since it began being used globally \
regularly. This technique could be considered a reverse DDoS.
&lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;The approach is to attack \
the entire world in a very strategically timed manner using worldwide machines. Each \
separate DDoS attack using machines worldwide would use different synchronization, \
and timing information which would allow embedding information directly into the \
latency it causes on those networks. The purpose is to compare that latency with the \
hack taking place to verify its source location. If the attack disrupts networks your \
attempting to verify against for milliseconds up to a few seconds then you can \
perform several of these sequentially to embed information in this timing itself. \
DDoS then becomes a positive useful solution even though technically illegal to a \
currently difficult problem. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;You wouldn't necessarily \
have to attack the entire world. Conceptually it would be better to use databases of \
networks wishing to verify against. Residential, and commercial IP delegations \
throughout most nations would cover a large portion. Government hacking groups have \
their IPs leaked often as well. It is possible to just perform the attacks on these \
particular sets of IP addresses rather than the world as a whole. It is also equally \
possible to perform the attacks on entire ISPs, and countries to quickly determine \
although this would not be accurate due to possible proxies in between being within \
that country. &lt;/span&gt;&lt;/p&gt;
						&lt;p&gt;&lt;span style="font-size:11pt;font-family:helvetica"&gt;If the technique is used \
on a major ISP network rather than a gateway going into an office then it is possible \
that a proxy exists within their network which would read off as a false positive. \
Accuracy relies on the networks your verifying against to be actual end user machines \
which would have human attackers. If you were to attack a network, or router of a \
network which has an office then it is highly likely they are going to notice other \
hackers using their network to hack externally on scales which would involve this \
type of solution. If you were to attack an entire country then you are going to have \
a problem of not recognizing from timing alone whether or not a proxy (of possibly \
several) just exist in that country. It is imperative to understand this, and always \
attempt to get as close to the networks in question being verified.  &lt;/span&gt;&lt;/p&gt;  \
&lt;/div&gt;  &lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Original message:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Are you \
trolling us? I don't get it!&lt;br&gt;&lt;br&gt;&lt;br&gt;On Sun, Apr 09, 2017 at 08:19:28PM -0400, \
Mike Guidry wrote:&lt;br&gt;&gt; Hello,&lt;br&gt;&gt;&lt;br&gt;&gt; Here is a document I've wrote \
regarding a concept to trace connections even&lt;br&gt;&gt; through TOR.   If you have any \
questions feel free to respond, and I'll&lt;br&gt;&gt; attempt to explain.   I have \
also considered a way to mitigate this&lt;br&gt;&gt; situation being allowing TOR to be \
traced by using 'Transactional&lt;br&gt;&gt; Requests.'   I'll proceed to write \
it up, and post soon.&lt;br&gt;&gt;&lt;br&gt;&gt; I have released some other short papers as \
well.   It contains several files&lt;br&gt;&gt; regarding a few vulnerabilities, and a \
couple concepts regarding things&lt;br&gt;&gt; like quantum resistant cryptography, \
etc..&lt;br&gt;&gt;&lt;br&gt;&gt; URL:  &lt;a \
href="https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ" rel="noreferrer" \
target="_blank"&gt;https://mega.nz/#F!QnZRXKyS!&lt;wbr&gt;oluyILlMPpyJjPS57w7axQ&lt;/a&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; \
Feel free to e-mail me directly..&lt;br&gt;&gt;&lt;br&gt;&gt; Thanks,&lt;br&gt;&gt; Mike Guidry&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170406122717</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-06 12:27:17-0400</timestampReceived><subject>[tor-dev] Action items wrt prop224 onion address encoding (was Re: Proposition: Applying an AONT to </subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Wed, Apr 05, 2017 at 10:02:07AM -0400, David Goulet wrote:
&gt;&gt; Another thing about this I just thought of. This AONT construction seems wise
&gt;&gt; to use. But it's still not entirely clear to me why we need a 1bit version
&gt;&gt; field. Taking this:
&gt;&gt; 
&gt;&gt;     base64( AONT( pubkey || 0x0000 ) || version)
&gt;&gt; 
&gt;&gt; If the version is 1 byte, then only the end of the address can be mangled with
&gt;&gt; and if it is, the tor client won't be able to fetch the descriptor because of
&gt;&gt; how the URL is constructed (correct version number is needed).
&gt;&gt; 
&gt;&gt; So I really don't see the phishing attack here being successful at all...?
&gt;&gt; 
&gt;&gt; Can you enlighten what attack we are trying to avoid here that we require a
&gt;&gt; 1bit version field?
&gt;
&gt; I believe the danger Alec was wanting to avoid was that someone (not the
&gt; onion service owner) could take an existing onion address, bump the
&gt; version number (which wouldn't change the vanity beginning of the
&gt; address), and upload the very same descriptor to the resulting blinded
&gt; address (under the new version number).  Then the modified address would
&gt; work just like the original.
&gt;
&gt; As mentioned elsewhere in the thread, this is solved if that descriptor
&gt; contains (under the signature by the "master" onion key) the actual
&gt; onion address you were expected to use to get there.  Does it?  If so,
&gt; I think we don't have to worry about this problem at all.
&gt;

Hello people,

the AONT thread has grown to an immense size and includes all sorts of
discussions, so I will split it into two smaller threads with just
action items so that we move this forward ASAP (as this interacts with
our current implementation efforts).

From skimming the thread, this seems like the general discussion flow:

- "Let's do AONT so that no one can tweak the onion address while
  keeping the same blinded pubkey so that people can't create multiple
  onion addresses that point to the same key and look almost the same"

- "Hm, but there are no bits to tweak apart from the version field"

- "But maybe v4-&gt;v3 downgrade attacks are possible using the version
  field, so let's include the whole onionaddress (including version)
  into the blinded key derivation"

- But then maybe in 2020 an attacker is able to replay a v4 descriptor
  into an HSDir as a v3 descriptor, and then do a downgrade attack by
  persuading a victim to fetch the v3 descriptor (see Ian/Alec latest mails)

And I think then we ended up with:

"Then let's include the canonical onionaddress (including version) into
the descriptor so that clients can verify that they used the
onionaddress that the onionservice was intending for them to use"

So I guess the current suggested plan is to add an extra descriptor
field with the onionaddress (or its hash) into the _encrypted parts_ of
the descriptor so that clients can do this extra verification to defend
against downgrade attacks.

I think this seems like a reasonable defence here, and more safe +
engineering-friendly than the AONT stuff (see David's email). We should
just make sure that this plan does not interact badly with things like
onionbalance and future name systems.

Do you think this makes sense?  If yes, I will write a spec patch in the
next few days.

And I think this sums up the discussion wrt onion address encoding. I'm
going to start a new thread about the ed25519-related suggestions that
were thrown into this thread.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170412202522</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-12 20:25:22-0400</timestampReceived><subject>[tor-dev] txtorcon versioning</subject><body>


I will soon release the next version of txtorcon with a ton of cool new
features. This will be called 0.19.0. More details: 

   http://timaq4ygg2iegci7.onion/releases.html

Going forward, versioning will switch to a "CalVer.org" variant. At one
point, I thought of breaking a few now-regrettable APIs.

However, I will not do this.

The next version after 0.19.0 will be 17.x.y
Changes in any existing APIs will be done by first introducing the new
thing, deprecating the old thing and eventually removing the old
thing. The new documentation's "programming guide" includes some notes
on API stability. I have not to date broken/changed any existing
API. Also at this point nothing is deprecated (but there are "preferred"
APIs).

The onion services APIs *will* change for the 17.x release.

New code should follow the recommendations in the programming
guide. Existing code will continue to work for the forseeable future.

thanks,
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170420154646</emailId><senderName></senderName><senderEmail>relayoperator</senderEmail><timestampReceived>2017-04-20 15:46:46-0400</timestampReceived><subject>Re: [tor-dev] maatuska&amp;#39; s bwscanner down since 2017-04-14 -&amp;gt; significant drop in relay traffi</subject><body>

&gt; On Thu, Apr 20, 2017 at 10:54:21AM -0000, relayoperator@openmailboxbeta.com wrote:
&gt; &gt; Hi Tom!
&gt; &gt; since maatuska's bwscanner is down [1] I see a significant drop of traffic on \
&gt; &gt; many of my relays, and I believe this is related. Do you have any update to [2] \
&gt; &gt; on when maatuska will report bwscan results again? thanks,
&gt; &gt; a concerned relayoperator
&gt; 
&gt; I am also seeing a strange sudden drop in usage:
&gt; 
&gt; https://atlas.torproject.org/#details/BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E
&gt; 
&gt; What's going on?

In your case the traffic dropped but the consensus weight and exit probability is \
going way up.  This is also strange but I guess unrelated to maatuska.

Why is David Goulet's munin showing 8k measured lines for maatuska when there are 0?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170420105421</emailId><senderName></senderName><senderEmail>relayoperator</senderEmail><timestampReceived>2017-04-20 10:54:21-0400</timestampReceived><subject>[tor-dev] maatuska's bwscanner down since 2017-04-14 -&gt; significant drop in relay traffic</subject><body>

Hi Tom!
since maatuska's bwscanner is down [1] I see a significant drop of traffic on many of \
my relays, and I believe this is related. Do you have any update to [2] on when \
maatuska will report bwscan results again? thanks,
a concerned relayoperator



[1] https://lists.torproject.org/pipermail/tor-consensus-health/2017-April/007837.html
  https://consensus-health.torproject.org/graphs.html#bwauthgraphs
[2] https://lists.torproject.org/pipermail/tor-consensus-health/2017-April/007845.html
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170423204008</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-23 20:40:08-0400</timestampReceived><subject>[tor-dev] Experimental Namecoin naming for Tor</subject><body>

Hi,

I've pushed some experimental code for using Namecoin naming in Tor.

The code is at https://github.com/JeremyRand/OnioNS-client , you want
the "namecoin" branch.

Rough instructions:

1. Install Namecoin Core and let it fully download the blockchain.  (SPV
support is in the works.)

2. Enable JSON-RPC with user/password authentication in Namecoin Core.
(The procedure is identical as in Bitcoin Core.)

3. Set your Namecoin Core JSON-RPC login info in the init_namecoind
function of src/assets/onions-stem.py.

4. Start Tor Browser Bundle.

5. Run src/assets/onions-stem.py.

6. The first time you run it, it will instruct you to add a line to one
of the Tor config files; do this.  Specifically, it will ask you to add
the line "__LeaveStreamsUnattached 1" to torrc-defaults.

7. Start Tor Browser Bundle again.

8. Run src/assets/onions-stem.py again.

9. Try opening a Namecoin website in Tor Browser.

Example websites that I've verified to work include:

http://duckduckgo-onion.bit.onion
http://bitcoinpl.bit
http://federalistpapers.bit.onion
http://botball.bit (gives a Dreamhost error)

The .bit.onion sites should also work as plain .bit.

Semantically, .bit.onion means that it will always resolve to a .onion
address (meaning that .bit.onion names are encrypted and authenticated
regardless of whether TLS is used); .bit means that it will resolve to
any of .onion, IPv6, IPv4, or CNAME (prioritized in that order), meaning
that .bit names are only encrypted and authenticated if TLS is used.
These semantics are open to revision later, as the Tor community evolves
its canonical naming semantics.

This is all proof of concept for now; some or all of this code will be
rewritten later (hopefully to use the pluggable naming API instead of
the control port).  It will probably not work with Whonix/Tails/Subgraph
due to the control port filter.  It will definitely make your Tor
Browser instance stand out, since most users can't resolve Namecoin
domain names.  And since it accesses the control port, it could
presumably do lots of horrible things to your Tor instance (and I make
no guarantees that it's properly sanitizing the input that's passed to
Tor's control port).

Huge thanks to Jesse for OnioNS (on which this code is based), and also
thanks to Nick for sharing helpful info on this mailing list.

Let me know how it works for you.

Cheers,
-- 
-Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170406123735</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-06 12:37:35-0400</timestampReceived><subject>[tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: Proposition: Apply</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Mon, Apr 03, 2017 at 04:40:52PM +0100, Alec Muffett wrote:
&gt;&gt; On 3 Apr 2017 3:48 p.m., "Ian Goldberg" &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt;&gt; 
&gt;&gt; The other thing to remember is that didn't we already say that
&gt;&gt; 
&gt;&gt; facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion
&gt;&gt; 
&gt;&gt; and
&gt;&gt; 
&gt;&gt; face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion
&gt;&gt; 
&gt;&gt; will mean the same thing?  So we're already past the "one (st)ring to
&gt;&gt; rule them all" point?
&gt;&gt; 
&gt;&gt; 
&gt;&gt; That's a great point, and I'm definitely interested and in favour of
&gt;&gt; readability.
&gt;&gt; 
&gt;&gt; How about this, though: I know that Tor doesn't want to be in the business
&gt;&gt; of site reputation, but what if (eg) Protonmail offers a Onion "Safe
&gt;&gt; Browsing" extension some day, of known-bad Onions for malware reasons?
&gt;
&gt; That's a quite good motivating example, thanks!
&gt;
&gt;&gt; There's quite a gulf between stripping hyphens from a candidate onion
&gt;&gt; address and doing strcmp(), versus either drilling into the candidate
&gt;&gt; address to compute the alternative forms to check against the blacklist, or
&gt;&gt; even requiring the blacklist to be 8x larger?
&gt;
&gt; Yes, that's true.  I'm definitely in favour of the "multiply by L (the
&gt; order of the group) and check that you get the identity element; error
&gt; with 'malformed address' if you don't" to get rid of the torsion point
&gt; problem.
&gt;

Hello again,

this is the second subthread of the AONT thread that grew too big for
its own good, and it's about ed25519.

The topic of this subthread is the above ed25519 verification of onion
addresses that Ian suggested a few times already.

So the idea is that before you use an onionaddress (as a client or
whatever), you should extract its ed25519 pubkey and multiply it by the
group order and make sure you get back the identity element to ensure
that there are no torsion components to the key.

I'm pretty weak on crypto so I have some questions about this defence:

- Why are we doing this? Are we doing this because if we allow torsion
  components in the keys, someone could basically create multiple
  equivalent keys for each legit ed25519 key, using the Z/8Z torsion
  scalar as the tweak?

  Or is the reason to defend against small subgroup attacks? I think
  not, because from my understanding these attacks mainly apply to DH
  protocols which is not what we are doing with onion addresses.

- Is this something that we should be doing for _any_ received ed25519
  ever, even in other parts of the protocol?

- Should we do this verification also for received x25519 (DH) keys? It
  seems like RFC7748 is instead suggesting we ensure that the DH output
  is not all-zeroes. Are these two defences equivalent for our purposes?

Thanks for the help :)

(Also, please let me know if there are any other action items from the
AONT thread that I missed.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170415204113</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-15 20:41:13-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: Proposition: A</subject><body>

On Thu, Apr 06, 2017 at 03:37:35PM +0300, George Kadianakis wrote:
&gt; Hello again,
&gt; 
&gt; this is the second subthread of the AONT thread that grew too big for
&gt; its own good, and it's about ed25519.
&gt; 
&gt; The topic of this subthread is the above ed25519 verification of onion
&gt; addresses that Ian suggested a few times already.
&gt; 
&gt; So the idea is that before you use an onionaddress (as a client or
&gt; whatever), you should extract its ed25519 pubkey and multiply it by the
&gt; group order and make sure you get back the identity element to ensure
&gt; that there are no torsion components to the key.

And also check that the key is not itself the identity element.

&gt; I'm pretty weak on crypto so I have some questions about this defence:
&gt; 
&gt; - Why are we doing this? Are we doing this because if we allow torsion
&gt;   components in the keys, someone could basically create multiple
&gt;   equivalent keys for each legit ed25519 key, using the Z/8Z torsion
&gt;   scalar as the tweak?

Yes, this one.  Also it would be good to be alerted if someone's
publishing malformed onion addresses for some reason.

&gt;   Or is the reason to defend against small subgroup attacks? I think
&gt;   not, because from my understanding these attacks mainly apply to DH
&gt;   protocols which is not what we are doing with onion addresses.

Correct.

&gt; - Is this something that we should be doing for _any_ received ed25519
&gt;   ever, even in other parts of the protocol?

Whenever you receive a value that is supposed to be in the EC group,
it's safest to either (a) check that it is, and fail if not, or (b)
perform the operation in a way that will behave well in either case.  If
you really have received an arbitrary 256-bit value from the Internet,
and you want it to be in the ed25519 group, you really should do the
"multiply by l" check, since not only might it have a torsion component
(addressable by other means such as TSR in the other thread), but it may
not be in the group at all, but rather in the "twist" group.
Multiplying by l will simultaneously check both issues.  But sometimes
being in the wrong group isn't terrible; see the next paragraph.

&gt; - Should we do this verification also for received x25519 (DH) keys? It
&gt;   seems like RFC7748 is instead suggesting we ensure that the DH output
&gt;   is not all-zeroes. Are these two defences equivalent for our purposes?

The x25519 DH operation automatically clears the torsion component,
since it insists your private key be a multiple of 8.  If someone
sends you a point on the twist instead of in the expected group, the DH
will fail (you won't end up with the same shared key as the other
party), but you will be saved from the small subgroup attack because of
that "8".  (That invariant of being a multiple of 8 is what you lose
during multiplicative blinding, and what TSR restores.)

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170424134744</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-24 13:47:44-0400</timestampReceived><subject>[tor-dev] Action items wrt ed25519 onion address verification in	prop224 (was Re: [tor-project] Netw</subject><body>

Ian Goldberg &lt;tor@cypherpunks.ca&gt; writes:

&gt; On Thu, Apr 20, 2017 at 03:40:58PM +0300, George Kadianakis wrote:
&gt; &gt; Hey Ian,
&gt; &gt; 
&gt; &gt; so the current problem with ed25519-donna is that when I'm doing the
&gt; &gt; above, I'm getting the following 32-byte key after ge25519_pack(). Here
&gt; &gt; it is hexed up:
&gt; &gt; 
&gt; &gt; 0x0100000000000000000000000000000000000000000000000000000000000000
&gt; &gt; 
&gt; &gt; I don't see any methods in ed25519-donna for checking a point or a
&gt; &gt; packed point to see if it's the point at infinity (identity element).
&gt; 
&gt; There actually is such a function, but it's buried in a weird place.
&gt; ge25519_is_neutral_vartime in ed25519-donna-batchverify.h does what you
&gt; want, but it's static, so you would need to copy it (and remove the line
&gt; involving batch_point_buffer).  Probably not worthwhile.
&gt; 
&gt; I can easily believe the representation of the identity (neutral)
&gt; element in ed25519 is the hex value above.  (And it is; see below.)
&gt; 
&gt; &gt; I've been assuming that the point at infinity would be an all-zeroes
&gt; &gt; 32-byte array, because that's what we are doing in curve25519, but I
&gt; &gt; actually have no idea how the array representation of ge25519_pack()
&gt; &gt; works. Here is our process for curve25519:
&gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/common/crypto_curve25519.c#n123
&gt; 
&gt; Curve25519 only outputs the x coordinate, which is indeed 0, so you get
&gt; the all-zero value.  ed25519 outputs the y coordinate (which is the
&gt; 255-bit value 0x000...0001 in little-endian format) and the single-bit
&gt; parity of the x coordinate (which is 0), so you do get the hex you give
&gt; above.  (The identity element is the point (0,1) in Edwards curves, not
&gt; actually the point at infinity.)
&gt; 
&gt; &gt; The above packed point is an all zeroes 32-byte string, apart from the
&gt; &gt; very first bit which is set. Could it be that the first bit is the
&gt; &gt; compressed sign of the 'x' coordinate or something, and that's actually
&gt; &gt; the point at infinity?
&gt; &gt; 
&gt; &gt; But then what's the right way to check for the point at infinity? Check
&gt; &gt; that everything is 0 apart from the first sign bit?
&gt; 
&gt; Yes, pack the point, and compare it to the above 32-byte value.
&gt; 
&gt; &gt; And after I figure this out, I need to do the same for the reference
&gt; &gt; implementation of ed25519, because as it seems Tor uses two simultaneous
&gt; &gt; implementations of ed25519:
&gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/ext/ed25519
&gt; 
&gt; Yes, hopefully that implementation packs points in the same way!
&gt; 
&gt; &gt; Thanks for the help Ian :) Very much appreciated!
&gt; 
&gt; No worries.
&gt; 

[CCing tor-dev since people might find it interesting]

Thanks for the advice Ian :)

With your help, I have now implemented the validation check. Check out
the ticket #22006 and the branch `bug22006` here:
    https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006&amp;id=628dd1adfdc4cbde449d6ec6808a9f6aa6f6f6c4


One last thing I'd like to do here is test our validation function
against a pubkey with torsion component to make sure that it gets
rejected. How would you go about generating such a pubkey?

I was thinking of using the CRT to find an integer a \in Z, s.t
   a == 0 (mod l) &amp;&amp; a == 1 (mod 8)
but then I didn't know how to go from that scalar with a torsion
component to an ed25519 point...

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170424143729</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-24 14:37:29-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: [tor-project] </subject><body>

On Mon, Apr 24, 2017 at 04:47:44PM +0300, George Kadianakis wrote:
&gt; Ian Goldberg &lt;tor@cypherpunks.ca&gt; writes:
&gt; 
&gt; &gt; On Thu, Apr 20, 2017 at 03:40:58PM +0300, George Kadianakis wrote:
&gt; &gt; &gt; Hey Ian,
&gt; &gt; &gt; 
&gt; &gt; &gt; so the current problem with ed25519-donna is that when I'm doing the
&gt; &gt; &gt; above, I'm getting the following 32-byte key after ge25519_pack(). Here
&gt; &gt; &gt; it is hexed up:
&gt; &gt; &gt; 
&gt; &gt; &gt; 0x0100000000000000000000000000000000000000000000000000000000000000
&gt; &gt; &gt; 
&gt; &gt; &gt; I don't see any methods in ed25519-donna for checking a point or a
&gt; &gt; &gt; packed point to see if it's the point at infinity (identity element).
&gt; &gt; 
&gt; &gt; There actually is such a function, but it's buried in a weird place.
&gt; &gt; ge25519_is_neutral_vartime in ed25519-donna-batchverify.h does what you
&gt; &gt; want, but it's static, so you would need to copy it (and remove the line
&gt; &gt; involving batch_point_buffer).  Probably not worthwhile.
&gt; &gt; 
&gt; &gt; I can easily believe the representation of the identity (neutral)
&gt; &gt; element in ed25519 is the hex value above.  (And it is; see below.)
&gt; &gt; 
&gt; &gt; &gt; I've been assuming that the point at infinity would be an all-zeroes
&gt; &gt; &gt; 32-byte array, because that's what we are doing in curve25519, but I
&gt; &gt; &gt; actually have no idea how the array representation of ge25519_pack()
&gt; &gt; &gt; works. Here is our process for curve25519:
&gt; &gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/common/crypto_curve25519.c#n123
&gt; &gt; 
&gt; &gt; Curve25519 only outputs the x coordinate, which is indeed 0, so you get
&gt; &gt; the all-zero value.  ed25519 outputs the y coordinate (which is the
&gt; &gt; 255-bit value 0x000...0001 in little-endian format) and the single-bit
&gt; &gt; parity of the x coordinate (which is 0), so you do get the hex you give
&gt; &gt; above.  (The identity element is the point (0,1) in Edwards curves, not
&gt; &gt; actually the point at infinity.)
&gt; &gt; 
&gt; &gt; &gt; The above packed point is an all zeroes 32-byte string, apart from the
&gt; &gt; &gt; very first bit which is set. Could it be that the first bit is the
&gt; &gt; &gt; compressed sign of the 'x' coordinate or something, and that's actually
&gt; &gt; &gt; the point at infinity?
&gt; &gt; &gt; 
&gt; &gt; &gt; But then what's the right way to check for the point at infinity? Check
&gt; &gt; &gt; that everything is 0 apart from the first sign bit?
&gt; &gt; 
&gt; &gt; Yes, pack the point, and compare it to the above 32-byte value.
&gt; &gt; 
&gt; &gt; &gt; And after I figure this out, I need to do the same for the reference
&gt; &gt; &gt; implementation of ed25519, because as it seems Tor uses two simultaneous
&gt; &gt; &gt; implementations of ed25519:
&gt; &gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/ext/ed25519
&gt; &gt; 
&gt; &gt; Yes, hopefully that implementation packs points in the same way!
&gt; &gt; 
&gt; &gt; &gt; Thanks for the help Ian :) Very much appreciated!
&gt; &gt; 
&gt; &gt; No worries.
&gt; &gt; 
&gt; 
&gt; [CCing tor-dev since people might find it interesting]
&gt; 
&gt; Thanks for the advice Ian :)
&gt; 
&gt; With your help, I have now implemented the validation check. Check out
&gt; the ticket #22006 and the branch `bug22006` here:
&gt; https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006&amp;id=628dd1adfdc4cbde449d6ec6808a9f6aa6f6f6c4
&gt; 

You should also check that the point it not *itself* the identity
element.

&gt; One last thing I'd like to do here is test our validation function
&gt; against a pubkey with torsion component to make sure that it gets
&gt; rejected. How would you go about generating such a pubkey?
&gt; 
&gt; I was thinking of using the CRT to find an integer a \in Z, s.t
&gt; a == 0 (mod l) &amp;&amp; a == 1 (mod 8)
&gt; but then I didn't know how to go from that scalar with a torsion
&gt; component to an ed25519 point...

It turns out the point whose packed representation is 32 bytes of 0x00
is a torsion point; it is the point (-1,0).

Indeed, these are the 7 pure torsion points in ed25519:

26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05
0000000000000000000000000000000000000000000000000000000000000000 =(-1,0)
c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a
ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f =(0,-1)
c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa
0000000000000000000000000000000000000000000000000000000000000080 =(1,0)
26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85

So just take any of the above points, and add it to a valid pubkey to
get an invalid pubkey.

You should probably also check points not on the curve at all, such as:

e19c65de75c68cf3b7643ea732ba9eb1a3d20d6d57ba223c2ece1df66feb5af0

If you generate a 32-byte string at random, about 1/2 the time it won't
be on the curve at all (that is, if P is the unpack of those 32 bytes,
8*l*P is *not* the identity), about 7/16 of the time it is on the curve,
but has a torsion component (8*l*P is the identity, but l*P is not), and
1/16 of the time it's a valid pubkey (l*P is the identity, but P is
not).

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170425123837</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-25 12:38:37-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: [tor-project] </subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Mon, Apr 24, 2017 at 04:47:44PM +0300, George Kadianakis wrote:
&gt; &gt; Ian Goldberg &lt;tor@cypherpunks.ca&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; On Thu, Apr 20, 2017 at 03:40:58PM +0300, George Kadianakis wrote:
&gt; &gt; &gt; &gt; Hey Ian,
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; so the current problem with ed25519-donna is that when I'm doing the
&gt; &gt; &gt; &gt; above, I'm getting the following 32-byte key after ge25519_pack(). Here
&gt; &gt; &gt; &gt; it is hexed up:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 0x0100000000000000000000000000000000000000000000000000000000000000
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I don't see any methods in ed25519-donna for checking a point or a
&gt; &gt; &gt; &gt; packed point to see if it's the point at infinity (identity element).
&gt; &gt; &gt; 
&gt; &gt; &gt; There actually is such a function, but it's buried in a weird place.
&gt; &gt; &gt; ge25519_is_neutral_vartime in ed25519-donna-batchverify.h does what you
&gt; &gt; &gt; want, but it's static, so you would need to copy it (and remove the line
&gt; &gt; &gt; involving batch_point_buffer).  Probably not worthwhile.
&gt; &gt; &gt; 
&gt; &gt; &gt; I can easily believe the representation of the identity (neutral)
&gt; &gt; &gt; element in ed25519 is the hex value above.  (And it is; see below.)
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I've been assuming that the point at infinity would be an all-zeroes
&gt; &gt; &gt; &gt; 32-byte array, because that's what we are doing in curve25519, but I
&gt; &gt; &gt; &gt; actually have no idea how the array representation of ge25519_pack()
&gt; &gt; &gt; &gt; works. Here is our process for curve25519:
&gt; &gt; &gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/common/crypto_curve25519.c#n123
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; Curve25519 only outputs the x coordinate, which is indeed 0, so you get
&gt; &gt; &gt; the all-zero value.  ed25519 outputs the y coordinate (which is the
&gt; &gt; &gt; 255-bit value 0x000...0001 in little-endian format) and the single-bit
&gt; &gt; &gt; parity of the x coordinate (which is 0), so you do get the hex you give
&gt; &gt; &gt; above.  (The identity element is the point (0,1) in Edwards curves, not
&gt; &gt; &gt; actually the point at infinity.)
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; The above packed point is an all zeroes 32-byte string, apart from the
&gt; &gt; &gt; &gt; very first bit which is set. Could it be that the first bit is the
&gt; &gt; &gt; &gt; compressed sign of the 'x' coordinate or something, and that's actually
&gt; &gt; &gt; &gt; the point at infinity?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; But then what's the right way to check for the point at infinity? Check
&gt; &gt; &gt; &gt; that everything is 0 apart from the first sign bit?
&gt; &gt; &gt; 
&gt; &gt; &gt; Yes, pack the point, and compare it to the above 32-byte value.
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; And after I figure this out, I need to do the same for the reference
&gt; &gt; &gt; &gt; implementation of ed25519, because as it seems Tor uses two simultaneous
&gt; &gt; &gt; &gt; implementations of ed25519:
&gt; &gt; &gt; &gt; https://gitweb.torproject.org/tor.git/tree/src/ext/ed25519
&gt; &gt; &gt; 
&gt; &gt; &gt; Yes, hopefully that implementation packs points in the same way!
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Thanks for the help Ian :) Very much appreciated!
&gt; &gt; &gt; 
&gt; &gt; &gt; No worries.
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; [CCing tor-dev since people might find it interesting]
&gt; &gt; 
&gt; &gt; Thanks for the advice Ian :)
&gt; &gt; 
&gt; &gt; With your help, I have now implemented the validation check. Check out
&gt; &gt; the ticket #22006 and the branch `bug22006` here:
&gt; &gt; https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006&amp;id=628dd1adfdc4cbde449d6ec6808a9f6aa6f6f6c4
&gt; &gt; 
&gt; 
&gt; You should also check that the point it not *itself* the identity
&gt; element.
&gt; 
&gt; &gt; One last thing I'd like to do here is test our validation function
&gt; &gt; against a pubkey with torsion component to make sure that it gets
&gt; &gt; rejected. How would you go about generating such a pubkey?
&gt; &gt; 
&gt; &gt; I was thinking of using the CRT to find an integer a \in Z, s.t
&gt; &gt; a == 0 (mod l) &amp;&amp; a == 1 (mod 8)
&gt; &gt; but then I didn't know how to go from that scalar with a torsion
&gt; &gt; component to an ed25519 point...
&gt; 
&gt; It turns out the point whose packed representation is 32 bytes of 0x00
&gt; is a torsion point; it is the point (-1,0).
&gt; 
&gt; Indeed, these are the 7 pure torsion points in ed25519:
&gt; 
&gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05
&gt; 0000000000000000000000000000000000000000000000000000000000000000 =(-1,0)
&gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a
&gt; ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f =(0,-1)
&gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa
&gt; 0000000000000000000000000000000000000000000000000000000000000080 =(1,0)
&gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85
&gt; 
&gt; So just take any of the above points, and add it to a valid pubkey to
&gt; get an invalid pubkey.
&gt; 
&gt; You should probably also check points not on the curve at all, such as:
&gt; 
&gt; e19c65de75c68cf3b7643ea732ba9eb1a3d20d6d57ba223c2ece1df66feb5af0
&gt; 
&gt; If you generate a 32-byte string at random, about 1/2 the time it won't
&gt; be on the curve at all (that is, if P is the unpack of those 32 bytes,
&gt; 8*l*P is *not* the identity), about 7/16 of the time it is on the curve,
&gt; but has a torsion component (8*l*P is the identity, but l*P is not), and
&gt; 1/16 of the time it's a valid pubkey (l*P is the identity, but P is
&gt; not).
&gt; 

Good stuff Ian.

I pushed a new branch `bug22006` that:
- Checks that the pubkey is not the identity element itself.
- Adds tests based on the points you listed above.

Check it out here:
         https://gitweb.torproject.org/user/asn/tor.git/log/?h=bug22006_v2

Another thing:

My understanding is that this is a special-case validation and it's
expensive, so I opted to not perform it everytime we generate a new
ed25519 keypair or when we receive one from the internet. So for
example, I'm not doing it when we extract the ed25519 signing pubkey
that signs the HS descriptor, since we don't care if there are
equivalent forms of that key.

So this validation function is currently unused, and I plan to only use it
on the prop224 client-side when a client handles received onion addresses.

Finally, how did you derive the list of points above? o.o

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170425132647</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-25 13:26:47-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: [tor-project] </subject><body>

On Tue, Apr 25, 2017 at 03:38:37PM +0300, George Kadianakis wrote:
&gt; &gt; It turns out the point whose packed representation is 32 bytes of 0x00
&gt; &gt; is a torsion point; it is the point (-1,0).
&gt; &gt;
&gt; &gt; Indeed, these are the 7 pure torsion points in ed25519:
&gt; &gt;
&gt; &gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05
&gt; &gt; 0000000000000000000000000000000000000000000000000000000000000000 =(-1,0)
&gt; &gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a
&gt; &gt; ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f =(0,-1)
&gt; &gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa
&gt; &gt; 0000000000000000000000000000000000000000000000000000000000000080 =(1,0)
&gt; &gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85
&gt; &gt;
&gt; &gt; So just take any of the above points, and add it to a valid pubkey to
&gt; &gt; get an invalid pubkey.
&gt; &gt;
&gt; &gt; You should probably also check points not on the curve at all, such as:
&gt; &gt;
&gt; &gt; e19c65de75c68cf3b7643ea732ba9eb1a3d20d6d57ba223c2ece1df66feb5af0
&gt; &gt;
&gt; &gt; If you generate a 32-byte string at random, about 1/2 the time it won't
&gt; &gt; be on the curve at all (that is, if P is the unpack of those 32 bytes,
&gt; &gt; 8*l*P is *not* the identity), about 7/16 of the time it is on the curve,
&gt; &gt; but has a torsion component (8*l*P is the identity, but l*P is not), and
&gt; &gt; 1/16 of the time it's a valid pubkey (l*P is the identity, but P is
&gt; &gt; not).
&gt; &gt;
&gt; 
&gt; Good stuff Ian.
&gt; 
&gt; I pushed a new branch `bug22006` that:
&gt; - Checks that the pubkey is not the identity element itself.
&gt; - Adds tests based on the points you listed above.
&gt; 
&gt; Check it out here:
&gt;          https://gitweb.torproject.org/user/asn/tor.git/log/?h=bug22006_v2

It looks to me as though you're only checking the pure torsion points
above.  You should *add* one of those points to a valid pubkey in order
to get a point to check.  For example, the points:

300ef2e64e588e1df55b48e4da0416ffb64cc85d5b00af6463d5cc6c2b1c185e
f43e3a046db8749164c6e69b193f1e942c7452e7d888736f40b98093d814d5e7
c9fff3af0471c28e33e98c2043e44f779d0427b1e37c521a6bddc011ed1869af

would be good additional tests (all should fail; they have order 8l, 4l,
2l respectively).

This one should pass:

4ba2e44760dff4c559ef3c38768c1c14a8a54740c782c8d70803e9d6e3ad8794

&gt; Another thing:
&gt; 
&gt; My understanding is that this is a special-case validation and it's
&gt; expensive,

It's a single scalar multiplication (and packing, I suppose).  I guess
"expensive" is relative; you might time it to see if the cost matters to
you.

&gt; so I opted to not perform it everytime we generate a new
&gt; ed25519 keypair or when we receive one from the internet. So for
&gt; example, I'm not doing it when we extract the ed25519 signing pubkey
&gt; that signs the HS descriptor, since we don't care if there are
&gt; equivalent forms of that key.

You indeed don't need to do it when you generate a key yourself in a
known-good way (unless you're paranoid about fault attacks, which I
don't think you are).  I'm a little wary about ever not doing it on a
pubkey you receive from the Internet, though.  I would want to know if
someone were sending me a malformed crypto-relevant value.

&gt; So this validation function is currently unused, and I plan to only use it
&gt; on the prop224 client-side when a client handles received onion addresses.
&gt; 
&gt; Finally, how did you derive the list of points above? o.o

Attached.

   - Ian

["curvestruct.c" (text/x-csrc)]

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;openssl/sha.h&gt;
#include "ed25519-donna.h"

static void dump_point(const char *label, const ge25519 *p)
{
    unsigned char packed[32];
    int i;

    if (label) {
	printf("%s ", label);
    }

    ge25519_pack(packed, p);
    for (i=0;i&lt;32;++i) {
	printf("%02x", packed[i]);
    }
    printf("\n");
}

static void dump_multiples(const ge25519 *p)
{
    ge25519 kp;
    bignum256modm k = {0};
    bignum256modm zero = {0};
    char label[7] = "*  l =";
    int i;

    for (i=1;i&lt;=8;++i) {
	k[0] = i;
	ge25519_double_scalarmult_vartime(&amp;kp, p, k, zero);
	label[2] = '0'+i;
	dump_point(label, &amp;kp);
    }
    printf("\n");
}

static void randpoint(char *randstate, ge25519 *p)
{
    unsigned char hash[64];
    SHA512(randstate, 32, hash);
    ge25519_unpack_negative_vartime(p, hash);
    memmove(randstate, hash+32, 32);
}

int main(int argc, char **argv)
{
    unsigned char randstate[32];
    ge25519 p, mp;
    bignum256modm zero = {0};

    int rfd = open("/dev/urandom", O_RDONLY);
    if (rfd &lt; 0) {
	perror("open /dev/urandom");
	exit(1);
    }
    if (read(rfd, randstate, 32) &lt; 32) {
	perror("read /dev/urandom");
	exit(1);
    }
    close(rfd);

    while(1) {
	randpoint(randstate, &amp;p);

	dump_point("Orig =", &amp;p);
	// Multiply by the group order
	ge25519_double_scalarmult_vartime(&amp;mp, &amp;p, modm_m, zero);
	dump_multiples(&amp;mp);
    }

    return 0;
}

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170420150934</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-20 15:09:34-0400</timestampReceived><subject>Re: [tor-dev] maatuska's bwscanner down since 2017-04-14 -&gt; significant drop in relay traffic</subject><body>

On Thu, Apr 20, 2017 at 10:54:21AM -0000, relayoperator@openmailboxbeta.com wrote:
&gt; Hi Tom!
&gt; since maatuska's bwscanner is down [1] I see a significant drop of traffic on many \
&gt; of my relays, and I believe this is related. Do you have any update to [2] on when \
&gt; maatuska will report bwscan results again? thanks,
&gt; a concerned relayoperator

I am also seeing a strange sudden drop in usage:

https://atlas.torproject.org/#details/BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E

What's going on?
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170413012632</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-04-13 01:26:32-0400</timestampReceived><subject>Re: [tor-dev] txtorcon versioning</subject><body>

Hi meejah. This sounds like a good move since txtorcon makes so many
small incremental releases. I like symantic versioning for stem [1],
but I've only made six releases thus far. Not nineteen. :P

Symantic versioning provides a clear way of indicating what upgrades
are safely backwards compatible and which aren't. In the above you say
"The onion service APIs *will* change" but also "At one point, I
thought of breaking a few now-regrettable APIs. However, I will not do
this." - are you changing APIs or not?

If you are then Calendar Versioning will make it tricker for your
users to figure out when you're doing so.

[1] https://stem.torproject.org/change_log.html#versioning

On Wed, Apr 12, 2017 at 1:25 PM, meejah &lt;meejah@meejah.ca&gt; wrote:
&gt;
&gt; I will soon release the next version of txtorcon with a ton of cool new
&gt; features. This will be called 0.19.0. More details:
&gt;
&gt;    http://timaq4ygg2iegci7.onion/releases.html
&gt;
&gt; Going forward, versioning will switch to a "CalVer.org" variant. At one
&gt; point, I thought of breaking a few now-regrettable APIs.
&gt;
&gt; However, I will not do this.
&gt;
&gt; The next version after 0.19.0 will be 17.x.y
&gt; Changes in any existing APIs will be done by first introducing the new
&gt; thing, deprecating the old thing and eventually removing the old
&gt; thing. The new documentation's "programming guide" includes some notes
&gt; on API stability. I have not to date broken/changed any existing
&gt; API. Also at this point nothing is deprecated (but there are "preferred"
&gt; APIs).
&gt;
&gt; The onion services APIs *will* change for the 17.x release.
&gt;
&gt; New code should follow the recommendations in the programming
&gt; guide. Existing code will continue to work for the forseeable future.
&gt;
&gt; thanks,
&gt; meejah
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170411104541</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-11 10:45:41-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt prop224 onion address encoding (was Re: Proposition: Applying an AONT</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt;
&gt;&gt; On Wed, Apr 05, 2017 at 10:02:07AM -0400, David Goulet wrote:
&gt;&gt;&gt; Another thing about this I just thought of. This AONT construction seems wise
&gt;&gt;&gt; to use. But it's still not entirely clear to me why we need a 1bit version
&gt;&gt;&gt; field. Taking this:
&gt;&gt;&gt; 
&gt;&gt;&gt;     base64( AONT( pubkey || 0x0000 ) || version)
&gt;&gt;&gt; 
&gt;&gt;&gt; If the version is 1 byte, then only the end of the address can be mangled with
&gt;&gt;&gt; and if it is, the tor client won't be able to fetch the descriptor because of
&gt;&gt;&gt; how the URL is constructed (correct version number is needed).
&gt;&gt;&gt; 
&gt;&gt;&gt; So I really don't see the phishing attack here being successful at all...?
&gt;&gt;&gt; 
&gt;&gt;&gt; Can you enlighten what attack we are trying to avoid here that we require a
&gt;&gt;&gt; 1bit version field?
&gt;&gt;
&gt;&gt; I believe the danger Alec was wanting to avoid was that someone (not the
&gt;&gt; onion service owner) could take an existing onion address, bump the
&gt;&gt; version number (which wouldn't change the vanity beginning of the
&gt;&gt; address), and upload the very same descriptor to the resulting blinded
&gt;&gt; address (under the new version number).  Then the modified address would
&gt;&gt; work just like the original.
&gt;&gt;
&gt;&gt; As mentioned elsewhere in the thread, this is solved if that descriptor
&gt;&gt; contains (under the signature by the "master" onion key) the actual
&gt;&gt; onion address you were expected to use to get there.  Does it?  If so,
&gt;&gt; I think we don't have to worry about this problem at all.
&gt;&gt;
&gt;
&gt; Hello people,
&gt;
&gt; the AONT thread has grown to an immense size and includes all sorts of
&gt; discussions, so I will split it into two smaller threads with just
&gt; action items so that we move this forward ASAP (as this interacts with
&gt; our current implementation efforts).
&gt;
&gt; &lt;snip&gt;
&gt;
&gt; "Then let's include the canonical onionaddress (including version) into
&gt; the descriptor so that clients can verify that they used the
&gt; onionaddress that the onionservice was intending for them to use"
&gt;
&gt; So I guess the current suggested plan is to add an extra descriptor
&gt; field with the onionaddress (or its hash) into the _encrypted parts_ of
&gt; the descriptor so that clients can do this extra verification to defend
&gt; against downgrade attacks.
&gt;
&gt; I think this seems like a reasonable defence here, and more safe +
&gt; engineering-friendly than the AONT stuff (see David's email). We should
&gt; just make sure that this plan does not interact badly with things like
&gt; onionbalance and future name systems.
&gt;
&gt; Do you think this makes sense?  If yes, I will write a spec patch in the
&gt; next few days.
&gt;
&gt; And I think this sums up the discussion wrt onion address encoding. I'm
&gt; going to start a new thread about the ed25519-related suggestions that
&gt; were thrown into this thread.
&gt;

And here is a torspec branch that specifies this behavior:
     https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-desc-phishing

We basically add the canonical onion address in the inner encrypted
layer of the descriptor, and expect the client to verify it. I made this
feature optional in case we ever decide it was a bad idea.

Please let me know if you think this behavior is worthwhile merging upstream and implementing.

Thanks! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170411122545</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2017-04-11 12:25:45-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt prop224 onion address encoding (was Re: Proposition: Applying an AONT</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 11/04/17 11:45, George Kadianakis wrote:
&gt; We basically add the canonical onion address in the inner encrypted
&gt; layer of the descriptor, and expect the client to verify it. I made thi=
s
&gt; feature optional in case we ever decide it was a bad idea.

Is the version number also included in the blinded key derivation? I
haven't been keeping up with prop224 developments, so apologies if
that's already been settled, but in your previous email it sounded like
it was one of the suggestions but not one of the action items.

If the version number is included in the descriptor but not in the
blinded key derivation, can a service publish descriptors for multiple
protocol versions? Would there be a conflict if the HS directories store
the descriptors under the same blinded key?

Cheers,
Michael

["0x9FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170411131816</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-04-11 13:18:16-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt prop224 onion address encoding (was Re: Proposition: Applying an AONT</subject><body>

[Attachment #2 (multipart/signed)]


On 11 Apr (13:45:41), George Kadianakis wrote:
&gt; George Kadianakis &lt;desnacked@riseup.net&gt; writes:
&gt; 
&gt; &gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt; &gt;
&gt; &gt;&gt; On Wed, Apr 05, 2017 at 10:02:07AM -0400, David Goulet wrote:
&gt; &gt;&gt;&gt; Another thing about this I just thought of. This AONT construction seems wise
&gt; &gt;&gt;&gt; to use. But it's still not entirely clear to me why we need a 1bit version
&gt; &gt;&gt;&gt; field. Taking this:
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt;     base64( AONT( pubkey || 0x0000 ) || version)
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; If the version is 1 byte, then only the end of the address can be mangled with
&gt; &gt;&gt;&gt; and if it is, the tor client won't be able to fetch the descriptor because of
&gt; &gt;&gt;&gt; how the URL is constructed (correct version number is needed).
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; So I really don't see the phishing attack here being successful at all...?
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; Can you enlighten what attack we are trying to avoid here that we require a
&gt; &gt;&gt;&gt; 1bit version field?
&gt; &gt;&gt;
&gt; &gt;&gt; I believe the danger Alec was wanting to avoid was that someone (not the
&gt; &gt;&gt; onion service owner) could take an existing onion address, bump the
&gt; &gt;&gt; version number (which wouldn't change the vanity beginning of the
&gt; &gt;&gt; address), and upload the very same descriptor to the resulting blinded
&gt; &gt;&gt; address (under the new version number).  Then the modified address would
&gt; &gt;&gt; work just like the original.
&gt; &gt;&gt;
&gt; &gt;&gt; As mentioned elsewhere in the thread, this is solved if that descriptor
&gt; &gt;&gt; contains (under the signature by the "master" onion key) the actual
&gt; &gt;&gt; onion address you were expected to use to get there.  Does it?  If so,
&gt; &gt;&gt; I think we don't have to worry about this problem at all.
&gt; &gt;&gt;
&gt; &gt;
&gt; &gt; Hello people,
&gt; &gt;
&gt; &gt; the AONT thread has grown to an immense size and includes all sorts of
&gt; &gt; discussions, so I will split it into two smaller threads with just
&gt; &gt; action items so that we move this forward ASAP (as this interacts with
&gt; &gt; our current implementation efforts).
&gt; &gt;
&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; &gt; "Then let's include the canonical onionaddress (including version) into
&gt; &gt; the descriptor so that clients can verify that they used the
&gt; &gt; onionaddress that the onionservice was intending for them to use"
&gt; &gt;
&gt; &gt; So I guess the current suggested plan is to add an extra descriptor
&gt; &gt; field with the onionaddress (or its hash) into the _encrypted parts_ of
&gt; &gt; the descriptor so that clients can do this extra verification to defend
&gt; &gt; against downgrade attacks.
&gt; &gt;
&gt; &gt; I think this seems like a reasonable defence here, and more safe +
&gt; &gt; engineering-friendly than the AONT stuff (see David's email). We should
&gt; &gt; just make sure that this plan does not interact badly with things like
&gt; &gt; onionbalance and future name systems.
&gt; &gt;
&gt; &gt; Do you think this makes sense?  If yes, I will write a spec patch in the
&gt; &gt; next few days.
&gt; &gt;
&gt; &gt; And I think this sums up the discussion wrt onion address encoding. I'm
&gt; &gt; going to start a new thread about the ed25519-related suggestions that
&gt; &gt; were thrown into this thread.
&gt; &gt;
&gt; 
&gt; And here is a torspec branch that specifies this behavior:
&gt;      https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-desc-phishing
&gt; 
&gt; We basically add the canonical onion address in the inner encrypted
&gt; layer of the descriptor, and expect the client to verify it. I made this
&gt; feature optional in case we ever decide it was a bad idea.

Yeah I was puzzled about the optional idea but agree that being able to
rollback without having client freak out could be a good idea.

Also, if we ever come up with stealth client authorization one day, that field
could be affected in some ways... unsure but still, worth being more safe than
very sorry and stuck with that field :).

Last comment. Can we maybe add a sentence somewhere that explains what the
client should do with this field? I assume it is has simple as doing a
strcmp() with the original address you requested the descriptor but still.

Thanks!
David

&gt; 
&gt; Please let me know if you think this behavior is worthwhile merging upstream and implementing.
&gt; 
&gt; Thanks! :)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
8HiR+n98Vq26HSn5XkNn84QMAdPZOrIJ8HM4ZCUadzk=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410162252</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-10 16:22:52-0400</timestampReceived><subject>Re: [tor-dev] Contents of tor-dev digest...</subject><body>

[Attachment #2 (multipart/signed)]


Dear Mike Guidry,

My reply here is snarky but I just cannot help it. Please consider me
a friend that is snarky rather than an enemy or an asshole.

I am finding it very hard to read. It is *extremely* annoying that you
present your definition of "hacking" at the beginning and then go on to
define TCP, UDP and other irrelavent things. it also buzzes and pops with
wtf terms like "reflect lateral hacking movements". Is your target audience
journalists who won't know what to look for in a good technical write up
of an actual attack?

Perhaps it would be helpful for you to review some of the vast academic literature
about breaking Tor since you are interested in breaking Tor:

https://www.freehaven.net/anonbib/


Sincerely,

David Stainton


On Mon, Apr 10, 2017 at 11:17:13AM -0400, Mike Guidry wrote:
&gt; I am not trolling you.  I attached a PDF which explains how to trace TOR
&gt; connections over the internet.  It is not a joke.  I have some other
&gt; vulnerabilities at that URL I am releasing.
&gt; 
&gt; I'll include here:
&gt; 
&gt; Michael Guidry March 15, 2017
&gt; 
&gt; Tracing connections online from the virtual landscape to the physical world
&gt; 
&gt; Hacking is the intrusion of a computer by an unwanted guest, and is usually
&gt; used to express gaining access to corporate, or government networks. It
&gt; requires either installing using malware, phishing, or directly connecting
&gt; to machines and attacking their software with exploits. It is currently
&gt; impossible to accurately trace hackers online unless they use the same
&gt; software, and techniques for all their targets. It has become a major
&gt; problem within the last decade due to globalization, and corporate networks
&gt; directly connected to the Internet.
&gt; 
&gt; Tracing Transmission Control Protocol (TCP) connections across the Internet
&gt; is inaccurate due to how routing is performed across global backbones. The
&gt; global routing table is modified constantly with nodes, and routes being
&gt; adjusted for optimization, or quality of service needs. TCP is the most
&gt; used protocol therefore it is the only protocol which really matters to
&gt; attempt to trace. User Datagram Protocol (UDP) is state less therefore less
&gt; reliable for tracking, however has the same vulnerability. UDP is usually
&gt; used by hackers for exfiltration, or remote control after other actions
&gt; have been performed.
&gt; 
&gt; It is currently impossible to track connections over the Internet
&gt; accurately. Several cases relate to The Onion Router (TOR) sites aka "Dark
&gt; Web," which were somehow uncovered using private technologies. Technologies
&gt; used for those cases do not work properly over regular hacking via proxies
&gt; online. Its an issue for the landscape of political hacking worldwide which
&gt; has been increasing annually across the globe.
&gt; 
&gt; China, for example, has been having a lot of blame lately due to Internet
&gt; Protocol (IP) addresses assigned within its borders being used in massive
&gt; amounts of attacks. Some of these attacks have been supposedly verified,
&gt; however it is impossible for China to have performed them all. Proxy
&gt; servers being used in chains may just be victims themselves. The problem
&gt; arises due to possible evidence planting being similar to proxying through
&gt; their others networks, or borders. It is completely different comparing
&gt; cyber war to traditional conflicts due to evidence being traceable, and
&gt; soldiers physical evidence being easily recovered.
&gt; 
&gt; Hacking back is a concept any government, or corporation is now detailing
&gt; within their playbook to understand how the liabilities may affect them. It
&gt; is the terminology used to attack the source of an intrusion by means of
&gt; hacking itself. Repercussions of hacking a country due to incorrectly
&gt; assuming an attack was originating there is highly possible. Cyber war
&gt; policies exists for a lot of nations, and it may easily escalate their
&gt; attention on whom they believe is performing the attacks. The same happens
&gt; with ‘proxy wars' currently within the middle east, etc. Proxy wars
&gt; traditionally will have global evidence allowing verification of weapon
&gt; deliveries, or monetary exchanges to determine the origin of funding.
&gt; Soldiers training methods, and other strategies may be impossible to cloak.
&gt; It is generally accepted once verified, and escalation is directed towards
&gt; the proper perpetrator.
&gt; 
&gt; Internet Service Providers (ISP) have the ability to perform various tasks
&gt; internally to determine the pathways through their networks which would
&gt; reflect lateral hacking movements. Connections leaving a single network
&gt; that enter the realm of dynamic routing via Border Gateway Protocol (BGP)
&gt; become a nightmare. The percentage of accuracy decreases
&gt; 
&gt; exponentially as each separate network is used to route the connection to
&gt; its destination. It becomes nearly impossible to trace after just a few
&gt; gateways at least publicly, or academically.
&gt; 
&gt; Unorthodox methods are required to allow tracing of connections under these
&gt; circumstances. Distributed Denial of Service (DDoS) is a solution that
&gt; allows you to turn the internet's own packet distribution system into a
&gt; tracking mechanism. Most people do not consider performing DDoS attacks for
&gt; positive reasons. DDoS may have been used by targets to "quarantine" their
&gt; hacking source temporarily from the Internet. This strategy is beyond the
&gt; scope of this technique, and is literally only a bandaid for a single
&gt; attack originating from possibly just a proxy.
&gt; 
&gt; DDoS is also illegal in most nations which have advanced their cyber crime
&gt; laws. The fact that this technique requires many computers performing
&gt; attacks strategically placed across the globe also ensures that they will
&gt; be performed from countries where these laws are being enforced. The attack
&gt; requires attacking all networks that you wish to verify against therefore
&gt; you are immediately breaking laws on the destination side of most of the
&gt; world simultaneously. It should not be used lightly, or regularly without
&gt; cause and understanding.
&gt; 
&gt; DDoS attacks transmit more data to a destination than a that network can
&gt; handle which forces it to stop responding in a timely fashion. The latency
&gt; is so high that the TCP timeouts are reached, and connections break. New
&gt; connections are also impossible during these attacks. It has only had
&gt; negative effects since it began being used globally regularly. This
&gt; technique could be considered a reverse DDoS.
&gt; 
&gt; The approach is to attack the entire world in a very strategically timed
&gt; manner using worldwide machines. Each separate DDoS attack using machines
&gt; worldwide would use different synchronization, and timing information which
&gt; would allow embedding information directly into the latency it causes on
&gt; those networks. The purpose is to compare that latency with the hack taking
&gt; place to verify its source location. If the attack disrupts networks your
&gt; attempting to verify against for milliseconds up to a few seconds then you
&gt; can perform several of these sequentially to embed information in this
&gt; timing itself. DDoS then becomes a positive useful solution even though
&gt; technically illegal to a currently difficult problem.
&gt; 
&gt; You wouldn't necessarily have to attack the entire world. Conceptually it
&gt; would be better to use databases of networks wishing to verify against.
&gt; Residential, and commercial IP delegations throughout most nations would
&gt; cover a large portion. Government hacking groups have their IPs leaked
&gt; often as well. It is possible to just perform the attacks on these
&gt; particular sets of IP addresses rather than the world as a whole. It is
&gt; also equally possible to perform the attacks on entire ISPs, and countries
&gt; to quickly determine although this would not be accurate due to possible
&gt; proxies in between being within that country.
&gt; 
&gt; If the technique is used on a major ISP network rather than a gateway going
&gt; into an office then it is possible that a proxy exists within their network
&gt; which would read off as a false positive. Accuracy relies on the networks
&gt; your verifying against to be actual end user machines which would have
&gt; human attackers. If you were to attack a network, or router of a network
&gt; which has an office then it is highly likely they are going to notice other
&gt; hackers using their network to hack externally on scales which would
&gt; involve this type of solution. If you were to attack an entire country then
&gt; you are going to have a problem of not recognizing from timing alone
&gt; whether or not a proxy (of possibly several) just exist in that country. It
&gt; is imperative to understand this, and always attempt to get as close to the
&gt; networks in question being verified.
&gt; 
&gt; Original message:
&gt; 
&gt; Are you trolling us? I don't get it!
&gt; 
&gt; 
&gt; On Sun, Apr 09, 2017 at 08:19:28PM -0400, Mike Guidry wrote:
&gt; &gt; Hello,
&gt; &gt;
&gt; &gt; Here is a document I've wrote regarding a concept to trace connections
&gt; even
&gt; &gt; through TOR.  If you have any questions feel free to respond, and I'll
&gt; &gt; attempt to explain.  I have also considered a way to mitigate this
&gt; &gt; situation being allowing TOR to be traced by using 'Transactional
&gt; &gt; Requests.'  I'll proceed to write it up, and post soon.
&gt; &gt;
&gt; &gt; I have released some other short papers as well.  It contains several
&gt; files
&gt; &gt; regarding a few vulnerabilities, and a couple concepts regarding things
&gt; &gt; like quantum resistant cryptography, etc..
&gt; &gt;
&gt; &gt; URL: https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ
&gt; &gt;
&gt; &gt; Feel free to e-mail me directly..
&gt; &gt;
&gt; &gt; Thanks,
&gt; &gt; Mike Guidry

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410215417</emailId><senderName>Mike Guidry</senderName><senderEmail>mike@mikeguidry.net</senderEmail><timestampReceived>2017-04-10 21:54:17-0400</timestampReceived><subject>Re: [tor-dev] Contents of tor-dev digest...</subject><body>

[Attachment #2 (multipart/alternative)]


I'm not presenting a scientific paper.  Its an actual method that works.
You can DDoS various networks to compare against active connections on TOR,
and otherwise...


On Mon, Apr 10, 2017 at 12:22 PM, dawuud &lt;dawuud@riseup.net&gt; wrote:

&gt;
&gt;
&gt; Dear Mike Guidry,
&gt;
&gt; My reply here is snarky but I just cannot help it. Please consider me
&gt; a friend that is snarky rather than an enemy or an asshole.
&gt;
&gt; I am finding it very hard to read. It is *extremely* annoying that you
&gt; present your definition of "hacking" at the beginning and then go on to
&gt; define TCP, UDP and other irrelavent things. it also buzzes and pops with
&gt; wtf terms like "reflect lateral hacking movements". Is your target audience
&gt; journalists who won't know what to look for in a good technical write up
&gt; of an actual attack?
&gt;
&gt; Perhaps it would be helpful for you to review some of the vast academic
&gt; literature
&gt; about breaking Tor since you are interested in breaking Tor:
&gt;
&gt; https://www.freehaven.net/anonbib/
&gt;
&gt;
&gt; Sincerely,
&gt;
&gt; David Stainton
&gt;
&gt;
&gt; On Mon, Apr 10, 2017 at 11:17:13AM -0400, Mike Guidry wrote:
&gt; &gt; I am not trolling you.  I attached a PDF which explains how to trace TOR
&gt; &gt; connections over the internet.  It is not a joke.  I have some other
&gt; &gt; vulnerabilities at that URL I am releasing.
&gt; &gt;
&gt; &gt; I'll include here:
&gt; &gt;
&gt; &gt; Michael Guidry March 15, 2017
&gt; &gt;
&gt; &gt; Tracing connections online from the virtual landscape to the physical
&gt; world
&gt; &gt;
&gt; &gt; Hacking is the intrusion of a computer by an unwanted guest, and is
&gt; usually
&gt; &gt; used to express gaining access to corporate, or government networks. It
&gt; &gt; requires either installing using malware, phishing, or directly
&gt; connecting
&gt; &gt; to machines and attacking their software with exploits. It is currently
&gt; &gt; impossible to accurately trace hackers online unless they use the same
&gt; &gt; software, and techniques for all their targets. It has become a major
&gt; &gt; problem within the last decade due to globalization, and corporate
&gt; networks
&gt; &gt; directly connected to the Internet.
&gt; &gt;
&gt; &gt; Tracing Transmission Control Protocol (TCP) connections across the
&gt; Internet
&gt; &gt; is inaccurate due to how routing is performed across global backbones.
&gt; The
&gt; &gt; global routing table is modified constantly with nodes, and routes being
&gt; &gt; adjusted for optimization, or quality of service needs. TCP is the most
&gt; &gt; used protocol therefore it is the only protocol which really matters to
&gt; &gt; attempt to trace. User Datagram Protocol (UDP) is state less therefore
&gt; less
&gt; &gt; reliable for tracking, however has the same vulnerability. UDP is usually
&gt; &gt; used by hackers for exfiltration, or remote control after other actions
&gt; &gt; have been performed.
&gt; &gt;
&gt; &gt; It is currently impossible to track connections over the Internet
&gt; &gt; accurately. Several cases relate to The Onion Router (TOR) sites aka
&gt; "Dark
&gt; &gt; Web," which were somehow uncovered using private technologies.
&gt; Technologies
&gt; &gt; used for those cases do not work properly over regular hacking via
&gt; proxies
&gt; &gt; online. Its an issue for the landscape of political hacking worldwide
&gt; which
&gt; &gt; has been increasing annually across the globe.
&gt; &gt;
&gt; &gt; China, for example, has been having a lot of blame lately due to Internet
&gt; &gt; Protocol (IP) addresses assigned within its borders being used in massive
&gt; &gt; amounts of attacks. Some of these attacks have been supposedly verified,
&gt; &gt; however it is impossible for China to have performed them all. Proxy
&gt; &gt; servers being used in chains may just be victims themselves. The problem
&gt; &gt; arises due to possible evidence planting being similar to proxying
&gt; through
&gt; &gt; their others networks, or borders. It is completely different comparing
&gt; &gt; cyber war to traditional conflicts due to evidence being traceable, and
&gt; &gt; soldiers physical evidence being easily recovered.
&gt; &gt;
&gt; &gt; Hacking back is a concept any government, or corporation is now detailing
&gt; &gt; within their playbook to understand how the liabilities may affect them.
&gt; It
&gt; &gt; is the terminology used to attack the source of an intrusion by means of
&gt; &gt; hacking itself. Repercussions of hacking a country due to incorrectly
&gt; &gt; assuming an attack was originating there is highly possible. Cyber war
&gt; &gt; policies exists for a lot of nations, and it may easily escalate their
&gt; &gt; attention on whom they believe is performing the attacks. The same
&gt; happens
&gt; &gt; with ‘proxy wars' currently within the middle east, etc. Proxy wars
&gt; &gt; traditionally will have global evidence allowing verification of weapon
&gt; &gt; deliveries, or monetary exchanges to determine the origin of funding.
&gt; &gt; Soldiers training methods, and other strategies may be impossible to
&gt; cloak.
&gt; &gt; It is generally accepted once verified, and escalation is directed
&gt; towards
&gt; &gt; the proper perpetrator.
&gt; &gt;
&gt; &gt; Internet Service Providers (ISP) have the ability to perform various
&gt; tasks
&gt; &gt; internally to determine the pathways through their networks which would
&gt; &gt; reflect lateral hacking movements. Connections leaving a single network
&gt; &gt; that enter the realm of dynamic routing via Border Gateway Protocol (BGP)
&gt; &gt; become a nightmare. The percentage of accuracy decreases
&gt; &gt;
&gt; &gt; exponentially as each separate network is used to route the connection to
&gt; &gt; its destination. It becomes nearly impossible to trace after just a few
&gt; &gt; gateways at least publicly, or academically.
&gt; &gt;
&gt; &gt; Unorthodox methods are required to allow tracing of connections under
&gt; these
&gt; &gt; circumstances. Distributed Denial of Service (DDoS) is a solution that
&gt; &gt; allows you to turn the internet's own packet distribution system into a
&gt; &gt; tracking mechanism. Most people do not consider performing DDoS attacks
&gt; for
&gt; &gt; positive reasons. DDoS may have been used by targets to "quarantine"
&gt; their
&gt; &gt; hacking source temporarily from the Internet. This strategy is beyond the
&gt; &gt; scope of this technique, and is literally only a bandaid for a single
&gt; &gt; attack originating from possibly just a proxy.
&gt; &gt;
&gt; &gt; DDoS is also illegal in most nations which have advanced their cyber
&gt; crime
&gt; &gt; laws. The fact that this technique requires many computers performing
&gt; &gt; attacks strategically placed across the globe also ensures that they will
&gt; &gt; be performed from countries where these laws are being enforced. The
&gt; attack
&gt; &gt; requires attacking all networks that you wish to verify against therefore
&gt; &gt; you are immediately breaking laws on the destination side of most of the
&gt; &gt; world simultaneously. It should not be used lightly, or regularly without
&gt; &gt; cause and understanding.
&gt; &gt;
&gt; &gt; DDoS attacks transmit more data to a destination than a that network can
&gt; &gt; handle which forces it to stop responding in a timely fashion. The
&gt; latency
&gt; &gt; is so high that the TCP timeouts are reached, and connections break. New
&gt; &gt; connections are also impossible during these attacks. It has only had
&gt; &gt; negative effects since it began being used globally regularly. This
&gt; &gt; technique could be considered a reverse DDoS.
&gt; &gt;
&gt; &gt; The approach is to attack the entire world in a very strategically timed
&gt; &gt; manner using worldwide machines. Each separate DDoS attack using machines
&gt; &gt; worldwide would use different synchronization, and timing information
&gt; which
&gt; &gt; would allow embedding information directly into the latency it causes on
&gt; &gt; those networks. The purpose is to compare that latency with the hack
&gt; taking
&gt; &gt; place to verify its source location. If the attack disrupts networks your
&gt; &gt; attempting to verify against for milliseconds up to a few seconds then
&gt; you
&gt; &gt; can perform several of these sequentially to embed information in this
&gt; &gt; timing itself. DDoS then becomes a positive useful solution even though
&gt; &gt; technically illegal to a currently difficult problem.
&gt; &gt;
&gt; &gt; You wouldn't necessarily have to attack the entire world. Conceptually it
&gt; &gt; would be better to use databases of networks wishing to verify against.
&gt; &gt; Residential, and commercial IP delegations throughout most nations would
&gt; &gt; cover a large portion. Government hacking groups have their IPs leaked
&gt; &gt; often as well. It is possible to just perform the attacks on these
&gt; &gt; particular sets of IP addresses rather than the world as a whole. It is
&gt; &gt; also equally possible to perform the attacks on entire ISPs, and
&gt; countries
&gt; &gt; to quickly determine although this would not be accurate due to possible
&gt; &gt; proxies in between being within that country.
&gt; &gt;
&gt; &gt; If the technique is used on a major ISP network rather than a gateway
&gt; going
&gt; &gt; into an office then it is possible that a proxy exists within their
&gt; network
&gt; &gt; which would read off as a false positive. Accuracy relies on the networks
&gt; &gt; your verifying against to be actual end user machines which would have
&gt; &gt; human attackers. If you were to attack a network, or router of a network
&gt; &gt; which has an office then it is highly likely they are going to notice
&gt; other
&gt; &gt; hackers using their network to hack externally on scales which would
&gt; &gt; involve this type of solution. If you were to attack an entire country
&gt; then
&gt; &gt; you are going to have a problem of not recognizing from timing alone
&gt; &gt; whether or not a proxy (of possibly several) just exist in that country.
&gt; It
&gt; &gt; is imperative to understand this, and always attempt to get as close to
&gt; the
&gt; &gt; networks in question being verified.
&gt; &gt;
&gt; &gt; Original message:
&gt; &gt;
&gt; &gt; Are you trolling us? I don't get it!
&gt; &gt;
&gt; &gt;
&gt; &gt; On Sun, Apr 09, 2017 at 08:19:28PM -0400, Mike Guidry wrote:
&gt; &gt; &gt; Hello,
&gt; &gt; &gt;
&gt; &gt; &gt; Here is a document I've wrote regarding a concept to trace connections
&gt; &gt; even
&gt; &gt; &gt; through TOR.  If you have any questions feel free to respond, and I'll
&gt; &gt; &gt; attempt to explain.  I have also considered a way to mitigate this
&gt; &gt; &gt; situation being allowing TOR to be traced by using 'Transactional
&gt; &gt; &gt; Requests.'  I'll proceed to write it up, and post soon.
&gt; &gt; &gt;
&gt; &gt; &gt; I have released some other short papers as well.  It contains several
&gt; &gt; files
&gt; &gt; &gt; regarding a few vulnerabilities, and a couple concepts regarding things
&gt; &gt; &gt; like quantum resistant cryptography, etc..
&gt; &gt; &gt;
&gt; &gt; &gt; URL: https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ
&gt; &gt; &gt;
&gt; &gt; &gt; Feel free to e-mail me directly..
&gt; &gt; &gt;
&gt; &gt; &gt; Thanks,
&gt; &gt; &gt; Mike Guidry
&gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I'm not presenting a scientific paper.   Its an actual method that \
works.   You can DDoS various networks to compare against active connections on TOR, \
and otherwise...&lt;div&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On \
Mon, Apr 10, 2017 at 12:22 PM, dawuud &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:dawuud@riseup.net" target="_blank"&gt;dawuud@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;br&gt; &lt;br&gt;
Dear Mike Guidry,&lt;br&gt;
&lt;br&gt;
My reply here is snarky but I just cannot help it. Please consider me&lt;br&gt;
a friend that is snarky rather than an enemy or an asshole.&lt;br&gt;
&lt;br&gt;
I am finding it very hard to read. It is *extremely* annoying that you&lt;br&gt;
present your definition of "hacking" at the beginning and then go on to&lt;br&gt;
define TCP, UDP and other irrelavent things. it also buzzes and pops with&lt;br&gt;
wtf terms like "reflect lateral hacking movements". Is your target \
audience&lt;br&gt; journalists who won't know what to look for in a good technical \
write up&lt;br&gt; of an actual attack?&lt;br&gt;
&lt;br&gt;
Perhaps it would be helpful for you to review some of the vast academic \
literature&lt;br&gt; about breaking Tor since you are interested in breaking Tor:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://www.freehaven.net/anonbib/" rel="noreferrer" \
target="_blank"&gt;https://www.freehaven.net/&lt;wbr&gt;anonbib/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
Sincerely,&lt;br&gt;
&lt;br&gt;
David Stainton&lt;br&gt;
&lt;div&gt;&lt;div class="h5"&gt;&lt;br&gt;
&lt;br&gt;
On Mon, Apr 10, 2017 at 11:17:13AM -0400, Mike Guidry wrote:&lt;br&gt;
&gt; I am not trolling you.   I attached a PDF which explains how to trace TOR&lt;br&gt;
&gt; connections over the internet.   It is not a joke.   I have some other&lt;br&gt;
&gt; vulnerabilities at that URL I am releasing.&lt;br&gt;
&gt;&lt;br&gt;
&gt; I'll include here:&lt;br&gt;
&gt;&lt;br&gt;
&gt; Michael Guidry March 15, 2017&lt;br&gt;
&gt;&lt;br&gt;
&gt; Tracing connections online from the virtual landscape to the physical world&lt;br&gt;
&gt;&lt;br&gt;
&gt; Hacking is the intrusion of a computer by an unwanted guest, and is usually&lt;br&gt;
&gt; used to express gaining access to corporate, or government networks. It&lt;br&gt;
&gt; requires either installing using malware, phishing, or directly connecting&lt;br&gt;
&gt; to machines and attacking their software with exploits. It is currently&lt;br&gt;
&gt; impossible to accurately trace hackers online unless they use the same&lt;br&gt;
&gt; software, and techniques for all their targets. It has become a major&lt;br&gt;
&gt; problem within the last decade due to globalization, and corporate networks&lt;br&gt;
&gt; directly connected to the Internet.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Tracing Transmission Control Protocol (TCP) connections across the Internet&lt;br&gt;
&gt; is inaccurate due to how routing is performed across global backbones. The&lt;br&gt;
&gt; global routing table is modified constantly with nodes, and routes being&lt;br&gt;
&gt; adjusted for optimization, or quality of service needs. TCP is the most&lt;br&gt;
&gt; used protocol therefore it is the only protocol which really matters to&lt;br&gt;
&gt; attempt to trace. User Datagram Protocol (UDP) is state less therefore less&lt;br&gt;
&gt; reliable for tracking, however has the same vulnerability. UDP is usually&lt;br&gt;
&gt; used by hackers for exfiltration, or remote control after other actions&lt;br&gt;
&gt; have been performed.&lt;br&gt;
&gt;&lt;br&gt;
&gt; It is currently impossible to track connections over the Internet&lt;br&gt;
&gt; accurately. Several cases relate to The Onion Router (TOR) sites aka "Dark&lt;br&gt;
&gt; Web," which were somehow uncovered using private technologies. Technologies&lt;br&gt;
&gt; used for those cases do not work properly over regular hacking via proxies&lt;br&gt;
&gt; online. Its an issue for the landscape of political hacking worldwide which&lt;br&gt;
&gt; has been increasing annually across the globe.&lt;br&gt;
&gt;&lt;br&gt;
&gt; China, for example, has been having a lot of blame lately due to Internet&lt;br&gt;
&gt; Protocol (IP) addresses assigned within its borders being used in massive&lt;br&gt;
&gt; amounts of attacks. Some of these attacks have been supposedly verified,&lt;br&gt;
&gt; however it is impossible for China to have performed them all. Proxy&lt;br&gt;
&gt; servers being used in chains may just be victims themselves. The problem&lt;br&gt;
&gt; arises due to possible evidence planting being similar to proxying through&lt;br&gt;
&gt; their others networks, or borders. It is completely different comparing&lt;br&gt;
&gt; cyber war to traditional conflicts due to evidence being traceable, and&lt;br&gt;
&gt; soldiers physical evidence being easily recovered.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Hacking back is a concept any government, or corporation is now detailing&lt;br&gt;
&gt; within their playbook to understand how the liabilities may affect them. It&lt;br&gt;
&gt; is the terminology used to attack the source of an intrusion by means of&lt;br&gt;
&gt; hacking itself. Repercussions of hacking a country due to incorrectly&lt;br&gt;
&gt; assuming an attack was originating there is highly possible. Cyber war&lt;br&gt;
&gt; policies exists for a lot of nations, and it may easily escalate their&lt;br&gt;
&gt; attention on whom they believe is performing the attacks. The same happens&lt;br&gt;
&gt; with ‘proxy wars' currently within the middle east, etc. Proxy wars&lt;br&gt;
&gt; traditionally will have global evidence allowing verification of weapon&lt;br&gt;
&gt; deliveries, or monetary exchanges to determine the origin of funding.&lt;br&gt;
&gt; Soldiers training methods, and other strategies may be impossible to cloak.&lt;br&gt;
&gt; It is generally accepted once verified, and escalation is directed towards&lt;br&gt;
&gt; the proper perpetrator.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Internet Service Providers (ISP) have the ability to perform various tasks&lt;br&gt;
&gt; internally to determine the pathways through their networks which would&lt;br&gt;
&gt; reflect lateral hacking movements. Connections leaving a single network&lt;br&gt;
&gt; that enter the realm of dynamic routing via Border Gateway Protocol (BGP)&lt;br&gt;
&gt; become a nightmare. The percentage of accuracy decreases&lt;br&gt;
&gt;&lt;br&gt;
&gt; exponentially as each separate network is used to route the connection to&lt;br&gt;
&gt; its destination. It becomes nearly impossible to trace after just a few&lt;br&gt;
&gt; gateways at least publicly, or academically.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Unorthodox methods are required to allow tracing of connections under these&lt;br&gt;
&gt; circumstances. Distributed Denial of Service (DDoS) is a solution that&lt;br&gt;
&gt; allows you to turn the internet's own packet distribution system into a&lt;br&gt;
&gt; tracking mechanism. Most people do not consider performing DDoS attacks for&lt;br&gt;
&gt; positive reasons. DDoS may have been used by targets to "quarantine" their&lt;br&gt;
&gt; hacking source temporarily from the Internet. This strategy is beyond the&lt;br&gt;
&gt; scope of this technique, and is literally only a bandaid for a single&lt;br&gt;
&gt; attack originating from possibly just a proxy.&lt;br&gt;
&gt;&lt;br&gt;
&gt; DDoS is also illegal in most nations which have advanced their cyber crime&lt;br&gt;
&gt; laws. The fact that this technique requires many computers performing&lt;br&gt;
&gt; attacks strategically placed across the globe also ensures that they will&lt;br&gt;
&gt; be performed from countries where these laws are being enforced. The attack&lt;br&gt;
&gt; requires attacking all networks that you wish to verify against therefore&lt;br&gt;
&gt; you are immediately breaking laws on the destination side of most of the&lt;br&gt;
&gt; world simultaneously. It should not be used lightly, or regularly without&lt;br&gt;
&gt; cause and understanding.&lt;br&gt;
&gt;&lt;br&gt;
&gt; DDoS attacks transmit more data to a destination than a that network can&lt;br&gt;
&gt; handle which forces it to stop responding in a timely fashion. The latency&lt;br&gt;
&gt; is so high that the TCP timeouts are reached, and connections break. New&lt;br&gt;
&gt; connections are also impossible during these attacks. It has only had&lt;br&gt;
&gt; negative effects since it began being used globally regularly. This&lt;br&gt;
&gt; technique could be considered a reverse DDoS.&lt;br&gt;
&gt;&lt;br&gt;
&gt; The approach is to attack the entire world in a very strategically timed&lt;br&gt;
&gt; manner using worldwide machines. Each separate DDoS attack using machines&lt;br&gt;
&gt; worldwide would use different synchronization, and timing information which&lt;br&gt;
&gt; would allow embedding information directly into the latency it causes on&lt;br&gt;
&gt; those networks. The purpose is to compare that latency with the hack taking&lt;br&gt;
&gt; place to verify its source location. If the attack disrupts networks your&lt;br&gt;
&gt; attempting to verify against for milliseconds up to a few seconds then you&lt;br&gt;
&gt; can perform several of these sequentially to embed information in this&lt;br&gt;
&gt; timing itself. DDoS then becomes a positive useful solution even though&lt;br&gt;
&gt; technically illegal to a currently difficult problem.&lt;br&gt;
&gt;&lt;br&gt;
&gt; You wouldn't necessarily have to attack the entire world. Conceptually it&lt;br&gt;
&gt; would be better to use databases of networks wishing to verify against.&lt;br&gt;
&gt; Residential, and commercial IP delegations throughout most nations would&lt;br&gt;
&gt; cover a large portion. Government hacking groups have their IPs leaked&lt;br&gt;
&gt; often as well. It is possible to just perform the attacks on these&lt;br&gt;
&gt; particular sets of IP addresses rather than the world as a whole. It is&lt;br&gt;
&gt; also equally possible to perform the attacks on entire ISPs, and countries&lt;br&gt;
&gt; to quickly determine although this would not be accurate due to possible&lt;br&gt;
&gt; proxies in between being within that country.&lt;br&gt;
&gt;&lt;br&gt;
&gt; If the technique is used on a major ISP network rather than a gateway going&lt;br&gt;
&gt; into an office then it is possible that a proxy exists within their network&lt;br&gt;
&gt; which would read off as a false positive. Accuracy relies on the networks&lt;br&gt;
&gt; your verifying against to be actual end user machines which would have&lt;br&gt;
&gt; human attackers. If you were to attack a network, or router of a network&lt;br&gt;
&gt; which has an office then it is highly likely they are going to notice other&lt;br&gt;
&gt; hackers using their network to hack externally on scales which would&lt;br&gt;
&gt; involve this type of solution. If you were to attack an entire country then&lt;br&gt;
&gt; you are going to have a problem of not recognizing from timing alone&lt;br&gt;
&gt; whether or not a proxy (of possibly several) just exist in that country. It&lt;br&gt;
&gt; is imperative to understand this, and always attempt to get as close to the&lt;br&gt;
&gt; networks in question being verified.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Original message:&lt;br&gt;
&gt;&lt;br&gt;
&gt; Are you trolling us? I don't get it!&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; On Sun, Apr 09, 2017 at 08:19:28PM -0400, Mike Guidry wrote:&lt;br&gt;
&gt; &gt; Hello,&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Here is a document I've wrote regarding a concept to trace \
connections&lt;br&gt; &gt; even&lt;br&gt;
&gt; &gt; through TOR.   If you have any questions feel free to respond, and \
I'll&lt;br&gt; &gt; &gt; attempt to explain.   I have also considered a way to mitigate \
this&lt;br&gt; &gt; &gt; situation being allowing TOR to be traced by using \
'Transactional&lt;br&gt; &gt; &gt; Requests.'   I'll proceed to write it up, \
and post soon.&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt; &gt; I have released some other short papers as well.   It contains several&lt;br&gt;
&gt; files&lt;br&gt;
&gt; &gt; regarding a few vulnerabilities, and a couple concepts regarding things&lt;br&gt;
&gt; &gt; like quantum resistant cryptography, etc..&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; URL: &lt;a href="https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ" \
rel="noreferrer" target="_blank"&gt;https://mega.nz/#F!QnZRXKyS!&lt;wbr&gt;oluyILlMPpyJjPS57w7axQ&lt;/a&gt;&lt;br&gt;
 &gt; &gt;&lt;br&gt;
&gt; &gt; Feel free to e-mail me directly..&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Thanks,&lt;br&gt;
&gt; &gt; Mike Guidry&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170424172906</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2017-04-24 17:29:06-0400</timestampReceived><subject>[tor-dev] Tor 0.3.1 ticket triage: please do this today if you hack on Tor.</subject><body>

Hi!  We've got 3 weeks left in the 0.3.1 merge window (which closes on
May 15) so let's try to triage the tickets.  Here's what to do if you
are going to develop anything for Tor 0.3.1:

   -  Make sure that everything you are going to do for  031 is
assigned to you, in the 0.3.1 milestone, and has a points estimate.
("Points" is a rough "how many days will this take me?" guess.)

  - If there is anything assigned to you for 031 that you _won't_ be
doing for May 15, or that you won't be doing at all, please unassign
it and/or defer it from the 031-milestone.

   - If your total points estimate is over 12 or so (or whatever
number of programming days you think you will have, please defer the
less  important things, or tag them with 031-stretch.

Then, in 24 hours or so, for all the tickets that don't get an owner,
I will either defer them or mark them "too important to defer" and
look for somebody else to do them.  Let's see how this works!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170411000402</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-11 00:04:02-0400</timestampReceived><subject>Re: [tor-dev] Contents of tor-dev digest...</subject><body>

[Attachment #2 (multipart/signed)]


&gt; I'm not presenting a scientific paper.  Its an actual method that works.

You must learn how to articulate the idea without muddling it with all kinds
of other irrelevant stuff. Nobody mentioned scientific papers. Are you saying
that you don't read papers describing attacks on Tor? They are really fun to read.

&gt; You can DDoS various networks to compare against active connections on TOR,
&gt; and otherwise...

What are the assumptions of the attack?
What kind of capabilities must an attacker have?

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410044434</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-10 04:44:34-0400</timestampReceived><subject>Re: [tor-dev] Tracing TCP Connections online..</subject><body>

[Attachment #2 (multipart/signed)]


Are you trolling us? I don't get it!


On Sun, Apr 09, 2017 at 08:19:28PM -0400, Mike Guidry wrote:
&gt; Hello,
&gt; 
&gt; Here is a document I've wrote regarding a concept to trace connections even
&gt; through TOR.  If you have any questions feel free to respond, and I'll
&gt; attempt to explain.  I have also considered a way to mitigate this
&gt; situation being allowing TOR to be traced by using 'Transactional
&gt; Requests.'  I'll proceed to write it up, and post soon.
&gt; 
&gt; I have released some other short papers as well.  It contains several files
&gt; regarding a few vulnerabilities, and a couple concepts regarding things
&gt; like quantum resistant cryptography, etc..
&gt; 
&gt; URL: https://mega.nz/#F!QnZRXKyS!oluyILlMPpyJjPS57w7axQ
&gt; 
&gt; Feel free to e-mail me directly..
&gt; 
&gt; Thanks,
&gt; Mike Guidry


&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410172105</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-04-10 17:21:05-0400</timestampReceived><subject>[tor-dev] Tracing TCP Connections online..</subject><body>

re: "tcp_tracing_internet.pdf"

This appears to describe an active network modulation attack (node DoS).
Either hammer tree on nodes of the expected path and trace the modulation,
or on all but the expected path to find unmodulated.
It generally requires GPA, deploying nodes, or being one end of the path...
in order to observe the results.
And it's old news.
As noted before, since Tor (and all other current anonymous overlays)
nodes do not perform their own independant buffering, reclocking and
contracting for expected hop parameters... this vulnerability will remain.

Anyone wanting to research, code, deploy, and present on
such countermeasures would certainly be welcomed.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170410175054</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-10 17:50:54-0400</timestampReceived><subject>Re: [tor-dev] Tracing TCP Connections online..</subject><body>

[Attachment #2 (multipart/signed)]


hella old news. oh look here's POC for end to end correlation
https://var.thejh.net/git/?p=detour.git;a=blob;f=README

but why bother chatting about this since it's explicitly not
in Tor's threat model to protect against a global passive adversary?
if you want to protect against that then look into the vast mixnet literature.

anyway for breaking tor you can read lots of good papers such as
(note that none of these papers present their definition of "hacking" or
define well known terms like TCP and UDP ;-)
:

The Sniper Attack: Anonymously Deanonymizing and Disabling the Tor Network
https://www.freehaven.net/anonbib/cache/sniper14.pdf

Spying in the Dark: TCP and Tor Traffic Analysis
http://freehaven.net/anonbib/papers/pets2012/paper_57.pdf

A Practical Congestion Attack on Tor Using Long Paths
http://freehaven.net/anonbib/papers/congestion-longpaths.pdf

Trawling for Tor Hidden Services: Detection, Measurement, Deanonymization
https://www.freehaven.net/anonbib/cache/oakland2013-trawling.pdf


On Mon, Apr 10, 2017 at 01:21:05PM -0400, grarpamp wrote:
&gt; re: "tcp_tracing_internet.pdf"
&gt; 
&gt; This appears to describe an active network modulation attack (node DoS).
&gt; Either hammer tree on nodes of the expected path and trace the modulation,
&gt; or on all but the expected path to find unmodulated.
&gt; It generally requires GPA, deploying nodes, or being one end of the path...
&gt; in order to observe the results.
&gt; And it's old news.
&gt; As noted before, since Tor (and all other current anonymous overlays)
&gt; nodes do not perform their own independant buffering, reclocking and
&gt; contracting for expected hop parameters... this vulnerability will remain.
&gt; 
&gt; Anyone wanting to research, code, deploy, and present on
&gt; such countermeasures would certainly be welcomed.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403204453</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-03 20:44:53-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

Nick Mathewson &lt;nickm@torproject.org&gt; writes:

&gt; But I could be wrong!  Maybe there are subsets that are safer than
&gt; others.

So, I guess the "main" use-case for this stuff would be the current
users of control-port filters (like Subgraph and Whonix; others?).

It seems what these things *really* want is a "limited view" of the One
True Tor. So for example, you don't want to filter on the "command" or
"event" level, but a complete coherent "version" of the Tor state.

As in: see "your" STREAM events, or "your" HS_DESC events etc. Probably
the same for BW or similar events. This is really kind of the
"capability system" you don't want, though ;)

Also, I really don't know exactly what the threat-model is, but it does
seem like a good idea to limit what information a random application has
access to. Ideally, it would know precisely the things it *needs* to
know to do its job (or at least has been given explicit permission by a
user to know). That is a user might click "yes, OnionShare may add onion
services to my Tor" but in reality you have to enable: ADD_ONION, (some)
HS_DESC events, DEL_ONION (but only ones you added), etc. If you really
wanted an "on-disk" one (i.e. via HiddenServiceDir not ADD_ONION), then
you have to allow (at least some) access to SETCONF etc.

Or, maybe you're happy to let that cool visualizer-thing have access to
"read only" events like STREAM, CIRC, BW, etc if you know it's sandboxed
to have zero network access.

&gt; As above, appears to allow HS_DESC events.  It allows "GETINFO
&gt; onions/current", which can expose a list of every onion service
&gt; locally hosted, even those not launched through onionshare.

Doesn't this just show "onions that the current control connection has
added"?

&gt;   * Some applications that care about their own onion services
&gt; inadvertantly find themselves informed about everyone else's onion
&gt; services.  I wonder if there's a way around that?

HS_DESC events include the onion (in args) so could in principle be
filtered by a control-filter to only include events for certain onions
(i.e. those added by "this" control connection). In practice, this is
probably exactly what the application wants anyway.

&gt;  E.  Your thoughts here....?

Maybe this is a chance to play with a completely different, but ideally
much better "control protocol for Tor"? The general idea would be that
you have some "trusted" software (i.e. like existing control-port
filters) that on the one side connects to the existing control-port of
Tor (and is thus "completely trusted") but then exposes "the Next Great
Control Protocol" to clients.

Nevertheless, there's still the question of what information to expose
(and how) -- i.e. the threat model, and use-cases.

Of course, the same idea as above could be used except it speaks "Tor
Control Protocol" out both sides -- that is, 'just' a slightly fancier
filter.

&gt; signing-off-before-this-turns-into-a-capabilities-based-system,

Aww, that's what I want ;)

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403205522</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-04-03 20:55:22-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

[Attachment #2 (multipart/signed)]


For what it's worth, since there's a filter that's shipped and
nominally supported "officially"...

On Mon, 3 Apr 2017 14:41:19 -0400
Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; But I could be wrong!  Maybe there are subsets that are safer than
&gt; others.

https://gitweb.torproject.org/tor-browser/sandboxed-tor-browser.git/tree/src/cmd/sandboxed-tor-browser/internal/tor


The threat model I used when writing it was, "firefox is probably owned
by the CIA/NSA/FBI/FSB/DGSE/AVID/GCHQ/BND/Illuminati/Reptilians, the
filter itself is trusted".  There's a feature vs annonymity tradeoff,
so it's up to the user to enable the circuit display if they want
firefox to have visibility into certain things.

Allowed (Passed through to the tor daemon):

 * `SIGNAL NEWNYM`.  If both `addressmap_clear_transient();`
   and `rend_client_purge_state();` aren't important then it can
   disallow the call, because it rewrites the SOCKS isolation for all
   connections to the SOCKSPort.

   At one point this was entirely synthetic and not propagated.  It's
   only a huge problem if people are not using the containerized tor
   instance.

   It's worth noting that even if I change the behavior to just change
   the SOCKS auth, a misbehaving firefox can still force new circuits
   for itself.

   The sandbox code could pop up a modal dialog box asking if the user
   really wants to "New Identity" or "New Tor Circuit for this Site",
   so that "scary" behavior requires manual user intervention (since
   torbutton's confirmation is probably subverted and not to be
   trusted).

 * (Optional) `GETCONF BRIDGE`.  The Tor Browser circuit display uses
   this to filter out Bridges from the display.  Since the circuit
   display is optional, this only happens if the user explicitly
   decides that they want the circuit display.

 * (Optional) `GETINFO ns/id/`.  Required for the circuit display.
   Mostly harmless.

 * (Optional) `GETINFO ip-to-country/`.  Required for the circuit
   display.  Harmless.  Could be handled by the filter.

Synthetic (Responses generated by the filter):

 * `PROTOCOLINFO`.  Not used by Tor Browser, even though it should be.
   Everything except the tor version is synthetic.

 * `AUTHENTICATE`.  Just returns success since the filtered control
   port does not require authentication.

 * `AUTHCHALLENGE`.  Just returns an error.  See `AUTHENTICATE`.

 * `QUIT`.  Only prior to the `AUTHENTICATE` call.  Not actually used
   by Tor Browser ever.

 * `GETINFO net/listeners/socks`.  torbutton freaks out without this.
   The response synthetically generated to match what torbutton expects.

 * (Optional) `SETEVENTS STREAM`.  Required for the circuit display.
   Events are synthetically generated to only include streams that
   firefox created.

 * (Optional) `GETINFO circuit-status`.  Required for the circuit
   display.  Responses are synthetically generated to only include
   circuits that firefox created.

Denied:

 * Everything else.

&gt; So above, I see a few common patterns:
&gt; * Many restrictive filters still let the application learn enough
&gt; about the user's behavior to deanonymize them.  If the threat model is
&gt; intended to resist a hostile application, then that application can't
&gt; be allowed to communicate with the outside world, even over Tor.

  "The only truly secure system is one that is powered off, cast in a
   block of concrete and sealed in a lead-lined room with armed guards -
   and even then I have my doubts." -- spaf

&gt; * The NEWNYM-based side-channel above is a little scary.

I don't think this is solvable while giving the application the ability
to re-generate circuits.  Maybe my modal doom dialog box should run
away from the user's mouse cursor, and play klaxon sounds too.

The use model I officially support is "sandboxed-tor-browser launches a
tor daemon in a separate container dedicated to firefox".  People who
do other things, get what they deserve.

&gt; And where do we go forward from here?

If it were up to me, I'd re-write the circuit display to only show the
exit(s) when applicable, since IMO firefox is not to be trusted with
the IP address of the user's Guard.

But the circuit display when running sandboxed defaults to off, so
people that enable it, presumably fully understand the implications of
doing so.

&gt; The filters above seem to have been created by granting the
&gt; applications only the commands that they actually need, and by
&gt; filtering all the other commands.  But if we'd like filters that
&gt; actually provide some security against hostile applications using the
&gt; control port, we'll need to take a different tactic: we'll need to
&gt; define the threat models that we're trying to work within, and see
&gt; what we can safely expose under those models.

"Via the control port a subverted firefox can get certain information
about what firefox is doing, if the user configures it that way,
otherwise, all it can do is repeatedly NEWNYM" is what I think I ended
up with.

Though I have the benefit of being able to force all application network
traffic through code I control, which makes life easier.

Regards,

-- 
Yawning Angel


[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403223914</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-03 22:39:14-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

[Attachment #2 (multipart/signed)]


It's worth noting that controllers able to run SETCONF can ask the tor
process to execute arbitrary programs:

    man torrc | grep exec

So if you want a controller to have any less privileges than the tor
daemon does, you need a control port filter for SETCONF at the very
least.

Without a control port filter, what is the threat model of the
ControlSocketsGroupWritable and CookieAuthFileGroupReadable options?

Maybe the torrc documentation for those options should recommend using
one?


On Mon, Apr 03, 2017 at 02:41:19PM -0400, Nick Mathewson wrote:
&gt; Hi!
&gt; 
&gt; As you may know, the Tor control port assumes that if you can
&gt; authenticate to it, you are completely trusted with respect to the Tor
&gt; instance you have authenticated to.  But there are a few programs and
&gt; tools that filter access to the Tor control port, in an attempt to
&gt; provide more restricted access.
&gt; 
&gt; When I've been asked to think about including such a feature in Tor in
&gt; the past, I've pointed out that while filtering commands is fairly
&gt; easy, defining a safe subset of the Tor control protocol is not.  The
&gt; problem is that many subsets of the control port protocol are
&gt; sufficient for a hostile application to deanonymize users in
&gt; surprising ways.
&gt; 
&gt; But I could be wrong!  Maybe there are subsets that are safer than others.
&gt; 
&gt; Let me try to illustrate. I'll be looking at a few filter sets for example.
&gt; =====
&gt; Filters from https://github.com/subgraph/roflcoptor/filters :
&gt; 
&gt; 1. gnome-shell.json
&gt; 
&gt; This filter allows "SIGNAL NEWNYM", which can potentially be used to
&gt; deanonymize a user who is on a single site for a long time by causing
&gt; that user to rebuild new circuits with a given timing pattern.
&gt; 
&gt; 2. onioncircuits.json
&gt; 
&gt; Allows "GETINFO circuit-status" and "GETINFO stream-status", which
&gt; expose to the application a complete list of where the user is
&gt; visiting and how they are getting there.
&gt; 
&gt; 3. onionshare-gui.json
&gt; 
&gt; Allows "SETEVENTS HS_DESC", which is exposes to the application every
&gt; hidden service which the user is visiting.
&gt; 
&gt; 4. ricochet.json
&gt; 
&gt; Allows "SETEVENTS HS_DESC", for which see "onionshare-gui" above.
&gt; 
&gt; 5. tbb.json
&gt; 
&gt; Allows "SETEVENTS STREAM" and "GETINFO circuit-status", for which see
&gt; "onioncircuits" above.
&gt; 
&gt; =====
&gt; Filters from https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/etc/tor-controlport-filter.d
&gt;  :
&gt; 
&gt; 1. onioncircuits.yml
&gt; 
&gt; See onioncircuits.json above; it allows the same GETINFO stuff.
&gt; 
&gt; 2. onionshare.yml
&gt; 
&gt; As above, appears to allow HS_DESC events.  It allows "GETINFO
&gt; onions/current", which can expose a list of every onion service
&gt; locally hosted, even those not launched through onionshare.
&gt; 
&gt; 3. tor-browser.yml
&gt; 
&gt; As "tbb.json" above.
&gt; 
&gt; 4. tor-launcher.yml
&gt; 
&gt; Allows setconf of bridges, which allows the app to pick a hostile
&gt; bridge on purpose.  Similar issues with Socks*Proxy.  The app can also
&gt; use ReachableAddresses to restrict guards on the .
&gt; 
&gt; Allows SAVECONF, which lets the application make the above changes
&gt; permanent (for as long as the torrc file is persisted)
&gt; =====
&gt; 
&gt; So above, I see a few common patterns:
&gt; * Many restrictive filters still let the application learn enough
&gt; about the user's behavior to deanonymize them.  If the threat model is
&gt; intended to resist a hostile application, then that application can't
&gt; be allowed to communicate with the outside world, even over Tor.
&gt; 
&gt; * Many restrictive filters block SETCONF and SAVECONF.  These two
&gt; changes together should be enough to make sure that a hostile
&gt; application can only deanonymize _current_ traffic, not future Tor
&gt; traffic. Is that the threat model?  It's coherent, at least.
&gt; 
&gt; * Some applications that care about their own onion services
&gt; inadvertantly find themselves informed about everyone else's onion
&gt; services.  I wonder if there's a way around that?
&gt; 
&gt; * The NEWNYM-based side-channel above is a little scary.
&gt; 
&gt; 
&gt; And where do we go forward from here?
&gt; 
&gt; The filters above seem to have been created by granting the
&gt; applications only the commands that they actually need, and by
&gt; filtering all the other commands.  But if we'd like filters that
&gt; actually provide some security against hostile applications using the
&gt; control port, we'll need to take a different tactic: we'll need to
&gt; define the threat models that we're trying to work within, and see
&gt; what we can safely expose under those models.
&gt; 
&gt; Here are a few _possible_ models we could think about, but I'd like to
&gt; hear from app developers and filter authors and distributors more
&gt; about what they think:
&gt; 
&gt; A. Completely trusted controller.  (What we have now)
&gt; 
&gt; B. Controller is untrusted, but is blocked from exfiltrating information.
&gt; B.1. Controller can't connect to the network at all.
&gt; B.2. Controller can't connect to the network except over tor.
&gt; 
&gt; C. Controller is trusted wrt all current private information, but
&gt; future private information must remain secure.
&gt; 
&gt; D. Controller is trusted wrt a fraction of the requests that the
&gt; clients are handling. (For example, all requests going over a single
&gt; SOCKSPort, or all ADD_ONION requests that it makes itself.)
&gt; 
&gt; E.  Your thoughts here....?
&gt; 
&gt; 
&gt; 
&gt; 
&gt; signing-off-before-this-turns-into-a-capabilities-based-system,
&gt; -- 
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170404121318</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-04-04 12:13:18-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

On Mon, Apr 3, 2017 at 6:39 PM, dawuud &lt;dawuud@riseup.net&gt; wrote:
&gt;
&gt;
&gt; It's worth noting that controllers able to run SETCONF can ask the tor
&gt; process to execute arbitrary programs:
&gt;
&gt;     man torrc | grep exec
&gt;
&gt; So if you want a controller to have any less privileges than the tor
&gt; daemon does, you need a control port filter for SETCONF at the very
&gt; least.

Yes, that is necessary.  I question, however, whether it is sufficient.

&gt; Without a control port filter, what is the threat model of the
&gt; ControlSocketsGroupWritable and CookieAuthFileGroupReadable options?

The same as with the rest of the control port: all authorized
controllers have full control over the Tor process.

(Not saying it's a _good_ threat model, but there it is.)

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170404154641</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-04-04 15:46:41-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

Hi Nick. Just a quick note that something I've wanted from time to
time is a 'make the control port read-only' option so only GETINFO,
GETCONF, events, etc would work. Yes, these could be used to
deanonymize a user, but it could provide assurance the controller
doesn't tamper with tor. This has been of interest to me since nyx
(aka arm) is primarily a read-only monitor and this could provide
users with an assurance that it's not doing anything to their tor
instance.

Besides that, 'makes the control port read-only' is a pretty straight
forward, simple to understand capability for a torrc option to have.

Cheers! -Damian

On Mon, Apr 3, 2017 at 11:41 AM, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; Hi!
&gt; 
&gt; As you may know, the Tor control port assumes that if you can
&gt; authenticate to it, you are completely trusted with respect to the Tor
&gt; instance you have authenticated to.  But there are a few programs and
&gt; tools that filter access to the Tor control port, in an attempt to
&gt; provide more restricted access.
&gt; 
&gt; When I've been asked to think about including such a feature in Tor in
&gt; the past, I've pointed out that while filtering commands is fairly
&gt; easy, defining a safe subset of the Tor control protocol is not.  The
&gt; problem is that many subsets of the control port protocol are
&gt; sufficient for a hostile application to deanonymize users in
&gt; surprising ways.
&gt; 
&gt; But I could be wrong!  Maybe there are subsets that are safer than others.
&gt; 
&gt; Let me try to illustrate. I'll be looking at a few filter sets for example.
&gt; =====
&gt; Filters from https://github.com/subgraph/roflcoptor/filters :
&gt; 
&gt; 1. gnome-shell.json
&gt; 
&gt; This filter allows "SIGNAL NEWNYM", which can potentially be used to
&gt; deanonymize a user who is on a single site for a long time by causing
&gt; that user to rebuild new circuits with a given timing pattern.
&gt; 
&gt; 2. onioncircuits.json
&gt; 
&gt; Allows "GETINFO circuit-status" and "GETINFO stream-status", which
&gt; expose to the application a complete list of where the user is
&gt; visiting and how they are getting there.
&gt; 
&gt; 3. onionshare-gui.json
&gt; 
&gt; Allows "SETEVENTS HS_DESC", which is exposes to the application every
&gt; hidden service which the user is visiting.
&gt; 
&gt; 4. ricochet.json
&gt; 
&gt; Allows "SETEVENTS HS_DESC", for which see "onionshare-gui" above.
&gt; 
&gt; 5. tbb.json
&gt; 
&gt; Allows "SETEVENTS STREAM" and "GETINFO circuit-status", for which see
&gt; "onioncircuits" above.
&gt; 
&gt; =====
&gt; Filters from https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/etc/tor-controlport-filter.d
&gt;  :
&gt; 
&gt; 1. onioncircuits.yml
&gt; 
&gt; See onioncircuits.json above; it allows the same GETINFO stuff.
&gt; 
&gt; 2. onionshare.yml
&gt; 
&gt; As above, appears to allow HS_DESC events.  It allows "GETINFO
&gt; onions/current", which can expose a list of every onion service
&gt; locally hosted, even those not launched through onionshare.
&gt; 
&gt; 3. tor-browser.yml
&gt; 
&gt; As "tbb.json" above.
&gt; 
&gt; 4. tor-launcher.yml
&gt; 
&gt; Allows setconf of bridges, which allows the app to pick a hostile
&gt; bridge on purpose.  Similar issues with Socks*Proxy.  The app can also
&gt; use ReachableAddresses to restrict guards on the .
&gt; 
&gt; Allows SAVECONF, which lets the application make the above changes
&gt; permanent (for as long as the torrc file is persisted)
&gt; =====
&gt; 
&gt; So above, I see a few common patterns:
&gt; * Many restrictive filters still let the application learn enough
&gt; about the user's behavior to deanonymize them.  If the threat model is
&gt; intended to resist a hostile application, then that application can't
&gt; be allowed to communicate with the outside world, even over Tor.
&gt; 
&gt; * Many restrictive filters block SETCONF and SAVECONF.  These two
&gt; changes together should be enough to make sure that a hostile
&gt; application can only deanonymize _current_ traffic, not future Tor
&gt; traffic. Is that the threat model?  It's coherent, at least.
&gt; 
&gt; * Some applications that care about their own onion services
&gt; inadvertantly find themselves informed about everyone else's onion
&gt; services.  I wonder if there's a way around that?
&gt; 
&gt; * The NEWNYM-based side-channel above is a little scary.
&gt; 
&gt; 
&gt; And where do we go forward from here?
&gt; 
&gt; The filters above seem to have been created by granting the
&gt; applications only the commands that they actually need, and by
&gt; filtering all the other commands.  But if we'd like filters that
&gt; actually provide some security against hostile applications using the
&gt; control port, we'll need to take a different tactic: we'll need to
&gt; define the threat models that we're trying to work within, and see
&gt; what we can safely expose under those models.
&gt; 
&gt; Here are a few _possible_ models we could think about, but I'd like to
&gt; hear from app developers and filter authors and distributors more
&gt; about what they think:
&gt; 
&gt; A. Completely trusted controller.  (What we have now)
&gt; 
&gt; B. Controller is untrusted, but is blocked from exfiltrating information.
&gt; B.1. Controller can't connect to the network at all.
&gt; B.2. Controller can't connect to the network except over tor.
&gt; 
&gt; C. Controller is trusted wrt all current private information, but
&gt; future private information must remain secure.
&gt; 
&gt; D. Controller is trusted wrt a fraction of the requests that the
&gt; clients are handling. (For example, all requests going over a single
&gt; SOCKSPort, or all ADD_ONION requests that it makes itself.)
&gt; 
&gt; E.  Your thoughts here....?
&gt; 
&gt; 
&gt; 
&gt; 
&gt; signing-off-before-this-turns-into-a-capabilities-based-system,
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405082007</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2017-04-05 08:20:07-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

Nick Mathewson:
[...]
&gt; 5. tbb.json

&gt; Allows "SETEVENTS STREAM" and "GETINFO circuit-status", for which see
&gt; "onioncircuits" above.

&gt; =====
&gt; Filters from https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/etc/tor-controlport-filter.d
&gt; 

[...]

&gt; 3. tor-browser.yml

&gt; As "tbb.json" above.

FWIW, I think that Tails' control port filter exposes to Tor Browser
only the streams and circuits it has initiated itself. I'll let anonym
comment further on this.

Cheers,
-- 
intrigeri
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408134521</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-04-08 13:45:21-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; Yes, that is necessary.  I question, however, whether it is sufficient.

Sufficient for what purpose?

It *is* sufficient for the purpose of preventing Subgraph sandboxed
applications from escaping it's sandbox via the Tor control
port. Actually, one of the Subgraph guys figured this out and that's
why they wanted a Tor control port filter.

I can see how our intentions for this tool (roflcoptor) could have
been misleading since we never explicitly/publicly stated the above as
the motivation for tor control port filtration.

I think now that the other "Tor integrated Linux distributions" have more
or less caught up with Subgraph, I feel comfortable telling people how
easy it is to get tor to run arbitrary programs via the control port.

Looks like as per usual Yawning Angel did the exact correct thing and
made the Tor hardened browser bundle filter the control port to
disallow SETCONF.  Further, he mentioned to me on irc that the tor
proc is also sandboxed..  so yeah that sounds thorough and proper.


cheers from Montreal!

David Stainton


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410135300</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-04-10 13:53:00-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

Nick Mathewson:
&gt; Hi!
&gt; 
&gt; As you may know, the Tor control port assumes that if you can
&gt; authenticate to it, you are completely trusted with respect to the Tor
&gt; instance you have authenticated to.  But there are a few programs and
&gt; tools that filter access to the Tor control port, in an attempt to
&gt; provide more restricted access.
&gt; 
&gt; When I've been asked to think about including such a feature in Tor in
&gt; the past, I've pointed out that while filtering commands is fairly
&gt; easy, defining a safe subset of the Tor control protocol is not.  The
&gt; problem is that many subsets of the control port protocol are
&gt; sufficient for a hostile application to deanonymize users in
&gt; surprising ways.
&gt; 
&gt; But I could be wrong!  Maybe there are subsets that are safer than others.
&gt; 
&gt; Let me try to illustrate. I'll be looking at a few filter sets for example.
[...]
&gt; Filters from https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/etc/tor-controlport-filter.d
&gt; 

Small note: we've renamed tor-controlport-filter to onion-grater, to not infringe on \
the Tor trademark. :) 

&gt; 1. onioncircuits.yml
&gt; 
&gt; See onioncircuits.json above; it allows the same GETINFO stuff.

The whole point of onioncircuits is to present all Tor circuit/stream state to the \
users since they (IIRC) feel that Tor is too opaque without this (and I'm sure the \
Tor Browser added its per-tab circuit view for similar reasons). In other words, the \
point of onioncircuits *is* to expose this information. Hence I guess this all boils \
down balancing the security consequences of this (e.g. user compromise =&gt; full Tor \
state leak) vs the desired transparency.

As for Tails, my impression of our current threat model here is that we don't protect \
against the main user being compromised, so we certainly won't sacrifice the \
transparency desired by our users to block this leak -- there are probably equally \
bad leaks around already so that sacrifice would be pointless. But we are \
incrementally working towards this by limiting information leaks (e.g. control port \
filtering) and sandboxing applications to protect full user compromise so we *do* \
care about these things. At the point where we feel we can start caring about this \
for real we'll have to revisit this point.

&gt; 2. onionshare.yml
&gt; 
&gt; As above, appears to allow HS_DESC events.

Explanation: modern (ADD_ONION instead of SETCONF HiddenService{Dir,Port}) onionshare \
uses stem's create_ephemeral_hidden_service() with `await_publication = True`, which \
means waiting for the corresponding HS_DESC event. I believe the roflcoptor filter \
was written for the "old" onionshare only. 

&gt; It allows "GETINFO
&gt; onions/current", which can expose a list of every onion service
&gt; locally hosted, even those not launched through onionshare.

I think this can be disallowed; in fact, when looking at the onionshare and stem \
sources I don't see why this would ever be used by onionshare.

&gt; 3. tor-browser.yml
&gt; 
&gt; As "tbb.json" above.

Not quite! As intrigeri pointed out, this filter sets `restrict-stream-events: true` \
which gives what meejah called a "limited view" of the STREAM events, namely only \
those "belonging" to the client/controller (implementation: for each event look up \
which PID that has opened the socket with the event's source address/port, then match \
PIDs to determine whether it should be suppressed or not).

So, how bad is "GETINFO circuit-status" with only the "limited" STREAM view)? Well, \
by knowing all circuits' exit nodes an attacker that also observes the traffic of \
these exit nodes knows a bit more than what we are comfortable with. :/

I guess treating "GETINFO circuit-status" specially with a `restrict-circuit-status` \
option that, when set, suppresses circuits that doesn't have any stream belonging to \
the client. But the same goes for CIRC events and "GETINFO stream-status", so, in \
fact, what about these options:

* restrict-circuit-view: when enabled:
  - "GETINFO circuit-status" will only show circuits that has some stream attached \
                that belongs to the controller.
  - CIRC events are dropped unless some stream attached to the circuit in question \
                belongs to the controller.
* restrict-stream-view (replacing the current `restrict-stream-events`):
  - "GETINFO stream-status" will only show streams belonging to the controller.
  - STREAM events are dropped unless they belong to the controller.

Does this make sense? What other bits of sensitive internal Tor state accessible for \
controllers have I missed?

BTW, I guess a `restrict-onion-view` would also make sense for HS_DESC events and \
"GETINFO onions/current", but I see no general way to learn what application an onion \
"belongs" to. The filter could keep track of it, but such tracking would be lost if \
restarted (and not tracked at all if the onion was added before the filter started). \
A general solution would depend on little-t tor tracking this information, e.g. the \
PID of the controller that asked for an onion to be added. That seems ugly, though.

&gt; 4. tor-launcher.yml
&gt; 
&gt; Allows setconf of bridges, which allows the app to pick a hostile
&gt; bridge on purpose.  Similar issues with Socks*Proxy.  The app can also
&gt; use ReachableAddresses to restrict guards on the .

Being able to set these options arbitrarily is Tor Launcher's purpose, so I'm fine \
with all this. We treat it as a "trusted" application in Tails, and I'm having \
difficulties imaging how it could be any different.

&gt; Allows SAVECONF, which lets the application make the above changes
&gt; permanent (for as long as the torrc file is persisted)

Indeed! In general, Tails users have control of exactly what should persist, so it \
depends on their own threat model here. At the moment Tails itself does nothing to \
support making torrc persistent, but if we could make only the part of torrc that Tor \
Launcher sets persistent I'm sure we would (preferably on a per-network basis).

&gt; So above, I see a few common patterns:
[...]
&gt; * Many restrictive filters block SETCONF and SAVECONF.  These two
&gt; changes together should be enough to make sure that a hostile
&gt; application can only deanonymize _current_ traffic, not future Tor
&gt; traffic. Is that the threat model?  It's coherent, at least.

FWIW, Tails has this threat model in general.

&gt; * The NEWNYM-based side-channel above is a little scary.

Agreed! NEWNYM is too broad when multiple clients use the same tor instance -- right \
now a compromised Tor Browser would be able to influence all other torified \
applications. I'd be great if instead of NEWNYM the "New identity" feature would use \
the same mechanism as for "New Tor Circuit for this Site" for all tabs' domains \
before clearing the browser session; this way, if any of the domains are revisited, \
it would be with a new circuit, so it is as if we had issued a NEWNYM scoped only for \
the Tor Browsers circuits, so other applications are unaffected.

&gt; And where do we go forward from here?
&gt; 
&gt; The filters above seem to have been created by granting the
&gt; applications only the commands that they actually need, and by
&gt; filtering all the other commands. But if we'd like filters that
&gt; actually provide some security against hostile applications using the
&gt; control port, we'll need to take a different tactic: we'll need to
&gt; define the threat models that we're trying to work within, and see
&gt; what we can safely expose under those models.
&gt; 
&gt; Here are a few _possible_ models we could think about, but I'd like to
&gt; hear from app developers and filter authors and distributors more
&gt; about what they think:
&gt; 
&gt; A. Completely trusted controller.  (What we have now)

It can be argued that Tor Launcher (and similar) could be in this category since the \
capabilities it must have in order to do its job are so severe that preventing other \
capabilities won't make much difference. OTOH, if there are mechanisms for limiting \
this, why not use them? And we do need such mechanisms to support the other relevant \
use cases.

&gt; B. Controller is untrusted, but is blocked from exfiltrating information.
&gt; B.1. Controller can't connect to the network at all.
&gt; B.2. Controller can't connect to the network except over tor.

In Tails, B.2 is strongly enforced for all network usage, not just controllers, but \
B.1 less so; for instance, onioncircuits runs as the normal user, but any application \
under that user is allowed to connect to the Internet through Tor, so if that user is \
compromised the information onionshare has access to can leak out on the network (but \
through Tor).

B.1 seems really desirable for Tor state visualisation applications like \
onioncircuits, but I fear only heavily compartmentalized systems like Qubes and \
Whonix can go in this direction. B.2 seems like something that only can be achieved \
in systems where Tor is enforced for all connections on at least the OS-level, like \
in Tails and Whonix, but that threat model already strictly includes this one, so it \
seems irrelevant.

&gt; D. Controller is trusted wrt a fraction of the requests that the
&gt; clients are handling. (For example, all requests going over a single
&gt; SOCKSPort, or all ADD_ONION requests that it makes itself.)

I feel work in this direction is highly necessary for many threat models and \
applications, not least Tor Browser itself vs. Tor's stream state. As I mentioned \
above, Tails' control port filter allows a controller to only see its own Tor stream \
state, and that should be expanded to circuits and onions too. It would be even nicer \
if tor internally tracked usage of both SocksPort and ControlPort on an \
application-level, and controller commands would be scoped accordingly: controllers \
would only be able to see stream/circuit/hidden service/etc state belonging to them. \
Just to give you an idea, the tracking could be by PID (which is pretty weak).

Imagine that ControlPort can take a "RestrictedView" flag. When set, controllers will \
get a view of Tor's state (streams, circuits, onions etc) restricted to what \
"belongs" to them, e.g. it only sees streams for connections itself made via the \
SocksPort. Tor would then have to internally track who these things belong to, which \
could be done by PID, which is pretty weak, but I bet there are more convincing ways. \
A crappy idea would be that the cookie used for authenticating to the ControlPort \
would be unique for the application and also used for the SocksPort (via SOCKS \
authentication), so that when the "RestrictedView" flag is set, controllers only see \
things originating from the ControlPort and SocksPorts that have used the same \
cookie.

Other interesting ideas?

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410153524</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-10 15:35:24-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

anonym &lt;anonym@riseup.net&gt; writes:

&gt;&gt; It allows "GETINFO onions/current", which can expose a list of every
&gt;&gt; onion service locally hosted, even those not launched through
&gt;&gt; onionshare.

&gt; I think this can be disallowed; in fact, when looking at the
&gt; onionshare and stem sources I don't see why this would ever be used by
&gt; onionshare.

I may have said this already, but I think the original comment is wrong:
this only lists ephemeral onions created by the current control
connection so I don't believe there's any information leak here anyway.

&gt; BTW, I guess a `restrict-onion-view` would also make sense for HS_DESC
&gt; events [..]

Yes, I think this would be good. To determine if a control-connection
owns an onion or not, I think you could either use "GETINFO
onions/current" (to ask Tor) or just remember the answers from any
ADD_ONION on "this" connection (and then match against the args in the
HS_DESC event).

If the filter is re-started, all the control connections will be lost
at which point any non-"detached" onions will vanish anyway.

&gt; Imagine that ControlPort can take a "RestrictedView" flag. When set,
&gt; controllers will get a view of Tor's state (streams, circuits, onions
&gt; etc) restricted to what "belongs" to them, e.g. it only sees streams
&gt; for connections itself made via the SocksPort. Tor would then have to
&gt; internally track who these things belong to, which could be done by
&gt; PID, which is pretty weak, but I bet there are more convincing ways.

Obviously as per my other post I agree with fragmented / limited views
given to "real" applications of the control-port. However, personally I
don't see the point of implementing this in 'tor' itself -- existing
control-port filters are "fairly" limited code, typically in "safer than
C" languages anyway. So then you have the situation where there's a
single trusted application (the filter) conencted to the Tor
control-port.

Ultimately, it would probably be best if there was "a" robust
control-port filter that shipped as part of a Tor release. So if that
means "must implement it in C inside Tor" I guess so be it.

Maybe this would be a good target for "experiment with Rust" if anyone's
excited about writing control-port code in Rust...?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403122006</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-03 12:20:06-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

Nick Mathewson &lt;nickm@torproject.org&gt; writes:

&gt; Hi !  I'll make some comments here on the draft onion naming API at
&gt;
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt
&gt;
&gt; (Some of  these are probably things you already meant, or already said
&gt; elsewhere.)
&gt;

Thanks for the timely comments! I'm replying to this thread with my
thoughts, but I didn't have time to actually fix the proposal. I'll do
that in The Future.

&gt;
&gt;
&gt; Section 2.1 and elsewhere:
&gt;
&gt; I suggest that we require all address suffixes to end with .onion;
&gt; other TLDs are not reserved like .onion is, and maybe we shouldn't
&gt; squat any we haven't squatted already.   I think we might also want to
&gt; have all output addresses end with .onion too.
&gt;
&gt; I suggest  also that we might want to reserve part of the namespace
&gt; for standardized namespaces and some for experimental or local ones.
&gt; Like, if we standardize on namecoin that could be .bit.onion, but if
&gt; we don't, it could be .bit.x.onion.
&gt;

I have mixed feelings about keeping the .onion suffix.

One one hand it seems like The Right Thing to do, since we managed to
get .onion standarized in the IETF which comes with various
benefits. Also, starting to squat other tlds arbitrarily seems like a
silly thing to do.

However, I also dislike asking users to visit something.bit.onion
instead of something.bit, since people are not used to the second tld
having a semantic meaning, and I can imagine people getting very
confused about what it means.

Anyhow, it seems like maintaining the .onion suffix is the right
approach here.

&gt; I finally suggest that we distinguish names that are supposed to be
&gt; global from ones that aren't.
&gt;
&gt; Section 2.3:
&gt;
&gt; How about we require that the suffixes be distinct?  If we do that, we
&gt; can drop this "priority" business and we can make the system's
&gt; behavior much easier to understand and explain.
&gt;

Definitely agreed on this simplification suggestion. The priority
feature has confused people, and it's not that useful. In the future we
could reinstall it if we consider it practical.

&gt; Let's require that the TLDs actually begin with a dot.  (That is, I
&gt; think that ".foo.onion" can include "bar.foo.onion", but I don't like
&gt; the idea of "foo.onion" including "barfoo.onion".)
&gt;

Makes sense.

&gt;
&gt; Section 2.3.1:
&gt;
&gt; Does the algorithm apply recursively?  That is, can more then one
&gt; plugin rewrite the same address, or can one plugin rewrite its own
&gt; output?
&gt;
&gt; (I would suggest "no".)
&gt;

Agreed no. We should specify it.

&gt; I think there should be a way for a plugin to say "This address
&gt; definitely does not exist" and stop resolution.  Otherwise no plugin
&gt; can be authoritative over a TLD.
&gt;

Agreed.

&gt; Section 2.5.1:
&gt;
&gt; Is the algorithm allowed to produce non-onion addresses?  Should it be?
&gt;

I'd say no. We should specify this. 

&gt; Must query IDs be unique?  Over what scope must they be unique? Who
&gt; enforces that?
&gt;

I think the NS API client should enforce that, and maybe the server
should throw an error if it's not unique.

We should specify.

&gt; May query IDs be negative?  Can they be arbitrarily large?
&gt;

We should specify this too.

&gt; I think result should indeed be optional on failure.
&gt;
&gt; Section 2.5.1 and 2.5.2:
&gt;
&gt; We should specify what exactly clients and plugins will do if they
&gt; receive an unrecognized message, or a malformed message.
&gt;

Agreed.

&gt; Section 2.5.3.
&gt;
&gt; See security notes on caching below; client-side caching can lead to
&gt; undesirable results.
&gt;

Agreed.

&gt; As noted above, I agree with requiring all result addresses to be .onion.
&gt;
&gt; Section 3.1:
&gt;
&gt; I prefer the "put everything under .onion" option.   I also think that
&gt; we should require that the second-level domain be 10 characters or
&gt; less, to avoid confusion with existing onion addresses.
&gt;

We should think more about this, but seems reasonable.

&gt;
&gt;
&gt; General questions:
&gt;
&gt; I know we've done stdout/stdin for communication before, but I wonder
&gt; if we should consider how well it's worked for us.  The portability on
&gt; Windows can be kind of hard.
&gt;
&gt; Two alternatives are TCP and named pipes.
&gt;
&gt; Another alternative might be just using the DNS protocol and asking
&gt; for some kind of "ONION_CNAME" record.  (DNS is ugly, but at least
&gt; it's nice and standard.)
&gt;

Yup, I think this is an _important_ open part of the proposal that we
should figure out sooner than later. Ideally, we should consult Nathan
or mtigas or other members of our mobile team. I wish I had done this
during the dev meeting...

TCP seems like a plausible alternative here. Unfortunately, we will have
to invent a new protocol for that tho.

&gt;
&gt; Security notes:
&gt;
&gt; I'd like to know what the browser people think about the risks here of
&gt; (eg) probing to see whether the user has certain extensions installed
&gt; or names mapped.  Maybe .hosts.onion should only be allowed in the
&gt; address bar, not in HREF attributes et al?
&gt;

Yep, David F. also mentioned this problem. We should think of how to
address it. Browser people might have good ideas here indeed.

&gt; We might want to think about cache-related timing attacks here.
&gt; Perhaps we should have a "no caching" rule.
&gt;
&gt; We should probably add a security notes section for how to write
&gt; plugins that aren't dangerous: a bad plugin potentially breaks user
&gt; anonymity.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403125001</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-04-03 12:50:01-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

On Mon, Apr 3, 2017 at 8:20 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; Nick Mathewson &lt;nickm@torproject.org&gt; writes:
&gt;&gt; Section 2.1 and elsewhere:
&gt;&gt;
&gt;&gt; I suggest that we require all address suffixes to end with .onion;
&gt;&gt; other TLDs are not reserved like .onion is, and maybe we shouldn't
&gt;&gt; squat any we haven't squatted already.   I think we might also want to
&gt;&gt; have all output addresses end with .onion too.
&gt;&gt;
&gt;&gt; I suggest  also that we might want to reserve part of the namespace
&gt;&gt; for standardized namespaces and some for experimental or local ones.
&gt;&gt; Like, if we standardize on namecoin that could be .bit.onion, but if
&gt;&gt; we don't, it could be .bit.x.onion.
&gt;&gt;
&gt;
&gt; I have mixed feelings about keeping the .onion suffix.
&gt;
&gt; One one hand it seems like The Right Thing to do, since we managed to
&gt; get .onion standarized in the IETF which comes with various
&gt; benefits. Also, starting to squat other tlds arbitrarily seems like a
&gt; silly thing to do.
&gt;
&gt; However, I also dislike asking users to visit something.bit.onion
&gt; instead of something.bit, since people are not used to the second tld
&gt; having a semantic meaning, and I can imagine people getting very
&gt; confused about what it means.

Indeed.  And I'm not only concerned about people becoming confused: I
am also worried about confused programs.

Right now, it is easy to answer the question "will Tor handle this
address specially" -- the only special addresses are the ones ending
with ".onion", and the legacy suffices ".exit" and ".noconnect" as
documented as address-spec.txt.  But if we allowed arbitrary TLDs in
this proposal, then _any_ hostname would potentially be an address
that Tor would handle specially.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170404213746</emailId><senderName>str4d</senderName><senderEmail>str4d@i2pmail.org</senderEmail><timestampReceived>2017-04-04 21:37:46-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 04/04/2017 12:50 AM, Nick Mathewson wrote:
&gt; On Mon, Apr 3, 2017 at 8:20 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; Nick Mathewson &lt;nickm@torproject.org&gt; writes:
&gt;&gt;&gt; Section 2.1 and elsewhere:
&gt;&gt;&gt;
&gt;&gt;&gt; I suggest that we require all address suffixes to end with .onion;
&gt;&gt;&gt; other TLDs are not reserved like .onion is, and maybe we shouldn't
&gt;&gt;&gt; squat any we haven't squatted already.   I think we might also want to
&gt;&gt;&gt; have all output addresses end with .onion too.
&gt;&gt;&gt;
&gt;&gt;&gt; I suggest  also that we might want to reserve part of the namespace
&gt;&gt;&gt; for standardized namespaces and some for experimental or local ones.
&gt;&gt;&gt; Like, if we standardize on namecoin that could be .bit.onion, but if
&gt;&gt;&gt; we don't, it could be .bit.x.onion.

I2P has been doing this for years with *.b32.i2p for unique identifiers
vs *.i2p for hosts.txt-style naming, and I'm planning on writing an I2P
proposal to create a formal registry of 2LDs that implementations need
to know about, so we have the ability to expand in future under the .i2p
TLD. So I don't think it's a stretch for users to understand (although I
have other concerns, see below), and I'd be keen to have a common
standard for specifying subdomains that we can use for interoperability :)

&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; I have mixed feelings about keeping the .onion suffix.
&gt;&gt;
&gt;&gt; One one hand it seems like The Right Thing to do, since we managed to
&gt;&gt; get .onion standarized in the IETF which comes with various
&gt;&gt; benefits. Also, starting to squat other tlds arbitrarily seems like a
&gt;&gt; silly thing to do.

This is the safest space for Tor to work in from a technical
perspective. More specifically, I've been following discussion in DNSOP
ever since the original special-use names draft (containing .onion, .i2p
etc) was posted, and there is no way that the IETF is going to
standardise any new TLD for non-DNS (see below). It's increasingly
unlikely that the non-.onion TLDs in the draft will either (without
industry support like .onion had), so no CA-supported SSL certs for I2P :(

&gt;&gt;
&gt;&gt; However, I also dislike asking users to visit something.bit.onion
&gt;&gt; instead of something.bit, since people are not used to the second tld
&gt;&gt; having a semantic meaning, and I can imagine people getting very
&gt;&gt; confused about what it means.

There's also the problem of transport-agnosticism. Assume there's some
FOOnet that is created for naming that we all decide we want to use.
Users would probably expect that FOOnet names all exist in the same
space, which would not be the case if we had *.foo.onion, *.foo.i2p,
etc. I'm thinking along the lines of IPv4 vs IPv6, where you can have a
DNS name delegate to both via A and AAAA records; you wouldn't want the
name changing just because the underlying transport changed.

&gt; 
&gt; Indeed.  And I'm not only concerned about people becoming confused: I
&gt; am also worried about confused programs.
&gt; 
&gt; Right now, it is easy to answer the question "will Tor handle this
&gt; address specially" -- the only special addresses are the ones ending
&gt; with ".onion", and the legacy suffices ".exit" and ".noconnect" as
&gt; documented as address-spec.txt.  But if we allowed arbitrary TLDs in
&gt; this proposal, then _any_ hostname would potentially be an address
&gt; that Tor would handle specially.
&gt; 

There is a draft currently in working-group last call that will specify
a .alt TLD (or possibly .alt.arpa, it's still being debated [1]), that
future non-DNS names will have to be under. Part of the proposed benefit
is that with a standard TLD, DNS resolvers can just stub out that entire
namespace, ie.

    if fqdn.endswith('.alt'):
       do_non_dns_lookup(fqdn)
    else:
       gethostbyname(fqdn)

Presumably, browsers would do so as well. So it's possible that you
could have *.foo.alt as the URI, but only *.foo is displayed in the
browser (along with some chrome indicating it is non-DNS), similar to
how only the base domain name is shown for some URIs (IIRC that's an SSL
cert verification thing).

The question then is how a browser would handle *.foo being typed in.
You wouldn't want to query DNS and then try *.foo.alt afterwards, as
that would be terrible for privacy, but if they tried *.foo.alt first,
and didn't have FOOnet installed, should they try *.foo in the DNS? The
browser either needs to know the full contents of *.alt (which is not
possibly because by design it will have no official registration), or
every registered TLD in DNS (which won't ever be added as a restriction
because of various legacy local-net vendor TLDs like *.home). So with
this approach, it's likely that .alt would need to stick around.

Lots to think about here...

str4d

[0] https://tools.ietf.org/html/draft-ietf-dnsop-alt-tld-08
[1] https://www.ietf.org/mail-archive/web/dnsop/current/msg19983.html


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405211243</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-05 21:12:43-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Nick!

Nick Mathewson:
&gt; Section 2.1 and elsewhere:
&gt; 
&gt; I suggest that we require all address suffixes to end with .onion; 
&gt; other TLDs are not reserved like .onion is, and maybe we shouldn't 
&gt; squat any we haven't squatted already.

FWIW it's not at all clear to me that this is a concern that IETF or
ICANN will care about.  Most DNS recursive servers (e.g. Unbound)
allow squatting on arbitrary TLD's (this is often used for corporate
systems that use internal TLD's, but we use it for Namecoin as well),
and to my knowledge no one has complained to Unbound about the ability
to misuse this.

Generally I view a pluggable naming system as useful for use cases
besides simply human-readable .onion names.  It's also useful for any
of the various use cases for which people will fiddle with their local
DNS setup (including but not limited to: firewalling, ad-blocking,
debugging infrastructure, internal naming systems that have nothing to
do with .onion, alternate DNS roots like OpenNIC, decentralized naming
systems like Namecoin that aren't being used for .onion).  Yes, you
*could* do this with the control port (OnioNS does this, and Namecoin
has an internal beta of this as well that we've chosen not to release
because we want to engage on Prop279 to make sure that what we release
meets people's needs).  But the control port is extremely dangerous to
expose to untrusted software, so it makes sense to use a dedicated
naming API.  Forcing all these other use cases to use a clunkier, less
secure setup than the "human-readable .onion names" use case is likely
to stifle innovation, lead to duplicated code with different sets of
bugs, and/or discourage use of the naming API because software authors
don't want to rule out the possibility of exploring other use cases
later on.

I can totally see a policy making sense that *the naming systems
distributed by Tor officially* would only allow .onion as input
addresses, but since it sounds like the intent of this proposal is to
enable experiments that aren't officially endorsed by Tor, it's not
clear to me that such a policy would have much immediate effect.

There will probably be a news post posted to the Namecoin website in
the next week or so that's relevant to this point, but I won't include
it here since it's only reviewed by 3 of the Namecoin developers at
this time and I can't rule out needing to make edits to it.  I'll
provide it in this thread when it's posted.  (If for some reason this
issue urgently needs to be decided and waiting a week will derail that
schedule, let me know and I'll see what I can do.)

Also see my next point below:

&gt; I think we might also want to have all output addresses end with
&gt; .onion too.

This definitely makes sense from a UX point of view: everyone already
knows what .onion services are, and they have certain expectations for
what security properties they provide, so just because the 2nd-level
domain isn't a base32 public key shouldn't mean that all those
security properties don't apply.  Using the 2nd level domain to choose
what type of naming system is in use (e.g. .bit.onion) certainly makes
sense here.  But, there are real use cases where users will want the
output address to not be a .onion address: see my point above.

I think a perfectly reasonable policy would be: "If the input name is
.onion, then the output name must also be .onion; otherwise no
restrictions on the output name exist."  This preserves the UX
properties that people expect from .onion, doesn't restrict the other
use cases I mentioned above, and is minimal enough in terms of code
and spec complexity that I expect it would be easy to audit.

&gt; I suggest  also that we might want to reserve part of the
&gt; namespace for standardized namespaces and some for experimental or
&gt; local ones. Like, if we standardize on namecoin that could be
&gt; .bit.onion, but if we don't, it could be .bit.x.onion.

I don't have a particularly strong opinion on this, although I do
prefer the UX of .bit.onion over .bit.x.onion.  How many naming
systems are we expecting to actually be used here?  I wouldn't expect
any collisions to occur here due to the small number of naming systems
that are even expressing interest -- no collision with .bit exists
even in the wider DNS world 6 years after Namecoin was founded.  Is
there a threat model component here that I'm not seeing?

&gt; I finally suggest that we distinguish names that are supposed to
&gt; be global from ones that aren't.

This makes sense intuitively; is there a specific motivation for this
constraint?

&gt; Section 2.3:
&gt; 
&gt; How about we require that the suffixes be distinct?  If we do that,
&gt; we can drop this "priority" business and we can make the system's 
&gt; behavior much easier to understand and explain.
&gt; 
&gt; Let's require that the TLDs actually begin with a dot.  (That is,
&gt; I think that ".foo.onion" can include "bar.foo.onion", but I don't
&gt; like the idea of "foo.onion" including "barfoo.onion".)

These make sense.

&gt; Section 2.3.1:
&gt; 
&gt; Does the algorithm apply recursively?  That is, can more then one 
&gt; plugin rewrite the same address, or can one plugin rewrite its own 
&gt; output?
&gt; 
&gt; (I would suggest "no".)

I can imagine some use cases where a Namecoin name wants to delegate
to an OnioNS name or something like that, but frankly I'm having
trouble thinking of a reason why anyone would actually need that, and
I can imagine users being confused when encountering something that
looks like a Namecoin name but actually has security properties (and
technical requirements) derived from both Namecoin and OnioNS.

I can also imagine some use cases where a Namecoin name wants to
delegate to another Namecoin name, but the extra complexity of
handling that use case inside Namecoin seems to be pretty minimal.

So I think I agree.

&gt; I think there should be a way for a plugin to say "This address 
&gt; definitely does not exist" and stop resolution.  Otherwise no
&gt; plugin can be authoritative over a TLD.

Strongly agree.

&gt; Section 2.5.1:
&gt; 
&gt; Is the algorithm allowed to produce non-onion addresses?  Should it
&gt; be?

See my comments above.

&gt; Section 3.1:
&gt; 
&gt; I prefer the "put everything under .onion" option.   I also think
&gt; that we should require that the second-level domain be 10
&gt; characters or less, to avoid confusion with existing onion
&gt; addresses.

Curious what the criteria used for choosing 10 is.  Certainly 10 is
sufficiently small to not be mistaken for a v3 .onion address, so I
have no objection here.  (I note that len("blockstack")==10, which is
the longest name of any of the candidates I'm aware of -- would that
be why, or coincidence?)

&gt; General questions:
&gt; 
&gt; I know we've done stdout/stdin for communication before, but I
&gt; wonder if we should consider how well it's worked for us.  The
&gt; portability on Windows can be kind of hard.
&gt; 
&gt; Two alternatives are TCP and named pipes.

Been a long time since I messed with Windows and pipes, but last I
heard Windows's implementation and API for named pipes has almost
nothing in common with POSIX named pipes.  Is there an abstraction
layer for this that I'm unaware of, or would Tor (and the pluggable
naming systems) be responsible for implementing this abstraction?  Do
such abstractions exist for all the languages that pluggable naming
systems will be using?

&gt; Another alternative might be just using the DNS protocol and
&gt; asking for some kind of "ONION_CNAME" record.  (DNS is ugly, but at
&gt; least it's nice and standard.)

I started another thread about this, so I won't duplicate that
discussion in this thread.

&gt; Security notes:
&gt; 
&gt; I'd like to know what the browser people think about the risks here
&gt; of (eg) probing to see whether the user has certain extensions
&gt; installed or names mapped.  Maybe .hosts.onion should only be
&gt; allowed in the address bar, not in HREF attributes et al?

Does Firefox have a mechanism for applying a same-origin policy to
everything that a web page can invoke (e.g. images, which aren't
affected by the same-origin policy by default)?  If so, maybe it would
make sense to apply such a policy to each naming system, so that only
Namecoin websites can embed images from Namecoin websites?  Maybe a
NoScript-style manual whitelisting UI could be used for this?

Non-global naming systems like GNS are likely to need additional
protections, I would guess.  It's not clear to me how much protection
we can enforce without annoying users too much.

&gt; We might want to think about cache-related timing attacks here. 
&gt; Perhaps we should have a "no caching" rule.

Totally agree in theory.  Namecoin may have some trouble following
this in practice since our SPV client is in Java, which has an
extremely long lookup time for the first few lookups after boot due to
the JIT warmup.  This doesn't reveal *which* names were previously
looked up (at least, I doubt it would), but I can imagine
fingerprinting attacks that detect a Namecoin client that hasn't done
many lookups since it was last rebooted.  Not clear to me how much
damage this can do in practice, but caution is warranted in the
absence of evidence.  Maybe looking up a few junk names immediately
after initial boot would be sufficient to fix this.

&gt; We should probably add a security notes section for how to write 
&gt; plugins that aren't dangerous: a bad plugin potentially breaks
&gt; user anonymity.

Strongly agree.  Even though I'm reasonably familiar with Tor and
anonymity software, I would definitely benefit from security notes to
make sure I'm not doing something stupid.  Everyone makes mistakes
when working with codebases they're not familiar with, and
documentation can reduce the risk of producing dangerous code.

Cheers!
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY5V3EAAoJELPy0WV4bWVw8MMP/RLW+dD+S4JFDiskpmVPxZWW
QAhDtwR7BoC82pt0xAISwJvGokw4o4Fps9P9t0UVKZ1MxB79z1GbYIQ0Q7B4MGtN
nSaCUi0btGSK2JQ/2QvpB16pM+UUbJSMhc45kwq4/Zq/3irNQKS2XR3x2TdNH4VN
hHdpDREBWGLLQ4iKSfISA45nNOgNgNVPcSBTkiTN1MPPUwck3J10ATn0auHISFpY
jtsqiuC4pu+vOyUe/5xCYGrxd+UGTRuMXZi7yUGt822MZjtFNLFGW5VYZ5rT233Q
qjsDvaku3I0ueMWIXBTfT2mU3iSY7Kq72iHBxdXOTy/2ecSvnyyo49k4r8UZuoZb
c83eIP5v1LbYjte9o6OPaS+dLeJ9kI1cgEmE5O6wmbNUmAs8X7z6+fmYDMB403FM
rVywQtng1qOv9TtFJxgiV+ATs9uA8p53wC9zimSD7qEJKDJW9Fsilcv92bc7RjSD
0VLeabaj+LoSnc8n5jXLrGPOxgtDE+p/iwu7RT2iQJ225XbguUrShxdQBjqvFuqv
vCFHrvrwJnyR1bvk963V6fXKeZLxLZ18mX++q05fv4BGmldTSTgQjTkhpEB40GpL
T+fjWFjc4FM3dY4sjzj7UQyWxtzAJkl6Gln8F9+HuXiaaGScw85F6OCRUFtkbpOy
Fx0azrRJwHMKPdo3b9fL
=3p7s
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170407080226</emailId><senderName>str4d</senderName><senderEmail>str4d@i2pmail.org</senderEmail><timestampReceived>2017-04-07 08:02:26-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 04/06/2017 09:13 AM, Jeremy Rand wrote:
&gt; Hi Nick!
&gt; 
&gt; Nick Mathewson:
&gt;&gt; Section 2.1 and elsewhere:
&gt; 
&gt;&gt; I suggest that we require all address suffixes to end with .onion; 
&gt;&gt; other TLDs are not reserved like .onion is, and maybe we shouldn't 
&gt;&gt; squat any we haven't squatted already.
&gt; 
&gt; FWIW it's not at all clear to me that this is a concern that IETF or
&gt; ICANN will care about.  Most DNS recursive servers (e.g. Unbound)
&gt; allow squatting on arbitrary TLD's (this is often used for corporate
&gt; systems that use internal TLD's, but we use it for Namecoin as well),
&gt; and to my knowledge no one has complained to Unbound about the ability
&gt; to misuse this.

Then you haven't been reading the DNSOP working group's mailing list -
the IETF certainly cares. I recommend searching for ".onion",
"special-use", "sutld", or "alt-tld" on their ML viewer [0] and reading
the (extensive) back-history of these discussions. See below for a link
to my earlier comments on this tor-dev thread [1], as well as several
IETF drafts you may wish to read and comment on [2-3].

Cheers,
str4d

[0] https://mailarchive.ietf.org/arch/search/?email_list=dnsop
[1] https://lists.torproject.org/pipermail/tor-dev/2017-April/012153.html
[2] https://tools.ietf.org/html/draft-ietf-dnsop-sutld-ps-03
[3] https://tools.ietf.org/html/draft-ietf-dnsop-alt-tld-08


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170407104403</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-07 10:44:03-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;
&gt; &gt; I suggest that we require all address suffixes to end with .onion;
&gt; &gt; other TLDs are not reserved like .onion is, and maybe we shouldn't
&gt; &gt; squat any we haven't squatted already.
&gt;
&gt; FWIW it's not at all clear to me that this is a concern that IETF or
&gt; ICANN will care about.


Hi.

My name is Alec.

I fought that battle.  I still bear the scars.

Nick is right. Jeremy is not right.

ICANN and IETF and (nobody mentioned) CA/B-Forum members will violently
attack Tor as being weird if it blithely ignores the rest of DNS space.

Also, the concept of the ".alt" domain has been discussed for a long time,
and last I saw will continue to be discussed for a long time.

For Tor to not shoot itself in the head and foot simultaneously, it must:

   1. stick to ".onion" as a top level domain
   2. not tread on the rest of the namespace in any way whatsoever
   3. be able to make credible arguments that whatever exists under
   ".onion" is somehow cryptographic, attested by certs, blockchains, and shit
   like that, rather than "authorities" which would otherwise make the DNSOP
   workgroup feel pissy

If I was in charge, I would say that we risk overthinking this, and it
would be better to:

   - mandate use of fully DNS-compliant syntax, including but not limited
   to: acceptable max length, max label length, charset and composition
   - declare a registry of short, valid labels, in the second-from-right
   position in the name
   - reserve "tor" and "name" in that registry (ie: *.tor.onion,
   *.name.onion)
   - park the entire issue for 12 months

Because some geeks are nerds there will doubtless be arguments about the
creation of a registry, about forking the codebase, about "I am taking my
ball and going home because this is oppression!" and a bunch of other stuff.

Hence "parking" the issue because this is all meaningless until prop224
addresses ship, and there should be plenty of time in the next 12 months
for people to think about how to fill the usability space with $PET_IDEA,
and to my mind the changeover period between 80-bit and 256-bit addresses
should be long enough that nobody need fret about it right now.

The Prop224 migration will be doubtless faster than the IPv6 migration, but
anyone who says the changeover period should be less than 2 years is trying
to kill Tor adoption.

    -a

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;&gt; I suggest that we require all address \
suffixes to end with .onion;&lt;br&gt; &gt; other TLDs are not reserved like .onion is, and \
maybe we shouldn't&lt;br&gt; &gt; squat any we haven't squatted already.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;FWIW it's not at all clear to me that this is a concern that IETF or&lt;br&gt;
ICANN will care about.  &lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi.   \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My name is Alec.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I fought that \
battle.   I still bear the scars.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Nick is right. Jeremy is \
not right.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;ICANN and IETF and (nobody mentioned) \
CA/B-Forum members will violently attack Tor as being weird if it blithely ignores \
the rest of DNS space.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, the concept of the \
".alt" domain has been discussed for a long time, and last I saw will \
continue to be discussed for a long time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For Tor to not \
shoot itself in the head and foot simultaneously, it must:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;stick to \
".onion" as a top level domain&lt;br&gt;&lt;/li&gt;&lt;li&gt;not tread on the rest of the \
namespace in any way whatsoever&lt;br&gt;&lt;/li&gt;&lt;li&gt;be able to make credible arguments that \
whatever exists under ".onion" is somehow cryptographic, attested by certs, \
blockchains, and shit like that, rather than "authorities" which would \
otherwise make the DNSOP workgroup feel pissy&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;If I was in \
charge, I would say that we risk overthinking this, and it would be better \
to:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;mandate use of fully DNS-compliant syntax, including but not \
limited to: acceptable max length, max label length, charset and \
composition&lt;br&gt;&lt;/li&gt;&lt;li&gt;declare a registry of short, valid labels, in the \
second-from-right position in the name&lt;br&gt;&lt;/li&gt;&lt;li&gt;reserve "tor" and \
"name" in that registry (ie: *.tor.onion, *.name.onion)&lt;br&gt;&lt;/li&gt;&lt;li&gt;park \
the entire issue for 12 months&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Because some geeks are nerds \
there will doubtless be arguments about the creation of a registry, about forking the \
codebase, about "I am taking my ball and going home because this is \
oppression!" and a bunch of other stuff.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hence \
"parking" the issue because this is all meaningless until prop224 addresses \
ship, and there should be plenty of time in the next 12 months for people to think \
about how to fill the usability space with $PET_IDEA, and to my mind the changeover \
period between 80-bit and 256-bit addresses should be long enough that nobody need \
fret about it right now.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Prop224 migration will be \
doubtless faster than the IPv6 migration, but anyone who says the changeover period \
should be less than 2 years is trying to kill Tor adoption.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
-a&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;a href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408022312</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-04-08 02:23:12-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, 7 Apr 2017 11:44:03 +0100
Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; If I was in charge, I would say that we risk overthinking this, and it
&gt; would be better to:
&gt; 
&gt;    - mandate use of fully DNS-compliant syntax, including but not
&gt; limited to: acceptable max length, max label length, charset and
&gt; composition

Fully DNS-compliant only limits max length and max label length, unless
there's something that supersedes RFC 2181.  I'm fine with both of
those restrictions.

&gt;    - declare a registry of short, valid labels, in the
&gt; second-from-right position in the name
&gt;    - reserve "tor" and "name" in that registry (ie: *.tor.onion,
&gt;    *.name.onion)
&gt;    - park the entire issue for 12 months

I intentionally left a lot of this unspecified because one of the use
cases I envisioned was an "/etc/hosts" analog that lets users easily:

 * Stick all their hidden services under their own name hierarchy.

   eg: git.yawning -&gt; &lt;long public key&gt;.onion

 * Increase mobile quality of life by aliasing their HSes to addresses
   consisting entirely of emojis.

   eg: 💯👏💩👏🖕.😫 -&gt; &lt;long public key&gt;.onion

 * Force redirect any site to anything else, really.

   eg: git.example.com -&gt; &lt;long public key&gt;.onion
       banner.ads.and.malware.example.com -&gt; 127.0.0.1
       social.spacebook.trackers.example.com -&gt; 127.0.0.1

I could do this with MapAddress, but a plugin would make my life
easier, especially since it beats editing multiple torrc files.

(Going further into this rabbit hole, I assume most exits won't resolve
 the OpenNIC TLDs...  What do I do if I want to view `example.pirate`
 or whatever over Tor?)

&gt; Hence "parking" the issue because this is all meaningless until
&gt; prop224 addresses ship, and there should be plenty of time in the
&gt; next 12 months for people to think about how to fill the usability
&gt; space with $PET_IDEA, and to my mind the changeover period between
&gt; 80-bit and 256-bit addresses should be long enough that nobody need
&gt; fret about it right now.

IMO the existing onion addresses already are a usability disaster.  It
should be easy for researchers to experiment with designs to solve the
problem *now* before prop224 addresses make a bad situation worse.

There's also a world of difference between implementing/shipping the
capability to override the name resolution via plugins, and "Shipping
the YawningCoinNamezTLD plugin with Tor Browser, enabled by default".

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408074751</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-08 07:47:51-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/alternative)]


On 8 April 2017 at 03:23, Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:

&gt; On Fri, 7 Apr 2017 11:44:03 +0100
&gt; Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; &gt; If I was in charge, I would say that we risk overthinking this, and it
&gt; &gt; would be better to:
&gt; &gt;
&gt; &gt;    - mandate use of fully DNS-compliant syntax, including but not
&gt; &gt; limited to: acceptable max length, max label length, charset and
&gt; &gt; composition
&gt;
&gt; Fully DNS-compliant only limits max length and max label length, unless
&gt; there's something that supersedes RFC 2181.


You have an excellent point, and I remember fondly the happy days at Sun's
Network Security Group when I would set the name of my workstation to "#"
in DNS and use it to break into people's machines because ".rhosts" did not
support comment characters in the way that people expected.

However: on this conference call it was made abundantly clear to all
present - one could almost hear fingers being wagged - that it would be a
bad thing for Onion addresses to (1) contain anything other than
alphanumerics and non-leading-hyphens, (2) collide with IDNs and PunyCode.

Now: I flatly do not know where this is documented; it may possibly be some
intersection of DNS and HTTP RFCs, and if we want to take the approach that
"everything should be permitted unless it is explicitly forbidden!" then
yes we should go chase those documents down so that we have rationales for
our self-imposed bondage.

However if we want to seek the path of least resistance and effort, the
answer is obvious to any seasoned network administrator:

* alphanumeric
* (whatever DNS label length)
* (whatever DNS overall length)
* single, and only single, dots at label separators
* single, and only single, hyphens as spacers
* (i'm trying to think if there are any more obvious constraints, but can't)

...which will traipse merrily through any system one cares to name.

I am purposely leaving specific "label" and "overall" lengths out of this
list because although the correct figures are googleable, they tend to
trigger citation wars and off-by-one arguments so it's safer to discuss
them symbolically.


I intentionally left a lot of this unspecified because one of the use
&gt; cases I envisioned was an "/etc/hosts" analog that lets users easily:
&gt;
&gt;  * Stick all their hidden services under their own name hierarchy.
&gt;
&gt;    eg: git.yawning -&gt; &lt;long public key&gt;.onion
&gt;

(...elided...)

That's a lovely idea; one more to add to the mix is the process documented
at:

https://github.com/alecmuffett/the-onion-diaries/blob/master/basic-production-onion-server.md

...of hijacking addresses out of the DHCP network space and using them to
configure interfaces with genuine, resolvable Onion names.  It makes SSH
and Apache configuration really clear when you can use the genuine onion
address in configuration ("Listen") directives, etc.

But then that's /etc/hosts - that's *not* what goes to a Certificate
authority to be signed, and it's the latter that the committees get
exercised about.

Onion addresses are not really hostnames, they're a machine-readable number
a-la IPv4 and IPv6, which - by amazing, fantastic fortitude - happen to be
exactly compliant with DNS which means that subdomains "work" where they
protocol passes them along in (eg: "Host:" header) metadata.

The Elders of the Internet (TM) did not have the wisdom to see that
"www.127.0.0.1" would be a useful thing; they put everything into tidy
buckets - layer 3 goes here, directory lookup goes there - and at the
outset broke decentralisation and imposed hierarchy by means of user
expectation.

Whomever the clever person was who unbroke it by making tordaemon ignore
"subdomains" should be honoured - they (accidentally?) re-merged the two
namespaces and - so long as Tor walks the knife-edge of being compliant in
both namespaces - then Onion addressing is in an amazing position:

* all the browser technologies which assume DNS can work without
modification
* this includes availability of HTTPS certificates
* and therefore all future web technologies like WebRTC
* but the addresses are end-to-end and self-created, thus obviating the
whip-hand of DNS censorship
* and onion services are effectively "published" (X.25 did similar)
reducing attack surfaces without firewalls / intermediation
* intermediation which Tor bypasses anyway, because NAT-punching /
Rendezvous, etc.

It's hard to express how amazing this situation is; it's really like
winding the clock back to the 1980s and getting a whole new network
architecture, for free, which supports all the modern bells and whistles,
all because of the Host header, SSL-compliance and fake onion subdomains.

This is why it's essential to get this right. :-)

Yawning wrote a bunch of stuff here, but I am gonna elide it and sent this
message to see if it changes anything, and then revisit.

I'll just finish by saying that I am very excited about:

  www.somethingexceefinglylonggoeshereandwearenotreallysureaboutformat.onion

...because we can complain about usability, but this ^- is the first step
on the moon. This is the awesome thing.

Hyphenation, readability studies, boutique &amp; frou-frou name schemes
invented at the Tech University of Mercedes-Benz, and other shooting
ourselves in the foot can, and should, come later. :-)

    -a

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 8 April 2017 at \
03:23, Yawning Angel &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:yawning@schwanenlied.me" \
target="_blank"&gt;yawning@schwanenlied.me&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt;On Fri, 7 Apr 2017 11:44:03 \
+0100&lt;br&gt; Alec Muffett &lt;&lt;a \
href="mailto:alec.muffett@gmail.com"&gt;alec.muffett@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; \
If I was in charge, I would say that we risk overthinking this, and it&lt;br&gt; &gt; would \
be better to:&lt;br&gt; &gt;&lt;br&gt;
&lt;/span&gt;&gt;      - mandate use of fully DNS-compliant syntax, including but not&lt;br&gt;
&lt;span class="gmail-"&gt;&gt; limited to: acceptable max length, max label length, \
charset and&lt;br&gt; &gt; composition&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Fully DNS-compliant only limits max length and max label length, unless&lt;br&gt;
there's something that supersedes RFC 2181.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You \
have an excellent point, and I remember fondly the happy days at Sun's Network \
Security Group when I would set the name of my workstation to "#" in DNS \
and use it to break into people's machines because ".rhosts" did not \
support comment characters in the way that people \
expected.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;However: on this conference call it was made \
abundantly clear to all present - one could almost hear fingers being wagged - that \
it would be a bad thing for Onion addresses to (1) contain anything other than \
alphanumerics and non-leading-hyphens, (2) collide with IDNs and \
PunyCode.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Now: I flatly do not know where this is \
documented; it may possibly be some intersection of DNS and HTTP RFCs, and if we want \
to take the approach that "everything should be permitted unless it is \
explicitly forbidden!" then yes we should go chase those documents down so that \
we have rationales for our self-imposed bondage.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;However if \
we want to seek the path of least resistance and effort, the answer is obvious to any \
seasoned network administrator:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* \
alphanumeric&lt;/div&gt;&lt;div&gt;&lt;div&gt;* (whatever DNS label length)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;* \
(whatever DNS overall length)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;* single, and only single, dots at \
label separators&lt;/div&gt;&lt;div&gt;* single, and only single, hyphens as spacers&lt;/div&gt;&lt;div&gt;* \
(i'm trying to think if there are any more obvious constraints, but \
can't)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...which will traipse merrily through any system \
one cares to name.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am purposely leaving specific \
"label" and "overall" lengths out of this list because although \
the correct figures are googleable, they tend to trigger citation wars and off-by-one \
arguments so it's safer to discuss them symbolically.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px \
0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;I \
intentionally left a lot of this unspecified because one of the use&lt;br&gt; cases I \
envisioned was an "/etc/hosts" analog that lets users easily:&lt;br&gt; &lt;br&gt;
  * Stick all their hidden services under their own name hierarchy.&lt;br&gt;
&lt;br&gt;
     eg: git.yawning -&gt; &lt;long public key&gt;.onion&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;div&gt;(...elided...)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's a lovely idea; one more \
to add to the mix is the process documented at:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/alecmuffett/the-onion-diaries/blob/master/basic-production-on \
ion-server.md"&gt;https://github.com/alecmuffett/the-onion-diaries/blob/master/basic-production-onion-server.md&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...of \
hijacking addresses out of the DHCP network space and using them to configure \
interfaces with genuine, resolvable Onion names.   It makes SSH and Apache \
configuration really clear when you can use the genuine onion address in \
configuration ("Listen") directives, etc.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But then \
that's /etc/hosts - that's *not* what goes to a Certificate authority to be \
signed, and it's the latter that the committees get exercised \
about.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Onion addresses are not really hostnames, they're \
a machine-readable number a-la IPv4 and IPv6, which - by amazing, fantastic fortitude \
- happen to be exactly compliant with DNS which means that subdomains \
"work" where they protocol passes them along in (eg: "Host:" \
header) metadata.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Elders of the Internet (TM) did not \
have the wisdom to see that "www.127.0.0.1" would be a useful thing; they \
put everything into tidy buckets - layer 3 goes here, directory lookup goes there - \
and at the outset broke decentralisation and imposed hierarchy by means of user \
expectation.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Whomever the clever person was who unbroke it \
by making tordaemon ignore "subdomains" should be honoured - they \
(accidentally?) re-merged the two namespaces and - so long as Tor walks the \
knife-edge of being compliant in both namespaces - then Onion addressing is in an \
amazing position:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* all the browser technologies which \
assume DNS can work without modification&lt;/div&gt;&lt;div&gt;* this includes availability of \
HTTPS certificates  &lt;br&gt;&lt;/div&gt;&lt;div&gt;* and therefore all future web technologies like \
WebRTC&lt;/div&gt;&lt;div&gt;* but the addresses are end-to-end and self-created, thus obviating \
the whip-hand of DNS censorship&lt;/div&gt;&lt;div&gt;* and onion services are effectively \
"published" (X.25 did similar) reducing attack surfaces without firewalls / \
intermediation&lt;/div&gt;&lt;div&gt;* intermediation which Tor bypasses anyway, because \
NAT-punching / Rendezvous, etc.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It's hard to express how \
amazing this situation is; it's really like winding the clock back to the 1980s \
and getting a whole new network architecture, for free, which supports all the modern \
bells and whistles, all because of the Host header, SSL-compliance and fake onion \
subdomains.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This is why it's essential to get this \
right. :-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yawning wrote a bunch of stuff here, but I am \
gonna elide it and sent this message to see if it changes anything, and then \
revisit.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'll just finish by saying that I am very \
excited about:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   \
www.somethingexceefinglylonggoeshereandwearenotreallysureaboutformat.onion&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...because \
we can complain about usability, but this ^- is the first step on the moon. This is \
the awesome thing.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hyphenation, readability studies, \
boutique &amp; frou-frou name schemes invented at the Tech University of \
Mercedes-Benz, and other shooting ourselves in the foot can, and should, come later. \
:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      -a&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature"&gt;&lt;a href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408095721</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-04-08 09:57:21-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, 8 Apr 2017 08:47:51 +0100
Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote: 
&gt; However: on this conference call it was made abundantly clear to all
&gt; present - one could almost hear fingers being wagged - that it would
&gt; be a bad thing for Onion addresses to (1) contain anything other than
&gt; alphanumerics and non-leading-hyphens, (2) collide with IDNs and
&gt; PunyCode.
&gt; 
&gt; Now: I flatly do not know where this is documented; it may possibly
&gt; be some intersection of DNS and HTTP RFCs, and if we want to take the
&gt; approach that "everything should be permitted unless it is explicitly
&gt; forbidden!" then yes we should go chase those documents down so that
&gt; we have rationales for our self-imposed bondage.

Ironically, I struggled with this a bit when I pushed for making tor
clients reject "obviously malformed" destinations right when they hit
the SOCKS server.

From what I remember/can tell, RFC 1912 has the rules on what a valid
`hostname` is, RFC 2181 suggests that DNS server implementations should
not enforce restrictions on what a valid `hostname` is, and from
experience enforcing strict RFC 1912 on the real internet breaks
`nytimes.com`.

RFC 6125 mandates "LDH Lables" (RFC 5890), but is only applicable to
TLS.

&gt; However if we want to seek the path of least resistance and effort,
&gt; the answer is obvious to any seasoned network administrator:
&gt; 
&gt; * alphanumeric
&gt; * (whatever DNS label length)
&gt; * (whatever DNS overall length)
&gt; * single, and only single, dots at label separators
&gt; * single, and only single, hyphens as spacers
&gt; * (i'm trying to think if there are any more obvious constraints, but
&gt; can't)
&gt; 
&gt; ...which will traipse merrily through any system one cares to name.

tor currently enforces most of those (label length is notably not
checked), and also allows:

 * `_` because `core3_euw1.fabrik.nytimes.com` despite what the RFCs
   say.

 * Trailing `.` used sometimes to make it explicit that the domain is
   absolute.

See: https://gitweb.torproject.org/tor.git/tree/src/common/util.c#n1080

&gt; That's a lovely idea; one more to add to the mix is the process
&gt; documented at:
&gt; 
&gt; https://github.com/alecmuffett/the-onion-diaries/blob/master/basic-production-onion-server.md
&gt; 
&gt; ...of hijacking addresses out of the DHCP network space and using
&gt; them to configure interfaces with genuine, resolvable Onion names.
&gt; It makes SSH and Apache configuration really clear when you can use
&gt; the genuine onion address in configuration ("Listen") directives, etc.
&gt; 
&gt; But then that's /etc/hosts - that's *not* what goes to a Certificate
&gt; authority to be signed, and it's the latter that the committees get
&gt; exercised about.

Sure.

&gt; Hyphenation, readability studies, boutique &amp; frou-frou name schemes
&gt; invented at the Tech University of Mercedes-Benz, and other shooting
&gt; ourselves in the foot can, and should, come later. :-)

I'd be ok with, and would likely even advocate for "If you want your
naming system to be shipped with Tor Browser, it should follow certain
guidelines, including mandatory syntax, a label registry, and etc",
which is a matter of policy.

But that to me is orthogonal to "there should be a flexible way to
offload name resolution" (a matter of implementation).

In practical terms the tor code would need modifications to allow
anything super exotic anyway, and I doubt anything will actually get
shipped with Tor Browser[0] till long after prop 224 is fully
implemented.

Regards,

-- 
Yawning Angel

[0]: As much as I hate the fact that port 80 and 443 are basically the
only things that matter, that's basically the situation.

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408224939</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-08 22:49:39-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>


It was suggested I post this to tor-dev; I prototyped a small thing
that allows the prop-279 APIs to be tested against actual-Tor without
changing Tor. That is, it does the "abuse the control-protocol" thing
but speaks to prop-279 style subprocesses.

This is just proof-of-concept and would need a little more fleshing out,
but should be sufficient to proceed with prototype implementations of
prop-279 clients.

   https://github.com/meejah/TorNS

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170408094300</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-04-08 09:43:00-0400</timestampReceived><subject>Re: [tor-dev] minimizing traffic for IoT Tor node over 3G/LTE</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; I am working on a project to create very small Tor nodes on embedded
&gt; devices connected over LTE or 3G.

since you are concerned about bw usage I assume you talk about tor
clients not relays.

&gt; I have it working fine with OpenWRT and
&gt; just 128MB of RAM, but the main issue is now the amount of data needed to
&gt; download the consensus. The consensus files appear to be around 2.3MB at
&gt; the moment and I think the default is to re-download every 3 hours, so
&gt; that's 18.4MB/day or 552MB/month. Is there any way to reduce this while
&gt; still maintaining good citizenship on the Tor network? Are there any
&gt; recommended options for low-bandwidth nodes?

There is an ongoing effort to significantly reduce the bw overhead for
tor clients on metered networks.

Some improvements are supposed to land in tor 0.3.1.x.


Relevant proposals:

https://gitweb.torproject.org/torspec.git/tree/proposals/140-consensus-diffs.txt
https://gitweb.torproject.org/torspec.git/tree/proposals/274-rotate-onion-keys-less.txt
https://gitweb.torproject.org/torspec.git/tree/proposals/275-md-published-time-is-silly.txt
https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
https://gitweb.torproject.org/torspec.git/tree/proposals/277-detect-id-sharing.txt
https://gitweb.torproject.org/torspec.git/tree/proposals/278-directory-compression-scheme-negotiation.txt








-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408095220</emailId><senderName>Razvan Dragomirescu</senderName><senderEmail>razvan.dragomirescu@veri.fi</senderEmail><timestampReceived>2017-04-08 09:52:20-0400</timestampReceived><subject>Re: [tor-dev] minimizing traffic for IoT Tor node over 3G/LTE</subject><body>

[Attachment #2 (multipart/alternative)]


Thank you, Proposal 140 sounds perfect for what I need, that would minimize
traffic quite a bit! I see some code for it at
https://gitweb.torproject.org/tor.git/log/?qt=grep&amp;q=prop140 , I'm guessing
it's not complete yet.

Thanks again,
Razvan

On Sat, Apr 8, 2017 at 12:43 PM, nusenu &lt;nusenu@openmailbox.org&gt; wrote:

&gt; &gt; I am working on a project to create very small Tor nodes on embedded
&gt; &gt; devices connected over LTE or 3G.
&gt;
&gt; since you are concerned about bw usage I assume you talk about tor
&gt; clients not relays.
&gt;
&gt; &gt; I have it working fine with OpenWRT and
&gt; &gt; just 128MB of RAM, but the main issue is now the amount of data needed to
&gt; &gt; download the consensus. The consensus files appear to be around 2.3MB at
&gt; &gt; the moment and I think the default is to re-download every 3 hours, so
&gt; &gt; that's 18.4MB/day or 552MB/month. Is there any way to reduce this while
&gt; &gt; still maintaining good citizenship on the Tor network? Are there any
&gt; &gt; recommended options for low-bandwidth nodes?
&gt;
&gt; There is an ongoing effort to significantly reduce the bw overhead for
&gt; tor clients on metered networks.
&gt;
&gt; Some improvements are supposed to land in tor 0.3.1.x.
&gt;
&gt;
&gt; Relevant proposals:
&gt;
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 140-consensus-diffs.txt
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 274-rotate-onion-keys-less.txt
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 275-md-published-time-is-silly.txt
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 276-lower-bw-granularity.txt
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 277-detect-id-sharing.txt
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/
&gt; 278-directory-compression-scheme-negotiation.txt
&gt;
&gt;
&gt;
&gt;
&gt;
&gt;
&gt;
&gt;
&gt; --
&gt; https://mastodon.social/@nusenu
&gt; https://twitter.com/nusenu_
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Thank you, Proposal 140 sounds perfect for what I need, that would \
minimize traffic quite a bit! I see some code for it at  &lt;a \
href="https://gitweb.torproject.org/tor.git/log/?qt=grep&amp;q=prop140"&gt;https://gitweb.torproject.org/tor.git/log/?qt=grep&amp;q=prop140&lt;/a&gt; \
, I'm guessing it's not complete yet.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks \
again,&lt;/div&gt;&lt;div&gt;Razvan&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Sat, Apr 8, 2017 at 12:43 PM, nusenu &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:nusenu@openmailbox.org" \
target="_blank"&gt;nusenu@openmailbox.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;&gt; I am working on a project to create very \
small Tor nodes on embedded&lt;br&gt; &gt; devices connected over LTE or 3G.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;since you are concerned about bw usage I assume you talk about tor&lt;br&gt;
clients not relays.&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; I have it working fine with OpenWRT and&lt;br&gt;
&gt; just 128MB of RAM, but the main issue is now the amount of data needed to&lt;br&gt;
&gt; download the consensus. The consensus files appear to be around 2.3MB at&lt;br&gt;
&gt; the moment and I think the default is to re-download every 3 hours, so&lt;br&gt;
&gt; that's 18.4MB/day or 552MB/month. Is there any way to reduce this while&lt;br&gt;
&gt; still maintaining good citizenship on the Tor network? Are there any&lt;br&gt;
&gt; recommended options for low-bandwidth nodes?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;There is an ongoing effort to significantly reduce the bw overhead for&lt;br&gt;
tor clients on metered networks.&lt;br&gt;
&lt;br&gt;
Some improvements are supposed to land in tor 0.3.1.x.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Relevant proposals:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/140-consensus-diffs.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;140-consensus-diffs.txt&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/274-rotate-onion-keys-less.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;274-rotate-onion-keys-less.txt&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/275-md-published-time-is-silly.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;275-md-published-time-is-&lt;wbr&gt;silly.txt&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;276-lower-bw-granularity.txt&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/277-detect-id-sharing.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;277-detect-id-sharing.txt&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/278-directory-compression-scheme-negotiation.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/proposals/&lt;wbr&gt;278-directory-compression-&lt;wbr&gt;scheme-negotiation.txt&lt;/a&gt;&lt;br&gt;
 &lt;span class="HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
&lt;a href="https://mastodon.social/@nusenu" rel="noreferrer" \
target="_blank"&gt;https://mastodon.social/@&lt;wbr&gt;nusenu&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://twitter.com/nusenu_" rel="noreferrer" \
target="_blank"&gt;https://twitter.com/nusenu_&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403022652</emailId><senderName>Daniel Achleitner</senderName><senderEmail>daniel.achleitner@gmail.com</senderEmail><timestampReceived>2017-04-03 02:26:52-0400</timestampReceived><subject>Re: [tor-dev] GSoC: Support all kinds of DNS queries</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-04-02 05:22, Jeremy Rand wrote:
&gt; (Thinking out loud.)  It would be interesting to have some kind of
&gt; algorithm agility here.  For example, a Tor client could send a
&gt; request for a Namecoin domain name, and the exit relay would return a
&gt; Namecoin merkle proof in the same way that it would return a DNSSEC
&gt; signature if were a DNS doman name.

It certainly seems to be a good idea to design the cell format to be
agnostic as to what kind of "proof data" is attached to the DNS
response. As prop219 just wraps around the existing DNS-packet
wire-format, it should already allow that, provided that Namecoin has a
wire-format for the proof.

Certainly out of scope for GSoC, but I'm wondering:
Apart from running a full Namecoin node (and storing the whole
blockchain) on every client/exit node/whatever, is there a
privacy-preserving way to resolve a .bit domain, i.e. without an
upstream node/resolver learning/logging exactly which domain was resolved=
?

Regards,
Daniel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328161945</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-03-28 16:19:45-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

It seems reasonable but my first question is the UI. Do you have a
proposal?  The password field UI works, in my opinion, because it
shows up when the password field is focused on. Assuming one uses the
mouse to click on it (and doesn't tab to it from the username) - they
see it.

How would you communicate this for .onion links or bitcoin text? These
fields are static text and would not be interacted with in the same
way as a password field.

A link could indeed be clicked - so that's a hook for UX... A bitcoin
address would probably be highlighted for copying so that's another
hook... But what should it do?

-tom


On 28 March 2017 at 10:31, Donncha O'Cearbhaill &lt;donncha@donncha.is&gt; wrote:
&gt; Hi all,
&gt;
&gt; The Tor bad-relay team regularly detects malicious exit relays which are
&gt; actively manipulating Tor traffic. These attackers appear financial
&gt; motivated and have primarily been observed modifying Bitcoin and onion
&gt; address which are displayed on non-HTTPS web pages.
&gt;
&gt; Increasingly these attackers are becoming more selective in their
&gt; targeting. Some attackers are only targeting a handful of pre-configured
&gt; pages. As a result, we often rely on Tor users to report bad exits and
&gt; the URLs which are being targeted.
&gt;
&gt; In Firefox 51, Mozilla started to highlight HTTP pages containing
&gt; password form fields as insecure [1]. This UI clearly and directly
&gt; highlights the risk involved in communicating sensitive data over HTTP.
&gt;
&gt; I'd like to investigate ways that we can extend a similar UI to Tor
&gt; Browser which highlight Bitcoin and onion addressed served over HTTP. I
&gt; understand that implementing this type of Bitcoin and onion address
&gt; detection would be less reliable than Firefox's password field
&gt; detection. However even if unreliable it could increase safety and
&gt; increase user awareness about the risks of non-secure transports.
&gt;
&gt; There is certainly significant design work that needs to be done to
&gt; implement this feature. For example, .onion origins need be treated as
&gt; secure, but only if they don't included resources from non-secure
&gt; origins. We would also need to make the onion/bitcoin address detection
&gt; reliable against active obfuscation attempts by malicious exits.
&gt;
&gt; I'd like to hear any and all feedback, suggestions or criticism of this
&gt; proposal.
&gt;
&gt; Kind Regards,
&gt; Donncha
&gt;
&gt;
&gt; [1]
&gt; https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328175655</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-03-28 17:56:55-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>


Although I don't have a concrete suggestion for the UI, I think this is
a good idea.


Similarly, it would be good to give people a clear way to tell us what
exit node they were using at the time (by fingerprint).

Maybe this could look like a "report possibly bad exit node behavior"
option in the dropdown. Ideally with shorter text ;) and a *very clear*
indication of what data will be sent (e.g. maybe you're fine with
reporting the URL, but probably not).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402024651</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-02 02:46:51-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Tom Ritter:
&gt; It seems reasonable but my first question is the UI. Do you have a 
&gt; proposal?  The password field UI works, in my opinion, because it 
&gt; shows up when the password field is focused on. Assuming one uses
&gt; the mouse to click on it (and doesn't tab to it from the username)
&gt; - they see it.
&gt; 
&gt; How would you communicate this for .onion links or bitcoin text?
&gt; These fields are static text and would not be interacted with in
&gt; the same way as a password field.
&gt; 
&gt; A link could indeed be clicked - so that's a hook for UX... A
&gt; bitcoin address would probably be highlighted for copying so that's
&gt; another hook... But what should it do?
&gt; 
&gt; -tom

Bitcoin has a URL scheme that is increasingly used, so the UI
mechanism could be the same as for .onion links.  However, for both
.onion links and for bitcoin: links, there's a risk that the website
will simply ask the user to manually copy the .onion URL or Bitcoin
address -- I doubt that most users will recognize this as an attempt
to evade detection.  So any UI mechanism will probably need to
recognize any string that looks like a .onion URL or a Bitcoin
address, even if they're not links.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY4GYXAAoJELPy0WV4bWVwz60P/2cOYAiRLaTx5wjy+pyqQCUn
N4+mZv9+YmW7OiqJKEylywyTcdhLeAAVlQPafawvN+9K1EObqiF5GtHdHOaOE+EJ
43iUbpRzMsZOlPGspP6YUrJw6zjLev021qMyyZv1r0EMPgi3d+jbfvrgPHcgw7AD
aA5hDy1bVAoLovwIWL1w/62MK+gsMHroE3oDOYNI3i6uLJHVtsdTdCVit8rwshey
BKOBY0xgh2pvMDGwB4hdK4K0GHAUcef6ErDXhrpKFPDjuJnLi6g5i3oPbgaI9YuR
ONIb3eK2K81oblpEmRxQgEJHby7sMKfqRqpsabcTDn6WUlN0z91JTqRtJWvyZYYC
rabdeLrEqlOA7IGG7S4w3hUlWi7Ql/iwUM3/9b3SNztwcWrC/VmCjDPpiZ/aJpI9
QP5/Y2SC5TYQ0+DRLe3HynI/zc5WHpRW6TU570BnJc+V5Y1uf8GH2g6WMNRegTKm
++cCx2SLGn2CaqHCubos7FVtx2Yi443vlL9kNE1bgsZIZBa8PGx6m3MjpZ8K9NLt
e1HkTbCGQaB09pVvMMRiazqc6r3sJcvogcmdct21P6ElyEW4D9L+grWqESNSM+gm
mlAIrMsfYeZnpl7vgmKVQ2TqirCxvLMA0movYjhISkyKIsPTSHc8Qoc00WHt2MvX
lus5voupc4tmsDtB/8z0
=L3v2
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170402072355</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-04-02 07:23:55-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

On Tue, Mar 28, 2017 at 11:31 AM, Donncha O'Cearbhaill
&lt;donncha@donncha.is&gt; wrote:
&gt; The Tor bad-relay team regularly detects malicious exit relays which are
&gt; actively manipulating Tor traffic. These attackers appear financial
&gt; motivated and have primarily been observed modifying Bitcoin and onion
&gt; address which are displayed on non-HTTPS web pages.
&gt;
&gt; Increasingly these attackers are becoming more selective in their
&gt; targeting. Some attackers are only targeting a handful of pre-configured
&gt; pages. As a result, we often rely on Tor users to report bad exits and
&gt; the URLs which are being targeted.
&gt;
&gt; In Firefox 51, Mozilla started to highlight HTTP pages containing
&gt; password form fields as insecure [1]. This UI clearly and directly
&gt; highlights the risk involved in communicating sensitive data over HTTP.
&gt;
&gt; I'd like to investigate ways that we can extend a similar UI to Tor
&gt; Browser which highlight Bitcoin and onion addressed served over HTTP. I
&gt; understand that implementing this type of Bitcoin and onion address
&gt; detection would be less reliable than Firefox's password field
&gt; detection. However even if unreliable it could increase safety and
&gt; increase user awareness about the risks of non-secure transports.
&gt;
&gt; There is certainly significant design work that needs to be done to
&gt; implement this feature. For example, .onion origins need be treated as
&gt; secure, but only if they don't included resources from non-secure
&gt; origins. We would also need to make the onion/bitcoin address detection
&gt; reliable against active obfuscation attempts by malicious exits.
&gt;
&gt; https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/

Search OnionGatherer on this list for ui stuff.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403130551</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-04-03 13:05:51-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

[Attachment #2 (multipart/signed)]


On 28 Mar (11:19:45), Tom Ritter wrote:
&gt; It seems reasonable but my first question is the UI. Do you have a
&gt; proposal?  The password field UI works, in my opinion, because it
&gt; shows up when the password field is focused on. Assuming one uses the
&gt; mouse to click on it (and doesn't tab to it from the username) - they
&gt; see it.
&gt; 
&gt; How would you communicate this for .onion links or bitcoin text? These
&gt; fields are static text and would not be interacted with in the same
&gt; way as a password field.
&gt; 
&gt; A link could indeed be clicked - so that's a hook for UX... A bitcoin
&gt; address would probably be highlighted for copying so that's another
&gt; hook... But what should it do?

I do believe this could be an important safety improvement even if not
perfect. I'm unsure how Tor Browser team operates for this kind of features
but Tom's request here is a logical start that is try to come up with a
proposal of what the UI would look like and then we can go in ticket land I
guess...

I'm no UI expert nor even good at judging them but I have a feeling we should
go towards something "intrusive" in order to make SURE users notice the
potential danger and actually gets annoyed by it to the point they want to
*avoid* HTTP sites in order to not deal with that.

nusenu idea of going like NoScript does is appealing to me. Covering the
.onion/bitcoin address on HTTP clearnet site and then you have to click on it
to see it with a big ass warning saying "Make sure you understand that this
address could have been changed in transit" kind of thing (with very low
technical terms ofc).

That way, users will clearly see that getting an address on an HTTP site is
_harmful_ over Tor and that should be what we convey to the users using that
annoying mechanism.

Might sound kind of radical here but safety first! I really don't see a
compromise nor an argument for "usability" here if we believe that it's
basically dangerous.

Cheers!
David

&gt; 
&gt; -tom
&gt; 
&gt; 
&gt; On 28 March 2017 at 10:31, Donncha O'Cearbhaill &lt;donncha@donncha.is&gt; wrote:
&gt; &gt; Hi all,
&gt; &gt;
&gt; &gt; The Tor bad-relay team regularly detects malicious exit relays which are
&gt; &gt; actively manipulating Tor traffic. These attackers appear financial
&gt; &gt; motivated and have primarily been observed modifying Bitcoin and onion
&gt; &gt; address which are displayed on non-HTTPS web pages.
&gt; &gt;
&gt; &gt; Increasingly these attackers are becoming more selective in their
&gt; &gt; targeting. Some attackers are only targeting a handful of pre-configured
&gt; &gt; pages. As a result, we often rely on Tor users to report bad exits and
&gt; &gt; the URLs which are being targeted.
&gt; &gt;
&gt; &gt; In Firefox 51, Mozilla started to highlight HTTP pages containing
&gt; &gt; password form fields as insecure [1]. This UI clearly and directly
&gt; &gt; highlights the risk involved in communicating sensitive data over HTTP.
&gt; &gt;
&gt; &gt; I'd like to investigate ways that we can extend a similar UI to Tor
&gt; &gt; Browser which highlight Bitcoin and onion addressed served over HTTP. I
&gt; &gt; understand that implementing this type of Bitcoin and onion address
&gt; &gt; detection would be less reliable than Firefox's password field
&gt; &gt; detection. However even if unreliable it could increase safety and
&gt; &gt; increase user awareness about the risks of non-secure transports.
&gt; &gt;
&gt; &gt; There is certainly significant design work that needs to be done to
&gt; &gt; implement this feature. For example, .onion origins need be treated as
&gt; &gt; secure, but only if they don't included resources from non-secure
&gt; &gt; origins. We would also need to make the onion/bitcoin address detection
&gt; &gt; reliable against active obfuscation attempts by malicious exits.
&gt; &gt;
&gt; &gt; I'd like to hear any and all feedback, suggestions or criticism of this
&gt; &gt; proposal.
&gt; &gt;
&gt; &gt; Kind Regards,
&gt; &gt; Donncha
&gt; &gt;
&gt; &gt;
&gt; &gt; [1]
&gt; &gt; https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/
&gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
h4Neylkd5WBoXhbKp3jB2fYUAy2NrRar7O7oyNaGg4M=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170406125300</emailId><senderName>Donncha O'Cearbhaill</senderName><senderEmail>donncha@donncha.is</senderEmail><timestampReceived>2017-04-06 12:53:00-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Tom Ritter:
&gt; It seems reasonable but my first question is the UI. Do you have a
&gt; proposal?  The password field UI works, in my opinion, because it
&gt; shows up when the password field is focused on. Assuming one uses the
&gt; mouse to click on it (and doesn't tab to it from the username) - they
&gt; see it.
&gt; 
&gt; How would you communicate this for .onion links or bitcoin text? These
&gt; fields are static text and would not be interacted with in the same
&gt; way as a password field.
&gt; 
&gt; A link could indeed be clicked - so that's a hook for UX... A bitcoin
&gt; address would probably be highlighted for copying so that's another
&gt; hook... But what should it do?

Thank you all for the suggestions in this thread. I agree that we need
to tie down a preliminary UI. I'm seeing two key hooks that we could use:

* Detecting navigation from an insecure page to an onion URL or
bitcoin:// address.
* Reading and alerting to Bitcoin or onion addresses in the clipboard
buffer.

I've been working on a proof-of-concept extension which implements both
of these hooks.

The "clipboardRead" permission is needed to read the contents of the
clipboard from a Firefox extension. This was implemented in Firefox 54
(2017-02-13) in Mozilla bug #1312260 [1]. Unfortunately it will be quite
some time before Firefox 54 is included in an ESR release. The Mozilla
patch for this permission is &lt; 100 lines. Is this a feature that the TBB
team might consider back-porting to Tor Browser?

I agree with David, this UI should be as intrusive as possible to
prevent users from shooting themselves in the foot. IMO navigation to
onion URLs from HTTP should be completely blocked. I also think that we
should wipe the users clipboard buffer if we detect a valid Bitcoin
address in it.

The UI could suggest that a user manually retypes the Bitcoin or onion
address if they are certain that it is correct. I hope this type of
intrusive warning will reduce risky behaviour and encourage any Tor
related web services to move to TLS only.

I'll try to report back with a demo for testing next week. Please reply
if you have any comments or suggestions.

Regards,
Donncha

[1] https://bugzilla.mozilla.org/show_bug.cgi?id=1312260



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326201958</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-26 20:19:58-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Sun, Mar 26, 2017 at 02:24:41PM +0200, Alec Muffett wrote:
&gt; Hi,
&gt; 
&gt; So: a bunch of us were discussing Prop224 Onion addresses, and their
&gt; UX-malleability.
&gt; 
&gt; Specifically: that there are small bit fields in the current Prop224 Onion
&gt; Address schema (eg: version, and other future structure?) which can be
&gt; tweaked or amended without otherwise changing the functionality of the
&gt; address, or without much changing what the user sees in the (say) browser
&gt; address bar.
&gt; 
&gt; This is a point of significant concern because of issues like phishing and
&gt; passing-off - by analogy: t0rpr0ject.0rg versus torproject.org  - and other
&gt; games that can be played with a prop224 address now, or in future, to game
&gt; user experience.
&gt; 
&gt; We discussed the existing "hash the public key before base-32 encoding"
&gt; approach, but hashing breaks the prop224 key blinding.
&gt; 
&gt; Ian Goldberg - thank you Ian - offered this attractive solution: apply a
&gt; *reversible* "All Or Nothing Transform" (AONT) to the entire Prop224 Onion
&gt; Address, prior to Base32 Encoding.
&gt; 
&gt; This way, even a single-bit mutation of (say) version number will have a
&gt; "diffusion" effect, impacting ~ N/2 of the bits whilst having O(1) cost and
&gt; being reversible so as not to impact the rest of Prop224.
&gt; 
&gt; The result would be onion addresses which are less "tamperable" / more
&gt; deterministic, that closer to one-and-only-one published onion address will
&gt; correspond to an onion endpoint.
&gt; 
&gt; What does the panel think?

One thing I thought of later is that, assuming the version field is
"under" the AONT, then there is *no* visible version field in the final
address, so you would have to commit to "For any possible future onion
address of this fixed length, the first thing you have to do to decode
it is this particular AONT."  This seems a bit suboptimal to me.  And
since the version field basically *is* the tweakable field in the
current prop224 addresses, maybe this actually isn't so useful after
all for this version of the spec?
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326204218</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-26 20:42:18-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Sun, Mar 26, 2017 at 04:19:58PM -0400, Ian Goldberg wrote:
&gt; On Sun, Mar 26, 2017 at 02:24:41PM +0200, Alec Muffett wrote:
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; So: a bunch of us were discussing Prop224 Onion addresses, and their
&gt; &gt; UX-malleability.
&gt; &gt; 
&gt; &gt; Specifically: that there are small bit fields in the current Prop224 Onion
&gt; &gt; Address schema (eg: version, and other future structure?) which can be
&gt; &gt; tweaked or amended without otherwise changing the functionality of the
&gt; &gt; address, or without much changing what the user sees in the (say) browser
&gt; &gt; address bar.
&gt; &gt; 
&gt; &gt; This is a point of significant concern because of issues like phishing and
&gt; &gt; passing-off - by analogy: t0rpr0ject.0rg versus torproject.org  - and other
&gt; &gt; games that can be played with a prop224 address now, or in future, to game
&gt; &gt; user experience.
&gt; &gt; 
&gt; &gt; We discussed the existing "hash the public key before base-32 encoding"
&gt; &gt; approach, but hashing breaks the prop224 key blinding.
&gt; &gt; 
&gt; &gt; Ian Goldberg - thank you Ian - offered this attractive solution: apply a
&gt; &gt; *reversible* "All Or Nothing Transform" (AONT) to the entire Prop224 Onion
&gt; &gt; Address, prior to Base32 Encoding.
&gt; &gt; 
&gt; &gt; This way, even a single-bit mutation of (say) version number will have a
&gt; &gt; "diffusion" effect, impacting ~ N/2 of the bits whilst having O(1) cost and
&gt; &gt; being reversible so as not to impact the rest of Prop224.
&gt; &gt; 
&gt; &gt; The result would be onion addresses which are less "tamperable" / more
&gt; &gt; deterministic, that closer to one-and-only-one published onion address will
&gt; &gt; correspond to an onion endpoint.
&gt; &gt; 
&gt; &gt; What does the panel think?
&gt; 
&gt; One thing I thought of later is that, assuming the version field is
&gt; "under" the AONT, then there is *no* visible version field in the final
&gt; address, so you would have to commit to "For any possible future onion
&gt; address of this fixed length, the first thing you have to do to decode
&gt; it is this particular AONT."  This seems a bit suboptimal to me.  And
&gt; since the version field basically *is* the tweakable field in the
&gt; current prop224 addresses, maybe this actually isn't so useful after
&gt; all for this version of the spec?

&lt;talking-to-myself&gt;

We could leave the version field outside the AONT, though, but commit to
changing the paramaters of the AONT (in particular, the domain
separation constant?) if we change the version number, so that an
adversary changing the version number to "2" would just cause the client
to throw an error (before version 2 exists) or be an invalid address
(after version 2 exists)?

Then the address would look something like:

base32( AONT_1( pubkey || checksum ) || version=0x01 )

where AONT_1 is an unkeyed invertible function from 34(?)-byte strings
to 34(?)-byte strings.

(Of course, then all addresses would end in "b", or something like
that.)

&lt;/talking-to-myself&gt;
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326222733</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-03-26 22:27:33-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;
&gt; We could leave the version field outside the AONT, though, but commit to
&gt; changing the paramaters of the AONT (in particular, the domain
&gt; separation constant?) if we change the version number, so that an
&gt; adversary changing the version number to "2" would just cause the client
&gt; to throw an error (before version 2 exists) or be an invalid address
&gt; (after version 2 exists)?


To add an aside from a discussion with Teor: the entire "version" field
could be reduced to a single - probably "zero" - bit, in a manner perhaps
similar to the distinctions between Class-A, Class-B, Class-C... addresses
in old IPv4.

Thus: if the first bit in the address is zero, then there is no version,
and we are at version 0 of the format

If the first bit is one, we are using v1+ of the format and all bets are
off, except that the obvious thing then to do is count the number of 1-bits
(up to some limit) and declare that to be version number.  Once we're up to
3 or 4 or 7 or 8 one-bits, then shift version encoding totally.

Teor will correct me if I misquote him, but the advantage here was:

a) the version number is 1 bit, ie: small, for the forseeable / if we get
it right

b) in pursuit of smallness, we could maybe dump the hash in favour of a
AONT + eyeballs, which would give back a bunch of extra bits

result: shorter addresses, happier users.

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;span \
style="color:rgb(34,34,34)"&gt;We could leave the version field outside the AONT, \
though, but commit to&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt; changing the paramaters of the AONT (in \
particular, the domain&lt;br&gt; separation constant?) if we change the version number, so \
that an&lt;br&gt; adversary changing the version number to "2" would just cause \
the client&lt;br&gt; to throw an error (before version 2 exists) or be an invalid \
address&lt;br&gt; (after version 2 exists)?&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To add an aside \
from a discussion with Teor: the entire "version" field could be reduced to \
a single - probably "zero" - bit, in a manner perhaps similar to the \
distinctions between Class-A, Class-B, Class-C... addresses in old \
IPv4.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thus: if the first bit in the address is zero, then \
there is no version, and we are at version 0 of the \
format&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If the first bit is one, we are using v1+ of the \
format and all bets are off, except that the obvious thing then to do is count the \
number of 1-bits (up to some limit) and declare that to be version number.   Once \
we're up to 3 or 4 or 7 or 8 one-bits, then shift version encoding \
totally.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Teor will correct me if I misquote him, but the \
advantage here was:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a) the version number is 1 bit, ie: \
small, for the forseeable / if we get it right&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;b) in pursuit \
of smallness, we could maybe dump the hash in favour of a AONT + eyeballs, which \
would give back a bunch of extra bits  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;result: shorter \
addresses, happier users.&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170327055942</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-27 05:59:42-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Mar 27, 2017 at 12:27:33AM +0200, Alec Muffett wrote:
&gt; &gt;
&gt; &gt; We could leave the version field outside the AONT, though, but commit to
&gt; &gt; changing the paramaters of the AONT (in particular, the domain
&gt; &gt; separation constant?) if we change the version number, so that an
&gt; &gt; adversary changing the version number to "2" would just cause the client
&gt; &gt; to throw an error (before version 2 exists) or be an invalid address
&gt; &gt; (after version 2 exists)?
&gt; 
&gt; 
&gt; To add an aside from a discussion with Teor: the entire "version" field
&gt; could be reduced to a single - probably "zero" - bit, in a manner perhaps
&gt; similar to the distinctions between Class-A, Class-B, Class-C... addresses
&gt; in old IPv4.
&gt; 
&gt; Thus: if the first bit in the address is zero, then there is no version,
&gt; and we are at version 0 of the format
&gt; 
&gt; If the first bit is one, we are using v1+ of the format and all bets are
&gt; off, except that the obvious thing then to do is count the number of 1-bits
&gt; (up to some limit) and declare that to be version number.  Once we're up to
&gt; 3 or 4 or 7 or 8 one-bits, then shift version encoding totally.
&gt; 
&gt; Teor will correct me if I misquote him, but the advantage here was:
&gt; 
&gt; a) the version number is 1 bit, ie: small, for the forseeable / if we get
&gt; it right
&gt; 
&gt; b) in pursuit of smallness, we could maybe dump the hash in favour of a
&gt; AONT + eyeballs, which would give back a bunch of extra bits
&gt; 
&gt; result: shorter addresses, happier users.

You indeed do not require a checksum under an AONT, but you do require
redundancy if you want to catch typos.  Something like

base64( AONT( pubkey || 0x0000 ) || version)

is fine.  If you want "version" to be a single bit, then the AONT would
have to operate on non-full bytes, which is a bit (ha!) annoying, but
not terrible.  In that case, "0x0000" would actually be 15 bits of 0,
and version would be 1 bit.  This would only save 1.4 base32 characters,
though.  If you took off some more bits of the redundancy (down to 8
bits?), you would be able to shave one more base32 char.  And indeed, if
you make the redunancy just a single byte of 0x00, then the extra 0-bit
for the "version" actually fits neatly in the one leftover bit of the
base32 encoding, I think, so the AONT is back to working on full bytes.

But is a single byte of redundancy enough?  It will let through one out
of every 256 typos.  (I thought we had spec'd 2 bytes for the checkcum
now, but maybe I misremember?  I'm also assuming we're using a simple
256-bit encoding of the pubkey, rather than something more complex that
saves ~3 bits.)

(Heading to the airport.)
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403120447</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-03 12:04:47-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Mon, Mar 27, 2017 at 01:59:42AM -0400, Ian Goldberg wrote:
&gt;&gt; &gt; To add an aside from a discussion with Teor: the entire "version" field
&gt;&gt; &gt; could be reduced to a single - probably "zero" - bit, in a manner perhaps
&gt;&gt; &gt; similar to the distinctions between Class-A, Class-B, Class-C... addresses
&gt;&gt; &gt; in old IPv4.
&gt;&gt; &gt; 
&gt;&gt; &gt; Thus: if the first bit in the address is zero, then there is no version,
&gt;&gt; &gt; and we are at version 0 of the format
&gt;&gt; &gt; 
&gt;&gt; &gt; If the first bit is one, we are using v1+ of the format and all bets are
&gt;&gt; &gt; off, except that the obvious thing then to do is count the number of 1-bits
&gt;&gt; &gt; (up to some limit) and declare that to be version number.  Once we're up to
&gt;&gt; &gt; 3 or 4 or 7 or 8 one-bits, then shift version encoding totally.
&gt;&gt; &gt; 
&gt;&gt; &gt; Teor will correct me if I misquote him, but the advantage here was:
&gt;&gt; &gt; 
&gt;&gt; &gt; a) the version number is 1 bit, ie: small, for the forseeable / if we get
&gt;&gt; &gt; it right
&gt;&gt; &gt; 
&gt;&gt; &gt; b) in pursuit of smallness, we could maybe dump the hash in favour of a
&gt;&gt; &gt; AONT + eyeballs, which would give back a bunch of extra bits
&gt;&gt; &gt; 
&gt;&gt; &gt; result: shorter addresses, happier users.
&gt;&gt; 
&gt;&gt; You indeed do not require a checksum under an AONT, but you do require
&gt;&gt; redundancy if you want to catch typos.  Something like
&gt;&gt; 
&gt;&gt; base64( AONT( pubkey || 0x0000 ) || version)
&gt;&gt; 
&gt;&gt; is fine.  If you want "version" to be a single bit, then the AONT would
&gt;&gt; have to operate on non-full bytes, which is a bit (ha!) annoying, but
&gt;&gt; not terrible.  In that case, "0x0000" would actually be 15 bits of 0,
&gt;&gt; and version would be 1 bit.  This would only save 1.4 base32 characters,
&gt;&gt; though.  If you took off some more bits of the redundancy (down to 8
&gt;&gt; bits?), you would be able to shave one more base32 char.  And indeed, if
&gt;&gt; you make the redunancy just a single byte of 0x00, then the extra 0-bit
&gt;&gt; for the "version" actually fits neatly in the one leftover bit of the
&gt;&gt; base32 encoding, I think, so the AONT is back to working on full bytes.
&gt;&gt; 
&gt;&gt; But is a single byte of redundancy enough?  It will let through one out
&gt;&gt; of every 256 typos.  (I thought we had spec'd 2 bytes for the checkcum
&gt;&gt; now, but maybe I misremember?  I'm also assuming we're using a simple
&gt;&gt; 256-bit encoding of the pubkey, rather than something more complex that
&gt;&gt; saves ~3 bits.)
&gt;&gt; 
&gt;&gt; (Heading to the airport.)
&gt;
&gt; OK, here are the details of this variant of the proposal.  Onion
&gt; addresses are 54 characters in this variant, and the typo-resistance is
&gt; 13 bits (1/8192 typos are not caught).
&gt;
&gt; Encoding:
&gt;
&gt; raw is a 34-byte array.  Put the ed25519 key into raw[0..31] and 0x0000
&gt; into raw[32..33].  Note that there are really only 13 bits of 0's for
&gt; redundancy, plus the 0 bit for the version, plus 2 unused bits in
&gt; raw[32..33].
&gt;
&gt; Do the AONT.  Here G is a hash function mapping 16-byte inputs to
&gt; 18-byte outputs, and H is a hash function mapping 18-byte inputs to
&gt; 16-byte outputs.  Reasonable implementations would be something like:
&gt;
&gt; G(input) = SHA3-256("Prop224Gv0" || input)[0..17]
&gt; H(input) = SHA3-256("Prop224Hv0" || input)[0..15]
&gt;
&gt; raw[16..33] ^= G(raw[0..15])
&gt; # Clear the last few bits, since we really only want 13 bits of redundancy
&gt; raw[33] &amp;= 0xf8
&gt; raw[0..15] ^= H(raw[16..33])
&gt;
&gt; Then base32-encode raw[0..33].  The 56-character result will always end
&gt; in "a=" (the two unused bits at the end of raw[33]), so just remove that
&gt; part.
&gt;
&gt; Decoding:
&gt;
&gt; Base32-decode the received address into raw[0..33].  Depending on your
&gt; base32 decoder, you may have to stick the "a=" at the end of the address
&gt; first.  The low two bits were unused; be sure the base32 decoder sets
&gt; them to 0.  The next lowest bit (raw[33] &amp; 0x04) is the version bit.
&gt; Ensure that (raw[33] &amp; 0x04 == 0); if not, this is a different address
&gt; format version you don't understand.
&gt;
&gt; Undo the AONT:
&gt;
&gt; raw[0..15] ^= H(raw[16..33])
&gt; raw[16..33] ^= G(raw[0..15])
&gt; # Clear the last few bits, as above
&gt; raw[33] &amp;= 0xf8
&gt;
&gt; Check the redundancy by ensuring that raw[32..33] = 0x0000.  If not,
&gt; there was a typo in the address.  (Note again that since we explicitly
&gt; cleared the low 3 bits of raw[33], there are really only 13 bits of
&gt; checking here.)
&gt;
&gt; raw[0..31] is then the pubkey suitable for use in Ed25519.  As before
&gt; (and independently of the AONT stuff), you could sanity-check it to make
&gt; sure that (a) it is not the identity element, and (b) L times it *is*
&gt; the identity element.  (L is the order of the Ed25519 group.)  Checking
&gt; (a) is important; checking (b) isn't strictly necessary for the reasons
&gt; given before, but is still a sensible thing to do.  If you don't check
&gt; (b), you actually have to check in (a) that the pubkey isn't one of 8
&gt; bad values, not just the identity.  So just go ahead and check (b) to
&gt; rest easier. ;-)
&gt;
&gt;
&gt; This version contains two calls to SHA3, as opposed to the one such call
&gt; in the non-AONT (but including a checksum) version.  The benefit is
&gt; Alec's (and others') desire that there cannot be any bits an attacker
&gt; could twiddle that would leave both the key the same and the address
&gt; looking OK to somone who just spot-checks say the beginning and/or the
&gt; end.
&gt;

Hey people,

thanks for the R&amp;D here. I'm currently trying to balance the tradeoffs
here and decide whether to go ahead and implement this feature.

My main worry is the extra complexity this brings to our address
encoding/decoding process and to our speficication, as well as when
explaining the scheme to people.

Other than that, this seems like a reasonable improvement for a weird
phishing scenario. I'm calling it weird because I'm not sure how an
attacker can profit from being able to provide two addresses that
correspond to the same key, but I can probably come up with a few
scenarios if I think about it. Furthermore, this solution assumes a
sloppy victim that does a partial spot-check (if the victim verified the
whole address this design would make no difference).

BTW, isn't this phishing threat also possible in bitcoin (which is also
using a 4-byte checksum that can be bruteforced)? Have there been any
attacks of this nature?

Anyhow my first intuition is to just do this, as it seems like an
improvement and it's probably not a huge amount of work. It can probably
be done pretty cleanly if we abstract away the whole AONT construction
and the custom-ish base32 encoding/decoding. I'm just worrying about
putting more stuff in our already overloaded development bucket.

Is there a name for this AONT construction btw?

Thanks again :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403130505</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-03 13:05:05-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Apr 03, 2017 at 03:04:47PM +0300, George Kadianakis wrote:
&gt; Hey people,
&gt; 
&gt; thanks for the R&amp;D here. I'm currently trying to balance the tradeoffs
&gt; here and decide whether to go ahead and implement this feature.
&gt; 
&gt; My main worry is the extra complexity this brings to our address
&gt; encoding/decoding process and to our speficication, as well as when
&gt; explaining the scheme to people.
&gt; 
&gt; Other than that, this seems like a reasonable improvement for a weird
&gt; phishing scenario. I'm calling it weird because I'm not sure how an
&gt; attacker can profit from being able to provide two addresses that
&gt; correspond to the same key, but I can probably come up with a few
&gt; scenarios if I think about it. Furthermore, this solution assumes a
&gt; sloppy victim that does a partial spot-check (if the victim verified the
&gt; whole address this design would make no difference).
&gt; 
&gt; BTW, isn't this phishing threat also possible in bitcoin (which is also
&gt; using a 4-byte checksum that can be bruteforced)? Have there been any
&gt; attacks of this nature?
&gt; 
&gt; Anyhow my first intuition is to just do this, as it seems like an
&gt; improvement and it's probably not a huge amount of work. It can probably
&gt; be done pretty cleanly if we abstract away the whole AONT construction
&gt; and the custom-ish base32 encoding/decoding. I'm just worrying about
&gt; putting more stuff in our already overloaded development bucket.
&gt; 
&gt; Is there a name for this AONT construction btw?

As my student Nik noticed, this isn't *technically* an AONT, since
diffusion only happens "to the left", but that's where we want to
randomize things if any bit of the address changes.

But if we're down to just pubkey + checksum + *1 bit of version*, then
I'm not totally sold on the point of the AONT, since there are exactly 0
bits that can be twiddled while not changing the pubkey.  *Note*: this
is assuming that if we ever change the version number, *then* we do an
AONT or something so that version 0 and version 1 addresses that have
the same pubkey end up looking totally different (at least at the left
end).
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403135317</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-03 13:53:17-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


On 3 April 2017 at 13:04, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:

&gt; I'm calling it weird because I'm not sure how an
&gt; attacker can profit from being able to provide two addresses that
&gt; correspond to the same key, but I can probably come up with a few
&gt; scenarios if I think about it.


Hi George!

I'll agree it's a weird edge case :-)

I think the reason my spider-sense is tingling is because years of cleaning
up after intrusions has taught me that sysadmins and human beings are very
bad at non-canonical address formats, especially where they combine them
with either blacklisting, or else case-statements-with-default-conditions.

If one creates scope for saying "the address is &lt;foo&gt;.onion but you can
actually use &lt;foo'&gt;.onion or &lt;foo''&gt;.onion which are equivalent" - then
someone will somehow leverage that either a) for hackery, or b) for social
engineering.

Compare:

* http://017700000001
* http://2130706433
* http://0177.0.0.1  &lt;- this one tends to surprise people
* http://127.0.0.1

…and the sort of fun shenanigans that can be done with those "equivalent
forms"

People who've been trained not to type [X] into their browser, might be
convinced to type [X']

It's a lot easier for people to cope with there being one-and-only-one
viable form for any given hostname or address-representation.

    -a

 --
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 3 April 2017 at \
13:04, George Kadianakis &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:desnacked@riseup.net" \
target="_blank"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div class="gmail-HOEnZb"&gt;&lt;div \
class="gmail-h5"&gt;&lt;span style="color:rgb(34,34,34)"&gt;I'm calling it weird because \
I'm not sure how an&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt; attacker can profit from being able to \
provide two addresses that&lt;br&gt; correspond to the same key, but I can probably come up \
with a few&lt;br&gt; scenarios if I think about it.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi \
George!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'll agree it's a weird edge case \
:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think the reason my spider-sense is tingling is \
because years of cleaning up after intrusions has taught me that sysadmins and human \
beings are very bad at non-canonical address formats, especially where they combine \
them with either blacklisting, or else \
case-statements-with-default-conditions.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If one creates \
scope for saying "the address is &lt;foo&gt;.onion but you can actually use \
&lt;foo'&gt;.onion or &lt;foo''&gt;.onion which are equivalent" - \
then someone will somehow leverage that either a) for hackery, or b) for social \
engineering.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Compare:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* &lt;a \
href="http://017700000001"&gt;http://017700000001&lt;/a&gt;  &lt;/div&gt;&lt;div&gt;* &lt;a \
href="http://2130706433"&gt;http://2130706433&lt;/a&gt;  &lt;/div&gt;&lt;div&gt;* &lt;a \
href="http://0177.0.0.1"&gt;http://0177.0.0.1&lt;/a&gt;   &lt;- this one tends to surprise \
people&lt;br&gt;&lt;/div&gt;&lt;div&gt;* &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;…and the sort of fun shenanigans that can be done with \
those "equivalent forms"&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;People who've been \
trained not to type [X] into their browser, might be convinced to type \
[X']&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It's a lot easier for people to cope with there \
being one-and-only-one viable form for any given hostname or \
address-representation.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      -a&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
--  &lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403144826</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-03 14:48:26-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Apr 03, 2017 at 02:53:17PM +0100, Alec Muffett wrote:
&gt; On 3 April 2017 at 13:04, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; &gt; I'm calling it weird because I'm not sure how an
&gt; &gt; attacker can profit from being able to provide two addresses that
&gt; &gt; correspond to the same key, but I can probably come up with a few
&gt; &gt; scenarios if I think about it.
&gt; 
&gt; 
&gt; Hi George!
&gt; 
&gt; I'll agree it's a weird edge case :-)
&gt; 
&gt; I think the reason my spider-sense is tingling is because years of cleaning
&gt; up after intrusions has taught me that sysadmins and human beings are very
&gt; bad at non-canonical address formats, especially where they combine them
&gt; with either blacklisting, or else case-statements-with-default-conditions.
&gt; 
&gt; If one creates scope for saying "the address is &lt;foo&gt;.onion but you can
&gt; actually use &lt;foo'&gt;.onion or &lt;foo''&gt;.onion which are equivalent" - then
&gt; someone will somehow leverage that either a) for hackery, or b) for social
&gt; engineering.
&gt; 
&gt; Compare:
&gt; 
&gt; * http://017700000001
&gt; * http://2130706433
&gt; * http://0177.0.0.1  &lt;- this one tends to surprise people
&gt; * http://127.0.0.1
&gt; 
&gt; …and the sort of fun shenanigans that can be done with those "equivalent
&gt; forms"
&gt; 
&gt; People who've been trained not to type [X] into their browser, might be
&gt; convinced to type [X']
&gt; 
&gt; It's a lot easier for people to cope with there being one-and-only-one
&gt; viable form for any given hostname or address-representation.

But as I said to Alec in AMS, anyone on the internet can register
"facebook.mydomain.com" and have the A record point to the same thing as
facebook.com.  So there are always alternate names for any given
website.  TLS, of course, is designed to protect against these
shenanigans.

Prop224 *also* (mostly) protects against these shenanigans, because even
if there were two onion addresses that resolved to the same pubkey, the
daily blinded version incorporates the original onion address (not just
the pubkey, right?  *Right?*), so the alternate address-with-same-pubkey
won't actually point anywhere.  However, an adversary can upload a
descriptor there; I'm not sure what the implications of that are just
now.

The other thing to remember is that didn't we already say that

facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion

and

face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion

will mean the same thing?  So we're already past the "one (st)ring to
rule them all" point?

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403154052</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-03 15:40:52-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


On 3 Apr 2017 3:48 p.m., "Ian Goldberg" &lt;iang@cs.uwaterloo.ca&gt; wrote:

The other thing to remember is that didn't we already say that

facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion

and

face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion

will mean the same thing?  So we're already past the "one (st)ring to
rule them all" point?


That's a great point, and I'm definitely interested and in favour of
readability.

How about this, though: I know that Tor doesn't want to be in the business
of site reputation, but what if (eg) Protonmail offers a Onion "Safe
Browsing" extension some day, of known-bad Onions for malware reasons?

There's quite a gulf between stripping hyphens from a candidate onion
address and doing strcmp(), versus either drilling into the candidate
address to compute the alternative forms to check against the blacklist, or
even requiring the blacklist to be 8x larger?

-a

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 3 \
Apr 2017 3:48 p.m., "Ian Goldberg" &lt;&lt;a \
href="mailto:iang@cs.uwaterloo.ca"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt; wrote:&lt;blockquote \
class="quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; \
The other thing to remember is that didn't we already say that&lt;br&gt; &lt;br&gt;
facebookgbiyeqv3ebtjnlntwyvjoa&lt;wbr&gt;2n7rvpnnaryd4a.onion&lt;br&gt;
&lt;br&gt;
and&lt;br&gt;
&lt;br&gt;
face-book-gbiy-eqv3-ebtj-nlnt-&lt;wbr&gt;wyvj-oa2n-7rvp-nnar-yd4a.onion&lt;br&gt;
&lt;br&gt;
will mean the same thing?   So we're already past the "one (st)ring to&lt;br&gt;
rule them all" point?&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;That's a great point, and I'm definitely \
interested and in favour of readability.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;How about this, though: I know that Tor doesn't want to be in the \
business of site reputation, but what if (eg) Protonmail offers a Onion "Safe \
Browsing" extension some day, of known-bad Onions for malware reasons?  \
&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;There's quite a gulf between \
stripping hyphens from a candidate onion address and doing strcmp(), versus either \
drilling into the candidate address to compute the alternative forms to check against \
the blacklist, or even requiring the blacklist to be 8x larger?&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;-a&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;font color="#888888"&gt;  &lt;br&gt; \
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403155912</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-03 15:59:12-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Apr 03, 2017 at 04:40:52PM +0100, Alec Muffett wrote:
&gt; On 3 Apr 2017 3:48 p.m., "Ian Goldberg" &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; 
&gt; The other thing to remember is that didn't we already say that
&gt; 
&gt; facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion
&gt; 
&gt; and
&gt; 
&gt; face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion
&gt; 
&gt; will mean the same thing?  So we're already past the "one (st)ring to
&gt; rule them all" point?
&gt; 
&gt; 
&gt; That's a great point, and I'm definitely interested and in favour of
&gt; readability.
&gt; 
&gt; How about this, though: I know that Tor doesn't want to be in the business
&gt; of site reputation, but what if (eg) Protonmail offers a Onion "Safe
&gt; Browsing" extension some day, of known-bad Onions for malware reasons?

That's a quite good motivating example, thanks!

&gt; There's quite a gulf between stripping hyphens from a candidate onion
&gt; address and doing strcmp(), versus either drilling into the candidate
&gt; address to compute the alternative forms to check against the blacklist, or
&gt; even requiring the blacklist to be 8x larger?

Yes, that's true.  I'm definitely in favour of the "multiply by L (the
order of the group) and check that you get the identity element; error
with 'malformed address' if you don't" to get rid of the torsion point
problem.

If the daily descriptor uploaded to the point
Hash(onionaddr, dailyrand) contained Hash(onionaddr, dailyrand) *in* it
(and is signed by the master onion privkey, of course), then tor
could/should check that it reached that location through the "right"
onion address.

I'm afraid the details of what's in that daily descriptor are not in my
brain at the moment.  Does it contain its own (daily blinded) name under
the signature?

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403162902</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-03 16:29:02-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


On 3 April 2017 at 16:59, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:

&gt; How about this, though: I know that Tor doesn't want to be in the business
&gt; &gt; of site reputation, but what if (eg) Protonmail offers a Onion "Safe
&gt; &gt; Browsing" extension some day, of known-bad Onions for malware reasons?


&gt; That's a quite good motivating example, thanks!


#Yay; I'm also thinking of other plugins (in the cleartext world,
HTTPSEverywhere is the best example) which provide value to the user by
mechanically mutating URIs which match some canonical DNS domain name;
because Onion addresses are more like Layer-2 addresses*, development of
similar plugins benefits greatly from enforced "canonicality" (sp?) than is
necessary for equally-functional DNS equivalents; there is no means to
"group" three disparate Onion addresses together just-because they are all
owned by (say: Facebook), and if each address has 8 possible
representations then that's 24 rules to match against...


&gt; There's quite a gulf between stripping hyphens from a candidate onion
&gt; &gt; address and doing strcmp(), versus either drilling into the candidate
&gt; &gt; address to compute the alternative forms to check against the blacklist,
&gt; or
&gt; &gt; even requiring the blacklist to be 8x larger?
&gt;
&gt; Yes, that's true.  I'm definitely in favour of the "multiply by L (the
&gt; order of the group) and check that you get the identity element; error
&gt; with 'malformed address' if you don't" to get rid of the torsion point
&gt; problem.
&gt;

I heard that and AMS and it sounds a fabulous idea, although I am still too
much of an EC noob to appreciate it fully. :-)


If the daily descriptor uploaded to the point
&gt; Hash(onionaddr, dailyrand) contained Hash(onionaddr, dailyrand) *in* it
&gt; (and is signed by the master onion privkey, of course), then tor
&gt; could/should check that it reached that location through the "right"
&gt; onion address.
&gt;

That sounds great, and I think it sounds an appropriate response, but again
I am a Prop224 and EC noob. :-)

I would like, for two paragraph, to go entirely off-piste and ask a
possibly irrelevant and probably wrong-headed question:

/* BEGIN PROBABLY WRONG SECTION */
I view Onions as Layer-2 addresses, and one popular attack on Ethernet
Layer 2 is ARP-spoofing.  Imagine $STATE_ACTOR exfiltrates the private key
material from $ONIONSITE and wants to silently and partially MITM the
existing site without wholesale owning or tampering with it. Can they make
any benefit from multiple ("hardware MAC-address") keys colliding to one
address? Is there any greater benefit to $STATE_ACTOR from this than (say)
publishing lots of fake/extra introduction points for $ONIONSITE and using
those to interpose themselves into communications?
/* END PROBABLY WRONG SECTION */


I'm afraid the details of what's in that daily descriptor are not in my
&gt; brain at the moment.  Does it contain its own (daily blinded) name under
&gt; the signature?
&gt;

&lt;punt/&gt;  George?

  -a

--
* Layer-2 analogy: https://twitter.com/AlecMuffett/status/802161730591793152


-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 3 April \
2017 at 16:59, Ian Goldberg &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:iang@cs.uwaterloo.ca" \
target="_blank"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px \
0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;span \
class="gmail-im" style="font-size:12.8px"&gt;&gt; How about this, though: I know that \
Tor doesn't want to be in the business&lt;br&gt;&lt;/span&gt;&lt;span class="gmail-im" \
style="font-size:12.8px"&gt;&gt; of site reputation, but what if (eg) Protonmail offers \
a Onion "Safe&lt;br&gt;&lt;/span&gt;&lt;span class="gmail-im" style="font-size:12.8px"&gt;&gt; \
Browsing" extension some day, of known-bad Onions for malware \
reasons?&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-im" \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;That's a quite \
good motivating example, thanks!&lt;/span&gt;&lt;/blockquote&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;#Yay; I'm also thinking of \
other plugins (in the cleartext world, HTTPSEverywhere is the best example) which \
provide value to the user by mechanically mutating URIs which match some canonical \
DNS domain name; because Onion addresses are more like Layer-2 addresses*, \
development of similar plugins benefits greatly from enforced \
"canonicality" (sp?) than is necessary for equally-functional DNS \
equivalents; there is no means to "group" three disparate Onion addresses \
together just-because they are all owned by (say: Facebook), and if each address has \
8 possible representations then that's 24 rules to match against...&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt;&gt; There's quite a gulf \
between stripping hyphens from a candidate onion&lt;br&gt; &gt; address and doing strcmp(), \
versus either drilling into the candidate&lt;br&gt; &gt; address to compute the alternative \
forms to check against the blacklist, or&lt;br&gt; &gt; even requiring the blacklist to be \
8x larger?&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Yes, that's true.   I'm definitely in favour of the "multiply by \
L (the&lt;br&gt; order of the group) and check that you get the identity element; error&lt;br&gt;
with 'malformed address' if you don't" to get rid of the torsion \
point&lt;br&gt; problem.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I heard that and AMS and it \
sounds a fabulous idea, although I am still too much of an EC noob to appreciate it \
fully. :-)  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;If the daily descriptor uploaded to the point&lt;br&gt; \
Hash(onionaddr, dailyrand) contained Hash(onionaddr, dailyrand) *in* it&lt;br&gt; (and is \
signed by the master onion privkey, of course), then tor&lt;br&gt; could/should check that \
it reached that location through the "right"&lt;br&gt; onion \
address.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That sounds great, and I think it sounds \
an appropriate response, but again I am a Prop224 and EC noob. \
:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would like, for two paragraph, to go entirely \
off-piste and ask a possibly irrelevant and probably wrong-headed question:  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* BEGIN PROBABLY WRONG SECTION */&lt;/div&gt;&lt;div&gt;I view Onions \
as Layer-2 addresses, and one popular attack on Ethernet Layer 2 is ARP-spoofing.   \
Imagine $STATE_ACTOR exfiltrates the private key material from $ONIONSITE and wants \
to silently and partially MITM the existing site without wholesale owning or \
tampering with it. Can they make any benefit from multiple ("hardware \
MAC-address") keys colliding to one address? Is there any greater benefit to \
$STATE_ACTOR from this than (say) publishing lots of fake/extra introduction points \
for $ONIONSITE and using those to interpose themselves into \
communications?&lt;/div&gt;&lt;div&gt;&lt;div&gt;/* END PROBABLY WRONG SECTION \
*/&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;I'm afraid the details of what's in that \
daily descriptor are not in my&lt;br&gt; brain at the moment.   Does it contain its own \
(daily blinded) name under&lt;br&gt; the \
signature?&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;punt/&gt;   \
George?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   -a&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;--&lt;/div&gt;&lt;div&gt;* \
Layer-2 analogy: &lt;a href="https://twitter.com/AlecMuffett/status/802161730591793152"&gt;h \
ttps://twitter.com/AlecMuffett/status/802161730591793152&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;a href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403163358</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-03 16:33:58-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


Following the Layer-2 Addressing analogy means that Ian, here:


&gt; If the daily descriptor uploaded to the point
&gt;&gt; Hash(onionaddr, dailyrand) contained Hash(onionaddr, dailyrand) *in* it
&gt;&gt; (and is signed by the master onion privkey, of course), then tor
&gt;&gt; could/should check that it reached that location through the "right"
&gt;&gt; onion address.
&gt;
&gt;
…has essentially just invented what Solaris (for one) calls "IP Strict
Destination Multihoming":

  http://www.informit.com/articles/article.aspx?p=101138&amp;seqNum=4

-a :-)


-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Following the Layer-2 Addressing analogy \
means that Ian, here:&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;&lt;span class="gmail-"&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;If the daily descriptor uploaded to the point&lt;br&gt; \
Hash(onionaddr, dailyrand) contained Hash(onionaddr, dailyrand) *in* it&lt;br&gt; (and is \
signed by the master onion privkey, of course), then tor&lt;br&gt; could/should check that \
it reached that location through the "right"&lt;br&gt; onion \
address.&lt;/blockquote&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;…has \
essentially just invented what Solaris (for one) calls "IP Strict Destination \
Multihoming":&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   &lt;a \
href="http://www.informit.com/articles/article.aspx?p=101138&amp;seqNum=4"&gt;http://www. \
informit.com/articles/article.aspx?p=101138&amp;seqNum=4&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-a \
:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170403175031</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-04-03 17:50:31-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Apr 03, 2017 at 10:48:26AM -0400, Ian Goldberg wrote:
&gt; The other thing to remember is that didn't we already say that
&gt; 
&gt; facebookgbiyeqv3ebtjnlntwyvjoa2n7rvpnnaryd4a.onion
&gt; 
&gt; and
&gt; 
&gt; face-book-gbiy-eqv3-ebtj-nlnt-wyvj-oa2n-7rvp-nnar-yd4a.onion
&gt; 
&gt; will mean the same thing?

Did we? I admit that I haven't been paying enough attention to anything
lately, but last I checked, we thought that was a terrible idea because
people can make a bunch of different versions of the address, and use
them as tracking mechanisms for users. (For example, I put two versions
of the same address on my two different pages, and now when somebody goes
to that onion address, I can distinguish which page they came from. In
the extreme versions of this idea, I give a unique version of my address
to the target, and then I can spot him when he uses it.)

Ultimately the problem is that the browser is too good at giving away
the hostname that it thinks it's going to -- in various headers, in
cross-site isolation, etc etc.

So, if we have indeed decided to allow many versions of format for
onion addresses, I hope we thought through this attack and decided it
was worth it. :)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403184350</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-04-03 18:43:50-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

&gt; Date: Sun, 26 Mar 2017 14:24:41 +0200
&gt; From: Alec Muffett &lt;alec.muffett@gmail.com&gt;
&gt; 
&gt; This is a point of significant concern because of issues like phishing and
&gt; passing-off - by analogy: t0rpr0ject.0rg versus torproject.org  - and other
&gt; games that can be played with a prop224 address now, or in future, to game
&gt; user experience.
&gt; [...]
&gt; The result would be onion addresses which are less "tamperable" / more
&gt; deterministic, that closer to one-and-only-one published onion address will
&gt; correspond to an onion endpoint.
&gt; 
&gt; What does the panel think?

What is the threat model an AONT defends against here, and what
security properties do we aim to provide against that threat?

Here are a few candidates.  Suppose I own 0123456789deadbeef2.onion,
where 2 is the onion version number.

T1. Adversary does not know 0123456789deadbeef2.onion but controls all
    onion service directories.
(SP1) Adversary can't discover 0123456789deadbeef2.onion or thereby
      distinguish descriptors for 0123456789deadbeef2.onion from other
      descriptors simply by controlling what is in the directories.
      -&gt; With or without AONT, since the onion service descriptors are
         encrypted, the adversary can't learn their content anyway.

T2. Adversary knows 0123456789deadbeef2.onion and controls all Tor
    nodes except for the onion service server and client.
(SP2) Adversary cannot impersonate 0123456789deadbeef2.onion.
      -&gt; With or without AONT, adversary can't make onion descriptor
         signatures that are verified by the 0123456789deadbeef2.onion
         key unless they have broken Ed25519.
(SP3) Adversary cannot impersonate 0123456789deadbeefN.onion for any N
      *other* than 2.
      -&gt; With or without AONT, if the signature on the onion
         descriptor always covers the complete .onion address,
         including the version number, the adversary can't do this
         without also being able to forge signatures for
         0123456789deadbeef2.onion anyway and thus break Ed25519.
(SP4) Adversary cannot DoS 0123456789deadbeef2.onion.
      -&gt; With or without AONT, if adversary knows legitimate .onion
         address key, they can already remove any onion descriptors
         with signatures verified by the .onion address key, even if
         the signatures are decrypted.  So we can't provide this
         security property anyway as long as the adversary knows the
         legitimate .onion address.

T3. Adversary
    (a) knows 0123456789deadbeef2.onion,
    (b) can spend compute to find a private key whose public key has
        some chosen bits, and
    (c) can submit descriptors to onion directories.
(SP5) Adversary cannot match all except replacement of l by 1, o by 0, &amp;c.
      -&gt; With or without AONT, this confusion is already excluded by
         base32 encoding.
(SP6) Adversary cannot match all except long enough suffix.
      -&gt; Finding priv to fix prefix of Ed25519_priv2pub(priv) || cksum
         is almost surely just as hard as finding priv to fix prefix
         of AONT(Ed25519_priv2pub(priv) || cksum || version) or any
         other arrangement of cksum and version.

         (This assumes the AONT has low AT cost to evaluate -- but if
         you choose an AONT with high AT cost, that will severely
         penalize legitimate users of onion services, and also limit
         vanity onions to major corporations like Facebook and
         Google.)

So what security properties does an AONT give against what threat
models?  I'm probably missing something obvious here, but I expect it
will be helpful to articulate exactly what function it serves, for
future readers.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170405135038</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-04-05 13:50:38-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/signed)]


On 27 Mar (04:58:34), Ian Goldberg wrote:
&gt; On Mon, Mar 27, 2017 at 01:59:42AM -0400, Ian Goldberg wrote:
&gt; &gt; &gt; To add an aside from a discussion with Teor: the entire "version" field
&gt; &gt; &gt; could be reduced to a single - probably "zero" - bit, in a manner perhaps
&gt; &gt; &gt; similar to the distinctions between Class-A, Class-B, Class-C... addresses
&gt; &gt; &gt; in old IPv4.
&gt; &gt; &gt; 
&gt; &gt; &gt; Thus: if the first bit in the address is zero, then there is no version,
&gt; &gt; &gt; and we are at version 0 of the format
&gt; &gt; &gt; 
&gt; &gt; &gt; If the first bit is one, we are using v1+ of the format and all bets are
&gt; &gt; &gt; off, except that the obvious thing then to do is count the number of 1-bits
&gt; &gt; &gt; (up to some limit) and declare that to be version number.  Once we're up to
&gt; &gt; &gt; 3 or 4 or 7 or 8 one-bits, then shift version encoding totally.
&gt; &gt; &gt; 
&gt; &gt; &gt; Teor will correct me if I misquote him, but the advantage here was:
&gt; &gt; &gt; 
&gt; &gt; &gt; a) the version number is 1 bit, ie: small, for the forseeable / if we get
&gt; &gt; &gt; it right
&gt; &gt; &gt; 
&gt; &gt; &gt; b) in pursuit of smallness, we could maybe dump the hash in favour of a
&gt; &gt; &gt; AONT + eyeballs, which would give back a bunch of extra bits
&gt; &gt; &gt; 
&gt; &gt; &gt; result: shorter addresses, happier users.
&gt; &gt; 
&gt; &gt; You indeed do not require a checksum under an AONT, but you do require
&gt; &gt; redundancy if you want to catch typos.  Something like
&gt; &gt; 
&gt; &gt; base64( AONT( pubkey || 0x0000 ) || version)
&gt; &gt; 
&gt; &gt; is fine.  If you want "version" to be a single bit, then the AONT would
&gt; &gt; have to operate on non-full bytes, which is a bit (ha!) annoying, but
&gt; &gt; not terrible.  In that case, "0x0000" would actually be 15 bits of 0,
&gt; &gt; and version would be 1 bit.  This would only save 1.4 base32 characters,
&gt; &gt; though.  If you took off some more bits of the redundancy (down to 8
&gt; &gt; bits?), you would be able to shave one more base32 char.  And indeed, if
&gt; &gt; you make the redunancy just a single byte of 0x00, then the extra 0-bit
&gt; &gt; for the "version" actually fits neatly in the one leftover bit of the
&gt; &gt; base32 encoding, I think, so the AONT is back to working on full bytes.
&gt; &gt; 
&gt; &gt; But is a single byte of redundancy enough?  It will let through one out
&gt; &gt; of every 256 typos.  (I thought we had spec'd 2 bytes for the checkcum
&gt; &gt; now, but maybe I misremember?  I'm also assuming we're using a simple
&gt; &gt; 256-bit encoding of the pubkey, rather than something more complex that
&gt; &gt; saves ~3 bits.)
&gt; &gt; 
&gt; &gt; (Heading to the airport.)
&gt; 
&gt; OK, here are the details of this variant of the proposal.  Onion
&gt; addresses are 54 characters in this variant, and the typo-resistance is
&gt; 13 bits (1/8192 typos are not caught).
&gt; 
&gt; Encoding:
&gt; 
&gt; raw is a 34-byte array.  Put the ed25519 key into raw[0..31] and 0x0000
&gt; into raw[32..33].  Note that there are really only 13 bits of 0's for
&gt; redundancy, plus the 0 bit for the version, plus 2 unused bits in
&gt; raw[32..33].
&gt; 
&gt; Do the AONT.  Here G is a hash function mapping 16-byte inputs to
&gt; 18-byte outputs, and H is a hash function mapping 18-byte inputs to
&gt; 16-byte outputs.  Reasonable implementations would be something like:
&gt; 
&gt; G(input) = SHA3-256("Prop224Gv0" || input)[0..17]
&gt; H(input) = SHA3-256("Prop224Hv0" || input)[0..15]
&gt; 
&gt; raw[16..33] ^= G(raw[0..15])
&gt; # Clear the last few bits, since we really only want 13 bits of redundancy
&gt; raw[33] &amp;= 0xf8
&gt; raw[0..15] ^= H(raw[16..33])
&gt; 
&gt; Then base32-encode raw[0..33].  The 56-character result will always end
&gt; in "a=" (the two unused bits at the end of raw[33]), so just remove that
&gt; part.
&gt; 
&gt; Decoding:
&gt; 
&gt; Base32-decode the received address into raw[0..33].  Depending on your
&gt; base32 decoder, you may have to stick the "a=" at the end of the address
&gt; first.  The low two bits were unused; be sure the base32 decoder sets
&gt; them to 0.  The next lowest bit (raw[33] &amp; 0x04) is the version bit.
&gt; Ensure that (raw[33] &amp; 0x04 == 0); if not, this is a different address
&gt; format version you don't understand.

I do understand the problem (I think) with the version field being longer than
a single bit but it kind of causes some problem on the engineering and
protocol side. Here is why:

The current plan is to put the HS protocol version in the address because when
we fetch the descriptor from an HSDir, we use an URL that is on the form of
"/tor/hs/&lt;version&gt;/&lt;z&gt;" where &lt;z&gt; is the blinded key.

The reason we put the version number in the URL like the in the above is
because we might NOT use a 32 bytes key in future version when looking up the
descriptor so the version tells us what &lt;z&gt; is. Second, imagine a world in few
years where we have v3, v4 and v5 all living happily together and the
addresses are all 54 characters. On the client side, it would be really not
good that we do a fetch for all possible version and see which one works thus
having the version in the address prevents that.

I get that the solution to "which version to look up" with this proposed
change is that if v3 address, the version bit is 0, else if that bit is 1, try
decode v4. Then repeat for v4 up to vN until you get something that works.
However, this "locks" us in an interesting position which is every new version
needs a "new" address scheme. And that is the part I'm unsure here... We are
just going to let our future selfves deal with the version field problem in
v4+? :)

Protocol version change can be as benign as changing a single field in the
descriptor which can lead to minor changes on parsing the cells for instance.
Do we really want to go again and think of a new address scheme everytime we
want to improve the protocol and for which we have to bump the version?
Risking lots of bikeshedding, security implications and so on _everytime_ ?

The extra complexity here seems intense for what we really win overall with
this construction?

Thanks!
David

&gt; 
&gt; Undo the AONT:
&gt; 
&gt; raw[0..15] ^= H(raw[16..33])
&gt; raw[16..33] ^= G(raw[0..15])
&gt; # Clear the last few bits, as above
&gt; raw[33] &amp;= 0xf8
&gt; 
&gt; Check the redundancy by ensuring that raw[32..33] = 0x0000.  If not,
&gt; there was a typo in the address.  (Note again that since we explicitly
&gt; cleared the low 3 bits of raw[33], there are really only 13 bits of
&gt; checking here.)
&gt; 
&gt; raw[0..31] is then the pubkey suitable for use in Ed25519.  As before
&gt; (and independently of the AONT stuff), you could sanity-check it to make
&gt; sure that (a) it is not the identity element, and (b) L times it *is*
&gt; the identity element.  (L is the order of the Ed25519 group.)  Checking
&gt; (a) is important; checking (b) isn't strictly necessary for the reasons
&gt; given before, but is still a sensible thing to do.  If you don't check
&gt; (b), you actually have to check in (a) that the pubkey isn't one of 8
&gt; bad values, not just the identity.  So just go ahead and check (b) to
&gt; rest easier. ;-)
&gt; 
&gt; 
&gt; This version contains two calls to SHA3, as opposed to the one such call
&gt; in the non-AONT (but including a checksum) version.  The benefit is
&gt; Alec's (and others') desire that there cannot be any bits an attacker
&gt; could twiddle that would leave both the key the same and the address
&gt; looking OK to somone who just spot-checks say the beginning and/or the
&gt; end.
&gt; -- 
&gt; Ian Goldberg
&gt; Professor and University Research Chair
&gt; Cheriton School of Computer Science
&gt; University of Waterloo
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
zKn486Kfk5AQCOU9QOcbno9j3/MtJxuqpxCY2RSsPoo=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405140207</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-04-05 14:02:07-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/signed)]


On 05 Apr (09:50:38), David Goulet wrote:
&gt; On 27 Mar (04:58:34), Ian Goldberg wrote:
&gt; &gt; On Mon, Mar 27, 2017 at 01:59:42AM -0400, Ian Goldberg wrote:
&gt; &gt; &gt; &gt; To add an aside from a discussion with Teor: the entire "version" field
&gt; &gt; &gt; &gt; could be reduced to a single - probably "zero" - bit, in a manner perhaps
&gt; &gt; &gt; &gt; similar to the distinctions between Class-A, Class-B, Class-C... addresses
&gt; &gt; &gt; &gt; in old IPv4.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Thus: if the first bit in the address is zero, then there is no version,
&gt; &gt; &gt; &gt; and we are at version 0 of the format
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; If the first bit is one, we are using v1+ of the format and all bets are
&gt; &gt; &gt; &gt; off, except that the obvious thing then to do is count the number of 1-bits
&gt; &gt; &gt; &gt; (up to some limit) and declare that to be version number.  Once we're up to
&gt; &gt; &gt; &gt; 3 or 4 or 7 or 8 one-bits, then shift version encoding totally.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Teor will correct me if I misquote him, but the advantage here was:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; a) the version number is 1 bit, ie: small, for the forseeable / if we get
&gt; &gt; &gt; &gt; it right
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; b) in pursuit of smallness, we could maybe dump the hash in favour of a
&gt; &gt; &gt; &gt; AONT + eyeballs, which would give back a bunch of extra bits
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; result: shorter addresses, happier users.
&gt; &gt; &gt; 
&gt; &gt; &gt; You indeed do not require a checksum under an AONT, but you do require
&gt; &gt; &gt; redundancy if you want to catch typos.  Something like
&gt; &gt; &gt; 
&gt; &gt; &gt; base64( AONT( pubkey || 0x0000 ) || version)
&gt; &gt; &gt; 
&gt; &gt; &gt; is fine.  If you want "version" to be a single bit, then the AONT would
&gt; &gt; &gt; have to operate on non-full bytes, which is a bit (ha!) annoying, but
&gt; &gt; &gt; not terrible.  In that case, "0x0000" would actually be 15 bits of 0,
&gt; &gt; &gt; and version would be 1 bit.  This would only save 1.4 base32 characters,
&gt; &gt; &gt; though.  If you took off some more bits of the redundancy (down to 8
&gt; &gt; &gt; bits?), you would be able to shave one more base32 char.  And indeed, if
&gt; &gt; &gt; you make the redunancy just a single byte of 0x00, then the extra 0-bit
&gt; &gt; &gt; for the "version" actually fits neatly in the one leftover bit of the
&gt; &gt; &gt; base32 encoding, I think, so the AONT is back to working on full bytes.
&gt; &gt; &gt; 
&gt; &gt; &gt; But is a single byte of redundancy enough?  It will let through one out
&gt; &gt; &gt; of every 256 typos.  (I thought we had spec'd 2 bytes for the checkcum
&gt; &gt; &gt; now, but maybe I misremember?  I'm also assuming we're using a simple
&gt; &gt; &gt; 256-bit encoding of the pubkey, rather than something more complex that
&gt; &gt; &gt; saves ~3 bits.)
&gt; &gt; &gt; 
&gt; &gt; &gt; (Heading to the airport.)
&gt; &gt; 
&gt; &gt; OK, here are the details of this variant of the proposal.  Onion
&gt; &gt; addresses are 54 characters in this variant, and the typo-resistance is
&gt; &gt; 13 bits (1/8192 typos are not caught).
&gt; &gt; 
&gt; &gt; Encoding:
&gt; &gt; 
&gt; &gt; raw is a 34-byte array.  Put the ed25519 key into raw[0..31] and 0x0000
&gt; &gt; into raw[32..33].  Note that there are really only 13 bits of 0's for
&gt; &gt; redundancy, plus the 0 bit for the version, plus 2 unused bits in
&gt; &gt; raw[32..33].
&gt; &gt; 
&gt; &gt; Do the AONT.  Here G is a hash function mapping 16-byte inputs to
&gt; &gt; 18-byte outputs, and H is a hash function mapping 18-byte inputs to
&gt; &gt; 16-byte outputs.  Reasonable implementations would be something like:
&gt; &gt; 
&gt; &gt; G(input) = SHA3-256("Prop224Gv0" || input)[0..17]
&gt; &gt; H(input) = SHA3-256("Prop224Hv0" || input)[0..15]
&gt; &gt; 
&gt; &gt; raw[16..33] ^= G(raw[0..15])
&gt; &gt; # Clear the last few bits, since we really only want 13 bits of redundancy
&gt; &gt; raw[33] &amp;= 0xf8
&gt; &gt; raw[0..15] ^= H(raw[16..33])
&gt; &gt; 
&gt; &gt; Then base32-encode raw[0..33].  The 56-character result will always end
&gt; &gt; in "a=" (the two unused bits at the end of raw[33]), so just remove that
&gt; &gt; part.
&gt; &gt; 
&gt; &gt; Decoding:
&gt; &gt; 
&gt; &gt; Base32-decode the received address into raw[0..33].  Depending on your
&gt; &gt; base32 decoder, you may have to stick the "a=" at the end of the address
&gt; &gt; first.  The low two bits were unused; be sure the base32 decoder sets
&gt; &gt; them to 0.  The next lowest bit (raw[33] &amp; 0x04) is the version bit.
&gt; &gt; Ensure that (raw[33] &amp; 0x04 == 0); if not, this is a different address
&gt; &gt; format version you don't understand.
&gt; 
&gt; I do understand the problem (I think) with the version field being longer than
&gt; a single bit but it kind of causes some problem on the engineering and
&gt; protocol side. Here is why:
&gt; 
&gt; The current plan is to put the HS protocol version in the address because when
&gt; we fetch the descriptor from an HSDir, we use an URL that is on the form of
&gt; "/tor/hs/&lt;version&gt;/&lt;z&gt;" where &lt;z&gt; is the blinded key.

Another thing about this I just thought of. This AONT construction seems wise
to use. But it's still not entirely clear to me why we need a 1bit version
field. Taking this:

    base64( AONT( pubkey || 0x0000 ) || version)

If the version is 1 byte, then only the end of the address can be mangled with
and if it is, the tor client won't be able to fetch the descriptor because of
how the URL is constructed (correct version number is needed).

So I really don't see the phishing attack here being successful at all...?

Can you enlighten what attack we are trying to avoid here that we require a
1bit version field?

Thanks!
David

&gt; 
&gt; The reason we put the version number in the URL like the in the above is
&gt; because we might NOT use a 32 bytes key in future version when looking up the
&gt; descriptor so the version tells us what &lt;z&gt; is. Second, imagine a world in few
&gt; years where we have v3, v4 and v5 all living happily together and the
&gt; addresses are all 54 characters. On the client side, it would be really not
&gt; good that we do a fetch for all possible version and see which one works thus
&gt; having the version in the address prevents that.
&gt; 
&gt; I get that the solution to "which version to look up" with this proposed
&gt; change is that if v3 address, the version bit is 0, else if that bit is 1, try
&gt; decode v4. Then repeat for v4 up to vN until you get something that works.
&gt; However, this "locks" us in an interesting position which is every new version
&gt; needs a "new" address scheme. And that is the part I'm unsure here... We are
&gt; just going to let our future selfves deal with the version field problem in
&gt; v4+? :)
&gt; 
&gt; Protocol version change can be as benign as changing a single field in the
&gt; descriptor which can lead to minor changes on parsing the cells for instance.
&gt; Do we really want to go again and think of a new address scheme everytime we
&gt; want to improve the protocol and for which we have to bump the version?
&gt; Risking lots of bikeshedding, security implications and so on _everytime_ ?
&gt; 
&gt; The extra complexity here seems intense for what we really win overall with
&gt; this construction?
&gt; 
&gt; Thanks!
&gt; David
&gt; 
&gt; &gt; 
&gt; &gt; Undo the AONT:
&gt; &gt; 
&gt; &gt; raw[0..15] ^= H(raw[16..33])
&gt; &gt; raw[16..33] ^= G(raw[0..15])
&gt; &gt; # Clear the last few bits, as above
&gt; &gt; raw[33] &amp;= 0xf8
&gt; &gt; 
&gt; &gt; Check the redundancy by ensuring that raw[32..33] = 0x0000.  If not,
&gt; &gt; there was a typo in the address.  (Note again that since we explicitly
&gt; &gt; cleared the low 3 bits of raw[33], there are really only 13 bits of
&gt; &gt; checking here.)
&gt; &gt; 
&gt; &gt; raw[0..31] is then the pubkey suitable for use in Ed25519.  As before
&gt; &gt; (and independently of the AONT stuff), you could sanity-check it to make
&gt; &gt; sure that (a) it is not the identity element, and (b) L times it *is*
&gt; &gt; the identity element.  (L is the order of the Ed25519 group.)  Checking
&gt; &gt; (a) is important; checking (b) isn't strictly necessary for the reasons
&gt; &gt; given before, but is still a sensible thing to do.  If you don't check
&gt; &gt; (b), you actually have to check in (a) that the pubkey isn't one of 8
&gt; &gt; bad values, not just the identity.  So just go ahead and check (b) to
&gt; &gt; rest easier. ;-)
&gt; &gt; 
&gt; &gt; 
&gt; &gt; This version contains two calls to SHA3, as opposed to the one such call
&gt; &gt; in the non-AONT (but including a checksum) version.  The benefit is
&gt; &gt; Alec's (and others') desire that there cannot be any bits an attacker
&gt; &gt; could twiddle that would leave both the key the same and the address
&gt; &gt; looking OK to somone who just spot-checks say the beginning and/or the
&gt; &gt; end.
&gt; &gt; -- 
&gt; &gt; Ian Goldberg
&gt; &gt; Professor and University Research Chair
&gt; &gt; Cheriton School of Computer Science
&gt; &gt; University of Waterloo
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; -- 
&gt; zKn486Kfk5AQCOU9QOcbno9j3/MtJxuqpxCY2RSsPoo=



-- 
zKn486Kfk5AQCOU9QOcbno9j3/MtJxuqpxCY2RSsPoo=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405141142</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-05 14:11:42-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Wed, Apr 05, 2017 at 10:02:07AM -0400, David Goulet wrote:
&gt; Another thing about this I just thought of. This AONT construction seems wise
&gt; to use. But it's still not entirely clear to me why we need a 1bit version
&gt; field. Taking this:
&gt; 
&gt;     base64( AONT( pubkey || 0x0000 ) || version)
&gt; 
&gt; If the version is 1 byte, then only the end of the address can be mangled with
&gt; and if it is, the tor client won't be able to fetch the descriptor because of
&gt; how the URL is constructed (correct version number is needed).
&gt; 
&gt; So I really don't see the phishing attack here being successful at all...?
&gt; 
&gt; Can you enlighten what attack we are trying to avoid here that we require a
&gt; 1bit version field?

I believe the danger Alec was wanting to avoid was that someone (not the
onion service owner) could take an existing onion address, bump the
version number (which wouldn't change the vanity beginning of the
address), and upload the very same descriptor to the resulting blinded
address (under the new version number).  Then the modified address would
work just like the original.

As mentioned elsewhere in the thread, this is solved if that descriptor
contains (under the signature by the "master" onion key) the actual
onion address you were expected to use to get there.  Does it?  If so,
I think we don't have to worry about this problem at all.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170405152259</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-04-05 15:22:59-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

[Attachment #2 (multipart/alternative)]


On 5 April 2017 at 15:11, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:

&gt; I believe the danger Alec was wanting to avoid was that someone (not the
&gt; onion service owner) could take an existing onion address, bump the
&gt; version number (which wouldn't change the vanity beginning of the
&gt; address), and upload the very same descriptor to the resulting blinded
&gt; address (under the new version number).  Then the modified address would
&gt; work just like the original.
&gt;


In a nutshell, yes.

I've been having a discussion with Taylor Campbell off-list, and I wrote:

   - *… let me try something on you: *
   -
*The year is 2019.  *
   -
*What would _you_ do  *
   -
*in order to surface to the user  *
   -
*that the onion address in front of them,  *
   -
*one with a given public key which they've previously used and trusted
   before *
   -
*such that the leftmost 32 bytes, base32 encoded, are familiar to them,  *
   -
*is actually a downgraded version-2 format of address *
   -
*against which a bug is being exploited by (say) the FBI *
   -
*rather than the more secure version-3 form which they were expecting and
   had previously used, *
   -
*when all of the information pertinent to versions and checksums is at the
   right-hand-end of the encoded address? *
   - *This is basically where I am coming from.*
   -
*My thinking: Make it brittle. Mix the version (etc) into the represented
   form so that if one messes with a single bit, one perceptibly impacts the
   entire string representation of the onion address. How would you attack
   this? *


...and also:


&gt; *do we want to be teaching users that:*
&gt; *--- eh2tndsmiher4dqv266z5ii2xkt6brx2llwliq3jim233e5c5bc5, and*
&gt; *--- eh2tndsmiher4dqv266z5ii2xkt6brx2llwliq3jim233e5d5bc5**...are
&gt; actually the same thing, but if and only if they differ in the N-5'th
&gt; character?*



...and:


&gt; *… up front I'll just say that my perspective of this class of threat
&gt; comes from observations like *
&gt; *a) people are creative, and if you give them malleability they will use
&gt; it to create onion addresses including embedded "poop-emoji" and the like.*
&gt; *b) people generalise, so that having learned that $SOME_CHARACTER in an
&gt; onion address is malleable, they will assume that most/all of them are and
&gt; subsequently fall for phishing attacks.**c) people are, as a group, given
&gt; the entire Tor prop224 ecosystem, infinitely more creative than I can be at
&gt; finding ways to exploit it, therefore it makes sense to screw down the
&gt; crypto to present as small an attack surface as possible.*



...and:


&gt; *An old programmer maxim is that one should provide for Zero, One, or an
&gt; Infinite number of any resource.  *
&gt; *Since we do not desire an infinite number of representations of an onion
&gt; address (per Roger) - and zero would not be useful, we should shoot for
&gt; one, and only one.**Not a cryptographic argument, but I think it's a
&gt; human one.  :-)*


There's a lot more, but I don't want to bury folk with a huge multi-message
e-mail exchange; plus there is a lot of useful context "up-thread".  :-)



&gt; As mentioned elsewhere in the thread, this is solved if that descriptor
&gt; contains (under the signature by the "master" onion key) the actual
&gt; onion address you were expected to use to get there.  Does it?  If so,
&gt; I think we don't have to worry about this problem at all.


I hope it does.  That sounds very much like what I expect to see in other
network stacks.  :-)

    -a

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 5 April \
2017 at 15:11, Ian Goldberg &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:iang@cs.uwaterloo.ca" \
target="_blank"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;I believe the danger Alec was wanting to avoid was \
that someone (not the&lt;br&gt; onion service owner) could take an existing onion address, \
bump the&lt;br&gt; version number (which wouldn't change the vanity beginning of \
the&lt;br&gt; address), and upload the very same descriptor to the resulting blinded&lt;br&gt;
address (under the new version number).   Then the modified address would&lt;br&gt;
work just like the original.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In a \
nutshell, yes.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've been having a discussion with \
Taylor Campbell off-list, and I wrote:&lt;/div&gt;&lt;div&gt;&lt;div class="gmail_extra" \
style="font-size:12.8px"&gt;&lt;ul&gt;&lt;li&gt;&lt;i style="font-size:12.8px"&gt;… let me try something \
on you:  &lt;/i&gt;&lt;br&gt;&lt;/li&gt;&lt;li style="margin-left:15px"&gt;&lt;i&gt;The year is 2019.  \
&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li style="margin-left:15px"&gt;&lt;i&gt;What would _you_ do  &lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li \
style="margin-left:15px"&gt;&lt;i&gt;in order to surface to the user  &lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li \
style="margin-left:15px"&gt;&lt;i&gt;that the onion address in front of them,  \
&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li style="margin-left:15px"&gt;&lt;i&gt;one with a given public key which \
they've previously used and trusted before&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li \
style="margin-left:15px"&gt;&lt;i&gt;such that the leftmost 32 bytes, base32 encoded, are \
familiar to them,  &lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li style="margin-left:15px"&gt;&lt;i&gt;is actually a \
downgraded version-2 format of address&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li \
style="margin-left:15px"&gt;&lt;i&gt;against which a bug is being exploited by (say) the \
FBI&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li style="margin-left:15px"&gt;&lt;i&gt;rather than the more secure version-3 \
form which they were expecting and had previously used,&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li \
style="margin-left:15px"&gt;&lt;i&gt;when all of the information pertinent to versions and \
checksums is at the right-hand-end of the encoded address?&lt;br&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i \
style="font-size:12.8px"&gt;This is basically where I am coming from.&lt;/i&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;i \
style="font-size:12.8px"&gt;&lt;div class="gmail_extra" style="font-size:12.8px"&gt;&lt;div \
class="gmail_extra"&gt;My thinking: Make it brittle. Mix the version (etc) into the \
represented form so that if one messes with a single bit, one perceptibly impacts the \
entire string representation of the onion address.  &lt;i style="font-size:12.8px"&gt;&lt;div \
class="gmail_extra" style="font-size:12.8px;display:inline"&gt;&lt;div class="gmail_extra" \
style="display:inline"&gt;&lt;i style="font-size:12.8px"&gt;&lt;div class="gmail_extra" \
style="font-size:12.8px;display:inline"&gt;How would you attack \
this?&lt;/div&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail-yj6qo gmail-ajU" \
style="font-size:12.8px"&gt;&lt;/div&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...and \
also:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex" \
class="gmail_quote"&gt;&lt;i&gt;do we want to be teaching users that:&lt;br&gt;&lt;/i&gt;&lt;i&gt;--- \
eh2tndsmiher4dqv266z5ii2xkt6br&lt;wbr&gt;x2llwliq3jim233e5c5bc5, and&lt;br&gt;&lt;/i&gt;&lt;i&gt;--- \
eh2tndsmiher4dqv266z5ii2xkt6br&lt;wbr&gt;x2llwliq3jim233e5d5bc5&lt;br&gt;&lt;/i&gt;&lt;i&gt;...are actually \
the same thing, but if and only if they differ in the N-5'th \
character?&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...and:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex" class="gmail_quote"&gt;&lt;i&gt;… up front I'll just \
say that my perspective of this class of threat comes from observations like  \
&lt;br&gt;&lt;/i&gt;&lt;i&gt;a) people are creative, and if you give them malleability they will use it \
to create onion addresses including embedded "poop-emoji" and the \
like.&lt;br&gt;&lt;/i&gt;&lt;i&gt;b) people generalise, so that having learned that &lt;font \
face="monospace, monospace"&gt;$SOME_CHARACTER&lt;/font&gt; in an onion address is malleable, \
they will assume that most/all of them are and subsequently fall for phishing \
attacks.&lt;br&gt;&lt;/i&gt;&lt;i&gt;c) people are, as a group, given the entire Tor prop224 ecosystem, \
infinitely more creative than I can be at finding ways to exploit it, therefore it \
makes sense to screw down the crypto to present as small an attack surface as \
possible.&lt;/i&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;span class="gmail-im" \
style="font-size:12.8px"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;...and:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex" class="gmail_quote"&gt;&lt;i&gt;An old programmer maxim is \
that one should provide for Zero, One, or an Infinite number of any resource.   \
&lt;br&gt;&lt;/i&gt;&lt;i&gt;Since we do not desire an infinite number of representations of an onion \
address (per Roger) - and zero would not be useful, we should shoot for one, and only \
one.&lt;br&gt;&lt;/i&gt;&lt;i&gt;Not a cryptographic argument, but I think it's a human one.   \
:-)&lt;/i&gt;&lt;/blockquote&gt;&lt;div class="gmail-yj6qo gmail-ajU" \
style="font-size:12.8px"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There's a lot more, but \
I don't want to bury folk with a huge multi-message e-mail exchange; plus there \
is a lot of useful context "up-thread".   :-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
solid rgb(204,204,204);padding-left:1ex"&gt;As mentioned elsewhere in the thread, this \
is solved if that descriptor&lt;br&gt; contains (under the signature by the \
"master" onion key) the actual&lt;br&gt; onion address you were expected to use \
to get there.   Does it?   If so,&lt;br&gt; I think we don't have to worry about this \
problem at all.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope it does.   That sounds very \
much like what I expect to see in other network stacks.   \
:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      -a  &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature"&gt;&lt;a href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405190032</emailId><senderName>"Laura M. Roberts"</senderName><senderEmail>laurar@princeton.edu</senderEmail><timestampReceived>2017-04-05 19:00:32-0400</timestampReceived><subject>[tor-dev] "Anomalous keys in Tor relays" technical report now available</subject><body>

Hello, Tor devs!


We have just published a (not yet peer-reviewed) technical report entitled =
"Anomalous keys in Tor relays." https://nymity.ch/anomalous-tor-keys/

The project was inspired by the "Mining Your P's and Q's" paper from Hening=
er et. al., and in it, we take a closer look at the RSA keys used in Tor si=
nce 2005. We found that entities had purposely created anomalous keys in or=
der to attack Tor's onion services and that researchers had inadvertently c=
reated weak keys while conducting experiments on Tor. (None of the weak key=
s we found are affecting the current Tor network.)

We welcome your questions and feedback!


Regards,
George, Claudia, Laura, &amp; Philipp

[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=us-ascii"&gt;
&lt;/head&gt;
&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: \
after-white-space;" class=""&gt; &lt;div style="word-wrap: break-word; -webkit-nbsp-mode: \
space; -webkit-line-break: after-white-space;" class=""&gt; Hello, Tor devs!&lt;br \
class=""&gt; &lt;br class=""&gt;
&lt;br class=""&gt;
We have just published a (not yet peer-reviewed) technical report entitled \
"Anomalous keys in Tor relays." &lt;a \
href="https://nymity.ch/anomalous-tor-keys/" \
class=""&gt;https://nymity.ch/anomalous-tor-keys/&lt;/a&gt; &lt;div class=""&gt;&lt;br class=""&gt;
The project was inspired by the "Mining Your P's and Q's" paper from \
Heninger et. al., and in it, we take a closer look at the RSA keys used in Tor since \
2005. We found that entities had purposely created anomalous keys in order to attack \
Tor's onion services  and that researchers had inadvertently created weak keys \
while conducting experiments on Tor. (None of the weak keys we found are affecting \
the current Tor network.)&lt;br class=""&gt; &lt;br class=""&gt;
We welcome your questions and feedback!&lt;br class=""&gt;
&lt;br class=""&gt;
&lt;br class=""&gt;
Regards,&lt;br class=""&gt;
George, Claudia, Laura, &amp; Philipp&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170406133213</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-04-06 13:32:13-0400</timestampReceived><subject>Re: [tor-dev] Counter-RAPTOR Paper</subject><body>

On Wed, Apr 5, 2017 at 12:36 AM, Yixin Sun &lt;yixins@cs.princeton.edu&gt; wrote:
&gt; Hi all,
&gt; 
&gt; Our proposed defenses (Counter-RAPTOR) against active routing attacks on Tor will \
&gt; soon appear at IEEE S&amp;P in May. It's also available here: \
&gt; https://arxiv.org/abs/1704.00843 
&gt; In short, we have two lines of defenses:
&gt; (1) Entry Guard Selection (proactive defense, \
&gt; https://github.com/inspire-group/Counter-Raptor-Tor-Client) (2) BGP Monitoring on \
&gt; Tor relays (reactive defense, in progress of making it public) 
&gt; Please let us know if you have any questions/comments.

Hello!  Do you think we should consider your defense code from (1) for
possible merging into the mainline client, or is it more preliminary?

If we should merge it, we should probably write up a quick design
proposal, and open a ticket on the issue tracker.

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170406135846</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-04-06 13:58:46-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

On 6 April 2017 at 07:53, Donncha O'Cearbhaill &lt;donncha@donncha.is&gt; wrote:
&gt; Tom Ritter:
&gt;&gt; It seems reasonable but my first question is the UI. Do you have a
&gt;&gt; proposal?  The password field UI works, in my opinion, because it
&gt;&gt; shows up when the password field is focused on. Assuming one uses the
&gt;&gt; mouse to click on it (and doesn't tab to it from the username) - they
&gt;&gt; see it.
&gt;&gt;
&gt;&gt; How would you communicate this for .onion links or bitcoin text? These
&gt;&gt; fields are static text and would not be interacted with in the same
&gt;&gt; way as a password field.
&gt;&gt;
&gt;&gt; A link could indeed be clicked - so that's a hook for UX... A bitcoin
&gt;&gt; address would probably be highlighted for copying so that's another
&gt;&gt; hook... But what should it do?
&gt;
&gt; Thank you all for the suggestions in this thread. I agree that we need
&gt; to tie down a preliminary UI. I'm seeing two key hooks that we could use:
&gt;
&gt; * Detecting navigation from an insecure page to an onion URL or
&gt; bitcoin:// address.
&gt; * Reading and alerting to Bitcoin or onion addresses in the clipboard
&gt; buffer.
&gt;
&gt; I've been working on a proof-of-concept extension which implements both
&gt; of these hooks.
&gt;
&gt; The "clipboardRead" permission is needed to read the contents of the
&gt; clipboard from a Firefox extension. This was implemented in Firefox 54
&gt; (2017-02-13) in Mozilla bug #1312260 [1]. Unfortunately it will be quite
&gt; some time before Firefox 54 is included in an ESR release. The Mozilla
&gt; patch for this permission is &lt; 100 lines. Is this a feature that the TBB
&gt; team might consider back-porting to Tor Browser?
&gt;
&gt; I agree with David, this UI should be as intrusive as possible to
&gt; prevent users from shooting themselves in the foot. IMO navigation to
&gt; onion URLs from HTTP should be completely blocked. I also think that we
&gt; should wipe the users clipboard buffer if we detect a valid Bitcoin
&gt; address in it.
&gt;
&gt; The UI could suggest that a user manually retypes the Bitcoin or onion
&gt; address if they are certain that it is correct. I hope this type of
&gt; intrusive warning will reduce risky behaviour and encourage any Tor
&gt; related web services to move to TLS only.

[no hats]

Please no. Please give any sort of intrusive whatever I have to click
through but do not make me manually retype a bitcoin or onion address.
This is a usability nightmare, I would prefer you completely hide the
value entirely, so the user thinks it's a problem with the website
rather than hating Tor Browser.

Here's another idea besides click-through banners: using the
extension, create some sort of scratchpad that auto-populates the
bitcoin/onion address (and the user's Exit Node). Then reload the page
in a new circuit. Detect or prompt the user to compare them. If
they're the same, say "Phew, okay everything seems to be okay" and if
they're not, say "Jinkies! Would you consider pasting this information
in a bug report so we can investigate?"

Caveat: I don't know how common it is for HTTP websites with bitcoin
addresses to auto-generate payment addresses for privacy.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170407010908</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-07 01:09:08-0400</timestampReceived><subject>Re: [tor-dev] GSoC: Support all kinds of DNS queries</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Daniel Achleitner:
&gt; On 2017-04-02 05:22, Jeremy Rand wrote:
&gt;&gt; (Thinking out loud.)  It would be interesting to have some kind
&gt;&gt; of algorithm agility here.  For example, a Tor client could send
&gt;&gt; a request for a Namecoin domain name, and the exit relay would
&gt;&gt; return a Namecoin merkle proof in the same way that it would
&gt;&gt; return a DNSSEC signature if were a DNS doman name.
&gt; 
&gt; It certainly seems to be a good idea to design the cell format to
&gt; be agnostic as to what kind of "proof data" is attached to the DNS 
&gt; response. As prop219 just wraps around the existing DNS-packet 
&gt; wire-format, it should already allow that, provided that Namecoin
&gt; has a wire-format for the proof.

Awesome, that's great to hear.  Namecoin doesn't have a "canonical"
wire format for those proofs, but we have one implementation that made
up a format for its own use (with the intention of standardizing later).

&gt; Certainly out of scope for GSoC, but I'm wondering: Apart from
&gt; running a full Namecoin node (and storing the whole blockchain) on
&gt; every client/exit node/whatever, is there a privacy-preserving way
&gt; to resolve a .bit domain, i.e. without an upstream node/resolver
&gt; learning/logging exactly which domain was resolved?

I can think of 3 ways.

(1) We have a client right now that only downloads the full blocks
from the most recent year (which means it has all the transactions
that correspond to unexpired names); it also downloads the block
headers going back to the genesis block (so that it can verify PoW).
This requires around 10 minutes to do initial sync, and around 400 MB
of storage.  This client generates no network traffic for lookups, so
no one learns anything about what was resolved.

(2) It should be possible in theory to do a softfork that has a
coinbase commitment to a merkle root of all the unexpired names and
their values.  This merkle tree could be constructed such that you
could retrieve a subtree from another Namecoin node, and verify that
all the names in that subtree are authentic, while not revealing to
the node which name within that subtree you were looking up.
(Choosing the tradeoff between subtree size and privacy is up to the
user.)

(3) We could, hypothetically, hardfork to store only the hash of a
name in the blockchain rather than the name itself.  The value of the
name could be encrypted with a key derived from the preimage of the
hash.  This would hide the name being looked up unless the node being
queried already knew of a specific name or hash to be looking for.

I don't foresee (2) or (3) happening very soon, but maybe in the future.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY5uamAAoJELPy0WV4bWVwfCUP/3aHWVoqiA2/ClnHFeogIftP
xD8iUX+c8+vpy9IwqSnF/UUVg2Sg6tlJ1RxebrCO2CvBRGXWVZyBQoGWSWrTwIcC
1QIfXqGrTU7dBJzk578Rwz4K6TaqblWpDIJQ9dV0FwMttighVD62jaDiJiFqqmVN
TLFBjHBSanyxqnZ4g1fWS0baKVnzR2TgpaJiTaHNDhqv/FCKeR4Gnj3mGuxreO1z
w7FrvFYSF9esCcqYtMB0zkPFyXbuaYg2tinnlx6TdmzhsLIMHIZVOlVbY32CFeee
ZM3q9gogX0581rNF5oVfSxDVnD99n+1GMYpmpWoq0dQEnrK4AQoLumXqmlFmEr/6
85pNcm+gETs0TH3vT8Cnbkc5tchd0wejLOdGFFjQgPu6iIcHQy8bd1xAyWIO2Ygl
6dbuOvc72vCoqc2HuM0cRkJXqnToiZHtJx5jdRYImFMubWqLaVVB4shkHMCVUBGm
7FySsjWYU4vHsD74R8mrT79Gde3vOpqVFdsJQMoYAojWLk2Vzn9/wC/DayMDyO//
PKm2ET3iYefLil/fo1s7+JuAAUco1vGNvLkOf+0/3PTGsWi7QbWAOznvykOd6OmT
ap+rRdQfGTvEc+/m1q4fTCyRL/EaSyxNNgYBjKFfHyLHZJqP/CLXG49lruuQr9sH
9tJ8BCGpH8tEDHJUZb3l
=tnyY
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170408100100</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-04-08 10:01:00-0400</timestampReceived><subject>Re: [tor-dev] minimizing traffic for IoT Tor node over 3G/LTE</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Razvan Dragomirescu:
&gt; Thank you, Proposal 140 sounds perfect for what I need, that would minimize
&gt; traffic quite a bit! I see some code for it at
&gt; https://gitweb.torproject.org/tor.git/log/?qt=grep&amp;q=prop140 , I'm guessing
&gt; it's not complete yet.

Relevant ticket:
https://trac.torproject.org/projects/tor/ticket/13339







-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170408220346</emailId><senderName>James Evans</senderName><senderEmail>james@hedweb.com</senderEmail><timestampReceived>2017-04-08 22:03:46-0400</timestampReceived><subject>[tor-dev] Adding Single Onion Service support to Bitcoin Core</subject><body>

[Attachment #2 (multipart/alternative)]


Core is preparing to support this new tor feature. Any helpful suggestions
would be appreciated. :)

https://github.com/bitcoin/bitcoin/issues/9836
https://github.com/bitcoin/bitcoin/pull/10161

Thanks for all the great onion work!
James

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Core is preparing to support this new tor feature. Any helpful \
suggestions would be appreciated. :)&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/bitcoin/bitcoin/issues/9836"&gt;https://github.com/bitcoin/bitcoin/issues/9836&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a \
href="https://github.com/bitcoin/bitcoin/pull/10161"&gt;https://github.com/bitcoin/bitcoin/pull/10161&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks \
for all the great onion work!&lt;/div&gt;&lt;div&gt;James&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170409035634</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-04-09 03:56:34-0400</timestampReceived><subject>[tor-dev] Reverse Naming Proposals?</subject><body>

These recent naming proposals on list,
for forward naming 'string --&gt; onion, 1:1', I think.

Is anyone working on doing reverse naming,
'onion --&gt; string, 1:1' ? With links to such work?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170409075537</emailId><senderName>Ivan Tham</senderName><senderEmail>pickfire@riseup.net</senderEmail><timestampReceived>2017-04-09 07:55:37-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

meejah &lt;meejah@meejah.ca&gt; wrote:

&gt; 
&gt; It was suggested I post this to tor-dev; I prototyped a small thing
&gt; that allows the prop-279 APIs to be tested against actual-Tor without
&gt; changing Tor. That is, it does the "abuse the control-protocol" thing
&gt; but speaks to prop-279 style subprocesses.
&gt; 
&gt; This is just proof-of-concept and would need a little more fleshing out,
&gt; but should be sufficient to proceed with prototype implementations of
&gt; prop-279 clients.
&gt; 
&gt;    https://github.com/meejah/TorNS
&gt; 
&gt; -- 
&gt; meejah
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

I have created a simple client where it uses the hosts file, originally
planned for GSoC but I had missed the chance to submit it.

The part for the cancel still needs improvement, feel free to use it.

My repo: http://git.pickfire.tk/banana/
GH repo: https://github.com/pickfire/banana (mirror)

Good luck and have a nice day!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170410131411</emailId><senderName>Sukhbir Singh</senderName><senderEmail>azadi@riseup.net</senderEmail><timestampReceived>2017-04-10 13:14:11-0400</timestampReceived><subject>Re: [tor-dev] Feedback Extension for Tor Browser</subject><body>

Hello,

&gt; Is the project 'Feedback Extension for Tor Browser' still a part of GSoC
&gt; 2017? I have already submitted a proposal and would like to work on it.
&gt; Please help.

Yes, it is still a part of GSoC. We will let you know if we have any questions
or if there is any feedback on the proposal itself. 

(We can't comment on the status of the proposal during this period as per GSoC
guidelines.)

-- 
Sukhbir
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170410195717</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-04-10 19:57:17-0400</timestampReceived><subject>Re: [tor-dev] Control-port filtering: can it have a reasonable threat model?</subject><body>

[Attachment #2 (multipart/signed)]


On Mon, 10 Apr 2017 19:35:24 +0400
meejah &lt;meejah@meejah.ca&gt; wrote:
&gt; Obviously as per my other post I agree with fragmented / limited views
&gt; given to "real" applications of the control-port. However, personally
&gt; I don't see the point of implementing this in 'tor' itself -- existing
&gt; control-port filters are "fairly" limited code, typically in "safer
&gt; than C" languages anyway. So then you have the situation where
&gt; there's a single trusted application (the filter) conencted to the Tor
&gt; control-port.

I agree with this, because it's basically required to do certain
things, and for certain adversarial models.

&gt; Ultimately, it would probably be best if there was "a" robust
&gt; control-port filter that shipped as part of a Tor release. So if that
&gt; means "must implement it in C inside Tor" I guess so be it.

I moderately disagree with this.  It's not clear to me if a one size
fit's all solution (that supports all "first class platforms" and use
cases) would be easy to develop initially, and it will take continuous
love and care to support everything that people want to do.

By "first class" platforms in this context (since it's more client
facing) I'll start off with "Whatever Tor Browser happens to be
packaged for" as a first pass narrow definition.

Even if this was shipped, I'm trying to keep the external dependencies
required for correct sandbox functionality to a minimum, and something
that's part of the bundle it downloads/auto updates doesn't feel great
to me.

&gt; Maybe this would be a good target for "experiment with Rust" if
&gt; anyone's excited about writing control-port code in Rust...?

I disagree with this, but since it'll never be used by the sandbox, my
disagreement shouldn't stop anyone.

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170410221229</emailId><senderName>Mike Guidry</senderName><senderEmail>mike@mikeguidry.net</senderEmail><timestampReceived>2017-04-10 22:12:29-0400</timestampReceived><subject>Re: [tor-dev] Tracing TCP Connections online..</subject><body>

[Attachment #2 (multipart/alternative)]


re: grarpamp

I am writing a possible countermeasure which uses transactional requests.
You submit entire requests which are processed by the exit node.  Several
other situations can take place while routing to the exit node.  It would
also only require exit nodes to have updated to the newer feature.

I'll post as soon as I'm finished..

Thanks,
Mike Guidry

-----


&gt;This appears to describe an active network modulation attack (node DoS).
&gt;Either hammer tree on nodes of the expected path and trace the modulation,
&gt;or on all but the expected path to find unmodulated.
&gt;It generally requires GPA, deploying nodes, or being one end of the path...
&gt;in order to observe the results.
&gt;And it's old news.
&gt;As noted before, since Tor (and all other current anonymous overlays)
&gt;nodes do not perform their own independant buffering, reclocking and
&gt;contracting for expected hop parameters... this vulnerability will remain.

&gt;Anyone wanting to research, code, deploy, and present on
&gt;such countermeasures would certainly be welcomed.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;re: grarpamp&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;I am \
writing a possible countermeasure  which uses transactional requests.   You submit \
entire requests which are processed by the exit node.   Several other situations can \
take place while routing to the exit node.   It would also only require exit nodes to \
have updated to the newer feature.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;I'll post as soon as I'm \
finished..&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;Thanks,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;Mike \
Guidry&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;-----&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&gt;This appears to describe an active \
network modulation attack (node DoS).&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;Either hammer tree on nodes of the expected path and \
trace the modulation,&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;or on all but the expected path to find \
unmodulated.&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt;It \
generally requires GPA, deploying nodes, or being one end of the path...&lt;/span&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt;in order to observe the \
results.&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt;And \
it's old news.&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;As noted before, since Tor (and all other current \
anonymous overlays)&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;nodes do not perform their own independant buffering, \
reclocking and&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;contracting for expected hop parameters... this \
vulnerability will remain.&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt;Anyone wanting to \
research, code, deploy, and present on&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&gt;such countermeasures would certainly be \
welcomed.&lt;/span&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170411024420</emailId><senderName>Mike Guidry</senderName><senderEmail>mike@mikeguidry.net</senderEmail><timestampReceived>2017-04-11 02:44:20-0400</timestampReceived><subject>Re: [tor-dev] Contents of tor-dev digest...</subject><body>

[Attachment #2 (multipart/alternative)]


I didn't write the paper for this list specifically.  It requires
performing DDoS attacks.  Your the one trolling someone in reality.  I am
not going to go out of my way to spend time when realistically its quite
simple to perform.  If you don't want to use NTP, and other factors to
performing efficient timing attacks then you can just completely blackhole
networks.  If the connection dies, or an ACK storm persists then you have
found the culprit..

I am not releasing papers for recognition.  I don't care whether or not its
perfect.. Its because its a vulnerability, and I'm trying to ensure people
understand the possibilities...

I am sorry that I do not write papers as you wish I would...  I hope that
you enjoy my explanation of a solution more than you have about the issue
itself.

have a great week,
mike

On Mon, Apr 10, 2017 at 8:04 PM, dawuud &lt;dawuud@riseup.net&gt; wrote:

&gt;
&gt; &gt; I'm not presenting a scientific paper.  Its an actual method that works.
&gt;
&gt; You must learn how to articulate the idea without muddling it with all
&gt; kinds
&gt; of other irrelevant stuff. Nobody mentioned scientific papers. Are you
&gt; saying
&gt; that you don't read papers describing attacks on Tor? They are really fun
&gt; to read.
&gt;
&gt; &gt; You can DDoS various networks to compare against active connections on
&gt; TOR,
&gt; &gt; and otherwise...
&gt;
&gt; What are the assumptions of the attack?
&gt; What kind of capabilities must an attacker have?
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I didn't write the paper for this list specifically.   It requires \
performing DDoS attacks.   Your the one trolling someone in reality.   I am not going \
to go out of my way to spend time when realistically its quite simple to perform.   \
If you don't want to use NTP, and other factors to performing efficient timing \
attacks then you can just completely blackhole networks.   If the connection dies, or \
an ACK storm persists then you have found the culprit..&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am not \
releasing papers for recognition.   I don't care whether or not its perfect.. Its \
because its a vulnerability, and I'm trying to ensure people understand the \
possibilities...&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am sorry that I do not write papers as \
you wish I would...   I hope that you enjoy my explanation of a solution more than \
you have about the issue itself.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;have a great \
week,&lt;/div&gt;&lt;div&gt;mike&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Apr 10, 2017 at 8:04 PM, dawuud &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:dawuud@riseup.net" target="_blank"&gt;dawuud@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;span class=""&gt;&lt;br&gt; &gt; I'm not presenting a \
scientific paper.   Its an actual method that works.&lt;br&gt; &lt;br&gt;
&lt;/span&gt;You must learn how to articulate the idea without muddling it with all \
kinds&lt;br&gt; of other irrelevant stuff. Nobody mentioned scientific papers. Are you \
saying&lt;br&gt; that you don't read papers describing attacks on Tor? They are really \
fun to read.&lt;br&gt; &lt;span class=""&gt;&lt;br&gt;
&gt; You can DDoS various networks to compare against active connections on TOR,&lt;br&gt;
&gt; and otherwise...&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;What are the assumptions of the attack?&lt;br&gt;
What kind of capabilities must an attacker have?&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170411113104</emailId><senderName>ng0</senderName><senderEmail>contact.ng0@cryptolab.net</senderEmail><timestampReceived>2017-04-11 11:31:04-0400</timestampReceived><subject>[tor-dev] RFC: porting torbrowser (was: Re: GNU Guix and Tor Browser Packaging)</subject><body>

Hi folks,

as your trademarks team / person suggested to me I get in touch with the
dev team of torproject. While I'm more involved in GNUnet, I work at the
intersection of projects. Currently this means I'm involved in system
integration. At Guix we are interested in working closer with projects
like tor, TAILS, Whonix and the like. Porting torbrowser is not only in
the interest of the Guix community but also in the interest of Wonix who
recently expressed interest in selectively using Guix for their work.
For me as maintainer of the system (in development) pragmaOS it also
means that we can decide between icecat OR torless torbrowser for
proxied GNUnet connections.

I'm interested in your response to the actions listed below and wether
you think this will still qualify as torbrowser or what other option you
propose for us at Guix to use. "Option" here means that I am not sure
what other graphical theme you have for versions of the browser which do
not use the trademark when they can (logically) also not use the firefox
trademarks.
I would reflect in the description of the package that it is not
torbrowser but a reconstruction of the way torbrowser is build, tracking
upstream as closely as possible while removing (list of features which
were removed goes here).
This can be compared to what the inoffical Gentoo maintainer does in the
.ebuild file here:
https://data.gpo.zugaina.org/torbrowser/www-client/torbrowser/

My request here is just in the position as a contributor to Guix, not
for pragmatique (the project which works on pragmaOS etc), Whonix,
GNUnet or any other project I mentioned before. 

Thanks in advance. Now the content I've been talking about:

It looks like the changes I need to make to torbrowser are not so
grave at all. Someone pointed me to the gnu-linux-libre@nongnu.org list
to reach out to other FSDG systems.
The thread can be reviewed here:
https://lists.nongnu.org/archive/html/gnu-linux-libre/2017-03/msg00002.html

Basically:

I will need to discourage Mozilla leftovers:
- the mozilla addon service will be overwritten, in other words:
  Where you would find https://addons.mozilla.org/ at "Preferences &gt; AddOns"
  it will be replaced by the thing Icecat  points to. Longterm plan is
  to offer firefox extensions native through "guix package -i
  youraddonnamehere".

Privacy / Tracking reasons:
- Firefox "Sync" will be disabled.
- Google will be removed from the search plugins if I understood the
  procedure correctly (at least it is not in Icecat)

A question directly for torbrowser team:
- about:license does not list licenses the torbrowser project uses, only
  firefox. Why?

DRM
- Luke from parabola mentioned that drm has been enabled in recent
  versions of torbrowser. This needs to be removed aswell.
  https://git.parabola.nu/abslibre.git/tree/libre/iceweasel/vendor.js#n23
  https://git.parabola.nu/abslibre.git/tree/libre/iceweasel/mozconfig#n39
  https://gitweb.torproject.org/tor-browser.git/tree/browser/app/profile/firefox.js?h=tor-browser-45.8.0esr-7.0-1#n1511


ng0 transcribed 3.4K bytes:
&gt; bancfc@openmailbox.org transcribed 1.9K bytes:
&gt; &gt; There is a serious Tor Browser packaging effort [3][4] being done by ng0
&gt; &gt; (GNUnet dev) for the GNU Guix [0] package manager. GNU Guix supports
&gt; 
&gt; Eh, now that the cat is out of the bag (cat's don't belong into bags
&gt; anyway), I think I have to do this now and not on my own conditions.
&gt; 
&gt; Hi!
&gt; 
&gt; As I told bancfc somewhere else, I've had a short contact with the
&gt; trademarks team of torproject. I will get back to you when someone was
&gt; able to identify issues in torbrowser which might lead to modifications
&gt; of torbrowser (for more details I just hope trademarks@tp.o can
&gt; communicate it to you) because all packaged software which is included
&gt; in upstream of Guix (master) must follow the GNU Free System
&gt; Distribution Guidelines.
&gt; I hope that I have to make as little modifications as possible as I
&gt; I am aware that the fingerprint of the browser could change depending on
&gt; the kind of changes.
&gt; 
&gt; I hope to get back to this task in about 3 weeks, right now I'm busy
&gt; with getting more documentation done for another project.
&gt; 
&gt; &gt; transactional upgrades and roll-backs, unprivileged package management,
&gt; &gt; per-user profiles and most importantly reproducible builds. I have checked
&gt; &gt; with Guix's upstream and they are working on making a binary mirror
&gt; &gt; available over a Tor Hidden Service. [2] Also planned is resilience [2] to
&gt; &gt; the attack outlined in the TUF threat model. [1]
&gt; &gt; 
&gt; &gt; Back to the topic of Tor Browser packaging. While there are good reasons for
&gt; &gt; Debian's pakaging policies they make packaging of fast evolving software
&gt; &gt; (and especially with TBB's reliance on a opaque binary VM for builds)
&gt; &gt; impractial. Both we and Micah have been doing a good effort to automate
&gt; &gt; downloading and validating TBB but I still believe its a maintenance burden
&gt; &gt; and Guix may be a way out of that for Linux distros in general.
&gt; &gt; 
&gt; &gt; What are your thoughts on this?
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; ***
&gt; &gt; 
&gt; &gt; [0] https://www.gnu.org/software/guix/
&gt; &gt; [1] https://github.com/theupdateframework/tuf/blob/develop/SECURITY.md
&gt; &gt; [2] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00192.html
&gt; &gt; [3] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00189.html
&gt; &gt; [4] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00149.html
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
PGP and more: https://people.pragmatique.xyz/ng0/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170412113112</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-12 11:31:12-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt prop224 onion address encoding (was Re: Proposition: Applying an AONT</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; On 11/04/17 11:45, George Kadianakis wrote:
&gt;&gt; We basically add the canonical onion address in the inner encrypted
&gt;&gt; layer of the descriptor, and expect the client to verify it. I made this
&gt;&gt; feature optional in case we ever decide it was a bad idea.
&gt;
&gt; Is the version number also included in the blinded key derivation? I
&gt; haven't been keeping up with prop224 developments, so apologies if
&gt; that's already been settled, but in your previous email it sounded like
&gt; it was one of the suggestions but not one of the action items.
&gt;

That's a fine question, and it made me think deeper about our options.

I think both of the following suggestions from my previous email aim to
protect from the same attacks:
a) Include version number in blinded key derivation formula
b) Include canonical onion address in descriptor

Both (a) and (b) above aim to protect against scenarios where an
attacker (without private keys) takes a legitimate onion address, tweaks
its metadata bits (version/whatever), and creates a
different-but-equivalent onion address that has the exact same behavior
as the original one (points to the same 25519 key, same descriptor,
etc.). See Alec's and Ian's emails for a demonstration of how this can
be exploited:
https://lists.torproject.org/pipermail/tor-dev/2017-April/012160.html
https://lists.torproject.org/pipermail/tor-dev/2017-April/012159.html

I'm pretty sure that both (a) and (b) defend against Alec's and Ian's
attack since:

- With (a), the different-but-equivalent onion address would produce a
  different blinded key from the original onion address. The attacker
  would not be able to forge a signature for the descriptor since they
  don't know the private part of the new blinded key, so the descriptor
  would not be accepted by the HSDir or the client.

- With (b), the different-but-equivalent onion address would work, but
  when the client fetches the descriptor, the client would verify the
  new "canonical-onion-addr" field, notice that they reached this onion
  service from another address, and reject the descriptor. It's like we
  are including an SSL CN field in our HS descriptors.

I considered (b) easier to understand and reason about, and it also
seems to protect against a wider variety of descriptor replay attacks,
and that's why I suggested we go with (b).

My main fear with (b) is that in the future we might come up with a new
load-balancing scheme of sorts that would get screwed by the
"canonical-onion-addr" field. It does not seem to pose a problem with
onionbalance or stealth-auth kind of schemes, so all is good so far.
Please let me know if you can think of a scenario where (b) is a bad idea.

&gt; If the version number is included in the descriptor but not in the
&gt; blinded key derivation, can a service publish descriptors for multiple
&gt; protocol versions? Would there be a conflict if the HS directories store
&gt; the descriptors under the same blinded key?
&gt;

Yes it's possible to publish descs for multiple protocol versions, since
we use a different URL for each version. Quoting from spec:

   Hidden service descriptors conforming to this specification are uploaded
   with an HTTP POST request to the URL /tor/hs/&lt;version&gt;/publish relative to
   the hidden service directory's root, and downloaded with an HTTP GET
   request for the URL /tor/hs/&lt;version&gt;/&lt;z&gt; where &lt;z&gt; is a base64 encoding of
   the hidden service's blinded public key and &lt;version&gt; is the protocol
   version which is "3" in this case.

Also the HSDirs store the descriptors using both the publickey and the
version as indices, so this should not be a problem.

---

Thanks for all the feedback people.

Greetings from Athens!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170413022244</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-13 02:22:44-0400</timestampReceived><subject>Re: [tor-dev] txtorcon versioning</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; In the above you say "The onion service APIs *will* change" but also
&gt; "At one point, I thought of breaking a few now-regrettable
&gt; APIs. However, I will not do this." - are you changing APIs or not?

&gt; If you are then Calendar Versioning will make it tricker for your
&gt; users to figure out when you're doing so.

The programming guide and docstrings mention which onion APIs are
experimental; those will change.

The previously-released TCPHiddenServiceEndpoint and
EphemeralHiddenService APIs will maintain backwards compatiblity. The
names for the new things use "onion" (e.g. .create_onion_service)

Basically the idea is similar to (inspired by?) what Twisted itself
provides: if your code doesn't currently cause txtorcon to emit
warnings, then you can upgrade. Currently there are no warnings, so
everyone can upgrade.

cheers,

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170413082323</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-04-13 08:23:23-0400</timestampReceived><subject>[tor-dev] Release: sandboxed-tor-browser-0.0.5</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

I just tagged sandboxed-tor-browser 0.0.5.  Binaries will be built when
the next Tor Browser build happens (soon).  Astute readers will notice
that I skipped the release announcement for 0.0.4, which was tagged
yesterday.  This is due to changes related to e10s being enabled in the
next alpha release, that were caught after the 0.0.4 tag was created.

Changes in version 0.0.5 - 2017-04-13:
 * Bug 21764: Use bubblewrap's `--die-with-parent` when supported.
 * Fix e10s Web Content crash on systems with grsec kernels.
 * Add `prlimit64` to the firefox system call whitelist.

Changes in version 0.0.4 - 2017-04-12:
 * Bug 21928: Force a reinstall if an existing hardened bundle is
   present.
 * Bug 21929: Remove hardened/ASAN related code.
 * Bug 21927: Remove the ability to install/update the hardened bundle.
 * Bug 21244: Update the MAR signing key for 7.0.
 * Bug 21536: Remove asn's scramblesuit bridge from Tor Browser.
 * Fix compilation with Go 1.8.
 * Use Config.Clone() to clone TLS configs when available.

The main major change is the eradication of support for the `hardened`
series, as the Tor Browser team will be dropping it starting from the
next release (#20814).

The impact on `sandboxed-tor-browser` + `hardened` users is thus:

 * (&lt; 0.0.4) Will not correctly transition to the alpha channel.
   Sorry.  The bundle may or may not be rendered non-functional by the
   transition update, I don't have a good way to test the Tor Browser
   auto update infrastructure with updates that haven't been released
   yet.

 * (&gt;= 0.0.4) When `sandboxed-tor-browser` is launched, it will detect
   the `hardened` bundle and force a reinstall.  This will eradicate the
   existing bundle directory obliterating user customization,
   bookmarks, and downloads (unless the download directory is
   overridden).

   A warning dialog box is displayed prior to booting the user back to
   the installation screen.

Known issues:

 * Sending SIGINT to `sandboxed-tor-browser` (or likely otherwise
   killing the process) will leave the firefox process running on
   ESR52 + e10s builds, *unless* bubblewrap is version 0.1.8 or newer.
   Exiting firefox normally works as intended.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170413173503</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-13 17:35:03-0400</timestampReceived><subject>Re: [tor-dev] [Twisted-Python] txtorcon versioning</subject><body>

Manish Tomar &lt;manish.tomar@gmail.com&gt; writes:

&gt; If you don't mind, could you describe your reasoning behind this
&gt; decision? I am always curious to learn any concrete reasons behind
&gt; this. If this seems spammy to the mailing list, please feel free to
&gt; respond only to me.

Mostly because I don't want to ever have breaking changes, so then
you're "not supposed" to upgdate the big version number. I haven't found
that "semantic versioning" has been working very well for the
release-style of txtorcon.

Other, less important reasons: Twisted does this; it's easier to tell
"how new" a release is; and big version numbers are cool (just kidding).

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170415201129</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-15 20:11:29-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

On Wed, Apr 12, 2017 at 05:57:00PM +0300, George Kadianakis wrote:
&gt; An update:
&gt; 
&gt; After lots of discussions in the Amsterdam Tor meeting, the following
&gt; approach was suggested for cleansing keys of their torsion components
&gt; that is more friendly towards hierarchical key-derivation schemes:
&gt;         https://moderncrypto.org/mail-archive/curves/2017/000866.html
&gt; 
&gt; However, my current intuition is to just not do this for hidden service
&gt; ed25519 blinded keys. Those keys are only used for signing descriptors
&gt; which should be safe to do, and we don't plan to use them for D-H any
&gt; time soon. If we or some crazy app EVER decides to use those ephemeral
&gt; keys for key exchange, we would need to use a special DH function that
&gt; kills the tensor component of keys before using them, as suggested by
&gt; Trevor here: https://moderncrypto.org/mail-archive/curves/2017/000874.html
&gt; 
&gt; Please let me know if you think this is not a good idea!

You're correct that you don't need to do anything special for
signatures, since you created the key yourself.

For DH, the torsion-safe representative method was meant to be a
replacement for the "special DH function" you point to at the end of
your message.  The win of TSR is that, if no one's doing anything
dastardly, you get the *same answer* as a regular unmodified DH, but any
attempt at a malicious component to a received DH value is silently
zeroed out, at basically no extra cost.  The method you cite above also
has basically no extra cost, but produces a *different* answer, so
everyone has to upgrade at once if you've got an already-deployed
system.  (Which we don't, to be sure.)  The method of "explicitly check
for a torsion component and fail if there is one" does produce the same
answer as plain DH, but has about double the cost of plain DH (though
there are some tricks to cut that down a bit).

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170417220433</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-04-17 22:04:33-0400</timestampReceived><subject>[tor-dev] Thoughts on the Counter-RAPTOR paper</subject><body>

Hi Prateek, Yixin, (and please involve your other authors as you like),

(I'm including tor-dev here too so other Tor people can follow along,
and maybe even get involved in the research or the discussion.)

I looked through "Counter-RAPTOR: Safeguarding Tor Against Active
Routing Attacks":
https://arxiv.org/abs/1704.00843

For the tl;dr for others here, the paper: a) comes up with metrics for
how to measure resilience of Tor relays to BGP hijacking attacks, and
then does the measurements; b) describes a way that clients can choose
their guards to be less vulnerable to BGP hijacks, while also considering
performance and anonymity loss when guard choice is influenced by client
location; and c) builds a monitoring system that takes live BGP feeds
and looks for routing table anomalies that could be hijack attempts.

Here are some hopefully useful thoughts:

-----------------------------------------------------------------------

0) Since I opted to write these thoughts in public, I should put a
little note here in case any journalists run across it and wonder. Yay
research! We love research on Tor -- in fact, research like this is the
reason Tor is so strong. For many more details about our perspective on
Tor research papers, see
https://blog.torproject.org/blog/tor-heart-pets-and-privacy-research-community

-----------------------------------------------------------------------

1a) The "live BGP feed anomaly detection" part sounds really interesting,
since in theory we could start using it really soon now. Have you
continued to run it since you wrote the paper? Have you done any more
recent analysis on its false positive rate since then?

I guess one of the real challenges here is that since most of the alerts
are false positives, we really need a routing expert to be able to look
at each alert and assess whether we should be worried about it. How hard
is it to locate such an expert? Is there even such a thing as an expert
in all routing tables, or do we need expertise in "what that part of
the network is supposed to look like", which doesn't easily scale to
the whole Internet?

Or maybe said another way, how much headway can we make on automating
the analysis, to make the frequency of alerts manageable?

I ask because it's really easy to write a tool that sends a bunch of
warnings, and if some of them are false positives, or heck even if
they're not but we don't know how to assess how bad they really are,
then all we've done is make yet another automated emailer. (We've made
a set of these already, to e.g. notice when relays change their identity
key a lot:
https://gitweb.torproject.org/doctor.git/tree/
but often nobody can figure out whether such an anomaly is really an
attack or what, so it's a constant struggle to keep the volume low enough
that people don't just ignore the mails.)

The big picture question is: what steps remain from what you have now
to something that we can actually use?

1b) How does your live-BGP-feed-anomaly-detector compare (either in
design, or in closeness to actually being usable ;) to the one Micah
Sherr was working on from their PETS 2016 paper?
https://security.cs.georgetown.edu/~msherr/reviewed_abstracts.html#tor-dataplane-defenses

1c) Your paper suggests that an alert from a potential hijack attempt
could make clients abandon the guard for a while, to keep clients safe
from hijack attempts. What about second-order effects of such a design,
where the attacker's *goal* is to get clients to abandon a guard, so they
add some sketchy routes somewhere to trigger an alert? Specifically,
how much easier is it to add sketchy routes that make it look like
somebody is attempting an attack, compared to actually succeeding at
hijacking traffic?

I guess a related question (sorry for my BGP naivete) is: if we're worried
about false positives in the alerts, how much authentication and/or
attribution is there for sketchy routing table entries in general? Can
some jerk drive up our false positive rate, by adding scary entries
here and there, in a way that's sustainable? Or heck, can some jerk DDoS
parts of the Internet in a way that induces routing table changes that
we think look sketchy? These are not reasons to not take the first steps
in the arms race, but it's good to know what the later steps might be.

-----------------------------------------------------------------------

2a) Re changing guard selection, you should check out proposal 271,
which resulted in the new guard-spec.txt as of Tor 0.3.0.x:
https://gitweb.torproject.org/torspec.git/tree/guard-spec.txt
I don't fully understand it yet (so many things!), but I bet any future
guard selection change proposal should be relative to this design.

2b) Your guard selection algorithm makes the assumption that relays with
the Guard flag are the only ones worth choosing from, and then describes
a way to choose from among them with different weightings. But you could
take a step back, and decide that resilience to BGP hijack should be one
of the factors for whether a relay gets the Guard flag in the first place.

It sounded from your analysis like some ASes, like OVH, are simply
bad news for (nearly) all Tor clients. Your proposed guard selection
strategy reduced, but did not eliminate, the chances that clients would
get screwed by picking one of these OVH relays. And the tradeoff was
that by only reducing the chances, you left the performance changes not
as extreme as you might have otherwise.

How much of the scariness of a relay is a function of the location of
the particular client who is considering using it, and how much is a
function of the average (expected) locations of clients? That is, can we
identify relays that are likely to be bad news for many different clients,
and downplay their weights (or withhold the Guard flag) for everybody?

The advantage of making the same decision for all clients is that you
can get rid of the "what does guard choice tell you about the client"
anonymity question, which is a big win if the rest of the effects aren't
too bad.

Which leads me to the next topic:

-----------------------------------------------------------------------

3) I think you're right that when analyzing a new path selection strategy,
there are three big things to investigate:

a) Does the new behavior adequately accomplish the goal that made you want
a new path selection strategy (in this case resilience to BGP attacks)?

b) What does the new behavior do to anonymity, both in terms of the global
effect (e.g. by flattening the selection weights or by concentrating
traffic in fewer relays or on fewer networks) and on the individual
epistemic side (e.g. by leaking information about the user because of
behavior that is a function of sensitive user details)?

c) What are the expected changes to performance, and are there particular
scenarios (like high load or low load) that have higher or lower impact?

I confess that I don't really buy your analysis for 'b' or 'c' in this
paper. Average change in entropy doesn't tell me whether particular user
populations are especially impacted, and a tiny Shadow simulation with
one particular network load and client behavior doesn't tell me whether
things will or won't get much worse under other network loads or other
client behavior.

I can't really fault this paper though, because the structure of an
academic research paper means you can only do so much in one paper, and
you did a bunch of other interesting things instead. We, the Tor research
community, really need better tools for reasoning about the interaction
between anonymity and performance.

In fact, there sure have been a lot of Tor path selection papers over
the past decade which each invent their own ad hoc analysis approach
for showing that their proposed change doesn't impact anonymity or
performance "too much". Is it time for a Systemization of Knowledge
paper on this area -- with the goal of coming up with best practices
that future papers can use to provide more convincing analysis?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170420160300</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-04-20 16:03:00-0400</timestampReceived><subject>Re: [tor-dev] maatuska&amp;#39; s bwscanner down since 2017-04-14 -&amp;gt; significant drop in relay traffi</subject><body>

[Attachment #2 (multipart/signed)]


On 20 Apr (15:46:46), relayoperator@openmailboxbeta.com wrote:
&gt; &gt; On Thu, Apr 20, 2017 at 10:54:21AM -0000, relayoperator@openmailboxbeta.com \
&gt; &gt; wrote:
&gt; &gt; &gt; Hi Tom!
&gt; &gt; &gt; since maatuska's bwscanner is down [1] I see a significant drop of traffic on \
&gt; &gt; &gt; many of my relays, and I believe this is related. Do you have any update to [2] \
&gt; &gt; &gt; on when maatuska will report bwscan results again? thanks,
&gt; &gt; &gt; a concerned relayoperator
&gt; &gt; 
&gt; &gt; I am also seeing a strange sudden drop in usage:
&gt; &gt; 
&gt; &gt; https://atlas.torproject.org/#details/BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E
&gt; &gt; 
&gt; &gt; What's going on?
&gt; 
&gt; In your case the traffic dropped but the consensus weight and exit probability is \
&gt; going way up.  This is also strange but I guess unrelated to maatuska.
&gt; 
&gt; Why is David Goulet's munin showing 8k measured lines for maatuska when there are \
&gt; 0?

Well that is a very good question!

And turns out there is a bug in that script that graph the measurements!

I just fixed it hopefully so it should show the right values.

Thanks for pointing it out!
David

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
XB0WmUtFV8yAyvXn1dt+G8GS7KRo1zTzZu0D3/YeyxQ=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170420184430</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-04-20 18:44:30-0400</timestampReceived><subject>Re: [tor-dev] maatuska's bwscanner down since 2017-04-14 -&gt; significant drop in relay traffic</subject><body>

On 20 April 2017 at 10:09, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; On Thu, Apr 20, 2017 at 10:54:21AM -0000, relayoperator@openmailboxbeta.com wrote:
&gt; &gt; Hi Tom!
&gt; &gt; since maatuska's bwscanner is down [1] I see a significant drop of traffic on \
&gt; &gt; many of my relays, and I believe this is related. Do you have any update to [2] \
&gt; &gt; on when maatuska will report bwscan results again? thanks,
&gt; &gt; a concerned relayoperator
&gt; 
&gt; I am also seeing a strange sudden drop in usage:
&gt; 
&gt; https://atlas.torproject.org/#details/BCEDF6C193AA687AE471B8A22EBF6BC57C2D285E
&gt; 
&gt; What's going on?


I can confirm that maatuska's bwauth has been down since last weekend
and that we've been unable to get the box back up. We're seeing if we
can stand up a new one. No ETA. Sorry for the minimal communication on
it, but haven't had a more detailed update.

To determine if the loss of maatuska's bwauth has been the particular
thing affecting a particular relay is labor intensive at this time:
you'd need to see if maatuska had been on the high-side-of-median for
your relay measured value resulting in a lower assignment when it went
away.  You could do this through historical consensus-health documents
(use the arrow on the detailed page next to your relay) or through
vote+consensus comparisons.  Not user friendly though.

We are working on better bwauth analysis tools in #21992, #21993,
#21994, and #21882 - but those are bwauths-as-a-whole, not individual
relay analysis.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170421062500</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-21 06:25:00-0400</timestampReceived><subject>[tor-dev] txtorcon 0.19.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm very happy to release txtorcon 0.19.0. This merges most of the
development that happened over the last several months on the
release-1.x branch. Featuring:

 * Full Python3 support (and universal wheels)

 * Drop txsocksx and use a custom implementation (this also implements
   the custom Tor SOCKS5 methods RESOLVE and RESOLVE_PTR). Uses
   Automat for the state-machine.

 * Drop support for older Twisted releases (12, 13 and 14 are no
   longer supported).

 * Add a top-level API object (txtorcon.Tor) that abstracts a running
   Tor. Instances of this class are created with txtorcon.connect or
   txtorcon.launch. These instances are intended to be "the"
   high-level API and most users shouldn't need anything else.

 * Integrated support for twisted.web.client.Agent, baked into
   txtorcon.Tor. This allows simple, straightforward use of treq or
   "raw" twisted.web.client for making client-type Web requests via
   Tor. Automatically handles configuration of SOCKS ports.

 * new high-level API for putting streams on specific Circuits. This
   adds txtorcon.Circuit.stream_via and txtorcon.Circuit.web_agent
   methods that work the same as the "Tor" equivalent methods except
   they use a specific circuit. This makes
   txtorcon.TorState.set_attacher the "low-level" / "expert"
   interface. Most users should only need the new API.

 * big revamp / re-write of the documentation, including the new
   Programming Guide:
   https://txtorcon.readthedocs.io/en/latest/guide.html

 * Issue 203: https://github.com/meejah/txtorcon/issues/203

 * new helper: txtorcon.Router.get_onionoo_details which downloads
   JSON for a particular relay from OnionOO

 * new helper: txtorcon.util.create_tbb_web_headers which returns
   headers resembling a recent Tor Browser suitable for use with
   Twisted or treq web agents.

 * Issue 72: https://github.com/meejah/txtorcon/issues/72

 * Specific SocksError subclasses for all the available SOCKS5 errors
   added by https://github.com/felipedau

 * (more) Python3 fixes from https://github.com/rodrigc

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.19.0
   https://github.com/meejah/txtorcon/releases/tag/v0.19.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.19.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.19.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
09d56fbd6e33eef7405c8ca354bbba06da2cefa02763d15c4bc9ac274c5daeeb  \
dist/txtorcon-0.19.0.tar.gz \
cc51b4249ad126c31ea2746ec5ef1bcb7f6b0c34ced070913ed7772c0e48edf5  \
dist/txtorcon-0.19.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJY+ZjOAAoJEMJgKAMSgGmnadEH/R0YCoID3xTkbFL7mVhtqY2e
p7sPcFT50jUGDASaER2YoQ4syzptnQcLid5/pCf+F2xMwCVgayqaipNXtugNHZIl
9cCOnI09+IntCFLkVXQqMGnEzSSzcM0Ln87Qa9MMjNNZM+aj2WshmFnObdqsWNRo
tIhnuKgMDgqoO9OgiXCsUXFQeooDDidnrnJgl5U7AA0+13nIar+/q9vCxMtDqSV9
kfh5IkB4RaeJTzDtTMYQKKHTIltdn7o0LrCyp1QsMhX+iHU4xZVOi7etgFnACqsP
S1u2LMT1FggvyEAzIwn45ADhKpuPBrR35N5C21vQklHVEb9nQxI9LXTHCi0Fv5g=
=mGZj
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170421194253</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-04-21 19:42:53-0400</timestampReceived><subject>[tor-dev] Provisional Draft of Hyphae</subject><body>

[Attachment #2 (multipart/signed)]


Hello!

Henry and I have written up a provisional draft design for a social bridge
distribution scheme, modelled after rBridge, which we're calling Hyphae.
For those further interested, here is a draft PDF. [0]  Included within is:

 - A technical history, with primary sources, of censorship of the Tor
   network, as well as remediations for those censorship attempts;

 - A description of the bridge distribution problem, including orthogonal
   problems and solutions, and prior proposals specific to the bridge
   distribution;

 - A description of an algebraic-MAC attribute-based credential scheme,
   requisite non-interactive zero-knowledge proofs, and sub-credentials and
   tokens, which we use to build our bridge distribution protocol;

 - A centralised, anonymous micropayments scheme, which we hope is of
   interest to other projects (such as Brave);

 - A description of our Hyphae protocol;

 - An high-level, cryptographic and protocol design comparison to the
   rBridge protocol; and

 - Draft notes on our implementation.

Please note that this is a provisional draft paper, containing the design
but not yet containing results specific to our implementation.  We expect
some things to change in minor ways during further refinement and
implementation.  That said, we welcome all feedback and appreciate review.

[0]: https://patternsinthevoid.net/hyphae/hyphae.pdf

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170423211423</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-23 21:14:23-0400</timestampReceived><subject>Re: [tor-dev] Experimental Namecoin naming for Tor</subject><body>

Jeremy Rand &lt;jeremyrand@airmail.cc&gt; writes:

Hi,
this sounds interesting!

&gt; This is all proof of concept for now; some or all of this code will be
&gt; rewritten later (hopefully to use the pluggable naming API instead of
&gt; the control port).

If/when you *do* have code that speaks the proposed naming protocol over
stdin/stdout it can immediately be tested and used with this PoC:

   https://github.com/meejah/torns

This should already work fine out-of-the-box with Tor Browser Bundle
(and of course a system Tor) as it sets (and re-sets) the appropriate
options (i.e. setting __LeaseStreamsUnattached back to 0 etc).

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170425142508</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-25 14:25:08-0400</timestampReceived><subject>Re: [tor-dev] Action items wrt ed25519 onion address verification in prop224 (was Re: [tor-project] </subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Tue, Apr 25, 2017 at 03:38:37PM +0300, George Kadianakis wrote:
&gt; &gt; &gt; It turns out the point whose packed representation is 32 bytes of 0x00
&gt; &gt; &gt; is a torsion point; it is the point (-1,0).
&gt; &gt; &gt; 
&gt; &gt; &gt; Indeed, these are the 7 pure torsion points in ed25519:
&gt; &gt; &gt; 
&gt; &gt; &gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05
&gt; &gt; &gt; 0000000000000000000000000000000000000000000000000000000000000000 =(-1,0)
&gt; &gt; &gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a
&gt; &gt; &gt; ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f =(0,-1)
&gt; &gt; &gt; c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa
&gt; &gt; &gt; 0000000000000000000000000000000000000000000000000000000000000080 =(1,0)
&gt; &gt; &gt; 26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85
&gt; &gt; &gt; 
&gt; &gt; &gt; So just take any of the above points, and add it to a valid pubkey to
&gt; &gt; &gt; get an invalid pubkey.
&gt; &gt; &gt; 
&gt; &gt; &gt; You should probably also check points not on the curve at all, such as:
&gt; &gt; &gt; 
&gt; &gt; &gt; e19c65de75c68cf3b7643ea732ba9eb1a3d20d6d57ba223c2ece1df66feb5af0
&gt; &gt; &gt; 
&gt; &gt; &gt; If you generate a 32-byte string at random, about 1/2 the time it won't
&gt; &gt; &gt; be on the curve at all (that is, if P is the unpack of those 32 bytes,
&gt; &gt; &gt; 8*l*P is *not* the identity), about 7/16 of the time it is on the curve,
&gt; &gt; &gt; but has a torsion component (8*l*P is the identity, but l*P is not), and
&gt; &gt; &gt; 1/16 of the time it's a valid pubkey (l*P is the identity, but P is
&gt; &gt; &gt; not).
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; Good stuff Ian.
&gt; &gt; 
&gt; &gt; I pushed a new branch `bug22006` that:
&gt; &gt; - Checks that the pubkey is not the identity element itself.
&gt; &gt; - Adds tests based on the points you listed above.
&gt; &gt; 
&gt; &gt; Check it out here:
&gt; &gt; https://gitweb.torproject.org/user/asn/tor.git/log/?h=bug22006_v2
&gt; 
&gt; It looks to me as though you're only checking the pure torsion points
&gt; above.  You should *add* one of those points to a valid pubkey in order
&gt; to get a point to check.  For example, the points:
&gt; 
&gt; 300ef2e64e588e1df55b48e4da0416ffb64cc85d5b00af6463d5cc6c2b1c185e
&gt; f43e3a046db8749164c6e69b193f1e942c7452e7d888736f40b98093d814d5e7
&gt; c9fff3af0471c28e33e98c2043e44f779d0427b1e37c521a6bddc011ed1869af
&gt; 
&gt; would be good additional tests (all should fail; they have order 8l, 4l,
&gt; 2l respectively).
&gt; 
&gt; This one should pass:
&gt; 
&gt; 4ba2e44760dff4c559ef3c38768c1c14a8a54740c782c8d70803e9d6e3ad8794
&gt; 

Oops yes, I was actually testing the pure torsion points, instead of
generating fresh points P = b*B + t*T as I think you are suggesting.

Doing ed25519 addition in the tor unittests is kind of a PITA, so I'll
just borrow the points you are suggesting above and test those directly.

Pushed a fixup commit here:
https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006_v2&amp;id=eb3530fc8999b3a3028d60f86bd04445273f247f


&gt; &gt; Another thing:
&gt; &gt; 
&gt; &gt; My understanding is that this is a special-case validation and it's
&gt; &gt; expensive,
&gt; 
&gt; It's a single scalar multiplication (and packing, I suppose).  I guess
&gt; "expensive" is relative; you might time it to see if the cost matters to
&gt; you.
&gt; 
&gt; &gt; so I opted to not perform it everytime we generate a new
&gt; &gt; ed25519 keypair or when we receive one from the internet. So for
&gt; &gt; example, I'm not doing it when we extract the ed25519 signing pubkey
&gt; &gt; that signs the HS descriptor, since we don't care if there are
&gt; &gt; equivalent forms of that key.
&gt; 
&gt; You indeed don't need to do it when you generate a key yourself in a
&gt; known-good way (unless you're paranoid about fault attacks, which I
&gt; don't think you are).  I'm a little wary about ever not doing it on a
&gt; pubkey you receive from the Internet, though.  I would want to know if
&gt; someone were sending me a malformed crypto-relevant value.
&gt; 

Hmm, and that's just to ensure that there are no equivalent forms of
those pubkeys, right? And also to ensure that no one is sending random
garbage to us. Because IIUC using an ed25519 pubkey with a torsion
component does not really affect the security of signature verification
in other ways.

Anyhow, these two commits do the validation in a bunch of places we
receive ed25519 pubkeys from the net:
        https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006_v2&amp;id=e37c0c3fa5d572421e52d4cd144f0617ad4d10e0
                
        https://gitweb.torproject.org/user/asn/tor.git/commit/?h=bug22006_v2&amp;id=8965bf278e5efe3f17e6d99123659a26da02c589


Thanks for the script as well! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170426014412</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-04-26 01:44:12-0400</timestampReceived><subject>Re: [tor-dev] Tor 0.3.1 ticket triage: please do this today if you hack on Tor.</subject><body>

[Attachment #2 (multipart/signed)]


Hi All,

I won't be working on Tor code for the next month or so.
I need to finish some code and deploy and run a counting round.

Can someone else (dgoulet?) please pick up:

can't migrate onion services to single-hop onion services
https://trac.torproject.org/projects/tor/ticket/21117

We need to fix it so people can migrate their hidden service keys to
single onion services.

&gt; On 25 Apr 2017, at 03:29, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; 
&gt; Hi!  We've got 3 weeks left in the 0.3.1 merge window (which closes on
&gt; May 15) so let's try to triage the tickets.  Here's what to do if you
&gt; are going to develop anything for Tor 0.3.1:
&gt; 
&gt;   -  Make sure that everything you are going to do for  031 is
&gt; assigned to you, in the 0.3.1 milestone, and has a points estimate.
&gt; ("Points" is a rough "how many days will this take me?" guess.)

I need to do this for PrivCount (my day job), so our client counts
are right:

The channel is_client flag is inaccurate
https://trac.torproject.org/projects/tor/ticket/21406

&gt;  - If there is anything assigned to you for 031 that you _won't_ be
&gt; doing for May 15, or that you won't be doing at all, please unassign
&gt; it and/or defer it from the 031-milestone.

Done!

&gt; ...
&gt; Then, in 24 hours or so, for all the tickets that don't get an owner,
&gt; I will either defer them or mark them "too important to defer" and
&gt; look for somebody else to do them.  Let's see how this works!

I would love it if someone else would fix:

Hidden service introduction point retries occur at 1 second intervals
https://trac.torproject.org/projects/tor/ticket/21600

And revise:

Intro points can get stuck in CIRCUIT_PURPOSE_S_ESTABLISH_INTRO
https://trac.torproject.org/projects/tor/ticket/21621

But hidden services will survive if they don't get done in 0.3.1.
Please assign them to me if you defer to 0.3.2.

I missed the recent patch parties due to illness, timezones and other
meetings. I'll be back next week.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY//tsAAoJEHQNnjkCUnKiQN4P/0gD/GmeljN3Ef++QGyyrdQg
KAYsf99gZuGgbKKg1zPGuVSmT2OKBdlvj2FjnEN3M4NGnB18Bus3DfwM8R/jRgpt
xOdUnMm1bbNPc+KUhxaX32U5SA3eAnrmC8TpQfMhNKn/Zo42zFdEHLW3FkLMnTMt
qEZIas7U5zvTCjUibRN/X5wl2BoUFCfL+hSWSzhBFoGF3wQM0ex9sKaK6ZaY/ChE
8rdD7VyBl26GO4GB098S7QYcaOddwDfJJBFfJ/k89OH6xuv3fs3D5YPt/i6DCDVR
gEyJ/G7F5WnTnKQB4xJleNYquJi2WyRlUVw4rU0qQPKRNua0zq7Y80EA6jGrealQ
u+2F5xOfk0vUE/tqyWyGWY9KxBAllHXk/TycNjSk6uen3D2HTDrAJiPOrZH8dU3B
C4pQJ/vQA6o1WHj60qmFTXfJeBxv40DhaTltCyv1g8sdHAJQfrQUFJlW0uEuMTXj
M48jjU6ANrZpsnHfcP9XKsjLgRuviLmbXI8wFGafThqrRx9+QOG2B2UUm1U+JWy7
SWG7yBuuus9bS7v8AS9HZVC9jRtGUvGzXGsK0U8NltijU0P6OGjatxCMUn0+Xxwm
ad0cPFz18lFZ++ay96407M264594zguEGm/BZoNLWPahHI1My4x45E+2bJH+LiIB
2eZy+P/EBt2Y31pcC10r
=FGyD
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170426205023</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-26 20:50:23-0400</timestampReceived><subject>[tor-dev] txtorcon 0.19.1</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Unfortunately, there was a regression in launch_tor() in 0.19.0 which
is fixed by releasing 0.19.1

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

https://pypi.python.org/pypi/txtorcon/0.19.1
https://github.com/meejah/txtorcon/releases/tag/v0.19.1

Releases are also available from the hidden service:

http://timaq4ygg2iegci7.onion/txtorcon-0.19.1.tar.gz
http://timaq4ygg2iegci7.onion/txtorcon-0.19.1.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
cfc390a37bba1cbd3cff0b86a8e9b7033df143d54ad7389305ba02848eafa198  txtorcon-0.19.1.tar.gz
c2071f55239cb657469aeec06b8095b63bdaf4c3124c3438ff9107984d844c87  txtorcon-0.19.1-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZAQWyAAoJEMJgKAMSgGmnJmEH/2ZS22CaggHR+LsNk87Ef6Fo
Sp+fKnqZD+ZqANdZspyK4lBhU+gY7V6uIbsz9yVoa1XI6AE0losRGfSSy3Z2+Xwf
sVShf+3qz7q37ERp2Kdgrko+ZdT9Nlel82s/O7a1nUamt9XtWqTb0QKePM4GnUEg
TglE9sMnonhLu1TK2SuPgfjZAU7/502pYHi/xU0cWWWTxMW8OHH3jNwN/sEG3f3j
/fDKURoisvfzvZ2AbE9eSE6OnNK0jeUC8lP66J8S27GQBM4ZvVy6HeuQtOVd/ur1
f6OlDSocmuiONrgvIieMrVfKXKhHz7JfbJ/yJ27uJnAKxJqDeJd71B95Dh03WwY=
=meTs
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170403210120</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-03 21:01:20-0400</timestampReceived><subject>[tor-dev] Prop279 and DNS</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello!

Maybe this topic has already been brought up, but in case it hasn't,
I'll do so.  I notice that Prop279 (onion naming API) defines its own
API rather than using DNS.  I guess that this is because of security
concerns about the centralization of the DNS.

However, in case you're unaware, Namecoin is designed to interoperate
with DNS.  Let's say that, hypothetically, Tor defined a DNS-based
naming system for onion services, where "_tor.example.com" had a TXT
record that was verified with DNSSEC in order to make Tor direct
"example.com" to whatever that TXT record had.  If this were done,
Namecoin would be able to produce the necessary TXT record and DNSSEC
signatures, via the standard DNS protocol, using an authoritative
nameserver that runs on localhost.  (The DNSSEC keys used would be
unique per user, generated on installation.)  Indeed, this is how
we're planning to interoperate with non-proxy-based Internet
applications.

My guess is that it would be a lot less work on Namecoin's end if such
a system were used with Tor rather than a separate naming API.  It's
unclear to me how this would affect other naming systems such as GNS
(does GNS interoperate with clients that use DNS?), and it's also
unclear to me whether this would produce extra work for the Tor
developers (maybe DNS adds extra attack surface that would need to be
mitigated somehow, or maybe there would be complexity in implementing
stream isolation?).

Anyway, just figured I'd bring up the topic so that everyone's on the
same page regarding figuring out whether it's a good idea.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY4rf2AAoJELPy0WV4bWVwviQP+wSz9/L8czef+L+viSIIrrtv
BOp32fysFWw1HijQ/42IoELPhkkzsHjek4IuW6Hn3VHGYs9vJ+rQ9aOcCMGNGD/f
f7ktcw3upH/UHiFPp2S0LeNqaoup8qvUQxG/AeP5R20gD/660ZXuIVl4uOaOu5HJ
IaghO9ZpzSF695H97hf7bz3H3Wrmch8tjC+FZ+SwWdgqGa4ijjZbTvkypcPEZ6YI
YQ22PmoQQWQBbe9JLujLa46PwRWU+UKsppmQYi7dY9K7aO7/J9eKQnOLkUWtdKrN
WjtJMV+V4oL/g4IiJrPs5n82pGSvpFi/dMrakoGq2w+v1dJolz/lSGUj7+sWVQZl
iqoq6c+l7MjKNynmj/Yn8IquhhwRmVAj4sjV+2jUeVmAf/tHDCBsDYvIDcDeIblu
j6y9e7ePTlMTpuxbZ7OKJjsWgGF5+yumWHPtJYs9uBoATeYDM6+Gxm73rDZxRVCl
+KGN1jMuREA9N1ZiWuK/ueeeZWGHii4L4UWvdK0qriSvc0HxaQeCGlovEDfO8btO
ZDfq9P6USEZywqFyzjzvOUwxnhihwNMdFiSt0RfxLuX34H6POvFYHhw85ESlliY8
0RPjHW6GZywNuOgpYDu9kPS6HPFhXUtok708Jmc926ctX2TT0CJlK6Fl3R2kZGCa
nOLHLSYVmkehj6u3RdBf
=Hz3g
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170404020624</emailId><senderName>Jesse V</senderName><senderEmail>kernelcorn@torproject.org</senderEmail><timestampReceived>2017-04-04 02:06:24-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 04/03/2017 05:01 PM, Jeremy Rand wrote:
&gt; Maybe this topic has already been brought up, but in case it hasn't,
&gt; I'll do so.  I notice that Prop279 (onion naming API) defines its own
&gt; API rather than using DNS.  I guess that this is because of security
&gt; concerns about the centralization of the DNS.

Hi Jeremy,

I believe that the general idea with prop279 is simply to introduce an
API for resolving pseudo-TLDs before they were sent through the Tor
network. How that is done is entirely dependent on the naming system.

For example, if a user typed in example.bit into a Namecoin-enabled Tor
browser, the software could then perform your proposed DNS lookup and
rewrite the request before turning it over to the tor binary. In my
case, my OnioNS software rewrites .tor to .onion, since the tor binary
knows how to handle .onion. At the moment, this is a bit hacky because
the software has connect with tor's control port, manually review and
process each lookup, rewrite the the request, and then tell tor to
connect it with a circuit. Prop 279 is designed to make this much easier
and avoid hacky solutions.

--=20
Jesse Victors
Developer of the Onion Name System


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170405104516</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-05 10:45:16-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

Jeremy Rand &lt;jeremyrand@airmail.cc&gt; writes:

&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA512
&gt;
&gt; Hello!
&gt;
&gt; Maybe this topic has already been brought up, but in case it hasn't,
&gt; I'll do so.  I notice that Prop279 (onion naming API) defines its own
&gt; API rather than using DNS.  I guess that this is because of security
&gt; concerns about the centralization of the DNS.
&gt;
&gt; However, in case you're unaware, Namecoin is designed to interoperate
&gt; with DNS.  Let's say that, hypothetically, Tor defined a DNS-based
&gt; naming system for onion services, where "_tor.example.com" had a TXT
&gt; record that was verified with DNSSEC in order to make Tor direct
&gt; "example.com" to whatever that TXT record had.  If this were done,
&gt; Namecoin would be able to produce the necessary TXT record and DNSSEC
&gt; signatures, via the standard DNS protocol, using an authoritative
&gt; nameserver that runs on localhost.  (The DNSSEC keys used would be
&gt; unique per user, generated on installation.)  Indeed, this is how
&gt; we're planning to interoperate with non-proxy-based Internet
&gt; applications.
&gt;
&gt; My guess is that it would be a lot less work on Namecoin's end if such
&gt; a system were used with Tor rather than a separate naming API.  It's
&gt; unclear to me how this would affect other naming systems such as GNS
&gt; (does GNS interoperate with clients that use DNS?), and it's also
&gt; unclear to me whether this would produce extra work for the Tor
&gt; developers (maybe DNS adds extra attack surface that would need to be
&gt; mitigated somehow, or maybe there would be complexity in implementing
&gt; stream isolation?).
&gt;
&gt; Anyway, just figured I'd bring up the topic so that everyone's on the
&gt; same page regarding figuring out whether it's a good idea.
&gt;

Hmmm,

using DNS for the query/resolve part of the NS API might actually be a
reasonable approach for Tor. Prop279 is currently doing query/resolves
using stdin/stdout messages but people have rightly pointed out that
this sucks in mobile platforms:
       https://lists.torproject.org/pipermail/tor-dev/2016-October/011516.html
       https://lists.torproject.org/pipermail/tor-dev/2017-March/012077.html

I'm not sure if TCP and DNS is the right approach here, but it seems
like worth exploring further.

Some thoughts:

- If we replace the stdin/stdout protocol with a DNS client/server, this
  means that any interested in name system would also have to implement
  a DNS server as part of its NS API wrapper.

  This seems harder to prototype than an stdin/stdout protocol. I wonder
  if a library could be made to make it easier for name systems to do
  this (and imagine that in our case, a name system might be something
  as simple as a local hosts file; not necessarily something as big as
  Namecoin).

- If we manage to replace the stdin/stdout protocol with DNS, I wonder
  what can be done about the environment variables part of the protocol,
  which apparently also sucks for mobile platforms.

  In the current prop279, environment variables are set by Tor before it
  execve()s the guest name system. They are used to pass arbitrary
  options to the name system, instruct it on where it should store
  files, and let it know of ControlPort configuration etc.

- A big part of the prop279 spec would have to be rewritten to port it
  to the DNS protocol. I doubt I have time to do this in the short-term,
  especially given how clueless I am wrt the DNS protocol. Ideally
  someone would take over this proposal and fix it up....

  Also, is there a spec for how Namecoin uses DNS to do stuff? 

Thanks for the input :) 



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170407033430</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-07 03:34:30-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Jesse V:
&gt; On 04/03/2017 05:01 PM, Jeremy Rand wrote:
&gt;&gt; Maybe this topic has already been brought up, but in case it
&gt;&gt; hasn't, I'll do so.  I notice that Prop279 (onion naming API)
&gt;&gt; defines its own API rather than using DNS.  I guess that this is
&gt;&gt; because of security concerns about the centralization of the
&gt;&gt; DNS.
&gt; 
&gt; Hi Jeremy,
&gt; 
&gt; I believe that the general idea with prop279 is simply to introduce
&gt; an API for resolving pseudo-TLDs before they were sent through the
&gt; Tor network. How that is done is entirely dependent on the naming
&gt; system.
&gt; 
&gt; For example, if a user typed in example.bit into a Namecoin-enabled
&gt; Tor browser, the software could then perform your proposed DNS
&gt; lookup and rewrite the request before turning it over to the tor
&gt; binary. In my case, my OnioNS software rewrites .tor to .onion,
&gt; since the tor binary knows how to handle .onion. At the moment,
&gt; this is a bit hacky because the software has connect with tor's
&gt; control port, manually review and process each lookup, rewrite the
&gt; the request, and then tell tor to connect it with a circuit. Prop
&gt; 279 is designed to make this much easier and avoid hacky
&gt; solutions.

Hi Jesse,

Yes, I understand that the goal is to provide an abstraction layer for
naming systems that doesn't rely on control port hacks -- and that's
great!  My primary inquiry here is about whether the DNS protocol
might be a better-suited protocol for Tor to use for talking to naming
systems, rather than a Tor-specific protocol as is proposed now.  I
don't hold a strong opinion on this; I'm mostly just curious whether
it was considered, and if so, what led to the decision not to use it.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile PGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with PGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY5wi/AAoJELPy0WV4bWVwp78P/jd8xte9hgEZiVIJ1nSgIV7Q
Yo3NNZpSlDyeyPr2XktGm9JUsBGgMjN+D+oIQcilEiaIAuufrdNW8R4n00VoJMgQ
yAHB42UNRJXq1W9+Y7TgrDHjbzsea4fNSZSA5e2kHqOaxPV5fK/qX7xKC8/fPHsf
329qk8BPcGVe2SkLkJqNKBW5D5cBA54HcMENV6w/6Vos64OD/ZKUOclSHcubtwWz
kYRn6ERv67/dHRV8M58WYewA/lFvyvMCSLyyZbfJXuJEsV6wlpFIxWbJezps80EU
coiCunGeu0TCj6Ae0lVtr8cuyMCN4WyCs7C4BkdiuCrLwri+IW8vR8LeP8fLjQCa
ImnfgxIOdxiHti77UPzWjEPGKerdJi/gVF4NmJ2XL2qJEv0rr4hnaEn3LKTHAEQm
0k0EjDXGaMgNhSS5y67PLW5bW909uISrCIYnNAOfSi3vRwCfYusY3N0P6seH78R9
VNhS/bnUCTEfD3CJFvZD2coUbpvG/vXW5OI8D02Ro+3FJqvcbbkXXhimK0d9R65V
s96ckSAmI+m0VD7FO3hGW0BUzGdzVAJIsEfLIwUCqasQ7ugwbawfh0JvjYreM14T
ZmnM9usdNPcgE+uRnZbHpHG6n3GcOIWc1ShhoCHvzaF3zF8+UWPMElwmFA4XZCo2
2YgPFCAuFfSfQapZxrX9
=iXyt
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170424040110</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-24 04:01:10-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

George Kadianakis:
&gt; Hmmm,
&gt; 
&gt; using DNS for the query/resolve part of the NS API might actually be a
&gt; reasonable approach for Tor. Prop279 is currently doing query/resolves
&gt; using stdin/stdout messages but people have rightly pointed out that
&gt; this sucks in mobile platforms:
&gt;        https://lists.torproject.org/pipermail/tor-dev/2016-October/011516.html
&gt;        https://lists.torproject.org/pipermail/tor-dev/2017-March/012077.html

Interesting, I wasn't aware of the mobile platform issues with
stdin/stdout, but that does make sense.  Seems like DNS would be one way
to improve that situation.

&gt; I'm not sure if TCP and DNS is the right approach here, but it seems
&gt; like worth exploring further.
&gt; 
&gt; Some thoughts:
&gt; 
&gt; - If we replace the stdin/stdout protocol with a DNS client/server, this
&gt;   means that any interested in name system would also have to implement
&gt;   a DNS server as part of its NS API wrapper.
&gt; 
&gt;   This seems harder to prototype than an stdin/stdout protocol. I wonder
&gt;   if a library could be made to make it easier for name systems to do
&gt;   this (and imagine that in our case, a name system might be something
&gt;   as simple as a local hosts file; not necessarily something as big as
&gt;   Namecoin).

One of the Namecoin developers, Hugo Landau, wrote a Golang library that
might be helpful for this.  The library is at
https://github.com/hlandau/madns , and the Namecoin authoritative DNS
server that uses it is https://github.com/hlandau/ncdns .  I'll point
Hugo to this thread so that he can elaborate on anything I've left out
and/or answer questions.  DNS is certainly a more complex protocol than
stdin/stdout.  AFAIK there aren't any good Python libraries for this
kind of thing (at least, none that support DNSSEC), though it's been a
year or so since I last looked.

&gt; - If we manage to replace the stdin/stdout protocol with DNS, I wonder
&gt;   what can be done about the environment variables part of the protocol,
&gt;   which apparently also sucks for mobile platforms.
&gt; 
&gt;   In the current prop279, environment variables are set by Tor before it
&gt;   execve()s the guest name system. They are used to pass arbitrary
&gt;   options to the name system, instruct it on where it should store
&gt;   files, and let it know of ControlPort configuration etc.

I'm honestly not sure on this one.

&gt; - A big part of the prop279 spec would have to be rewritten to port it
&gt;   to the DNS protocol. I doubt I have time to do this in the short-term,
&gt;   especially given how clueless I am wrt the DNS protocol. Ideally
&gt;   someone would take over this proposal and fix it up....

I can ask Hugo if he'd be willing to help out with the DNS end of
things, but I don't think he has intimate familiarity with Tor, so he
probably wouldn't be able to do all of it (assuming that he has the time
available, which I am unsure of).

&gt;   Also, is there a spec for how Namecoin uses DNS to do stuff? 

We have a spec that describes how a Namecoin JSON object is converted
into a set of DNS records:
https://github.com/ifa-wg/proposals/blob/master/ifa-0001.md .  (That URL
will probably change in the future.)  We then use ncdns (see above) to
run an authoritative DNS server for .bit, which is signed with a
per-machine DNSSEC key generated at install time.  We then use a local
Unbound as the main DNS server for the user, configured to use ncdns as
a stub zone.

Hypothetically, Tor could act as a recursive DNS server (substituting
for Unbound), and allow stub zones to be specified similarly to how
Unbound does it.  In Namecoin's case, the .bit and .bit.onion stub zones
would point to a local ncdns installation.

It's worth noting that some Namecoin node types will generate network
traffic to do the lookup.  This should support stream isolation based on
what stream caused the Namecoin lookup.  Hugo tells me that one
plausible way to communicate this info to ncdns over the DNS protocol
would be edns.

I think there are probably 2 orthogonal questions: (1) should DNS be the
standard abstraction protocol used for Tor naming, and (2) should
Namecoin naming in Tor be implemented using DNS?  If (1) is "no" but (2)
is "yes", then we would still get the benefits of DNS and DNSSEC
interoperability, although not the benefits for mobile platform
compatibility.

Also, to throw another idea out there that plausibly might be worth
thinking about in this discussion: it might be useful to have a
mechanism for a Tor exit relay to do the Namecoin lookup and return the
record along with a merkle proof of blockchain inclusion, similarly to
how exit relays do DNS lookups now.  This might reduce latency by one
round-trip in some cases, since the exit relay could open a connection
to the .bit website before the merkle proof is checked.  It also would
mean that we would need a protocol for Tor send that merkle proof to
Namecoin for validation.  I have no idea whether this functionality
would also be useful for OnioNS and GNS, but I guess that it would be
beneficial for DNSSEC.

Anyway, I don't have a strong view on whether using DNS as the
abstraction protocol is the right choice -- but it's good to have the
discussion, I think.

Cheers!
-- 
-Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170424195209</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-04-24 19:52:09-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

Jeremy Rand &lt;jeremyrand@airmail.cc&gt; writes:

&gt; AFAIK there aren't any good Python libraries for this kind of thing
&gt; (at least, none that support DNSSEC), though it's been a year or so
&gt; since I last looked.

Twisted has a DNS server and client implementation. I'm not sure where
it stands on DNSSEC support, although a quick grep does indicate some
"dnssec"-related attributes. See:

https://twistedmatrix.com/trac/wiki/TwistedNames
https://twistedmatrix.com/documents/current/names/

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170426081352</emailId><senderName>Hugo Landau</senderName><senderEmail>hlandau@devever.net</senderEmail><timestampReceived>2017-04-26 08:13:52-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

After giving it some thought, I think Tor should use a Tor-specific
protocol to interface with name plugins, not DNS.

My reasoning is as follows: the Tor daemon knows what it wants and is
designed to source specific data from a name plugin. Where Tor specifies
a custom protocol for this, this will match perfectly the type of
queries and type of responses which Tor needs to ultimately obtain and
convert to some corresponding internal in-memory representation.

As such, forcing this made-for-Tor format to be marshalled into a
pre-existing format, namely that of DNS queries and responses, can only
ever reduce the power and flexibility of the plugin interface. It only
creates the potential for impedence discontinuities, and also creates a
substantial nuisance and implementation barrier for plugins which are
intended only for use with the Tor daemon. These plugins would need to
source a DNS packet marshalling/unmarshalling library, which creates an
unnecessary barrier to implementation, and both sides of the interface
would be marshalling into a format which isn't especially aligned with
the internal representations they'd ideally like to be speaking. As
such, using DNS here feels rather pointless.

Looking at the Prop279 proposal as it stands, it would be trivial for a
plugin that wants to work with DNS packets to convert a query to a DNS
packet. As such, I see very little utility to adopting the DNS format
for this.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170428185531</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-04-28 18:55:31-0400</timestampReceived><subject>[tor-dev] Tor Tech Report 2017-04-001 available</subject><body>

[Attachment #2 (multipart/signed)]


Hi there!

A new Tor Tech Report is available [0]:

"Privacy analysis of Tor's in-memory statistics."

Abstract:
"This report analyzes which possibly sensitive, potentially
 personally identifying data is stored in memory of Tor relays
 and bridges or reported to the directory authorities and
 makes suggestions to reduce the collection and temporary
 storage of such data."

The report addresses concerns regarding metrics collection
about the Tor network that were often raised and discussed
in the community.
Many topics can only be briefly touched in the scope of such
a report.  Thus, there is quite some work in thinking, writing,
and coding open to be done.

Based on the report's suggestions the Metrics Team plans the
following steps (mainly in May and June 2017):
* Distill a change proposal for Tor server changes that address
  the most pressing of the identified issues.
* Code the Tor server patches according to the proposal.
* And, provide necessary patches for Tor Metrics products
  concerned by the changes for Tor servers.

Future plans for the months after that are to assess privacy
questions as raised in this report more in-depth and describe
statistical accuracy throughout the data-verse of Tor Metrics.

Many thanks to Aaron Johnson, Paul Syverson, Rob Jansen, and
Tim Wilson-Brown, who gave very valuable feedback to ideas
and questions we asked during the Amsterdam meeting!
Also many thanks to Karsten Loesing, who collected the feedback
in Amsterdam, patiently answered all questions about the details
of Tor and Tor Metrics, and reviewed the report!

Cheers!
iwakeh


[0] https://research.torproject.org/techreports/privacy-in-memory-2017-04=
-28.pdf


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170429070000</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-04-29 07:00:00-0400</timestampReceived><subject>Re: [tor-dev] Prop279 and DNS</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hugo Landau:
&gt; After giving it some thought, I think Tor should use a
&gt; Tor-specific protocol to interface with name plugins, not DNS.
&gt; 
&gt; My reasoning is as follows: the Tor daemon knows what it wants and
&gt; is designed to source specific data from a name plugin. Where Tor
&gt; specifies a custom protocol for this, this will match perfectly the
&gt; type of queries and type of responses which Tor needs to ultimately
&gt; obtain and convert to some corresponding internal in-memory
&gt; representation.
&gt; 
&gt; As such, forcing this made-for-Tor format to be marshalled into a 
&gt; pre-existing format, namely that of DNS queries and responses, can
&gt; only ever reduce the power and flexibility of the plugin interface.
&gt; It only creates the potential for impedence discontinuities, and
&gt; also creates a substantial nuisance and implementation barrier for
&gt; plugins which are intended only for use with the Tor daemon. These
&gt; plugins would need to source a DNS packet marshalling/unmarshalling
&gt; library, which creates an unnecessary barrier to implementation,
&gt; and both sides of the interface would be marshalling into a format
&gt; which isn't especially aligned with the internal representations
&gt; they'd ideally like to be speaking. As such, using DNS here feels
&gt; rather pointless.
&gt; 
&gt; Looking at the Prop279 proposal as it stands, it would be trivial
&gt; for a plugin that wants to work with DNS packets to convert a query
&gt; to a DNS packet. As such, I see very little utility to adopting the
&gt; DNS format for this.

Thanks Hugo.  Yeah, I think you're probably right.  In Namecoin's
case, it *may* make sense to have a Prop279 provider implementation
that uses DNS to talk to Namecoin software, but the difficulty of
doing stream isolation properly with DNS and the rather large set of
DNS features that have no relevance to many Prop279 providers suggest
that it's unwise to force that coupling.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZBDotAAoJELPy0WV4bWVwyCgQAIinmd5pBqf86vq4ae2N9KwX
/IFstwBZFuD7QSzBeFyQI1n+tP76OHM7dSpPPvZZfz8ksuTLwjdYJBkSDMGoiWzS
KjAFcFK4VBCmPhkq6nd97nqSYXiqlyoZMKCAwE6Yxg4YV6a0mLnfkNYdIpRwXgXa
EkL75FxsYFFWPztLBa63vZlJcuxfJ4lBtZDdhiRunnQh+KXwHmA2fukc8yqxs5lF
tnE2Mzb06bI3KYmcjmpi+Zb0u2QYNtnY5jPTN5LNu4XeOcpvKieHpqEDHTBVzArR
3zXpmvmvWlPcT6KzWp4kaNM+f76Q/uXbetVfyPPPUlxR3fKbRGjJ9owpGpcR/Nhb
YnpG0jSZXKu5j+zN9mXM+SB+lBVqOGwwF5ae2oIRe6H0gG53il7jv3gQCSh/EZO7
9harqftv9LqfKtPZpRjzIWGv2DSriy2wPJsKwsL1o3c/DrEbnbbh/cEIs+RMlijF
fjP2daO9DVKnAClB8YcZw0cgWc4xZ5EcZnF0FPsV4ZWREgG1UIzUm+fV04HPruYB
k5OX5T4HdNSU0lJJY7H4P6VHbpr3i73PnDBJsUvOM2cFQattxGCMxGzF5pDp+wIC
R2dFLASWtiQOL4alyqUxP9aoR7DJcvYm7jThe1aNjyyN880wbYCJnUYEoQa0k10t
DBAecAT+HDKuZt7WklMm
=84wv
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170312162246</emailId><senderName>Anshul Malik</senderName><senderEmail>malikanshul29@gmail.com</senderEmail><timestampReceived>2017-03-12 16:22:46-0400</timestampReceived><subject>[tor-dev] GSOC Contribution Into and Help</subject><body>

[Attachment #2 (multipart/alternative)]


​​
Hi there!

I am Anshul, computer science undergrad from NIT, Kurukshetra, India.
I really like using tor, always wanted to contribute somhow, and here
google gives me a chance.

I am a good programmer, have been doing projects with node, recently also
started with python django. I have also contributed to firefox devtools.

I wish to contribute to *Ahima- Hidden Service Search*

I saw ideas list on the page, I can definitely work on
- Automate blacklisting
- Add hidden services function
- Elastic Search

Just need a headstart, Please let me know where can I find contribution
guide and some more information about Ahima, I am currently studying the
architecture and codebase from github.

Thanks

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div style="font-family:trebuchet ms,sans-serif" \
class="gmail_default"&gt;​​&lt;/div&gt;&lt;div class="gmail_default" \
style="font-family:trebuchet ms,sans-serif"&gt;Hi there!&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_default" style="font-family:trebuchet ms,sans-serif"&gt;I am Anshul, \
computer science undergrad from NIT, Kurukshetra, India.&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_default" style="font-family:trebuchet ms,sans-serif"&gt;I really like using \
tor, always wanted to contribute somhow, and here google gives me a \
chance.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_default" style="font-family:trebuchet \
ms,sans-serif"&gt;I am a good programmer, have been doing projects with node, recently \
also started with python django. I have also contributed to firefox \
devtools.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_default" style="font-family:trebuchet \
ms,sans-serif"&gt;I wish to contribute to &lt;b&gt;Ahima- Hidden Service Search&lt;/b&gt;&lt;/div&gt;&lt;div \
class="gmail_default" style="font-family:trebuchet ms,sans-serif"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_default" style="font-family:trebuchet ms,sans-serif"&gt;I saw ideas list on \
the page, I can definitely work on&lt;br&gt;- Automate blacklisting &lt;br&gt;- Add hidden \
services function &lt;br&gt;&lt;/div&gt;&lt;div class="gmail_default" style="font-family:trebuchet \
ms,sans-serif"&gt;- Elastic Search&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_default" \
style="font-family:trebuchet ms,sans-serif"&gt;Just need a headstart, Please let me know \
where can I find contribution guide and some more information about Ahima, I am \
currently studying the architecture and codebase from github.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_default" style="font-family:trebuchet \
ms,sans-serif"&gt;Thanks&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170312125517</emailId><senderName>Sakchham Sharma</senderName><senderEmail>sakchhams@gmail.com</senderEmail><timestampReceived>2017-03-12 12:55:17-0400</timestampReceived><subject>[tor-dev] GSoC 2017 Project Idea</subject><body>

[Attachment #2 (multipart/alternative)]


Greetings Tor Community,
I am Sakchham Sharma a CS Undergrad student, I intend to participate in
GSoC 2017 and contribute to the Tor Project. The Tor Project as so now is
quite well known among the people with a technical background, but however,
the people who don't belong to this category have little or no idea about
Tor, they are perhaps the people that would benefit the most from Tor.
So in order to help people better understand about Tor, that how it is
different from their VPN or Proxy service, I intend to an UI Redesign of
the Orbot app for android, as of now it has a minimalistic UI and several
UI glitches, an UI that also gives the users a subtle idea as to how tor
works with be informative and should help more people know more about Tor,
I would be grateful if I could get suggestions/improvements on the above
idea.
Thank you.



  &lt;https://mailtrack.io/&gt; Sent with Mailtrack
&lt;https://mailtrack.io/install?source=signature〈=en&amp;referral=sakchhams@gmail.com&amp;idSignature=22&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Greetings Tor Community,&lt;br&gt;I am Sakchham Sharma a  CS Undergrad \
student, I intend to participate in GSoC 2017 and contribute to the Tor Project. The \
Tor Project as so now is quite well known among the people with a technical \
background, but however, the people who don't belong to this category have little \
or no idea about Tor, they are perhaps the people that would benefit the most from \
Tor.&lt;br&gt;So in order to help people better understand about Tor, that how it is \
different from their VPN or Proxy service, I intend to an UI Redesign of the Orbot \
app for android, as of now it has a minimalistic UI and several UI glitches, an UI \
that also gives the users a subtle idea as to how tor works with be informative and \
should help more people know more about Tor, I would be grateful if I could get \
suggestions/improvements on the above idea.&lt;br&gt;Thank you.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div \
class="mt-signature"&gt;  &lt;div class="mt-signature-inner"&gt;
                                            &lt;a href="https://mailtrack.io/" \
class="mt-signature-logo" style="text-decoration:none"&gt; &lt;img \
src="https://s3-eu-west-1.amazonaws.com/mailtrack-crx/icon-signature.png" \
height="14"&gt;   &lt;/a&gt; &lt;font color="#999999" class="mt-signature-text"&gt; Sent with &lt;a \
href="https://mailtrack.io/install?source=signature&amp;lang=en&amp;referral=sakchhams@gmail.com&amp;idSignature=22" \
class="mt-install"&gt;Mailtrack&lt;/a&gt; &lt;/font&gt;  &lt;/div&gt;
                                    &lt;/div&gt;&lt;img width="0" height="0" \
class="mailtrack-img" \
src="https://mailtrack.io/trace/mail/b1ea7169be856c4431b6989474d3b53aace27a4f.png?u=963917"&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170313223124</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-03-13 22:31:24-0400</timestampReceived><subject>[tor-dev] GNU Guix and Tor Browser Packaging</subject><body>

There is a serious Tor Browser packaging effort [3][4] being done by ng0 
(GNUnet dev) for the GNU Guix [0] package manager. GNU Guix supports 
transactional upgrades and roll-backs, unprivileged package management, 
per-user profiles and most importantly reproducible builds. I have 
checked with Guix's upstream and they are working on making a binary 
mirror available over a Tor Hidden Service. [2] Also planned is 
resilience [2] to the attack outlined in the TUF threat model. [1]

Back to the topic of Tor Browser packaging. While there are good reasons 
for Debian's pakaging policies they make packaging of fast evolving 
software (and especially with TBB's reliance on a opaque binary VM for 
builds) impractial. Both we and Micah have been doing a good effort to 
automate downloading and validating TBB but I still believe its a 
maintenance burden and Guix may be a way out of that for Linux distros 
in general.

What are your thoughts on this?





***

[0] https://www.gnu.org/software/guix/
[1] https://github.com/theupdateframework/tuf/blob/develop/SECURITY.md
[2] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00192.html
[3] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00189.html
[4] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00149.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170312202519</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-12 20:25:19-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 Project Idea</subject><body>

Hi Sakchham, glad you want to get involved! For Orbot Nathan (cc-ed)
would be your man but sadly iirc he doesn't have cycles to mentor this
summer. I'd suggest double checking with him and if that's the case
picking another project space where we do have a mentor.

Cheers! -Damian

On 3/12/17, Sakchham Sharma &lt;sakchhams@gmail.com&gt; wrote:
&gt; Greetings Tor Community,
&gt; I am Sakchham Sharma a CS Undergrad student, I intend to participate in
&gt; GSoC 2017 and contribute to the Tor Project. The Tor Project as so now is
&gt; quite well known among the people with a technical background, but however,
&gt; the people who don't belong to this category have little or no idea about
&gt; Tor, they are perhaps the people that would benefit the most from Tor.
&gt; So in order to help people better understand about Tor, that how it is
&gt; different from their VPN or Proxy service, I intend to an UI Redesign of
&gt; the Orbot app for android, as of now it has a minimalistic UI and several
&gt; UI glitches, an UI that also gives the users a subtle idea as to how tor
&gt; works with be informative and should help more people know more about Tor,
&gt; I would be grateful if I could get suggestions/improvements on the above
&gt; idea.
&gt; Thank you.
&gt;
&gt;
&gt;
&gt;   &lt;https://mailtrack.io/&gt; Sent with Mailtrack
&gt; &lt;https://mailtrack.io/install?source=signature〈=en&amp;referral=sakchhams@gmail.com&amp;idSignature=22&gt;
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310115855</emailId><senderName>Massimo La Morgia</senderName><senderEmail>lamorgia@di.uniroma1.it</senderEmail><timestampReceived>2017-03-10 11:58:55-0400</timestampReceived><subject>[tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


Dear members of the Tor community,

we are a research group at Sapienza University, Rome, Italy. We do research
on distributed systems, Tor, and the Dark Web. As part of our work, we have
developed OnionGatherer, a service that gives up-to-date information about
Dark Web hidden services to Tor users.

OnionGatherer is implemented as a Google Chrome extension coupled with a
back-end service running on our servers. As the user surfes the Web,
OnionGatherer collects all the URLs from the page and adds a green bullet
next ot the URL if the hidden service is up and running, an orange one if
the system are currently evaluating the address' status or a red one if the
hidden service is down. The status of the hidden services is pulled from
our servers, which keep track of all the services found by the users and
constantly monitor their status. When a new hidden service is found,
OnionGatherer checks its status in real time, informs the user accordingly,
and adds it to the database.

We believe that OnionGatherer can be very useful to Tor users that are
interested in surfing the Dark Web. Indeed, hidden services are born and
shut down very frequently, and it is often time consuming and frustrating
to check manually which services are still active.

We kindky ask if you can help disseminate our project ---the largest is the
number of users of  OnionGatherer, the largest the database and the best
the service we can provide. Currently the software is in Beta version and
released on GitHub at the following link:

client: https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension
server: https://github.com/rfidlabsapienza/onionGatherer-Server

Any feedback or issue are really appreciated.
Thanks in advance. Best regards,

The research group:
A. Mei, J. Stefa, M. La Morgia, S. Raponi

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div style="font-size:12.8px"&gt;Dear members of the Tor \
community,&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;we are a research group at Sapienza University, Rome, Italy. \
We do research on distributed systems, Tor, and the Dark Web. As part of our work, we \
have developed OnionGatherer, a service that gives up-to-date information about Dark \
Web hidden services to Tor users.&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;OnionGatherer is implemented as a Google Chrome extension \
coupled with a back-end service running on our servers. As the user surfes the Web, \
OnionGatherer collects all the URLs from the page and adds a green bullet next ot the \
URL if the hidden service is up and running, an orange one if the system are \
currently evaluating the address' status or a red one if the hidden service is \
down. The status of the hidden services is pulled from our servers, which keep track \
of all the services found by the users and constantly monitor their status. When a \
new hidden service is found, OnionGatherer checks its status in real time, informs \
the user accordingly, and adds it to the database.&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;We believe that \
OnionGatherer can be very useful to Tor users that are interested in surfing the Dark \
Web. Indeed, hidden services are born and shut down very frequently, and it is often \
time consuming and frustrating to check manually which services are still \
active.&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;We \
kindky ask if you can help disseminate our project ---the largest is the number of \
users of   OnionGatherer, the largest the database and the best the service we can \
provide. Currently the software is in Beta version and released on GitHub at the \
following link:&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;client:  &lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension" \
target="_blank"&gt;https://github.com/&lt;wbr&gt;rfidlabsapienza/onionGatherer-&lt;wbr&gt;ChromeExtension&lt;/a&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;server:  &lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-Server" \
target="_blank"&gt;https://github.com/&lt;wbr&gt;rfidlabsapienza/onionGatherer-&lt;wbr&gt;Server&lt;/a&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Any feedback or \
issue are really appreciated.&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Thanks in advance. \
Best regards,&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;The research group:&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;A. \
Mei, J. Stefa, M. La Morgia, S. Raponi&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170314175943</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-14 17:59:43-0400</timestampReceived><subject>[tor-dev] GSoC 2017 - Project "Onionoo"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi!

I'm Nur-Magomed Dzhamiev, 4th year student from institute of information
technology (speciality: computer security) of North-Caucasus Federal
University. I have experience with Java, SQL, Web (HTML, CSS, JavaScript,
PHP) and also I designed protocol based on JSON for Android app.


I would love to contribute to the project "Onionoo". Please provide me some
guide lines and additional materials for study and get a clear
understanding about the mentioned project. Thank you!


Regards

Nur-Magomed

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;

&lt;p class="MsoNormal"&gt;&lt;span style="font-family:roboto" \
lang="EN-US"&gt;Hi!&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span style="font-family:roboto" lang="EN-US"&gt;I'm Nur-Magomed \
Dzhamiev, 4th year student from institute of information technology (speciality: \
computer security) of North-Caucasus Federal University. I have experience with Java, \
SQL, Web (HTML, CSS, JavaScript, PHP) and also I designed protocol based on JSON for \
Android app. &lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span style="font-family:roboto" lang="EN-US"&gt;&lt;br&gt;I would love \
to contribute to the project "Onionoo". Please provide me some guide lines \
and additional materials for study and get a clear understanding about the mentioned \
project. Thank you!&lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span style="font-family:roboto" \
lang="EN-US"&gt;&lt;br&gt;Regards&lt;/span&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;span style="font-family:roboto" \
lang="EN-US"&gt;Nur-Magomed&lt;/span&gt;&lt;span lang="EN-US"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170317191813</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-03-17 19:18:13-0400</timestampReceived><subject>[tor-dev] Make Tor Browser Faster GSOC Project</subject><body>

On Fri, Mar 17, 2017 at 2:07 AM, Kartikey singh
&lt;dr.kartikeynrc@gmail.com&gt; wrote:
&gt; Hi I'm interested in Make Tor Browser Faster gsoc project. Please guide me
&gt; for the same.

Hi Kartikey,

For Tor, the best place to discuss this is on the tor-dev mailing
list, which I've included. You should susbcribe and we can talk about
this there. As I understand it, student selections have not been made
for GSOC yet, so please don't take this as a guarantee that you'll be
able to be funded to work on this.

Anyway, the topic on the website is a bit ambiguous, so I've attempted
to flesh out the project more here:

https://storm.torproject.org/shared/URdVCz8eCbBfQzYwG3gaR-KuCvMTIS3zU7emq3AF7A3

I'd welcome input from the rest of the tor community on this as well.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170324082418</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-24 08:24:18-0400</timestampReceived><subject>Re: [tor-dev] french documentation</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 11 Feb 2017, at 07:55, Thierry Boibary &lt;th.boibary@net-c.com&gt; wrote:
&gt; 
&gt; hi,
&gt; where can i find french documentation?
&gt; i am expert in systems and networks administration so i'd like working for you, in \
&gt; a domain which needs my capabilities. 
&gt; help me to find a domain? please
&gt; 
&gt; Regards
&gt; T

Hi Thierry,

Sorry it has taken a long time for me to reply.

We have Tor Browser in French:
https://www.torproject.org/projects/torbrowser.html.en#downloads

We want other documentation in French, but we need people to help!

What documentation do you want?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY1NeyAAoJEHQNnjkCUnKic8IQALDhAKtfumOM8l9/O4G3QP1s
VN3zGigU5NhYN1240ctDZAMPxje/GyexbcufBpvyXS4DbQWH8sf9p3pq9yfck6PV
dAl4Pld3lbN/5+slojbxF09PWIWe57NMOui0lNEDzBrCe1leLPmx9WUTu7yIKnl7
QJLo5SSqIkjVkueKTKjNNFNspv15J2dqOhJ9cQzIefRcjNZMJTaJFBOMGjRfOcug
q1iaFlznLiJqkzRUUjl92OkLucTGaG5xyYhaAfqPwb+MMF6BwYTktWB7CJTlDjAk
4q9WuQGycQ+X+rzdAIvQj0KhDv8r6ck4hnOBJXh814F5fviKcKadqYZqvLMxxvPF
gEXn2U5NxBNTWlOih6W4xzrjizZwyXnzsaoXfF/gHk8mbKQ1IbuQ6H3F5/i6chlT
JQ6Yy36wu9c5wkvj1QGIqqA3y60B9egxD7OYGyM6v4VVD/SZ24pQ6o0bB5DkLkK/
vZN098kIEcZD0il1CdJ+oCxZJhIMvDs+w+RN+r+JoI8NvohNApgcuwTONUzgZlt3
b/8fzJnqVp3zE2PJU6Ajwju2cJQR1nHEnECG+SFCtBUP1XCcwz5pN+fpfwrdurZa
S6r5N9uYTN8GfYdVPgxKx5AoaHdWthYETGDOxlQrL9OLPhaMUARq9iV5XeCdBtc2
RHtOeH1e8nbpIFPGmzCW
=uuF5
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326113908</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-26 11:39:08-0400</timestampReceived><subject>[tor-dev] One Valid Next-Generation Onion Address per Private Key</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

Most onion service users expect that there is only one valid onion
address for their private key. (For example, one address is listed in
SSL certificates.)

I spoke with Ian, and he said that as part of validating the onion
address, we should check if it is a valid point.

He said we need to multiply the point by L, and make sure there's no
torsion component (that is, that the result is the identity).

This avoids the complexity of choosing a canonical point using some
lexicographic order, or the complexity of using something like decaf.

(Hopefully, Ian will write back if I transcribed things incorrectly.)

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY16hcAAoJEHQNnjkCUnKionQP/393y1f9hwUAR3fCPC/ubGH6
LyWQPRcVmatd9t7ZfN/jK/HY4dF3rYJMIPOxqO1ooGasSBf5CRpmxHbIsarIgHXo
litxQybcAFo6kvvtyK1M254h1xVuut8xeKrjsZlSs6rrrFQKo9eRNaJ/TCY+rh0F
4noO64Bt0M9V82bI+zoT6BbArp7V+o+23eNH90/rlfhDGD/YRQX5/OFmw4q62d/V
ogPtszBzpIEGHdgxNDrQTMA1pBhe9j1OTqU+NqvyS1b6VFblQ3sjg3jC2FV3G3/U
hKozUN0dMpijKX2ezaNuNraaQhMbI2MDuscQVrYIMZy5WcQuBpOsEuc6k60NEGie
EvpLhgumJOoBNQTO6nmeyIm2Ra/xXmvZpnZXUhaP+Hqac1EUU4BqOmE9Ibejb7g2
pyZ14WjSKLj20kn+lB8n9w6Udq63g/Gi/HqkwuHwkETzttUq12F6Jt1d3TSGvk6W
hdW/66qejoTk/qeBbtpZMC2b4ezl+3rcleguPv/bAJAQKo54zmglYhnAljwNUWAE
RXtkKMzhI3PJ7McggJGt+37Lrzl0rWa1VXGbvExRU7FkE1wRvdca/Al5JaEwfEsx
mXZmvH3pP7UyKMkHBB/g3QqG68bTqs0MMg0WejmjmCadidJd5Ojs+l/NRgEfBZAV
NXgzAjLcdaiJ+oLIxvMs
=N/+R
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170314192748</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-14 19:27:48-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Onionoo"</subject><body>

Hi Nur-Magomed. Unfortunately the folks maintaining Onionoo are
unavailable to mentor this summer. I'd suggest looking into another
subproject.



On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; Hi!
&gt;
&gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of information
&gt; technology (speciality: computer security) of North-Caucasus Federal
&gt; University. I have experience with Java, SQL, Web (HTML, CSS, JavaScript,
&gt; PHP) and also I designed protocol based on JSON for Android app.
&gt;
&gt;
&gt; I would love to contribute to the project "Onionoo". Please provide me some
&gt; guide lines and additional materials for study and get a clear understanding
&gt; about the mentioned project. Thank you!
&gt;
&gt;
&gt; Regards
&gt;
&gt; Nur-Magomed
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326190600</emailId><senderName>Jesse V</senderName><senderEmail>kernelcorn@torproject.org</senderEmail><timestampReceived>2017-03-26 19:06:00-0400</timestampReceived><subject>[tor-dev] The behavior of ClientRejectInternalAddresses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi everyone,

I would like some clarification on ClientRejectInternalAddresses. The
manual says:
&gt; "If true, Tor does not try to fulfill requests to connect to an
internal address (like 127.0.0.1 or 192.168.0.1) unless a exit node is
specifically requested (for example, via a .exit hostname, or a
controller request). (Default: 1)

In other words, if I disable this flag and I open 127.0.0.1:8080 in the
Tor Browser, will the browser or the tor binary attempt to connect to
the client's 127.0.0.1:8080? This is essentially what I'm after, and I
just want to confirm that ClientRejectInternalAddresses is the best
approach, or if there is a better setting. Just to clarify, I want to
connect the client's localhost and not an exit's.

--=20
Jesse


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326094844</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-03-26 09:48:44-0400</timestampReceived><subject>[tor-dev] Pluggable Transports 2.0, draft 1 Specification</subject><body>

[Attachment #2 (multipart/alternative)]


As was discussed in the Pluggable Transports session at TorDev Amsterdam, the
Pluggable Transports 2.0, draft 1 specification [https://www.
pluggabletransports.info/spec/pt2draft1] was created by a committee of
censorship circumvention tool developers: Tor, Lantern, Psiphon, and
uProxy. It specifies a version of Pluggable Transports that meets the needs
of multiple circumvention tools.

There is one major change that has implications for tor, which is that the
Pluggable Transports 2.0, draft 1 IPC protocol uses a different type of
SOCKS authentication mechanism, which allows for larger parameters to be
send to transports.

We are currently working on a 2nd draft of this specification, which will
incorporate changes and errata from the community censorship circumvention
tool community. For instance, syntactic errors in the documentation of the
Go interface will be fixed in draft 2. Tor developers participated in the
specification meetings, and now feedback from the overall Tor community is
requested for incorporation in the next draft. There will also likely be a
2.1 specification process, possibility starting August, where we will
consider larger changes.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;As was discussed in the Pluggable Transports session at \
TorDev Amsterdam, t&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;he \
Pluggable Transports 2.0, draft 1 specification [&lt;/span&gt;&lt;a \
href="https://www.pluggabletransports.info/spec/pt2draft1" target="_blank" \
style="color:rgb(17,85,204);font-family:arial,sans-serif;font-size:12.8px;font-style:n \
ormal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter \
-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:norma \
l;word-spacing:0px;background-color:rgb(255,255,255)"&gt;https://www.&lt;wbr&gt;pluggabletransports.info/spec/&lt;wbr&gt;pt2draft1&lt;/a&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;] \
was created by a committee of censorship circumvention tool developers: Tor, Lantern, \
Psiphon, and uProxy. It specifies a version of Pluggable Transports that meets the \
needs of multiple circumvention tools. &lt;br&gt;&lt;/span&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;&lt;br&gt;&lt;/span&gt;There \
is one major change that has implications for tor, which is that the Pluggable \
Transports 2.0, draft 1 IPC protocol uses a different type of SOCKS authentication \
mechanism, which allows for larger parameters to be send to \
transports.&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;We \
are currently working on a 2nd draft of this specification, which will incorporate \
changes and errata from the community censorship circumvention tool community. For \
instance, syntactic errors in the documentation of the Go interface will be fixed in \
draft 2. &lt;/span&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Tor \
developers participated in the specification meetings, and now feedback from the \
overall Tor community is requested for incorporation in the next draft. \
&lt;/span&gt;&lt;/span&gt;There will also likely be a 2.1 specification process, possibility \
starting August, where we will consider larger changes.&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter- \
spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal \
;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;&lt;/span&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170325190720</emailId><senderName>irykoon</senderName><senderEmail>irykoon@gmail.com</senderEmail><timestampReceived>2017-03-25 19:07:20-0400</timestampReceived><subject>[tor-dev] GSOC 2017: Proposal for anon-connection-wizard</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello everyone!

The following is my first draft of the proposal for the
anon-connection-wizard. Could anyone offer me some feedback about it
please? Any recommendation, suggestion and criticism are very welcome
and appreciated!

&gt; # Introduction
&gt; 
&gt; Every software project should solve a problem. Before offering the 
&gt; solution (your Google Summer of Code project), you should first 
&gt; define the problem. What's the current state of things? What's the 
&gt; issue you wish to solve and why? Then you should conclude with a 
&gt; sentence or two about your solution. Include links to discussions,
&gt; features, or bugs that describe the problem further if necessary.

The anon-connection-wizard is a Python-clone of the Tor Launcher which
aims at providing Tor users with a graphical instruction on
configuring the Tor. This applicatipn has been developed as a part of
the Whonix Project: https://github.com/Whonix/anon-connection-wizard
Some of the screenshots of the old version anon-connection-wizard can
be found here: https://www.whonix.org/blog/connection-bridge-wizard

This application is especially helpful for users
who live in Tor-censored area. This is because those users can only
connect to the Tor network with the help of other censorship
circumvention tools which include but are not limited to Tor bridges,
pluggable transports and other third party Internet censorship
circumvention tools like Lantern and VPN.

Currently, the Tor Launcher is shipped with the Tor Browser Bundle and
heavily relies on the Tor Browser for its implementation. These facts
cause using Tor Launcher without having the Tor Browser impossible. I
agree with the whonix core developer Patrick Schleizer that "the Tor
Browser Bundle has its kind of users. system Tor (refers to Tor from
packages.debian.org or deb.torproject.org) users, where Tor runs as
daemon, is used in different ways for different purposes. These users
cannot use Tor Launcher, because it only works with Tor Browser".
Therefore, although anon-connection-wizard is a Python-clone of the
Tor luancher, since all its dependencies are already in Debian and alrea
dy
packaged, it can still be really useful for the system Tor users.

In addition, the current instructions provided by the
anon-connection-wizard and Tor launcher is not be clear enough for
user to configure Tor correctly. Therefore I would like to implement
and redesign the anon-connection-wizard. I hope that my work will help
more people to connect to the Tor network efficiently and successfully.

&gt; # Project goals
&gt; 
&gt; Be short and to the point, and perhaps format it as a list.
&gt; Propose a clear list of deliverables, explaining exactly what you
&gt; promise to do and what you do not plan to do. "Future developments"
&gt; can be mentioned, but your promise for the Google Summer of Code
&gt; term is what counts.

As mentioned above, the projects goals include two main parts:
1. The clone implementation of Tor Launcher;
2. The redesign of the anon-connection-wizard.

&gt; # Implementation
&gt; 
&gt; Be detailed. Describe what you plan to do as a solution for the 
&gt; problem you defined above. Include technical details, showing that 
&gt; you understand the technology. Illustrate key technical elements
&gt; of your proposed solution in reasonable detail.
&gt; 

The clone implementation of Tor Launcher:
Currently, I have helped to implement the basic functions of
anon-connection-wizard. However, there are still several bugs need
fixing and a large number of exciting features need implementing,
which include:

1. The current implementation of configuring torrc file is very
rudimentary. The anon-connection-wizard should read the previous
bridge/proxy configuration from the file and adjust the default UI
accordingly. Just like what Tor Launcher has been doing. The "edit
marker approach" is preferred way to implement this:
https://forums.whonix.org/t/graphical-gui-whonix-setup-wizard-anon-conne
ction-wizard-technical-discussion/650/226
2. The password for proxy setting should be covered by character *

The redesign of the anon-connection-wizard:
I have made a specific proposal for this topic, which can be found
here:
https://forums.whonix.org/t/a-proposal-for-redesigning-anon-connection-w
izard-for-better-usability/3681
The redesign should at least includes:
1. Rearranging the instruction page orders for better usability;
2. Rewriting the literal instruction so that it fits the actual
situation of people in censored areas;
3. Adding more features to the custom Tor bridges configuration input
box for more clear instruction. For example, syntax highlight,
tool-tips, etc;
4. Doing user behavior experiment to find out what can be helpful for
better usability;
5. Modifying the anon-connection-wizard based on the result of the
experiment.

&gt; # Timeline
&gt; 
&gt; Show that you understand the problem, have a solution, have also 
&gt; broken it down into manageable parts, and that you have a
&gt; realistic plan on how to accomplish your goal.

Here you set expectations, so don't make promises you can't keep. A
modest, realistic and detailed timeline is better than promising the
impossible.

Since the specific dates may be changed with the undecided working
schedule. I arrange my timeline in a week unit.

Week 1:
The password for proxy setting should be covered by character *.

Week 2:
Implement the "edit marker approach".

Week 3:
Rewriting the literal instruction so that it fits the actual situation
of people in censored areas.

Week 4:
Generate ideas on redesigning the anon-continence-wizard users
interface, basing on the recommendations from outside sources,
problems discussed above and suggestions from other people. Present
the planning redesign to public to receive feedback.

Week 5:
Rearranging the instruction page orders for better usability;
Rewriting the literal instruction so that it fits the actual situation
of people in censored areas.

Week 6:
Adding more features to the custom Tor bridges configuration input box
for more clear instruction. For example, syntax highlight, tool-tips, et
c;

Week 7:
Prepare for the user behavior experiment, including recruitment and
setting up environment.


Week 8:
Conduct the experiment.

Week 9:
Process and analysis the experiment data.

Week 10:
Write the research report.

Week 11:
Modifying the anon-connection-wizard based on the result of the
experiment.

Week 12:
Modifying the anon-connection-wizard based on the result of the
experiment.

&gt; 
&gt; If you have other commitments during GSoC, such as a job,
&gt; vacation, exams, internship, seminars, or papers to write, disclose
&gt; them here.

I am going to be enrolled for the Summer 2017 semester that begins May
22nd and ends June 23th at XXX University. I am going to take two
classes from Monday to Friday for each week during the Summer
semester. One will be from 3:20PM to 5:00PM (UTC) and another one will
be from 7:00PM to 8:40PM (UTC).

&gt; GSoC should be treated like a full-time job, and we will expect 
&gt; approximately 40 hours of work per week. If you have conflicts, 
&gt; explain how you will work around them. If you are found to have 
&gt; conflicts which you did not disclose, you may be failed.

The sum of the time I will be in class for each weekday will be 3
hours and 20 minute which is totally fine to me. My current overall
GPA is 4.0/4.0 which may help to prove I can handle my school study
well. According to Google Summer of Code timeline, the "[c]oding
officially begins" at May 30th which means there will be approximate
three weeks that I have both school study and Google Summer of Code.

To work around it, I have came up with three plans which either of
them is fine to my potential mentor:
1. Since I have been familiar with the contributing workflow for
Whonix, I do not have to spend a lot of time to get used to it.
Therefore I can use the "Community Bonding Period" which is from May
4th to May 30th to do the real coding for the project;
2. I can also keep committing to the project during each weekend from
now on before May 4th . This is also a way to work around the time
conflicts.
3. If I am expected to code only during the official timeline, I can
spend 5 hours each day during the weekdays and spend 8 hours each day
during the weekends.

&gt; Open and clear communication is of utmost importance. Include your 
&gt; plans for communication in your proposal; daily if possible.

I agree that "[o]pen and clear communication is of utmost importance".
This is because of two main reasons from my point of view. First, a
successful free and open source software development heavily relies on
the collaboration between different people. A good communication skill
will create a positive and supportive atmosphere which not only make
everyone works for it more efficient but also attracts more people to
join the development. Second, feedback from others, especially mentor,
can be extremely beneficial to a student's progress. Without the
feedback, it may take a student years until one day after a
frustrating debugging process to realize a mistake he/she made; while
he/she may realize several mistakes he/she made almost immediately
from his/her mentor's feedback.

I have already been working on the project with my potential mentor
Patrick Schleizer. A small part of our open communication can be found
[here](https://forums.whonix.org/t/graphical-gui-whonix-setup-wizard-ano
n-connection-wizard-technical-discussion/650/222),
which may be helpful to prove we have been having an open and clear
communication.

My plan is to take the [Whonix Forum](https://forums.whonix.org/) as
the daily communication platform with my potential mentor Patrick. And
just like what I have been doing, I will also post a detailed progress
report for each working period which is no more than a week. I can
definitely send the posts to the tor-dev mailing list if it is
considered as a good idea.

&gt; # About me
&gt; 
&gt; Provide your contact information

Currently, people can contact me through the following ways:
1. Email: irykoon at gmail dot com GPG:
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xA14B4DBC6DCDD53C
2. Github: @irykoon
3. Whonix Forum: @iry

I will inform the public if there is any change to my contact informatio
n.

&gt; and write a few sentences about you and why you think you are the 
&gt; best for this job.

As one who was living in oppressive area, I deeply understand the
importance of Internet freedom to a society. At first, I merely
considered Internet freedom as fighting against Internet censorship.
However, after a large amount of observation, reading and reflection,
I realized that the self-censorship conducted by every scared citizens
was much more powerful and terrible than the censorship conducted by
the outside world. It was at that moment I realized the online
anonymity was a vital component to Internet freedom because it frees
people from fear.

I value Tor/Whonix. Without it, I couldn't have been freed from the
fear and explored the world freely and finally became who I am today.

Therefore, contributing to Tor/Whonix as a career is not only a
dream that I have been fighting for, but also an essential approach to
my self-actualization.

&gt; Prior contributions are helpful; list your commits.

The followings are my pull requests on GitHub to the Whonix:
1. [Basic features
implementation](https://github.com/Whonix/anon-connection-wizard/pull/1)
2. [Pluggable transport
renew](https://github.com/Whonix/anon-connection-wizard/pull/2)
3. [A proposal for redesigning anon-connection-wizard for better
usability](https://github.com/Whonix/anon-connection-wizard/pull/3)
4. [Port from Python2 to Python3.4 &amp; from PyQt4 to
PyQt5](https://github.com/Whonix/anon-connection-wizard/pull/4)

The following is my proposal for the redesign of anon-connection-wizard:
1.
https://forums.whonix.org/t/a-proposal-for-redesigning-anon-connection-w
izard-for-better-usability/3681

&gt; Name people (other developers, students, professors) who can act
&gt; as a reference for you. Mention your field of study if necessary.

My potential mentor, Patrick Schleizer, can be a reference for me. He
is a core developer of the Whonix Project,

&gt; Other things to think about: * Are you comfortable working 
&gt; independently under a supervisor or mentor who is several thousand 
&gt; miles away, and perhaps 12 time zones away? How will you work with 
&gt; your mentor to track your work? Have you worked in this style 
&gt; before?

Yes! I have been interacting, working and learning in this style with
my potential mentor and I am really comfortable with that.

&gt; * If your native language is not English, are you comfortable 
&gt; working closely with a supervisor whose native language is
&gt; English? What is your native language, as that may help us find a
&gt; mentor who has the same native language?

Both my potential mentor Patrick and I can communicate in English. So
there is no problem with that.

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY1r/pAAoJEKFLTbxtzdU8wFsP/A2FwFd5Yg+9m6nKlgcywA9x
HNGuAc9RRyRg6MiOqg25NJdcDpa6d7y6wy5dBqXKjn5yWvcogQrFrONWXl9/U3D2
DwTCITF2EyDrLH/t9oUCFsE169oZSZ02WdqgCdl4yVF1Bdxk8lMW0/raZ325rTxH
QMv4ueG2YacVQ88vDxaY9wY9CAoghAvR+zjp9M3Lu0iebH4ZDfBaH19RZjWUa/+Y
eyvjY5DyFp74rct4UYX+Rqnqlgf8meTSoKAAJ4cbWPncQyIvWjVrzY3RTmznSg95
Dh97RJ3Ufso2h73dlUnojuLADOFEyyrL1hgNpqf7RAUhR5Dc+xTvwSmuqss9D8dQ
hjANF9ZpADcdDAQGSbcxlUcdd7u1twvVPnstlTLHsdLxbMS8F16SZhUAjJMlwOua
bdxssBGsdoht0fJmSB4LHz4G6r6cOlo2nRFD5Noo3rk63buS/+h8/zPBlOXsS8Ox
PNAKnUHkTQYucjmERlz7XwKFccoJNhO2Iha8hA3WkMwsTKzkbkJtRUX+NjE1XLrA
3ITVrzT08Bd5IpLrIKa352sknoqzv+/L0tVxdHc1xkjx0XgacHXLD3UcX1Zff/0p
QVKuE/PmavJinRbYh/g1mMZoZVryLRTsn/wOMKRoCmL+/xbIJIyM/IBEqxMyBFuU
SHq1QajHPvncx/dttM3W
=FRpt
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328202415</emailId><senderName>samir menon</senderName><senderEmail>menon.samir@gmail.com</senderEmail><timestampReceived>2017-03-28 20:24:15-0400</timestampReceived><subject>[tor-dev] Issues With Ticket #7532 - "Count unique IPs in an anonymous way"</subject><body>

[Attachment #2 (multipart/alternative)]


This ticket [1] was suggested as a GSoC project, but I think there might be
an issue with the security model/perceived threat.

To summarize the ticket and its child [1], basically, we currently store
all the IP's seen by a node so that we can count unique IP's. The idea is
that this is dangerous; if a node is compromised, then all of those IP
addresses can be retrieved from memory. Therefore, a variety of mitigation
methods have been proposed (most prominently, the 'Probabilistic Counting
Algorithm' from [2])

Here's my issue: what about brute force?

No matter what method we use, we will arrive at a data structure that
should be able to, given an IP address, tell us whether it is new (and we
should increment the unique counter) or old (and we should leave the unique
counter the same), with some reasonably small false positive rate.
Basically, we're supposed to use some kind of Bloom filter like structure.

Then can't that structure then be brute-forced, offline, by an attacker?
IPv4 addresses are 32-bits (~4.3 billion of them), so an attacker could
just run whatever method we use to check membership over and over, and then
recover the set of IP's. The same happens if we hash the IP's beforehand.

So, is this attack acceptable? The only mitigation I've seen is the one
referenced by 'Aaron' in the ticket, which is the system that git uses,
cryptolog; there, they have a random salt that changes daily. Then, an
attacker can only learn the IP's for one day. This sounds like a reasonable
compromise to me, but then the implementation becomes rather simple; just
hash the IP's with a random salt that changes daily before putting them in
the set.

IPv6 also solves this (128 bits), but there again, the solution is just to
hash the IP's before storing them - the Bloom filter/'Probabilistic
Counting Algorithm' is unnecessary.

I think I must be missing something about how the 'Probabilistic Counting
Algorithm' works - somehow, it needs to keep track of the # of unique IP's
without knowing (with a high probability) whether any 1 individual IP has
been seen.

Any help/pointing out of errors in my reasoning would be useful.

Thanks,
Samir Menon
menon.samir@gmail.com
samir2@stanford.edu

[1] https://trac.torproject.org/projects/tor/ticket/7532
[2]
http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/1985-Flajolet-Probabilistic-counting.pdf

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;This ticket [1] was suggested as a GSoC project, but I think there \
might be an issue with the security model/perceived threat.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To \
summarize the ticket and its child [1], basically, we currently store all the \
IP's seen by a node so that we can count unique IP's. The idea is that this \
is dangerous; if a node is compromised, then all of those IP addresses can be \
retrieved from memory. Therefore, a variety of mitigation methods have been proposed \
(most prominently, the 'Probabilistic Counting Algorithm' from \
[2])&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's my issue: what about brute force?  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No matter what method we use, we will arrive at a data \
structure that should be able to, given an IP address, tell us whether it is new (and \
we should increment the unique counter) or old (and we should leave the unique \
counter the same), with some reasonably small false positive rate. Basically, \
we're supposed to use some kind of Bloom filter like \
structure.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Then can't that structure then be \
brute-forced, offline, by an attacker? IPv4 addresses are 32-bits (~4.3 billion of \
them), so an attacker could just run whatever method we use to check membership over \
and over, and then recover the set of IP's. The same happens if we hash the \
IP's beforehand.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, is this attack acceptable? The only \
mitigation I've seen is the one referenced by 'Aaron' in the ticket, \
which is the system that git uses, cryptolog; there, they have a random salt that \
changes daily. Then, an attacker can only learn the IP's for one day. This sounds \
like a reasonable compromise to me, but then the implementation becomes rather \
simple; just hash the IP's with a random salt that changes daily before putting \
them in the set.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;IPv6 also solves this (128 bits), but there \
again, the solution is just to hash the IP's before storing them - the Bloom \
filter/'Probabilistic Counting Algorithm'  is \
unnecessary.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think I must be missing something about \
how the 'Probabilistic Counting Algorithm' works - somehow, it needs to keep \
track of the # of unique IP's without knowing (with a high probability) whether \
any 1 individual IP has been seen.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any help/pointing out \
of errors in my reasoning would be useful.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;Samir Menon&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a \
href="mailto:menon.samir@gmail.com"&gt;menon.samir@gmail.com&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="mailto:samir2@stanford.edu"&gt;samir2@stanford.edu&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] \
&lt;a href="https://trac.torproject.org/projects/tor/ticket/7532"&gt;https://trac.torproject.org/projects/tor/ticket/7532&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] \
&lt;a href="http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/1985-Flajolet-Prob \
abilistic-counting.pdf"&gt;http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/1985-Flajolet-Probabilistic-counting.pdf&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170321145453</emailId><senderName>Pickfire</senderName><senderEmail>pickfire@riseup.net</senderEmail><timestampReceived>2017-03-21 14:54:53-0400</timestampReceived><subject>[tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

Hi,

I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
interested particapate in Google Summer of Code 2017 under tor organization. I
am interested to see Proposal 224 coming along but I would really like to see
[Proposal 272][0] and hope that tor hidden services can be more user-friendly.

What do you think of the projects? Is the proposal too immature? I had looked
into [OnioNS][1] as well and like the idea of having different types of DNS
records for tor hidden services, how does it integrate with [Proposal 272][0]?

[0]: https://lists.torproject.org/pipermail/tor-dev/2016-October/011524.html
[1]: https://lists.torproject.org/pipermail/tor-dev/2015-May/008826.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170324153302</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-03-24 15:33:02-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

Pickfire &lt;pickfire@riseup.net&gt; writes:

&gt; Hi,
&gt;
&gt; I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
&gt; interested particapate in Google Summer of Code 2017 under tor organization. I
&gt; am interested to see Proposal 224 coming along but I would really like to see
&gt; [Proposal 272][0] and hope that tor hidden services can be more user-friendly.
&gt;

Hello,

there is still interest in this proposal but unfortunately it hasn't
been revised since it was first posted on the mailing list. The mailing
list feedback unfortunately has not been incorporated to the proposal
yet; particularly the comments by David Fifield are very relevant and
should be considered carefully before taking the proposal too seriously.

In general, I suggest to anyone who wants to work on this proposal, to
do it using a Tor controller instead of hacking the main C tor
code. meejah suggested this here:
      https://lists.torproject.org/pipermail/tor-dev/2016-October/011517.html
and it seems like a proper solution here would involve controller events
like NEWRESOLVE, MAPADDRESS, and plus some extra magic.

I must say that this project is definitely relevant for GSoC, but it
needs a _strong_ and _independent_ student that can handle it.

Also, Tor is currently having a real life meeting so most of us are very
busy. We plan to discuss the proposal during the meeting, so I hope to
send a short update next week at some point if I find the time (and also
merge it to torspec.git since it's currently missing).

I'm looking forward to any proposal comments, as well as responses to
the feedback received. Also, if someone can sketch an implementation
plan for the controller idea that would be great.

Sorry for the uncertainties here and good luck!
Cheers!






_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170325050611</emailId><senderName>Ivan Tham</senderName><senderEmail>pickfire@riseup.net</senderEmail><timestampReceived>2017-03-25 05:06:11-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; wrote:

&gt; Pickfire &lt;pickfire@riseup.net&gt; writes:
&gt; 
&gt; &gt; I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
&gt; &gt; interested particapate in Google Summer of Code 2017 under tor organization. I
&gt; &gt; am interested to see Proposal 224 coming along but I would really like to see
&gt; &gt; [Proposal 272][0] and hope that tor hidden services can be more user-friendly.
&gt; 
&gt; there is still interest in this proposal but unfortunately it hasn't
&gt; been revised since it was first posted on the mailing list. The mailing
&gt; list feedback unfortunately has not been incorporated to the proposal
&gt; yet; particularly the comments by David Fifield are very relevant and
&gt; should be considered carefully before taking the proposal too seriously.

Does

&gt; In general, I suggest to anyone who wants to work on this proposal, to
&gt; do it using a Tor controller instead of hacking the main C tor
&gt; code. meejah suggested this here:
&gt;       https://lists.torproject.org/pipermail/tor-dev/2016-October/011517.html

Does that mean that I well be working on the prototype with python first and
then convert it into C?

&gt; and it seems like a proper solution here would involve controller events
&gt; like NEWRESOLVE, MAPADDRESS, and plus some extra magic.

I don't quite understand what does that mean.

&gt; I must say that this project is definitely relevant for GSoC, but it
&gt; needs a _strong_ and _independent_ student that can handle it.

I will definitely do my best for it but I will really need a mentor to help
because I am confused by some parts of it as well.

&gt; Also, Tor is currently having a real life meeting so most of us are very
&gt; busy. We plan to discuss the proposal during the meeting, so I hope to
&gt; send a short update next week at some point if I find the time (and also
&gt; merge it to torspec.git since it's currently missing).

Nice, can I join as well to have a clearer understanding of it?

&gt; I'm looking forward to any proposal comments, as well as responses to
&gt; the feedback received. Also, if someone can sketch an implementation
&gt; plan for the controller idea that would be great.
&gt; 
&gt; Sorry for the uncertainties here and good luck!
&gt; Cheers!

No problem, I still see that the proprosal isn't very solid right now.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170325184420</emailId><senderName>Jesse V</senderName><senderEmail>kernelcorn@torproject.org</senderEmail><timestampReceived>2017-03-25 18:44:20-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 03/21/2017 10:54 AM, Pickfire wrote:
&gt; I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
&gt; interested particapate in Google Summer of Code 2017 under tor organization. I
&gt; am interested to see Proposal 224 coming along but I would really like to see
&gt; [Proposal 272][0] and hope that tor hidden services can be more user-friendly.
&gt; 
&gt; What do you think of the projects? Is the proposal too immature? I had looked
&gt; into [OnioNS][1] as well and like the idea of having different types of DNS
&gt; records for tor hidden services, how does it integrate with [Proposal 272][0]?
&gt; 
&gt; [0]: https://lists.torproject.org/pipermail/tor-dev/2016-October/011524.html
&gt; [1]: https://lists.torproject.org/pipermail/tor-dev/2015-May/008826.html

Hi Ivan,

I am the author and the main developer behind the Onion Name System
(OnioNS) project, which I see you referenced above. You may be
interested in reading my paper here: [0]. Development is on Github and I
think that I have a very solid codebase, but I haven't commit anything
recently as I've been busy with a full-time job as a pen tester and
various other side projects that have occupied my time.

In my mind, there are a couple of issues that impact naming systems:
1) The SHAttered attack against SHA-1. This certainly affects current
onion services, and I'm personally a hesitant to enhance them with a
naming system, since a SHA-1 collision would undermine the security of
any naming system.
2) Prop224 is in the works and is still being finalized. Since the
addresses are much larger, we certainly want to have a good naming
system by the time it's ready to go, as this also encourages the
transition to the new system. The naming system API ties into this.

I would be very happy if you were to help implement the naming system
API. It's currently possible to redirect the streams by sending commands
to the tor control port, but an API would be much cleaner.

[0]:
https://www.degruyter.com/downloadpdf/j/popets.2017.2017.issue-1/popets-2017-0003/popets-2017-0003.pdf

-- 
Jesse


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326131911</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-03-26 13:19:11-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

Ivan Tham &lt;pickfire@riseup.net&gt; writes:

&gt; George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;
&gt;&gt; Pickfire &lt;pickfire@riseup.net&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
&gt;&gt; &gt; interested particapate in Google Summer of Code 2017 under tor organization. I
&gt;&gt; &gt; am interested to see Proposal 224 coming along but I would really like to see
&gt;&gt; &gt; [Proposal 272][0] and hope that tor hidden services can be more user-friendly.
&gt;&gt; 
&gt;&gt; there is still interest in this proposal but unfortunately it hasn't
&gt;&gt; been revised since it was first posted on the mailing list. The mailing
&gt;&gt; list feedback unfortunately has not been incorporated to the proposal
&gt;&gt; yet; particularly the comments by David Fifield are very relevant and
&gt;&gt; should be considered carefully before taking the proposal too seriously.
&gt;
&gt; Does
&gt;
&gt;&gt; In general, I suggest to anyone who wants to work on this proposal, to
&gt;&gt; do it using a Tor controller instead of hacking the main C tor
&gt;&gt; code. meejah suggested this here:
&gt;&gt;       https://lists.torproject.org/pipermail/tor-dev/2016-October/011517.html
&gt;
&gt; Does that mean that I well be working on the prototype with python first and
&gt; then convert it into C?
&gt;

Hello,

I think a well made controller-based prototype in Python and one or two
PoC integrations of simple name systems (e.g. local hosts file, remote
hosts file) should be fine for a GSoC summer project.

If we like the controller prototype we could consider writing it in C in
the future.

&gt;&gt; and it seems like a proper solution here would involve controller events
&gt;&gt; like NEWRESOLVE, MAPADDRESS, and plus some extra magic.
&gt;
&gt; I don't quite understand what does that mean.
&gt;

Please check control-spec.txt for a description of those events:
       https://gitweb.torproject.org/torspec.git/tree/control-spec.txt
It might make things clearer.

&gt;&gt; I must say that this project is definitely relevant for GSoC, but it
&gt;&gt; needs a _strong_ and _independent_ student that can handle it.
&gt;
&gt; I will definitely do my best for it but I will really need a mentor to help
&gt; because I am confused by some parts of it as well.
&gt;

Hmm. Which parts did you find confusing?

Cheers!


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328214059</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-03-28 21:40:59-0400</timestampReceived><subject>Re: [tor-dev] Issues With Ticket #7532 - "Count unique IPs in an anonymous way"</subject><body>

On Tue, 28 Mar 2017 13:24:15 +0000, samir menon wrote:
...
&gt; IPv6 also solves this (128 bits), but there again, the solution is just to
&gt; hash the IP's before storing them

No even that. Once you forget the salt the stored-so-far addresses
become useless for you, too. So instead of storing current salt
plus hashed addresses you can just as well store plain addresses
for the day (modulo cost of the hash function).

&gt; - the Bloom filter

Indeed. You can preload some random addresses into the hash set
just as well as into the bloom filter, to 'poison' the cache.

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328215608</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-03-28 21:56:08-0400</timestampReceived><subject>Re: [tor-dev] Issues With Ticket #7532 - "Count unique IPs in an anonymous way"</subject><body>

Hi Samir,

Brute force does affect Bloom filter/hashed-values as you rightly
mentioned, but not Probabilistic Counting by Stochastic Averaging (PCSA).

PCSA works on the principle that in an input the probability of n
consecutive bits having value '0' from the left side(could be right as
well, but for now assume it left) is 2^(-(n+1)). Bit 'i' of the
Bitmap(which is our main data structure) is set if a the number of
consecutive zeros (from left) is 'i'.

We keep repeating it for every input(IP address). We then end up with a
Bitmap whose  most significant '1' can be computed to give us an
approximate number of inputs that must have been gone into the algorithm.

In simple words, if I tell you that I have seen the value 1010000 out of
a total of 'x' values I examined. You could guess that I had examined a
total of 2^5 values before I saw that particular value.

We would tweak the algorithm to store only the significant most '1' in
bitmap instead of storing '1' at every iteration. This would mean that
all that adversary could get hold of is a bitmap whose just one of the
bit is '1'.

Example, the adversary might get a data structure that looks like:
		000001000000
and would have no way tell what IP addresses were used as an input.

This was just the basic idea behind PCSA. The actual PCSA makes use of
complicated looking formula to get the approximate number of unique IP
addresses in order to keep error rate low.

I hope this makes sense.

For some more information and simulation, please check

[0] https://research.neustar.biz/2013/04/02/sketch-of-the-
day-probabilistic-counting-with-stochastic-averaging-pcsa/
[1] http://content.research.neustar.biz/blog/runs.html

Regards,
Jaskaran

On Wednesday 29 March 2017 01:54 AM, samir menon wrote:
&gt; This ticket [1] was suggested as a GSoC project, but I think there might
&gt; be an issue with the security model/perceived threat.
&gt; 
&gt; To summarize the ticket and its child [1], basically, we currently store
&gt; all the IP's seen by a node so that we can count unique IP's. The idea
&gt; is that this is dangerous; if a node is compromised, then all of those
&gt; IP addresses can be retrieved from memory. Therefore, a variety of
&gt; mitigation methods have been proposed (most prominently, the
&gt; 'Probabilistic Counting Algorithm' from [2])
&gt; 
&gt; Here's my issue: what about brute force? 
&gt; 
&gt; No matter what method we use, we will arrive at a data structure that
&gt; should be able to, given an IP address, tell us whether it is new (and
&gt; we should increment the unique counter) or old (and we should leave the
&gt; unique counter the same), with some reasonably small false positive
&gt; rate. Basically, we're supposed to use some kind of Bloom filter like
&gt; structure.
&gt; 
&gt; Then can't that structure then be brute-forced, offline, by an attacker?
&gt; IPv4 addresses are 32-bits (~4.3 billion of them), so an attacker could
&gt; just run whatever method we use to check membership over and over, and
&gt; then recover the set of IP's. The same happens if we hash the IP's
&gt; beforehand.
&gt; 
&gt; So, is this attack acceptable? The only mitigation I've seen is the one
&gt; referenced by 'Aaron' in the ticket, which is the system that git uses,
&gt; cryptolog; there, they have a random salt that changes daily. Then, an
&gt; attacker can only learn the IP's for one day. This sounds like a
&gt; reasonable compromise to me, but then the implementation becomes rather
&gt; simple; just hash the IP's with a random salt that changes daily before
&gt; putting them in the set.
&gt; 
&gt; IPv6 also solves this (128 bits), but there again, the solution is just
&gt; to hash the IP's before storing them - the Bloom filter/'Probabilistic
&gt; Counting Algorithm' is unnecessary.
&gt; 
&gt; I think I must be missing something about how the 'Probabilistic
&gt; Counting Algorithm' works - somehow, it needs to keep track of the # of
&gt; unique IP's without knowing (with a high probability) whether any 1
&gt; individual IP has been seen. 
&gt; 
&gt; Any help/pointing out of errors in my reasoning would be useful. 
&gt; 
&gt; Thanks,
&gt; Samir Menon
&gt; menon.samir@gmail.com &lt;mailto:menon.samir@gmail.com&gt;
&gt; samir2@stanford.edu &lt;mailto:samir2@stanford.edu&gt;
&gt; 
&gt; [1] https://trac.torproject.org/projects/tor/ticket/7532
&gt; [2] http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/1985-Flajolet-Probabilistic-counting.pdf
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

-- 
Jaskaran Veer Singh (jvsg)
jvsg1303 at gmail dot com
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124182752</emailId><senderName>Linda Naeun Lee</senderName><senderEmail>linda@torproject.org</senderEmail><timestampReceived>2017-01-24 18:27:52-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On 2017-01-24 08:00, David Goulet wrote:
&gt; On 24 Jan (14:27:43), George Kadianakis wrote:
&gt; &gt; s7r &lt;s7r@sky-ip.org&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; Hello George,
&gt; &gt; &gt; 
&gt; &gt; &gt; George Kadianakis wrote:
&gt; &gt; &gt; &gt; Hello list,
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; we've had discussions over the past years about how to encode prop224 onion
&gt; &gt; &gt; &gt; addresses. Here is the latest thread: \
&gt; &gt; &gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2016-December/011734.html 
&gt; &gt; &gt; &gt; Bikeshedding is over; it's time to finally pick a scheme! My suggested scheme
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &lt;snip&gt;
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; The version field is useful and allows room for much stuff that we might
&gt; &gt; &gt; need to do. I think it would be better to place it at the end of the
&gt; &gt; &gt; address. I don't think all addresses should start with the same prefix
&gt; &gt; &gt; tbh - this will make them slightly less distinguishable (as much as
&gt; &gt; &gt; possible users should be able to differentiate onion addresses, which
&gt; &gt; &gt; are re-usable for long term, as opposite to Bitcoin where the
&gt; &gt; &gt; recommended way is to use 1 address 1 time, different one every time and
&gt; &gt; &gt; the users just need to see a string that looks and reads like a Bitcoin
&gt; &gt; &gt; address and just make sure it's copied (scanned) from/to the right place).
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; OK thanks for the useful discussion. I identified at least three 
&gt; &gt; feedback points:
&gt; &gt; 
&gt; &gt; + Screw base58 it's not gonna work. We stick to base32. Usability will
&gt; &gt; be "restored" with a proper name system.
&gt; &gt; 
&gt; &gt; + Move version byte to the end of the address to avoid constant
&gt; &gt; prefix. Moving version byte to the middle as teor suggested would
&gt; &gt; cause forward-compatibility issues.
&gt; &gt; 
&gt; &gt; + My checksum calculations were wrong. Checksum is strong! 2 bytes are 
&gt; &gt; enough.
&gt; &gt; 
&gt; &gt; And given the above, here is the new microproposal:
&gt; &gt; 
&gt; &gt; onion_address = base32(pubkey || checksum || version)
&gt; &gt; checksum = SHA3(".onion checksum" || pubkey || version)
&gt; &gt; 
&gt; &gt; where:
&gt; &gt; pubkey is 32 bytes ed25519 pubkey
&gt; &gt; version is one byte (default value for prop224: '\x03')
&gt; &gt; checksum hash is truncated to two bytes
&gt; &gt; 
&gt; &gt; Here are a few example addresses (with broken checksum):
&gt; &gt; 
&gt; &gt; l5satjgud6gucryazcyvyvhuxhr74u6ygigiuyixe3a6ysis67ororad.onion
&gt; &gt; btojiu7nu5y5iwut64eufevogqdw4wmqzugnoluw232r4t3ecsfv37ad.onion
&gt; &gt; vckjr6bpchiahzhmtzslnl477hdfvwhzw7dmymz3s5lp64mwf6wfeqad.onion
&gt; &gt; 
&gt; &gt; Checksum strength: The checksum has a false negative rate of 
&gt; &gt; 1/65536.
&gt; &gt; 
&gt; &gt; Address handling: Clients handling onion addresses first parse the
&gt; &gt; version field, then extract pubkey, then verify checksum.
&gt; &gt; 
&gt; &gt; Let me know how you feel about this one. If people like it I will
&gt; &gt; transcribe it to prop224.
&gt; 
&gt; I like this quite a bit! Simple, easy, and trivial to understand. 56
&gt; characters address, after that it will be the time to improve UX/UI 
&gt; with all
&gt; sorts of possible tricks to make them easier to remember or copy paste 
&gt; or
&gt; visualize or what not.
&gt; 
&gt; Unless some feedback NACK this, I say push that in the proposal soon. 
&gt; I'll
&gt; personally start implementing that scheme this week.
&gt; 
&gt; Thanks!
&gt; David
&gt; 
&gt; &gt; 
&gt; &gt; Thanks again Ivan, Ian, Linda, teor, s7r, Chelsea :)
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

+1; I like this proposal.

The hyphens help, but I don't think that is the only solution (though I 
have no alternatives at the moment, except having short and 
pronounceable names, which doesn't have the technical properties we 
want) and we should be careful as it can introduce complexity/forward 
compatibility issues.

-- 
Current Key: https://pgp.mit.edu/pks/lookup?search=lindanaeunlee
GPG Fingerprint: FA0A C9BE 2881 B347 9F4F C0D7 BE70 F826 5ED2 8FA2
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124192546</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-01-24 19:25:46-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

David Goulet wrote:
&gt; &lt;snip&gt;
&gt;&gt;
&gt;&gt; OK thanks for the useful discussion. I identified at least three feedback points:
&gt;&gt;
&gt;&gt; + Screw base58 it's not gonna work. We stick to base32. Usability will
&gt;&gt;   be "restored" with a proper name system.
&gt;&gt;
&gt;&gt; + Move version byte to the end of the address to avoid constant
&gt;&gt;   prefix. Moving version byte to the middle as teor suggested would
&gt;&gt;   cause forward-compatibility issues.
&gt;&gt;
&gt;&gt; + My checksum calculations were wrong. Checksum is strong! 2 bytes are enough.
&gt;&gt;
&gt;&gt; And given the above, here is the new microproposal:
&gt;&gt;
&gt;&gt;   onion_address = base32(pubkey || checksum || version)
&gt;&gt;   checksum = SHA3(".onion checksum" || pubkey || version)
&gt;&gt;
&gt;&gt;   where:
&gt;&gt;        pubkey is 32 bytes ed25519 pubkey
&gt;&gt;        version is one byte (default value for prop224: '\x03')
&gt;&gt;        checksum hash is truncated to two bytes
&gt;&gt;
&gt;&gt;   Here are a few example addresses (with broken checksum):
&gt;&gt;
&gt;&gt;        l5satjgud6gucryazcyvyvhuxhr74u6ygigiuyixe3a6ysis67ororad.onion
&gt;&gt;        btojiu7nu5y5iwut64eufevogqdw4wmqzugnoluw232r4t3ecsfv37ad.onion
&gt;&gt;        vckjr6bpchiahzhmtzslnl477hdfvwhzw7dmymz3s5lp64mwf6wfeqad.onion
&gt;&gt;   
&gt;&gt;   Checksum strength: The checksum has a false negative rate of 1/65536.
&gt;&gt;
&gt;&gt;   Address handling: Clients handling onion addresses first parse the
&gt;&gt;   version field, then extract pubkey, then verify checksum.
&gt;&gt;
&gt;&gt; Let me know how you feel about this one. If people like it I will
&gt;&gt; transcribe it to prop224.
&gt; 
&gt; I like this quite a bit! Simple, easy, and trivial to understand. 56
&gt; characters address, after that it will be the time to improve UX/UI with all
&gt; sorts of possible tricks to make them easier to remember or copy paste or
&gt; visualize or what not.
&gt; 
&gt; Unless some feedback NACK this, I say push that in the proposal soon. I'll
&gt; personally start implementing that scheme this week.
&gt; 

I like the proposal in this form - Yes for all points.

I also dislike being possible to have multiple addresses (versions) for
the same public key, that would create implementation and usability
problems.

I wouldn't go for the hypens, but even if we decide at a later point
that this was a good idea we can handle it at an upper layer, like with
a browser tool or something, it's outside the scope of this
microproposal. We all know only a naming system will really fix this
issue from all points of view, so let's stick to that.

Thanks for this! Really great work.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170125225943</emailId><senderName>Arlo Breault</senderName><senderEmail>arlo@torproject.org</senderEmail><timestampReceived>2017-01-25 22:59:43-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>


&gt; On Jan 24, 2017, at 4:27 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt;  onion_address = base32(pubkey || checksum || version)
&gt;  checksum = SHA3(".onion checksum" || pubkey || version)

Any reason not to have the order of,
pubkey || checksum || version
be the same in both?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170327064850</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-03-27 06:48:50-0400</timestampReceived><subject>[tor-dev] "firefox --app" for meek-http-helper</subject><body>

On Sun, Mar 26, 2017 at 02:28:00PM +0000, anonym wrote:
&gt; Tails uses the Tor Launcher shipped in Tor Browser, but it's run as a
&gt; stand-alone XUL application (`firefox --app ...`), so the *web*
&gt; browser isn't started as part of it.

Sorry to change the subject, but should we be running meek-http-helper
using "firefox --app"? I didn't know about that before. It sounds like
it could solve some of the problems associated with having multiple
Firefox profiles.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170329114400</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-03-29 11:44:00-0400</timestampReceived><subject>Re: [tor-dev] "firefox --app" for meek-http-helper</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


David Fifield:
&gt; On Sun, Mar 26, 2017 at 02:28:00PM +0000, anonym wrote:
&gt;&gt; Tails uses the Tor Launcher shipped in Tor Browser, but it's run as a
&gt;&gt; stand-alone XUL application (`firefox --app ...`), so the *web*
&gt;&gt; browser isn't started as part of it.
&gt;=20
&gt; Sorry to change the subject, but should we be running meek-http-helper
&gt; using "firefox --app"? I didn't know about that before. It sounds like
&gt; it could solve some of the problems associated with having multiple
&gt; Firefox profiles.

I have no strong opinions here. It seems worth playing with it to figure
out if it could be helpful in a meek context.

Georg



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170125231932</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-25 23:19:32-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Jan 2017, at 09:59, Arlo Breault &lt;arlo@torproject.org&gt; wrote:
&gt; 
&gt; 
&gt;&gt; On Jan 24, 2017, at 4:27 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; onion_address = base32(pubkey || checksum || version)
&gt;&gt; checksum = SHA3(".onion checksum" || pubkey || version)
&gt; 
&gt; Any reason not to have the order of,
&gt; pubkey || checksum || version
&gt; be the same in both?

Yes: ".onion checksum" is not the same as checksum.

&gt;&gt; checksum = SHA3(".onion checksum" || pubkey || version)

Is the standard H(UNIQUE_PREFIX || DATA) construct that resists
hash reuse and rainbow table attacks. ".onion checksum" represents the
bytes from an ASCII-encoded literal string.

Putting those bytes later in the hash opens us up to hash reuse attacks
where the key or version bytes are made to match the prefix from another
hash.

(Every time we do SHA3(... || pubkey || ...) in the hidden service
protocol, we want a prefix that is static and unique, so people can't
use hashes from one part of the protocol to spoof hashes in another part
of the protocol.)

&gt;&gt; onion_address = base32(pubkey || checksum || version)

Is the order in which the address is encoded once the checksum is
calculated. checksum represents (the first two bytes of) the result of
the SHA3 hash.

We put pubkey first so that humans can distinguish addresses.
(We could put checksum first, but that's non-standard.)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYiTKEAAoJEEUMun+WjwlLe1oQAKWuT/fSk80/VM2gPyZj7/W7
22y9OLt23T+RkDx6grA+WmG9Sl4xg0uakShgcpKW6fZLQErmNt4UJvwQb4Y779Dv
uFEy3uEyNSHos2pt9lCxDaeQbua91q6M+3rsrp5YQG3zDyZ+nnyfI3KWpJ+LylfY
JWp7n2HXRLq56iIfUO+UzqK1F9zBqNYS6R7gntNmT5reefvJ0zUweLh/LEMxFiCd
So3EGBBNwZAzjzZ2BEK+gfekVMLfCusjjJbLBAeH7/fS0uxN82i2m7ywNTGaPmka
GU9IVvv1Yp8QzlIbwQ6pA2MCCy2ONn3/YDKlkzBQmnXAShDumdbUwIKAItlF6Jq5
t/28e2MjtTrfym8ccZ4qqW+BKtcxkcvoOm9Go1qonmqsU9NLfD6W33AD1vTyMGIw
p+xZd4/63uRRJ/tuPaklsbHCnNAzH+jc/7Zw04IP+5FBfK2qqFZloftEjMntiYCO
F4Xdbe6mfrUUiRHQRGniD9+cAkVX2NLUrgCbJD1k6GhguD0jr9GWAdVDdv+P11xu
ULasdk9VV9/82T+l6/f0wAb9XaXC6BiOXSk4eIZMymgQK1Y4w4RtknEK3VHQhN1T
twt5lH1zeG2fUvMSrR3PlbDGA1gwAu5hdWPFeeuxRx9NA7jtisEAFW6TZGiQOC4M
OTrlsZEVc9D4rOKTPMFj
=JOC/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170127130938</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-27 13:09:38-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; On 24 Jan (14:27:43), George Kadianakis wrote:
&gt; &gt; s7r &lt;s7r@sky-ip.org&gt; writes:
&gt; &gt; 
&gt; &gt; &lt;snip&gt;
&gt; 
&gt; I like this quite a bit! Simple, easy, and trivial to understand. 56
&gt; characters address, after that it will be the time to improve UX/UI with all
&gt; sorts of possible tricks to make them easier to remember or copy paste or
&gt; visualize or what not.
&gt; 
&gt; Unless some feedback NACK this, I say push that in the proposal soon. I'll
&gt; personally start implementing that scheme this week.
&gt; 
&gt; Thanks!
&gt; David
&gt; 

Hello,

I made a torspec branch that alters prop224 accordingly:
  https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95


I will merge this to torspec RSN if I don't hear any grave objections.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170127140451</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-01-27 14:04:51-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hello!

I have some more thoughts on versioning, specifically in regards to the
possibility of not including the version in the onion address and using
only the version field in the descriptor.

I'm not able to write out these scenarios now but I will do this in the
next day. Thanks for making last call!

Chelsea


On 01/27/2017 08:09 AM, George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt; 
&gt; &gt; On 24 Jan (14:27:43), George Kadianakis wrote:
&gt; &gt; &gt; s7r &lt;s7r@sky-ip.org&gt; writes:
&gt; &gt; &gt; 
&gt; &gt; &gt; &lt;snip&gt;
&gt; &gt; I like this quite a bit! Simple, easy, and trivial to understand. 56
&gt; &gt; characters address, after that it will be the time to improve UX/UI with all
&gt; &gt; sorts of possible tricks to make them easier to remember or copy paste or
&gt; &gt; visualize or what not.
&gt; &gt; 
&gt; &gt; Unless some feedback NACK this, I say push that in the proposal soon. I'll
&gt; &gt; personally start implementing that scheme this week.
&gt; &gt; 
&gt; &gt; Thanks!
&gt; &gt; David
&gt; &gt; 
&gt; Hello,
&gt; 
&gt; I made a torspec branch that alters prop224 accordingly:
&gt; https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95
&gt;  
&gt; I will merge this to torspec RSN if I don't hear any grave objections.
&gt; 
&gt; Cheers!
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170123133607</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-23 13:36:07-0400</timestampReceived><subject>[tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hello list,

we've had discussions over the past years about how to encode prop224 onion
addresses. Here is the latest thread: \
https://lists.torproject.org/pipermail/tor-dev/2016-December/011734.html

Bikeshedding is over; it's time to finally pick a scheme! My suggested scheme
basically follows from the discussion on that thread, and is heavily based on
the Bitcoin address format:
        https://en.bitcoin.it/wiki/Base58Check_encoding
        https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses


Here is the suggested scheme:

  onion_address = base32(version + pubkey + checksum)
  checksum = SHA3(".onion checksum" + version + pubkey)

  where:
       pubkey is 32 bytes (ed25519)
       version is one byte
       checksum is _truncated_ to two bytes

  With the above construction onion_address ends up being 56 bytes long
  (excluding the ".onion"):

      tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4gg.onion
      tcrdnadkefvbdm3u56kz6lfh6v5lr24fpog5vzsy4n3djr2ymueu34ws.onion
      tcdw7lwmtp5pbwj2w7wf6amxdhmc62qitj2teu376r5s2fqke4r3uiq6.onion

If people like the above suggestion, I will take the effort to engrave it in
prop224.

Here is the discussion section. Please provide feedback!

[D1] How to use version field:

      The version field is one byte long. If we use it as an integer we can
      encode 256 values in it; if we use it as a bitmap we could encode
      properties and such.

      My suggestion is to simply use it as an integer like Bitcoin does. So we
      can assign value \x01 to normal onion services, and in the future we can
      assign more version tags if we need to. For example, we can give a
      different version field to onion services in the testnet. We can also
      reserve a range of values for application-specific purposes.

[D1.1] Default version value:

      The next question is what version value to assign to normal onion
      services. In the above scheme where:

         onion_address = base32(version + pubkey + checksum)

      the value of 'version' basically determines the first two characters of
      the onion address. In Bitcoin, they've made it such that the default
      version value basically prefixes addresses with "1"; so all normal
      Bitcoin addresses start with 1 as in 14tDWDT9zqDufWZmiLqoaT9qJyHi7RRZPE

      What should we do in Tor? My suggestion is to use '\x98' as the default
      version value which prefixes all addresses with 't' (as in Tor).  Check
      the examples I cited above.

      An alternative is to turn the scheme to:
        onion_address = base32(pubkey + checksum + version)
      where the version byte is at the end with no effect at usability.

      A heavier alternative would be to have two bytes of version so that we
      can just prefix them all with 'tor'...

[D2] Checksum strength:

      In the suggested scheme we use a hash-based checksum of two bytes (16 bits).
      This means that in case of an address typo, we have 1/65536 probability
      to not detect the error (false negative). It also means that after 256
      typos we will have 50% probability to miss an error (happy birthday!).

      I feel like the above numbers are pretty good given the small checksum size.

      The alternative would be to make the checksum four bytes (like in
      Bitcoin).  This would _greatly_ increase the strength of our checksum but
      it would also increase our address length by 4 base32 characters (and
      also force us to remove leading padding from base32 output). This is how
      these 60-character addresses look like:

         tc2dty3zowj6oyhbyb5n3a2h3luztlx22hy2cwdvn37omsv7quy7rxiysn3a.onion
         tbdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golq.onion
         tc6pcgyorusw3jj5tosxakmcwfmcend2q4g2qnbjtkhuuh4dcgvs4rl4rdaa.onion

      You probably don't notice the size difference compared to the
      56-character addresses, which perhaps is an argument for adopting a four
      byte checksum. Let me know what you think about this.

[D3] Do we like base32???

      In this proposal I suggest we keep the base32 encoding since we've been
      using it for a while; but this is the perfect time to switch if we feel
      the need to.

      For example, Bitcoin is using base58 which is much more compact than
      base32, and also has much better UX properties than base64:
         https://en.bitcoin.it/wiki/Base58Check_encoding#Background

      If we wanted to get a more compact encoding, we could adopt base58 or
      make our own adaptation of it. In this proposal I'm using base32 for
      everything, but I could be persuaded that now is the time to use a better
      encoding.

Let me know what you think!

Thanks :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170123135027</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-23 13:50:27-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hello list,
&gt;
&gt; &lt;snip&gt;
&gt;
&gt; [D3] Do we like base32???
&gt;
&gt;       In this proposal I suggest we keep the base32 encoding since we've been
&gt;       using it for a while; but this is the perfect time to switch if we feel
&gt;       the need to.
&gt;
&gt;       For example, Bitcoin is using base58 which is much more compact than
&gt;       base32, and also has much better UX properties than base64:
&gt;          https://en.bitcoin.it/wiki/Base58Check_encoding#Background
&gt;
&gt;       If we wanted to get a more compact encoding, we could adopt base58 or
&gt;       make our own adaptation of it. In this proposal I'm using base32 for
&gt;       everything, but I could be persuaded that now is the time to use a better
&gt;       encoding.
&gt;

Oops, pressed "Send" a bit too quickly as always...

Just to give you a better idea here, I did some calculations about the
compactness of base58.

It seems that if we use Bitcoin's base58 we will be able to encode a
37-byte address (32 byte pubkey, one version byte and 4 bytes of
checksum) into 51 base58 characters, instead of 60 base32 characters.

Comparison:

(base32):
         tc2dty3zowj6oyhbyb5n3a2h3luztlx22hy2cwdvn37omsv7quy7rxiysn3a.onion
         tbdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golq.onion

(base58):
         tkb8klf9zgwqnogidda76mzpl6tszzy36hwxmsssznydyxyb9kf.onion
         touecgu8rmjxexxipud5bdku4mkfqezyd4dz1jvhtvqvbtlvytj.onion
    
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170123135131</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-01-23 13:51:31-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Mon, Jan 23, 2017 at 03:36:07PM +0200, George Kadianakis wrote:
&gt; [D2] Checksum strength:
&gt; 
&gt;       In the suggested scheme we use a hash-based checksum of two bytes (16 bits).
&gt;       This means that in case of an address typo, we have 1/65536 probability
&gt;       to not detect the error (false negative). It also means that after 256
&gt;       typos we will have 50% probability to miss an error (happy birthday!).

That doesn't sound right to me.  We're not comparing onion addresses
with each other; we're looking at them one at a time.  Birthday would
come in, for example, if we're asking "How many onion addresses would we
need to see before two have the same checksum?".  But if each false
negative happens with probability 1/65536 (which is correct), then it's
just the straightforward 32768 typos before we have 50% probability to
miss an error.

&gt;       I feel like the above numbers are pretty good given the small checksum size.

Agree.

&gt;       The alternative would be to make the checksum four bytes (like in
&gt;       Bitcoin).  This would _greatly_ increase the strength of our checksum but
&gt;       it would also increase our address length by 4 base32 characters (and
&gt;       also force us to remove leading padding from base32 output). This is how
&gt;       these 60-character addresses look like:
&gt; 
&gt;          tc2dty3zowj6oyhbyb5n3a2h3luztlx22hy2cwdvn37omsv7quy7rxiysn3a.onion
&gt;          tbdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golq.onion
&gt;          tc6pcgyorusw3jj5tosxakmcwfmcend2q4g2qnbjtkhuuh4dcgvs4rl4rdaa.onion
&gt; 
&gt;       You probably don't notice the size difference compared to the
&gt;       56-character addresses, which perhaps is an argument for adopting a four
&gt;       byte checksum. Let me know what you think about this.

Seems unnecessary to me.

&gt; [D3] Do we like base32???
&gt; 
&gt;       In this proposal I suggest we keep the base32 encoding since we've been
&gt;       using it for a while; but this is the perfect time to switch if we feel
&gt;       the need to.
&gt; 
&gt;       For example, Bitcoin is using base58 which is much more compact than
&gt;       base32, and also has much better UX properties than base64:
&gt;          https://en.bitcoin.it/wiki/Base58Check_encoding#Background
&gt; 
&gt;       If we wanted to get a more compact encoding, we could adopt base58 or
&gt;       make our own adaptation of it. In this proposal I'm using base32 for
&gt;       everything, but I could be persuaded that now is the time to use a better
&gt;       encoding.

Using base58 is likely to be fraught, since DNS names are "supposed" to
be case-insensitive; this onion address takes the place of a DNS name,
and who knows what software will just assume it's also case-insensitive.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170123173804</emailId><senderName>Linda Naeun Lee</senderName><senderEmail>linda@torproject.org</senderEmail><timestampReceived>2017-01-23 17:38:04-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On 2017-01-23 07:50, George Kadianakis wrote:
&gt; George Kadianakis &lt;desnacked@riseup.net&gt; writes:
&gt; 
&gt;&gt; Hello list,
&gt;&gt; 
&gt;&gt; &lt;snip&gt;
&gt;&gt; 
&gt;&gt; [D3] Do we like base32???
&gt;&gt; 
&gt;&gt;       In this proposal I suggest we keep the base32 encoding since 
&gt;&gt; we've been
&gt;&gt;       using it for a while; but this is the perfect time to switch if 
&gt;&gt; we feel
&gt;&gt;       the need to.

I am generally in favor or keeping the same encoding unless there is an 
unmistakable and objectively advantageous reason to switch. It throws 
users off when there is an "unnecessary" switch. Additionally, .onion 
addresses of variable lengths might be confusing.


&gt;&gt;       For example, Bitcoin is using base58 which is much more compact 
&gt;&gt; than
&gt;&gt;       base32, and also has much better UX properties than base64:
&gt;&gt;          https://en.bitcoin.it/wiki/Base58Check_encoding#Background

Is the better "UX" the fact that "A set of 58 alphanumeric symbols 
consisting of easily distinguished uppercase and lowercase letters (0OIl 
are not used)"? Currently, the addresses are too long to memorize, hard 
to type out, and not pronounceable enough, to consider such properties.

But for the sake of discussion, if we were to consider some usability 
properties, but I think base 32 is "easier to use" because it doesn't 
use both upper and lower case letters.

Base 32 (RFC 4648 Base32 alphabet): ABCDEFGHJKLMNPQRSTUVWXYZ234567
Base 58: 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz

My justification is that it would be harder to memorize upper/lower case 
letters in addresses, that it's hard to type with alternating cases, and 
there isn't a good way to distinguish the two when you pronounce it.

That being said, I stand by my original stance that the addresses are 
too long to memorize, type, or pronounce, so this shouldn't be a huge 
consideration. So I vote to keep the base32 encoding for the reason of 
keeping it the same as it was before.

&gt;&gt;       ...but I could be persuaded that now is the time to use a better
&gt;&gt;       encoding.

I won't be persuading you. :) Thanks for doing good work!

Cheers,
Linda

-- 
Current Key: https://pgp.mit.edu/pks/lookup?search=lindanaeunlee
GPG Fingerprint: FA0A C9BE 2881 B347 9F4F C0D7 BE70 F826 5ED2 8FA2
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170123194900</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-01-23 19:49:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hi George,

George Kadianakis:
&gt;       What should we do in Tor? My suggestion is to use '\x98' as the default
&gt;       version value which prefixes all addresses with 't' (as in Tor).  Check
&gt;       the examples I cited above.
&gt; 
&gt;       An alternative is to turn the scheme to:
&gt;         onion_address = base32(pubkey + checksum + version)
&gt;       where the version byte is at the end with no effect at usability.
&gt; 
&gt;       A heavier alternative would be to have two bytes of version so that we
&gt;       can just prefix them all with 'tor'...

Yes, this is definitely good idea to introduce version octet.
Though it seems pretty redundant to me to prefix onion addresses with
't'/'tor'. I think that the version octet should increment as you
described above.
I think that version should placed at the end of the address. This would
make addresses more distinguishable addresses among each other.


&gt; [D2] Checksum strength:
&gt; 
&gt;       In the suggested scheme we use a hash-based checksum of two bytes (16 bits).
&gt;       This means that in case of an address typo, we have 1/65536 probability
&gt;       to not detect the error (false negative). It also means that after 256
&gt;       typos we will have 50% probability to miss an error (happy birthday!).
&gt; 
&gt;       I feel like the above numbers are pretty good given the small checksum size.
&gt; 
&gt;       The alternative would be to make the checksum four bytes (like in
&gt;       Bitcoin).  This would _greatly_ increase the strength of our checksum but
&gt;       it would also increase our address length by 4 base32 characters (and
&gt;       also force us to remove leading padding from base32 output). This is how
&gt;       these 60-character addresses look like:

Is that necessary? Two bytes seem to be more than enough for typo-level
error.

&gt; [D3] Do we like base32???
&gt; 
&gt;       In this proposal I suggest we keep the base32 encoding since we've been
&gt;       using it for a while; but this is the perfect time to switch if we feel
&gt;       the need to.
&gt; 
&gt;       For example, Bitcoin is using base58 which is much more compact than
&gt;       base32, and also has much better UX properties than base64:
&gt;          https://en.bitcoin.it/wiki/Base58Check_encoding#Background

I'm personally consider both base64 and base58 having poor UX and agree
with Linda. Mostly it's because they are case-sensitive - this makes
them too hard to type in. Also base58 has non-integer bit capacity that
makes implementation way more complicated and error-prone (we've seen
enough bugs even in b32 and b64 implementations).

---

I had an idea recently that having variable-length flexible addresses in
fashion similar to TLVs in OTR protocol would be nice. In that case
there are no more length constraints at all, so we may use keys of
different types/sizes (pq?), embed authentication data, etc, etc.

Type:   1 byte
Length: 1 byte (=up to 255 bytes= 2040 bits)
Value:  Length bytes

0x01 0x20 [0x01..0xff] 0x33 0x02 [0x11 0x99] ".onion"
  T    T       T         T    T        T
  |    |       |         |    |        +-- two-byte checksum
  |    |       |         |    +----------- length of the checksum
  |    |       |         +---------------- checksum type
  |    |       +-------------------------- ed25519 pk
  |    +---------------------------------- size of pk (32 bytes)
  +--------------------------------------- prop224 identity key type

So, its length now 1+1+32 + 1+1+2 = 38 byte = 61 base32 chars with one
(1) unused bit.
E.g.:
obdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golqe.onion

Despite of using more bytes (type/length) it provides freedom for future
adjustments (e.g. another checksum/key algo). Also these TLVs are
commutative so changing order has no effect (maybe should, like in
DER?). As a side effect plain-old-onion-addresses can be encoded here
(even with a checksum).

I'm not sure whether it's reasonable as it seems to me.

--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124003215</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-24 00:32:15-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Jan 2017, at 00:36, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
...
&gt; [D1.1] Default version value:
&gt; 
&gt;      The next question is what version value to assign to normal onion
&gt;      services. In the above scheme where:
&gt; 
&gt;         onion_address = base32(version + pubkey + checksum)
&gt; 
&gt;      the value of 'version' basically determines the first two characters of
&gt;      the onion address. In Bitcoin, they've made it such that the default
&gt;      version value basically prefixes addresses with "1"; so all normal
&gt;      Bitcoin addresses start with 1 as in 14tDWDT9zqDufWZmiLqoaT9qJyHi7RRZPE
&gt; 
&gt;      What should we do in Tor? My suggestion is to use '\x98' as the default
&gt;      version value which prefixes all addresses with 't' (as in Tor).  Check
&gt;      the examples I cited above.

As Linda said, using a common prefix makes it much harder for people to
distinguish addresses.

(People check the start, then the end, and tend to ignore the middle.)

&gt;      An alternative is to turn the scheme to:
&gt;        onion_address = base32(pubkey + checksum + version)
&gt;      where the version byte is at the end with no effect at usability.

Using a common suffix makes it somewhat harder for people to distinguish
addresses.

I suggest:

onion_address = base32(pubkey + version + checksum)

That way, the identical part of the address is in an area people
typically ignore when doing comparisons.

&gt;      A heavier alternative would be to have two bytes of version so that we
&gt;      can just prefix them all with 'tor'…

This is even worse for distinguishability.

&gt; [D2] Checksum strength:
&gt; 
&gt;      In the suggested scheme we use a hash-based checksum of two bytes (16 bits).
&gt;      This means that in case of an address typo, we have 1/65536 probability
&gt;      to not detect the error (false negative). It also means that after 256
&gt;      typos we will have 50% probability to miss an error (happy birthday!).
&gt; 
&gt;      I feel like the above numbers are pretty good given the small checksum size.

Two bytes or 1/65536 is quite fine. 1/256 would even be acceptable.

&gt;      The alternative would be to make the checksum four bytes (like in
&gt;      Bitcoin).  This would _greatly_ increase the strength of our checksum but
&gt;      it would also increase our address length by 4 base32 characters (and
&gt;      also force us to remove leading padding from base32 output). This is how
&gt;      these 60-character addresses look like:
&gt; 
&gt;         tc2dty3zowj6oyhbyb5n3a2h3luztlx22hy2cwdvn37omsv7quy7rxiysn3a.onion
&gt;         tbdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golq.onion
&gt;         tc6pcgyorusw3jj5tosxakmcwfmcend2q4g2qnbjtkhuuh4dcgvs4rl4rdaa.onion
&gt; 
&gt;      You probably don't notice the size difference compared to the
&gt;      56-character addresses, which perhaps is an argument for adopting a four
&gt;      byte checksum. Let me know what you think about this.

Four bytes seems unnecessary, we only gain a very small advantage from
adding those extra bytes to every address.

&gt; [D3] Do we like base32???
&gt; 
&gt;      In this proposal I suggest we keep the base32 encoding since we've been
&gt;      using it for a while; but this is the perfect time to switch if we feel
&gt;      the need to.
&gt; 
&gt;      For example, Bitcoin is using base58 which is much more compact than
&gt;      base32, and also has much better UX properties than base64:
&gt;         https://en.bitcoin.it/wiki/Base58Check_encoding#Background
&gt; 
&gt;      If we wanted to get a more compact encoding, we could adopt base58 or
&gt;      make our own adaptation of it. In this proposal I'm using base32 for
&gt;      everything, but I could be persuaded that now is the time to use a better
&gt;      encoding.

As far as I understand it, .onion domain registrations require addresses
that conform to DNS rules: in particular, they must be case-insensitive,
and within DNS component length and total length restrictions.

So base58 and base64 are out.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhqCPAAoJEEUMun+WjwlLIN8QAMB61/XGEPwJlgaQvtR0h6X6
UWJZU2igeTBXWRtJm5/b4dlgSnZgH8Lwefksnm65A8SH1kIpsLNyisOiioyyMWzH
17WB2HW+kPpE2miKGT3Xntkm8XNa8e2ECm6q3CUAVRcvHlBPVDd1FriQnh3HacO2
W3btWqMKC9Jsq4Uv+1pXoXJDHyEYGqA6b7RzaA/+TrtdTfnu+4nEbp/zfwfdVEeI
0D97VxdXlZS0Glsv88Li7f6lJuyMHzJvoJMboiuKwNOVkaa8c0Cza+i5xF2wpz4C
sYg3euvJ41rxb77f6elbTfN5KVBpV5hOPwqsqp1W+oePSReh2njd9LYQus8CfZ4D
bM/XX1H+aZOYIK5Lncvui/EEeRADwzz7MpNLZ/9do8/FaWdKWYexdpcwfktf0juB
LC7d/kCKiU2IBJ3XyIEWm+ZJLfBo73/pahh88DsxJ5HXE2Q2GojSAh848F7k0xuN
cpPii+ZgY4NTE1Ow356c3GzV/PjxqPypZKWrl8k0n3T8CCd/4nYidY36GIVwypCO
4TaqUo6ZXBzEARWzUn9v1KA2fV7DQnWiMYrFohvzKS+TEBS2SDxG3UIFjb57NgfV
9z89PXhwJHtoGtd1akRorAJDLG8Wfcv2ehiudcWmjuU+ock4tm4cd1djkgOKofIh
Ee7pphYZ9ZejeSHGa+Dx
=fn6w
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124015121</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-01-24 01:51:21-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello George,

George Kadianakis wrote:
&gt; Hello list,
&gt; 
&gt; we've had discussions over the past years about how to encode prop224 onion
&gt; addresses. Here is the latest thread: \
&gt; https://lists.torproject.org/pipermail/tor-dev/2016-December/011734.html 
&gt; Bikeshedding is over; it's time to finally pick a scheme! My suggested scheme
&gt; basically follows from the discussion on that thread, and is heavily based on
&gt; the Bitcoin address format:
&gt; https://en.bitcoin.it/wiki/Base58Check_encoding
&gt; https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses
&gt; 
&gt; Here is the suggested scheme:
&gt; 
&gt; onion_address = base32(version + pubkey + checksum)
&gt; checksum = SHA3(".onion checksum" + version + pubkey)
&gt; 
&gt; where:
&gt; pubkey is 32 bytes (ed25519)
&gt; version is one byte
&gt; checksum is _truncated_ to two bytes
&gt; 
&gt; With the above construction onion_address ends up being 56 bytes long
&gt; (excluding the ".onion"):
&gt; 
&gt; tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4gg.onion
&gt; tcrdnadkefvbdm3u56kz6lfh6v5lr24fpog5vzsy4n3djr2ymueu34ws.onion
&gt; tcdw7lwmtp5pbwj2w7wf6amxdhmc62qitj2teu376r5s2fqke4r3uiq6.onion
&gt; 
&gt; If people like the above suggestion, I will take the effort to engrave it in
&gt; prop224.
&gt; 
&gt; Here is the discussion section. Please provide feedback!
&gt; 
&gt; [D1] How to use version field:
&gt; 
&gt; The version field is one byte long. If we use it as an integer we can
&gt; encode 256 values in it; if we use it as a bitmap we could encode
&gt; properties and such.
&gt; 
&gt; My suggestion is to simply use it as an integer like Bitcoin does. So we
&gt; can assign value \x01 to normal onion services, and in the future we can
&gt; assign more version tags if we need to. For example, we can give a
&gt; different version field to onion services in the testnet. We can also
&gt; reserve a range of values for application-specific purposes.
&gt; 
&gt; [D1.1] Default version value:
&gt; 
&gt; The next question is what version value to assign to normal onion
&gt; services. In the above scheme where:
&gt; 
&gt; onion_address = base32(version + pubkey + checksum)
&gt; 
&gt; the value of 'version' basically determines the first two characters of
&gt; the onion address. In Bitcoin, they've made it such that the default
&gt; version value basically prefixes addresses with "1"; so all normal
&gt; Bitcoin addresses start with 1 as in 14tDWDT9zqDufWZmiLqoaT9qJyHi7RRZPE
&gt; 
&gt; What should we do in Tor? My suggestion is to use '\x98' as the default
&gt; version value which prefixes all addresses with 't' (as in Tor).  Check
&gt; the examples I cited above.
&gt; 
&gt; An alternative is to turn the scheme to:
&gt; onion_address = base32(pubkey + checksum + version)
&gt; where the version byte is at the end with no effect at usability.
&gt; 
&gt; A heavier alternative would be to have two bytes of version so that we
&gt; can just prefix them all with 'tor'...
&gt; 

The version field is useful and allows room for much stuff that we might
need to do. I think it would be better to place it at the end of the
address. I don't think all addresses should start with the same prefix
tbh - this will make them slightly less distinguishable (as much as
possible users should be able to differentiate onion addresses, which
are re-usable for long term, as opposite to Bitcoin where the
recommended way is to use 1 address 1 time, different one every time and
the users just need to see a string that looks and reads like a Bitcoin
address and just make sure it's copied (scanned) from/to the right place).

&gt; [D2] Checksum strength:
&gt; 
&gt; In the suggested scheme we use a hash-based checksum of two bytes (16 bits).
&gt; This means that in case of an address typo, we have 1/65536 probability
&gt; to not detect the error (false negative). It also means that after 256
&gt; typos we will have 50% probability to miss an error (happy birthday!).
&gt; 
&gt; I feel like the above numbers are pretty good given the small checksum size.
&gt; 

Yes, the numbers are very good.

&gt; The alternative would be to make the checksum four bytes (like in
&gt; Bitcoin).  This would _greatly_ increase the strength of our checksum but
&gt; it would also increase our address length by 4 base32 characters (and
&gt; also force us to remove leading padding from base32 output). This is how
&gt; these 60-character addresses look like:
&gt; 
&gt; tc2dty3zowj6oyhbyb5n3a2h3luztlx22hy2cwdvn37omsv7quy7rxiysn3a.onion
&gt; tbdczrndtadzdhb6iyemnxf7f4i6x7yojnunarlrvt2virtmrecmwgx5golq.onion
&gt; tc6pcgyorusw3jj5tosxakmcwfmcend2q4g2qnbjtkhuuh4dcgvs4rl4rdaa.onion
&gt; 
&gt; You probably don't notice the size difference compared to the
&gt; 56-character addresses, which perhaps is an argument for adopting a four
&gt; byte checksum. Let me know what you think about this.
&gt; 

I don't think so. I think our best bet is a checksum of 2 bytes, this
offers sufficient strength for our use cases.

&gt; [D3] Do we like base32???
&gt; 
&gt; In this proposal I suggest we keep the base32 encoding since we've been
&gt; using it for a while; but this is the perfect time to switch if we feel
&gt; the need to.
&gt; 
&gt; For example, Bitcoin is using base58 which is much more compact than
&gt; base32, and also has much better UX properties than base64:
&gt; https://en.bitcoin.it/wiki/Base58Check_encoding#Background
&gt; 
&gt; If we wanted to get a more compact encoding, we could adopt base58 or
&gt; make our own adaptation of it. In this proposal I'm using base32 for
&gt; everything, but I could be persuaded that now is the time to use a better
&gt; encoding.
&gt; 
&gt; Let me know what you think!
&gt; 

When talking about &gt; 50 chars strings, I think memorizing is (for most
users at least) very hard, regardless if encoding is base58 or base32.
What I think is more important is that onion addresses should not
contain upper case and lower case characters, they should look as much
as possible like regular DNS hostnames. For this reason I would go for
base32 here.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124024747</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-01-24 02:47:47-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hey George,

Thanks for sending this and summarizing everything!

&gt; [D1] How to use version field:
&gt;
&gt;       The version field is one byte long. If we use it as an integer we can
&gt;       encode 256 values in it; if we use it as a bitmap we could encode
&gt;       properties and such.
&gt;
&gt;       My suggestion is to simply use it as an integer like Bitcoin does. So we
&gt;       can assign value \x01 to normal onion services, and in the future we can
&gt;       assign more version tags if we need to. For example, we can give a
&gt;       different version field to onion services in the testnet. We can also
&gt;       reserve a range of values for application-specific purposes.

Will hidden service addresses only encode a single version?

If yes to the above, only allowing a limited number of versions on the
network at a single time might be a good idea. Otherwise we run into the
dilemma where hidden service operators need to maintain and distribute
multiple addresses, and users need to understand what version their Tor
client supports (and potentially their friend's as as well, if they want
to share a HS link).

As s7r said, Bitcoin addresses are single user/single use [1], whereas
HS addresses are multiple user/multiple use. Because of this difference
in purpose/use, I would argue we'll need to consider circumstances such
as version incompatibility, upgrade path, longevity, etc more strongly
for HS addresses than for Bitcoin addresses.

The idea of supporting multiple versions in a HS address was discussed
earlier- is this still a viable scheme, or did the cons eventually
outweigh the pros for this?

&gt; [D1.1] Default version value:
&gt;
&gt;       The next question is what version value to assign to normal onion
&gt;       services. In the above scheme where:
&gt;
&gt;          onion_address = base32(version + pubkey + checksum)

It would be good to understand what the process of upgrading default
versions looks like, from both a client and hidden service operator
perspective.

Thanks, great work!
Chelsea

[1]
https://en.bitcoin.it/wiki/Address#A_Bitcoin_address_is_a_single-use_token

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124122743</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-24 12:27:43-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

s7r &lt;s7r@sky-ip.org&gt; writes:

&gt; Hello George,
&gt; 
&gt; George Kadianakis wrote:
&gt; &gt; Hello list,
&gt; &gt; 
&gt; &gt; we've had discussions over the past years about how to encode prop224 onion
&gt; &gt; addresses. Here is the latest thread: \
&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2016-December/011734.html 
&gt; &gt; Bikeshedding is over; it's time to finally pick a scheme! My suggested scheme
&gt; &gt; 
&gt; &gt; &lt;snip&gt;
&gt; &gt; 
&gt; 
&gt; The version field is useful and allows room for much stuff that we might
&gt; need to do. I think it would be better to place it at the end of the
&gt; address. I don't think all addresses should start with the same prefix
&gt; tbh - this will make them slightly less distinguishable (as much as
&gt; possible users should be able to differentiate onion addresses, which
&gt; are re-usable for long term, as opposite to Bitcoin where the
&gt; recommended way is to use 1 address 1 time, different one every time and
&gt; the users just need to see a string that looks and reads like a Bitcoin
&gt; address and just make sure it's copied (scanned) from/to the right place).
&gt; 

OK thanks for the useful discussion. I identified at least three feedback points:

+ Screw base58 it's not gonna work. We stick to base32. Usability will
  be "restored" with a proper name system.

+ Move version byte to the end of the address to avoid constant
  prefix. Moving version byte to the middle as teor suggested would
  cause forward-compatibility issues.

+ My checksum calculations were wrong. Checksum is strong! 2 bytes are enough.

And given the above, here is the new microproposal:

  onion_address = base32(pubkey || checksum || version)
  checksum = SHA3(".onion checksum" || pubkey || version)

  where:
       pubkey is 32 bytes ed25519 pubkey
       version is one byte (default value for prop224: '\x03')
       checksum hash is truncated to two bytes

  Here are a few example addresses (with broken checksum):

       l5satjgud6gucryazcyvyvhuxhr74u6ygigiuyixe3a6ysis67ororad.onion
       btojiu7nu5y5iwut64eufevogqdw4wmqzugnoluw232r4t3ecsfv37ad.onion
       vckjr6bpchiahzhmtzslnl477hdfvwhzw7dmymz3s5lp64mwf6wfeqad.onion
  
  Checksum strength: The checksum has a false negative rate of 1/65536.

  Address handling: Clients handling onion addresses first parse the
  version field, then extract pubkey, then verify checksum.

Let me know how you feel about this one. If people like it I will
transcribe it to prop224.

Thanks again Ivan, Ian, Linda, teor, s7r, Chelsea :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124123602</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-24 12:36:02-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

chelsea komlo &lt;me@chelseakomlo.com&gt; writes:

&gt; Hey George,
&gt;
&gt; Thanks for sending this and summarizing everything!
&gt;
&gt;&gt; [D1] How to use version field:
&gt;&gt;
&gt;&gt;       The version field is one byte long. If we use it as an integer we can
&gt;&gt;       encode 256 values in it; if we use it as a bitmap we could encode
&gt;&gt;       properties and such.
&gt;&gt;
&gt;&gt;       My suggestion is to simply use it as an integer like Bitcoin does. So we
&gt;&gt;       can assign value \x01 to normal onion services, and in the future we can
&gt;&gt;       assign more version tags if we need to. For example, we can give a
&gt;&gt;       different version field to onion services in the testnet. We can also
&gt;&gt;       reserve a range of values for application-specific purposes.
&gt;
&gt; Will hidden service addresses only encode a single version?
&gt;
&gt; If yes to the above, only allowing a limited number of versions on the
&gt; network at a single time might be a good idea. Otherwise we run into the
&gt; dilemma where hidden service operators need to maintain and distribute
&gt; multiple addresses, and users need to understand what version their Tor
&gt; client supports (and potentially their friend's as as well, if they want
&gt; to share a HS link).
&gt;
&gt; As s7r said, Bitcoin addresses are single user/single use [1], whereas
&gt; HS addresses are multiple user/multiple use. Because of this difference
&gt; in purpose/use, I would argue we'll need to consider circumstances such
&gt; as version incompatibility, upgrade path, longevity, etc more strongly
&gt; for HS addresses than for Bitcoin addresses.
&gt;
&gt; The idea of supporting multiple versions in a HS address was discussed
&gt; earlier- is this still a viable scheme, or did the cons eventually
&gt; outweigh the pros for this?
&gt;

Hey Chelsea,

while writing the proposal, I felt like supporting multiple versions in
the version field would be more trouble than worth it. I also dislike
the fact that multiple addresses could then represent the same public
key.

Also, I doubt we will ever reach the point where we have multiple HS
versions existing simultaneously in our network that can also share the
same onion address.  This time, we will have two versions, the legacy
onion services and prop224; and their addresses are definitely incompatible.

Worst case, if the need for this becomes apparent at some point, we can
abuse the integer valued version field to encode such information (hey,
we have 256 values after all). Or perhaps this is the best case since it
means that the hidden service protocol has evolved a lot...

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124124000</emailId><senderName>segfault</senderName><senderEmail>segfault@riseup.net</senderEmail><timestampReceived>2017-01-24 12:40:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hi George,

George Kadianakis:
[...]
&gt; [D3] Do we like base32???
&gt; 
&gt;       In this proposal I suggest we keep the base32 encoding since we've been
&gt;       using it for a while; but this is the perfect time to switch if we feel
&gt;       the need to.
&gt; 
&gt;       For example, Bitcoin is using base58 which is much more compact than
&gt;       base32, and also has much better UX properties than base64:
&gt;          https://en.bitcoin.it/wiki/Base58Check_encoding#Background
&gt; 
&gt;       If we wanted to get a more compact encoding, we could adopt base58 or
&gt;       make our own adaptation of it. In this proposal I'm using base32 for
&gt;       everything, but I could be persuaded that now is the time to use a better
&gt;       encoding.
While the addresses are definitely too long to be fun to type, there are
still use cases where the addresses will be typed. So I think we should
consider everything which would make them easier to type and compare. 
Like others stated, base58 will not make the addresses easier to type, 
because they would be case sensitive.

But maybe it would help to separate them into groups of 4 characters,
separated maybe by a dash, which would make them look like this:

    tbi5-tdxb-osio-tpha-wjyu-7f5p-w5tl-nvbv-fjrj-7mes-kbsn-wr2b-qbu2-t4gg.onion


Cheers
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124140055</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-24 14:00:55-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


On 24 Jan (14:27:43), George Kadianakis wrote:
&gt; s7r &lt;s7r@sky-ip.org&gt; writes:
&gt; 
&gt; &gt; Hello George,
&gt; &gt; 
&gt; &gt; George Kadianakis wrote:
&gt; &gt; &gt; Hello list,
&gt; &gt; &gt; 
&gt; &gt; &gt; we've had discussions over the past years about how to encode prop224 onion
&gt; &gt; &gt; addresses. Here is the latest thread: \
&gt; &gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2016-December/011734.html 
&gt; &gt; &gt; Bikeshedding is over; it's time to finally pick a scheme! My suggested scheme
&gt; &gt; &gt; 
&gt; &gt; &gt; &lt;snip&gt;
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; The version field is useful and allows room for much stuff that we might
&gt; &gt; need to do. I think it would be better to place it at the end of the
&gt; &gt; address. I don't think all addresses should start with the same prefix
&gt; &gt; tbh - this will make them slightly less distinguishable (as much as
&gt; &gt; possible users should be able to differentiate onion addresses, which
&gt; &gt; are re-usable for long term, as opposite to Bitcoin where the
&gt; &gt; recommended way is to use 1 address 1 time, different one every time and
&gt; &gt; the users just need to see a string that looks and reads like a Bitcoin
&gt; &gt; address and just make sure it's copied (scanned) from/to the right place).
&gt; &gt; 
&gt; 
&gt; OK thanks for the useful discussion. I identified at least three feedback points:
&gt; 
&gt; + Screw base58 it's not gonna work. We stick to base32. Usability will
&gt; be "restored" with a proper name system.
&gt; 
&gt; + Move version byte to the end of the address to avoid constant
&gt; prefix. Moving version byte to the middle as teor suggested would
&gt; cause forward-compatibility issues.
&gt; 
&gt; + My checksum calculations were wrong. Checksum is strong! 2 bytes are enough.
&gt; 
&gt; And given the above, here is the new microproposal:
&gt; 
&gt; onion_address = base32(pubkey || checksum || version)
&gt; checksum = SHA3(".onion checksum" || pubkey || version)
&gt; 
&gt; where:
&gt; pubkey is 32 bytes ed25519 pubkey
&gt; version is one byte (default value for prop224: '\x03')
&gt; checksum hash is truncated to two bytes
&gt; 
&gt; Here are a few example addresses (with broken checksum):
&gt; 
&gt; l5satjgud6gucryazcyvyvhuxhr74u6ygigiuyixe3a6ysis67ororad.onion
&gt; btojiu7nu5y5iwut64eufevogqdw4wmqzugnoluw232r4t3ecsfv37ad.onion
&gt; vckjr6bpchiahzhmtzslnl477hdfvwhzw7dmymz3s5lp64mwf6wfeqad.onion
&gt; 
&gt; Checksum strength: The checksum has a false negative rate of 1/65536.
&gt; 
&gt; Address handling: Clients handling onion addresses first parse the
&gt; version field, then extract pubkey, then verify checksum.
&gt; 
&gt; Let me know how you feel about this one. If people like it I will
&gt; transcribe it to prop224.

I like this quite a bit! Simple, easy, and trivial to understand. 56
characters address, after that it will be the time to improve UX/UI with all
sorts of possible tricks to make them easier to remember or copy paste or
visualize or what not.

Unless some feedback NACK this, I say push that in the proposal soon. I'll
personally start implementing that scheme this week.

Thanks!
David

&gt; 
&gt; Thanks again Ivan, Ian, Linda, teor, s7r, Chelsea :)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
roxgbXXp4m276fgnLQpnruSx0I3Gz71Mfnx0ButjTVU=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124170241</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-01-24 17:02:41-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

   Date: Tue, 24 Jan 2017 12:40:00 +0000
   From: segfault &lt;segfault@riseup.net&gt;

   But maybe it would help to separate them into groups of 4 characters,
   separated maybe by a dash, which would make them look like this:

       tbi5-tdxb-osio-tpha-wjyu-7f5p-w5tl-nvbv-fjrj-7mes-kbsn-wr2b-qbu2-t4gg.onion

This exceeds the maximum length of a DNS label, 63 octets[1].  One
could use larger groups to avoid that, of course -- e.g., with eight
octets per group you get down to 62:

tbi5tdxb-osiotpha-wjyu7f5p-w5tlnvbv-fjrj7mes-kbsnwr2b-qbu2t4gg.onion


[1] P. Mockapetris, `Domain Names - Concepts and Facilities',
RFC 1034, IETF, 1987, Sec. 3.1 `Name space specifications and
terminology', p. 7.
https://www.ietf.org/rfc/rfc1034.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124171555</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-01-24 17:15:55-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Tue, Jan 24, 2017 at 12:40:00PM +0000, segfault wrote:
&gt; But maybe it would help to separate them into groups of 4 characters,
&gt; separated maybe by a dash, which would make them look like this:
&gt; 
&gt;     tbi5-tdxb-osio-tpha-wjyu-7f5p-w5tl-nvbv-fjrj-7mes-kbsn-wr2b-qbu2-t4gg.onion

Check out https://trac.torproject.org/projects/tor/ticket/15622
for more discussion of this idea.

I think the main problem with it is that we'd have to pick, and stick
to, a particular format. The "let people add hyphens wherever they think
it improves usability for them" option has all sorts of unexpected side
effects when client-side apps accidentally reveal the hyphenation choice.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124181518</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-01-24 18:15:18-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Tue, 24 Jan 2017 12:40:00 +0000, segfault wrote:
...
&gt; While the addresses are definitely too long to be fun to type, there are
&gt; still use cases where the addresses will be typed.

For those cases you could print them with half-spaces or similar.
You can even type them but need to remove them before actually pressing
enter. Side effects, like the address being searched for, ensue.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170127150941</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-27 15:09:41-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


On 27 Jan (09:04:51), chelsea komlo wrote:
&gt; Hello!
&gt; 
&gt; I have some more thoughts on versioning, specifically in regards to the
&gt; possibility of not including the version in the onion address and using
&gt; only the version field in the descriptor.
&gt; 
&gt; I'm not able to write out these scenarios now but I will do this in the
&gt; next day. Thanks for making last call!

Here is some extra pressure for you ;).

The HSDir fetch/post URL has gone in 0.3.0 (feature freeze today in theory ;)
with the version in it:

    --&gt; /tor/hs/&lt;version&gt;/publish

So few things. First, if we don't have the version in the onion address, this
means the client needs to try to fetch the descriptor for multiple version
that is starting at the highest it knows and then going down as it's failing.
That, I'm really not too keen to this, uneeded load on the network.

Second thing is that HSDir might not all support the same version by the time
we roll out prop224 thus the importance of having it in 0.3.0 (a version
*before* the next gen release). Even with that, this is going to be an
interesting experiement to have a set of HSDir supporting v3 and a set not
supporting it because we kind of have this requirement of using 3 nearest
relays for a replica but what if one of them doesn't support v3?

Third thing, we could have a fix for this with a single descriptor supporting
multiple version but then this has implication outside the onion address
discussion and unfortunately 0.3.0 material again (that freezes today).

So I'm eager to hear your idea on this! But it's important to keep in mind
that 0.3.0 has already some building blocks with some version restrictions :S.
Changing those would mean delaying adoption by a 6 months (and it could be
OK!).

Thanks!
David

&gt; 
&gt; Chelsea
&gt; 
&gt; 
&gt; On 01/27/2017 08:09 AM, George Kadianakis wrote:
&gt; &gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; On 24 Jan (14:27:43), George Kadianakis wrote:
&gt; &gt; &gt; &gt; s7r &lt;s7r@sky-ip.org&gt; writes:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &lt;snip&gt;
&gt; &gt; &gt; I like this quite a bit! Simple, easy, and trivial to understand. 56
&gt; &gt; &gt; characters address, after that it will be the time to improve UX/UI with all
&gt; &gt; &gt; sorts of possible tricks to make them easier to remember or copy paste or
&gt; &gt; &gt; visualize or what not.
&gt; &gt; &gt; 
&gt; &gt; &gt; Unless some feedback NACK this, I say push that in the proposal soon. I'll
&gt; &gt; &gt; personally start implementing that scheme this week.
&gt; &gt; &gt; 
&gt; &gt; &gt; Thanks!
&gt; &gt; &gt; David
&gt; &gt; &gt; 
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; I made a torspec branch that alters prop224 accordingly:
&gt; &gt; https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95
&gt; &gt;  
&gt; &gt; I will merge this to torspec RSN if I don't hear any grave objections.
&gt; &gt; 
&gt; &gt; Cheers!
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 

-- 
4lcjj+AhsleqJZQFfBojoNAIyPbpK6NoCJjCKxAzWoA=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128052504</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-01-28 05:25:04-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hey!

&gt; Here is some extra pressure for you ;).

:) thanks, I will try!

Before starting, someone today very kindly pointed me to Prop 271, the
naming system API for Tor Onion services. Overall, my larger concern is
whether adding the version in the onion address makes both using and
distributing onion addresses harder. If the long-term plan is for onion
addresses to not be used directly, then having the version in the onion
address is completely fine as this wouldn't present a barrier to entry
for end users.

&gt;
&gt; The HSDir fetch/post URL has gone in 0.3.0 (feature freeze today in theory ;)
&gt; with the version in it:
&gt;
&gt;     --&gt; /tor/hs/&lt;version&gt;/publish
&gt;
&gt; So few things. First, if we don't have the version in the onion address, this
&gt; means the client needs to try to fetch the descriptor for multiple version
&gt; that is starting at the highest it knows and then going down as it's failing.
&gt; That, I'm really not too keen to this, uneeded load on the network.

Yep, fair. So the idea of "fetch multiple descriptors, where a
descriptor is for a single version," isn't viable for performance reasons.
 
&gt;
&gt; Second thing is that HSDir might not all support the same version by the time
&gt; we roll out prop224 thus the importance of having it in 0.3.0 (a version
&gt; *before* the next gen release). Even with that, this is going to be an
&gt; interesting experiement to have a set of HSDir supporting v3 and a set not
&gt; supporting it because we kind of have this requirement of using 3 nearest
&gt; relays for a replica but what if one of them doesn't support v3?

Yeah, that is hard. Although I'm not entirely sure how this complexity
is correlated with how the client consumes the HS version...

&gt; Third thing, we could have a fix for this with a single descriptor supporting
&gt; multiple version but then this has implication outside the onion address
&gt; discussion and unfortunately 0.3.0 material again (that freezes today).
&gt;
&gt; So I'm eager to hear your idea on this! But it's important to keep in mind
&gt; that 0.3.0 has already some building blocks with some version restrictions :S.
&gt; Changing those would mean delaying adoption by a 6 months (and it could be
&gt; OK!).

Yeah! So if the plan is that onion addresses will not be used directly
by end users and there is an abstraction layer that hides things like
version upgrade from end users, then going ahead with the current plan
sounds good.

However, if there is a chance that end users will consume onion
addresses directly, then having this discussion seems like a good idea.
The scenario that worries me is something like this:

1) Facebook creates a hidden service and distributes this address
2) A new hidden service version is created
3) Facebook is reluctant to upgrade because this would mean
re-distributing a new onion address to a _lot_ of people. Also, there
are problems of securely distributing and verifying new onion addresses-
malicious parties could use this opportunity to distribute lookalikes,
for example.

When we upgrade key primitives (such as when we move to a PQ scheme),
then it will definitely be necessary for HS operators to re-distribute
addresses. However, minimizing the need for addresses to change will
lower the barrier to use/operate hidden services.

If you think it is worth pursuing this discussion, I can start a new
thread to discuss this further. One idea that seems viable is for
descriptors to specify multiple supported HS versions (taking into
account the points you and George have already made). In short, the
scheme could be something like this:

1) An onion address is represented by base32(pub_key || checksum)    
2) A descriptor specifies a list of versions supported by the HS with
that address (a descriptor can represent only one address/public key but
multiple versions)
3) The client selects the highest available version supported

The proposed change to section 2.2.6 in prop 224 (URLS for anonymous
uploading and downloading) would be for the publish URL to be HTTP POST
to /tor/hs/publish, and HTTP GET to /tor/hs/&lt;z&gt;, where &lt;z&gt; is a base64
encoding of the hidden service's blinded public key. This would also
mean that HSDir code won't need to change when new versions are added.

But again, this change probably isn't necessary if onion addresses will
live below an abstraction layer!

I apologize if this isn't good timing with feature freezes- I'll follow
your lead with this!
Chelsea

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170128151600</emailId><senderName>segfault</senderName><senderEmail>segfault@riseup.net</senderEmail><timestampReceived>2017-01-28 15:16:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hi,

chelsea komlo:
&gt; So if the plan is that onion addresses will not be used directly
&gt; by end users and there is an abstraction layer that hides things like
&gt; version upgrade from end users, then going ahead with the current plan
&gt; sounds good.
&gt; 
&gt; However, if there is a chance that end users will consume onion
&gt; addresses directly, then having this discussion seems like a good idea.
&gt; The scenario that worries me is something like this:
&gt; 
&gt; 1) Facebook creates a hidden service and distributes this address
&gt; 2) A new hidden service version is created
&gt; 3) Facebook is reluctant to upgrade because this would mean
&gt; re-distributing a new onion address to a _lot_ of people. Also, there
&gt; are problems of securely distributing and verifying new onion addresses-
&gt; malicious parties could use this opportunity to distribute lookalikes,
&gt; for example.
&gt; 
&gt; When we upgrade key primitives (such as when we move to a PQ scheme),
&gt; then it will definitely be necessary for HS operators to re-distribute
&gt; addresses. However, minimizing the need for addresses to change will
&gt; lower the barrier to use/operate hidden services.

I share your concerns here. I think we could work around this by pulling
the version byte out of the base32 encoding, like this:

  onion_address = base32(pubkey + checksum) + "-" + version

This would result in onion addresses like this:

  tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-1.onion

If the HS version changes to version 2, the onion address would only
change in the version char:

  tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-2.onion

This way onion service operators can keep their onion address prefix and
users can verify that the new address uses the same public key as the
address of the previous version.

What do you think about this?

Cheers
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170128154300</emailId><senderName>segfault</senderName><senderEmail>segfault@riseup.net</senderEmail><timestampReceived>2017-01-28 15:43:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hi,

s7r:
&gt; I wouldn't go for the hypens, but even if we decide at a later point
&gt; that this was a good idea we can handle it at an upper layer, like with
&gt; a browser tool or something, it's outside the scope of this
&gt; microproposal. We all know only a naming system will really fix this
&gt; issue from all points of view, so let's stick to that.

I don't think a naming system can fix this issue from all points of
view. There will always be use cases where a naming system can't be
used, like short-lived, non-public onion services, created for example
with OnionShare or Tails Server. There are cases where there is no
secure channel pre-established between the server and the client, so the
onion address is exchanged in person, by reading it of the screen or
writing it on a sheet of paper. Or there is a secure channel established
on another device, for example Signal on the users' phones. Then they
would still have to type the onion address.

Also, a browser is not the only client accessing onion services. I would
like some more appreciation of the fact that not all onion services are
publicly accessible web services.

Cheers
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170128171924</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-01-28 17:19:24-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hey,


On 01/28/2017 10:16 AM, segfault wrote:
&gt; I share your concerns here. I think we could work around this by pulling
&gt; the version byte out of the base32 encoding, like this:
&gt;
&gt;   onion_address = base32(pubkey + checksum) + "-" + version
&gt;
&gt; This would result in onion addresses like this:
&gt;
&gt;   tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-1.onion
&gt;
&gt; If the HS version changes to version 2, the onion address would only
&gt; change in the version char:
&gt;
&gt;   tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-2.onion
&gt;
&gt; This way onion service operators can keep their onion address prefix and
&gt; users can verify that the new address uses the same public key as the
&gt; address of the previous version.
&gt;
&gt; What do you think about this? 

I think this is could be an option if the HS version is needed in the
client request when fetching the descriptor from the HSDir. It is my
understanding that the HS version is already encoded in the descriptor,
so theoretically the version can be removed from the client request
entirely.

The scheme you describe above still may have distribution problems, and
possibly still puts responsibility on the end user. For example, say the
following happens:

1. Tor releases HS version 5 (a new version)
2. The New York Times HS has not yet upgraded, and remains on version 4
for a period of time.

As a Tor client, how do I know whether to use

tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-4.onion
or
tbi5tdxbosiotphawjyu7f5pw5tlnvbvfjrj7meskbsnwr2bqbu2t4g-5.onion

? Either my Tor client can try version 5 by default (the highest version
supported) and then fall back to version 4, or it can be the
responsibility of the end user to check whether the New York Times has
upgraded. Both of these scenarios are prone to error, and the second is
difficult to scale. If we can leave out the HS version from the client
request and publish HS versions only in the descriptor,  it seems like
these issues could be mitigated.

Let me know what you think, or if the above scenarios can be mitigated
in other ways.
Chelsea



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130030148</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-30 03:01:48-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Skimming thread...

Version or not is fine, provided if you want versions you
know you must store the bits somewhere, or ensure regex
parser rules to recognize and match an intrinsic version
represented by entire address format specification itself.

Note onion search spiders rely on such address recognition
and parsing. So it's not all just about the browser brain urlbar.

GPU capacity hasn't hit 16 char yet, mnemonic
brain memory has, but that's only happened based on
address luck and/or GPU prefixing. We're more or less
at the limits, new random bits past 16 won't matter and
shouldn't be considered much an argument to brain relavance.
Some other brain layer will come along, and if not, there's
always search.

If version goes in address, I'd wary against putting it last.
A lot of things naturally sort and route and default based
on higher order bits appear prefixing on the left.. IPv4 IPv6
bitcoin PTR DHT filesystem unix tools... the list goes on.
A single leading character is not a problem and gives
plenty of bits of version capacity regardless of encoding.
Trailing version just plain feels shaky to rely on or to
advocate to the world as a new standard. Certainly
not without consultation with other anonymous overlay
projects as to their future needs and direction as well,
or to develop such an interop standard.

At least until bumping against DNS length limitations,
all lower case should be obvious, without symbolics,
without nonprintables, etc.
Try to stick to most common compatible [a-z0-9]
or less unless forced otherwise.

Don't try to create new parsing headaches for application
authors / porters to work around who might already
be using rather basic charsets and routines with
existing protocols.

Whatever works.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130122855</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-30 12:28:55-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion	addresses</subject><body>

grarpamp &lt;grarpamp@gmail.com&gt; writes:

&gt; Skimming thread...
&gt;
&gt; Version or not is fine, provided if you want versions you
&gt; know you must store the bits somewhere, or ensure regex
&gt; parser rules to recognize and match an intrinsic version
&gt; represented by entire address format specification itself.
&gt;
&gt; Note onion search spiders rely on such address recognition
&gt; and parsing. So it's not all just about the browser brain urlbar.
&gt;
&gt; GPU capacity hasn't hit 16 char yet, mnemonic
&gt; brain memory has, but that's only happened based on
&gt; address luck and/or GPU prefixing. We're more or less
&gt; at the limits, new random bits past 16 won't matter and
&gt; shouldn't be considered much an argument to brain relavance.
&gt; Some other brain layer will come along, and if not, there's
&gt; always search.
&gt;
&gt; If version goes in address, I'd wary against putting it last.
&gt; A lot of things naturally sort and route and default based
&gt; on higher order bits appear prefixing on the left.. IPv4 IPv6
&gt; bitcoin PTR DHT filesystem unix tools... the list goes on.
&gt; A single leading character is not a problem and gives
&gt; plenty of bits of version capacity regardless of encoding.
&gt; Trailing version just plain feels shaky to rely on or to
&gt; advocate to the world as a new standard. Certainly
&gt; not without consultation with other anonymous overlay
&gt; projects as to their future needs and direction as well,
&gt; or to develop such an interop standard.
&gt;

Hm, can you please expand on this? I think I understood none of your arguments.

What's the problem with version field being in the end and tools sorting
addresses based on higher order bits? Also why does version field being
in the end makes it shaky to rely on?





_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130125029</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-30 12:50:29-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

chelsea komlo &lt;me@chelseakomlo.com&gt; writes:

&gt; Hey!
&gt;
&gt;&gt; Here is some extra pressure for you ;).
&gt;
&gt; :) thanks, I will try!
&gt;
&gt; Before starting, someone today very kindly pointed me to Prop 271, the
&gt; naming system API for Tor Onion services. Overall, my larger concern is
&gt; whether adding the version in the onion address makes both using and
&gt; distributing onion addresses harder. If the long-term plan is for onion
&gt; addresses to not be used directly, then having the version in the onion
&gt; address is completely fine as this wouldn't present a barrier to entry
&gt; for end users.
&gt;
&gt;&gt;
&gt;&gt; The HSDir fetch/post URL has gone in 0.3.0 (feature freeze today in theory ;)
&gt;&gt; with the version in it:
&gt;&gt;
&gt;&gt;     --&gt; /tor/hs/&lt;version&gt;/publish
&gt;&gt;
&gt;&gt; So few things. First, if we don't have the version in the onion address, this
&gt;&gt; means the client needs to try to fetch the descriptor for multiple version
&gt;&gt; that is starting at the highest it knows and then going down as it's failing.
&gt;&gt; That, I'm really not too keen to this, uneeded load on the network.
&gt;
&gt; Yep, fair. So the idea of "fetch multiple descriptors, where a
&gt; descriptor is for a single version," isn't viable for performance reasons.
&gt;  
&gt;&gt;
&gt;&gt; Second thing is that HSDir might not all support the same version by the time
&gt;&gt; we roll out prop224 thus the importance of having it in 0.3.0 (a version
&gt;&gt; *before* the next gen release). Even with that, this is going to be an
&gt;&gt; interesting experiement to have a set of HSDir supporting v3 and a set not
&gt;&gt; supporting it because we kind of have this requirement of using 3 nearest
&gt;&gt; relays for a replica but what if one of them doesn't support v3?
&gt;
&gt; Yeah, that is hard. Although I'm not entirely sure how this complexity
&gt; is correlated with how the client consumes the HS version...
&gt;
&gt;&gt; Third thing, we could have a fix for this with a single descriptor supporting
&gt;&gt; multiple version but then this has implication outside the onion address
&gt;&gt; discussion and unfortunately 0.3.0 material again (that freezes today).
&gt;&gt;
&gt;&gt; So I'm eager to hear your idea on this! But it's important to keep in mind
&gt;&gt; that 0.3.0 has already some building blocks with some version restrictions :S.
&gt;&gt; Changing those would mean delaying adoption by a 6 months (and it could be
&gt;&gt; OK!).
&gt;
&gt; Yeah! So if the plan is that onion addresses will not be used directly
&gt; by end users and there is an abstraction layer that hides things like
&gt; version upgrade from end users, then going ahead with the current plan
&gt; sounds good.
&gt;
&gt; However, if there is a chance that end users will consume onion
&gt; addresses directly, then having this discussion seems like a good idea.
&gt; The scenario that worries me is something like this:
&gt;
&gt; 1) Facebook creates a hidden service and distributes this address
&gt; 2) A new hidden service version is created
&gt; 3) Facebook is reluctant to upgrade because this would mean
&gt; re-distributing a new onion address to a _lot_ of people. Also, there
&gt; are problems of securely distributing and verifying new onion addresses-
&gt; malicious parties could use this opportunity to distribute lookalikes,
&gt; for example.
&gt;

Hmm, on the above scenario, why would Tor change the version of the
onion address if the pubkey and checksum algorithm do not change? The
way I see it, the main scenario where we bump the onion address version
is if we upgrade the cryptosystem of the identity key or the checksum
algorithm. In that case, Facebook will have to migrate to another
address anyhow, so moving the version field to the HSDir layer does not
really help.

Furthermore, as David said, HS descriptors do have a version field
anyway, so we can always take version-specific decisions on the HSDir
layer without changing the onion address.

Finally, keeping a version field on the onion address, lets clients take
version-specific decisions _before_ contacting HSDirs, which is not
possible right now. The use of this is not obvious to me at this point,
but I'm sure that onion service applications can find some use. Or
it can be used by hidden services that want their clients to use an
alternative HSDir hash ring logic (e.g. increase or decrease the default
number of responsible HSDirs) by encoding this info in the version field.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130150538</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-30 15:05:38-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


On 28 Jan (00:25:04), chelsea komlo wrote:
&gt; Hey!
&gt; 
&gt; &gt; Here is some extra pressure for you ;).
&gt; 
&gt; :) thanks, I will try!
&gt; 
&gt; Before starting, someone today very kindly pointed me to Prop 271, the
&gt; naming system API for Tor Onion services. Overall, my larger concern is
&gt; whether adding the version in the onion address makes both using and
&gt; distributing onion addresses harder. If the long-term plan is for onion
&gt; addresses to not be used directly, then having the version in the onion
&gt; address is completely fine as this wouldn't present a barrier to entry
&gt; for end users.
&gt; 
&gt; &gt;
&gt; &gt; The HSDir fetch/post URL has gone in 0.3.0 (feature freeze today in theory ;)
&gt; &gt; with the version in it:
&gt; &gt;
&gt; &gt;     --&gt; /tor/hs/&lt;version&gt;/publish
&gt; &gt;
&gt; &gt; So few things. First, if we don't have the version in the onion address, this
&gt; &gt; means the client needs to try to fetch the descriptor for multiple version
&gt; &gt; that is starting at the highest it knows and then going down as it's failing.
&gt; &gt; That, I'm really not too keen to this, uneeded load on the network.
&gt; 
&gt; Yep, fair. So the idea of "fetch multiple descriptors, where a
&gt; descriptor is for a single version," isn't viable for performance reasons.
&gt;  
&gt; &gt;
&gt; &gt; Second thing is that HSDir might not all support the same version by the time
&gt; &gt; we roll out prop224 thus the importance of having it in 0.3.0 (a version
&gt; &gt; *before* the next gen release). Even with that, this is going to be an
&gt; &gt; interesting experiement to have a set of HSDir supporting v3 and a set not
&gt; &gt; supporting it because we kind of have this requirement of using 3 nearest
&gt; &gt; relays for a replica but what if one of them doesn't support v3?
&gt; 
&gt; Yeah, that is hard. Although I'm not entirely sure how this complexity
&gt; is correlated with how the client consumes the HS version...
&gt; 
&gt; &gt; Third thing, we could have a fix for this with a single descriptor supporting
&gt; &gt; multiple version but then this has implication outside the onion address
&gt; &gt; discussion and unfortunately 0.3.0 material again (that freezes today).
&gt; &gt;
&gt; &gt; So I'm eager to hear your idea on this! But it's important to keep in mind
&gt; &gt; that 0.3.0 has already some building blocks with some version restrictions :S.
&gt; &gt; Changing those would mean delaying adoption by a 6 months (and it could be
&gt; &gt; OK!).
&gt; 
&gt; Yeah! So if the plan is that onion addresses will not be used directly
&gt; by end users and there is an abstraction layer that hides things like
&gt; version upgrade from end users, then going ahead with the current plan
&gt; sounds good.
&gt; 
&gt; However, if there is a chance that end users will consume onion
&gt; addresses directly, then having this discussion seems like a good idea.
&gt; The scenario that worries me is something like this:
&gt; 
&gt; 1) Facebook creates a hidden service and distributes this address
&gt; 2) A new hidden service version is created
&gt; 3) Facebook is reluctant to upgrade because this would mean
&gt; re-distributing a new onion address to a _lot_ of people. Also, there
&gt; are problems of securely distributing and verifying new onion addresses-
&gt; malicious parties could use this opportunity to distribute lookalikes,
&gt; for example.
&gt; 
&gt; When we upgrade key primitives (such as when we move to a PQ scheme),
&gt; then it will definitely be necessary for HS operators to re-distribute
&gt; addresses. However, minimizing the need for addresses to change will
&gt; lower the barrier to use/operate hidden services.
&gt; 
&gt; If you think it is worth pursuing this discussion, I can start a new
&gt; thread to discuss this further. One idea that seems viable is for
&gt; descriptors to specify multiple supported HS versions (taking into
&gt; account the points you and George have already made). In short, the
&gt; scheme could be something like this:
&gt; 
&gt; 1) An onion address is represented by base32(pub_key || checksum)    
&gt; 2) A descriptor specifies a list of versions supported by the HS with
&gt; that address (a descriptor can represent only one address/public key but
&gt; multiple versions)
&gt; 3) The client selects the highest available version supported
&gt; 
&gt; The proposed change to section 2.2.6 in prop 224 (URLS for anonymous
&gt; uploading and downloading) would be for the publish URL to be HTTP POST
&gt; to /tor/hs/publish, and HTTP GET to /tor/hs/&lt;z&gt;, where &lt;z&gt; is a base64
&gt; encoding of the hidden service's blinded public key. This would also
&gt; mean that HSDir code won't need to change when new versions are added.

Quick follow up after George's response. This scheme doesn't work if the
protocol is changed with new crypto. Today we use ed25519 blinded keys but
tomorrow we could be in a PQ world so we are kind of putting ourself in a bad
position with this URL scheme and would have to change more things HSDIr side
at next version.

I do like the idea of "if we version++, how can we provide a way to not have
the onion address to change" but imo I think that the day we'll move to v4, it
will _most_ likely be for new crypto like George mentionned changing the
address.

Finally, for a client to *not* know the version also prevents us to act
*before* any fetch is done client side (again like George said). HSDir fetch
is one thing but if we ever implement the Name Transport Plugin idea for
instance, it will be extremely valuable imo that we can extract the version
protocol from the onion there. That's one of the few things that can happen
pre-fetch. It could be that at version X, client needs to do some extra steps
before fetching the descriptor for instance. Etc...

Thanks for the feedback!
David

&gt; 
&gt; But again, this change probably isn't necessary if onion addresses will
&gt; live below an abstraction layer!
&gt; 
&gt; I apologize if this isn't good timing with feature freezes- I'll follow
&gt; your lead with this!
&gt; Chelsea
&gt; 

-- 
IOA3vUozzhhCnEz3vEUUkbz+AJwvgSYAkuxkheMCHHA=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130212411</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-01-30 21:24:11-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Hi,

George Kadianakis wrote:
&gt; I made a torspec branch that alters prop224 accordingly:
&gt; https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95
&gt; 

It seems that SHA3 digest length is missing for onion address
generation. I guess (?) that it supposed to be SHA3-256 but it
definitely should be specified here.
I think that it just a typo since there is definition of H() above.

Thanks,
--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130233427</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-01-30 23:34:27-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Tue, Jan 24, 2017 at 02:27:43PM +0200, George Kadianakis wrote:
&gt; And given the above, here is the new microproposal:
&gt; 
&gt; onion_address = base32(pubkey || checksum || version)
&gt; checksum = SHA3(".onion checksum" || pubkey || version)
&gt; 
&gt; where:
&gt; pubkey is 32 bytes ed25519 pubkey
&gt; version is one byte (default value for prop224: '\x03')
&gt; checksum hash is truncated to two bytes
&gt; 
&gt; Here are a few example addresses (with broken checksum):
&gt; 
&gt; l5satjgud6gucryazcyvyvhuxhr74u6ygigiuyixe3a6ysis67ororad.onion
&gt; btojiu7nu5y5iwut64eufevogqdw4wmqzugnoluw232r4t3ecsfv37ad.onion
&gt; vckjr6bpchiahzhmtzslnl477hdfvwhzw7dmymz3s5lp64mwf6wfeqad.onion
&gt; 
&gt; Checksum strength: The checksum has a false negative rate of 1/65536.
&gt; 
&gt; Address handling: Clients handling onion addresses first parse the
&gt; version field, then extract pubkey, then verify checksum.
&gt; 
&gt; Let me know how you feel about this one. If people like it I will
&gt; transcribe it to prop224.


FYI, I've implemented derivation and verification of v3 onion addresses
(https://github.com/nogoegst/onionutil/blob/master/address.go).
Some test vectors I got:

private key
onion address

33a7e5c16e0308a3e6a0e7f4a621b3caad9ed1acdb3f78369b1377c5e605027879bcc625184b05194975c28b66b66b0469f7f6556fb1ac3189a79b40dda32f1f
 pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd

62a70904f219a788f3c3c46b64c7bc6e800fed54079f2bb88c4fe3800fe2264593f6ad7b54b6391d2b78147a0b2e808e143780de07f1bda6ee7f052d2e9da67b
 sp3k262uwy4r2k3ycr5awluarykdpag6a7y33jxop4cs2lu5uz5sseqd

8d31e643f3693944817172030bab236a818d4a1d1ecbd7b8ce3ccb005dfb15fbb8391d2003bb3bd285b035ac8eb30c80c4e2a29bb7a2f0ce0df8743c37ec3593
 xa4r2iadxm55fbnqgwwi5mymqdcofiu3w6rpbtqn7b2dyn7mgwj64jyd

a7f82fdf8f93a299e947f302313971b6759b8140d86468ead9cc960474c274b5f2ba31b35974d6a5214360cc3098fc69cf0a51d9944672a8904c97cba06c3945
 6k5ddm2zotlkkikdmdgdbgh4nhhquuozsrdhfkeqjsl4xidmhfc6ntqd

ba85d39f1e45ca1627a4d5e28fb891fa810669feec96a146551c87109376f01b07ec065de1daa2b12da5fc2d8b8ae516b23d4a2cbe00edc11c87636c2f3d2129
 a7wamxpb3krlclnf7qwyxcxfc2zd2srmxyao3qi4q5rwylz5eeu35xqd
--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131024301</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-01-31 02:43:01-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

George Kadianakis wrote:
&gt; grarpamp &lt;grarpamp@gmail.com&gt; writes:
&gt; 
&gt; &gt; Skimming thread...
&gt; &gt; 
&gt; &gt; Version or not is fine, provided if you want versions you
&gt; &gt; know you must store the bits somewhere, or ensure regex
&gt; &gt; parser rules to recognize and match an intrinsic version
&gt; &gt; represented by entire address format specification itself.
&gt; &gt; 
&gt; &gt; Note onion search spiders rely on such address recognition
&gt; &gt; and parsing. So it's not all just about the browser brain urlbar.
&gt; &gt; 
&gt; &gt; GPU capacity hasn't hit 16 char yet, mnemonic
&gt; &gt; brain memory has, but that's only happened based on
&gt; &gt; address luck and/or GPU prefixing. We're more or less
&gt; &gt; at the limits, new random bits past 16 won't matter and
&gt; &gt; shouldn't be considered much an argument to brain relavance.
&gt; &gt; Some other brain layer will come along, and if not, there's
&gt; &gt; always search.
&gt; &gt; 
&gt; &gt; If version goes in address, I'd wary against putting it last.
&gt; &gt; A lot of things naturally sort and route and default based
&gt; &gt; on higher order bits appear prefixing on the left.. IPv4 IPv6
&gt; &gt; bitcoin PTR DHT filesystem unix tools... the list goes on.
&gt; &gt; A single leading character is not a problem and gives
&gt; &gt; plenty of bits of version capacity regardless of encoding.
&gt; &gt; Trailing version just plain feels shaky to rely on or to
&gt; &gt; advocate to the world as a new standard. Certainly
&gt; &gt; not without consultation with other anonymous overlay
&gt; &gt; projects as to their future needs and direction as well,
&gt; &gt; or to develop such an interop standard.
&gt; &gt; 
&gt; 
&gt; Hm, can you please expand on this? I think I understood none of your arguments.
&gt; 
&gt; What's the problem with version field being in the end and tools sorting
&gt; addresses based on higher order bits? Also why does version field being
&gt; in the end makes it shaky to rely on?
&gt; 

None of the arguments make any sense to me either. It doesn't matter if
the version is prefixed or trailed, it can be interpreted the same.

What does Tor using version at the end of address have to do with
advocating to the world as a new standard? New standard for what? What
good would be consulting with other anonymous overlay projects be? Which
projects? This questions are not meant to be answered, let's not turn
this thread counter-productive out of respect for all very busy people
reading.

For me, this looks very good:
https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95


chelsea's comments have a good point, but we are pretty sure that a new
version will mean entire different crypto, different public keys thus
different addresses anyway. Moving the version on descriptors entirely
and exclusively won't help since it could only represent one public key
(address), if not it could either create a chicken-and-egg problem
either a false sense of security (equal to the security of the public
key / version that you use to query to the HSDir). So if we're in a PQ
era, have PQ crypto as V4 onion service but do the rendezvous dance
starting with old, vulnerable crypto, we will be doing it wrong.
Otherwise, the operator needs to re-distribute new version different
address so the encoded version won't matter/help. I dislike and don't
see the point of pulling the version byte out of the address. That is
exactly what these lengthy hostnames were missing...

To be frank, the version is not so super important, because:
- prop224 can work perfectly fine even without a version encoded in
address - we are using it so clients can take informed action before
arriving to HSDirs. You cannot confuse a V2 address with a V3 one, and
this should stick for the future from my point of view. Otherwise, why
not start prop 224 with version 0 or 1 encoded into addresses.

- a version change will surely change the entire crypto thus making
address re-use for different versions impossible. It's an
anti-censorship, self-authenticated, uncensored system so key material
under the exclusive control of the user has to be used. At this moment,
and this is unlikely to change, we can accomplish this only by using
whole public keys or at least hash-sums of public keys. With a proper
name system the human-memorable name can be updated with the new version
address.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131125450</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-31 12:54:50-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

Ivan Markin &lt;twim@riseup.net&gt; writes:

&gt; Hi,
&gt; 
&gt; George Kadianakis wrote:
&gt; &gt; I made a torspec branch that alters prop224 accordingly:
&gt; &gt; https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=prop224-onion-address&amp;id=50ffab9903880acf55fe387f4d509ecb2aa17f95
&gt; &gt; 
&gt; 
&gt; It seems that SHA3 digest length is missing for onion address
&gt; generation. I guess (?) that it supposed to be SHA3-256 but it
&gt; definitely should be specified here.
&gt; I think that it just a typo since there is definition of H() above.
&gt; 

OK guys, thanks for all the great feedback!

I merged my prop224 onion encoding patch to torspec just now, after
fixing the bug that Ivan mentioned above.

Hope this works for you :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131142652</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-01-31 14:26:52-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Tue, Jan 31, 2017 at 02:54:50PM +0200, George Kadianakis wrote:
&gt; I merged my prop224 onion encoding patch to torspec just now, after
&gt; fixing the bug that Ivan mentioned above.

Thanks!

btw it's not clear how H() output should be truncated to form a
checksum. Should it be the first 2 bytes or the last 2 bytes?
It should be specified in the definition of CHECKSUM (because length of
digest obviously is not 2 bytes):

- CHECKSUM = H(".onion checksum" || PUBKEY || VERSION)
+ CHECKSUM = H(".onion checksum" || PUBKEY || VERSION)[:2]


Also it worthwhile to include examples with correct checksums.

--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170205021400</emailId><senderName>Vi Grey</senderName><senderEmail>vigrey@riseup.net</senderEmail><timestampReceived>2017-02-05 02:14:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

&gt; Here is the suggested scheme:
&gt; 
&gt;   onion_address = base32(version + pubkey + checksum)
&gt;   checksum = SHA3(".onion checksum" + version + pubkey)

Wouldn't SHA3 be computational overkill if we're just worrying about the
checksum making sure the .onion address wasn't mistyped?  My suggestion
would be to use something like this for the checksum:

   checksum = HMAC-CRC32(".onion checksum", version + pubkey)[2:]
   (with the HMAC key as its first argument)

HMAC-CRC16 could be used as well instead of a truncated HMAC-CRC32, but
CRC16 is a lot less standard than CRC32.

Also, should we consider including a Version option eventually in the
ADD_ONION control port command when using a KeyBlob?  It wouldn't matter
much for this new version and probably wouldn't matter much for a while,
but it might be good to keep this in mind for the future.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170205074400</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-02-05 07:44:00-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

&gt; Date: Sat, 04 Feb 2017 20:14:00 -0600
&gt; From: Vi Grey &lt;vigrey@riseup.net&gt;
&gt; 
&gt; Wouldn't SHA3 be computational overkill if we're just worrying about the
&gt; checksum making sure the .onion address wasn't mistyped?  My suggestion
&gt; would be to use something like this for the checksum:
&gt; 
&gt;    checksum = HMAC-CRC32(".onion checksum", version + pubkey)[2:]
&gt;    (with the HMAC key as its first argument)
&gt; 
&gt; HMAC-CRC16 could be used as well instead of a truncated HMAC-CRC32, but
&gt; CRC16 is a lot less standard than CRC32.

It depends on what you're trying to accomplish.  There are thousands
of possible 16-bit CRCs and billions of possible 32-bit CRCs, of which
a dozen or two are in widespread use for various applications.  If you
simply want a k-bit checksum to detect all errors of up to t bits in
n-bit words, it's not too hard to find a polynomial that does this,
subject to some constraints[1].

The software cost of replacing the polynomial is negligible -- change
a single constant in a program like the attached one, which implements
a 16-bit CRC that detects all 3-bit errors in up to 2048-bit words and
all 4-bit errors in up to 108-bit words.

All that said, I'm not sure I can easily imagine applications that

(a) can tolerate the computational cost of public-key cryptography and
the latency of the Tor network, yet
(b) can't tolerate the cost of one or two blocks of SHA-3 to validate
a .onion address checksum.

It is harder to *prove* that k-bit truncation of SHA-3 will detect all
t-bit errors in n-bit words because it lacks the convenient structure
of a CRC, but it is reasonable to estimate a probability 2^-k of no
bit flips in the checksum under any error.

(I don't think there's anything birthday-related here -- this is a
preimage attack by an adversary of random fat-fingerings or lens
prescriptions in need of replacement.)

&gt; Also, should we consider including a Version option eventually in the
&gt; ADD_ONION control port command when using a KeyBlob?  It wouldn't matter
&gt; much for this new version and probably wouldn't matter much for a while,
&gt; but it might be good to keep this in mind for the future.

Versioning onion addresses and versioning network-internal service
descriptors need not be done the same way.

Addresses are likely to be long-term, and should really change only if
the meaning of the encoded public key has changed incompatibly but
otherwise imperceptibly -- e.g., if for some reason Tor switched from
Edwards coordinates to Montgomery coordinates on Curve25519.  (That
would be a silly thing to do -- it is just an example of a change that
could still interpret existing addresses, but differently.)

Services are periodically restarted and their descriptors republished
to the directory anyway, and implementation details may change when
you upgrade to a new version of Tor -- Tor has already gone through a
few versions of the HS descriptors, which doesn't necessarily require
changing the onion address.


[1] Philip Koopman and Tridib Chakravarty, `Cyclic Redundancy Check
(CRC) Polynomial Selection For Embedded Networks', Proceedings of the
International Conference on Dependable Systems and Networks, 2004.
http://repository.cmu.edu/cgi/viewcontent.cgi?article=1672&amp;context=isr

["onioncrc" (text/plain)]

#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;

/*
 * ONIONCRC_POLY
 *
 *	A degree-16 polynomial that detects all 3-bit errors in up to
 *	2048-bit words and all 4-bit errors up to 108-bit words, from
 *	Koopman &amp; Chakravarty, `Cyclic Redundancy Code (CRC) Polynomial
 *	Selection For Embedded Networks', International Conference on
 *	Dependable Systems and Networks, 2004.
 *	http://repository.cmu.edu/cgi/viewcontent.cgi?article=1672&amp;context=isr
 *
 *	x^16 + x^14 + x^13 + x^12 + x^10 + x^8 + x^6 + x^4 + x^3 + x^1 + 1
 *
 *	The paper describes this as 0xbaad, but uses a quirky
 *	representation with explicit high-degree term and implicit
 *	constant term taken to be 1.
 *
 *	Of course, for prop224 onion names, we have exactly 262-bit
 *	words (256-bit public key + 8-bit version), so performance on
 *	2048-bit words is irrelevant.  There may be a better choice for
 *	exactly 262-bit words, but it requires some calculation to
 *	choose.
 */
#define	ONIONCRC_POLY	UINT16_C(0x755b)

/*
 * onioncrc_compute_step(crc, o)
 *
 *	Given crc = m_0 x^k (mod g) and o = m_1 of degree 7, compute
 *	and return
 *
 *		crc' = (m_0 x^8 + m_1) x^k (mod g)
 *
 *	using bit-by-bit operations.
 */
static uint16_t
onioncrc_compute_step(uint16_t crc, uint8_t o)
{
	unsigned i;

	crc ^= o &lt;&lt; 8;
	for (i = 0; i &lt; 8; i++)
		crc = ((crc &lt;&lt; 1) &amp; UINT16_C(0xffff)) ^
		    (ONIONCRC_POLY &amp; -(crc &gt;&gt; 15));

	return crc;
}

/*
 * onioncrc_table[o]
 *
 *	Precomputed table of batch CRC reduction steps for octet o.
 */
static uint16_t onioncrc_table[0x100];

/*
 * onioncrc_init()
 *
 *	Initialize onioncrc_table.
 */
void
onioncrc_init(void)
{
	uint8_t o = 0;

	do {
		onioncrc_table[o] = onioncrc_compute_step(0, o);
	} while (++o != 0);
}

/*
 * onioncrc_step(crc, o)
 *
 *	Given crc = m_0 x^k (mod g) and o = m_1 of degree 7, compute
 *	and return
 *
 *		crc' = (m_0 x^8 + m_1) x^k (mod g)
 *
 *	using table lookup.
 */
uint16_t
onioncrc_step(uint16_t crc, uint8_t o)
{

	return (crc &lt;&lt; 8) ^ onioncrc_table[(crc &gt;&gt; 8) ^ o];
}

/*
 * onioncrc_buf(crc, p, n)
 *
 *	Given crc = m_0 x^k (mod g) and the degree-(8*n - 1) polynomial
 *	m_1 = p[0], p[1], ..., p[n - 1], compute and return
 *
 *		crc' = (m_0 x^(8*n) + m_1) x^k (mod g)
 *
 *	using table lookup.
 */
uint16_t
onioncrc_buf(uint16_t crc, const void *buf, size_t len)
{
	const uint8_t *p = buf;
	size_t n = len;

	while (n --&gt; 0)
		crc = onioncrc_step(crc, *p++);

	return crc;
}

#include &lt;err.h&gt;
#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

unsigned char buf[BUFSIZ];

int
main(int argc, char **argv)
{
	ssize_t nread;
	uint16_t crc = 0;

	(void)argc;
	(void)argv;

	if (signal(SIGPIPE, SIG_IGN) == SIG_ERR)
		err(1, "signal");

	onioncrc_init();

	while ((nread = read(STDIN_FILENO, buf, sizeof buf)) != 0) {
		if (nread == -1)
			err(1, "read");
		crc = onioncrc_buf(crc, buf, (size_t)nread);
	}

	if (printf("%04hx\n", crc) &lt; 0)
		err(1, "printf");

	return 0;
}

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170206002714</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-02-06 00:27:14-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


chelsea komlo:
&gt; Before starting, someone today very kindly pointed me to Prop 271, the
&gt; naming system API for Tor Onion services. Overall, my larger concern is
&gt; whether adding the version in the onion address makes both using and
&gt; distributing onion addresses harder. If the long-term plan is for onion
&gt; addresses to not be used directly, then having the version in the onion
&gt; address is completely fine as this wouldn't present a barrier to entry
&gt; for end users.
&gt; 
[snip]
&gt;
&gt; Yeah! So if the plan is that onion addresses will not be used directly
&gt; by end users and there is an abstraction layer that hides things like
&gt; version upgrade from end users, then going ahead with the current plan
&gt; sounds good.
&gt; 
&gt; However, if there is a chance that end users will consume onion
&gt; addresses directly, then having this discussion seems like a good idea.

Naming systems like Namecoin and OnioNS have better usability due to
being human-meaningful, but they achieve this by sacrificing the
straightforward cryptographic proofs that make .onion names secure.
This doesn't imply that Namecoin and OnioNS are worse for security
overall (I think for a lot of use cases they're more secure than .onion
once you factor in attacks on human psychology), but there are some use
cases where users will want to use .onion directly without a naming
layer.  (I also suspect that this tradeoff is unavoidable to some
extent; Dan Kaminsky and Aaron Swartz made some compelling arguments
that Greg Maxwell's proof of impossibility of decentralized consensus
algorithms also applies to Zooko's Triangle.)

Cheers,
-Jeremy Rand


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170207103325</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2017-02-07 10:33:25-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 05/02/17 07:44, Taylor R Campbell wrote:
&gt;&gt; Date: Sat, 04 Feb 2017 20:14:00 -0600
&gt;&gt; From: Vi Grey &lt;vigrey@riseup.net&gt;
&gt;&gt; Also, should we consider including a Version option eventually in the
&gt;&gt; ADD_ONION control port command when using a KeyBlob?  It wouldn't matter
&gt;&gt; much for this new version and probably wouldn't matter much for a while,
&gt;&gt; but it might be good to keep this in mind for the future.
&gt; 
&gt; Versioning onion addresses and versioning network-internal service
&gt; descriptors need not be done the same way.
&gt; 
&gt; Addresses are likely to be long-term, and should really change only if
&gt; the meaning of the encoded public key has changed incompatibly but
&gt; otherwise imperceptibly -- e.g., if for some reason Tor switched from
&gt; Edwards coordinates to Montgomery coordinates on Curve25519.  (That
&gt; would be a silly thing to do -- it is just an example of a change that
&gt; could still interpret existing addresses, but differently.)

It seems to me that different people in this thread have different ideas
about what the version number in the onion address represents, and it
would be good to make that explicit in the spec. Does it represent:

1. The version of the *onion address format* - meaning that, for
example, a v4 address and a v5 address could point to the same
descriptor, which would be compatible with both addresses?

2. The version of the *descriptor format* - meaning that a v4 address
must point to a v4 descriptor, but a v4 descriptor and a v5 descriptor
could point to the same hidden service, which would be compatible with
both descriptors?

3. The version of the *entire protocol* - meaning that a v4 address must
point to a v4 descriptor, which must point to a v4 hidden service?

Cheers,
Michael

["0x9FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326102737</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-26 10:27:37-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Jan 2017, at 10:19, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt;&gt; onion_address = base32(pubkey || checksum || version)
&gt; 
&gt; Is the order in which the address is encoded once the checksum is
&gt; calculated. checksum represents (the first two bytes of) the result of
&gt; the SHA3 hash.
&gt; 
&gt; We put pubkey first so that humans can distinguish addresses.
&gt; (We could put checksum first, but that's non-standard.)

I just talked with some people who run a large onion site.

They asked if we can put the checksum at the front of the encoded
address.

This makes phishing with different bit(s) in the tail of the address
much harder. (That is, searching for a matching prefix for an existing
address is much harder if the checksum changes the first two characters
unpredictably. People ignore the checksum if it's at the end.)

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY15eZAAoJEHQNnjkCUnKirEIP/3500dWa58qIFq6A1RnCC/t9
t6+8+E6SSvYxLmuUM2OchfAI0Tm5iLQGx1+GY+la64FRJKYKyRJbPvCbwOAOtELz
Nymn7K3BJVKiTOzpeJFJhUC27caTpiuqL4hXQESzjiqgtHvdbTW4P7xaOxiKkjzB
jHZAc0ZdKZM+t9PZuvS1vPUZdGsgD2bIB5tzhWJ1av3aJsWx+bhJKzLm3EPrKiOY
kp8daNhDp4jzMsTVftyQtCZ4FUzInzbe9KgDhcZ5MAj/5+5MdtacSQBrGFiM0lUN
QAtKoKoZGeBTH9x8ClZ5DG0T8HcZjYGn/G+50STPC/bzH7JOzV2GhaG8ecedcZu0
RisJoIzNqEJrl9+tbrKUtckOieYOVq0I+KZ4mbMeM2+CxsM7yG2L6str8eG1RIbJ
P506nwjZjCZrWAi9IDj23YSy5l11zql98c3s6W7NVyCBDtI9bWkaBfwBWNui0T/V
4FKk1FPbU6JLZcqQ4aTFDw3dlqSA0cZNnThueCDt7AdJ/mhSMZ7g3Fk0/N+bAUwv
i83fNAlrvJSJjerxwswqX5/HsPOyMDn4Bg+L3lLVdUe6ITlrZ2x8VvODAdjLRtKS
8S4rYrPFZ6MxbekZqop2edO0HC4jplZl4/oGNIp75dA60k3MyckjJ8hR2AJMu8t4
UqzhWsqBz0/VNFyYwzJU
=MitX
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326104153</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-26 10:41:53-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Sun, Mar 26, 2017 at 09:27:37PM +1100, teor wrote:
&gt; 
&gt; &gt; On 26 Jan 2017, at 10:19, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt;&gt;&gt; onion_address = base32(pubkey || checksum || version)
&gt; &gt; 
&gt; &gt; Is the order in which the address is encoded once the checksum is
&gt; &gt; calculated. checksum represents (the first two bytes of) the result of
&gt; &gt; the SHA3 hash.
&gt; &gt; 
&gt; &gt; We put pubkey first so that humans can distinguish addresses.
&gt; &gt; (We could put checksum first, but that's non-standard.)
&gt; 
&gt; I just talked with some people who run a large onion site.
&gt; 
&gt; They asked if we can put the checksum at the front of the encoded
&gt; address.
&gt; 
&gt; This makes phishing with different bit(s) in the tail of the address
&gt; much harder. (That is, searching for a matching prefix for an existing
&gt; address is much harder if the checksum changes the first two characters
&gt; unpredictably. People ignore the checksum if it's at the end.)

Wait; why is searching for a matching checksum at the beginning harder
than searching for a matching pubkey?  When trying to collide an onion
address, the pubkey is essentially random, as is the checksum.
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326113302</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-26 11:33:02-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Mar 2017, at 21:41, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; 
&gt; On Sun, Mar 26, 2017 at 09:27:37PM +1100, teor wrote:
&gt;&gt; 
&gt;&gt;&gt; On 26 Jan 2017, at 10:19, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;&gt; onion_address = base32(pubkey || checksum || version)
&gt;&gt;&gt; 
&gt;&gt;&gt; Is the order in which the address is encoded once the checksum is
&gt;&gt;&gt; calculated. checksum represents (the first two bytes of) the result of
&gt;&gt;&gt; the SHA3 hash.
&gt;&gt;&gt; 
&gt;&gt;&gt; We put pubkey first so that humans can distinguish addresses.
&gt;&gt;&gt; (We could put checksum first, but that's non-standard.)
&gt;&gt; 
&gt;&gt; I just talked with some people who run a large onion site.
&gt;&gt; 
&gt;&gt; They asked if we can put the checksum at the front of the encoded
&gt;&gt; address.
&gt;&gt; 
&gt;&gt; This makes phishing with different bit(s) in the tail of the address
&gt;&gt; much harder. (That is, searching for a matching prefix for an existing
&gt;&gt; address is much harder if the checksum changes the first two characters
&gt;&gt; unpredictably. People ignore the checksum if it's at the end.)
&gt; 
&gt; Wait; why is searching for a matching checksum at the beginning harder
&gt; than searching for a matching pubkey?  When trying to collide an onion
&gt; address, the pubkey is essentially random, as is the checksum.

You're right - it only matters if the checksum is hard to compute.
(We could make it an scrypt or something, if we wanted to. But if we
don't, there's no need to make this change.)

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY16buAAoJEHQNnjkCUnKiiQsQAKsVkcJf3vubiSozHkuRVguh
ZcGN5qJVc0e/47gz1lsDMthmzPPd4wK39q2/xmiSmFM1V0WUa3MV49i7UZI8fsHz
Hq4E2qcD6d7tB2nHeKKcm8SqISos5cen9SJhFqwplGq69aagf6lZSNRbnMeVR3A4
y0KxaJKpl/uvaf4vGQEQKfklv6ttR8L1avCOs+ArIUlgGk1hkFYzGSmkz1RTvJEb
7jpkuachaeu2Z4bIKHY6ALoGHw2GoJJNLEgbTfXHAeVpZmQhrrRX52udOllJXt7l
E88IZ1jwaxwLRVd9Ef4BgsxYYbQz8vfW2XTzCR3UF0McbWfjbwTWcgSycyx1Y0bV
aJZ4/rMfL0WUrdRw44dDi8JPj7V7QwHDTaAj8XkaMpJHVqYx8LTfUfye9Wkpn9by
u0dPN4GPN4iGoWinSsYfDjldI6HNs4m/pIYZEaYjz8adZZatzEG2+TS90evB1Av/
4vM6LptoZ5KiL4jucw3voLGMo63wA9t7v2WVNhxC1H21BrrFCXk4EhUjRxo3zIK1
Kkpdq6W0yJA7EMsDnFHZe2YVnfgU+qxiT7bV25tMH4Iur+wqeGXVASyvAzkeK4p5
Nr96XBm+Qtxj99KZqidLXwiAKGuEGrGXZ+MOegHOUwa7Y1tbMK7V0++oQmF8IvyI
CBukyuhw9chBXy7K6wMB
=+eAc
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326142800</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-03-26 14:28:00-0400</timestampReceived><subject>Re: [tor-dev] GSOC 2017: Proposal for anon-connection-wizard</subject><body>

irykoon:
&gt; Currently, the Tor Launcher is shipped with the Tor Browser Bundle and
&gt; heavily relies on the Tor Browser for its implementation. These facts
&gt; cause using Tor Launcher without having the Tor Browser impossible. I
&gt; agree with the whonix core developer Patrick Schleizer that "the Tor
&gt; Browser Bundle has its kind of users. system Tor (refers to Tor from
&gt; packages.debian.org or deb.torproject.org) users, where Tor runs as
&gt; daemon, is used in different ways for different purposes. These users
&gt; cannot use Tor Launcher, because it only works with Tor Browser".

I might be misunderstanding what you and Patrick mean with "impossible" (or rather, \
which use cases are impossible) w.r.t. using Tor Launcher outside of the Tor Browser; \
Tails uses the Tor Launcher shipped in Tor Browser, but it's run as a stand-alone XUL \
application (`firefox --app ...`), so the *web* browser isn't started as part of it. \
[1] One could even run it using Iceweasel/Firefox, i.e. completely without Tor \
Browser.

That said, this approach will not be viable any more some time next year when the \
Firefox ESR branch drops XUL support and Tor Launcher is deprecated upstream. It \
remains to see how the replacement of Tor Launcher will look, it might still work for \
Tails. However, if anon-connection-wizard would be a (more or less) drop-in \
replacement for Tor Launcher in Tails, that would be immensely helpful since we'd \
have a solution that will be guaranteed to work for us without much work. And I guess \
as long as the UX is more or less identical to the new Tor Launcher and rapidly \
adapts to changes, and there are good translations, we'd probably prefer it over the \
new Tor Launcher, since it probably will be even harder to decouple from the web \
browser.

Any way, I also see potential for future collaboration between Whonix and Tails for \
extending the usefulness of anon-connection-wizard beyond what Tor Launcher (and its \
replacement) offers [2]; anon-connection-wizard targets the OS, not just a single \
application, so it could integrate the choices of network configuration (wired? which \
wireless network? MAC spoofing?) and Tor configuration (proxy? pluggable transport?) \
in a single place which probably makes more sense for users and also allows us to \
more easily (optionally) save these settings so they are restored the next time you \
visit the same network. This could potentially even be used to help giving users \
control over entry node selection to avoid persistent Entry Guards from leaking \
information about you geographical movement. [3]

Cheers!

[1] The first two scripts are parts of the build process, the two latter ones are for \
                starting it:
* https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/06-adduser_tor-launcher?h=devel
                
* https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/10-tbb?h=devel
* https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/usr/local/sbin/tails-tor-launcher?h=devel
                
* https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/usr/local/bin/tor-launcher?h=devel
 [2] https://tails.boum.org/blueprint/network_connection/
[3] We discuss the issue of  https://tails.boum.org/blueprint/persistent_Tor_state/

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170327155044</emailId><senderName>irykoon</senderName><senderEmail>irykoon@gmail.com</senderEmail><timestampReceived>2017-03-27 15:50:44-0400</timestampReceived><subject>Re: [tor-dev] GSOC 2017: Proposal for anon-connection-wizard (anonym)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



anonym:
&gt; I might be misunderstanding what you and Patrick mean with 
&gt; "impossible" (or rather, which use cases are impossible) w.r.t. 
&gt; using Tor Launcher outside of the Tor Browser; Tails uses the Tor 
&gt; Launcher shipped in Tor Browser, but it's run as a stand-alone XUL 
&gt; application (`firefox --app ...`), so the *web* browser isn't
&gt; started as part of it. [1] One could even run it using
&gt; Iceweasel/Firefox, i.e. completely without Tor Browser.
&gt; 
Thank you very much for your explaination, anonym! I did find my words
misleading here. I have corrected my mistakes. How do you like this one:
"
Currently, the Tor Launcher is shipped with the Tor Browser Bundle and
heavily relies on the Tor Browser for its implementation. Although
thanks to the great
efforts([[1]](https://git-tails.immerda.ch/tails/tree/config/chroot_loca
l-hooks/06-adduser_tor-launcher?h=devel),
[[2]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/
10-tbb?h=devel),
[[3]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-includ
es/usr/local/sbin/tails-tor-launcher?h=devel),
[[4]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-includ
es/usr/local/bin/tor-launcher?h=devel))
of Tails, the Tor Launcher can be run as a stand-alone XUL application
currently, since the XUL will not be supported by mozilla in Firefox
ESR branch [some time next
year](https://blog.mozilla.org/addons/2016/11/23/add-ons-in-2017/),
that implementation may not work for a long time. Beiseds, I agree
with the Whonix core developer Patrick Schleizer that "the Tor Browser
Bundle has its kind of users. system Tor (refers to Tor from
packages.debian.org or deb.torproject.org) users, where Tor runs as
daemon, is used in different ways for different purposes".

Therefore, although anon-connection-wizard is a Python-clone of the
Tor luancher, since all its dependencies are already in Debian and
already packaged, it can still serve as a really useful tool for the
system Tor users or a loose coupling substituition to the Tor Launcher.
"
&gt; That said, this approach will not be viable any more some time next
&gt;  year when the Firefox ESR branch drops XUL support and Tor
&gt; Launcher is deprecated upstream.
Thank you so much for pointing out the fact. It makes the
anon-connection-wizard project even more meaningful and helpful because
it may serve as a substitution to the Tor Launcher in the future. I
have add the point to my proposal!

&gt; It remains to see how the replacement of Tor Launcher will look,
&gt; it might still work for Tails. However, if anon-connection-wizard
&gt; would be a (more or less) drop-in replacement for Tor Launcher in
&gt; Tails, that would be immensely helpful since we'd have a solution
&gt; that will be guaranteed to work for us without much work.
I am really glad to hear that my project may potentially be helpful to
Tails. If this can happen one day in the future, it can benifit even
more Tor users.
&gt; And I guess as long as the UX is more or less identical to the new 
&gt; Tor Launcher and rapidly adapts to changes, and there are good 
&gt; translations, we'd probably prefer it over the new Tor Launcher, 
&gt; since it probably will be even harder to decouple from the web 
&gt; browser.
The UX is a main part of the anon-connection-wizard proposal. During the
summer, I will mainly focus on the improvement of verbal instructions
and the user interface instructions in anon-connection-wizard. Patrick
has helped me to get the latest paper by Linda on tor-launcher
usability, so that I can redesign the anon-connection-wizard basing on
some solid research findings. Please look forward to it :)

I am not worried too much about the translation actually. If the
anon-connection-wizard is good and useful enough, maybe I can turn to
the Tor Project translation
[team](https://www.transifex.com/otf/torproject/) for help. The team is
very efficient and active.

BTW could you please tell me where I can find more about the development
progress of the new Tor Launcher? I believe some communication and
collaboration between us will be benefitial to both the
anon-connection-wizard and the new Tor Launcher. Thank you very much!

&gt; 
&gt; Any way, I also see potential for future collaboration between 
&gt; Whonix and Tails for extending the usefulness of 
&gt; anon-connection-wizard beyond what Tor Launcher (and its
&gt; replacement) offers [2];
This can be a really good point! If you don't mind, I would like to
quote your idea as the "future work" in my proposal.

&gt; anon-connection-wizard targets the OS, not just a single 
&gt; application, so it could integrate the choices of network 
&gt; configuration (wired? which wireless network? MAC spoofing?)

I agree with you that:
&gt; "save these settings so they are restored the next time you visit
&gt; the same network. This could potentially even be used to help
&gt; giving users control over entry node selection to avoid persistent
&gt; Entry Guards from leaking information about you geographical
&gt; movement."

However, I am not sure if integrating the system-network-setting-related
configuration(like MAC spoofing) in anon-connection-wizard will be a
good idea in terms of a low coupling design. I am probably wrong but I
personally prefer considering the anon-connection-wizard only as an
graphical application to configure Tor, specifically, to configure torrc
file.

Could you please share your insights about how we should define the
anon-conncetion-wizard please? I am really looking forward to hearing
your thoughts.

&gt; and Tor configuration (proxy? pluggable transport?) in a single
&gt; place which probably makes more sense for users

Yes! Let's brainstorm more about the [torrc-related
setting](https://www.torproject.org/docs/tor-manual.html.en) at least!
How about the FascistFirewall setting?! Users who are not really live in
Tor-censored area should avoid using Tor Bridges for better anonymity.


&gt; 
&gt; Cheers!
&gt; 
&gt; [1] The first two scripts are parts of the build process, the two 
&gt; latter ones are for starting it: * 
&gt; https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/06-a
dduser_tor-launcher?h=devel
&gt;
&gt;
&gt;
&gt; 
*
https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/10-tbb
?h=devel
&gt; * 
&gt; https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/u
sr/local/sbin/tails-tor-launcher?h=devel
&gt;
&gt;
&gt;
&gt; 
*
https://git-tails.immerda.ch/tails/tree/config/chroot_local-includes/usr
/local/bin/tor-launcher?h=devel
&gt; [2] https://tails.boum.org/blueprint/network_connection/ [3] We 
&gt; discuss the issue of 
&gt; https://tails.boum.org/blueprint/persistent_Tor_state/

Thank you so much for your helpful sources. I will look at them in
detail soon!

Please let me say thank you again for your feedback, anonym! I really
appreciate your help! I have revised my proposal with the help of your
feedback and I am going to send it to tor-dev mailing list in a
seperate email! Please look forward to it!





-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY2TTWAAoJEKFLTbxtzdU88AsP/0cCPcMrTt2lOtF21jrrZV8Q
sEPfYRWfsDc1Yc5QT+9zlOLynw7+W9BJ/WwwytCk37YmxS/xvl2T2/mGkoLH0hhk
G4kJ58HyNmnjEA8fYnT77QWvh96Uznz7jeOd0th/tg9aZVcbFur7YBMSRnNzpMGq
leqtiYNtd/HmVXHAGkAhy7GvMOHrfaEQiRXCSUuAJ6NR6W2cagELVfurEdZw7KkO
2OvHbe61oFS5p4n5ILdg+OLmXevpFtUA8YsbIxttIiaBhwkBNlMFUr/5Z9JY53v3
Q6ueYEaxKzFXwiaicWfhVgEGuDl4Ez5a7bTEvXATcXN0AldTNou8MBeontca728B
lmh4wEGb/WM8ktnq/87kQD4oHkSUomGhati09kw70dCdkQhI5KmQM/3RwLrm/KNV
XKuA/eeOHyV1E+1uh5GCODNKfbDSNR9k+M2wSiXFsrDb+9tcczP4MND/moiziquU
4TvK8mM6cFy0d3hO2QFIaL3myIRdu/+MvLZxMOnsqUb0KegBnmhgBePq/Txuxyb5
9pKvO0Oy4cDsLwx/LAR/YBmJbvLVuyyK+2woB94o39UsZYwJqBw9/VBfhUND2Iyh
w0c0CvsRjyXo1v/EySE9W4wnpCWc7YHaFL9luYTyzQiCJyXrCFYt6JIiyEYZ6dQw
MXWPr7sds1a8YMYlGh/1
=QjbB
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170327052743</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-03-27 05:27:43-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0, draft 1 Specification</subject><body>

[Attachment #2 (multipart/signed)]


NB: I'm personally not doing any circumvention related work at all and
I won't be the one implementing this regardless of what happens, so
feel free to disregard this.

On Sun, 26 Mar 2017 04:48:44 -0500
Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; As was discussed in the Pluggable Transports session at TorDev
&gt; Amsterdam, the Pluggable Transports 2.0, draft 1 specification
&gt; [https://www. pluggabletransports.info/spec/pt2draft1] was created by
&gt; a committee of censorship circumvention tool developers: Tor,
&gt; Lantern, Psiphon, and uProxy. It specifies a version of Pluggable
&gt; Transports that meets the needs of multiple circumvention tools.

The formatting is all fucked up, so I'm commenting based off the PDF
version.

&gt; There is one major change that has implications for tor, which is
&gt; that the Pluggable Transports 2.0, draft 1 IPC protocol uses a
&gt; different type of SOCKS authentication mechanism, which allows for
&gt; larger parameters to be send to transports.

Why JSON, and how is that better than the binary Tor Prop 229 SOCKS5
extension?

Unless I'm missing something, the draft as is, does not fully specify
how exactly the new authentication method is supposed to work and is
currently unimplementable.  (How is the length of the serialized body
supposed to be determined by the SOCKS proxy side?)

&gt; We are currently working on a 2nd draft of this specification, which
&gt; will incorporate changes and errata from the community censorship
&gt; circumvention tool community. For instance, syntactic errors in the
&gt; documentation of the Go interface will be fixed in draft 2. Tor
&gt; developers participated in the specification meetings, and now
&gt; feedback from the overall Tor community is requested for
&gt; incorporation in the next draft. There will also likely be a 2.1
&gt; specification process, possibility starting August, where we will
&gt; consider larger changes.

As it stands I don't see a good reason for this to be implemented by
Tor.  The larger args is nice, but that can be done with the existing
spec plus Prop 229[0].  The new spec does nothing to address things that
would actually be a good reason to revise the spec either, like making
dual stack bridges actually work, or adding notation for AF_LOCAL
addresses so that containerization isn't painful client side.

Am I missing something here?  This looks like the old spec with
a not-invented-here JSON based Prop. 229 extension and a bunch of
programming language bindings that I'll never use, that defeat the
purpose of the whole "pluggable" notion in the first place.

(Yes, I'm aware that "What Yawning considers important in a new spec"
 has been and apparently still is different from what other people
 considers important in a new spec.  But if you're going to revise the
 spec, at least fix the dual stack problem for fuck's sake.)

Regards,

--=20
Yawning Angel

[0]: Or "Just use Socks4a, because IPv6 is fucking broken server side
anyway".

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170327090347</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-03-27 09:03:47-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0, draft 1 Specification</subject><body>

[Attachment #2 (multipart/alternative)]


Thank you for the feedback on the specification draft, Yawning. We will
take all of this feedback into account in the next draft.

Some specific points are addressed below.

On Mon, Mar 27, 2017 at 12:27 AM, Yawning Angel &lt;yawning@schwanenlied.me&gt;
wrote:

&gt; NB: I'm personally not doing any circumvention related work at all and
&gt; I won't be the one implementing this regardless of what happens, so
&gt; feel free to disregard this.
&gt;
&gt; On Sun, 26 Mar 2017 04:48:44 -0500
&gt; Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; &gt; As was discussed in the Pluggable Transports session at TorDev
&gt; &gt; Amsterdam, the Pluggable Transports 2.0, draft 1 specification
&gt; &gt; [https://www. pluggabletransports.info/spec/pt2draft1] was created by
&gt; &gt; a committee of censorship circumvention tool developers: Tor,
&gt; &gt; Lantern, Psiphon, and uProxy. It specifies a version of Pluggable
&gt; &gt; Transports that meets the needs of multiple circumvention tools.
&gt;
&gt; The formatting is all fucked up, so I'm commenting based off the PDF
&gt; version.
&gt;

I will talk to the website maintainer about the formatting. Here is a link
to the PDF version for anyone else that would like to read it:
https://www.pluggabletransports.info/assets/PTSpecV2Draft1.pdf


&gt; &gt; There is one major change that has implications for tor, which is
&gt; &gt; that the Pluggable Transports 2.0, draft 1 IPC protocol uses a
&gt; &gt; different type of SOCKS authentication mechanism, which allows for
&gt; &gt; larger parameters to be send to transports.
&gt;
&gt; Why JSON, and how is that better than the binary Tor Prop 229 SOCKS5
&gt; extension?
&gt;

I was not familiar with Tor Prop 229. It does seem to have a similar
purpose. I will read this proposal and get back to you.


&gt; Unless I'm missing something, the draft as is, does not fully specify
&gt; how exactly the new authentication method is supposed to work and is
&gt; currently unimplementable.  (How is the length of the serialized body
&gt; supposed to be determined by the SOCKS proxy side?)
&gt;

Thank you for this feedback, this is very helpful. It seems that this
section of the specification draft (3.3.4. Pluggable PT Client
Per=C2=AD-Connection Arguments) needs some additional work. We will address=
 this
in the next draft.


&gt; &gt; We are currently working on a 2nd draft of this specification, which
&gt; &gt; will incorporate changes and errata from the community censorship
&gt; &gt; circumvention tool community. For instance, syntactic errors in the
&gt; &gt; documentation of the Go interface will be fixed in draft 2. Tor
&gt; &gt; developers participated in the specification meetings, and now
&gt; &gt; feedback from the overall Tor community is requested for
&gt; &gt; incorporation in the next draft. There will also likely be a 2.1
&gt; &gt; specification process, possibility starting August, where we will
&gt; &gt; consider larger changes.
&gt;
&gt; As it stands I don't see a good reason for this to be implemented by
&gt; Tor.  The larger args is nice, but that can be done with the existing
&gt; spec plus Prop 229[0].  The new spec does nothing to address things that
&gt; would actually be a good reason to revise the spec either, like making
&gt; dual stack bridges actually work, or adding notation for AF_LOCAL
&gt; addresses so that containerization isn't painful client side.
&gt;
&gt; Am I missing something here?  This looks like the old spec with
&gt; a not-invented-here JSON based Prop. 229 extension and a bunch of
&gt; programming language bindings that I'll never use, that defeat the
&gt; purpose of the whole "pluggable" notion in the first place.
&gt;
&gt; (Yes, I'm aware that "What Yawning considers important in a new spec"
&gt;  has been and apparently still is different from what other people
&gt;  considers important in a new spec.  But if you're going to revise the
&gt;  spec, at least fix the dual stack problem for fuck's sake.)
&gt;

I am familiar with the dual stack problem generally, where servers have
both IPv4 and IPv6 IP addresses. I was not involved in any conversations
regarding the dual stack problem for Pluggable Transports specifically. If
you could point me to any documentation on this issue, that would be
helpful. Alternatively, if you could explain what the issue is and what
possible solutions you'd like to see in a future Pluggable Transports
specification, that is something we could make happen in future
specifications revisions.


&gt; Regards,
&gt;
&gt; --
&gt; Yawning Angel
&gt;
&gt; [0]: Or "Just use Socks4a, because IPv6 is fucking broken server side
&gt; anyway".
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Thank you for the feedback on the specification \
draft, Yawning. We will take all of this feedback into account in the next \
draft.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Some specific points are addressed \
below.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Mar 27, 2017 at 12:27 AM, Yawning Angel &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:yawning@schwanenlied.me" \
target="_blank"&gt;yawning@schwanenlied.me&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;NB: I'm personally not doing any circumvention \
related work at all and&lt;br&gt; I won't be the one implementing this regardless of \
what happens, so&lt;br&gt; feel free to disregard this.&lt;br&gt;
&lt;span class="gmail-"&gt;&lt;br&gt;
On Sun, 26 Mar 2017 04:48:44 -0500&lt;br&gt;
Brandon Wiley &lt;&lt;a href="mailto:brandon@blanu.net"&gt;brandon@blanu.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt; As was discussed in the Pluggable Transports session at TorDev&lt;br&gt;
&gt; Amsterdam, the Pluggable Transports 2.0, draft 1 specification&lt;br&gt;
&lt;/span&gt;&gt; [&lt;a href="https://www" rel="noreferrer" target="_blank"&gt;https://www&lt;/a&gt;. \
&lt;a href="http://pluggabletransports.info/spec/pt2draft1" rel="noreferrer" \
target="_blank"&gt;pluggabletransports.info/spec/&lt;wbr&gt;pt2draft1&lt;/a&gt;] was created by&lt;br&gt; \
&lt;span class="gmail-"&gt;&gt; a committee of censorship circumvention tool developers: \
Tor,&lt;br&gt; &gt; Lantern, Psiphon, and uProxy. It specifies a version of Pluggable&lt;br&gt;
&gt; Transports that meets the needs of multiple circumvention tools.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;The formatting is all fucked up, so I'm commenting based off the PDF&lt;br&gt;
version.&lt;span class="gmail-"&gt;&lt;br&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I will talk \
to the website maintainer about the formatting. Here is a link to the PDF version for \
anyone else that would like to read it: &lt;a \
href="https://www.pluggabletransports.info/assets/PTSpecV2Draft1.pdf"&gt;https://www.pluggabletransports.info/assets/PTSpecV2Draft1.pdf&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
solid rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt; &gt; There is one \
major change that has implications for tor, which is&lt;br&gt; &gt; that the Pluggable \
Transports 2.0, draft 1 IPC protocol uses a&lt;br&gt; &gt; different type of SOCKS \
authentication mechanism, which allows for&lt;br&gt; &gt; larger parameters to be send to \
transports.&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Why JSON, and how is that better than the binary Tor Prop 229 SOCKS5&lt;br&gt;
extension?&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I was not familiar with Tor Prop 229. \
It does seem to have a similar purpose. I will read this proposal and get back to \
you.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; Unless I'm \
missing something, the draft as is, does not fully specify&lt;br&gt; how exactly the new \
authentication method is supposed to work and is&lt;br&gt; currently unimplementable.   \
(How is the length of the serialized body&lt;br&gt; supposed to be determined by the SOCKS \
proxy side?)&lt;span class="gmail-"&gt;&lt;br&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank \
you for this feedback, this is very helpful. It seems that this section of the \
specification draft (3.3.4. Pluggable PT Client Per ­-Connection Arguments) needs \
some additional work. We will address this in the next draft.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
solid rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt; &gt; We are currently \
working on a 2nd draft of this specification, which&lt;br&gt; &gt; will incorporate changes \
and errata from the community censorship&lt;br&gt; &gt; circumvention tool community. For \
instance, syntactic errors in the&lt;br&gt; &gt; documentation of the Go interface will be \
fixed in draft 2. Tor&lt;br&gt; &gt; developers participated in the specification meetings, \
and now&lt;br&gt; &gt; feedback from the overall Tor community is requested for&lt;br&gt;
&gt; incorporation in the next draft. There will also likely be a 2.1&lt;br&gt;
&gt; specification process, possibility starting August, where we will&lt;br&gt;
&gt; consider larger changes.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;As it stands I don't see a good reason for this to be implemented by&lt;br&gt;
Tor.   The larger args is nice, but that can be done with the existing&lt;br&gt;
spec plus Prop 229[0].   The new spec does nothing to address things that&lt;br&gt;
would actually be a good reason to revise the spec either, like making&lt;br&gt;
dual stack bridges actually work, or adding notation for AF_LOCAL&lt;br&gt;
addresses so that containerization isn't painful client side.&lt;br&gt;
&lt;br&gt;
Am I missing something here?   This looks like the old spec with&lt;br&gt;
a not-invented-here JSON based Prop. 229 extension and a bunch of&lt;br&gt;
programming language bindings that I'll never use, that defeat the&lt;br&gt;
purpose of the whole "pluggable" notion in the first place.&lt;br&gt;
&lt;br&gt;
(Yes, I'm aware that "What Yawning considers important in a new \
spec"&lt;br&gt;  has been and apparently still is different from what other people&lt;br&gt;
  considers important in a new spec.   But if you're going to revise the&lt;br&gt;
  spec, at least fix the dual stack problem for fuck's \
sake.)&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am familiar with the dual stack problem \
generally, where servers have both IPv4 and IPv6 IP addresses. I was not involved in \
any conversations regarding the dual stack problem for Pluggable Transports \
specifically. If you could point me to any documentation on this issue, that would be \
helpful. Alternatively, if you could explain what the issue is and what possible \
solutions you'd like to see in a future Pluggable Transports specification, that \
is something we could make happen in future specifications revisions.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
solid rgb(204,204,204);padding-left:1ex"&gt; Regards,&lt;br&gt;
&lt;span class="gmail-HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
--&lt;br&gt;
Yawning Angel&lt;br&gt;
&lt;br&gt;
[0]: Or "Just use Socks4a, because IPv6 is fucking broken server side&lt;br&gt;
anyway".&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328063622</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-03-28 06:36:22-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0, draft 1 Specification</subject><body>

[Attachment #2 (multipart/signed)]


On Mon, 27 Mar 2017 04:03:47 -0500
Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; I am familiar with the dual stack problem generally, where servers
&gt; have both IPv4 and IPv6 IP addresses. I was not involved in any
&gt; conversations regarding the dual stack problem for Pluggable
&gt; Transports specifically. If you could point me to any documentation
&gt; on this issue, that would be helpful. Alternatively, if you could
&gt; explain what the issue is and what possible solutions you'd like to
&gt; see in a future Pluggable Transports specification, that is something
&gt; we could make happen in future specifications revisions.

None of the things I've mentioned are new concerns, and I brought all
of them up (and more) a long time ago back when I was giving thought
to the PT spec.

I've basically given up at this point, and to be honest I gave up
shortly after I initially started making noises about improving the
spec because it was clear that while I was trying to improve the
existing interface while preserving the overall architecture, everyone
else was far more interested in "lets make everything into a bunch of
library code".

https://lists.torproject.org/pipermail/tor-dev/2015-September/009432.html

https://trac.torproject.org/projects/tor/ticket/21261
https://trac.torproject.org/projects/tor/ticket/11211

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170314194647</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-14 19:46:47-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Onionoo"</subject><body>

[Attachment #2 (multipart/alternative)]


It's a pity. Could you provide me some guide lines and additional materials
for project "ExoneraTor",  I also interested to work with that

2017-03-14 22:27 GMT+03:00 Damian Johnson &lt;atagar@torproject.org&gt;:

&gt; Hi Nur-Magomed. Unfortunately the folks maintaining Onionoo are
&gt; unavailable to mentor this summer. I'd suggest looking into another
&gt; subproject.
&gt;
&gt;
&gt;
&gt; On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt; Hi!
&gt; &gt;
&gt; &gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of information
&gt; &gt; technology (speciality: computer security) of North-Caucasus Federal
&gt; &gt; University. I have experience with Java, SQL, Web (HTML, CSS, JavaScript,
&gt; &gt; PHP) and also I designed protocol based on JSON for Android app.
&gt; &gt;
&gt; &gt;
&gt; &gt; I would love to contribute to the project "Onionoo". Please provide me
&gt; some
&gt; &gt; guide lines and additional materials for study and get a clear
&gt; understanding
&gt; &gt; about the mentioned project. Thank you!
&gt; &gt;
&gt; &gt;
&gt; &gt; Regards
&gt; &gt;
&gt; &gt; Nur-Magomed
&gt; &gt;
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;It's a pity. Could you provide me some guide lines and additional \
materials for project "ExoneraTor",   I also interested to work with that \
&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-14 22:27 \
GMT+03:00 Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Hi Nur-Magomed. Unfortunately the folks \
maintaining Onionoo are&lt;br&gt; unavailable to mentor this summer. I'd suggest \
looking into another&lt;br&gt; subproject.&lt;br&gt;
&lt;div&gt;&lt;div class="gmail-h5"&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; Hi!&lt;br&gt;
&gt;&lt;br&gt;
&gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of information&lt;br&gt;
&gt; technology (speciality: computer security) of North-Caucasus Federal&lt;br&gt;
&gt; University. I have experience with Java, SQL, Web (HTML, CSS, JavaScript,&lt;br&gt;
&gt; PHP) and also I designed protocol based on JSON for Android app.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; I would love to contribute to the project "Onionoo". Please provide me \
some&lt;br&gt; &gt; guide lines and additional materials for study and get a clear \
understanding&lt;br&gt; &gt; about the mentioned project. Thank you!&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; Regards&lt;br&gt;
&gt;&lt;br&gt;
&gt; Nur-Magomed&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170314195118</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-14 19:51:18-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Onionoo"</subject><body>

ExoneraTor is in the same boat. The metrics team are the ones that are
unavailable so everything they own (Onionoo, Atlas, Metrics-Lib,
ExoneraTor, etc) would be poor choices.

You're more than welcome to propose your own project idea but if so
you'll need to find a mentor in our community. If you'd care for
projects with mentors already available then please see...

https://www.torproject.org/getinvolved/volunteer.html.en#Coding

On 3/14/17, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; It's a pity. Could you provide me some guide lines and additional materials
&gt; for project "ExoneraTor",  I also interested to work with that
&gt;
&gt; 2017-03-14 22:27 GMT+03:00 Damian Johnson &lt;atagar@torproject.org&gt;:
&gt;
&gt;&gt; Hi Nur-Magomed. Unfortunately the folks maintaining Onionoo are
&gt;&gt; unavailable to mentor this summer. I'd suggest looking into another
&gt;&gt; subproject.
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt;&gt; &gt; Hi!
&gt;&gt; &gt;
&gt;&gt; &gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of
&gt;&gt; &gt; information
&gt;&gt; &gt; technology (speciality: computer security) of North-Caucasus Federal
&gt;&gt; &gt; University. I have experience with Java, SQL, Web (HTML, CSS,
&gt;&gt; &gt; JavaScript,
&gt;&gt; &gt; PHP) and also I designed protocol based on JSON for Android app.
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; I would love to contribute to the project "Onionoo". Please provide me
&gt;&gt; some
&gt;&gt; &gt; guide lines and additional materials for study and get a clear
&gt;&gt; understanding
&gt;&gt; &gt; about the mentioned project. Thank you!
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; Regards
&gt;&gt; &gt;
&gt;&gt; &gt; Nur-Magomed
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; _______________________________________________
&gt;&gt; &gt; tor-dev mailing list
&gt;&gt; &gt; tor-dev@lists.torproject.org
&gt;&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt; &gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310122859</emailId><senderName>Evan d'Entremont</senderName><senderEmail>evan@evandentremont.com</senderEmail><timestampReceived>2017-03-10 12:28:59-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

This is an interesting project, that being said I have a few concerns I'm hoping you \
can address.

From a security standpoint;

- The instructions for the webservice don't seem to indicate that it is being served \
as a hidden service, or even with ssl. See &lt;Virtualhost *:80&gt;. This would mean that, \
even if chrome is configured properly, when the request is made over Tor it basically \
sends every link on every page you're viewing, in the clear, over the public \
internet; and to your server, if one was to actually use it.

- Unless you intend to share your onionGatherer service with someone else (you \
clearly shouldn't) then 'Require All Granted' is unnecessary and inadvisable.

- [if(responseData['onions'][portion.text] == \
0)](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/Onion \
Gatherer.js#L52)[(responseData[](https://github.com/rfidlabsapienza/onionGatherer-Chro \
meExtension/blob/master/OnionGatherer.js#L52)['](https://github.com/rfidlabsapienza/on \
ionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52)[onions](https://github.c \
om/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52)[']( \
https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGath \
erer.js#L52)[][](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob \
/master/OnionGatherer.js#L52)[portion](https://github.com/rfidlabsapienza/onionGathere \
r-ChromeExtension/blob/master/OnionGatherer.js#L52)[.](https://github.com/rfidlabsapie \
nza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52)[text](https://gith \
ub.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52)[] \
](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGa \
therer.js#L52)[==](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52)[ \
](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGa \
therer.js#L52)[0](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blo \
b/master/OnionGatherer.js#L52)[)](https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52) \
would return an orange circle if portion.text is undefined or null, perhaps stronger \
typing would be appropriate.



From a pure code review standpoint;

- ou include the images twice, once in the root, and once in figures.

- [You've implemented an XTHML parser in regex](http:// \
https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L6 \
); Generally this is inadvisable.

- The version of jQuery that was included (2.2.3) is not the most recent (2.2.4)



Evan



Sent with [ProtonMail](https://protonmail.com) Secure Email.


-------- Original Message --------
Subject: [tor-dev] OnionGatherer: evaluating status of hidden services
Local Time: 10 March 2017 7:58 AM
UTC Time: 10 March 2017 11:58
From: lamorgia@di.uniroma1.it
To: tor-dev@lists.torproject.org
Julinda Stefa &lt;stefa@di.uniroma1.it&gt;, simone raponi \
&lt;raponi.1539620@studenti.uniroma1.it&gt;, Alessandro Mei &lt;mei@di.uniroma1.it&gt;


Dear members of the Tor community,

we are a research group at Sapienza University, Rome, Italy. We do research on \
distributed systems, Tor, and the Dark Web. As part of our work, we have developed \
OnionGatherer, a service that gives up-to-date information about Dark Web hidden \
services to Tor users.

OnionGatherer is implemented as a Google Chrome extension coupled with a back-end \
service running on our servers. As the user surfes the Web, OnionGatherer collects \
all the URLs from the page and adds a green bullet next ot the URL if the hidden \
service is up and running, an orange one if the system are currently evaluating the \
address' status or a red one if the hidden service is down. The status of the hidden \
services is pulled from our servers, which keep track of all the services found by \
the users and constantly monitor their status. When a new hidden service is found, \
OnionGatherer checks its status in real time, informs the user accordingly, and adds \
it to the database.

We believe that OnionGatherer can be very useful to Tor users that are interested in \
surfing the Dark Web. Indeed, hidden services are born and shut down very frequently, \
and it is often time consuming and frustrating to check manually which services are \
still active.

We kindky ask if you can help disseminate our project ---the largest is the number of \
users of OnionGatherer, the largest the database and the best the service we can \
provide. Currently the software is in Beta version and released on GitHub at the \
following link:

client: https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension
server: https://github.com/rfidlabsapienza/onionGatherer-Server

Any feedback or issue are really appreciated.
Thanks in advance. Best regards,

The research group:
A. Mei, J. Stefa, M. La Morgia, S. Raponi


[Attachment #5 (text/html)]

&lt;div&gt;This is an interesting project, that being said I have a few concerns I'm hoping \
you can address.&lt;br&gt;&lt;br&gt;From a security standpoint;&lt;br&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;The instructions \
for the webservice don't seem to indicate that it is being served as a hidden \
service, or even with ssl. See &lt;Virtualhost *:80&gt;. This would mean that, even \
if chrome is configured properly, when the request is made over Tor it basically \
sends every link on every page you're viewing, in the clear, over the public \
internet; and to your server, if one was to actually use it.&lt;span class="colour" \
style="color:rgb(167, 29, 93)"&gt; &lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Unless you intend to share your \
onionGatherer service with someone else (you clearly shouldn't) then 'Require All \
Granted' is unnecessary and inadvisable.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="highlight" \
style="background-color:rgb(255, 255, 255)"&gt;&lt;span class="colour" \
style="color:rgb(167, 29, 93)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, \
Consolas, "Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;if(responseData['onions'][portion.text] == \
0)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(36, 41, 46)"&gt;&lt;span \
class="font" style="font-family:SFMono-Regular, Consolas, "Liberation \
Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;(responseData[&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" \
style="color:rgb(24, 54, 145)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, \
Consolas, "Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;span class="colour" style="color:rgb(24, 54, 145)"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow"&gt;'&lt;/a&gt;&lt;/span&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow"&gt;onions&lt;/a&gt;&lt;span \
class="colour" style="color:rgb(24, 54, 145)"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;'&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" \
style="color:rgb(36, 41, 46)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, \
Consolas, "Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;][&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(51, \
51, 51)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, Consolas, \
"Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;portion&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" \
style="color:rgb(36, 41, 46)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, \
Consolas, "Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;.&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(0, \
134, 179)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, Consolas, \
"Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;text&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(36, \
41, 46)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, Consolas, \
"Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow"&gt;] \
&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(167, 29, 93)"&gt;&lt;span \
class="font" style="font-family:SFMono-Regular, Consolas, "Liberation \
Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;==&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(36, \
41, 46)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, Consolas, \
"Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow"&gt; \
&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(0, 134, 179)"&gt;&lt;span \
class="font" style="font-family:SFMono-Regular, Consolas, "Liberation \
Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;0&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="colour" style="color:rgb(36, \
41, 46)"&gt;&lt;span class="font" style="font-family:SFMono-Regular, Consolas, \
"Liberation Mono", Menlo, Courier, monospace"&gt;&lt;span class="size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" \
rel="nofollow"&gt;)&lt;/a&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; would return an orange circle \
if portion.text is undefined or null, perhaps stronger typing would be \
appropriate. &lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From a pure code review \
standpoint;&lt;br&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;ou include the images twice, once in the root, and once \
in figures.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http:// \
https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L6 \
" title="You've implemented an XTHML parser in regex. " rel="nofollow"&gt;You've \
implemented an XTHML parser in regex&lt;/a&gt;; Generally this is \
inadvisable. &lt;br&gt;&lt;/li&gt;&lt;li&gt;The version of jQuery that was included (2.2.3) is not \
the most recent (2.2.4)&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Evan&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block "&gt;&lt;div class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton "&gt;Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite" \
class="protonmail_quote"&gt;&lt;div&gt;-------- Original Message \
--------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: [tor-dev] OnionGatherer: evaluating status of hidden \
services&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: 10 March 2017 7:58 AM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: 10 \
March 2017 11:58&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: lamorgia@di.uniroma1.it&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;Julinda Stefa \
&lt;stefa@di.uniroma1.it&gt;, simone raponi \
&lt;raponi.1539620@studenti.uniroma1.it&gt;, Alessandro Mei \
&lt;mei@di.uniroma1.it&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div \
style="font-size:12.8px"&gt;Dear members of the Tor community,&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;we are a research \
group at Sapienza University, Rome, Italy. We do research on distributed systems, \
Tor, and the Dark Web. As part of our work, we have developed OnionGatherer, a \
service that gives up-to-date information about Dark Web hidden services to Tor \
users.&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;OnionGatherer is implemented as a Google Chrome extension \
coupled with a back-end service running on our servers. As the user surfes the Web, \
OnionGatherer collects all the URLs from the page and adds a green bullet next ot the \
URL if the hidden service is up and running, an orange one if the system are \
currently evaluating the address' status or a red one if the hidden service is down. \
The status of the hidden services is pulled from our servers, which keep track of all \
the services found by the users and constantly monitor their status. When a new \
hidden service is found, OnionGatherer checks its status in real time, informs the \
user accordingly, and adds it to the database.&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;We believe that \
OnionGatherer can be very useful to Tor users that are interested in surfing the Dark \
Web. Indeed, hidden services are born and shut down very frequently, and it is often \
time consuming and frustrating to check manually which services are still \
active.&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;We kindky ask if you can help disseminate our project ---the \
largest is the number of users of  OnionGatherer, the largest the database and \
the best the service we can provide. Currently the software is in Beta version and \
released on GitHub at the following link:&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;client: &lt;a \
rel="noreferrer nofollow noopener" \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension"&gt;https://github.com/&lt;wbr&gt;rfidlabsapienza/onionGatherer-&lt;wbr&gt;ChromeExtension&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;server: &lt;a rel="noreferrer nofollow noopener" \
href="https://github.com/rfidlabsapienza/onionGatherer-Server"&gt;https://github.com/&lt;wbr&gt;rfidlabsapienza/onionGatherer-&lt;wbr&gt;Server&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Any feedback or \
issue are really appreciated.&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Thanks in \
advance. Best regards,&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;The research group:&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;A. Mei, J. Stefa, M. La Morgia, S. \
Raponi&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310163905</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-03-10 16:39:05-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:
&gt; we are a research group at Sapienza University, Rome, Italy. We do research on
&gt; distributed systems, Tor, and the Dark Web. As part of our work, we have
&gt; developed OnionGatherer, a service that gives up-to-date information about Dark
&gt; Web hidden services to Tor users.

...and presumably helps you build a crowdsourced list of onion services
that you plan to use for some other research purpose?

If you're planning a research project on Tor users, you should write to
the research safety board and get ideas about how ot do it in a way that
minimizes risk.
https://research.torproject.org/safetyboard.html

This idea seems, to me, to have a lot of privacy problems. You're asking
people to use Chrome instead of Tor Browser, which means they will be
vulnerable to a lot of fingerprinting and trivial deanonymization
attacks. Your extension reports not only the onion domains that it
finds, but also the URL of the page you were browsing at the time:
	var onionsJson = JSON.stringify({onions:onions, website: window.location.href});
You need to at least inform your research subjects/users what of their
private data you are storing and what you are doing with it.

You're using two different regexes for onion URLs that aren't the same.
The one used during replacement doesn't match "https", so I guess it
will fail on URLs like https://facebookcorewwwi.onion/.
	/^(http(s)?:\/\/)?.{16}(\.onion)\/?.*$/
	/(http:\/\/)?\b[\w\d]{16}\.onion(\/[\S]*|)/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310172504</emailId><senderName>Massimo La Morgia</senderName><senderEmail>lamorgia@di.uniroma1.it</senderEmail><timestampReceived>2017-03-10 17:25:04-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt;
wrote:

&gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:
&gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do
&gt; research on
&gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we have
&gt; &gt; developed OnionGatherer, a service that gives up-to-date information
&gt; about Dark
&gt; &gt; Web hidden services to Tor users.
&gt;
&gt; ...and presumably helps you build a crowdsourced list of onion services
&gt; that you plan to use for some other research purpose?
&gt;

yes, of course in this way we are building a crowdsourced list of onion
services, but is not really different from onion directories.
At this time we have no plan for other research that use this crowdsourced
list.


&gt;
&gt; If you're planning a research project on Tor users, you should write to
&gt; the research safety board and get ideas about how ot do it in a way that
&gt; minimizes risk.
&gt; https://research.torproject.org/safetyboard.html
&gt;
&gt;
thank you for the suggestion.


&gt; This idea seems, to me, to have a lot of privacy problems. You're asking
&gt; people to use Chrome instead of Tor Browser, which means they will be
&gt; vulnerable to a lot of fingerprinting and trivial deanonymization
&gt; attacks.


No we are not asking people to use chrome for browsing on tor, but we are
offering a service that can help them to know if a onion address is up
before start to surf with Tor Browser


&gt; Your extension reports not only the onion domains that it
&gt; finds, but also the URL of the page you were browsing at the time:
&gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt; window.location.href});
&gt; You need to at least inform your research subjects/users what of their
&gt; private data you are storing and what you are doing with it.
&gt;

As you can see from the source code we are not storing any sensitive data
like ip or users information. do you think that only URL page can damage
user privacy?




&gt; You're using two different regexes for onion URLs that aren't the same.
&gt; The one used during replacement doesn't match "https", so I guess it
&gt; will fail on URLs like https://facebookcorewwwi.onion/.
&gt;         /^(http(s)?:\/\/)?.{16}(\.onion)\/?.*$/
&gt;         /(http:\/\/)?\b[\w\d]{16}\.onion(\/[\S]*|)/
&gt;

Yes, you right, thank you for the feedback.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Mar \
10, 2017 at 5:39 PM, David Fifield &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;On Fri, Mar 10, 2017 at 12:58:55PM +0100, \
Massimo La Morgia wrote:&lt;br&gt; &gt; we are a research group at Sapienza University, \
Rome, Italy. We do research on&lt;br&gt; &gt; distributed systems, Tor, and the Dark Web. \
As part of our work, we have&lt;br&gt; &gt; developed OnionGatherer, a service that gives \
up-to-date information about Dark&lt;br&gt; &gt; Web hidden services to Tor users.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;...and presumably helps you build a crowdsourced list of onion services&lt;br&gt;
that you plan to use for some other research \
purpose?&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;yes, of course in this way we are \
building a crowdsourced list of onion services, but is not really different from \
onion directories.&lt;/div&gt;&lt;div&gt;At this time we have no plan for other research that use \
this crowdsourced list.&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; &lt;br&gt;
If you're planning a research project on Tor users, you should write to&lt;br&gt;
the research safety board and get ideas about how ot do it in a way that&lt;br&gt;
minimizes risk.&lt;br&gt;
&lt;a href="https://research.torproject.org/safetyboard.html" rel="noreferrer" \
target="_blank"&gt;https://research.torproject.&lt;wbr&gt;org/safetyboard.html&lt;/a&gt;&lt;br&gt; \
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;thank you for the suggestion.&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; This idea seems, to me, to have a lot of privacy problems. \
You're asking&lt;br&gt; people to use Chrome instead of Tor Browser, which means they \
will be&lt;br&gt; vulnerable to a lot of fingerprinting and trivial deanonymization&lt;br&gt;
attacks.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No we are not asking people to use chrome \
for browsing on tor, but we are offering a service that can help them to know if a \
onion address is up before start to surf with Tor Browser&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; Your extension reports not only the onion domains that \
it&lt;br&gt; finds, but also the URL of the page you were browsing at the time:&lt;br&gt;
            var onionsJson = JSON.stringify({onions:onions, website: \
window.location.href});&lt;br&gt; You need to at least inform your research subjects/users \
what of their&lt;br&gt; private data you are storing and what you are doing with \
it.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As you can see from the source code we are \
not storing any sensitive data like ip or users information. do you think that only \
URL page can damage user \
privacy?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;br&gt;
You're using two different regexes for onion URLs that aren't the same.&lt;br&gt;
The one used during replacement doesn't match "https", so I guess \
it&lt;br&gt; will fail on URLs like &lt;a href="https://facebookcorewwwi.onion/" \
rel="noreferrer" target="_blank"&gt;https://facebookcorewwwi.&lt;wbr&gt;onion/&lt;/a&gt;.&lt;br&gt;  \
/^(http(s)?:\/\/)?.{16}(\.&lt;wbr&gt;onion)\/?.*$/&lt;br&gt;  \
/(http:\/\/)?\b[\w\d]{16}\.&lt;wbr&gt;onion(\/[\S]*|)/&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, \
you right, thank you for the feedback.&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310175247</emailId><senderName></senderName><senderEmail>ansijax</senderEmail><timestampReceived>2017-03-10 17:52:47-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


2017-03-10 13:28 GMT+01:00 Evan d'Entremont &lt;evan@evandentremont.com&gt;:

&gt; This is an interesting project, that being said I have a few concerns I'm
&gt; hoping you can address.
&gt; 
&gt; From a security standpoint;
&gt; 
&gt; - The instructions for the webservice don't seem to indicate that it
&gt; is being served as a hidden service, or even with ssl. See &lt;Virtualhost
&gt; *:80&gt;. This would mean that, even if chrome is configured properly, when
&gt; the request is made over Tor it basically sends every link on every page
&gt; you're viewing, in the clear, over the public internet; and to your server,
&gt; if one was to actually use it.
&gt; 
&gt; 

No, the webservice is not served as hidden service, but it runs with ssl
 and requests on port 80 are redirected on port 443 of this URL :
https://lamorgiam.redi.uniroma1.it/onionGatherer.
The configuration reported with &lt;Virtualhost *:80&gt; on the MD file is for a
generic setup of the server.



&gt; 
&gt; -
&gt; - Unless you intend to share your onionGatherer service with someone
&gt; else (you clearly shouldn't) then 'Require All Granted' is unnecessary and
&gt; inadvisable.
&gt; - if(responseData['onions'][portion.text] == 0)
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  (responseData[
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  '
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  onions
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  '
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  ][
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  portion
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;                 
&gt; .
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  text
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;]
&gt;  
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  ==
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  0
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  )
&gt; &lt;https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52&gt;
&gt;  would return an orange circle if portion.text is undefined or null,
&gt; perhaps stronger typing would be appropriate.
&gt; 
&gt; 
&gt; From a pure code review standpoint;
&gt; 
&gt; - ou include the images twice, once in the root, and once in figures.
&gt; - You've implemented an XTHML parser in regex
&gt; &lt;http://%C2%A0https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L6&gt;;
&gt;  Generally this is inadvisable.
&gt; - The version of jQuery that was included (2.2.3) is not the most
&gt; recent (2.2.4)
&gt; 
&gt; 
&gt; Thank you for your feedback. Your advices are really appreciated. we will
try to fix asap


&gt; Evan
&gt; 
&gt; 
&gt; Sent with ProtonMail &lt;https://protonmail.com&gt; Secure Email.
&gt; 
&gt; -------- Original Message --------
&gt; Subject: [tor-dev] OnionGatherer: evaluating status of hidden services
&gt; Local Time: 10 March 2017 7:58 AM
&gt; UTC Time: 10 March 2017 11:58
&gt; From: lamorgia@di.uniroma1.it
&gt; To: tor-dev@lists.torproject.org
&gt; Julinda Stefa &lt;stefa@di.uniroma1.it&gt;, simone raponi &lt;
&gt; raponi.1539620@studenti.uniroma1.it&gt;, Alessandro Mei &lt;mei@di.uniroma1.it&gt;
&gt; 
&gt; Dear members of the Tor community,
&gt; 
&gt; we are a research group at Sapienza University, Rome, Italy. We do
&gt; research on distributed systems, Tor, and the Dark Web. As part of our
&gt; work, we have developed OnionGatherer, a service that gives up-to-date
&gt; information about Dark Web hidden services to Tor users.
&gt; 
&gt; OnionGatherer is implemented as a Google Chrome extension coupled with a
&gt; back-end service running on our servers. As the user surfes the Web,
&gt; OnionGatherer collects all the URLs from the page and adds a green bullet
&gt; next ot the URL if the hidden service is up and running, an orange one if
&gt; the system are currently evaluating the address' status or a red one if the
&gt; hidden service is down. The status of the hidden services is pulled from
&gt; our servers, which keep track of all the services found by the users and
&gt; constantly monitor their status. When a new hidden service is found,
&gt; OnionGatherer checks its status in real time, informs the user accordingly,
&gt; and adds it to the database.
&gt; 
&gt; We believe that OnionGatherer can be very useful to Tor users that are
&gt; interested in surfing the Dark Web. Indeed, hidden services are born and
&gt; shut down very frequently, and it is often time consuming and frustrating
&gt; to check manually which services are still active.
&gt; 
&gt; We kindky ask if you can help disseminate our project ---the largest is
&gt; the number of users of  OnionGatherer, the largest the database and the
&gt; best the service we can provide. Currently the software is in Beta version
&gt; and released on GitHub at the following link:
&gt; 
&gt; client: https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension
&gt; server: https://github.com/rfidlabsapienza/onionGatherer-Server
&gt; 
&gt; Any feedback or issue are really appreciated.
&gt; Thanks in advance. Best regards,
&gt; 
&gt; The research group:
&gt; A. Mei, J. Stefa, M. La Morgia, S. Raponi
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-10 \
13:28 GMT+01:00 Evan d'Entremont &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:evan@evandentremont.com" \
target="_blank"&gt;evan@evandentremont.com&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div&gt;This is an interesting project, that being \
said I have a few concerns I'm hoping you can address.&lt;br&gt;&lt;br&gt;From a security \
standpoint;&lt;br&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;The instructions for the webservice don't seem to \
indicate that it is being served as a hidden service, or even with ssl. See \
&lt;Virtualhost *:80&gt;. This would mean that, even if chrome is configured \
properly, when the request is made over Tor it basically sends every link on every \
page you're viewing, in the clear, over the public internet; and to your server, \
if one was to actually use it.&lt;span class="gmail-m_-8951951510522046151colour" \
style="color:rgb(167,29,93)"&gt; \
&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No, the webservice \
is not served as hidden service, but it runs with ssl   and requests on port 80 are \
redirected on port 443 of this URL :  &lt;a \
href="https://lamorgiam.redi.uniroma1.it/onionGatherer" \
style="box-sizing:border-box;color:rgb(3,102,214);outline-width:0px;font-family:-apple-system,blinkmacsystemfont,"segoe \
ui",helvetica,arial,sans-serif,"apple color emoji","segoe ui \
emoji","segoe ui \
symbol";font-size:16px"&gt;https://lamorgiam.redi.uniroma1.it/onionGatherer&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;The \
configuration reported with &lt;Virtualhost *:80&gt; on the MD file is for a generic \
setup of the server.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;ul&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Unless you intend to share \
your onionGatherer service with someone else (you clearly shouldn't) then \
'Require All Granted' is unnecessary and inadvisable.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
class="gmail-m_-8951951510522046151highlight" \
style="background-color:rgb(255,255,255)"&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(167,29,93)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;if(responseData['onions'][&lt;wbr&gt;portion.text] == \
0)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="gmail-m_-8951951510522046151colour" \
style="color:rgb(36,41,46)"&gt;&lt;span class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;(responseData[&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(24,54,145)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;span class="gmail-m_-8951951510522046151colour" \
style="color:rgb(24,54,145)"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;'&lt;/a&gt;&lt;/span&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;onions&lt;/a&gt;&lt;span class="gmail-m_-8951951510522046151colour" \
style="color:rgb(24,54,145)"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;'&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(36,41,46)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;][&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(51,51,51)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;port&lt;wbr&gt;ion&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(36,41,46)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;.&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(0,134,179)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;text&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(36,41,46)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;] &lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(167,29,93)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;==&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(36,41,46)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt; &lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(0,134,179)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;0&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span \
class="gmail-m_-8951951510522046151colour" style="color:rgb(36,41,46)"&gt;&lt;span \
class="gmail-m_-8951951510522046151font" \
style="font-family:sfmono-regular,consolas,"liberation \
mono",menlo,courier,monospace"&gt;&lt;span class="gmail-m_-8951951510522046151size" \
style="font-size:12px"&gt;&lt;a \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L52" \
title="if(responseData['onions'][portion.text] == 0)" rel="nofollow" \
target="_blank"&gt;)&lt;/a&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; would return an orange circle if \
portion.text is undefined or null, perhaps stronger typing would be appropriate.  \
&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From a pure code review \
standpoint;&lt;br&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;ou include the images twice, once in the root, and once \
in figures.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a \
href="http://%C2%A0https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension/blob/master/OnionGatherer.js#L6" \
title="You've implemented an XTHML parser in regex." rel="nofollow" \
target="_blank"&gt;You've implemented an XTHML parser in regex&lt;/a&gt;; Generally this \
is inadvisable.  &lt;br&gt;&lt;/li&gt;&lt;li&gt;The version of jQuery that was included (2.2.3) is not \
the most recent (2.2.4)&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Thank you for \
your feedback. Your advices are really appreciated. we will try to fix \
asap&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Evan&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail-m_-8951951510522046151protonmail_signature_block"&gt;&lt;div \
class="gmail-m_-8951951510522046151protonmail_signature_block-user \
gmail-m_-8951951510522046151protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail-m_-8951951510522046151protonmail_signature_block-proton"&gt;Sent with &lt;a \
href="https://protonmail.com" target="_blank"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail-HOEnZb"&gt;&lt;div \
class="gmail-h5"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite" \
class="gmail-m_-8951951510522046151protonmail_quote"&gt;&lt;div&gt;-------- Original Message \
--------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: [tor-dev] OnionGatherer: evaluating status of hidden \
services&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: 10 March 2017 7:58 AM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: 10 \
March 2017 11:58&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: &lt;a href="mailto:lamorgia@di.uniroma1.it" \
target="_blank"&gt;lamorgia@di.uniroma1.it&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: &lt;a \
href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Julinda Stefa &lt;&lt;a \
href="mailto:stefa@di.uniroma1.it" target="_blank"&gt;stefa@di.uniroma1.it&lt;/a&gt;&gt;, \
simone raponi &lt;&lt;a href="mailto:raponi.1539620@studenti.uniroma1.it" \
target="_blank"&gt;raponi.1539620@studenti.&lt;wbr&gt;uniroma1.it&lt;/a&gt;&gt;, Alessandro Mei \
&lt;&lt;a href="mailto:mei@di.uniroma1.it" \
target="_blank"&gt;mei@di.uniroma1.it&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div style="font-size:12.8px"&gt;Dear members of the Tor \
community,&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;we are a research group at Sapienza University, Rome, Italy. \
We do research on distributed systems, Tor, and the Dark Web. As part of our work, we \
have developed OnionGatherer, a service that gives up-to-date information about Dark \
Web hidden services to Tor users.&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;OnionGatherer is \
implemented as a Google Chrome extension coupled with a back-end service running on \
our servers. As the user surfes the Web, OnionGatherer collects all the URLs from the \
page and adds a green bullet next ot the URL if the hidden service is up and running, \
an orange one if the system are currently evaluating the address' status or a red \
one if the hidden service is down. The status of the hidden services is pulled from \
our servers, which keep track of all the services found by the users and constantly \
monitor their status. When a new hidden service is found, OnionGatherer checks its \
status in real time, informs the user accordingly, and adds it to the \
database.&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;We believe that OnionGatherer can be very useful to Tor \
users that are interested in surfing the Dark Web. Indeed, hidden services are born \
and shut down very frequently, and it is often time consuming and frustrating to \
check manually which services are still active.&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;We kindky ask if you \
can help disseminate our project ---the largest is the number of users of   \
OnionGatherer, the largest the database and the best the service we can provide. \
Currently the software is in Beta version and released on GitHub at the following \
link:&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;client:  &lt;a rel="noreferrer nofollow noopener" \
href="https://github.com/rfidlabsapienza/onionGatherer-ChromeExtension" \
target="_blank"&gt;https://github.com/rfi&lt;wbr&gt;dlabsapienza/onionGatherer-Chr&lt;wbr&gt;omeExtension&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;server:  &lt;a rel="noreferrer nofollow noopener" \
href="https://github.com/rfidlabsapienza/onionGatherer-Server" \
target="_blank"&gt;https://github.com/rfi&lt;wbr&gt;dlabsapienza/onionGatherer-Ser&lt;wbr&gt;ver&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Any feedback or \
issue are really appreciated.&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Thanks in \
advance. Best regards,&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;The research group:&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;A. Mei, J. Stefa, M. La Morgia, S. \
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310190546</emailId><senderName>ng0</senderName><senderEmail>contact.ng0@cryptolab.net</senderEmail><timestampReceived>2017-03-10 19:05:46-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

Massimo La Morgia transcribed 6.7K bytes:
&gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt; wrote:
&gt; 
&gt; &gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:
&gt; &gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do
&gt; &gt; research on
&gt; &gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we have
&gt; &gt; &gt; developed OnionGatherer, a service that gives up-to-date information
&gt; &gt; about Dark
&gt; &gt; &gt; Web hidden services to Tor users.
&gt; &gt;
&gt; &gt; ...and presumably helps you build a crowdsourced list of onion services
&gt; &gt; that you plan to use for some other research purpose?
&gt; &gt;
&gt; 
&gt; yes, of course in this way we are building a crowdsourced list of onion
&gt; services, but is not really different from onion directories.
&gt; At this time we have no plan for other research that use this crowdsourced
&gt; list.
&gt; 
&gt; 
&gt; &gt;
&gt; &gt; If you're planning a research project on Tor users, you should write to
&gt; &gt; the research safety board and get ideas about how ot do it in a way that
&gt; &gt; minimizes risk.
&gt; &gt; https://research.torproject.org/safetyboard.html
&gt; &gt;
&gt; &gt;
&gt; thank you for the suggestion.
&gt; 
&gt; 
&gt; &gt; This idea seems, to me, to have a lot of privacy problems. You're asking
&gt; &gt; people to use Chrome instead of Tor Browser, which means they will be
&gt; &gt; vulnerable to a lot of fingerprinting and trivial deanonymization
&gt; &gt; attacks.
&gt; 
&gt; 
&gt; No we are not asking people to use chrome for browsing on tor, but we are
&gt; offering a service that can help them to know if a onion address is up
&gt; before start to surf with Tor Browser

Having only an extension for Chrome based browsers implies asking users
to use Chrome based browsers. If there were a choice between Firefox and
Chrome extensions, it would be less clear and not implying.

&gt; &gt; Your extension reports not only the onion domains that it
&gt; &gt; finds, but also the URL of the page you were browsing at the time:
&gt; &gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt; &gt; window.location.href});
&gt; &gt; You need to at least inform your research subjects/users what of their
&gt; &gt; private data you are storing and what you are doing with it.
&gt; &gt;
&gt; 
&gt; As you can see from the source code we are not storing any sensitive data
&gt; like ip or users information. do you think that only URL page can damage
&gt; user privacy?

This aside, do you just check if the page still exists or the top level
onion domain you found this page on? If so, this would be an improvement
I'd suggest, to only use the toplevel domain.
I have not looked at your code.

&gt; 
&gt; 
&gt; 
&gt; &gt; You're using two different regexes for onion URLs that aren't the same.
&gt; &gt; The one used during replacement doesn't match "https", so I guess it
&gt; &gt; will fail on URLs like https://facebookcorewwwi.onion/.
&gt; &gt;         /^(http(s)?:\/\/)?.{16}(\.onion)\/?.*$/
&gt; &gt;         /(http:\/\/)?\b[\w\d]{16}\.onion(\/[\S]*|)/
&gt; &gt;
&gt; 
&gt; Yes, you right, thank you for the feedback.

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170310200208</emailId><senderName>simone raponi</senderName><senderEmail>raponi.1539620@studenti.uniroma1.it</senderEmail><timestampReceived>2017-03-10 20:02:08-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


2017-03-10 21:13 GMT+01:00 ng0 &lt;contact.ng0@cryptolab.net&gt;:

&gt; Massimo La Morgia transcribed 6.7K bytes:
&gt; &gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt; &gt; wrote:
&gt; &gt;
&gt; &gt; &gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:
&gt; &gt; &gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do
&gt; &gt; &gt; research on
&gt; &gt; &gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we
&gt; have
&gt; &gt; &gt; &gt; developed OnionGatherer, a service that gives up-to-date information
&gt; &gt; &gt; about Dark
&gt; &gt; &gt; &gt; Web hidden services to Tor users.
&gt; &gt; &gt;
&gt; &gt; &gt; ...and presumably helps you build a crowdsourced list of onion services
&gt; &gt; &gt; that you plan to use for some other research purpose?
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; yes, of course in this way we are building a crowdsourced list of onion
&gt; &gt; services, but is not really different from onion directories.
&gt; &gt; At this time we have no plan for other research that use this
&gt; crowdsourced
&gt; &gt; list.
&gt; &gt;
&gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; If you're planning a research project on Tor users, you should write to
&gt; &gt; &gt; the research safety board and get ideas about how ot do it in a way
&gt; that
&gt; &gt; &gt; minimizes risk.
&gt; &gt; &gt; https://research.torproject.org/safetyboard.html
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; thank you for the suggestion.
&gt; &gt;
&gt; &gt;
&gt; &gt; &gt; This idea seems, to me, to have a lot of privacy problems. You're
&gt; asking
&gt; &gt; &gt; people to use Chrome instead of Tor Browser, which means they will be
&gt; &gt; &gt; vulnerable to a lot of fingerprinting and trivial deanonymization
&gt; &gt; &gt; attacks.
&gt; &gt;
&gt; &gt;
&gt; &gt; No we are not asking people to use chrome for browsing on tor, but we are
&gt; &gt; offering a service that can help them to know if a onion address is up
&gt; &gt; before start to surf with Tor Browser
&gt;
&gt; Having only an extension for Chrome based browsers implies asking users
&gt; to use Chrome based browsers. If there were a choice between Firefox and
&gt; Chrome extensions, it would be less clear and not implying.
&gt;

Yes, you're right, but we have created this extension in order to offer a
service to people.
We chose to start with Chrome because it has a greater number of users.
We would be happy if it will be used and also developed for Firefox.


&gt; &gt; &gt; Your extension reports not only the onion domains that it
&gt; &gt; &gt; finds, but also the URL of the page you were browsing at the time:
&gt; &gt; &gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt; &gt; &gt; window.location.href});
&gt; &gt; &gt; You need to at least inform your research subjects/users what of their
&gt; &gt; &gt; private data you are storing and what you are doing with it.
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; As you can see from the source code we are not storing any sensitive data
&gt; &gt; like ip or users information. do you think that only URL page can damage
&gt; &gt; user privacy?
&gt;
&gt; This aside, do you just check if the page still exists or the top level
&gt; onion domain you found this page on? If so, this would be an improvement
&gt; I'd suggest, to only use the toplevel domain.
&gt; I have not looked at your code.
&gt;

Thank you for the suggestion, we'll improve the website's URL management
asap.

&gt;
&gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; &gt; &gt; You're using two different regexes for onion URLs that aren't the same.
&gt; &gt; &gt; The one used during replacement doesn't match "https", so I guess it
&gt; &gt; &gt; will fail on URLs like https://facebookcorewwwi.onion/.
&gt; &gt; &gt;         /^(http(s)?:\/\/)?.{16}(\.onion)\/?.*$/
&gt; &gt; &gt;         /(http:\/\/)?\b[\w\d]{16}\.onion(\/[\S]*|)/
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; Yes, you right, thank you for the feedback.
&gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-10 \
21:13 GMT+01:00 ng0 &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:contact.ng0@cryptolab.net" \
target="_blank"&gt;contact.ng0@cryptolab.net&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Massimo La Morgia transcribed 6.7K bytes:&lt;br&gt; \
&lt;div&gt;&lt;div class="gmail-h5"&gt;&gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;&lt;a \
href="mailto:david@bamsoftware.com"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;br&gt; &gt; wrote:&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:&lt;br&gt;
&gt; &gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do&lt;br&gt;
&gt; &gt; research on&lt;br&gt;
&gt; &gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we \
have&lt;br&gt; &gt; &gt; &gt; developed OnionGatherer, a service that gives up-to-date \
information&lt;br&gt; &gt; &gt; about Dark&lt;br&gt;
&gt; &gt; &gt; Web hidden services to Tor users.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; ...and presumably helps you build a crowdsourced list of onion services&lt;br&gt;
&gt; &gt; that you plan to use for some other research purpose?&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; yes, of course in this way we are building a crowdsourced list of onion&lt;br&gt;
&gt; services, but is not really different from onion directories.&lt;br&gt;
&gt; At this time we have no plan for other research that use this crowdsourced&lt;br&gt;
&gt; list.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; If you're planning a research project on Tor users, you should write \
to&lt;br&gt; &gt; &gt; the research safety board and get ideas about how ot do it in a way \
that&lt;br&gt; &gt; &gt; minimizes risk.&lt;br&gt;
&gt; &gt; &lt;a href="https://research.torproject.org/safetyboard.html" rel="noreferrer" \
target="_blank"&gt;https://research.torproject.&lt;wbr&gt;org/safetyboard.html&lt;/a&gt;&lt;br&gt; &gt; \
&gt;&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt; thank you for the suggestion.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; This idea seems, to me, to have a lot of privacy problems. You're \
asking&lt;br&gt; &gt; &gt; people to use Chrome instead of Tor Browser, which means they \
will be&lt;br&gt; &gt; &gt; vulnerable to a lot of fingerprinting and trivial \
deanonymization&lt;br&gt; &gt; &gt; attacks.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; No we are not asking people to use chrome for browsing on tor, but we are&lt;br&gt;
&gt; offering a service that can help them to know if a onion address is up&lt;br&gt;
&gt; before start to surf with Tor Browser&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;Having only an extension for Chrome based browsers implies asking \
users&lt;br&gt; to use Chrome based browsers. If there were a choice between Firefox \
and&lt;br&gt; Chrome extensions, it would be less clear and not \
implying.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, you're right, but we have \
created this extension in order to offer a service to people.  &lt;/div&gt;&lt;div&gt;We chose to \
start with Chrome because it has a greater number of users.&lt;/div&gt;&lt;div&gt;We would be \
happy if it will be used and also developed for \
Firefox.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px \
0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; &lt;span \
class="gmail-"&gt;&lt;br&gt; &gt; &gt; Your extension reports not only the onion domains that \
it&lt;br&gt; &gt; &gt; finds, but also the URL of the page you were browsing at the \
time:&lt;br&gt; &gt; &gt;              var onionsJson = JSON.stringify({onions:onions, \
website:&lt;br&gt; &gt; &gt; window.location.href});&lt;br&gt;
&gt; &gt; You need to at least inform your research subjects/users what of their&lt;br&gt;
&gt; &gt; private data you are storing and what you are doing with it.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; As you can see from the source code we are not storing any sensitive data&lt;br&gt;
&gt; like ip or users information. do you think that only URL page can damage&lt;br&gt;
&gt; user privacy?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;This aside, do you just check if the page still exists or the top level&lt;br&gt;
onion domain you found this page on? If so, this would be an improvement&lt;br&gt;
I'd suggest, to only use the toplevel domain.&lt;br&gt;
I have not looked at your code.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you for the \
suggestion, we'll improve the website's URL management asap.&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt; &lt;span class="gmail-im gmail-HOEnZb"&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; You're using two different regexes for onion URLs that aren't the \
same.&lt;br&gt; &gt; &gt; The one used during replacement doesn't match \
"https", so I guess it&lt;br&gt; &gt; &gt; will fail on URLs like &lt;a \
href="https://facebookcorewwwi.onion/" rel="noreferrer" \
target="_blank"&gt;https://facebookcorewwwi.&lt;wbr&gt;onion/&lt;/a&gt;.&lt;br&gt; &gt; &gt;              \
/^(http(s)?:\/\/)?.{16}(\.&lt;wbr&gt;onion)\/?.*$/&lt;br&gt; &gt; &gt;              \
/(http:\/\/)?\b[\w\d]{16}\.&lt;wbr&gt;onion(\/[\S]*|)/&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; Yes, you right, thank you for the feedback.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;&lt;div class="gmail-HOEnZb"&gt;&lt;div class="gmail-h5"&gt;&gt; \
______________________________&lt;wbr&gt;_________________&lt;br&gt; &gt; tor-dev mailing \
list&lt;br&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170310200655</emailId><senderName>simone raponi</senderName><senderEmail>raponi.1539620@studenti.uniroma1.it</senderEmail><timestampReceived>2017-03-10 20:06:55-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


The server is temporarily down due to security improvements, thank you very
much for your suggestions.

2017-03-10 21:02 GMT+01:00 simone raponi &lt;
raponi.1539620@studenti.uniroma1.it&gt;:

&gt;
&gt;
&gt; 2017-03-10 21:13 GMT+01:00 ng0 &lt;contact.ng0@cryptolab.net&gt;:
&gt;
&gt;&gt; Massimo La Morgia transcribed 6.7K bytes:
&gt;&gt; &gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt;&gt; &gt; wrote:
&gt;&gt; &gt;
&gt;&gt; &gt; &gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:
&gt;&gt; &gt; &gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do
&gt;&gt; &gt; &gt; research on
&gt;&gt; &gt; &gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we
&gt;&gt; have
&gt;&gt; &gt; &gt; &gt; developed OnionGatherer, a service that gives up-to-date information
&gt;&gt; &gt; &gt; about Dark
&gt;&gt; &gt; &gt; &gt; Web hidden services to Tor users.
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; ...and presumably helps you build a crowdsourced list of onion
&gt;&gt; services
&gt;&gt; &gt; &gt; that you plan to use for some other research purpose?
&gt;&gt; &gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; yes, of course in this way we are building a crowdsourced list of onion
&gt;&gt; &gt; services, but is not really different from onion directories.
&gt;&gt; &gt; At this time we have no plan for other research that use this
&gt;&gt; crowdsourced
&gt;&gt; &gt; list.
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; If you're planning a research project on Tor users, you should write
&gt;&gt; to
&gt;&gt; &gt; &gt; the research safety board and get ideas about how ot do it in a way
&gt;&gt; that
&gt;&gt; &gt; &gt; minimizes risk.
&gt;&gt; &gt; &gt; https://research.torproject.org/safetyboard.html
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; thank you for the suggestion.
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; &gt; This idea seems, to me, to have a lot of privacy problems. You're
&gt;&gt; asking
&gt;&gt; &gt; &gt; people to use Chrome instead of Tor Browser, which means they will be
&gt;&gt; &gt; &gt; vulnerable to a lot of fingerprinting and trivial deanonymization
&gt;&gt; &gt; &gt; attacks.
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; No we are not asking people to use chrome for browsing on tor, but we
&gt;&gt; are
&gt;&gt; &gt; offering a service that can help them to know if a onion address is up
&gt;&gt; &gt; before start to surf with Tor Browser
&gt;&gt;
&gt;&gt; Having only an extension for Chrome based browsers implies asking users
&gt;&gt; to use Chrome based browsers. If there were a choice between Firefox and
&gt;&gt; Chrome extensions, it would be less clear and not implying.
&gt;&gt;
&gt;
&gt; Yes, you're right, but we have created this extension in order to offer a
&gt; service to people.
&gt; We chose to start with Chrome because it has a greater number of users.
&gt; We would be happy if it will be used and also developed for Firefox.
&gt;
&gt;
&gt;&gt; &gt; &gt; Your extension reports not only the onion domains that it
&gt;&gt; &gt; &gt; finds, but also the URL of the page you were browsing at the time:
&gt;&gt; &gt; &gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt;&gt; &gt; &gt; window.location.href});
&gt;&gt; &gt; &gt; You need to at least inform your research subjects/users what of their
&gt;&gt; &gt; &gt; private data you are storing and what you are doing with it.
&gt;&gt; &gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; As you can see from the source code we are not storing any sensitive
&gt;&gt; data
&gt;&gt; &gt; like ip or users information. do you think that only URL page can damage
&gt;&gt; &gt; user privacy?
&gt;&gt;
&gt;&gt; This aside, do you just check if the page still exists or the top level
&gt;&gt; onion domain you found this page on? If so, this would be an improvement
&gt;&gt; I'd suggest, to only use the toplevel domain.
&gt;&gt; I have not looked at your code.
&gt;&gt;
&gt;
&gt; Thank you for the suggestion, we'll improve the website's URL management
&gt; asap.
&gt;
&gt;&gt;
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; &gt; You're using two different regexes for onion URLs that aren't the
&gt;&gt; same.
&gt;&gt; &gt; &gt; The one used during replacement doesn't match "https", so I guess it
&gt;&gt; &gt; &gt; will fail on URLs like https://facebookcorewwwi.onion/.
&gt;&gt; &gt; &gt;         /^(http(s)?:\/\/)?.{16}(\.onion)\/?.*$/
&gt;&gt; &gt; &gt;         /(http:\/\/)?\b[\w\d]{16}\.onion(\/[\S]*|)/
&gt;&gt; &gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; Yes, you right, thank you for the feedback.
&gt;&gt;
&gt;&gt; &gt; _______________________________________________
&gt;&gt; &gt; tor-dev mailing list
&gt;&gt; &gt; tor-dev@lists.torproject.org
&gt;&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;The server is temporarily down due to security improvements, thank you \
very much for your suggestions.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2017-03-10 21:02 GMT+01:00 simone raponi &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:raponi.1539620@studenti.uniroma1.it" \
target="_blank"&gt;raponi.1539620@studenti.uniroma1.it&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div&gt;&lt;div class="h5"&gt;2017-03-10 21:13 GMT+01:00 ng0 &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:contact.ng0@cryptolab.net" \
target="_blank"&gt;contact.ng0@cryptolab.net&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Massimo La Morgia transcribed 6.7K bytes:&lt;br&gt; \
&lt;div&gt;&lt;div class="m_-8993090501787817188gmail-h5"&gt;&gt; On Fri, Mar 10, 2017 at 5:39 \
PM, David Fifield &lt;&lt;a href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;br&gt; &gt; wrote:&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; On Fri, Mar 10, 2017 at 12:58:55PM +0100, Massimo La Morgia wrote:&lt;br&gt;
&gt; &gt; &gt; we are a research group at Sapienza University, Rome, Italy. We do&lt;br&gt;
&gt; &gt; research on&lt;br&gt;
&gt; &gt; &gt; distributed systems, Tor, and the Dark Web. As part of our work, we \
have&lt;br&gt; &gt; &gt; &gt; developed OnionGatherer, a service that gives up-to-date \
information&lt;br&gt; &gt; &gt; about Dark&lt;br&gt;
&gt; &gt; &gt; Web hidden services to Tor users.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; ...and presumably helps you build a crowdsourced list of onion services&lt;br&gt;
&gt; &gt; that you plan to use for some other research purpose?&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; yes, of course in this way we are building a crowdsourced list of onion&lt;br&gt;
&gt; services, but is not really different from onion directories.&lt;br&gt;
&gt; At this time we have no plan for other research that use this crowdsourced&lt;br&gt;
&gt; list.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; If you're planning a research project on Tor users, you should write \
to&lt;br&gt; &gt; &gt; the research safety board and get ideas about how ot do it in a way \
that&lt;br&gt; &gt; &gt; minimizes risk.&lt;br&gt;
&gt; &gt; &lt;a href="https://research.torproject.org/safetyboard.html" rel="noreferrer" \
target="_blank"&gt;https://research.torproject.or&lt;wbr&gt;g/safetyboard.html&lt;/a&gt;&lt;br&gt; &gt; \
&gt;&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt; thank you for the suggestion.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; This idea seems, to me, to have a lot of privacy problems. You're \
asking&lt;br&gt; &gt; &gt; people to use Chrome instead of Tor Browser, which means they \
will be&lt;br&gt; &gt; &gt; vulnerable to a lot of fingerprinting and trivial \
deanonymization&lt;br&gt; &gt; &gt; attacks.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; No we are not asking people to use chrome for browsing on tor, but we are&lt;br&gt;
&gt; offering a service that can help them to know if a onion address is up&lt;br&gt;
&gt; before start to surf with Tor Browser&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;Having only an extension for Chrome based browsers implies asking \
users&lt;br&gt; to use Chrome based browsers. If there were a choice between Firefox \
and&lt;br&gt; Chrome extensions, it would be less clear and not \
implying.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Yes, you're right, but \
we have created this extension in order to offer a service to people.  &lt;/div&gt;&lt;div&gt;We \
chose to start with Chrome because it has a greater number of users.&lt;/div&gt;&lt;div&gt;We \
would be happy if it will be used and also developed for Firefox.&lt;/div&gt;&lt;span \
class=""&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; &lt;span \
class="m_-8993090501787817188gmail-"&gt;&lt;br&gt; &gt; &gt; Your extension reports not only \
the onion domains that it&lt;br&gt; &gt; &gt; finds, but also the URL of the page you were \
browsing at the time:&lt;br&gt; &gt; &gt;              var onionsJson = \
JSON.stringify({onions:onions, website:&lt;br&gt; &gt; &gt; window.location.href});&lt;br&gt;
&gt; &gt; You need to at least inform your research subjects/users what of their&lt;br&gt;
&gt; &gt; private data you are storing and what you are doing with it.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; As you can see from the source code we are not storing any sensitive data&lt;br&gt;
&gt; like ip or users information. do you think that only URL page can damage&lt;br&gt;
&gt; user privacy?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;This aside, do you just check if the page still exists or the top level&lt;br&gt;
onion domain you found this page on? If so, this would be an improvement&lt;br&gt;
I'd suggest, to only use the toplevel domain.&lt;br&gt;
I have not looked at your code.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/span&gt;&lt;div&gt;Thank you \
for the suggestion, we'll improve the website's URL management \
asap.&lt;/div&gt;&lt;span class=""&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; &lt;span \
class="m_-8993090501787817188gmail-im m_-8993090501787817188gmail-HOEnZb"&gt;&lt;br&gt; \
&gt;&lt;br&gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt; You're using two different regexes for onion URLs that aren't the \
same.&lt;br&gt; &gt; &gt; The one used during replacement doesn't match \
"https", so I guess it&lt;br&gt; &gt; &gt; will fail on URLs like &lt;a \
href="https://facebookcorewwwi.onion/" rel="noreferrer" \
target="_blank"&gt;https://facebookcorewwwi.onion&lt;wbr&gt;/&lt;/a&gt;.&lt;br&gt; &gt; &gt;              \
/^(http(s)?:\/\/)?.{16}(\.oni&lt;wbr&gt;on)\/?.*$/&lt;br&gt; &gt; &gt;              \
/(http:\/\/)?\b[\w\d]{16}\.on&lt;wbr&gt;ion(\/[\S]*|)/&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; Yes, you right, thank you for the feedback.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;&lt;div class="m_-8993090501787817188gmail-HOEnZb"&gt;&lt;div \
class="m_-8993090501787817188gmail-h5"&gt;&gt; \
______________________________&lt;wbr&gt;_________________&lt;br&gt; &gt; tor-dev mailing \
list&lt;br&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170315174712</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-03-15 17:47:12-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

On Fri, Mar 10, 2017 at 06:25:04PM +0100, Massimo La Morgia wrote:
&gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; Your extension reports not only the onion domains that it
&gt; &gt; finds, but also the URL of the page you were browsing at the time:
&gt; &gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt; &gt; window.location.href});
&gt; &gt; You need to at least inform your research subjects/users what of their
&gt; &gt; private data you are storing and what you are doing with it.
&gt; 
&gt; As you can see from the source code we are not storing any sensitive data
&gt; like ip or users information. do you think that only URL page can damage
&gt; user privacy?

Yes, web applications encode sensitive information in URLs all the time.
Usernames, passwords, personal preferences, you name it.  Even just the
page's domain name reveals a lot about you -- think about somebody
visiting google.it versus google.dk.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170313002717</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-13 00:27:17-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 Project Idea</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 13 Mar 2017, at 07:25, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; Hi Sakchham, glad you want to get involved! For Orbot Nathan (cc-ed)
&gt; would be your man but sadly iirc he doesn't have cycles to mentor this
&gt; summer. I'd suggest double checking with him and if that's the case
&gt; picking another project space where we do have a mentor.

Hi Sakchham,

If you're still interested in the Orbot UI, this related thread might
interest you:

https://lists.torproject.org/pipermail/tor-project/2017-March/001005.html

Tim

&gt; Cheers! -Damian
&gt; 
&gt; On 3/12/17, Sakchham Sharma &lt;sakchhams@gmail.com&gt; wrote:
&gt;&gt; Greetings Tor Community,
&gt;&gt; I am Sakchham Sharma a CS Undergrad student, I intend to participate in
&gt;&gt; GSoC 2017 and contribute to the Tor Project. The Tor Project as so now is
&gt;&gt; quite well known among the people with a technical background, but however,
&gt;&gt; the people who don't belong to this category have little or no idea about
&gt;&gt; Tor, they are perhaps the people that would benefit the most from Tor.
&gt;&gt; So in order to help people better understand about Tor, that how it is
&gt;&gt; different from their VPN or Proxy service, I intend to an UI Redesign of
&gt;&gt; the Orbot app for android, as of now it has a minimalistic UI and several
&gt;&gt; UI glitches, an UI that also gives the users a subtle idea as to how tor
&gt;&gt; works with be informative and should help more people know more about Tor,
&gt;&gt; I would be grateful if I could get suggestions/improvements on the above
&gt;&gt; idea.
&gt;&gt; Thank you.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; 
&gt;&gt;  &lt;https://mailtrack.io/&gt; Sent with Mailtrack
&gt;&gt; &lt;https://mailtrack.io/install?source=signature〈=en&amp;referral=sakchhams@gmail.com&amp;idSignature=22&gt;
&gt;&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYxedlAAoJEHQNnjkCUnKiYigQAK83haqEaqW7zewraUDg+cYZ
IQdNp371Z37ub+bFTv3QqhFt3397dTSHzg0B7wHqHVdwjK3zFXYu4FmIp8mEU4pw
QpyAwEtYEVjOM2gg77V02kmBlBjja0mNRqj3fdzy0OFUISk5WjkYsRRC5EzaZJ5I
9iZG+dbs7/yK9efA6SZ5D7J4J+swfh5HcxokHdAbdVtLqtzocbfO6nH+13l0EbJT
n5734HFah0Q53QjkkoMqI4BMbEnEgsjtIocFcdsUSDmaQDDfcYOAyfb22+KVwOTH
da7a66nTeO71+uorUaVUr7Lsczau7w0pcvBiVtT5FCjshogwXjvHTxB+btVi6zvD
W9cF8tqStprJXAz5wIFMA+bIDssqY0pUt2fs0ZlJz/gaEhrIan+6aij73jTORG8x
ojKkRgcgg6GHkgMECPPFyDmrIt53qwMZAiq/+KY6uklNAsI562fkTcaqN1A8kBs1
qqDfcWQ7R0lI8iVxL5t6g14fRQ1YBklcZXE6zcMY6vISDZoo7XwwBCoL9YzFc8pe
k8DcpmwskTL+/GGk1EDYmNdSzf2Qx71nVKgxDKewQqZhS4II8Y3aMQxgBC292+5S
sD005aoKBKEpLNVHWfvE6XL/4R6W1aYgTVwTMoNKTT24gZia7aQMgZv1aUJRe+4D
usVald+KXojJkNrJME/w
=2PW/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170312203257</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-12 20:32:57-0400</timestampReceived><subject>Re: [tor-dev] GSOC Contribution Into and Help</subject><body>

Hi Anshul. Second person today regarding Ahmia. :P

For Ahmia Juha will be your best point of contact. Cc-ed him here. If
he doesn't respond to you in a few days give me a nudge and I'll nag
him. ;)

Cheers! -Damian

On 3/12/17, Anshul Malik &lt;malikanshul29@gmail.com&gt; wrote:
&gt; ​​
&gt; Hi there!
&gt;
&gt; I am Anshul, computer science undergrad from NIT, Kurukshetra, India.
&gt; I really like using tor, always wanted to contribute somhow, and here
&gt; google gives me a chance.
&gt;
&gt; I am a good programmer, have been doing projects with node, recently also
&gt; started with python django. I have also contributed to firefox devtools.
&gt;
&gt; I wish to contribute to *Ahima- Hidden Service Search*
&gt;
&gt; I saw ideas list on the page, I can definitely work on
&gt; - Automate blacklisting
&gt; - Add hidden services function
&gt; - Elastic Search
&gt;
&gt; Just need a headstart, Please let me know where can I find contribution
&gt; guide and some more information about Ahima, I am currently studying the
&gt; architecture and codebase from github.
&gt;
&gt; Thanks
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170313115810</emailId><senderName>Sakchham Sharma</senderName><senderEmail>sakchhams@gmail.com</senderEmail><timestampReceived>2017-03-13 11:58:10-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 Project Idea</subject><body>

[Attachment #2 (multipart/alternative)]


Yes, I intend similar features with Orbot, could you suggest a starting
point? Or perhaps someone I could discuss my ideas with.
Thank you.




On Mon, Mar 13, 2017 at 5:57 AM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt;
&gt; &gt; On 13 Mar 2017, at 07:25, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; &gt;
&gt; &gt; Hi Sakchham, glad you want to get involved! For Orbot Nathan (cc-ed)
&gt; &gt; would be your man but sadly iirc he doesn't have cycles to mentor this
&gt; &gt; summer. I'd suggest double checking with him and if that's the case
&gt; &gt; picking another project space where we do have a mentor.
&gt;
&gt; Hi Sakchham,
&gt;
&gt; If you're still interested in the Orbot UI, this related thread might
&gt; interest you:
&gt;
&gt; https://lists.torproject.org/pipermail/tor-project/2017-March/001005.html
&gt;
&gt; Tim
&gt;
&gt; &gt; Cheers! -Damian
&gt; &gt;
&gt; &gt; On 3/12/17, Sakchham Sharma &lt;sakchhams@gmail.com&gt; wrote:
&gt; &gt;&gt; Greetings Tor Community,
&gt; &gt;&gt; I am Sakchham Sharma a CS Undergrad student, I intend to participate in
&gt; &gt;&gt; GSoC 2017 and contribute to the Tor Project. The Tor Project as so now
&gt; is
&gt; &gt;&gt; quite well known among the people with a technical background, but
&gt; however,
&gt; &gt;&gt; the people who don't belong to this category have little or no idea
&gt; about
&gt; &gt;&gt; Tor, they are perhaps the people that would benefit the most from Tor.
&gt; &gt;&gt; So in order to help people better understand about Tor, that how it is
&gt; &gt;&gt; different from their VPN or Proxy service, I intend to an UI Redesign of
&gt; &gt;&gt; the Orbot app for android, as of now it has a minimalistic UI and
&gt; several
&gt; &gt;&gt; UI glitches, an UI that also gives the users a subtle idea as to how tor
&gt; &gt;&gt; works with be informative and should help more people know more about
&gt; Tor,
&gt; &gt;&gt; I would be grateful if I could get suggestions/improvements on the above
&gt; &gt;&gt; idea.
&gt; &gt;&gt; Thank you.
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt;  &lt;https://mailtrack.io/&gt; Sent with Mailtrack
&gt; &gt;&gt; &lt;https://mailtrack.io/install?source=signature〈=en&amp;
&gt; referral=sakchhams@gmail.com&amp;idSignature=22&gt;
&gt; &gt;&gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Yes, I intend similar features with Orbot, could you suggest a \
starting point? Or perhaps someone I could discuss my ideas with.&lt;div&gt;Thank \
you.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;img width="0" height="0" class="mailtrack-img" \
src="https://mailtrack.io/trace/mail/c9c05d0e202423cacc54ee7df9bb4b6999637600.png?u=963917"&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Mar 13, 2017 at 5:57 AM, \
teor &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;&lt;br&gt; &gt; On 13 Mar 2017, at 07:25, Damian \
Johnson &lt;&lt;a href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; Hi Sakchham, glad you want to get involved! For Orbot Nathan (cc-ed)&lt;br&gt;
&gt; would be your man but sadly iirc he doesn't have cycles to mentor this&lt;br&gt;
&gt; summer. I'd suggest double checking with him and if that's the case&lt;br&gt;
&gt; picking another project space where we do have a mentor.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Hi Sakchham,&lt;br&gt;
&lt;br&gt;
If you're still interested in the Orbot UI, this related thread might&lt;br&gt;
interest you:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://lists.torproject.org/pipermail/tor-project/2017-March/001005.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;pipermail/tor-project/2017-&lt;wbr&gt;March/001005.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Tim&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; Cheers! -Damian&lt;br&gt;
&gt;&lt;br&gt;
&gt; On 3/12/17, Sakchham Sharma &lt;&lt;a \
href="mailto:sakchhams@gmail.com"&gt;sakchhams@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&gt; \
Greetings Tor Community,&lt;br&gt; &gt;&gt; I am Sakchham Sharma a CS Undergrad student, I \
intend to participate in&lt;br&gt; &gt;&gt; GSoC 2017 and contribute to the Tor Project. \
The Tor Project as so now is&lt;br&gt; &gt;&gt; quite well known among the people with a \
technical background, but however,&lt;br&gt; &gt;&gt; the people who don't belong to \
this category have little or no idea about&lt;br&gt; &gt;&gt; Tor, they are perhaps the \
people that would benefit the most from Tor.&lt;br&gt; &gt;&gt; So in order to help people \
better understand about Tor, that how it is&lt;br&gt; &gt;&gt; different from their VPN or \
Proxy service, I intend to an UI Redesign of&lt;br&gt; &gt;&gt; the Orbot app for android, \
as of now it has a minimalistic UI and several&lt;br&gt; &gt;&gt; UI glitches, an UI that \
also gives the users a subtle idea as to how tor&lt;br&gt; &gt;&gt; works with be \
informative and should help more people know more about Tor,&lt;br&gt; &gt;&gt; I would be \
grateful if I could get suggestions/improvements on the above&lt;br&gt; &gt;&gt; idea.&lt;br&gt;
&gt;&gt; Thank you.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;   &lt;&lt;a href="https://mailtrack.io/" rel="noreferrer" \
target="_blank"&gt;https://mailtrack.io/&lt;/a&gt;&gt; Sent with Mailtrack&lt;br&gt; &gt;&gt; &lt;&lt;a \
href="https://mailtrack.io/install?source=signature&amp;lang=en&amp;referral=sakchhams@gmail.com&amp;idSignature=22" \
rel="noreferrer" target="_blank"&gt;https://mailtrack.io/install?&lt;wbr&gt;source=signature&amp;am \
p;lang=en&amp;&lt;wbr&gt;referral=sakchhams@gmail.com&amp;&lt;wbr&gt;idSignature=22&lt;/a&gt;&gt;&lt;br&gt; \
&gt;&gt;&lt;br&gt; &gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;/span&gt;T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Tim Wilson-Brown (teor)&lt;br&gt;
&lt;br&gt;
teor2345 at gmail dot com&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
xmpp: teor at torproject dot org&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170313161313</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-03-13 16:13:13-0400</timestampReceived><subject>[tor-dev] Open tickets</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi everyone,

I'm working on some statistics on open tickets of the metrics team in
preparation of the Amsterdam meeting, and as part of that I made the
following graph on open Trac tickets for all components (except Archived/=
*):

https://people.torproject.org/~karsten/volatile/open-tickets.pdf

Not sure if this graph is useful for anybody else.  But if it is, is
there a way to make it even more useful?

And just in case this is useful, here's the graphed data:

https://people.torproject.org/~karsten/volatile/open-tickets.csv

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170314070802</emailId><senderName>ng0</senderName><senderEmail>contact.ng0@cryptolab.net</senderEmail><timestampReceived>2017-03-14 07:08:02-0400</timestampReceived><subject>Re: [tor-dev] GNU Guix and Tor Browser Packaging</subject><body>

bancfc@openmailbox.org transcribed 1.9K bytes:
&gt; There is a serious Tor Browser packaging effort [3][4] being done by ng0
&gt; (GNUnet dev) for the GNU Guix [0] package manager. GNU Guix supports

Eh, now that the cat is out of the bag (cat's don't belong into bags
anyway), I think I have to do this now and not on my own conditions.

Hi!

As I told bancfc somewhere else, I've had a short contact with the
trademarks team of torproject. I will get back to you when someone was
able to identify issues in torbrowser which might lead to modifications
of torbrowser (for more details I just hope trademarks@tp.o can
communicate it to you) because all packaged software which is included
in upstream of Guix (master) must follow the GNU Free System
Distribution Guidelines.
I hope that I have to make as little modifications as possible as I
I am aware that the fingerprint of the browser could change depending on
the kind of changes.

I hope to get back to this task in about 3 weeks, right now I'm busy
with getting more documentation done for another project.

&gt; transactional upgrades and roll-backs, unprivileged package management,
&gt; per-user profiles and most importantly reproducible builds. I have checked
&gt; with Guix's upstream and they are working on making a binary mirror
&gt; available over a Tor Hidden Service. [2] Also planned is resilience [2] to
&gt; the attack outlined in the TUF threat model. [1]
&gt; 
&gt; Back to the topic of Tor Browser packaging. While there are good reasons for
&gt; Debian's pakaging policies they make packaging of fast evolving software
&gt; (and especially with TBB's reliance on a opaque binary VM for builds)
&gt; impractial. Both we and Micah have been doing a good effort to automate
&gt; downloading and validating TBB but I still believe its a maintenance burden
&gt; and Guix may be a way out of that for Linux distros in general.
&gt; 
&gt; What are your thoughts on this?
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; ***
&gt; 
&gt; [0] https://www.gnu.org/software/guix/
&gt; [1] https://github.com/theupdateframework/tuf/blob/develop/SECURITY.md
&gt; [2] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00192.html
&gt; [3] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00189.html
&gt; [4] https://lists.gnu.org/archive/html/guix-devel/2017-03/msg00149.html
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170316154525</emailId><senderName>simone raponi</senderName><senderEmail>raponi.1539620@studenti.uniroma1.it</senderEmail><timestampReceived>2017-03-16 15:45:25-0400</timestampReceived><subject>Re: [tor-dev] OnionGatherer: evaluating status of hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


Hey everybody, I want to announce that our server is up again.

Thank you all for your suggestions, we're opening issues for each one in
the Github repository.
I want to thank David Fifield for reporting us the security issue.

Regarding the stored website's url information, we're evaluating the
insertion of a checkbox that allows the user to choose if he/she wants to
send it or not.

2017-03-15 18:47 GMT+01:00 Philipp Winter &lt;phw@nymity.ch&gt;:

&gt; On Fri, Mar 10, 2017 at 06:25:04PM +0100, Massimo La Morgia wrote:
&gt; &gt; On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt; wrote:
&gt; &gt; &gt; Your extension reports not only the onion domains that it
&gt; &gt; &gt; finds, but also the URL of the page you were browsing at the time:
&gt; &gt; &gt;         var onionsJson = JSON.stringify({onions:onions, website:
&gt; &gt; &gt; window.location.href});
&gt; &gt; &gt; You need to at least inform your research subjects/users what of their
&gt; &gt; &gt; private data you are storing and what you are doing with it.
&gt; &gt;
&gt; &gt; As you can see from the source code we are not storing any sensitive data
&gt; &gt; like ip or users information. do you think that only URL page can damage
&gt; &gt; user privacy?
&gt;
&gt; Yes, web applications encode sensitive information in URLs all the time.
&gt; Usernames, passwords, personal preferences, you name it.  Even just the
&gt; page's domain name reveals a lot about you -- think about somebody
&gt; visiting google.it versus google.dk.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hey everybody, I want to announce that our server is up \
again.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you all for your suggestions, we're opening \
issues for each one in the Github repository.&lt;/div&gt;&lt;div&gt;&lt;div&gt;I want to thank  &lt;span \
style="font-size:12.8px;font-weight:bold;white-space:nowrap"&gt;David Fifield \
&lt;/span&gt;&lt;span style="font-size:12.8px;white-space:nowrap"&gt;for reporting us the \
security issue.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px;white-space:nowrap"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px;white-space:nowrap"&gt;Regarding the stored website's url \
information, we're evaluating the insertion of a checkbox that allows the user to \
choose if he/she wants to send it or not.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;2017-03-15 18:47 GMT+01:00 Philipp \
Winter &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:phw@nymity.ch" \
target="_blank"&gt;phw@nymity.ch&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;span \
class=""&gt;On Fri, Mar 10, 2017 at 06:25:04PM +0100, Massimo La Morgia wrote:&lt;br&gt; &gt; \
On Fri, Mar 10, 2017 at 5:39 PM, David Fifield &lt;&lt;a \
href="mailto:david@bamsoftware.com"&gt;david@bamsoftware.com&lt;/a&gt;&gt; wrote:&lt;br&gt; \
&lt;/span&gt;&lt;span class=""&gt;&gt; &gt; Your extension reports not only the onion domains \
that it&lt;br&gt; &gt; &gt; finds, but also the URL of the page you were browsing at the \
time:&lt;br&gt; &gt; &gt;              var onionsJson = JSON.stringify({onions:onions, \
website:&lt;br&gt; &gt; &gt; window.location.href});&lt;br&gt;
&gt; &gt; You need to at least inform your research subjects/users what of their&lt;br&gt;
&gt; &gt; private data you are storing and what you are doing with it.&lt;br&gt;
&gt;&lt;br&gt;
&gt; As you can see from the source code we are not storing any sensitive data&lt;br&gt;
&gt; like ip or users information. do you think that only URL page can damage&lt;br&gt;
&gt; user privacy?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Yes, web applications encode sensitive information in URLs all the time.&lt;br&gt;
Usernames, passwords, personal preferences, you name it.   Even just the&lt;br&gt;
page's domain name reveals a lot about you -- think about somebody&lt;br&gt;
visiting &lt;a href="http://google.it" rel="noreferrer" target="_blank"&gt;google.it&lt;/a&gt; \
versus &lt;a href="http://google.dk" rel="noreferrer" target="_blank"&gt;google.dk&lt;/a&gt;.&lt;br&gt; \
&lt;div class="HOEnZb"&gt;&lt;div \
class="h5"&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170319080238</emailId><senderName>Nur-Magomed</senderName><senderEmail>nmagoru@gmail.com</senderEmail><timestampReceived>2017-03-19 08:02:38-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Onionoo"</subject><body>

[Attachment #2 (multipart/alternative)]


Hi!
I'm interesred with project "Crash Reporter for Tor Browser".
I'm working on that idea, but I need some specifications about how it
should work, what kind of crash information we have to get and what
technologies I can use on server side (for collect information).


2017-03-14 22:51 GMT+03:00 Damian Johnson &lt;atagar@torproject.org&gt;:

&gt; ExoneraTor is in the same boat. The metrics team are the ones that are
&gt; unavailable so everything they own (Onionoo, Atlas, Metrics-Lib,
&gt; ExoneraTor, etc) would be poor choices.
&gt;
&gt; You're more than welcome to propose your own project idea but if so
&gt; you'll need to find a mentor in our community. If you'd care for
&gt; projects with mentors already available then please see...
&gt;
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#Coding
&gt;
&gt; On 3/14/17, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt; &gt; It's a pity. Could you provide me some guide lines and additional
&gt; materials
&gt; &gt; for project "ExoneraTor",  I also interested to work with that
&gt; &gt;
&gt; &gt; 2017-03-14 22:27 GMT+03:00 Damian Johnson &lt;atagar@torproject.org&gt;:
&gt; &gt;
&gt; &gt;&gt; Hi Nur-Magomed. Unfortunately the folks maintaining Onionoo are
&gt; &gt;&gt; unavailable to mentor this summer. I'd suggest looking into another
&gt; &gt;&gt; subproject.
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt; On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;nmagoru@gmail.com&gt;
&gt; wrote:
&gt; &gt;&gt; &gt; Hi!
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of
&gt; &gt;&gt; &gt; information
&gt; &gt;&gt; &gt; technology (speciality: computer security) of North-Caucasus Federal
&gt; &gt;&gt; &gt; University. I have experience with Java, SQL, Web (HTML, CSS,
&gt; &gt;&gt; &gt; JavaScript,
&gt; &gt;&gt; &gt; PHP) and also I designed protocol based on JSON for Android app.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; I would love to contribute to the project "Onionoo". Please provide me
&gt; &gt;&gt; some
&gt; &gt;&gt; &gt; guide lines and additional materials for study and get a clear
&gt; &gt;&gt; understanding
&gt; &gt;&gt; &gt; about the mentioned project. Thank you!
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Regards
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Nur-Magomed
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; _______________________________________________
&gt; &gt;&gt; &gt; tor-dev mailing list
&gt; &gt;&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt;&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; _______________________________________________
&gt; &gt;&gt; tor-dev mailing list
&gt; &gt;&gt; tor-dev@lists.torproject.org
&gt; &gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;&gt;
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi!&lt;br&gt;I'm interesred with project "Crash Reporter for Tor \
Browser".&lt;br&gt;I'm working on that idea, but I need some specifications about \
how it should work, what kind of crash information we have to get and what \
technologies I can use on server side (for collect \
information).&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;2017-03-14 22:51 GMT+03:00 Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt;:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;ExoneraTor is in the same boat. The metrics team \
are the ones that are&lt;br&gt; unavailable so everything they own (Onionoo, Atlas, \
Metrics-Lib,&lt;br&gt; ExoneraTor, etc) would be poor choices.&lt;br&gt;
&lt;br&gt;
You're more than welcome to propose your own project idea but if so&lt;br&gt;
you'll need to find a mentor in our community. If you'd care for&lt;br&gt;
projects with mentors already available then please see...&lt;br&gt;
&lt;br&gt;
&lt;a href="https://www.torproject.org/getinvolved/volunteer.html.en#Coding" \
rel="noreferrer" target="_blank"&gt;https://www.torproject.org/&lt;wbr&gt;getinvolved/volunteer.html.en#&lt;wbr&gt;Coding&lt;/a&gt;&lt;br&gt;
 &lt;div class="gmail-HOEnZb"&gt;&lt;div class="gmail-h5"&gt;&lt;br&gt;
On 3/14/17, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; It's a \
pity. Could you provide me some guide lines and additional materials&lt;br&gt; &gt; for \
project "ExoneraTor",   I also interested to work with that&lt;br&gt; &gt;&lt;br&gt;
&gt; 2017-03-14 22:27 GMT+03:00 Damian Johnson &lt;&lt;a \
href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt;:&lt;br&gt; &gt;&lt;br&gt;
&gt;&gt; Hi Nur-Magomed. Unfortunately the folks maintaining Onionoo are&lt;br&gt;
&gt;&gt; unavailable to mentor this summer. I'd suggest looking into another&lt;br&gt;
&gt;&gt; subproject.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; On Tue, Mar 14, 2017 at 10:59 AM, Nur-Magomed &lt;&lt;a \
href="mailto:nmagoru@gmail.com"&gt;nmagoru@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&gt; &gt; \
Hi!&lt;br&gt; &gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; I'm Nur-Magomed Dzhamiev, 4th year student from institute of&lt;br&gt;
&gt;&gt; &gt; information&lt;br&gt;
&gt;&gt; &gt; technology (speciality: computer security) of North-Caucasus \
Federal&lt;br&gt; &gt;&gt; &gt; University. I have experience with Java, SQL, Web (HTML, \
CSS,&lt;br&gt; &gt;&gt; &gt; JavaScript,&lt;br&gt;
&gt;&gt; &gt; PHP) and also I designed protocol based on JSON for Android app.&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; I would love to contribute to the project "Onionoo". Please \
provide me&lt;br&gt; &gt;&gt; some&lt;br&gt;
&gt;&gt; &gt; guide lines and additional materials for study and get a clear&lt;br&gt;
&gt;&gt; understanding&lt;br&gt;
&gt;&gt; &gt; about the mentioned project. Thank you!&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; Regards&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; Nur-Magomed&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt;&gt; &gt; tor-dev mailing list&lt;br&gt;
&gt;&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt;&gt; &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&gt; &gt;&lt;br&gt;
&gt;&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt;&gt; tor-dev mailing list&lt;br&gt;
&gt;&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt;&gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&gt;&lt;br&gt;
&gt;&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170320145452</emailId><senderName>"Mikerah N/A"</senderName><senderEmail>mikerah14@gmail.com</senderEmail><timestampReceived>2017-03-20 14:54:52-0400</timestampReceived><subject>[tor-dev] GSoC Draft Proposal</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

I have been working on my proposal for a few weeks now and I would like to
get some feedback on it. Here it is:
https://mikerah.github.io/GSOC2017-Proposal/

Please don't hold back as I would like to have the best possible proposal.

Thank you
Mikerah

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Hi all,&lt;br&gt;&lt;br&gt;&lt;/div&gt;I have been working on my \
proposal for a few weeks now and I would like to get some feedback on it. Here it is: \
&lt;a href="https://mikerah.github.io/GSOC2017-Proposal/"&gt;https://mikerah.github.io/GSOC2017-Proposal/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;Please \
don't hold back as I would like to have the best possible \
proposal.&lt;br&gt;&lt;br&gt;&lt;/div&gt;Thank you&lt;br&gt;&lt;/div&gt;Mikerah&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170321154344</emailId><senderName>gunes acar</senderName><senderEmail>gunes.acar@esat.kuleuven.be</senderEmail><timestampReceived>2017-03-21 15:43:44-0400</timestampReceived><subject>Re: [tor-dev] Make Tor Browser Faster GSOC Project</subject><body>


On 17/03/17 20:18, Tom Ritter wrote:
&gt; Anyway, the topic on the website is a bit ambiguous, so I've attempted
&gt; to flesh out the project more here:
&gt; 
&gt; https://storm.torproject.org/shared/URdVCz8eCbBfQzYwG3gaR-KuCvMTIS3zU7emq3AF7A3
&gt; 
&gt; I'd welcome input from the rest of the tor community on this as well.
&gt; 
&gt; -tom

Hi Tom,

I added some comments and questions to the proposal:
https://storm.torproject.org/shared/URdVCz8eCbBfQzYwG3gaR-KuCvMTIS3zU7emq3AF7A3

Best,
Gunes
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326101149</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-26 10:11:49-0400</timestampReceived><subject>Re: [tor-dev] french documentation</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Mar 2017, at 20:58, Thierry Boibary &lt;th.boibary@net-c.com&gt; wrote:
&gt; 
&gt; hi,
&gt; i'd like to collaborate to Tor, in the hidden services for example Tor2web, \
&gt; Torbirdy, metrics portal .....

Here is some information about these projects:
https://www.torproject.org/getinvolved/volunteer.html.en

Sorry, it is only in English.

Tim

&gt; regards
&gt; 
&gt; T Boibary
&gt; 06 85 55 34 89
&gt; 
&gt; &lt;1481836001.1313601483.0&gt;
&gt; 
&gt; 
&gt; ---- Message d'origine ----
&gt; De : teor &lt;teor2345@gmail.com&gt;
&gt; Ã€ : tor-dev@lists.torproject.org
&gt; Objet : Re: [tor-dev] french documentation
&gt; Date : 24/03/2017 09:24:18 CET
&gt; Copie Ã  : Thierry Boibary &lt;th.boibary@net-c.com&gt;
&gt; 
&gt; 
&gt; &gt; On 11 Feb 2017, at 07:55, Thierry Boibary &lt;th.boibary@net-c.com&gt; wrote:
&gt; &gt; 
&gt; &gt; hi,
&gt; &gt; where can i find french documentation?
&gt; &gt; i am expert in systems and networks administration so i'd like working for you, \
&gt; &gt; in a domain which needs my capabilities. 
&gt; &gt; help me to find a domain? please
&gt; &gt; 
&gt; &gt; Regards
&gt; &gt; T
&gt; 
&gt; Hi Thierry,
&gt; 
&gt; Sorry it has taken a long time for me to reply.
&gt; 
&gt; We have Tor Browser in French:
&gt; https://www.torproject.org/projects/torbrowser.html.en#downloads
&gt; 
&gt; We want other documentation in French, but we need people to help!
&gt; 
&gt; What documentation do you want?
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY15PlAAoJEHQNnjkCUnKiQZMP/RfMtmaSC6hNO9EPRZ+/41Qc
+hVMMZh2x058Uas9zGs3N2RRsr32TINY3YWDlFTnr9HR4T7CQ+uwcALRoJ0WI66C
tSFhcOmgJecpYXmu+FgihObyeq9LJGEshm8fYQ+X8LgXIdtL/vKYV4WvFoDz6Sna
gybfmji93QpVCh40myHc9igePd/p8QZ1OwyEfyvoZoKLbc4rhGxfg9NQtfKllABe
FNrcqHY9YfHaK9lZdPGWYjUT8r+/0HjW1a9eAlb+cc3JW/exuHTpQqsf5LuQa+BY
qGSiejpFQuuSKMUznjT3MrMP+SdtbwjXCL99Y0dowzJZCpK/i/P6bowNRGG51bT5
5UGAv+4Pz+3EpTme93PKADjF+COQ8IeQKnG0x2AxjMTEN5Cspn4Y1MMg2psi/roI
QEQOrowX9yPbPpiWSGJ9Ogae1xsVTtZ3AoeyXqOJxxVHzXPGXx4KrtpZRV/x2kup
OCE7T1MzqhfsfhKzPtLLId0bmHjlNE2hj09uyoAkSGFlxsaXjPWTLtmlTx5dIoj4
9XxvnffU2d8DoIEBFiSrMh9XS5q/y2bqh2l3mVnDD7UPMX/P0/JXlU3BR9tWrzYd
6rGdTG7JcOa2ij3XxXdBGfqdaQUkmkOqzpVjzhsOZeNTnyxo6BFDzlpwMUmLWqR1
5CuBtbjLhoikgpgbtXMK
=3xGc
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170326202242</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-26 20:22:42-0400</timestampReceived><subject>Re: [tor-dev] One Valid Next-Generation Onion Address per Private Key</subject><body>

On Sun, Mar 26, 2017 at 10:39:08PM +1100, teor wrote:
&gt; Hi all,
&gt; 
&gt; Most onion service users expect that there is only one valid onion
&gt; address for their private key. (For example, one address is listed in
&gt; SSL certificates.)
&gt; 
&gt; I spoke with Ian, and he said that as part of validating the onion
&gt; address, we should check if it is a valid point.
&gt; 
&gt; He said we need to multiply the point by L, and make sure there's no
&gt; torsion component (that is, that the result is the identity).
&gt; 
&gt; This avoids the complexity of choosing a canonical point using some
&gt; lexicographic order, or the complexity of using something like decaf.
&gt; 
&gt; (Hopefully, Ian will write back if I transcribed things incorrectly.)

Just to transcribe the further conversation:

Yes, that's fine to make sure you're using a legitimate point, and not
one that's been munged, it turns out you don't need to do even that.
The reason is that the daily derived blinded point includes a hash of
the onion address, so if someone changes the onion address in any way,
the daily blinded version will be totally different, and the modified
address won't work, *even if* the contained public key is "equivalent"
to the original key.
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170326234058</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-03-26 23:40:58-0400</timestampReceived><subject>Re: [tor-dev] The behavior of ClientRejectInternalAddresses</subject><body>

On Sun, Mar 26, 2017 at 03:06:00PM -0400, Jesse V wrote:
&gt; In other words, if I disable this flag and I open 127.0.0.1:8080 in the
&gt; Tor Browser, will the browser or the tor binary attempt to connect to
&gt; the client's 127.0.0.1:8080?

No, Tor Browser will pass the request to Tor, and Tor will try to
connect to that address via Tor to somebody's 127.0.0.1. And since
most relays will have an exit policy that doesn't allow exiting to that
address, there's a good chance there won't be any exits that are up for
such a request.

It definitely should not decide to bypass the proxy, and it also shouldn't
have your Tor client turn into a local mini exit relay for you.

&gt; This is essentially what I'm after, and I
&gt; just want to confirm that ClientRejectInternalAddresses is the best
&gt; approach, or if there is a better setting. Just to clarify, I want to
&gt; connect the client's localhost and not an exit's.

Yeah, we try hard to make that behavior not happen.

In the Tor Browser network settings (Edit -&gt; Preferences -&gt; Advanced -&gt;
Network -&gt; Settings), you'll see the "No Proxy For" box, which in my
normal Firefox has 127.0.0.1 filled in. But Tor Browser makes sure
to keep that box empty, so there's no accidental proxy bypass.

For more info see the "Proxy Obedience" section in the security
requirements:
https://www.torproject.org/projects/torbrowser/design/#security

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170327085834</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-03-27 08:58:34-0400</timestampReceived><subject>Re: [tor-dev] Proposition: Applying an AONT to Prop224 addresses?</subject><body>

On Mon, Mar 27, 2017 at 01:59:42AM -0400, Ian Goldberg wrote:
&gt; &gt; To add an aside from a discussion with Teor: the entire "version" field
&gt; &gt; could be reduced to a single - probably "zero" - bit, in a manner perhaps
&gt; &gt; similar to the distinctions between Class-A, Class-B, Class-C... addresses
&gt; &gt; in old IPv4.
&gt; &gt; 
&gt; &gt; Thus: if the first bit in the address is zero, then there is no version,
&gt; &gt; and we are at version 0 of the format
&gt; &gt; 
&gt; &gt; If the first bit is one, we are using v1+ of the format and all bets are
&gt; &gt; off, except that the obvious thing then to do is count the number of 1-bits
&gt; &gt; (up to some limit) and declare that to be version number.  Once we're up to
&gt; &gt; 3 or 4 or 7 or 8 one-bits, then shift version encoding totally.
&gt; &gt; 
&gt; &gt; Teor will correct me if I misquote him, but the advantage here was:
&gt; &gt; 
&gt; &gt; a) the version number is 1 bit, ie: small, for the forseeable / if we get
&gt; &gt; it right
&gt; &gt; 
&gt; &gt; b) in pursuit of smallness, we could maybe dump the hash in favour of a
&gt; &gt; AONT + eyeballs, which would give back a bunch of extra bits
&gt; &gt; 
&gt; &gt; result: shorter addresses, happier users.
&gt; 
&gt; You indeed do not require a checksum under an AONT, but you do require
&gt; redundancy if you want to catch typos.  Something like
&gt; 
&gt; base64( AONT( pubkey || 0x0000 ) || version)
&gt; 
&gt; is fine.  If you want "version" to be a single bit, then the AONT would
&gt; have to operate on non-full bytes, which is a bit (ha!) annoying, but
&gt; not terrible.  In that case, "0x0000" would actually be 15 bits of 0,
&gt; and version would be 1 bit.  This would only save 1.4 base32 characters,
&gt; though.  If you took off some more bits of the redundancy (down to 8
&gt; bits?), you would be able to shave one more base32 char.  And indeed, if
&gt; you make the redunancy just a single byte of 0x00, then the extra 0-bit
&gt; for the "version" actually fits neatly in the one leftover bit of the
&gt; base32 encoding, I think, so the AONT is back to working on full bytes.
&gt; 
&gt; But is a single byte of redundancy enough?  It will let through one out
&gt; of every 256 typos.  (I thought we had spec'd 2 bytes for the checkcum
&gt; now, but maybe I misremember?  I'm also assuming we're using a simple
&gt; 256-bit encoding of the pubkey, rather than something more complex that
&gt; saves ~3 bits.)
&gt; 
&gt; (Heading to the airport.)

OK, here are the details of this variant of the proposal.  Onion
addresses are 54 characters in this variant, and the typo-resistance is
13 bits (1/8192 typos are not caught).

Encoding:

raw is a 34-byte array.  Put the ed25519 key into raw[0..31] and 0x0000
into raw[32..33].  Note that there are really only 13 bits of 0's for
redundancy, plus the 0 bit for the version, plus 2 unused bits in
raw[32..33].

Do the AONT.  Here G is a hash function mapping 16-byte inputs to
18-byte outputs, and H is a hash function mapping 18-byte inputs to
16-byte outputs.  Reasonable implementations would be something like:

G(input) = SHA3-256("Prop224Gv0" || input)[0..17]
H(input) = SHA3-256("Prop224Hv0" || input)[0..15]

raw[16..33] ^= G(raw[0..15])
# Clear the last few bits, since we really only want 13 bits of redundancy
raw[33] &amp;= 0xf8
raw[0..15] ^= H(raw[16..33])

Then base32-encode raw[0..33].  The 56-character result will always end
in "a=" (the two unused bits at the end of raw[33]), so just remove that
part.

Decoding:

Base32-decode the received address into raw[0..33].  Depending on your
base32 decoder, you may have to stick the "a=" at the end of the address
first.  The low two bits were unused; be sure the base32 decoder sets
them to 0.  The next lowest bit (raw[33] &amp; 0x04) is the version bit.
Ensure that (raw[33] &amp; 0x04 == 0); if not, this is a different address
format version you don't understand.

Undo the AONT:

raw[0..15] ^= H(raw[16..33])
raw[16..33] ^= G(raw[0..15])
# Clear the last few bits, as above
raw[33] &amp;= 0xf8

Check the redundancy by ensuring that raw[32..33] = 0x0000.  If not,
there was a typo in the address.  (Note again that since we explicitly
cleared the low 3 bits of raw[33], there are really only 13 bits of
checking here.)

raw[0..31] is then the pubkey suitable for use in Ed25519.  As before
(and independently of the AONT stuff), you could sanity-check it to make
sure that (a) it is not the identity element, and (b) L times it *is*
the identity element.  (L is the order of the Ed25519 group.)  Checking
(a) is important; checking (b) isn't strictly necessary for the reasons
given before, but is still a sensible thing to do.  If you don't check
(b), you actually have to check in (a) that the pubkey isn't one of 8
bad values, not just the identity.  So just go ahead and check (b) to
rest easier. ;-)


This version contains two calls to SHA3, as opposed to the one such call
in the non-AONT (but including a checksum) version.  The benefit is
Alec's (and others') desire that there cannot be any bits an attacker
could twiddle that would leave both the key the same and the address
looking OK to somone who just spot-checks say the beginning and/or the
end.
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170327164812</emailId><senderName>irykoon</senderName><senderEmail>irykoon@gmail.com</senderEmail><timestampReceived>2017-03-27 16:48:12-0400</timestampReceived><subject>[tor-dev] GSOC 2017: Revised Proposal for anon-connection-wizard</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello everyone!

I have revised my previous proposal with the help of anonym's
feedback. Could anyone offer me some feedback about it please? Any
recommendation, suggestion and criticism are very welcome and appreciate
d!

#####What project would you like to work on?
I would like to work on the anon-connection-wizard. It is a
Python-clone of the Tor Launcher which aims at providing Tor users
with a graphical instruction on configuring the Tor. This
[application](https://github.com/Whonix/anon-connection-wizard) has
been developed as a part of the Whonix Project. Some of the
screenshots of its old version can be found
[here](https://www.whonix.org/blog/connection-bridge-wizard).

This application is especially helpful for users who live in
Tor-censored area. This is because those users can only connect to the
Tor network with the help of other censorship circumvention tools
which include but are not limited to Tor bridges, pluggable transports
and other third party Internet censorship circumvention tools like
Lantern and VPN.

Currently, the Tor Launcher is shipped with the Tor Browser Bundle and
heavily relies on the Tor Browser for its implementation. Although
thanks to the great
efforts([[1]](https://git-tails.immerda.ch/tails/tree/config/chroot_loca
l-hooks/06-adduser_tor-launcher?h=devel),
[[2]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-hooks/
10-tbb?h=devel),
[[3]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-includ
es/usr/local/sbin/tails-tor-launcher?h=devel),
[[4]](https://git-tails.immerda.ch/tails/tree/config/chroot_local-includ
es/usr/local/bin/tor-launcher?h=devel))
of Tails, the Tor Launcher can be run as a stand-alone XUL application
currently, since the XUL will not be supported by mozilla in Firefox
ESR branch [some time next
year](https://blog.mozilla.org/addons/2016/11/23/add-ons-in-2017/),
that implementation may not work for a long time. Beiseds, I agree
with the Whonix core developer Patrick Schleizer that "the Tor Browser
Bundle has its kind of users. system Tor (refers to Tor from
packages.debian.org or deb.torproject.org) users, where Tor runs as
daemon, is used in different ways for different purposes".

Therefore, although anon-connection-wizard is a Python-clone of the
Tor luancher, since all its dependencies are already in Debian and
already packaged, it can still serve as a really useful tool for the
system Tor users or a loose coupling substituition to the Tor Launcher.

In addition, the current instructions provided by the
anon-connection-wizard and Tor launcher is not clear enough for users
to configure Tor correctly. Therefore I would like to implement and
redesign the anon-connection-wizard. I hope that my work will help
more people to connect to the Tor network efficiently and successfully.

#####Your proposal should also try to break down the project into
tasks of a fairly fine granularity, and convince us you have a plan
for finishing it.

As mentioned above, my project goals include two main parts:

######The clone implementation of Tor Launcher:
Currently, I have helped to implement the basic functions of
anon-connection-wizard. However, there are still several bugs need
fixing and a large number of exciting features need implementing,
which include:

1. The current implementation of configuring torrc file is very
rudimentary. The anon-connection-wizard should read the previous
bridge/proxy configuration from the file and adjust the default UI
accordingly. Just like what Tor Launcher has been doing. The ["edit
marker
approach"](https://forums.whonix.org/t/graphical-gui-whonix-setup-wizard
- -anon-connection-wizard-technical-discussion/650/226)
is preferred way to implement this;
2. The password for proxy setting should be covered by character *.

######The redesign of the anon-connection-wizard:
I have made a specific
[proposal](https://forums.whonix.org/t/a-proposal-for-redesigning-anon-c
onnection-wizard-for-better-usability/3681)
for this topic. And the redesign should at least includes:

1. Rearranging the instruction page orders for better usability;
2. Rewriting the literal instruction so that it fits the actual
situation of people in censored areas;
3. Adding more features to the custom Tor bridges configuration input
box for more clear instruction. For example, syntax highlight,
tool-tips, etc;
4. Doing user behavior experiment to find out what can be helpful for
better usability;
5. Modifying the anon-connection-wizard based on the result of the
experiment.

#####A timeline for what you will be doing throughout the summer is
highly recommended.

Since the specific dates may be changed with the undecided working
schedule. I arrange my timeline in a week unit. Please notice that I
have communicated with my potential mentor that we can work on some
tasks in advanve if the project plan for a specific week is finished
earlier than expected.


| TIME | TODO |
|------|------|
|Week 1 |   The password for proxy setting should be covered by
character *.|
|Week 3 |	Rewrite the literal instruction so that it fits the actual
situationy of people in censored areas.|
|Week 4 |	Generate ideas on redesigning the anon-continence-wizard
users interface, basing on the recommendations from outside
sources,problems discussed above and suggestions from other people.
Present the planning redesign to public to receive feedback.|
|Week 5 |	Rearrange the instruction page orders for better usability;
Rewriting the literal instruction so that it fits the actual situation
of people in censored areas.|
|Week 6 |	Add more features to the custom Tor bridges configuration
input box for more clear instruction. For example, syntax highlight,
tool-tips, etc.|
|Week 7 |	Prepare for the user behavior experiment, including
recruitment and setting up environment.|
|Week 8 |	Conduct the experiment.|
|Week 9 |	Process and analysis the experiment data.|
|Week 10|	Write the research report.|
|Week 11|	Modify the anon-connection-wizard based on the result of the
experiment.|
|Week 12|	Modify the anon-connection-wizard based on the result of the
experiment.|

#####Point us to a code sample: something good and clean to
demonstrate that you know what you're doing, ideally from an existing
project.

The followings are a part of my pull requests to the
anon-connection-wizard project on GitHub:
1. [Basic features
implementation](https://github.com/Whonix/anon-connection-wizard/pull/1)
;
2. [Pluggable transport
renew](https://github.com/Whonix/anon-connection-wizard/pull/2);
3. [Port from Python2 to Python3.4 &amp; from PyQt4 to
PyQt5](https://github.com/Whonix/anon-connection-wizard/pull/4).

The following is my proposal for the redesign of
anon-connection-wizard in Whonix Forum:
1. [A proposal for redesigning anon-connection-wizard for better
usability](https://forums.whonix.org/t/a-proposal-for-redesigning-anon-c
onnection-wizard-for-better-usability/3681)


#####Why do you want to work with The Tor Project in particular?

As one who was living in oppressive area, I deeply understand the
importance of Internet freedom to a society. At first, I merely
considered Internet freedom as fighting against Internet censorship.
However, after a large amount of observation, reading and reflection,
I realized that the self-censorship conducted by every scared citizens
was much more powerful and terrible than the censorship conducted by
the outside world. It was at that moment I realized the online
anonymity was a vital component to Internet freedom because it frees
people from fear.

I value Tor/Whonix. Without it, I couldn't have been freed from the
fear and explored the world freely and finally became who I am today.

Therefore, contributing to Tor/Whonix as a career is not only a dream
that I have been fighting for, but also an essential approach to my
self-actualization.

#####Tell us about your experiences in free software development
environments. We especially want to hear examples of how you have
collaborated with others rather than just working on a project by
yourself.
I agree that "[o]pen and clear communication is of utmost importance".
This is because of two main reasons from my point of view. First, a
successful free and open source software development heavily relies on
the collaboration between different people. A good communication skill
will create a positive and supportive atmosphere which not only make
everyone works for it more efficient but also attracts more people to
join the development. Second, feedback from others, especially mentor,
can be extremely beneficial to a student's progress. Without the
feedback, it may take a student years until one day after a
frustrating debugging process to realize a mistake he/she made; while
he/she may realize several mistakes he/she made almost immediately
from his/her mentor's feedback.

I have already been working on the project with my potential mentor
Patrick Schleizer. A small part of our open communication can be found
[here](https://forums.whonix.org/t/graphical-gui-whonix-setup-wizard-ano
n-connection-wizard-technical-discussion/650/222), which may be
helpful to prove we have been having an open and clear communication.
I also take Jean-Philippe Ouellet's words said on the Qubes-devel
mailing list as an encouragement to me:
&gt; This kind of detailed and engaged communication is a model to all
GSoC applicants

#####Will you be working full-time on the project for the summer, or
will you have other commitments too (a second job, classes, etc)? If
you won't be available full-time, please explain, and list timing if
you know them for other major deadlines (e.g. exams). Having other
activities isn't a deal-breaker, but we don't want to be surprised.

I am going to be enrolled for the Summer 2017 semester that begins May
22nd and ends June 23th at XXX University. I am going to take two
classes from Monday to Friday for each week during the Summer
semester. One will be from 3:20PM to 5:00PM (UTC) and another one will
be from 7:00PM to 8:40PM (UTC).

The sum of the time I will be in class for each weekday will be 3
hours and 20 minute which is totally fine to me. My current overall
GPA is 4.0/4.0 which may help to prove I can handle my school study
well. According to Google Summer of Code timeline, the "[c]oding
officially begins" at May 30th which means there will be approximate
three weeks that I have both school study and Google Summer of Code.

To work around it, I have came up with three plans which either of
them is fine to my potential mentor:
1. Since I have been familiar with the contributing workflow for
Whonix, I do not have to spend a lot of time to get used to it.
Therefore I can use the "Community Bonding Period" which is from May
4th to May 30th to do the real coding for the project;
2. I can also keep committing to the project during each weekend from
now on before May 4th . This is also a way to work around the time
conflicts.
3. If I am expected to code only during the official timeline, I can
spend 5 hours each day during the weekdays and spend 8 hours each day
during the weekends.

#####Will your project need more work and/or maintenance after the
summer ends?
Yes! Tails developer anonym pointed out a promising future for the
anon-connection-wizard on the tor-dev mailing list:
&gt; "I also see potential for future collaboration between Whonix and
Tails for extending the usefulness of anon-connection-wizard beyond
what Tor Launcher (and its replacement) offers [2];
anon-connection-wizard targets the OS, not just a single application,
so it could integrate the choices of network configuration (wired?
which wireless network? MAC spoofing?) and Tor configuration (proxy?
pluggable transport?) in a single place which probably makes more
sense for users and also allows us to more easily (optionally) save
these settings so they are restored the next time you visit the same
network. This could potentially even be used to help giving users
control over entry node selection to avoid persistent Entry Guards
from leaking information about you geographical movement. [3]"

#####What are the chances you will stick around and help out with that
and other related projects?
Since I would like to take contributing to Tor/Whonix as a career, I
will definitely stick around the Tor/Whonix community and help out
with the future development of my project and other related ones. I
never consider my project as a one-time project. Instead, I consider
it as an important step to help myself get more invovled in the
Tor/Whonix community.

#####What is your ideal approach to keeping everybody informed of your
progress, problems, and questions over the course of the project? Said
another way, how much of a "manager" will you need your mentor to be?

My plan is to take the [Whonix Forum](https://forums.whonix.org/) as
the daily communication platform with my potential mentor Patrick. And
just like what I have been doing, I will also post a detailed progress
report for each working period which is no more than a week. Since the
anon-connection-wizard is hosted on Github right now, people can also
take it as a way to see my commits and progress. I can also send the
posts to the tor-dev mailing list if it is considered as a good idea.

#####What school are you attending? What year are you, and what's your
major/degree/focus? If you're part of a research group, which one?

If these information is necessary, please do not hesitate to contact
me. My contact information is listed in the next section.

#####How can we contact you to ask you further questions?

Currently, people can contact me through the following ways:

1. Email: irykoon at gmail dot com
[GPG](https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xA14B4DBC6DCDD53C
)
2. Github: @irykoon
3. Whonix Forum: @iry

I will inform the public if there is any change to my contact informatio
n.

#####Are you applying to other projects for GSoC and, if so, what
would be your preference if you're accepted to both? Having a stated
preference helps with the deduplication process and will not impact if
we accept your application or not.
I am going to submit the same proposal to both the Tor Project and the
Qubes Project. This is because I would like to avoid the situiation
where one of the projects does not get as many slots as it wants from
google. I will be extremly happy to be accepted by either of the
projects. Since my project may benifit the Tor Project more, I would
prefer it when I am accepted by both of the projects.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJY2UGjAAoJEKFLTbxtzdU8coMQAIsfxRw5Fdyrnwp6Rb13zpEh
ugDr9FdDOuIMmIQbEKn+kXoYUoECuuDXa0r+DLOS9HodPJ6MrksDr8956HsusEnw
7XyJLlfL+pccNPzsyXe+O5UgiMYlmIJpH4+7tHyZ0bYkjzrxsa6TPaP/iODoby3d
B2f5GUXgt5X1vpGBmGGVpOzTYTSJwnNaFfpE4O6dCm41aMsuMsIGj1vRH80SqrsT
XJKBdgEKbwewGEwLNgdMx5XlH+9rARv0Ytx83GI8894sx80Rl2S9wL9D5km7IoWW
n3+8HS0wzFOkCIFPumfAtwAHtJRTyWVEc4jr/waObPwJtK/cnoOwkVHXbimvnWoc
dr7qjNBDDms98rXDD6gxgKToIKgdgDJetMW9QWhDBTXuZcbq6bwmONoTZ94/4mR6
V0E2HhGkjF/RLCu8dP+oHVPdEsFN1er/l9SEUreqF78+VRFwspAc7y5nIo/0WXDV
t/zKeiqYjsw+bHC7Dbaxax67QXNuWe3viToCYtPOKGMat7ORlTj+eqNaE6iRt+q/
N91Wd/B86v5ibWy9UEN4Uo/FqwT+YOjOYJ1yoXZRmnrdwhYalAt3ESCqCi3cMDc8
eRQGbtCwGeaGd5g03OfBe8zQwswj11yTwi1xsIOL/RdVXt7Af6Q1MMd6a0g0Rub0
6WV1NX+Knl88tbzyRpQ5
=ioNx
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328085253</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-03-28 08:52:53-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0, draft 1 Specification</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Yawning. Thank you for providing these links. This is very helpful. I
will make sure that these issues are discussed at the next specification
meeting.

On Mar 28, 2017 8:36 AM, "Yawning Angel" &lt;yawning@schwanenlied.me&gt; wrote:

&gt; On Mon, 27 Mar 2017 04:03:47 -0500
&gt; Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; &gt; I am familiar with the dual stack problem generally, where servers
&gt; &gt; have both IPv4 and IPv6 IP addresses. I was not involved in any
&gt; &gt; conversations regarding the dual stack problem for Pluggable
&gt; &gt; Transports specifically. If you could point me to any documentation
&gt; &gt; on this issue, that would be helpful. Alternatively, if you could
&gt; &gt; explain what the issue is and what possible solutions you'd like to
&gt; &gt; see in a future Pluggable Transports specification, that is something
&gt; &gt; we could make happen in future specifications revisions.
&gt;
&gt; None of the things I've mentioned are new concerns, and I brought all
&gt; of them up (and more) a long time ago back when I was giving thought
&gt; to the PT spec.
&gt;
&gt; I've basically given up at this point, and to be honest I gave up
&gt; shortly after I initially started making noises about improving the
&gt; spec because it was clear that while I was trying to improve the
&gt; existing interface while preserving the overall architecture, everyone
&gt; else was far more interested in "lets make everything into a bunch of
&gt; library code".
&gt;
&gt; https://lists.torproject.org/pipermail/tor-dev/2015-September/009432.html
&gt;
&gt; https://trac.torproject.org/projects/tor/ticket/21261
&gt; https://trac.torproject.org/projects/tor/ticket/11211
&gt;
&gt; Regards,
&gt;
&gt; --
&gt; Yawning Angel
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hi Yawning. Thank you for providing these links. This is very \
helpful. I will make sure that these issues are discussed at the next specification \
meeting.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mar 28, 2017 \
8:36 AM, "Yawning Angel" &lt;&lt;a \
href="mailto:yawning@schwanenlied.me"&gt;yawning@schwanenlied.me&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Mon, 27 Mar 2017 04:03:47 \
-0500&lt;br&gt; Brandon Wiley &lt;&lt;a \
href="mailto:brandon@blanu.net"&gt;brandon@blanu.net&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; I am \
familiar with the dual stack problem generally, where servers&lt;br&gt; &gt; have both IPv4 \
and IPv6 IP addresses. I was not involved in any&lt;br&gt; &gt; conversations regarding the \
dual stack problem for Pluggable&lt;br&gt; &gt; Transports specifically. If you could point \
me to any documentation&lt;br&gt; &gt; on this issue, that would be helpful. Alternatively, \
if you could&lt;br&gt; &gt; explain what the issue is and what possible solutions you'd \
like to&lt;br&gt; &gt; see in a future Pluggable Transports specification, that is \
something&lt;br&gt; &gt; we could make happen in future specifications revisions.&lt;br&gt;
&lt;br&gt;
None of the things I've mentioned are new concerns, and I brought all&lt;br&gt;
of them up (and more) a long time ago back when I was giving thought&lt;br&gt;
to the PT spec.&lt;br&gt;
&lt;br&gt;
I've basically given up at this point, and to be honest I gave up&lt;br&gt;
shortly after I initially started making noises about improving the&lt;br&gt;
spec because it was clear that while I was trying to improve the&lt;br&gt;
existing interface while preserving the overall architecture, everyone&lt;br&gt;
else was far more interested in "lets make everything into a bunch of&lt;br&gt;
library code".&lt;br&gt;
&lt;br&gt;
&lt;a href="https://lists.torproject.org/pipermail/tor-dev/2015-September/009432.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;pipermail/tor-dev/2015-&lt;wbr&gt;September/009432.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/ticket/21261" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/ticket/21261&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/11211" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/ticket/11211&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; Regards,&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Yawning Angel&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170317125411</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-03-17 12:54:11-0400</timestampReceived><subject>[tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

Hi,

Please have a look at this proposal. Will replace xyz with more
meaningful numbers once this is finalized. Comments, suggestions and
criticism are welcome.

-------------
Filename: xxx-Count-unique-IPs-in-anonymous-way.txt
Title: Count Unique IP addresses in an anonymous way
Author: Jaskaran Veer Singh
Created: 14 March 2017
Status: Draft

 �0. Introduction

Currently, guard relays and bridges maintains a list of IP addresses of
the devices that connect to it for various reasons such as for use by
the bridge to check which country has them blocked. This is dangerous
because if any of these tor instances get compromised, clients will be
de-anonymized. To solve this issue, a new data structure that keeps a
track of unique IP addresses seen but does not directly keep a list of
them is proposed in this document.

 �1. Specification

 �1.1. Notation

  Let `a^b` denote the exponentiation of a to the bth power.

  Let `a == b` denote the equality of a with b, and vice versa.

  Let `a := b` be the assignment of the value of b to the variable a.

  Let `a / b` denote the division of a by b.

  Let `a &lt;= b` denote that a is less than equal to b.

  Let `a &gt;= b` denote that a is greater than equal to b.

 �2. Research

There are three ways to solve this problem. All the three ways are
actually Big Data
Algorithms. A few problems arises for each of these algorithms since
they are made for
big data but the data we would provide is not necessarily big.

 �2.1. Bloom Filter[1]

A bloom filter maps the input to positions on the bitmap after passing
through 2 or more hash functions. Later any new input are mapped onto
this bitmap in the same way to check whether this value is already
present in the set. The feature of this bitmap is that collisions could
happen. And this collision creates deniability. When collisions happen,
On the one hand, one of the input doesn't count to be unique (although
in reality, it is), and on the other hand, this is beneficial since this
creates deniability. The person who gets hand on this data structure
could never be 100% sure about the original inputs. So we get the job
done successfully at some error rate.

 �3.1.1. Obstacle

Suppose if the number of inputs is small. Let's say we receive just 1
connection in a day from some small, less busy country like Estonia. In
that case, there might not be any chance for collision and the adversary
could determine the IP address with some brute force. Hence this
algorithm isn't suited for us.

 �3.2. Rappor[2]

Randomized Aggregatable Privacy Preserving Ordinal Responses is an
algorithm where the system adds some deterministic and nondeterministic
noise to the data that has to be stored. This creates deniability. In
our case, we don't need to have deterministic noise added at first
stage. So we'll just stick to adding non deterministic noise and storing
it in a bloom filter.

One thing to note here is that, we should not accept output of the non
deterministic randomizer which can be traced back to any IP address of
Group D or Group E since those IP addresses are not in use and the
adversary could easily know that those have been produced after adding
random noise.

 �3.2.1. Obstacle

Using brute force technique, the adversary could check to see whether
the IP address stored is the correct one or produced using random noise.
In this technique, the adversary could compare those IP address
(obtained via brute force) to the directory of what IP addresses are
allotted to what country. The one that does not match, is the one
that has been faked by using random noise.

 �3.3. Probabilistic Counting with Stochastic Averaging[3] (PCSA)

It is based on FM sketches. The algorithm goes as follows:

|  m = 2^b # with b in [4...16]
|  bitmaps = [[0]*32]*m # initialize m 32bit wide bitmaps to 0s
|
|  # Construct the PCSA bitmaps
|  for h in hashed(data):
|      bitmap_index = 1 + get_bitmap_index( h,b ) # binary address of
                                                    rightmost b bits
|      run_length = run_of_zeros( h,b )  # length of the run of zeros
                                            starting at bit b+1
|      bitmaps[bitmap_index][run_length] = 1 # set the bitmap bit
                                       based on the run length observed
|
|  # Determine the cardinality
|  phi = 0.77351		
|  DV = m / phi * 2 ^ (sum( least_sig_bit( bitmap ) ) / m) # the DV
                                                             estimate

So, Error is bounded by 0.78/sqrt(m)

 �3.3.1. Obstacle

This algorithms stated above is made for use on large databases. Infact,
these were invented to save time and space while doing basic set
operations on data with high cardinality. But the data we would provide
as an input is not necessarily of high cardinality. Since we would be
counting numbers for each country separately, so the expected value of
the input cardinality would be :

			0 &lt;= C &lt;= 2500

where C is the actual cardinality of the input data.

 �3.3.2. Workaround

As a workaround, we could introduce a correction term for small values
of cardinality.
So our final formula could look something like:

		DV(S1,...,Sm) :=  m � (2^(Z/m) ���2^(����� �Z/m))/ ��

Where �� is chosen to be around 1.75

 �4. Implementation

The data structure present in the geoip.c needs to be removed as it
stores the IP address of the client. The data structure is shown below.

struct clientmap_entry_t {
  HT_ENTRY(clientmap_entry_t) node;
  tor_addr_t addr;
  char *transport_name;
  unsigned int last_seen_in_minutes:30;
  unsigned int action:2;
};

It then later needs to be replaced by a datastruture that contains the
list of countries with the number of unique IP addrs seen for that country.

The whole system can be represented by this diagram.

			      ------------------	
			      |	Input IP Addr  |
			      ------------------
				      |
				      |
			     ---------------------
			     | Determine Country |
			     ---------------------
				      |
				      |
			    ----------------------
			    | Determine Transport|
			    ----------------------
				      |
				      |
			  ------------------------------
			  | Get salted hash of IP addr |
			  ------------------------------
				      |
				      |
			   --------------------------
			   |   Apply the formula    |
			   |   on the hash obtained |
			   --------------------------
				      |
				      |
			 ---------------------------------------
			 |   Increment that country's counter  |
			 |   if the cardinality estimation     |
			 |   is greater than the estimation    |
		         |         done previously             |
			 ---------------------------------------
				

 �5. Security Considerations

We might as well go ahead and implement this, but the thing to keep in
mind is that implementing this would not protect a client's identity
from a adversary completely. First thing to understand is that, an
adversary that has gained access to a guard node or a bridge could still
get the random value generated and deanonymize the client using
brute force. Or even better, why would the adversary need that random
value when she simply log all network connections coming into the
compromised system?

So, A thing to note is that this functionality would keep those clients
anonymous who had connected to the compromised system in the past, but
not those who will connect to it in the future.

 �6. References

[1] https://en.wikipedia.org/wiki/Bloom_filter
[2] https://www.chromium.org/developers/design-documents/rappor
[3] https://research.neustar.biz/2013/04/02/sketch-of-the-
day-probabilistic-counting-with-stochastic-averaging-pcsa/

-------------

Regards,
Jaskaran Veer Singh

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170321204653</emailId><senderName>Tony Arcieri</senderName><senderEmail>bascule@gmail.com</senderEmail><timestampReceived>2017-03-21 20:46:53-0400</timestampReceived><subject>[tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

[Attachment #2 (multipart/alternative)]


I'm trying to gauge interest on the IRTF's CFRG mailing list regarding
collaborating on a draft for a standard Ed25519 hierarchical derivation /
key blinding scheme:

https://mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA

The post makes several mentions of Tor's work in the space in regard to the
next-generation hidden services design.

I think it'd be great if Tor were to collaborate on the design of such a
scheme and adopt it for the new hidden services design. I see a lot of
convergent evolution in this space and think it would be great if there
were a single standard everyone could implement.

Even if you don't, I think there are some ideas from similar schemes Tor
should fold back into its own design, particularly in regard to how certain
bits of the private scalar are "clamped". Some discussion of that here:

https://moderncrypto.org/mail-archive/curves/2017/000862.html

tl;dr: clamp the third highest bit of the root scalar to zero (in addition
to the bits normally clamped in the non-canonical Ed25519 private scalar),
and use 224-bit child scalars.

-- 
Tony Arcieri

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I'm trying to gauge interest on the IRTF's CFRG mailing list \
regarding collaborating on a draft for a standard Ed25519 hierarchical derivation / \
key blinding scheme:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA"&gt;https:// \
mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
post makes several mentions of Tor's work in the space in regard to the \
next-generation hidden services design.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think it'd be \
great if Tor were to collaborate on the design of such a scheme and adopt it for the \
new hidden services design. I see a lot of convergent evolution in this space and \
think it would be great if there were a single standard everyone could \
implement.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Even if you don't, I think there are some \
ideas from similar schemes Tor should fold back into its own design, particularly in \
regard to how certain bits of the private scalar are "clamped". Some \
discussion of that here:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://moderncrypto.org/mail-archive/curves/2017/000862.html"&gt;https://moderncrypto.org/mail-archive/curves/2017/000862.html&lt;/a&gt;&lt;br \
clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;tl;dr: clamp the third highest bit of the root scalar \
to zero (in addition to the bits normally clamped in the non-canonical Ed25519 \
private scalar), and use 224-bit child scalars.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature"&gt;Tony Arcieri&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328011740</emailId><senderName>Krishna Shukla</senderName><senderEmail>karatekrishna@hotmail.com</senderEmail><timestampReceived>2017-03-28 01:17:40-0400</timestampReceived><subject>[tor-dev] GSoC 2017 - Questions</subject><body>

Hey,

I'm Krishna Shukla, I'm studying a bachelors of computer science at the Uni=
versity of Queensland.
I guess the relevant subjects I've studied so far covers C and Unix program=
ming, Computer Networks, Algorithms and Data Structures, and Programming in=
 the large. (got a high distinction in all the above)

My most important question is if I could work on a project but not actually=
 be apart of GSoC? - I am unfortunately ineligible as my brother works as a=
 Security Engineer at Google Sydney. And if the above is okay would it also=
 be okay to not have to strictly abide by their timeline as I don't actuall=
y have holidays during this time in Australia but I'd like to contribute in=
 my free time nonetheless!

As for projects themselves I'm really interested in the relay crypto parall=
elism and the hidden service crypto parallelism. And I have a couple of que=
stions regarding them.

For the relay crypto parallelism I wanted to know what is there left to be =
done? When I looked at the tickey #1749 someone called towelenee made a few=
 patches that already made it multi threaded, were these changes just not a=
ccepted? Also wanted to know if specific knowledge about circuit cryptograp=
hy was required? As I know of it, but I certainly cannot make my own fully =
homomorphic cryptosystem, is it more in the steps of the system has already=
 been made, it just needs to be parallelised correctly?

It also states the code is written to expect immediate responses, I'm not s=
ure what you mean by that, after all there is always a slight delay, and if=
 it becomes multi threaded we can never know what is running what when, so =
is it more someone is waiting at the other end of a socket and needs it ASA=
P, or is it internally things want the answer quickly (in which case I don'=
t know how to solve it other than uses mutexes which is probably not so oka=
y)?

I am interested in the hidden service crypto parallelism in its own right, =
but I was also thinking weather it would be a feasible idea to combine the =
two projects and create a multi-threaded decryption library that could be l=
inked to both the tor relay and the hidden services (could release it as a =
cryptosystem library, all the fully homorphic cryptosystem libraries I foun=
d used GPL licenses and thus not compatible with tors), or are their requir=
ements too far apart?

Also I was wondering how the Ahmia automated blacklisting was planned to wo=
rk? As in how would a list of child abuse sites be fetched? Honestly I don'=
t actually know python, I've worked with it and Django before in a hackatho=
n once, but I cannot claim any real knowledge in it, but at the same time I=
 am passionate about the topic of child abuse, and I think if I can help re=
duce its demand in anyway by making it harder to find, I'd say it's some go=
od added to the world.

Apologies about the long mail guys,
Krishna Shukla

[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;style type="text/css" style="display:none;"&gt;&lt;!-- P {margin-top:0;margin-bottom:0;} \
--&gt;&lt;/style&gt; &lt;/head&gt;
&lt;body dir="ltr"&gt;
&lt;div id="divtagdefaultwrapper" \
style="font-size:12pt;color:#000000;font-family:Calibri,Arial,Helvetica,sans-serif;" \
dir="ltr"&gt; &lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: \
tahoma, sans-serif; font-size: 12.8px;"&gt; Hey,&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; I'm Krishna Shukla, I'm studying a bachelors of \
computer science at the University of Queensland. &lt;br&gt; I guess the relevant \
subjects I've studied so far covers C and Unix programming, Computer Networks, \
Algorithms and Data Structures, and Programming in the large. (got a high distinction \
in all the above)&lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; My most important question is if I could work on a \
project but not actually be apart of GSoC? - I am unfortunately ineligible as my \
brother works as a Security Engineer at Google Sydney. And if the above is okay would \
it also be okay to not have to strictly  abide by their timeline as I don't actually \
have holidays during this time in Australia but I'd like to contribute in my free \
time nonetheless!&lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; As for projects themselves I'm really interested in \
the relay crypto parallelism and the hidden service crypto parallelism. And I have a \
couple of questions regarding them.&lt;br&gt; &lt;br&gt;
For the relay crypto parallelism I wanted to know what is there left to be done? When \
I looked at the tickey #1749 someone called towelenee made a few patches that already \
made it multi threaded, were these changes just not accepted? Also wanted to know if  \
specific knowledge about circuit cryptography was required? As I know of it, but I \
certainly cannot make my own fully homomorphic cryptosystem, is it more in the steps \
of the system has already been made, it just needs to be parallelised \
correctly? &lt;br&gt; &lt;br&gt;
It also states the code is written to expect immediate responses, I'm not sure what \
you mean by that, after all there is always a slight delay, and if it becomes multi \
threaded we can never know what is running what when, so is it more someone is \
waiting at  the other end of a socket and needs it ASAP, or is it internally things \
want the answer quickly (in which case I don't know how to solve it other than uses \
mutexes which is probably not so okay)?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; I am interested in the hidden service crypto \
parallelism in its own right, but I was also thinking weather it would be a feasible \
idea to combine the two projects and create a multi-threaded decryption library that \
could be linked to both the tor relay and  the hidden services (could release it as a \
cryptosystem library, all the fully homorphic cryptosystem libraries I found used GPL \
licenses and thus not compatible with tors), or are their requirements too far \
apart?&lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; Also I was wondering how the Ahmia automated \
blacklisting was planned to work? As in how would a list of child abuse sites be \
fetched? Honestly I don't actually know python, I've worked with it and Django before \
in a hackathon once, but I cannot claim any real  knowledge in it, but at the same \
time I am passionate about the topic of child abuse, and I think if I can help reduce \
its demand in anyway by making it harder to find, I'd say it's some good added to the \
world.&lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div class="gmail_default" style="color: rgb(34, 34, 34); font-family: tahoma, \
sans-serif; font-size: 12.8px;"&gt; Apologies about the long mail guys,&lt;br&gt;
&lt;/div&gt;
&lt;span style="color: rgb(34, 34, 34); font-family: tahoma, sans-serif; font-size: \
12.8px;"&gt;Krishna Shukla&lt;/span&gt;&lt;/div&gt; &lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328161118</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-03-28 16:11:18-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Questions</subject><body>

Hi Krishna, absolutely! We love having new volunteers be it through
GSoC or not. Hell, most of us got our start outside the program. ;)

I'll leave the crypto parallelism questions to Nick, George, David,
and others far more knowledgeable of the core tor codebase than me.


On Mon, Mar 27, 2017 at 6:17 PM, Krishna Shukla
&lt;karatekrishna@hotmail.com&gt; wrote:
&gt; Hey,
&gt;
&gt; I'm Krishna Shukla, I'm studying a bachelors of computer science at the
&gt; University of Queensland.
&gt; I guess the relevant subjects I've studied so far covers C and Unix
&gt; programming, Computer Networks, Algorithms and Data Structures, and
&gt; Programming in the large. (got a high distinction in all the above)
&gt;
&gt; My most important question is if I could work on a project but not actually
&gt; be apart of GSoC? - I am unfortunately ineligible as my brother works as a
&gt; Security Engineer at Google Sydney. And if the above is okay would it also
&gt; be okay to not have to strictly abide by their timeline as I don't actually
&gt; have holidays during this time in Australia but I'd like to contribute in my
&gt; free time nonetheless!
&gt;
&gt; As for projects themselves I'm really interested in the relay crypto
&gt; parallelism and the hidden service crypto parallelism. And I have a couple
&gt; of questions regarding them.
&gt;
&gt; For the relay crypto parallelism I wanted to know what is there left to be
&gt; done? When I looked at the tickey #1749 someone called towelenee made a few
&gt; patches that already made it multi threaded, were these changes just not
&gt; accepted? Also wanted to know if specific knowledge about circuit
&gt; cryptography was required? As I know of it, but I certainly cannot make my
&gt; own fully homomorphic cryptosystem, is it more in the steps of the system
&gt; has already been made, it just needs to be parallelised correctly?
&gt;
&gt; It also states the code is written to expect immediate responses, I'm not
&gt; sure what you mean by that, after all there is always a slight delay, and if
&gt; it becomes multi threaded we can never know what is running what when, so is
&gt; it more someone is waiting at the other end of a socket and needs it ASAP,
&gt; or is it internally things want the answer quickly (in which case I don't
&gt; know how to solve it other than uses mutexes which is probably not so okay)?
&gt;
&gt; I am interested in the hidden service crypto parallelism in its own right,
&gt; but I was also thinking weather it would be a feasible idea to combine the
&gt; two projects and create a multi-threaded decryption library that could be
&gt; linked to both the tor relay and the hidden services (could release it as a
&gt; cryptosystem library, all the fully homorphic cryptosystem libraries I found
&gt; used GPL licenses and thus not compatible with tors), or are their
&gt; requirements too far apart?
&gt;
&gt; Also I was wondering how the Ahmia automated blacklisting was planned to
&gt; work? As in how would a list of child abuse sites be fetched? Honestly I
&gt; don't actually know python, I've worked with it and Django before in a
&gt; hackathon once, but I cannot claim any real knowledge in it, but at the same
&gt; time I am passionate about the topic of child abuse, and I think if I can
&gt; help reduce its demand in anyway by making it harder to find, I'd say it's
&gt; some good added to the world.
&gt;
&gt; Apologies about the long mail guys,
&gt; Krishna Shukla
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330180418</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-03-30 18:04:18-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Questions</subject><body>

On Mon, Mar 27, 2017 at 9:17 PM, Krishna Shukla
&lt;karatekrishna@hotmail.com&gt; wrote:
&gt; Hey,
&gt;
&gt; I'm Krishna Shukla, I'm studying a bachelors of computer science at the
&gt; University of Queensland.
&gt; I guess the relevant subjects I've studied so far covers C and Unix
&gt; programming, Computer Networks, Algorithms and Data Structures, and
&gt; Programming in the large. (got a high distinction in all the above)
&gt;
&gt; My most important question is if I could work on a project but not actually
&gt; be apart of GSoC? - I am unfortunately ineligible as my brother works as a
&gt; Security Engineer at Google Sydney. And if the above is okay would it also
&gt; be okay to not have to strictly abide by their timeline as I don't actually
&gt; have holidays during this time in Australia but I'd like to contribute in my
&gt; free time nonetheless!

Sure; we are always happy to accept volunteers!

You might want to try something simpler than this for your first patch
or two -- it's generally better to get practice with smaller things
before you move to something big and complex.  The documents in
doc/HACKING inside the Tor git repository might be a good place to
find good starting advice.

&gt; As for projects themselves I'm really interested in the relay crypto
&gt; parallelism and the hidden service crypto parallelism. And I have a couple
&gt; of questions regarding them.
&gt;
&gt; For the relay crypto parallelism I wanted to know what is there left to be
&gt; done? When I looked at the tickey #1749 someone called towelenee made a few
&gt; patches that already made it multi threaded, were these changes just not
&gt; accepted?

So, those patches just can't work as they're written now.  To begin
with, they launch a new thread for every hop in an outgoing circuit,
and then they wait for every such thread to finish.  They also have a
pretty serious race condition in their handling of the payload they're
supposed to be encrypting. And finally, they only handle client-side
circuit crypto -- not relay-side crypto at all.

A better approach, and the approach we were hoping for, would be to
parallelize crypto by circuit, not by hop: and to use long-lived
worker threads, and not using one thread per circuit or (worse) one
thread per cell per hop.

&gt;   Also wanted to know if specific knowledge about circuit
&gt; cryptography was required? As I know of it, but I certainly cannot make my
&gt; own fully homomorphic cryptosystem, is it more in the steps of the system
&gt; has already been made, it just needs to be parallelised correctly?

Right; all our crypto is implemented in Tor right now.  I'm not sure
why you're mentioning homomorphic cryptosystems; we don't need one of
those here.

&gt; It also states the code is written to expect immediate responses, I'm not
&gt; sure what you mean by that, after all there is always a slight delay, and if
&gt; it becomes multi threaded we can never know what is running what when, so is
&gt; it more someone is waiting at the other end of a socket and needs it ASAP,
&gt; or is it internally things want the answer quickly (in which case I don't
&gt; know how to solve it other than uses mutexes which is probably not so okay)?

Maybe have a look how we use the function relay_crypt() to see what we
mean here?   A more precise thing to say would have been that the
calls to relay_crypt() are written to block until relay_crypt() is
finished.  But instead, if the work of relay_crypt() is to be done in
another thread, then the functions that call it today need to queue
the work to be done by another thread ... and then continue safely.

&gt; I am interested in the hidden service crypto parallelism in its own right,
&gt; but I was also thinking weather it would be a feasible idea to combine the
&gt; two projects and create a multi-threaded decryption library that could be
&gt; linked to both the tor relay and the hidden services (could release it as a
&gt; cryptosystem library, all the fully homorphic cryptosystem libraries I found
&gt; used GPL licenses and thus not compatible with tors), or are their
&gt; requirements too far apart?

So, the "hidden service" crypto in question here is a set of public
key operations.  But having a separate library for this probably isn't
the right design, IMO.  The idea is not to split _each operation_
across multiple CPU cores, but rather to handle _multiple operations_
by doing them on multiple cores.  The code for each individual
operation could remain single-threaded.


If you'd like to see an example of how we do this in Tor today for our
server-side circuit extension handshakes, have a look at workqueue.c
and onion.c in the Tor source code, to get a sense of how they work
together.  You'll notice that the crypto operations themselves are
handled in regular single-threaded code (eg in onion_ntor.c), and that
the parallelism happens on a higher level than a single crypto
operation.



&gt; Also I was wondering how the Ahmia automated blacklisting was planned to
&gt; work?

This isn't something I've been working on; maybe somebody else can
answer this question.  (Ahmia folks?)

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170322131522</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-03-22 13:15:22-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

[Attachment #2 (multipart/alternative)]


On Mar 21, 2017 9:47 PM, "Tony Arcieri" &lt;bascule@gmail.com&gt; wrote:

I'm trying to gauge interest on the IRTF's CFRG mailing list regarding
collaborating on a draft for a standard Ed25519 hierarchical derivation /
key blinding scheme:

https://mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA

The post makes several mentions of Tor's work in the space in regard to the
next-generation hidden services design.

I think it'd be great if Tor were to collaborate on the design of such a
scheme and adopt it for the new hidden services design. I see a lot of
convergent evolution in this space and think it would be great if there
were a single standard everyone could implement.

Even if you don't, I think there are some ideas from similar schemes Tor
should fold back into its own design, particularly in regard to how certain
bits of the private scalar are "clamped". Some discussion of that here:

https://moderncrypto.org/mail-archive/curves/2017/000862.html

tl;dr: clamp the third highest bit of the root scalar to zero (in addition
to the bits normally clamped in the non-canonical Ed25519 private scalar),
and use 224-bit child scalars.

-- 
Tony Arcieri


Hi! I guess we could keep an eye on the process, though I don't know that
I'd have much to contribute myself: I'm more of a crypto consumer than a
crypto generator.  Maybe one of the developers who knows crypto better can
join in here?

As for adoption: we're on track to deploy next generation hidden services
some time this year, ideally in the next 4 or 5 months, so the window to
converge on a common system is small by standards-body standards.

Of course, I'd rather we adopt a standard scheme than not, but I think we
are instead likeliest to adopt whatever scheme we have available to us on
our timescale.

George, David: any thoughts on the moderncrypto post? I think nicoo maybe
mentioned it to me a couple of weeks back?

-- 
Nick

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mar \
21, 2017 9:47 PM, "Tony Arcieri" &lt;&lt;a \
href="mailto:bascule@gmail.com"&gt;bascule@gmail.com&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;I'm trying to gauge interest on the \
IRTF's CFRG mailing list regarding collaborating on a draft for a standard \
Ed25519 hierarchical derivation / key blinding scheme:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA" \
target="_blank"&gt;https://mailarchive.ietf.org/&lt;wbr&gt;arch/msg/cfrg/lM1ix9R-&lt;wbr&gt;0tVzhZorQhQlKvi4wpA&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
post makes several mentions of Tor's work in the space in regard to the \
next-generation hidden services design.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think it'd be \
great if Tor were to collaborate on the design of such a scheme and adopt it for the \
new hidden services design. I see a lot of convergent evolution in this space and \
think it would be great if there were a single standard everyone could \
implement.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Even if you don't, I think there are some \
ideas from similar schemes Tor should fold back into its own design, particularly in \
regard to how certain bits of the private scalar are "clamped". Some \
discussion of that here:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://moderncrypto.org/mail-archive/curves/2017/000862.html" \
target="_blank"&gt;https://moderncrypto.org/mail-&lt;wbr&gt;archive/curves/2017/000862.&lt;wbr&gt;html&lt;/a&gt;&lt;br \
clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;tl;dr: clamp the third highest bit of the root scalar \
to zero (in addition to the bits normally clamped in the non-canonical Ed25519 \
private scalar), and use 224-bit child scalars.&lt;/div&gt;&lt;font \
color="#888888"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_-5700888755083114303gmail_signature"&gt;Tony \
Arcieri&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div \
style="font-family:sans-serif;font-size:13.696px" dir="auto"&gt;&lt;div style="margin:16px \
0px"&gt;&lt;div&gt;&lt;div dir="auto"&gt;&lt;div dir="auto"&gt;Hi! I guess we could keep an eye on the \
process, though I don't know that I'd have much to contribute myself: I'm \
more of a crypto consumer than a crypto generator.   Maybe one of the developers who \
knows crypto better can join in here?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;As for adoption: we're on track to deploy next generation hidden \
services some time this year, ideally in the next 4 or 5 months, so the window to \
converge on a common system is small by standards-body standards.  &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Of course, I'd rather we adopt a standard \
scheme than not, but I think we are instead likeliest to adopt whatever scheme we \
have available to us on our timescale.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;George, David: any thoughts on the moderncrypto post? I think nicoo maybe \
mentioned it to me a couple of weeks back?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;--  &lt;/div&gt;&lt;div dir="auto"&gt;Nick&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330192250</emailId><senderName>Mark Cohen</senderName><senderEmail>m@markpcohen.com</senderEmail><timestampReceived>2017-03-30 19:22:50-0400</timestampReceived><subject>[tor-dev] [GSoC] Intro &amp; Questions</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello everyone!

My name is Mark, and I'm a 2nd year undergraduate at UChicago, majoring in CS
and math. I greatly admire the Tor community, and as a longtime user I've
always wanted to give back. As far as relevant experience goes, I've taken
courses in systems, networks, and languages, and I'm currently in a wonderful
usable security course taught by Blase Ur. Last summer I worked for Keybase,
which was both a lot of fun and highly educational.

For GSoC, I'm most interested in helping improve the state of IPv6. I would
love to pick someone's brain before creating an application to get a conceptual
feel for the project and to learn about the kinds of things I'd be
implementing. If you're that person, I'd really appreciate it if you could
reach out either on here or via any other contact method (check my website
linked below). Thanks for reading, and I'm looking forward to talking to you!

~Mark (https://mpcsh.xyz)

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdV10ACgkQss2qrTdc
5gTWrw/+NpcZ/LahaxKXc3rdejLqblg8iiQVBxO8I7FkJkST5kz8gOFoheImrmSF
gh2Jz/gY3TK/U8OXd8yDBPVd8KwWadCF161BURQtN8U35Rxao+Xmrrwhp5P2lj2L
DfGkBwDzkIAOeCKOITh64guuzpPrhCWJOean7gJs6zHBIB+cIRZF1/3LhbtqRLJI
nKcBy1mWjwHJ2CKkIhIFFHkY2WfqQ3JvlngjwDFUuYvBTrHKAKK1tl7Wnuo7npFs
OZSaSxuXK4bQPGRINpQoPNyYI4sjKYQChco1ZLZ3v7Kc1Uyy0xlR5ittEl5GnaKl
4tXVRJpjDkkrWwHYxpVl5YrzUAC0OlJ9yh7qDZK2OQ5V6UEv+cpZJU5fGNrRKYxG
JLMvs3Jf42xHIyMI0H7ya0Fh12PrOAD7en0mqM4Ie55/uvCb9FSbDhGOXvjuIIvp
2E6pJYsEXXvCZMyO8C36zEWn4JsEvAAAUeig9vyqL7kEDIL0vql5CwXO27MI3nqz
IIk+ogVpITIooHB+owR01QENZ7DIoj1uRvX4skF+hXtA2W66J10Uw1b2gy2qPPbG
HoAZW+nXRpKUYmWsvy8wwqZNtxdhZ8DgY78hXqrFOr65v9Odi6aNnAVSB9m9Dg4b
Iu6LW7jbOOYbT6ZUWB7XwG7qi+jtHAzZZ7ZOAVzU37cyzGf2tnY=
=eUZ0
-----END PGP SIGNATURE-----
[Attachment #5 (text/html)]

&lt;div&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;Hash: SHA256&lt;br&gt;&lt;br&gt;Hello \
everyone!&lt;br&gt;&lt;br&gt;My name is Mark, and I'm a 2nd year undergraduate at UChicago, \
majoring in CS&lt;br&gt;and math. I greatly admire the Tor community, and as a longtime \
user I've&lt;br&gt;always wanted to give back. As far as relevant experience goes, I've \
taken&lt;br&gt;courses in systems, networks, and languages, and I'm currently in a \
wonderful&lt;br&gt;usable security course taught by Blase Ur. Last summer I worked for \
Keybase,&lt;br&gt;which was both a lot of fun and highly educational.&lt;br&gt;&lt;br&gt;For GSoC, I'm \
most interested in helping improve the state of IPv6. I would&lt;br&gt;love to pick \
someone's brain before creating an application to get a conceptual&lt;br&gt;feel for the \
project and to learn about the kinds of things I'd be&lt;br&gt;implementing. If you're that \
person, I'd really appreciate it if you could&lt;br&gt;reach out either on here or via any \
other contact method (check my website&lt;br&gt;linked below). Thanks for reading, and I'm \
looking forward to talking to you!&lt;br&gt;&lt;br&gt;~Mark (https://mpcsh.xyz)&lt;br&gt;&lt;br&gt;-----BEGIN \
PGP SIGNATURE-----&lt;br&gt;&lt;br&gt;iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdV10ACgkQss2q \
rTdc&lt;br&gt;5gTWrw/+NpcZ/LahaxKXc3rdejLqblg8iiQVBxO8I7FkJkST5kz8gOFoheImrmSF&lt;br&gt;gh2Jz/gY3T \
K/U8OXd8yDBPVd8KwWadCF161BURQtN8U35Rxao+Xmrrwhp5P2lj2L&lt;br&gt;DfGkBwDzkIAOeCKOITh64guuzpPr \
hCWJOean7gJs6zHBIB+cIRZF1/3LhbtqRLJI&lt;br&gt;nKcBy1mWjwHJ2CKkIhIFFHkY2WfqQ3JvlngjwDFUuYvBTr \
HKAKK1tl7Wnuo7npFs&lt;br&gt;OZSaSxuXK4bQPGRINpQoPNyYI4sjKYQChco1ZLZ3v7Kc1Uyy0xlR5ittEl5GnaKl \
&lt;br&gt;4tXVRJpjDkkrWwHYxpVl5YrzUAC0OlJ9yh7qDZK2OQ5V6UEv+cpZJU5fGNrRKYxG&lt;br&gt;JLMvs3Jf42xHIy \
MI0H7ya0Fh12PrOAD7en0mqM4Ie55/uvCb9FSbDhGOXvjuIIvp&lt;br&gt;2E6pJYsEXXvCZMyO8C36zEWn4JsEvAAA \
Ueig9vyqL7kEDIL0vql5CwXO27MI3nqz&lt;br&gt;IIk+ogVpITIooHB+owR01QENZ7DIoj1uRvX4skF+hXtA2W66J1 \
0Uw1b2gy2qPPbG&lt;br&gt;HoAZW+nXRpKUYmWsvy8wwqZNtxdhZ8DgY78hXqrFOr65v9Odi6aNnAVSB9m9Dg4b&lt;br&gt;Iu6LW7jbOOYbT6ZUWB7XwG7qi+jtHAzZZ7ZOAVzU37cyzGf2tnY=&lt;br&gt;=eUZ0&lt;br&gt;-----END \
PGP SIGNATURE-----&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330211115</emailId><senderName>Alan S</senderName><senderEmail>agshuman@gmail.com</senderEmail><timestampReceived>2017-03-30 21:11:15-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] Intro &amp; Questions</subject><body>

[Attachment #2 (multipart/alternative)]


I am your IT Genius but why do you not leave a phone number or contact?

On Thu, Mar 30, 2017 at 3:22 PM, Mark Cohen &lt;m@markpcohen.com&gt; wrote:

&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA256
&gt;
&gt; Hello everyone!
&gt;
&gt; My name is Mark, and I'm a 2nd year undergraduate at UChicago, majoring in
&gt; CS
&gt; and math. I greatly admire the Tor community, and as a longtime user I've
&gt; always wanted to give back. As far as relevant experience goes, I've taken
&gt; courses in systems, networks, and languages, and I'm currently in a
&gt; wonderful
&gt; usable security course taught by Blase Ur. Last summer I worked for
&gt; Keybase,
&gt; which was both a lot of fun and highly educational.
&gt;
&gt; For GSoC, I'm most interested in helping improve the state of IPv6. I would
&gt; love to pick someone's brain before creating an application to get a
&gt; conceptual
&gt; feel for the project and to learn about the kinds of things I'd be
&gt; implementing. If you're that person, I'd really appreciate it if you could
&gt; reach out either on here or via any other contact method (check my website
&gt; linked below). Thanks for reading, and I'm looking forward to talking to
&gt; you!
&gt;
&gt; ~Mark (https://mpcsh.xyz)
&gt;
&gt; -----BEGIN PGP SIGNATURE-----
&gt;
&gt; iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdV10ACgkQss2qrTdc
&gt; 5gTWrw/+NpcZ/LahaxKXc3rdejLqblg8iiQVBxO8I7FkJkST5kz8gOFoheImrmSF
&gt; gh2Jz/gY3TK/U8OXd8yDBPVd8KwWadCF161BURQtN8U35Rxao+Xmrrwhp5P2lj2L
&gt; DfGkBwDzkIAOeCKOITh64guuzpPrhCWJOean7gJs6zHBIB+cIRZF1/3LhbtqRLJI
&gt; nKcBy1mWjwHJ2CKkIhIFFHkY2WfqQ3JvlngjwDFUuYvBTrHKAKK1tl7Wnuo7npFs
&gt; OZSaSxuXK4bQPGRINpQoPNyYI4sjKYQChco1ZLZ3v7Kc1Uyy0xlR5ittEl5GnaKl
&gt; 4tXVRJpjDkkrWwHYxpVl5YrzUAC0OlJ9yh7qDZK2OQ5V6UEv+cpZJU5fGNrRKYxG
&gt; JLMvs3Jf42xHIyMI0H7ya0Fh12PrOAD7en0mqM4Ie55/uvCb9FSbDhGOXvjuIIvp
&gt; 2E6pJYsEXXvCZMyO8C36zEWn4JsEvAAAUeig9vyqL7kEDIL0vql5CwXO27MI3nqz
&gt; IIk+ogVpITIooHB+owR01QENZ7DIoj1uRvX4skF+hXtA2W66J10Uw1b2gy2qPPbG
&gt; HoAZW+nXRpKUYmWsvy8wwqZNtxdhZ8DgY78hXqrFOr65v9Odi6aNnAVSB9m9Dg4b
&gt; Iu6LW7jbOOYbT6ZUWB7XwG7qi+jtHAzZZ7ZOAVzU37cyzGf2tnY=
&gt; =eUZ0
&gt; -----END PGP SIGNATURE-----
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I am your IT Genius but why do you not leave a phone number or \
contact?&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Thu, Mar 30, \
2017 at 3:22 PM, Mark Cohen &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:m@markpcohen.com" \
target="_blank"&gt;m@markpcohen.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;Hash: \
SHA256&lt;br&gt;&lt;br&gt;Hello everyone!&lt;br&gt;&lt;br&gt;My name is Mark, and I'm a 2nd year \
undergraduate at UChicago, majoring in CS&lt;br&gt;and math. I greatly admire the Tor \
community, and as a longtime user I've&lt;br&gt;always wanted to give back. As far as \
relevant experience goes, I've taken&lt;br&gt;courses in systems, networks, and \
languages, and I'm currently in a wonderful&lt;br&gt;usable security course taught by \
Blase Ur. Last summer I worked for Keybase,&lt;br&gt;which was both a lot of fun and highly \
educational.&lt;br&gt;&lt;br&gt;For GSoC, I'm most interested in helping improve the state of \
IPv6. I would&lt;br&gt;love to pick someone's brain before creating an application to \
get a conceptual&lt;br&gt;feel for the project and to learn about the kinds of things \
I'd be&lt;br&gt;implementing. If you're that person, I'd really appreciate it \
if you could&lt;br&gt;reach out either on here or via any other contact method (check my \
website&lt;br&gt;linked below). Thanks for reading, and I'm looking forward to talking \
to you!&lt;br&gt;&lt;br&gt;~Mark (&lt;a href="https://mpcsh.xyz" \
target="_blank"&gt;https://mpcsh.xyz&lt;/a&gt;)&lt;br&gt;&lt;br&gt;-----BEGIN PGP \
SIGNATURE-----&lt;br&gt;&lt;br&gt;iQIzBAEBCAAdFiEEmyuHiWNRDa+&lt;wbr&gt;IFK5Pss2qrTdc5gQFAljdV10ACgkQs&lt;w \
br&gt;s2qrTdc&lt;br&gt;5gTWrw/+NpcZ/&lt;wbr&gt;LahaxKXc3rdejLqblg8iiQVBxO8I7F&lt;wbr&gt;kJkST5kz8gOFoheImrm \
SF&lt;br&gt;gh2Jz/gY3TK/&lt;wbr&gt;U8OXd8yDBPVd8KwWadCF161BURQtN8&lt;wbr&gt;U35Rxao+Xmrrwhp5P2lj2L&lt;br&gt;Df \
GkBwDzkIAOeCKOITh64guuzpPrhC&lt;wbr&gt;WJOean7gJs6zHBIB+cIRZF1/&lt;wbr&gt;3LhbtqRLJI&lt;br&gt;nKcBy1mWjw \
HJ2CKkIhIFFHkY2WfqQ3&lt;wbr&gt;JvlngjwDFUuYvBTrHKAKK1tl7Wnuo7&lt;wbr&gt;npFs&lt;br&gt;OZSaSxuXK4bQPGRINp \
QoPNyYI4sjKY&lt;wbr&gt;QChco1ZLZ3v7Kc1Uyy0xlR5ittEl5G&lt;wbr&gt;naKl&lt;br&gt;4tXVRJpjDkkrWwHYxpVl5YrzUA \
C0Ol&lt;wbr&gt;J9yh7qDZK2OQ5V6UEv+&lt;wbr&gt;cpZJU5fGNrRKYxG&lt;br&gt;JLMvs3Jf42xHIyMI0H7ya0Fh12PrOA&lt;wbr \
&gt;D7en0mqM4Ie55/&lt;wbr&gt;uvCb9FSbDhGOXvjuIIvp&lt;br&gt;2E6pJYsEXXvCZMyO8C36zEWn4JsEvA&lt;wbr&gt;AAUeig9 \
&gt; vyqL7kEDIL0vql5CwXO27MI&lt;wbr&gt;3nqz&lt;br&gt;IIk+ogVpITIooHB+&lt;wbr&gt;owR01QENZ7DIoj1uRvX4skF+&lt;wb \
&gt; r&gt;hXtA2W66J10Uw1b2gy2qPPbG&lt;br&gt;HoAZW+&lt;wbr&gt;nXRpKUYmWsvy8wwqZNtxdhZ8DgY78h&lt;wbr&gt;XqrFOr65 \
&gt; v9Odi6aNnAVSB9m9Dg4b&lt;br&gt;Iu6LW7jbOOYbT6ZUWB7XwG7qi+&lt;wbr&gt;jtHAzZZ7ZOAVzU37cyzGf2tnY=&lt;br&gt;=eUZ0&lt;br&gt;-----END \
&gt; PGP SIGNATURE-----&lt;br&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; 
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170322160731</emailId><senderName>Tony Arcieri</senderName><senderEmail>bascule@gmail.com</senderEmail><timestampReceived>2017-03-22 16:07:31-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

[Attachment #2 (multipart/alternative)]


On Wed, Mar 22, 2017 at 6:15 AM, Nick Mathewson &lt;nickm@torproject.org&gt;
wrote:

&gt; Hi! I guess we could keep an eye on the process, though I don't know that
&gt; I'd have much to contribute myself: I'm more of a crypto consumer than a
&gt; crypto generator.  Maybe one of the developers who knows crypto better can
&gt; join in here?
&gt;

The main notable points of discussion so far have all been around
preserving Ed25519's original "clamping" invariants. I didn't see any
discussion of this in the current Tor spec.


&gt; As for adoption: we're on track to deploy next generation hidden services
&gt; some time this year, ideally in the next 4 or 5 months, so the window to
&gt; converge on a common system is small by standards-body standards.
&gt;

Yeah, that's a blink of an eye in the IETF timescale. However, I think if
you incorporate some feedback into your current design and do end up
shipping it before a draft standard undergoes the requisite bikeshedding,
the "running code" aspect of Tor using it in the wild will probably help
the standard converge around whatever you ship. Worked out for Ed25519
itself, anyway.

-- 
Tony Arcieri

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On Wed, Mar 22, 2017 \
at 6:15 AM, Nick Mathewson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:nickm@torproject.org" \
target="_blank"&gt;nickm@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;div class="h5"&gt;&lt;div&gt;&lt;span \
style="font-family:sans-serif;font-size:13.696px;color:rgb(34,34,34)"&gt;Hi! I guess we \
could keep an eye on the process, though I don't know that I'd have much to \
contribute myself: I'm more of a crypto consumer than a crypto generator.   Maybe \
one of the developers who knows crypto better can join in \
here?&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The main notable \
points of discussion so far have all been around preserving Ed25519's original \
"clamping" invariants. I didn't see any discussion of this in the \
current Tor spec.&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 \
0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;div \
class="h5"&gt;&lt;div&gt;&lt;span \
style="font-family:sans-serif;font-size:13.696px;color:rgb(34,34,34)"&gt;As for \
adoption: we're on track to deploy next generation hidden services some time this \
year, ideally in the next 4 or 5 months, so the window to converge on a common system \
is small by standards-body standards.  \
&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;Yeah, that's a blink of an \
eye in the IETF timescale. However, I think if you incorporate some feedback into \
your current design and do end up shipping it before a draft standard undergoes the \
requisite bikeshedding, the "running code" aspect of Tor using it in the \
wild will probably help the standard converge around whatever you ship. Worked out \
for Ed25519 itself, anyway.&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;Tony Arcieri&lt;br&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170412145700</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-04-12 14:57:00-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key	blinding scheme?</subject><body>

Tony Arcieri &lt;bascule@gmail.com&gt; writes:

&gt; I'm trying to gauge interest on the IRTF's CFRG mailing list regarding
&gt; collaborating on a draft for a standard Ed25519 hierarchical derivation /
&gt; key blinding scheme:
&gt;
&gt; https://mailarchive.ietf.org/arch/msg/cfrg/lM1ix9R-0tVzhZorQhQlKvi4wpA
&gt;
&gt; The post makes several mentions of Tor's work in the space in regard to the
&gt; next-generation hidden services design.
&gt;
&gt; I think it'd be great if Tor were to collaborate on the design of such a
&gt; scheme and adopt it for the new hidden services design. I see a lot of
&gt; convergent evolution in this space and think it would be great if there
&gt; were a single standard everyone could implement.
&gt;
&gt; Even if you don't, I think there are some ideas from similar schemes Tor
&gt; should fold back into its own design, particularly in regard to how certain
&gt; bits of the private scalar are "clamped". Some discussion of that here:
&gt;
&gt; https://moderncrypto.org/mail-archive/curves/2017/000862.html
&gt;
&gt; tl;dr: clamp the third highest bit of the root scalar to zero (in addition
&gt; to the bits normally clamped in the non-canonical Ed25519 private scalar),
&gt; and use 224-bit child scalars.
&gt;

An update:

After lots of discussions in the Amsterdam Tor meeting, the following
approach was suggested for cleansing keys of their torsion components
that is more friendly towards hierarchical key-derivation schemes:
        https://moderncrypto.org/mail-archive/curves/2017/000866.html

However, my current intuition is to just not do this for hidden service
ed25519 blinded keys. Those keys are only used for signing descriptors
which should be safe to do, and we don't plan to use them for D-H any
time soon. If we or some crazy app EVER decides to use those ephemeral
keys for key exchange, we would need to use a special DH function that
kills the tensor component of keys before using them, as suggested by
Trevor here: https://moderncrypto.org/mail-archive/curves/2017/000874.html

Please let me know if you think this is not a good idea!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170412191831</emailId><senderName>Oleg Andreev</senderName><senderEmail>oleganza@gmail.com</senderEmail><timestampReceived>2017-04-12 19:18:31-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

&gt; From: George Kadianakis
&gt; Date: Wed, Apr 12, 2017 at 7:57 AM
&gt; 
&gt; An update:
&gt; 
&gt; After lots of discussions in the Amsterdam Tor meeting, the following
&gt; approach was suggested for cleansing keys of their torsion components
&gt; that is more friendly towards hierarchical key-derivation schemes:
&gt; https://moderncrypto.org/mail-archive/curves/2017/000866.html
&gt; 
&gt; However, my current intuition is to just not do this for hidden service
&gt; ed25519 blinded keys. Those keys are only used for signing descriptors
&gt; which should be safe to do, and we don't plan to use them for D-H any
&gt; time soon. If we or some crazy app EVER decides to use those ephemeral
&gt; keys for key exchange, we would need to use a special DH function that
&gt; kills the tensor component of keys before using them, as suggested by
&gt; Trevor here: https://moderncrypto.org/mail-archive/curves/2017/000874.html
&gt; 
&gt; Please let me know if you think this is not a good idea!

Thanks for the update, George.

TL;DR: your scheme seems to be just fine for signatures, and even 
torsion-safety issues are not huge issues IMHO. For wide applicability
reasons, I am trying to make our scheme ChainKD [1] to fit as many 
use cases as possible and therefore very interested in Tor's 
requirements and rationale regarding Tor's key blinding proposal.

L;R:

After studying the situation with key derivation schemes for Ed25519, 
my impression is that the central issue is not even safety, but 
compatibility with existing Ed25519 implementations. People who have 
to integrate a key derivation scheme in their protocol are often not 
the same people who write the underlying primitives such as scalar 
multiplication.

This means, that it's safer to be conservative and keep the derivation
scheme as compatible with EdDSA as possible so that assumptions that 
implementors may take by just reading the EdDSA spec without knowing
about key derivation schemes, do not cause compatibility problems.

Since it's not a trivial task to even learn the landscape of problems
around Ed25519 compatibility- and safety-wise, it'd help if we can
figure all of that once, implement and reuse the result w/o having
to go through this again and again. Hence, our interest in standardizing
the scheme that satisfies as many requirements as possible.

&lt;comic relief&gt;
https://xkcd.com/927/
&lt;/comic relief&gt;

Following the feedback in BIP32-Ed25519 paper [2], I've updated our
ChainKD [1] scheme to make it safely "compatible" with DH use cases 
(among those is asymmetric encryption such as ECIES). 

In the Design Rationale section [3] I try to describe the issues with
low/high bits and torsion-safe representative and why we choose
to keep those bits as defined in Curve25519 instead of "torsion-safe
representative" and why we use BIP32-style blinding-by-addition instead
of blinding-by-multiplication.

One piece of feedback affecting our proposal is missing, though:
I'd like to ask Tor developers what is the rationale and requirements 
for their key blinding proposal. Specifically, why do you choose to
blind via multiplication instead of addition:

	s' = b*s; P' = b*P         (Tor's proposal)
		
	vs

	s' = s + b; P' = P + b*G   (BIP32, ChainKD)

	
	(G -- base point, 
         P -- pubkey, 
         s -- secret scalar, P = s*G,
         b -- blinding scalar)

I know of a few reasons to use addition over multiplication
(e.g. performance and bit-compatibility with EdDSA), 
but would love to learn if that hurts some protocols.


PS. I've just joined the list and replying to a forwarded message. 
    I apologize if I break the thread.


[1] ChainKD, revised: \
https://github.com/chain/chain/blob/chainkd-dh/docs/protocol/specifications/chainkd.md
 [2] BIP32-Ed25519: https://drive.google.com/open?id=0ByMtMw2hul0EMFJuNnZORDR2NDA
[3] ChainKD rationale: \
https://github.com/chain/chain/blob/chainkd-dh/docs/protocol/specifications/chainkd.md#design-rationale
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170415200039</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-04-15 20:00:39-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

Note that the torsion-safe method explicitly *does* result in the low 3
bits being "000".  It does not explicity preserve the top bits being
"10", because in discussion, we could not determine an actual reason for
them to be fixed in that way.

Another thing to keep an eye on is how one produces subsequent blinded
values after the first.  If you use additive blinding, and you produce
the next blinded value by re-blinding the last blinded value with the
*same* blinding factor (i.e. P -&gt; P + b*G -&gt; P + (2b)*G -&gt; P + (3b)*G,
etc.), then all of the pubkeys on that chain are linkable together as
coming from the same chain.

If you use multiplicative blinding, or derive new blinding factors each
time, and/or reblind the original P (i.e. P -&gt; b_1 * P -&gt; b_2 * P -&gt;
b_3 * P where the b_i are either independent or even b_i = b^i
(multiplicatively blind by b in a chain)), the values are not linkable.
[Independently multiplicatively reblinding the original value is what
the Tor proposal does.]

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170318043646</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-03-18 04:36:46-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

On Fri, 17 Mar 2017 18:12:11 +0000, Jaskaran Singh wrote:
...
&gt; Currently, guard relays and bridges maintains a list of IP addresses of
&gt; the devices that connect to it for various reasons such as for use by
&gt; the bridge to check which country has them blocked. This is dangerous
&gt; because if any of these tor instances get compromised, clients will be
&gt; de-anonymized.

As an adversary, I wouldn't take down the bridge but either monitor
the traffic to it ($country can also do this on its border gateways),
or modify it to tell me the connecting IP addresses.

End users tend to be on dynamic IP address, so stored IP addresses
aren't of much worth when you don't know when they were used; that
is a reason why $adversary might be more interested in snooping
than in compromising the bridge.

(Although I don't know how prevalent changing IP addresses still
are when you're online permanently. E.g. here in germany telekom
changes to all-ip, and there no longer disconnects after 24h, and
thus you don't change IPs every day.)

...
&gt; present in the set. The feature of this bitmap is that collisions could
&gt; happen. And this collision creates deniability. When collisions happen,

The problem is that for the accounting purposes you don't want (too
many) collisions, and also that state agencies don't necessarily
care for plausible deniability - if an IP address is found by
enumeration and probing the bloom filter they might still decide
to put that user on closer watch. (I've heard that a lot of the
traditional telephone tapping isn't used as evidence in court
but produces leads to where to investigate next.)

On the other hand side you can indeed keep the filter rather small
because one bridge doesn't get that many collisions, and you don't
need to make it anywhere as big as to avoid collision with 2^32 entries.
Could also be dynamically sized depending on the number of clients seen
- you need aging anyway, so the next table can have a different size.

You can also go and poison the bloom filter with some random addresses,
even a lot, actually. If we're talking of 2000 users you can easily
throw in another 2000 random addresses without decreasing the
precision of the statistics much - only on a size comparable to
collisions in the bloom filter itself.

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170320135601</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-03-20 13:56:01-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

[Attachment #2 (multipart/signed)]


Hi Jaskaran,

&gt; On 17 Mar 2017, at 23:42, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt; 
&gt;  §2. Research
&gt; 
&gt; There are three ways to solve this problem. All the three ways are
&gt; actually Big Data
&gt; Algorithms. A few problems arises for each of these algorithms since
&gt; they are made for
&gt; big data but the data we would provide is not necessarily big.

As we discussed on IRC, there's a simpler way to solve the problem of
storing IP addresses in memory: store a (keyed) hash of the IP address
instead.

The hash can be tuned to be sufficiently hard to make brute-forcing
impractical. (As long as each 'country' has sufficiently many IP
addresses. And as long as the threat model excludes adversaries which
only want to confirm a few addresses.)

The key can be rotated at a suitable interval, ensuring that past
addresses can not be discovered by future attackers.

Noise can be added to the hash if we wish.

And there's no need for a correction factor: the hash is an exact
mapping.

Including a hash-based scheme would make the proposal more
comprehensive. It could also help justify the complexity of the other
schemes in terms of the benefits they provide over and above a simple
hash (if any).

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYz99xAAoJEHQNnjkCUnKieL4P/RyEbEEIa2q1TylKszXoUpat
kEs+yJuK4Q/20RejA9N70TO6RDZAz7cqOdC+c+POWM+6Ub+XcBKuOUNHcWLdbpXc
qlU50laj2cnPtkwv9y2pjmZsHiYWij1St65ngfPD+itd0sQLsRg4m4zBKhyVdl8r
U+WIiowoyhs0izDxY0W23HC4kJ2gXug+V6rXaL+OaqYwXMleyza6Pe18MbpEFHeN
XvyWTXnFoWR1Ht8QOOlmy1nOuySdQuBoQvvXHnYE0Ydo7whNQqjNKMjj4r6eJV9L
AtYABLG0H7zZN9mKzJYK+sZULPqxw8ZmdejIz0whMDEOjE6KPAO74K1ZKqL3hOhW
rjezBONf/ehXnv+/ayMGcmNC6VrCxbm82xYHgA59YuaXtVZ9SiHaPrh1Np+kIkWT
//vW05WlUdfGbvOmEJmexTwlBX4VQdB5tTNFWg1r7+GA3gZ5EaASIAKYBmm9buL8
OP+eVfeHBFpFrb3IB8Yr0zjkcIOsBs7AjEEPX/jcyVzM2nvK/QStsfK2XZOZfMV5
kbVJsU9eq1f0f1BR9eyih0t9rOsAkzXCe42Ij4lAdAkijOcIV7AdbKOVi0J5QR1H
Cu/cA3BmoO6MROuM6/X/jEIRw1oDz+G5ixpPqbfQCpnJn8vl6/Klyvtz3T2wpUCt
KzdLP3tsWiFtw3Gq5xb0
=VYM9
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170321104859</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-03-21 10:48:59-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Andreas,

On Saturday 18 March 2017 10:06 AM, Andreas Krey wrote:
&gt; As an adversary, I wouldn't take down the bridge but either monitor
&gt; the traffic to it ($country can also do this on its border gateways),
&gt; or modify it to tell me the connecting IP addresses.

Absolutely correct. In fact I mentioned this toward the end of the proposal.

&gt;&gt; Or even better, why would the adversary need that random value
&gt;&gt; when she can simply log all network connections coming into the
&gt;&gt; (compromised) system?

But I think that our users don't expect us to profile them. So, I
believe it is bad practice to keep a list of something as important as
IP addresses for any anonymity system.

But there's a thing to be happy about. If we replace the list of IP
addresses with something better, we might be able to prevent adversary
from getting the knowledge of IP addresses that connected in the past.
Suppose an adversary(lets say the government) suspects someone used a
bridge to connect to Tor Network. They would only be able to know that
for sure if they log that activity there and then. Means, they would not
be able to de-anonymize users retrospectively. Of course, if the user
again connects from the same IP and the adversary is monitoring the
relay/bridge, that might cause problem.

&gt; End users tend to be on dynamic IP address, so stored IP addresses
&gt; aren't of much worth when you don't know when they were used; that
&gt; is a reason why $adversary might be more interested in snooping
&gt; than in compromising the bridge.
&gt; 
&gt; (Although I don't know how prevalent changing IP addresses still
&gt; are when you're online permanently. E.g. here in germany telekom
&gt; changes to all-ip, and there no longer disconnects after 24h, and
&gt; thus you don't change IPs every day.)
&gt; 
&gt; ...
&gt;&gt; present in the set. The feature of this bitmap is that collisions could
&gt;&gt; happen. And this collision creates deniability. When collisions happen,
&gt; 
&gt; The problem is that for the accounting purposes you don't want (too
&gt; many) collisions, and also that state agencies don't necessarily
&gt; care for plausible deniability - if an IP address is found by
&gt; enumeration and probing the bloom filter they might still decide
&gt; to put that user on closer watch. (I've heard that a lot of the
&gt; traditional telephone tapping isn't used as evidence in court
&gt; but produces leads to where to investigate next.)
&gt; 
&gt; On the other hand side you can indeed keep the filter rather small
&gt; because one bridge doesn't get that many collisions, and you don't
&gt; need to make it anywhere as big as to avoid collision with 2^32 entries.
&gt; Could also be dynamically sized depending on the number of clients seen
&gt; - you need aging anyway, so the next table can have a different size.
&gt; 
I feel that this isn't a nice solution. Suppose you have 10 cells and 3
hash functions at the beginning. Later when inputs exceed a threshold,
you increase the size of bloom filter to make it to 20 cells. Now those
3 hash functions would map to the whole range which means the inputs
that were mapped to 10 cells would now map to something completely
different. Hence, error rate would be, I guess exactly 100%.

&gt; You can also go and poison the bloom filter with some random addresses,
&gt; even a lot, actually. If we're talking of 2000 users you can easily
&gt; throw in another 2000 random addresses without decreasing the
&gt; precision of the statistics much - only on a size comparable to
&gt; collisions in the bloom filter itself.
&gt; 
&gt; - Andreas
&gt; 

Regards,
Jaskaran




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170321110851</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-03-21 11:08:51-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt; Hi Jaskaran,
&gt;
&gt;&gt; On 17 Mar 2017, at 23:42, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt;&gt; 
&gt;&gt;  §2. Research
&gt;&gt; 
&gt;&gt; There are three ways to solve this problem. All the three ways are
&gt;&gt; actually Big Data
&gt;&gt; Algorithms. A few problems arises for each of these algorithms since
&gt;&gt; they are made for
&gt;&gt; big data but the data we would provide is not necessarily big.
&gt;
&gt; As we discussed on IRC, there's a simpler way to solve the problem of
&gt; storing IP addresses in memory: store a (keyed) hash of the IP address
&gt; instead.
&gt;
&gt; The hash can be tuned to be sufficiently hard to make brute-forcing
&gt; impractical. (As long as each 'country' has sufficiently many IP
&gt; addresses. And as long as the threat model excludes adversaries which
&gt; only want to confirm a few addresses.)
&gt;

Hey teor,

I feel like replying to this thread is basicaly moot without a precise
threat model, since it seems like each person here has a different
threat model in mind. There are many attacks and scenarios applicable
and it's unclear which ones we are trying or hoping to cover.

For example, I'm confused on how a keyed hash is better than a simple
hash (or scrypt) of the IP address (which most people agree is not a
good solution). That is, if an attacker pwns a box and steals the hash
key and the list of hashes, the attacker can easily brute-force the 2^32
keyed hashes at that point and derive the list of connected IP
addresses. What's the difference?

&gt; The key can be rotated at a suitable interval, ensuring that past
&gt; addresses can not be discovered by future attackers.
&gt;

Hmm, is this attack in the threat model? And how does it work exactly?

Also how does salted hash vs normal hash make a difference here, since
even in the normal hash variant, if you memwipe/rotate the hash list
everyday, an attacker should not be able to discover past addresses.

All in all, I think it will be hard to choose a scheme here without a
precise threat model, and I don't see the original proposal making an
attempt to define that.

Greetings from Amsterdam!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170321144819</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-03-21 14:48:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

On Tue, 21 Mar 2017 16:06:59 +0000, Jaskaran Singh wrote:
...
&gt; &gt; On the other hand side you can indeed keep the filter rather small
&gt; &gt; because one bridge doesn't get that many collisions, and you don't
&gt; &gt; need to make it anywhere as big as to avoid collision with 2^32 entries.
&gt; &gt; Could also be dynamically sized depending on the number of clients seen
&gt; &gt; - you need aging anyway, so the next table can have a different size.
&gt; &gt; 
&gt; I feel that this isn't a nice solution. Suppose you have 10 cells and 3
&gt; hash functions at the beginning. Later when inputs exceed a threshold,
&gt; you increase the size of bloom filter to make it to 20 cells.

10 is way too low for any population (if 'cell' means 'bit');
I played with a bit of code for that.

&gt; 3 hash functions would map to the whole range which means the inputs
&gt; that were mapped to 10 cells would now map to something completely
&gt; different. Hence, error rate would be, I guess exactly 100%.

No, basically you need to retain the old bloom filter while seeding the
new one for the amount of time of your entry timeout.

(And given the other discussion regarding brute-forcing the 2^32 space,
either you need a really time-consuming hash, or you count on the
pre-seeding with random IP addresses as the only means to cover the
real ones.)

I wonder what would happen if you implement the aging by just
randomly clearing bits in the bloom filter at an appropriate rate.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170321175056</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-03-21 17:50:56-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

So here's the updated part of the proposal.

------------

=C2=A7 Threat model &amp; Security Considerations

Consider the adversary with the following powers:

 - Has sufficient computational and storage power to brute force any
   method that can be brute forced.

 - Can get the recurrent control of the concerned guard-node/bridge.

 - Can interact with the concerned data structure that stores unique-IP-
   addresses/hash-values/bloom-filter/bitmaps etc.

 - Can also log incoming connections and IP addresses outside the realm
   of Tor(i.e at the system level or at gateways etc.)

 - Can manipulate the incoming connection with some made up IP address
   as to observe the working of our proposed solution.

 - As a consequence of previous power, adversary can also inject pattern
   of IP addresses to observe any pattern in the stored data structure.

An ideal solution would not involve hashing or even if it does, it would
manipulate that hash to before storing in such a way that adversary
cannot learn about IP addresses even with brute force attack.

An ideal solution would not help the adversary observe any pattern in
the stored data structure. This could be accomplished by incorporating
salted hash or variations of it into the proposed solution. And the salt
would be changed every time we start tracking unique IP addresses.

There is a fundamental limitation to what we can do and that is that we
cannot stop an adversary from gaining knowledge of IP addresses at the
system level or a gateways etc. But, the thing to cheer about is that
in this way, the adversary cannot learn about the users retrospectively.

------------

Regards,
Jaskaran


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328130600</emailId><senderName>Patrick Schleizer</senderName><senderEmail>patrick-mailinglists@whonix.org</senderEmail><timestampReceived>2017-03-28 13:06:00-0400</timestampReceived><subject>Re: [tor-dev] GSOC 2017: Proposal for anon-connection-wizard</subject><body>

anonym:
&gt; irykoon:
&gt; &gt; Currently, the Tor Launcher is shipped with the Tor Browser Bundle
&gt; &gt; and heavily relies on the Tor Browser for its implementation. These
&gt; &gt; facts cause using Tor Launcher without having the Tor Browser
&gt; &gt; impossible. I agree with the whonix core developer Patrick
&gt; &gt; Schleizer that "the Tor Browser Bundle has its kind of users.
&gt; &gt; system Tor (refers to Tor from packages.debian.org or
&gt; &gt; deb.torproject.org) users, where Tor runs as daemon, is used in
&gt; &gt; different ways for different purposes. These users cannot use Tor
&gt; &gt; Launcher, because it only works with Tor Browser".
&gt; 
&gt; I might be misunderstanding what you and Patrick mean with
&gt; "impossible" (or rather, which use cases are impossible) w.r.t. using
&gt; Tor Launcher outside of the Tor Browser; Tails uses the Tor Launcher
&gt; shipped in Tor Browser, but it's run as a stand-alone XUL application
&gt; (`firefox --app ...`), so the *web* browser isn't started as part of
&gt; it. [1] One could even run it using Iceweasel/Firefox, i.e.
&gt; completely without Tor Browser.

Right. I might have used the word "impossible" as a short cut to say the
following:

tor-launcher will never be a great solution for system Tor users on
Debian. Since Tor Browser is not packaged as in Debian unfortunately as
it looks like will not be anytime soon, getting tor-launcher working
nicely as a package available from packages.debian.org is very hard and
unrealistic. A python rewrite (anon anon-connection-wizard) seems the
way to go.

&gt; That said, this approach will not be viable any more some time next
&gt; year when the Firefox ESR branch drops XUL support and Tor Launcher
&gt; is deprecated upstream. It remains to see how the replacement of Tor
&gt; Launcher will look, it might still work for Tails. However, if
&gt; anon-connection-wizard would be a (more or less) drop-in replacement
&gt; for Tor Launcher in Tails, that would be immensely helpful since we'd
&gt; have a solution that will be guaranteed to work for us without much
&gt; work. And I guess as long as the UX is more or less identical to the
&gt; new Tor Launcher and rapidly adapts to changes, and there are good
&gt; translations, we'd probably prefer it over the new Tor Launcher,
&gt; since it probably will be even harder to decouple from the web
&gt; browser.

That's great to know! Let's hope tor-launcher will work great
everywhere, Debian, Whonix, Tails and whoever else may be interested in
using it.

&gt; Any way, I also see potential for future collaboration between Whonix
&gt; and Tails for extending the usefulness of anon-connection-wizard
&gt; beyond what Tor Launcher (and its replacement) offers [2];
&gt; anon-connection-wizard targets the OS, not just a single application,
&gt; so it could integrate the choices of network configuration (wired?
&gt; which wireless network? MAC spoofing?) and Tor configuration (proxy?
&gt; pluggable transport?) in a single place which probably makes more
&gt; sense for users and also allows us to more easily (optionally) save
&gt; these settings so they are restored the next time you visit the same
&gt; network. This could potentially even be used to help giving users
&gt; control over entry node selection to avoid persistent Entry Guards
&gt; from leaking information about you geographical movement. [3]

Tor proxy configuration yes. Tor pluggable configuration, by all means
yes, that will is the core feature of anon-connection-wizard.

Other Tor settings, perhaps. Depends on the settings. We'd need to
discuss them.

My current impression of iry is that anon-connection-wizard development
will go on after this gsoc.

anonym, did you have in mind combining anon-connection-wizard with the
revamped Tails greeter? (Some links, you might have better ones. [1] [2])

Perhaps that could be done by leaving some "holes" in
anon-connection-wizard? I mean, perhaps it's gui wizard pages could
allow having additional pages before and after the actual Tor connection
wizard pages? That way you could flexibly integrate it in Tails somehow?

(Definition of "page" in anon-connection-wizard context: This is a page
[1]. This is another page [2].)

Let's leave all of that post gsoc future work. I am concerned to
overextend this the anon-connection-wizard project. A tor-launcher
python clone ending up in packages.debian.org would be an awesome
improvement, even if it does not solve all issues such as mac changing.

For mac changing a lot more work would be required. For start, a working
cli implementation (covering all that Tails does) that get be installed
on a regular Debian system from packages.debian.org.) Then perhaps
anon-connection-wizard could morph into a bigger project and provide a
gui for that as well.

At the moment the anon-connection-wizard gsoc proposal is well defined
in scope. A Tor connection wizard that creates the proper /etc/tor/torrc
configuration and reloads Tor that implements the most recent usability
research suggestions.

Initially it won't be solving all the anonymity usability issues. It
won't feature a handy permanently Tor controller systray that always
communicates the state of Tor. Perhaps that could be covered in future work.

Cheers,
Patrick

[1] https://tails.boum.org/news/test_redesigned_Tails_Greeter/index.en.html
[2]
https://tails.boum.org/blueprint/greeter_revamp_UI/design_rationale_phase1/

[3]
https://phabricator.whonix.org/file/data/pc42disjlcwt5di63jfw/PHID-FILE-2xp6wamhlmbj65cd2gx5/connection_page-1.png
 [4]
https://www.whonix.org/blog/wp-content/uploads/2015/12/bridges-conf1-450x335.png
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328144718</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-03-28 14:47:18-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

On Sun, Mar 26, 2017 at 09:27:37PM +1100, teor wrote:
&gt; &gt; On 26 Jan 2017, at 10:19, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt;&gt;&gt; onion_address = base32(pubkey || checksum || version)
&gt; &gt;
&gt; &gt; Is the order in which the address is encoded once the checksum is
&gt; &gt; calculated. checksum represents (the first two bytes of) the result of
&gt; &gt; the SHA3 hash.
&gt; &gt;
&gt; &gt; We put pubkey first so that humans can distinguish addresses.
&gt; &gt; (We could put checksum first, but that's non-standard.)
&gt;
&gt; I just talked with some people who run a large onion site.
&gt;
&gt; They asked if we can put the checksum at the front of the encoded
&gt; address.
&gt;
&gt; This makes phishing with different bit(s) in the tail of the address
&gt; much harder. (That is, searching for a matching prefix for an existing
&gt; address is much harder if the checksum changes the first two characters
&gt; unpredictably. People ignore the checksum if it's at the end.)

The issue extends to vanity domains, which may do more harm than good as
they condition people to recognise onion domains by their prefix, but
I'm not aware of any research to back up that assumption.  See also:
&lt;https://moderncrypto.org/mail-archive/messaging/2015/001928.html&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170328180300</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-03-28 18:03:00-0400</timestampReceived><subject>Re: [tor-dev] Rethinking Bad Exit Defences: Highlighting insecure and sensitive content in Tor Brows</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Tom Ritter:
&gt; It seems reasonable but my first question is the UI. Do you have a
&gt; proposal?  The password field UI works, in my opinion, because it
&gt; shows up when the password field is focused on. Assuming one uses the
&gt; mouse to click on it (and doesn't tab to it from the username) - they
&gt; see it.

Depending on how "intrusive" you want to be you could hide the
bitcoin/onion addresses with an overlay similar how NoScript (used to?)
hide flash content and make it visible after clicking on it and
acknowledging a warning.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170328230155</emailId><senderName>samir menon</senderName><senderEmail>menon.samir@gmail.com</senderEmail><timestampReceived>2017-03-28 23:01:55-0400</timestampReceived><subject>Re: [tor-dev] Issues With Ticket #7532 - "Count unique IPs in an anonymous way"</subject><body>

[Attachment #2 (multipart/alternative)]


Ah, I see - PCSA can actually keep track of unique IP's without actually
revealing them. Your first link cleared it up a lot for me. PCSA is a
really cool technique!

I'd love to work on this as a GSoC project. I'll write up a proposal and
send it out soon.

On Tue, Mar 28, 2017 at 2:55 PM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:

&gt; Hi Samir,
&gt;
&gt; Brute force does affect Bloom filter/hashed-values as you rightly
&gt; mentioned, but not Probabilistic Counting by Stochastic Averaging (PCSA).
&gt;
&gt; PCSA works on the principle that in an input the probability of n
&gt; consecutive bits having value '0' from the left side(could be right as
&gt; well, but for now assume it left) is 2^(-(n+1)). Bit 'i' of the
&gt; Bitmap(which is our main data structure) is set if a the number of
&gt; consecutive zeros (from left) is 'i'.
&gt;
&gt; We keep repeating it for every input(IP address). We then end up with a
&gt; Bitmap whose  most significant '1' can be computed to give us an
&gt; approximate number of inputs that must have been gone into the algorithm.
&gt;
&gt; In simple words, if I tell you that I have seen the value 1010000 out of
&gt; a total of 'x' values I examined. You could guess that I had examined a
&gt; total of 2^5 values before I saw that particular value.
&gt;
&gt; We would tweak the algorithm to store only the significant most '1' in
&gt; bitmap instead of storing '1' at every iteration. This would mean that
&gt; all that adversary could get hold of is a bitmap whose just one of the
&gt; bit is '1'.
&gt;
&gt; Example, the adversary might get a data structure that looks like:
&gt;                 000001000000
&gt; and would have no way tell what IP addresses were used as an input.
&gt;
&gt; This was just the basic idea behind PCSA. The actual PCSA makes use of
&gt; complicated looking formula to get the approximate number of unique IP
&gt; addresses in order to keep error rate low.
&gt;
&gt; I hope this makes sense.
&gt;
&gt; For some more information and simulation, please check
&gt;
&gt; [0] https://research.neustar.biz/2013/04/02/sketch-of-the-
&gt; day-probabilistic-counting-with-stochastic-averaging-pcsa/
&gt; [1] http://content.research.neustar.biz/blog/runs.html
&gt;
&gt; Regards,
&gt; Jaskaran
&gt;
&gt; On Wednesday 29 March 2017 01:54 AM, samir menon wrote:
&gt; &gt; This ticket [1] was suggested as a GSoC project, but I think there might
&gt; &gt; be an issue with the security model/perceived threat.
&gt; &gt;
&gt; &gt; To summarize the ticket and its child [1], basically, we currently store
&gt; &gt; all the IP's seen by a node so that we can count unique IP's. The idea
&gt; &gt; is that this is dangerous; if a node is compromised, then all of those
&gt; &gt; IP addresses can be retrieved from memory. Therefore, a variety of
&gt; &gt; mitigation methods have been proposed (most prominently, the
&gt; &gt; 'Probabilistic Counting Algorithm' from [2])
&gt; &gt;
&gt; &gt; Here's my issue: what about brute force?
&gt; &gt;
&gt; &gt; No matter what method we use, we will arrive at a data structure that
&gt; &gt; should be able to, given an IP address, tell us whether it is new (and
&gt; &gt; we should increment the unique counter) or old (and we should leave the
&gt; &gt; unique counter the same), with some reasonably small false positive
&gt; &gt; rate. Basically, we're supposed to use some kind of Bloom filter like
&gt; &gt; structure.
&gt; &gt;
&gt; &gt; Then can't that structure then be brute-forced, offline, by an attacker?
&gt; &gt; IPv4 addresses are 32-bits (~4.3 billion of them), so an attacker could
&gt; &gt; just run whatever method we use to check membership over and over, and
&gt; &gt; then recover the set of IP's. The same happens if we hash the IP's
&gt; &gt; beforehand.
&gt; &gt;
&gt; &gt; So, is this attack acceptable? The only mitigation I've seen is the one
&gt; &gt; referenced by 'Aaron' in the ticket, which is the system that git uses,
&gt; &gt; cryptolog; there, they have a random salt that changes daily. Then, an
&gt; &gt; attacker can only learn the IP's for one day. This sounds like a
&gt; &gt; reasonable compromise to me, but then the implementation becomes rather
&gt; &gt; simple; just hash the IP's with a random salt that changes daily before
&gt; &gt; putting them in the set.
&gt; &gt;
&gt; &gt; IPv6 also solves this (128 bits), but there again, the solution is just
&gt; &gt; to hash the IP's before storing them - the Bloom filter/'Probabilistic
&gt; &gt; Counting Algorithm' is unnecessary.
&gt; &gt;
&gt; &gt; I think I must be missing something about how the 'Probabilistic
&gt; &gt; Counting Algorithm' works - somehow, it needs to keep track of the # of
&gt; &gt; unique IP's without knowing (with a high probability) whether any 1
&gt; &gt; individual IP has been seen.
&gt; &gt;
&gt; &gt; Any help/pointing out of errors in my reasoning would be useful.
&gt; &gt;
&gt; &gt; Thanks,
&gt; &gt; Samir Menon
&gt; &gt; menon.samir@gmail.com &lt;mailto:menon.samir@gmail.com&gt;
&gt; &gt; samir2@stanford.edu &lt;mailto:samir2@stanford.edu&gt;
&gt; &gt;
&gt; &gt; [1] https://trac.torproject.org/projects/tor/ticket/7532
&gt; &gt; [2] http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/
&gt; 1985-Flajolet-Probabilistic-counting.pdf
&gt; &gt;
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt;
&gt; --
&gt; Jaskaran Veer Singh (jvsg)
&gt; jvsg1303 at gmail dot com
&gt; PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Ah, I see - PCSA can actually keep track of unique IP's without \
actually revealing them. Your first link cleared it up a lot for me. PCSA is a really \
cool technique!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'd love to work on this as a GSoC project. \
I'll write up a proposal and send it out soon.&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Mar 28, 2017 at 2:55 PM, \
Jaskaran Singh &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:jvsg1303@gmail.com" \
target="_blank"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi Samir,&lt;br&gt; &lt;br&gt;
Brute force does affect Bloom filter/hashed-values as you rightly&lt;br&gt;
mentioned, but not Probabilistic Counting by Stochastic Averaging (PCSA).&lt;br&gt;
&lt;br&gt;
PCSA works on the principle that in an input the probability of n&lt;br&gt;
consecutive bits having value '0' from the left side(could be right as&lt;br&gt;
well, but for now assume it left) is 2^(-(n+1)). Bit 'i' of the&lt;br&gt;
Bitmap(which is our main data structure) is set if a the number of&lt;br&gt;
consecutive zeros (from left) is 'i'.&lt;br&gt;
&lt;br&gt;
We keep repeating it for every input(IP address). We then end up with a&lt;br&gt;
Bitmap whose   most significant '1' can be computed to give us an&lt;br&gt;
approximate number of inputs that must have been gone into the algorithm.&lt;br&gt;
&lt;br&gt;
In simple words, if I tell you that I have seen the value 1010000 out of&lt;br&gt;
a total of 'x' values I examined. You could guess that I had examined a&lt;br&gt;
total of 2^5 values before I saw that particular value.&lt;br&gt;
&lt;br&gt;
We would tweak the algorithm to store only the significant most '1' in&lt;br&gt;
bitmap instead of storing '1' at every iteration. This would mean that&lt;br&gt;
all that adversary could get hold of is a bitmap whose just one of the&lt;br&gt;
bit is '1'.&lt;br&gt;
&lt;br&gt;
Example, the adversary might get a data structure that looks like:&lt;br&gt;
                        000001000000&lt;br&gt;
and would have no way tell what IP addresses were used as an input.&lt;br&gt;
&lt;br&gt;
This was just the basic idea behind PCSA. The actual PCSA makes use of&lt;br&gt;
complicated looking formula to get the approximate number of unique IP&lt;br&gt;
addresses in order to keep error rate low.&lt;br&gt;
&lt;br&gt;
I hope this makes sense.&lt;br&gt;
&lt;br&gt;
For some more information and simulation, please check&lt;br&gt;
&lt;br&gt;
[0] &lt;a href="https://research.neustar.biz/2013/04/02/sketch-of-the-" rel="noreferrer" \
target="_blank"&gt;https://research.neustar.biz/&lt;wbr&gt;2013/04/02/sketch-of-the-&lt;/a&gt;&lt;br&gt; \
day-probabilistic-counting-&lt;wbr&gt;with-stochastic-averaging-&lt;wbr&gt;pcsa/&lt;br&gt; [1] &lt;a \
href="http://content.research.neustar.biz/blog/runs.html" rel="noreferrer" \
target="_blank"&gt;http://content.research.&lt;wbr&gt;neustar.biz/blog/runs.html&lt;/a&gt;&lt;br&gt; &lt;br&gt;
Regards,&lt;br&gt;
Jaskaran&lt;br&gt;
&lt;div&gt;&lt;div class="h5"&gt;&lt;br&gt;
On Wednesday 29 March 2017 01:54 AM, samir menon wrote:&lt;br&gt;
&gt; This ticket [1] was suggested as a GSoC project, but I think there might&lt;br&gt;
&gt; be an issue with the security model/perceived threat.&lt;br&gt;
&gt;&lt;br&gt;
&gt; To summarize the ticket and its child [1], basically, we currently store&lt;br&gt;
&gt; all the IP's seen by a node so that we can count unique IP's. The \
idea&lt;br&gt; &gt; is that this is dangerous; if a node is compromised, then all of \
those&lt;br&gt; &gt; IP addresses can be retrieved from memory. Therefore, a variety of&lt;br&gt;
&gt; mitigation methods have been proposed (most prominently, the&lt;br&gt;
&gt; 'Probabilistic Counting Algorithm' from [2])&lt;br&gt;
&gt;&lt;br&gt;
&gt; Here's my issue: what about brute force?&lt;br&gt;
&gt;&lt;br&gt;
&gt; No matter what method we use, we will arrive at a data structure that&lt;br&gt;
&gt; should be able to, given an IP address, tell us whether it is new (and&lt;br&gt;
&gt; we should increment the unique counter) or old (and we should leave the&lt;br&gt;
&gt; unique counter the same), with some reasonably small false positive&lt;br&gt;
&gt; rate. Basically, we're supposed to use some kind of Bloom filter like&lt;br&gt;
&gt; structure.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Then can't that structure then be brute-forced, offline, by an attacker?&lt;br&gt;
&gt; IPv4 addresses are 32-bits (~4.3 billion of them), so an attacker could&lt;br&gt;
&gt; just run whatever method we use to check membership over and over, and&lt;br&gt;
&gt; then recover the set of IP's. The same happens if we hash the IP's&lt;br&gt;
&gt; beforehand.&lt;br&gt;
&gt;&lt;br&gt;
&gt; So, is this attack acceptable? The only mitigation I've seen is the one&lt;br&gt;
&gt; referenced by 'Aaron' in the ticket, which is the system that git \
uses,&lt;br&gt; &gt; cryptolog; there, they have a random salt that changes daily. Then, \
an&lt;br&gt; &gt; attacker can only learn the IP's for one day. This sounds like a&lt;br&gt;
&gt; reasonable compromise to me, but then the implementation becomes rather&lt;br&gt;
&gt; simple; just hash the IP's with a random salt that changes daily before&lt;br&gt;
&gt; putting them in the set.&lt;br&gt;
&gt;&lt;br&gt;
&gt; IPv6 also solves this (128 bits), but there again, the solution is just&lt;br&gt;
&gt; to hash the IP's before storing them - the Bloom \
filter/'Probabilistic&lt;br&gt; &gt; Counting Algorithm' is unnecessary.&lt;br&gt;
&gt;&lt;br&gt;
&gt; I think I must be missing something about how the 'Probabilistic&lt;br&gt;
&gt; Counting Algorithm' works - somehow, it needs to keep track of the # of&lt;br&gt;
&gt; unique IP's without knowing (with a high probability) whether any 1&lt;br&gt;
&gt; individual IP has been seen.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Any help/pointing out of errors in my reasoning would be useful.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Thanks,&lt;br&gt;
&gt; Samir Menon&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&gt; &lt;a href="mailto:menon.samir@gmail.com"&gt;menon.samir@gmail.com&lt;/a&gt; \
&lt;mailto:&lt;a href="mailto:menon.samir@gmail.com"&gt;menon.samir@gmail.com&lt;/a&gt;&gt;&lt;br&gt; \
&gt; &lt;a href="mailto:samir2@stanford.edu"&gt;samir2@stanford.edu&lt;/a&gt; &lt;mailto:&lt;a \
href="mailto:samir2@stanford.edu"&gt;samir2@stanford.edu&lt;/a&gt;&gt;&lt;br&gt; &lt;span class="im \
HOEnZb"&gt;&gt;&lt;br&gt; &gt; [1] &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/7532" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/ticket/7532&lt;/a&gt;&lt;br&gt; \
&gt; [2] &lt;a href="http://www.mathcs.emory.edu/~cheung/papers/StreamDB/Probab/1985-Flajolet-Probabilistic-counting.pdf" \
rel="noreferrer" target="_blank"&gt;http://www.mathcs.emory.edu/~&lt;wbr&gt;cheung/papers/StreamDB/Probab/&lt;wbr&gt;1985-Flajolet-Probabilistic-&lt;wbr&gt;counting.pdf&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&gt;&lt;br&gt;
&lt;/span&gt;&lt;span class="im HOEnZb"&gt;&gt; \
______________________________&lt;wbr&gt;_________________&lt;br&gt; &gt; tor-dev mailing \
list&lt;br&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;&lt;span class="HOEnZb"&gt;&lt;font color="#888888"&gt;--&lt;br&gt;
Jaskaran Veer Singh (jvsg)&lt;br&gt;
jvsg1303 at gmail dot com&lt;br&gt;
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170329110837</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-03-29 11:08:37-0400</timestampReceived><subject>Re: [tor-dev] GSoC 17 | Name System API for Tor Onion Services</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Pickfire &lt;pickfire@riseup.net&gt; writes:
&gt;
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; I am Ivan Tham. Currently studying in Computer Science in APIIT Malaysia. I am
&gt;&gt; interested particapate in Google Summer of Code 2017 under tor organization. I
&gt;&gt; am interested to see Proposal 224 coming along but I would really like to see
&gt;&gt; [Proposal 272][0] and hope that tor hidden services can be more user-friendly.
&gt;&gt;
&gt;
&gt; Hello,
&gt;
&gt; there is still interest in this proposal but unfortunately it hasn't
&gt; been revised since it was first posted on the mailing list. The mailing
&gt; list feedback unfortunately has not been incorporated to the proposal
&gt; yet; particularly the comments by David Fifield are very relevant and
&gt; should be considered carefully before taking the proposal too seriously.
&gt;
&gt; In general, I suggest to anyone who wants to work on this proposal, to
&gt; do it using a Tor controller instead of hacking the main C tor
&gt; code. meejah suggested this here:
&gt;       https://lists.torproject.org/pipermail/tor-dev/2016-October/011517.html
&gt; and it seems like a proper solution here would involve controller events
&gt; like NEWRESOLVE, MAPADDRESS, and plus some extra magic.
&gt;
&gt; I must say that this project is definitely relevant for GSoC, but it
&gt; needs a _strong_ and _independent_ student that can handle it.
&gt;
&gt; Also, Tor is currently having a real life meeting so most of us are very
&gt; busy. We plan to discuss the proposal during the meeting, so I hope to
&gt; send a short update next week at some point if I find the time (and also
&gt; merge it to torspec.git since it's currently missing).
&gt;

FWIW, I merged the draft proposal from [tor-dev] to torspec, so that we
have a common point of reference. The proposal still needs improvements
before we can call it complete.

You can find it as proposal279:
    https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170329162700</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-03-29 16:27:00-0400</timestampReceived><subject>Re: [tor-dev] "firefox --app" for meek-http-helper</subject><body>

Georg Koppen:
&gt; David Fifield:
&gt; &gt; On Sun, Mar 26, 2017 at 02:28:00PM +0000, anonym wrote:
&gt; &gt; &gt; Tails uses the Tor Launcher shipped in Tor Browser, but it's run as a
&gt; &gt; &gt; stand-alone XUL application (`firefox --app ...`), so the *web*
&gt; &gt; &gt; browser isn't started as part of it.
&gt; &gt; 
&gt; &gt; Sorry to change the subject, but should we be running meek-http-helper
&gt; &gt; using "firefox --app"? I didn't know about that before. It sounds like
&gt; &gt; it could solve some of the problems associated with having multiple
&gt; &gt; Firefox profiles.
&gt; 
&gt; I have no strong opinions here. It seems worth playing with it to figure
&gt; out if it could be helpful in a meek context.

Correct me if I am wrong, but won't `firefox --app` stop working early next year? Or \
is it only XUL extensions that won't work initially? Any way, XUL is going away, so I \
don't think too much effort should be put into anything XUL-related.

Cheers!

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170329223041</emailId><senderName>Daniel Achleitner</senderName><senderEmail>daniel.achleitner@gmail.com</senderEmail><timestampReceived>2017-03-29 22:30:41-0400</timestampReceived><subject>[tor-dev] GSoC: Support all kinds of DNS queries</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi everyone,

I'm a Software Engineering master's student at TU Wien, Austria, with a
recent focus on computer security and privacy issues. I am interested in
participating in GSoC 2017, particularily in the task to support all
kinds of DNS queries via Tor [1].

I've seen the mailing list discussions of 2012 and read the resulting
proposition 219 [2]. What do you think, which parts of it (if any) would
need to be adapted for DNS in 2017? My current impression is that not
much has changed, particularily regarding DNSSEC support and deployment.

As of now, the proposal looks fairly complete with few questions
remaining, the biggest research task being how to utilize libunbound for
query/response parsing and construction. Implementing the RELAY DNS
cells then seems fairly straightforward. Unit/integration tests and some
fuzzing would be a good idea. The problem of reducing DNSSEC roundtrips
(serialization) to be investigated in a later phase, I would say.

Is a separate AXFR tool still something that is desired? I have no
experience with zone transfers -- can't the existing tooling just be
used over a normal TCP conn through Tor?

This project idea would make a good match to my thesis in progress, for
which I am researching and evaluating privacy-improving DNS tools in the
context of Tor (DNSCrypt, DNS-over-TLS) [3], inspired by the awesome
paper on DNS correlation [4]. For example, I recently built a
SOCKS-to-SOCKS translator which allows to resolve hostnames using a
resolver of choice, e.g. using DNSCrypt with TBB.

Looking forward to hearing your thoughts, concerns and opinions!

Best regards,
Daniel

IRC handle on OFTC: idealchain

[1]: https://www.torproject.org/getinvolved/volunteer.html.en#supportAllDNS
[2]:
https://gitweb.torproject.org/torspec.git/tree/proposals/219-expanded-dns.txt
[3]: My work-in-progress mindmap about DNS Privacy (not related to prop219):
     https://drive.google.com/open?id=0B3d38csDsjwudDJOUjRleE93bjQ
[4]: https://nymity.ch/dns-traffic-correlation/tor-dns.pdf



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330014525</emailId><senderName>samir menon</senderName><senderEmail>menon.samir@gmail.com</senderEmail><timestampReceived>2017-03-30 01:45:25-0400</timestampReceived><subject>[tor-dev] Anonymous Local Count Statistics Using PCSA - GSoC</subject><body>

Hi there!

I'm Samir, a Computer Science student at Stanford University, with a
focus in applied cryptography and computer security. This summer, I
want to work (through GSoC) on computing usage statistics without
keeping IP addresses in memory (see tickets #7532 and #15469) [1] [2].

Currently, we keep sets of IP's (or hashed IP's) in memory so that we
can compute the number of unique client connections. This has been
pointed out as a pretty serious concern, because the IP's themselves
are sensitive info that we don't want an attacker to acquire, but the
statistics are relatively valuable.

As Nick first pointed out in #15469, we can use proven techniques to
compute these statistics without actually explicitly storing any IP's
(or IP hashes) in memory. The technique I want to use, "Probabilistic
Counting with Stochastic Averaging", or PCSA, is relatively
well-studied, and can provide good estimates (&lt;5% error) of the number
of unique elements in a time series.

The basic idea is to count the number of 0's before the least
significant 1 in every (Jenkins hashed) IP, and then recognize that
the more unique IP's we encounter, the more likely it is that we see a
hashed IP with a large number of 0's before the least significant 1.
(Shoutout to Jaskaran and [3] for helping me understand this). A more
detailed explanation and more resources for understanding PCSA are in
the proposal.

Here is my draft proposal (also attached, but links don't work):
http://stanford.edu/~samir2/TorGSoCApplication.html

I'd love to hear feedback on it - what's feasible, what's most useful,
and what I should focus on, etc. You can also chat with me about it on
IRC at `samir2`!

Thanks,
~Samir Menon
menon.samir@gmail.com
Stanford University, B.S. Computer Science, 2019

[1] https://trac.torproject.org/projects/tor/ticket/7532
[2] https://trac.torproject.org/projects/tor/ticket/15469
[3] https://www.cs.princeton.edu/~rs/talks/AC11-Cardinality.pdf

["TorGSoCAnonymousLocalStats.pdf" (application/pdf)]
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170330064845</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-03-30 06:48:45-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - unMessage: a privacy enhanced instant messenger</subject><body>

On Wed, Mar 29, 2017 at 3:38 PM, Felipe Dau &lt;dau@riseup.net&gt; wrote:
&gt; Thanks for the suggestion. It should be possible to support multiple
&gt; kinds of transport, but we still need to do some research on that
&gt; because it might make some attacks
&gt; possible/easier (e.g., partitioning attacks)? It would be great to
&gt; have a discussion about that.

It's suggested and welcome that all overlay networks publicly
review, audit, analyze, each others work and offerings. Unfortunately
that hasn't develop much yet in a formal dedicated as responsibility
manner among even the larger opensource community, or even
discussion if that is a good idea. (But there is some good work in
some projects out there lately of their own work... automated code
linting, and the rarer procured third party audit.)

Then shall we presume all our networks are equivalently secure?,
or equivalently flawed, as each network happens to advertise now and then.

This may leave the matter of partitioning up to the user to consider
pursuant to any note about that in the app documentation.

The app could enable simultaneous multihome based on commandline
options... --tor --i2p --cjdns --other, default [whatever] .
And of course all the ports / addresses / bindings would need to
be flexible.

On equivalent networks, presence is maybe a bigger issue than partitioning.
This includes concept to drop the network identity off the network itself,
or use new ID, not just managing announces to buddy list entries.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330160240</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-03-30 16:02:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal xyz : Count Unique IP addresses in an anonymous way</subject><body>

This looks plausible to me.  As a formatting note: we usually don't
give the non-proposed solutions equal treatment with the proposed
solutions. Instead, we usually mark them as not proposed.  From this
document, I _think_ you're proposing PCSA, and suggesting that we not
do the others?  But I'm not sure.

For the PCSA portion, we should really have citations to the actual
papers where these formulas and algorithms come from.

We should also consider how this proposal would interact with other
proposed secure aggregation solutions, like Privcount [1] and/or some
other kind of PrivEx [2].  I'd like to hear what the designers of
those ideas think of this one.


[1] https://github.com/privcount/privcount
[2] http://cacr.uwaterloo.ca/techreports/2014/cacr2014-08.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330160654</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-03-30 16:06:54-0400</timestampReceived><subject>Re: [tor-dev] Interest in collaborating on a standard Ed25519 key blinding scheme?</subject><body>

On Wed, Mar 22, 2017 at 12:07 PM, Tony Arcieri &lt;bascule@gmail.com&gt; wrote:
&gt; On Wed, Mar 22, 2017 at 6:15 AM, Nick Mathewson &lt;nickm@torproject.org&gt;
&gt; wrote:
&gt;&gt;
&gt;&gt; Hi! I guess we could keep an eye on the process, though I don't know that
&gt;&gt; I'd have much to contribute myself: I'm more of a crypto consumer than a
&gt;&gt; crypto generator.  Maybe one of the developers who knows crypto better can
&gt;&gt; join in here?
&gt;
&gt;
&gt; The main notable points of discussion so far have all been around preserving
&gt; Ed25519's original "clamping" invariants. I didn't see any discussion of
&gt; this in the current Tor spec.
&gt;
&gt;&gt;
&gt;&gt; As for adoption: we're on track to deploy next generation hidden services
&gt;&gt; some time this year, ideally in the next 4 or 5 months, so the window to
&gt;&gt; converge on a common system is small by standards-body standards.
&gt;
&gt;
&gt; Yeah, that's a blink of an eye in the IETF timescale. However, I think if
&gt; you incorporate some feedback into your current design and do end up
&gt; shipping it before a draft standard undergoes the requisite bikeshedding,
&gt; the "running code" aspect of Tor using it in the wild will probably help the
&gt; standard converge around whatever you ship. Worked out for Ed25519 itself,
&gt; anyway.

Fair enough.  My understanding right now is that a bunch of us think
this solution looks promising, and will probably be what we build,
unless it turns out to be bad or someone comes up with something even
better.
  https://moderncrypto.org/mail-archive/curves/2017/000866.html

Henry, Isis, Ian, George: Would one of you like to join in on the the
CFRG thread about this?  I'm not sure I'm enough of a cryptographer to
be a good advocate here.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330174924</emailId><senderName>Ivan Tham</senderName><senderEmail>pickfire@riseup.net</senderEmail><timestampReceived>2017-03-30 17:49:24-0400</timestampReceived><subject>Re: [tor-dev] Comments on proposal 279 (Name API)</subject><body>

Hi, I would like to do some addition as well.

Section 2.3. System configuration [TORRC]

- Do we really need a priority list?
- Should we just make a priority based on the ordering?

Section 2.3.1. Tor name resolution logic

- Should tor check the &lt;tld&gt; based on regex?
- How should it reponds when &lt;tld&gt; is .a.b?
- Can it accept '*' (without dot) or '.on*' as &lt;tld&gt;?

And about the caching part? Should it be in the spec?

In reply to nickm:

- Maybe we can considering using sockets instead of TCP?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330181007</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-03-30 18:10:07-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Questions</subject><body>

On Thu, Mar 30, 2017 at 2:04 PM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
 [...]
&gt;&gt;   Also wanted to know if specific knowledge about circuit
&gt;&gt; cryptography was required? As I know of it, but I certainly cannot make my
&gt;&gt; own fully homomorphic cryptosystem, is it more in the steps of the system
&gt;&gt; has already been made, it just needs to be parallelised correctly?
&gt;
&gt; Right; all our crypto is implemented in Tor right now.  I'm not sure
&gt; why you're mentioning homomorphic cryptosystems; we don't need one of
&gt; those here.

Ohhhh!  A colleague points out to me that the term "circuit" is also
used in homomorphic encryption.  I'm talking about Tor circuits here
-- they are a construction using on the Tor network, and don't have
anything to do with homomorphic encryption.  For more information on
them, see https://www.torproject.org/about/overview.html.en and
tor-spec.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170330215851</emailId><senderName>Mark Cohen</senderName><senderEmail>m@markpcohen.com</senderEmail><timestampReceived>2017-03-30 21:58:51-0400</timestampReceived><subject>Re: [tor-dev] [GSoC] Intro &amp; Questions</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Alan,

Well, I'm not a fan of giving out my phone number in public forums. But I can be
reached by email (m@markpcohen.com) and on IRC (mpcsh on freenode and oftc).
Everything is on my website at https://mpcsh.xyz/about.

~Mark

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdfuMACgkQss2qrTdc
5gS98xAAsf1Xsm9Do5Gza2rNqYgksXKeIXj7b1j1z6E8vqzy/QPaUjrpLsipk95F
9OT0OiVlpV0Dm0VS0EJZqBD/pCDTx4/+D8nuCOs7z8rtzsa9mQI5+ArwXCIhyvt5
2dGYdPAWk/17bRjBBQNf/dowVjK/tmrbqPVGT4NH9UR3jE3q/Fu3HXuLupWpGeN8
1BZnqbJE8LdFeYfCtQCZo24poU5naEUhP8kqAHWlM3OO4qwbjB+nAhghPu5hEmx9
jOVEvMsRXPdN1igoOxwRldzzlBX+ndfAopldcoGFipFIhk2PoAR8oiHS3koUdWb0
z8prIdK5UjIkuzOt+QprIzqjP6NPhuQz5FZbh/Spj/7FnR771iT+CXXXfZyyh0hi
DrEy49dFLCgG4XFkXTLJfWEFwhdyIhiyVFrPC91xXPLv15xViod3HjghAmj9sx0h
4D9j8PJhNL282dLXPzStCR6Ex6sf31bnqXKfoG7Udg+cdS8hVLmTVLOQpDVn4KNd
2rxF6g+thGAK2HFWeuedHXoBoXQHgrC0M3FveTfaJlKkBQM32yam/UOacuAqd8x0
IUnXDfahdz7PMl/lzhCNknLg4gLkUO1wdiadefBxm9jvlPHCULmqE2TyD2VuJWs8
bKBb+Dj7lNHZk2F9dl6+rL12G3RovJDbmyfK3tRzGi7wFmkhDAg=
=UgvT
-----END PGP SIGNATURE-----

-------- Original Message --------
Subject: Re: [tor-dev] [GSoC] Intro &amp; Questions
Local Time: March 30, 2017 4:11 PM
UTC Time: March 30, 2017 9:11 PM
From: agshuman@gmail.com
To: tor-dev@lists.torproject.org

I am your IT Genius but why do you not leave a phone number or contact?

On Thu, Mar 30, 2017 at 3:22 PM, Mark Cohen &lt;m@markpcohen.com&gt; wrote:

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello everyone!

My name is Mark, and I'm a 2nd year undergraduate at UChicago, majoring in CS
and math. I greatly admire the Tor community, and as a longtime user I've
always wanted to give back. As far as relevant experience goes, I've taken
courses in systems, networks, and languages, and I'm currently in a wonderful
usable security course taught by Blase Ur. Last summer I worked for Keybase,
which was both a lot of fun and highly educational.

For GSoC, I'm most interested in helping improve the state of IPv6. I would
love to pick someone's brain before creating an application to get a conceptual
feel for the project and to learn about the kinds of things I'd be
implementing. If you're that person, I'd really appreciate it if you could
reach out either on here or via any other contact method (check my website
linked below). Thanks for reading, and I'm looking forward to talking to you!

~Mark (https://mpcsh.xyz)

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdV10ACgkQss2qrTdc
5gTWrw/+NpcZ/LahaxKXc3rdejLqblg8iiQVBxO8I7FkJkST5kz8gOFoheImrmSF
gh2Jz/gY3TK/U8OXd8yDBPVd8KwWadCF161BURQtN8U35Rxao+Xmrrwhp5P2lj2L
DfGkBwDzkIAOeCKOITh64guuzpPrhCWJOean7gJs6zHBIB+cIRZF1/3LhbtqRLJI
nKcBy1mWjwHJ2CKkIhIFFHkY2WfqQ3JvlngjwDFUuYvBTrHKAKK1tl7Wnuo7npFs
OZSaSxuXK4bQPGRINpQoPNyYI4sjKYQChco1ZLZ3v7Kc1Uyy0xlR5ittEl5GnaKl
4tXVRJpjDkkrWwHYxpVl5YrzUAC0OlJ9yh7qDZK2OQ5V6UEv+cpZJU5fGNrRKYxG
JLMvs3Jf42xHIyMI0H7ya0Fh12PrOAD7en0mqM4Ie55/uvCb9FSbDhGOXvjuIIvp
2E6pJYsEXXvCZMyO8C36zEWn4JsEvAAAUeig9vyqL7kEDIL0vql5CwXO27MI3nqz
IIk+ogVpITIooHB+owR01QENZ7DIoj1uRvX4skF+hXtA2W66J10Uw1b2gy2qPPbG
HoAZW+nXRpKUYmWsvy8wwqZNtxdhZ8DgY78hXqrFOr65v9Odi6aNnAVSB9m9Dg4b
Iu6LW7jbOOYbT6ZUWB7XwG7qi+jtHAzZZ7ZOAVzU37cyzGf2tnY=
=eUZ0
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
[Attachment #5 (text/html)]

&lt;div&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;Hash: SHA256&lt;br&gt;&lt;br&gt;Alan,&lt;br&gt;&lt;br&gt;Well, I'm \
not a fan of giving out my phone number in public forums. But I can be&lt;br&gt;reached by \
email (&lt;a href="mailto:m@markpcohen.com"&gt;m@markpcohen.com&lt;/a&gt;) and on IRC (mpcsh on \
freenode and oftc).&lt;br&gt;Everything is on my website at &lt;a \
href="https://mpcsh.xyz/about"&gt;https://mpcsh.xyz/about&lt;/a&gt;.&lt;br&gt;&lt;br&gt;~Mark&lt;br&gt;&lt;br&gt;-----BEGIN \
PGP SIGNATURE-----&lt;br&gt;&lt;br&gt;iQIzBAEBCAAdFiEEmyuHiWNRDa+IFK5Pss2qrTdc5gQFAljdfuMACgkQss2q \
rTdc&lt;br&gt;5gS98xAAsf1Xsm9Do5Gza2rNqYgksXKeIXj7b1j1z6E8vqzy/QPaUjrpLsipk95F&lt;br&gt;9OT0OiVlpV \
0Dm0VS0EJZqBD/pCDTx4/+D8nuCOs7z8rtzsa9mQI5+ArwXCIhyvt5&lt;br&gt;2dGYdPAWk/17bRjBBQNf/dowVjK/ \
tmrbqPVGT4NH9UR3jE3q/Fu3HXuLupWpGeN8&lt;br&gt;1BZnqbJE8LdFeYfCtQCZo24poU5naEUhP8kqAHWlM3OO4q \
wbjB+nAhghPu5hEmx9&lt;br&gt;jOVEvMsRXPdN1igoOxwRldzzlBX+ndfAopldcoGFipFIhk2PoAR8oiHS3koUdWb0 \
&lt;br&gt;z8prIdK5UjIkuzOt+QprIzqjP6NPhuQz5FZbh/Spj/7FnR771iT+CXXXfZyyh0hi&lt;br&gt;DrEy49dFLCgG4X \
FkXTLJfWEFwhdyIhiyVFrPC91xXPLv15xViod3HjghAmj9sx0h&lt;br&gt;4D9j8PJhNL282dLXPzStCR6Ex6sf31bn \
qXKfoG7Udg+cdS8hVLmTVLOQpDVn4KNd&lt;br&gt;2rxF6g+thGAK2HFWeuedHXoBoXQHgrC0M3FveTfaJlKkBQM32y \
am/UOacuAqd8x0&lt;br&gt;IUnXDfahdz7PMl/lzhCNknLg4gLkUO1wdiadefBxm9jvlPHCULmqE2TyD2VuJWs8&lt;br&gt;bKBb+Dj7lNHZk2F9dl6+rL12G3RovJDbmyfK3tRzGi7wFmkhDAg=&lt;br&gt;=UgvT&lt;br&gt;-----END \
PGP SIGNATURE-----&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite" \
class="protonmail_quote"&gt;&lt;div&gt;-------- Original Message \
--------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: Re: [tor-dev] [GSoC] Intro &amp; \
Questions&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: March 30, 2017 4:11 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: \
March 30, 2017 9:11 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: agshuman@gmail.com&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I am your IT \
Genius but why do you not leave a phone number or contact?&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;div&gt;On Thu, Mar 30, 2017 \
at 3:22 PM, Mark Cohen &lt;span dir="ltr"&gt;&lt;&lt;a rel="noreferrer nofollow noopener" \
href="mailto:m@markpcohen.com"&gt;m@markpcohen.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div&gt;&lt;div&gt;-----BEGIN PGP SIGNED \
MESSAGE-----&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hash: SHA256&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hello \
everyone!&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My name is Mark, and I'm a 2nd year \
undergraduate at UChicago, majoring in CS&lt;br&gt;&lt;/div&gt;&lt;div&gt;and math. I greatly admire \
the Tor community, and as a longtime user I've&lt;br&gt;&lt;/div&gt;&lt;div&gt;always wanted to give \
back. As far as relevant experience goes, I've taken&lt;br&gt;&lt;/div&gt;&lt;div&gt;courses in \
systems, networks, and languages, and I'm currently in a \
wonderful&lt;br&gt;&lt;/div&gt;&lt;div&gt;usable security course taught by Blase Ur. Last summer I \
worked for Keybase,&lt;br&gt;&lt;/div&gt;&lt;div&gt;which was both a lot of fun and highly \
educational.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For GSoC, I'm most interested in helping \
improve the state of IPv6. I would&lt;br&gt;&lt;/div&gt;&lt;div&gt;love to pick someone's brain before \
creating an application to get a conceptual&lt;br&gt;&lt;/div&gt;&lt;div&gt;feel for the project and to \
learn about the kinds of things I'd be&lt;br&gt;&lt;/div&gt;&lt;div&gt;implementing. If you're that \
person, I'd really appreciate it if you could&lt;br&gt;&lt;/div&gt;&lt;div&gt;reach out either on here \
or via any other contact method (check my website&lt;br&gt;&lt;/div&gt;&lt;div&gt;linked below). Thanks \
for reading, and I'm looking forward to talking to \
you!&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;~Mark (&lt;a rel="noreferrer nofollow noopener" \
href="https://mpcsh.xyz"&gt;https://mpcsh.xyz&lt;/a&gt;)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-----BEGIN \
PGP SIGNATURE-----&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;iQIzBAEBCAAdFiEEmyuHiWNRDa+&lt;wbr&gt;IFK5Ps \
s2qrTdc5gQFAljdV10ACgkQs&lt;wbr&gt;s2qrTdc&lt;br&gt;&lt;/div&gt;&lt;div&gt;5gTWrw/+NpcZ/&lt;wbr&gt;LahaxKXc3rdejLqbl \
g8iiQVBxO8I7F&lt;wbr&gt;kJkST5kz8gOFoheImrmSF&lt;br&gt;&lt;/div&gt;&lt;div&gt;gh2Jz/gY3TK/&lt;wbr&gt;U8OXd8yDBPVd8Kw \
WadCF161BURQtN8&lt;wbr&gt;U35Rxao+Xmrrwhp5P2lj2L&lt;br&gt;&lt;/div&gt;&lt;div&gt;DfGkBwDzkIAOeCKOITh64guuzpPrh \
C&lt;wbr&gt;WJOean7gJs6zHBIB+cIRZF1/&lt;wbr&gt;3LhbtqRLJI&lt;br&gt;&lt;/div&gt;&lt;div&gt;nKcBy1mWjwHJ2CKkIhIFFHkY2W \
fqQ3&lt;wbr&gt;JvlngjwDFUuYvBTrHKAKK1tl7Wnuo7&lt;wbr&gt;npFs&lt;br&gt;&lt;/div&gt;&lt;div&gt;OZSaSxuXK4bQPGRINpQoPNy \
YI4sjKY&lt;wbr&gt;QChco1ZLZ3v7Kc1Uyy0xlR5ittEl5G&lt;wbr&gt;naKl&lt;br&gt;&lt;/div&gt;&lt;div&gt;4tXVRJpjDkkrWwHYxpVl \
5YrzUAC0Ol&lt;wbr&gt;J9yh7qDZK2OQ5V6UEv+&lt;wbr&gt;cpZJU5fGNrRKYxG&lt;br&gt;&lt;/div&gt;&lt;div&gt;JLMvs3Jf42xHIyMI0 \
H7ya0Fh12PrOA&lt;wbr&gt;D7en0mqM4Ie55/&lt;wbr&gt;uvCb9FSbDhGOXvjuIIvp&lt;br&gt;&lt;/div&gt;&lt;div&gt;2E6pJYsEXXvCZM \
yO8C36zEWn4JsEvA&lt;wbr&gt;AAUeig9vyqL7kEDIL0vql5CwXO27MI&lt;wbr&gt;3nqz&lt;br&gt;&lt;/div&gt;&lt;div&gt;IIk+ogVpITI \
ooHB+&lt;wbr&gt;owR01QENZ7DIoj1uRvX4skF+&lt;wbr&gt;hXtA2W66J10Uw1b2gy2qPPbG&lt;br&gt;&lt;/div&gt;&lt;div&gt;HoAZW+&lt;w \
br&gt;nXRpKUYmWsvy8wwqZNtxdhZ8DgY78h&lt;wbr&gt;XqrFOr65v9Odi6aNnAVSB9m9Dg4b&lt;br&gt;&lt;/div&gt;&lt;div&gt;Iu6LW \
7jbOOYbT6ZUWB7XwG7qi+&lt;wbr&gt;jtHAzZZ7ZOAVzU37cyzGf2tnY=&lt;br&gt;&lt;/div&gt;&lt;div&gt;=eUZ0&lt;br&gt;&lt;/div&gt;&lt;div&gt;-----END \
PGP SIGNATURE-----&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
tor-dev mailing list&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a rel="noreferrer nofollow noopener" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer nofollow \
noopener"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170331164603</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-03-31 16:46:03-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - Project "Crash Reporter for Tor Browser"</subject><body>

On 31 March 2017 at 10:27, Nur-Magomed &lt;nmagoru@gmail.com&gt; wrote:
&gt;&gt; I think we'd want to enhance this form. IIRC the 'Details' view is
&gt;&gt; small and obtuse and it's not easy to review. I'm not saying we
&gt;&gt; _should_ create these features, but here are a few I brainstormed:
&gt;
&gt; Yes, actually that form only shows "Key: Value" list, we can break it down
&gt; in several GroupBoxes which consist of grouped data field and checkboxes to
&gt; include.
&gt;
&gt;&gt; Let's try and avoid GDocs if you don't mind :)
&gt;
&gt; Sorry :) I already registered on storm, but I had no access to create.
&gt; Thanks for review, I'll update proposal accordint to your requiments.

No worries.

&gt; And question: could we throw Windows or MacOS or both versions from
&gt; timeline, and develop them after summer?

Yes, I think that's fine. I think getting one platform to completion
would be a great accomplishment and would lay the groundwork and
improve the momentum to getting the subsequent platforms there.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170331212327</emailId><senderName>Sebastian Hahn</senderName><senderEmail>sebastian@torproject.org</senderEmail><timestampReceived>2017-03-31 21:23:27-0400</timestampReceived><subject>[tor-dev] Tor in a safer language: Network team update from Amsterdam</subject><body>

Hi there tor-dev,

as an update to those who didn't have the chance to meet with us in
Amsterdam or those who haven't followed the efforts to rely on C less,
here's what happened at the "let's not fight about Go versus Rust, but
talk about how to migrate Tor to a safer language" session and what
happened after.

Notes from session:

We didn't fight about Rust or Go or modern C++. Instead, we focused on
identifying goals for migrating Tor to a memory-safe language, and how
to get there. With that frame of reference, Rust emerged as a extremely
strong candidate for the incremental improvement style that we
considered necessary. We were strongly advised to not use cgo, by people
who have used it extensively.

As there are clearly a lot of unknowns with this endeavor, and a lot
that we will learn/come up against along the way, we feel that Rust is a
compelling option to start with,  with the caveat that we will first
experiment, learn from the experience, and then build on what we learn.

You can also check out the session notes on the wiki (submitted, but not
posted yet).[1]

The real fun part started after the session. We got together to actually
make a plan for an experiment and to give Rust a serious chance. We
quickly got a few trivial things working like statically linking Rust
into Tor, integrating with the build system to call out to cargo for the
Rust build, and using Tor's allocator from Rust.

We're planning to write up a blog post summarizing our experiences so
far while hopefully poking the Rust developers to prioritize the missing
features so we can stop using nightly Rust soon (~months, instead of
years).

We want to have a patch merged into tor soon so you can all play with
your dev setup to help identify any challenges. We want to stress that
this is an optional experiment for now, we would love feedback but
nobody is paid to work on this and nobody is expected to spend more
time than they have sitting around.

We have committed to reviewing any patch that includes any Rust code to
provide feedback, get experience to develop a style, and actually make
use of this experiment. This means we're not ready to take on big
patches that add lots of tricky stuff quite now, we want to take it slow
and learn from this.

We would like to do a session at the next dev meeting to give updates on
this effort, but in the meantime, if team members would like to start
learning Rust and helping us identify/implement small and well-isolated
areas to begin migration, or new pieces of functionality that we can
build  immediately in Rust, that would be really great.

So, for a TLDR:

What has already been done:
- Rust in Tor build
- Putting together environment setup instructions and a (very small)
 initial draft for coding standards
- Initial work to identify good candidates for migration (not tightly
 interdependent)

What we think are next steps:
- Define conventions for the API boundary between Rust and C
- Add a non-trivial Rust API and deploy with a flag to optionally use
 (to test support with a safe fallback)
- Learn from similar projects
- Add automated tooling for Rust, such as linting and testing


Cheers
Alex, Chelsea, Sebastian

[1]: Will be visible here https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170201174040</emailId><senderName>Adam Fisk</senderName><senderEmail>afisk@getlantern.org</senderEmail><timestampReceived>2017-02-01 17:40:40-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader</subject><body>

In our experience GAE is basically blocked in China at least. Is that
your experience as well? I believe it's possible to find IPs that are
unblocked, but you'd have to embed those IPs somehow into the client
or integrate the scanning.

On Mon, Jan 23, 2017 at 12:20 AM, Katherine Li
&lt;katherineli.tor@gmail.com&gt; wrote:
&gt; Hi Tim,
&gt;
&gt; Thank you for your insightful questions! My responses are below:
&gt;
&gt;&gt; Is this the cheapest zone/region for computation or bandwidth? If I am not
&gt;&gt; in the US, would it be faster or cheaper for me to use a local google data
&gt;&gt; center?
&gt;
&gt; Yes, it would be faster for you to use a local google data center. I have
&gt; added a variable "REGION" in the script of the uploader. You can now change
&gt; the region by replacing "us-central" with another region. I have also added
&gt; an explanation of how to do this in the README. Below is a list of all the
&gt; regions:
&gt;
&gt; REGION           SUPPORTS STANDARD  SUPPORTS FLEXIBLE
&gt; asia-northeast1  YES                                           YES
&gt; europe-west       YES                                           NO
&gt; us-central           YES                                           YES
&gt; us-east1             YES                                           YES
&gt;
&gt; You can also obtain this list via the following terminal command (with
&gt; GAEuploader as your current directory):
&gt; ./google-cloud-sdk/bin/gcloud app regions list
&gt;
&gt; As you pointed out, I have set the zone to zone3 in my original code.
&gt; However, it turned out that zone is relevant only when working with Google
&gt; Compute Engine, which is not the case for GAEuploader. So I have removed the
&gt; line "subprocess.check_call(["./google-cloud-sdk/bin/gcloud", "beta",
&gt; "config", "set", "compute/zone", "zone3"])
&gt;
&gt;
&gt;&gt; Which tor bridge does the traffic for these instances go through? (Or does
&gt;&gt; this set up a tor bridge as well?)
&gt; The bridge uses https://meek.bamsoftware.com/, which is on the same host as
&gt; the meek-azure bridge, but not rate-limited like meek-azure is.
&gt; You can find more information on Tor relays at its Atlas page:
&gt;
&gt; https://atlas.torproject.org/#details/C20658946DD706A7A2181159A1A04CD838570D04
&gt; If you want to use a different bridge, you can edit the file
&gt; appengine/reflect.go before running uploader:
&gt;         forwardURL = "https://meek.bamsoftware.com/"
&gt;
&gt;
&gt; Thanks again for your input! Please let me know if you have any more
&gt; questions/feedback.
&gt;
&gt; Best,
&gt; Katherine Li
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;



-- 
--
President
Brave New Software Project, Inc.
https://www.getlantern.org
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170201193610</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-02-01 19:36:10-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 26 Jan (15:05:26), George Kadianakis wrote:
&gt; Hey list,
&gt; 
&gt; with service-side prop224 implementation moving forward, we need to pin down
&gt; the directory structure of prop224 onion services. This will be very similar to
&gt; the current directory structure, but with some mods to facilitate assymetric
&gt; client authorization keys and offline keys.
&gt; 
&gt; As people have pointed out, the HS directory structure matters less after the
&gt; introduction of ephemeral ADD_ONION onion services, but still it's an important
&gt; part of onion service sysadmin UX.
&gt; 
&gt; So the HiddenServiceDir directory will contain the following items:
&gt; 
&gt; - "./hostname"    [FILE]
&gt; 
&gt;    This is a file containing the onion address of the onion service.
&gt; 
&gt;    As you can see it's the same filename as in v2. Should we suffix it with v3
&gt;    to make it clear that it's v3 onion? Would we ever have v2 and v3 onions
&gt;    living in the same directory?
&gt; 
&gt; - "./private_key_ed25519"  [FILE]
&gt; 
&gt;    This is the file containing the private master ed25519 key of the onion service.
&gt; 
&gt;    If offline keys are _enabled_, then this file doesn't exist and instead a
&gt;    directory is made containing blinded keys for every day [TODO: The directory
&gt;    format here will be specified in the future].

Ok small modification here. Tor has an API to load/generate ed25519 keys that
uses standard suffix for the keys. Basically, we can use any filename we want
but the secret and public key will be suffixed with "_public_key" and
"_secret_key".

Thus, I'll make a slight change to the proposal for the key files:

    "hs_ed25519_public_key"
    "hs_ed25519_secret_key"

The public key is added because for the offline key case.

Note that currently a relay secret key file is: "ed25519_master_id_secret_key"
so we added the "hs_" part to make it obvious for instance when an operator is
backing up keys that those are for HS.

Furthermore, those are the only keys that will touch the disk (except for
blinded keys in case of offline keys but not implemented yet) thus they are
obviously the "master id" key of the HS.

Thanks!
David

&gt; 
&gt; - "./client_authorized_pubkeys"   [FILE]
&gt; 
&gt;   If client authorization is _enabled_, this is a newline-separated file of
&gt;   "&lt;client name&gt; &lt;pubkey&gt;" entries for authorized clients. You can think of it
&gt;   as the ~/.ssh/authorized_keys of onion services.
&gt; 
&gt; - "./client_authorized_privkeys/"          [DIRECTORY]
&gt;   "./client_authorized_privkeys/alice"     [FILE] 
&gt;   "./client_authorized_privkeys/bob"       [FILE]
&gt;   "./client_authorized_privkeys/charlie"   [FILE]
&gt;   
&gt;   If client authorization is _enabled_ _AND_ if the hidden service is
&gt;   responsible for generating and distributing private keys for its clients,
&gt;   then this directory contains files with client's private keys. The idea is
&gt;   that these files can be shredded and deleted after the private key has been
&gt;   passed to the client. For more context here, please read the client
&gt;   authorization thread in [tor-dev] and see 'Appendix F' of prop224 for more
&gt;   details on how this works.
&gt; 
&gt; So this is it. The above should handle most uses of onion services + client
&gt; authorization. The directory format of offline keys will be specified as we
&gt; move forward with implementation. 
&gt; 
&gt; Hope things here are not too controversial. Looking forward to your feedback.
&gt; 
&gt; In a few days, I will add a small Appendix section to prop224 with the
&gt; above, and also fix the parts of 'Appendix F' that got outdated since then.
&gt; 
&gt; Cheers!
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
7ubUkzha3XBwjjDlr6nT01SbL9JGW7YactfQDuqq6yw=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170201095100</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-02-01 09:51:00-0400</timestampReceived><subject>Re: [tor-dev] how to enable IPv6 exiting - aka "how to get p6 lines into your microdescriptors"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; tldr; How do you enable IPv6 exiting in torrc?
&gt; 
&gt; the following torrc part is apparently _not_ enough:
&gt; 
&gt; IPv6Exit 1
&gt; ExitRelay 1
&gt; ExitPolicy reject *:25
&gt; ExitPolicy accept *:*
&gt; ExitPolicy reject6 *:25, accept6 *:*    # AFAIU from the tor man page
&gt; this line is redundant

ftr:

The bug is about to get fixed:
https://trac.torproject.org/projects/tor/ticket/21357#comment:8


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170203161200</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-02-03 16:12:00-0400</timestampReceived><subject>[tor-dev] generate relay fingerprint without tor given the datadir/keys folder?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

given the files within the datadir/keys folder (without the
datadir/fingerprint file), is there an easy way to generate the relay
fingerprint? (using openssl?)

According to the spec [1] the fingerprint is the SHA1 hash of the public
key. (I assume RSA pubkey)
According to the tor man page [2] the RSA public key should be in
keys/secret_id_key.

openssl rsa -in secret_id_key -pubout| ..? |sha1sum

thanks,
nusenu


[1]
&gt;     "fingerprint" fingerprint NL
&gt; 
&gt;        [At most once]
&gt; 
&gt;        A fingerprint (a HASH_LEN-byte of asn1 encoded public key, encoded in
&gt;        hex, with a single space after every 4 characters) for this router's
&gt;        identity key. A descriptor is considered invalid (and MUST be
&gt;        rejected) if the fingerprint line does not match the public key.


[2]
&gt;        DataDirectory/keys/secret_id_key
&gt;            A relay's RSA1024 permanent identity key, including private and
&gt;            public components. Used to sign router descriptors, and to sign
&gt;            other keys.



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170212144532</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-02-12 14:45:32-0400</timestampReceived><subject>[tor-dev] Issue regarding IRC channel</subject><body>

Hi,

As of writing this mail, I can't access the Tor-Dev channel on OFTC
neither using my registered nick on desktop client nor through the web
interface. Looks like the channel has turned invite only. Would be great
if someone could look into this.

Regards,
Jaskaran Veer Singh
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170213203746</emailId><senderName>Marcin Czarnecki</senderName><senderEmail>marnczarnecki@gmail.com</senderEmail><timestampReceived>2017-02-13 20:37:46-0400</timestampReceived><subject>[tor-dev] GSoC 2017 - my name is Marcin</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

tl;dr can go on about Tor and anonymity and privacy related things for hours,
give me a chance

I am studying Computer Science at the University of Brighton (in the UK). I
am interested in participating in Google Summer of Code 2017 with the Tor
project. I am a web security and anonymity enthusiast, tried to work with
the Tor Project for GSoC 2016 but it did not work out.

I have not contributed to the Tor's code base but have been an active, semi
advanced user for past 3 years. Have been experimented with setting up
exit-nodes (ended up with my box being considered the #1 most evil machine
in the world :)), creating Tor-clearnet gateways, hosting own HS, trying to
exploit other HSes, playing with encryption etc. I think that gave a me a
lot of insight of how Tor works (still amazed and finding new things when
reading docs).

I am planning to base my proposal on the idea on a easier way of hosting HS
so it would become more accessible to non tech savvy Tor users plus
enforcing good security practices when hosting a HS (got some experience
and cool ideas [citation needed]).

My main skills are in Linux and back-end web development but I am also
interested in scripting and automation as well as encryption. Can talk
about Bitcoin for hours (security, anonymity, etc.), thinking about using
that as my other project proposal as this should be the currency of Tor and
more integrated into Tor (Tor Browser extension?). When it comes to
programming I feel confident with PHP, Python and HTML, CSS, JS stuff, and
know a bit of other languages but I am a fast learner!

When it comes to tor related projects, two years ago I did this small
crawler with web interface for searching (#2 most evil machine) in Python:
https://github.com/marncz/torcrawler

Cool feature on which I stopped working was HTTP headers fingerprinting
which could led to grouping Hidden Services by hosts providers.

Feel free to contact me:
email: marnczarnecki[at]gmail.com
IRC at OFTC: marncz

Many thanks,
Marcin

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span style="font-size:12.8px"&gt;Hello all,&lt;/span&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;tl;dr can go on \
about Tor and anonymity and privacy related things f&lt;span style="font-size:12.8px"&gt;or \
hours&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;, give me a chance&lt;/span&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;I am studying Computer \
Science at the University of Brighton (in the UK). I am interested in participating \
in Google Summer of Code 2017 with the Tor project. I am a web security and anonymity \
enthusiast, tried to work with the Tor Project for GSoC 2016 but it did not work \
out.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;I have not contributed to the Tor's code base but have \
been an active, semi advanced user for past 3 years. Have been experimented with \
setting up exit-nodes (ended up with my box being considered the #1 most evil machine \
in the world :)), creating Tor-clearnet gateways, hosting own HS, trying to exploit \
other HSes, playing with encryption etc. I think that gave a me a lot of insight of \
how Tor works (still amazed and finding new things when reading docs).&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;I am planning to \
base my proposal on the idea on a easier way of hosting HS so it would become more \
accessible to non tech savvy Tor users plus enforcing good security practices when \
hosting a HS (got some experience and cool ideas [citation needed]).&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;My main skills are \
in Linux and back-end web development but I am also interested in scripting and \
automation as well as encryption. Can talk about Bitcoin for hours (security, \
anonymity, etc.), thinking about using that as my other project proposal as this \
should be the currency of Tor and more integrated into Tor (Tor Browser extension?). \
When it comes to programming I feel confident with PHP, Python and HTML, CSS, JS \
stuff, and know a bit of other languages but I am a fast learner!&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;When it comes to tor related \
projects, two years ago I did this small crawler with web interface for searching (#2 \
most evil machine) in Python:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;&lt;a \
href="https://github.com/marncz/torcrawler"&gt;https://github.com/marncz/torcrawler&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Cool feature \
on which I stopped working was HTTP headers fingerprinting which could led to \
grouping Hidden Services by hosts providers.&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;Feel free to contact \
me:&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;email: marnczarnecki[at]&lt;a \
href="http://gmail.com"&gt;gmail.com&lt;/a&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;IRC at OFTC: \
marncz  &lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;Many thanks,&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;Marcin&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170216000222</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-02-16 00:02:22-0400</timestampReceived><subject>[tor-dev] Prop224 oppurtunity: keygen, crypt, sign, encoding tools</subject><body>

Tor could ship with a tool to offline generate all the
various keys, encrypt and sign with them, for debug, test, and
use with other apps that tie to tor.
And a tool to translate strings between different encodings in use.
Or at least provide howto and links in the docs to third party tools
that users could use for key ops and translation.
Since those howto topics appear on the lists now and then.
We here might code up openssl, python functions, etc on the fly.
However beginning users are typically looking for simple purpose
dedicated tools, or example docs using prebuilt tools off the net.
This tends to apply to budding application development in onionland,
developing things that look at and use tor, etc.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170217234034</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-02-17 23:40:34-0400</timestampReceived><subject>[tor-dev] Tor Browser and Mozilla addon verification</subject><body>

Hi, does Tor Browser check addon code for tampering for addons from the 
Mozilla server?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170219060101</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-02-19 06:01:01-0400</timestampReceived><subject>[tor-dev] Netflow padding</subject><body>

Are these the current / recommended paper refs for
eyeballing things on this to date?

torspec/proposals/251-netflow-padding.txt
torspec/proposals/254-padding-negotiation.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170222144856</emailId><senderName>"Fabio Pietrosanti (naif) - lists"</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2017-02-22 14:48:56-0400</timestampReceived><subject>[tor-dev] List of Tor Exit IP address: Is this available from Tor Control Port</subject><body>

Hi all,

is the list of Tor Exit IP addresses available from Tor Control Port or
only from https://check.torproject.org/exit-addresses via TorDNSEL ?

-naif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170218084940</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-02-18 08:49:40-0400</timestampReceived><subject>[tor-dev] Proposing "Post-Quantum safe handshake implementation" as GSoc Project</subject><body>

Hi,

My name is Jaskaran, and I'm an Electronics Engineering undergrad in
India. I'm a privacy, anonymity and FOSS supporter. I've worked in the
past with the Libreoffice project during the Google Summer of Code 2016.
This year I'm interested to work with the TOR project as a part of GSoC.

I'm particularly interested to work on making TOR Handshakes
Post-Quantum Safe. I feel that this should be implemented at the
earliest because adversaries could store the network traffic and decrypt
it later on using Quantum Computers when they're invented.

So here's what I think the task would comprise of :

1. Add a new CREATE2V and CREATED2V cell that can support 2240 bytes of
HDATA (according to NewHope-Simple algorithm[1]). Add facility for
multiple EXTEND2/EXTENDED2 cells to be sent when the handshake data
doesn't fit into a single cell.

2. Implement the NewHope-Simple algorithm[1] because we'll not be able
to use the Vanilla NewHope as it is protected by some patents. I wasn't
able to find any implementation of NewHope Simple. So can the Vanilla
NewHope Implementation be tweaked to convert it into NewHope Simple? Or
would we have to write it from ground up? I don't know about the patent
laws regarding it.

3. Finally, generate test vectors and check for any bottlenecks. Improve
efficiency and check for any vulnerabilities in the implementation that
could be exploited by the adversary.

I'd like to know your views on this. Suggestions, comments, criticism
are all welcome.

References

[1] https://eprint.iacr.org/2016/1157.pdf

PS: There's Something I noticed while reading the proposal. The portions
don't add up to the size of the cell. Here's aSigned fix for it.

commit a55692fcd93e3f064f1fffe24796dc747e4870e1
Author: Jaskaran Singh &lt;jvsg1303@gmail.com&gt;
Date:   Sat Feb 18 13:32:32 2017 +0530

    Fix HDATA sizes in proposal 270

diff --git a/proposals/270-newhope-hybrid-handshake.txt
b/proposals/270-newhope-hybrid-handshake.txt
index ccf3390..c0f36ae 100644
--- a/proposals/270-newhope-hybrid-handshake.txt
+++ b/proposals/270-newhope-hybrid-handshake.txt
@@ -432,7 +432,7 @@ Depends: prop#220 prop#249 prop#264 prop#270
       HTYPE   := 0x0003                                     [2 bytes]
       HLEN    := 0x0780                                     [2 bytes]
       HDATA   := CLIENT_HDATA                               [1920 bytes]
-      IGNORED := 0x00                                       [194 bytes]
+      IGNORED := 0x00                                       [190 bytes]
     }

   [XXX do we really want to pad with IGNORED to make CLIENT_HDATA the
@@ -485,7 +485,7 @@ Depends: prop#220 prop#249 prop#264 prop#270
       NSPEC := 0x00                                       [1 byte]
       HTYPE := 0xFFFF                                     [2 bytes]
       HLEN  := 0x0000                                     [2 bytes]
-      HDATA := 0x00[172]                                  [172 bytes]
+      HDATA := 0x00[172]                                  [174 bytes]
     }

   The client sends this to the server to extend the circuit from, and that
@@ -525,7 +525,7 @@ Depends: prop#220 prop#249 prop#264 prop#270
       NSPEC := 0x00                                       [1 byte]
       HTYPE := 0xFFFF                                     [2 bytes]
       HLEN  := 0x0000                                     [2 bytes]
-      HDATA := SERVER_HDATA[1940,2112]                    [172 bytes]
+      HDATA := SERVER_HDATA[1940,2112]                    [174 bytes]
     }

Regards,
Jaskaran


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170224162526</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-02-24 16:25:26-0400</timestampReceived><subject>[tor-dev] Proposal 275: Stop including meaningful "published" time in microdescriptor consensus</subject><body>

Filename: 275-md-published-time-is-silly.txt
Title: Stop including meaningful "published" time in microdescriptor consensus
Author: Nick Mathewson
Created: 20-Feb-2017
Status: Open
Target: 0.3.1.x-alpha

1. Overview

   This document proposes that, in order to limit the bandwidth needed
   for networkstatus diffs, we remove "published" part of the "r" lines
   in microdescriptor consensuses.

   The more extreme, compatibility-breaking version of this idea will
   reduce ed consensus diff download volume by approximately 55-75%.  A
   less-extreme interim version would still reduce volume by
   approximately 5-6%.

2. Motivation

   The current microdescriptor consensus "r" line format is:
     r Nickname Identity Published IP ORPort DirPort
   as in:
     r moria1 lpXfw1/+uGEym58asExGOXAgzjE 2017-01-10 07:59:25 \
        128.31.0.34 9101 9131

   As I'll show below, there's not much use for the "Published" part
   of these lines.  By omitting them or replacing them with
   something more compressible, we can save space.

   What's more, changes in the Published field are one of the most
   frequent changes between successive networkstatus consensus
   documents.  If we were to remove this field, then networkstatus diffs
   (see proposal 140) would be smaller.

3. Compatibility notes

   Above I've talked about "removing" the published field.  But of
   course, doing this would make all existing consensus consumers
   stop parsing the consensus successfully.

   Instead, let's look at how this field is used currently in Tor,
   and see if we can replace the value with something else.

      * Published is used in the voting process to decide which
        descriptor should be considered.  But that is takend from
        vote networkstatus documents, not consensuses.

      * Published is used in mark_my_descriptor_dirty_if_too_old()
        to decide whether to upload a new router descriptor.  If the
        published time in the consensus is more than 18 hours in the
        past, we upload a new descriptor.  (Relays are potentially
        looking at the microdesc consensus now, since #6769 was
        merged in 0.3.0.1-alpha.)  Relays have plenty of other ways
        to notice that they should upload new descriptors.

      * Published is used in client_would_use_router() to decide
        whether a routerstatus is one that we might possibly use.
        We say that a routerstatus is not usable if its published
        time is more than OLD_ROUTER_DESC_MAX_AGE (5 days) in the
        past, or if it is not at least
        TestingEstimatedDescriptorPropagationTime (10 minutes) in
        the future. [***] Note that this is the only case where anything
        is rejected because it comes from the future.

          * client_would_use_router() decides whether we should
            download a router descriptor (not a microdescriptor)
            in routerlist.c

          * client_would_use_router() is used from
            count_usable_descriptors() to decide which relays are
            potentially usable, thereby forming the denominator of
            our "have descriptors / usable relays" fraction.

   So we have a fairly limited constraints on which Published values
   we can safely advertize with today's Tor implementations.  If we
   advertise anything more than 10 minutes in the future,
   client_would_use_router() will consider routerstatuses unusable.
   If we advertize anything more than 18 hours in the past, relays
   will upload their descriptors far too often.

4. Proposal

   Immediately, in 0.2.9.x-stable (our LTS release series), we
   should stop caring about published_on dates in the future.  This
   is a two-line change.

   As an interim solution: We should add a new consensus method number
   that changes the process by which Published fields in consensuses are
   generated.  It should set all all Published fields in the consensus
   should be the same value.  These fields should be taken to rotate
   every 15 hours, by taking consensus valid-after time, and rounding
   down to the nearest multiple of 15 hours since the epoch.

   As a longer-term solution: Once all Tor versions earlier than 0.2.9.x
   are obsolete (in mid 2018), we can update with a new consensus
   method, and set the published_on date to some safe time in the
   future.

5. Analysis

   To consider the impact on consensus diffs: I analyzed consensus
   changes over the month of January 2017, using scripts at [1].

   With the interim solution in place, compressed diff sizes fell by
   2-7% at all measured intervals except 12 hours, where they increased
   by about 4%.  Savings of 5-6% were most typical.

   With the longer-term solution in place, and all published times held
   constant permanently, the compressed diff sizes were uniformly at
   least 56% smaller.

   With this in mind, I think we might want to only plan to support the
   longer-term solution.

    [1] https://github.com/nmathewson/consensus-diff-analysis
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170226111750</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-26 11:17:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal 275: Stop including meaningful "published" time in microdescriptor consensus</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Feb 2017, at 03:25, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 275-md-published-time-is-silly.txt
&gt; Title: Stop including meaningful "published" time in microdescriptor consensus
&gt; Author: Nick Mathewson
&gt; Created: 20-Feb-2017
&gt; Status: Open
&gt; Target: 0.3.1.x-alpha
&gt; 
&gt; ...
&gt; 
&gt; 4. Proposal
&gt; 
&gt; ...
&gt; 
&gt;   As an interim solution: We should add a new consensus method number
&gt;   that changes the process by which Published fields in consensuses are
&gt;   generated.  It should set all all Published fields in the consensus
&gt;   should be the same value.  These fields should be taken to rotate
&gt;   every 15 hours, by taking consensus valid-after time, and rounding
&gt;   down to the nearest multiple of 15 hours since the epoch.

I wonder what this does to relays that have a broken clock.
Is there any particular reason you chose 15 hours, rather than, say,
18 hours (the interval at which relays re-post descriptors), or 12 hours
(the re-post interval - the consensus lifetime - 3 hours skew allowance)

&gt; 5. Analysis
&gt; 
&gt;   ...
&gt; 
&gt;   With the longer-term solution in place, and all published times held
&gt;   constant permanently, the compressed diff sizes were uniformly at
&gt;   least 56% smaller.
&gt; 
&gt;   With this in mind, I think we might want to only plan to support the
&gt;   longer-term solution.

Do you mean "only implement" the longer-term solution?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYsrleAAoJEEUMun+WjwlLLHkP/jYk760lPQsujnHzN1J7LLl4
UifKq/BmKbSXdQ1B4RkC0FvZ+K03P0qmAi+h5c7/+eA34SkNByi+5h1URGbQGET8
kRP5rXvW1Eg95UmYzdAk3Osnjhcshk8Jv42UUzHuYLE71NatIGaFlP0DUm0kisNC
YKcDv78fvqJoYoFyzBG58mRqSf4BpCxconxScvbYsb3a8iD+A1KpWe9zTMclE3GL
hwgAEH1CSfPlvF5rBiJ8qYr5HswidicL8oxJpeO/+55dHCQCBwuHLe6EMNCoqBUO
gY8bZBVUFr9KB2aROKB+ztpGF70P1tg28YHdPTQ4wOhbQcKgaVHCrWQNhXxomk20
vHd9sRDEFiXgLFqN6vDytxJURDKa6HUcw/dtC6LHR0gv4Y3n4KOLbwce0hb4X9/J
OkE2bmjPXAdJ2v1vnvFJm5pHyfSsdjc72T6cmky4PaJ5ccDe2wTHPG6HhNbulStE
GarSdhlJKwFfTM/g7rKAjjs01fsmy4KGYGxPYYdGtgOxiqDL62BEXH/xxol03y68
2beaRg4eWe3wY8QyFxPvUzK/MNbmuYNyPHsH2VdFov5kbOW9cmvj4InCyN2rIjpm
hDztPmIplDY79TLoxi6Wkjw7xXRR8zYB3z5vMBLm94Ll2rmeQ7MdJaR/lWkGENZL
N8JBFmXOax4KfPj1yyrx
=s2sr
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170224162451</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-02-24 16:24:51-0400</timestampReceived><subject>[tor-dev] Proposal 274: Rotate onion keys less frequently</subject><body>

Filename: 274-rotate-onion-keys-less.txt
Title: Rotate onion keys less frequently.
Author: Nick Mathewson
Created: 20-Feb-2017
Status: Open
Target: 0.3.1.x-alpha

1. Overview

   This document proposes that, in order to limit the bandwidth needed
   for microdescriptor listing and transmission, we reduce the onion key
   rotation rate from the current value (7 days) to something closer to
   28 days.

   Doing this will reduce the total microdescriptor download volume
   by approximately 70%.

2. Motivation

   Currently, clients must download a networkstatus consensus document
   once an hour, and must download every unfamiliar microdescriptor
   listed in that document.  Therefore, we can reduce client directory
   bandwidth if we can cause microdescriptors to change less often.

   Furthermore, we are planning (in proposal 140) to implement a
   diff-based mechanism for clients to download only the parts of each
   consensus that have changed.  If we do that, then by having the
   microdescriptor for each router change less often, we can make these
   consensus diffs smaller as well.

3. Analysis

   I analyzed microdescriptor changes over the month of January
   2017, and found that 94.5% of all microdescriptor transitions
   were changes in onion key alone.

   Therefore, we could reduce the number of changed "m" lines in
   consensus diffs by approximately 94.5% * (3/4) =~ 70%,
   if we were to rotate onion keys one-fourth as often.

   The number of microdescriptors to actually download should
   decrease by a similar number.

   This amount to a significant reduction: currently, by
   back-of-the-envelope estimates, an always-on client that downloads
   all the directory info in a month downloads about 449MB of compressed
   consensuses and something around 97 MB of compressed
   microdescriptors.  This proposal would save that user about 12% of
   their total directory bandwidth.

   If we assume that consensus diffs are implemented (see proposal 140),
   then the user's compressed consensus downloads fall to something
   closer to 27 MB.  Under that analysis, the microdescriptors will
   dominate again at 97 MB -- so lowering the number of microdescriptors
   to fetch would save more like 55% of the remaining bandwidth.

   [Back-of-the-envelope technique: assume every consensus is
   downloaded, and every microdesc is downloaded, and microdescs are
   downloaded in groups of 61, which works out to a constant rate.]

   We'll need to do more analysis to assess the impact on clients that
   connect to the network infrequently enough to miss microdescriptors:
   nonetheless, the 70% figure above ought to apply to clients that connect
   at least weekly.

   (XXXX Better results pending feedback from ahf's analysis.)

4. Security analysis

   The onion key is used to authenticate a relay to a client when the
   client is building a circuit through that relay.  The only reason to
   limit their lifetime is to limit the impact if an attacker steals an
   onion key without being detected.

   If an attacker steals an onion key and is detected, the relay can
   issue a new onion key ahead of schedule, with little disruption.

   But if the onion key theft is _not_ detected, then the attacker
   can use that onion key to impersonate the relay until clients
   start using the relay's next key.  In order to do so, the
   attacker must also impersonate the target relay at the link
   layer: either by stealing the relay's link keys, which rotate
   more frequently, or by compromising the previous relay in the
   circuit.

   Therefore, onion key rotation provides a small amount of
   protection only against an attacker who can compromise relay keys
   very intermittently, and who controls only a small portion of the
   network.  Against an attacker who can steal keys regularly it
   does little, and an attacker who controls a lot of the network
   can already mount other attacks.

5. Proposal

   I propose that we move the default onion key rotation interval
   from 7 days to 28 days, as follows.

   There should be a new consensus parameter, "onion-key-rotation-days",
   measuring the key lifetime in days.  Its minimum should be 1, its
   maximum should be 90, and its default should be 28.

   There should also be a new consensus parameter,
   "onion-key-grace-period-days", measuring the interval for which
   older onion keys should still be accepted.  Its minimum should be
   1, its maximum should be onion-key-rotation-days, and its default
   should be 7.

   Every relay should list each onion key it generates for
   onion-key-rotation-days days after generating it, and then
   replace it.  Relays should continue to accept their most recent
   previous onion key for an additional onion-key-rotation-days days
   after it is replaced.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170228151609</emailId><senderName>Berenike Grace</senderName><senderEmail>veronicaminati33@gmail.com</senderEmail><timestampReceived>2017-02-28 15:16:09-0400</timestampReceived><subject>[tor-dev] I would like collaborate with you</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

I'm Veronica Minati, an Italian student of Computer Science at the
UniversitÃ  degli studi di Udine. I've a bachelor degree and now I'm at the
last year of the Master degree.

Some teachers and colleagues suggested me to partecipate at an opensource
project, to challenge myself and learn more.

I'm interested in cyber security and cryptography and I dream that one day
I will work in this area. I'm studying your projects and I would like to
cooperate with you, for the GSoC and I hope that I will be able to continue
the work in the future.

I'm sure that this experience will grow my background. I'm skilled in Java
programming but I've studied also other programming languages.

I would like to offer to collaborate at the Onionoo project with karsten
and iwakeh, May I ask you how can I be helpful? What knowledge should I
have to work on that project?

Thank you so much!


Veronica Minati.



Ps: In the meantime I will follow you in the IRC channel, my nickname is
versa!

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;p style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69)"&gt;Hi,&lt;br&gt;&lt;/p&gt; &lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69)"&gt;I'm Veronica Minati, an Italian student of Computer \
Science at the UniversitÃ  degli studi di Udine. I've a bachelor degree and now \
I'm at the last year of the Master degree.&lt;/p&gt; &lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;Some teachers and colleagues suggested \
me to partecipate at an opensource project, to challenge myself and learn more.&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;I'm interested in cyber security \
and cryptography and I dream that one day I will work in this area. I'm studying \
your projects and I would like to cooperate with you, for the GSoC and I hope that I \
will be able to continue the work in the future.&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;I'm sure that this experience will \
grow my background. I'm skilled in Java programming but I've studied also \
other programming languages.  &lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;I would like to offer to collaborate \
at the Onionoo project with karsten and iwakeh, May I ask you how can I be helpful? \
What knowledge should I have to work on that project?&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;Thank you so much!&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;&lt;br&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;Veronica Minati.&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;&lt;br&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;&lt;br&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;Ps: In the meantime I will follow you \
in the IRC channel, my nickname is versa!&lt;/p&gt;&lt;p \
style="margin:0px;font-size:12px;line-height:normal;font-family:'helvetica \
neue';color:rgb(69,69,69);min-height:14px"&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170228153240</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-02-28 15:32:40-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 4.0-1.2.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Another release of Onionoo is available:

     https://dist.torproject.org/onionoo-4.0-1.2.0/

The protocol version increased to 4.0, because Onionoo now
accepts searches for IPv6 addresses even without leading or
enclosing square brackets.

Onionoo's web-page (as well as JavaDoc) is now adapted to the new
style of Tor Metrics [0].
Take a look at new version on one of Onionoo's mirrors [1] or [2].

Please direct comments and questions to the metrics-team mailing list [4].

Cheers,
iwakeh

[0] https://metrics.torproject.org
[1] https://onionoo.torproject.org
[2] https://onionoo.thecthulhu.com
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYtZgQAAoJEPeEx9Sa/gviD2oQAMdFYbAU0aIljrTfKUB9yNZX
qLc9AtjmSL9F6sgrAGGqwokFtw+LtdoxkCwyRvIA6xSPxFqkR31ZIoMxj+E1hwXU
hRp3GQcL9uWhImC2ZK3+pllMUpuF4BAzz1lq2AWlQGq4WCO9E8ER+FTLw5XDwZV/
dTHsh+3gyD4WIZdVCSb27hgmS7YqylTZys+UhRM/ouxl8b4CenMCAYNQ25e1/XNH
Rf2C/LOa6UEfd+/wOJ+C/br4cR1aLBysC8XUvgfUm+f6hA2jPDAGUTBJvqK3IPVB
d/UfFkWeq+FZZfN/rQ0ms8vQ9snJLJAH7RQsCc7ZrnbYUjaxC6/qLnYLfD5BdNNb
pXzIDNHM5ZLKMj1EgdKBa0kfbMobj1d1/2kHT0J60jefiwPov408oSyHmezjft2o
O0cpjwhy2LMbTgyTARSQSmpQjO7+7N6ofWxT6ZrN+9UCr54mQ9GRDUCyex7Wz6ri
CwQA3D18pU8ig8JDpfQjGSmmqDjkl8Ph6bfyu/CksK9up8Euv1KdDiLWD7XYQaGl
NBXLGzKUGRxi1J+ed81NTdccoUOgA5+LavSp0ByRM3h/cFW7Ns9VHFydlgdNKPIg
gsJQ1Sg/ayVBwEN7nEL55Ul4QQzAC+REHQE+2ct2lJoNvL/y6Wgh4k/xDlPdRNrQ
vjVWNCPGVTFKZXXBibYN
=BVbr
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170224162550</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-02-24 16:25:50-0400</timestampReceived><subject>[tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

Filename: 276-lower-bw-granularity.txt
Title: Report bandwidth with lower granularity in consensus documents
Author: Nick Mathewson
Created: 20-Feb-2017
Status: Open
Target: 0.3.1.x-alpha

1. Overview

   This document proposes that, in order to limit the bandwidth needed for
   networkstatus diffs, we lower the granularity with which bandwidth is
   reported in consensus documents.

   Making this change will reduce the total compressed ed diff download
   volume by around 10%.

2. Motivation

   Consensus documents currently report bandwidth values as the median
   of the measured bandwidth values in the votes.  (Or as the median of
   all votes' values if there are not enough measurements.)  And when
   voting, in turn, authorities simply report whatever measured value
   they most recently encountered, clipped to 3 significant base-10
   figures.

   This means that, from one consensus to the next, these weights very
   often and with little significance:  A large fraction of bandwidth
   transitions are under 2% in magnitude.

   As we begin to use consensus diffs, each change will take space to
   transmit.  So lowering the amount of changes will lower client
   bandwidth requirements significantly.

3. Proposal

   I propose that we round the bandwidth values as they are placed in
   the votes to two no more than significant digits.  In addition, for
   values beginning with decimal "2" through "4", we should round the
   first two digits the nearest multiple of 2.  For values beginning
   with decimal "5" though "9", we should round to the nearest multiple
   of 5.

   This change does not require a consensus method; it will take effect
   once enough authorities have upgraded.

4. Analysis

   The rounding proposed above will not round any value by more than
   5%, so the overall impact on bandwidth balancing should be small.

   In order to assess the bandwidth savings of this approach, I
   smoothed the January 2017 consensus documents' Bandwidth fields,
   using scripts from [1].  I found that if clients download
   consensus diffs once an hour, they can expect 11-13% mean savings
   after xz or gz compression.  For two-hour intervals, the savings
   is 8-10%; for three-hour or four-hour intervals, the savings only
   is 6-8%.  After that point, we start seeing diminishing returns,
   with only 1-2% savings on a 72-hour interval's diff.

    [1] https://github.com/nmathewson/consensus-diff-analysis

5. Open questions:

   Is there a greedier smoothing algorithm that would produce better
   results?

   Is there any reason to think this amount of smoothing would not
   be save?

   Would a time-aware smoothing mechanism work better?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170228172208</emailId><senderName>Siddharth Bhayana</senderName><senderEmail>siddharthbhayana@gmail.com</senderEmail><timestampReceived>2017-02-28 17:22:08-0400</timestampReceived><subject>[tor-dev] Unable to Join the IRC Channel #tor.</subject><body>

[Attachment #2 (multipart/alternative)]


It's my first time entering an IRC channel and after having read the
documentation for ChatZilla, I'm still unable to find my way. These are the
steps I've been following:
1) Open ChatZilla extension on Firefox.
2) Click on IRC -&gt; Join Channel.
3) The two fields that appear are - Network and Channel. From this point
on, I have no idea as to how to proceed.

Any help would be appreciated.

-- 





Thanks and regards
Siddharth Bhayana

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;It's my first time entering an IRC channel and after having read \
the documentation for ChatZilla, I'm still unable to find my way. These are the \
steps I've been following:&lt;br&gt;1) Open ChatZilla extension on Firefox.&lt;br&gt;2) Click \
on IRC -&gt; Join Channel.&lt;br&gt;3) The two fields that appear are - Network and \
Channel. From this point on, I have no idea as to how to proceed.&lt;br&gt;&lt;br&gt;Any help \
would be appreciated.&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Thanks and regards&lt;br&gt;Siddharth Bhayana&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170226121545</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-26 12:15:45-0400</timestampReceived><subject>Re: [tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Feb 2017, at 03:25, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 276-lower-bw-granularity.txt
&gt; Title: Report bandwidth with lower granularity in consensus documents
&gt; Author: Nick Mathewson
&gt; Created: 20-Feb-2017
&gt; Status: Open
&gt; Target: 0.3.1.x-alpha
&gt; 
&gt; 1. Overview
&gt; 
&gt;   This document proposes that, in order to limit the bandwidth needed for
&gt;   networkstatus diffs, we lower the granularity with which bandwidth is
&gt;   reported in consensus documents.
&gt; ...
&gt; 3. Proposal
&gt; 
&gt;   I propose that we round the bandwidth values as they are placed in
&gt;   the votes to two no more than significant digits.

Misordered sentence this is

&gt;  In addition, for
&gt;   values beginning with decimal "2" through "4", we should round the
&gt;   first two digits the nearest multiple of 2.  For values beginning
&gt;   with decimal "5" though "9", we should round to the nearest multiple
&gt;   of 5.

Value  Rounding       Percentage Distinct Values
0-9    0              0%         10
10-20  0.5/10-0.5/20  5%-2.5%    10
20-50  1/20-1/50      5%-2%      15
50-100 2.5/50-2.5/100 5%-2.5%    10
(repeat the pattern for 100-200 etc.)
(lower bounds are inclusive, upper bounds are exclusive)

This reduces each set of 1000 3 significant figure bandwidths to
35 distinct values.

It's worth noting that the existing bandwidth authority scripts round to
3 significant figures, so the overall rounding is up to 5.5%.

&gt;   This change does not require a consensus method; it will take effect
&gt;   once enough authorities have upgraded.

The change will take effect progressively as authorities upgrade: since
the median value is used, when one authority upgrades, 1/5 of the
bandwidths will be rounded (on average).

Once all authorities upgrade, all bandwidths will be rounded like this.

&gt; 4. Analysis
&gt; 
&gt;   The rounding proposed above will not round any value by more than
&gt;   5%, so the overall impact on bandwidth balancing should be small.

5% *more* than the existing rounding.

&gt; ...
&gt; 
&gt; 5. Open questions:
&gt; 
&gt;   Is there a greedier smoothing algorithm that would produce better
&gt;   results?

Rounding to one significant digit changes 10 by up to 50%, so that's
clearly unacceptable.

If we wanted 12.5% to be the maximum change, we could round
approximately double (with some adjustments for scale).

For values beginning with decimal "1", we should round the first two
digits the nearest multiple of 2. For values beginning with decimal "2"
through "4", we should round the first two digits the nearest multiple
of 5.  For values beginning with decimal "5" though "9", we should
round to one significant digit.

Value  Rounding       Percentage Distinct Values
0-9    0              0%         10
10-20  1/10-1/20      10%-5%     5
20-50  2.5/20-2.5/50  12.5%-4%   6
50-100 5/50-5/100     10%-5%     5
(repeat the pattern for 100-200 etc.)
(lower bounds are inclusive, upper bounds are exclusive)

This reduces each set of 1000 3 significant figure bandwidths to
16 distinct values.

Would a scheme like this reduce the diffs by enough to make it
worthwhile?

&gt;   Is there any reason to think this amount of smoothing would not
&gt;   be save?

s/save/safe/

Given the existing variance is around 2%, and the existing rounding of
0.5%, rounding by 5% seems quite sensible.

(Typical variance *between* bandwidth authorities is much more than
this anyway.)

It seems hard to game this scheme, and it would only result in a 5%
boost anyway.

The same arguments apply to rounding by up to 12.5%. Anything more
seems risky.

&gt;   Would a time-aware smoothing mechanism work better?

Perhaps, but the complexity might outweigh the benefits.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYssbxAAoJEEUMun+WjwlLi0wP/3mQ9A6EzIg1Lp2D1z+OqUVG
04ONF6ypGrmUPayOWRZcRYl/dhZb1vispOLE3nIxrshXrI/UZFv7vh/NtMjVETNT
Bn8Iy+vd+fJWAqIbqAMp+CsgcyZrIHJVd12p+uMPbMvyW4bkACLP85x11Ds+Zn16
R61bNwtIzhe9eZfTQRrfHupiW+av59N0X5F6JAH8NUqAeVLXtitW2BqikezMTL9a
e4vD4kWRRw1YeYJUWZHCx0wpQtJCGrwkdSNlte898N8FZ9XArwnF+xz72sTDyrJq
6F8kg39hwu3oYdUSxaHcvH29rEqYZEjwj4QGInGhF06Z5+BTPa1TBJejagpwdvaU
WhPm89nasF0QmbmS1j3tSVtje9onU5Js69/4B6Zo4XLPtNEk4qRabAjjNwB9EtGl
vs0OwyGMehPsjjX4+YjXj4O9vuJfytEIFyGlGo+y8WQHKSBDa6aBuhtvfo6rttEf
q6wmXGCoAMPBato20RSgPuM+OCc8DWXETKiNUCABYg5DQgul2EgiBaeusBHu/yS5
wsYe94qfWsLeJeSAaErSsAeX0sryUtflfFRAJqFrlzDtd/vUmylG3l/LgmCFdrud
aMDC0C8bYoymLAfOd3klRPmRh9oC66lLUCQeiWWOB5xLiESDBvcXXYBnIT71SgB9
IlcrZFdv2edvQelxUScG
=x6oS
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170227003519</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-02-27 00:35:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

On Sun, Feb 26, 2017 at 7:15 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 25 Feb 2017, at 03:25, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Filename: 276-lower-bw-granularity.txt
&gt;&gt; Title: Report bandwidth with lower granularity in consensus documents
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 20-Feb-2017
&gt;&gt; Status: Open
&gt;&gt; Target: 0.3.1.x-alpha
&gt;&gt;
&gt;&gt; 1. Overview
&gt;&gt;
&gt;&gt;   This document proposes that, in order to limit the bandwidth needed for
&gt;&gt;   networkstatus diffs, we lower the granularity with which bandwidth is
&gt;&gt;   reported in consensus documents.
&gt;&gt; ...
&gt;&gt; 3. Proposal
&gt;&gt;
&gt;&gt;   I propose that we round the bandwidth values as they are placed in
&gt;&gt;   the votes to two no more than significant digits.
&gt;
&gt; Misordered sentence this is

Fixed; thanks! ;)

&gt;&gt;  In addition, for
&gt;&gt;   values beginning with decimal "2" through "4", we should round the
&gt;&gt;   first two digits the nearest multiple of 2.  For values beginning
&gt;&gt;   with decimal "5" though "9", we should round to the nearest multiple
&gt;&gt;   of 5.
&gt;
&gt; Value  Rounding       Percentage Distinct Values
&gt; 0-9    0              0%         10
&gt; 10-20  0.5/10-0.5/20  5%-2.5%    10
&gt; 20-50  1/20-1/50      5%-2%      15
&gt; 50-100 2.5/50-2.5/100 5%-2.5%    10
&gt; (repeat the pattern for 100-200 etc.)
&gt; (lower bounds are inclusive, upper bounds are exclusive)
&gt;
&gt; This reduces each set of 1000 3 significant figure bandwidths to
&gt; 35 distinct values.
&gt;
&gt; It's worth noting that the existing bandwidth authority scripts round to
&gt; 3 significant figures, so the overall rounding is up to 5.5%.
&gt;
&gt;&gt;   This change does not require a consensus method; it will take effect
&gt;&gt;   once enough authorities have upgraded.
&gt;
&gt; The change will take effect progressively as authorities upgrade: since
&gt; the median value is used, when one authority upgrades, 1/5 of the
&gt; bandwidths will be rounded (on average).
&gt;
&gt; Once all authorities upgrade, all bandwidths will be rounded like this.

I've used your wording here.

&gt;&gt;   Is there a greedier smoothing algorithm that would produce better
&gt;&gt;   results?
&gt;
&gt; Rounding to one significant digit changes 10 by up to 50%, so that's
&gt; clearly unacceptable.
&gt;
&gt; If we wanted 12.5% to be the maximum change, we could round
&gt; approximately double (with some adjustments for scale).
&gt;
&gt; For values beginning with decimal "1", we should round the first two
&gt; digits the nearest multiple of 2. For values beginning with decimal "2"
&gt; through "4", we should round the first two digits the nearest multiple
&gt; of 5.  For values beginning with decimal "5" though "9", we should
&gt; round to one significant digit.
&gt;
&gt; Value  Rounding       Percentage Distinct Values
&gt; 0-9    0              0%         10
&gt; 10-20  1/10-1/20      10%-5%     5
&gt; 20-50  2.5/20-2.5/50  12.5%-4%   6
&gt; 50-100 5/50-5/100     10%-5%     5
&gt; (repeat the pattern for 100-200 etc.)
&gt; (lower bounds are inclusive, upper bounds are exclusive)
&gt;
&gt; This reduces each set of 1000 3 significant figure bandwidths to
&gt; 16 distinct values.
&gt;
&gt; Would a scheme like this reduce the diffs by enough to make it
&gt; worthwhile?

I simulated this scheme, and it didn't pan out: the average reduction
was less than 2% over the scheme currently in 276.  (That is, if we
were already doing the 276 scheme, this change would save no more than
2%.)

&gt;&gt;   Is there any reason to think this amount of smoothing would not
&gt;&gt;   be save?
&gt;
&gt; s/save/safe/
&gt;
&gt; Given the existing variance is around 2%, and the existing rounding of
&gt; 0.5%, rounding by 5% seems quite sensible.
&gt;
&gt; (Typical variance *between* bandwidth authorities is much more than
&gt; this anyway.)
&gt;
&gt; It seems hard to game this scheme, and it would only result in a 5%
&gt; boost anyway.
&gt;
&gt; The same arguments apply to rounding by up to 12.5%. Anything more
&gt; seems risky.
&gt;
&gt;&gt;   Would a time-aware smoothing mechanism work better?
&gt;
&gt; Perhaps, but the complexity might outweigh the benefits.
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170228114223</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-28 11:42:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; On 27 Feb 2017, at 11:35, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:

&gt;&gt;&gt;  Is there any reason to think this amount of smoothing would not
&gt;&gt;&gt;  be save?
&gt;&gt; ...
&gt;&gt; Given the existing variance is around 2%, and the existing rounding of
&gt;&gt; 0.5%, rounding by 5% seems quite sensible.
&gt;&gt; 
&gt;&gt; (Typical variance *between* bandwidth authorities is much more than
&gt;&gt; this anyway.)

I was wrong: mikeperry raised some serious issues with this scheme.

Issue 1: Increased Inaccuracy

This scheme increases the inaccuracy of the bandwidth authority votes,
compared to the bandwidth measurements. This effect is particularly
pronounced for high-bandwidth relays, because the bandwidths are
distributed according to a power law.

(Mike, feel free to correct me if I've got this wrong.)

For example, the top relay is approximately 1% of the network, or 750
Mbps. The existing variance due to rounding is 0.5% of that, or 4 Mbps.

The variance due to this scheme would be 5.5%, or 41 Mbps.

If the top 10 relays were rounded down, which would happen in
approximately 1 in 2**10 consensuses (once every 6 weeks), this could
distribute ~500 Mbps of client bandwidth to the rest of the relays
arbitrarily and without warning.

This effect gets worse as relay performance increases due to
multithreading or optimisation or processor improvements.

Issue 2: Different Levels of Inaccuracy

As a separate but related issue, rounding to 3 significant digits
means that the error ratio is much higher when those digits are
100..., compared with when those digits are 999...

The maximum error ratios vary by 10x:
100- 101 0.00499
...
999-1000 0.00050

This is an existing bug, and contributes to network instability.
We should fix it anyway, and this is a good opportunity to do so.

&gt;&gt;&gt;  Is there a greedier smoothing algorithm that would produce better
&gt;&gt;&gt;  results?
&gt;&gt; ...

To address issue 1, I suggest that we report higher bandwidths more
accurately, and lower bandwidths less accurately.

Here's a sketch of how that could work:

Top   1%: 3+1 significant digits (900 geometric values per decile)
Next  9%: 2+1 significant digits  (90 geometric values per decile)
Next 90%: 1+1 significant digits   (9 geometric values per decile)
   0-100: set values: 0, 1, 5, 22  (4 geometric values for 4 deciles)
(0-100 is special, because the most common values are 0 and 20.)

To address issue 2, I suggest that we round bandwidths geometrically,
rather than linearly.

Here's a sketch of how that could work when rounding 100-1000 to
2 significant digits:

Normal linear rounding yields 90 values:
100,  110,  120, ... , 980,  990,  1000
Using the linear midpoints (a+b)/2:
   105,  115,    ...    , 985,  995

Geometric rounding yields 90 values (using an extra significant digit):
100,  103,  105, ... , 950,  975,  1000
Using the geometric midpoints sqrt(a*b):
   101,  104,    ...    , 962,  987

The maximum geometric error ratios vary by up to 2x, and that's due to
the rounding to 3 significant digits (otherwise, all the ratios would be
equal):
100- 103 0.01489
...
975-1000 0.01274

But this is much better than linear rounding, where the ratios vary by
up to 10x.

I've attached a script that calculates these geometric series: it's
configured to calculate the 900 values for Top 1% rounding, their
geometric error ratios, and their linear error differences.

(Changing precision to 2+1 and 1+1 gets you the 90 and 9 series,
changing precision to 1, values to 3, and high to 100.0 gets you
the tail-end series.)

This would be relatively easy to implement in C, or it could be
precalculated and stored using ~2 kilobytes (1003 * uint16_t).

And as we're also doing work on compression:

There are also opportunities for table-driven compression: each value
can be specified using 10 bits for the table index, plus a few bits
for the power of 10 of the multiplier:

Top: 750 Mbps * 1024 / 8 = 96000 KBps = 9599 * 10**1 (1 bit)
 1%: 100 Mbps * 1024 / 8 = 12800 KBps =  129 * 10**2 (2 bits)
10%:  25 Mbps * 1024 / 8 =  3200 KBps =   36 * 10**2 (2 bits)
99%:   4 Mbps * 1024 / 8 =   512 KBps =   46 * 10**1 (1 bit)
End:             20 KBps =    20 KBps =   22 * 10**0 (1 bit)

6 extra bits (2 bytes total) would be sufficient to cover a 10,000-fold
increase in maximum individual relay bandwidth (up to 8 Tbps).

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------

["bwmodel.py" (bwmodel.py)]

#!/usr/bin/python

import math

# define error functions and midpoint functions

def error_ratio(mid, minmax):
    '''The ratio between the rounded value and the actual value
       | n / r(n) - 1 | 
    '''
    return abs(minmax / mid - 1.0)

def mid_min_error_ratio(l, h):
    '''Minimise the ratio between the rounded value and the actual value
    '''
    return math.sqrt(l * h)

def error_difference(mid, minmax):
    '''The difference between the rounded value and the actual value
       | n - r(n) |
    '''
    return abs(minmax - mid)

midpoint = mid_min_error_ratio
tests = [error_ratio, error_difference]

# Start with an interval representing the current rounding
# we round to 3 significant figures, but we need an extra digit of precision
# to capture the values around the low end
precision = 3+1
low = math.pow(10.0, precision - 1)
high = low*10.0
values = (high - low) / 10.0
bounds = [low, high]
# Create at least as many values as are in the existing scheme
# (an appropriate midpoint function should be used to choose whether to round
# to the lower or higher value)
scale = (high-low)/values

# increase the values geometrically between low and high
step = math.pow(high/low, 1.0/values)
print step
next = low/scale
bounds = []
while next &lt;= (high/scale + 1):
    bounds.append(next)
    next *= step

# round to the nearest integer
bounds = [int(round(b*scale, 0)) for b in bounds]

# increase the values linerly between low and high
#bounds = range(int(low), int(high)+1)

print len(bounds)
b_prev = None
for b in bounds:
    comparison = "{:.0f}".format(b)
    if b_prev is not None:
        for test in tests:
            comparison += " {:.5f}".format(test(midpoint(b_prev, b), b))
    print comparison
    b_prev = b

# chop off the upper bound: it belongs to the next decile
if bounds[-1] == high:
    del bounds[-1]

print bounds



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYtWIfAAoJEEUMun+WjwlLleQP/iUOeZobpBPQ2Qk1xtuUAKyb
KEXAuIftV8VzhaWBb8q/QT+brdMBKcSNfBIAgINSAAL5fVfRkmrk/9vuPhtqZuKf
cneODALTBpDlGLF2dk4aUupEvWs+ugpSxnywx1h+ef+tp4HSoGdvDUU+qjxKPi8U
7WQegqmMWxmK8vFRYH5YKCojsQ+pbimd7O/Y4kL1VI2CRTLCJLtzK36b4oMDvni1
11AgvD43rkFzEtkrazxNCq+HeIdTvyemeAOby93mZGn41S+dULpvcKOiDHum8Afh
AdM10QgC2JwdqLfOdetB4rjzjeykC/jmyb8lLtQ3xZVJqdpcsCiz1mDrf9WyEgr8
SDQwBDve+QEnC34Ht3nrd1QU/RAL3dQvh8ofM4uetRmDAEM/V6oAM4xyu4n+fsEl
EbsAvgxBFrIAqeS+qL36qy46jgQ8MMz+2gx7C2SYW5HxRJDTix0cAa1/D7Jip7SO
OgRaLaRKhuuRygm+rX+j9aAvgKDetxH88cMTkVDSXxtSn/KTmOjJXSJ18JkYxJqU
xeVYfnHVrJmG09XASxvGJIrjLqUqdaiDw1DKYt4pb1iphwzpLl1xVpcw8mG+xmgY
/Q9SAsP0oGtPajyzHJ9rEuwePeu4msNGRcqjHL70LPeG2IsyOS2klXl9ggGsaEjK
RYvPf9DSsK0fzzX/92r6
=F7dY
-----END PGP SIGNATURE-----

[Attachment #10 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170226110605</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-26 11:06:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: Rotate onion keys less frequently</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Feb 2017, at 03:24, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 274-rotate-onion-keys-less.txt
&gt; Title: Rotate onion keys less frequently.
&gt; Author: Nick Mathewson
&gt; Created: 20-Feb-2017
&gt; Status: Open
&gt; Target: 0.3.1.x-alpha
&gt; 
&gt; 1. Overview
&gt; 
&gt;   This document proposes that, in order to limit the bandwidth needed
&gt;   for microdescriptor listing and transmission, we reduce the onion key
&gt;   rotation rate from the current value (7 days) to something closer to
&gt;   28 days.
&gt; 
&gt;   Doing this will reduce the total microdescriptor download volume
&gt;   by approximately 70%.
&gt; ...

Thanks for this, Nick!

It seems sensible to me: a significant reduction in directory bandwidth
for a minor decrease in forward secrecy.

Proposal 277 deals with relays that appear to "rotate" onion keys very
frequently (because they have multiple instances with the same identity
key).

But what about relays that don't rotate onion keys at all?
https://trac.torproject.org/projects/tor/ticket/20055

Should they be mentioned in this proposal, or is the ticket sufficient?

Tim

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYsradAAoJEEUMun+WjwlLu6AQAOc4Eee82fkSHJlF9u7oykUI
YT6yRTxueF3zTN6JwYpx4nve2qhgBN5TQ/6rXd54ULmuj3kDluVs35G2pcnbtWHn
qHD0TSeid68qOVwOjk0YlO3FQv6gEwPaFrnFB1Esgpp/Em7545fnZ72YOAWnlBfm
0/9wS0Uxo1JljA9v/3oYp/AVK1Ezvebb4ADzs5o6rysDl6eCz3JOpXHPQB85rLQD
bmD1GglvC65er5INOqKUm5DjVOGOMwUkjAfeOoAwMcQonbGH7JkRtyC0+xEZke8Y
J7vBTpamrSCWj69K//tgOYB8sLN9dyqzLvQII+58k8u15mDxq7R25mQm1VRyjCoy
Iv6py8m/9UplfQtJr/CnHi4PvkPqOC38O3GBp7fEIOPDyy00CVGhfqoUyFWey5zq
nN4N1s+XsVqelXjd5ja0eevA9ojTsZO4bbDHy8XnMs4w/2hQNeMn82oYDRU/eP7w
tldP4GHf/Pf8Rp7i4tXyiyW3r7J6dB4GRPidbBpE01gYlcIrk44G+m7vqY71Qjcn
zM+TWJa420eS5fFCM5tNVVfqaoB4/Tn2ILNPQvdwfbfnKF/z3q0+7Yh4Mxe209EW
H3QdhcxpF+hMgsDBQAlsCyxpuMRvMohCzsDL46Aa+9opzt8r0ZZwVXlKiXdqPwgb
I1heK0ukwMZR7pEyRVMR
=NQyl
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170218104140</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-02-18 10:41:40-0400</timestampReceived><subject>Re: [tor-dev] Proposing "Post-Quantum safe handshake implementation" as GSoc Project</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, 18 Feb 2017 14:07:40 +0530
Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt; I'm particularly interested to work on making TOR Handshakes
&gt; Post-Quantum Safe. I feel that this should be implemented at the
&gt; earliest because adversaries could store the network traffic and
&gt; decrypt it later on using Quantum Computers when they're invented.

So there's good news and bad news.

The good news is that PQ handshake stuff will happen, sooner rather
than later.

The bad news is that, work on it is on going, and it does not make a
good GSOC project because, the bulk of the implementation work will
likely happen before the summer.

[snip]
&gt; 2. Implement the NewHope-Simple algorithm[1] because we'll not be able
&gt; to use the Vanilla NewHope as it is protected by some patents. I
&gt; wasn't able to find any implementation of NewHope Simple. So can the
&gt; Vanilla NewHope Implementation be tweaked to convert it into NewHope
&gt; Simple? Or would we have to write it from ground up? I don't know
&gt; about the patent laws regarding it.

I haven't talked to Peter in a while (and will ask him after I send
this), but I am not aware of any patent claims against the vanilla
NewHope algorithm (and the NewHope-Simple paper does not mention this
at all either).

That said, implementing NewHope-Simple is trivial given NewHope (an
afternoon if that), so it's not something that worries me much.

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170223000129</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-02-23 00:01:29-0400</timestampReceived><subject>Re: [tor-dev] Proposing "Post-Quantum safe handshake implementation" as GSoc Project</subject><body>

[Attachment #2 (multipart/signed)]


Yawning Angel transcribed 3.0K bytes:
&gt; On Sat, 18 Feb 2017 14:07:40 +0530
&gt; Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:
&gt; &gt; I'm particularly interested to work on making TOR Handshakes
&gt; &gt; Post-Quantum Safe. I feel that this should be implemented at the
&gt; &gt; earliest because adversaries could store the network traffic and
&gt; &gt; decrypt it later on using Quantum Computers when they're invented.
&gt; 
&gt; So there's good news and bad news.
&gt; 
&gt; The good news is that PQ handshake stuff will happen, sooner rather
&gt; than later.
&gt; 
&gt; The bad news is that, work on it is on going, and it does not make a
&gt; good GSOC project because, the bulk of the implementation work will
&gt; likely happen before the summer.

It will?

&gt; &gt; 2. Implement the NewHope-Simple algorithm[1] because we'll not be able
&gt; &gt; to use the Vanilla NewHope as it is protected by some patents. I
&gt; &gt; wasn't able to find any implementation of NewHope Simple. So can the
&gt; &gt; Vanilla NewHope Implementation be tweaked to convert it into NewHope
&gt; &gt; Simple? Or would we have to write it from ground up? I don't know
&gt; &gt; about the patent laws regarding it.
&gt; 
&gt; I haven't talked to Peter in a while (and will ask him after I send
&gt; this), but I am not aware of any patent claims against the vanilla
&gt; NewHope algorithm (and the NewHope-Simple paper does not mention this
&gt; at all either).

Sorry, I'm being deliberately vague about this because I don't want to feed
the patent trolls or provide a weapon to anyone who wants to fight against
good crypto, but the patent exists, and it affects nearly all lattice-based
handshakes.  NewHope simple is not affected.

My (ongoing, but Nick asked me to stop last summer until there was funding
for it) work on integrating standard NewHope is here:

https://gitweb.torproject.org/user/isis/tor.git/log/?h=feature/rebelalliance

Best,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170218002904</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-18 00:29:04-0400</timestampReceived><subject>Re: [tor-dev] Tor Browser and Mozilla addon verification</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 18 Feb 2017, at 10:40, bancfc@openmailbox.org wrote:
&gt; 
&gt; Hi, does Tor Browser check addon code for tampering for addons from the Mozilla server?

Future questions about Tor Browser would best be directed to:
tbb-dev@torproject.org

If you post this question to tbb-dev, please let this list know to
direct responses there.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYp5VQAAoJEEUMun+WjwlLeQgP/AzDsQrsu++KN3KvGDNdzHzZ
HeX8pCqkDO+xT0SzBd2omoyTvwjM1XEifC8z8cpGx5bWVtzJo4w6wIDOyrHFFayL
wRZ3tK2K2iNecCsbXgw5bxzAKBA0YgJtUXzfw2snaG4BfuxSvbAO7WqmUF1kicwO
oeP0axZxMybmAo/gKNylwSKp+yMxWMqP6SL9QWdyeVfJRRDX5lqvW/U+mIrkGVjF
pK0ImPtJvkgEKvwXzy5hVZPXX6FA6zW3No8j93sHxL1i8I5BmaAEN3crmVZ9m/rN
pVxp4KaxtN7h55NpIra2k3p3YlIPsqKralKrwNh9xy6dvblk858B/Y6SMpvCPSUZ
GstYSvl/JSCpmXaRxjl+9O+Zw5xAJt6Kl3wD7nAQc3vhFLH9X8/rfaIN0Q+lCXPe
yD/Ou3z/FDq1exLcGH084lSF8Ve4cJbrAzZZq4hlp/4zt5kVPhB3dNrutWas3Ti6
GC/AGAaID2ynzgDcdIdQF/P8LaDkXj0HoaXcevc2DwT9Zx/wotgjVlJ7TPsCtV0z
edeNmGGh4hxGRzbhaX0Nzbrsz07uCc2h1kkf9aIC9+o/kLRbYbjMvTIEfbyW3dyJ
kGU3iOjvFtRJi7E7briP1udg15JKbGWrH95AwuosqucTJjD4LLR8AXMdIi6Nu/r6
RKkCvgax1R5SxYORXgUl
=wKVr
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170216132842</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-02-16 13:28:42-0400</timestampReceived><subject>Re: [tor-dev] Prop224 oppurtunity: keygen, crypt, sign, encoding tools</subject><body>

[Attachment #2 (multipart/signed)]


On 15 Feb (19:02:22), grarpamp wrote:
&gt; Tor could ship with a tool to offline generate all the
&gt; various keys, encrypt and sign with them, for debug, test, and
&gt; use with other apps that tie to tor.
&gt; And a tool to translate strings between different encodings in use.
&gt; Or at least provide howto and links in the docs to third party tools
&gt; that users could use for key ops and translation.
&gt; Since those howto topics appear on the lists now and then.
&gt; We here might code up openssl, python functions, etc on the fly.
&gt; However beginning users are typically looking for simple purpose
&gt; dedicated tools, or example docs using prebuilt tools off the net.
&gt; This tends to apply to budding application development in onionland,
&gt; developing things that look at and use tor, etc.

https://trac.torproject.org/projects/tor/ticket/18098

If anyone is looking for a side project ^ :).

Thanks!
David

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
+gqj7b/MY8i54pWi75lDSDEf33QlBclWP8obAxPBdWQ=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170216165900</emailId><senderName>Vi Grey</senderName><senderEmail>vigrey@riseup.net</senderEmail><timestampReceived>2017-02-16 16:59:00-0400</timestampReceived><subject>Re: [tor-dev] Prop224 oppurtunity: keygen, crypt, sign, encoding tools</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


David Goulet:
&gt; On 15 Feb (19:02:22), grarpamp wrote:
&gt;&gt; Tor could ship with a tool to offline generate all the
&gt;&gt; various keys, encrypt and sign with them, for debug, test, and
&gt;&gt; use with other apps that tie to tor.
&gt;&gt; And a tool to translate strings between different encodings in use.
&gt;&gt; Or at least provide howto and links in the docs to third party tools
&gt;&gt; that users could use for key ops and translation.
&gt;&gt; Since those howto topics appear on the lists now and then.
&gt;&gt; We here might code up openssl, python functions, etc on the fly.
&gt;&gt; However beginning users are typically looking for simple purpose
&gt;&gt; dedicated tools, or example docs using prebuilt tools off the net.
&gt;&gt; This tends to apply to budding application development in onionland,
&gt;&gt; developing things that look at and use tor, etc.
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/18098
&gt; 
&gt; If anyone is looking for a side project ^ :).
&gt; 
&gt; Thanks!
&gt; David
&gt; 
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

I can take a shot at it if people are okay with it being written in Go.
I'm not sure if Yawning would be willing to do a review of the code, as
I know Yawning does Go stuff.  I would need to build this functionality
in a project I'm working on anyways.

I'll be a little busy for the next week or so, but I should have a bit
of time to work on this after that.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170216234853</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-02-16 23:48:53-0400</timestampReceived><subject>Re: [tor-dev] Prop224 oppurtunity: keygen, crypt, sign, encoding tools</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, 16 Feb 2017 16:59:00 +0000
Vi Grey &lt;vigrey@riseup.net&gt; wrote:
&gt; I can take a shot at it if people are okay with it being written in
&gt; Go. I'm not sure if Yawning would be willing to do a review of the
&gt; code, as I know Yawning does Go stuff.  I would need to build this
&gt; functionality in a project I'm working on anyways.

This sort of tooling should (IMO) ideally be written in C, like
`tor-gencert`.  Don't let my opinion here stop you or anything, and
it's just my opinion and does not reflect that of anyone else.

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170212151825</emailId><senderName>Tim Semeijn</senderName><senderEmail>noc@babylon.network</senderEmail><timestampReceived>2017-02-12 15:18:25-0400</timestampReceived><subject>Re: [tor-dev] Issue regarding IRC channel</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Invite only has been removed from the tor-dev channel 19 minutes after
your e-mail to this list. You should be able to join again.

It looks like the channel got set to invite only because it got flooded
by &lt;quote&gt;kiddos&lt;/quote&gt; yesterday.

On 12/02/17 15:33, Jaskaran Singh wrote:
&gt; Hi,
&gt; 
&gt; As of writing this mail, I can't access the Tor-Dev channel on OFTC
&gt; neither using my registered nick on desktop client nor through the web
&gt; interface. Looks like the channel has turned invite only. Would be great
&gt; if someone could look into this.
&gt; 
&gt; Regards,
&gt; Jaskaran Veer Singh
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

-- 
Tim Semeijn
Babylon Network

PGP: 0x2A540FA5 / 3DF3 13FA 4B60 E48A E755 9663 B187 0310 2A54 0FA5


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170203180306</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-02-03 18:03:06-0400</timestampReceived><subject>Re: [tor-dev] generate relay fingerprint without tor given the datadir/keys folder?</subject><body>

On Fri, Feb 03, 2017 at 04:12:00PM +0000, nusenu wrote:
&gt; Hi,
&gt; 
&gt; given the files within the datadir/keys folder (without the
&gt; datadir/fingerprint file), is there an easy way to generate the relay
&gt; fingerprint? (using openssl?)

I'm sure that it will be a mess to do it via openssl utility. Some time
ago I wrote a tool for showing onion addresses for private key files.
Now I pushed a feature to it to display relay fingerprint (because 
onion address is a truncated fingerprint base32 encoded...).

$ go get https://github.com/nogoegst/whatonion

$ whatonion -fp /path/to/secret_onion_key

Hope it helps, enjoy!
--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170203180537</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-02-03 18:05:37-0400</timestampReceived><subject>Re: [tor-dev] generate relay fingerprint without tor given the datadir/keys folder?</subject><body>

-$ go get https://github.com/nogoegst/whatonion
+$ go get github.com/nogoegst/whatonion

Whoops, sorry.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170204011900</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2017-02-04 01:19:00-0400</timestampReceived><subject>Re: [tor-dev] generate relay fingerprint without tor given the datadir/keys folder?</subject><body>

On Fri, Feb 03, 2017 at 04:12:00PM +0000, nusenu wrote:
&gt; Hi,
&gt; 
&gt; given the files within the datadir/keys folder (without the
&gt; datadir/fingerprint file), is there an easy way to generate the relay
&gt; fingerprint? (using openssl?)
&gt; 
&gt; According to the spec [1] the fingerprint is the SHA1 hash of the public
&gt; key. (I assume RSA pubkey)
&gt; According to the tor man page [2] the RSA public key should be in
&gt; keys/secret_id_key.
&gt; 
&gt; openssl rsa -in secret_id_key -pubout| ..? |sha1sum

Not as messy as I thought though:
$ openssl rsa -in secret_id_key -outform DER -RSAPublicKey_out | sha1

On GNU/Linux sha1 is probably sha1sum.

Happy hacking
--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170201224305</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-01 22:43:05-0400</timestampReceived><subject>Re: [tor-dev] how to enable IPv6 exiting - aka "how to get p6 lines into your microdescriptors"</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 1 Feb 2017, at 20:51, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt; 
&gt; 
&gt; 
&gt; nusenu:
&gt;&gt; tldr; How do you enable IPv6 exiting in torrc?
&gt;&gt; 
&gt;&gt; the following torrc part is apparently _not_ enough:
&gt;&gt; 
&gt;&gt; IPv6Exit 1
&gt;&gt; ExitRelay 1
&gt;&gt; ExitPolicy reject *:25
&gt;&gt; ExitPolicy accept *:*
&gt;&gt; ExitPolicy reject6 *:25, accept6 *:*    # AFAIU from the tor man page
&gt;&gt; this line is redundant
&gt; 
&gt; ftr:
&gt; 
&gt; The bug is about to get fixed:
&gt; https://trac.torproject.org/projects/tor/ticket/21357#comment:8

We think we have fixed this bug in master.

You can help us get it backported to 0.3.0 and 0.2.9 by testing tor
master (or tor nightlies if your packager build them) on your IPv6
Exit.

Please let us know if it works!

Also, please look for any "bug" warnings in your logs.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYkmR6AAoJEEUMun+WjwlLP5gP/j2oW1O6VEXhWmap59hjQp7p
EEqCj4kcAYfo8CRy5TNdhDdsShikFKx0x4cKB6eTxbwAjw/QCQ+6VxOllQ5Xpzna
kuiKZawLFpCbfBJ1ZTgHhl6w/tkS66AvGP8NjQ51kYdlE1HTNuxr+D8IKM8BvxxY
g5nNGu4o+H/JMEupNdwFIa22fnRDay2EWj/HPdQajNEvcorvEwvYhBQG6k4uSDB5
LeaBWhelMCCD7kvEjRKXgX02gBwDSK9WUB6/dlwaNxJ/Gw9mDaNMT7MSWmOygJsF
bWaPbh9OM9F1q/uM/Ao+x3hCJ+ZVWVNJdOzKT9olyXAhRZZwbEYRAGHpTkpG18qj
GoaGSLoqeMFIP+1+QiSkbuc3YIP00yZduMzQp/LYSrYJfm+3wfhdBtwxvJUCo1Vt
oZmxeR6BT1qu0w7iahSXzN+4KtBGf3K/uYkfcUOUPBgmAUUltzyGh09e919s1ize
NGFLfwtcbPfyngNCR81bO8MB1B5Hsf20DHcLnhyspOksbLiLS2hBzyTNGsEkr1tu
DGAS/TacdxjporxK8I/CD0sJlxWeK4hbyFMGhuAdDy+v2JTM82fIO+dq1pBomUFa
CrIUCtVTovQcZnAOcWrTU/JFB6g71m5Dele7zoY97Cp8U19I9HuMkN6Q02NGwsq0
ROtKvxDN1CrOQfiy1BC9
=Fal9
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170204102700</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-02-04 10:27:00-0400</timestampReceived><subject>Re: [tor-dev] generate relay fingerprint without tor given the datadir/keys folder?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Not as messy as I thought though:
&gt; $ openssl rsa -in secret_id_key -outform DER -RSAPublicKey_out | sha1

thank you


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170207230217</emailId><senderName>Christian Pietsch</senderName><senderEmail>christian.pietsch@digitalcourage.de</senderEmail><timestampReceived>2017-02-07 23:02:17-0400</timestampReceived><subject>Re: [tor-dev] archive.is and archive.fo are using CloudFlare. Is the TorBrowser add-on cfc useless n</subject><body>

[Attachment #2 (multipart/signed)]


Dear Tor developers,

there is a new development in the area of Tor-friendly web archives:

On Wed, Jan 18, 2017 at 11:42:45AM +0000, Yawning Angel wrote:
&gt; On Wed, 18 Jan 2017 12:15:05 +0100
&gt; Christian Pietsch &lt;christian.pietsch@digitalcourage.de&gt; wrote:
&gt; &gt; Considering that cfc was created in order to evade the CloudFlare
&gt; &gt; captcha, this is quite a disappointment. Is cfc useless now? Can it be
&gt; &gt; fixed?
&gt; 
&gt; It was a proof of concept that I no longer have time to work on.

Fair enough.

&gt; &gt; What is the reason why archive.org is not used? I hear they are almost
&gt; &gt; done setting up an onion service for the Internet Archive.
&gt; 
&gt; Because, out of all the similar services that are available, I like
&gt; archive.is the most.

Two weeks ago, an Onion Site for the Internet Archive was announced:
http://hackerfactor.com/blog/index.php?/archives/750-Freedom-of-Information.html
Some tech people at the Internet Archive were informed well ahead of
this announcement, and they are happy with it. I expect this Onion
Site to remain stable for quite a while. I have not hacked a Firefox
extension before, and I would be glad if somebody else came forward to
modify cfc accordingly.

Cheers,
Christian

-- 
  Christian Pietsch | library technologist also volunteering for
  Digitalcourage e.V., Marktstr. 18, D-33602 Bielefeld, Germany
  https://digitalcourage.de | https://bigbrotherawards.de

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170208061544</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-08 06:15:44-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 7 Feb 2017, at 21:33, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; 
&gt; On 05/02/17 07:44, Taylor R Campbell wrote:
&gt;&gt;&gt; Date: Sat, 04 Feb 2017 20:14:00 -0600
&gt;&gt;&gt; From: Vi Grey &lt;vigrey@riseup.net&gt;
&gt;&gt;&gt; Also, should we consider including a Version option eventually in the
&gt;&gt;&gt; ADD_ONION control port command when using a KeyBlob?  It wouldn't matter
&gt;&gt;&gt; much for this new version and probably wouldn't matter much for a while,
&gt;&gt;&gt; but it might be good to keep this in mind for the future.
&gt;&gt; 
&gt;&gt; Versioning onion addresses and versioning network-internal service
&gt;&gt; descriptors need not be done the same way.
&gt;&gt; 
&gt;&gt; Addresses are likely to be long-term, and should really change only if
&gt;&gt; the meaning of the encoded public key has changed incompatibly but
&gt;&gt; otherwise imperceptibly -- e.g., if for some reason Tor switched from
&gt;&gt; Edwards coordinates to Montgomery coordinates on Curve25519.  (That
&gt;&gt; would be a silly thing to do -- it is just an example of a change that
&gt;&gt; could still interpret existing addresses, but differently.)
&gt; 
&gt; It seems to me that different people in this thread have different ideas
&gt; about what the version number in the onion address represents, and it
&gt; would be good to make that explicit in the spec. Does it represent:
&gt; 
&gt; 1. The version of the *onion address format* - meaning that, for
&gt; example, a v4 address and a v5 address could point to the same
&gt; descriptor, which would be compatible with both addresses?
&gt; 
&gt; 2. The version of the *descriptor format* - meaning that a v4 address
&gt; must point to a v4 descriptor, but a v4 descriptor and a v5 descriptor
&gt; could point to the same hidden service, which would be compatible with
&gt; both descriptors?
&gt; 
&gt; 3. The version of the *entire protocol* - meaning that a v4 address must
&gt; point to a v4 descriptor, which must point to a v4 hidden service?

At the moment, all 3 will change between versions 2 and 3.

In future, it depends.

It also depends how you define "the same hidden service", as many hidden
services can front for the same backend service.

Tim

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYmreQAAoJEEUMun+WjwlLZIsP/0fXgO2mCI88KtU/w3j/EsX+
9/05FJd4A4c7PrWiTfsZq1JqNdTQI408zeZ1oRNMfiyhVraZqYk2HmlUd6CxCmNr
KP1XiV+l0buwzQ0AsasHjQL5PHc7pOiubIy/Z+SZz4uG+by2rb9W7HSnCGySaqi0
WPYhn/AsJoyzegdLEuFwL+uIdrE94b4I/8PbKD1Jk3vXtsTPjD24QFT/x+OpAw9+
PVTV+ndpsVCrKPYen4f5SNY1EbSS4aVtur8LgKp6vlXg9ceuhi9toLe6nSM7WkX6
fPtOT9Asam4BWp4qvomPwqJvNAEvcjpnlMCbp2NlC1nQShg13ZOyfP1EKjRv/BnS
VEXqGSht8mZAREse0BDXLGua7AoSps8tsArjGQuAqdAZ3KfvoZGGnDYF8uEv1w3V
xIGFRYNM5U3nNctZHERNvWkFJmAdZl1OXGPFh/+0yGH7oraGWEwVAaRnzeunJe6k
xyqFarwVvgi5iIvry1pgIc8cPWFjI/KJkWZEvZ/Y/dAEY7fSXa3kkNoyBKsygNyp
PD8QAKiam7QZyVgGB/olIis8BENuFgl9YkwJrd5rPMw6/V3n5WVqQUy6SFKCLL22
YrwXQ/5zumGikHDJjwa2loAHNlo6hp8FwiUYPeZf3ffQxZeuZ0QsViw++6IT5cOb
ZdZ7OB/rCV7LhzsQqb5V
=k4vb
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170210205502</emailId><senderName>"Thierry Boibary"</senderName><senderEmail>th.boibary@net-c.com</senderEmail><timestampReceived>2017-02-10 20:55:02-0400</timestampReceived><subject>[tor-dev] french documentation</subject><body>

[Attachment #2 (multipart/alternative)]


hi,
where can i find french documentation?
i am expert in systems and networks administration so i'd like working for=
 you, in a domain which needs my capabilities.

help me to find a domain? please

Regards
T

T Boibary
06 85 55 34 89







[Attachment #5 (multipart/related)]

[Attachment #7 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transational//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META http-equiv=Content-Type content="text/html; charset=UTF-8"&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;&lt;font size="-1"&gt;hi,&lt;br&gt;
where can i find french documentation?&lt;br&gt;
i am expert in systems and networks administration so i'd like working for you, in a \
domain which needs my capabilities.&lt;br&gt;  &lt;br&gt;
help me to find a domain? please&lt;br&gt;
  &lt;br&gt;
Regards&lt;br&gt;
T&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;font face="Arial, Helvetica, sans-serif"&gt;T Boibary&lt;/font&gt;&lt;div&gt;&lt;font \
face="Arial, Helvetica, sans-serif"&gt;06 85 55 34 89&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="Arial, Helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;img \
src="cid:1486760102.1916325821.0" \
id="id_cid_1481835973_593092216"&gt;&lt;/div&gt;&lt;br&gt;&lt;/BODY&gt;&lt;/HTML&gt;


["1481836001.1313601483.0" (application/octet-stream)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170212191007</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-02-12 19:10:07-0400</timestampReceived><subject>Re: [tor-dev] Issue regarding IRC channel</subject><body>

On Sun, Feb 12, 2017 at 08:03:32PM +0530, Jaskaran Singh wrote:
&gt; As of writing this mail, I can't access the Tor-Dev channel on OFTC
&gt; neither using my registered nick on desktop client nor through the web
&gt; interface. Looks like the channel has turned invite only. Would be great
&gt; if someone could look into this.

For a bit more background, see
https://lists.torproject.org/pipermail/tor-project/2017-February/000954.html

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170213204535</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-02-13 20:45:35-0400</timestampReceived><subject>Re: [tor-dev] GSoC 2017 - my name is Marcin</subject><body>

Hi Marcin, glad you want to get involved! We won't know until the 27th
if we've been accepted into this year's program or not but always
delighted for students to get involved early. We have a handful of
project ideas and points of contact listed on...

https://www.torproject.org/getinvolved/volunteer.html.en#Projects

But you're of course more than welcome (and even encouraged!) to
brainstorm projects of your own.

Cheers! -Damian


On Mon, Feb 13, 2017 at 12:37 PM, Marcin Czarnecki
&lt;marnczarnecki@gmail.com&gt; wrote:
&gt; Hello all,
&gt;
&gt; tl;dr can go on about Tor and anonymity and privacy related things for
&gt; hours, give me a chance
&gt;
&gt; I am studying Computer Science at the University of Brighton (in the UK). I
&gt; am interested in participating in Google Summer of Code 2017 with the Tor
&gt; project. I am a web security and anonymity enthusiast, tried to work with
&gt; the Tor Project for GSoC 2016 but it did not work out.
&gt;
&gt; I have not contributed to the Tor's code base but have been an active, semi
&gt; advanced user for past 3 years. Have been experimented with setting up
&gt; exit-nodes (ended up with my box being considered the #1 most evil machine
&gt; in the world :)), creating Tor-clearnet gateways, hosting own HS, trying to
&gt; exploit other HSes, playing with encryption etc. I think that gave a me a
&gt; lot of insight of how Tor works (still amazed and finding new things when
&gt; reading docs).
&gt;
&gt; I am planning to base my proposal on the idea on a easier way of hosting HS
&gt; so it would become more accessible to non tech savvy Tor users plus
&gt; enforcing good security practices when hosting a HS (got some experience and
&gt; cool ideas [citation needed]).
&gt;
&gt; My main skills are in Linux and back-end web development but I am also
&gt; interested in scripting and automation as well as encryption. Can talk about
&gt; Bitcoin for hours (security, anonymity, etc.), thinking about using that as
&gt; my other project proposal as this should be the currency of Tor and more
&gt; integrated into Tor (Tor Browser extension?). When it comes to programming I
&gt; feel confident with PHP, Python and HTML, CSS, JS stuff, and know a bit of
&gt; other languages but I am a fast learner!
&gt;
&gt; When it comes to tor related projects, two years ago I did this small
&gt; crawler with web interface for searching (#2 most evil machine) in Python:
&gt; https://github.com/marncz/torcrawler
&gt;
&gt; Cool feature on which I stopped working was HTTP headers fingerprinting
&gt; which could led to grouping Hidden Services by hosts providers.
&gt;
&gt; Feel free to contact me:
&gt; email: marnczarnecki[at]gmail.com
&gt; IRC at OFTC: marncz
&gt;
&gt; Many thanks,
&gt; Marcin
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170217075443</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-02-17 07:54:43-0400</timestampReceived><subject>Re: [tor-dev] Prop224 oppurtunity: keygen, crypt, sign, encoding tools</subject><body>

&gt; Date: Thu, 16 Feb 2017 08:28:42 -0500
&gt; From: David Goulet &lt;dgoulet@ev0ke.net&gt;
&gt; 
&gt; On 15 Feb (19:02:22), grarpamp wrote:
&gt; &gt; Tor could ship with a tool to offline generate all the
&gt; &gt; various keys, encrypt and sign with them, for debug, test, and
&gt; &gt; use with other apps that tie to tor.
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/18098
&gt; 
&gt; If anyone is looking for a side project ^ :).

For ucspi-onion, I wrote a little essentially standalone (requires
basically only OpenSSL libcrypto beyond POSIX) oniongen1(1) utility to
generate an onion service private key and .onion address:

https://mumble.net/~campbell/hg/ucspi-onion/oniongen1.c
https://mumble.net/~campbell/hg/ucspi-onion/oniongen1.1

This supports only RSA1024 keys at the moment, because (a) it's not
clear to me that the file formats and ADD_ONION syntax for prop224
keys and .onion addresses are nailed down yet, and (b) it seems that
there will necessarily be more work involved with blinded ephemeral
keys for prop224 onion services, but I haven't read prop224 closely
enough to know what the operational details are.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170217164425</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-02-17 16:44:25-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib/DescripTor 1.6.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Another release of metrics-lib/DescripTor is available:

     https://dist.torproject.org/descriptor/1.6.0/

- From the change-log:

 * Major changes
   - Deprecate DescriptorDownloader in favor of the much more widely
     used DescriptorCollector.

 * Medium changes
   - Parse "proto" lines in server descriptors, "pr" lines in status
     entries, and "(recommended|required)-(client|relay)-protocols"
     lines in consensuses and votes.
   - Parse "shared-rand-.*" lines in consensuses and votes.

... and quite a bit more see [0].

Please direct comments and questions to the metrics-team mailing list [1].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=10042d3ce2c157303007361cb0057b2f3527d8bd
 [1] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYpyhdAAoJEPeEx9Sa/gvikq0QAKKhd2v04WGwokOGD+j7HNJC
ylEamW7BSxMHCecgkMULy7RvTkmUmw/OJ66Ob2chdqVd6di8/fej3Sra+mpxcx9f
mibg7UTLtMPgmoKMOp2qL7++HYuhWOowU+6e5rF1Ps0vVBZHWAD2iRCMX+jU2J+p
XzYcVJ4YyV7ovfITDi1hDMvOXqDRrvhbH5bFDgXM0b5mWyKfjb/p35Y5wivEFPxp
DYfVQ231IhDaN8ews3jXpuU8MILUBxzybOK+xtnAfYI4SXxMrJ16LmEpuP5lL2j8
9FfdG2U9MTdxnfEEYVPV/NrBRxZ9r+6d6pTtySmJ8D2s1hnwF3higTYm1DPCfU5U
/m1AtLJsFvGVd/qJ4TNmWww8r1WgZlPzggVHgsHL28lpGK3L8ryQrbA0Nr6AVuFO
sHDG4Fq5iegoWPsgGIcD8ThJlgvi5a6nS0l79OL+DUv4is2zQeI+zOgiaVeu/CmE
JlRkMaA3U2AxayqBSJCwHKdFOu75cHCErTYEQt8Oy+h3rhrw2ucfUe/fKyMOVWps
g156i/PsroggHMZWackXBv9tPJyK57ipTEr84ljg2jsZYTUsrYzN13+v/bkrOWXe
jTOiicdFJ8Kfyj9Ng5afbLmt24W7BYQSqp4BM4MdEmZ2sY4Zq3iTPMqzBGai3OV4
8EJ5gsOCP7WEmSJcMNyg
=EBek
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170218024609</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-02-18 02:46:09-0400</timestampReceived><subject>Re: [tor-dev] Tor Browser and Mozilla addon verification</subject><body>

On 2017-02-18 01:29, teor wrote:
&gt; Future questions about Tor Browser would best be directed to:
&gt; tbb-dev@torproject.org
&gt; 
&gt; If you post this question to tbb-dev, please let this list know to
&gt; direct responses there.
&gt; 
&gt; T
&gt; 

My bad. I reposted my question there at: 
https://lists.torproject.org/pipermail/tbb-dev/2017-February/000464.html

Please direct any answers there.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170219092850</emailId><senderName>Katherine Li</senderName><senderEmail>katherineli.tor@gmail.com</senderEmail><timestampReceived>2017-02-19 09:28:50-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader (Adam Fisk)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Adam, my experience is also that GAE is blocked in China. It is possible
to find unblocked IPs. XXnet, for example, has a built-in scanne
&lt;https://github.com/XX-net/XX-Net/wiki/%E2%80%9C%E6%89%AB%E6%8F%8FIP%E2%80%9D%E9%A1%B5%E9%9D%A2&gt;r
for Google's unblocked IPs. GAEuploader currently does not have built-in
scanning for unblocked IP addresses. We definitely want to incorporate this
feature in the future, and any contribution on this would be much
appreciated.

On Wed, Feb 1, 2017 at 9:40 AM, Adam Fisk
&lt;afisk@getlantern.org&gt; wrote:
&gt; In our experience GAE is basically blocked in China at least. Is that
&gt; your experience as well? I believe it's possible to find IPs that are
&gt; unblocked, but you'd have to embed those IPs somehow into the client
&gt; or integrate the scanning.

Katherine Li
https://github.com/katherinelitor/GAEuploader

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi Adam, my experience is also that  &lt;span \
style="font-size:12.8px"&gt;GAE is blocked in China. It is possible to find unblocked \
IPs. XXnet, for example, has a &lt;a \
href="https://github.com/XX-net/XX-Net/wiki/%E2%80%9C%E6%89%AB%E6%8F%8FIP%E2%80%9D%E9%A1%B5%E9%9D%A2"&gt;built-in \
scanne&lt;/a&gt;r for Google's unblocked IPs. GAEuploader currently does not have \
built-in scanning for unblocked IP addresses. We definitely want to incorporate this \
feature in the future, and any contribution on this would be much \
appreciated.&lt;/span&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;On Wed, Feb 1, 2017 at 9:40 AM,  &lt;/span&gt;&lt;span \
class="gmail-il" style="font-size:12.8px"&gt;Adam&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;  \
&lt;/span&gt;&lt;span class="gmail-il" style="font-size:12.8px"&gt;Fisk&lt;/span&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&lt;&lt;/span&gt;&lt;a \
href="mailto:afisk@getlantern.org" \
style="font-size:12.8px"&gt;afisk@getlantern.org&lt;/a&gt;&lt;span style="font-size:12.8px"&gt;&gt; \
wrote:&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&gt; In our experience GAE is basically blocked in China at \
least. Is that&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt; \
your experience as well? I believe it's possible to find IPs that are&lt;/span&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt; unblocked, but you'd \
have to embed those IPs somehow into the client&lt;/span&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;&gt; or integrate the \
scanning.&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;Katherine Li&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/katherinelitor/GAEuploader"&gt;https://github.com/katherinelitor/GAEuploader&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170219161505</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-02-19 16:15:05-0400</timestampReceived><subject>Re: [tor-dev] Netflow padding</subject><body>

[Attachment #2 (multipart/signed)]


On 19 Feb (01:01:01), grarpamp wrote:
&gt; Are these the current / recommended paper refs for
&gt; eyeballing things on this to date?
&gt; 
&gt; torspec/proposals/251-netflow-padding.txt

This is being considered for 0.3.1 so hopefully we get it in.

https://trac.torproject.org/projects/tor/ticket/16861

&gt; torspec/proposals/254-padding-negotiation.txt

AFAIK, no plan for this yet but I could be wrong, chances are that Mike has a
better answer for you about this one.

David

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
TdJl4dRso6RmH7jZiAXc+ER5fkTcIiiODoNC2KQEZ2s=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170219205219</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-02-19 20:52:19-0400</timestampReceived><subject>[tor-dev] announcing: txmix, a twisted python mixnet library</subject><body>

[Attachment #2 (multipart/signed)]


Hi. I'd like to announce txmix, a library for writing mixnets in python.

https://github.com/applied-mixnetworks/txmix

txmix is GPL3 licensed and currently depends on:
sphinxmixcrypto, Twisted, txtorcon, attrs, eliot
and Tor Project's chutney (for integration tests).

txmix allows you to write mixnets with reduced code complexity and
transport agnosticism... however I've choosen to focus my development
efforts on the Tor onion transport for several reasons, the onion
transport has some properties which the UDP transport does not:

- reliability
- forward secrecy
- NAT penetration

Additionally the Tor anonymity properties are a welcome bonus since
they aren't really overlapping with those of the mixnet, they are
vulnerable to different types of attacks and accomodate for totally
different threat models.

Currently txmix has some integration tests that use chutney to spin up
a local 25 relay tor network; builds a mixnet using onion services
as the transport and then tests functionality by sending and receiving
messages on the mixnet.


future development
------------------

- txmix could certainly be used to write various kinds of mixnets,
however, we are missing a PKI. Without some kind of public key
infrastructure how will mix clients learn about mix public keys?

- sphixmixcrypto library needs improvements that would allow us
to specify more message types such as dummy/cover traffic message
and heartbeat messages. These of course are essential for the defense
against certain known active attacks against some mix types.


questions, code review and pull requests welcome.


David Stainton

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170222153808</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-02-22 15:38:08-0400</timestampReceived><subject>Re: [tor-dev] List of Tor Exit IP address: Is this available from Tor Control Port</subject><body>

On Wed, Feb 22, 2017 at 03:48:56PM +0100, Fabio Pietrosanti (naif) - lists wrote:
&gt; is the list of Tor Exit IP addresses available from Tor Control Port or
&gt; only from https://check.torproject.org/exit-addresses via TorDNSEL ?

The list from check.tp.o is built by active measurement -- it builds a
circuit through each exit relay and finds out what IP address it used
for making the exit connection. Your Tor client only knows the IP address
that the exit relay advertises for incoming connections, and if the exit
relay is multi-homed (as some are), they could be different.

So no, that list of actual exit addresses is not available via the
control port, because your Tor doesn't know it.

You might enjoy
https://check.torproject.org/cgi-bin/TorBulkExitList.py
as a more fun way to interact with the exit-addresses list.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170223002113</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-02-23 00:21:13-0400</timestampReceived><subject>[tor-dev] txtorcon 'all_routers' issue</subject><body>


As per https://github.com/meejah/txtorcon/issues/203 all released
versions of txtorcon that have TorState.all_routers will, upon a
NEWCONSENSUS event, make this set empty.  There is already a fix on
master for the real issue and it will be in the next release.

For users of released versions there is a workaround, pointed out by
evilaliv3: simply use TorState.routers.values() instead.

Cheers,
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170223002647</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-02-23 00:26:47-0400</timestampReceived><subject>Re: [tor-dev] Proposing "Post-Quantum safe handshake implementation" as GSoc Project</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, 23 Feb 2017 00:01:29 +0000
isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; &gt; The bad news is that, work on it is on going, and it does not make a
&gt; &gt; good GSOC project because, the bulk of the implementation work will
&gt; &gt; likely happen before the summer.  
&gt; 
&gt; It will?

Probably?  If people take what I say out of context, or as a promise of
anything, they may end up disappointed, but I don't really care.

&gt; &gt; &gt; 2. Implement the NewHope-Simple algorithm[1] because we'll not be
&gt; &gt; &gt; able to use the Vanilla NewHope as it is protected by some
&gt; &gt; &gt; patents. I wasn't able to find any implementation of NewHope
&gt; &gt; &gt; Simple. So can the Vanilla NewHope Implementation be tweaked to
&gt; &gt; &gt; convert it into NewHope Simple? Or would we have to write it from
&gt; &gt; &gt; ground up? I don't know about the patent laws regarding it.  
&gt; &gt; 
&gt; &gt; I haven't talked to Peter in a while (and will ask him after I send
&gt; &gt; this), but I am not aware of any patent claims against the vanilla
&gt; &gt; NewHope algorithm (and the NewHope-Simple paper does not mention
&gt; &gt; this at all either).  
&gt; 
&gt; Sorry, I'm being deliberately vague about this because I don't want
&gt; to feed the patent trolls or provide a weapon to anyone who wants to
&gt; fight against good crypto, but the patent exists, and it affects
&gt; nearly all lattice-based handshakes.  NewHope simple is not affected.

I spoke with some people and got filled in.  I'm not going to look at
the claim, because that's something for a legal department somewhere to
sort out, and not my problem.

Since the Simple variant is easier for others to implement, and
sidesteps the random asshats issue, I don't think this is a big deal
anyway.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170224162622</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-02-24 16:26:22-0400</timestampReceived><subject>[tor-dev] Proposal 277: Detect multiple relay instances running with same ID</subject><body>

Filename: 277-detect-id-sharing.txt
Title: Detect multiple relay instances running with same ID.
Author: Nick Mathewson
Created: 20-Feb-2017
Status: Open
Target: 0.3.??

1. Overview

   This document proposes that we detect multiple relay instances running
   with the same ID, and block them all, or block all but one of each.

2. Motivation

   While analyzing microdescriptor and relay status transitions (see
   proposal XXXX), I found that something like 16/10631 router
   identities from January 2017 were apparently shared by two or
   more relays, based on their excessive number of onion key
   transitions.  This is probably accidental: and if intentional,
   it's probably not achieving whatever the relay operators
   intended.

   Sharing identities causes all the relays in question to "flip" back
   and forth onto the network, depending on which one uploaded its
   descriptor most recently.  One relay's address will be listed; and
   so will that relay's onion key.  Routers connected to one of the
   other relays will believe its identity, but be suspicious of its
   address.  Attempts to extend to the relay will fail because of the
   incorrect onion key.  No more than one of the relays' bandwidths will
   actually get significant use.

   So clearly, it would be best to prevent this.

3. Proposal 1: relay-side detection

   Relays should themselves try to detect whether another relay is using
   its identity.  If a relay, while running, finds that it is listed in
   a fresh consensus using an onion key other than its current or
   previous onion key, it should tell its operator about the problem.

   (This proposal borrows from Mike Perry's ideas related to key theft
   detection.)

4. Proposal 2: offline detection

   Any relay that has a large number of onion-key transitions over time,
   but only a small number of distinct onion keys, is probably two or
   more relays in conflict with one another.

   In this case, the operators can be contacted, or the relay
   blacklisted.

   We could build support for blacklisting all but one of the addresses,
   but it's probably best to treat this as a misconfiguratino serious
   enough that it needs to be resolved.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170227003624</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-02-27 00:36:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 275: Stop including meaningful "published" time in microdescriptor consensus</subject><body>

On Sun, Feb 26, 2017 at 6:17 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 25 Feb 2017, at 03:25, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Filename: 275-md-published-time-is-silly.txt
&gt;&gt; Title: Stop including meaningful "published" time in microdescriptor consensus
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 20-Feb-2017
&gt;&gt; Status: Open
&gt;&gt; Target: 0.3.1.x-alpha
&gt;&gt;
&gt;&gt; ...
&gt;&gt;
&gt;&gt; 4. Proposal
&gt;&gt;
&gt;&gt; ...
&gt;&gt;
&gt;&gt;   As an interim solution: We should add a new consensus method number
&gt;&gt;   that changes the process by which Published fields in consensuses are
&gt;&gt;   generated.  It should set all all Published fields in the consensus
&gt;&gt;   should be the same value.  These fields should be taken to rotate
&gt;&gt;   every 15 hours, by taking consensus valid-after time, and rounding
&gt;&gt;   down to the nearest multiple of 15 hours since the epoch.
&gt;
&gt; I wonder what this does to relays that have a broken clock.
&gt; Is there any particular reason you chose 15 hours, rather than, say,
&gt; 18 hours (the interval at which relays re-post descriptors), or 12 hours
&gt; (the re-post interval - the consensus lifetime - 3 hours skew allowance)

I chose 15 because it was approximately in the middle of 12 and 18.
But 12 might be more conservative.

&gt;&gt; 5. Analysis
&gt;&gt;
&gt;&gt;   ...
&gt;&gt;
&gt;&gt;   With the longer-term solution in place, and all published times held
&gt;&gt;   constant permanently, the compressed diff sizes were uniformly at
&gt;&gt;   least 56% smaller.
&gt;&gt;
&gt;&gt;   With this in mind, I think we might want to only plan to support the
&gt;&gt;   longer-term solution.
&gt;
&gt; Do you mean "only implement" the longer-term solution?

Yes.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170227003718</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-02-27 00:37:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: Rotate onion keys less frequently</subject><body>

On Sun, Feb 26, 2017 at 6:06 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 25 Feb 2017, at 03:24, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Filename: 274-rotate-onion-keys-less.txt
&gt;&gt; Title: Rotate onion keys less frequently.
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 20-Feb-2017
&gt;&gt; Status: Open
&gt;&gt; Target: 0.3.1.x-alpha
&gt;&gt;
&gt;&gt; 1. Overview
&gt;&gt;
&gt;&gt;   This document proposes that, in order to limit the bandwidth needed
&gt;&gt;   for microdescriptor listing and transmission, we reduce the onion key
&gt;&gt;   rotation rate from the current value (7 days) to something closer to
&gt;&gt;   28 days.
&gt;&gt;
&gt;&gt;   Doing this will reduce the total microdescriptor download volume
&gt;&gt;   by approximately 70%.
&gt;&gt; ...
&gt;
&gt; Thanks for this, Nick!
&gt;
&gt; It seems sensible to me: a significant reduction in directory bandwidth
&gt; for a minor decrease in forward secrecy.
&gt;
&gt; Proposal 277 deals with relays that appear to "rotate" onion keys very
&gt; frequently (because they have multiple instances with the same identity
&gt; key).
&gt;
&gt; But what about relays that don't rotate onion keys at all?
&gt; https://trac.torproject.org/projects/tor/ticket/20055
&gt;
&gt; Should they be mentioned in this proposal, or is the ticket sufficient?
&gt;

I think the ticket's fine -- though they could get mentioned in
proposal 277 too.

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170227182836</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-02-27 18:28:36-0400</timestampReceived><subject>[tor-dev] [PATCH] prop224: Trivial improvements to HS ntor section</subject><body>

Hey David,

please check my `prop224-ntor` torspec branch for some basic
improvements to the HS ntor section that came up while implementing it.

Here it is:
   https://gitweb.torproject.org/user/asn/torspec.git/log/?h=prop224-ntor

Let me know if you like them and I will merge them ASAP.

Cheers!


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170227210512</emailId><senderName>"Mikerah N/A"</senderName><senderEmail>mikerah14@gmail.com</senderEmail><timestampReceived>2017-02-27 21:05:12-0400</timestampReceived><subject>[tor-dev] GSOC 2017</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

My name is Mikerah and I would love to work for the Tor Project during the
summer through Google Summer of Code.

The main project that I am considering contributing to is the Ahmia search
engine for Tor hidden services. I would like to contribute to automating
backlisting, improving language detection and adding a query language. This
is simply a really rough idea of what I want to do.

My main programming language is Python but I do have some experience
writing code in Java, C/C++ and R. I have also built a few web applications
using django that can be seen here: https://github.com/Mikerah.

I would like to discuss more about what I would possibly be doing with the
likely mentors Juha Nurmi and George. Thanks.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Hi all,&lt;br&gt;&lt;br&gt;&lt;/div&gt;My name is Mikerah and I \
would love to work for the Tor Project during the summer through Google Summer of \
Code.&lt;br&gt;&lt;br&gt;&lt;/div&gt;The main project that I am considering contributing to is the \
Ahmia search engine for Tor hidden services. I would like to contribute to automating \
backlisting, improving language detection and adding a query language. This is simply \
a really rough idea of what I want to do. &lt;br&gt;&lt;br&gt;&lt;/div&gt;My main programming language \
is Python but I do have some experience writing code in Java, C/C++ and R. I have \
also built a few web applications using django that can be seen here: &lt;a \
href="https://github.com/Mikerah"&gt;https://github.com/Mikerah&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/div&gt;I \
would like to discuss more about what I would possibly be doing with the likely \
mentors Juha Nurmi and George. Thanks.&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170228154512</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-02-28 15:45:12-0400</timestampReceived><subject>Re: [tor-dev] I would like collaborate with you</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 28/02/2017 16:16, Berenike Grace wrote:
&gt; Hi,

Hi Veronica,

&gt; I'm Veronica Minati, an Italian student of Computer Science at the
&gt; UniversitÃ  degli studi di Udine. I've a bachelor degree and now I'm at the
&gt; last year of the Master degree.
&gt; 
&gt; Some teachers and colleagues suggested me to partecipate at an opensource
&gt; project, to challenge myself and learn more.
&gt; 
&gt; I'm interested in cyber security and cryptography and I dream that one day
&gt; I will work in this area. I'm studying your projects and I would like to
&gt; cooperate with you, for the GSoC and I hope that I will be able to continue
&gt; the work in the future.
&gt; 
&gt; I'm sure that this experience will grow my background. I'm skilled in Java
&gt; programming but I've studied also other programming languages.
&gt; 
&gt; I would like to offer to collaborate at the Onionoo project with karsten
&gt; and iwakeh, May I ask you how can I be helpful? What knowledge should I
&gt; have to work on that project?

Glad to hear!

You'll find a short guide on how to help out with Onionoo and related
projects here:

https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam/Volunteers

&gt; Thank you so much!
&gt; 
&gt; 
&gt; Veronica Minati.
&gt; 
&gt; 
&gt; 
&gt; Ps: In the meantime I will follow you in the IRC channel, my nickname is
&gt; versa!

Sounds good!  Feel free to join us at our next team IRC meeting on
Thursday at 15:00 UTC in #tor-dev.

All the best,
Karsten



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170228154604</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-02-28 15:46:04-0400</timestampReceived><subject>Re: [tor-dev] [release] Onionoo 4.0-1.2.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256


Typo in the release URL; it should be:

https://dist.torproject.org/onionoo/4.0-1.2.0/


On 02/28/2017 04:32 PM, iwakeh wrote:
&gt; Hi there!
&gt; 
&gt; Another release of Onionoo is available:
&gt; 
&gt;      https://dist.torproject.org/onionoo-4.0-1.2.0/
&gt; 
&gt; The protocol version increased to 4.0, because Onionoo now
&gt; accepts searches for IPv6 addresses even without leading or
&gt; enclosing square brackets.
&gt; 
&gt; Onionoo's web-page (as well as JavaDoc) is now adapted to the new
&gt; style of Tor Metrics [0].
&gt; Take a look at new version on one of Onionoo's mirrors [1] or [2].
&gt; 
&gt; Please direct comments and questions to the metrics-team mailing list [4].
&gt; 
&gt; Cheers,
&gt; iwakeh
&gt; 
&gt; [0] https://metrics.torproject.org
&gt; [1] https://onionoo.torproject.org
&gt; [2] https://onionoo.thecthulhu.com
&gt; [3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYtZs2AAoJEPeEx9Sa/gviL/IP/jppwzHw+ysF4Z1JDCqcJzZ7
IdbzhHCPs8spSOI3PmOWCy7VUwqFZvm0uruVn8XYbmzJbjeSs4gWtR/tsSkw4t2Q
4gUqT59WFOEgI/BD8fABIUqgXOoAS2muWV35e3zn1pYJ8EfrugT5xR3v6d1sKN5a
wMroGtC6B1EumVuBduBFre8e6QDgv3OfMrj+VBpuqQUha5DQOX2XxeEInAtx37jH
D2H04Hr2tiWSd+beVkZoJ0IryalR+UlcmdTLkhxZV0zcIqn8TKt0VCRi4TDqTJek
WfIzxZPKldVXoaHxTRo3b2nDKf+50OUXcKS5jNENFeowJoD7dxlLvPq2Gcnzfk61
Z7utxbPpVWDNZfGIIkGKL3IlkFQ5otQ2D5+lDIKPROaTjG1UKuTmdzBti++57qdr
w8Ae/Y2nIyrfvQ4VFqrr/6bWAaqkYNYqLZd8cGEIod73mlXoh2VQSNUnQkQ25M9O
Yi8K5K5oZa0M9NReaUqQ3YPqOfI0CjE51f/5TogT6aC0gPTUdjBZFewa8Rm901o7
hQ/7zlXeH+MM1BbAB8W3O4/dx6g6xdAvaUFzmQcaplIlC8VfMd3aw+n6RKLcZF5L
zUZq9bhMrKFl4dMLxK8QMpA9rLDuP7MKQsMh35lAJZyjY/7ZnC07dG2GiA4C8mOL
czzO8sm+ocFfNLAjX4fG
=kCe6
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170228171139</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-02-28 17:11:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal 276: Report bandwidth with lower granularity in consensus documents</subject><body>

On Tue, Feb 28, 2017 at 6:42 AM, teor &lt;teor2345@gmail.com&gt; wrote:

Hi, Tim!

This looks pretty plausible to me. Do you have time to write up a
quick&amp;dirty python function that actually performs the smoothing?  If
so, I can test it out on the January consensuses and measure the
impact on compressed diff sizes.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170228200840</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-02-28 20:08:40-0400</timestampReceived><subject>Re: [tor-dev] Unable to Join the IRC Channel #tor.</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 1 Mar 2017, at 04:10, Siddharth Bhayana &lt;siddharthbhayana@gmail.com&gt; wrote:
&gt; 
&gt; It's my first time entering an IRC channel and after having read the documentation \
&gt; for ChatZilla, I'm still unable to find my way. These are the steps I've been \
&gt; following: 1) Open ChatZilla extension on Firefox.
&gt; 2) Click on IRC -&gt; Join Channel.
&gt; 3) The two fields that appear are - Network and Channel. From this point on, I have \
&gt; no idea as to how to proceed. 
&gt; Any help would be appreciated.

If you want to talk about tor development, use #tor-dev, not #tor.
(If you want to talk about using tor, use #tor.)

We use irc.oftc.net, for instructions, see:
https://www.torproject.org/about/contact.html.en#irc
https://www.oftc.net/

You might need to register your nickname to access some channels, this
is a spam mitigation measure.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYtdjIAAoJEEUMun+WjwlLHtIQAJXcQpuHfujUlVo9ZiZKrw+H
i3M6XRnF7RwXBmUcY+GCRo5aG+eOCw4a1VAgEyXIkF5PRmcGhHy1n4ZGEna/vadT
+H7OnohvHaP8DeIkEVDZNODjxuJCqO9U6xYwamJRQRh/ymY+3nHwDWCUHe3NJgpt
sfrbCOh4GhwsOR4mqqehEO86ASSL/Q9NKVGBhV8Vtno1Tg18aCAkAbTKFoC5FRLQ
inwh2WxVlu+r/7b9euHpLm+i2NbOeubGHrqvI7ln4T3XeMQfqcipRjFBvMjlbxIH
0fZrHx8TXZPdKg4F4NlGP8Ot3BPDjZVkLOgA9ehFkbQZhJRJ2GC+lBX192kw9356
A28ZsjAm2VlNV7TmSb44wTzERDJ9pbdBf0P9Kf5WK3Bu/IvH8Xw87nRYu6jnkxy3
tjd/IXX9okzUK8Tga1qqJdBh+TAU2ifvmQLzKMOWWIU7yuTqzofP0yVJioH3cu7M
vnbAP6XLFBFs03fj8yOjROlGAJ4+cKDc6aQJbn16CNlkvtLyMlqu48Vi0khsmsuc
wtxHLVL4vHxHeaxu+hW2m3xBRLKxSOj3KzslYFa413Sg8NSBObNuVsqQckfV7iU8
nDKdglZd960/mrnkdhBjgoBoyGGNpuxzHzx8ea3KJ4mG1pKnO7QI7bVaLlCplbWY
t0RmV3NJgC80XqLALW/z
=7PhG
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170111185707</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-01-11 18:57:07-0400</timestampReceived><subject>[tor-dev] SipHash Impact on TCP ISN skew fingerprinting</subject><body>

SipHash a fast PRF by DJB has been adopted upstream across the Linux 
networking stack landing in 4.11. It deprecates a lot of ancient and 
broken crypto like MD5 for initial sequence number hashes.

Its my guess that that timer values added in ISNs should now be 
indistinguishable from the rest of the hashed secret outlined in 
RFC-6528.[1] Can anyone knowledgeable in reading kernel code [2] please 
confirm that this kills clock skew extraction [3] and fingerprinting [4] 
described in Steven Murdoch's papers?

Its one of the advanced attacks we've been following for some time now 
and would be good to write it off.

***

[1] https://tools.ietf.org/html/rfc6528

[2] http://lkml.iu.edu/hypermail/linux/kernel/1701.1/00076.html

[3] http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ih05coverttcp.pdf 
(pages 7-8)

[4] http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ccs06hotornot.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170112025833</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-01-12 02:58:33-0400</timestampReceived><subject>[tor-dev] txtorcon 0.18.0</subject><body>



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170113142925</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2017-01-13 14:29:25-0400</timestampReceived><subject>[tor-dev] RFC: Tor long-term support policy</subject><body>

Hi, all!

This is a draft for a tor long-term support policy for the program
"tor". Please let me know what you think.  It's based on earlier work
and surveys, but it isn't final till we say it is, and it needs more
commentary.

Please keep in mind that dropping support for any old release is an
inconvenience to some nice busy people, and that supporting any old
release is an inconvenience to other nice busy people. Therefore,
"don't inconvenience anybody" is not a viable goal here: instead we
are stuck with a balancing act.

Also please remember the bikeshed.  ;)   http://bikeshed.com/



== Background ==

In the past, Tor has had no actual policy for how long we support
older releases of the core "tor" network program.  We've aimed for
informal rules like "support old releases as long as it isn't too
much trouble," or "support old releases as long as a lot of people
really need it," but these aren't working so well with our new
release schedule.

The good thing about our new release schedule is that we try to put
out two stable release series per year, when previously we were
finishing release series once every ~18 months.  But this means
that, to support the last N years of releases, we need to support
three times as many older release series as we did before. This
won't scale, and probably isn't a good use of our time.

Therefore, we're adopting a practice from several other free
software projects with a rapid release schedule: we are going to
support some Tor releases for different amounts of time than others.


== Levels of support ==

Here's the plan.

  * Every new release series will be supported for at least nine
    months after it becomes stable, and for at least three months
    after another release series becomes stable.

      Example:
        * The first 0.2.8.x stable release was released in August
          2016.  So it will be supported until at least 9 months
          later, in May 2017.  But if the first 0.2.9.x stable
          release had not been released until April 2017, we'd keep
          supporting 0.2.8.x for another 3 months past that point,
          to July 2017.

  * Occasionally, we will designate some Tor release series as
    "long-term support" releases. These will be supported for an
    amount of time to be announced in advance -- typically, for 3 years.

  * For the release series that exist today, we will support them
    according to the schedule at the end of this document.


== What does support entail? ==


For all supported releases, we intend:

  * Information needed to connect to the Tor network (directory
    authorities, fallback directories, geoip tables) will be kept
    up-to-date.

  * Important security issues will get fixed.

  * Major stability issues will get fixed.

  * Portability regressions will get fixed.

  * Portability bugs to major supported platforms will get fixed.


For the most recent supported stable release only:

  * Misleading documentation will get fixed.

  * Smaller bugs that significantly impact user experience will get
    fixed.


We do NOT expect:

  * That directory authorities will be able to run any but the
    two most recent stable releases.

  * That unsupported releases will all work on the Tor network.

  * That unsupported releases will all fail to work on the Tor network.

  * That older supported releases will provide the same privacy as
    the newer ones.


== The obligatory disclaimer ==

This document is about plans, not promises.  We'll try hard to
follow through on these plans, but it's always possible that
something unexpected will happen and we'll need to choose between
following this policy to the letter and maintaining our users'
security.  If that happens, we'll aim for protecting our users.


== Plan for current releases ==

0.2.4.x, 0.2.6.x, and 0.2.7.x, will all receive at least one more
   stable release.  Support for them will end on 1 August 2017.

0.2.8.x will be supported until 1 January 2018.

0.2.5.x is retroactively declared an LTS release, and will be
   supported until 1 May 2018.

0.2.9.x is an LTS release, and will be supported until at least
   1 January 2020.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170118111505</emailId><senderName>Christian Pietsch</senderName><senderEmail>christian.pietsch@digitalcourage.de</senderEmail><timestampReceived>2017-01-18 11:15:05-0400</timestampReceived><subject>[tor-dev] archive.is and archive.fo are using CloudFlare. Is the TorBrowser add-on cfc useless now?</subject><body>

[Attachment #2 (multipart/signed)]


Hi Yawning,
hi all,

sorry if this is old news, but I just noticed that archive.is not only
redirects me to archive.fo (which I noticed before), but archive.fo
now greets me with a CloudFlare captcha.

Considering that cfc was created in order to evade the CloudFlare
captcha, this is quite a disappointment. Is cfc useless now? Can it be
fixed?

David F suggested using Memento which I think is an interesting idea,
having participated in one of their hackathons. One caveat: Memento
would point to to various archives not all of which might be suitable.

What is the reason why archive.org is not used? I hear they are almost
done setting up an onion service for the Internet Archive.

Cheers,
C:


On Mon, Apr 18, 2016 at 10:16:31PM +0000, Yawning Angel wrote:
&gt; Source: https://git.schwanenlied.me/yawning/cfc


-- 
Christian Pietsch, volunteering for Digitalcourage e.V., Bielefeld, Germany
Nominations sought for the German Big Brother Awards: https://bigbrotherawards.de
Verfassungsbeschwerde gegen Vorratsdatenspeicherung: https://digitalcourage.de/weg-mit-vds
Appell gegen den geplanten Datenschutz-Abbau: https://digitalcourage.de/rettet-den-datenschutz
Umfrage zum Datenschutztag 2017: https://datenschutztag.org/survey/

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170120005203</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-01-20 00:52:03-0400</timestampReceived><subject>[tor-dev] txtorcon support for Twisted 12, 13, 14</subject><body>


I am considering dropping support for Twisted 12, 13 and 14 in the next
txtorcon release. Also, TLS support (i.e. pyOpenSSL) will become
mandatory as well (that is, the dependency will be on twisted[tls]).

Twisted 12 is only there because of Debian wheezy. Twisted 13 is for
wheezy-backports and 14 is for jessie ("stable"). jessie-backports has
16.2.0 and stretch has 16.6.0

Hence I do not believe upgrading this dependency will be a problem for
Debian packaging. I do not know the implications for other
distributions.

Feedback requested if this will negatively affect you!

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170120012920</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-01-20 01:29:20-0400</timestampReceived><subject>Re: [tor-dev] txtorcon support for Twisted 12, 13, 14</subject><body>

[Attachment #2 (multipart/signed)]


meejah transcribed 1.0K bytes:
&gt; 
&gt; I am considering dropping support for Twisted 12, 13 and 14 in the next
&gt; txtorcon release. Also, TLS support (i.e. pyOpenSSL) will become
&gt; mandatory as well (that is, the dependency will be on twisted[tls]).
&gt; 
&gt; Twisted 12 is only there because of Debian wheezy. Twisted 13 is for
&gt; wheezy-backports and 14 is for jessie ("stable"). jessie-backports has
&gt; 16.2.0 and stretch has 16.6.0
&gt; 
&gt; Hence I do not believe upgrading this dependency will be a problem for
&gt; Debian packaging. I do not know the implications for other
&gt; distributions.
&gt; 
&gt; Feedback requested if this will negatively affect you!

For whatever it's worth, all of Tor's infrastructure runs on Debian stable,
and I'm not sure if weasel would make exceptions to enable backports.

Best,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170122235316</emailId><senderName>Katherine Li</senderName><senderEmail>katherineli.tor@gmail.com</senderEmail><timestampReceived>2017-01-22 23:53:16-0400</timestampReceived><subject>[tor-dev] GAEuploader</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Tor-Dev Community,

GAE(Google App Engine) uploader has just released v1.0-beta. GAEuploader
enables clients to set up their own private meek-google in one easy step:
just run it and paste the bridge line into Tor Browser.

Background information: Meek
&lt;https://trac.torproject.org/projects/tor/wiki/doc/meek#Overview&gt; is
pluggable transport that uses domain fronting. Meek-google got suspended
&lt;https://lists.torproject.org/pipermail/tor-talk/2016-June/041699.html&gt;,
but clients can set up their own Google App Engine app and configure their
Tor Browser accordingly. However, the process of creating and deploying the
Google App Engine can be confusing. GAEuploader significantly simplifies
this process for clients.

I would really appreciate user testing on GAEuploader. You can download it
at: https://github.com/katherinelitor/GAEuploader/releases
README: https://github.com/katherinelitor/GAEuploader
Tor wiki page, containing step-by-step screenshots of how to use:
https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader

*GAEuploader runs on Mac or Linux, but currently does not support Windows.
*GAEuploader uses the Google Cloud SDK
&lt;https://cloud.google.com/sdk/docs/#linux&gt;. If you are interested in how
GAEuploader works, the README contains the list of commands that were run.

If you have any questions, feedback or bug reports, please email me at
katherineli.tor@gmail.com. I will respond promptly.

Best,
Katherine Li

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;p class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Hello Tor-Dev Community,&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;GAE(Google App Engine) uploader has just released v1.0-beta. \
GAEuploader enables clients to set up their own private meek-google in one easy step: \
just run it and paste the bridge line into Tor Browser.&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Background information:  &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/meek#Overview" \
target="_blank"&gt;Meek&lt;/a&gt;  is pluggable transport that uses domain fronting.  &lt;a \
href="https://lists.torproject.org/pipermail/tor-talk/2016-June/041699.html" \
target="_blank"&gt;Meek-google got suspended&lt;/a&gt;, but clients can set up their own \
Google App Engine app and configure their Tor Browser accordingly. However, the \
process of creating and deploying the Google App Engine can be confusing. GAEuploader \
significantly simplifies this process for clients.&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;I would really appreciate user testing on GAEuploader. You \
can download it at:&lt;span style="font-size:12.8px"&gt;  &lt;/span&gt;&lt;a \
href="https://github.com/katherinelitor/GAEuploader/releases" rel="noreferrer" \
target="_blank" style="font-size:12.8px"&gt;https://github.com/katheri&lt;wbr&gt;nelitor/GAEuploader/releases&lt;/a&gt;&lt;br&gt;README: \
&lt;a href="https://github.com/katherinelitor/GAEuploader" rel="noreferrer" \
target="_blank" style="font-size:12.8px"&gt;https://github.com/kat&lt;wbr&gt;herinelitor/GAEuploader&lt;/a&gt;&lt;br&gt;Tor \
wiki page, containing step-by-step screenshots of how to use:  &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader" rel="noreferrer" \
target="_blank" style="font-size:12.8px"&gt;https://trac.torproject.o&lt;wbr&gt;rg/projects/tor/wiki/doc/GAEup&lt;wbr&gt;loader&lt;/a&gt;&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;*GAEuploader runs on Mac or Linux, but currently does not \
support Windows.&lt;br&gt;&lt;span style="font-size:12.8px"&gt;*GAEuploader uses the  &lt;/span&gt;&lt;a \
href="https://cloud.google.com/sdk/docs/#linux" target="_blank" \
style="font-size:12.8px"&gt;Google Cloud SDK&lt;/a&gt;&lt;span style="font-size:12.8px"&gt;. If you \
are interested in how GAEuploader works, the README contains the list of commands \
that were run.&lt;/span&gt;&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;If you have any questions, feedback or bug reports, please \
email me at  &lt;a href="mailto:katherineli.tor@gmail.com" \
target="_blank"&gt;katherineli.tor@gmail.com&lt;/a&gt;. I will respond promptly.&lt;/p&gt;&lt;p \
class="gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Best,&lt;br&gt;Katherine Li&lt;/p&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170122221600</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-22 22:16:00-0400</timestampReceived><subject>[tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

how bad is it to simply ignore ORPort/DirPort address mismatch log entry
on a relay behind (1:1) NAT?
I assume tor figures out the public IPv4 address anyway, no?

The IPv4 ORPort address 192.168.1.1 does not match the descriptor
address 1.2.3.4. If you have a static public IPv4 address, use 'Address
&lt;IPv4&gt;' and 'OutboundBindAddress &lt;IPv4&gt;'. If you are behind a NAT, use
two ORPort lines: 'ORPort &lt;PublicPort&gt; NoListen' and 'ORPort
&lt;InternalPort&gt; NoAdvertise'.

I'm explicitly specifying (private) IP addresses in ORPort/DirPort (and
OutboundBindAddress) lines to avoid binding to the same ports when
running &gt;2 instances (with &gt;1 public IP).

https://github.com/nusenu/ansible-relayor/issues/101


thanks,
nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126191500</emailId><senderName>loki der quaeler</senderName><senderEmail>quaeler@gmail.com</senderEmail><timestampReceived>2017-01-26 19:15:00-0400</timestampReceived><subject>[tor-dev] ./configure in 0.2.9.9 is ~broken?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi -

Trying to configure 0.2.9.9's build with this command:
./configure --with-libevent-dir=/usr/local/lib --with-openssl-dir=/usr/local/openssl/

fails with:
checking for libevent directory... configure: WARNING: We found the libraries for \
libevent, but we could not find the C header files.  You may need to install a devel \
                package.
configure: WARNING: On most Redhat-based systems, you can get headers for libevent by \
                installing the libevent-devel RPM package
configure: error: Missing headers; unable to proceed.

whereas this worked (and still works) when being issued against 0.2.8.12's source \
code

I have libevent-devel (and libevent-headers) installed on my system - and have been \
building tor on the system for many years now.

Does this ring a bell with anyone?


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;&lt;div class=""&gt;Hi -&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Trying to configure 0.2.9.9's build with \
this command:&lt;/div&gt;&lt;div class=""&gt;&lt;font face="Courier New" class=""&gt;./configure \
--with-libevent-dir=/usr/local/lib \
--with-openssl-dir=/usr/local/openssl/&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;fails with:&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;font \
face="Courier New" class=""&gt;checking for libevent directory... configure: WARNING: We \
found the libraries for libevent, but we could not find the C header files.  You \
may need to install a devel package.&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font face="Courier \
New" class=""&gt;configure: WARNING: On most Redhat-based systems, you can get headers \
for libevent by installing the libevent-devel RPM package&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font face="Courier New" class=""&gt;configure: error: Missing headers; unable \
to proceed.&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;whereas \
this worked (and still works) when being issued against 0.2.8.12's source \
code&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;I have libevent-devel (and \
libevent-headers) installed on my system - and have been building tor on the system \
for many years now.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Does this \
ring a bell with anyone?&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128090600</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-28 09:06:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-01-27 13:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; If you notice similar problems in the future, be sure to let us know!
&gt;  We do have a few checks in place, but this issue slipped through
&gt; somehow.


I assume you are already aware that onionoo is currently a bit behind
(2017-01-27 13:00).

https://lists.torproject.org/pipermail/tor-relays/2017-January/011812.htm=
l


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170127230700</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-27 23:07:00-0400</timestampReceived><subject>[tor-dev] onionoo: understanding 'exit_policy_v6_summary'</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Karsten,

given this torrc configuration and exit policy:
https://lists.torproject.org/pipermail/tor-relays/2017-January/011806.htm=
l

would you expect onionoo's  'exit_policy_v6_summary' to be not set? [1]

https://onionoo.torproject.org/protocol.html#details writes:
&gt; Missing if the relay rejects all connections to IPv6 addresses.


thanks,
nusenu


[1]
https://atlas.torproject.org/#details/5E762A58B1F7FF92E791A1EA4F18695CAC6=
677CE

{"nickname":"sorrentini","fingerprint":"5E762A58B1F7FF92E791A1EA4F18695CA=
C6677CE","or_addresses":["128.199.76.145:443","[2400:6180:0:d0::18a7:d001=
]:443"],"last_seen":"2017-01-27
13:00:00","last_changed_address_or_port":"2017-01-11
09:00:00","first_seen":"2016-11-30
03:00:00","running":true,"flags":["Exit","Fast","Running","Stable","Valid=
"],"country":"sg","country_name":"Singapore","region_name":"Central
Singapore Community Development
Council","city_name":"Singapore","latitude":1.2855,"longitude":103.8565,"=
as_number":"AS133165","as_name":"Digital
Ocean,
Inc.","consensus_weight":420,"host_name":"128.199.76.145","last_restarted=
":"2017-01-21
03:29:31","bandwidth_rate":1073741824,"bandwidth_burst":1073741824,"obser=
ved_bandwidth":1225379,"advertised_bandwidth":1225379,"exit_policy":["rej=
ect
0.0.0.0/8:*","reject 169.254.0.0/16:*","reject 127.0.0.0/8:*","reject
192.168.0.0/16:*","reject 10.0.0.0/8:*","reject 172.16.0.0/12:*","reject
128.199.76.145:*","accept *:53","accept *:80","accept *:110","accept
*:143","accept *:220","accept *:443","accept *:873","accept
*:989-990","accept *:991","accept *:992","accept *:993","accept
*:995","accept *:1194","accept *:1293","accept *:3690","accept
*:4321","accept *:5222-5223","accept *:5228","accept *:9418","accept
*:11371","accept *:64738","reject
*:*"],"exit_policy_summary":{"accept":["53","80","110","143","220","443",=
"873","989-993","995","1194","1293","3690","4321","5222-5223","5228","941=
8","11371","64738"]},"contact":"0x44BB1BA79F6C6333
&lt;tor-admin AT zumbi dot com dot ar&gt;","platform":"Tor 0.2.9.8 on
Linux","effective_family":["$82C92FBAF2196EC346670D12BB9650FE9FF55741","$=
EFD2EEB91E5C5D8CB999B1EC68D89E51F8776AC7"],"consensus_weight_fraction":8.=
568019E-6,"guard_probability":0.0,"middle_probability":0.0,"exit_probabil=
ity":3.799685E-5,"recommended_version":true,"measured":true}


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128034519</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-28 03:45:19-0400</timestampReceived><subject>[tor-dev] tor 0.2.9.9 gcc 4.2.1</subject><body>

Ancient gcc says

src/or/connection.c:1843: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/or/connection.c:1843: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/test/test_dir.c:3700: warning: assuming signed overflow does not
occur when assuming that (X - c) &gt;= X is always true
src/test/test_dir.c:3828: warning: assuming signed overflow does not
occur when assuming that (X - c) &gt;= X is always true
src/test/vote_descriptors.inc:93: warning: string length '4135' is
greater than the length '4095' ISO C99 compilers are required to
support
src/test/test_microdesc.c:654: warning: string length '5844' is
greater than the length '4095' ISO C99 compilers are required to
support
src/test/test_descriptors.inc:305: warning: string length '10571' is
greater than the length '4095' ISO C99 compilers are required to
support
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170129125600</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-29 12:56:00-0400</timestampReceived><subject>[tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I'm looking at ExitPortStatistics. Since the spec [1] is not very
specific, I wanted to confirm that my assumption is correct:

The current tor implementation includes the 10 most relevant ports,
correct? (highest number of bytes or stream)

example:
exit-streams-opened
80=5178868,182=1092,443=3499276,5000=29600,5753=8920,6881=43496,8080=31184,8333=472,8999=16572,51413=51496,other=1925104


so the ports
80
182
443
5000
5753
6881
8080
8333
8999
51413

are the most used exit ports on that given relay (not by that order).

thanks,
nusenu





[1]
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1082:
&gt; "exit-kibibytes-written" port=N,port=N,... NL
&gt; [At most once.]
&gt; "exit-kibibytes-read" port=N,port=N,... NL
&gt; [At most once.]
&gt; 
&gt; List of mappings from ports to the number of kibibytes that the
&gt; relay has written to or read from exit connections to that port,
&gt; rounded up to the next full kibibyte.  Relays may limit the
&gt; number of listed ports and subsume any remaining kibibytes under
&gt; port "other".
&gt; 
&gt; "exit-streams-opened" port=N,port=N,... NL
&gt; [At most once.]
&gt; 
&gt; List of mappings from ports to the number of opened exit streams
&gt; to that port, rounded up to the nearest multiple of 4.  Relays may
&gt; limit the number of listed ports and subsume any remaining opened
&gt; streams under port "other".


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130103706</emailId><senderName>carlo von lynX</senderName><senderEmail>lynx@time.to.get.psyced.org</senderEmail><timestampReceived>2017-01-30 10:37:06-0400</timestampReceived><subject>[tor-dev] git-update: transparently torified git pulls</subject><body>

Hi, here it is.
Style may be crude as I usually write perl.


#!/bin/sh
#
# A variant of git pull which operates over Tor and
#   - figures out when 'torify' needs to be used
#   - shows the changes that were made to the repository
#   - before attempting to merge
#       --lynX &amp; heldensaga, 2017
#
# I recommend piping the output into
#       vim -R "+set syntax=diff"
# but since that isn't everybody's choice of editor
# I won't work it into this script...

# would be more elegant to tell you how to
# configure this in your .git/config?
gitdiff="git diff -b -M77% --minimal"

# 'resolve' has served me well as default strategy
gitmerge="git merge -s resolve"

branch="$*"
if test x"$*" = x; then
        branch="origin"
fi
# echo $branch

url=`git remote get-url $branch`
if test x"$url" = x; then
        exit
fi
# echo $url

case $url in
http*)
        torify=""
        echo "*** Fetching from $url via web proxy"
        ;;
*)
        torify="torsocks"
        echo "*** Fetching from $url via torsocks"
esac
# echo $torify

$torify git fetch $branch \
&amp;&amp; $gitdiff master..$branch/master \
&amp;&amp; exec $gitmerge $branch/master

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170129160243</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-29 16:02:43-0400</timestampReceived><subject>Re: [tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 29/01/17 13:56, nusenu wrote:
&gt; Hi,

Hi nusenu,

&gt; I'm looking at ExitPortStatistics. Since the spec [1] is not very
&gt; specific, I wanted to confirm that my assumption is correct:
&gt; 
&gt; The current tor implementation includes the 10 most relevant ports,
&gt; correct? (highest number of bytes or stream)

Those are the 10 ports with the highest number of (written and read)
bytes, unrelated to the number of stream.  And all lines below report
statistics for these 10 ports plus "other".

All the best,
Karsten


&gt; 
&gt; example:
&gt; exit-streams-opened
&gt; 80=5178868,182=1092,443=3499276,5000=29600,5753=8920,6881=43496,8080=31184,8333=472,8999=16572,51413=51496,other=1925104
&gt;  
&gt; so the ports
&gt; 80
&gt; 182
&gt; 443
&gt; 5000
&gt; 5753
&gt; 6881
&gt; 8080
&gt; 8333
&gt; 8999
&gt; 51413
&gt; 
&gt; are the most used exit ports on that given relay (not by that order).
&gt; 
&gt; thanks,
&gt; nusenu
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; [1]
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1082:
&gt; &gt; "exit-kibibytes-written" port=N,port=N,... NL
&gt; &gt; [At most once.]
&gt; &gt; "exit-kibibytes-read" port=N,port=N,... NL
&gt; &gt; [At most once.]
&gt; &gt; 
&gt; &gt; List of mappings from ports to the number of kibibytes that the
&gt; &gt; relay has written to or read from exit connections to that port,
&gt; &gt; rounded up to the next full kibibyte.  Relays may limit the
&gt; &gt; number of listed ports and subsume any remaining kibibytes under
&gt; &gt; port "other".
&gt; &gt; 
&gt; &gt; "exit-streams-opened" port=N,port=N,... NL
&gt; &gt; [At most once.]
&gt; &gt; 
&gt; &gt; List of mappings from ports to the number of opened exit streams
&gt; &gt; to that port, rounded up to the nearest multiple of 4.  Relays may
&gt; &gt; limit the number of listed ports and subsume any remaining opened
&gt; &gt; streams under port "other".
&gt; 
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129161200</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-29 16:12:00-0400</timestampReceived><subject>Re: [tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; Those are the 10 ports with the highest number of (written and read)
&gt; bytes, unrelated to the number of stream.  And all lines below report
&gt; statistics for these 10 ports plus "other".

Oh thanks, so it is not possible to find out which is the most frequent
exit port by number of streams opened, that's a pity.




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129164148</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-29 16:41:48-0400</timestampReceived><subject>Re: [tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 29/01/17 17:12, nusenu wrote:
&gt; Karsten Loesing:
&gt; &gt; Those are the 10 ports with the highest number of (written and read)
&gt; &gt; bytes, unrelated to the number of stream.  And all lines below report
&gt; &gt; statistics for these 10 ports plus "other".
&gt; 
&gt; Oh thanks, so it is not possible to find out which is the most frequent
&gt; exit port by number of streams opened, that's a pity.

Well, that one is easy: port 80. :)

$ wget
https://collector.torproject.org/recent/relay-descriptors/extra-infos/2017-01-29-16-05-00-extra-infos
 $ grep exit-streams 2017-01-29-16-05-00-extra-infos | sort | uniq
exit-streams-opened
43=1008,53=588,80=243856,110=16,143=12,443=181796,993=36,995=32,8080=116,8443=52,other=4
 exit-streams-opened
43=1348,80=158920,81=132,443=84212,554=16,3389=1064,6669=60,8000=48,8080=128,8333=24,other=1820
 exit-streams-opened
43=1460,80=204496,81=184,443=99272,554=12,563=828,995=16,1500=1428,8080=144,8333=36,other=2320
 exit-streams-opened
43=1676,80=139148,81=108,443=73020,3389=1876,6669=180,8080=120,8333=32,8443=272,11371=4,other=1372
 exit-streams-opened
43=460,80=100744,443=55304,995=16,1500=572,3389=860,8000=20,8080=48,8333=20,9999=4,other=916
 exit-streams-opened
43=716,80=137808,81=64,443=62068,563=32,1500=584,3389=1572,8080=144,8087=36,8333=16,other=1064
 exit-streams-opened
80=1306188,81=1404,182=120,443=1133872,5000=328,8080=11324,24188=12,35485=4,45684=4,51413=2536,other=143596
 exit-streams-opened
80=252636,443=132288,554=20,1500=1284,3389=2000,6669=148,8000=100,8080=144,8333=44,8443=860,other=4252
 exit-streams-opened
81=2052,119=84,182=1620,8001=200,8080=62488,8182=428,8333=184,33480=60,33486=32,40038=12,other=64732
 exit-streams-opened other=0

Okay, in the last line we can't say this.  But in all other lines the
"other" entry has fewer streams than port 80 which is among the top 10.
Only the last line does not include port 80, and the "other" entry has
more streams than top-1 port 8080.  Could be that this relay does not
permit exiting to port 80.  Or that port 80 was 11th or 12th in terms of
bytes.

Hope this is useful anyway.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129165400</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-29 16:54:00-0400</timestampReceived><subject>Re: [tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt;&gt; Oh thanks, so it is not possible to find out which is the most frequent
&gt;&gt; exit port by number of streams opened, that's a pity.
&gt; Well, that one is easy: port 80. :)

Ok, maybe I should have said that differently:

"so it is not possible to find out which are the top 10 (or N) exit
ports by number of streams opened"

(but we can determine the most frequent exit port if other is lower than
the biggest value provided)


&gt; Okay, in the last line we can't say this.  But in all other lines the
&gt; "other" entry has fewer streams than port 80 which is among the top 10.
&gt; Only the last line does not include port 80, and the "other" entry has
&gt; more streams than top-1 port 8080.  Could be that this relay does not
&gt; permit exiting to port 80.  Or that port 80 was 11th or 12th in terms of
&gt; bytes.
&gt; 
&gt; Hope this is useful anyway.

Yes, thanks.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130055501</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-30 05:55:01-0400</timestampReceived><subject>Re: [tor-dev] tor 0.2.9.9 gcc 4.2.1</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 28 Jan 2017, at 14:45, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt; 
&gt; Ancient gcc says

Thanks for this bug report.

Which platform(s) do these warnings occur on?

I tested on macOS 10.12 with gcc 4.9 and Linux 4.4 with gcc 4.7, and
neither were affected by these errors, so it does appear to be an
ancient compiler issue.

&gt; src/or/connection.c:1843: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type
&gt; src/or/connection.c:1843: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type

These are harmless: the code is correct, and has the correct casts.

&gt; src/test/test_dir.c:3700: warning: assuming signed overflow does not
&gt; occur when assuming that (X - c) &gt;= X is always true
&gt; src/test/test_dir.c:3828: warning: assuming signed overflow does not
&gt; occur when assuming that (X - c) &gt;= X is always true

These appear to be a compiler bug, (X - c) &gt;= X is always *false*
given that assumption, and the code describes an underflow.

In any case, these unit tests are correct: current_time will always
be much greater than -1, so there will be no underflow.

If this affects newer compilers, I would be happy to log a bug for it.

&gt; src/test/vote_descriptors.inc:93: warning: string length '4135' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support
&gt; src/test/test_microdesc.c:654: warning: string length '5844' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support
&gt; src/test/test_descriptors.inc:305: warning: string length '10571' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support

We pass supported compilers an option that disables this warning.
Perhaps gcc 4.2.1 does not have it.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYjtU1AAoJEEUMun+WjwlLllIP/3KIDNaQ1OdT+ohaFhZ9ydo8
UNd/L3Oz9J/GVr/Ft7SKQYnqubry+YuQUfn0rSx2uS0HR7PYb4tDRfPfZDUiwlav
VpWHQunnfb3m/z1Cv8zA+ZcPks+JWM2ALML1Jrh1AVA+WKiCtkkDdTQn55bjYrgr
ixwUckCVLrw4hwAs97CiCp7Ke9Z2VcKB46pvy+Kl41l5ut7Esqp0GfhIfImwb/jJ
HvnxBpezjmIsBoLulhDoLD2jpXqKFza3zigzYPyIZaMXMer0M/Fjs2rpcm5RF2Vs
x9x33p44c8blg+3fOcMHFNSJ8GXICWbW97xmvEH3IdEiAHKVSqnaRjBrzZcKRsW/
bEvKuJwvhJDVMA6UGwkkx61Br8P2NHG7w418H8mWt+IYTw/pqXQVHkuU3IwxkU5/
WiNJGL0i9QcgiSJ0vfdbJgu0jz/dVm+9s8UouF1qIPnq+tb+UyowLC7fBrs1MK2A
HyfnVvNXM6AkDRA+Xk6BpLuZWEMlzQd8e54oRORJ9/SXXnZ/8MWM5ADDjtmM96w0
XyN08fi92vwi5YErRYiJzQ1BBUQKobVi+MV0AQbPSSDdbn+hHXsFPwZvslvcsQfK
RCWP/ihsTv8Oa26mutD0RFHvv2Ku+uiTDjdv2jFIMIIwG/yUc0EsqRNGJFdae6VL
WUOHLVTiZsGBWqitk/W/
=xroZ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129135134</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-29 13:51:34-0400</timestampReceived><subject>Re: [tor-dev] onionoo: understanding 'exit_policy_v6_summary'</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 28/01/17 00:07, nusenu wrote:
&gt; Hi Karsten,

Hi nusenu,

&gt; given this torrc configuration and exit policy:
&gt; https://lists.torproject.org/pipermail/tor-relays/2017-January/011806.html
&gt; 
&gt; would you expect onionoo's  'exit_policy_v6_summary' to be not set? [1]
&gt; 
&gt; https://onionoo.torproject.org/protocol.html#details writes:
&gt; &gt; Missing if the relay rejects all connections to IPv6 addresses.

It looks like that relay doesn't include an "ipv6-policy" line in its
server descriptor, and that's what Onionoo puts in its
"exit_policy_v6_summary" field.  If that line is not present, it omits
that field.

I'm including a server descriptor published by that relay and another
server descriptor published by another relay that includes an
"ipv6-policy" line.

Not much we can do in Onionoo here, I'm afraid.

All the best,
Karsten



@type server-descriptor 1.0
router sorrentini 128.199.76.145 443 0 0
identity-ed25519
-----BEGIN ED25519 CERT-----
AQQABk6tATJwpoULEu5H8HCHYVLNZXDiISzqjcVnkaqWOM3vLEoDAQAgBADpkqcx
UBgQJwILiFx0QzbguYeKDdNmm9W69fwOQi1tz594JOaj5yNu8LNMiWVzr1YoTDRh
d/tpHeqb+tJkQlSIPdpdeS54voU/RuFPuMzpNvQEZY3ZWQLfNNGCa5vNrAE=
-----END ED25519 CERT-----
master-key-ed25519 6ZKnMVAYECcCC4hcdEM24LmHig3TZpvVuvX8DkItbc8
or-address [2400:6180:0:d0::18a7:d001]:443
platform Tor 0.2.9.8 on Linux
proto Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3 HSRend=1-2 Link=1-4
LinkAuth=1 Microdesc=1-2 Relay=1-2
published 2017-01-29 11:24:39
fingerprint 5E76 2A58 B1F7 FF92 E791 A1EA 4F18 695C AC66 77CE
uptime 719708
bandwidth 1073741824 1073741824 1794389
extra-info-digest 33D4178248F3C6CB2F65F5C88EC3F13A9779A21F
NQuYjUhIVzt2ottgQ4PUro8KX0zoEk2UnUO1gM3kDLY
onion-key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAKcAM5bLS516y9QYp4XQYYCQohS6EwFdx/2K4PYgMuBfIOO/OnKaGy97
wSmU1XMVUNdfry8nvbmCHhgtnSXBE4h3VemDyHZSrk6qYg8tV4OdytU06uw1Ht01
RMrSOnHD8HHD2ZOuqI9whzBvAeYPKEYN1DuogMc0Oi7XoI4EyOQxAgMBAAE=
-----END RSA PUBLIC KEY-----
signing-key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAMcFm6QomBKSr2yaMNa0oEZ6UEOk8s2XFzfYemqZjn1Hyw6IHHUxHJDp
b47fGNy0ftJWi5uWLNhAiJCBonlzFMCvyExXAnXR7Yp8xtjgL7mQzpXPA52T8uGN
vasorifvrzqvz7q+8ch7cBWMxzl6HgSHZSQsvX71R1LjZo7ghALZAgMBAAE=
-----END RSA PUBLIC KEY-----
onion-key-crosscert
-----BEGIN CROSSCERT-----
E2kutDFW+cLFijxU/Lqvq16IP4QnUoJFmRxIF2XDozkS5cfA+E9C85jwNv9VR/4f
0xt2NsKVaez4jDwrOIY7mJ/1diztLYVUCxMKKXiSp1R6TTsfaOIR7c1Eoqz/25QR
rFJZQGOmyfU00LTcKz9mclsTDpeS9Eh3DC/R8jCteeM=
-----END CROSSCERT-----
ntor-onion-key-crosscert 1
-----BEGIN ED25519 CERT-----
AQoABky8AemSpzFQGBAnAguIXHRDNuC5h4oN02ab1br1/A5CLW3PAEZCTkgOK9Y4
9C2pJTTxQUtLMcH4qyM5+P9VAM/uHzNyrSsUAm7BtqrfWE55wMiaNE//zHttJzoC
HOS0rSt+PwA=
-----END ED25519 CERT-----
family $82C92FBAF2196EC346670D12BB9650FE9FF55741
$EFD2EEB91E5C5D8CB999B1EC68D89E51F8776AC7
hidden-service-dir
contact 0x44BB1BA79F6C6333 &lt;tor-admin AT zumbi dot com dot ar&gt;
ntor-onion-key NxlQ1ZK2FDW361t8v9EPuru5wSuGPM63gGz5p4X5aBs=
reject 0.0.0.0/8:*
reject 169.254.0.0/16:*
reject 127.0.0.0/8:*
reject 192.168.0.0/16:*
reject 10.0.0.0/8:*
reject 172.16.0.0/12:*
reject 128.199.76.145:*
accept *:53
accept *:80
accept *:110
accept *:143
accept *:220
accept *:443
accept *:873
accept *:989-990
accept *:991
accept *:992
accept *:993
accept *:995
accept *:1194
accept *:1293
accept *:3690
accept *:4321
accept *:5222-5223
accept *:5228
accept *:9418
accept *:11371
accept *:64738
reject *:*
router-sig-ed25519
smKoIRGEyT0uUQDtuQSJ0r95+3aId6WX8ippWbdmIXTRtSTOSx+tNszEVcNQGEO3BoZk5WlSycfWoscdwN//Bg
 router-signature
-----BEGIN SIGNATURE-----
KC5UaCUD+CxhmsIDivIzzNOlHIHB1CRODtg+txUeDE9sPZGffv7+x0g+93tSsSLq
GM5JApWwdljFMioE5W688lTqWC9vfoRkBL1zJJUhuSENFOhB+VqdpLw6k/L9Jv6h
XK8sFmN/m2lkXMaqPykOLSOrCi+zZzOYDYQ3hV3DPJ8=
-----END SIGNATURE-----



@type server-descriptor 1.0
router adressaparken 62.92.70.116 9001 0 0
platform Tor 0.2.4.27 on Linux
protocols Link 1 2 Circuit 1
published 2017-01-29 11:10:16
fingerprint 6393 1108 6F33 D534 D8FF 1A5B 516D B88A D17B EAA7
uptime 2463016
bandwidth 1073741824 1073741824 0
extra-info-digest DEC779FA2E344CFEA3DE9EC6685BB35733C1EBB9
onion-key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAL5ww4bCutH6mun4Arx6P9Z7a8diu5zxC736c4mlyCS7auoCNLOzIcPZ
/a1dGRi15nCfwFDsgjzVe+8IGS6AMHQK1XJTq9DL1fspV56vBG6vZe+JBMjr/WKB
F4gyR0/HN1VNe8wi4jlu/YMwZijDDxP7Lj+EmOnkm1eCBQ/sAL6HAgMBAAE=
-----END RSA PUBLIC KEY-----
signing-key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBALsDS0ae9LmDkkeEvMDBt/AeJqhpex03dadnRgzyagfFTyh1Z79RFk9t
Q6Rc6H46So3eaoibHN0cuugQ5qJwi5lck6K4uCjIEQlbeTYOVZrl6dEnRtY+Y5WK
tFUpfCkBJYT35qCuyiyDn46IYW/lqSm2K6D8XGcnsIHEZ6KNbxFBAgMBAAE=
-----END RSA PUBLIC KEY-----
hibernating 1
hidden-service-dir
ntor-onion-key BshmNFxEThf5tAsdhPuoSTjtlnT8GylNqv5olVxw5Ro=
reject 0.0.0.0/8:*
reject 169.254.0.0/16:*
reject 127.0.0.0/8:*
reject 192.168.0.0/16:*
reject 10.0.0.0/8:*
reject 172.16.0.0/12:*
reject 62.92.70.116:*
accept *:22
accept *:43
accept *:53
accept *:554
accept *:563
accept *:636
accept *:873
accept *:1194
accept *:4321
accept *:3690
accept *:5222-5223
accept *:5900
accept *:6660-6669
accept *:6679
accept *:6697
accept *:9418
reject *:*
ipv6-policy accept
22,43,53,554,563,636,873,1194,3690,4321,5222-5223,5900,6660-6669,6679,6697,9418
router-signature
-----BEGIN SIGNATURE-----
Zmb5Zws6Abjao9zINGAht/OvNuyS/y+fiFeon6k+UyamwSvPgn6vF6nGyKSBemga
Y4hQ1LbVUwO697PyDNeQCpc7NVdCo0z06sVXqgOcK1909+VTitVVDfzoU527DKOI
ZXb2NiLjFXn3tUz238q/55RwruN9Sj5YFs/4jS54jC4=
-----END SIGNATURE-----





&gt; 
&gt; 
&gt; thanks,
&gt; nusenu
&gt; 
&gt; 
&gt; [1]
&gt; https://atlas.torproject.org/#details/5E762A58B1F7FF92E791A1EA4F18695CAC6677CE
&gt; 
&gt; {"nickname":"sorrentini","fingerprint":"5E762A58B1F7FF92E791A1EA4F18695CAC6677CE","o \
&gt; r_addresses":["128.199.76.145:443","[2400:6180:0:d0::18a7:d001]:443"],"last_seen":"2017-01-27
&gt;  13:00:00","last_changed_address_or_port":"2017-01-11
&gt; 09:00:00","first_seen":"2016-11-30
&gt; 03:00:00","running":true,"flags":["Exit","Fast","Running","Stable","Valid"],"country":"sg","country_name":"Singapore","region_name":"Central
&gt;  Singapore Community Development
&gt; Council","city_name":"Singapore","latitude":1.2855,"longitude":103.8565,"as_number":"AS133165","as_name":"Digital
&gt;  Ocean,
&gt; Inc.","consensus_weight":420,"host_name":"128.199.76.145","last_restarted":"2017-01-21
&gt;  03:29:31","bandwidth_rate":1073741824,"bandwidth_burst":1073741824,"observed_bandwidth":1225379,"advertised_bandwidth":1225379,"exit_policy":["reject
&gt;  0.0.0.0/8:*","reject 169.254.0.0/16:*","reject 127.0.0.0/8:*","reject
&gt; 192.168.0.0/16:*","reject 10.0.0.0/8:*","reject 172.16.0.0/12:*","reject
&gt; 128.199.76.145:*","accept *:53","accept *:80","accept *:110","accept
&gt; *:143","accept *:220","accept *:443","accept *:873","accept
&gt; *:989-990","accept *:991","accept *:992","accept *:993","accept
&gt; *:995","accept *:1194","accept *:1293","accept *:3690","accept
&gt; *:4321","accept *:5222-5223","accept *:5228","accept *:9418","accept
&gt; *:11371","accept *:64738","reject
&gt; *:*"],"exit_policy_summary":{"accept":["53","80","110","143","220","443","873","989- \
&gt; 993","995","1194","1293","3690","4321","5222-5223","5228","9418","11371","64738"]},"contact":"0x44BB1BA79F6C6333
&gt;  &lt;tor-admin AT zumbi dot com dot ar&gt;","platform":"Tor 0.2.9.8 on
&gt; Linux","effective_family":["$82C92FBAF2196EC346670D12BB9650FE9FF55741","$EFD2EEB91E5 \
&gt; C5D8CB999B1EC68D89E51F8776AC7"],"consensus_weight_fraction":8.568019E-6,"guard_proba \
&gt; bility":0.0,"middle_probability":0.0,"exit_probability":3.799685E-5,"recommended_version":true,"measured":true}
&gt;  


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128092336</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-28 09:23:36-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-01-27 13:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 28/01/17 10:06, nusenu wrote:
&gt; 
&gt; 
&gt; Karsten Loesing:
&gt;&gt; If you notice similar problems in the future, be sure to let us know!
&gt;&gt;  We do have a few checks in place, but this issue slipped through
&gt;&gt; somehow.
&gt; 
&gt; 
&gt; I assume you are already aware that onionoo is currently a bit behind
&gt; (2017-01-27 13:00).

Yes, I'm upgrading to protocol version 3.2, which requires re-importing
bridge descriptor archives since December 2014.  Of course that didn't
go without problems, first with memory running out, then disk space.  I
hope it'll be back later today.

Thanks for the report!

All the best,
Karsten



&gt; 
&gt; https://lists.torproject.org/pipermail/tor-relays/2017-January/011812.html
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128093100</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-28 09:31:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-01-27 13:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; I assume you are already aware that onionoo is currently a bit behind
&gt;&gt; (2017-01-27 13:00).
&gt;=20
&gt; Yes, I'm upgrading to protocol version 3.2

Thanks!
Looking forward to see #20994 deployed.



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126193007</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2017-01-26 19:30:07-0400</timestampReceived><subject>Re: [tor-dev] ./configure in 0.2.9.9 is ~broken?</subject><body>

On Thu, Jan 26, 2017 at 2:15 PM, loki der quaeler &lt;quaeler@gmail.com&gt; wrote:
&gt; Hi -
&gt;
&gt; Trying to configure 0.2.9.9's build with this command:
&gt; ./configure --with-libevent-dir=/usr/local/lib
&gt; --with-openssl-dir=/usr/local/openssl/
&gt;
&gt; fails with:
&gt; checking for libevent directory... configure: WARNING: We found the
&gt; libraries for libevent, but we could not find the C header files.  You may
&gt; need to install a devel package.
&gt; configure: WARNING: On most Redhat-based systems, you can get headers for
&gt; libevent by installing the libevent-devel RPM package
&gt; configure: error: Missing headers; unable to proceed.

Please post the contents of config.log.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170126193626</emailId><senderName>loki der quaeler</senderName><senderEmail>quaeler@gmail.com</senderEmail><timestampReceived>2017-01-26 19:36:26-0400</timestampReceived><subject>Re: [tor-dev] ./configure in 0.2.9.9 is ~broken?</subject><body>

Attached is a .tar.gz which has the config.log from the 0.2.8.12 =
configure and one from the 0.2.9.9 configure.


["config_logs.tar.gz" (config_logs.tar.gz)]

�&amp;O�X�=�s�6����+P���D���d�s�8J��c{l�_2���&amp;!�1E�|�V����.@RI9N�&gt;nj�\,aX���b���,�~��~d�X��� \
���}W4YWu���+Y� U���\�����U��mx���~|\Y��'NL��
��.������Z��i��k������-H���������S���^;X��c{Fc��B7u�K.V��Xf��9���� \
�����F�M����K\z��f��k0Y����&amp;&amp;��J[[��\�1q"j'��$�J��J}����9�n�h@����2H�)�*�}��Qp:v��J����^@�!���� \
����y��.� ���E�4��&gt;�������K��_����[[�j�!���S�N�a����|k�I`/(9 \
�b*�*��(�&lt;\�NL�+I0����u�z�3'���D���4��0[�D}S�b@:���&amp;o���G \
9}J^DyN�jDV�TeO��������lm��^xA7#\���e^[���?k����)�/3��e/�#�����h�b/��U� \
���`U\���,B�C���~����U�i������%H�A���,���d9d�(qck���P����~�]b�E,T�0-Oh��5%����{�����3��%�]�\�����wp����3"�}_ \
��{$�q�'k��"�8n�*�p=���F�"�|����� `���U����I{���fE�L�e�&amp;x2��vb{ \
���-��@���qei��W8���K�4����a\jp�4=5`�i&gt;�P���|��z��p�L����� \
h�����2��e�����&lt;VT�7������E�A���5���r��@� \
)(���.%i�M&gt;v(����-��2L����9��`(����[E1KjR��}� \
�����8�2�%����J�~ola�����]���@�����d����Nx{G�v���*�f���&gt;`�` \
)%��4��a����0��W�H[����G�8C���0��4r(���Cw=�6��a�)��led�j�aB�c2�����W������h4~G \
��h|&lt;&lt;?'/N��������7G�3r�����|(m	���&lt;~�o��r�t]�yz�th,���xI��gG� \
�2����;�����sf.A'�G$��/#:�n�?�_+��=��,�� �K�N@��F��&lt;I�{�.����}[�� \
�.����1:`��$���&amp;��]���+&gt;X��w�n��� �&gt;��"���E�W�d���scO \
Z��hu��5N\{���7]��^���^���v ���I� �f)�N�y�� \
p��������}�am�-�!�:9�%�%1�8�r� \
�=Yp�]t�_-��Y�I������$w������.����PV�wQ-F�4�,�G�R \
yo���]���2��.�g��"�����:~��I��zN����DS&lt;�gBs|M�;f�OPb�0`v"���E��m�cn��H��c��L5�Idn_Q[-E���Ui��K���A�Q'��� \
u�I��kq� ��Lv&lt;�����48(�q%�|F�"3C�r �1V�� + \
YMs��7;��\��Jr�tj	�$#�XZ`P����"��3�)X3t���:iRs�=5k',���q���q�� \
DXM�p��g�(��l,��?Y���(Zf��y$AzE�Q�R������z�1�aCq�T���r�4���F�46�m��#j;���&amp;0��w���&lt;O6+�.���.�e;�b���|U-D��n�c���e�azr=��


�(�Hdt~B{�2�������9Qo����eS��Pp�(u�+���6
v
� ����l�$�1�2U��I,	Y�B��f�������D��'�.)3pV�H_�uM�	��&amp;���l^��Fi��{���Q��8�	��4,/k
 �&gt;4]�7R��{��T�FQ��v&amp;��7�eA"A�y��p����NBH	�#�V�~j��Lm \
r17������~'��L�%�4'����~` �tp����pr&lt;x=$���vp&lt;8�����|trL��&lt;\���lt��� � \
={��lxzr6&amp;�M�7gG���hM"�4�2���-|2�������T�s�/h��6�UDiPK�s�����OVCpx�����cc��?�scn�����+�'d \
bT���bbxVcRQ`S��:8&gt;�����N5��MCp�q�����j�#���-q'���1��H����U�������T��x��`� \
��sv$�����$.�s�bD��/cA`w�r1�l��Z���d�$����% \
�O��f��/������������v��Q|\�,&lt;1�=�, \
�����Cp�I�I;??���L��j�#��|2~w:&lt;��j���F�����Y3��y=|}r�n3M����f���ys&lt;`�C�� \
���6=!k���g4���6����r��DZ^� ]�J����.g����KrdK��7�+�hI��g�
�jWT���'y����~sX��,���'6��&amp;��Vd�K"����'W���{����P$��|���!�F&gt;�Y \
�&lt;��v|	44ph��x�T���`�����&gt;��&gt;we�k*i����)��b6��d�v&lt;&lt;��&gt;�L�Lz��	1���x��hC��S�=�V� \
��4|�^�)d��Y��W��]����&lt;*�7���Oc����_��Y�#x�Y����i�&amp;�v\C�Z����	�����L�a��"�����jd \
�q�v_?���&lt;���������%�Ic)fE�v:�,�d�8�q����]���S���g��@�XK/�ty&lt;�]\LY=��N���)���2&amp;�0%�&lt;LAml�e$����&gt;q(���'-���$Y�e��gB�V^��Ne�	��qkq��i2����e���}t�zM��P� \
��'�U1�vri����&amp;`:��~m�$I������bf��ie��%���l�m����*�%&lt;�� �q�,�j�����w�v$�
���*�+zd�
W��i	�MeX�_-�������y����P���z�4]������_XO��m�9��%�J3���'���*Q����7����T���^��7���rS��]��LEQ&gt;V�d*Bm�g*����X�T��'���m,25U�� \
S�k�����R*�����-	��8r��� \
�.&gt;i�8k����}b�xw��L������#\����C~���{��c"hpt49?ysv8��l6�C47z;9�:����_C \
8:gT����u���yL�h����A,S���F����!�/��F����U�%m��� \
-i��~=�V�1�~`3�Z�����0�����pU�Q:�Uafuv�x� \
������*-�v�So���	n�������Va��������;9��U�����7p���Z��6i�[�Z�-rA��&lt;h��U&amp;���� \
��C'q[{e��b��p���;^��&amp;pDH"8$t2Y��k8��6���,�p|vz��za��&lt;u���L��M|v�6���	�1��
 ���(�
������;�U��z������I�@/�([b�% ����	��G# \
Y�������e@/Xt^�	Gcp�8�&gt;u��=p�c�����0B1}��o��4���?�����mg��&amp;��z�~C����h�v������ \
]r�F���]�&gt;���\�a���Xb!0nx|��(\��nJ�,i�!������#I�.��$���@�`U�0�?&amp;�3X��n�$�#� \
���mLvm���o�K��������9!��G�����V�x� =~!�$���� Q��c�HBn�����_�� \
���[�������m��mo�;�?�v��d \
|�d&amp;�0���h��mv/�IM�"�2&gt;r�s�t�&amp;�7��s	�'�}G�m�b�*�����^gR��g���N�������!�}�PL�H}_��T��}�oZj \
"pr���������nX��1�[c���d�|����2�_&gt;��/��o�R�B �������.�gW� \
g��)��UU�,U�����������5]���Gd��`��Z�I�:	����� ����JP3�N����f ���
l��g��"+|��� w.���/h��&gt;��1#0I�c�8�W4�g�����8)R����,:f���^��|AH	�������1�z#�6�S��[�O�txjCB�lb�P�����~|�E���|#�+�f)��=��� \
QA8����,�"�g�1��9��)g���&gt;y���?�v�7����O��/F��5�����2I���]nSqK_��L�n5A0������`���|��@������mm \
�v�k�L��p���Pv��&amp;��|�7j����L�M���[��d����[�����@H�#&lt;y�(_#�k������������wX� \
�.���������k~.���\�f~������a����8�]Vg��������	���Fk��-�����=d'��|[pmdqk�&lt;���[C� \
Om���5�|�q"��;���}�V��nX{�0�l��`��� �����K��=�3�+��o���v�E�3� \
�xKJ$����61�6�t	�v6u��~�����7�MA�B�C��Y��8y�� \
��D�=`�C�4���'k�LY�c�������y��@����*Y+��K@�U����=�/e��8h�M��p���l�7��R�4�]��W�m����k8���Z \
d��(]�4��a �o�����Q� ����S��s�����C��y�������f)�4`���/��(a�@\��;������E�qt�
i�%�M\�����M��{�*�7L��v6y��$L�8�����q[H���9�uw�Y�E-W�\��7��z�BV�����-Y�*5o^�F��� \
�&lt;kS����lV�,P�;��xn���e9�!�*H���e��`��KQK�m�X5Y\�K1�bo&lt;,�2����q0��q(����Y�^ \
U�k/�T�l����Co��GG9�������EY�"��Y��&lt;�X�{��=d����g9��������p28;���y6&lt;�e��1���e*�0�iga���]�d�L�ot[�g��^��VE�OT��� \
l�J1`	��^��ztz;��f�R5��M)�Y�J��m�Yo���X%x��Rvn���7����������b������������nO�&lt;�^N��@|x8��3�`]�M�w�&gt;q�%;[�+G-�"���"�y/],X�����? \
d��CF�x������Wc�wq�&amp;�u�\��EW�%&gt;�t�\�+_���6�&amp;�����M�����Z-m��enS�]��''g \
�V �������1d6"��0�In���z�����@���8|�"��'p���� ��(�G�C��F���Q�Of���%�"���2��. \
C ��0N.V���Z�a��#k|��eX�]F����5����?Q&amp;3����C�&amp;�e�q���m�K��+����.&gt;�� \
�	R���d��[�B�=��pC�0t������/:!��3����� �'Y��6�G��������N ������;/	�� \
�������X	)�x	��y1,K�\P��mB�q����������(� \
q:����7�w�j�b4�����fO�����?{�������s� O����9� �������
�}��3L 1��6�������$��,�����xw%�J����Z������B����^y�?�;�_���#�!j�	���\�� \
����I4k��[0��PV��Q)��()2�#���0}qk�\�n�$������J�L&gt;�X����rTMa��9��]S8����r����TJ�
 L�����
�F��dT�g"H��)��0�-��������.��m�^�+�S	��=]������������J���~����k	k��r��R���+��g�
��%}� _=���d�8�mg��T���
�����&amp;0rl��h*�n�$YU�����FV�rO��{�o��Lb�/f[����_�����[vI��`���}�
���.��������'����X8����h�� \
��i�dH����a�&gt;���e�Y�XC���D_,z�}�g/�h��LY����dlF��X�]��!Ns��C��c=u��{"Hc \
��de������/H^�_��tw��Df�]E��@�&gt;���Y������ ����&lt;����1��0��d�����h���h\av \
9w�Y���i��"��c��x��)���a��'��/�J��	_��_e�x�u=m=&lt;a%�W=�q�I�l5��� �;�� \
���^�V����Y���ku{0{��CX&lt;�Z�e=s��L�$u�U���w]������hc�x \
�C��n&lt;i����(�1����7��,�cO�h��X���F���j��vU|�~=8����7�u.�!�;�H�v�i��E!� \
�(�@)J�J���ipIQ�vA�J�:�&amp;�(������!���ap �Je� \
X�G���Urkod}w�uv:��_a��*�W)��*���zY`�U}oHu�x*S	�@��F0j+j'��X�nR��\�����q�	U{j������3&amp;�����'i�
 �[ z7���?����G��.�1�|�Gq��Q���D�O��D�?!XRo4Z}�7�}P�*Y���z��q��K�&gt;��:cl� \
��������/�~��"M�;v]$��qIh�Cr[�� N�d��e� ��;,������
��fN,cn�G�������3���g1#S��"���B�=�Oi�j����ZFP-&gt;�����; \
��������C�@`[�vrS������v�.~��N�������������_V�k#f4#.�O6,a��k\����	!(�c+�h����S�Y����g~�}����g����$?�Z�:����:�+�]`�wz��
 ���P��}K�7���=%�}�l��^�&gt;T3��E[W�P��y��U��@�1�4A���!h��F�&gt;Q���;�105(� \
��!E��&gt;�3X7����B3n7B0S���_�v������������0��a�����Z���k��B�RX� \
�����ea�4�Z�Q����z ��)����a���v�|�U����d� &gt;R��p}��	�]~ \
�&gt;�Y����x�/��va�m�/d�%�W����8����,��9}%Gov�Q�i�	�j��9�z��`5�e \
US��B���Te3���*+�]�h��`)�1D 9 �*��!�S���� \
i4L���2,uF����Z�&gt;	Z���4�M��|d]^��S`��X���o	�2�A���L�g�����1��}������� \
�g�����sk�f����;��g��t���?���J%��9E�)BN�^!dy$��M�s0�= \
;����C�"�.=;F��*��cm}H(�������*$� ��ci�1�����������X}w�3�����&gt;�r� \
��s����43�������� ��I����I���W#�������ZP����g���Gb���$�"_IZ�v�1Ij�������=�;�@|(�p�'������]�����D��SiP�0�F�?7������~)�N�t
 �S0�����4��Ah(�e���pp�.���� !Ac��
��&gt;��*�/O��Qn�z�k����F�=gt��j��8u���d��|��;�������rs�����5�92�R'�wR'�wRGu�a�}���U��_���
 ��A�t&gt;��bS��\(Vx�^T Q�H+��}�@�r���&gt;$����q��U~U4�Z�-�e�
�^���y���������Q��&gt;E�)*NQq��ST��Q����xy��4�P1����"�����&gt;8TL���P1X����Hx"*[r��xa[ \
��������"X�;7�|��`��Hm��{��m�&gt;����0i��?�+\)�X}���~�}�����w���6n���m`A��^�d����	RE��q�4N����8U�z�8��lu;-Um� \
��R����*�	���R�������*;��e�Q���$�o�&lt;��Z�8�S}�����o��V���������qzE�:�8^��s@!;E{R�N��	�qF�bw \
�x|�.�������re�k0aX��F����_�����Qb�B�b&gt;�H�6�8�A�{h�1����dF�3�1�����Fo���j�Ma \
��u����yo����?y��VJ��"���q��zo���zo���zo�����VGr0h6u����i�]T~���W��q�a����9w��&gt;$�N��q�8�U��0$�����!�N�*$�������?��U�&lt;�jf�������9�S�!9�J��R����
 ��r���@�������U#���b�;qX+��FJN���v8������Y&gt;��c�vb�Ha�L��L�)�_�Cu\��)l��g�'+�=!�!;����� \
jk�6U,fwA{(T�k��G��x��� pw���%�_8!�O�j]G�V0�O`�� \
q�6eU��8p|��Ax���,1����Q����3ca}��Z$ \
#�a�4����0BFxzA���*&amp;�����U:��^�Y��Lz#|n������-�u��~�-�����F��w�Q&amp; \
��������F�����u�������!�d��O��|.����?�� \
���vSoh�hCX���]��b�c�+�X)�J1V��R���XB\)0�o��D����,�g)&lt;K�Y �Rx� ��&lt;+so���� \
��X��|�hV��}o$��|�]�|��M��!�� J4��!D-���Y���� ��;`����K \
�����9�1��cA���Qo����k&lt;5�,8�W�}k�����~L3��|vkQY��&gt;�'�z \
����T�A�"�BP�\������4��/����Mrs�������W������z���9����+�*���&gt;2G��� \
i�����Q.eW����m�VwY��Lhd\�����Em��� \
����Z��m������rdkqk4��^)�����y��@����t����� ��\���8 \
����`��[�B��`�R����j}=DBY��\\���=�m���(�l�bq�uu����55����E����z�X	J�I�&amp;K���XZ��/V�&lt;e�����X�)LG�b'V���.'������Z#��~�\� \
��=�D��������v�:��"$1���Z�%n� \
�+�+}�Y����_9�gL�������$�r��uG�V���ORr��%&amp;�����x�N�%�I�c6�R��~zLAvI������xsd�L��� \
�%���@�,=sF�#z0�V���T�m����Tj�uQ��jd��3��0���,���U��0�(H2�d���8IC|$R�Y���c1��C�L������k��x0����jd�8)�+;����!9��pC�&gt;�9��cG���kpx�\�I#��^djx|
 � PF�O@�1���d�Srf���A��C�;"���?)� H�&lt;�I5L�N�(M�. \
�'�����T9�=!����;������F}�h���4� \
�-��2'W����k-�l+��	;���~k����)r��k�\ZNp�7�Y���&lt;�� I 8�� ��f�'� \
�&lt;��6��?���o7&lt; �f-CS�3&lt;�������:�1l5k���$��7�������F
����. ��k.`0���zV���j���%�57mn�X�/�&lt;��cP��0L�_x�%o��e��)��gp`�?������QL\�1
/������
#�"�����'���{DK�Z1i%�Hv \
a4]/K����e�s[`��Z��q��1|t���L���j�t\vpg�F�"����nP��;.��(00��� \
��0�F�i����?���%x�:��C��P�3G����2��~hu:i����3?�����O��f��������q^�[��H���v�l�1�:���j��g� \
���:* ���y��O�7 �/�rF�u^����'����n ���m����X@�er�A�}B!��� \
��4�������-���it�I��u�VsQ��zR%8f�N��3�h��]��'����v���n4.�Z���|�h�����(s��F&amp;� \
����wu������P.��h�Wc����-�� ����0�g�
D�����5A&amp;��3��0�_[��������A�O��@CD%4M��=��W����uZ���'�PX���L-�f��FF����{ \
6�\�X���9�G�0�V��1���e{X';-Chl}h���;�zk�s]�^,T����3X�����[��uBU���V�a����|P�h�^���H;J�2Gmho�� \
,&gt;/��/-;���R$���Cm�L�6���������!���L����X`5�f���O�+��.7���� ��"T� \
q����S�����hw��:w[�:p����N�zC�n����7�~�Ha_|�pV��iY��n]7���l@K�����Vl���� \
�h�������%�`9b�j��%�\�R�'�DT��a�_����[ \
!8����(�0/�B��b4��(v�P��9bP3C�f�!l�C�2l�]�w�Z����q����)�p�{2�`sf���1V0_�d�#�Z�v04��A��1H������2�2�~R�@�yv����AHY�$ \
Kud���;��5%��m����������uap�yX,��~�;v�j�}�Sy������3,�`�����t�8�r�!�� \
�IQ0"���� y�DD�@$�������a*�5�"/,$C��C�
�VDr�@[$MLX��e�7M���lC��a�0*����

cc��1�-(,ah/z������D+ [|�x�e�_��K�2�r�EL��2G�|����uga�
&gt; ��������$E��Y�B�r�\e��X1x������9���t�_]���P�Bf �75]h��3R�:���?��+���� \
&gt; �8�k�n�X��N�X���pr%�M(����z��mY!6&gt;${�Q����d��Fb�%���DS�j@���A \
&gt; &amp;��d���T�Q���l�-:Nss�*d�!0��:���������aS-��q��fik���7q��A���;���\�Kxd&lt;���A9VY�lx�X�
&gt; 
��� ��o����1�x����5yw������(�nm�]B��:�.9�.!�nM�]r�]R�]R~]Rv]bn]rf]R^]RV]bN�:�N�O�A \
6]b.��t	yt�Yt���%d�)����skr��3��������%e�%��)������3�Tyr�,9e�\b�\r~\Bv\Bn\Rf\R^\RV\BN�:#.)N�
 ���K��[����&gt;n�8&gt;K����?�!�y��v���\�,_`;��@��=r�S.����#��/Vr�� \
�b�T(�*�&lt;������Zn�z(Vx�����k��C�=����S��t�o������6�&lt;���&lt;���F�3�#��t*�:rW�=Z�=zo��T��6��V����M"6	�A��|�~c�}|�B��V�&amp;��z����7�@,&gt;������Zu�m \
���cMk/nv�w&lt;0��Z�8�`�#M{��Dw�f���l�&amp;�����6L�@d	F&gt;A,�}��i�,���%���j�*_� \
�����@e���z�{k��`�I0�PlM�~W@q�vY(��?����(��P���p�Wymx�������FZ��� \
o������Z!��i5���K���sG&lt;�9V,�Q&amp;� j O�~X1������v�~���N�Yo}&gt;Yk�f$&lt;�L5GS�|^�X \
�g��Xe ��z��T5��[
���p3K�,p���)���d���%NL�:��j80��)�N'���Y����L�����G�(Lf�P�����R�)��g9���oS��Z.;I��){�P&gt;��&lt;sa	EO+I'Ts����t�;�[�ZS������� \
�������I�KTroY9�O��g\���UU{�L�y0�5p��[?�E��Rb;�K����������h\(�|@[�P={V���ib����M�M{'�9
 �|�%�����n�-�&gt;�=�����|�[����U��Q����g��gI-{�Ne�y��f[&amp;��s.����qN,�x�[�|&amp;��"���XT�
 ;�4�%)nY�F����(m�qvlZsg��Q��� \
�X��,Hs��5�8���a���Q�r���#oF���wk#G���_EOf�fc�����pvp�df���i�6�����nC�����*�MRK�����N����&gt;�Q�^�+� \
���]!M� v��
�m����Y�HIX��)�v��7(�R��R�lQLM�]R��]����kWU/���5���������u����#f�;����G�z���)����y�[�{�jdmH�4�*i�T���m���$�D�z������X^�jB&lt;biC�R�O��Q�vU�D��� \
�.�.'A0��"1�QkK��f�g��	�����r����Y����a4��FS���uc� \
�G�!Yx���X�����'��!e#�6N�at�n��co�R������Qy�da��-L5�M���};~v�N����3��z��9V&gt; \
&lt;Z����E�o�$f��1����������w�&lt;�"��?;�����N��x��l��`��8&gt;?9&gt;:�m�	rA�Tp�������&lt;L1WT�o'�����h2�
 i%�
���7���R'�N8��[r�+2xf�'\���qL�K���	��n_E����������f�T��0\7���(CaX�&lt;(&gt;�����p{� \
���&lt;8�n����)#�O��[L$�M���2��1����	Y0��x7�7�eo1�Y&amp;��&amp;�O�2Z���&lt;����	�-�������5����2��/��z
 ���^[��S�n������A:i�Y$� �����h�W7����e�_�O�����K�\`��P�1Db�x��H;(�}_Z�
Y�e	��������C�7!^�Z\ V��-�����w}�2�%�x�6#��~�L���m��iA�p�T��gl�
l���`s����q�J��(���&gt;����T�\2|65�����umg����V���[Z��I!���K��
Z�TR����D^KFhviy��)U������|�_� :�_���	Jk���Ou�������uu��{hA&amp;��
����^��8XimBR!�Yx|2�������$�u^�����|�-�fK-^g�#Z�����a|�"L��B&gt;�����V��ju!�f�,�UW9 \
o�M�C�F�)����&amp;Ym���9��c�*�eE��*5Z]�����T�#2	�[��;�� �Um4+���v�����u������ 6'L \
v����|9o;�E;��vv���� �R����������� \
9S?X�&gt;��TlvG|j����[@����{�V��*{�%���|����e�����Fr_rmS��������������n�� \
F�.{�%�(2	������J����s���,�n(���� \
G��S���)��78����l��u�[�0�![�3�q��0��jm�B�h���Z'��a�M���p����o \
                �t�����F��{�hieZ=��y@~�^�(�!�F��m,�b����|���4���l�v�y*������Yo�����_&gt;
                
*gTL��	1Et�p����
�I����&lt;��S�d�
�y���w.(Gw��Q�kV
�]�w��/|��zK�Bd�p"Z�*$��%4���)��;-{�0
z��QX��n,� Rw������1,,�\���^��%\mJ%� \
��x)��F%&gt;�]�F��J��K��c���&amp;�D��$�M3���o����4�A?����X:���������r�{,�\!`!dt \
�����^���{�-���#�(����2�8��g[A��[P�z9K���coh;���d�_�c�[�������y�H�B�����H��v����&lt;��m����H \
� L���6+�,x���*�a	�Co�EER���![�.�0x����{�1��#yH4�]hm��a�#6�Z���f}��������onnn��
 y���
���c��|85�
.K���g�k&lt;�}q�{M��3[����%_g?o�/����H+� �����7�uL�
S�I�����u�K],����8�k���,�B��v'a�6�_�w��Wb�/�����^�6�&amp;Qi��u|��-F�a� \
������N�/z+��H]1b����?��6^}�5�����m�3������}5��������bo��D��h5�j��F����&amp;(k���u�t����u�V���X1�&lt;��X��Joo���P���?'��w���{�4��a�eK
 �b/��[�����������=��tpd/X��@������v��f�v�������&amp;���eN,`���:����`��P����=O�n�i���B�7;�@�
 �0���d�*�"e�:�" �;���s�-fd������k;�.m�h��O4���`���g�~;��2�H�� �/�3C��!����� \
��`6��6�����/��C@����2�{3M�1�T�&lt;�'�W��`\;V�&gt;m\&lt;�/&gt;{�6����~���6+l�N|��gg�_��AD�9���5 \
~X�����0��6J��������G_A6��Ml��T������e��7��K��&lt;Z�Z�2�B�I�aK&amp;����g�u{m��6���d�}�l��%���
 y�U����[�1��X(3k6����b�=����N��/���0���+������� \
`���fC+�V��d����m}y��7���',���U��t��bX���i%�_Y������G" \
?�B���h�����F&gt;n`A�;�Y\��CV�����g��v]��_��2\?X��F� \
�a����*�Z�q�J��9�x��u�x�_�|!q[�o�Lz4�06a|����h5_��&amp;l������F�*�y�lt� \
m��o��5���,N�I�G���{`)��Q��0���I&amp;���Q�l$�u��������6_����1�GH*,Vi���Bj��L���i�����"u��l&lt;�7��7�/ \
�x����������+OG%M��=����z����5�s� ��,�m������r�{�������5�F��q�|�q���f� \
�c&lt;yjw����+��w����2�qp�.d�����b`�k)���i�i���5tV��������9�N 3�&lt;� ����t \
f��&lt;&gt;M�Qd�������n�'��W��i.]T������*����)���3S��A���	����^d	�S�V]zgX���tk}g����� \
�����4��8|\�����nG�H�q�z�K��T���G��q��F���S~.���{A�����!�I(�#�f:U3�}���F���������	��z�m��W%�_�?Wp������5!�q��L@Z��Q����S�*;�V��^�w����m��KZt�]Yh�
 ����t�X+�4f����!rw�|� \
�%[NR����'��ZMn�����������&gt;.�(�zU"�����5���6]���T�^����J!�����T����95�����47���IcQ
 y&amp;��}�?��&amp;��IkS�����/�g������l�`�������rv_�j!4�'����%���Ql�����U*���c�k&lt;���{�/s \
N9�zL�1w��A����^�^������}k���L�H�fjK�kz.����h��1�y��.�?��,.0����-e��&lt;3h����Y�2 \
2f����-��7%��tQ,���2Z���R�y����K�[03��A�S���g�����G�������!+�-��	�`��K��� \
�l���f[&amp;��':�����$|�Ve���%X����U�����c)B��L�(�$&lt;#�n��g-��V����g����g�{8|�vU�'-��-����_��z���G�_�G���z��-���w��w����C���C���.l \
?w��uH[�]��u���C���v�8��l�g��������l�&lt;@�0#7f���&gt;�&amp;�@���q \
��\�}+Fp�1bF��Ol�g�C��PI��9��&amp;��~��-h����#�|Dy&lt;vo9����������^P���W��kf��&amp;V��.i�����k��W����,����,��f� \
��/\(Vc'}YL��:�_�Kr����-���v�iw�cE��������B�Zr�:�����P��NS�Q���������8�ZF����q�uo�a�S�s��V�h[�m���G�V�����U���Mv��Z����&lt;��Vx�1|����� \
���s �KF�iR�XE����3lL� ��)��_���+�%c
M'��
�lWj3�v�+�� C�����d�W�o&gt;.��"����B����b \
����o��B�^�I��lw����������Y��	��������y�cb�j�b�v��	���������_�j�QfO658���t \
j]�.S\_R�p�&amp;N�� /i)fM.�{�l��]u8q�[ch���{���&gt;��V|����fM��n�Q��p�����1[(��BK�� \
C;@gx� 4��4��%Y^^���.q\���'�m�{�i"�f�EL��pTD�*0$s	���r�Y#y��?O�&gt;��W	��&gt;�Y�x*���Q
 ��94RO��0�[�-8�u��p������6dA&lt;�z�G�A{Oa��J���V?�X8��U����A�H��1f���lK�y0��aw6� \
�5���������7v�A�/|��+��m�li&amp;M��*��q��Ty�@%'�{j�!�ov�b�V��M�W�y��a�����P�&lt;S������EA�E+����E��&lt;2rQ5p����X%��+�eT�W!�l�?��K{����C����`���B \
5�k^�Y�yXD3�|k,��@�P�f���	�,�&lt; \
r��Z6�(�@E�~�J��*����3�]�nh�g|��7�E�g���c������ \
��G����������&lt;�����b	���@^������5��`�Nvv{S�@$��������z�{�gI�������9�e,Wo���k \
����:����4r_%}�8�+�-HW� ��qMA)���	�� �	kh�#{�����������
�$hD�� ���������
�, [�c��2��0���BJz��XRN��K��� \
�j��5���\�4��#��J��Y�a��_�~��p���b����1�������u2P��{1 \
N�����U�{��x�O�������%(��w��f��Ik.F�?8��I|��IQ����������2r�=F+���wN�'�����Q� \
���{;�*b?a�y2+/�i�q����I{r=?Y�Y�O��B�$�UR���^�=��Ja�����tA��U��+�g%�="�\z�a��&amp;��#Z%`������X���&amp;e�#&lt;Lx���K��������3��������Yt�v�������y�r(��������� \
.J{�0�0�+��&gt;��5?��ey._�.{��q�iz���&amp;}O�M�x8�����=����?����yc������:	#F$�Hqf����!�$�r�a���{�#c��!+�eI�.��{EPa�c&amp;�g \
��(�%�A�o�����bZ�\������c��� mu �%DK��-!Z�
� ����,�v��������tW����s@�rG���|�-4&gt;�#�-�`:�\�v�e	����i��4%hJ�t&amp;h*�����5]o��i�� \
��M9p���G��YSV�d�J����Y�U�����0�c���_�����q��gm����e��U[��+�_��W \
%(M�"!v��	R'H� ub!uB?�?VHCk���{��+�|��X�r��}��"�*���H�Z!�E#�UR[���"���q� \
S��Wd��]�:`���f�1��67�����_�=y`&lt;�*$K(�P,��g�b1��]!��+�����N�����J����J!�d \
Wbw��3�s`�\��E��si1=_�6��_�M������^����0 �����J�e|�pd�u	Z��pI�H� E�
R4���!N��;�g���� � ��M �������K����$�����-�5�tzd%&amp;m�
�1��WI���{E����*�&amp;�	��iDI.Y������ \
���������s��G	��.�.G�K~�&gt;m�G����}��U����|���U��c���L�����z(�s����G��y?�= \
��/������1_`YznC��x�W&amp;��&gt;����m?���n����$��u��&gt;$������y�8��i����{D��B� \
�+/�^����AOU����zH!���'U�Y���������WG��y�V�b��A�w\��sz�����R����!���K#q���$n�}d2�k�
 �I
y��$���J\�U��0%��-D��T�V$Pn�4����:�8:�����[0����E����s�\R+X�E��Z�w )w ����� \
XH���H��(G�n@`��x���}H�������h	������{�V�r��rD�)G��r�m�#!j�k:5f���m`&gt;�)��\��kW�;q[�#�N\sVHwR�{�t'q�WDw�:����)q�� \
�;u'�K�:6�0�8�B'2'�u��Nt[H�lm	�T���34m�/Dl�nro�.�q�\����h��E�}�;�iEl+�X��x�����
 �(
�����[��(] �] `M�j�.���Ld@@�����7������5	�-����8�s�9���e7nX���Q�~�;�)_������Y%�� \
��$��X��Y����+X�5��m��P`�8^�a{p�K6@B9������hX�fFI�����-����|t����0knK&amp; \
��gz���r=��R9�	���~�&amp;�'x�S@�	��t��=D��Ct�=O���|������F� \
�gS�B��v��N����n�u�@*����(&amp;]i�%��m��'-�xd2J������U"��M����"P�XS&amp;��)�;�'������Ri;� \
.fh�!�x��B������}��ms���V��������()��H"}��!��Hz0}h��h^i����1��+^���&lt;�N5kgVJ���h���u�)�2j��2Q�e���y����Ckn��DOZM;8{�eR{l5
 �B:�d���NF:�d������,�zhm��w�j��7��X3WZi�a�5�t2��:�0���L�e(:���j����	|�L��9� \
���t_��8�UR�'d���V�7wf}�m�]�����\]������Yo�C�'�!0EF@i���I��C��:D����C�d�w�������k������t���� \
���	������x9� ��!Af9s�"�"����/�R�hp�K�|d��#Y}Y������$�tR��]������� \
��K������z���]�	6�T���H�=�9w�9���Q�=&gt;{���n-b���� �-����������*^�z� \
&lt;�5;���#�G� ���x��U���Y9�l�/���LC��Y�h�����k��i����(�d�����B�L����!pG����;w���[|?��V�"���d�����{������Q


�=��p��i�=��p"h� !�F�"k���q��	$H�	�����S(q�;���$�,�c�S�7|�nU���R_7H���sc��7�-Sl�Q���2c��S� \
���wE���������VW����wOGL�2d� �A �@�� cm�� ����f�r&gt;Ot������Q���r��H����Z�� \
!B\�)A&gt;l{�|H�RW\���YR���N���'���e���a�J���F�����4��gj���@\S��f]�(TZ�������PI9|1���
 ��6^��Eq�`�CQ���Eu���#MVS�}���N/m@M�	�����8���L�u�L(���1�8������P���B��|���� \
�7ew$��������&lt;���6��}[���&gt;��P�]l����/�%�]��uW�������$��TZRiI�%��T��UZUR��&gt;��&gt;�A6���?��;1��j�~�9������|&gt;��-����v�����G��8��+��q��X%~f��X[
 ��S� ��8u
����Cp)�z���F� j�+�yn�&gt;������_�����u���H�"u��-R�H�"u���[��m~M�P����bkE��g��jUl��iU�QX5�J9VH�*�_�F���|�N��&lt;�]�8���"� \
������6F��=�R"���'R�H}"���� &gt;���b��X��(PR{���i�� \
%5su(�8��U�+�EI��F���z�R��H=�S���z�7yT=�N�H�"5��(R�H�zij�2N���T���B�p���P�{ \
��V V�J����N�T2_��������sR���������&amp;N&lt;�0� D )L�0� ��&amp;nW�_U�
Y����PT�x��
#�a+��$�j��4�+��=�)@��O�)Jx�J�����s�w~��s�����;�dH�!U�TRuH�!U��:��6����_����+�m8\��j
 ���h�^%eF��c�N�TaJ�_{)�t!��]����c��]���PH�����v�_.zX�E����v�R`H�!�R`��#nj�)1b�Ud������UY����BJ�F����E���*�0=���(�{����Z��4�I��
 _�T�O�h��5�������UVtO��L��&gt;�'tVf��f�S�C�x
.�[����@�
e4��'SVY��,X��.� � [�JW�T}kl:~����XH�z�~@���@�*}�x[��
�\�C&lt;�L�s/��MO�� J
+)���� ����S224q��dR�;�r�Q�!�6�t�\ ����` �o�������:���
v#/lcZ��)��7�1�#�/�|��_��������������@;{���!-BZ��i���G��6��_ \
r������x�#�I+t  ���!u~��V�0@���(@��?P�n���F��L{&lt;���z��2�|6{�@��_�P'!{B���	��'d�m9T�f����%��:l���]����qK���;w��@��'��1R`
  �o�����G�_���Q| �PV�;���s�=l@���y~~�ZyO
��Tc{���~�7he�s����;��.{&gt;Z���r����V+�����������j���  \
��C��B|rC�|�f��:5���������_s�����._�� "Q�:� ���� \
�n�Q�	�[i�����B�0�/&amp;C�������]�k-a9�U|��b�5u^��TK|����[��c�&gt;��	yk�@�Z��f)4xNQ��)D��"���@
 E��P� ���g�UkK�"�'P&amp;��X�n.�k&lt;B(�����r�����V$_��?�`1�+-��9j-��6��o���
�p������i6�3�(���&lt;hqY�z�u9�SF���q����g��`����va����&lt;�y�5�*�HqX�z�t9M� \
5��s���9Qy���c��BQ87��&gt;�8U/���X���nU�Zq�j���m��^�*�=�'��� \
����E6��OP����)~�q���������=��(��+f���:���OM�Kcj�S{S�f�|&amp;�7��o����1�ii@U������'��� \
z����'�����g�a;~b�'�K��`���[�pE2��3�Ki1/Z����k��/�����!_���kG�l�p]qY+�=I�����$C�h����BAX��zG� \
A�^�a��i�MwU�i#��+bN��wf��dy�dK�$1��s g![Vj �~,'�����!9�O�A�����] \
~����#�G���`���[�3������\Bj  �"���}��&lt;�3�k��|x*|������ �v��_������ \
�Cr�;h���!�C����B?�����"~�����"�]f����n"���MJ��"0E`���)S�L�yD�&lt;k7y�a��H�"k��X�����g's�Tf&lt;�cb"@E��*T��! \
"�,��z�vY������UU�Y9T��6� \
!@B��	|p�M7��J������B++���g�S����3�������Y����Zi��roK-6v��	"$DH���7DBk+w�(o�w0jr�y�H�Mv����"HE�� \
A*�T�R��|U{��SS\z��g���4~��L���ugT�y�����j�����={��}[����W�4s��'���W� \
m�_�+��G~}O�W�&gt;��I�X��� \
]W����$��on�����*�76��q��'��]k6�����&lt;��o5��R������)��f�j���U��n�� \
`������������@�V�T#,r� \
f4�e�#U�TYReI�%U�T�o����(���EM�Y?��ZK��U]��1����:t$�H�� \
#A��b�F�wz�s�Y}w����tW;�,3H��.\�pyv��8/����5��J��y��"$IH��$!IB��$_6�|��y�
 ���zSQvj�:��-�L��3���*-��
l���/��+�L���j�iv� 	���c��!
?����Y�����a�&gt;��Y��X��&gt;������c���(1
g#���y�fPi��|��}�k��A0�`�4�i��}C�������_����S��;'�� \
����=�2�&amp;�3�!'�����7=�YM�;�wT��d��L*Lx$������=���N�"��1&gt;�����5N�\J/p���;����J�� \
�M�)k��(q��:���������_���6�[�/^�����n�t)p�R������v��\c7�f���J�g�h+s,`�6��B \
��������R]��}��������|�vj\[�������-�t-��p��Z��+ZA��UN���;�I~�x���$W��JR���� \
A�������q�2`��|�,�F*�'&lt;W�&amp;�]D��\�*K�D�Ox�$M��D9��%F&amp;�'&lt;Y�6.TFr&gt;��n���5Nf���������sN��e��v��Ob1��$�XLb1��|P3�x~��I \
�����bqz�;Q.0����#U������b���pG���dWIv���'�|bv�2��Q����|�L}$7 \
�J��P+�VB��Z	�&gt;*j]P`d�T�=����g�S��ob������;&gt;t�'���BG���9a&gt;e:o������"�B_�4��3�Y&gt;���r�Rb�q�bh�-gP���[|����=��tx��`lm��bf�Y
 {-�O��b�����u�,��u�7�Y�����~��?�pe'N \
uU+�7�&amp;�����LW6��t�EL1]�t���LWa�8my�u?6]�nI�e�� \
����0���;`���z�@fz�(�T������	m�&amp;�Mh��6�mB��������7W����_��� \
���|���ImN�O�v�[9o)���������	���yp��`�����"��,Y#*$�"�-%}E�f����I�	O�������|M�L�2�O^�Oz�p
 �� ���=`k����� Z�/�� \
!R�HQ"E�%R�HQ"EW���KoW2U���c���o�����9&lt;�E�1YI���4���O�JB����#�������f@�i��f@�i��0�`Y`�i���q�����%��x^�I�	�g�m\��[+&gt;i�����Z��W���B�
 �+����B�
�+��&lt;5uE\{v`����p:�xG����C�m���K
)�0� @
)�0� �*
��0Z�ao�Me���Louo(�,v]�L.H	� %@J��)R�/
��M�c��^�����b�II %��RHI \
%��R^���\�3���9K��hp��L���SA&gt;a�����{��x4_�2_ri&gt;�I��s���Vv�d�b �m� \
�xI�%��4^�xI�%��4���� 1��=���8+gU��4�N���i�����mDe�N�:U�0H� 
�4�0H� 
�4�0�hKu"S���8n|3XY�|�����
k���5[0$W��+;_��&amp;��W�&lt;����C*�&lt;����C*��Wy�I��������Y��9k�q���yAYz��i \
���Bi ���Bi si \
�}H��e-PT�p�%�Q���m/���PDq&gt;�S�����9��9�,����[�H?��4i�3iRa&gt;�Y�4s��f��������o \
j����Ct�9D��Ct�9D����t���H�yh'���v,��KG�&lt;*a�t�����y�a^&amp;SP����Ez�9����Cz�9����Cz�s�s�-�C����hd�S�%5%�|�'Mq+�' \
�4��4�0���I��PO:�^��	���v��Ez )�I�'+�%�N�O|��-]���� \
���Y�������N��������4s�5sRi&gt;����s��FVt=\][�eO�L�O}�� \
]���a��&amp;��&amp;O&amp;��&gt;y��.�[���9w�����s���1� �u��� \
�:':\��u:\��u:\��u:\��u:\���B��O;�Fb�����'m���ROz1X�N��AoW��x��6�a��F��#6-�L�E�� \
���y�Tsj�"V�������&amp;�����G������G����=C�o9��;cZ��&lt;-)rF�te����"G^2}_�A���O4{���vE'Lz8Z�����8�i���fL�1i���fL�1i���x9�F���-Z:k���'u��he����
 �C��vH�$-rvLDZ$i��E�IZ$i��E��R����{v�u�)�����r�����GY&gt;�������/i�,e���|����q�2V�4}���,�����{�\D�R��K�-������h��e`��l����d�Z�U2��@c�e�1{`��s��4f�.� \
��$���K�.��$���K�.��$���r����w�u]98R~���Z�6���� \
jMn�oq�S!s�T�;m��3�8����*9��r{R�B����cQ�������_��7��P�1����~�T��4z��UJ���Lg|��%��VA��O�D1\'�F�v�D[[��e��������pY? \
e�Z���2��~d ;wm������b�U(�S%P� ���I{h��
��:f$$lV*E)�Y{��8������o 7����1�����FN�w�
 ���5
�g�QH��on�����'2�bT���jK��b��`��Q	�u����h��U�x 
V�&amp;V�E��,��J��,]�N%���m�������&gt;4X�lT��p�`i���������Ua�&amp;�=�UW@)�\6*�c�f��y-���jU4�U��Z�&amp;��n�P6*�c�n�tyx�E��Z��f�
 �V���n ��e��&lt;��FK����C�����4�U���uB���F%y���6O�������c��@�� 
�F+��J��-]�vG;Z����RW�M��.��J��.M�N�������@LF�P;R
��L��&lt;z@�Q ����	
��J��:S� 6�
v�h�@)A�@i@]g
�����`W	]�����TW��S@ 6�v� \
GJ1\����At�)(P�G��Jh�L��R�+166�=c8���%�p�_[n��`��le���D�%c� \
��k��X:Hq�����fEn� Z�Y�+�g`{�3t�����=����� _��EAx�hcYY/����c�
Bh�����Mw����X��r&lt;����	��h��z�_��]��e�]8���]8���]8���]8���]8���]��.\1���A^�@g� \
�n����5�����'���Sh-L[����k��g��B������/�c�ib�P�QSF�k�PF��)F���:�R������T \
Q���i���,lUI��GT'��P5��E��G��O��)��b�'�������O(�H�c}����hx�z�a�#��������xk� \
�3�B��"+o2g���D5��$�?�.P	�����b��?�mc��m�}�q2��W��W7�6���0���3��#mg5�\��� \
��J����_#��m��6K�%;�w���c��%6 \
��0�"H9����;�.9Y���OSlWq�����o�D�BX'�|��#��D�IdXFX��T�g����k� \
cV�oMB;4��#�����������#��V4��Q�����	��0��c�w��f�A+o�y��� \
���I�j�?��Q5�������u����*��)����S}�FCs������ \
,�Tv����c�R��������i��c�U�����Xu��_;V]�E~�+M���U����;i��5��� ��J�5�
�&gt;O���X�V��G��dW'y����~��� �?�f#; \
�������W��f�m�6JF��=�l�4�N#�4�N#eb�N#�4�N#�4�N#�4�N#�4�N#�5�)E��A�-D}&gt;��3�U� \
�|V��Q�Caq��&lt;��C��y��0����u$���.C:%����!P�jKv�51���q�LG	�T�q/��3�q���L�D�Gt \
�q�fKt�qD�Gt�qD�Gt����L����~2���#��%�t�8���k�]�W�m�a�Pa��R�`�J����{�����k-��e�% \
��x:�����U^����#��x:����#��x:���5�&lt;�N��B��w/��K��	�����j���h�@Td�����p\'�-&amp;�L��O��i�!Kd����oQ��[��2������R�~=`Y�s��,+0oX?� \
���r����k�,����Zz��������%~��X�~U/:� 	�Q���?�$�7��o������M��Y� \
"���r�����r���+'���r���+/�����7q���8������,)���Y��#�O��'���(�-?I�����{0Zj \
/#��E��&lt;Q�N&lt;�D��:�D�OD&lt;�D���'�{�"�H���OD&lt;�N&lt;����������T��%�����#� \
���C|������?�";0��?2,#��I?���";�W?^�U��C���I����xw����r�{V��/��^���c?������ \
_	;�(���ee=p"��m+�9��%J�#J�(�� J�(�T�R!Je���(�T�RQ��B� \
Q*�P*IF���yJ+`�����������4�	 ���Z�ds�7Gi�����+��4��g��Ht��.��_B|	�%3 \
{�K�(�K�/��/��K�/!��I|	�%��_B|�c�% \
�a�p����C�.��F-������i�~nb�k��`S���Y?~�����k��wm���80���#LV'�#�80���#�8 \
0���S�D���~X�����O�&gt;e���������|�����f���As�-��)wK��u�3�d�.4=��_l�����:?O��������B�#z�O����9��q&lt;����J� \
�Z�;c�����-/R[s��g���s�Zx$2�;���P1�f��~*X�����Y����Z.[b��U#V�X5YA%V�X5b��U#V�X5b��U#VMY�jR��`�T3),��X�D�=������������z���5r�[3*�|����O�� \
�?3��]�r�dK�QnD��&amp;k�D��F�QnD��F�QnD�)k"�M��$(7%H��`J���=/��c��qH�h��Vw����0�DU����)��*v��B��gj�U��
 B�~����:�6k�;�67C�3]�d_�Tg%R[��I_Qt%��

�7F�� ��H�T�(����D��l��9CA�*��D��J�*��D��J���&amp;�U���V���w&gt;�����T�y�[W@aM�*1����
 #+r�
�����uy W�to�k�^a��Q�Dq�EQ\Dq�EQ\Dq�EQ\Dq��l	Q\Dq@
Q\Dq=��X4.��JM�&lt;_�k��v��U��6b���;���Ak)(4�)QhQhD���%Qh�6JQhD��FQhD��F��&amp;��� \
D����)��3�����\Ds���v��$��h.����"��h�\LDs��Y�%Oi����"�K'��h.������\ES�E�.��XG�\g$=A��`�L�� \
�K���OP���"�-��D=H� �i=H� ��D=H� ��D=����A)�������bVgd��3�\ \
�;�'A_.am�#bk��"[������8��������������F�\z�@�R���O��jT����V����g����9+#����� \
��uk���_B�y��9�vQ|D�yD����D��z-�qD�Gd�qD�Gd�q�����27����f���%�0�&lt;���(�@c������Q6j��w���1��a�����
 e}7U�����e�JM����ddX��uj��v�J��;���&amp;&gt;�w&lt;�w�����wrM���w��!z���w��!z��eMD�H��Y2�#�!�;;;��w���6vww�?��������7���u�LN��19)��]������"{�g&lt;�3�q������o \
!7����1�����FN��y�n�t�Q0�b�QH�����������j�Q��b�����c�U0m+&gt;VJv����k���v#w \
K�dL���w���C'!NB&gt;W#�r �� ]9�=���l/r�� ��c?������ \
_}[W^�����NdX��m!4gsC���������N���`= �.� \
)juP�7Nt��eOB�K�/%�����@|)����_J|)����_J|��&amp;�K��������M \
�����9\4p��Q��z���5���"w \
��+�R�h�:I.!�����Gs�H�]�+.k��'	�KJ6���=5�?��H��Y�wd����P/����.�	6U�U���H \
����9�	*��N��bO1��s \
��-���4#�&gt;�X�0~O��4v#���]o�?�R&amp;^l"�7��&lt;�'��D�#�5&lt;&gt;@h�04���?�!�U��A�^�6^����O�B�w�p���&lt;T���iM��.���'��hB.��Y,�1��6���.��M \
?�1���'�� CNV������U#l���8Q4��=�����'�x����Q�g����k� c��oMB;4��#�T� \
+��6�3Bdc���~0 ��6�!�i�5��c����7�_�m:i�:y�T����C�NUu9�����+�cdb�%�8&lt;?8K����Cs�d�8Zb���(m�FK�����=� \
� �X��
����v;��A�D]�nE?�]����
���l,����n�Yk
?��1�(���k�O����2~x��?+�
X�!���oc����Y�]�l!b9-�7�\6���p�`����x��v�������^9�w��z� db�
k�n� J����Bk�
�hF6�Mq��p����T��pj��
����'��x�5������0��Y�@ |`�b������V�f��*o�HFSC95�l�� \
u�\E'&lt;��]t���d$w��3?F�b�V��F��mlRK�b�|'Q��J���i�&amp;?#piG����dVNf&amp;��Y�}I�`���E�_�at�u�fPLM�W���^pX�V�
 ^���jG�8(�� �����a�X.��=�%��wUg]U	��!n	Qu�������^'c�G

�DL��Pa�'-���[���zk
��U��^���we�v��~ �ir?	�TP�bs%-f��4�!�0����#cd2F�m��9��#cd2F&amp;cd2F&amp;cd2F&amp;cd2F&amp;cdeMd�,e \
c�e#���k��0O� vi���z'G���z"��;:G}�rG�dKf�?��t*�&gt;���~&gt;:��� �I^�NN?��?P+ \
.�!g�C�f���O�JwT�|��{ ���������������� \
��J����+�G}�D}&lt;:={�+�|�&amp;!%0a�O&gt;�d�]�*�d����u�����_Y����h�;�D�z�;1[[��������*��9@T�$�QY����~*x�FUo��u����umhx�p���
 6,7�����$�QW�"�Di��6�&gt;�`�����++2.m�,�J�6��&lt;��Mt+n�-�����'�v[h�ca-���s�{qX[ \
��{������y2�&lt;�(d�L"�9��q�@��Mo���5p���2&amp;�5L9��9�rI@�����$�1�Q�lua	���S;�(4�f�����L�9�� \
m#L�L!�� )a�h�4��,&gt;cm
��T[�Z��hn�6�������`���&amp;�yS� m�������4=�'��}w*��s�5p \
h+���{3��-�?F��������	��=��O�i�~��������]���	0O��-4��g���9#�����G�n|�����8;��~�9�W��x"�lhtxwf_]zm���v \
�q��$���O��]:a\[��VF�'�&gt;v�o��������vZf��������AL��a�O�����X�6��i`����r�4b��_G�� \
�`�{��]3��m1��n a�v&gt;�R��������i�*�"q1�����4��~�(g�O{�JW�e�;J \
����R(KQ�+�&lt;�	��dI}��"g+&amp;�V�����)%��i��Y��~|X��R'"��������W���2�r+�3�Q�|h�����rEVpik�	qBNf���|l���������cg�'�{
 �R`���O�2WJ�t|B���2P���N�p��F������V�	��c{��3HNO����4i��]�fz��N����1O?�Q/F� \
r�u��/�IV�o���,��@�Q`�mm���.`�7�9M��(����Ru}��D	���r&gt;������w-���5[,�%+�j_���B�(=3�.M�q�SL�
 ���`lD&amp;nor��c��;�y���9�N���z}��m�Q�����-V)�9C,4T���P�+�#&amp;���0��K8�nq#�@o��W�[W�#�]X \
FN��� �!�{ ��:�2�^-\7�'�5��]uS��S[}91���"'��T���r��3�k��BX ��8�B-`��/
pn�Us3K���P6F��_V(��HA�si13� �V�s�)H����05C�g ���ch���P���uF�X��Ax�)�1�G"�
�����
���5�q������	~�r�I���X�� d��#�71�Q��+-�I�`l����"&gt;�@�����	!:ku_�_��Z�h� \
�6�}+&gt;�V$���q&lt;���*�� �|U+��^3c�%� PYB�p lm�WD����������`� \
NV\eT�A�/P���V���R�{Bg|��1]�j�1c�����4;�oy������YYL�@����$R��Y���s����,��� \
                ��s
.4��'�x-u�$V�7]�UQ7�`q�VT(5bUL��

�A_�x�$�a��A�"�������u��Nt�j9$H .��cf���tql�"��#��ed&lt;�62�R% 1���
m���Gc�����xZ����[�������)�S%���&amp;�v- \
�IrD����$�S���������������.m�1��@���/�0�OT�b��	��x���dc��W�"1).i���a�o�5s�zM��(K�yB�!���\bL;5) \
�XG��X)g*�yqk����A(�kX�k\=�d���`�����Vte�������B+&lt;������vi� \
��.{l�{%&gt;�Eg�|�q��`{k,vl.k!t��'.���rL���&gt;e@��,]b��B�F_�Y \
�c������K���{�c'ry�0&lt;����� z��8��m��� #s�d� \
�����P|1�d��`��6��0���&gt;���n�A��v~h(E^r�� F�;�9�&lt;2�� \
�q"%p#��=q{P�����.�q���Yb� �O�#���&amp;�+�I�� I��v8��4���NO� \
qEJ#�n�+��j2M���vE�=8B�3��a�� �w�V�� �Qn5 \
�S�@h�hE�1(���	�*L1v���W~P�E����?{1D.�m,����&amp;M4B���4�����~������!�'�)�pic�dw7�A�`"We��/
                
-sh��V��N�3M4���I&amp;�f��\aa#����g��^�|�bab\�I \
xe�mS@�#{`f'k\���g&amp;$�We��Vc������4&amp;�&lt;A,	u\&lt;c�8,9��e�,K� e���}�|��P\8
m�{�e�[�;�����KS]�	3��03k��$M��AmJ����UUZ��P���fl��h���&gt;^s \
�xNS&amp;�Zo�D���Y��1��b:���i.�G�	h���$*(�Ils��&amp;��5�C�R�A���c+�������Lv�h+$�����1ne��
 �p���@�#������:�2%99�������-]��
�
A9�\Z��+�G�$�KK�h�������F�������,}�Ixt���P���eQ��$��G���;��S���/�._Z��e���K���c���c�^����Fc4�(��=[#'dN��&gt;�ru���b&gt;����v��������?� \
����io��}����9�����,��O����� ��0S. ����9?83?C�u���������_7�di�v� \
"X���j��7UR��!��C�S\Fl�4_)����i���|�����%TJk����O�#��@�������8fjI� \
)s0G&gt;�S�C�I������gU��"s�y�w*g���\x��D&lt;��_����hS�1����=H�a�b��H`��t�"�?� \
��_F ����?�!h=|�\��&gt;N��o�,��&amp;�^.�BL&amp;{AEMMo�K�L3���v"�������+XC~���H~�.��+����^|�11��c��M�~�?�a����S��u~�f��N��96=Y�����#s3���~/�����x��/��/,��y�	
 }����G��g���|)3�RN�KiM*���xz�W��v�vp
I~��(��V��'8&gt;9�5�i�������3M��q��2��
f�LL�p���J���������]&lt;����8D6�JS�FN,w1�1��g�5���E&gt;K}�U�+.������� \
���������|��A����I�c�X�Qi�p��&lt;�t��M���V6A ��C�v�}�?��w� \
�����@#_�%�R��������\~��N{xg������E+	4��YI���	�2V�h%��b���\����*��Ti \
��R���i����T�G7�~x��lf��������izq���@ \
Q�������!���������&gt;��C{L&amp;}���?����z1���H���0Y0�t�2*%F����=#W����4]^����4�P����fw����8���&gt;���?�xp�s,�}bs���� \
�O��4��q�M��  =�����q���������a�iA���p��iW�^�����K��q�2v[L��i����;a \
�v�BL6�0�C��e����C)�'�{��	�|�b�&lt;XH�#��t/�`-d���|�E&amp;c�R��h1�}3/��J 0@Dl��� \
��T��\��.%?$��R�.v&lt;X��al�a��1|��������m�(8��c&gt;e����� &gt;�*N7� \
)�B��,YLq���hCa�{�|�#����vIw \
�$��;�A����$���]�������rKk+�������G�����7�L�^Y�p���� \
x�O�Kv���YF�z����5v7���],v��&amp;���H�ga��_E#WnV2K�^gs���1p�����#�S�-�R��`�3������!
 J�V�/�IR�q��C����"3Cs�01A&gt; �� \
?N`l3Y�CY���NB�l�!��`��5����?��RB���������0��IQ \
��x�i�[���0���/���O��&amp;r���%���c���$j_Vr*���������&amp;Mi�V�}c��� \
z�(���s���x8�Z�H��Z�R�s�s�"�V�|U	���*u���J���y���$^x����|���O%G������7U� \
s��J���R�q�W*I��O*1"�H%z��Q�#{������ a�B���:���� \
�fK��J�w��)9�X5\���bx�yJ�p�S��b�R�Sb`�qJ��M	��)Q���)eD�iJ��3�r� �2�t�p��)�I� \
���������4�.%~��+(yn���fZ�D�R�.����YWau�r'x� ��W������s&gt;�f\�9�Q \
�8�L��(!&lt;�%�~��)��B"� C�U��_T!&amp;�U��|Ebr�D��my����4�}D�rQ�����*Fr�������{js^�
��O(9&amp;�%~��5r�|A)��&gt;F���T/P��&amp;��R��P���'S1&lt;q�T�H�1#WLR����sm%��Z���p.�y4Q��! \
yz*�PlP��I���=&lt;I�')&lt;��$�2��$�����9�_�"�r�%�Nbb�cS�CT�����j�r���P@��$&amp;�8M+\��4K \
j�����&lt;@��&amp;y�����p���4�T�Mi"���|�P{mJ��&gt;� ;�J��2	����4R��� ��������i���&amp;��� \
����&amp;2��TJH������'�����ohj`���7�Zzr@ \
���x���W'�I����C���?�����C��B�,�8�



&gt; On Jan 26, 2017, at 11:30 AM, Zack Weinberg &lt;zackw@panix.com&gt; wrote:
&gt; 
&gt; On Thu, Jan 26, 2017 at 2:15 PM, loki der quaeler &lt;quaeler@gmail.com&gt; wrote:
&gt;&gt; Hi -
&gt;&gt; 
&gt;&gt; Trying to configure 0.2.9.9's build with this command:
&gt;&gt; ./configure --with-libevent-dir=/usr/local/lib
&gt;&gt; --with-openssl-dir=/usr/local/openssl/
&gt;&gt; 
&gt;&gt; fails with:
&gt;&gt; checking for libevent directory... configure: WARNING: We found the
&gt;&gt; libraries for libevent, but we could not find the C header files.  You may
&gt;&gt; need to install a devel package.
&gt;&gt; configure: WARNING: On most Redhat-based systems, you can get headers for
&gt;&gt; libevent by installing the libevent-devel RPM package
&gt;&gt; configure: error: Missing headers; unable to proceed.
&gt; 
&gt; Please post the contents of config.log.
&gt; 
&gt; zw
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126201001</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2017-01-26 20:10:01-0400</timestampReceived><subject>Re: [tor-dev] ./configure in 0.2.9.9 is ~broken?</subject><body>

On Thu, Jan 26, 2017 at 2:36 PM, loki der quaeler &lt;quaeler@gmail.com&gt; wrote:
&gt; 
&gt; Attached is a .tar.gz which has the config.log from the 0.2.8.12 configure and one \
&gt; from the 0.2.9.9 configure.

Thanks.

Both configure scripts failed to find libevent headers
(event2/event.h, event2/dns.h, event2/bufferevent.h) -- but that
wasn't a hard error in 0.2.8.x and it is in 0.2.9.x.  I believe this
means the libevent on your system is too old, going by this entry in
the changelog:

  o New system requirements:
    - Tor now requires Libevent version 2.0.10-stable or later. Older
      versions of Libevent have less efficient backends for several
      platforms, and lack the DNS code that we use for our server-side
      DNS support. This implements ticket 19554.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170118034323</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-18 03:43:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: A Name System API for Tor Onion Services</subject><body>

Always wondered how naming is relevant,
for example, IPv6 with OnionCat as a deterministic
form of naming. So now we propose a 'naming' layer.
Which should not also support IPv6 addressing?
Is not IPv6, subsequent to the 80bit scheme,
merely a name on top of onions? ie: If we develop
a 'naming' layer, can we not develop an IPv6 layer?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170118051344</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-18 05:13:44-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: A Name System API for Tor Onion Services</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 12 Oct 2016, at 09:29, Jesse V &lt;kernelcorn@torproject.org&gt; wrote:
&gt; 
&gt; On 10/11/2016 12:53 AM, Jeremy Rand wrote:
&gt;&gt; It's also worth noting that it's been hard enough to get IETF to accept
&gt;&gt; .bit (that effort stalled) -- adding a bunch of other TLD's would
&gt;&gt; probably annoy IETF significantly (and destroy whatever good will exists
&gt;&gt; at IETF right now), and I fully understand why this would annoy them.
&gt;&gt; 
&gt;&gt; I'm not really sure what the right mechanism is for a user to specify "I
&gt;&gt; want this request to either use TLS or be resolved to a .onion record"
&gt;&gt; (which seems to be the primary use case here).  Does anyone have
&gt;&gt; suggestions?
&gt; 
&gt; As I understand it, the spirit of the naming system API is to resolve
&gt; $meaningfulName to $randomAddress.onion. It seems pretty clear its
&gt; focused on A records, but the naming system can support subdomains and
&gt; CNAME records if it likes. My approach with OnioNS is to simply use a
&gt; none-ICANN TLD, which is currently ".tor". There's a Trac ticket on
&gt; which TLD I should use, but it seems most intuitive to use something
&gt; obvious. Someone suggested that we continue to use .onion, but anything
&gt; that isn't 16 chars of base32 should be resolving using the naming
&gt; system. That seems like it would be more confusing. A new TLD seems more
&gt; intuitive.

Yes, and re-using .onion would make (some) 32-character names invalid,
and post prop-224, (some) 53?-character names invalid as well.

This is an undesirable property.

I can also imagine attacks taking advantage of this confusion.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYfvmIAAoJEEUMun+WjwlLpNQQAIBjDsgKqxC3CGiXdGimZShb
9JljQYwZRXpMZphxg6zJHpG+nIREw1eaMFwJZhGujzrSKAl8qAjaXN91MpvrX06g
HRCnjtIZrlohPlCLgxFk/4EGvGKl3vpF5UVvueC8RBeen6PAjwROGLfXoOWhCH9J
0fRd39Z+O32JwqMAK5ALpTHJAwUnw1fCAoch70K57co6UTiIUXDsoJPPqLcmdSp3
Rw+/tNl9aT9IF8KmSikNsnnrmuj43TUSxsLriFCcuEb61rSlznxfBATI1YctIyQ7
rBC+k7Nd+c/zMYX/HGsOeZmy9gkYdcFKdIFy3Q9OgrvdOs/sVSaBc9V8ozVXhWBY
QXeO2zHGCVmYzNTRMOoIYSIf/KL39HgeK+5IL18QGgQRtGfiQ29rnTpTc2hizQQM
FoZ82Bh+WaVHpuE8EV24JURMLfrHWEow+tpFpoT+bo15t0aFaee/khcsTxg4lLAq
Yhgf+nkdfBDg8g4nx0GTe0/PCeyKFckmThLCwAtYwp9DewVz/tUEWifFYRLqWyy5
3FpWFmGY+CLDk4DBvGL/ZI4dW9RwTIxLozioisIdrZlSZHzS9i9q8sS9zzFo8vbH
Fuzh4O46pLaLz/C+02suj5R9tFaIzmTWoNRiPInHsCFOiG830bkXUZ1qhJsbqjhb
4+kwjuJ07wJo1NX3liQn
=b+30
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170118083155</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-18 08:31:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: A Name System API for Tor Onion Services</subject><body>

grarpamp &lt;grarpamp@gmail.com&gt; writes:

&gt; Always wondered how naming is relevant,
&gt; for example, IPv6 with OnionCat as a deterministic
&gt; form of naming. So now we propose a 'naming' layer.
&gt; Which should not also support IPv6 addressing?
&gt; Is not IPv6, subsequent to the 80bit scheme,
&gt; merely a name on top of onions? ie: If we develop
&gt; a 'naming' layer, can we not develop an IPv6 layer?

What do you mean by "develop an IPv6 layer"?

A naming layer would provide human-memorable names; IPv6 addresses are
not supposed to be human memorable.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170119053422</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-19 05:34:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: A Name System API for Tor Onion Services</subject><body>

On Wed, Jan 18, 2017 at 3:31 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; What do you mean by "develop an IPv6 layer"?

prop224 destroys the one to one bidirectional binary mapping that
makes onioncat possible, and fails to provide a replacement for it :-(
Any "human naming" layer (whether under prop224 or current onion) is
not necessarily (is not) one to one bidir binary, it's just a name-value map,
a forward lookup table, for which under that destruction, a 'name' could
just as well be an IPv6 address string. 'name', 'label', 'address'... all the
same in this case. Abstracting the bidir part, and authenticating the
previously one to one nature, is the challenge.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170122225409</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-22 22:54:09-0400</timestampReceived><subject>Re: [tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 23 Jan 2017, at 09:16, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; how bad is it to simply ignore ORPort/DirPort address mismatch log entry
&gt; on a relay behind (1:1) NAT?
&gt; I assume tor figures out the public IPv4 address anyway, no?
&gt; 
&gt; The IPv4 ORPort address 192.168.1.1 does not match the descriptor
&gt; address 1.2.3.4. If you have a static public IPv4 address, use 'Address
&gt; &lt;IPv4&gt;' and 'OutboundBindAddress &lt;IPv4&gt;'. If you are behind a NAT, use
&gt; two ORPort lines: 'ORPort &lt;PublicPort&gt; NoListen' and 'ORPort
&gt; &lt;InternalPort&gt; NoAdvertise'.
&gt; 
&gt; I'm explicitly specifying (private) IP addresses in ORPort/DirPort (and
&gt; OutboundBindAddress) lines to avoid binding to the same ports when
&gt; running &gt;2 instances (with &gt;1 public IP).
&gt; 
&gt; https://github.com/nusenu/ansible-relayor/issues/101
&gt; 
&gt; 
&gt; thanks,
&gt; nusenu

What are the exact torrc lines?

I don't think this warning should be triggered in the setup you
describe, but I'll need to re-read the code to check.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhTgRAAoJEEUMun+WjwlLp0AP/0yBGFJiMdMWoMeD07fK95MK
0h2+dLGEo8h8tGE8uBXcII61Y440rBGWSWecADPHB0NKyxc/ZhQcPNfVsEm6+sdC
DinwqUIlf2mP75CMWFkkDPra8lg1N6W8sWuJfZwYkn8Vavvi1KIVYKbZswgDXSq1
sfov0BD575RBliFNCJvnBEHcke241QmJCq1nBKCzSRkxbVBky6Ksl6T+upS1v0G8
rweVvAFhhj4FoTATGs4xrECbr0CBlie8iDXxxID7NNuilGo/GGb29psPNxuEfciD
pcrRA3CjqKqCeaZqoHZU5aBGsiD4mA7bmAV9l2x3mRypggsUmW97hlAujsgeDz66
+HbwxXEbWQGoHIzIAfn37s6fOTxfEIKkeAl6LWQbFL9lueFf8qIDEgOyID2BSdyc
U6ZGEVpPYV8/QleDo53j+hbIKf1BJbcK+ULGHhY6ElI0hLXqEr2xaqQLsJdOvq6F
KlhB21KLFrxcB/PbAyCwDgj5sUG2W2SELRnFlSRiRYPsBU5PvwTWIByYs3ksfoe/
1ev8O+eAQJ1uUlrNHnnWEg5lKj3yvluNYgvAA9S8qzqAz+DSnVqnDfyTLs2OWIQa
nux+1m8mYtFC0UrsfqpEwtbfIrHUrCXjZmW4RdUQj4oMs0xucF7kCN8gqYy6IcZ9
VIDJsA0IyvWC/jYpGUua
=NfZk
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124014218</emailId><senderName>Kevin Beranek</senderName><senderEmail>kevin@kberanek.com</senderEmail><timestampReceived>2017-01-24 01:42:18-0400</timestampReceived><subject>Re: [tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

I can answer your questions because I'm the one that filed the issue
previously referenced by nusenu.

&gt; What are the exact torrc lines?

One relay where I see these log messages has a public address of
51.15.48.254 while the relevant torrc lines are as follows:

ORPort 10.8.169.135:443
ORPort [2001:bc8:4700:2300::25:c07]:443
DirPort 10.8.169.135:80
OutboundBindAddress 10.8.169.135

&gt; I don't think this warning should be triggered in the setup you
&gt; describe, but I'll need to re-read the code to check.

I'm not sure of the exact network setup because it's not something I
have much visibility into, but the affected relays have a single
private IPv4 address and a single public IPv4 address and seem to
behave like a 1:1 NAT as far as I can tell.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170124030609</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-24 03:06:09-0400</timestampReceived><subject>Re: [tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Jan 2017, at 12:42, Kevin Beranek &lt;kevin@kberanek.com&gt; wrote:
&gt; 
&gt; I can answer your questions because I'm the one that filed the issue
&gt; previously referenced by nusenu.
&gt; 
&gt;&gt; What are the exact torrc lines?
&gt; 
&gt; One relay where I see these log messages has a public address of
&gt; 51.15.48.254 while the relevant torrc lines are as follows:
&gt; 
&gt; ORPort 10.8.169.135:443
&gt; ORPort [2001:bc8:4700:2300::25:c07]:443
&gt; DirPort 10.8.169.135:80
&gt; OutboundBindAddress 10.8.169.135

Is the Address option set on this relay?
Maybe we need to change this part of the warning:
&gt; If you have a static public IPv4 address, use 'Address &lt;IPv4&gt;'

&gt;&gt; I don't think this warning should be triggered in the setup you
&gt;&gt; describe, but I'll need to re-read the code to check.
&gt; 
&gt; I'm not sure of the exact network setup because it's not something I
&gt; have much visibility into, but the affected relays have a single
&gt; private IPv4 address and a single public IPv4 address and seem to
&gt; behave like a 1:1 NAT as far as I can tell.

If the address option isn't set, what does the relay identify as its
public IP address in the logs?

Look for log entries about testing ORPort or DirPort reachability, or
any log entries containing its public IP address.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhsShAAoJEEUMun+WjwlL8h8P+gKEcdOSkIUOvmPQb+HQKLLJ
1zTZPQSvzK6KkQkn8qGEsHQvlmPI/lAmfRTEaWNrTm0CppBEGZoGluw5M9WCzksz
mLmmnGfh+haC+TIu2RwOT6e8DEaAMRMU/ZcJCxA2sgNBr3jcRvk80ndT4i33vt/e
QuJPLNUyPH+S/EmhAc88gq3X+1BK8S+K5ktrf7qXYizfXKlR/kRsPSBVpGzozCJw
5XSYK5oi7ew3GLFV69X1XnJh8woCI/eATcsmFI1mJUqu+tXctcpGRw3jnXc4Clsy
pPr1ixptA7hoDlxg2IF0+1wd1v+T2M0fjkmur2w5J+rtxOy00UOs2ga3e+1ig0CG
e93u8vtovK9NnrnSUtA8GgDN5rjaRaSex5SUATtU5YhZ09o6UDX17Qq3tGKR0LdA
0OAHc87cuagW2OBry8nww8A3JzfrdCf8fQUmdPXKgUG0CVVBQ+KCfisLgqEepR6Q
8CnXcb0mk6g8tyDQzfOorljSX6qYCuOWNXk1pasq+4w1I8o2oJXhOeyFX457VrZe
HFBTFR5np3thYBAvdQ0QmDwzHY6C3wHiPNKWhCMK7F8I7p1agtdL44qS/w6+8jsz
so6IxEZ1dEtrAMbs8kta4SUA/aNdeLreJv8zYM9sXL6hoa+bmN+qnNMY7lo1t7Mv
Qp/HcBBm+S/E1LHT33yJ
=h+/e
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124033920</emailId><senderName>Kevin Beranek</senderName><senderEmail>kevin@kberanek.com</senderEmail><timestampReceived>2017-01-24 03:39:20-0400</timestampReceived><subject>Re: [tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

&gt; Is the Address option set on this relay?

Address is not set because it is generated from this template, which
does not set Address:
https://github.com/nusenu/ansible-relayor/blob/dev/templates/torrc.

&gt; Maybe we need to change this part of the warning:
&gt;&gt; If you have a static public IPv4 address, use 'Address &lt;IPv4&gt;'

I'm not quite sure what you're proposing.  Are you suggesting dropping
just the "and 'OutboundBindAddress &lt;IPv4&gt;'" or the rest of the
message?

&gt; If the address option isn't set, what does the relay identify as its
&gt; public IP address in the logs?
&gt;
&gt; Look for log entries about testing ORPort or DirPort reachability, or
&gt; any log entries containing its public IP address.

It definitely identifies the correct public IP address as you can see
from these logs:

Now checking whether ORPort 51.15.48.254:443 and DirPort
51.15.48.254:80 are reachable... (this may take up to 20 minutes --
look for log messages indicating success)
...
Self-testing indicates your DirPort is reachable from the outside. Excellent.
Self-testing indicates your ORPort is reachable from the outside.
Excellent. Publishing server descriptor.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170103044550</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-03 04:45:50-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 29 Dec 2016, at 09:31, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt; 
&gt; On 12/28/2016 12:40 PM, Yawning Angel wrote:
&gt;&gt; On Wed, 28 Dec 2016 12:19:17 -0800
&gt;&gt; Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt; And when other processes connect to the Tor control port and run
&gt;&gt;&gt; create_ephemeral_hidden_service, those onion services wouldn't be
&gt;&gt;&gt; non-anonymous?
&gt;&gt; 
&gt;&gt; They'll be non-anonymous (as in, the options are global).  This also
&gt;&gt; will not work if there is a SOCKS port configured.  Basically,
&gt;&gt; unless you are launching your own copy of the tor daemon, just for
&gt;&gt; non-anonymous HSes, it's a terrible idea to use these options in
&gt;&gt; general.
&gt; 
&gt; Thank you, this is good to know!
&gt; 
&gt; For my specific use-case, it would be great if you could pass an
&gt; argument to ADD_ONION that makes that specific onion service
&gt; non-anonymous, without changing anything globally.

What is the OnionShare use case?
What are the anonymity expectations of OnionShare users?

&gt; But for the time-being I won't add support for non-anonymous onion
&gt; services to OnionShare.

I can imagine an implementation where a one-shot single onion service
is used to transfer one file. But in this case, the user's IP address is
available to:
* the (service-chosen) introduction points, and
* the (client-chosen) rendezvous point(s).

This is true whether the single onion service is a separate tor instance
(the only mode permitted by the current implementation), or a service
making single-hop connections in the same tor instance as services
making multi-hop connections.

Here's a simple attack that de-anonymises some fraction of users using
this implementation:

1. Run some number of HSDirs and relays
2. When a new descriptor is received at your HSDir, set up a rendezvous
   to that service using your relay as a rendezvous point
3. If the IP address connecting to that relay is not in the consensus,
   it is probably a single onion service

(This attack is not possible with next-generation hidden services,
because HSDirs cannot decrypt the descriptor without knowing the
onion address.)

The single onion service implementation is designed to protect against
accidental exposure of onion service IP addresses via attacks like this.
It's designed for use cases where an expert administrator specifically
decides to disable responder anonymity, typically for performance.

It has the following semantics:

* the single onion service mode is global: it affects all services on a
  tor instance

If services can be correlated via side-channels (such as uptime), the IP
address of a single onion service could be linked to an anonymous
service on the same tor instance. (If multiple tor instances are running
on the same IP/machine/network, they can still be correlated, and this
mitigation does not affect that.)

* the single onion service mode can not be changed at runtime

This protects against linking past and future service connections, some
single-hop, some multi-hop.

* once a hidden service key (= .onion address) is generated in a
  particular anonymity mode, it can not be used in the other mode

This protects against the accidental re-use of an anonymous key in
single onion service mode, linking that key to an IP address.

&gt; On 29 Dec 2016, at 07:24, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; ...
&gt; I thought those torrc options could only be set prior to tor starting
&gt; up (like DisableDebuggerAttachment), but on reflection the manual
&gt; doesn't say that so maybe that's not the case?

These option changes are not allowed at runtime, because apart from the
linkability issues, there is no way to change the number of hops in
existing hidden service connections, and the semantics are ill-defined:
It's not possible to turn a single-hop connection anonymous, and it's
not safe to make an anonymous connection single-hop.

And Damian is right: we have not been keeping
options_transition_allowed() in sync with the tor man page for some time.
Here is a fix:
https://trac.torproject.org/projects/tor/ticket/21122

&gt; However, seems you also
&gt; need to set 'SOCKSPort 0'...
&gt; 
&gt; https://www.torproject.org/docs/tor-manual.html.en#HiddenServiceNonAnonymousMode
&gt; 
&gt; If you call the above SETCONF does tor give any indication that you
&gt; need to set the SOCKSPort too? If not then it feels like it should
&gt; since that's pretty unintuitive.

When you set the option on startup, an appropriate warning about
SocksPort is issued. (Any SETCONF on these options fails
because changing them is not allowed.)

We decided not to disable the SOCKSPort automatically, because we
thought users might not like their SOCKSPort disappearing when an
unrelated option was set. Instead, we updated the documentation:
https://trac.torproject.org/projects/tor/ticket/20487

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYayx+AAoJEEUMun+WjwlL58EQAIcJT2lyEks5WV7H89F+HT38
2nmpocuR+eQdB6EXOnmvlyEnpCC6g4gUQQnSepZY3aESQbiu4RBzU/CA8Oid89V1
HY5uq8YSHKtOjrLweWgLzSQLMoR6hSeSFgAvRbkGWLVKgu3Q2bJGTngFyzZsUGPb
Zi6OAouQ0YNTOu09Vv9RUPAdE4vJ47bh1Qq9UG0VQi267p5M/WrvtAibEx6Lo4sG
PqmCXbtHHz+1m94sZuaDjuGKMUGBfUqsQRdxR41qpNukzpHtYbKg1UufnGE2YXWt
3e9NqylwXTrCwDHxBxO8RygTLxCh+S1SSg6En5+qhdPaWENYa/ZhJpggeJL0cxZC
lK6489mQuCVbFU3pT6sukwJrHvViRQzJk+mpKopRZ0EDe7wEIloHAh6C4Gk3MAb1
U5L0Ua60Q3wAJwzzBsCoCc/pLfxuV2tNXORZeFcqvIRjqXS5/d1Ir+E3le1i3tC3
ez9IQtj3nEQaJETduAGLJGhmdwAvObMtx36+Hm7gFjUFLoQbbJTIrOEFbBrMmbpj
srh1twnriK5j57S9NvHPf45vF7nfIdfOSbsj9rTnqD8RWN5inhmJyqAbARZQebdA
Eg3b8Uj3LU/rC0bTChxeQUsv3OhBV/oJQy+jYF4m3gLzGSJ+0VJsWtdC2fncbaM4
+uCfjB9OzbA0kZwWLhaJ
=+j9r
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170104013933</emailId><senderName>Micah Lee</senderName><senderEmail>micah@micahflee.com</senderEmail><timestampReceived>2017-01-04 01:39:33-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

On 01/02/2017 08:45 PM, teor wrote:
&gt;&gt; For my specific use-case, it would be great if you could pass an
&gt;&gt; argument to ADD_ONION that makes that specific onion service
&gt;&gt; non-anonymous, without changing anything globally.
&gt;
&gt; What is the OnionShare use case?
&gt; What are the anonymity expectations of OnionShare users?

OnionShare is a tool to send files over the internet, so it can be used
any time there's a need to do that. The security expectation is that the
traffic can't be eavesdropped on by any attacker, but the anonymity
expectation completely depends on the specific use case that it's being
used for. I think it would be cool if there were an advanced option to
let people use it to create non-anonymous onion services (the next
version will include an advanced option to create stealth onion services).

For example, maybe I want to use OnionShare to send my friend a 2GB
video clip, but anonymity doesn't matter to me. My friend and I already
know who each other are, and I'm not concerned about leaking what we're
doing, I just don't want to leak the plaintext video footage. In this
case, I might want to use a non-anonymous onion service just to make the
file transfer faster.

For another example, pretend I'm a wanting to send a classified Word
document to a journalist. In this case, I really care about anonymity,
so I wouldn't want to use the non-anonymous option (if the journalist is
tech savvy enough to edit their torrc file, I'd probably want to use a
stealth one though).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170109221736</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-09 22:17:36-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 4 Jan 2017, at 12:39, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt; 
&gt; On 01/02/2017 08:45 PM, teor wrote:
&gt;&gt;&gt; For my specific use-case, it would be great if you could pass an
&gt;&gt;&gt; argument to ADD_ONION that makes that specific onion service
&gt;&gt;&gt; non-anonymous, without changing anything globally.
&gt;&gt; 
&gt;&gt; What is the OnionShare use case?
&gt;&gt; What are the anonymity expectations of OnionShare users?
&gt; 
&gt; OnionShare is a tool to send files over the internet, so it can be used
&gt; any time there's a need to do that. The security expectation is that the
&gt; traffic can't be eavesdropped on by any attacker, but the anonymity
&gt; expectation completely depends on the specific use case that it's being
&gt; used for. I think it would be cool if there were an advanced option to
&gt; let people use it to create non-anonymous onion services (the next
&gt; version will include an advanced option to create stealth onion services).

I think it could have unexpected consequences for users, too.

When we were implementing Single Onion Services, we looked at many
differed use cases. But I don't think we considered the OnionShare one.

Our key concern was:

How do we introduce this new feature, but prevent users from
accidentally enabling it and exposing themselves?

&gt; For example, maybe I want to use OnionShare to send my friend a 2GB
&gt; video clip, but anonymity doesn't matter to me. My friend and I already
&gt; know who each other are, and I'm not concerned about leaking what we're
&gt; doing, I just don't want to leak the plaintext video footage. In this
&gt; case, I might want to use a non-anonymous onion service just to make the
&gt; file transfer faster.

Ok, so you trust your friend with your IP and onion address in this use
case.

But do you also trust the entire Tor network?

For example, I run a Tor Exit, and it is regularly subject to DDoS
attacks. Single Onion Services could be targeted by similar attacks.
(But it's less likely, because they do not send unencrypted traffic.)

Single Onion Services leak the service IP address to at least:
* 6 HSDirs,
* 3 Introduction Points,
* 1 Rendezvous Point,
and all the networks between the service and those relays.

(The nodes are chosen at random for each Single Onion Service
connection, so the chance of selecting a bad node or traversing a bad
network rapidly approaches 100%.)

They also link the IP and onion address at:
* 6 HSDirs.

(For next-generation hidden services, the situation is slightly better:

The IP leaks are the same, but the IP and onion address can only be
linked if the HSDirs already know the onion address.)

How would you document an advanced "Single Onion Service" option to
explain this loss of anonymity?
(We struggled with this.)

Is the speed increase for some users who know what they are doing, worth
the risk of other users losing anonymity unintentionally?

&gt; For another example, pretend I'm a wanting to send a classified Word
&gt; document to a journalist. In this case, I really care about anonymity,
&gt; so I wouldn't want to use the non-anonymous option (if the journalist is
&gt; tech savvy enough to edit their torrc file, I'd probably want to use a
&gt; stealth one though).

Perhaps the best option is to restrict single onion services to those
tech savvy enough to edit their torrc file?

Although use of a text editor does not necessarily imply a deep
understanding of speed/source IP anonymity tradeoffs.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYdAwAAAoJEEUMun+WjwlLptwQALlcIH3jfWStqS/GEczlTjmm
nLTMWbvZHeViSu4dXfKxHGJ02vL1Rr0XYtzh1IPJExh9cevet3wOCiJrpQbinP7C
rVvYaifzOe+ZeJJYOaHkDNd0Fz7enq8sTQGg4EXLRfHUi1z4UDxm/NhvSDNMAkgp
8sed8QE/mK5XnJJwnZf/s826312kQA/Mjv1b2f9k/mZ5erKmhiSgD3OD5SybP5NX
5Dj2NNNUq7WaBieI9XOvFyWFf5fqOUJfk/zB1o2Y1HC6yZqkShxPpWuXqiYybo0E
EFTZcDNf6nTvSep4i5dfNTF+ZxVlASYXbEKEJLTNNB4UZdFh0fmVofRCbnpvjGjc
Vvd+lxw9UYgSRkKxUNKMkA2XlmWtBUxLKFLysGjDQu18pxvXR3sREuMcehPiFx2u
zVN7KZpTaeX6mdKezbG8rD1ahXohOtJqtiEj4oJV9yujehYqoQWZgBOoNgXgpumb
6XHgqjW7ykbFcfGLIqRncgiUJc3WY4VoH+6PSLgKkzNuk8rM6hzFHS0byrIdmPVK
TjhecVQh/JuUij6svU3jbhH//VKuvUqem7vZyJMlo7OVB+AOQwzxFbxtB3tJdOuB
NLncYokMucRSjC+P1hL1R356cSTWJ1EA1js/riLMDxl7BvPtFzZ9p+NBbuJQUNcZ
Kv6U6UKaB/ma3fl68mI5
=jh/P
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170110230406</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-10 23:04:06-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2017, at 09:17, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; Single Onion Services leak the service IP address to at least:
&gt; * 6 HSDirs,
&gt; ...
&gt; 
&gt; They also link the IP and onion address at:
&gt; * 6 HSDirs.
&gt; 
&gt; (For next-generation hidden services, the situation is slightly better:
&gt; 
&gt; The IP leaks are the same, but the IP and onion address can only be
&gt; linked if the HSDirs already know the onion address.)

I'm sorry, I got the HSDir part of this wrong.
Single Onion Services build a 3-hop path to HSDirs, to avoid selective
denial of service by HSDirs.

The connections to Intro and Rend points are one-hop, and the single
onion service IP is available to them.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYdWhmAAoJEEUMun+WjwlLyxAQAKSusZ8/Ma5h2T0mUK2UN0lN
XQtG7l9k9hsAqSamUtkZ25Bi0zVQCEUYV3J4nHiGeoL8Npa3fo+okL0b684Pe7gO
bpkFRuXKlG7u4xSo06nTluWK+MZi36cvBfwhSpWh9qXa9aGUXhb58y0XrHVNH59f
lugmjCdRDq++P0ZfZqepmmJ3rV1AiswhHU4IE8IUQP6v2gsZt88OkIKjb9E8r3bR
WzdGVWOkswHKiJDxZsHg0tyOKqvzF9hnbqEWNrUm2f/8kxjIdFRsXK1IFbX0Wyuz
SQkK/Z6+SsQepRAFb5QQCtaIzZe058MJGj3xfZ/YrOxiHTtK0FNsbTGMmdqk4MM7
A1hyIrP6FChYuYZ+bIXmeXSY0IHbLJSPJ6waLAJ6fu7bg7MDyaLTOGwy/IKGgidn
hK6/bKouH5/dNUPbgAt7ZAQZrqI+ylZQoIb+XA9PyfVTMiO8G+Zhc6MEFDo5Rhha
YXwOnv27C0R9SMsCp3njXRB8+69l7qDHZJRvKf7gZFFTOGqhbc4lu+k2AFK8r+QM
wuJP0aejc2nbj4Wucpd6bcNKyurxv+Vh34w2pU+L7aIHIaosVjXG9aGvS70knv8y
3mqvAMK8RNr6kN1onVfcUIOx3zRIgWibmEkwrfNEyjm6CXi6yz8G1A6g01PEQ7L+
TNKh2E/5uE7hkiLLFKMQ
=I4r7
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170123000321</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-01-23 00:03:21-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader</subject><body>

On Sun, Jan 22, 2017 at 03:53:16PM -0800, Katherine Li wrote:
&gt; I would really appreciate user testing on GAEuploader. You can download it at: 
&gt; https://github.com/katherinelitor/GAEuploader/releases
&gt; README: https://github.com/katherinelitor/GAEuploader
&gt; Tor wiki page, containing step-by-step screenshots of how to use:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader

I would like to echo this call for testing. GAEuploader automates the
process of uploading the meek code to App Engine. If you already have a
Google account, it's pretty easy: the program will open a browser so you
can authenticate and accept the App Engine terms of service, then upload
the code under a domain name you choose. At the end, GAEuploader prints
out a bridge line to paste into Tor Browser.

The difference between this and the old meek-google is that the App
Engine code you upload is just for you, not shared with anyone else.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170123005929</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-23 00:59:29-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 23 Jan 2017, at 10:53, Katherine Li &lt;katherineli.tor@gmail.com&gt; wrote:
&gt; 
&gt; Hello Tor-Dev Community,
&gt; 
&gt; GAE(Google App Engine) uploader has just released v1.0-beta. GAEuploader enables \
&gt; clients to set up their own private meek-google in one easy step: just run it and \
&gt; paste the bridge line into Tor Browser. 
&gt; Background information: Meek is pluggable transport that uses domain fronting. \
&gt; Meek-google got suspended, but clients can set up their own Google App Engine app \
&gt; and configure their Tor Browser accordingly. However, the process of creating and \
&gt; deploying the Google App Engine can be confusing. GAEuploader significantly \
&gt; simplifies this process for clients. 
&gt; I would really appreciate user testing on GAEuploader. You can download it at: \
&gt;                 https://github.com/katherinelitor/GAEuploader/releases
&gt; README: https://github.com/katherinelitor/GAEuploader
&gt; Tor wiki page, containing step-by-step screenshots of how to use: \
&gt; https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader 
&gt; *GAEuploader runs on Mac or Linux, but currently does not support Windows.
&gt; *GAEuploader uses the Google Cloud SDK. If you are interested in how GAEuploader \
&gt; works, the README contains the list of commands that were run. 
&gt; If you have any questions, feedback or bug reports, please email me at \
&gt; katherineli.tor@gmail.com. I will respond promptly.

Hi Katherine,

Thanks for this project, it's great to have automated personal meek
deployment.

I have questions about the compute/zone zone3 and --region=us-central
settings:

Is this the cheapest zone/region for computation or bandwidth?

If I am not in the US, would it be faster or cheaper for me to use a
local google data center?

Which tor bridge does the traffic for these instances go through?
(Or does this set up a tor bridge as well?)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhVVxAAoJEEUMun+WjwlLjFMQAJeYPM58CYIiteDGzsEg1Fss
dLq0A0sdJpHMZpbH76kAvrYSQxRNTS1a0dsELMzuSbsYTJQeQexwVrxDerVSR665
PAKuy/wYcryazhrZCOSoLGsjaCmLGaS0DLSw3jGCDMl6Ytsyb+Uh6ORpF+ls/crw
obU6juDJibMiLRx54q2pXrianku5VTamCOx9fu7XMpMLN31fnzjr6wMgCrmXNcnF
XkhOrcNnGIe3rUe+7YkHYYy4Rr3SprhfqWmROPo5cEQDeS7l0ve1JGUNhbKkW2oK
E+HvU+W1MmpPsp36LROaFxSQpwIDvGB9kVCCGPczaojPmq9BCtX4jrdMuzCLFlGv
IQGQjPIzNFCInqqWj9koVjJsDe/tcxt28upYY3ICAi0B+RWdpLuLTwt/4gQFvnt1
x1p5cVK04W77Ye8TVLVue6TA9agWK4fzczquA4XACTz92QKwlwWsIGkkiRNDvaBr
2iVap4ocyrtvCbtq3k11hYcaXthlzL5ei/tXAaY/LL4esTLqHsMO3tYe9Ex9IIU4
XlT7IHHj/ClbRY5d6yfjxD8Edq7bWriTo/5t+6t23+I6LTJHQ6EGfJBQMqf4dwZ3
+x7b4rR42Z9SGPVbQju5pGLfrZ8flgL7jaAX7+NWH+ccDZe9VUdT2xXufymKV5gz
VspMtPnTh5cdMsa0poKG
=IH0U
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170113185429</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-01-13 18:54:29-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

On Fri, Jan 13, 2017 at 09:29:25AM -0500, Nick Mathewson wrote:
&gt; Hi, all!
&gt; 
&gt; This is a draft for a tor long-term support policy for the program
&gt; "tor". Please let me know what you think.  It's based on earlier work
&gt; and surveys, but it isn't final till we say it is, and it needs more
&gt; commentary.
&gt; 
&gt; Please keep in mind that dropping support for any old release is an
&gt; inconvenience to some nice busy people, and that supporting any old
&gt; release is an inconvenience to other nice busy people. Therefore,
&gt; "don't inconvenience anybody" is not a viable goal here: instead we
&gt; are stuck with a balancing act.

I like this plan.  Is there a reason 0.2.5.x in particular was chosen
as the retroactive LTS?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170113210049</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-01-13 21:00:49-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

On Fri, Jan 13, 2017 at 1:54 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; On Fri, Jan 13, 2017 at 09:29:25AM -0500, Nick Mathewson wrote:
&gt;&gt; Hi, all!
&gt;&gt;
&gt;&gt; This is a draft for a tor long-term support policy for the program
&gt;&gt; "tor". Please let me know what you think.  It's based on earlier work
&gt;&gt; and surveys, but it isn't final till we say it is, and it needs more
&gt;&gt; commentary.
&gt;&gt;
&gt;&gt; Please keep in mind that dropping support for any old release is an
&gt;&gt; inconvenience to some nice busy people, and that supporting any old
&gt;&gt; release is an inconvenience to other nice busy people. Therefore,
&gt;&gt; "don't inconvenience anybody" is not a viable goal here: instead we
&gt;&gt; are stuck with a balancing act.
&gt;
&gt; I like this plan.  Is there a reason 0.2.5.x in particular was chosen
&gt; as the retroactive LTS?

I think it's because of the volume of relays running Debian Jessie,
and because it's easier to tell really-old-version users to upgrade
than to tell them to downgrade.

Our earlier draft stuff is all here: https://pad.riseup.net/p/tor-lts
, including an attempt to figure out what versions exist where.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170116091245</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-16 09:12:45-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

You may encounter special justification to
extend support for last branch that still supports
pre-prop224 onions. There is a *lot* of code / community
built on those. Darknet fora have mentioned possible
maintenance forks as such if need be.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170116164552</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-01-16 16:45:52-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

On Mon, Jan 16, 2017 at 4:12 AM, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt; You may encounter special justification to
&gt; extend support for last branch that still supports
&gt; pre-prop224 onions. There is a *lot* of code / community
&gt; built on those. Darknet fora have mentioned possible
&gt; maintenance forks as such if need be.

There's no current plan to drop support for the old .onion addresses
any time soon, though I sure would hope that people start migrating
not too long after the new ones are available.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170117222200</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-17 22:22:00-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; == Plan for current releases ==
&gt; 
&gt; 0.2.4.x, 0.2.6.x, and 0.2.7.x, will all receive at least one more
&gt;    stable release.  Support for them will end on 1 August 2017.
&gt; 
&gt; 0.2.8.x will be supported until 1 January 2018.
&gt; 
&gt; 0.2.5.x is retroactively declared an LTS release, and will be
&gt;    supported until 1 May 2018.
&gt; 
&gt; 0.2.9.x is an LTS release, and will be supported until at least
&gt;    1 January 2020.

I'm glad to see such a policy.

Maybe be more verbose on when tor dir auths plan to remove EOL tor
relays from consensus?

+---------------------+
| relays_published    |
+---------------------+
| 2017-01-17 07:00:00 |
+---------------------+
+-------------+-------------+-----------+------------+--------+
| tor version | cw-fraction | exit_prob | guard_prob | relays |
+-------------+-------------+-----------+------------+--------+
| 0.2.9       |        33.3 |     37.76 |      32.53 |   1917 |
| 0.2.8       |        27.6 |     27.87 |      28.05 |   1582 |
| 0.2.7       |        10.2 |     10.47 |       9.12 |   1008 |
| 0.2.5       |         9.5 |      7.15 |       9.77 |   1219 |
| 0.2.6       |         8.6 |      3.02 |      10.91 |    492 |
| 0.3.0       |         5.8 |      8.99 |       5.06 |    174 |
| 0.2.4       |         4.7 |      4.70 |       4.54 |    787 |
+-------------+-------------+-----------+------------+--------+


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170103003100</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-03 00:31:00-0400</timestampReceived><subject>Re: [tor-dev] blacklisting relays with end-to-end correlation capabilities?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Sebastian Hahn wrote (2016-12-08):
&gt;&gt; On 08 Dec 2016, at 14:03, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt;&gt;
&gt;&gt; Dear tor directory authorities,
&gt;&gt;
&gt;&gt; TLDR: Would you blacklist relays with end-to-end correlation capabilities?
&gt;
&gt; 
&gt; I do not think that this is worthwhile. It establishes a precedent where
&gt; setting your contact info is something that gets you banned, potentially
&gt; incorrectly because it's unauthenticated, whereas we're unable to identify
&gt; people who actually maliciously run several relays without such indicators.
&gt; 
&gt; Additionally, it's yet one more thing to update the dirauths' configs
&gt; for, but with rather more overhead as we might get multiple mails back
&gt; and forth about how MyFamily is annoying to maintain, how they're just
&gt; trying to help, etc. All not so bad arguments.
&gt; 
&gt; If we did this, also why would we blacklist the nonexit relays? That
&gt; seems to not make sense, as a relay operator could have multiple relays
&gt; that act as guard and exit simultaneously. I think we'd need to
&gt; blacklist at least all the exit relays, if not all of them. BadExiting
&gt; them would then be the more sensible choice. Scarcity of resources has
&gt; in the past led us to bad designs like Valid/Invalid relays etc, which
&gt; causes way more annoyances than good things.

I understand dir auth operators have limited resources, but if you (most
of the dir auths) agree that blacklisting specific relays to protect tor
end users makes sense:

Would you agree on handling a limited amount (6?) of such 'end-to-end'
cases per year?

I.e. one case every 2 months if the operator has a guard probability
&gt;0.1% and exit_probability &gt;0.1% and didn't fix the problem within a
month after getting contacted?

Note: Luckily the list of such known potential operators is currently
very short (&lt;5).

In the past month I had some positive effect when trying to contact
relay operators [1], but unfortunately the biggest operators (by
consensus weight) are not to motivated to fix their configuration in a
reasonable time frame.

thanks,
nusenu





[1]
https://lists.torproject.org/pipermail/tor-relays/2016-December/011520.html
https://lists.torproject.org/pipermail/tor-relays/2016-December/011507.html
https://lists.torproject.org/pipermail/tor-relays/2016-December/011476.html
https://lists.torproject.org/pipermail/tor-relays/2016-December/011486.html
https://lists.torproject.org/pipermail/tor-relays/2016-December/011521.html
https://lists.torproject.org/pipermail/tor-relays/2016-December/011426.html



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170106134223</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-01-06 13:42:23-0400</timestampReceived><subject>Re: [tor-dev] Remaining 4 bits in prop224 addresses</subject><body>

Jesse V &lt;kernelcorn@torproject.org&gt; writes:

&gt; On 12/06/2016 11:27 AM, David Goulet wrote:
&gt;&gt; We had little discussion but some of us agree for sure on having bits for the
&gt;&gt; version number. That will tell a tor client to fetch the right descriptor
&gt;&gt; instead of trying all version that have the same type of public key (.onion
&gt;&gt; address). We currently have I believe 4 bit left which is only 16 values so we
&gt;&gt; could extend to one more byte here so have more room.
&gt;
&gt; I'm curious if we ever ran into this issue with the current HS protocol.
&gt; What type of changes would warrant a new address that that could not be
&gt; solved with a patch to the tor binary? We also need to consider the
&gt; difficulty of distributing a one-character-different address against the
&gt; difficulty of transitioning the network to the new descriptors. People
&gt; get very entrenched to their onion address, bookmark them, and some even
&gt; issue SSL certs for them.
&gt;
&gt; Let's say we added another character, so that we have 9 bits free. Would
&gt; would be the consequence of using all 9 bits for a checksum? We could
&gt; solve the version/descriptor issue using a naming system and simply
&gt; point the name to a newer onion address. It's something to consider.
&gt;
&gt;&gt; Second thing that is possible, like you stated above, is a checksum.
&gt;&gt; Unfortunately, I haven't thought much about this nor know the "state of the
&gt;&gt; art of small-checksum" but definitely something to dig through! Jessie, if you
&gt;&gt; feel like it, I welcome any analysis you can do on checksum here and some
&gt;&gt; proposal about it. (Only if you want to :).
&gt;
&gt; I'm not fluent in the arts of small checksums, but it seems to me that
&gt; we do have some benefit of using the first N bits of SHA2(version +
&gt; edDSA_address) as the checksum. I may not have time to write a full
&gt; proposal, but even with a small number of bits we do have a decent
&gt; chance of catching typos, which is the whole point. Obviously, this
&gt; chance will get better as you add more bytes, but prop224 addresses are
&gt; already fairly long and we should weigh the usability impact against the
&gt; probability of typos.
&gt;

Hello people and happy new year :)

I think at this point the best way forward would be for someone to take
initiative and write a Tor proposal on how onion addresses should be
encoded/represented. This way we will have something concrete that we
can discuss and work with.

Anyone interested? If not, I will get to it in a few months.

peace
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170109222759</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-09 22:27:59-0400</timestampReceived><subject>Re: [tor-dev] ExcludeExitNodes and ExcludeNodes but no "ExcludeEntryNodes"?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 5 Jan 2017, at 09:34, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; is there a possibility to blacklist guard relays (only in that position)
&gt; from a client perspective?
&gt; I didn't find one in the torrc man page.

No, there is no option to exclude Guards.
Only EntryNodes, which is a list of Guards to use.

&gt; It is generally a bad idea to create custom tor client footprints by
&gt; excluding relays but maybe it is less bad to exclude a certain relay
&gt; just in the guard position than to exclude it completely via
&gt; ExcludeNodes + StrictNodes since guards are used for a longer timeperiod.

Guards (and Directory Guards) are the only nodes identifiable from
unencrypted traffic (IP headers), so they can be used to fingerprint
a client more readily than nodes in other positions.

But the fingerprinting risk also depends on how many guards you
exclude.

(In 0.2.8 and later, all client directory fetches are encrypted.
In 0.2.7 and earlier, most client directory fetches are encrypted.)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYdA5vAAoJEEUMun+WjwlLR0MP/1mB8Lb1Z6hB8jDguXsr/U+A
YFkKQyqETb3Q4T4dohblJIAn0XxOSxyJ+x1uu6vomx446QmugqeTl6l5N1KFfe7I
YXB9HJX4zzNtn/RMqKD8od0zY21kEIdgK/hKMd9t3vEDjymPy4iEyikW2V3rQB/T
HrryNqhrqfRxeI2eO1DY3aH7NBvv9CAYCIClYVuKxTIiBG/CnGc7Bg9fs653tZoM
AOsSAsxmpPFPAOofshbBW1UTeAkYjS9LQ4Ip9DB536Gvv4kVJWt/P2hANINRlngq
s1/PBT3gVxQYa8n+ddtPXvNNxpoo2Ln2FGmLjVT2Laj1iFsZY6HiX4xApkndfnBu
eU73e35N4BeEHGgiDn8Yqpgzy/rH9eBD8R7q0+oUzCMO6A5eGKD6k2RC08YUYS95
TDM1JNePsrxqEbkgNRsPoFB39lFsIcfH2b5yS+6wMh0P8NFQpRtWvtXHQoetjB5c
RgqmB/mSsSOrCaGzSNdWZiAbgWVLZITEhfVzwQm0BJrwQ5gTSaGkNhwnLR43p8Pb
zHukTZdAJ2sKFA5eeWWzX2UNfIYVn5FfgDa3765LgCVDFyWQDxFchsGPEBFRo5d4
Nbvh36H5mUqFJsftXJMGk0NdGrt7L7sRa1YefrmUrriW1XDDSWfSmXL4qWyzGQuB
uwPVEZFc0gSSXYKbV7x+
=oCu7
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170111214509</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-01-11 21:45:09-0400</timestampReceived><subject>Re: [tor-dev] SipHash Impact on TCP ISN skew fingerprinting</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, 11 Jan 2017 19:57:07 +0100
bancfc@openmailbox.org wrote:
&gt; Its my guess that that timer values added in ISNs should now be 
&gt; indistinguishable from the rest of the hashed secret outlined in 
&gt; RFC-6528.[1] Can anyone knowledgeable in reading kernel code [2]
&gt; please confirm that this kills clock skew extraction [3] and
&gt; fingerprinting [4] described in Steven Murdoch's papers?

The issue isn't the choice of the hash algorithm, and the patch
doesn't change net/core/secure_seq.c:seq_scale() at all, nor how/when
it's called.

So no, it doesn't fix the issue.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170112025956</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-01-12 02:59:56-0400</timestampReceived><subject>[tor-dev] txtorcon 0.18.0</subject><body>



-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

txtorcon 0.18.0 is released, improving error-reporting when you have
SAFECOOKIE or COOKIE authentication turned on but can't read the file.

   * https://github.com/meejah/txtorcon/issues/200

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.18.0
   https://github.com/meejah/txtorcon/releases/tag/v0.18.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.18.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.18.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
12be80f1d5e2893378c6e8c752cf159479f868f8424e16b34b75cd679a0ab171  dist/txtorcon-0.18.0.tar.gz
cffe063dbcedd9d344e88a572c0de39b0390562165a865efa27019260c2119f6  dist/txtorcon-0.18.0-py2-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJYdp4sAAoJEMJgKAMSgGmnxCIH/iiFJdYtbSnShAktDrwMuL6K
tJN+AALrr6zIydjIVG4pNuGydoxqtmrpb/12xNn/c7noEWZpuuHd+hn/PRn+XNaA
Gh+q4922VKs3ZCFYFClVAkZFtT5iug7EKnB6n0IKt4Z+rVAzRTCpHqgnCmmavHP1
s55jkYc+emC/jzGag22sD7HnPYHjkuKV+qy1Y6mF1//oD9FFhJUXvn5FVjf9cNb/
xta7HB3AMXp/8qdpURPJaJBjWOg1BxSVBngZXYiUJkkoOReOJU1ngDoU0J7VjQJq
Uyi2ijwylUnK6/7qLLS8pwyX/UmWgV7NeQgIr00Shsm7Jv+zkk0QhXbnwJo8pRQ=
=oJqn
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170117165858</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-01-17 16:58:58-0400</timestampReceived><subject>[tor-dev] [collector] CollecTor Release 1.1.2</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256


Hi there!

another CollecTor version is available:

     https://dist.torproject.org/collector/1.1.2/

The release provides the following changes
* CollecTor now uses the correct type annotation "@type tordnsel 1.0"
  for exit lists again [0], and
* The build process now complies to a Metrics java standard build
  environment [1].

In addition, the main CollecTor instance and collector.sky-ip.org mirror
provide correct exit-lists again as of today.  See our mirror list [2].

Other mirror operators should upgrade and process their mirrors exit-lists.
A script for the latter is available in the release tarball.

Please direct comments and questions to the metrics-team mailing list [3].
And, of course, bug reports [4] or feature requests [5] can be filed in trac.

Cheers,
iwakeh

[0] https://trac.torproject.org/projects/tor/ticket/21195
[1] https://trac.torproject.org/projects/tor/ticket/20596
[2] https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam/Operation
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
[4] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=defect
[5] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=enhancement
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYfk1MAAoJEPeEx9Sa/gvijAwQAII81X0vWPLA7YbecHQLZJTA
LJqH3ODOpJAZZIrLuk+W4QUlyA/W1EmvSFCbDjUabnsc5d76lKzKJLGu9DlPDJSw
Gwb4UBQp+9Gi8wyaYLqHCoRJiGf+JvZnHAQK9/FvBQUDYkyz0ghTuGHLn/JGmNPV
w220fdPOZ7kEfYzuqFT8vY4eZBKxL7uLbaiU2GbYfykV3be34q9rUjmDtWoPHQ5u
FfFbzdQxDFaeRTKiWhXOG1He2epKeZezxZJBUQTotpSotaTjH3NFP+oJCsPUmPej
G5td1glJ2kBcl+b61TXtVMaCUVgw9otx9bsogQnY2ceTCL8iR5M2eNP1queI6gZ8
NgPh8KGsjXMmYlPmER1UedaBgf8YcYdlKchUtMLuWVPPX0QTaAdC3eLtuLNPxOWX
+lbFkCiH9hJ+1i4TktJ/XiBf0lBBvZCzkSBA5U0N0LEMTSkBIv9oh5wnP/AtoFLN
DFAtnHsOLXPz8mTtvBivHzTurwIL83FHs64Bm4nh2uPQ4iX/P1JzWLaIo8tGOVEO
pAJtEZGAzKMWTb96kIsLehXKgRTPAR+LAeWirwa+yY65YuhKNCKWz0jbG9s/6NAv
HggzcltuHibgr64D8LhlgSY6om9zwtEGH3NG26Zcd1pZAbQkIlr4c6qcKQF4C0AB
s+YXdtoVFpOfc3TiEEli
=DvuO
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170118050540</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-18 05:05:40-0400</timestampReceived><subject>Re: [tor-dev] RFC: Tor long-term support policy</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 18 Jan 2017, at 09:22, nusenu &lt;nusenu@openmailbox.org&gt; wrote:
&gt; 
&gt;&gt; == Plan for current releases ==
&gt;&gt; 
&gt;&gt; 0.2.4.x, 0.2.6.x, and 0.2.7.x, will all receive at least one more
&gt;&gt;   stable release.  Support for them will end on 1 August 2017.
&gt;&gt; 
&gt;&gt; 0.2.8.x will be supported until 1 January 2018.
&gt;&gt; 
&gt;&gt; 0.2.5.x is retroactively declared an LTS release, and will be
&gt;&gt;   supported until 1 May 2018.
&gt;&gt; 
&gt;&gt; 0.2.9.x is an LTS release, and will be supported until at least
&gt;&gt;   1 January 2020.
&gt; 
&gt; I'm glad to see such a policy.
&gt; 
&gt; Maybe be more verbose on when tor dir auths plan to remove EOL tor
&gt; relays from consensus?

If we do this, we should mention client versions as well.

Typically, this is a decision made by the directory authority operators
in consultation with the tor (network daemon) team.

Sometimes, as was the case with early point releases of 0.2.4 and 0.2.5,
we stop recommending tor versions because they no longer believe a
sufficient number of current directory authority keys.

At other times (as is the case with all but the most recent 0.2.4 to
0.2.9 releases), we stop recommending tor versions because they are not
secure - that is, there is a known high-severity issue in those
versions. (Or, perhaps, an important security improvement only
present in newer versions.)

If neither of these conditions apply, then we have to make a judgement
call on when relays or clients are "too old". In practice, we've just
tended to keep relays around until they fail one of the above checks.

I suggest that we stop recommending versions after we stop supporting
them. I'm not sure if we should delay this a few months after EOL.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYfvekAAoJEEUMun+WjwlLQc0P/0xNUJFnrXdLWROsGVd8kwSH
N+w4OrEmY0wowCIA4xzV8UlKKnYg+kUItQbvswtx8UXPBMhmGQQpHwQe20kG0X5d
cmNui1LNaMctgSBomFJmfEoMZnhBfDMRlR3YeSANlpLG+cMl5uoa3OcbCOjH1JQ2
OZNutCBZO1ECWAw1HOxIw0MwWwH0M3s4vjScHVUHoxBTvOIo44aHHN4Qv7XA5Qwv
Fxo4NahFo3m93JHxpNZNQMKtf+czL0X30+g9RTC2FEwIgr5kOM2Eo1CmFJ84u/gs
sOcMoEoJHhSvbcMrD7hVVpfV5Y4qzyupoaAqI56poQjlEKWeGQukvPG1V2eIv2CZ
GS06vTbyUJjqRfGxufjh42W4DZj0T0oPvX7Vsns8MSeO20brxBEaE3+s7r3uUcRY
Po83aYuTdaKiMNoe37PJmmbm8y7eBcqxCCSTJV3UatY7Th37sVUlTz8XrdXBDXMM
iI1AagVX5KBmLeannCX9eV0kpDW06bvFiUbYGvp/0zu7qlTlLoVCN9n310+gQXki
DN9283c4JaUh6I0cw084Vq9TrKxi9H1JFtiMsGrjchmeUHcxUSPd6w8Aa/rtC9dC
8gCax8Ehl/PhDGzCGmEZBvYlowlRMYurqDCwM4OHX2BfAkx32BLK55RstecjoasJ
3b6zVmBaZrJZ9XY0VNXO
=chpa
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170118114245</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-01-18 11:42:45-0400</timestampReceived><subject>Re: [tor-dev] archive.is and archive.fo are using CloudFlare. Is the TorBrowser add-on cfc useless n</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, 18 Jan 2017 12:15:05 +0100
Christian Pietsch &lt;christian.pietsch@digitalcourage.de&gt; wrote:
&gt; Considering that cfc was created in order to evade the CloudFlare
&gt; captcha, this is quite a disappointment. Is cfc useless now? Can it be
&gt; fixed?

It was a proof of concept that I no longer have time to work on.

&gt; What is the reason why archive.org is not used? I hear they are almost
&gt; done setting up an onion service for the Internet Archive.

Because, out of all the similar services that are available, I like
archive.is the most.

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170118201100</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-01-18 20:11:00-0400</timestampReceived><subject>[tor-dev] Release: sandboxed-tor-browser-0.0.3</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

I just tagged sandboxed-tor-browser 0.0.3.  Binaries will be built when
the next Tor Browser build happens (soon).  The dependencies (both
build and runtime) have changed, end users should install `libnotify` in
the unlikely event that it is not already present, though basic
functionality should not be broken even if it is missing.

The major changes since last version are:

 * 32 bit x86 support has been deprecated.

 * Numerous installer/updater improvements including periodic
   background update checks (requires libnotify for notifications) and
   using `.onions` when fetching installer/updater metadata.

 * Fixes for various crash/functionality bugs, including problems
   relating to certain versions of bubblewrap failing to launch with
   errors related to `setsid`[0].

Full details are available in the ChangeLog, and the code is still at
https://gitweb.torproject.org/tor-browser/sandboxed-tor-browser.git/

Regards,

--=20
Yawning Angel

[0]: If people are encountering this, particularly with the Debian
package, either upgrade `sandboxed-tor-browser` to the new release, or
update bubblewrap to 0.1.7 or later.

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170120020144</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-01-20 02:01:44-0400</timestampReceived><subject>Re: [tor-dev] txtorcon support for Twisted 12, 13, 14</subject><body>

isis agora lovecruft &lt;isis@torproject.org&gt; writes:
&gt; meejah transcribed 1.0K bytes:

&gt;&gt; Feedback requested if this will negatively affect you!

&gt; For whatever it's worth, all of Tor's infrastructure runs on Debian
&gt; stable, and I'm not sure if weasel would make exceptions to enable
&gt; backports.

Makes sense.

So this would mean that no tor-infrastucuture stuff could depend on
lastest txtorcon until after Stretch is released (but that's next month,
right?)

Does this affect OONI? They definitely depend on Debian-packaged
txtorcon...but they only depend on txtorcon 0.7.0+ according to github
(paging hellais!)

What will be added next release is: dropping txsocksx for a custom SOCKS
implementation (gaining RESOLVE and RESOLVE_PTR via Tor support) and
[actualy, full] Python3 support (txsocksx will not support Python3)...so
I don't think anyone with existing, deployed code should *need* to
upgrade.

If there was a security fix or bug-fix required for an older release, I
would have no problem releasing e.g. a txtorcon 0.14.x or whatever was
needed to support Debian stable or old-stable.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170123082039</emailId><senderName>Katherine Li</senderName><senderEmail>katherineli.tor@gmail.com</senderEmail><timestampReceived>2017-01-23 08:20:39-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tim,

Thank you for your insightful questions! My responses are below:

*&gt; Is this the cheapest zone/region for computation or bandwidth? If I am
not in the US, would it be faster or cheaper for me to use a local google
data center?*

Yes, it would be faster for you to use a local google data center
&lt;https://cloud.google.com/appengine/docs/locations&gt;. I have added a
variable "REGION" in the script of the uploader. You can now change the
region by replacing "us-central" with another region. I have also added an
explanation of how to do this in the README. Below is a list of all the
regions:

REGION           SUPPORTS STANDARD  SUPPORTS FLEXIBLE
asia-northeast1  YES                                           YES
europe-west       YES                                           NO
us-central           YES                                           YES
us-east1             YES                                           YES

You can also obtain this list via the following terminal command
&lt;https://cloud.google.com/sdk/gcloud/reference/app/regions/list&gt;(with
GAEuploader as your current directory):
./google-cloud-sdk/bin/gcloud app regions list

As you pointed out, I have set the zone to zone3 in my original code.
However, it turned out that zone is relevant only when working with Google
Compute Engine &lt;https://cloud.google.com/compute/&gt;, which is not the case
for GAEuploader. So I have removed the line "subprocess.check_call(["
./google-cloud-sdk/bin/gcloud", "beta", "config", "set", "compute/zone", "
zone3"])


*&gt; Which tor bridge does the traffic for these instances go through? (Or
does this set up a tor bridge as well?)*
The bridge uses https://meek.bamsoftware.com/, which is on the same host as
the meek-azure bridge, but not rate-limited like meek-azure is.
You can find more information on Tor relays at its Atlas page:
 https://atlas.torproject.org/#details/C20658946DD706A7A2181159A1A04C
D838570D04
If you want to use a different bridge, you can edit the file
appengine/reflect.go before running uploader:
        forwardURL = "https://meek.bamsoftware.com/"


Thanks again for your input! Please let me know if you have any more
questions/feedback.

Best,
Katherine Li

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi Tim,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you for your insightful questions! My \
responses are below:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&gt; Is this the cheapest \
zone/region for computation or bandwidth? If I am not in the US, would it be faster \
or cheaper for me to use a local google data \
center?&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, it would be faster for you to use a &lt;a \
href="https://cloud.google.com/appengine/docs/locations"&gt;local google data \
center&lt;/a&gt;. I have added a variable "REGION" in the script of the uploader. \
You can now change the region by replacing "us-central" with another \
region. I have also added an explanation of how to do this in the README. Below is a \
list of all the regions:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;REGION                SUPPORTS STANDARD   SUPPORTS \
FLEXIBLE&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;asia-northeast1   YES                                        \
YES&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;europe-west          YES                                     \
NO&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;us-central                YES                                \
YES&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;us-east1 \
YES                                                                \
YES&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;&lt;div \
style="font-size:small"&gt;Y&lt;span style="font-size:12.8px"&gt;ou can also obtain this list \
via&lt;/span&gt;&lt;span style="font-size:12.8px"&gt;  &lt;/span&gt;&lt;a \
href="https://cloud.google.com/sdk/gcloud/reference/app/regions/list" \
style="font-size:12.8px"&gt;the following terminal command  &lt;/a&gt;&lt;span \
style="font-size:12.8px"&gt;(with GAEuploader as your current \
directory):&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:small"&gt;&lt;span \
style="font-size:12.8px"&gt;./google-cloud-sdk/bin/gcloud app regions \
list&lt;/span&gt;&lt;/div&gt;&lt;div style="font-size:small"&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="font-size:12.8px"&gt;As you \
pointed out, I have set the zone to zone3 in my original code. However, it turned out \
that zone  &lt;span style="font-size:12.8px"&gt;is relevant only when working with  \
&lt;/span&gt;&lt;a href="https://cloud.google.com/compute/" target="_blank" \
style="font-size:12.8px"&gt;Google Compute Engine&lt;/a&gt;, which is not the case for \
GAEuploader. So I have removed the line  &lt;span \
style="font-size:12.8px"&gt;"&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;subprocess.check_call([&lt;/span&gt;&lt;span \
class="gmail-pl-s" style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" \
style="box-sizing:border-box"&gt;"&lt;/span&gt;./google-cloud-sdk/bin/gcloud&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;, \
&lt;/span&gt;&lt;span class="gmail-pl-s" \
style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;beta&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;, \
&lt;/span&gt;&lt;span class="gmail-pl-s" \
style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;config&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;, \
&lt;/span&gt;&lt;span class="gmail-pl-s" \
style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;set&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;, \
&lt;/span&gt;&lt;span class="gmail-pl-s" \
style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;compute/zone&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;, \
&lt;/span&gt;&lt;span class="gmail-pl-s" \
style="box-sizing:border-box;color:rgb(24,54,145);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;zone3&lt;span \
class="gmail-pl-pds" style="box-sizing:border-box"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span \
style="color:rgb(51,51,51);font-family:consolas,"liberation \
mono",menlo,courier,monospace;font-size:12px;white-space:pre;background-color:rgb(255,236,236)"&gt;])&lt;/span&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-size:12.8px"&gt;&gt;  Which \
tor bridge does the traffic for these instances go through?  &lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;(Or does this set up a tor bridge as \
well?)&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;The bridge uses  &lt;/span&gt;&lt;a \
href="https://meek.bamsoftware.com/" rel="noreferrer" target="_blank" \
style="font-size:12.8px"&gt;https://meek.bamsoftware.com/&lt;/a&gt;&lt;span \
style="font-size:12.8px"&gt;, which is on the same host as the meek-azure  &lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;bridge, but not rate-limited like meek-azure is.  \
&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;You can find more information on Tor \
relays at its Atlas page:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;  &lt;/span&gt;&lt;a \
href="https://atlas.torproject.org/#details/C20658946DD706A7A2181159A1A04CD838570D04" \
rel="noreferrer" target="_blank" \
style="font-size:12.8px"&gt;https://atlas.torproject.org/#&lt;wbr&gt;details/&lt;wbr&gt;C20658946DD706A7A2181159A1A04C&lt;wbr&gt;D838570D04&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;If you want to use a different bridge, you can edit the \
file&lt;/span&gt;&lt;br style="font-size:12.8px"&gt;&lt;span \
style="font-size:12.8px"&gt;appengine/reflect.go before running uploader:&lt;/span&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;            forwardURL = \
"&lt;/span&gt;&lt;a href="https://meek.bamsoftware.com/" rel="noreferrer" target="_blank" \
style="font-size:12.8px"&gt;https://meek.bamsoftware.com/&lt;/a&gt;&lt;wbr \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;"&lt;/span&gt;&lt;i&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;Thanks again for your input! Please let me know if you have \
any more questions/feedback.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;Best,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;Katherine Li&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124030153</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-24 03:01:53-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2017, at 09:17, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; For example, maybe I want to use OnionShare to send my friend a 2GB
&gt;&gt; video clip, but anonymity doesn't matter to me. My friend and I already
&gt;&gt; know who each other are, and I'm not concerned about leaking what we're
&gt;&gt; doing, I just don't want to leak the plaintext video footage. In this
&gt;&gt; case, I might want to use a non-anonymous onion service just to make the
&gt;&gt; file transfer faster.
&gt; 
&gt; Ok, so you trust your friend with your IP and onion address in this use
&gt; case.
&gt; 
&gt; But do you also trust the entire Tor network?

I opened a ticket for the OnionShare single onion service use case:
https://trac.torproject.org/projects/tor/ticket/21295

We'll see what we can do, and try to work out the anonymity implications
of leaking your IP address to the intro and rendezvous points.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhsOhAAoJEEUMun+WjwlLHBAP/0rjp2eDFO8E1tdaZRlDI5U1
OhxFvP+FWrInlEfoqwqbMUxsUC3Gf+Cd4l7GWuDBajGe9bJfKSKctVQcnBiK8+eO
JL9usTXlJNCtTw9uv7kxlODoNudamH2lNTsfdwY3dQYy0Z7AazzcrqkQuKMFn2wA
P8CzaznOsg07juQo3JNqTTDfYQU9dc/WeeCb/QrNgxtQgKZu5Wj9fnpXANoAzcJj
wXr5vPs4sf58nK8LPT7bf+NkOFHyqjIELhSXGW6p4F4C+xFMKoxQi0fLqwom5y6m
pU9zvZ49RP6MDVG4Znz7qYjsw0sZilNw1WY+5X8XikCN3zC/KYK9M7Ln0cl7MZlk
C8nZUT3Zk/svD3wMOviTHVmujJLrhxXBL0DKbOZAVTRU+JQr8QY3VuBZRM33lOPU
wPV7FjN5iBriaZO+932oclESy9W0PvjpoBrBgduYoMvJv6ui2NDrVp1eB26KpMdB
pNzdoVeDixtGNZ6XpRJvPXywpjowEqLFRO8X7j6KoO17EaA8/h4nE3Xo1MmbrgPZ
8CM5h7lNQAY2PDP5G4Ap1aA4gkL+HzhXsb1ob15n/iBwC7l008S31y7rhyqVn+1G
3L1lluZDEkTwnzPXCKDVzx5DcXPbBgS4tSk819OIJS8bVDzp66WIwsBv6bAVF2PZ
MNBzJpaqJObnunwsIoES
=UZ+G
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170124042027</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-24 04:20:27-0400</timestampReceived><subject>Re: [tor-dev] log: ORPort/DirPort address does not match descriptor address</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Jan 2017, at 14:39, Kevin Beranek &lt;kevin@kberanek.com&gt; wrote:
&gt; 
&gt;&gt; Is the Address option set on this relay?
&gt; 
&gt; Address is not set because it is generated from this template, which
&gt; does not set Address:
&gt; https://github.com/nusenu/ansible-relayor/blob/dev/templates/torrc.

To disable the warning, the template could:
* set Address, or
* use two ORPort lines: 'ORPort &lt;PublicPort&gt; NoListen' and
  'ORPort &lt;InternalPort&gt; NoAdvertise'.

But that requires knowing the external address.

&gt;&gt; Maybe we need to change this part of the warning:
&gt;&gt;&gt; If you have a static public IPv4 address, use 'Address &lt;IPv4&gt;'
&gt; 
&gt; I'm not quite sure what you're proposing.  Are you suggesting dropping
&gt; just the "and 'OutboundBindAddress &lt;IPv4&gt;'" or the rest of the
&gt; message?

I think the message is fine, it covers the most common cases.

I don't think we can disable the message in your case, without hiding the
issue from operators who need to know about address mismatches.

&gt;&gt; If the address option isn't set, what does the relay identify as its
&gt;&gt; public IP address in the logs?
&gt;&gt; 
&gt;&gt; Look for log entries about testing ORPort or DirPort reachability, or
&gt;&gt; any log entries containing its public IP address.
&gt; 
&gt; It definitely identifies the correct public IP address as you can see
&gt; from these logs:
&gt; 
&gt; Now checking whether ORPort 51.15.48.254:443 and DirPort
&gt; 51.15.48.254:80 are reachable... (this may take up to 20 minutes --
&gt; look for log messages indicating success)
&gt; ...
&gt; Self-testing indicates your DirPort is reachable from the outside. Excellent.
&gt; Self-testing indicates your ORPort is reachable from the outside.
&gt; Excellent. Publishing server descriptor.

Then it's ok to ignore the warning.

It was put there for relay operators whose relay chooses the wrong
public address, and they don't notice.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYhtYLAAoJEEUMun+WjwlLjmMQAOkbG2uUT+m2LDhgUB5Bvkcb
z2WLOsBqA/BPw7zK8v5r3fo6JHKO84g1V8RP9aESpudc5zZwaJMw22TVpgihPqDV
GudGLy3C7VBONrMb582lUkCFzTXWZ6LLilGwfcdNeWmdlLwxCrCbdfk3Urxx4Sdt
u67RsjTuJCYCUK4O32B6tTJd5g9yvWxzy3Z8J+t8PzceSo5H3E+uNoOF+nhkWkBc
ZSRoT5UmF5aHZ1ULbVq6u9YbSgyGbGkumpWtrx/VQZq83EpLPMMoR9tQFmU4Y7/0
DIn2xi/MUC5AaUBRPoOq8dsUO7WeuO9xg/JwrSUU+r9lfdCbLxzLZOvUbI0E0TOv
NCbai1LwDn07TTOMyda47z9+A2bDM2ev4Bfc83gmY4s9GtzBG9a1dUDw94rJMAR1
Y9t6bio2mMMpsGjJ4nCePubL8vdkJxJl8cxNWypLsjHvBYykQ+L0M1k4ydN4t7ON
6n5dhVduB4RFJ3QGVGhlISFW+7IoQerTMfN3wqQH7B5+ULkViXDa9T5nVFmDv083
LEJsZi9XmBpi1R4jAo+hnKgCNcv8VsQghn4LM4UinZa0jUCMjMxT+zWMYbRtmH9c
CRJppZ3K4KzDWH/nVMqZXP4AJsb66WTQY8z5Rn77dpkn4v7tS+QT3/qVhCytBxdl
lBCqFKH7FKkxajS7KmMP
=7UDt
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126090838</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-01-26 09:08:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 274: A Name System API for Tor Onion Services</subject><body>

[Attachment #2 (multipart/signed)]


teor:
&gt; 
&gt;&gt; On 12 Oct 2016, at 09:29, Jesse V &lt;kernelcorn@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; On 10/11/2016 12:53 AM, Jeremy Rand wrote:
&gt;&gt;&gt; It's also worth noting that it's been hard enough to get IETF to accept
&gt;&gt;&gt; .bit (that effort stalled) -- adding a bunch of other TLD's would
&gt;&gt;&gt; probably annoy IETF significantly (and destroy whatever good will exists
&gt;&gt;&gt; at IETF right now), and I fully understand why this would annoy them.
&gt;&gt;&gt;
&gt;&gt;&gt; I'm not really sure what the right mechanism is for a user to specify "I
&gt;&gt;&gt; want this request to either use TLS or be resolved to a .onion record"
&gt;&gt;&gt; (which seems to be the primary use case here).  Does anyone have
&gt;&gt;&gt; suggestions?
&gt;&gt;
&gt;&gt; As I understand it, the spirit of the naming system API is to resolve
&gt;&gt; $meaningfulName to $randomAddress.onion. It seems pretty clear its
&gt;&gt; focused on A records, but the naming system can support subdomains and
&gt;&gt; CNAME records if it likes. My approach with OnioNS is to simply use a
&gt;&gt; none-ICANN TLD, which is currently ".tor". There's a Trac ticket on
&gt;&gt; which TLD I should use, but it seems most intuitive to use something
&gt;&gt; obvious. Someone suggested that we continue to use .onion, but anything
&gt;&gt; that isn't 16 chars of base32 should be resolving using the naming
&gt;&gt; system. That seems like it would be more confusing. A new TLD seems more
&gt;&gt; intuitive.
&gt; 
&gt; Yes, and re-using .onion would make (some) 32-character names invalid,
&gt; and post prop-224, (some) 53?-character names invalid as well.
&gt; 
&gt; This is an undesirable property.
&gt; 
&gt; I can also imagine attacks taking advantage of this confusion.

If, hypothetically, we wanted to avoid the confusion of "does xyz.bit
point to a .onion service or an A record?" but did not want to introduce
any additional TLD's, maybe do something like:

"xyz.bit.onion" --&gt; the .onion service pointed to by Namecoin d/xyz, or
an error if no such service exists
"xyz.bit" --&gt; anything pointed to by Namecoin d/xyz, which could be an A
record, or a CNAME record, or a .onion record.

I suspect that most end users will understand that "bit.onion" is not an
onion service, since it's far too short to be one.

Thoughts?

-Jeremy



["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170126201238</emailId><senderName>loki der quaeler</senderName><senderEmail>quaeler@gmail.com</senderEmail><timestampReceived>2017-01-26 20:12:38-0400</timestampReceived><subject>Re: [tor-dev] ./configure in 0.2.9.9 is ~broken?</subject><body>


Ah - ok.  Alrighty - will seek to find a way to rectify this… thanks for the quick \
addressing.


&gt; On Jan 26, 2017, at 12:10 PM, Zack Weinberg &lt;zackw@panix.com&gt; wrote:
&gt; 
&gt; On Thu, Jan 26, 2017 at 2:36 PM, loki der quaeler &lt;quaeler@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Attached is a .tar.gz which has the config.log from the 0.2.8.12 configure and \
&gt; &gt; one from the 0.2.9.9 configure.
&gt; 
&gt; Thanks.
&gt; 
&gt; Both configure scripts failed to find libevent headers
&gt; (event2/event.h, event2/dns.h, event2/bufferevent.h) -- but that
&gt; wasn't a hard error in 0.2.8.x and it is in 0.2.9.x.  I believe this
&gt; means the libevent on your system is too old, going by this entry in
&gt; the changelog:
&gt; 
&gt; o New system requirements:
&gt; - Tor now requires Libevent version 2.0.10-stable or later. Older
&gt; versions of Libevent have less efficient backends for several
&gt; platforms, and lack the DNS code that we use for our server-side
&gt; DNS support. This implements ticket 19554.
&gt; 
&gt; zw
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170128214700</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-28 21:47:00-0400</timestampReceived><subject>Re: [tor-dev] how to enable IPv6 exiting - aka "how to get p6 lines into your microdescriptors" (was</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


tldr; How do you enable IPv6 exiting in torrc?

the following torrc part is apparently _not_ enough:

IPv6Exit 1
ExitRelay 1
ExitPolicy reject *:25
ExitPolicy accept *:*
ExitPolicy reject6 *:25, accept6 *:*    # AFAIU from the tor man page
this line is redundant

https://trac.torproject.org/projects/tor/wiki/doc/IPv6RelayHowto

@moritz: can you tell why exit 'amazonas' is different when it comes to
IPv6 exit policies? he is your only exit with p6 lines [4]

&gt; https://onionoo.torproject.org/protocol.html#details writes:
&gt;&gt; Missing if the relay rejects all connections to IPv6 addresses.

Since none of the microdescriptors of that relay in Jan 2017 contained a
"p6" line onionoo works as expected.

(this relay might be a bad example since this relay switched from
non-exit to exit not to long ago, but almost all - except one - of
torservers' exits have no p6 lines either)

So I'm wondering why is there no p6 line in the microdescriptors even
though the relay's exit policy allows IPv6 traffic [3] and IPv6Exit set
to 1?

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1408 writes:=

&gt;      "p6" SP ("accept" / "reject") SP PortList NL
&gt;
&gt;         The IPv6 exit policy summary as specified in sections 3.4.1 and=
 3.8.2. A
&gt;         missing "p6" line is equivalent to "p6 reject 1-65535".



To provide an example exit relay with p6 line:
https://atlas.torproject.org/#details/D30226D0F4771E93B562AC650C909393140=
8D8BD


from its descriptor [5] (note the last line: 'ipv6-policy'):

reject 0.0.0.0/8:*
[...]
accept *:5222-5223
accept *:5900
accept *:6660-6669
accept *:6697
accept *:11371
reject *:*
ipv6-policy accept
20-21,23,53,79,81,110,143,443,554,1194,5222-5223,5900,6660-6669,6697,1137=
1





[5] (temporary URL)
https://collector.torproject.org/recent/relay-descriptors/server-descript=
ors/2017-01-28-04-05-00-server-descriptors


[3] (temporary URL)
https://collector.torproject.org/recent/relay-descriptors/server-descript=
ors/2017-01-28-18-05-00-server-descriptors
wrote:
&gt; accept *:53
&gt; accept *:80
&gt; accept *:110
&gt; accept *:143
&gt; accept *:220
&gt; accept *:443
&gt; accept *:873
&gt; accept *:989-990
&gt; accept *:991
&gt; accept *:992
&gt; accept *:993
&gt; accept *:995
&gt; accept *:1194
&gt; accept *:1293
&gt; accept *:3690
&gt; accept *:4321
&gt; accept *:5222-5223
&gt; accept *:5228
&gt; accept *:9418
&gt; accept *:11371
&gt; accept *:64738
&gt; reject *:*







[4]

&gt;&gt; +------------+----------------+------------------------+
&gt;&gt; | first_seen | nickname       | exit_policy_v6_summary |
&gt;&gt; +------------+----------------+------------------------+
&gt;&gt; | 2014-02-13 | amazonas       | {u'reject': [u'25']}   |
&gt;&gt; | 2014-02-13 | politkovskaja2 | NULL                   |
&gt;&gt; | 2014-02-13 | politkovskaja  | NULL                   |
&gt;&gt; | 2014-05-01 | rehm           | NULL                   |
&gt;&gt; | 2016-09-02 | hessel0        | NULL                   |
&gt;&gt; | 2016-09-02 | hessel2        | NULL                   |
&gt;&gt; | 2016-09-02 | hessel1        | NULL                   |
&gt;&gt; | 2016-11-15 | andregorz0     | NULL                   |
&gt;&gt; | 2016-11-15 | edwardsnowden2 | NULL                   |
&gt;&gt; | 2016-11-15 | edwardsnowden1 | NULL                   |
&gt;&gt; | 2016-12-23 | russellteapot  | NULL                   |
&gt;&gt; | 2016-12-23 | dorrisdeebrown | NULL                   |
&gt;&gt; | 2016-12-30 | criticalmass   | NULL                   |
&gt;&gt; | 2016-12-30 | zwiebelfreund  | NULL                   |
&gt;&gt; | 2017-01-09 | zwiebelfreund2 | NULL                   |
&gt;&gt; | 2017-01-22 | zwiebelfreund3 | NULL                   |
&gt;&gt; +------------+----------------+------------------------+


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129094001</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-29 09:40:01-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-01-27 13:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 28/01/17 10:23, Karsten Loesing wrote:
&gt; On 28/01/17 10:06, nusenu wrote:
&gt;&gt;
&gt;&gt;
&gt;&gt; Karsten Loesing:
&gt;&gt;&gt; If you notice similar problems in the future, be sure to let us know!
&gt;&gt;&gt;  We do have a few checks in place, but this issue slipped through
&gt;&gt;&gt; somehow.
&gt;&gt;
&gt;&gt;
&gt;&gt; I assume you are already aware that onionoo is currently a bit behind
&gt;&gt; (2017-01-27 13:00).
&gt; 
&gt; Yes, I'm upgrading to protocol version 3.2, which requires re-importing
&gt; bridge descriptor archives since December 2014.  Of course that didn't
&gt; go without problems, first with memory running out, then disk space.  I
&gt; hope it'll be back later today.

It should be back since yesterday afternoon.  Please shout if any issues
remain.

All the best,
Karsten


&gt; 
&gt; Thanks for the report!
&gt; 
&gt; All the best,
&gt; Karsten
&gt; 
&gt; 
&gt; 
&gt;&gt;
&gt;&gt; https://lists.torproject.org/pipermail/tor-relays/2017-January/011812.html
&gt;&gt;
&gt; 
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170129135700</emailId><senderName>nusenu</senderName><senderEmail>nusenu@openmailbox.org</senderEmail><timestampReceived>2017-01-29 13:57:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo: understanding 'exit_policy_v6_summary'</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; Not much we can do in Onionoo here, I'm afraid.


I agree that is what I meant with:
&gt; Since none of the microdescriptors of that relay in Jan 2017 contained =
a
&gt; "p6" line onionoo works as expected.

sorry to bother you.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130060831</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-30 06:08:31-0400</timestampReceived><subject>Re: [tor-dev] tor 0.2.9.9 gcc 4.2.1</subject><body>

It was a test compile on a very old 8.x i386 box, warnings
would be no surprise there, hardly worth addressing unless
exposed a bug, since 11.x runs on most all hw 8.x does.
gcc version 4.2.1 20070831 patched [FreeBSD]
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170130084844</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-01-30 08:48:44-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 3.2-1.1.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Another release of Onionoo is now available here:

     https://dist.torproject.org/onionoo/3.2-1.1.0/

Besides some technical improvements that are listed in the changelog [0]
this release contains a protocol extensions [1]:

* Extended order parameter to "first_seen" and added response meta data
  fields that facilitate paging access to Oninoo data (see [2] for details).
* A bug was fixed, that prevents noting bridges as first seen on
  January 1, 1970 when in fact they were never mentioned in a bridge
  network status and only learned about from their self-published
  bridge server descriptors (see ticket [3]).
* The data on the main Onionoo instance [4] was cleaned to not report
  the wrong first_seen dates anymore.

Please direct comments and questions to the metrics-team mailing list [5].

Cheers,
iwakeh


[0] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?id=5b219203b8781b27518133ad7d76e636e82d7fe5
 [1] https://onionoo.torproject.org/protocol.org
[2] https://onionoo.torproject.org/protocol.html#responses
[3] https://trac.torproject.org/projects/tor/ticket/20994
[4] https://onionoo.torproject.org
[5] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYjv3nAAoJEPeEx9Sa/gviBU0P/j/ABxgGW7w46SHALGqJWazC
/0bF3OipaNQc8UXwejwh7GGH9IZJxk1W5IUMrf9Fu7USTrcmCmhZowBPNbh6vc64
QnFtOPgDbm/S7lURhLr56UIb68zpbbtCQu3++mj2r4oep3g3avKOcIFyNYsLnM8z
qGhLRIhSyJtHC0ZLojzDgRzT3gD4qKiU79rofJysaevoHRzusSDlHB7m/LBLcGz3
NFBemfB3NtAWJcl8G50hileMp2uLnepZ5eyfWV1PmNvT3j96x4L7sUwVywdKHzjs
P31R7ysgT3oYf2lcwsyCAZLrBF+ZklVOGivHcxTByVJf7At4N/j86V5iSr0I7H4n
3KKdIjzFjwYLN8E9LUeqiD+v4+a4Z+tJO56XV2O0P4r3szMaSxVK13XNriHlEp6A
3rKvyJDpGS40Kijna0H5E7NdHS6za1S2Pj/DJr62WFft/6lz48cm6HdzS7IQTRGP
zHYuYcT5tMn1jS72PQmIJd8x7hP8C0G18lp9vs6au/S4rfw+/XXgmpzYJM5JQjKu
jgFCNuw9V8egk8v9f25K3viv+MT19zZjrCyKTNFig28Fda0EQqLvDYiWBbNBqmyt
dtd0JOYx78ynVXUBue9dPGg2YvLXhVuftdESpkxMzjGxakFRrLD2klokn9sXT9Rf
i2r5Ugu0gYqkVb93DcEy
=+jNS
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170130104828</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-01-30 10:48:28-0400</timestampReceived><subject>Re: [tor-dev] ExitPortStatistics interpretation</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 29/01/17 17:54, nusenu wrote:
&gt; 
&gt; 
&gt; Karsten Loesing:
&gt;&gt;&gt; Oh thanks, so it is not possible to find out which is the most frequent
&gt;&gt;&gt; exit port by number of streams opened, that's a pity.
&gt;&gt; Well, that one is easy: port 80. :)
&gt; 
&gt; Ok, maybe I should have said that differently:
&gt; 
&gt; "so it is not possible to find out which are the top 10 (or N) exit
&gt; ports by number of streams opened"
&gt; 
&gt; (but we can determine the most frequent exit port if other is lower than
&gt; the biggest value provided)

You're right that we cannot reliably determine the top 10 exit ports by
number of streams opened.

The idea was to pick the same 10 ports for all three metrics (read
bytes, written bytes, opened streams) rather than the top 10 ports for
each statistic.  This allows comparisons of all three metrics for a
given port.

All the best,
Karsten


&gt;&gt; Okay, in the last line we can't say this.  But in all other lines the
&gt;&gt; "other" entry has fewer streams than port 80 which is among the top 10.
&gt;&gt; Only the last line does not include port 80, and the "other" entry has
&gt;&gt; more streams than top-1 port 8080.  Could be that this relay does not
&gt;&gt; permit exiting to port 80.  Or that port 80 was 11th or 12th in terms of
&gt;&gt; bytes.
&gt;&gt;
&gt;&gt; Hope this is useful anyway.
&gt; 
&gt; Yes, thanks.
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131095320</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-01-31 09:53:20-0400</timestampReceived><subject>Re: [tor-dev] git-update: transparently torified git pulls</subject><body>

&gt; test x"$url" = x

Some users may be a bit unfamiliar with this longform
'test' construct having trended from that in say
their distro's example rc scripts over recent posix
and bugfixed decades, easier visual delimited parsing,
4 chars of line width saved, to form of...

[ ! "$var" ]

http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html

Some like $() over ``, or indenting line continuations too.
As in perl, tmtowtdi, no worries.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170131141631</emailId><senderName>carlo von lynX</senderName><senderEmail>lynx@time.to.get.psyced.org</senderEmail><timestampReceived>2017-01-31 14:16:31-0400</timestampReceived><subject>[tor-dev] git-commit-private: preserve the privacy of your working times</subject><body>

On Tue, Jan 31, 2017 at 04:53:20AM -0500, grarpamp wrote:
&gt; [ ! "$var" ]

Thank you. That was one of the constructs why I never took
bourne shell seriously.. ;)  but this looks a lot more acceptable.
In the spirit of sharing, here's one more privacy-oriented
git script:


#!/bin/sh
#
# working habits privacy-preserving git commit command
#       --lynX &amp; heldensaga, 2016
#
# ever wondered what implications it can have that the git
# logs of the projects you are working on give a lot of
# insight in your working habits.. your discipline, your
# real-life duties or absence of duties? this script
# censors such invasive information. by means of this
# script it will no longer be visible when you committed
# work items and how much time you spent on them. to keep 
# tools, such as redmine, from breaking as they actually 
# make assumptions regarding the continuity of time, this 
# script simply takes the timestamp of the previous commit
# and adds *one second* to it.

# default for new repositories is "1984-04-04 00:44:04 GMT"
# don't try a unixtime before 1973 as git-commit will ignore that.
#
last=`git log -1 --pretty=%ct 2&gt;/dev/null` || last=449887443

next=$(($last+1))

export    GIT_AUTHOR_DATE="$next GMT"
export GIT_COMMITTER_DATE="$next GMT"

exec git commit $*

# then check the results using 'git log --pretty=fuller'



-- 
  E-mail is public! Talk to me in private using encryption:
         http://loupsycedyglgamf.onion/LynX/
          irc://loupsycedyglgamf.onion:67/lynX
         https://psyced.org:34443/LynX/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170131143801</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-01-31 14:38:01-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Proposal for the encoding of prop224 onion addresses</subject><body>

[Attachment #2 (multipart/signed)]


On 31 Jan (14:26:52), Ivan Markin wrote:
&gt; On Tue, Jan 31, 2017 at 02:54:50PM +0200, George Kadianakis wrote:
&gt; &gt; I merged my prop224 onion encoding patch to torspec just now, after
&gt; &gt; fixing the bug that Ivan mentioned above.
&gt; 
&gt; Thanks!
&gt; 
&gt; btw it's not clear how H() output should be truncated to form a
&gt; checksum. Should it be the first 2 bytes or the last 2 bytes?
&gt; It should be specified in the definition of CHECKSUM (because length of
&gt; digest obviously is not 2 bytes):
&gt; 
&gt; - CHECKSUM = H(".onion checksum" || PUBKEY || VERSION)
&gt; + CHECKSUM = H(".onion checksum" || PUBKEY || VERSION)[:2]

Good point. Current implementation assumes *first two* :). Easy to change but
let's make it clear!

Thanks!
David

&gt; 
&gt; 
&gt; Also it worthwhile to include examples with correct checksums.
&gt; 
&gt; --
&gt; Ivan Markin
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
laomWpXMwfgJQSD00XsC6WR0haEh1gK8WeNTaAPQf20=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170131223654</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-01-31 22:36:54-0400</timestampReceived><subject>Re: [tor-dev] [RFC] Directory structure of prop224 onion services</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 1 Feb 2017, at 01:36, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt; On 31 Jan (09:02:35), teor wrote:
&gt;&gt; 
&gt;&gt;&gt; On 27 Jan 2017, at 01:58, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; ...
&gt; Your next question is a good one actually so jumping into it!
&gt; 
&gt;&gt; 
&gt;&gt;&gt; Current implementation doesn't allow two services in the same HiddenServiceDir
&gt;&gt;&gt; and for prop224, the ongoing implementation doesn't allow it either. Sharing a
&gt;&gt;&gt; directory brings all sorts of uneeded complexity. So if the directory is v3,
&gt;&gt;&gt; everything in it will be v3.
&gt;&gt; 
&gt;&gt; How does an application tell the difference between a v2 and v3
&gt;&gt; directory?
&gt; 
&gt; Right now, apart from the "key tag" in the public key file that will be
&gt; something like "v3", I don't see any :S ... And I think you are raising a good
&gt; point. How can we make it easy for any application *only* looking on disk what
&gt; version the hidden service is?
&gt; 
&gt; The onion address has the version encoded into it *but* that would require the
&gt; application to do some base32 decode and truncation magic. Not user friendly
&gt; enough? Maybe but apart from that, we would need to make it obvious either
&gt; with a filename or litterally an extra "version file".

I think this would be a good idea:
* version 2 hidden services have no version file
* version 3 hidden services have a version file with "3" in it
and so on...

&gt; However, there is kind of an issue rising from this. Imagine that v4 changes
&gt; the onion address format because new crypto. We'll end up with a problem where
&gt; the how to extract the version from the address is actually version
&gt; specific... A solution to that is that "whatever size/encoding the address is,
&gt; version will ALWAYS be the last 1 byte."
&gt; 
&gt; Thoughts?

I think it is a good idea to make the version the last byte of the
address.

But I also think that a version file is a good idea to make it easy for
applications to discover the on-disk version.

Otherwise, the algorithm would have to be something like:
* look for a hostname file
* read the first line
* find the address in that line
* if the address is N characters long, version 2
  * do we promise we will never have addresses this long in future versions?
* base32 decode that line
  * do we promise addresses will always be base32?
* read the last byte
  * do we promise addresses will always have the version in the last byte?

&gt;&gt; 
&gt;&gt; What's the supported method, that we will continue to support in
&gt;&gt; future, regardless of key or algorithm changes?
&gt; 
&gt; Not 100% sure what you mean by "supported method" but I'll take a guess. Those
&gt; are the one that comes to mind:
&gt; 
&gt; - Single onion service
&gt; - Client auth (only basic for now, we don't have stealth specified)
&gt; 
&gt; Also, every single Hidden Service torrc option will be supported for v3
&gt; *EXCEPT* the Tor2Web one.
&gt; 
&gt; Hope that answers.
&gt; ...

Actually, what I meant was:
"What can an application do to find the hidden service version, that we
always promise will work in any future version?"

That's what we're discussing above.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJYkRGGAAoJEEUMun+WjwlLVvkQAIbincvCF4lDuMmuRXHTikmo
2+yqo7SnPVvWE37Bi7jZxSPFdIJRDjJtz2hDdnoQfxNfsmAWjfRKutdxfka6OUD9
5mrVQGZJRzH116Zs9V3ACJ0oSIFHGTxJMe4ECtBSvv2+odtBxeQcnOtvyOQIiaBD
hdn3W+gKdjxAUvV68FUQmhe+gVgazLGiqj4MlY3CUW4RgmQPZnxYqJmkJs15Bm/x
0BEVkeEEOUF4ePCOODfkFeTODMEyQ+u2H0o+XpuyYCkhFxUTo1W9WLthKARZNByX
qsOVQy2JuH0VaiAkr+LFjGG0fHedi9W+6KYZroxFTAHOfEVivcQyPwAI7b8QjXwo
LJISW5Wu0cwMSEHM+RYDsCzrdL6sGcuxBIFOGbjxOhxhSJT2J/xC8KKbR0Ax2/sq
OiXmPXtYoOetUKpI04glesFlMrq/944A5qxi9XCZiXq53C30VAtZctowF9v7/ViJ
PRgyr/3OOwarer1CG+NvS0nqR7xQuUrVK0nJwm/DAB7gAXSa3Xeo/UcO0Au95mFV
LtIrNc1GmOjLVB6NC+UEaA3PFbEK9K0GN84iaPrnm5YMKsT5QCQh/izI7Bug2eTP
NfLe1Vg17jQe4kvdy1IfLlsqTUJkAWZKuBG1Id6ndKDJULjUD/+PjuWZZa5cgHwu
QPIJufK1eG3GBqpLdwbj
=h5iD
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025162100</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2017-10-25 16:21:00-0400</timestampReceived><subject>Re: [tor-dev] https://gitlab.com/torproject</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hans-Christoph Steiner:
&gt; 
&gt; 
&gt; Nick Mathewson:
&gt;&gt; On Wed, Aug 10, 2016 at 5:01 AM, Hans-Christoph Steiner
&gt;&gt; &lt;hans@guardianproject.info&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; FYI I registered https://gitlab.com/torproject to claim the name in the
&gt;&gt;&gt; gitlab namespace.  I'm happy to hand it over to a more official Tor
&gt;&gt;&gt; person if anyone wants.  Or just let me know if anyone ever wants to
&gt;&gt;&gt; actually use it.
&gt;&gt;&gt;
&gt;&gt;&gt; I've been using gitlab for a while now with F-Droid, and its quite nice.
&gt;&gt;&gt; Guardian Project is going to move our stuff there too.
&gt;&gt;&gt;
&gt;&gt;&gt; .hc
&gt;&gt;
&gt;&gt; Sure, I'd be happy to take it.
&gt;&gt;
&gt;&gt; We've been using gitlab's code review feature a fair bit, and though
&gt;&gt; we don't plan to stop self-hosting our repositories, we do rather like
&gt;&gt; having a better way to review big branches.
&gt; 
&gt; Hey Nick,
&gt; 
&gt; Sorry I was on vacation when I received this, and it got lost in the
&gt; fray.  Send me your gitlab username, and I'll turn this over to you.
&gt; 
&gt; .hc
&gt; 

I granted nickm_tor full ownership to https://gitlab.com/torproject

I'm happy to answer questions about gitlab, especially gitlab-ci.  I use
it a lot with https://gitlab.com/fdroid.  gitlab-ci is really great.

.hc


-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171125045916</emailId><senderName>N6Ghost</senderName><senderEmail>n6ghost@gmail.com</senderEmail><timestampReceived>2017-11-25 04:59:16-0400</timestampReceived><subject>[tor-dev] Tor and DNS</subject><body>

hi all,

saw an open item in the tor projects, about dns and other resource 
record types.  this got me thinking about
just trying to understand Tor and DNS.

for what I gather so far, is Tor and dns is only about "a" records and 
quad records "aaaa", thats pretty much it.
i think PTR also but just whats need for hostname lookup.

I am assuming this means tor clients, and tor browsers but have yet to 
validate that.

any other info on this would be helpful.  still trying to dig around and 
find where the data may be.


-N6Ghost






_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170601140346</emailId><senderName>Hugo Maxwell Connery</senderName><senderEmail>hmco@env.dtu.dk</senderEmail><timestampReceived>2017-06-01 14:03:46-0400</timestampReceived><subject>[tor-dev] Safe post-quantum RSA?  So says DJB and others</subject><body>

Interesting (and surprising):

https://eprint.iacr.org/2017/351.pdf

/Hugo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170702134227</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-07-02 13:42:27-0400</timestampReceived><subject>[tor-dev] Default parsing order of config files in Debain tor package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello, Tor developers!

With the implementation of torrc.d, there will be at least two Tor
config files and one Tor config directory by default in Debian tor
package. However, I am not able to find the documents on what the
parsing order Tor follows.

My guess is that:
1. /usr/share/tor/tor-service-defaults-torrc is parsed first
2. /etc/torrc.d is parsed next (in lexical order)
3. /etc/torrc is parsed at last
4. and the lines in config files parsed later will overwrite similar
lines in config files that are parsed earlier

Could anyone familiar with the problem help me please? This will be
really helpful to my future work and I really appreciate your help!

Thank you very much!

Best,
iry
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZWPgFAAoJEKFLTbxtzdU8HpoP/3dz869rQmlAMC4v/2UAO0F+
hPtC/L27ILeICraQRc2sJOsf7FTueKD/a6GadUbCbWBwWyyzdBXotqADnmJdvNnm
hSgkE1mYz27+eI2NUd7UpHs+NrP7FXdjufGkHxZfJPrhTbGKPCC66HouT+T1vdh5
PTRBjc6M/+C2yRuteGRcAW6Be3NJ+3HRuFC5THJd6b+p0WmP+OYXdVlq7cXuY3zj
ffaXvX7WGOH2J+ALIaspc0wjLiieUCq5wrO7REkeUM0TuqjhWWGBhANqVM1Qrfs+
0jWPRklFq/7BkfySUZA88H6D5pkpBX3eVDsUlduxvoSS/F8ksWzAIdMMFaz9a7tR
GpCEBBmbJIN3d4ApF78h//Y9XkaBsAotf40YEC4uZ4h3iW4rlyojWuU7N78A36PL
MJ0IdUm52hWy7ySRDFi9lr7y1xtGQ9qO1gAYCq7D+qeKte+E7UO/QKZjOkAMBBir
hxLimroNtL708rcDzLegstWt5Rpf2iJOYP1wOYnAeYfkSeXXW5KQBDJEd1botJg6
YRa69iICoLBNY+4z6i3t5lVlMolqPyAAwEfA1j4yXBrtBed8ISKx4V44y5JeGnZ2
SjMfHM6XJB95Bu8sWVQc1dQ+eBBiFYHbP4s4n1+jsTbmImg2bc+LauxChwRmAHek
o9KiSasLITPC7zIv1m2o
=KrAy
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170807174733</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-08-07 17:47:33-0400</timestampReceived><subject>[tor-dev] Proposal 280: Privacy-Preseving Statistics with Privcount in Tor</subject><body>

Hi!  Tim helped me write this this draft last week, and I shared it
with the PrivCount authors.  I've already gotten some good comments
from Aaron, which I'll repost in a followup message, with his
permission.

================================

Filename: 280-privcount-in-tor.txt
Title: Privacy-Preseving Statistics with Privcount in Tor
Author: Nick Mathewson, Tim Wilson-Brown
Created: 02-Aug-2017
Status: Draft

0. Acknowledgments

  Tariq Elahi, George Danezis, and Ian Goldberg designed and implemented
  the PrivEx blinding scheme. Rob Jansen and Aaron Johnson extended
  PrivEx's differential privacy guarantees to multiple counters in
  PrivCount:

  https://github.com/privcount/privcount/blob/master/README.markdown#research-background

  Rob Jansen and Tim Wilson-Brown wrote the majority of the experimental
  PrivCount code, based on the PrivEx secret-sharing variant. This
  implementation includes contributions from the PrivEx authors, and
  others:

  https://github.com/privcount/privcount/blob/master/CONTRIBUTORS.markdown

1. Introduction and scope

  PrivCount is a privacy-preserving way to collect aggregate statistics
  about the Tor network without exposing the statistics from any single
  Tor relay.

  This document describes the behavior of the in-Tor portion of the
  PrivCount system.  It DOES NOT describe the counter configurations,
  or any other parts of the system. (These will be covered in separate
  proposals.)

2. PrivCount overview

  Here follows an oversimplified summary of PrivCount, with enough
  information to explain the Tor side of things.  The actual operation
  of the non-Tor components is trickier than described below.

  All values in the scheme below are 64-bit unsigned integers; addition
  and subtraction are modulo 2^64.

  In PrivCount, a Data Collector (in this case a Tor relay) shares
  numeric data with N different Tally Reporters. (A Tally Reporter
  performs the summing and unblinding roles of the Tally Server and Share
  Keeper from experimental PrivCount.)

  All N Tally Reporters together can reconstruct the original data, but
  no (N-1)-sized subset of the Tally Reporters can learn anything about
  the data.

  (In reality, the Tally Reporters don't reconstruct the original data
  at all! Instead, they will reconstruct a _sum_ of the original data
  across all participating relays.)

  To share data, for each value X to be shared, the relay generates
  random values B_1 though B_n, and shares each B_i secretly with a
  single Tally Reporter.  The relay then publishes Y = X + SUM(B_i) + Z,
  where Z is a noise value taken at random from a gaussian distribution.
  The Tally Reporters can reconstruct X+Z by securely computing SUM(B_i)
  across all contributing Data Collectors. (Tally Reporters MUST NOT
  share individual B_i values: that would expose the underlying relay
  totals.)

  In order to prevent bogus data from corrupting the tally, the Tor
  relays and the Tally Reporters perform multiple "instances" of this
  algorithm, randomly sampling in each relays. The relay sends multiple
  Y values for each measurement, built with different sets of B_i.
  These "instances" are numbered in order from 1 to R.

  So that the system will still produce results in the event of a single
  Tally Reporter failure, these instances are distributed across multiple
  subsets of Tally Reporters.

  Below we describe a data format for this.

3. The document format

  This document format builds on the line-based directory format used
  for other tor documents, described in Tor's dir-spec.txt.

  Using this format, we describe two kinds of documents here: a
  "counters" document that publishes all the Y values, and a "blinding"
  document that describes the B_i values.  But see "An optimized
  alternative" below.

  The "counters" document has these elements:

    "privctr-dump-format" SP VERSION SP SigningKey

       [At start, exactly once]

       Describes the version of the dump format, and provides an ed25519
       signing key to identify the relay.  The signing key is encoded in
       base64 with padding stripped. VERSION is "alpha" now, but should
       be "1" once this document is finalized.

       [[[TODO: Do we need a counter version as well?

          Noise is distributed across a particular set of counters,
          to provide differential privacy guarantees for those counters.
          Reducing noise requires a break in the collection.
          Adding counters is ok if the noise on each counter
          monotonically increases. (Removing counters always reduces
          noise.)

          We also need to work out how to handle instances with mixed
          Tor versions, where some Data Collectors report different
          counters to other Data Collectors. (The blinding works if we
          substitute zeroes for missing counters on Tally Reporters.
          But we also need to add noise in this case.)

          -teor
        ]]]

    "starting-at" SP IsoTime

       [Exactly once]

       The start of the time period when the statistics here were
       collected.

    "ending-at" SP IsoTime

       [Exactly once]

       The end of the time period when the statistics here were
       collected.

    "num-instances" SP Number

       [Exactly once]

       The number of "instances" that the relay used (see above.)

    "tally-reporter" SP Identifier SP Key SP InstanceNumbers

       [At least twice]

       The curve25519 public key of each Tally Reporter that the relay
       believes in.  (If the list does not match the list of
       participating tally reporters, they won't be able to find the
       relay's values correctly.)  The identifiers are non-space,
       non-nul character sequences.  The Key values are encoded in
       base64 with padding stripped; they must be unique within each
       counters document.  The InstanceNumbers are comma-separated lists
       of decimal integers from 0 to (num-instances - 1), in ascending
       order.

    Keyword ":" SP Int SP Int SP Int ...

       [Any number of times]

       The Y values for a single measurement.  There are num-instances
       such Y values for each measurement.  They are 64-bit unsigned
       integers, expressed in decimal.

       The "Keyword" denotes which measurement is being shared. Keyword
       MAY be any sequence of characters other than colon, nul, space,
       and newline, though implementators SHOULD avoid getting too
       creative here.  Keywords MUST be unique within a single document.
       Tally Reporters MUST handle unrecognized keywords.  Keywords MAY
       appear in any order.

       It is safe to send the blinded totals for each instance to every
       Tally Reporter. To unblind the totals, a Tally Reporter needs:
         * a blinding document from each relay in the instance, and
         * the per-counter blinding sums from the other Tally Reporters
           in their instance.

       [[[TODO: But is it safer to create a per-instance counters
          document? -- teor]]]

       The semantics of individual measurements are not specified here.

    "signature" SP Signature

       [At end, exactly once]

       The Ed25519 signature of all the fields in the document, from the
       first byte, up to but not including the "signature" keyword here.
       The signature is encoded in base64 with padding stripped.


  The "blinding" document has these elements:

    "privctr-secret-offsets" SP VERSION SP SigningKey

       [At start, exactly once.]

       The VERSION and SigningKey parameters are the same as for
       "privctr-dump-format".

    "instances" SP Numbers

       [Exactly once]

       The instances that this Tally Reporter handles.
       They are given as comma-separated decimal integers, as in the
       "tally-reporter" entry in the counters document.  They MUST
       match the instances listed in the counters document.

       [[[TODO: this is redundant. Specify the constraint instead? --teor]]]

    "num-counters" SP Number

       [Exactly once]

       The number of counters that the relay used in its counters
       document. This MUST be equal to the number of keywords in the
       counters document.

       [[[TODO: this is redundant. Specify the constraint instead? --teor]]]

    "tally-reporter-pubkey" SP Key

       [Exactly once]

       The curve25519 public key of the tally reporter who is intended
       to receive an decrypt this document.  The key is base64-encoded
       with padding stripped.

    "count-document-digest" SP "sha3" Digest NL
    "-----BEGIN ENCRYPTED DATA-----" NL
    Data
    "-----END ENCRYPTED DATA-----" NL

       [Exactly once]

       The SHA3-256 digest of the count document corresponding to this
       blinding document.  The digest is base64-encoded with padding
       stripped.  The data encodes the blinding values (See "The
       Blinding Values") below, and is encrypted to the tally reporter's
       public key using the hybrid encryption algorithm described below.

    "signature" SP Signature

       [At end, exactly once]

       The Ed25519 signature of all the fields in the document, from the
       first byte, up to but not including the "signature" keyword here.
       The signature is encoded in base64 with padding stripped.


4. The Blinding Values

  The "Data" field of the blinding documents above, when decrypted,
  yields a sequence of 64-bit binary values, encoded in network
  (big-endian) order.  There are C * R such values, where C is the number
  of keywords in the count document, and R is the number of instances
  that the Tally Reporter participates in. The client generates all of
  these values uniformly at random.

  For each keyword in the count document, in the order specified by the
  count document, the decrypted data holds R*8 bytes for the specified
  instance of that keyword's blinded counter.

  For example: if the count document lists the keywords "b", "x", "g",
  and "a" (in that order), and lists instances "0", and "2", then the
  decrypted data will hold the blinding values in this order:
      b, instance 0
      b, instance 2
      x, instance 0
      x, instance 2
      g, instance 0
      g, instance 2
      a, instance 0
      a, instance 2


4. Implementation Notes

  A relay should, when starting a new round, generate all the blinding
  values and noise values in advance.  The relay should then use these
  values to compute Y_0 = SUM(B_i) + Z for each instance of each
  counter.  Having done this, the relay MUST encrypt the blinding values
  to the public key of each tally reporter, and wipe them from memory.


5. The hybrid encryption algorithm

  We use a hybrid encryption scheme above, where items can be encrypted
  to a public key.  We instantiate it as follows, using curve25519
  public keys.

  To encrypt a plaintext M to a public key PK1
     1. the sender generates a new ephemeral keypair sk2, PK2.
     2. The sender computes the shared diffie hellman secret
        SEED = (sk2 * PK1).

     3. The sender derives 64 bytes of key material as
          SHAKE256(TEXT | SEED)[...64]
        where "TEXT" is "Expand curve25519 for privcount encryption".

        The first 32 bytes of this is an aes key K1;
        the second 32 bytes are a mac key K2.

     4. The sender computes a ciphertext C as AES256_CTR(K1, M)

     5. The sender computes a MAC as
          SHA3_256([00 00 00 00  00 00 00 20] | K2 | C)

     6. The hybrid-encrypted text is PK2 | MAC | C.


6. An optimized alternative

   As an alternative, the sequences of blinding values is NOT transmitted
   to the tally reporters.  Instead the client generates a single
   ephemeral keypair sk_c, PK_c, and places the public key in its counts
   document.  It does this each time a new round begins.

   For each tally reporter with public key PK_i, the client then does
   the handshake sk_c * PK_i to compute SEED_i.

   The client then generates the blinding values for that tally reporter
   as SHAKE256(SEED_i)[...R*C*8].

   After initializing the counters to Y_0, the client can discard the
   blinding values and sk_c.

   Later, the tally reporters can reconstruct the blinding values as
   SHAKE256(sk_i * PK_c)[...]

   This alternative allows the client to transmit only a single public
   key, when previously it would need to transmit a complete set of
   blinding factors for each tally reporter. Further, the alternative
   does away with the need for blinding documents altogether.  It is,
   however, more sensitive to any defects in SHAKE256 than the design
   above.  Like the rest of this design, it would need rethinking if we
   want to expand this scheme to work with anonymous data collectors,
   such as Tor clients.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170907212600</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-09-07 21:26:00-0400</timestampReceived><subject>[tor-dev] Help us build Tails 3.2~alpha1 build reproducibly</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Dear Tails and Tor contributors,
dear Reproducible Builds community,

We have sent out a first call [1] for testing to build Tails 3.1 reproducibly
and we have received some build reports. Thank you very much for your help! We
have since then tried to fix most of the identified issues [2] in Tails
3.2~alpha1, and thus we'd kindly like to ask you to try to build the new ISO
image again, or even for the first time. Please don't hesitate to contact us
if you get stuck at some point in the process, for example by connecting to our
chatroom [3]! You can also send us email to tails-dev at boum.org (public) or
tails at boum.org (private).

Note that Tails 3.2~alpha1 is *not* recommended for real usage, since it has
not gone through *any* QA. Please use Tails 3.1 instead until Tails 3.2 is
released!

# How?

For your convenience all instructions needed to attempt to reproduce
Tails 3.2~alpha1 are included hereafter. However all commands are
adapted for Debian Stretch (and Buster/Sid), so your results may vary if
you run another Linux distribution. Our full build instructions [4]
might help if you are having problems.

## Setup the build environment

Building Tails requires the KVM virtual machine hypervisor to be
available, a minimum of 1 GiB of free RAM and a maximum of 20 GB of
free storage.

### Install dependencies

    sudo apt-get install \
        git \
        rake \
        libvirt-daemon-system \
        dnsmasq-base \
        ebtables \
        qemu-system-x86 \
        qemu-utils \
        vagrant \
        vagrant-libvirt \
        vmdebootstrap &amp;&amp; \
    sudo systemctl restart libvirtd

### If building as a non-root user

(Skip this section if you intend to build Tails as the root user!)

Make sure that the user that is supposed to initiate the build is part
of the relevant groups:

    for group in kvm libvirt libvirt-qemu; do sudo adduser $user $group; done

Then run `newgrp` (or just reboot) to apply the new group memberships
to the session.

## Build Tails 3.2~alpha1

    git clone https://git-tails.immerda.ch/tails
    cd tails
    git checkout 3.2~alpha1
    git submodule update --init
    rake build

# Send us feedback!

No matter how your build attempt turned out we are interested in you
sending us feedback. For that we'll first need some information of the
system you used -- please run these commands in the exact same
terminal session that you ran `rake build` in (e.g. run them right
after `rake build`)!

    sudo apt install apt-show-versions || :
    (
      for f in /etc/issue /proc/cpuinfo
      do
        echo "--- File: ${f} ---"
        cat "${f}"
        echo
      done
      for c in free locale env 'uname -a' '/usr/sbin/libvirtd --version' \
                'qemu-system-x86_64 --version' 'vagrant --version'
      do
        echo "--- Command: ${c} ---"
        eval "${c}"
        echo
      done
      if which apt-show-versions &gt;/dev/null
      then
        echo '--- APT package versions ---'
        apt-show-versions qemu:amd64 linux-image-amd64:amd64 vagrant \
                          libvirt0:amd64
      fi
    ) | bzip2 &gt; system-info.txt.bz2

Please have a look at the generated file with

    bzless system-info.txt.bz2

to make sure it doesn't contain any sensitive information you do not
want to leak in case you send this file to us or make it public!

Next, please follow the instructions below that match your situation!

## If the build failed.

Please open a ticket on our bug tracker [5] with "Category" set to
"Build system" and `system-info.txt.bz2` attached (note that this makes
this file public).

## If the build succeeded ...

Please compute the SHA-512 checksum of the resulting ISO image:

    sha512sum tails-amd64-3.2~alpha1.iso

and compare it to:

    1c928336264fc44821562f2fffbda4da97dcdc38072fce58f55b749fde04ac60055273cfc021b6c57120c5d276980859ffa3a5b0bd0f9c98851f34b682a09b02 \
tails-amd64-3.2~alpha1.iso

Bonus points if you verify the signed (with: [8]) message containing
the checksum below (note that manually inserted line-wraps marked with
"`\`"). If you run Tails, the verification is very easy! :) [9]

- -----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

    $ sha512sum tails-amd64-3.2~alpha1.iso
    1c928336264fc44821562f2fffbda4da97dcdc38072fce58f55b749f \
    de04ac60055273cfc021b6c57120c5d276980859ffa3a5b0bd0f9c98 \
    851f34b682a09b02  tails-amd64-3.2~alpha1.iso

- -----BEGIN PGP SIGNATURE-----

iQJDBAEBCgAtFiEEuiwiL0SsAO2YmTiTmP7GvHUqPbYFAlmxqwAPHHRhaWxzQGJv
dW0ub3JnAAoJEJj+xrx1Kj22RgAP/0auINj6Y5svR7DfeRF8HxPdnd2Rw/8VIiaM
isN3eQoAmNGUtEe50b9VXY+UidCdWtApbZbyZPKFz9ITJOxp0XeSGS8K2+Y0PZIx
NSIEYCx2LEWlzY96ivH2B4pboeq2TIzj/VkPLISYGc80CYRT32OzMRkDDcQn+3+Y
2dkGVf1HPvreZ7c7cUfozay4TNPhKrn2p5IZp1jHgpiq8aAYIv5jcubR//lm1W3S
Ol/IpTQrxzCShJHzsCh1l6/7zLSx5Dv8ITTEIHTj2OTCsZdAcFnznB4byaHVfVQ0
jSogb+b2J6skNhlsHtX2Jo9xK6Ni9NKsCzYYQ2KgWufC93Cvpmh5J164CqkI/DEd
ixe/KbFURP9sTzEL38ExS2DVbMvFvYTmmBmWzvU3USMo0nWfaErye2RIs4yB2pM6
wbsgy1g93tQ49YUU0eKFcoUQLnQpKJmZVsLacdkGpLTn7pL9uHR3AcUnRT27CSzb
anzpyLVTllyApU+Suu3f5rJibx9ysmLu8gHp5/Osd54qzSBR9JVrhMTkgJmZnit4
67wuSWJDQgvhMKxRz+zB/z4biORIfyblviR4rv1ZbAfX/ChP25CWUxG9Tgk1Esp0
LMzroJyQNfmy++6GrGuHJ3miRsKwO66ot84GSc5/pN1cJHKYiNa4HQhfb+VZBXbk
HoXLV3eR
=Hhyr
- -----END PGP SIGNATURE-----

### ... and the checksums match (i.e. reproduction succeeded).

Congrats for successfully reproducing Tails 3.2~alpha1! Please send an email
to tails-dev at boum.org (public) or tails at boum.org (private) with the
subject "Reproduction of Tails 3.2~alpha1 successful" and attach
`system-info.txt.bz2` to it.

### ... and the checksums differ (i.e. reproduction failed).

Now you are in a great position to help Tails improve its
reproducibility! Please install
`diffoscope` [7] version 83 or higher. If you
run Debian Stretch, that is:

    echo 'deb http://ftp.debian.org/debian stretch-backports main' \
      | sudo tee /etc/apt/sources.list.d/stretch-backports.list &amp;&amp; \
    sudo apt update &amp;&amp; \
    sudo apt -o APT::Install-Suggests="true" \
             -o APT::Install-Recommends="true" \
             install diffoscope -t stretch-backports

Then download the official Tails 3.2~alpha1 ISO image [6] and compare it
to yours:

    diffoscope \
        --text diffoscope.txt \
        --html diffoscope.html \
        --max-report-size 262144000 \
        --max-diff-block-lines 10000 \
        --max-diff-input-lines 10000000 \
            path/to/official/tails-amd64-3.2~alpha1.iso \
            path/to/your/tails-amd64-3.2~alpha1.iso &amp;&amp; \
    bzip2 diffoscope.*

Please send an email to tails-dev at boum.org (public) or tails at boum.org
(private) with the subject "Reproduction of Tails 3.2~alpha1 failed" and
attach `system-info.txt.bz2` to it. We also want you attach one (the
smallest!) of `diffoscope.txt.bz2` and `diffoscope.html.bz2` to the email,
but if they are "big" (say &gt;100 KiB) then please don't bomb our mail
inboxes! Instead upload the file to some web-based file-sharing
service (we recommend RiseUp [10]) and include the link(s) in the email.

Thank you very much for your interest and help!

Cheers!
The Tails project

[1] https://mailman.boum.org/pipermail/tails-dev/2017-August/011591.html
[2] https://labs.riseup.net/code/issues/13624
https://mailman.boum.org/pipermail/tails-dev/2017-March/011297.html
[3] https://tails.boum.org/support/#talk
[4] https://tails.boum.org/contribute/build
[5] https://labs.riseup.net/code/projects/tails/issues/new
[6] http://dl.amnesia.boum.org/tails/alpha/tails-amd64-3.2~alpha1/
https://mirrors.wikimedia.org/tails/alpha/tails-amd64-3.2~alpha1/
https://mirrors.kernel.org/tails/alpha/tails-amd64-3.2~alpha1/
[7] https://diffoscope.org/
[8] https://tails.boum.org/tails-signing.key
[9] https://tails.boum.org/doc/encryption_and_privacy/gpgapplet/decrypt_verify/
[10] https://share.riseup.net/
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEUrafEKOweFrQWvtHHYTM8BDMW8cFAlmxuZIACgkQHYTM8BDM
W8fBag/+PlnYIFIfxf4KbPh97Tm9hrNlC6bJp5uTC+6WebBamVsEDekQXnXRzEtF
wN4btdFG7MJuLHocSqeiV7gX33A07+KaugqCjQ4NJcVkZ6L9HPK6a1bjn9909EWw
l/Cfn0NxaSkfGLhOsk2wFOm2BHU890But+j3bOPOU61JNMVUpwiHUbN2DS1xDK2X
ZKE0dlOP3O4TC7kee7rRy6PFUVQx0eQkVW+1qrcusEeHEkc/Z6YzuLmNBdcHJ96m
/OfkEi4ygY6l9j0B8z4O/vqPkyeU5VWQWwhhnETvJiSDqs5WNLDuttHOsumP0r29
sluAmicjNoM48mWJHwiyLYnEt5SfFHXOqHXPP1k5YzTOMLRfv/F2eH4Zoq/eI8TM
sJy2MO+MgShH8SAOe1vJMBlV9Jqs6t85eToQt+39RFCCn4geyEYlynrk2Ka2hE3n
ycn2Qa79nbNK8NJve+1rPZTiJq3lgYyXTYyb8chefKyWm1IsAdY8grS0UIYP44Po
KAApudKD75DuCf6qczkOChVeAOcABu63RmAJLnJTYnEwGf7JLJ+KHrCdq0FQQS8s
/PulDSSDZo9bhLAHx9tO2T6p2snJfZSf9/dmvM5H+kOlMwzY8GciCgN6wlluwlnU
5WMfAMYT5mhuKIH/WIU5BXlKuUj1MuOi0c64q2MQM2GByJ6SOa8=
=6m+4
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171006094810</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-10-06 09:48:10-0400</timestampReceived><subject>[tor-dev] Your input on the Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello everyone,

we, the Tor Metrics Team, are currently drafting a roadmap for the work
we'd like to do on in the upcoming 12 months until September 2018.

If you believe that you're affected by these plans and want your ideas
to be included in this roadmap, please read our current draft and send
your feedback either to this list, to the metrics-team@ mailing list, or
to iwakeh or irl and/or me directly.

https://people.torproject.org/~karsten/volatile/metrics-team-roadmap-2017=
-10-06.pdf

In particular, we're interested in:

 - tasks we're missing or that we're listing as long-term goals (Q4/2018
or later) that you think should have higher priority over the tasks we
picked for the time until Q3/2018,

 - tasks that we picked that you think we put in for you or users with
similar interests and that you think we could de-prioritize, and

 - tasks that you'd want to contribute to in any way, in which case we
might reach out to you when we start working on them.

Thanks for helping to make this roadmap document reflect what really
needs to be done to make Tor Metrics better.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171103215835</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-03 21:58:35-0400</timestampReceived><subject>[tor-dev] anonbib</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

our plan with the bibliography collection of GNUnet is to
implement something similar to your/freehaven's anonbib.

While running the build and cache update of it from
current git HEAD on the anonbib.cfg I noticed a number of
outdated and broken links.

I'm currently playing with 2 options: re-use anonbib as it is
and change the style + some of its content (for us at GNUnet)
or write something similar to it.
From my perspective option 1 would be the best as we could
work on fixing links together, keep the content up-to-date
and at the same time keep the duplicate efforts and work
down to a minimum.

What do you think?
-- 
ng0
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dist.ng0.infotropique.org/dist/keys/
https://www.infotropique.org https://ng0.infotropique.org

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171201044911</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2017-12-01 04:49:11-0400</timestampReceived><subject>[tor-dev] Running Tor with a 15MB memory limit</subject><body>


I am currently supporting the iCepa project, an effort to get Tor to run
as a Network Extension VPN on iOS.

https://github.com/iCepa/iCepa

The good news is that, after a long time, we have the whole thing
somewhat working. The bad news is that after browsing a few pages
through Tor, the extension is shutdown due to going over the extremely
tiny 15MB available heap. More on this at:

https://forums.developer.apple.com/thread/73148
https://developer.apple.com/documentation/networkextension

My question is, does anyone else have experience running Tor within some
extreme memory limits? Any guidance on configuring torrc for this? Any
thoughts on build flags or changes that might reduce memory usage?

We have already identified that the new compression features available
in recent versions of Tor consume more memory, and we may have to
disable those for now, for instance.

Thanks for any thoughts!

+n
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171231005304</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2017-12-31 00:53:04-0400</timestampReceived><subject>[tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/signed)]


# Synopsis

The Bech32 standard for error-correcting base32 strings was developed 
explicitly for relative ease and reliability in human communication of 
pseudorandom bitstrings.  I invite discussion of specifying Bech32 as an 
alternative means for representing RFC 7686 .onion domain names.  Should 
the response hereto be positive, then I will offer a formal proposal.

I have written and released a tool which automatically recognizes and 
encodes/decodes .onion addresses in Bech32.  To complement whatever I 
here say, please get a hands-on feel for Bech32 .onions:

https://github.com/nym-zone/bech32

Manpage (yes, a real manpage!):
https://raw.githubusercontent.com/nym-zone/bech32/master/bech32.1.txt

# Background: About Bech32

Bech32 is specified by the Bitcoin BIP 173 standard,[1] co-authored by 
Pieter Wuille and Greg Maxwell.  According to Mr. Maxwell, "Bech32 is 
designed for human use and basically nothing else"; the underlying 
research and development process involved extensive testing with human 
users, analysis of NIST visual confusability data, and the integration 
of a BCH code with strong error correction and detection properties.

[1] https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki

I refer to BIP 173 for further explanation of Bech32's design 
properties, its rationales, and the limits of its error handling.

A specific application of Bech32 is Bitcoin's new address format for the 
future, which I call "Bravo Charlie Addresses" after the letters "bc" 
specified for Bitcoin addresses in the standard's "human-readable part" 
(HRP).  However, the standard was written to permit general use in other 
applications.

Having in hand a standard explicitly designed to ease the pain which 
wetware suffers when it comes into contact with pseudorandom gibberish, 
the cypherpunk in me is overjoyed at the potentials.  One is a concept 
which I call "PGP Descriptors", which I am currently working to specify 
with a few extra features and nuances.  And of course, I think of 
.onions!

# Bech32 for .onion

I hereby nominate "onion" as the logical HRP for RFC 7686 .onion 
special-use domain names.

Here is Bech32 .onion by example, using my bech32 tool with its built-in 
.onion support to encode and decode the name for the Tor Project's 
.onion equivalent of its "www" site:

```
$ bech32 -e expyuzz4wqqyqhjn.onion
onion1yh0c5eeuksscs8fdyd8406
$ bech32 -d onion1yh0c5eeuksscs8fdyd8406
expyuzz4wqqyqhjn.onion
```

The string is longer, because it contains 6 base32 characters' worth of 
error-correcting code.  N.b. also, the foregoing should work just fine 
for v3 onions (formerly prop-224).

Imagine the impact on users who have a practical need to transmit a 
.onion address by verbal communication, or via a handwritten note.  Now 
they can get some help with errors, instead of wondering why they can't 
connect to a nonexistent .onion site.

The standard enjoins applications against autocorrecting Bitcoin 
addresses, so as to prevent even the slightest possibility of causing 
funds loss by being too "helpful".  But in applications where it would 
be safe to do so, Bech32 can indeed correct small errors (as well as 
reliably detecting much worse errors).  I suggest that such automatic 
correction would be suitable for .onion addresses.

Bech32 co-author Dr. Wuille (sipa) has published Javascript reference 
code, plus a Javascript error-correction demo, under an MIT license.  
Perhaps this may be easily adapted into Torbutton, for automagic 
decoding of Bech32 "onion1" to .onion domains in the Tor Browser address 
bar.  The code is in the same repository whence I copied the Bech32 
reference C code I use internally in my tool:

https://github.com/sipa/bech32

# Conclusion—or, to be continued...

An alternative representational format with error-correcting codes will 
make .onion addresses more human-friendly.  I look forward to the day 
when "onion1" addresses can be passed by handwritten notes, vocalized 
with a radio alphabet, stuffed into QR codes, scrawled on parchments 
placed in bottles tossed to sea, rocketed into space, and then 
conveniently transformed with appropriate corrections into the DNS-style 
.onion format specified by RFC 7686.

Here's to the alternative Onion format of the future!

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231005749</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-12-31 00:57:49-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks! That's very interesting!  TIL :-)

What would you propose to do with subdomains, like
www.facebookcorewwwi.onion? Or is that outside the scope of your proposal?

- alec

On 31 Dec 2017 00:53, "nullius" &lt;nullius@nym.zone&gt; wrote:

&gt; # Synopsis
&gt;
&gt; The Bech32 standard for error-correcting base32 strings was developed
&gt; explicitly for relative ease and reliability in human communication of
&gt; pseudorandom bitstrings.  I invite discussion of specifying Bech32 as an
&gt; alternative means for representing RFC 7686 .onion domain names.  Should
&gt; the response hereto be positive, then I will offer a formal proposal.
&gt;
&gt; I have written and released a tool which automatically recognizes and
&gt; encodes/decodes .onion addresses in Bech32.  To complement whatever I here
&gt; say, please get a hands-on feel for Bech32 .onions:
&gt;
&gt; https://github.com/nym-zone/bech32
&gt;
&gt; Manpage (yes, a real manpage!):
&gt; https://raw.githubusercontent.com/nym-zone/bech32/master/bech32.1.txt
&gt;
&gt; # Background: About Bech32
&gt;
&gt; Bech32 is specified by the Bitcoin BIP 173 standard,[1] co-authored by
&gt; Pieter Wuille and Greg Maxwell.  According to Mr. Maxwell, "Bech32 is
&gt; designed for human use and basically nothing else"; the underlying research
&gt; and development process involved extensive testing with human users,
&gt; analysis of NIST visual confusability data, and the integration of a BCH
&gt; code with strong error correction and detection properties.
&gt;
&gt; [1] https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki
&gt;
&gt; I refer to BIP 173 for further explanation of Bech32's design properties,
&gt; its rationales, and the limits of its error handling.
&gt;
&gt; A specific application of Bech32 is Bitcoin's new address format for the
&gt; future, which I call "Bravo Charlie Addresses" after the letters "bc"
&gt; specified for Bitcoin addresses in the standard's "human-readable part"
&gt; (HRP).  However, the standard was written to permit general use in other
&gt; applications.
&gt;
&gt; Having in hand a standard explicitly designed to ease the pain which
&gt; wetware suffers when it comes into contact with pseudorandom gibberish, the
&gt; cypherpunk in me is overjoyed at the potentials.  One is a concept which I
&gt; call "PGP Descriptors", which I am currently working to specify with a few
&gt; extra features and nuances.  And of course, I think of .onions!
&gt;
&gt; # Bech32 for .onion
&gt;
&gt; I hereby nominate "onion" as the logical HRP for RFC 7686 .onion
&gt; special-use domain names.
&gt;
&gt; Here is Bech32 .onion by example, using my bech32 tool with its built-in
&gt; .onion support to encode and decode the name for the Tor Project's .onion
&gt; equivalent of its "www" site:
&gt;
&gt; ```
&gt; $ bech32 -e expyuzz4wqqyqhjn.onion
&gt; onion1yh0c5eeuksscs8fdyd8406
&gt; $ bech32 -d onion1yh0c5eeuksscs8fdyd8406
&gt; expyuzz4wqqyqhjn.onion
&gt; ```
&gt;
&gt; The string is longer, because it contains 6 base32 characters' worth of
&gt; error-correcting code.  N.b. also, the foregoing should work just fine for
&gt; v3 onions (formerly prop-224).
&gt;
&gt; Imagine the impact on users who have a practical need to transmit a .onion
&gt; address by verbal communication, or via a handwritten note.  Now they can
&gt; get some help with errors, instead of wondering why they can't connect to a
&gt; nonexistent .onion site.
&gt;
&gt; The standard enjoins applications against autocorrecting Bitcoin
&gt; addresses, so as to prevent even the slightest possibility of causing funds
&gt; loss by being too "helpful".  But in applications where it would be safe to
&gt; do so, Bech32 can indeed correct small errors (as well as reliably
&gt; detecting much worse errors).  I suggest that such automatic correction
&gt; would be suitable for .onion addresses.
&gt;
&gt; Bech32 co-author Dr. Wuille (sipa) has published Javascript reference
&gt; code, plus a Javascript error-correction demo, under an MIT license.
&gt; Perhaps this may be easily adapted into Torbutton, for automagic decoding
&gt; of Bech32 "onion1" to .onion domains in the Tor Browser address bar.  The
&gt; code is in the same repository whence I copied the Bech32 reference C code
&gt; I use internally in my tool:
&gt;
&gt; https://github.com/sipa/bech32
&gt;
&gt; # Conclusion—or, to be continued...
&gt;
&gt; An alternative representational format with error-correcting codes will
&gt; make .onion addresses more human-friendly.  I look forward to the day when
&gt; "onion1" addresses can be passed by handwritten notes, vocalized with a
&gt; radio alphabet, stuffed into QR codes, scrawled on parchments placed in
&gt; bottles tossed to sea, rocketed into space, and then conveniently
&gt; transformed with appropriate corrections into the DNS-style .onion format
&gt; specified by RFC 7686.
&gt;
&gt; Here's to the alternative Onion format of the future!
&gt;
&gt; --
&gt; nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
&gt; Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
&gt; 3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
&gt; "‘If you're not doing anything wrong, you have nothing to hide.'
&gt; No!  Because I do nothing wrong, I have nothing to show." — nullius
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Thanks! That's very interesting!   TIL :-)&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;What would you propose to do with subdomains, \
like www.facebookcorewwwi.onion? Or is that outside the scope of your \
proposal?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;- alec&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 31 Dec 2017 00:53, \
"nullius" &lt;nullius@nym.zone&gt; wrote:&lt;br type="attribution"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;# Synopsis&lt;br&gt; &lt;br&gt;
The Bech32 standard for error-correcting base32 strings was developed explicitly for \
relative ease and reliability in human communication of pseudorandom bitstrings.   I \
invite discussion of specifying Bech32 as an alternative means for representing RFC \
7686 .onion domain names.   Should the response hereto be positive, then I will offer \
a formal proposal.&lt;br&gt; &lt;br&gt;
I have written and released a tool which automatically recognizes and encodes/decodes \
.onion addresses in Bech32.   To complement whatever I here say, please get a \
hands-on feel for Bech32 .onions:&lt;br&gt; &lt;br&gt;
&lt;a href="https://github.com/nym-zone/bech32" rel="noreferrer" \
target="_blank"&gt;https://github.com/nym-zone/be&lt;wbr&gt;ch32&lt;/a&gt;&lt;br&gt; &lt;br&gt;
Manpage (yes, a real manpage!):&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/nym-zone/bech32/master/bech32.1.txt" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.&lt;wbr&gt;com/nym-zone/bech32/master/bec&lt;wbr&gt;h32.1.txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
# Background: About Bech32&lt;br&gt;
&lt;br&gt;
Bech32 is specified by the Bitcoin BIP 173 standard,[1] co-authored by Pieter Wuille \
and Greg Maxwell.   According to Mr. Maxwell, "Bech32 is designed for human use and \
basically nothing else"; the underlying research and development process involved \
extensive testing with human users, analysis of NIST visual confusability data, and \
the integration of a BCH code with strong error correction and detection \
properties.&lt;br&gt; &lt;br&gt;
[1] &lt;a href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki" \
rel="noreferrer" target="_blank"&gt;https://github.com/bitcoin/bip&lt;wbr&gt;s/blob/master/bip-0173.mediawi&lt;wbr&gt;ki&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
I refer to BIP 173 for further explanation of Bech32's design properties, its \
rationales, and the limits of its error handling.&lt;br&gt; &lt;br&gt;
A specific application of Bech32 is Bitcoin's new address format for the future, \
which I call "Bravo Charlie Addresses" after the letters "bc" specified for Bitcoin \
addresses in the standard's "human-readable part" (HRP).   However, the standard was \
written to permit general use in other applications.&lt;br&gt; &lt;br&gt;
Having in hand a standard explicitly designed to ease the pain which wetware suffers \
when it comes into contact with pseudorandom gibberish, the cypherpunk in me is \
overjoyed at the potentials.   One is a concept which I call "PGP Descriptors", which \
I am currently working to specify with a few extra features and nuances.   And of \
course, I think of .onions!&lt;br&gt; &lt;br&gt;
# Bech32 for .onion&lt;br&gt;
&lt;br&gt;
I hereby nominate "onion" as the logical HRP for RFC 7686 .onion special-use domain \
names.&lt;br&gt; &lt;br&gt;
Here is Bech32 .onion by example, using my bech32 tool with its built-in .onion \
support to encode and decode the name for the Tor Project's .onion equivalent of its \
"www" site:&lt;br&gt; &lt;br&gt;
```&lt;br&gt;
$ bech32 -e expyuzz4wqqyqhjn.onion&lt;br&gt;
onion1yh0c5eeuksscs8fdyd8406&lt;br&gt;
$ bech32 -d onion1yh0c5eeuksscs8fdyd8406&lt;br&gt;
expyuzz4wqqyqhjn.onion&lt;br&gt;
```&lt;br&gt;
&lt;br&gt;
The string is longer, because it contains 6 base32 characters' worth of \
error-correcting code.   N.b. also, the foregoing should work just fine for v3 onions \
(formerly prop-224).&lt;br&gt; &lt;br&gt;
Imagine the impact on users who have a practical need to transmit a .onion address by \
verbal communication, or via a handwritten note.   Now they can get some help with \
errors, instead of wondering why they can't connect to a nonexistent .onion site.&lt;br&gt; \
&lt;br&gt; The standard enjoins applications against autocorrecting Bitcoin addresses, so \
as to prevent even the slightest possibility of causing funds loss by being too \
"helpful".   But in applications where it would be safe to do so, Bech32 can indeed \
correct small errors (as well as reliably detecting much worse errors).   I suggest \
that such automatic correction would be suitable for .onion addresses.&lt;br&gt; &lt;br&gt;
Bech32 co-author Dr. Wuille (sipa) has published Javascript reference code, plus a \
Javascript error-correction demo, under an MIT license.   Perhaps this may be easily \
adapted into Torbutton, for automagic decoding of Bech32 "onion1" to .onion domains \
in the Tor Browser address bar.   The code is in the same repository whence I copied \
the Bech32 reference C code I use internally in my tool:&lt;br&gt; &lt;br&gt;
&lt;a href="https://github.com/sipa/bech32" rel="noreferrer" \
target="_blank"&gt;https://github.com/sipa/bech32&lt;/a&gt;&lt;br&gt; &lt;br&gt;
# Conclusion—or, to be continued...&lt;br&gt;
&lt;br&gt;
An alternative representational format with error-correcting codes will make .onion \
addresses more human-friendly.   I look forward to the day when "onion1" addresses \
can be passed by handwritten notes, vocalized with a radio alphabet, stuffed into QR \
codes, scrawled on parchments placed in bottles tossed to sea, rocketed into space, \
and then conveniently transformed with appropriate corrections into the DNS-style \
.onion format specified by RFC 7686.&lt;br&gt; &lt;br&gt;
Here's to the alternative Onion format of the future!&lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00&lt;wbr&gt;591B2F307E0C&lt;br&gt;
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7&lt;wbr&gt;f6agex98an7h | (Segwit nested:&lt;br&gt;
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaY&lt;wbr&gt;kCnG)   (PGP RSA: 0x36EBB4AB699A10EE)&lt;br&gt;
"‘If you're not doing anything wrong, you have nothing to hide.'&lt;br&gt;
No!   Because I do nothing wrong, I have nothing to show." — nullius&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231024600</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2017-12-31 02:46:00-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/signed)]


On 2017-12-31 at 00:57:49 +0000, Alec Muffett &lt;alec.muffett@gmail.com&gt; 
wrote:
&gt;Thanks! That's very interesting!  TIL :-)

Why, if it isn't instant feedback from the RFC 7686 co-author!  In 
response to what you said, in brief:  I will propose that any subdomain 
data (which is presumably human-readable) be transmitted in a separate 
or affixed string, leaving Bech32 to deal with the pseudorandom blobs.  
Technical details follow.

&gt;What would you propose to do with subdomains, like 
&gt;www.facebookcorewwwi.onion? Or is that outside the scope of your 
&gt;proposal?

Good question.  That had briefly occurred to me; but I couldn't figure 
out any feasible means to stuff subdomains into the Bech32 string, for 
the following reasons:

(0) RFC 1034 DNS names may be up to 255 octets in length.  But Bech32 
strings are more length-limited.  After subtracting an HRP of "onion" (5 
chars), the required separator of "1", and the 6 characters of ECC 
checksum in the data part, the 90-character total length limit can only 
spare up to 78 characters for the onion address data.  For both v2 and 
v3 onions, that's more than sufficient.  But even if the length limit 
could be raised, an excessively long string would destroy the 
human-friendliness which is the raison d'être for Bech32.

(I *infer* that this last may be one reason for the length limit.  
Although of course I can't say for certain, I've read Greg Maxwell 
discussing some of the user testing involved in the standard's 
development; and 90 chars seems to me the extreme of what a mortal 
flesh-and-blood creature could handle with such a string.)

(1) Bech32 is a base-32 encoding, only with a different alphabet than 
RFC 4648.  Thus, it would be necessary to design another layer of 
encoding to most efficiently represent subdomain labels and the 
dot-separator with an alphabet of 38 characters [-0-9a-z.].  Worse, 
depending on which standards an implementation follows or ignores, that 
is not really a strict limitation on names seen in the wild.  How should 
the Bech32 transformation deal with names containing an underscore "_"?  
Or other characters?  I think it would only be safe to go with full 
octets.  This would severely exacerbate the problem of (0) above.

(Aside:  The special alphabet is bound to raise some eyebrows; so I will 
here quote its rationale from BIP 173:  "The character set is chosen to 
minimize ambiguity according to [this](https://hissa.nist.gov/~black/GTLD/) 
visual similarity data, and the ordering is chosen to minimize the 
number of pairs of similar characters (according to the same data) that 
differ in more than 1 bit.  As the checksum is chosen to maximize 
detection capabilities for low numbers of bit errors, this choice 
improves its performance under some error models."  From what I 
understand, a large amount of CPU time was spent crunching over the data 
in search of the most error-resistant alphabet.)

(2) Most subdomains are human-memorable—in your example, "www".  Coding 
them with Bech32 would decrease human-friendliness, which is the precise 
opposite of my objective in making this suggestion.  Bech32 is great for 
helping humans deal with pseudorandom blobs; for those, it improves upon 
RFC4648 Base32, Base64, hexadecimal, or in Bitcoin's case, the old 
base58-based address encoding.  But it is absolutely inappropriate as a 
coding format for text which humans can easily read, type, and remember.

It is also important to consider relative impact in common usage.  I 
observe that most .onions do not use subdomains.  I do think that it's 
important to support this use case; but if tradeoffs must be made, then 
I would optimize more for making that pseudorandom blob less brittle in 
human hands.

For the foregoing reasons, I will propose that subdomain data, if any, 
be kept separate from the Bech32 coding.  It may be either kept in a 
separate string, or somehow affixed with a special delimiter either 
before or after the Bech32 representation of the onion.  Off-the-cuff, 
which of these looks best to you?

	www:onion19qzypww2zw3ykkkglr4tu9

	onion19qzypww2zw3ykkkglr4tu9:www

	another-level.www:onion19qzypww2zw3ykkkglr4tu9

(My choice of a delimiter here may be wrong, if we want for the 
browser's address bar to translate it.  I should think more about this.)

Finally, I think I should mention:  Yes, "onion19qzypww2zw3ykkkglr4tu9" 
is not as pretty as "facebookcorewwwi.onion".  But few .onion sites have 
the compute power available to Facebook!  Moreover, my proposal should 
apply to v3 onions—where nobody on Earth will be able to fully 
bruteforce out a human-memorable string.

I would advise users to stick to the DNS-style coding for 
facebookcorewwwi.onion, and take advantage of Bech32 as an alternative 
representation for http://yz7lpwfhhzcdyc5y.onion/ , 
http://5nca3wxl33tzlzj5.onion/ , and other such strings.  Those are pure 
pain for users now, and it will only get use when v3 onions get uptake.  
Error-correcting codes do not make the names any easier to read; but 
they certainly do help with the inevitable mistakes in all the use cases 
which involve voice, handwriting, manual typing, carrier pigeons, etc.

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231032339</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-31 03:23:39-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Please read the naming layer API proposal before writing your proposal:

https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt

In particular, if you added a unique top-level domain (.bech?), you
would only have to specify how a the bech translation plugin works.
(It would be a much shorter proposal.)

&gt; On 31 Dec 2017, at 13:46, nullius &lt;nullius@nym.zone&gt; wrote:
&gt; 
&gt; For the foregoing reasons, I will propose that subdomain data, if any, be kept \
&gt; separate from the Bech32 coding.  It may be either kept in a separate string, or \
&gt; somehow affixed with a special delimiter either before or after the Bech32 \
&gt; representation of the onion.  Off-the-cuff, which of these looks best to you? 
&gt; www:onion19qzypww2zw3ykkkglr4tu9
&gt; 
&gt; onion19qzypww2zw3ykkkglr4tu9:www
&gt; 
&gt; another-level.www:onion19qzypww2zw3ykkkglr4tu9
&gt; 
&gt; (My choice of a delimiter here may be wrong, if we want for the browser's address \
&gt; bar to translate it.  I should think more about this.)

Why not:

www.onion19qzypww2zw3ykkkglr4tu9

Transforming the final 2 components and leaving the rest intact seems
like the most usable form. Particularly if you're going  to add a .bech at
the end of the address for prop#279.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please read the naming \
layer API proposal before writing your proposal:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.tx \
t"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In \
particular, if you added a unique top-level domain (.bech?), you&lt;/div&gt;&lt;div&gt;would only \
have to specify how a the bech translation plugin works.&lt;/div&gt;&lt;div&gt;(It would be a \
much shorter proposal.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;On 31 Dec 2017, at 13:46, nullius &lt;&lt;a \
href="mailto:nullius@nym.zone"&gt;nullius@nym.zone&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;For the foregoing reasons, I \
will propose that subdomain data, if any, be kept separate from the Bech32 coding. \
 It may be either kept in a separate string, or somehow affixed with a special \
delimiter either before or after the Bech32 representation of the onion. \
 Off-the-cuff, which of these looks best to \
you?&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   \
 www:onion19qzypww2zw3ykkkglr4tu9&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   \
 onion19qzypww2zw3ykkkglr4tu9:www&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   \
 another-level.www:onion19qzypww2zw3ykkkglr4tu9&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;(My \
choice of a delimiter here may be wrong, if we want for the browser's address bar to \
translate it.  I should think more about \
this.)&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Why not:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;www.&lt;span \
style="background-color: rgba(255, 255, 255, \
0);"&gt;onion19qzypww2zw3ykkkglr4tu9&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Transforming the final 2 components and leaving the rest \
intact seems&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;like the most usable form. Particularly if you're going  to add a .bech \
at&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;the end \
of the address for prop#279.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231114628</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-12-31 11:46:28-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/alternative)]


On 31 December 2017 at 02:46, nullius &lt;nullius@nym.zone&gt; wrote:

&gt; For the foregoing reasons, I will propose that subdomain data, if any, be
&gt; kept separate from the Bech32 coding.  It may be either kept in a separate
&gt; string, or somehow affixed with a special delimiter either before or after
&gt; the Bech32 representation of the onion.  Off-the-cuff, which of these looks
&gt; best to you?
&gt;
&gt;         www:onion19qzypww2zw3ykkkglr4tu9
&gt;
&gt;         onion19qzypww2zw3ykkkglr4tu9:www
&gt;
&gt;         another-level.www:onion19qzypww2zw3ykkkglr4tu9
&gt;
&gt; (My choice of a delimiter here may be wrong, if we want for the browser's
&gt; address bar to translate it.  I should think more about this.)
&gt;


I need to think about this more, and after coffee, but my first concerns
would be:

1) that having multiple representations of a site's onion address is likely
to break many/most sites, because of Host/Origin headers being complicated
enough already.

2) anything involving colons in any position ("https://
onion19qzypww2zw3ykkkglr4tu9:www/") is likely to break both
client-side-web-browsers and server-side-CMS-software unless they are
specially re-engineered for Tor, which is likely to inhibit use *of* Tor;
colons are a port-number separator in URLs, unless they come as part of an
IPv6 address in [square brackets].


My general sense is that:

a) if Onion addresses suddenly stop looking very-similar-to DNS addresses,
Tor risks returning to a world where special expertise is necessary to
build software for it, thereby harming growth/adoption

b) if Onion addresses have 2+ forms, one like the current (www.
4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.onion) and the
other being apparently more human-usable because it contains a CRC, the one
which allows access to websites will win.


My expectation to date has been that the problem with "
4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad" is that that
there is no place for the eyeball to rest when typing it in; as such I've
presumed that a canonical form, defined by Tor, would be something like:

https://www.
4acth47i-6kxnvkew-tm6q7ib2-s3ufpo5-sqbsnzjp-bi7utij-cltosqem-ad.onion/

 ...being N groups of M characters (where N and M can be argued, feel
free...) and where any unused characters within the 63-character
DNS-compliant budget can be used to implement a credit-card-like running
checksum or CRC, for quick client-side checks; eg: the URL bar can identify
that you are typing in an Onion address and leave it red-or-grey until you
type something which satisfies the checksum, before flinging it at
tor-daemon for attempted resolution.

Or, indeed, you could leave out the hyphens and do the same; the Prop224
Onion address is 59 characters, leaving a budget of 63-59==4 characters or
20 bits; we could put these at the end, in the space marked "@@@@":

  https://www4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad@
@@@.onion/

....and use those 20 bits to implement 5x 4-bit checksums over 12-character
chunks:

   https://{www
4acth47i6}{kxnvkewtm6q7}{ib2s3ufpo5sq}{bsnzjpbi7uti}{jcltosqemad@}@@@.onion/

...so that any UX component which wants to help the user can highlight (in
red? or bold?) where the problem is, picking out a chunk of 12 characters
which contain the typo:

   https://www4acth47i6kxnvkewtm6q7*ib2s3ujpo5sq*
bsnzjpbi7utijcltosqemadwxyz.onion/
  ---------------------------------^^^^^^^^^^^^

Spot the errant 'j'.

The advantage of a system like this is that it's not perfect, but a typo
mostly has to happen twice and be quite fortunate to go undetected.

Of course it's not perfect, but nothing will be, and clever selection of
checksum and encoding will result in something which is still DNS- and
Browser-compliant.

    -a



-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 31 \
December 2017 at 02:46, nullius &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:nullius@nym.zone" \
target="_blank"&gt;nullius@nym.zone&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;For the foregoing reasons, I will propose that \
subdomain data, if any, be kept separate from the Bech32 coding.   It may be either \
kept in a separate string, or somehow affixed with a special delimiter either before \
or after the Bech32 representation of the onion.   Off-the-cuff, which of these looks \
best to you?&lt;br&gt; &lt;br&gt;
            &lt;font face="monospace, \
monospace"&gt;www:onion19qzypww2zw3ykkkglr4t&lt;wbr&gt;u9&lt;/font&gt;&lt;br&gt; &lt;br&gt;
            &lt;font face="monospace, \
monospace"&gt;onion19qzypww2zw3ykkkglr4tu9:w&lt;wbr&gt;ww&lt;/font&gt;&lt;br&gt; &lt;br&gt;
            &lt;font face="monospace, \
monospace"&gt;another-level.www:onion19qzypw&lt;wbr&gt;w2zw3ykkkglr4tu9&lt;/font&gt;&lt;br&gt; &lt;br&gt;
(My choice of a delimiter here may be wrong, if we want for the browser's address bar \
to translate it.   I should think more about \
this.)&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I need to think about this \
more, and after coffee, but my first concerns would be:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) \
that having multiple representations of a site's onion address is likely to break \
many/most sites, because of Host/Origin headers being complicated enough \
already.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2) anything involving colons in any position \
("&lt;font face="monospace, monospace"&gt;https://&lt;/font&gt;&lt;span \
style="font-family:monospace,monospace"&gt;onion19qzypww2zw3ykkkglr4tu9:w&lt;/span&gt;&lt;wbr \
style="font-family:monospace,monospace"&gt;&lt;span \
style="font-family:monospace,monospace"&gt;ww&lt;/span&gt;&lt;font face="monospace, \
monospace"&gt;/&lt;/font&gt;") is likely to break both client-side-web-browsers and \
server-side-CMS-software unless they are specially re-engineered for Tor, which is \
likely to inhibit use *of* Tor; colons are a port-number separator in URLs, unless \
they come as part of an IPv6 address in [square \
brackets].&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My general sense is that:  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a) if Onion addresses suddenly stop looking very-similar-to \
DNS addresses, Tor risks returning to a world where special expertise is necessary to \
build software for it, thereby harming growth/adoption&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;b) if \
Onion addresses have 2+ forms, one like the current (&lt;font face="monospace, \
monospace"&gt;www.&lt;span \
style="color:rgb(84,84,84)"&gt;4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.&lt;/span&gt;onion&lt;/font&gt;) \
and the other being apparently more human-usable because it contains a CRC, the one \
which allows access to websites will win.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My \
expectation to date has been that the problem with "&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;font face="monospace, \
monospace"&gt;4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad&lt;/font&gt;&lt;/span&gt;" \
is that that there is no place for the eyeball to rest when typing it in; as such \
I've presumed that a canonical form, defined by Tor, would be something \
like:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;&lt;a \
href="https://www"&gt;https://www&lt;/a&gt;.&lt;span \
style="color:rgb(84,84,84)"&gt;4acth47i-6kxnvkew-tm6q7ib2-s3ufpo5-sqbsnzjp-bi7utij-cltosqem-ad.onion/&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
...being N groups of M characters (where N and M can be argued, feel free...) and \
where any unused characters within the 63-character DNS-compliant budget can be used \
to implement a credit-card-like running checksum or CRC, for quick client-side \
checks; eg: the URL bar can identify that you are typing in an Onion address and \
leave it red-or-grey until you type something which satisfies the checksum, before \
flinging it at tor-daemon for attempted resolution.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Or, \
indeed, you could leave out the hyphens and do the same; the Prop224 Onion address is \
59 characters, leaving a budget of 63-59==4 characters or 20 bits; we could put these \
at the end, in the space marked "@@@@":&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;   &lt;a href="https://www"&gt;https://www&lt;/a&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad@@@@.onion/&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;....and use those 20 \
bits to implement 5x 4-bit checksums over 12-character \
chunks:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;span style="font-family:monospace,monospace"&gt;   \
https://{www&lt;/span&gt;&lt;span \
style="font-family:monospace,monospace;color:rgb(84,84,84)"&gt;4acth47i6}{kxnvkewtm6q7}{ib2s3ufpo5sq}{bsnzjpbi7uti}{jcltosqemad@}@@@.onion/&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
face="monospace, monospace"&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;font face="arial, helvetica, sans-serif"&gt;...so that any \
UX component which wants to help the user can highlight (in red? or bold?) where the \
problem is, picking out a chunk of 12 characters which contain the \
typo:&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font face="monospace, monospace"&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font face="monospace, \
monospace" style="background-color:rgb(255,255,255)"&gt;     &lt;a \
href="https://www"&gt;https://www&lt;/a&gt;&lt;font \
color="#545454"&gt;4acth47i6kxnvkewtm6q7&lt;/font&gt;&lt;b style=""&gt;&lt;font \
color="#ff0000"&gt;ib2s3ujpo5sq&lt;/font&gt;&lt;/b&gt;&lt;font \
color="#545454"&gt;bsnzjpbi7utijcltosqemadwxyz.onion/&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="monospace, \
monospace"&gt;   ---------------------------------^^^^^^^^^^^^  \
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;Spot the errant 'j'.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;The advantage of a system like this is that it's not \
perfect, but a typo mostly has to happen twice and be quite fortunate to go \
undetected.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;Of course it's not perfect, but nothing will be, and \
clever selection of checksum and encoding will result in something which is still \
DNS- and Browser-compliant.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;      -a&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-family:monospace,monospace;color:rgb(84,84,84)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;a href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231120144</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-12-31 12:01:44-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/alternative)]


On 31 December 2017 at 11:46, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt;
&gt; ...so that any UX component which wants to help the user can highlight (in
&gt; red? or bold?) where the problem is, picking out a chunk of 12 characters
&gt; which contain the typo:
&gt;    https://www4acth47i6kxnvkewtm6q7*ib2s3ujpo5sq*bsnzjpbi7utijclt
&gt; osqemadwxyz.onion/
&gt;   ---------------------------------^^^^^^^^^^^^
&gt; Spot the errant 'j'.
&gt; The advantage of a system like this is that it's not perfect, but a typo
&gt; mostly has to happen twice and be quite fortunate to go undetected.
&gt; Of course it's not perfect, but nothing will be, and clever selection of
&gt; checksum and encoding will result in something which is still DNS- and
&gt; Browser-compliant.
&gt;

One other advantage: a DNS-format-compliant checksum like this could be
trivially baked into an SSL certificate without requiring CA/Browser Forum
to invent a wholly new kind of certificate just-for-Tor

This would result in Prop224 Onion Addresses which would not only be
typo-resistant, but could also continue to be issued with EV certificates
where site-attestation is beneficial.

Further: adding segment-checksum bits at the end would be (I think?)
backwards compatible with existing Prop224 addresses.

    -a

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 31 December 2017 \
at 11:46, Alec Muffett &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:alec.muffett@gmail.com" \
target="_blank"&gt;alec.muffett@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84)"&gt;&lt;font face="arial, helvetica, sans-serif"&gt;...so that any \
UX component which wants to help the user can highlight (in red? or bold?) where the \
problem is, picking out a chunk of 12 characters which contain the \
typo:&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font face="monospace, monospace" \
style="background-color:rgb(255,255,255)"&gt;     &lt;a href="https://www" \
target="_blank"&gt;https://www&lt;/a&gt;&lt;font \
color="#545454"&gt;4acth47i6kxnvkewtm6&lt;wbr&gt;q7&lt;/font&gt;&lt;b&gt;&lt;font \
color="#ff0000"&gt;ib2s3ujpo5sq&lt;/font&gt;&lt;/b&gt;&lt;font \
color="#545454"&gt;bsnzjpbi7utijclt&lt;wbr&gt;osqemadwxyz.onion/&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="monospace, \
monospace"&gt;   ------------------------------&lt;wbr&gt;---^^^^^^^^^^^^  \
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;Spot the errant 'j'.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;The advantage of a system like this is that it's not \
perfect, but a typo mostly has to happen twice and be quite fortunate to go \
undetected.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;Of course it's not perfect, but nothing will be, and \
clever selection of checksum and encoding will result in something which is still \
DNS- and Browser-compliant.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One \
other advantage: a DNS-format-compliant checksum like this could be trivially baked \
into an SSL certificate without requiring CA/Browser Forum to invent a wholly new \
kind of certificate just-for-Tor&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This would result in \
Prop224 Onion Addresses which would not only be typo-resistant, but could also \
continue to be issued with EV certificates where site-attestation is \
beneficial.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Further: adding segment-checksum bits at the end \
would be (I think?) backwards compatible with existing Prop224 \
addresses.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      -a&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231122210</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-31 12:22:10-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (--Apple-Mail-8BC584A9-73B0-4D3A-956B-747C1F612BA2)]


Hi,

&gt; b) if Onion addresses have 2+ forms, one like the current \
&gt; (www.4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.onion) and the other \
&gt; being apparently more human-usable because it contains a CRC, the one which allows \
&gt; access to websites will win.

What if they both allow access to websites?

I had always thought that prop#279 addresses would be
translated into their canonical forms before the browser
acts on them. But the current proof-of-concept
implementation would include them in the Host header,
because the translation is done at the Tor layer
(not the browser layer).

This also makes a mess of security certificates.
(Or it means that both names would need to be in the certificate.)

And there's the issue of having two names for the same site.

&gt; My expectation to date has been that the problem with \
&gt; "4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad" is that that there is no \
&gt; place for the eyeball to rest when typing it in; as such I've presumed that a \
&gt; canonical form, defined by Tor, would be something like: 
&gt; https://www.4acth47i-6kxnvkew-tm6q7ib2-s3ufpo5-sqbsnzjp-bi7utij-cltosqem-ad.onion/
&gt; 
&gt; ...being N groups of M characters (where N and M can be argued, feel free...)

That's not what's specified right now, and it not what will be
released in 0.3.2 in a few weeks.

But we could implement a grouping and checksum mechanism
like this using a prop#279 plugin, much like the bech transform.

Depending on where we do the name translation, this change
would cause the same Host header and certificate issues.

&gt; &gt; The advantage of a system like this is that it's not perfect, but a typo mostly \
&gt; &gt; has to happen twice and be quite fortunate to go undetected. Of course it's not \
&gt; &gt; perfect, but nothing will be, and clever selection of checksum and encoding will \
&gt; &gt; result in something which is still DNS- and Browser-compliant.
&gt; 
&gt; One other advantage: a DNS-format-compliant checksum like this could be trivially \
&gt; baked into an SSL certificate without requiring CA/Browser Forum to invent a wholly \
&gt; new kind of certificate just-for-Tor

This is true. We should make any schemes DNS-compliant,
which is how the examples in prop#279 work.

&gt; This would result in Prop224 Onion Addresses which would not only be \
&gt; typo-resistant, but could also continue to be issued with EV certificates where \
&gt; site-attestation is beneficial. 
&gt; Further: adding segment-checksum bits at the end would be (I think?) backwards \
&gt; compatible with existing Prop224 addresses.

They would be compatible, as would most prop#279 addresses,
apart from the issues mentioned above.

Are you aware that there's already a checksum in v3 onion
service addresses?

"The onion address of a hidden service includes its identity public key,
a version field and a basic checksum."

https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n2012

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;meta \
http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;b) if Onion \
addresses have 2+ forms, one like the current (&lt;font&gt;&lt;a \
href="http://www.4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.onion/" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="3"&gt;www.&lt;/a&gt;&lt;a \
href="http://www.4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.onion/" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="3"&gt;4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.&lt;/a&gt;&lt;a \
href="http://www.4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad.onion/" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="3"&gt;onion&lt;/a&gt;&lt;/font&gt;) and the other being apparently \
more human-usable because it contains a CRC, the one which allows access to websites \
will win.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What if they both allow access \
to websites?&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;I had always thought that prop#279 addresses would \
be&lt;/div&gt;&lt;div&gt;translated into their canonical forms before the browser&lt;/div&gt;&lt;div&gt;acts \
on them. But the current proof-of-concept&lt;/div&gt;&lt;div&gt;implementation would include them \
in the Host header,&lt;/div&gt;&lt;div&gt;because the translation is done at the Tor \
layer&lt;/div&gt;&lt;div&gt;(not the browser layer).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This also makes a \
mess of security certificates.&lt;/div&gt;&lt;div&gt;(Or it means that both names would need to \
be in the certificate.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And there's the issue of having two \
names for the same site.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;My expectation to date has been \
that the problem with "4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad" is \
that that there is no place for the eyeball to rest when typing it in; as such I've \
presumed that a canonical form, defined by Tor, would be something \
like:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://www/"&gt;https://www&lt;/a&gt;.4acth47i-6kxnvkew-tm6q7ib2-s3ufpo5-sqbsnzjp-bi7utij-cltosqem-ad.onion/&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt; ...being N groups of M \
characters (where N and M can be argued, feel \
free...)&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;That's not what's specified right \
now, and it not what will be&lt;/div&gt;&lt;div&gt;released in 0.3.2 in a few \
weeks.&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;But we could implement a grouping and checksum \
mechanism&lt;/div&gt;&lt;div&gt;like this using a prop#279 plugin, much like the bech \
transform.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Depending on where we do the name translation, \
this change&lt;/div&gt;&lt;div&gt;would cause the same Host header and certificate \
issues.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;The advantage of a system like this is that it's not perfect, \
but a typo mostly has to happen twice and be quite fortunate to go \
undetected.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(84,84,84);background-color:rgb(255,255,255)"&gt;&lt;font face="arial, \
helvetica, sans-serif"&gt;Of course it's not perfect, but nothing will be, and clever \
selection of checksum and encoding will result in something which is still DNS- and \
Browser-compliant.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One \
other advantage: a DNS-format-compliant checksum like this could be trivially baked \
into an SSL certificate without requiring CA/Browser Forum to invent a wholly new \
kind of certificate just-for-Tor&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This is \
true. We should make any schemes DNS-compliant,&lt;/div&gt;&lt;div&gt;which is how the examples \
in prop#279 work.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;This would result in \
Prop224 Onion Addresses which would not only be typo-resistant, but could also \
continue to be issued with EV certificates where site-attestation is \
beneficial.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Further: adding segment-checksum bits at the end \
would be (I think?) backwards compatible with existing Prop224 \
addresses.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;They would be compatible, as would \
most prop#279 addresses,&lt;/div&gt;&lt;div&gt;apart from the issues mentioned \
above.&lt;br&gt;&lt;br&gt;&lt;div&gt;Are you aware that there's already a checksum in v3 \
onion&lt;/div&gt;&lt;div&gt;service addresses?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;"The onion \
address of a hidden service includes its identity public key,&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;a  version field and a basic \
checksum."&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n2012"&gt;https://g \
itweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n2012&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171104002900</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-04 00:29:00-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

At some time in the past I noticed that the anonbib did
not have links to local copies of some of the materials.
If that's still the case, I'd definitely suggest creating them
at this oppurtunity.
And though rare and more curation work, some papers do
receive content / errata updates.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171104150823</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-11-04 15:08:23-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

[Attachment #2 (multipart/alternative)]


On Fri, Nov 3, 2017 at 5:58 PM, ng0 &lt;ng0@infotropique.org&gt; wrote:

&gt; Hi,
&gt;
&gt; our plan with the bibliography collection of GNUnet is to
&gt; implement something similar to your/freehaven's anonbib.
&gt;
&gt; While running the build and cache update of it from
&gt; current git HEAD on the anonbib.cfg I noticed a number of
&gt; outdated and broken links.
&gt;
&gt; I'm currently playing with 2 options: re-use anonbib as it is
&gt; and change the style + some of its content (for us at GNUnet)
&gt; or write something similar to it.
&gt; From my perspective option 1 would be the best as we could
&gt; work on fixing links together, keep the content up-to-date
&gt; and at the same time keep the duplicate efforts and work
&gt; down to a minimum.
&gt;
&gt; What do you think?


Hi!  I'd love to have more people working on the anonbib content.  The code
itself is an old yucky kludge to which I feel no strong attachment, and the
generated HTML is also in need of a revamp.

So, "patches welcome"!

-- 
Nick

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Nov \
3, 2017 at 5:58 PM, ng0 &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:ng0@infotropique.org" \
target="_blank"&gt;ng0@infotropique.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
our plan with the bibliography collection of GNUnet is to&lt;br&gt;
implement something similar to your/freehaven's anonbib.&lt;br&gt;
&lt;br&gt;
While running the build and cache update of it from&lt;br&gt;
current git HEAD on the anonbib.cfg I noticed a number of&lt;br&gt;
outdated and broken links.&lt;br&gt;
&lt;br&gt;
I'm currently playing with 2 options: re-use anonbib as it is&lt;br&gt;
and change the style + some of its content (for us at GNUnet)&lt;br&gt;
or write something similar to it.&lt;br&gt;
From my perspective option 1 would be the best as we could&lt;br&gt;
work on fixing links together, keep the content up-to-date&lt;br&gt;
and at the same time keep the duplicate efforts and work&lt;br&gt;
down to a minimum.&lt;br&gt;
&lt;br&gt;
What do you think?&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi!   I'd love to have more \
people working on the anonbib content.   The code itself is an old yucky kludge to \
which I feel no strong attachment, and the generated HTML is also in need of a \
revamp.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, "patches \
welcome"!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--  &lt;/div&gt;&lt;div&gt;Nick  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171104185446</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-11-04 18:54:46-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

On Fri, Nov 03, 2017 at 09:58:35PM +0000, ng0 wrote:
&gt; our plan with the bibliography collection of GNUnet is to
&gt; implement something similar to your/freehaven's anonbib.

Great.

See also the censorbib, for another example.

&gt; While running the build and cache update of it from
&gt; current git HEAD on the anonbib.cfg I noticed a number of
&gt; outdated and broken links.

Yep. Many links have failed over the years. That was one of the big
reasons to have the local cached version of each file.

&gt; I'm currently playing with 2 options: re-use anonbib as it is
&gt; and change the style + some of its content (for us at GNUnet)
&gt; or write something similar to it.
&gt; From my perspective option 1 would be the best as we could
&gt; work on fixing links together, keep the content up-to-date
&gt; and at the same time keep the duplicate efforts and work
&gt; down to a minimum.

Sounds plausible to me. I think we would be excited to take patches for
broken links -- even if the new link becomes just a link to our cached
version, which will hopefully live forever. :)
https://www.freehaven.net/anonbib/cache/

But for the ones that have a broken link *and* don't have a cached
version, it would be especially awesome for somebody to track those down.

It's not entirely clear what we ought to do with anonbib. At the
beginning, there was no google scholar, so it really was the place to go
to find out about papers in the anonymous communications area. And also,
back then, there were only 10 or 15 papers and you could feasibly read
all of them.

Now I think anonbib needs to be something other than "all of the papers
about the topic". One way forward would be to cull it even more, so it
becomes more of a recommended reading list.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171104192422</emailId><senderName>Moritz Bartl</senderName><senderEmail>moritz@torservers.net</senderEmail><timestampReceived>2017-11-04 19:24:22-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

On 04.11.2017 19:54, Roger Dingledine wrote:
&gt;&gt; our plan with the bibliography collection of GNUnet is to
&gt;&gt; implement something similar to your/freehaven's anonbib.
&gt; Great.
&gt; See also the censorbib, for another example.

There's also a mixnet bibliography at https://bib.mixnetworks.org/ /
https://github.com/applied-mixnetworks/mixbib . If you come across
papers related to mixnets, please submit a patch! Also, we should add
highlights like the anonbib has.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171104195705</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-04 19:57:05-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

[Attachment #2 (multipart/signed)]


Roger Dingledine transcribed 2.5K bytes:
&gt; On Fri, Nov 03, 2017 at 09:58:35PM +0000, ng0 wrote:
&gt; &gt; our plan with the bibliography collection of GNUnet is to
&gt; &gt; implement something similar to your/freehaven's anonbib.
&gt; 
&gt; Great.
&gt; 
&gt; See also the censorbib, for another example.

Thanks, I'll search for it.

&gt; &gt; While running the build and cache update of it from
&gt; &gt; current git HEAD on the anonbib.cfg I noticed a number of
&gt; &gt; outdated and broken links.
&gt; 
&gt; Yep. Many links have failed over the years. That was one of the big
&gt; reasons to have the local cached version of each file.
&gt; 
&gt; &gt; I'm currently playing with 2 options: re-use anonbib as it is
&gt; &gt; and change the style + some of its content (for us at GNUnet)
&gt; &gt; or write something similar to it.
&gt; &gt; From my perspective option 1 would be the best as we could
&gt; &gt; work on fixing links together, keep the content up-to-date
&gt; &gt; and at the same time keep the duplicate efforts and work
&gt; &gt; down to a minimum.
&gt; 
&gt; Sounds plausible to me. I think we would be excited to take patches for
&gt; broken links -- even if the new link becomes just a link to our cached
&gt; version, which will hopefully live forever. :)
&gt; https://www.freehaven.net/anonbib/cache/
&gt; 
&gt; But for the ones that have a broken link *and* don't have a cached
&gt; version, it would be especially awesome for somebody to track those down.
&gt;
&gt; It's not entirely clear what we ought to do with anonbib. At the
&gt; beginning, there was no google scholar, so it really was the place to go
&gt; to find out about papers in the anonymous communications area. And also,
&gt; back then, there were only 10 or 15 papers and you could feasibly read
&gt; all of them.
&gt; 
&gt; Now I think anonbib needs to be something other than "all of the papers
&gt; about the topic". One way forward would be to cull it even more, so it
&gt; becomes more of a recommended reading list.
&gt; 
&gt; --Roger

Christian Grothoff and myself have a different understanding of
how we would apply anonbib to our work, but essentially we would
have 2 different "flavors". Anonbib has a specific focus (I assume,
I didn't go through all the papers yet) and our paper selection
would be more focused on another topic. Christian's idea is that
we'd have two different topics hosted.
We are discussing this here right now: https://gnunet.org/bugs/view.php?id=5121

To quote:
&gt; Working together on the anonbib code: great. Just to clarify: we
&gt; would host _our_ bibligraphy and they'd continue to host theirs,
&gt; right? Because the focus (secure P2P vs. anonymity) is somewhat
&gt; different, so it does make sense to have two different sites with different papers.

Now the "problem" is neither our bibliography nor yours seem to be
completely "ours" or "yours", we mix in what we picked up on the
way to where we are now. Our bibliography.git export right now
counts 1045 files.

I agree with you, to trim them down could be necessary.
For example we could concentrate on creating selected volumes
of papers and the cross-links between them, and stay within
a chosen topic.

I have no idea (at the moment) what has been collected on our
side and how many of the files are outside of a common theme,
I only did the export to git recently.

I'd rather not let people depend on Google's infrastructure
for knowledge, but it shouldn't be out job to maintain a
complete and growing library of knowledge either, so picking
a topic and cutting down to that sounds reasonable to me.

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
ng0
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dist.ng0.infotropique.org/dist/keys/
https://www.infotropique.org https://ng0.infotropique.org

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171104220140</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-04 22:01:40-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

On Sat, Nov 4, 2017 at 2:54 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Fri, Nov 03, 2017 at 09:58:35PM +0000, ng0 wrote:
&gt;&gt; our plan with the bibliography collection of GNUnet is to

https://gnunet.org/bibliography

&gt;&gt; implement something similar to your/freehaven's anonbib.

https://www.freehaven.net/anonbib/
https://www.onion-router.net/Publications.html

&gt; See also the censorbib, for another example.

https://censorbib.nymity.ch/

# I2Pbib
https://geti2p.net/en/papers/

There a a few more I can't recall right now. If anyone knows of other
community curated collections in the overlay routing mixnet messaging
p2p privacy crypto comms distributed filesharing storage spaces...
feel free to post links to them in this subthread.

&gt; It's not entirely clear what we ought to do with anonbib. At the
&gt; beginning, there was no google scholar, so it really was the place to go
&gt; to find out about papers in the anonymous communications area. And also,
&gt; back then, there were only 10 or 15 papers and you could feasibly read
&gt; all of them.

Yes there are lots of papers all over the net, and in massive
collections like arxiv,
SSRN, etc... but few places collected and curated by community of
relavance here.
One could envision a large community curation database bibliography
of papers and multimedia presentations. With tagging and export system,
including perhaps json / HTML, pick and choose your fields, for those papers
that each official project tags as references or relavant to their interests.
Click 'Tor', get Tor's... click 'Briar', get Briar's... etc and
in addition to the obvious function of global search and browse everything
in the databse by various sorting / filters / rankings that the reader chooses.
With open submission by anyone (ie: as yet non project submitted /
tagged bibinfos),
of new entries into a 'potentially relavant to community' subpool, such
that they might eventually be tagged by projects and readers as desired.

Saves a lot of duplicative work at the projects, is easily mirrored,
imported into web pages, etc.

&gt; Now I think anonbib needs to be something other than "all of the papers
&gt; about the topic". One way forward would be to cull it even more, so it
&gt; becomes more of a recommended reading list.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171104224020</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-04 22:40:20-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

&gt; Saves a lot of duplicative work at the projects, is easily mirrored,
&gt; imported into web pages, etc.

With mentioned problems of
- Google threat covered by community hosting and replication.
- Separate / overlapping  project / topic focus covered by a
flexible tagging and views system.
- Not easily being able to find and read what other projects in the space
are referencing covered by now having a combined database itself.
- Maintaining effort of growing multiple bib systems covered by everyone
lending some minor time coding to the main bib project db itself,
freeing up time for each project to then focus on submit / tag
and reading / using the materials as the more beneficial result.

And so on.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171104230156</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-04 23:01:56-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

&gt; With mentioned problems of

- Broken links, not founds, redirects covered by a single monthly
crawl thus being regular and benefitting all projects at once.
- Size, could apply common compression such as xz or even ZSTD
to entire mirrorable local archive. Similar for video materials.

http://open-zfs.org/w/images/b/b3/03-OpenZFS_2017_-_ZStandard_in_ZFS.pdf
https://www.youtube.com/watch?v=hWnWEitDPlM
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171105000508</emailId><senderName>Scfith Riseup</senderName><senderEmail>scfith@riseup.net</senderEmail><timestampReceived>2017-11-05 00:05:08-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

[Attachment #2 (multipart/alternative)]


I wonder if there is an option to start to use ipfs ( https://ipfs.io/ ) or something \
like it to permanently and resiliently store items for posterity? 

On Nov 4, 2017, at 7:01 PM, grarpamp &lt;grarpamp@gmail.com&gt; wrote:

&gt; &gt; With mentioned problems of
&gt; 
&gt; - Broken links, not founds, redirects covered by a single monthly
&gt; crawl thus being regular and benefitting all projects at once.
&gt; - Size, could apply common compression such as xz or even ZSTD
&gt; to entire mirrorable local archive. Similar for video materials.
&gt; 
&gt; http://open-zfs.org/w/images/b/b3/03-OpenZFS_2017_-_ZStandard_in_ZFS.pdf
&gt; https://www.youtube.com/watch?v=hWnWEitDPlM
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;I wonder if there is an option to start to use \
ipfs ( &lt;a href="https://ipfs.io/"&gt;https://ipfs.io/&lt;/a&gt; ) or something like \
it to permanently and resiliently store items for posterity? &lt;br&gt;&lt;div&gt;&lt;br&gt;On Nov \
4, 2017, at 7:01 PM, grarpamp &lt;&lt;a \
href="mailto:grarpamp@gmail.com"&gt;grarpamp@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;With \
mentioned problems of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;- Broken links, \
not founds, redirects covered by a single monthly&lt;/span&gt;&lt;br&gt;&lt;span&gt;crawl thus being \
regular and benefitting all projects at once.&lt;/span&gt;&lt;br&gt;&lt;span&gt;- Size, could apply \
common compression such as xz or even ZSTD&lt;/span&gt;&lt;br&gt;&lt;span&gt;to entire mirrorable local \
archive. Similar for video materials.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="http://open-zfs.org/w/images/b/b3/03-OpenZFS_2017_-_ZStandard_in_ZFS.pdf"&gt;http:/ \
/open-zfs.org/w/images/b/b3/03-OpenZFS_2017_-_ZStandard_in_ZFS.pdf&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://www.youtube.com/watch?v=hWnWEitDPlM"&gt;https://www.youtube.com/watch?v=hWn \
WEitDPlM&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;_______________________________________________&lt;/span&gt;&lt;br&gt;&lt;span&gt;tor-dev \
mailing list&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.tor \
project.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171105071447</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-05 07:14:47-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

On Sat, Nov 4, 2017 at 8:05 PM, Scfith Riseup &lt;scfith@riseup.net&gt; wrote:
&gt; I wonder if there is an option to start to use ipfs ( https://ipfs.io/ ) or
&gt; something like it to permanently and resiliently store items for posterity?

Bib users would need a client to avoid abusing inproxy.
Though a client would offload from the bib.

There doesn't seem to be much of a data loss issue now,
papers with broken links are still refindable and fixable
if searched for hard enough, no?

But it might be said there's organization, maintenance, and
wider audience utility issues with current bibs.

However
- Once a better bib gets made, someone should consider
pushing the dataset into IPFS, gnunet, storj, whatever.
Object hash deduplicated systems among them are storage
efficient, no matter how many people push the same thing.
- Since most video presentation data exists only on youtube
(aka: google) at their whim, I assign high risk of loss to that
community corpus. It's a mess. All projects should be publishing
local copies of theirs for mirroring. Also, it's hard to autodedupe
down from youtube since they embed uniques per download / view.
- Projects should self host, or at least dual home themselves,
in their own overlays. for reference and other uses.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171106055630</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-06 05:56:30-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

[Attachment #2 (multipart/signed)]


grarpamp transcribed 1.9K bytes:
&gt; On Sat, Nov 4, 2017 at 8:05 PM, Scfith Riseup &lt;scfith@riseup.net&gt; wrote:
&gt; &gt; I wonder if there is an option to start to use ipfs ( https://ipfs.io/ ) or
&gt; &gt; something like it to permanently and resiliently store items for posterity?
&gt; 
&gt; Bib users would need a client to avoid abusing inproxy.
&gt; Though a client would offload from the bib.
&gt; 
&gt; There doesn't seem to be much of a data loss issue now,
&gt; papers with broken links are still refindable and fixable
&gt; if searched for hard enough, no?
&gt; 
&gt; But it might be said there's organization, maintenance, and
&gt; wider audience utility issues with current bibs.
&gt; 
&gt; However
&gt; - Once a better bib gets made, someone should consider
&gt; pushing the dataset into IPFS, gnunet, storj, whatever.
&gt; Object hash deduplicated systems among them are storage
&gt; efficient, no matter how many people push the same thing.
&gt; - Since most video presentation data exists only on youtube
&gt; (aka: google) at their whim, I assign high risk of loss to that
&gt; community corpus. It's a mess. All projects should be publishing
&gt; local copies of theirs for mirroring. Also, it's hard to autodedupe
&gt; down from youtube since they embed uniques per download / view.
&gt; - Projects should self host, or at least dual home themselves,
&gt; in their own overlays. for reference and other uses.

Good morning,

I like the proposed ideas so far (especially the idea of
being able to filter by tags and keeping one code repository
that could be reused at each others location.
We could try and use http://libgen.io/ and https://sci-hub.cc/
as a fallback search if there's an generic API for them
(I haven't tried so far), I heard they are good although
sometimes (they might be?) legally in the grey depending
on where you are located.

I think videos should be a separate issue, we selfhost them
already as far as I know but integrating them into git is
no (good) solution.
If you don't go for something like Mediagoblin, you could
ask the higher level organization you are part of (for
example GNU, in our case) if video/audio hosting capabilities
exist. Asking CCC for hosting would be another choice, for
their media they have a good amount of mirrors.
In the longterm this should be replaced, but for now this
is good enough.
However, this is derailing a bit from the original issue.

You listed some bibs that are similar to the ones already
mentioned and proto-bibs (like ours at GNUnet). Should we
track down more of them to ask the groups and people
running them if they want to get involved?
Or do you want to get started?

I'll need the feedback of Grothoff before I can say wether
we as a group agree or not. My opinion is that it's good
and reusable at our side without causing too much confusion
about content and location.
-- 
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dist.ng0.infotropique.org/dist/keys/
  WWW: https://ng0.infotropique.org

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171006131128</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-10-06 13:11:28-0400</timestampReceived><subject>Re: [tor-dev] Your input on the Tor Metrics Roadmap 2017/18</subject><body>

On 6 October 2017 at 04:48, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;  - tasks we're missing or that we're listing as long-term goals (Q4/2018
&gt; or later) that you think should have higher priority over the tasks we
&gt; picked for the time until Q3/2018,

bwauth related things, such as:

- How much do bwauths agree?
- How much does geography affect the bwauth's measurements?
- How can we tell if a change, or new bwauth code, is producing good data?
- What is 'good data'?

&gt;  - tasks that you'd want to contribute to in any way, in which case we
&gt; might reach out to you when we start working on them.

I've begun, slowly, to try and answer some of those questions, but my
methodology is not as rigorous as yours would be.

And obviously I'll help out with any consensus-health stuff as you
need me/I'm able.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171006141406</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-06 14:14:06-0400</timestampReceived><subject>Re: [tor-dev] Your input on the Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 6 Oct 2017, at 09:11, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt;&gt; On 6 October 2017 at 04:48, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;&gt; - tasks we're missing or that we're listing as long-term goals (Q4/2018
&gt;&gt; or later) that you think should have higher priority over the tasks we
&gt;&gt; picked for the time until Q3/2018,
&gt; 
&gt; bwauth related things, such as:
&gt; 
&gt; - How much do bwauths agree?
&gt; - How much does geography affect the bwauth's measurements?
&gt; - How can we tell if a change, or new bwauth code, is producing good data?
&gt; - What is 'good data'?

+1

Also, can we please have some graphs of IPv6 support on relays?
https://trac.torproject.org/projects/tor/ticket/23761

We may also want to know how many entry and exit connections
are IPv6 (there's no ticket yet). Exits would be useful now, entry
IPv6 would be useful before we turn it on by default.

We'll have a better idea after next week, because we want to
create an IPv6 feature matrix with priorities in one of the IPv6
sessions.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 6 Oct 2017, at 09:11, Tom Ritter \
&lt;&lt;a href="mailto:tom@ritter.vg"&gt;tom@ritter.vg&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;On 6 October 2017 at 04:48, \
Karsten Loesing &lt;&lt;a \
href="mailto:karsten@torproject.org"&gt;karsten@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; - tasks we're missing or that we're \
listing as long-term goals (Q4/2018&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;or later) that you think should have higher priority over the tasks \
we&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;picked for the time until \
Q3/2018,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;bwauth related things, such \
as:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;- How much do bwauths agree?&lt;/span&gt;&lt;br&gt;&lt;span&gt;- \
How much does geography affect the bwauth's measurements?&lt;/span&gt;&lt;br&gt;&lt;span&gt;- How can \
we tell if a change, or new bwauth code, is producing good data?&lt;/span&gt;&lt;br&gt;&lt;span&gt;- \
What is 'good data'?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;+1&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, \
can we please have some graphs of IPv6 support on relays?&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/23761"&gt;https://trac.torproject.org/projects/tor/ticket/23761&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
may also want to know how many entry and exit connections&lt;/div&gt;&lt;div&gt;are IPv6 (there's \
no ticket yet). Exits would be useful now, entry&lt;/div&gt;&lt;div&gt;IPv6 would be useful \
before we turn it on by default.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We'll have a better idea \
after next week, because we want to&lt;/div&gt;&lt;div&gt;create an IPv6 feature matrix with \
priorities in one of the \
IPv6&lt;/div&gt;&lt;div&gt;sessions.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;T&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170911234438</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-09-11 23:44:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 280: Privacy-Preseving Statistics with Privcount in Tor</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 8 Aug 2017, at 03:50, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; [reposting this message with permission.  It is a reply that I sent to
&gt; Aaron, where I quoted an email from him about this proposal. Tim and
&gt; Aaron had additional responses, which I'll let them quote here or not
&gt; as they think best.]

[Re-posting this edited thread with permission. It's a conversation that
continues on from the last re-post.]

Aaron:
&gt; Tim:
&gt; &gt; Aaron:
&gt; &gt; &gt; Nick:
&gt; &gt; &gt; &gt; Aaron:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; - I believe that instead of dealing with Tally Reporter (TR) failures using \
&gt; &gt; &gt; &gt; &gt; multiple subsets, you could instead simply use (t,n) secret sharing, which \
&gt; &gt; &gt; &gt; &gt; would survive any t-1 failures (but also allow any subset of size t to \
&gt; &gt; &gt; &gt; &gt; determine the individual DC counts). The DC would create one blinding value \
&gt; &gt; &gt; &gt; &gt; B and then use Shamir secret sharing to send a share of B to each TR. To \
&gt; &gt; &gt; &gt; &gt; aggregate, each TR would first add together its shares, which would yield a \
&gt; &gt; &gt; &gt; &gt; share of the sum of the blinding values from all DCs. Then the TRs could \
&gt; &gt; &gt; &gt; &gt; simply reconstruct that sum publicly, which, when subtracted from the \
&gt; &gt; &gt; &gt; &gt; public, blinded, noisy, counts would reveal the final noisy sum. This would \
&gt; &gt; &gt; &gt; &gt; be more efficient than having each TR publish multiple potential inputs to \
&gt; &gt; &gt; &gt; &gt; different subsets of TRs.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; So, I might have misunderstood the purpose here : I thought that the
&gt; &gt; &gt; &gt; instances were to handle misbehaving DCs as well as malfunctioning
&gt; &gt; &gt; &gt; TRs.
&gt; &gt; &gt; 
&gt; &gt; &gt; The mechanism you described (having each DC report different encrypted counters \
&gt; &gt; &gt; for different subsets of TRs) doesn't handle failed (i.e. crashed) DCs. To \
&gt; &gt; &gt; handle failed DCs in the scheme you describe (with the blinding values started \
&gt; &gt; &gt; encrypted in a document), you can just have the TRs agree on which DCs \
&gt; &gt; &gt; succeeded at the end of the measurement and only use blinding values from those \
&gt; &gt; &gt; DCs. So you don't need multiple TR subsets to handle failed DCs.
&gt; &gt; 
&gt; &gt; Each *subset* of DCs reports to a subset of the TRs.
&gt; &gt; This deals with malicious and outlying DC values, as well as failed DCs.
&gt; &gt; And it deals with failed TRs as well.
&gt; 
&gt; This seems unnecessary and inefficient. DC failures can be handled by the TRs at \
&gt; the end. TR failures can be handled using Shamir secret sharing. 
&gt; &gt; &gt; Also, I should mention the reasons that Rob and I didn't mention fault \
&gt; &gt; &gt; tolerance in the PrivCount design: 1. The TRs (aka the SKs) only need to be \
&gt; &gt; &gt; online long enough to receive their blinding values, add them, and send the sum \
&gt; &gt; &gt; out. Therefore a measurement can recover from a failed TR if its blinding \
&gt; &gt; &gt; values are persistently stored somewhere and if *at any point* the TR can be \
&gt; &gt; &gt; restarted.
&gt; &gt; 
&gt; &gt; In the event of key compromise, or operator trust failure, or operator
&gt; &gt; opt-out, the TR can never be restarted (securely).
&gt; 
&gt; If these are real concerns, then you should use Shamir secret sharing across the \
&gt; TRs. Honestly, they seem unlikely to me, and the cost of missing one round of \
&gt; statistics seems low. However, the cost of dealing with them is also low, and so \
&gt; you might as well do it! 
&gt; &gt; &gt; 2. Handling DC failures is trivial. As mentioned above, the TRs simply wait \
&gt; &gt; &gt; until the end to determine which DCs succeeded and should have their blinding \
&gt; &gt; &gt; values included in the sum.
&gt; &gt; 
&gt; &gt; How would you do this securely?
&gt; &gt; Any scheme I think of allows a malicious TR to eliminate particular
&gt; &gt; relays.
&gt; 
&gt; A malicious TR can in any case eliminate a particular relay by destroying the \
&gt; outputs of any subsets containing that relay. Destroying an output is done by using \
&gt; a random value as the blinding value, making the output random (and likely \
&gt; obviously so). The privacy comes from the differentially private noise, and because \
&gt; TRs won't agree on subsets that would reduce the added noise below the desired \
&gt; amount, the adversary couldn't break privacy by eliminate particular relays. \
&gt; Moreover, if you wanted, you could use a secure broadcast (e.g. the Dolev-Strong \
&gt; protocol) to enable the TRs to agree on the union of DCs that any one of the TRs \
&gt; received the counters documents from. Such a secure broadcast in used in PrivCount \
&gt; to get consensus on the the deployment and configuration documents. 
&gt; &gt; &gt; Also, one thing I forgot to mention in my last email is that you have removed \
&gt; &gt; &gt; the Tally Server, which is an untrusted entity that essentially acts as a \
&gt; &gt; &gt; public bulletin board. Without such a collection point, who obtains the outputs \
&gt; &gt; &gt; of the TRs and computes the final result?
&gt; &gt; 
&gt; &gt; We'll work with Tor metrics to decide on a mechanism for taking the
&gt; &gt; counts from each TR subset, and turning them into a final count.
&gt; &gt; 
&gt; &gt; This would probably be some kind of median, possibly discarding
&gt; &gt; nonsensical values first.
&gt; 
&gt; If you plan to release multiple values from different DC subsets to handle \
&gt; nonsensical values, then you will have to increase the noise to handle the \
&gt; additional statistics. This can be done just as with handling DC failures: TRs \
&gt; agree on several DC subsets from among the DCs that didn't fail and then release å \
&gt; blinding value sum for each subset. Note that DCs actually only need to send one \
&gt; set of blinding values and one set of counters to the TRs. 
&gt; &gt; &gt; - Storing at the DC the blinded values encrypted to the TRs seems to violate \
&gt; &gt; &gt; forward privacy in that if during the measurement the adversary compromises a \
&gt; &gt; &gt; DC and then later (even after the final release) compromises the key of a TR, \
&gt; &gt; &gt; the adversary could determine the state of the DC's counter at the time of \
&gt; &gt; &gt; compromise. The also applies to the optimization in Sec. 6 where the blinding \
&gt; &gt; &gt; values where a shared secret is hashed to produce the blinding values.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Well, the adversary would need to compromise the key of _every_ TR in
&gt; &gt; &gt; &gt; at least one instance, or they couldn't recover the actual counters.
&gt; &gt; &gt; 
&gt; &gt; &gt; That's true.
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I guess we could, as in the original design (IIUC), send the encrypted
&gt; &gt; &gt; &gt; blinding values (or public DH key in sec 6) immediately from the DC
&gt; &gt; &gt; &gt; when it generates them, and then throw them away client-side.  Now the
&gt; &gt; &gt; &gt; adversary would need to break into all the TRs while they were holding
&gt; &gt; &gt; &gt; these encrypted blinding values.
&gt; &gt; &gt; 
&gt; &gt; &gt; Right, that is the original design and would provide a bit more forward \
&gt; &gt; &gt; security than in the current spec. 
&gt; &gt; &gt; &gt; Or, almost equivalently, I think we could make the TR public
&gt; &gt; &gt; &gt; encryption keys only get used for one round. That's good practice in
&gt; &gt; &gt; &gt; general, and it's a direction I generally like.
&gt; &gt; &gt; 
&gt; &gt; &gt; That would work, too.
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; [*] One anomaly detection mechanism I've been thinking of is to look
&gt; &gt; &gt; &gt; at different "protocol-warn" log messages.  These log messages
&gt; &gt; &gt; &gt; indicate that some third party is not complying with the protocol.
&gt; &gt; &gt; &gt; They're usually logged at info, since there's nothing an operator can
&gt; &gt; &gt; &gt; do about them, but it would be good for us to get notification if some
&gt; &gt; &gt; &gt; of them spike all of a sudden.
&gt; &gt; &gt; 
&gt; &gt; &gt; Really interesting idea! Rob and I are interested in looking for attacks on the \
&gt; &gt; &gt; Tor network using metrics as well. This kind of anomaly reminds of the \
&gt; &gt; &gt; RELAY_EARLY attack that you wrote a detector for.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZtx/mAAoJEHQNnjkCUnKiTj0P/jE3d8Zppu2j6ZST/3Z30aDX
H5fx3QtH/mP29McWcKiXIbPuDxjV3U+SC+4jSRiMv8/vNz0xpDDkYY4DD4Wv9Y2D
230AYlaX/PBku8xn4GTqvwdgMtmvunsePjnZeWtazG7jAURYtaqV0qq9Hm2FghUF
F278ZM6hAEjrnayFjRq9AOCJJNoxiKkgcpYloKhTdguwJyJ7nn7dWyIMrJUXERZo
OY/iTaRj/Ul+0aQHjBS9vDc/3y7tCnYJBuPHhTh3I8Ho1EwPVObJUC5gOk+2Ox11
kjr2n16iw7tBEkaOsjIJnzKoiw1VKY1vy1hfi/Xp4wNlEMR9gT9y2jz00OXoXbBI
knsmCIXQo3jXRMLH2ZVD4KSllvI//Ugzn7D/YXFKzu17VfRBkEG9+qtgh1XA4TBm
xGUjFlbIY0lLWrBf0ErjBZJ1hzJxqySP2nQJqJrDnSubtrrdS8vHYvnTiIPlzCXE
xcKtr3Iz+D6oAx4JAddjnL0MTnC3WIygzPl66qbMxfZzbUP4cUL2GiZCZEk2C8Ou
Ns/w6jyvbOfJveqjakMgGn4HD5m/2pGon7bMzknehMVma1YLtR1alq6gtq8kcjB+
Y2yd7nA/krcNQArSDFR2t/+8qlVpa26TG/FQjk8RktVNcKL5XQBDbmNZza39xVM5
oy+3pybLwQiIWMXzGO0S
=5SAO
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170912182712</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-09-12 18:27:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal 280: Privacy-Preseving Statistics with Privcount in Tor</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Tim,

unfortunately, nobody from the metrics team can attend today's proposal
280 discussion in a few hours.

That's why we decided to provide some written feedback here.

We didn't find anything problematic in the proposal from the view of Tor
metrics.

This is due to the narrow scope covering only the communication protocol
between tally servers and relays, as we understand it.

All topics related to deriving counts, calculating final results, and
anything else that could affect currently running metrics code are
explicitly excluded or not mentioned.

If we misunderstood the scope and there is actually a part that covers
current or future metrics code, please let us know, and we'll check that
again.

Thanks for working on privacy-preserving statistics in Tor!

All the best,
Karsten


On 2017-09-12 01:44, teor wrote:
&gt; 
&gt; &gt; On 8 Aug 2017, at 03:50, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; [reposting this message with permission.  It is a reply that I sent to
&gt; &gt; Aaron, where I quoted an email from him about this proposal. Tim and
&gt; &gt; Aaron had additional responses, which I'll let them quote here or not
&gt; &gt; as they think best.]
&gt; 
&gt; [Re-posting this edited thread with permission. It's a conversation that
&gt; continues on from the last re-post.]
&gt; 
&gt; Aaron:
&gt; &gt; Tim:
&gt; &gt; &gt; Aaron:
&gt; &gt; &gt; &gt; Nick:
&gt; &gt; &gt; &gt; &gt; Aaron:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; - I believe that instead of dealing with Tally Reporter (TR) failures \
&gt; &gt; &gt; &gt; &gt; &gt; using multiple subsets, you could instead simply use (t,n) secret \
&gt; &gt; &gt; &gt; &gt; &gt; sharing, which would survive any t-1 failures (but also allow any subset \
&gt; &gt; &gt; &gt; &gt; &gt; of size t to determine the individual DC counts). The DC would create one \
&gt; &gt; &gt; &gt; &gt; &gt; blinding value B and then use Shamir secret sharing to send a share of B \
&gt; &gt; &gt; &gt; &gt; &gt; to each TR. To aggregate, each TR would first add together its shares, \
&gt; &gt; &gt; &gt; &gt; &gt; which would yield a share of the sum of the blinding values from all DCs. \
&gt; &gt; &gt; &gt; &gt; &gt; Then the TRs could simply reconstruct that sum publicly, which, when \
&gt; &gt; &gt; &gt; &gt; &gt; subtracted from the public, blinded, noisy, counts would reveal the final \
&gt; &gt; &gt; &gt; &gt; &gt; noisy sum. This would be more efficient than having each TR publish \
&gt; &gt; &gt; &gt; &gt; &gt; multiple potential inputs to different subsets of TRs.
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; So, I might have misunderstood the purpose here : I thought that the
&gt; &gt; &gt; &gt; &gt; instances were to handle misbehaving DCs as well as malfunctioning
&gt; &gt; &gt; &gt; &gt; TRs.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; The mechanism you described (having each DC report different encrypted \
&gt; &gt; &gt; &gt; counters for different subsets of TRs) doesn't handle failed (i.e. crashed) \
&gt; &gt; &gt; &gt; DCs. To handle failed DCs in the scheme you describe (with the blinding \
&gt; &gt; &gt; &gt; values started encrypted in a document), you can just have the TRs agree on \
&gt; &gt; &gt; &gt; which DCs succeeded at the end of the measurement and only use blinding \
&gt; &gt; &gt; &gt; values from those DCs. So you don't need multiple TR subsets to handle failed \
&gt; &gt; &gt; &gt; DCs.
&gt; &gt; &gt; 
&gt; &gt; &gt; Each *subset* of DCs reports to a subset of the TRs.
&gt; &gt; &gt; This deals with malicious and outlying DC values, as well as failed DCs.
&gt; &gt; &gt; And it deals with failed TRs as well.
&gt; &gt; 
&gt; &gt; This seems unnecessary and inefficient. DC failures can be handled by the TRs at \
&gt; &gt; the end. TR failures can be handled using Shamir secret sharing. 
&gt; &gt; &gt; &gt; Also, I should mention the reasons that Rob and I didn't mention fault \
&gt; &gt; &gt; &gt; tolerance in the PrivCount design: 1. The TRs (aka the SKs) only need to be \
&gt; &gt; &gt; &gt; online long enough to receive their blinding values, add them, and send the \
&gt; &gt; &gt; &gt; sum out. Therefore a measurement can recover from a failed TR if its blinding \
&gt; &gt; &gt; &gt; values are persistently stored somewhere and if *at any point* the TR can be \
&gt; &gt; &gt; &gt; restarted.
&gt; &gt; &gt; 
&gt; &gt; &gt; In the event of key compromise, or operator trust failure, or operator
&gt; &gt; &gt; opt-out, the TR can never be restarted (securely).
&gt; &gt; 
&gt; &gt; If these are real concerns, then you should use Shamir secret sharing across the \
&gt; &gt; TRs. Honestly, they seem unlikely to me, and the cost of missing one round of \
&gt; &gt; statistics seems low. However, the cost of dealing with them is also low, and so \
&gt; &gt; you might as well do it! 
&gt; &gt; &gt; &gt; 2. Handling DC failures is trivial. As mentioned above, the TRs simply wait \
&gt; &gt; &gt; &gt; until the end to determine which DCs succeeded and should have their blinding \
&gt; &gt; &gt; &gt; values included in the sum.
&gt; &gt; &gt; 
&gt; &gt; &gt; How would you do this securely?
&gt; &gt; &gt; Any scheme I think of allows a malicious TR to eliminate particular
&gt; &gt; &gt; relays.
&gt; &gt; 
&gt; &gt; A malicious TR can in any case eliminate a particular relay by destroying the \
&gt; &gt; outputs of any subsets containing that relay. Destroying an output is done by \
&gt; &gt; using a random value as the blinding value, making the output random (and likely \
&gt; &gt; obviously so). The privacy comes from the differentially private noise, and \
&gt; &gt; because TRs won't agree on subsets that would reduce the added noise below the \
&gt; &gt; desired amount, the adversary couldn't break privacy by eliminate particular \
&gt; &gt; relays. Moreover, if you wanted, you could use a secure broadcast (e.g. the \
&gt; &gt; Dolev-Strong protocol) to enable the TRs to agree on the union of DCs that any \
&gt; &gt; one of the TRs received the counters documents from. Such a secure broadcast in \
&gt; &gt; used in PrivCount to get consensus on the the deployment and configuration \
&gt; &gt; documents. 
&gt; &gt; &gt; &gt; Also, one thing I forgot to mention in my last email is that you have removed \
&gt; &gt; &gt; &gt; the Tally Server, which is an untrusted entity that essentially acts as a \
&gt; &gt; &gt; &gt; public bulletin board. Without such a collection point, who obtains the \
&gt; &gt; &gt; &gt; outputs of the TRs and computes the final result?
&gt; &gt; &gt; 
&gt; &gt; &gt; We'll work with Tor metrics to decide on a mechanism for taking the
&gt; &gt; &gt; counts from each TR subset, and turning them into a final count.
&gt; &gt; &gt; 
&gt; &gt; &gt; This would probably be some kind of median, possibly discarding
&gt; &gt; &gt; nonsensical values first.
&gt; &gt; 
&gt; &gt; If you plan to release multiple values from different DC subsets to handle \
&gt; &gt; nonsensical values, then you will have to increase the noise to handle the \
&gt; &gt; additional statistics. This can be done just as with handling DC failures: TRs \
&gt; &gt; agree on several DC subsets from among the DCs that didn't fail and then release \
&gt; &gt; å blinding value sum for each subset. Note that DCs actually only need to send \
&gt; &gt; one set of blinding values and one set of counters to the TRs. 
&gt; &gt; &gt; &gt; - Storing at the DC the blinded values encrypted to the TRs seems to violate \
&gt; &gt; &gt; &gt; forward privacy in that if during the measurement the adversary compromises a \
&gt; &gt; &gt; &gt; DC and then later (even after the final release) compromises the key of a TR, \
&gt; &gt; &gt; &gt; the adversary could determine the state of the DC's counter at the time of \
&gt; &gt; &gt; &gt; compromise. The also applies to the optimization in Sec. 6 where the blinding \
&gt; &gt; &gt; &gt; values where a shared secret is hashed to produce the blinding values.
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; Well, the adversary would need to compromise the key of _every_ TR in
&gt; &gt; &gt; &gt; &gt; at least one instance, or they couldn't recover the actual counters.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; That's true.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; I guess we could, as in the original design (IIUC), send the encrypted
&gt; &gt; &gt; &gt; &gt; blinding values (or public DH key in sec 6) immediately from the DC
&gt; &gt; &gt; &gt; &gt; when it generates them, and then throw them away client-side.  Now the
&gt; &gt; &gt; &gt; &gt; adversary would need to break into all the TRs while they were holding
&gt; &gt; &gt; &gt; &gt; these encrypted blinding values.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Right, that is the original design and would provide a bit more forward \
&gt; &gt; &gt; &gt; security than in the current spec. 
&gt; &gt; &gt; &gt; &gt; Or, almost equivalently, I think we could make the TR public
&gt; &gt; &gt; &gt; &gt; encryption keys only get used for one round. That's good practice in
&gt; &gt; &gt; &gt; &gt; general, and it's a direction I generally like.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; That would work, too.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; [*] One anomaly detection mechanism I've been thinking of is to look
&gt; &gt; &gt; &gt; &gt; at different "protocol-warn" log messages.  These log messages
&gt; &gt; &gt; &gt; &gt; indicate that some third party is not complying with the protocol.
&gt; &gt; &gt; &gt; &gt; They're usually logged at info, since there's nothing an operator can
&gt; &gt; &gt; &gt; &gt; do about them, but it would be good for us to get notification if some
&gt; &gt; &gt; &gt; &gt; of them spike all of a sudden.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Really interesting idea! Rob and I are interested in looking for attacks on \
&gt; &gt; &gt; &gt; the Tor network using metrics as well. This kind of anomaly reminds of the \
&gt; &gt; &gt; &gt; RELAY_EARLY attack that you wrote a detector for.
&gt; 
&gt; T
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170702162542</emailId><senderName>Daniel Pinto</senderName><senderEmail>danielpinto52@gmail.com</senderEmail><timestampReceived>2017-07-02 16:25:42-0400</timestampReceived><subject>Re: [tor-dev] Default parsing order of config files in Debain tor package</subject><body>

Hello iry,

The precedence for tor options is the following (1 overrides 2, etc...):

1. Command line options.
2. Configuration file options (your /etc/torrc).
3. Defaults file options (your /usr/share/tor/tor-service-defaults-torrc).

In the same file, options that appear later override earlier options.

Currently, there is no torrc.d directory created when you install the
tor package. However, you can use a %include in the configuration file
or in the defaults file. When you insert a %include in a file, it works
as if all the options for the included file or folder were written on
the line of the %include. If you're including a folder, the files will
be processed in lexicographic order and files starting with a dot will
be ignored.

Here is an example:

tor-service-defaults-torrc:
SomeOption 0
%include /etc/tor/torrc.d/  # SomeOption is now 2
SomeOption 3 # SomeOption is now 3

/etc/tor/torrc.d/01_one:
SomeOption 1

/etc/tor/torrc.d/02_two:
SomeOption 2


With this configuration, the value for some option is 3.
But we can have a torrc with %include too:

/etc/torrc:
SomeOption 4 # SomeOption is now 4
%include /etc/tor/foo.torrc # SomeOption is now 5
SomeOption 6 # SomeOption is now 6

/etc/tor/foo.torrc:
SomeOption 5

With both these files, the value for SomeOption is 6.

There are also different types of options and some can take multiple
values. For more information see the section "Mid-level semantics" on
this file: https://gitweb.torproject.org/tor.git/tree/doc/torrc_format.txt

Best regards,
Daniel

Às 14:42 de 02-07-2017, iry escreveu:
&gt; Hello, Tor developers!
&gt; 
&gt; With the implementation of torrc.d, there will be at least two Tor
&gt; config files and one Tor config directory by default in Debian tor
&gt; package. However, I am not able to find the documents on what the
&gt; parsing order Tor follows.
&gt; 
&gt; My guess is that:
&gt; 1. /usr/share/tor/tor-service-defaults-torrc is parsed first
&gt; 2. /etc/torrc.d is parsed next (in lexical order)
&gt; 3. /etc/torrc is parsed at last
&gt; 4. and the lines in config files parsed later will overwrite similar
&gt; lines in config files that are parsed earlier
&gt; 
&gt; Could anyone familiar with the problem help me please? This will be
&gt; really helpful to my future work and I really appreciate your help!
&gt; 
&gt; Thank you very much!
&gt; 
&gt; Best,
&gt; iry
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219180300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-19 18:03:00-0400</timestampReceived><subject>[tor-dev] Did tor-wiki-changes ML break?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Damian,

it appears to be the case that wiki changes are no longer send to this ML.
Could you have a look?
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-wiki-changes

thank you!
nusenu



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219185443</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-19 18:54:43-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

Hi nusenu. Yup, I was just thinking about that. CenturyLink did some
work on my apartment's connection yesterday that knocked it offline.
Probably just needs the router to be rebooted but I'm visiting with
family through new years so the r2e instance will be unavailable until
then.

More annoyingly now I don't get Path of Exile news. Blah. &gt;:(


On Tue, Dec 19, 2017 at 10:03 AM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; Hi Damian,
&gt;
&gt; it appears to be the case that wiki changes are no longer send to this ML.
&gt; Could you have a look?
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-wiki-changes
&gt;
&gt; thank you!
&gt; nusenu
&gt;
&gt;
&gt;
&gt; --
&gt; https://mastodon.social/@nusenu
&gt; twitter: @nusenu_
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219210350</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-19 21:03:50-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

Oh! Interesting, just got a dump of r2e emails. Guess it came back on
its own without a router reboot. Neat!


On Tue, Dec 19, 2017 at 10:54 AM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; Hi nusenu. Yup, I was just thinking about that. CenturyLink did some
&gt; work on my apartment's connection yesterday that knocked it offline.
&gt; Probably just needs the router to be rebooted but I'm visiting with
&gt; family through new years so the r2e instance will be unavailable until
&gt; then.
&gt;
&gt; More annoyingly now I don't get Path of Exile news. Blah. &gt;:(
&gt;
&gt;
&gt; On Tue, Dec 19, 2017 at 10:03 AM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;&gt; Hi Damian,
&gt;&gt;
&gt;&gt; it appears to be the case that wiki changes are no longer send to this ML.
&gt;&gt; Could you have a look?
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-wiki-changes
&gt;&gt;
&gt;&gt; thank you!
&gt;&gt; nusenu
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; --
&gt;&gt; https://mastodon.social/@nusenu
&gt;&gt; twitter: @nusenu_
&gt;&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171222145335</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-22 14:53:35-0400</timestampReceived><subject>[tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

Some time in the next few weeks, the Tor fallback directory mirror file
format will change. This affects stem and Relay Search, which parse this
file.


Change Description

Here is a list of changes to the file format:
* the "weight" line has been removed, and replaced with a Tor config
  default (#24679, #24681)
* the comma that separates fallback C strings is now on its own line
* a "nickname" comment has been added (#24600)
* an optional "extrainfo" comment has been added (#22759)

The added fields will be populated with placeholders until the list is
rebuilt (#22271). This will hopefully happen some time in the next few
weeks.


Requesting More Extra Info Caches

There are only a few fallbacks that cache extra-info documents.
I checked 67, and only 4 cached extra-info documents.

atagar, do you want me to ask some fallback operators to set
DownloadExtraInfo 1?

What number or proportion would you like?

(We allow approximately 25% of fallbacks to go down before we start to rebuild
the list. In the worst case, this can mean that ~40% are down at some point.)


Example Entries

A sample entry in the new format, using actual relay info:

"5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
" ipv6=[2a01:4f8:162:51e2::2]:9001"
/* nickname=rueckgrat */
/* extrainfo=1 */
,

The current fallback file in the new format, with placeholders:
https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc

A small sample fallback file in the new format, with actual relay info:
https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format.inc

Please let me know if you would like any changes to the format.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo9HG8ACgkQdA2eOQJS
cqJSbBAAg2vGmlTfUyONVpDQe3FBdQF3luqQlvsjMXRTg1QzklquITUXRphzJVT+
6qyE7eKc1ljZuvWW4GDH9DujWusFJo3D/6ocUvvoN4i0vmTZxSrXduyslvgfohDC
Y6SsQrJJTr5xMMx2h6CVYR38jfh+9jAoaWbj2NlufW6eZcwGp0ZIFxoghAZ9BClM
PLkJW9IkLqlco9TwjGCk7HawX5UQXpJVFPdgOvh/2aC8ohOv86xKfQZXUOIksIip
7RJq637YO4EoRVO0T9hvQx+5/WV9EhktKPb6Iq1C97czdMS8IeuiMcnuC9AlbB/O
NATpz9HbhMJ6BlEnKZesGIV26XjuEzJEh9YExm0ImdwjSm4edhBspA6Js2GYJ7Rv
uTOzxDXLMxUKlUE1u6CoAPQDGqXtpYzpZJVqLGZPswJSTiapMfJt2BzWtFRqmS4S
2USZz1twtS7rK/ads4OpOtKf8s+8Ok1QkgFrqXm5lcXtnnD6vqV5CUu6Hv1+JVrk
BW2CriFyyoNuJaKq5mvVvWqEjQVhRYKhPOfMMEV+muNyXYOQjzQkPmnOHiyRN52c
2jA2wnmOYQLgXvhiL+bQlXK5MjTXAvq6o44WZlc40vU/RvOz9gCnw6tjVwct2Ei4
m2LzXcaM2PrS+BjbRE3wWbgTefQ9NwUND05dHEGXRrXmpI6Hx04=
=temR
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171222221600</emailId><senderName>Tyler Durden</senderName><senderEmail>virii@enn.lu</senderEmail><timestampReceived>2017-12-22 22:16:00-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

Hi

I just added the DownloadExtraInfo in the config file for the nodes
"chulak" and "aurora".



Greetings

teor:
&gt; Hi all,
&gt; 
&gt; Some time in the next few weeks, the Tor fallback directory mirror file
&gt; format will change. This affects stem and Relay Search, which parse this
&gt; file.
&gt; 
&gt; 
&gt; Change Description
&gt; 
&gt; Here is a list of changes to the file format:
&gt; * the "weight" line has been removed, and replaced with a Tor config
&gt;   default (#24679, #24681)
&gt; * the comma that separates fallback C strings is now on its own line
&gt; * a "nickname" comment has been added (#24600)
&gt; * an optional "extrainfo" comment has been added (#22759)
&gt; 
&gt; The added fields will be populated with placeholders until the list is
&gt; rebuilt (#22271). This will hopefully happen some time in the next few
&gt; weeks.
&gt; 
&gt; 
&gt; Requesting More Extra Info Caches
&gt; 
&gt; There are only a few fallbacks that cache extra-info documents.
&gt; I checked 67, and only 4 cached extra-info documents.
&gt; 
&gt; atagar, do you want me to ask some fallback operators to set
&gt; DownloadExtraInfo 1?
&gt; 
&gt; What number or proportion would you like?
&gt; 
&gt; (We allow approximately 25% of fallbacks to go down before we start to rebuild
&gt; the list. In the worst case, this can mean that ~40% are down at some point.)
&gt; 
&gt; 
&gt; Example Entries
&gt; 
&gt; A sample entry in the new format, using actual relay info:
&gt; 
&gt; "5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
&gt; " ipv6=[2a01:4f8:162:51e2::2]:9001"
&gt; /* nickname=rueckgrat */
&gt; /* extrainfo=1 */
&gt; ,
&gt; 
&gt; The current fallback file in the new format, with placeholders:
&gt; https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc
&gt; 
&gt; A small sample fallback file in the new format, with actual relay info:
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format.inc
&gt; 
&gt; Please let me know if you would like any changes to the format.
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171223211657</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-23 21:16:57-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

Hi Tim, added preliminary Stem parsing support for the v2 fallback format...

  https://gitweb.torproject.org/stem.git/commit/?id=ea55eaa

Few thoughts are...

  * It would be nice if the 'extrainfo=' lines were mandatory since I
need a delimiter between the entries.
  * Maybe we should start the document with a format version number?

Cheers! -Damian



On Fri, Dec 22, 2017 at 6:53 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; Hi all,
&gt;
&gt; Some time in the next few weeks, the Tor fallback directory mirror file
&gt; format will change. This affects stem and Relay Search, which parse this
&gt; file.
&gt;
&gt;
&gt; Change Description
&gt;
&gt; Here is a list of changes to the file format:
&gt; * the "weight" line has been removed, and replaced with a Tor config
&gt;   default (#24679, #24681)
&gt; * the comma that separates fallback C strings is now on its own line
&gt; * a "nickname" comment has been added (#24600)
&gt; * an optional "extrainfo" comment has been added (#22759)
&gt;
&gt; The added fields will be populated with placeholders until the list is
&gt; rebuilt (#22271). This will hopefully happen some time in the next few
&gt; weeks.
&gt;
&gt;
&gt; Requesting More Extra Info Caches
&gt;
&gt; There are only a few fallbacks that cache extra-info documents.
&gt; I checked 67, and only 4 cached extra-info documents.
&gt;
&gt; atagar, do you want me to ask some fallback operators to set
&gt; DownloadExtraInfo 1?
&gt;
&gt; What number or proportion would you like?
&gt;
&gt; (We allow approximately 25% of fallbacks to go down before we start to rebuild
&gt; the list. In the worst case, this can mean that ~40% are down at some point.)
&gt;
&gt;
&gt; Example Entries
&gt;
&gt; A sample entry in the new format, using actual relay info:
&gt;
&gt; "5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
&gt; " ipv6=[2a01:4f8:162:51e2::2]:9001"
&gt; /* nickname=rueckgrat */
&gt; /* extrainfo=1 */
&gt; ,
&gt;
&gt; The current fallback file in the new format, with placeholders:
&gt; https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc
&gt;
&gt; A small sample fallback file in the new format, with actual relay info:
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format.inc
&gt;
&gt; Please let me know if you would like any changes to the format.
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171223222321</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-23 22:23:21-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 24 Dec 2017, at 08:16, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; Hi Tim, added preliminary Stem parsing support for the v2 fallback format...
&gt; 
&gt;  https://gitweb.torproject.org/stem.git/commit/?id=ea55eaa
&gt; 
&gt; Few thoughts are...
&gt; 
&gt;  * It would be nice if the 'extrainfo=' lines were mandatory since I
&gt; need a delimiter between the entries.

We have a few alternatives here:

C requires a comma as the delimiter between entries.
I can guarantee there will always be a comma delimiter after every entry,
Including the last entry. I will also make sure that any comment fields
come before this delimiter. I can guarantee there will never be a comma
inside the C string or comments in the entry.

Alternately, I can make extrainfo mandatory, and if I can't fetch a relay's
descriptor (a rare case?), I will mark is as 0.

But I'd like to be able to add extra fields in future without breaking
parsers, so I don't want parsers relying on field order.

Do you want me to add an explicit end of record comment, or is the
comma sufficient?

Is there a delimiter you'd like me to add before the first entry?

&gt;  * Maybe we should start the document with a format version number?

I thought of that, too. Thanks for reminding me.

https://trac.torproject.org/projects/tor/ticket/24725

&gt; Cheers! -Damian
&gt; 
&gt; 
&gt; 
&gt;&gt; On Fri, Dec 22, 2017 at 6:53 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; Hi all,
&gt;&gt; 
&gt;&gt; Some time in the next few weeks, the Tor fallback directory mirror file
&gt;&gt; format will change. This affects stem and Relay Search, which parse this
&gt;&gt; file.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; Change Description
&gt;&gt; 
&gt;&gt; Here is a list of changes to the file format:
&gt;&gt; * the "weight" line has been removed, and replaced with a Tor config
&gt;&gt;  default (#24679, #24681)
&gt;&gt; * the comma that separates fallback C strings is now on its own line
&gt;&gt; * a "nickname" comment has been added (#24600)
&gt;&gt; * an optional "extrainfo" comment has been added (#22759)
&gt;&gt; 
&gt;&gt; The added fields will be populated with placeholders until the list is
&gt;&gt; rebuilt (#22271). This will hopefully happen some time in the next few
&gt;&gt; weeks.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; Requesting More Extra Info Caches
&gt;&gt; 
&gt;&gt; There are only a few fallbacks that cache extra-info documents.
&gt;&gt; I checked 67, and only 4 cached extra-info documents.
&gt;&gt; 
&gt;&gt; atagar, do you want me to ask some fallback operators to set
&gt;&gt; DownloadExtraInfo 1?
&gt;&gt; 
&gt;&gt; What number or proportion would you like?
&gt;&gt; 
&gt;&gt; (We allow approximately 25% of fallbacks to go down before we start to rebuild
&gt;&gt; the list. In the worst case, this can mean that ~40% are down at some point.)
&gt;&gt; 
&gt;&gt; 
&gt;&gt; Example Entries
&gt;&gt; 
&gt;&gt; A sample entry in the new format, using actual relay info:
&gt;&gt; 
&gt;&gt; "5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
&gt;&gt; " ipv6=[2a01:4f8:162:51e2::2]:9001"
&gt;&gt; /* nickname=rueckgrat */
&gt;&gt; /* extrainfo=1 */
&gt;&gt; ,
&gt;&gt; 
&gt;&gt; The current fallback file in the new format, with placeholders:
&gt;&gt; https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc
&gt;&gt; 
&gt;&gt; A small sample fallback file in the new format, with actual relay info:
&gt;&gt; https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format.inc
&gt;&gt; 
&gt;&gt; Please let me know if you would like any changes to the format.
&gt;&gt; 
&gt;&gt; T
&gt;&gt; 
&gt;&gt; --
&gt;&gt; Tim Wilson-Brown (teor)
&gt;&gt; 
&gt;&gt; teor2345 at gmail dot com
&gt;&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt;&gt; ricochet:ekmygaiu4rzgsk6n
&gt;&gt; xmpp: teor at torproject dot org
&gt;&gt; ------------------------------------------------------------------------
&gt;&gt; 
&gt;&gt; 
&gt;&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 24 Dec 2017, at 08:16, Damian \
Johnson &lt;&lt;a href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi Tim, added preliminary Stem \
parsing support for the v2 fallback format...&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 &lt;a href="https://gitweb.torproject.org/stem.git/commit/?id=ea55eaa"&gt;https://gitw \
eb.torproject.org/stem.git/commit/?id=ea55eaa&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Few \
thoughts are...&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  * It would be nice if the \
'extrainfo=' lines were mandatory since I&lt;/span&gt;&lt;br&gt;&lt;span&gt;need a delimiter between \
the entries.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;We have a few alternatives \
here:&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;C requires a comma as the delimiter between \
entries.&lt;/div&gt;&lt;div&gt;I can guarantee there will always be a comma delimiter after every \
entry,&lt;/div&gt;&lt;div&gt;Including the last entry. I will also make sure that any comment \
fields&lt;/div&gt;&lt;div&gt;come before this delimiter. I can guarantee there will never be a \
comma&lt;/div&gt;&lt;div&gt;inside the C string or comments in the \
entry.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alternately, I can make extrainfo mandatory, and if I \
can't fetch a relay's&lt;/div&gt;&lt;div&gt;descriptor (a rare case?), I will mark is as \
0.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But I'd like to be able to add extra fields in future \
without breaking&lt;/div&gt;&lt;div&gt;parsers, so I don't want parsers relying on field \
order.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do you want me to add an explicit end of record \
comment, or is the&lt;/div&gt;&lt;div&gt;comma sufficient?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Is there a delimiter you'd like me \
to add before the first entry?&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt; \
 * Maybe we should start the document with a format version \
number?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I thought of that, too. \
Thanks for reminding me.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24725#ticket"&gt;https://trac.torproject.org/projects/tor/ticket/24725&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Cheers! \
-Damian&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;On Fri, \
Dec 22, 2017 at 6:53 AM, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Hi \
all,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Some time in \
the next few weeks, the Tor fallback directory mirror \
file&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;format will change. This \
affects stem and Relay Search, which parse this&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;file.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Change \
Description&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Here is a \
list of changes to the file format:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;* the "weight" line has been removed, and replaced with a Tor \
config&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;  default (#24679, \
#24681)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;* the comma that \
separates fallback C strings is now on its own \
line&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;* a "nickname" comment has \
been added (#24600)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;* an \
optional "extrainfo" comment has been added \
(#22759)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;The added \
fields will be populated with placeholders until the list \
is&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;rebuilt (#22271). This will \
hopefully happen some time in the next few&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;weeks.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Requesting \
More Extra Info Caches&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;There are \
only a few fallbacks that cache extra-info \
documents.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I checked 67, and \
only 4 cached extra-info documents.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;atagar, do \
you want me to ask some fallback operators to set&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;DownloadExtraInfo 1?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;What number \
or proportion would you like?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;(We allow \
approximately 25% of fallbacks to go down before we start to \
rebuild&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;the list. In the worst \
case, this can mean that ~40% are down at some \
point.)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Example \
Entries&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;A sample \
entry in the new format, using actual relay info:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;"5.9.110.236:9030 orport=9001 \
id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;" ipv6=[2a01:4f8:162:51e2::2]:9001"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;/* nickname=rueckgrat */&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;/* extrainfo=1 */&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;The current \
fallback file in the new format, with \
placeholders:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc"&gt; \
https://github.com/teor2345/tor/blob/ticket22759_tree/src/or/fallback_dirs.inc&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;A small \
sample fallback file in the new format, with actual relay \
info:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_n \
ew_format.inc"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format.inc&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Please let me \
know if you would like any changes to the format.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;T&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;--&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Tim \
Wilson-Brown (teor)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;teor2345 at \
gmail dot com&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;PGP C855 6CED 5D90 \
A0C5 29F6 4D43 450C BA7F 968F 094B&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;ricochet:ekmygaiu4rzgsk6n&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;xmpp: teor at torproject dot org&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;_______________________________________________&lt;/span&gt;&lt;br&gt;&lt;span&gt;tor-dev \
mailing list&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.tor \
project.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171224001425</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-24 00:14:25-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

&gt; Do you want me to add an explicit end of record comment, or is the
&gt; comma sufficient?

Hi Tim. I'd rather not rely on just a comma. I can easily see us
tweaking the layout so 'expect a line with only a comma' breaks.

I actually like both of the other suggested options: having
'extrainfo=0' so that's explicit *and* a delimiter. For instance...

/* ============================== */

... or whatever. That would both help with parsing and make the file
nicer to read.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224022623</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-24 02:26:23-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Dec 2017, at 11:14, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt;&gt; Do you want me to add an explicit end of record comment, or is the
&gt;&gt; comma sufficient?
&gt; 
&gt; Hi Tim. I'd rather not rely on just a comma. I can easily see us
&gt; tweaking the layout so 'expect a line with only a comma' breaks.
&gt; 
&gt; I actually like both of the other suggested options: having
&gt; 'extrainfo=0' so that's explicit *and* a delimiter. For instance...
&gt; 
&gt; /* ============================== */
&gt; 
&gt; ... or whatever. That would both help with parsing and make the file
&gt; nicer to read.

Done!

* the file now starts with a type and a version line:
  /* type=fallback */
  /* version=2.0.0 */
* extrainfo is mandatory (occasionally we won't get a descriptor, so
  we'll warn and mark the relay extrainfo=0)
* each fallback entry ends with /* ===== */

Two remaining questions:
* is 6 extra info caches (up from 4) enough in a list of 150?
* do you want the delimiter before the first fallback entry as well?

Sample entry:

"5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
" ipv6=[2a01:4f8:162:51e2::2]:9001"
/* nickname=rueckgrat */
/* extrainfo=1 */
/* ===== */
,

Sample file:

https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format_version.inc

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo/EE8ACgkQdA2eOQJS
cqJrIxAAslLTTGc6+IVcqVs9yglu77uKszHlTIRWeIm9iKpJZae/8rBV5pKfvEZB
6FUHQQlD/IJt3UR/AdclU6s05aVJ6j5EgY7uy8Mupki8Q1t5YuSy4MZX0xywQ+GU
FeP4YyQVJXdXLKu/DnrwebhM955pJzkVg9btZXxjmTYnSt5+P4JFWc1nxwtcNsiB
n8Y4H4tjEPhOmn/EhSq0XYlKEA0W+T7bteQIcqybarbu6opfwLc8iRWRWJQyTMxn
4mCyre5FfXc49nyuHLqBI7Ool1XllURb+zh0cCjrVgEkxtwS3vNlH1Zcr3HksCVt
E2hcM2c8otZkOXQjwTypF/EAJAm09+UMiNeHQc0ZWp4n1iK+tByRyhL20Hceok0c
fOpwfrFvVg8r9VwjrrS0XRezwsibv0XDpFrNvMRgGeN1ooLHnlQgit69wOz6KCOR
W4Zj+NCmOWeW5Mdq66oHrCesJfVTYEjxaBfbq6/N+Q8EkZ+JMmF7kDv1vWm0fqO+
OHg9VqNGY6XQowDs1e8GHjvBW/dfc5OKj9SnyJwjeLpYXlgKWCLCNFyR5GAvC8Ag
kC740h0NAm2LTTRARUekpHENcMZC7h6ZaR8pr5u3gPNiOTYUOXK2X7tswvkefil5
1PsOPPIetGd9aJ7EDQTRmVckz7UNoCYZEs4194iYZQaRIpUqo5Q=
=kKgE
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171224201343</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-24 20:13:43-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

&gt; Done!
&gt;
&gt; * the file now starts with a type and a version line:
&gt;   /* type=fallback */
&gt;   /* version=2.0.0 */
&gt; * extrainfo is mandatory (occasionally we won't get a descriptor, so
&gt;   we'll warn and mark the relay extrainfo=0)
&gt; * each fallback entry ends with /* ===== */

Sweet, thanks Tim!

&gt; * is 6 extra info caches (up from 4) enough in a list of 150?

Hmmm. Can't say on Stem's side I have an opinion on this. It doesn't
rely on fallback directories for anything so extrainfo caches aren't a
concern.

&gt; * do you want the delimiter before the first fallback entry as well?

Stem doesn't care about a delimiter before the first entry but that
seems like a good idea so we have a clear separation between comments
and the start of the machine readable section.

A detail Stem does care about is that the last entry ends with a
delimiter. If it doesn't that's fine, but code is a tad simpler if we
ensure it does. :)

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224202646</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2017-12-24 20:26:46-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 24/12/17 20:13, Damian Johnson wrote.

As we are planning to also add a parser to metrics-lib (#24434), would
it be possible to get a full description of the format of the file
possibly in RFC5234 format so that we can check that the generator and
parsers all match up to that specification?

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171226074744</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-26 07:47:44-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Dec 2017, at 07:13, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt;&gt; Done!
&gt;&gt; 
&gt;&gt; * the file now starts with a type and a version line:
&gt;&gt;  /* type=fallback */
&gt;&gt;  /* version=2.0.0 */
&gt;&gt; * extrainfo is mandatory (occasionally we won't get a descriptor, so
&gt;&gt;  we'll warn and mark the relay extrainfo=0)
&gt;&gt; * each fallback entry ends with /* ===== */
&gt; 
&gt; Sweet, thanks Tim!
&gt; 
&gt;&gt; * is 6 extra info caches (up from 4) enough in a list of 150?
&gt; 
&gt; Hmmm. Can't say on Stem's side I have an opinion on this. It doesn't
&gt; rely on fallback directories for anything so extrainfo caches aren't a
&gt; concern.

So stem just uses a mix of fallbacks and authorities?
Good, that's what Tor does.
I think we will be fine then.

&gt;&gt; * do you want the delimiter before the first fallback entry as well?
&gt; 
&gt; Stem doesn't care about a delimiter before the first entry but that
&gt; seems like a good idea so we have a clear separation between comments
&gt; and the start of the machine readable section.

I made the header end with a delimiter, and I made the list of entries
start with a delimiter:

https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format_version.3.inc

This means that parsers can (and should) ingore the human-readable
second section.

&gt; A detail Stem does care about is that the last entry ends with a
&gt; delimiter. If it doesn't that's fine, but code is a tad simpler if we
&gt; ensure it does. :)

It does and it will continue to.

&gt; On 25 Dec 2017, at 07:26, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; As we are planning to also add a parser to metrics-lib (#24434), would
&gt; it be possible to get a full description of the format of the file
&gt; possibly in RFC5234 format so that we can check that the generator and
&gt; parsers all match up to that specification?

I have written up a format in the standard torspec style:

https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt

It is deliberately under-specified, please let me know if this causes
any trouble when writing the parser, and I will tighten it up.

It's not ABNF/RFC5234, it's rather restrictive, and strict ABNF is
unreadable for case sensitive strings. I am happy to put an ABNF spec in
an appendix, if someone wants to write one.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpB/qAACgkQdA2eOQJS
cqISfQ/+PfEa5D+yNwuiOYJSoSdA2pAkdY+qw85PATPYaM92ZZkYrEVQYmThJAPe
HCay1INlPpIInSDXCYTNa+2a1JmBdkfVbS1eB0Yx1A03GkBPZjz2Gvcd/SKSn3CB
gXnavYttezw+i0+KJq4YtjxqmYIip172ngcwZ6FF+yt3nNBBlTeNkygEglaIHUXK
vj+2qWGn1GcdNF25yqbUiIFQ3w5uxAIr2R4Ausl+sqMfNdliosV/sO5P8IOIa16S
OO6+nw8H2ChjlXU6UKtvz5ZQplOdeX9JoRd7XmpvO/c2zSk5rcRo5TPtHJE/kcuT
OH/Fb852DkgvKOMLQ0SdTFaHridMSMrqHbwNnvwwgI0yWXZ6KyrTrotx2D8tPpTM
wqLaMLC3QWi/dy/0w21vvnmJLpzYvD+XLG1KEESVIlcYo/r0sgl+cnFjxaWOZIyX
qliqpe/XDzAeW/vmLtTRMuuTNtN61goPCSKIPK0TwBg3OuJSZxuU5IYlkp0sB7mI
VF6e8kGgfE2mvWGoS9HKSSgm2ZxZyJxMSFuqa3U55oukWqf3ukApQL5Q85aOZDcv
tPiNzT5wY+x5meWHqh3Y3fy3tkiGMBOESkBDo3QqckP/sXHS10TDvHLDXvxP9PCK
iQPsNBPGaOLtBCprjPAy701YJAmPFHSXyxchXvTkVxKX4PbV2vg=
=bDw5
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219210723</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-19 21:07:23-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>


&gt; On 20 Dec 2017, at 08:03, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; Oh! Interesting, just got a dump of r2e emails. Guess it came back on
&gt; its own without a router reboot. Neat!

Would it help if we moved this to some other infrastructure?

T

&gt;&gt; On Tue, Dec 19, 2017 at 10:54 AM, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt; Hi nusenu. Yup, I was just thinking about that. CenturyLink did some
&gt;&gt; work on my apartment's connection yesterday that knocked it offline.
&gt;&gt; Probably just needs the router to be rebooted but I'm visiting with
&gt;&gt; family through new years so the r2e instance will be unavailable until
&gt;&gt; then.
&gt;&gt; 
&gt;&gt; More annoyingly now I don't get Path of Exile news. Blah. &gt;:(
&gt;&gt; 
&gt;&gt; 
&gt;&gt;&gt; On Tue, Dec 19, 2017 at 10:03 AM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;&gt;&gt; Hi Damian,
&gt;&gt;&gt; 
&gt;&gt;&gt; it appears to be the case that wiki changes are no longer send to this ML.
&gt;&gt;&gt; Could you have a look?
&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-wiki-changes
&gt;&gt;&gt; 
&gt;&gt;&gt; thank you!
&gt;&gt;&gt; nusenu
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; --
&gt;&gt;&gt; https://mastodon.social/@nusenu
&gt;&gt;&gt; twitter: @nusenu_
&gt;&gt;&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219214207</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-19 21:42:07-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

&gt; Would it help if we moved this to some other infrastructure?

If someone else would like to maintain it then sure. Karsten
originally ran it, then I took it over when he shut down his r2e
instance since I already run one for my news feeds anyway.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224100400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-24 10:04:00-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Damian Johnson:
&gt;&gt; Would it help if we moved this to some other infrastructure?
&gt; 
&gt; If someone else would like to maintain it then sure. Karsten
&gt; originally ran it, then I took it over when he shut down his r2e
&gt; instance since I already run one for my news feeds anyway.

Could the torproject provide you with a VM to run that service?

thanks,
nusenu




-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171113185127</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-11-13 18:51:27-0400</timestampReceived><subject>[tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

[Attachment #2 (multipart/alternative)]


Filename: 285-utf-8.txt
Title: Directory documents should be standardized as UTF-8
Author: Nick Mathewson
Created: 13 November 2017
Status: Open

1. Summary and motivation

   People frequently want to include non-ASCII text in their router
   descriptors.  The Contact line is a favorite place to do this, but in
   principle the platform line would also be pretty logical.

   Unfortunately, there's no specified way to encode non-ASCII in our
   directory documents.

   Fortunately, almost everybody who does it, uses UTF-8 anyway.

   As we move towards Rust support in Tor, we gain another motivation
   for standarding on UTF-8, since Rust's native strings strongly prefer
   UTF-8.

   So, in this proposal, we describe a migration path to having all
   directory documents be fully UTF-8.

2. Proposal

   First, we should have Tor relays reject ContactInfo lines (and any
   other lines copied directly into router descriptors) that are not
   UTF-8.

   At the same time, we should have authorities reject any router
   descriptors or extrainfo documents that are not valid UTF-8.
   Simultaneously, we can have all Tor instances reject all
   non-directory-descriptor directory documents that are not UTF-8,
   since none should exist today.

   Finally, once the authorities have updated, we should have all Tor
   instances reject all directory documents that are not UTF-8.  (We
   should not take this step until the authorities have upgraded, or
   else the behavior of updated and non-updated clients could be
   distinguished.)

2.1. Hidden service descriptors' encrypted bodies

   For the encrypted bodies of hidden service descriptors, we cannot
   reject them at the authority level, and so we need to take a slightly
   different approach to prevent client fingerprinting attacks.

   First, we should make Tor instances start warning about any hidden
   service descriptors whose bodies, post-decryption, contain non-utf-8
   plaintext.  At the same time, we add a consensus parameter to
   indicate that hidden service descriptors with non-utf-8 plantexts
   should be rejected entirely: "reject-encrypted-non-utf-8".  If that
   parameter is set to 1, then hidden service clients will not only
   warn, but reject the descriptors.

   Once the vast majority of clients are running versions that support
   the "reject-encrypted-non-utf-8" parameter, that parameter can be set
   to 1.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Filename: 285-utf-8.txt&lt;/div&gt;&lt;div&gt;Title: Directory documents \
should be standardized as UTF-8&lt;/div&gt;&lt;div&gt;Author: Nick Mathewson&lt;/div&gt;&lt;div&gt;Created: \
13 November 2017&lt;/div&gt;&lt;div&gt;Status: Open&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Summary and \
motivation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     People frequently want to include non-ASCII \
text in their router&lt;/div&gt;&lt;div&gt;     descriptors.   The Contact line is a favorite \
place to do this, but in&lt;/div&gt;&lt;div&gt;     principle the platform line would also be \
pretty logical.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     Unfortunately, there's no specified \
way to encode non-ASCII in our&lt;/div&gt;&lt;div&gt;     directory \
documents.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     Fortunately, almost everybody who does it, \
uses UTF-8 anyway.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     As we move towards Rust support in \
Tor, we gain another motivation&lt;/div&gt;&lt;div&gt;     for standarding on UTF-8, since \
Rust's native strings strongly prefer&lt;/div&gt;&lt;div&gt;     \
UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     So, in this proposal, we describe a migration \
path to having all&lt;/div&gt;&lt;div&gt;     directory documents be fully \
UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Proposal&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     First, we \
should have Tor relays reject ContactInfo lines (and any&lt;/div&gt;&lt;div&gt;     other lines \
copied directly into router descriptors) that are not&lt;/div&gt;&lt;div&gt;     \
UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     At the same time, we should have authorities \
reject any router&lt;/div&gt;&lt;div&gt;     descriptors or extrainfo documents that are not \
valid UTF-8.&lt;/div&gt;&lt;div&gt;     Simultaneously, we can have all Tor instances reject \
all&lt;/div&gt;&lt;div&gt;     non-directory-descriptor directory documents that are not \
UTF-8,&lt;/div&gt;&lt;div&gt;     since none should exist today.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     \
Finally, once the authorities have updated, we should have all Tor&lt;/div&gt;&lt;div&gt;     \
instances reject all directory documents that are not UTF-8.   (We&lt;/div&gt;&lt;div&gt;     \
should not take this step until the authorities have upgraded, or&lt;/div&gt;&lt;div&gt;     else \
the behavior of updated and non-updated clients could be&lt;/div&gt;&lt;div&gt;     \
distinguished.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.1. Hidden service descriptors' \
encrypted bodies&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     For the encrypted bodies of hidden \
service descriptors, we cannot&lt;/div&gt;&lt;div&gt;     reject them at the authority level, and \
so we need to take a slightly&lt;/div&gt;&lt;div&gt;     different approach to prevent client \
fingerprinting attacks.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     First, we should make Tor \
instances start warning about any hidden&lt;/div&gt;&lt;div&gt;     service descriptors whose \
bodies, post-decryption, contain non-utf-8&lt;/div&gt;&lt;div&gt;     plaintext.   At the same \
time, we add a consensus parameter to&lt;/div&gt;&lt;div&gt;     indicate that hidden service \
descriptors with non-utf-8 plantexts&lt;/div&gt;&lt;div&gt;     should be rejected entirely: \
"reject-encrypted-non-utf-8".   If that&lt;/div&gt;&lt;div&gt;     parameter is set to \
1, then hidden service clients will not only&lt;/div&gt;&lt;div&gt;     warn, but reject the \
descriptors.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;     Once the vast majority of clients are \
running versions that support&lt;/div&gt;&lt;div&gt;     the \
"reject-encrypted-non-utf-8" parameter, that parameter can be \
set&lt;/div&gt;&lt;div&gt;     to 1.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231101253</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2017-12-31 10:12:53-0400</timestampReceived><subject>[tor-dev] Prop-279 for Onion Alternative Name Representations (Re: Error-Correcting Onions with Bech</subject><body>

[Attachment #2 (multipart/signed)]


On 2017-12-31 at 14:23:39 +1100, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;Please read the naming layer API proposal before writing your proposal:
&gt;
&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/279-naming-layer-api.txt
&gt;
&gt;In particular, if you added a unique top-level domain (.bech?), you 
&gt;would only have to specify how a the bech translation plugin works. (It 
&gt;would be a much shorter proposal.)

Thanks, teor.  I reviewed the spec (version 13cbcbc) carefully, and 
opened https://trac.torproject.org/24774 attaching a `git diff` patch 
with proposed changes.

The crux of the matter is support for what I will call alternative name 
representations.  Prop-279 assumed quasi-DNS names resolved through some 
sort of a network or database lookup.  However, an alternative 
representation can be entirely self-contained.  Thus, one of the changes 
I request is to explicitly permit a global wildcard '*' tld for plugins 
which can be sandboxed with neither network nor filesystem access (and 
will return answers in microseconds).

I also proposed changes to permit the UTF-8 characters required for 
representing names in languages other than American English, and some 
other technical improvements.  I added status code 5 to support plugins 
which can discern when a name is in a recognized format, but is 
intrinsically invalid e.g. due to checksum failure; and I expanded the 
description of status code 2, for plugins which do not have TLDs but do 
recognize a definite syntax.

The potential use cases here extend beyond my suggestion for 
Bech32-coded .onions.  I also wish to encode .onion addresses in a 
mnemonic phrase, similar to those generated by this tool:

easyseed(1) BIP 39 mnemonic phrase generator
https://github.com/nym-zone/easyseed
manpage:
https://raw.githubusercontent.com/nym-zone/easyseed/master/easyseed.1.txt

Out of the box, that will make a mnemonic from the raw data for a v3 
.onion address, but not v2 (too short).  I could easily draw up a spec 
to represent v2 .onions as 8 words, and v3 onions as 24–25 words, each 
including a simple checksum.  The mnemonic standard I've been using 
includes carefully designed wordlists for nine different languages; I 
will soon be adding multilanguage support to my tool, which I could copy 
over to a prop-279 name system plugin.

Now, imagine an activist under a repressive régime whispering in the ear 
of a whistleblower eight words for the address of a SecureDrop.  Or 
scrawling a Bech32 address on a scrap of paper in a hurry.  The 
possibilities are many.

Should my proposed changes be accepted, I will be eager to write tools 
and plugins for .onion alternative representations which look either 
like this (a real address, properly encoded in Bech32):

	onion1kt50trm0nf4jxkskpcjy74

...or approximately like this (random words off a wordlist, for example 
only):

	mad century mirror awkward glory shine cake fat

...with out-of-the-box support for Chinese (Simplified), Chinese 
(Traditional), French, Italian, Japanese, Korean, and Spanish, in 
addition to English.

Wordlists, all designed to minimize user error:
https://github.com/bitcoin/bips/tree/master/bip-0039
(In the English list, all words are unique within the first four 
characters; and similar/confusable words are excluded.)

Given appropriate prop-279 changes, I won't need to draw a proposal.  
I'll simply write code!

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171113222844</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-13 22:28:44-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

[Attachment #2 (--Apple-Mail-675610BD-816F-44D9-8C63-8E8E1714495E)]


&gt; On 14 Nov 2017, at 05:51, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 285-utf-8.txt
&gt; Title: Directory documents should be standardized as UTF-8
&gt; Author: Nick Mathewson
&gt; Created: 13 November 2017
&gt; Status: Open
&gt; 
&gt; 1. Summary and motivation
&gt; 
&gt;    People frequently want to include non-ASCII text in their router
&gt;    descriptors.  The Contact line is a favorite place to do this, but in
&gt;    principle the platform line would also be pretty logical.
&gt; 
&gt;    Unfortunately, there's no specified way to encode non-ASCII in our
&gt;    directory documents.
&gt; 
&gt;    Fortunately, almost everybody who does it, uses UTF-8 anyway.

How many current descriptors will be rejected as non-UTF-8?

&gt;    As we move towards Rust support in Tor, we gain another motivation
&gt;    for standarding on UTF-8, since Rust's native strings strongly prefer
&gt;    UTF-8.
&gt; 
&gt;    So, in this proposal, we describe a migration path to having all
&gt;    directory documents be fully UTF-8.
&gt; 
&gt; 2. Proposal
&gt; 
&gt;    First, we should have Tor relays reject ContactInfo lines (and any
&gt;    other lines copied directly into router descriptors) that are not
&gt;    UTF-8.

How do we define UTF-8?

Do we exclude all invalid byte sequences?
Do we exclude all invalid code points (some libraries don't)?
https://en.m.wikipedia.org/wiki/UTF-8#Invalid_byte_sequences

Do we reject unassigned or reserved code points?
Do we reject private use code points?
https://en.m.wikipedia.org/wiki/Unicode#General_Category_property

How do we avoid tying ourselves to a particular version of Unicode?
(By accepting reserved code points? Some libraries don't do this.)

Will we allow a byte order mark?
(We can't during the transition, it doesn't parse as ASCII.
And we probably shouldn't for any verbatim lines, because they
are copied into the middle of the descriptor.)

How do we carry forward existing ASCII restrictions into UTF-8?

We will need to update the directory spec to acknowledge that
contact and platform lines may be parsed as UTF-8 or
ASCII-including-arbitrary-bytes-except-NUL, and that they are
terminated by single-byte newlines regardless.

How do we deal with format confusion attacks?

UTF-8 has a few alternative whitespace characters. These could
be used in an attack that confuses either humans viewing the file,
or automated software:

If a human uses a UTF-8 compatible viewer or editor, it likely shows
Unicode newlines and ASCII newlines in an identical way. Similarly,
it may show Unicode spaces and ASCII spaces in the same way.
This may confuse the human reader.

Similarly, if automated software parses using a Unicode whitespace
or newline character class, it will mis-parse directory documents.
(Our Rust protover code looks for ASCII spaces, so it appears to
be fine.)

Note that we already have this issue with line feeds and carriage
returns, which I thought we had solved by banning carriage returns
in directory documents. But it appears we allow "any printing ASCII
character". (We will have to edit this to include Unicode.)

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218

&gt;    At the same time, we should have authorities reject any router
&gt;    descriptors or extrainfo documents that are not valid UTF-8.
&gt;    Simultaneously, we can have all Tor instances reject all
&gt;    non-directory-descriptor directory documents that are not UTF-8,
&gt;    since none should exist today.

If we apply the existing restrictions in dir-spec, which require
non-directory-descriptor directory documents to be ASCII, they will
also be UTF-8.

Isn't it confusing to say "UTF-8", when what we really mean is "ASCII"?
Do we expect to migrate these to non-ASCII UTF-8 at some point?

Also, does "non-directory-descriptor directory documents" mean we
can reject non-UTF-8 microdescriptors? I think we should.

Does the NS consensus contain any lines that are copied verbatim from
descriptors?

&gt;    Finally, once the authorities have updated, we should have all Tor
&gt;    instances reject all directory documents that are not UTF-8.  (We
&gt;    should not take this step until the authorities have upgraded, or
&gt;    else the behavior of updated and non-updated clients could be
&gt;    distinguished.)
&gt; 
&gt; 2.1. Hidden service descriptors' encrypted bodies
&gt; 
&gt;    For the encrypted bodies of hidden service descriptors, we cannot
&gt;    reject them at the authority level, and so we need to take a slightly
&gt;    different approach to prevent client fingerprinting attacks.
&gt; 
&gt;    First, we should make Tor instances start warning about any hidden
&gt;    service descriptors whose bodies, post-decryption, contain non-utf-8
&gt;    plaintext.  At the same time, we add a consensus parameter to
&gt;    indicate that hidden service descriptors with non-utf-8 plantexts

typo: plaintexts 

&gt;    should be rejected entirely: "reject-encrypted-non-utf-8".  If that
&gt;    parameter is set to 1, then hidden service clients will not only
&gt;    warn, but reject the descriptors.
&gt; 
&gt;    Once the vast majority of clients are running versions that support
&gt;    the "reject-encrypted-non-utf-8" parameter, that parameter can be set
&gt;    to 1.

We also can't reject bridge descriptors at the authority level.
(Bridge clients download bridge descriptors directly from bridges.)
Do we need bridge clients to also use this consensus parameter?

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;meta \
http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;On 14 Nov 2017, at 05:51, Nick \
Mathewson &lt;&lt;a href="mailto:nickm@torproject.org"&gt;nickm@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Filename: \
285-utf-8.txt&lt;/div&gt;&lt;div&gt;Title: Directory documents should be standardized as \
UTF-8&lt;/div&gt;&lt;div&gt;Author: Nick Mathewson&lt;/div&gt;&lt;div&gt;Created: 13 November \
2017&lt;/div&gt;&lt;div&gt;Status: Open&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Summary and \
motivation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   People frequently want to include \
non-ASCII text in their router&lt;/div&gt;&lt;div&gt;   descriptors.  The Contact \
line is a favorite place to do this, but in&lt;/div&gt;&lt;div&gt;   principle the \
platform line would also be pretty logical.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
 Unfortunately, there's no specified way to encode non-ASCII in \
our&lt;/div&gt;&lt;div&gt;   directory documents.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
 Fortunately, almost everybody who does it, uses UTF-8 \
anyway.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How many current \
descriptors will be rejected as non-UTF-8?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;   As we move towards Rust support in Tor, we gain another \
motivation&lt;/div&gt;&lt;div&gt;   for standarding on UTF-8, since Rust's native \
strings strongly prefer&lt;/div&gt;&lt;div&gt;   UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
 So, in this proposal, we describe a migration path to having \
all&lt;/div&gt;&lt;div&gt;   directory documents be fully \
UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Proposal&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
 First, we should have Tor relays reject ContactInfo lines (and \
any&lt;/div&gt;&lt;div&gt;   other lines copied directly into router descriptors) that \
are not&lt;/div&gt;&lt;div&gt;  \
 UTF-8.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;How do we define \
UTF-8?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do we exclude all invalid byte \
sequences?&lt;/div&gt;&lt;div&gt;Do we exclude all invalid code points (some libraries \
don't)?&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://en.m.wikipedia.org/wiki/UTF-8#Invalid_byte_sequences"&gt;https://en.m.wikipedia.org/wiki/UTF-8#Invalid_byte_sequences&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do \
we reject unassigned or reserved code points?&lt;/div&gt;&lt;div&gt;Do we reject private use code \
points?&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://en.m.wikipedia.org/wiki/Unicode#General_Category_property"&gt;https://en.m. \
wikipedia.org/wiki/Unicode#General_Category_property&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;How do we avoid tying ourselves to \
a particular version of Unicode?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;(By accepting reserved code points? Some libraries don't do \
this.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Will we allow a byte order mark?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;(We can't during the transition,&lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt; it doesn't parse as \
ASCII.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;And we probably shouldn't for any verbatim lines, because \
they&lt;/div&gt;&lt;div&gt;are copied into the middle of the \
descriptor.)&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;How do we carry forward existing ASCII \
restrictions into UTF-8?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We will need to update the directory spec \
to acknowledge that&lt;/div&gt;&lt;div&gt;contact and platform lines may be parsed as UTF-8 \
or&lt;/div&gt;&lt;div&gt;ASCII-including-arbitrary-bytes-except-NUL, and that they \
are&lt;/div&gt;&lt;div&gt;terminated by single-byte newlines \
regardless.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How do we deal with format confusion \
attacks?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTF-8 has a few alternative whitespace characters. \
These could&lt;/div&gt;&lt;div&gt;be used in an attack that confuses either humans viewing the \
file,&lt;/div&gt;&lt;div&gt;or automated software:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If a human uses a \
UTF-8 compatible viewer or editor, it likely shows&lt;/div&gt;&lt;div&gt;Unicode newlines and \
ASCII newlines in an identical way. Similarly,&lt;/div&gt;&lt;div&gt;it may show Unicode spaces \
and ASCII spaces in the same way.&lt;/div&gt;&lt;div&gt;This may confuse the human \
reader.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Similarly, if automated software parses using a \
Unicode whitespace&lt;/div&gt;&lt;div&gt;or newline character class, it will mis-parse directory \
documents.&lt;/div&gt;&lt;div&gt;(Our Rust protover code looks for ASCII spaces, so it appears \
to&lt;/div&gt;&lt;div&gt;be fine.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note that we already have this issue \
with line feeds and carriage&lt;/div&gt;&lt;div&gt;returns, which I thought we had solved by \
banning carriage returns&lt;/div&gt;&lt;div&gt;in directory documents. But it appears we allow \
"any printing ASCII&lt;/div&gt;&lt;div&gt;character". (We will have to edit this to include \
Unicode.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n218&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;   At the same time, we should have \
authorities reject any router&lt;/div&gt;&lt;div&gt;   descriptors or extrainfo \
documents that are not valid UTF-8.&lt;/div&gt;&lt;div&gt;   Simultaneously, we can \
have all Tor instances reject all&lt;/div&gt;&lt;div&gt;   non-directory-descriptor \
directory documents that are not UTF-8,&lt;/div&gt;&lt;div&gt;   since none should \
exist today.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we apply the existing \
restrictions in dir-spec, which require&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;non-directory-descriptor directory &lt;/span&gt;documents to \
be ASCII, they will&lt;/div&gt;&lt;div&gt;also be UTF-8.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Isn't it \
confusing to say "UTF-8", when what we really mean is "ASCII"?&lt;/div&gt;&lt;div&gt;Do we expect \
to migrate these to non-ASCII UTF-8 at some point?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, \
does "&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;non-directory-descriptor directory documents" mean we&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;can reject non-UTF-8 &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;microdescriptors? I think we \
should.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Does the NS consensus contain any lines that are copied verbatim \
from&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;descriptors?&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;  \
 Finally, once the authorities have updated, we should have all \
Tor&lt;/div&gt;&lt;div&gt;   instances reject all directory documents that are not \
UTF-8.  (We&lt;/div&gt;&lt;div&gt;   should not take this step until the \
authorities have upgraded, or&lt;/div&gt;&lt;div&gt;   else the behavior of updated and \
non-updated clients could be&lt;/div&gt;&lt;div&gt;  \
 distinguished.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.1. Hidden service descriptors' \
encrypted bodies&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   For the encrypted bodies of \
hidden service descriptors, we cannot&lt;/div&gt;&lt;div&gt;   reject them at the \
authority level, and so we need to take a slightly&lt;/div&gt;&lt;div&gt;   different \
approach to prevent client fingerprinting attacks.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
 First, we should make Tor instances start warning about any \
hidden&lt;/div&gt;&lt;div&gt;   service descriptors whose bodies, post-decryption, \
contain non-utf-8&lt;/div&gt;&lt;div&gt;   plaintext.  At the same time, we add a \
consensus parameter to&lt;/div&gt;&lt;div&gt;   indicate that hidden service \
descriptors with non-utf-8 \
plantexts&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;typo: \
plaintexts &lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;  \
 should be rejected entirely: "reject-encrypted-non-utf-8".  If \
that&lt;/div&gt;&lt;div&gt;   parameter is set to 1, then hidden service clients will \
not only&lt;/div&gt;&lt;div&gt;   warn, but reject the \
descriptors.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   Once the vast majority of clients \
are running versions that support&lt;/div&gt;&lt;div&gt;   the \
"reject-encrypted-non-utf-8" parameter, that parameter can be set&lt;/div&gt;&lt;div&gt;  \
 to 1.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;We also can't reject bridge \
descriptors at the authority level.&lt;/div&gt;&lt;div&gt;(Bridge clients download bridge \
descriptors directly from bridges.)&lt;/div&gt;&lt;div&gt;Do we need bridge clients to also use \
this consensus parameter?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204065337</emailId><senderName>Aruna Maurya</senderName><senderEmail>aruna.maurya12@gmail.com</senderEmail><timestampReceived>2017-12-04 06:53:37-0400</timestampReceived><subject>[tor-dev] Start contributing to Tor</subject><body>

[Attachment #2 (multipart/alternative)]


I am new to the community and would like to contribute and help along. I
did a complete read up on how the Tor browser works, but I would like to
delve in more and get acquainted with the code base, so that I understand
and learn a lot in the process.

I already cloned and built the Tor(core) and TorBrowser from source for
easy understanding and primarily as it would help me to reproduce bugs as I
work on them.

Any further guidance is appreciated.

Thankyou for spending the time to read this through.

-- 
Regards,
Aruna Maurya,
CSE,B.tech,
Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&lt;https://medium.com/@arunamaurya&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I am new to the community and would like to contribute and help along. \
I did a complete read up on how the Tor browser works, but I would like to delve in \
more and get acquainted with the code base, so that I understand and learn a lot in \
the process.    &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I already cloned and built the Tor(core) and \
TorBrowser from source for easy understanding and primarily as it would help me to \
reproduce bugs as I work on them.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any further guidance is \
appreciated.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thankyou for spending the time to read this \
through.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171205041929</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2017-12-05 04:19:29-0400</timestampReceived><subject>Re: [tor-dev] Rebooting work on proposal #247 (guard discovery)</subject><body>

[Attachment #2 (multipart/signed)]


George Kadianakis:
&gt; Hello Mike,
&gt; 
&gt; I'm finally getting out of the prop224/microdescriptor bug pile, and
&gt; getting more time to start working on guard stuff like prop247 again.
&gt; 
&gt; I'm planning to spend a few days next week to regain knowledge on
&gt; prop247. I'll check out the notes from the Wilmington hackfest, re-read
&gt; my old simulator's code, etc.

I was not involved in with Prop271, so I am not deeply familiar with it.
However, it has several things we do not need. In particular, the plan
for prop247 still is to treat consensus information as the official
notion of vanguard reachability, so there is no need to try to determine
censorship, firewall, or local network reachability information. If a
node is in the consensus, it stays in our vanguard set and does not get
replaced until it actually leaves the consensus. This is consistent with
how the consensus is currently used for interior hops, and mitigates
path bias attacks.

I have not thought hard about what to do about nodes that leave the
consensus while they are still in our vanguard sets and rejoin later. I
am thinking that the simplest situation is to just pick a new node to
replace them and not worry about it.

If it is dead-simple to use only the consensus uptime portions of
prop271 without the reachability code, I could be convinced of that. But
as it is, the rotation times do not need to be as long as guards, and
the implementation simplification here is attractive. Plus, nodes that
fall completely out of the consensus periodically like this are probably
bad choices anyway..

What do you think?
 
&gt; I know you have thought more about prop247 the past months, and it would
&gt; be great if you could brief me up on any updates that I should know
&gt; about. Specifically I'm wondering if you have any new insights on how
&gt; the proposed prop247 changes interact with Tor's guard algorithm (prop271)?
&gt; 
&gt; Also any other things I should know about from your work on the
&gt; performance simulator? Perhaps ideas about performance, topology or path
&gt; restrictions?

Yes. I have decided to simplify everything as much as possible. I am
going with a mesh topology for the prop247 performance tests (via
https://bugs.torproject.org/13837,  https://bugs.torproject.org/23101
and https://bugs.torproject.org/24487). That is the simplest option to
implement and test for performance, and intuitively seems to have
almost as good security properties as the bin version (unless your
security simulator tells us otherwise).

I am also aiming for these high-level design goals, most important
first:

0. All service-side circuits use 3 hops of vanguards.
1. Hidden services should avoid trivially disclosing their third
   vanguard to a non-network adversary (ie one that is not running nodes
   but that is watching either HSDESCS or connecting to the service).
   This means their paths look like this:
   S - G - L2 - L3 - HSDIR
   S - G - L2 - L3 - Intro
   S - G - L2 - L3 - M - Rend
2. Clients should avoid revealing their third vanguard hop to services
   and to nodes that have information about which service they are
   accessing. This means that their paths look like this:
   C - G - L2 - L3 - M - HSDIR
   C - G - L2 - L3 - M - Intro
   C - G - L2 - L3 - Rend
3. Clients use 3 hops of vanguards for all hidden service circuits.

If we do all of these, it will mean that we will have long path lengths
(8 hop rends), but it also means that it is easy to reason about
linkability and information disclosure. My thinking is that we should do
the performance tests with the safest option first (ie: all of these
goals), and see exactly how bad it is, and then make compromises if it
turns out to be much worse performance than status quo.

In the event of bad performance, I would alter property #3 before
messing with property #2, and alter #2 before property #1, but I could
be talked into a different strategy, or driven to one based on data.


In terms of pre-building and cannibalization
(https://bugs.torproject.org/23101), for vanguard-enabled clients, I am
going with the plan to create a special HS_GENERAL pre-built circuit
set. HS_GENERAL circuits will be four hops long (3 vanguards plus a
random middle), and will be used for all vanguard circuits except for
service-side INTRO circuits (since those are already long-lived and
pre-built, and don't need the extra middle). I have an implementation of
this and have tested it lightly -- it seems to work.

One additional wrinkle is that we will need to reverse our path
selection order, so that we do not leak information about earlier
vanguards to later hops in the path. This is
https://bugs.torproject.org/24487. For now, so I can have more of an
apples-to-apples comparison in terms of vanguard set sizes, I simply
allow the same vanguard to appear in multiple positions in the circuit,
if the prototype is enabled. I do hope to get #24487 done for 0.3.3,
though.


I have not written up the set of performance experiments I intend to run
yet, but at a high level I want to measure two things for a few
different L2 and L3 guard set sizes:

A. How does the average performance compare to existing onionperf data
   at https://metrics.torproject.org/torperf.html?
B. What is that variance over time in performance with a fixed entry
   guard, as the L2 and L3 guards rotate? Is the variance measurably
   different than what happens on onionperf?

#A here will tell us if our paths are too long and seriously impact
average performance, meaning we have to revisit goals #0-3.

#B will tell us how much a really bad L2 or L3 set can impact
performance, and how often that happens. I expect that as we increase L2
and L3 sizes, variance in performance will go down, until we hit
diminishing returns. The goal is to find that sweet spot for choosing L2
and L3 as small as possible for as little variance as possible.

It would be great if your security simulator can tell us which L2 and L3
values are worth considering, so I can gather more useful (and more
detailed) performance data with fewer experiments.


I think that is it for now. As far as implementation goes, I am doing my
best to keep
https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorV up
to date and stick with that timetable.

This means I want to merge all of the torrc options needed for the
performance tests into 0.3.3 (by mid January), so that hidden
service operators have the option of using the performance test
controller to get vanguard behavior if they want. My assumption here is
that we basically can all agree on the high level approach, and all
agree it is an improvement over status quo, but we will want the extra
time to actually make specific parameter choices and decide if we need
to or want to live with shorter paths for some scenarios..


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171130125549</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-11-30 12:55:49-0400</timestampReceived><subject>[tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

Filename: 286-hibernation-api.txt
Title: Controller APIs for hibernation access on mobile
Author: Nick Mathewson
Created: 30-November-2017
Status: Open


1. Introduction

   On mobile platforms, battery life is achieved by reducing
   needless network access and CPU access.  Tor currently provides
   few ways for controllers and operating systems to tune its
   behavior.

   This proposal describes controller APIs for better management of
   Tor's hibernation mechanisms, and extensions to those mechanisms,
   for better power management in mobile environments.

1.1. Background: hibernation and idling in Tor today

   We have an existing "hibernation" mechanism that we use to
   implement "bandwidth accounting" and "slow shutdown" mechanisms:
   When a Tor instance is close to its bandwidth limit: it stops
   accepting new connections or circuits, and only processes those
   it has, until the bandwidth limit is reached.  Once the bandwidth
   limit is reached, Tor closes all connections and circuits, and
   all non-controller listeners, until a new accounting limit
   begins.

   Tor handles the INT signal on relays similarly: it stops
   accepting new connections or circuits, and gives the existing
   ones a short interval in which to shut down.  Then Tor closes all
   connections and exits the process entirely.

   Tor's "idle" mechanism is related to hibernation, though its
   implementation is separate.  When a Tor clients has passed a
   certain amount of time without any user activity, it declares
   itself "idle" and stops performing certain background tasks, such
   as fetching directory information, or building circuits in
   anticipation of future needs.  (This is tied in the codebase to
   the "predicted ports" mechanism, but it doesn't have to be.)


1.2. Background: power-management signals on mobile platforms

   (I'm not a mobile developer, so I'm about to wildly oversimplify.
   Please let me know where I'm wrong.)

   Mobile platforms achieve long battery life by turning off the
   parts they don't need.  The most important parts to turn off are
   the antenna(s) and the screen; the CPU can be run in a slower
   mode.

   But it doesn't do much good turning things off when they're
   unused, if some background app is going to make sure that they're
   always in use!  So mobile platforms use signals of various kinds
   to tell applications "okay, shut up now".

   Some apps need to do online background activities periodically;
   to help this out, mobile platforms give them a signal "Hey, now
   is a good time if you want to do that" and "stop now!"


1.3. Mostly out-of-scope: limiting CPU wakeups when idle.

   The changes described here will be of limited use if we do not
   also alter Tor so that, when it's idle, the CPU is pretty quiet.
   That isn't the case right now: we have large numbers of callbacks
   that happen periodically (every second, every minute, etc)
   whether they need to or not.  We're hoping to limit those, but
   that's not what this proposal is about.


2. Improvements to the hibernation model

   To present a consistent interface that applications and
   controllers can use to manage power consumption, we make these
   enhancements to our hibernation model.

   First, we add three new hibernation states: "IDLE",
   "IDLE_UPDATING", "SLEEP", and "SLEEP_UPDATING".

   "IDLE" is like the current "idle" or "no predicted ports" state:
   Tor doesn't launch circuits or start any directory activity, but
   its listeners are still open.  Tor clients can enter the IDLE
   state on their own when they are LIVE, but haven't gotten any
   client activity for a while.  Existing connections and circuits
   are not closed. If the Tor instance receives any new connections,
   it becomes LIVE.

   "IDLE_UPDATING" is like IDLE, except that Tor should check for
   directory updates as appropriate.  If there are any, it should
   fetch directory information, and then become IDLE again.

   "SLEEPING" is like the current "dormant state we use for
   bandwidth exhaustion, but it is controller-initiated: it begins
   when Tor is told to enter it, and ends when Tor is told to leave
   it.  Existing connections and circuits are closed; listeners are
   closed too.

   "SLEEP_UPDATING" is like SLEEP, except that Tor should check for
   directory updates as appropriate.  If there are any, it should
   fetch directory information, and then SLEEP again.


2.1. Relay operation

   Relays and bridges should not automatically become IDLE on their
   own.


2.2. Onion service operation

   When a Tor instance that is running an onion service is IDLE, it
   does the minimum to try to remain responsive on the onion
   service: It keeps its introduction points open if it can. Once a
   day, it fetches new directory information and opens new
   introduction points.


3. Controller hibernation API

3.1. Examining the current hibernation state

   We define a new "GETINFO status/hibernation" to inspect the
   current hibernation state.  Possible values are:
     - "live"
     - "idle:control"
     - "idle:no-activity"
     - "sleep:control"
     - "sleep:accounting"
     - "idle-update:control"
     - "sleep-update:control"
     - "shutdown:exiting"
     - "shutdown:accounting"
     - "shutdown:control"

   The first part of each value indicates Tor's current state:
      "live" -- completely awake
      "idle" -- waiting to see if anything happens
      "idle-update" -- waiting to see if anything happens; probing
         for directory information
      "sleep" -- completely unresponsive
      "shutdown" -- unresponsive to new requests; still processing
         existing requests.

   The second part of each value indicates the reason that Tor
   entered this state:
      "control" -- a controller told us to do this.
      "no-activity" -- Tor became idle on its own due to not
         noticing any requests.
      "accounting" -- the bandwidth system told us to enter this
         state.
      "exiting" -- Tor is in this state because it's getting ready
         to exit.

   We add a STATUS_GENERAL hibernation event as follows:

      HIBERNATION
      "STATUS=" (one of the status pairs above.)

      Indicates that Tor's hibernation status has changed.

   Note: Controllers MUST accept status values here that they don't
   recognize.

   The "GETINFO accounting/hibernating" value and the "STATUS_SERVER
   HIBERANATION_STATUS" event keep their old meaning.

3.2. Changing the hibernation state

   We add the following new possible values to the SIGNAL controller
   command:
      "SLEEP" -- enter the sleep state, after an appropriate
         shutdown interval.

      "IDLE" -- enter the idle state

      "SLEEPWALK" -- If in sleep or idle, start probing for
         directory information in the sleep-update or idle-update
         state respectively.  Remain in that state until we've
         probed for directory information, or until we're told to
         IDLE or SLEEP again, or (if we're idle) until we get client
         activity. Has no effect if not in sleep or idle.

      "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
         shutdown:sleep state, enter the live state.  Has no effect
         in any other state.

3.3. New configuration parameters

   StartIdle -- Boolean.  If set to 1, Tor begins in IDLE mode.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171210193300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-10 19:33:00-0400</timestampReceived><subject>[tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

since a single operator now controls more than 10% of the tor network's
exit capacity I wanted to bring this up here (again [1]).

What do you think about capping single operators (family) to 10% exit
capacity and 5% for guard operators?

regards,
nusenu

[1] https://lists.torproject.org/pipermail/tor-dev/2016-March/010653.html

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211224105</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-12-11 22:41:05-0400</timestampReceived><subject>[tor-dev] Proposal: Expose raw bwauth votes</subject><body>

I'm not sure, but I think
https://trac.torproject.org/projects/tor/ticket/21377 needed a
proposal so I tried to write one up.

-tom

["xxx-expose-bwauth_votes.txt" (text/plain)]

Filename: xxx-expose-bwauth_votes.txt
Title: Have Directory Authorities expose raw bwauth vote documents
Author: Tom Ritter
Created: 11-December-2017
Status: Open

1. Introduction

Bandwidth Authorities (bwauths) perform scanning of the Tor Network
and calculate observed speeds for each relay. They produce a 'bwauth
vote file' that is given to a Directory Authority. The Directory
Authority uses the speed value from this file in its vote file
denoting its view of the speed of the relay.

After collecting all of the votes from other Authorities, a consensus
is calculated, and the consensus's view of a relay's speed is
determined by choosing the low-median value [or is it high-median?]
of all the authorities' values for each relay.

Only a single metric from the bwauth vote file is exposed by a 
Directory Authority's vote, however the original file contains
considerably more diagnostic information about how the bwauth arrives
at that measurement for that relay.

2. Motivation

The bwauth vote file contains more information that is exposed in the
overall vote file. This information is useful to debug anomalies in
relays' utilization and suspected bugs in the (decrepit) bwauth code.

Currently, all bwauths expose the raw vote file through various (non-
standard) means, and that file is downloaded (hourly) by a single person
(as long as his home internet connection and home server is working)
and archived (with a small amount of robustness.)  

It would be preferable to have this exposed in a standard manner.
Doing so would no longer require bwauths to run HTTP servers to expose
the file, no longer require them to take additional manual steps to
provide it, and would enable public consumption by any interested
parties.  We hope that Collector will begin archiving the files.

3. Specification

An authority SHOULD publish the bwauth vote used to calculate its
current vote. It should make the bwauth vote file available at the
same time as its normal vote file. It should make the file available
at
  http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z

It MUST NOT attempt to send its bwauth vote file in a HTTP POST to
other authorities and it SHOULD NOT make bwauth vote files from other
authorities available.

4. Security Implications

The raw bwauth vote file does not [really: is not believed to] expose
any sensitive information.  All authorities currently make this
document public already, an example is at
  https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile

5. Compatibility

Exposing the document presents no compatibility concerns.

The compatibility concern is with applications that want to consume
the document. The bwauth vote file has no specification, and has been
extended in ad-hoc ways. Applications that merely wish to archive the
document (e.g. Collector) won't have a problems. Applications that
want to parse it may encounter errors if a new (unexpected) field is
added, or assumptions are made about the text encoding or formatting
of the document. 
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171130214743</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-11-30 21:47:43-0400</timestampReceived><subject>[tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I have been working on this proposal for some time and Nick blessed me to
send it as Proposal 287.

Here is.

Filename: 287-reduce-lifetime.txt
Title: Reduce circuit lifetime without overloading the network
Author: Fernando Fernandez Mancera
Created: 30-Nov-2017
Status: Open

Motivation:

Currently Tor users are reusing a given circuit for ten minutes (by default)
after it's first used. This time is too long because a malicious Exit relay can
trace a user's pseudonymous profile, especially if connections from multiple
protocols are put on the same circuit.

This time it is established on MaxCircuitDirtiness parameter and by default its
value is ten minutes.

I have been thinking in a way to fix this. The first idea that came to my mind
was to use StreamIsolationByHost and StreamIsolationByPort on it, but I wasn't
able to sort it out.

One day, I thought "Why is time so important?" and later on I realized that
maybe focusing on the amount of bytes running through the circuit could end up
being a better approach on this problem.

Design:

I propose two options to reduce this problem, both based on taking into account
the amount of bytes running through a circuit.

MaxCircuitSizeDirtiness (temporal parameter name) will take an integer field
that is contained on an interval and represents the maximum amount of bytes
that can be written/read (we need to discuss about the use of one for both) by
the circuit. If the circuit exceeds that amount, new streams won't use this
circuit anymore.

MaxCircuitSizeDirtinessByPort (temporal parameter name) will take an array of
integers that are contained on an interval and represents the maximum amount of
bytes that can be written/read (we need to discuss about the use of one for
both) by the circuit per port (StreamIsolationByPort). This array is parallel
to the array of ports from StreamIsolationByPort. If the circuit exceeds that
amount, new streams won't use this circuit anymore.

Regarding default values it would be useful to set up one a bit lower than the
average amount of bytes per circuit. On MaxCircuitSizeDirtinessByPort after
discuss it we shouldn't set up a default value because someone can identify the
port used. About MaxCircuitDirtiness, if the others are set up by default it
could be bigger, like thirty minutes, so if the user doesn't send/receive a
significant amount of data the circuit will be changed anyway.

Security Implications:

It is believed that the proposed changes will improve the anonymity for end
users. The end user won't reuse a given circuit if they have sent a
considerable amount of bytes, thus making more difficult for malicious Exit
relays to be able to trace a user's pseudonymous profile.

Obviously this is a probability, of course it's possible that sensitive data
will leak in a little amount of data but it's more even possible that sensitive
data will leak in a large amount.

Specification:

In order to implement this feature we will need to add some new
functionalities. We need to parse MaxCircuitSizeDirtiness and
MaxCircuitSizeDirtinessByPort from the torrc config file. We need to create a
function or improve one to check the amount of bytes that are running through
the circuit and if this amount is higher than the established value, consider
the circuit dirty.

Compatibility:

The proposed changes should not create any compatibility issues. New Tor
clients will be able to take advantage of this without any modification to the
network.

Implementation:

It is proposed that MaxCircuitSizeDirtiness will be enabled by default and also
increase MaxCircuitDirtiness to thirty minutes.

It is proposed that MaxCircuitSizeDirtinessByPort won't be enabled by default
for port 22, 53, and port 80 as StreamIsolationByPort.

About TorBrowser or any other Tor application that is able to manage circuits
by its own because of KeepAliveIsolateSOCKSAuth option being active by default
shouldn't be affected by this new feature. As the same form that it currently
ignores MaxCircuitDirtiness parameter.

Performance and scalability notes:

The proposed changes will reduce Tor network stress as users who do not exceed
the set amount will reduce circuit generation by three (if default
MaxCircuitDirtinesss value is thirty minutes).

I want to work on demonstrating that by a research but first it's nice
to get the
idea accepted.

References:

Tor project research ideas [https://research.torproject.org/ideas.html]

Enhancing Tor's Performance using Real-time Traffic Classification
[https://www.cypherpunks.ca/~iang/pubs/difftor-ccs.pdf] (It's not exactly about
that, but they talk about circuit lifetime and the ten minutes problem a few
times. Also it's an interesting paper.)

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have been working on this proposal for \
some time and Nick blessed me to send it as Proposal \
287.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;Filename: \
                287-reduce-lifetime.txt
Title: Reduce circuit lifetime without overloading the network
Author: Fernando Fernandez Mancera
Created: 30-Nov-2017
Status: Open
&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;Motivation:

Currently Tor users are reusing a given circuit for ten minutes (by default)
after it's first used. This time is too long because a malicious Exit relay can
trace a user's pseudonymous profile, especially if connections from multiple
protocols are put on the same circuit.

This time it is established on MaxCircuitDirtiness parameter and by default its
value is ten minutes.

I have been thinking in a way to fix this. The first idea that came to my mind
was to use StreamIsolationByHost and StreamIsolationByPort on it, but I wasn't
able to sort it out.

One day, I thought "Why is time so important?" and later on I realized that
maybe focusing on the amount of bytes running through the circuit could end up
being a better approach on this problem.

Design:

I propose two options to reduce this problem, both based on taking into account
the amount of bytes running through a circuit.

MaxCircuitSizeDirtiness (temporal parameter name) will take an integer field
that is contained on an interval and represents the maximum amount of bytes
that can be written/read (we need to discuss about the use of one for both) by
the circuit. If the circuit exceeds that amount, new streams won't use this
circuit anymore.

MaxCircuitSizeDirtinessByPort (temporal parameter name) will take an array of
integers that are contained on an interval and represents the maximum amount of
bytes that can be written/read (we need to discuss about the use of one for
both) by the circuit per port (StreamIsolationByPort). This array is parallel
to the array of ports from StreamIsolationByPort. If the circuit exceeds that
amount, new streams won't use this circuit anymore.

Regarding default values it would be useful to set up one a bit lower than the
average amount of bytes per circuit. On MaxCircuitSizeDirtinessByPort after
discuss it we shouldn't set up a default value because someone can identify the
port used. About MaxCircuitDirtiness, if the others are set up by default it
could be bigger, like thirty minutes, so if the user doesn't send/receive a
significant amount of data the circuit will be changed anyway.

Security Implications:

It is believed that the proposed changes will improve the anonymity for end
users. The end user won't reuse a given circuit if they have sent a
considerable amount of bytes, thus making more difficult for malicious Exit
relays to be able to trace a user's pseudonymous profile.

Obviously this is a probability, of course it's possible that sensitive data
will leak in a little amount of data but it's more even possible that sensitive
data will leak in a large amount.

Specification:

In order to implement this feature we will need to add some new
functionalities. We need to parse MaxCircuitSizeDirtiness and
MaxCircuitSizeDirtinessByPort from the torrc config file. We need to create a
function or improve one to check the amount of bytes that are running through
the circuit and if this amount is higher than the established value, consider
the circuit dirty.

Compatibility:

The proposed changes should not create any compatibility issues. New Tor
clients will be able to take advantage of this without any modification to the
network.

Implementation:

It is proposed that MaxCircuitSizeDirtiness will be enabled by default and also
increase MaxCircuitDirtiness to thirty minutes. 

It is proposed that MaxCircuitSizeDirtinessByPort won't be enabled by default
for port 22, 53, and port 80 as StreamIsolationByPort.

About TorBrowser or any other Tor application that is able to manage circuits
by its own because of KeepAliveIsolateSOCKSAuth option being active by default
shouldn't be affected by this new feature. As the same form that it currently
ignores MaxCircuitDirtiness parameter.

Performance and scalability notes: 

The proposed changes will reduce Tor network stress as users who do not exceed
the set amount will reduce circuit generation by three (if default
MaxCircuitDirtinesss value is thirty minutes).

I want to work on demonstrating that by a research but first it's nice to get the
idea accepted.

References:

Tor project research ideas [&lt;a \
href="https://research.torproject.org/ideas.html"&gt;https://research.torproject.org/ideas.html&lt;/a&gt;]


Enhancing Tor's Performance using Real-time Traffic Classification
[&lt;a href="https://www.cypherpunks.ca/~iang/pubs/difftor-ccs.pdf"&gt;https://www.cypherpunks.ca/~iang/pubs/difftor-ccs.pdf&lt;/a&gt;] \
(It's not exactly about that, but they talk about circuit lifetime and the ten \
minutes problem a few times. Also it's an interesting paper.)&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171209002904</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-09 00:29:04-0400</timestampReceived><subject>[tor-dev] Discussion Meeting for Prop#249 "Large CREATE cells"</subject><body>

[Attachment #2 (multipart/signed)]


Hello all,

What: A proposal discussion meeting for prop#249 "Allow CREATE cells with
      &gt;505 bytes of handshake data". [0]

Who:  This proposal is likely of interest to those hoping to integrate newer,
      non-ECC-based, circuit-layer handshakes into the Tor protocol.

When: Next week, on Monday or Tuesday (or Wednesday, for some timezones).
      If you'd like to attend, please vote on a time here:
      https://doodle.com/poll/v924cbt2at3rzvc9

Where: irc.oftc.net #tor-meeting


[0]: https://gitweb.torproject.org/torspec.git/tree/proposals/249-large-create-cells.txt


Meeting Preparation Materials
=============================

The following is meant for attendees to refresh before the meeting.  Please
feel free to respond with further summary and/or open questions/concerns.

Proposal Summary
~~~~~~~~~~~~~~~~
The proposal outlines two new cell types, CREATE2V and CREATED2V, which are
variable-length and (like their CREATE2/CREATED2 counterparts) are sent
encapsulated in EXTEND2 cells.  Due to their variable-length, however, if a
CREATE(D)2V cell's HDATA is larger than the standard allotment of 505 bytes,
these new cells are fragmented across multiple EXTEND2 cells.

Open Questions/Concerns
~~~~~~~~~~~~~~~~~~~~~~~

1. Since CREATE2V cells are used for handshakes, and several newer,
   post-quantum primitives have asymmetric payloads for the client versus
   server directions, should we require that the CREATE(D)2V padding be used
   to equalise the number of bytes sent in each direction?

2. Should we randomise the bytes in the padding?  (Currently, as proposed,
   we require all-zero padding.)

3. Should we do anything more future-proofed w.r.t. the future possibility
   of using an alternate (non-stateful, e.g. not TCP) transport?
   (Currently, the proposal relies heavily upon the transport-layer to
   provide delivery guarantee and, perhaps more important, ordering.)

4. Shoule we, for hybrid handshakes (handshakes which use multiple separate
   primitives to derive shared secrets, e.g. ECDH+RLWE or ECDH+SIDH, by
   conducting each handshake separately and composing their respective
   resulting shared secrets), design some mechanism where, if a party only
   supports say the ECDH portion of the hybrid handshake and not the RLWE
   part, then they proceed with the portion they understand?  For example, a
   client sends their portion of a ECDH+RLWE handshake to a relay which only
   understands ECDH, so the relay responds with only ECDH and they continue.
   This is mostly a difference in subprotocol versioning for handshakes,
   that is, an ECDH+RLWE handshake, rather than being "handshake type 5" or
   whatever, would be "handshake type 2 AND/OR handshake type 5".

5. As written, the proposal doesn't specify a maximum (or minimum) size of
   handshake data.  However, the max is somewhat limited by the number of
   allowed RELAY_EARLY cells; maximum handshake data is then limited to
   462+(7*492)=3906 bytes.


Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214014602</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-14 01:46:02-0400</timestampReceived><subject>[tor-dev] Proposal 249 updated</subject><body>

[Attachment #2 (multipart/signed)]


Hi all!

I've revised prop#249 (I think) according to the discussion from [0,1,2,3].
The revised proposal is in torspec, [4] but for convenience it's included
inline below.  Please review and hopefully catch any dumb mistakes I made.

It looks like implementing this is going to be a bit of a chore, so I'm
guessing it would be better to target 0.3.4.x than 0.3.3.x?

[0]: https://lists.torproject.org/pipermail/tor-dev/2017-December/012665.html
[1]: https://lists.torproject.org/pipermail/tor-dev/2017-December/012688.html
[2]: http://meetbot.debian.net/tor-meeting/2017/tor-meeting.2017-12-13-22.03.html
[3]: https://pad.riseup.net/p/r.1c4c37baa9251fdfca5a1e1bd5c01f45
[4]: https://gitweb.torproject.org/torspec.git/tree/proposals/249-large-create-cells.txt?id=5fe54569

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt


Filename: 249-large-create-cells.txt
Title: Allow CREATE cells with &gt;505 bytes of handshake data
Authors: Nick Mathewson, Isis Lovecruft
Created: 23 July 15
Updated: 13 December 2017
Status: Open

1. Summary

   There have been multiple proposals over the last year or so for
   adding post-quantum cryptography to Tor's circuit extension
   handshakes.  (See for example https://eprint.iacr.org/2015/008 or
   https://eprint.iacr.org/2015/287 .) These proposals share the property
   that the request and reply for a handshake message do not fit in a
   single RELAY cell.

   In this proposal I describe a new CREATE2V cell for handshakes that
   don't fit in a 505-byte CREATE2 cell's HDATA section, and a means for
   fragmenting these CREATE2V cells across multiple EXTEND2 cells.  I
   also discuss replies, migration, and DoS-mitigation strategies.

2. CREATE2V and CREATED2V

   First, we add two variable-width cell types, CREATE2V and CREATED2V.

   These cell formats are nearly the same as CREATE2 and CREATED2.  (Here
   specified using Trunnel.)

     struct create2v_cell_body {
        /* Handshake type */
        u16 htype;
        /* Length of handshake data */
        u16 hlen;
        /* Handshake data */
        u8 hdata[hlen];
        /* Padding data to be ignored */
        u8 ignored[];
     };

     struct created2v_cell_body {
        /* Handshake reply length */
        u16 hlen;
        /* Handshake reply data */
        u8 hdata[hlen];
        /* Padding data to be ignored */
        u8 ignored[];
     };

   The 'ignored' fields, which extend to the end of the variable-length
   cells, are reserved.  Initiators MAY set them to any length, and MUST
   fill them with either zero-valued bytes or pseudo-random bytes.
   Responders MUST ignore them, regardless of what they contain.  When a
   CREATE2V cell is generated in response to a set of EXTEND2 cells, these
   fields are set by the relay that receives the EXTEND2 cells.

   (The purpose of the 'ignored' fields here is future-proofing and
   padding.)

   Protocols MAY wish to pad to a certain multiple of bytes, or wish to pad
   the initiator/receiver payloads to be of equal length.  This is
   encouraged but NOT REQUIRED.

3. Fragmented EXTEND2 cells

   Without changing the current EXTEND2 cell format, we change its
   semantics:

   If the 'HLEN' field in an EXTEND2 cell describes a handshake data
   section that would be too long to fit in the EXTEND2 cell's payload,
   the handshake data of the EXTEND2 cell is to be continued in one or
   more subsequent EXTEND2 cells.  These subsequent cells MUST have zero
   link specifiers, handshake type 0xFFFF, and handshake data length
   field set to zero.

   Similarly, if the 'HLEN' field in an EXTENDED2 cell would be too long
   to fit into the EXTENDED2 cell's payload, the handshake reply data of
   the EXTENDED2 cell is to be continued in one or more subsequent
   EXTENDED2 cells.  These subsequent cells must have the handshake data
   length field set to zero.

   These cells must be sent on the circuit with no intervening cells.
   If any intervening cells are received, the receiver SHOULD destroy
   the circuit.

   Protocols which make use of CREATE(D)2V cells SHOULD send an equal number
   of cells in either direction, to avoid trivially disclosing information
   about the direction of the circuit: for example a relay might use the
   fact that it saw five EXTEND2 cells in one direction and three in the
   other to easily determine whether it is the middle relay on the onion
   service-side or the middle relay on the client-side of a rendezvous
   circuit.

4. Interacting with RELAY_EARLY cells

   The first EXTEND2 cell in a batch must arrive in a RELAY_EARLY cell.
   The others MAY arrive in RELAY_EARLY cells.  For many handshakes, for
   the possible lengths of many types of circuits, sending all EXTEND2 cells
   inside RELAY_EARLY cells will not be possible.  For example, for a
   fragmented EXTEND2 cell with parts A B C D E, A is the only fragment that
   MUST be sent within a RELAY_EARLY.  For parts B C D E, these are merely
   sent as EXTEND2{CREATE2V} cells.

   Note that this change leaks the size of the handshake being used to
   intermediate relays.  We should analyze this and see whether it matters.
   Clients and relays MAY send RELAY_DROP cells during circuit
   construction in order to hide the true size of their handshakes
   (but they can't send these drop cells inside a train of EXTEND2 or
   EXTENDED2 cells for a given handshake).

5. Example

   So for example, if we are a client, and we need to send a 2000-byte
   handshake to extend a circuit from relay X to relay Y, we might send
   cells as follows:

      EXTEND2 {
        nspec = 2;
          lstype = [0x01 || 0x02];          (IPv4 or IPv6 node address)
          lslen =  [0x04 || 0x16];
          lspec =  { node address for Y, taking 8 bytes or 16 bytes};
          lstype = 0x03;                    (An ed25519 node identity)
          lslen = 32;
          lspen = { ed25519 node ID for Y, taking 32 bytes }
        htype = {whatever the handshake type is.}
        hlen = 2000
        hdata = { the first 462 bytes of the handshake }
      }
      EXTEND2 {
        nspec = 0;
        htype = 0xffff;
        hlen = 0;
        hdata = { the next 492 bytes of the handshake }
      }
      EXTEND2 {
        nspec = 0;
        htype = 0xffff;
        hlen = 0;
        hdata = { the next 492 bytes of the handshake }
      }
      EXTEND2 {
        nspec = 0;
        htype = 0xffff;
        hlen = 0;
        hdata = { the next 492 bytes of the handshake }
      }
      EXTEND2 {
        nspec = 0;
        htype = 0xffff;
        hlen = 0;
        hdata = { the final 62 bytes of the handshake }
      }

   Upon receiving this last cell, the relay X would send a create2v cell
   to Y, containing the entire handshake.

6. Migration

   We can and should implement the EXTEND2 fragmentation feature before
   we implement anything that uses it.  If we can get it widely deployed
   before it's needed, we can use the new handshake types whenever both
   of the involved relays support this proposal.

   Clients MUST NOT send fragmented EXTEND2 cells to relays that don't
   support them, since this would cause them to close the circuit.

   Relays MAY send CREATE2V and CREATED2V cells to relays that don't
   support them, since unrecognized cell types are ignored.

6.1. New Subprotocols and Subprotocol Versions

   This proposal introduces, following prop#264, the following new
   subprotocol numbers and their uses.

6.1.1. Relay Subprotocol

     "Relay 3" -- The OP supports all of "Relay 2", plus support for CREATE2V
       and CREATED2V cells and their above specification for link-layer
       authentication specifiers.

6.1.2. Link Subprotocol

     "Link 5": The OP supports all of "Link 1-4", plus support for the new
       EXTEND2 semantics.  Namely, it understands that an EXTEND2 cell whose
       "hlen" field is greater than 505 will be followed by further "hdata"
       in fragmented EXTEND2 cells which MUST follow.  It also understands
       that the following combination of EXTEND2 payload specifiers
       indicates that the cell is a continuation of the earlier payload
       portions:

           nspec = 0;
           htype = 0xffff;
           hlen = 0;

6.1.3. Handshake Subprotocol

   Additionally, we introduce a new subprotocol, "Handshake" and the
   following number assignments for previously occuring instances:

     "Handshake 1" -- The OP supports the TAP handshake.

     "Handshake 2" -- The OP supports the ntor handshake.

   We also reserve the following assignments for future use:

     "Handshake 3" -- The OP supports the "hybrid+null" ntor-like handshake
       from prop#269.

     "Handshake 4" -- The OP supports a(n as yet unspecified) post-quantum
       secure hybrid handshake, that is, the "hybrid+null" handshake from
       "Handshake 3", except with "null" part replaced with another (as yet
       unspecified) protocol to be composed with the ntor-like ECDH-based
       handshake.

   Further handshakes MUST be specified with "Handshake" subprotocol
   numbers, and MUST NOT be specified with "Relay" subprotocol numbers.  The
   "Relay" subprotocol SHALL be used in the future to denote changes to
   handshake protocol handling of CREATE* and EXTEND* cells, i.e. CREATE,
   CREATED, CREATE_FAST, CREATED_FAST, CREATE2, CREATED2, CREATE2V,
   CREATED2V, EXTEND, EXTENDED, EXTEND2, and EXTENDED2.

   Thus, "Handshake 1" is taken to be synonymous with "Relay 1", and
   likewise "Handshake 2" is with "Relay 2".

6.2. Subprotocol Recommendations

   After the subprotocol additions above, we change to recommending the
   following in the consensus:

      recommended-client-protocols […] Link=5 Relay=3 Handshake=2
      recommended-relay-protocols  […] Link=5 Relay=3 Handshake=2
      required-client-protocols    […] Link=4-5 Relay=2-3 Handshake=1-2
      required-relay-protocols     […] Link=3-5 Relay=1-3 Handshake=1-2

6.2. New Consensus Parameters

   We introduce the following new consensus parameters:

     Create2VMaximumData SP int
        The maximum amount of "hlen" data, in bytes, which may carried in
        either direction within a set of CREATE(D)2V cells.  (default: 10240)

7. Resource management issues

   This feature requires relays and clients to buffer EXTEND2 cell
   bodies for incoming cells until the entire CREATE2V/CREATED2V body
   has arrived.  To avoid memory-related denial-of-service attacks,
   the buffers allocated for this data need to be counted against the
   total data usage of the circuit.

   Further, circuits which receive and buffer CREATE(D)2V cells MUST store
   the time the first buffer chunk was allocated, and use it to inform the
   OOM manager w.r.t. the amount of data used and its staleness.


Appendix A. A rejected idea for migration

   In section 5 above, I gave up on the idea of allowing relay A to
   extend to relay B with a large CREATE cell when relay A does not
   support this proposal.

   There are other ways to do this, but they are impressively kludgey.
   For example, we could have a fake CREATE cell for new handshake types
   that always elicits a "yes, keep going!" CREATED cell.  Then the
   client could send the rest of the handshake and receive the rest of
   the CREATED cell as RELAY cells inside the circuit.

   This design would add an extra round-trip to circuit extension
   whenever it was used, however, and would violate a number of Tor's
   assumptions about circuits (e.g., by having half-created circuits,
   where authentication hasn't actually been performed).  So I'm
   guessing we shouldn't do that.


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211225443</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-11 22:54:43-0400</timestampReceived><subject>[tor-dev] IPv6 and v3 onion services</subject><body>

[Attachment #2 (multipart/alternative)]


Hi David (and others interested in IPv6),

We want to add better IPv6 support to Tor relays, clients, and v3 onion services.

But if we do IPv6 v3 onion services first, the hop before intro and rend points
will know that the circuit is a v3 onion service circuit, because its EXTEND2
cells will have an IPv6 address.

So I suggest that we implement IPv6 support in this order:
IPv6 single onion services (at any time, only uses direct IPv6 CREATE)
IPv6 relay extends
IPv6 relay reachability (provides cover traffic for IPv6 client extends)
IPv6 client extends for exit circuits
IPv6 client extends for multi-hop onion service circuits
I've added this to an "Overview" section in: 
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features

I also like the idea of testing and deploying our IPv6 code on relays first.
It's less risky than experimenting on clients or onion services.
And our relay operators give us some excellent bug reports.

And we can re-use some of the common code from the relay implementation
in the client and onion service implementations. (For example, we'll write
code that handles link specifiers.)

Also, if we get IPv6 relay reachability checks working, that makes it easier
to automatically configure IPv6 on relays. More IPv6 relays will make the
anonymity set larger for IPv6 clients.

What do you think?

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi David (and others interested in \
IPv6),&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We want to add better IPv6 support to Tor relays, clients, \
and v3 onion services.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But if we do IPv6 v3 onion services \
first, the hop before intro and rend points&lt;/div&gt;&lt;div&gt;will know that the circuit is a \
v3 onion service circuit, because its EXTEND2&lt;/div&gt;&lt;div&gt;cells will have an IPv6 \
address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So I suggest that we implement IPv6 support in this \
order:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;span class="searchword0"&gt;IPv6&lt;/span&gt; single onion services (at any time, \
only uses direct IPv6 CREATE)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;span class="searchword0"&gt;IPv6&lt;/span&gt; relay \
extends&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="searchword0"&gt;IPv6&lt;/span&gt; relay reachability (provides cover traffic for \
IPv6 client extends)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;span class="searchword0"&gt;IPv6&lt;/span&gt; client extends for exit \
circuits&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="searchword0"&gt;IPv6&lt;/span&gt; client extends for multi-hop onion service \
circuits&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;I've added this to an "Overview" section \
in: &lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features"&gt;htt \
ps://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
also like the idea of testing and deploying our IPv6 code on relays \
first.&lt;/div&gt;&lt;div&gt;It's less risky than experimenting on clients or onion \
services.&lt;/div&gt;&lt;div&gt;And our relay operators give us some excellent bug \
reports.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And we can re-use some of the common code from the \
relay implementation&lt;/div&gt;&lt;div&gt;in the client and onion service implementations. (For \
example, we'll write&lt;/div&gt;&lt;div&gt;code that handles link \
specifiers.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Also, if we get IPv6 relay reachability checks working, that makes it \
easier&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;to \
automatically configure IPv6 on relays. More IPv6 relays will make&lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt; the&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;anonymity set larger for IPv6 \
clients.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What do you \
think?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171201202619</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-12-01 20:26:19-0400</timestampReceived><subject>[tor-dev] Proposal 288: Privacy-Preserving Statistics with Privcount in Tor (Shamir version)</subject><body>

Filename: 288-privcount-with-shamir.txt Title: Privacy-Preserving Statistics
with Privcount in Tor (Shamir version) Author: Nick Mathewson, Tim
Wilson-Brown, Aaron Johnson Created: 1-Dec-2017 Supercedes: 280 Status: Draft

0. Acknowledgments

  Tariq Elahi, George Danezis, and Ian Goldberg designed and implemented the
  PrivEx blinding scheme. Rob Jansen and Aaron Johnson extended PrivEx's
  differential privacy guarantees to multiple counters in PrivCount:

  https://github.com/privcount/privcount/blob/master/README.markdown#research-background

  Rob Jansen and Tim Wilson-Brown wrote the majority of the experimental
  PrivCount code, based on the PrivEx secret-sharing variant. This
  implementation includes contributions from the PrivEx authors, and others:

  https://github.com/privcount/privcount/blob/master/CONTRIBUTORS.markdown

  This research was supported in part by NSF grants CNS-1111539, CNS-1314637,
  CNS-1526306, CNS-1619454, and CNS-1640548.

  The use of a Shamir secret-sharing-based approach is due to a suggestion by
  Aaron Johnson (iirc); Carolin Zöbelein did some helpful analysis here.

  Aaron Johnson and Tim Wilson-Brown made improvements to the draft proposal.

1. Introduction and scope

  PrivCount is a privacy-preserving way to collect aggregate statistics about
  the Tor network without exposing the statistics from any single Tor relay.

  This document describes the behavior of the in-Tor portion of the PrivCount
  system.  It DOES NOT describe the counter configurations, or any other
  parts of the system. (These will be covered in separate proposals.)

2. PrivCount overview

  Here follows an oversimplified summary of PrivCount, with enough
  information to explain the Tor side of things.  The actual operation of the
  non-Tor components is trickier than described below.

  In PrivCount, a Data Collector (DC, in this case a Tor relay) shares
  numeric data with N different Tally Reporters (TRs). (A Tally Reporter
  performs the summing and unblinding roles of the Tally Server and Share
  Keeper from experimental PrivCount.)

  All N Tally Reporters together can reconstruct the original data, but no
  (N-1)-sized subset of the Tally Reporters can learn anything about the
  data.

  (In reality, the Tally Reporters don't reconstruct the original data at
  all! Instead, they will reconstruct a _sum_ of the original data across all
  participating relays.)

  In brief, the system works as follow:

  To share data, for each counter value V to be shared, the Data Collector
  first adds Gaussian noise to V in order to produce V', uses (K,N) Shamir
  secret-sharing to generate N shares of V' (K&lt;=N, K being the reconstruction
  threshold), encrypts each share to a different Tally Reporter, and sends
  each encrypted share to the Tally Reporter it is encrypted for.

  The Tally Reporters then agree on the set S of Data Collectors that sent
  data to all of them, and each Tally Reporter forms a share of the aggregate
  value by decrypting the shares it received from the Data Collectors in S
  and adding them together. The Tally Reporters then, collectively, perform
  secret reconstruction, thereby learning the sum of all the different values
  V'.

  The use of Shamir secret sharing lets us survive up to N-K crashing TRs.
  Waiting until the end to agree on a set S of surviving relays lets us
  survive an arbitrary number of crashing DCs. In order to prevent bogus data
  from corrupting the tally, the Tally Reporters can perform the aggregation
  step multiple times, each time proceeding with a different subset of S and
  taking the median of the resulting values.

  Relay subsets should be chosen at random to avoid relays manipulating their
  subset membership(s). If an shared random value is required, all relays
  must submit their results, and then the next revealed shared random value
  can be used to select relay subsets. (Tor's shared random value can be
  calculated as soon as all commits have been revealed. So all relay results
  must be received *before* any votes are cast in the reveal phase for that
  shared random value.)

  Below we describe the algorithm in more detail, and describe the data
  format to use.

3. The algorithm

  All values below are B-bit integers modulo some prime P; we suggest B=62
  and P = 2**62 - 2**30 - 1 (hex 0x3fffffffbfffffff).  The size of this field
  is an upper limit on the largest sum we can calculate; it is not a security
  parameter.

  There are N Tally Reporters: every participating relay must agree on which
  N exist, and on their current public keys.  We suggest listing them in the
  consensus networkstatus document.  All parties must also agree on some
  ordering the Tally Reporters.  Similarly, all parties must also agree on
  some value K&lt;=N.

  There are a number of well-known "counters", identified known by ASCII
  identifiers.  Each counter is a value that the participating relays will
  know how to count.  Let C be the number of counters.

3.1. Data Collector (DC) side

  At the start of each period, every Data Collector ("client" below)
  initializes their state as follows

      1. For every Tally Reporter with index i, the client constructs a
         random 32-byte random value SEED_i.  The client then generates a
         pseudorandom bitstream of C*B bits using the SHAKE-256 XOF with
         SEED_i as its input, and divides this stream into C values, with the
         c'th value denoted by MASK(i, c).

         [Because P is very close to a power of 2, nearly all seeds will
         produce MASK values in range 0...(P-1).  If any does not, the client
         picks a new seed.]

      2. The client encrypts SEED_i using the public key of Tally Reporter i,
         and remembers this encrypted value.  It discards SEED_i.

      3. For every counter c, the client generates a noise value Z_c from an
         appropriate Gaussian distribution. If the noise value is negative,
         the client adds P to bring Z_c into the range 0...(P-1).  (The noise
         MUST be sampled using the procedure in Appendix C.)

         The client then uses Shamir secret sharing to generate N shares
         (x,y) of Z_c, 1 &lt;= x &lt;= N, with the x'th share to be used by the
         x'th Tally Reporter.  See Appendix A for more on Shamir secret
         sharing.  See Appendix B for another idea about X coordinates.

         The client picks a random value CTR_c and stores it in the counter,
         which serves to locally blind the counter.

         The client then subtracts (MASK(x, c)+CTR_c) from y, giving
         "encrypted shares" of (x, y0) where y0 = y-CTR_c.

         The client then discards all MASK values, all CTR values, and all
         original shares (x,y), all CTR and the noise value Z_c. For each
         counter c, it remembers CTR_c, and N shares of the form (x, y).

  To increment a counter by some value "inc":

      1. The client adds "inc" to counter value, modulo P.

         (This step is chosen to be optimal, since it will happen more
         frequently than any other step in the computation.)

         Aggregate counter values that are close to P/2 MUST be scaled to
         avoid overflow. See Appendix D for more information. (We do not
         think that any counters on the current Tor network will require
         scaling.)

  To publish the counter values:

      1. The client publishes, in the format described below:

         The list of counters it knows about The list of TRs it knows about
         For each TR: For each counter c: A list of (i, y-CTR_c-MASK(x,c)),
         which corresponds to the share for the i'th TR of counter c.  SEED_i
         as encrypted earlier to the i'th TR's public key.

3.2. Tally Reporter (TR) side

  This section is less completely specified than the Data Collector's
  behavior: I expect that the TRs will be easier to update as we proceed.

  (Each TR has a long-term identity key (ed25519).  It also has a sequence of
  short-term curve25519 keys, each associated with a single round of data
  collection.)

   1. When a group of TRs receives information from the Data Collectors, they
      collectively chose a set S of DCs and a set of counters such that every
      TR in the group has a valid entry for every counter, from every DC in
      the set.

      To be valid, an entry must not only be well-formed, but must also have
      the x coordinate in its shares corresponding to the TR's position in
      the list of TRs.

   2. For each Data Collector's report, the i'th TR decrypts its part of the
      client's report using its curve25519 key.  It uses SEED_i and SHAKE-256
      to regenerate MASK(0) through MASK(C-1).  Then for each share (x,
      y-CTR_c-MASK(x,c)) (note that x=i), the TR reconstructs the true share
      of the value for that DC and counter c by adding V+MASK(x,c) to the y
      coordinate to yield the share (x, y_final).

   3. For every counter in the set, each TR computes the sum of the y_final
      values from all clients.

   4. For every counter in the set, each TR publishes its a share of the sum
      as (x, SUM(y_final)).

   5. If at least K TRs publish correctly, then the sum can be reconstructed
      using Lagrange polynomial interpolation. (See Appendix A).

   6. If the reconstructed sum is greater than P/2, it is probably a negative
      value. The value can be obtained by subtracting P from the sum.
      (Negative values are generated when negative noise is added to small
      signals.)

   7. If scaling has been applied, the sum is scaled by the scaling factor.
      (See Appendix D.)

4. The document format

4.1. The counters document.

  This document format builds on the line-based directory format used for
  other tor documents, described in Tor's dir-spec.txt.

  Using this format, we describe a "counters" document that publishes the
  shares collected by a given DC, for a single TR.

  The "counters" document has these elements:

    "privctr-dump-format" SP VERSION SP SigningKey

       [At start, exactly once]

       Describes the version of the dump format, and provides an ed25519
       signing key to identify the relay. The signing key is encoded in
       base64 with padding stripped. VERSION is "alpha" now, but should be
       "1" once this document is finalized.

    "starting-at" SP IsoTime

       [Exactly once]

       The start of the time period when the statistics here were collected.

    "ending-at" SP IsoTime

       [Exactly once]

       The end of the time period when the statistics here were collected.

    "share-parameters" SP Number SP Number

       [Exactly once]

       The number of shares needed to reconstruct the client's measurements
       (K), and the number of shares produced (N), respectively.

    "tally-reporter" SP Identifier SP Integer SP Key

       [At least twice]

       The curve25519 public key of each Tally Reporter that the relay
       believes in.  (If the list does not match the list of participating
       Tally Reporters, they won't be able to find the relay's values
       correctly.)  The identifiers are non-space, non-nul character
       sequences.  The Key values are encoded in base64 with padding
       stripped; they must be unique within each counters document.  The
       Integer values are the X coordinate of the shares associated with each
       Tally Reporter.

    "encrypted-to-key" SP Key

       [Exactly once]

       The curve25519 public key to which the report below is encrypted.
       Note that it must match one of the Tally Reporter options above.


    "report" NL "----- BEGIN ENCRYPTED MESSAGE-----" NL Base64Data "----- END
      ENCRYPTED MESSAGE-----" NL

      [Exactly once]

      An encrypted document, encoded in base64. The plaintext format is
      described in section 4.2. below. The encryption is as specified in
      section 5 below, with STRING_CONSTANT set to "privctr-shares-v1".

    "signature" SP Signature

       [At end, exactly once]

       The Ed25519 signature of all the fields in the document, from the
       first byte, up to but not including the "signature" keyword here.  The
       signature is encoded in base64 with padding stripped.

4.2. The encrypted "shares" document.

  The shares document is sent, encrypted, in the "report" element above.  Its
  plaintext contents include these fields:

   "encrypted-seed" NL "----- BEGIN ENCRYPTED MESSAGE-----" NL Base64Data
      "----- END ENCRYPTED MESSAGE-----" NL

      [At start, exactly once.]

      An encrypted document, encoded in base64. The plaintext value is the
      32-byte value SEED_i for this TR. The encryption is as specified in
      section 5 below, with STRING_CONSTANT set to "privctr-seed-v1".

   "d" SP Keyword SP Integer

      [Any number of times]

      For each counter, the name of the counter, and the obfuscated Y
      coordinate of this TR's share for that counter.  (The Y coordinate is
      calculated as y-CTR_c as in 3.1 above.)  The order of counters must
      correspond to the order used when generating the MASK() values;
      different clients do not need to choose the same order.

5. Hybrid encryption

   This scheme is taken from rend-spec-v3.txt, section 2.5.3, replacing
   "secret_input" and "STRING_CONSTANT".  It is a hybrid encryption method
   for encrypting a message to a curve25519 public key PK.

     We generate a new curve25519 keypair (sk,pk).

     We run the algorithm of rend-spec-v3.txt 2.5.3, replacing "secret_input"
     with Curve25519(sk,PK) | SigningKey, where SigningKey is the DC's
     signing key.  (Including the DC's SigningKey here prevents one DC from
     replaying another one's data.)

     We transmit the encrypted data as in rend-spec-v3.txt 2.5.3, prepending
     pk.


Appendix A. Shamir secret sharing for the impatient

   In Shamir secret sharing, you want to split a value in a finite field into
   N shares, such that any K of the N shares can reconstruct the original
   value, but K-1 shares give you no information at all.

   The key insight here is that you can reconstruct a K-degree polynomial
   given K+1 distinct points on its curve, but not given K points.

   So, to split a secret, we going to generate a (K-1)-degree polynomial.
   We'll make the Y intercept of the polynomial be our secret, and choose all
   the other coefficients at random from our field.

   Then we compute the (x,y) coordinates for x in [1, N].  Now we have N
   points, any K of which can be used to find the original polynomial.

   Moreover, we can do what PrivCount wants here, because adding the y
   coordinates of N shares gives us shares of the sum: If P1 is the
   polynomial made to share secret A and P2 is the polynomial made to share
   secret B, and if (x,y1) is on P1 and (x,y2) is on P2, then (x,y1+y2) will
   be on P1+P2 ... and moreover, the y intercept of P1+P2 will be A+B.

   To reconstruct a secret from a set of shares, you have to either go learn
   about Lagrange polynomials, or just blindly copy a formula from your
   favorite source.

   Here is such a formula, as pseudocode^Wpython, assuming that each share is
   an object with a _x field and a _y field.

     def interpolate(shares): for sh in shares: product_num = FE(1)
        product_denom = FE(1) for sh2 in shares: if sh2 is sh: continue
        product_num *= sh2._x product_denom *= (sh2._x - sh._x)

           accumulator += (sh._y * product_num) / product_denom

       return accumulator


Appendix B. An alternative way to pick X coordinates

   Above we describe a system where everybody knows the same TRs and puts
   them in the same order, and then does Shamir secret sharing using "x" as
   the x coordinate for the x'th TR.

   But what if we remove that requirement by having x be based on a hash of
   the public key of the TR?  Everything would still work, so long as all
   users chose the same K value.  It would also let us migrate TR sets a
   little more gracefully.


Appendix C. Sampling floating-point Gaussian noise for differential privacy

   Background:

   When we add noise to a counter value (signal), we want the added noise to
   protect all of the bits in the signal, to ensure differential privacy.

   But because noise values are generated from random double(s) using
   floating-point calculations, the resulting low bits are not distributed
   evenly enough to ensure differential privacy.

   As implemented in the C "double" type, IEEE 754 double-precision
   floating-point numbers contain 53 significant bits in their mantissa. This
   means that noise calculated using doubles can not ensure differential
   privacy for client activity larger than 2**53: * if the noise is scaled to
   the magnitude of the signal using multiplication, then the low bits are
   unprotected, * if the noise is not scaled, then the high bits are
   unprotected.

   But the operations in the noise transform also suffer from floating-point
   inaccuracy, further affecting the low bits in the mantissa. So we can only
   protect client activity up to 2**46 with Laplacian noise. (We assume that
   the limit for Gaussian noise is similar.)

   Our noise generation procedure further reduces this limit to 2**42. For
   byte counters, 2**42 is 4 Terabytes, or the observed bandwidth of a 1 Gbps
   relay running at full speed for 9 hours. It may be several years before we
   want to protect this much client activity. However, since the mitigation
   is relatively simple, we specify that it MUST be implemented.

   Procedure:

   Data collectors MUST sample noise as follows: 1. Generate random double(s)
     in [0, 1] that are integer multiples of 2**-53.  TODO: the Gaussian
     transform in step 2 may require open intervals 2. Generate a Gaussian
     floating-point noise value at random with sigma 1, using the random
     double(s) generated in step 1.  3. Multiply the floating-point noise by
     the floating-point sigma value.  4. Truncate the scaled noise to an
     integer to remove the fractional bits.  (These bits can never correspond
     to signal bits, because PrivCount only collects integer counters.)
     5. If the floating-point sigma value from step 3 is large enough that
     any noise value could be greater than or equal to 2**46, we need to
     randomise the low bits of the integer scaled noise value. (This ensures
     that the low bits of the signal are always hidden by the noise.)

        If we use the sample_unit_gaussian() transform in nickm/privcount_nm:
        A. The maximum r value is sqrt(-2.0*ln(2**-53)) ~= 8.57, and the
        maximal sin(theta) values are +/- 1.0. Therefore, the generated noise
        values can be greater than or equal to 2**46 when the sigma value is
        greater than 2**42.  B. Therefore, the number of low bits that need
        to be randomised is: N = floor(sigma / 2**42) C. We randomise the
        lowest N bits of the integer noise by replacing them with a uniformly
        distributed N-bit integer value in 0...(2**N)-1.  6. Add the integer
        noise to the integer counter, before the counter is incremented in
        response to events. (This ensures that the signal value is always
        protected.)

   This procedure is security-sensitive: changing the order of
   multiplications, truncations, or bit replacements can expose the low or
   high bits of the signal or noise.

   As long as the noise is sampled using this procedure, the low bits of the
   signal are protected. So we do not need to "bin" any signals.

   The impact of randomising more bits than necessary is minor, but if we
   fail to randomise an unevenly distributed bit, client activity can be
   exposed.  Therefore, we choose to randomise all bits that could
   potentially be affected by floating-point inaccuracy.

   Justification:

   Although this analysis applies to Laplacian noise, we assume a similar
   analysis applies to Gaussian noise. (If we add Laplacian noise on DCs, the
   total ends up with a Gaussian distribution anyway.)

   TODO: check that the 2**46 limit applies to Gaussian noise.

   This procedure results in a Gaussian distribution for the higher ~42 bits
   of the noise. We can safely ignore the value of the lower bits of the
   noise, because they are insignificant for our reporting.

   This procedure is based on section 5.2 of: "On Significance of the Least
   Significant Bits For Differential Privacy" Ilya Mironov, ACM CCS 2012
   https://www.microsoft.com/en-us/research/wp-content/uploads/2012/10/lsbs.pdf

   We believe that this procedure is safe, because we neither round nor
   smooth the noise values. The truncation in step 4 has the same effect as
   Mironov's "safe snapping" procedure. Randomising the low bits removes the
   2**46 limit on the sigma value, at the cost of departing slightly from the
   ideal infinite-precision Gaussian distribution. (But we already know that
   these bits are distributed poorly, due to floating-point inaccuracy.)

   Mironov's analysis assumes that a clamp() function is available to clamp
   large signal and noise values to an infinite floating-point value.
   Instead of clamping, PrivCount's arithmetic wraps modulo P. We believe
   that this is safe, because any reported values this large will be
   meaningless modulo P. And they will not expose any client activity,
   because "modulo P" is an arithmetic transform of the summed noised signal
   value.

   Alternatives:

   We could round the encrypted value to the nearest multiple of the
   unprotected bits. But this relies on the MASK() value being a uniformly
   distributed random value, and it is less generic.

   We could also simply fail when we reach the 2**42 limit on the sigma
   value, but we do not want to design a system with a limit that low.

   We could use a pure-integer transform to create Gaussian noise, and avoid
   floating-point issues entirely. But we have not been able to find an
   efficient pure-integer Gaussian or Laplacian noise transform. Nor do we
   know if such a transform can be used to ensure differential privacy.


Appendix D. Scaling large counters

   We do not believe that scaling will be necessary to collect PrivCount
   statistics in Tor. As of November 2017, the Tor network advertises a
   capacity of 200 Gbps, or 2**51 bytes per day. We can measure counters as
   large as ~2**61 before reaching the P/2 counter limit.

   If scaling becomes necessary, we can scale event values (and noise sigmas)
   by a scaling factor before adding them to the counter. Scaling may
   introduce a bias in the final result, but this should be insignificant for
   reporting.


Appendix Z. Remaining client-side uncertainties

   [These are the uncertainties at the client side. I'm not considering
    TR-only operations here unless they affect clients.]

   Should we do a multi-level thing for the signing keys?  That is, have an
   identity key for each TR and each DC, and use those to sign short-term
   keys?

   How to tell the DCs the parameters of the system, including: - who the TRs
   are, and what their keys are?  - what the counters are, and how much noise
   to add to each?  - how do we impose a delay when the noise parameters
   change?  (this delay ensures differential privacy even when the old and
   new counters are compared) - or should we try to monotonically increase
   counter noise?  - when the collection intervals start and end?  - what
   happens in networks where some relays report some counters, and other
   relays report other counters?  - do we just pick the latest counter
   version, as long as enough relays support it?  (it's not safe to report
   multiple copies of counters)

   How the TRs agree on which DCs' counters to collect?

   How data is uploaded to DCs?

   What to say about persistence on the DC side?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171211035117</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-11 03:51:17-0400</timestampReceived><subject>[tor-dev] Help Wanted: Fallback Directory Update</subject><body>

[Attachment #2 (multipart/signed)]


(You might have already read this email on a closed list.
I'm re-posting it here, with an extra "step 0".)

Hi all,

Fallback directory mirrors help clients reach the Tor network.

We need to rebuild the list every so often when their details change.
(We have an automated check for 25% failure, and it just triggered.)

Does anyone want to help me do this?
It would be nice to get it done this month - but it's not urgent.

Here's what needs to be done in detail:

0. Ask operators to opt-in stable relays as fallback directory mirrors
  If they are on the whitelist already, they don't need to do anything.
  Ticket: https://trac.torproject.org/projects/tor/ticket/22527
  File:   https://gitweb.torproject.org/tor.git/tree/scripts/maint/fallback.whitelist

1. Update the fallback whitelist with new and changed relay details
  Tickets: https://trac.torproject.org/projects/tor/ticket/22321
           https://trac.torproject.org/projects/tor/ticket/22527
  File:    tor/scripts/maint/fallback.whitelist

2. Update updateFallbackDirs.py to have a CONSENSUS_EXPIRY_TOLERANCE of 0.
  Ticket: https://trac.torproject.org/projects/tor/ticket/20942
  File:   tor/scripts/maint/updateFallbackDirs.py

3. Run updateFallbackDirs.py with the new whitelist and CONSENSUS_EXPIRY_TOLERANCE.
  You'll need a decent network connection for this.
  Please attach the script logs to the trac ticket.
  Command: tor/scripts/maint/updateFallbackDirs.py &gt; src/or/fallback_dirs.inc

4. Write a changes file
  Ticket: https://trac.torproject.org/projects/tor/ticket/22271
  Draft:

 o Minor features (fallback directory list):
   - Replace the 151 fallbacks originally introduced in Tor 0.3.1.3-alpha in
     May 2017 (of which ~111 were still functional) with a list of
     NNN fallbacks (NNN new, NNN unchanged, NNN removed) generated in December
     2017. Resolves ticket 22271.

  There are some commands that count fallback changes here:
  https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors#FormattingChangesFiles


5. Announce the new list on tor-relays@

6. Tell the relay search maintainer that the list has changed


Next Time:

I'd like to make the process quicker and easier next time.
But I don't want to make any big changes to it at the moment.
Let's do that when we have time to try different things.

T

&gt; On 7 Dec 2017, at 11:57, atagar@torproject.org wrote:
&gt; 
&gt; 40/151 (26%) fallback directories have become slow or unresponsive...
&gt; 
&gt; (snip)

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlouALUACgkQdA2eOQJS
cqJFbBAAgkmlAqjJ7hNXsowTdoz+yRIN2SR8EDWBBPqWNtsiUGl/XH0wHua6Z+aC
dwhdCoRNcny4ms4XnntZSzHifauT0Xu9Js4KpILDpVr9T3mdiBXxN/DpiOE6hobz
VSw2vQGOruntoGWDwXc1uHi5jzlr6CF90n4AJoYqQBsWShpmkLQ803b5Ry1Ukpy1
XLHG66Iqji1I42PGkXd5IBp+tKl7/mq7VeTktKIUee9bMZXcej6mdHKBQyYjR9NQ
aCVJNhUoZleasbDKbzn76FTwktbQkqvMQ6bGqvfFkOXfKfGVGDh0551OuC/J9sar
/0J8d8NOgrSOe3bgYpZol1eAUTASC6Iu0zRTCKomLp1m+R8e6HjKNv9FlaTFL32f
OKMXUCLKMv3/Y6F0q2nhKPVY3BqIYYCfFySjwpYCh0BSp2erDgU4Gu4v/2BuiKjk
hefGNGbcxw8Tz6WMjviHgp9X76JoMG6Cx8wN3K4Yj604DSeCSQ5drW5aLsR3VFwK
MAwpY/pYj7OuEJcwd35cUd/m/1WW0iQhoxWp+UK7ArcTmqjptXAliAlVFsZu63XN
MTES0NNX68kH61xqaQH0DnxXzsataMXkpoXKx4tJo0DliduZlZIpcYg+VpF5c7Uk
Ao8MnQRwFFjl5rMZc0VAFkkZtzrLwbONkv69pKLE5z3+uyXDuLs=
=we5+
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211160440</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2017-12-11 16:04:40-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth Authority Progress</subject><body>

[Attachment #2 (multipart/signed)]


teor:
&gt; 
&gt; On 20 Dec 2017, at 06:06, meejah &lt;meejah@meejah.ca&gt; wrote:
&gt; 
&gt; &gt;&gt; This project is not quite there yet, and will require some
&gt; &gt;&gt;   non-trivial engineering time, but it's probably a much easier task
&gt; &gt;&gt;   compared to peerflow due to the design being more understood and
&gt; &gt;&gt;   already coded.
&gt; &gt; 
&gt; &gt; I'm not convinced this part is completely accurate ;) because at TorDev
&gt; &gt; MTL it seems to me the consensus was that nobody actually knows what
&gt; &gt; torflow is doing and so answering the question "is bwscanner doing the
&gt; &gt; same thing" is approximately NP-hard.
&gt; 
&gt; I have some idea what torflow is doing, in a broad sense:
&gt; * launch 2 tor clients
&gt; * repeat as often as possible, running 9 different scanners:
&gt;     * split relays into buckets by bandwidth percentile
&gt;     * build two hop paths with a relay and exit from relays in the bucket
&gt;     * download a file from a bandwidth server, choose the size based on the bucket
&gt;     * measure how long it takes
&gt;     * store the results in a database
&gt; * aggregate the results hourly:
&gt;     * produce a consensus weight to advertised bandwidth ratio
&gt;     * using a decaying weighted average
&gt;     * and some form of feedback (PID) control
&gt;     * and dump it to a file
&gt; Then authorities read this file and include it in their votes.

Yes, all of this is correct.

Technically though full PID feedback is disabled right now. The
PID-based implementation itself is enabled via bwauthpid=1 in the
consensus, but the PID constants are currently set such that there is no
actual feedback happening. See Section 3 of the Bw authority spec for
more info:
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n353

If feedback is enabled (via consensus parameters), it drives relays to
other forms of resource exhaustion which we do not currently measure
(primarily CPU exhaustion, which we could approximate by circuit
failure, but potentially also memory pressure, which we have no signal
for).

&gt; I suspect that Mike Perry may remember more detail, or may want to
&gt; correct my summary, as he wrote most of torflow (I think?)

Yes.
 
&gt; &gt; (I think the best path to answering "does bwscanner do the same thing as
&gt; &gt; torflow" is to Run It And See...) If any of these parties are having
&gt; &gt; problems deploying bwscanner this is probably something I can help with.

Karsten wrote some scripts that can produce CDF graphs of bw authority
votes for all of the flag combinations. This was very useful for
determining if different bw authorities were measuring the network
similarly. It will also be useful to see how closely the bwscanner is
coming to the bwauth votes:
https://trac.torproject.org/projects/tor/ticket/2394

I am not sure what repo they are in, though.

&gt; Let's start by specifying what tor directory authorities expect from the
&gt; file format.

This format is already specified in Sections 2.4 and 3.4 of the bwauth spec
itself:
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n447

(This output should not be confused with Section 1.6, which specifies
the intermediate sub-process format before aggregating results).

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219161000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-19 16:10:00-0400</timestampReceived><subject>[tor-dev] path selection constraints: /16 subnet rule when using bridges</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

does the following also apply if a Tor users chooses to use a bridge?

&gt;      - We do not choose more than one router in a given /16 subnet
[1]

Will tor ensure that the relays are not in the same /16 netblock with the bridge?

thanks,
nusenu

[1] https://gitweb.torproject.org/torspec.git/tree/path-spec.txt#n239 
-- 
https://mastodon.social/@nusenu
twitter: @nusenu_



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171223054934</emailId><senderName>Harshavardhan Reddy</senderName><senderEmail>coolharsha010@gmail.com</senderEmail><timestampReceived>2017-12-23 05:49:34-0400</timestampReceived><subject>[tor-dev] #tor-dev exitmap</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

How does the Tor Project deal with the malicious exit relays. Do you still
run exitmap or something better?

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hi,&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;How does the Tor Project \
deal with the malicious exit relays. Do you still run exitmap or something \
better?&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171223221306</emailId><senderName>Ivan Mandura</senderName><senderEmail>ivan.mandura93@gmail.com</senderEmail><timestampReceived>2017-12-23 22:13:06-0400</timestampReceived><subject>[tor-dev] Rust rewrite help</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

My name is Ivan and I would like to help out with Rust rewrite.

I'm a huge fan of both Rust and TOR. Recently, I spent some time in China
and it made me realize the importance of a project like TOR.

Have experience with low-level code, being in DB industry for a few years
now.

Any pointers would be of huge help :)

Thanks,
Ivan

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My name is Ivan and I would like to help out \
with Rust rewrite.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm a huge fan of both Rust and \
TOR. Recently, I spent some time in China and it made me realize the importance of a \
project like TOR.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Have experience with low-level code, \
being in DB industry for a few years now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any pointers would \
be of huge help :)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;Ivan&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171223223113</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-23 22:31:13-0400</timestampReceived><subject>Re: [tor-dev] Rust rewrite help</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 24 Dec 2017, at 09:13, Ivan Mandura &lt;ivan.mandura93@gmail.com&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; My name is Ivan and I would like to help out with Rust rewrite. 
&gt; 
&gt; I'm a huge fan of both Rust and TOR. Recently, I spent some time in China and it \
&gt; made me realize the importance of a project like TOR.  
&gt; Have experience with low-level code, being in DB industry for a few years now.
&gt; 
&gt; Any pointers would be of huge help :)

Hi Ivan,

Here are our getting started documents:
https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStartedRust.md
https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md

Our goal is to gradually add interchangeable Rust crates to Tor,
so that they can be used as alternatives to the corresponding C code.

You might find torguts helpful to understand Tor's current structure:
https://gitweb.torproject.org/user/nickm/torguts.git/tree/

Other Core Tor developers know much more about Rust than I do.
They can tell you if there is anywhere we are focusing on right now.

You can start by building Tor with Rust, and making sure the unit tests pass.
We use "make check" to run a bunch of tests.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 24 Dec 2017, at 09:13, Ivan \
Mandura &lt;&lt;a href="mailto:ivan.mandura93@gmail.com"&gt;ivan.mandura93@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My name is Ivan and I would like to help out with \
Rust rewrite. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm a huge fan of both Rust and TOR. \
Recently, I spent some time in China and it made me realize the importance of a \
project like TOR. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Have experience with low-level code, \
being in DB industry for a few years now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any pointers would \
be of huge help :)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Hi \
Ivan,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are our getting started documents:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStartedRust.md"&gt;ht \
tps://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStartedRust.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md"&gt;https: \
//gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Our \
goal is to gradually add interchangeable Rust crates to Tor,&lt;/div&gt;&lt;div&gt;so that they \
can be used as alternatives to the corresponding C code.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You \
might find torguts helpful to understand Tor's current structure:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/user/nickm/torguts.git/tree/"&gt;https://gitweb.torproject.org/user/nickm/torguts.git/tree/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Other \
Core Tor developers know much more about Rust than I do.&lt;/div&gt;&lt;div&gt;They can tell you \
if there is anywhere we are focusing on right now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can \
start by building Tor with Rust, and making sure the unit tests pass.&lt;/div&gt;&lt;div&gt;We \
use "make check" to run a bunch of \
tests.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171224015523</emailId><senderName>Ivan Mandura</senderName><senderEmail>ivan.mandura93@gmail.com</senderEmail><timestampReceived>2017-12-24 01:55:23-0400</timestampReceived><subject>Re: [tor-dev] Rust rewrite help</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks, successfully done it!

Will start reading docs. If somebody has something simple to start with
please send it my way.

IM

On Sat, Dec 23, 2017 at 10:31 PM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt;
&gt; On 24 Dec 2017, at 09:13, Ivan Mandura &lt;ivan.mandura93@gmail.com&gt; wrote:
&gt;
&gt; Hello,
&gt;
&gt; My name is Ivan and I would like to help out with Rust rewrite.
&gt;
&gt; I'm a huge fan of both Rust and TOR. Recently, I spent some time in China
&gt; and it made me realize the importance of a project like TOR.
&gt;
&gt; Have experience with low-level code, being in DB industry for a few years
&gt; now.
&gt;
&gt; Any pointers would be of huge help :)
&gt;
&gt;
&gt; Hi Ivan,
&gt;
&gt; Here are our getting started documents:
&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/
&gt; GettingStartedRust.md
&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md
&gt;
&gt; Our goal is to gradually add interchangeable Rust crates to Tor,
&gt; so that they can be used as alternatives to the corresponding C code.
&gt;
&gt; You might find torguts helpful to understand Tor's current structure:
&gt; https://gitweb.torproject.org/user/nickm/torguts.git/tree/
&gt;
&gt; Other Core Tor developers know much more about Rust than I do.
&gt; They can tell you if there is anywhere we are focusing on right now.
&gt;
&gt; You can start by building Tor with Rust, and making sure the unit tests
&gt; pass.
&gt; We use "make check" to run a bunch of tests.
&gt;
&gt; T
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Thanks, successfully done it!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Will start reading \
docs. If somebody has something simple to start with please send it my \
way.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;IM&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Sat, Dec 23, 2017 at 10:31 PM, teor &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:teor2345@gmail.com" target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;span class=""&gt;&lt;br&gt;&lt;div&gt;On 24 Dec 2017, \
at 09:13, Ivan Mandura &lt;&lt;a href="mailto:ivan.mandura93@gmail.com" \
target="_blank"&gt;ivan.mandura93@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My name is Ivan and I would \
like to help out with Rust rewrite.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm a huge fan of \
both Rust and TOR. Recently, I spent some time in China and it made me realize the \
importance of a project like TOR.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Have experience with \
low-level code, being in DB industry for a few years \
now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any pointers would be of huge help \
:)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;Hi \
Ivan,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are our getting started documents:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStartedRust.md" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;tor.git/tree/doc/HACKING/&lt;wbr&gt;GettingStartedRust.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;tor.git/tree/doc/HACKING/&lt;wbr&gt;GettingStarted.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Our \
goal is to gradually add interchangeable Rust crates to Tor,&lt;/div&gt;&lt;div&gt;so that they \
can be used as alternatives to the corresponding C code.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You \
might find torguts helpful to understand Tor's current structure:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/user/nickm/torguts.git/tree/" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;user/nickm/torguts.git/tree/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Other \
Core Tor developers know much more about Rust than I do.&lt;/div&gt;&lt;div&gt;They can tell you \
if there is anywhere we are focusing on right now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can \
start by building Tor with Rust, and making sure the unit tests pass.&lt;/div&gt;&lt;div&gt;We \
use "make check" to run a bunch of tests.&lt;/div&gt;&lt;span class="HOEnZb"&gt;&lt;font \
color="#888888"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
 tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171224021419</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-24 02:14:19-0400</timestampReceived><subject>Re: [tor-dev] Rust rewrite help</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Dec 2017, at 12:55, Ivan Mandura &lt;ivan.mandura93@gmail.com&gt; wrote:
&gt; 
&gt; Thanks, successfully done it!
&gt; 
&gt; Will start reading docs. If somebody has something simple to start with please send \
&gt; it my way.


If you want to modify existing code, this one looks easy:

Wrap types in protover.rs
https://trac.torproject.org/projects/tor/ticket/24030


If you like FFI from Rust to C, here are some options:

Wrap our sha2 interface in Rust which implements the appropriate traits
https://trac.torproject.org/projects/tor/ticket/24659

Wrap our PRNG interface(s) in Rust with appropriate traits
https://trac.torproject.org/projects/tor/ticket/24660


If you like testing, and FFI from C to Rust, and want to get involved
with our C-based unit tests - try these after your first patch?

Test all rust functions' behavior when called from C with bad UTF8
https://trac.torproject.org/projects/tor/ticket/24029

consdiff implementation in Rust
https://trac.torproject.org/projects/tor/ticket/24609
(Most people's repositories are on git.torproject.org.)


And here are all the Rust tickets:

https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status= \
merge_ready&amp;status=needs_information&amp;status=needs_review&amp;status=needs_revision&amp;status= \
new&amp;status=reopened&amp;keywords=~rust&amp;col=id&amp;col=summary&amp;col=status&amp;col=type&amp;col=priority&amp;col=milestone&amp;col=component&amp;order=priority


T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo/DXsACgkQdA2eOQJS
cqK4EQ/8CrXl6FLnpS/VEaRn1TrN8BbjrrpZaYNdPDTcGJXnHw/QWMdLInw07xeV
Ns/rwmT7DNITSZwxjHkR76C5fX94vpCKHoCjJ06IlWbUo1Vmz9IkFN7hvJzsE68B
5yXwk30Kz8NJXUkABQ/RV69ET/bE9U1tb69N/5F9sUo3mW06z4znj8BE7T1RYY01
gvYaBiBmrhj3fUG4AD8RYpaXto12gck7Jt+Fy5mfNpp7gu3kBWJB0j1AtjbVTOyv
/qoLmGfdcBNrtZ+DLEbR1/XN8aLLNS6ft/S0ci+0NEigDK8i/PrGuo5Y7GV9gisw
irAy3GOx3G6yN6EYYYaz5m0jtgw7WScCATubSr7dBK04DHPfHdPsluwmi6MyEqLn
CBVa0p7+re4HCBcYN9dva8spwkST20kKSdLJxMeS/gga3jOF+rFDyWF1t9DkWG6t
VJFy1tpe87G26hdoVjUbch+6PQwZ9gFE4zq5LbHMV5N2kqBXpFeLwCSTbvZvNrTX
gmRTg+vGk/55m428Pw/unBOFKuEX1DLk9uTbr4plxTmlPl7/0vdPFevNUV+5g0if
xubTL1AslBbxSYl13RfFcoNpGlfC/nz8XcEVMdpoeh9jfUCAp1SkjWTQOJg2IjLf
WoOGdEHSZmPxVf52N1a5IN6LY5wMWbA/r9Unu7gz3af6PUoV2EQ=
=Lg2H
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171223060357</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-12-23 06:03:57-0400</timestampReceived><subject>Re: [tor-dev] #tor-dev exitmap</subject><body>

On Sat, Dec 23, 2017 at 12:49 AM, Harshavardhan Reddy
&lt;coolharsha010@gmail.com&gt; wrote:
&gt; How does the Tor Project deal with the malicious exit relays. Do you still
&gt; run exitmap or something better?

As with dirauths, the effort is distributed and not
necessarily a function of the tor project proper.
Users report them when found, others search for them via
exitmap, some create and use their own methods.
Eventually they're validated / rejected up to the dirauths.
If you've found suspected bad relays, report them to
bad-relays@lists.torproject.org. Same for any ideas
or tools you might be working on and like to share.
You can search bad-relays, badexit, exitmap in wiki
below for a little more info.

https://trac.torproject.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219162300</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-19 16:23:00-0400</timestampReceived><subject>Re: [tor-dev] path selection constraints: /16 subnet rule when using bridges</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 20 Dec 2017, at 03:10, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; does the following also apply if a Tor users chooses to use a bridge?
&gt; 
&gt;&gt;     - We do not choose more than one router in a given /16 subnet
&gt; [1]
&gt; 
&gt; Will tor ensure that the relays are not in the same /16 netblock with the bridge?

Yes, as each node is added to the path, its IPv4 address is checked
against the IPv4 /16 netblocks of the existing nodes in the path.
This includes relays and bridges.

There is no support for checking IPv6 addresses yet:
https://trac.torproject.org/projects/tor/ticket/24393
But when there is, we will check IPv6 /32s, for those nodes that have IPv6
addresses.

&gt; …
&gt; [1] https://gitweb.torproject.org/torspec.git/tree/path-spec.txt#n239

[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 20 Dec 2017, at 03:10, nusenu \
&lt;&lt;a href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;does the following also apply \
if a Tor users chooses to use a bridge?&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;     - We do not choose more than one router in \
a given /16 subnet&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Will \
tor ensure that the relays are not in the same /16 netblock with the \
bridge?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, as each node is added \
to the path, its IPv4 address is checked&lt;/div&gt;&lt;div&gt;against the IPv4 /16 netblocks of \
the existing nodes in the path.&lt;/div&gt;&lt;div&gt;This includes relays and \
bridges.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There is no support for checking IPv6 addresses \
yet:&lt;/div&gt;&lt;div&gt;&lt;a href="https://trac.torproject.org/projects/tor/ticket/24393"&gt;https://trac.torproject.org/projects/tor/ticket/24393&lt;/a&gt;&lt;/div&gt;&lt;div&gt;But \
when there is, we will check IPv6 /32s, for those nodes that have \
IPv6&lt;/div&gt;&lt;div&gt;addresses.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;…&lt;br&gt;&lt;span&gt;[1] \
&lt;span&gt;&lt;a href="https://gitweb.torproject.org/torspec.git/tree/path-spec.txt#n239"&gt;https://gitweb.torproject.org/torspec.git/tree/path-spec.txt#n239&lt;/a&gt;&lt;/span&gt; \
&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219180000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-19 18:00:00-0400</timestampReceived><subject>Re: [tor-dev] path selection constraints: /16 subnet rule when using bridges</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Thanks for confirming.

--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219230000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-19 23:00:00-0400</timestampReceived><subject>Re: [tor-dev] path selection constraints: /16 subnet rule when using bridges</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; does the following also apply if a Tor users chooses to use a bridge?
&gt;&gt;
&gt;&gt;&gt;     - We do not choose more than one router in a given /16 subnet
&gt;&gt; [1]
&gt;&gt;
&gt;&gt; Will tor ensure that the relays are not in the same /16 netblock with the bridge?
&gt; 
&gt; Yes, as each node is added to the path, its IPv4 address is checked
&gt; against the IPv4 /16 netblocks of the existing nodes in the path.
&gt; This includes relays and bridges.
&gt; 
&gt; There is no support for checking IPv6 addresses yet:
&gt; https://trac.torproject.org/projects/tor/ticket/24393
&gt; But when there is, we will check IPv6 /32s, for those nodes that have IPv6
&gt; addresses.


Does it check only against actively used ORPort IPv4 address or all ORPort IPs 
in the bridge descriptor when connecting to the bridge via IPv6?

example: 
- bridge has an IPv6 and IPv4 1.1.2.2
- exit has 1.1.2.3
- tor client connects to the bridge using IPv6

Will the client use that exit if it connects to the bridge via IPv6?


thanks,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171114125155</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-14 12:51:55-0400</timestampReceived><subject>[tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header
========================================================================

1. Motivation:

   Lots of high-profile websites have onion addresses these days (e.g. Tor ,
   NYT, blockchain, ProPublica).  All those websites seem confused on what's
   the right way to inform their users about their onion addresses. Here are
   some confusion examples:
     a) torproject.org does not even advertise their onion address to Tor users (!!!)
     b) blockchain.info throws an ugly ASCII page to Tor users mentioning their onion
        address and completely wrecking the UX (loses URL params, etc.)
     c) ProPublica has a "Browse via Tor" section which redirects to the onion site.

   Ideally there would be a consistent way for websites to inform their users
   about their onion counterpart. This would provide the following positives:
     + Tor users would use onions more often. That's important for user
       education and user perception, and also to partially dispell the darkweb myth.
     + Website operators wouldn't have to come up with ad-hoc ways to advertise
       their onion services, which sometimes results in complete breakage of
       the user experience (particularly with blockchain)

   This proposal specifies a simple way forward here that's far from perfect,
   but can still provide benefits and also improve user-education around onions
   so that in the future we could employ more advanced techniques.

   Also see Tor ticket #21952 for more discussion on this:
      https://trac.torproject.org/projects/tor/ticket/21952

2. Proposal

   Websites use the Alt-Svc HTTP header to specify their onion counterpart:
     http://httpwg.org/http-extensions/alt-svc.html

   The Tor Browser intercepts that header (if any) and auto-redirects the user
   to the onion site. Tor Browser only does so if the header is served over HTTPS.

   (That's it.)

3. Improvements

3.1. User education through notifications

   To minimize the probability of users freaking out about auto-redirects Tor
   Browser could inform the user that the auto-redirect is happening. This
   could happen with a small notification bar [*] below the URL bar informing
   users that "Tor Browser is auto-redirecting you to the secure onion site".

   The notification bar could also have a question mark button that provides
   the user with additional information on the merits of onion sites and why
   they should like them.

   [*]: like this one: http://www.topdreamweaverextensions.com/UserFiles/Image/firefox-bar.jpg

3.2. Auto-redirects too intrusive? Make them optional.

   If we think that auto redirects are too intrusive, we should consider making
   them optional, or letting the website specify the desired behavior.

   If a website wants to specify an onion address but doesn't like
   auto-redirects, it could specify that as part of Alt-Svc and we could still
   inform the user that an onion is available using a notification bar again.

4. Drawbacks

   This proposal is far from the perfect solution of course. Here are a few
   reasons why:

4.1. Auto-redirects are scary

   Novice users or paranoid users might freak out with auto-redirects since
   it's unexpected. They might think they are under attack or they got hacked.

   An argument against that is that we are already using HTTPS-everywhere which
   is basically a redirection layer, and while its redirection technique is
   simpler, sometimes the derivative URL is not similar to the original URL,
   and we still don't see people freaking out. I think that's because people
   trust Tor Browser to do the right thing. Combining this knowledge with
   section 3.1 might solve this problem.

4.2. No security/performance benefits

   While we could come up with auto-redirect proposals that provide security
   and performance benefits, this proposal does not actually provide any of
   those.

   As a matter of fact, the security remains the same as connecting to normal
   websites (since we trust its HTTP headers), and the performance gets worse
   since we first need to connect to the website, get its headers, and then
   also connect to the onion.

   Still _all_ the website approaches mentioned in the "Motivation" section
   suffer from the above drawbacks, and sysadmins still come up with ad-hoc
   ways to inform users abou their onions. So this simple proposal will still
   help those websites and also pave the way forward for future auto-redirect
   techniques.

4.3. Alt-Svc does not do exactly what we want

   I read in a blog post [*] that using Alt-Svc header "doesn't change the URL
   in the location bar, document.location or any other indication of where the
   resource is; this is a "layer below" the URL.". IIUC, this is not exactly
   what we want because users will not notice the onion address, they will not
   get the user education part of the proposal and their connection will still
   be slowed down.

   I think we could perhaps change this in Tor Browser so that it rewrites the
   onion address to make it clear to people that they are now surfing the
   onionspace.

   [*]: https://www.mnot.net/blog/2016/03/09/alt-svc

5. The future

   As I said this is just a simple proposal to introduce the auto-redirect
   concept to people, and also to help some sysadmins who are currently coming
   up with weird ways to inform people about their onions. It's not the best
   way to do this, but it's definitely one of the simplest ways.

   In the future we could implement with more advanced auto-redirect proposals like:

   a) Have a "domains to onions" map into HTTPS-everywhere and have it do the
      autoredirects for us (performance benefits, and security benefits under many
      threat models).

   b) Bake onion addresses into SSL certificates and Let's Encrypt as suggested
      by comment:42 in #21952.

   But both of the designs above require non-trivial engineering/policy work
   and would still confuse people. So I think starting with a simple approach
   that will educate users and then moving to more advanced designs is a more
   normative way to go.

======================================================================

Let me know what you think :)

(Should this be part of torspec?)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224111500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-24 11:15:00-0400</timestampReceived><subject>[tor-dev] trac.tpo issues</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi, 
in the last few days trac says occasionally "Service Unavailable" and right now trac times out.

Since we are currently (attempting to) work on a wiki page, this is somewhat 
blocking our edits.

Has trac some known issue?

I'm looking forward to a reachable and stable trac :)

thanks,
nusenu



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171114172509</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-14 17:25:09-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>


&gt; On 14 Nov 2017, at 23:51, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; 3.2. Auto-redirects too intrusive? Make them optional.
&gt; 
&gt;   If we think that auto redirects are too intrusive, we should consider making
&gt;   them optional, or letting the website specify the desired behavior.
&gt; 
&gt;   If a website wants to specify an onion address but doesn't like
&gt;   auto-redirects, it could specify that as part of Alt-Svc and we could still
&gt;   inform the user that an onion is available using a notification bar again.

Inform the user that the onion address is available.

Make the default behaviour *not* to redirect (it's not faster, it's not more 
secure, and it's surprising). But I'd be willing to compromise here, by
letting the site specify an initial default, and having the Tor Browser default
be whatever.

 Let *the user* control the behaviour via the notification bar, and maybe
allow them to set a session default.
(This won't be persistent, for disk leak reasons.)

&gt; 4. Drawbacks

You missed the biggest one:

If the onion site is down, the user will be redirected to the downed site.
(I've used onion site redirects with this issue, it's really annoying.)
Similarly, if a feature is broken on the onion site, the user will be
redirected to a site they can't use.

Or if the user simply wants to use the non-onion site for some reason
(maybe they want a link they can share with their non-onion friends,
or maybe they don't want to reveal they're using Tor Browser).

Users *must* have a way to disable the redirect on every redirect.

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171114213143</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-11-14 21:31:43-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

I am a big proponent of websites advertising .onions in their Alt-Srv.


On 14 November 2017 at 06:51, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 3.1. User education through notifications
&gt;
&gt;    To minimize the probability of users freaking out about auto-redirects Tor
&gt;    Browser could inform the user that the auto-redirect is happening. This
&gt;    could happen with a small notification bar [*] below the URL bar informing
&gt;    users that "Tor Browser is auto-redirecting you to the secure onion site".
&gt;
&gt;    The notification bar could also have a question mark button that provides
&gt;    the user with additional information on the merits of onion sites and why
&gt;    they should like them.
&gt;
&gt;    [*]: like this one: http://www.topdreamweaverextensions.com/UserFiles/Image/firefox-bar.jpg


I think this is a good idea, and would be the best place to put the
"Never show me this again" option.

&gt; 4.2. No security/performance benefits
&gt;
&gt;    While we could come up with auto-redirect proposals that provide security
&gt;    and performance benefits, this proposal does not actually provide any of
&gt;    those.
&gt;
&gt;    As a matter of fact, the security remains the same as connecting to normal
&gt;    websites (since we trust its HTTP headers), and the performance gets worse
&gt;    since we first need to connect to the website, get its headers, and then
&gt;    also connect to the onion.
&gt;
&gt;    Still _all_ the website approaches mentioned in the "Motivation" section
&gt;    suffer from the above drawbacks, and sysadmins still come up with ad-hoc
&gt;    ways to inform users abou their onions. So this simple proposal will still
&gt;    help those websites and also pave the way forward for future auto-redirect
&gt;    techniques.

I envision a future Onion Everywhere extension like HTTPS Everywhere
that works similar to the HSTS preload list. Crawlers validate a
websites intention to be in the Onion Everywhere extension, and we
cache the Alt-Srv information so it is used on first load.


&gt; 4.3. Alt-Svc does not do exactly what we want
&gt;
&gt;    I read in a blog post [*] that using Alt-Svc header "doesn't change the URL
&gt;    in the location bar, document.location or any other indication of where the
&gt;    resource is; this is a "layer below" the URL.". IIUC, this is not exactly
&gt;    what we want because users will not notice the onion address, they will not
&gt;    get the user education part of the proposal and their connection will still
&gt;    be slowed down.
&gt;
&gt;    I think we could perhaps change this in Tor Browser so that it rewrites the
&gt;    onion address to make it clear to people that they are now surfing the
&gt;    onionspace.
&gt;
&gt;    [*]: https://www.mnot.net/blog/2016/03/09/alt-svc


I am a big opponent of changing the semantics of Alt-Srv.

We'd have to change the semantics to only do redirection for onion
domains. We'd also have to figure out how to handle cases where the
onion lives alongside non-onion (which takes precedence?) We'd also
have to maintain and carry this patch ourselves because it's pretty
antithetical to the very intent of the header and I doubt the
networking team at Mozilla would be interested in maintaining it.

Besides those issues, it also eliminates Alt-Srv as a working option
to something *else* websites may want: to silently redirect users to
their .onion _without_ the possibility of confusion for the user by
changing the address bar. I think Alt-Srv is an option for partial
petname support in TB.

There is a perfectly functioning mechanism for redirecting users: the
Location header. It does a lot of what you want: including temporary
or persistent redirects, updating the addess bar. Obviously it doesn't
work for all users, most don't know what .onion is, so Facebook isn't
going to deploy a .onion Location redirect even if they attempted to
detect TB users.

But they could send a new Onion-Redirect header that is recognized and
processed (with a notification bar) by any UA that supports Tor and
wants to implement it. This header would have a viable path to uplift,
support in extensions, and even standardization. Onion Everywhere can
preload these headers too.



On 14 November 2017 at 11:25, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; 4. Drawbacks
&gt;
&gt; You missed the biggest one:
&gt;
&gt; If the onion site is down, the user will be redirected to the downed site.
&gt; (I've used onion site redirects with this issue, it's really annoying.)
&gt; Similarly, if a feature is broken on the onion site, the user will be
&gt; redirected to a site they can't use.
&gt;
&gt; Or if the user simply wants to use the non-onion site for some reason
&gt; (maybe they want a link they can share with their non-onion friends,
&gt; or maybe they don't want to reveal they're using Tor Browser).
&gt;
&gt; Users *must* have a way to disable the redirect on every redirect.

Right now, I don't agree with this. (I reserve the right to change my
mind.) Websites can already redirect users to broken links through
mistakes. Why is "my onion site is not running" a scenario we want to
code around but "my subdomain is not running" is not? If a website
wants to redirect users they should be responsible enough to monitor
the uptime of their onion domain and keep it running.  Maybe we need
better tooling for that, but that's different from saying we need to
put the onus on users for webmasters failing to keep their sites
running.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171115100944</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-15 10:09:44-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

Tom Ritter &lt;tom@ritter.vg&gt; writes:

&gt; I am a big proponent of websites advertising .onions in their Alt-Srv.
&gt;
&gt;&gt; 4.2. No security/performance benefits
&gt;&gt;
&gt;&gt;    While we could come up with auto-redirect proposals that provide security
&gt;&gt;    and performance benefits, this proposal does not actually provide any of
&gt;&gt;    those.
&gt;&gt;
&gt;&gt;    As a matter of fact, the security remains the same as connecting to normal
&gt;&gt;    websites (since we trust its HTTP headers), and the performance gets worse
&gt;&gt;    since we first need to connect to the website, get its headers, and then
&gt;&gt;    also connect to the onion.
&gt;&gt;
&gt;&gt;    Still _all_ the website approaches mentioned in the "Motivation" section
&gt;&gt;    suffer from the above drawbacks, and sysadmins still come up with ad-hoc
&gt;&gt;    ways to inform users abou their onions. So this simple proposal will still
&gt;&gt;    help those websites and also pave the way forward for future auto-redirect
&gt;&gt;    techniques.
&gt;
&gt; I envision a future Onion Everywhere extension like HTTPS Everywhere
&gt; that works similar to the HSTS preload list. Crawlers validate a
&gt; websites intention to be in the Onion Everywhere extension, and we
&gt; cache the Alt-Srv information so it is used on first load.
&gt;

Yep, that's yet another cool way to do this. 

&gt;
&gt;&gt; 4.3. Alt-Svc does not do exactly what we want
&gt;&gt;
&gt;&gt;    I read in a blog post [*] that using Alt-Svc header "doesn't change the URL
&gt;&gt;    in the location bar, document.location or any other indication of where the
&gt;&gt;    resource is; this is a "layer below" the URL.". IIUC, this is not exactly
&gt;&gt;    what we want because users will not notice the onion address, they will not
&gt;&gt;    get the user education part of the proposal and their connection will still
&gt;&gt;    be slowed down.
&gt;&gt;
&gt;&gt;    I think we could perhaps change this in Tor Browser so that it rewrites the
&gt;&gt;    onion address to make it clear to people that they are now surfing the
&gt;&gt;    onionspace.
&gt;&gt;
&gt;&gt;    [*]: https://www.mnot.net/blog/2016/03/09/alt-svc
&gt;
&gt;
&gt; I am a big opponent of changing the semantics of Alt-Srv.
&gt;
&gt; We'd have to change the semantics to only do redirection for onion
&gt; domains. We'd also have to figure out how to handle cases where the
&gt; onion lives alongside non-onion (which takes precedence?) We'd also
&gt; have to maintain and carry this patch ourselves because it's pretty
&gt; antithetical to the very intent of the header and I doubt the
&gt; networking team at Mozilla would be interested in maintaining it.
&gt;
&gt; Besides those issues, it also eliminates Alt-Srv as a working option
&gt; to something *else* websites may want: to silently redirect users to
&gt; their .onion _without_ the possibility of confusion for the user by
&gt; changing the address bar. I think Alt-Srv is an option for partial
&gt; petname support in TB.
&gt;
&gt; There is a perfectly functioning mechanism for redirecting users: the
&gt; Location header. It does a lot of what you want: including temporary
&gt; or persistent redirects, updating the addess bar. Obviously it doesn't
&gt; work for all users, most don't know what .onion is, so Facebook isn't
&gt; going to deploy a .onion Location redirect even if they attempted to
&gt; detect TB users.
&gt;
&gt; But they could send a new Onion-Redirect header that is recognized and
&gt; processed (with a notification bar) by any UA that supports Tor and
&gt; wants to implement it. This header would have a viable path to uplift,
&gt; support in extensions, and even standardization. Onion Everywhere can
&gt; preload these headers too.
&gt;

Agreed, the semantics of Alt-Svc are not what we want, and it's probably
not a good idea to change it from an engineering/policy perspective.

Establishing our own header, with the same semantics as Location, seems
to be a cleaner way to approach this.

When I find some time (hopefully this or next week) I will fix up the
proposal based on received feedback.

&gt;
&gt; On 14 November 2017 at 11:25, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;&gt; 4. Drawbacks
&gt;&gt;
&gt;&gt; You missed the biggest one:
&gt;&gt;
&gt;&gt; If the onion site is down, the user will be redirected to the downed site.
&gt;&gt; (I've used onion site redirects with this issue, it's really annoying.)
&gt;&gt; Similarly, if a feature is broken on the onion site, the user will be
&gt;&gt; redirected to a site they can't use.
&gt;&gt;
&gt;&gt; Or if the user simply wants to use the non-onion site for some reason
&gt;&gt; (maybe they want a link they can share with their non-onion friends,
&gt;&gt; or maybe they don't want to reveal they're using Tor Browser).
&gt;&gt;
&gt;&gt; Users *must* have a way to disable the redirect on every redirect.
&gt;
&gt; Right now, I don't agree with this. (I reserve the right to change my
&gt; mind.) Websites can already redirect users to broken links through
&gt; mistakes. Why is "my onion site is not running" a scenario we want to
&gt; code around but "my subdomain is not running" is not? If a website
&gt; wants to redirect users they should be responsible enough to monitor
&gt; the uptime of their onion domain and keep it running.  Maybe we need
&gt; better tooling for that, but that's different from saying we need to
&gt; put the onus on users for webmasters failing to keep their sites
&gt; running.
&gt;

Agreed. As long as onion services provide a consistent service,
sysadmins should be responsible for maintaining the mapping and
availability of their services.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219003812</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-19 00:38:12-0400</timestampReceived><subject>[tor-dev] Bandwidth Authority Progress</subject><body>

[Attachment #2 (multipart/signed)]


Hi asn,

Original Subject: Re: [tor-project] Meeting notes, network team meeting, 18 Dec

&gt; On 19 Dec 2017, at 07:28, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt;  - Met with David Stainton, Moritz and others. Talked about relay load
&gt;    balancing and bandwidth dirauths. People are sad about the state of the
&gt;    network: some relays are overloaded while others idle, many overloaded
&gt;    relays cant even establish circuits to each other. Need to do something
&gt;    about it: deploy bwscanner and start thinking about peerflow. What about
&gt;    isis' bridge bandwidth scanner?

Can you tell us a bit more about this meeting?
What can people do if they want to be involved?
When is the next meeting, or how can people find out about it?

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo4X3QACgkQdA2eOQJS
cqLENxAAwydOeBpwxHDIVMu0bCpCoeqe108eekCpywVX+B3/UN7/BKsKF+r6YHwd
pekdxVpDQOCPe/2MYcGJkj7t8g2s5q4X8iNqEfah305+Gg71IO9yjbeKsq/3bcq4
LLX9B6VPrctCT+Qe4Ki/U3yaB/Q2r77w3QKLf/vi6ZvYDFVF2Nd3K62Qwdqs3KT2
T61yX6qSyxivc4XMKVyGGhdfGgnoqfZil5G0H+ePlm0e3vqBmyYKtGH0EIp2Q90N
Q7GWQKgMykcZTh6zRXx5gPj8OVY3S6/aOA307bJisiwF+DKh30Zp95h2tlPFyakW
kZzxQzb6KpRT9hQ5XzOFc5mL6q4zAQuXeeYo5MqdFo0rv9oDoNGO0PXvftbaGong
5OHmkr2Mye9KPbhjDkr/a7Z2dUkGvzenb5asdA5IvnRYZOcMsFtGCNGjh6SzDTOI
QUfg6DZ0W2zONYNLmtJNpAYO3mbWAwJ9sczwNrXECKbQii1Sh3udgtYKQQC9N56t
6+gDp5L/boJp2R2m0FMrJlAyFX308XXgjJzqy+b4mdkkmf/HyUZN1vQGNzJm0VUW
y5DAEByVBKwLxDObIOd0rEvDNzYnqnj5Te3HXYFIua7Bwb4o/aD38BxkxH/fRyni
FpxzMXSaM6dk9NjxODu55Kzbg/NobjQTMtonhDRYHectcGxVHvw=
=lQDZ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219124447</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-12-19 12:44:47-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth Authority Progress</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt; Hi asn,
&gt; 
&gt; Original Subject: Re: [tor-project] Meeting notes, network team meeting, 18 Dec
&gt; 
&gt; &gt; On 19 Dec 2017, at 07:28, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; - Met with David Stainton, Moritz and others. Talked about relay load
&gt; &gt; balancing and bandwidth dirauths. People are sad about the state of the
&gt; &gt; network: some relays are overloaded while others idle, many overloaded
&gt; &gt; relays cant even establish circuits to each other. Need to do something
&gt; &gt; about it: deploy bwscanner and start thinking about peerflow. What about
&gt; &gt; isis' bridge bandwidth scanner?
&gt; 
&gt; Can you tell us a bit more about this meeting?
&gt; What can people do if they want to be involved?
&gt; When is the next meeting, or how can people find out about it?
&gt; 

Hey teor,

thanks for following through.

The "meeting" was impromptu and IRL because we all happened to be at the
same place. There is no next meeting and it's up to us (Tor/network
team) to figure out what are the next steps here.

This week I did some digging to explore the various possible ways
forward also based on your email here: \
https://www.mail-archive.com/tor-dev@lists.torproject.org/msg09912.html Here are my \
findings:

Possibility a) Develop peerflow and deploy it in place of torflow

   Peerflow is an exciting and secure bandwidth measurement system
   published in PETS 2017: https://ohmygodel.com/publications/peerflow-popets2017.pdf

   Unfortunately, it seems quite complicated to develop from scratch and
   will probably require _significant_ engineering time to actually make
   it a deployed reality (understand, develop, test, deploy). This is
   probably the solution we would like to pursue if we had a grant and a
   dedicated developer.

Possibility b) Finalize bwscanner and deploy in place of torflow

   bwscanner is a project by Aaron/David/Donncha: and can be found here:
   https://github.com/TheTorProject/bwscanner

   It seems to implement the torflow design (2-hop circs &amp;&amp; buckets) but
   in a cleaner and better codebase. From what I understand, the main
   part of the project is done, but there has been minimal testing on
   the real network (there are unittests tho) and also the final output
   file with the bandwidth weights has not been completely finalized.

   This project is not quite there yet, and will require some
   non-trivial engineering time, but it's probably a much easier task
   compared to peerflow due to the design being more understood and
   already coded. I think 2-3 weeks of developer time could be quite
   fruitful here. I also heard that some bw auth operators are eager to
   run bwscanner instead of torflow on their setup in January.

Possibility c) Adapt the bridge bw scanner that is currently being developed

   Apparently isis and another developer are currently writing a bridge
   bandwidth scanner for bridgedb, that could in theory be extended to
   scan the whole network. They are currently writing some sort of Rust
   library that will be used by the scanner, and the project is ETA
   around March 2018. The whole development process is pretty opaque so
   I have no idea what's going on. Also, there probably needs to be
   considerable work to extend it from a simple bridge scanner to a real
   relay scanner, and the final result will probably look like bwscanner
   above.

Currently my intuition is to work on (b) above, while also preparing the
ground for (a) which seems to be The Right Thing.

I'm not sure what's the right way forward here in terms of project
management, since the network team seems overloaded and I haven't heard
of anyone willing to take this on...

Ideally we would probably apply for some sort of grant on this work so
that some actual developer time is allocated. I think this is definitely
fundable work since it deeply impacts the *performance* and security of
the Tor network, and basically the network has no chance of surviving in
greater loads if the status quo persists.

I'll try to think more about this problem in the future, these are just
my thoughts from a few hours of digging.  

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219190628</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-12-19 19:06:28-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth Authority Progress</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; The "meeting" was impromptu and IRL because we all happened to be at
&gt; the same place. There is no next meeting and it's up to us
&gt; (Tor/network team) to figure out what are the next steps here.

I want to help.
Anyone please bug me on IRC for any Python etc help required to make
bwauth/scanners better. I don't have enough volunteer cycles right now
to "take over" bwscanner entirely though.

&gt;    This project is not quite there yet, and will require some
&gt;    non-trivial engineering time, but it's probably a much easier task
&gt;    compared to peerflow due to the design being more understood and
&gt;    already coded.

I'm not convinced this part is completely accurate ;) because at TorDev
MTL it seems to me the consensus was that nobody actually knows what
torflow is doing and so answering the question "is bwscanner doing the
same thing" is approximately NP-hard.

&gt; I think 2-3 weeks of developer time could be quite fruitful here. I
&gt; also heard that some bw auth operators are eager to run bwscanner
&gt; instead of torflow on their setup in January.

Wooo!
(I think the best path to answering "does bwscanner do the same thing as
torflow" is to Run It And See...) If any of these parties are having
problems deploying bwscanner this is probably something I can help with.

&gt; Currently my intuition is to work on (b) above, while also preparing the
&gt; ground for (a) which seems to be The Right Thing.

+1
I think the next step for a) isn't "implement it", but "write a spec for
it" instead.

&gt; Ideally we would probably apply for some sort of grant on this work so
&gt; that some actual developer time is allocated. I think this is definitely
&gt; fundable work since it deeply impacts the *performance* and security of
&gt; the Tor network [..]

+5

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219210012</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-19 21:00:12-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth Authority Progress</subject><body>


On 20 Dec 2017, at 06:06, meejah &lt;meejah@meejah.ca&gt; wrote:

&gt;&gt; This project is not quite there yet, and will require some
&gt;&gt;   non-trivial engineering time, but it's probably a much easier task
&gt;&gt;   compared to peerflow due to the design being more understood and
&gt;&gt;   already coded.
&gt; 
&gt; I'm not convinced this part is completely accurate ;) because at TorDev
&gt; MTL it seems to me the consensus was that nobody actually knows what
&gt; torflow is doing and so answering the question "is bwscanner doing the
&gt; same thing" is approximately NP-hard.

I have some idea what torflow is doing, in a broad sense:
* launch 2 tor clients
* repeat as often as possible, running 9 different scanners:
    * split relays into buckets by bandwidth percentile
    * build two hop paths with a relay and exit from relays in the bucket
    * download a file from a bandwidth server, choose the size based on the bucket
    * measure how long it takes
    * store the results in a database
* aggregate the results hourly:
    * produce a consensus weight to advertised bandwidth ratio
    * using a decaying weighted average
    * and some form of feedback (PID) control
    * and dump it to a file
Then authorities read this file and include it in their votes.

I suspect that Mike Perry may remember more detail, or may want to
correct my summary, as he wrote most of torflow (I think?)

My conclusion at the Montreal meeting was that we don't have a
detailed spec (see below). So that makes it hard to tell if:
* torflow does what we want it to do
* the new bwauth project does what we want it to do
* they are similar enough for a staged or once-off transition

&gt;&gt; I think 2-3 weeks of developer time could be quite fruitful here. I
&gt;&gt; also heard that some bw auth operators are eager to run bwscanner
&gt;&gt; instead of torflow on their setup in January.
&gt; 
&gt; Wooo!
&gt; (I think the best path to answering "does bwscanner do the same thing as
&gt; torflow" is to Run It And See...) If any of these parties are having
&gt; problems deploying bwscanner this is probably something I can help with.

It doesn't produce an output file in the same format as torflow, so we need
to specify (see below) and implement that part first.

Otherwise, we would not have any results to compare.

&gt;&gt; Currently my intuition is to work on (b) above, while also preparing the
&gt;&gt; ground for (a) which seems to be The Right Thing.
&gt; 
&gt; +1
&gt; I think the next step for a) isn't "implement it", but "write a spec for
&gt; it" instead.

+1

Let's start by specifying what tor directory authorities expect from the
file format.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171213015811</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-13 01:58:11-0400</timestampReceived><subject>Re: [tor-dev] Help Wanted: Fallback Directory Update</subject><body>

[Attachment #2 (multipart/signed)]


Hi All,

Dominique, pastly, and Hello71 have offered to help out with this.
(I don't have Hello71's email, I'll ping them on IRC.)

Let's start by fixing up some of the code, and asking relay operators
if they want to be on the list.

&gt; On 11 Dec 2017, at 14:51, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; ...
&gt; Fallback directory mirrors help clients reach the Tor network.
&gt; 
&gt; We need to rebuild the list every so often when their details change.
&gt; (We have an automated check for 25% failure, and it just triggered.)
&gt; 
&gt; ...

pastly, I drafted an email for step 0, can you check it makes sense?
(I used to send out way too much info. I'm trying to be brief.)

https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors#ATypicalRelease


&gt; 0. Ask operators to opt-in stable relays as fallback directory mirrors
&gt; If they are on the whitelist already, they don't need to do anything.
&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/22527
&gt; File:   https://gitweb.torproject.org/tor.git/tree/scripts/maint/fallback.whitelist

Anyone can do step 1, it's a copy-and-paste job with git and a config file:

&gt; 1. Update the fallback whitelist with new and changed relay details
&gt; Tickets: https://trac.torproject.org/projects/tor/ticket/22321
&gt; https://trac.torproject.org/projects/tor/ticket/22527
&gt; File:    tor/scripts/maint/fallback.whitelist

Dominique, do you want to do Step 2?
It's a one-line patch that would be a good intro to Tor's bug tracker and git.
Please base it on the "master" branch.

&gt; 2. Update updateFallbackDirs.py to have a CONSENSUS_EXPIRY_TOLERANCE of 0.
&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/20942
&gt; File:   tor/scripts/maint/updateFallbackDirs.py

There are two more optional tasks if someone likes python:

Mark the fallbacks that have extra-info descriptors, so stem can use them
https://trac.torproject.org/projects/tor/ticket/22759

Add fallback nicknames to the file, so stem can use them
https://trac.torproject.org/projects/tor/ticket/24600

&gt; 3. Run updateFallbackDirs.py with the new whitelist and CONSENSUS_EXPIRY_TOLERANCE.
&gt; You'll need a decent network connection for this.
&gt; Please attach the script logs to the trac ticket.
&gt; Command: tor/scripts/maint/updateFallbackDirs.py &gt; src/or/fallback_dirs.inc

And there's another step here I forgot:

3a. Look at the warnings from the script to see which addresses have changed.
    Contact operators to see if the new addresses are permanent.
    Then repeat steps 1 and 3 with the new details.
    Ticket: https://trac.torproject.org/projects/tor/ticket/22321

&gt; 4. Write a changes file
&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/22271
&gt; Draft:
&gt; 
&gt; o Minor features (fallback directory list):
&gt; - Replace the 151 fallbacks originally introduced in Tor 0.3.1.3-alpha in
&gt; May 2017 (of which ~111 were still functional) with a list of
&gt; NNN fallbacks (NNN new, NNN unchanged, NNN removed) generated in December
&gt; 2017. Resolves ticket 22271.
&gt; 
&gt; There are some commands that count fallback changes here:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors#FormattingChangesFiles
&gt; 

Once this is done, the list gets backported to 0.2.8 and later.
But the rest of the changes go into master.

&gt; 5. Announce the new list on tor-relays@

Example: https://lists.torproject.org/pipermail/tor-relays/2017-May/012285.html

&gt; 6. Tell the relay search maintainer that the list has changed

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlowiTMACgkQdA2eOQJS
cqLP8Q/7BFzfjSb5vvDaWBgvbJNy/AyOp3+6vQ+dUyY8aI/astv1eQ8AAZ2Z50QM
jHqk6D8TB+AN1fvWGWbVX5xZ5x7UHHXXgzaMb2u1Dv5JA8GZL3CqyxCx/9s2yOJw
y0D0gq+VZHutfWChoXUHjf2BDwZht6ny+f1QHCB8hvdokm4Z9SiVU+x3FNdhvPhT
VGrzMwsS+oq/gHm8QiQzouX/P8TmZGhAZv1aw+V/pzvNUhx6xCsAHpS54j4aZUu7
UATrmsleySimaFxMspugKIXVlOrxHLbUXvSev/AVyQma7q4tYiYvHPD6L90m7oRg
i1bqbnU1yeWNgblOUgCVT+8Swdv2JkxYI1tuIAGC0GQTDLxWbkgFRzeboaydvxom
lYkD65TJI3N93qGQPc9GdEsp8Zk/yFq6YqB+kgeMK0EF9UqM4UfT5Fcf2ce4fR0b
M+gc83LeDutBwf3YVP+rt7a2PxrbdCIf+SZ4b61jWpCoDNbLrrG1zVsQQ4qamk6r
9/KlV87DJm/xbJWF63IPfCCiNGkGqnufG2RGQ9LnaER+LjXYsOX84wPkNtVFJcpL
GmBc5iCSRtGZ7CYwe50axsBTJhACRaRiIKwmO2qS9qPQZPntea6s4KDPeHZxwVB6
kyXWoDSNKvKaJtowncTRq0+WtWNCFK2LW0MwzvbXj/pePGQMc4U=
=M87h
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171213020402</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-13 02:04:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal 288: Privacy-Preserving Statistics with Privcount in Tor (Shamir version)</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 2 Dec 2017, at 07:26, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 288-privcount-with-shamir.txt Title: Privacy-Preserving Statistics
&gt; with Privcount in Tor (Shamir version) Author: Nick Mathewson, Tim
&gt; Wilson-Brown, Aaron Johnson Created: 1-Dec-2017 Supercedes: 280 Status: Draft
&gt; 
&gt; 0. Acknowledgments
&gt; 
&gt;  Tariq Elahi, George Danezis, and Ian Goldberg designed and implemented the
&gt;  PrivEx blinding scheme. Rob Jansen and Aaron Johnson extended PrivEx's
&gt;  differential privacy guarantees to multiple counters in PrivCount:
&gt; 
&gt;  https://github.com/privcount/privcount/blob/master/README.markdown#research-background
&gt; 
&gt;  Rob Jansen and Tim Wilson-Brown wrote the majority of the experimental
&gt;  PrivCount code, based on the PrivEx secret-sharing variant. This
&gt;  implementation includes contributions from the PrivEx authors, and others:
&gt; 
&gt;  https://github.com/privcount/privcount/blob/master/CONTRIBUTORS.markdown
&gt; 
&gt;  This research was supported in part by NSF grants CNS-1111539, CNS-1314637,
&gt;  CNS-1526306, CNS-1619454, and CNS-1640548.
&gt; 
&gt;  The use of a Shamir secret-sharing-based approach is due to a suggestion by
&gt;  Aaron Johnson (iirc); Carolin Zöbelein did some helpful analysis here.
&gt; 
&gt;  Aaron Johnson and Tim Wilson-Brown made improvements to the draft proposal.
&gt; 
&gt; 1. Introduction and scope
&gt; 
&gt;  PrivCount is a privacy-preserving way to collect aggregate statistics about
&gt;  the Tor network without exposing the statistics from any single Tor relay.
&gt; 
&gt;  This document describes the behavior of the in-Tor portion of the PrivCount
&gt;  system.  It DOES NOT describe the counter configurations, or any other
&gt;  parts of the system. (These will be covered in separate proposals.)
&gt; 
&gt; 2. PrivCount overview
&gt; 
&gt;  Here follows an oversimplified summary of PrivCount, with enough
&gt;  information to explain the Tor side of things.  The actual operation of the
&gt;  non-Tor components is trickier than described below.
&gt; 
&gt;  In PrivCount, a Data Collector (DC, in this case a Tor relay) shares
&gt;  numeric data with N different Tally Reporters (TRs). (A Tally Reporter
&gt;  performs the summing and unblinding roles of the Tally Server and Share
&gt;  Keeper from experimental PrivCount.)
&gt; 
&gt;  All N Tally Reporters together can reconstruct the original data, but no
&gt;  (N-1)-sized subset of the Tally Reporters can learn anything about the
&gt;  data.
&gt; 
&gt;  (In reality, the Tally Reporters don't reconstruct the original data at
&gt;  all! Instead, they will reconstruct a _sum_ of the original data across all
&gt;  participating relays.)
&gt; 
&gt;  In brief, the system works as follow:
&gt; 
&gt;  To share data, for each counter value V to be shared, the Data Collector
&gt;  first adds Gaussian noise to V in order to produce V', uses (K,N) Shamir
&gt;  secret-sharing to generate N shares of V' (K&lt;=N, K being the reconstruction
&gt;  threshold), encrypts each share to a different Tally Reporter, and sends
&gt;  each encrypted share to the Tally Reporter it is encrypted for.
&gt; 
&gt;  The Tally Reporters then agree on the set S of Data Collectors that sent
&gt;  data to all of them, and each Tally Reporter forms a share of the aggregate
&gt;  value by decrypting the shares it received from the Data Collectors in S
&gt;  and adding them together. The Tally Reporters then, collectively, perform
&gt;  secret reconstruction, thereby learning the sum of all the different values
&gt;  V'.
&gt; 
&gt;  The use of Shamir secret sharing lets us survive up to N-K crashing TRs.
&gt;  Waiting until the end to agree on a set S of surviving relays lets us
&gt;  survive an arbitrary number of crashing DCs. In order to prevent bogus data
&gt;  from corrupting the tally, the Tally Reporters can perform the aggregation
&gt;  step multiple times, each time proceeding with a different subset of S and
&gt;  taking the median of the resulting values.
&gt; 
&gt;  Relay subsets should be chosen at random to avoid relays manipulating their
&gt;  subset membership(s). If an shared random value is required, all relays
&gt;  must submit their results, and then the next revealed shared random value
&gt;  can be used to select relay subsets. (Tor's shared random value can be
&gt;  calculated as soon as all commits have been revealed. So all relay results
&gt;  must be received *before* any votes are cast in the reveal phase for that
&gt;  shared random value.)
&gt; 
&gt;  Below we describe the algorithm in more detail, and describe the data
&gt;  format to use.
&gt; 
&gt; ...

Chelsea and I had a conversation on another list about Prio.

Prio is similar to PrivCount, but would allow the Data Collectors to
prove that their responses are in range, using a zero-knowledge proof
technique.

I'm posting this here with her permission:

&gt; From: teor &lt;teor2345@gmail.com&gt;
&gt; Date: 13 December 2017 at 09:26:45 AEDT
&gt; 
&gt;&gt; On 13 Dec 2017, at 03:02, chelsea komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt;&gt; 
&gt;&gt; Hi All,
&gt;&gt; 
&gt;&gt; This came up in a slack channel I am a part of, and it seems relevant to
&gt;&gt; PrivCount work- I wanted to pass it along.
&gt;&gt; 
&gt;&gt; https://crypto.stanford.edu/prio/
&gt;&gt; 
&gt;&gt; "Prio is a privacy-preserving system for the collection of aggregate
&gt;&gt; statistics. Each Prio client holds a private data value (e.g., its
&gt;&gt; current location), and a small set of servers compute statistical
&gt;&gt; functions over the values of all clients (e.g., the most popular
&gt;&gt; location). As long as at least one server is honest, the Prio servers
&gt;&gt; learn nearly nothing about the clients' private data, except what they
&gt;&gt; can infer from the aggregate statistics that the system computes"
&gt; 
&gt; I read the paper. I'm sure I didn't understand it all.
&gt; It's very new, but it shows promise.
&gt; And there's no real-world (even experimental) implementation yet.
&gt; 
&gt; Maybe we can architect PrivCount in Tor so it's possible to upgrade
&gt; to a system like this in future. In particular, we seem to be using
&gt; similar primitives to Prio, so that's useful.

Are there things we can change in the current proposal to make it easier
to upgrade to a system like Prio in future?

Perhaps it's enough to version all our data exchange formats.
I'm not sure if we should lock into one particular scheme, when
something better might come along.

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlowipIACgkQdA2eOQJS
cqIcqRAAoGxlfGkHV8wAG2GDjpGoH8yZZR4Y04IFSscDl1WY7knJ8Op5h7rdFwY5
qRQUp29HBzAz9XeZsG+ESu4KWM/8IhrLu51UIYHGX2uCqoDHJ4r+GpStnhJ3SisJ
aEiDS+uUNcIhM/7+6MGwffg3heaMBVMwvMSPbmllLTy4StMATwJXCwfOwXHBLzZS
ypj9IMr0BSBh2eODbliF40kPjlzqPQpJLK5Klq05xGDxhqXT7cg8aChWm8XgmqJC
opFEun8x+KCCWo7VJScLm8yqmU3uQaKYThOrQ1u3S63cshdhHcEcjjaqRXW2CaP6
VibTJ0NFTeCKGkJguzazXl0wDXG3qi4AUCGfgKk+M2bDT9S/Wu/4tGcMAQ93AVuy
Z1xG7fmQJO1pBNs/KMS3qcasO7zBoi0J4HXjiNihA8WuAMyu9mqXOuc6JweXZtAW
L/BHfhjYsAH0E4b52AycNsjfONq7dQlkRrkxdpf2YGODKt9/abY5IrkMTfOD8GgF
xRJCVktn4dnlLdDpvPkmBHEPTp1bdnPzpwSt1ByCtH8iAKCj3sgI6nY+WQVPNmqW
288vtfUrtkXzoJRsZ9GxeAeihrZmy2bPHQ/9VLOWwLhupPArG/C9o5Mq4jvD41fK
8ga9eMazUez5JL02NYAMR3eHv0LXaLClD/GUaTvb/rv39Q0/k58=
=2mF/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214145418</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-12-14 14:54:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 288: Privacy-Preserving Statistics with Privcount in Tor (Shamir version)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tim,

Prio allows a client to prove an arbitrary statement about a secret-shared input \
(expressed as as a circuit on that input) to a set of servers. This could provide \
some robustness against malicious inputs. However, it is not as much protection as we \
might really need because the circuit is only over one input, which prevents us from \
making relative comparisons across inputs. For example, Prio can provide a guarantee \
that an input value is at most some max value, but it can't guarantee that a value \
isn't over 1.5 times the max value of the *other* inputs. Identifying "outliers" \
relative to other inputs is important if you don't know what the inputs are supposed \
to look like, which in Tor would be the case when "normal" inputs change due to \
underlying changes in network and user behavior.

Also, in Prio, servers use a generic secure multi-party computation (MPC) protocol to \
compute the circuits. If Tor is going to do that, why not just run a generic MPC \
protocol over all of the inputs? Doing so would allow Tor statistics aggregations to \
be robust to inputs that are likely "incorrect" given the values of the other inputs \
(see "robust statistics" for a wide variety of useful such computations, including \
for example median, trimmed mean, least trimmed squares, maximum likelihood \
estimation). Applying MPC over all inputs would only require implementing the \
"offline" phase of the computation (e.g. producing the "multiplication triples", \
which are supplied by the client in Prio). There are reasonably efficient protocols \
for doing so, including SDPZ and TinyOT [1].

Best,
Aaron

[0] Ivan Damgard and Valerio Pastro and Nigel P. Smart and Sarah Zakarias, \
"Multiparty Computation from Somewhat Homomorphic Encryption", CRYPTO 2012, \
&lt;http://eprint.iacr.org/2011/535 &lt;http://eprint.iacr.org/2011/535&gt;&gt;.

[1] Enrique Larraia and Emmanuela Orsini and Nigel P. Smart, "Dishonest majority \
multi-party computation for binary circuits", CRYPTO 2014, \
&lt;https://eprint.iacr.org/2015/472 &lt;https://eprint.iacr.org/2015/472&gt;&gt;.

&gt; On Dec 12, 2017, at 9:04 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; &gt; 
&gt; &gt; On 2 Dec 2017, at 07:26, Nick Mathewson &lt;nickm@torproject.org \
&gt; &gt; &lt;mailto:nickm@torproject.org&gt;&gt; wrote: 
&gt; &gt; Filename: 288-privcount-with-shamir.txt Title: Privacy-Preserving Statistics
&gt; &gt; with Privcount in Tor (Shamir version) Author: Nick Mathewson, Tim
&gt; &gt; Wilson-Brown, Aaron Johnson Created: 1-Dec-2017 Supercedes: 280 Status: Draft
&gt; &gt; 
&gt; &gt; 0. Acknowledgments
&gt; &gt; 
&gt; &gt; Tariq Elahi, George Danezis, and Ian Goldberg designed and implemented the
&gt; &gt; PrivEx blinding scheme. Rob Jansen and Aaron Johnson extended PrivEx's
&gt; &gt; differential privacy guarantees to multiple counters in PrivCount:
&gt; &gt; 
&gt; &gt; https://github.com/privcount/privcount/blob/master/README.markdown#research-background
&gt; &gt;  
&gt; &gt; Rob Jansen and Tim Wilson-Brown wrote the majority of the experimental
&gt; &gt; PrivCount code, based on the PrivEx secret-sharing variant. This
&gt; &gt; implementation includes contributions from the PrivEx authors, and others:
&gt; &gt; 
&gt; &gt; https://github.com/privcount/privcount/blob/master/CONTRIBUTORS.markdown
&gt; &gt; 
&gt; &gt; This research was supported in part by NSF grants CNS-1111539, CNS-1314637,
&gt; &gt; CNS-1526306, CNS-1619454, and CNS-1640548.
&gt; &gt; 
&gt; &gt; The use of a Shamir secret-sharing-based approach is due to a suggestion by
&gt; &gt; Aaron Johnson (iirc); Carolin Zöbelein did some helpful analysis here.
&gt; &gt; 
&gt; &gt; Aaron Johnson and Tim Wilson-Brown made improvements to the draft proposal.
&gt; &gt; 
&gt; &gt; 1. Introduction and scope
&gt; &gt; 
&gt; &gt; PrivCount is a privacy-preserving way to collect aggregate statistics about
&gt; &gt; the Tor network without exposing the statistics from any single Tor relay.
&gt; &gt; 
&gt; &gt; This document describes the behavior of the in-Tor portion of the PrivCount
&gt; &gt; system.  It DOES NOT describe the counter configurations, or any other
&gt; &gt; parts of the system. (These will be covered in separate proposals.)
&gt; &gt; 
&gt; &gt; 2. PrivCount overview
&gt; &gt; 
&gt; &gt; Here follows an oversimplified summary of PrivCount, with enough
&gt; &gt; information to explain the Tor side of things.  The actual operation of the
&gt; &gt; non-Tor components is trickier than described below.
&gt; &gt; 
&gt; &gt; In PrivCount, a Data Collector (DC, in this case a Tor relay) shares
&gt; &gt; numeric data with N different Tally Reporters (TRs). (A Tally Reporter
&gt; &gt; performs the summing and unblinding roles of the Tally Server and Share
&gt; &gt; Keeper from experimental PrivCount.)
&gt; &gt; 
&gt; &gt; All N Tally Reporters together can reconstruct the original data, but no
&gt; &gt; (N-1)-sized subset of the Tally Reporters can learn anything about the
&gt; &gt; data.
&gt; &gt; 
&gt; &gt; (In reality, the Tally Reporters don't reconstruct the original data at
&gt; &gt; all! Instead, they will reconstruct a _sum_ of the original data across all
&gt; &gt; participating relays.)
&gt; &gt; 
&gt; &gt; In brief, the system works as follow:
&gt; &gt; 
&gt; &gt; To share data, for each counter value V to be shared, the Data Collector
&gt; &gt; first adds Gaussian noise to V in order to produce V', uses (K,N) Shamir
&gt; &gt; secret-sharing to generate N shares of V' (K&lt;=N, K being the reconstruction
&gt; &gt; threshold), encrypts each share to a different Tally Reporter, and sends
&gt; &gt; each encrypted share to the Tally Reporter it is encrypted for.
&gt; &gt; 
&gt; &gt; The Tally Reporters then agree on the set S of Data Collectors that sent
&gt; &gt; data to all of them, and each Tally Reporter forms a share of the aggregate
&gt; &gt; value by decrypting the shares it received from the Data Collectors in S
&gt; &gt; and adding them together. The Tally Reporters then, collectively, perform
&gt; &gt; secret reconstruction, thereby learning the sum of all the different values
&gt; &gt; V'.
&gt; &gt; 
&gt; &gt; The use of Shamir secret sharing lets us survive up to N-K crashing TRs.
&gt; &gt; Waiting until the end to agree on a set S of surviving relays lets us
&gt; &gt; survive an arbitrary number of crashing DCs. In order to prevent bogus data
&gt; &gt; from corrupting the tally, the Tally Reporters can perform the aggregation
&gt; &gt; step multiple times, each time proceeding with a different subset of S and
&gt; &gt; taking the median of the resulting values.
&gt; &gt; 
&gt; &gt; Relay subsets should be chosen at random to avoid relays manipulating their
&gt; &gt; subset membership(s). If an shared random value is required, all relays
&gt; &gt; must submit their results, and then the next revealed shared random value
&gt; &gt; can be used to select relay subsets. (Tor's shared random value can be
&gt; &gt; calculated as soon as all commits have been revealed. So all relay results
&gt; &gt; must be received *before* any votes are cast in the reveal phase for that
&gt; &gt; shared random value.)
&gt; &gt; 
&gt; &gt; Below we describe the algorithm in more detail, and describe the data
&gt; &gt; format to use.
&gt; &gt; 
&gt; &gt; ...
&gt; 
&gt; Chelsea and I had a conversation on another list about Prio.
&gt; 
&gt; Prio is similar to PrivCount, but would allow the Data Collectors to
&gt; prove that their responses are in range, using a zero-knowledge proof
&gt; technique.
&gt; 
&gt; I'm posting this here with her permission:
&gt; 
&gt; &gt; From: teor &lt;teor2345@gmail.com &lt;mailto:teor2345@gmail.com&gt;&gt;
&gt; &gt; Date: 13 December 2017 at 09:26:45 AEDT
&gt; &gt; 
&gt; &gt; &gt; On 13 Dec 2017, at 03:02, chelsea komlo &lt;me@chelseakomlo.com \
&gt; &gt; &gt; &lt;mailto:me@chelseakomlo.com&gt;&gt; wrote: 
&gt; &gt; &gt; Hi All,
&gt; &gt; &gt; 
&gt; &gt; &gt; This came up in a slack channel I am a part of, and it seems relevant to
&gt; &gt; &gt; PrivCount work- I wanted to pass it along.
&gt; &gt; &gt; 
&gt; &gt; &gt; https://crypto.stanford.edu/prio/ &lt;https://crypto.stanford.edu/prio/&gt;
&gt; &gt; &gt; 
&gt; &gt; &gt; "Prio is a privacy-preserving system for the collection of aggregate
&gt; &gt; &gt; statistics. Each Prio client holds a private data value (e.g., its
&gt; &gt; &gt; current location), and a small set of servers compute statistical
&gt; &gt; &gt; functions over the values of all clients (e.g., the most popular
&gt; &gt; &gt; location). As long as at least one server is honest, the Prio servers
&gt; &gt; &gt; learn nearly nothing about the clients' private data, except what they
&gt; &gt; &gt; can infer from the aggregate statistics that the system computes"
&gt; &gt; 
&gt; &gt; I read the paper. I'm sure I didn't understand it all.
&gt; &gt; It's very new, but it shows promise.
&gt; &gt; And there's no real-world (even experimental) implementation yet.
&gt; &gt; 
&gt; &gt; Maybe we can architect PrivCount in Tor so it's possible to upgrade
&gt; &gt; to a system like this in future. In particular, we seem to be using
&gt; &gt; similar primitives to Prio, so that's useful.
&gt; 
&gt; Are there things we can change in the current proposal to make it easier
&gt; to upgrade to a system like Prio in future?
&gt; 
&gt; Perhaps it's enough to version all our data exchange formats.
&gt; I'm not sure if we should lock into one particular scheme, when
&gt; something better might come along.
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim / teor
&gt; 
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev \
&gt; &lt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&gt;


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hi Tim,&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Prio allows a client to prove an arbitrary statement about a secret-shared \
input (expressed as as a circuit on that input) to a set of servers. This could \
provide some robustness against malicious inputs. However, it is not as much \
protection as we might really need because the circuit is only over one input, which \
prevents us from making relative comparisons across inputs. For example, Prio can \
provide a guarantee that an input value is at most some max value, but it can't \
guarantee that a value isn't over 1.5 times the max value of the *other* inputs. \
Identifying "outliers" relative to other inputs is important if you don't know what \
the inputs are supposed to look like, which in Tor would be the case when "normal" \
inputs change due to underlying changes in network and user behavior.&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Also, in Prio, servers use a generic secure \
multi-party computation (MPC) protocol to compute the circuits. If Tor is going to do \
that, why not just run a generic MPC protocol over all of the inputs? Doing so would \
allow Tor statistics aggregations to be robust to inputs that are likely "incorrect" \
given the values of the other inputs (see "robust statistics" for a wide variety of \
useful such computations, including for example median, trimmed mean, least trimmed \
squares, maximum likelihood estimation). Applying MPC over all inputs would only \
require implementing the "offline" phase of the computation (e.g. producing the \
"multiplication triples", which are supplied by the client in Prio). There are \
reasonably efficient protocols for doing so, including SDPZ and TinyOT [1].&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;[0] Ivan Damgard and \
Valerio Pastro and Nigel P. Smart and Sarah Zakarias, "Multiparty Computation \
from Somewhat Homomorphic Encryption", CRYPTO 2012, &lt;&lt;a \
href="http://eprint.iacr.org/2011/535" \
class=""&gt;http://eprint.iacr.org/2011/535&lt;/a&gt;&gt;.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;[1] Enrique Larraia and Emmanuela Orsini and Nigel \
P. Smart, "Dishonest majority multi-party computation for binary \
circuits", CRYPTO 2014, &lt;&lt;a href="https://eprint.iacr.org/2015/472" \
class=""&gt;https://eprint.iacr.org/2015/472&lt;/a&gt;&gt;.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On \
Dec 12, 2017, at 9:04 PM, teor &lt;&lt;a href="mailto:teor2345@gmail.com" \
class=""&gt;teor2345@gmail.com&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;blockquote type="cite" \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;br class="Apple-interchange-newline"&gt;On 2 \
Dec 2017, at 07:26, Nick Mathewson &lt;&lt;a href="mailto:nickm@torproject.org" \
class=""&gt;nickm@torproject.org&lt;/a&gt;&gt; wrote:&lt;br class=""&gt;&lt;br class=""&gt;Filename: \
288-privcount-with-shamir.txt Title: Privacy-Preserving Statistics&lt;br class=""&gt;with \
Privcount in Tor (Shamir version) Author: Nick Mathewson, Tim&lt;br \
class=""&gt;Wilson-Brown, Aaron Johnson Created: 1-Dec-2017 Supercedes: 280 Status: \
Draft&lt;br class=""&gt;&lt;br class=""&gt;0. Acknowledgments&lt;br class=""&gt;&lt;br class=""&gt;Tariq \
Elahi, George Danezis, and Ian Goldberg designed and implemented the&lt;br \
class=""&gt;PrivEx blinding scheme. Rob Jansen and Aaron Johnson extended PrivEx's&lt;br \
class=""&gt;differential privacy guarantees to multiple counters in PrivCount:&lt;br \
class=""&gt;&lt;br class=""&gt;&lt;a \
href="https://github.com/privcount/privcount/blob/master/README.markdown#research-background" \
class=""&gt;https://github.com/privcount/privcount/blob/master/README.markdown#research-background&lt;/a&gt;&lt;br \
class=""&gt;&lt;br class=""&gt;Rob Jansen and Tim Wilson-Brown wrote the majority of the \
experimental&lt;br class=""&gt;PrivCount code, based on the PrivEx secret-sharing variant. \
This&lt;br class=""&gt;implementation includes contributions from the PrivEx authors, and \
others:&lt;br class=""&gt;&lt;br \
class=""&gt;https://github.com/privcount/privcount/blob/master/CONTRIBUTORS.markdown&lt;br \
class=""&gt;&lt;br class=""&gt;This research was supported in part by NSF grants CNS-1111539, \
CNS-1314637,&lt;br class=""&gt;CNS-1526306, CNS-1619454, and CNS-1640548.&lt;br class=""&gt;&lt;br \
class=""&gt;The use of a Shamir secret-sharing-based approach is due to a suggestion \
by&lt;br class=""&gt;Aaron Johnson (iirc); Carolin Zöbelein did some helpful analysis \
here.&lt;br class=""&gt;&lt;br class=""&gt;Aaron Johnson and Tim Wilson-Brown made improvements \
to the draft proposal.&lt;br class=""&gt;&lt;br class=""&gt;1. Introduction and scope&lt;br \
class=""&gt;&lt;br class=""&gt;PrivCount is a privacy-preserving way to collect aggregate \
statistics about&lt;br class=""&gt;the Tor network without exposing the statistics from any \
single Tor relay.&lt;br class=""&gt;&lt;br class=""&gt;This document describes the behavior of \
the in-Tor portion of the PrivCount&lt;br class=""&gt;system.  It DOES NOT describe \
the counter configurations, or any other&lt;br class=""&gt;parts of the system. (These will \
be covered in separate proposals.)&lt;br class=""&gt;&lt;br class=""&gt;2. PrivCount overview&lt;br \
class=""&gt;&lt;br class=""&gt;Here follows an oversimplified summary of PrivCount, with \
enough&lt;br class=""&gt;information to explain the Tor side of things.  The actual \
operation of the&lt;br class=""&gt;non-Tor components is trickier than described below.&lt;br \
class=""&gt;&lt;br class=""&gt;In PrivCount, a Data Collector (DC, in this case a Tor relay) \
shares&lt;br class=""&gt;numeric data with N different Tally Reporters (TRs). (A Tally \
Reporter&lt;br class=""&gt;performs the summing and unblinding roles of the Tally Server \
and Share&lt;br class=""&gt;Keeper from experimental PrivCount.)&lt;br class=""&gt;&lt;br \
class=""&gt;All N Tally Reporters together can reconstruct the original data, but no&lt;br \
class=""&gt;(N-1)-sized subset of the Tally Reporters can learn anything about the&lt;br \
class=""&gt;data.&lt;br class=""&gt;&lt;br class=""&gt;(In reality, the Tally Reporters don't \
reconstruct the original data at&lt;br class=""&gt;all! Instead, they will reconstruct a \
_sum_ of the original data across all&lt;br class=""&gt;participating relays.)&lt;br \
class=""&gt;&lt;br class=""&gt;In brief, the system works as follow:&lt;br class=""&gt;&lt;br \
class=""&gt;To share data, for each counter value V to be shared, the Data Collector&lt;br \
class=""&gt;first adds Gaussian noise to V in order to produce V', uses (K,N) Shamir&lt;br \
class=""&gt;secret-sharing to generate N shares of V' (K&lt;=N, K being the \
reconstruction&lt;br class=""&gt;threshold), encrypts each share to a different Tally \
Reporter, and sends&lt;br class=""&gt;each encrypted share to the Tally Reporter it is \
encrypted for.&lt;br class=""&gt;&lt;br class=""&gt;The Tally Reporters then agree on the set S \
of Data Collectors that sent&lt;br class=""&gt;data to all of them, and each Tally Reporter \
forms a share of the aggregate&lt;br class=""&gt;value by decrypting the shares it received \
from the Data Collectors in S&lt;br class=""&gt;and adding them together. The Tally \
Reporters then, collectively, perform&lt;br class=""&gt;secret reconstruction, thereby \
learning the sum of all the different values&lt;br class=""&gt;V'.&lt;br class=""&gt;&lt;br \
class=""&gt;The use of Shamir secret sharing lets us survive up to N-K crashing TRs.&lt;br \
class=""&gt;Waiting until the end to agree on a set S of surviving relays lets us&lt;br \
class=""&gt;survive an arbitrary number of crashing DCs. In order to prevent bogus \
data&lt;br class=""&gt;from corrupting the tally, the Tally Reporters can perform the \
aggregation&lt;br class=""&gt;step multiple times, each time proceeding with a different \
subset of S and&lt;br class=""&gt;taking the median of the resulting values.&lt;br \
class=""&gt;&lt;br class=""&gt;Relay subsets should be chosen at random to avoid relays \
manipulating their&lt;br class=""&gt;subset membership(s). If an shared random value is \
required, all relays&lt;br class=""&gt;must submit their results, and then the next \
revealed shared random value&lt;br class=""&gt;can be used to select relay subsets. (Tor's \
shared random value can be&lt;br class=""&gt;calculated as soon as all commits have been \
revealed. So all relay results&lt;br class=""&gt;must be received *before* any votes are \
cast in the reveal phase for that&lt;br class=""&gt;shared random value.)&lt;br class=""&gt;&lt;br \
class=""&gt;Below we describe the algorithm in more detail, and describe the data&lt;br \
class=""&gt;format to use.&lt;br class=""&gt;&lt;br class=""&gt;...&lt;br class=""&gt;&lt;/blockquote&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;Chelsea and I had a conversation on another \
list about Prio.&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; text-align: start; text-indent: 0px; text-transform: none; white-space: \
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;Prio is similar to PrivCount, but would allow \
the Data Collectors to&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; text-align: start; text-indent: 0px; text-transform: none; white-space: \
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;prove that their responses are in range, using a zero-knowledge \
proof&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;technique.&lt;/span&gt;&lt;br style="font-family: \
Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; \
font-weight: normal; letter-spacing: normal; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; word-spacing: 0px; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;br style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px;" \
class=""&gt;&lt;span style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;I'm posting this here with her permission:&lt;/span&gt;&lt;br style="font-family: \
Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; \
font-weight: normal; letter-spacing: normal; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; word-spacing: 0px; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;br style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px;" \
class=""&gt;&lt;blockquote type="cite" style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; \
-webkit-text-stroke-width: 0px;" class=""&gt;From: teor &lt;&lt;a \
href="mailto:teor2345@gmail.com" class=""&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;br \
class=""&gt;Date: 13 December 2017 at 09:26:45 AEDT&lt;br class=""&gt;&lt;br class=""&gt;&lt;blockquote \
type="cite" class=""&gt;On 13 Dec 2017, at 03:02, chelsea komlo &lt;&lt;a \
href="mailto:me@chelseakomlo.com" class=""&gt;me@chelseakomlo.com&lt;/a&gt;&gt; wrote:&lt;br \
class=""&gt;&lt;br class=""&gt;Hi All,&lt;br class=""&gt;&lt;br class=""&gt;This came up in a slack \
channel I am a part of, and it seems relevant to&lt;br class=""&gt;PrivCount work- I wanted \
to pass it along.&lt;br class=""&gt;&lt;br class=""&gt;&lt;a \
href="https://crypto.stanford.edu/prio/" \
class=""&gt;https://crypto.stanford.edu/prio/&lt;/a&gt;&lt;br class=""&gt;&lt;br class=""&gt;"Prio is a \
privacy-preserving system for the collection of aggregate&lt;br class=""&gt;statistics. \
Each Prio client holds a private data value (e.g., its&lt;br class=""&gt;current location), \
and a small set of servers compute statistical&lt;br class=""&gt;functions over the values \
of all clients (e.g., the most popular&lt;br class=""&gt;location). As long as at least one \
server is honest, the Prio servers&lt;br class=""&gt;learn nearly nothing about the \
clients' private data, except what they&lt;br class=""&gt;can infer from the aggregate \
statistics that the system computes"&lt;br class=""&gt;&lt;/blockquote&gt;&lt;br class=""&gt;I read the \
paper. I'm sure I didn't understand it all.&lt;br class=""&gt;It's very new, but it shows \
promise.&lt;br class=""&gt;And there's no real-world (even experimental) implementation \
yet.&lt;br class=""&gt;&lt;br class=""&gt;Maybe we can architect PrivCount in Tor so it's \
possible to upgrade&lt;br class=""&gt;to a system like this in future. In particular, we \
seem to be using&lt;br class=""&gt;similar primitives to Prio, so that's useful.&lt;br \
class=""&gt;&lt;/blockquote&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: \
0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;Are there things we can change in the current proposal to make it \
easier&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: normal; \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214223652</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-14 22:36:52-0400</timestampReceived><subject>Re: [tor-dev] Proposal 288: Privacy-Preserving Statistics with Privcount in Tor (Shamir version)</subject><body>

Hi Aaron,

&gt; On 15 Dec 2017, at 01:54, Aaron Johnson &lt;aaron.m.johnson@nrl.navy.mil&gt; wrote:
&gt; 
&gt; in Prio, servers use a generic secure multi-party computation (MPC) protocol to \
&gt; compute the circuits. If Tor is going to do that, why not just run a generic MPC \
&gt; protocol over all of the inputs? Doing so would allow Tor statistics aggregations \
&gt; to be robust to inputs that are likely "incorrect" given the values of the other \
&gt; inputs (see "robust statistics" for a wide variety of useful such computations, \
&gt; including for example median, trimmed mean, least trimmed squares, maximum \
&gt; likelihood estimation). Applying MPC over all inputs would only require \
&gt; implementing the "offline" phase of the computation (e.g. producing the \
&gt; "multiplication triples", which are supplied by the client in Prio). There are \
&gt; reasonably efficient protocols for doing so, including SDPZ and TinyOT [1].

If I understand you correctly, you are saying that we can add
a secure multiparty computation to the Tally Reporters without
changes on the Data Collectors?

Great!

Then let's proceed with the Data Collector implementation as
specified in this proposal. We can decide how we detect
outliers when we specify the Tally Reporter implementation.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214162953</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-12-14 16:29:53-0400</timestampReceived><subject>Re: [tor-dev] IPv6 and v3 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Dec (09:54:43), teor wrote:
&gt; Hi David (and others interested in IPv6),
&gt; 
&gt; We want to add better IPv6 support to Tor relays, clients, and v3 onion services.
&gt; 
&gt; But if we do IPv6 v3 onion services first, the hop before intro and rend points
&gt; will know that the circuit is a v3 onion service circuit, because its EXTEND2
&gt; cells will have an IPv6 address.
&gt; 
&gt; So I suggest that we implement IPv6 support in this order:
&gt; IPv6 single onion services (at any time, only uses direct IPv6 CREATE)
&gt; IPv6 relay extends
&gt; IPv6 relay reachability (provides cover traffic for IPv6 client extends)
&gt; IPv6 client extends for exit circuits
&gt; IPv6 client extends for multi-hop onion service circuits
&gt; I've added this to an "Overview" section in: 
&gt; https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features
&gt; 
&gt; I also like the idea of testing and deploying our IPv6 code on relays first.
&gt; It's less risky than experimenting on clients or onion services.
&gt; And our relay operators give us some excellent bug reports.
&gt; 
&gt; And we can re-use some of the common code from the relay implementation
&gt; in the client and onion service implementations. (For example, we'll write
&gt; code that handles link specifiers.)
&gt; 
&gt; Also, if we get IPv6 relay reachability checks working, that makes it easier
&gt; to automatically configure IPv6 on relays. More IPv6 relays will make the
&gt; anonymity set larger for IPv6 clients.
&gt; 
&gt; What do you think?

When I did some of IPv6 work on hidden service v3 (before we rolled it back
:P), we are missing IPv6 foundations in some places that I think would be good
to nail down before we do anything with HS.

The place I'm thinking of is the EXTEND in IPv6 and relay self-testing in
IPv6. This seems a more critical point to build into the network before we can
start building HS support on top (single onion is different but will have to
do with HS code in some ways).

Then, making sure a client can do IPv6 seems the natural next step. And then
we finish with HS.

So to summarize (in order of what I think we should do first):

1. Relay
2. Client
3. HS/Single Onion

My two cents on this.

Also, 033 freeze is arriving rather fast that is in theory mid-january so we
have to consider the fact that we might not get the whole thing in 033 but we
can certainly try :).

Cheers!
David

&gt; 
&gt; T
&gt; 

-- 
PQgdff5S0a51LrwYmq/+PRgWSz+jjvkgZTCn3plzEkY=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214164725</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-14 16:47:25-0400</timestampReceived><subject>Re: [tor-dev] IPv6 and v3 onion services</subject><body>


&gt; On 15 Dec 2017, at 03:29, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; The place I'm thinking of is the EXTEND in IPv6 and relay self-testing in
&gt; IPv6. This seems a more critical point to build into the network before we can
&gt; start building HS support on top (single onion is different but will have to
&gt; do with HS code in some ways).

I'm working on this right now.
It should be ready by mid-January, but it needs a proposal, so maybe it will
end up in 0.3.4 instead.

I would also like to make it easier to configure IPv6 relays. IPv6 support isn't
as useful as it could be, because only 15% of relays support IPv6.
Address autodetection would go a long way here.

&gt; Then, making sure a client can do IPv6 seems the natural next step. And then
&gt; we finish with HS.
&gt; 
&gt; So to summarize (in order of what I think we should do first):
&gt; 
&gt; 1. Relay
&gt; 2. Client
&gt; 3. HS/Single Onion
&gt; 
&gt; My two cents on this.

Seems good to me.
I want to try and focus on getting minimum working code.
Then we can add extra features later.

&gt; Also, 033 freeze is arriving rather fast that is in theory mid-january so we
&gt; have to consider the fact that we might not get the whole thing in 033 but we
&gt; can certainly try :).

We can do parts in 0.3.3 and parts in 0.3.4.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171214170450</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-12-14 17:04:50-0400</timestampReceived><subject>Re: [tor-dev] IPv6 and v3 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 15 Dec (03:47:25), teor wrote:
&gt; 
&gt; &gt; On 15 Dec 2017, at 03:29, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; The place I'm thinking of is the EXTEND in IPv6 and relay self-testing in
&gt; &gt; IPv6. This seems a more critical point to build into the network before we can
&gt; &gt; start building HS support on top (single onion is different but will have to
&gt; &gt; do with HS code in some ways).
&gt; 
&gt; I'm working on this right now.
&gt; It should be ready by mid-January, but it needs a proposal, so maybe it will
&gt; end up in 0.3.4 instead.

Ok!

Can you tell me which ticket is that so I don't start poking at it? I think
without a nice layer of link specifier IPv6, we can't move forward on much
other things?

Let me know how I can be most useful here while you do that.

&gt; 
&gt; I would also like to make it easier to configure IPv6 relays. IPv6 support isn't
&gt; as useful as it could be, because only 15% of relays support IPv6.
&gt; Address autodetection would go a long way here.

Are you suggesting something like "Address auto" or "ORPort auto:&lt;port&gt;" kind
of thing that we enable by default for both v4 and v6 and then explicitly set
it if you want a specific address?

Auto detection of address becomes complicated with interfaces that have
multiple IPs... Which one do you choose?

But aren't you worried of Tor finding an IPv6 for a relay and starting using
it while the operator has no idea that it is happening? Dunno, maybe some
relays are bandwidth capped on v4 or/and v6 (would suck but)?

Anyway this can be a ticket (if not already done).

&gt; 
&gt; &gt; Then, making sure a client can do IPv6 seems the natural next step. And then
&gt; &gt; we finish with HS.
&gt; &gt; 
&gt; &gt; So to summarize (in order of what I think we should do first):
&gt; &gt; 
&gt; &gt; 1. Relay
&gt; &gt; 2. Client
&gt; &gt; 3. HS/Single Onion
&gt; &gt; 
&gt; &gt; My two cents on this.
&gt; 
&gt; Seems good to me.
&gt; I want to try and focus on getting minimum working code.
&gt; Then we can add extra features later.

Agree++!

&gt; 
&gt; &gt; Also, 033 freeze is arriving rather fast that is in theory mid-january so we
&gt; &gt; have to consider the fact that we might not get the whole thing in 033 but we
&gt; &gt; can certainly try :).
&gt; 
&gt; We can do parts in 0.3.3 and parts in 0.3.4.

Sure thing.

Cheers!
David

&gt; 
&gt; T

-- 
PQgdff5S0a51LrwYmq/+PRgWSz+jjvkgZTCn3plzEkY=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214173145</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-14 17:31:45-0400</timestampReceived><subject>Re: [tor-dev] IPv6 and v3 onion services</subject><body>

[Attachment #2 (multipart/alternative)]


On 15 Dec 2017, at 04:04, David Goulet &lt;dgoulet@torproject.org&gt; wrote:

&gt;&gt; On 15 Dec (03:47:25), teor wrote:
&gt;&gt; 
&gt;&gt;&gt;&gt; On 15 Dec 2017, at 03:29, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; The place I'm thinking of is the EXTEND in IPv6 and relay self-testing in
&gt;&gt;&gt; IPv6. This seems a more critical point to build into the network before we can
&gt;&gt;&gt; start building HS support on top (single onion is different but will have to
&gt;&gt;&gt; do with HS code in some ways).
&gt;&gt; 
&gt;&gt; I'm working on this right now.
&gt;&gt; It should be ready by mid-January, but it needs a proposal, so maybe it will
&gt;&gt; end up in 0.3.4 instead.
&gt; 
&gt; Ok!
&gt; 
&gt; Can you tell me which ticket is that so I don't start poking at it? I think
&gt; without a nice layer of link specifier IPv6, we can't move forward on much
&gt; other things?

Yes, it's important, and it would be great if you could do it.

Is that this ticket?

hs: Unify link specifier API/ABI
https://trac.torproject.org/projects/tor/ticket/22781

&gt; Let me know how I can be most useful here while you do that.

Here is the wiki page I am using for planning:
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features

Feel free to edit it :-)

Here's the high-level ticket, please pick any task I haven't started on:

https://trac.torproject.org/projects/tor/ticket/24403

&gt;&gt; I would also like to make it easier to configure IPv6 relays. IPv6 support isn't
&gt;&gt; as useful as it could be, because only 15% of relays support IPv6.
&gt;&gt; Address autodetection would go a long way here.
&gt; 
&gt; Are you suggesting something like "Address auto" or "ORPort auto:&lt;port&gt;" kind
&gt; of thing that we enable by default for both v4 and v6 and then explicitly set
&gt; it if you want a specific address?

Eventually, but it doesn't need to be done in 0.3.3.

&gt; Auto detection of address becomes complicated with interfaces that have
&gt; multiple IPs... Which one do you choose?

Tor does this already with IPv4.

We check these sources for IPv4 (in about this order):
The configured Address
NETINFO cells from our outbound connections to other relays
The first IPv4 address in the order the OS provides them

I think we stopped using the X-Your-IP-Address-Is headers in
directory documents.

We check these sources for IPv6:
The first advertised IPv6 ORPort

Eventually, I want to make both use this order:
The configured Address
The first advertised ORPort
NETINFO cells from our outbound connections to other relays
The first address in the order the OS provides them

If we want to be clever, we can skip addresses that aren't reachable.
Or we can check all the addresses, and try to choose the shortest
address text to put in directory documents.
But these features can wait.

&gt; But aren't you worried of Tor finding an IPv6 for a relay and starting using
&gt; it while the operator has no idea that it is happening? Dunno, maybe some
&gt; relays are bandwidth capped on v4 or/and v6 (would suck but)?

I've never heard of such a thing.
And we can't support every weird scenario by default.
There will be a way to turn the feature off.

I think we have to get used to treating IPv4 and IPv6 the same.
We guess IPv4, we should guess IPv6 as well.

If we need to have a release where the feature is available but off by default,
that's ok. But I think it's not a big deal. Let's just tell people at the top of the
release notes.

It will make a lot of relay operators happy.

&gt; Anyway this can be a ticket (if not already done)

Reachability checks are:

Missing IPv6 ORPort reachability check
https://trac.torproject.org/projects/tor/ticket/6939

I'm sure we have a ticket for relay IPv6 autodetection, but I can't find it
right now.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;On 15 Dec 2017, at 04:04, David Goulet &lt;&lt;a \
href="mailto:dgoulet@torproject.org"&gt;dgoulet@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite" \
__apple_fixed_attribute="true"&gt;&lt;span&gt;On 15 Dec (03:47:25), teor \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
__apple_fixed_attribute="true"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 15 Dec 2017, at 03:29, David Goulet &lt;&lt;span&gt;&lt;a \
href="mailto:dgoulet@torproject.org"&gt;dgoulet@torproject.org&lt;/a&gt;&lt;/span&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;The place I'm thinking of is the EXTEND in \
IPv6 and relay self-testing in&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;IPv6. This seems a more critical point to \
build into the network before we can&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;start building HS support on top (single \
onion is different but will have to&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;do with HS code in some \
ways).&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I'm working \
on this right now.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It should be \
ready by mid-January, but it needs a proposal, so maybe it \
will&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;end up in 0.3.4 \
instead.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Ok!&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Can \
you tell me which ticket is that so I don't start poking at it? I \
think&lt;/span&gt;&lt;br&gt;&lt;span&gt;without a nice layer of link specifier IPv6, we can't move \
forward on much&lt;/span&gt;&lt;br&gt;&lt;span&gt;other \
things?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, it's important, and it \
would be great if you could do it.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is that this \
ticket?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;hs: Unify link specifier API/ABI&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/22781"&gt;https://trac.torproject.org/projects/tor/ticket/22781&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Let me know how I can be most useful here while you do \
that.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is the wiki page I am using \
for planning:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features"&gt;htt \
ps://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Feel \
free to edit it :-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's the high-level ticket, please \
pick any task I haven't started on:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24403"&gt;https://trac.torproject.org/projects/tor/ticket/24403&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I would also like to make it easier to \
configure IPv6 relays. IPv6 support isn't&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;as useful as it could be, because only 15% of relays support \
IPv6.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Address autodetection \
would go a long way here.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Are you \
suggesting something like "Address auto" or "ORPort auto:&lt;port&gt;" \
kind&lt;/span&gt;&lt;br&gt;&lt;span&gt;of thing that we enable by default for both v4 and v6 and then \
explicitly set&lt;/span&gt;&lt;br&gt;&lt;span&gt;it if you want a specific \
address?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Eventually, but it doesn't \
need to be done in 0.3.3.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Auto detection \
of address becomes complicated with interfaces that have&lt;/span&gt;&lt;br&gt;&lt;span&gt;multiple \
IPs... Which one do you choose?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor \
does this already with IPv4.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We check these sources for IPv4 \
(in about this order):&lt;/div&gt;&lt;div&gt;The configured Address&lt;/div&gt;&lt;div&gt;NETINFO cells from \
our outbound connections to other relays&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;The first IPv4 address in the order the OS provides \
them&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;I \
think we stopped using the X-Your-IP-Address-Is headers in&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;directory \
documents.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;We check these sources for IPv6:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;The first advertised IPv6 \
ORPort&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Eventually, I want to make both use this \
order:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;The \
configured Address&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;The first advertised ORPort&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;NETINFO cells from our outbound connections to other \
relays&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;The \
first address in the order the OS provides them&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;If we want to be clever, we can \
skip addresses that aren't reachable.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Or we can check all the addresses, and try to choose the \
shortest&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;address text to put in directory documents.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;But these features can \
wait.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;But aren't you worried of \
Tor finding an IPv6 for a relay and starting using&lt;/span&gt;&lt;br&gt;&lt;span&gt;it while the \
operator has no idea that it is happening? Dunno, maybe some&lt;/span&gt;&lt;br&gt;&lt;span&gt;relays \
are bandwidth capped on v4 or/and v6 (would suck \
but)?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've never heard of such a \
thing.&lt;/div&gt;&lt;div&gt;And we can't support every weird scenario by \
default.&lt;/div&gt;&lt;div&gt;There will be a way to turn the feature \
off.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think we have to get used to treating IPv4 and IPv6 \
the same.&lt;/div&gt;&lt;div&gt;We guess IPv4, we should guess IPv6 as \
well.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we need to have a release where the feature is \
available but off by default,&lt;/div&gt;&lt;div&gt;that's ok. But I think it's not a big deal. \
Let's just tell people at the top of the&lt;/div&gt;&lt;div&gt;release \
notes.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It will make a lot of relay operators \
happy.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Anyway this can be a ticket (if \
not already done)&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Reachability checks \
are:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Missing IPv6 ORPort reachability check&lt;/div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/6939"&gt;https://trac.torproject.org/projects/tor/ticket/6939&lt;/a&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm \
sure we have a ticket for relay IPv6 autodetection, but I can't find \
it&lt;/div&gt;&lt;div&gt;right now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115113506</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-11-15 11:35:06-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


Apologies, I am waiting for a train and don't have much bandwidth, so I
will be brief:

1) There is no point in issuing &lt;any header of any kind&gt; to anyone unless
they are accessing &lt;website&gt; via an exit node.

2) It's inefficient to issue the header upon every web access by every
person in the world; when the header is only relevant to
1-in-a-few-thousand users, you will be imposing extra bandwidth cost upon
the remaining 99.99...% -- which is unfair to them

3) Therefore: the header should only be issued to people arriving via an
exit node.  The means of achieving this are

a) Location

b) Bending Alt-Svc to fit and breaking web standards

c) Creating an entirely new header

4) Location already works and does the right thing.  Privacy International
already use this and issue it to people who connect to their .ORG site from
an Exit Node.

5) Bending Alt-Svc to fit, is pointless, because Location already works

6) Creating a new header? Given (4) and (5) above, the only potential
material benefit of it that I can see would be to "promote Tor branding" -
and (subjective opinion) this would actually harm the cause of Tor at all
because it is *special*.

6 Rationale) The majority the "Dark Net" shade which had been thrown at Tor
over the past 10 years has pivoted upon "needing special software to
access", and creating (pardon me) a "special" header to onionify a fetch
seems to be promoting the weirdness of Tor, again.

The required goal of redirection to the corresponding Onion site does not
require anything more than a redirect, and - pardon me - but there are
already 4x different kinds of redirects that are supported by the Location
header (301, 302, 307, 308) with useful semantics. Why reinvent 4 wheels
specially for Tor?

7) Story: when I was implementing the Facebook onion, I built infra to
support such (eventual) redirection and/or exit-node-usage tracking. Hit "
facebook.com/si/proxy/" from Tor/NonTor to see it in action. The most
challenging thing for me was to get a reliable and cheap way to look-up,
locally, quickly, cheaply and reliably, whether a given IP address
corresponded to an exit node. The closest that I could get to that idea was
to scrape Onionoo every so often and to cache the results into a
distributed, almost-memcache-like table for the entire site. ie: squillions
of machines. This mechanism suffers from all the obvious flaws, notably
Onionoo crashes and/or "lag" behind the state of the consensus.

8) So, to pass concrete advice on the basis of experience: rather than
pursue novel headers and reinvent a bunch of established, widely-understood
web redirection technologies, I would ask that Tor focus its efforts
instead upon providing a service - perhaps a listener service embedded in
little-t tor as an enable-able service akin to SOCKSListener - which can
accept a request from &lt;cidr-subnetmask&gt;, receive an newline-terminated IP
address, and return a set of flags associated with that IP (exit node,
relay, whatever) - or "none" where the IP is not part of the tor network.
Riff on this protocol as you see fit.

This would mean more people running more tor daemons in more datacentres
(and possibly configuring some of them as relays) - using this lookup
service to establish quickly whether $CLIENT_ADDR is an exit node or not,
and whether it should be issued "308 Permanent Redirect With Same Method"

I think this is a better goal for Tor to be pursuing.  What do you think?

    - alec

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Apologies, I am waiting for a train and don't have much \
bandwidth, so I will be brief:&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;1) There is \
no point in issuing &lt;any header of any kind&gt; to anyone unless they are \
accessing &lt;website&gt; via an exit node.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;2) It's inefficient to issue the header upon every web access by every \
person in the world; when the header is only relevant to 1-in-a-few-thousand users, \
you will be imposing extra bandwidth cost upon the remaining 99.99...% -- which is \
unfair to them&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;3) Therefore: the \
header should only be issued to people arriving via an exit node.   The means of \
achieving this are&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;a) \
Location&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;b) Bending Alt-Svc to fit and \
breaking web standards&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;c) Creating an \
entirely new header&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;4) Location \
already works and does the right thing.   Privacy International already use this and \
issue it to people who connect to their .ORG site from an Exit Node.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;5) Bending Alt-Svc to fit, is pointless, because \
Location already works&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;6) Creating a \
new header? Given (4) and (5) above, the only potential material benefit of it that I \
can see would be to "promote Tor branding" - and (subjective opinion) this \
would actually harm the cause of Tor at all because it is *special*.    &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;6 Rationale) The majority the "Dark \
Net" shade which had been thrown at Tor over the past 10 years has pivoted upon \
"needing special software to access", and creating (pardon me) a \
"special" header to onionify a fetch seems to be promoting the weirdness of \
Tor, again.  &lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;The required goal of \
redirection to the corresponding Onion site does not require anything more than a \
redirect, and - pardon me - but there are already 4x different kinds of redirects \
that are supported by the Location header (301, 302, 307, 308) with useful semantics. \
Why reinvent 4 wheels specially for Tor?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;7) Story: when I was implementing the Facebook onion, I built infra to \
support such (eventual) redirection and/or exit-node-usage tracking. Hit "&lt;a \
href="http://facebook.com/si/proxy/"&gt;facebook.com/si/proxy/&lt;/a&gt;" from Tor/NonTor \
to see it in action. The most challenging thing for me was to get a reliable and \
cheap way to look-up, locally, quickly, cheaply and reliably, whether a given IP \
address corresponded to an exit node. The closest that I could get to that idea was \
to scrape Onionoo every so often and to cache the results into a distributed, \
almost-memcache-like table for the entire site. ie: squillions of machines. This \
mechanism suffers from all the obvious flaws, notably Onionoo crashes and/or \
"lag" behind the state of the consensus.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;8) So, to pass concrete advice on the basis of \
experience: rather than pursue novel headers and reinvent a bunch of established, \
widely-understood web redirection technologies, I would ask that Tor focus its \
efforts instead upon providing a service - perhaps a listener service embedded in \
little-t tor as an enable-able service akin to SOCKSListener - which can accept a \
request from &lt;cidr-subnetmask&gt;, receive an newline-terminated IP address, and \
return a set of flags associated with that IP (exit node, relay, whatever) - or \
"none" where the IP is not part of the tor network.   Riff on this protocol \
as you see fit.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;This would mean more \
people running more tor daemons in more datacentres (and possibly configuring some of \
them as relays) - using this lookup service to establish quickly whether $CLIENT_ADDR \
is an exit node or not, and whether it should be issued "308 Permanent Redirect \
With Same Method"&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;I think this is \
a better goal for Tor to be pursuing.   What do you think?&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;      - alec&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115121732</emailId><senderName>"Iain R. Learmonth"</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2017-11-15 12:17:32-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 15/11/17 11:35, Alec Muffett wrote:
&gt; 8) So, to pass concrete advice on the basis of experience: rather than
&gt; pursue novel headers and reinvent a bunch of established,
&gt; widely-understood web redirection technologies, I would ask that Tor
&gt; focus its efforts instead upon providing a service - perhaps a listener=

&gt; service embedded in little-t tor as an enable-able service akin to
&gt; SOCKSListener - which can accept a request from &lt;cidr-subnetmask&gt;,
&gt; receive an newline-terminated IP address, and return a set of flags
&gt; associated with that IP (exit node, relay, whatever) - or "none" where
&gt; the IP is not part of the tor network.=C2=A0 Riff on this protocol as y=
ou see
&gt; fit.

Is this not what TorDNSEL does?

https://www.torproject.org/projects/tordnsel.html.en

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115131106</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-11-15 13:11:06-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


On 15 Nov 2017 12:18, "Iain R. Learmonth" &lt;irl@torproject.org&gt; wrote:

Is this not what TorDNSEL does?
https://www.torproject.org/projects/tordnsel.html.en


Hi Iain!

That certainly sounds like it will give you the answer! But although it
would give the right kind of answer, it is not what I am asking for.

At the scale of websites like Facebook or the New York Times, a timely
response is required for the purposes of rendering a page. The benefits of
solving the problem at "enterprise" scale then trickle down to
implementations of all sizes.

Speaking as a programmer, it would be delightfully easy to make a DNS query
and wait for a response to give you an answer... but then you have to send
the query, wait for propagation, wait for a result, trust the result, debug
cached versions of the results, leak the fact that all these lookups are
going on, and so forth.

This all adds adds up to latency and cost, as well as leaking metadata of
your lookups; plus your local DNS administrator will hate you (cf: doing
name resolution for every webpage fetch for writing Apache logs, is frowned
upon.  Better to log the raw IP address and resolve it later if you need.

On the other hand: if you are running a local Tor daemon, a copy of the
entire consensus is held locally and is (basically) definitive.  You query
it with near zero lookup latency, you get an instant response with no
practical lag behind "real time", plus there are no men in the middle, and
there is no unwanted metadata leakage.

If the Tor daemon is on the local machine, then the lookup cost is
near-zero, and - hey! - you are encouraging more people to run more tor
daemons, which (as above) has to be a good thing.

So: the results are very close to what TorDNSEL provides, but what I seek
is something with different and better latency, security, reliability and
privacy qualities than TorDNSEL offers.

    - alec

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 15 Nov 2017 \
12:18, "Iain R. Learmonth" &lt;&lt;a \
href="mailto:irl@torproject.org"&gt;irl@torproject.org&lt;/a&gt;&gt; wrote:&lt;blockquote \
class="quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Is this not what TorDNSEL does?&lt;br&gt; &lt;a \
href="https://www.torproject.org/projects/tordnsel.html.en" rel="noreferrer" \
target="_blank"&gt;https://www.torproject.org/&lt;wbr&gt;projects/tordnsel.html.en&lt;/a&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Hi Iain!&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;That certainly sounds like it will give you the answer! But although it \
would give the right kind of answer, it is not what I am asking for.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;At the scale of websites like Facebook or the \
New York Times, a timely response is required for the purposes of rendering a page. \
The benefits of solving the problem at "enterprise" scale then trickle down \
to implementations of all sizes.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;Speaking as a programmer, it would be delightfully easy to make a DNS \
query and wait for a response to give you an answer... but then you have to send the \
query, wait for propagation, wait for a result, trust the result, debug cached \
versions of the results, leak the fact that all these lookups are going on, and so \
forth.    &lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;This all adds adds up to \
latency and cost, as well as leaking metadata of your lookups; plus your local DNS \
administrator will hate you (cf: doing name resolution for every webpage fetch for \
writing Apache logs, is frowned upon.   Better to log the raw IP address and resolve \
it later if you need.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;On the other \
hand: if you are running a local Tor daemon, a copy of the entire consensus is held \
locally and is (basically) definitive.   You query it with near zero lookup latency, \
you get an instant response with no practical lag behind "real time", plus \
there are no men in the middle, and there is no unwanted metadata leakage.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;If the Tor daemon is on the local machine, then \
the lookup cost is near-zero, and - hey! - you are encouraging more people to run \
more tor daemons, which (as above) has to be a good thing.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;So: the results are very close to what TorDNSEL \
provides, but what I seek is something with different and better latency, security, \
reliability and privacy qualities than TorDNSEL offers.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;      - alec&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115133110</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-15 13:31:10-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

Alec Muffett &lt;alec.muffett@gmail.com&gt; writes:

&gt; On 15 Nov 2017 12:18, "Iain R. Learmonth" &lt;irl@torproject.org&gt; wrote:
&gt;
&gt; Is this not what TorDNSEL does?
&gt; https://www.torproject.org/projects/tordnsel.html.en
&gt;
&gt;
&gt; Hi Iain!
&gt;

Hey Alec,

thanks for the feedback.

&gt; That certainly sounds like it will give you the answer! But although it
&gt; would give the right kind of answer, it is not what I am asking for.
&gt;
&gt; At the scale of websites like Facebook or the New York Times, a timely
&gt; response is required for the purposes of rendering a page. The benefits of
&gt; solving the problem at "enterprise" scale then trickle down to
&gt; implementations of all sizes.
&gt;
&gt; Speaking as a programmer, it would be delightfully easy to make a DNS query
&gt; and wait for a response to give you an answer... but then you have to send
&gt; the query, wait for propagation, wait for a result, trust the result, debug
&gt; cached versions of the results, leak the fact that all these lookups are
&gt; going on, and so forth.
&gt;
&gt; This all adds adds up to latency and cost, as well as leaking metadata of
&gt; your lookups; plus your local DNS administrator will hate you (cf: doing
&gt; name resolution for every webpage fetch for writing Apache logs, is frowned
&gt; upon.  Better to log the raw IP address and resolve it later if you need.
&gt;
&gt; On the other hand: if you are running a local Tor daemon, a copy of the
&gt; entire consensus is held locally and is (basically) definitive.  You query
&gt; it with near zero lookup latency, you get an instant response with no
&gt; practical lag behind "real time", plus there are no men in the middle, and
&gt; there is no unwanted metadata leakage.
&gt;

I think it's important to point out that a Tor client is never
guaranteed to hold a *definitive* consensus. Currently Tor clients can
stay perfectly happy with a consensus that is up to 3 hours old, even if
they don't fetch the latest one (which gets made every hour).

In general, the Tor network does not have a definitive state at any
point, and different clients/relays can have different states at the
same time.

If we were to create "the definitive exit node oracle" we would need a
Tor client that polls the dirauths the second a new consensus comes out,
and maybe even then there could be desynchs. Perhaps it's worthwhile
doing such a thing, and maybe that's exactly what tordnsel is doing, but
it's something that can bring extra load to the dirauths and should not
be done in many instances.

Furthermore, you said that enterprises might be spooked out by
tor-specific "special" HTTP headers, but now we are discussing weird tor
modules that communicate with the Tor daemon to decide whether to
redirect clients, so it seems to me like an equally "special" Tor setup
for sysadmins.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171115133833</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-11-15 13:38:33-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


I think it's important to point out that a Tor client is never
guaranteed to hold a *definitive* consensus.


That's why I say "(mostly) definitive" in my text - my feeling is that a
locally-held copy of the consensus to be queried is going to be on average
of far higher quality, completeness, and non-stagnancy than something that
one tries to scrape out of Onionoo every 15 minutes.

True "definitiveness" can wait. A solution which does not require treading
beyond the local area network for a "good enough" result, is a sufficient
90+% solution :-)


If we were to create "the definitive exit node oracle" we would need a
Tor client that polls the dirauths the second a new consensus comes out,


So let's not do that, then.


Furthermore, you said that enterprises might be spooked out by
tor-specific "special" HTTP headers,


Yes.


but now we are discussing weird tor
modules that communicate with the Tor daemon to decide whether to
redirect clients, so it seems to me like an equally "special" Tor setup
for sysadmins.


I can see how you would think that, and I would kind-of agree, but at least
this would be local and cheap.  Perhaps instead of a magic protocol, it
should be a REST API that's embedded in the local Tor daemon?  That would
be a really, REALLY common pattern for an enterprise to query.

How about that?

    - alec

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="quoted-text"&gt;I think it's important to point \
out that a Tor client is never&lt;br&gt;&lt;/div&gt; guaranteed to hold a *definitive* consensus. \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;That's \
why I say "(mostly) definitive" in my text - my feeling is that a \
locally-held copy of the consensus to be queried is going to be on average of far \
higher quality, completeness, and non-stagnancy than something that one tries to \
scrape out of Onionoo every 15 minutes.  &lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;True "definitiveness" can wait. A solution which does not \
require treading beyond the local area network for a "good enough" result, \
is a sufficient 90+% solution :-)&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;&lt;blockquote class="quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; If we were to create "the \
definitive exit node oracle" we would need a&lt;br&gt; Tor client that polls the \
dirauths the second a new consensus comes out,&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;So let's not do that, then.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div \
class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote class="quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Furthermore, \
you said that enterprises might be spooked out by&lt;br&gt; tor-specific \
"special" HTTP headers, &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Yes.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;&lt;blockquote class="quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;but now we are discussing weird \
tor&lt;br&gt; modules that communicate with the Tor daemon to decide whether to&lt;br&gt;
redirect clients, so it seems to me like an equally "special" Tor setup&lt;br&gt;
for sysadmins.&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;I can see how you would think that, and I would kind-of agree, but at \
least this would be local and cheap.   Perhaps instead of a magic protocol, it should \
be a REST API that's embedded in the local Tor daemon?   That would be a really, \
REALLY common pattern for an enterprise to query.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;How about that?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;      - \
alec&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div \
class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote class="quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115160339</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-11-15 16:03:39-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

On 15 November 2017 at 05:35, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; Apologies, I am waiting for a train and don't have much bandwidth, so I will
&gt; be brief:
&gt;
&gt; 1) There is no point in issuing &lt;any header of any kind&gt; to anyone unless
&gt; they are accessing &lt;website&gt; via an exit node.
&gt;
&gt; 2) It's inefficient to issue the header upon every web access by every
&gt; person in the world; when the header is only relevant to 1-in-a-few-thousand
&gt; users, you will be imposing extra bandwidth cost upon the remaining
&gt; 99.99...% -- which is unfair to them

Agreed (mostly). I could see use cases where users not accessing a
website via Tor may wish to know an onionsite is available, but they
are also the vast minority.


&gt; 3) Therefore: the header should only be issued to people arriving via an
&gt; exit node.  The means of achieving this are
&gt;
&gt; a) Location
&gt;
&gt; b) Bending Alt-Svc to fit and breaking web standards
&gt;
&gt; c) Creating an entirely new header
&gt;
&gt; 4) Location already works and does the right thing.  Privacy International
&gt; already use this and issue it to people who connect to their .ORG site from
&gt; an Exit Node.
&gt;
&gt; 5) Bending Alt-Svc to fit, is pointless, because Location already works
&gt;
&gt; 6) Creating a new header? Given (4) and (5) above, the only potential
&gt; material benefit of it that I can see would be to "promote Tor branding" -
&gt; and (subjective opinion) this would actually harm the cause of Tor at all
&gt; because it is *special*.
&gt;
&gt; 6 Rationale) The majority the "Dark Net" shade which had been thrown at Tor
&gt; over the past 10 years has pivoted upon "needing special software to
&gt; access", and creating (pardon me) a "special" header to onionify a fetch
&gt; seems to be promoting the weirdness of Tor, again.
&gt;
&gt; The required goal of redirection to the corresponding Onion site does not
&gt; require anything more than a redirect, and - pardon me - but there are
&gt; already 4x different kinds of redirects that are supported by the Location
&gt; header (301, 302, 307, 308) with useful semantics. Why reinvent 4 wheels
&gt; specially for Tor?


I think there are some additional things to gain by using a new header:

Software that understands the header can handle it differently than
Location. I think the notification bar and the 'Don't redirect me to
the onionsite' options are pretty good UI things we should consider.
They're actually not great UX, but it might be 'doing our part' to try
and not confuse users about trusted browser chrome.[0]

Users who _appear_ to be coming from an exit node but are not using
Tor are not blackholed. How common is this? I've seen reports from
users who do this. If I were in a position to, I would consider having
exit node traffic 'blend into' more general non-exit traffic (like a
university connection) just to make the political statement that "Tor
traffic is internet traffic".

Detecting exit nodes is error prone, as you point out. Some exit nodes
have their traffic exit a different address than their listening
port.[1]


Location is really close to what we need, but it is limited in some
ways. I'm still on the fence.


[0] Except of course that notification bars are themselves spoofable
chrome but lets ignore that for now...
[1] Hey does Exonerator handle these?



On 15 November 2017 at 07:38, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; I can see how you would think that, and I would kind-of agree, but at least
&gt; this would be local and cheap.  Perhaps instead of a magic protocol, it
&gt; should be a REST API that's embedded in the local Tor daemon?  That would be
&gt; a really, REALLY common pattern for an enterprise to query.

This information should already be exposed via the Control Port,
although there would be more work on behalf of the implementer to
parse more information than desired and pare it down to what is
needed.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171115161644</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-11-15 16:16:44-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

On Tue, Nov 14, 2017 at 02:51:55PM +0200, George Kadianakis wrote:
&gt; Let me know what you think :)

Section 9.4 in the Alt-Svc draft talks about abusing the header for
tracking.  In particular, a malicious website could give each Tor user
a unique onion domain to track their activity.  That's particularly
problematic if the "persist" flag is used in the Alt-Svc header.

Granted, malicious websites can already do that to an extent by serving
unique onion domains on each page load, but we should still keep this
issue in mind.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171116032302</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-16 03:23:02-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]


&gt; 
&gt; On 16 Nov 2017, at 00:38, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; 
&gt; &gt; I think it's important to point out that a Tor client is never
&gt; &gt; guaranteed to hold a *definitive* consensus.
&gt; &gt; 
&gt; That's why I say "(mostly) definitive" in my text - my feeling is that a \
&gt; locally-held copy of the consensus to be queried is going to be on average of far \
&gt; higher quality, completeness, and non-stagnancy than something that one tries to \
&gt; scrape out of Onionoo every 15 minutes.

Please don't use a consensus or a tor client to check for exits for
this purpose. It produces significant numbers of false negatives,
because some exits use other IP addresses for their exit traffic.

Using Onionoo or TorDNSEL reduces your false negatives, because it
pulls data from Exitmap to populate exit_addresses. (Tor clients do
not pull data from Exitmap, and that data is not in the consensus.)

&gt; On 16 Nov 2017, at 03:03, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; Detecting exit nodes is error prone, as you point out. Some exit nodes
&gt; have their traffic exit a different address than their listening
&gt; port.[1]
&gt; 
&gt; ...
&gt; [1] Hey does Exonerator handle these?

Exonerator uses data from Exitmap, which queries a service through each
exit to discover the address(es) the exit uses to send client requests
to websites.

The list is updated every 24 hours.
So there's really no need to scrape OnionOO every 15 minutes.

&gt; &gt; but now we are discussing weird tor
&gt; &gt; modules that communicate with the Tor daemon to decide whether to
&gt; &gt; redirect clients, so it seems to me like an equally "special" Tor setup
&gt; &gt; for sysadmins.
&gt; &gt; 
&gt; I can see how you would think that, and I would kind-of agree, but at least this \
&gt; would be local and cheap.  Perhaps instead of a magic protocol, it should be a REST \
&gt; API that's embedded in the local Tor daemon?  That would be a really, REALLY common \
&gt; pattern for an enterprise to query.


You can download the set of exit addresses every 24 hours, and write a
small tool that implements a REST API to query it:

https://check.torproject.org/exit-addresses

In fact, you could even adapt the "check" service to your needs, if it
doesn't do what you want already:

https://gitweb.torproject.org/check.git

Is this the kind of JSON reply you would want?

https://check.torproject.org/api/ip

{"IsTor":true,"IP":"176.10.104.243"}

Or for the interactive version, see:

https://check.torproject.org/cgi-bin/TorBulkExitList.py

(And if you supply a destination port, it's more accurate, because it
checks exit policies as well.)

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAloNBJYACgkQdA2eOQJS
cqKYUA/9H+tlU+ZrPC+W8d4wEU5icrpPtN68eiFMYehhTh97mcVSCgDTKRVx++Oh
PXxQxUXLGcON99ZM0jiya34Axhj+l9x/Afz4mT3gdjDpp2zCrareR9/6VAXZP1Jn
eTSP1DCyyqy47gxVtwwBhANFBRj6inPhx1nodaiCKzQethwWc0z3YD/F6UGKlS+3
lV0bmbURuZlH9l7UTrBV1LOesHLbCmlyexD8OtXHoxyr6BoM4cNwtmp4b5AOaAY8
k7WUfr/OfyXMSZ75E6DI9X+rXLxKtzPABr5wjwOwWI79TghqzsW45S5d7GlmUwkV
viHI6SQ8uuw/3wJi2ox7oFL0QOCkCqcAizlsa6Nv23dUL5JF303E+YsbBi8g+5LI
gybu6W9gnI1cT56XTjGaIjVYr4tUdeZJadTjYFs/Ehy/jBuIxPoE4TOho7YHsWIm
6ixCmbVsCSg2eem4P1fTcK5t+6GNV/nayYL5iWhoSJc4DfgYbQMLB94yzEsxsV2X
zlY7+5pMcBq1By4XSGfKAlV+XE8xiwgduu4eVL/31GbaWddSic95IjFc8pNmG9GH
JdD81NoiuHSrY3eiQT9rvrGg217y4mcv/tayTD4h2PPZmYRlEUEMF3tTCppCkI3P
LMf1wciCMaXx+9oZM/+qcxlz2Y06mbbkvjwG1Bcv03/2UnHxaOQ=
=tSYv
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171208150601</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-12-08 15:06:01-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

As discussed in this mailing list and in IRC, I'm posting a subsequent
version of this proposal. Basic improvements:
- Uses a new custom HTTP header, instead of Alt-Svc or Location.
- Does not do auto-redirect; it instead suggests the onion based on
  antonella's mockup: https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png



========================================================================
UX improvement proposal: Onion redirects using Onion-Location HTTP header
========================================================================

1. Motivation:

   Lots of high-profile websites have onion addresses these days (e.g. Tor ,
   NYT, blockchain, ProPublica).  All those websites seem confused on what's
   the right way to inform their users about their onion addresses. Here are
   some confusion examples:
     a) torproject.org does not even advertise their onion address to Tor users (!!!)
     b) blockchain.info throws an ugly ASCII page to Tor users mentioning their onion
        address and completely wrecking the UX (loses URL params, etc.)
     c) ProPublica has a "Browse via Tor" section which redirects to the onion site.

   Ideally there would be a consistent way for websites to inform their users
   about their onion counterpart. This would provide the following positives:
     + Tor users would use onions more often. That's important for user
       education and user perception, and also to partially dispell the darkweb myth.
     + Website operators wouldn't have to come up with ad-hoc ways to advertise
       their onion services, which sometimes results in complete breakage of
       the user experience (particularly with blockchain)

   This proposal specifies a simple way forward here that's far from perfect,
   but can still provide benefits and also improve user-education around onions
   so that in the future we could employ more advanced techniques.

   Also see Tor ticket #21952 for more discussion on this:
      https://trac.torproject.org/projects/tor/ticket/21952

2. Proposal

   We introduce a new HTTP header called "Onion-Location" with the exact same
   restrictions and semantics as the Location HTTP header. Websites can use the
   Onion-Location HTTP header to specify their onion counterpart, in the same
   way that they would use the Location header.

   The Tor Browser intercepts the Onion-Location header (if any) and informs
   the user of the existense of the onion site, giving them the option to visit
   it. Tor Browser only does so if the header is served over HTTPS.

   Browsers that don't support Tor SHOULD ignore the Onion-Location header.

3. Improvements

4. Drawbacks

4.1. No security/performance benefits

   While we could come up with onion redirection proposals that provide
   security and performance benefits, this proposal does not actually provide
   any of those.

   As a matter of fact, the security remains the same as connecting to normal
   websites (since we trust its HTTP headers), and the performance gets worse
   since we first need to connect to the website, get its headers, and then
   also connect to the onion.

   Still _all_ the website approaches mentioned in the "Motivation" section
   suffer from the above drawbacks, and sysadmins still come up with ad-hoc
   ways to inform users abou their onions. So this simple proposal will still
   help those websites and also pave the way forward for future auto-redirect
   techniques.

4.2. Defining new HTTP headers is not the best idea

   This proposal defines a new non-standard HTTP header. This is not great
   because it makes Tor into a "special" thing that needs to be supported with
   special headers. However, the fact that it's a new HTTP header that only
   works for Tor is a positive thing since it means that non-Tor browsers will
   just ignore it.

   Furthermore, another drawback is that this HTTP header will increase the
   bandwidth needlessly if it's also served to non-Tor clients. Hence websites
   with lots of client traffic are encouraged to use tools that detect Tor
   users and only serve the header to them (e.g. tordnsel).

5. The future

   As previously discussed, this is just a simple proposal to introduce the
   redirection concept to people, and also to help some sysadmins who are
   currently coming up with weird ways to inform people about their
   onions. It's not the best way to do this, but it's definitely one of the
   simplest ways.

   In the future we could implement with more advanced auto-redirect proposals like:

   a) Have a "domains to onions" map into HTTPS-everywhere and have it do the
      autoredirects for us (performance benefits, and security benefits under many
      threat models).

   b) Bake onion addresses into SSL certificates and Let's Encrypt as suggested
      by comment:42 in #21952.

   But both of the designs above require non-trivial engineering/policy work
   and would still confuse people. So I think starting with a simple approach
   that will educate users and then moving to more advanced designs is a more
   normative way to go.

======================================================================
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171208162741</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-12-08 16:27:41-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

On 8 December 2017 at 09:06, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; As discussed in this mailing list and in IRC, I'm posting a subsequent
&gt; version of this proposal. Basic improvements:
&gt; - Uses a new custom HTTP header, instead of Alt-Svc or Location.
&gt; - Does not do auto-redirect; it instead suggests the onion based on
&gt;   antonella's mockup: https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
&gt;
&gt;
&gt;
&gt; ========================================================================
&gt; UX improvement proposal: Onion redirects using Onion-Location HTTP header
&gt; ========================================================================
&gt;
&gt; 1. Motivation:
&gt;
&gt;    Lots of high-profile websites have onion addresses these days (e.g. Tor ,
&gt;    NYT, blockchain, ProPublica).  All those websites seem confused on what's
&gt;    the right way to inform their users about their onion addresses. Here are
&gt;    some confusion examples:
&gt;      a) torproject.org does not even advertise their onion address to Tor users (!!!)
&gt;      b) blockchain.info throws an ugly ASCII page to Tor users mentioning their onion
&gt;         address and completely wrecking the UX (loses URL params, etc.)
&gt;      c) ProPublica has a "Browse via Tor" section which redirects to the onion site.
&gt;
&gt;    Ideally there would be a consistent way for websites to inform their users
&gt;    about their onion counterpart. This would provide the following positives:
&gt;      + Tor users would use onions more often. That's important for user
&gt;        education and user perception, and also to partially dispell the darkweb myth.
&gt;      + Website operators wouldn't have to come up with ad-hoc ways to advertise
&gt;        their onion services, which sometimes results in complete breakage of
&gt;        the user experience (particularly with blockchain)
&gt;
&gt;    This proposal specifies a simple way forward here that's far from perfect,
&gt;    but can still provide benefits and also improve user-education around onions
&gt;    so that in the future we could employ more advanced techniques.
&gt;
&gt;    Also see Tor ticket #21952 for more discussion on this:
&gt;       https://trac.torproject.org/projects/tor/ticket/21952
&gt;
&gt; 2. Proposal
&gt;
&gt;    We introduce a new HTTP header called "Onion-Location" with the exact same
&gt;    restrictions and semantics as the Location HTTP header.

For reference, this is https://tools.ietf.org/html/rfc7231#section-7.1.2

&gt; Websites can use the
&gt;    Onion-Location HTTP header to specify their onion counterpart, in the same
&gt;    way that they would use the Location header.
&gt;
&gt;    The Tor Browser intercepts the Onion-Location header (if any) and informs
&gt;    the user of the existense of the onion site, giving them the option to visit
&gt;    it. Tor Browser only does so if the header is served over HTTPS.
&gt;
&gt;    Browsers that don't support Tor SHOULD ignore the Onion-Location header.
&gt;
&gt; 3. Improvements
&gt;
&gt; 4. Drawbacks
&gt;
&gt; 4.1. No security/performance benefits
&gt;
&gt;    While we could come up with onion redirection proposals that provide
&gt;    security and performance benefits, this proposal does not actually provide
&gt;    any of those.
&gt;
&gt;    As a matter of fact, the security remains the same as connecting to normal
&gt;    websites (since we trust its HTTP headers), and the performance gets worse
&gt;    since we first need to connect to the website, get its headers, and then
&gt;    also connect to the onion.

I would specifically call out that the user has provided any
identifying information (cookies) that may be present, as well as
opened themselves to any possible browser-based attack vector served
by the target domain.

&gt;    Still _all_ the website approaches mentioned in the "Motivation" section
&gt;    suffer from the above drawbacks, and sysadmins still come up with ad-hoc
&gt;    ways to inform users abou their onions. So this simple proposal will still
&gt;    help those websites and also pave the way forward for future auto-redirect
&gt;    techniques.
&gt;
&gt; 4.2. Defining new HTTP headers is not the best idea
&gt;
&gt;    This proposal defines a new non-standard HTTP header. This is not great
&gt;    because it makes Tor into a "special" thing that needs to be supported with
&gt;    special headers. However, the fact that it's a new HTTP header that only
&gt;    works for Tor is a positive thing since it means that non-Tor browsers will
&gt;    just ignore it.
&gt;
&gt;    Furthermore, another drawback is that this HTTP header will increase the
&gt;    bandwidth needlessly if it's also served to non-Tor clients. Hence websites
&gt;    with lots of client traffic are encouraged to use tools that detect Tor
&gt;    users and only serve the header to them (e.g. tordnsel).

I would talk about how users could experience false positives and
false negatives if this mechanism is used.



I think it is also worth addressing that this does not stop sysadmins
from (trying to) detect tor users, and send the onion address in the
Location header, thus triggering a non-prompting redirect. But that
they should consider the potential user confusion of being redirected
to an odd looking domain in such a scenario. And state that this
mechanism is designed to provide a browser-supported option to
consistently offer an onion service in a hopefully less-confusing way.

-tom

&gt; 5. The future
&gt;
&gt;    As previously discussed, this is just a simple proposal to introduce the
&gt;    redirection concept to people, and also to help some sysadmins who are
&gt;    currently coming up with weird ways to inform people about their
&gt;    onions. It's not the best way to do this, but it's definitely one of the
&gt;    simplest ways.
&gt;
&gt;    In the future we could implement with more advanced auto-redirect proposals like:
&gt;
&gt;    a) Have a "domains to onions" map into HTTPS-everywhere and have it do the
&gt;       autoredirects for us (performance benefits, and security benefits under many
&gt;       threat models).
&gt;
&gt;    b) Bake onion addresses into SSL certificates and Let's Encrypt as suggested
&gt;       by comment:42 in #21952.
&gt;
&gt;    But both of the designs above require non-trivial engineering/policy work
&gt;    and would still confuse people. So I think starting with a simple approach
&gt;    that will educate users and then moving to more advanced designs is a more
&gt;    normative way to go.
&gt;
&gt; ======================================================================
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171208214816</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-08 21:48:16-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>


On 9 Dec 2017, at 03:27, Tom Ritter &lt;tom@ritter.vg&gt; wrote:

&gt;&gt; We introduce a new HTTP header called "Onion-Location" with the exact same
&gt;&gt;   restrictions and semantics as the Location HTTP header.
&gt; 
&gt; For reference, this is https://tools.ietf.org/html/rfc7231#section-7.1.2

Because this is a non-standard header, does it need to be spelled:
"X-Onion-Location"?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171208214946</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-12-08 21:49:46-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

On 8 December 2017 at 15:48, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt; On 9 Dec 2017, at 03:27, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;
&gt;&gt;&gt; We introduce a new HTTP header called "Onion-Location" with the exact same
&gt;&gt;&gt;   restrictions and semantics as the Location HTTP header.
&gt;&gt;
&gt;&gt; For reference, this is https://tools.ietf.org/html/rfc7231#section-7.1.2
&gt;
&gt; Because this is a non-standard header, does it need to be spelled:
&gt; "X-Onion-Location"?

Nope =)
https://tools.ietf.org/html/rfc6648

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171210041657</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-10 04:16:57-0400</timestampReceived><subject>Re: [tor-dev] Discussion Meeting for Prop#249 "Large CREATE cells"</subject><body>


&gt; On 9 Dec 2017, at 11:29, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; 
&gt; Hello all,
&gt; 
&gt; What: A proposal discussion meeting for prop#249 "Allow CREATE cells with
&gt;&gt; 505 bytes of handshake data". [0]
&gt; 
&gt; Who:  This proposal is likely of interest to those hoping to integrate newer,
&gt;      non-ECC-based, circuit-layer handshakes into the Tor protocol.
&gt; 
&gt; When: Next week, on Monday or Tuesday (or Wednesday, for some timezones).
&gt;      If you'd like to attend, please vote on a time here:
&gt;      https://doodle.com/poll/v924cbt2at3rzvc9
&gt; 
&gt; Where: irc.oftc.net #tor-meeting
&gt; 
&gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/249-large-create-cells.txt
&gt; 
&gt; Meeting Preparation Materials
&gt; =============================
&gt; 
&gt; The following is meant for attendees to refresh before the meeting.  Please
&gt; feel free to respond with further summary and/or open questions/concerns.
&gt; 
&gt; Proposal Summary
&gt; ~~~~~~~~~~~~~~~~
&gt; The proposal outlines two new cell types, CREATE2V and CREATED2V, which are
&gt; variable-length and (like their CREATE2/CREATED2 counterparts) are sent
&gt; encapsulated in EXTEND2 cells.  Due to their variable-length, however, if a
&gt; CREATE(D)2V cell's HDATA is larger than the standard allotment of 505 bytes,
&gt; these new cells are fragmented across multiple EXTEND2 cells.
&gt; 
&gt; Open Questions/Concerns
&gt; ~~~~~~~~~~~~~~~~~~~~~~~
&gt; 
&gt; 1. Since CREATE2V cells are used for handshakes, and several newer,
&gt;   post-quantum primitives have asymmetric payloads for the client versus
&gt;   server directions, should we require that the CREATE(D)2V padding be used
&gt;   to equalise the number of bytes sent in each direction?

Should we pad to a certain multiple of cells, to hide which handshake is being
used?

I think this matters in the onion service case, because it allows
non-rendezvous points to work out the orientation of the client to service
circuit using the handshake. But relays can already do this probabilistically,
using cell response latency.

But otherwise, I can't see how it matters unless we are trying to hide the
type of handshake: circuit orientation is known by each hop, because they
each know the direction they sent and received EXTENDs in.

&gt; 2. Should we randomise the bytes in the padding?  (Currently, as proposed,
&gt;   we require all-zero padding.)
&gt; 
&gt; 3. Should we do anything more future-proofed w.r.t. the future possibility
&gt;   of using an alternate (non-stateful, e.g. not TCP) transport?
&gt;   (Currently, the proposal relies heavily upon the transport-layer to
&gt;   provide delivery guarantee and, perhaps more important, ordering.)
&gt; 
&gt; 4. Shoule we, for hybrid handshakes (handshakes which use multiple separate
&gt;   primitives to derive shared secrets, e.g. ECDH+RLWE or ECDH+SIDH, by
&gt;   conducting each handshake separately and composing their respective
&gt;   resulting shared secrets), design some mechanism where, if a party only
&gt;   supports say the ECDH portion of the hybrid handshake and not the RLWE
&gt;   part, then they proceed with the portion they understand?  For example, a
&gt;   client sends their portion of a ECDH+RLWE handshake to a relay which only
&gt;   understands ECDH, so the relay responds with only ECDH and they continue.
&gt;   This is mostly a difference in subprotocol versioning for handshakes,
&gt;   that is, an ECDH+RLWE handshake, rather than being "handshake type 5" or
&gt;   whatever, would be "handshake type 2 AND/OR handshake type 5".
&gt; 
&gt; 5. As written, the proposal doesn't specify a maximum (or minimum) size of
&gt;   handshake data.  However, the max is somewhat limited by the number of
&gt;   allowed RELAY_EARLY cells; maximum handshake data is then limited to
&gt;   462+(7*492)=3906 bytes.

More precisely, assuming all handshakes are the same size, and counting
hops using the number of relays, maximum outbound handshake data is:
* unlimited for the first hop
* limited to 8 cells for the second hop in a two-hop circuit
  (bandwidth scanners use two-hop circuits)
* limited to 8/2 = 4 cells for the second and subsequent hops in a
   three-hop circuit
* limited to 8/(3,4) = 2 cells  for the second and subsequent hops in a four
   or five-hop circuit (4 hops can happen with circuit cannibalisation, and
   4 hops is the minimum for onion service client intro or service rend, and
   some vanguard circuits. 5-8 hops can happen with onion service client intro
   extends)
* limited to 8/(5,6,7,8) = 1 cell for the second and subsequent hops in a six-hop
   (or greater) circuit (onion service client intro extends)

There is no limit on inbound handshake client data.

Can we invert the client/server directions in any of these handshakes?
(I imagine we can't, if the server declares public key material.)

Do vanguards every require 5 hops?
Does this proposal mean that we have to limit the number of client intro
extends on the same circuit?
Should we increase the number of RELAY_EARLY cells sent on legacy circuits
to hide these larger handshake sizes?

T


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171212200134</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-12 20:01:34-0400</timestampReceived><subject>Re: [tor-dev] Discussion Meeting for Prop#249 "Large CREATE cells"</subject><body>

[Attachment #2 (multipart/signed)]


Hi!

Next time I should do the poll for the meeting time earlier ahead of
time, my apologies.

It looks like everyone who wishes to can attend Wednesday, 13 December
at 22:00-23:00 UTC.  In local times, this is:

 - Wednesday, 13 December 14:00-15:00 PST
 - Wednesday, 13 December 17:00-18:00 EST
 - Wednesday, 13 December 00:00-01:00 CET
 - Thursday, 14 December 09:00-10:00 AUST

teor transcribed 6.8K bytes:
&gt; 
&gt; &gt; On 9 Dec 2017, at 11:29, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; Hello all,
&gt; &gt; 
&gt; &gt; What: A proposal discussion meeting for prop#249 "Allow CREATE cells with
&gt; &gt;&gt; 505 bytes of handshake data". [0]
&gt; &gt; 
&gt; &gt; Who:  This proposal is likely of interest to those hoping to integrate newer,
&gt; &gt;      non-ECC-based, circuit-layer handshakes into the Tor protocol.
&gt; &gt; 
&gt; &gt; When: Next week, on Monday or Tuesday (or Wednesday, for some timezones).
&gt; &gt;      If you'd like to attend, please vote on a time here:
&gt; &gt;      https://doodle.com/poll/v924cbt2at3rzvc9
&gt; &gt; 
&gt; &gt; Where: irc.oftc.net #tor-meeting
&gt; &gt; 
&gt; &gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/249-large-create-cells.txt
&gt; &gt; 
&gt; &gt; Meeting Preparation Materials
&gt; &gt; =============================
&gt; &gt; 
&gt; &gt; The following is meant for attendees to refresh before the meeting.  Please
&gt; &gt; feel free to respond with further summary and/or open questions/concerns.
&gt; &gt; 
&gt; &gt; Proposal Summary
&gt; &gt; ~~~~~~~~~~~~~~~~
&gt; &gt; The proposal outlines two new cell types, CREATE2V and CREATED2V, which are
&gt; &gt; variable-length and (like their CREATE2/CREATED2 counterparts) are sent
&gt; &gt; encapsulated in EXTEND2 cells.  Due to their variable-length, however, if a
&gt; &gt; CREATE(D)2V cell's HDATA is larger than the standard allotment of 505 bytes,
&gt; &gt; these new cells are fragmented across multiple EXTEND2 cells.
&gt; &gt; 
&gt; &gt; Open Questions/Concerns
&gt; &gt; ~~~~~~~~~~~~~~~~~~~~~~~
&gt; &gt; 
&gt; &gt; 1. Since CREATE2V cells are used for handshakes, and several newer,
&gt; &gt;   post-quantum primitives have asymmetric payloads for the client versus
&gt; &gt;   server directions, should we require that the CREATE(D)2V padding be used
&gt; &gt;   to equalise the number of bytes sent in each direction?
&gt; 
&gt; Should we pad to a certain multiple of cells, to hide which handshake is being
&gt; used?
&gt; 
&gt; I think this matters in the onion service case, because it allows
&gt; non-rendezvous points to work out the orientation of the client to service
&gt; circuit using the handshake. But relays can already do this probabilistically,
&gt; using cell response latency.
&gt; 
&gt; But otherwise, I can't see how it matters unless we are trying to hide the
&gt; type of handshake: circuit orientation is known by each hop, because they
&gt; each know the direction they sent and received EXTENDs in.
&gt; 
&gt; &gt; 2. Should we randomise the bytes in the padding?  (Currently, as proposed,
&gt; &gt;   we require all-zero padding.)
&gt; &gt; 
&gt; &gt; 3. Should we do anything more future-proofed w.r.t. the future possibility
&gt; &gt;   of using an alternate (non-stateful, e.g. not TCP) transport?
&gt; &gt;   (Currently, the proposal relies heavily upon the transport-layer to
&gt; &gt;   provide delivery guarantee and, perhaps more important, ordering.)
&gt; &gt; 
&gt; &gt; 4. Shoule we, for hybrid handshakes (handshakes which use multiple separate
&gt; &gt;   primitives to derive shared secrets, e.g. ECDH+RLWE or ECDH+SIDH, by
&gt; &gt;   conducting each handshake separately and composing their respective
&gt; &gt;   resulting shared secrets), design some mechanism where, if a party only
&gt; &gt;   supports say the ECDH portion of the hybrid handshake and not the RLWE
&gt; &gt;   part, then they proceed with the portion they understand?  For example, a
&gt; &gt;   client sends their portion of a ECDH+RLWE handshake to a relay which only
&gt; &gt;   understands ECDH, so the relay responds with only ECDH and they continue.
&gt; &gt;   This is mostly a difference in subprotocol versioning for handshakes,
&gt; &gt;   that is, an ECDH+RLWE handshake, rather than being "handshake type 5" or
&gt; &gt;   whatever, would be "handshake type 2 AND/OR handshake type 5".
&gt; &gt; 
&gt; &gt; 5. As written, the proposal doesn't specify a maximum (or minimum) size of
&gt; &gt;   handshake data.  However, the max is somewhat limited by the number of
&gt; &gt;   allowed RELAY_EARLY cells; maximum handshake data is then limited to
&gt; &gt;   462+(7*492)=3906 bytes.
&gt; 
&gt; More precisely, assuming all handshakes are the same size, and counting
&gt; hops using the number of relays, maximum outbound handshake data is:
&gt; * unlimited for the first hop
&gt; * limited to 8 cells for the second hop in a two-hop circuit
&gt;   (bandwidth scanners use two-hop circuits)
&gt; * limited to 8/2 = 4 cells for the second and subsequent hops in a
&gt;    three-hop circuit
&gt; * limited to 8/(3,4) = 2 cells  for the second and subsequent hops in a four
&gt;    or five-hop circuit (4 hops can happen with circuit cannibalisation, and
&gt;    4 hops is the minimum for onion service client intro or service rend, and
&gt;    some vanguard circuits. 5-8 hops can happen with onion service client intro
&gt;    extends)
&gt; * limited to 8/(5,6,7,8) = 1 cell for the second and subsequent hops in a six-hop
&gt;    (or greater) circuit (onion service client intro extends)
&gt; 
&gt; There is no limit on inbound handshake client data.
&gt; 
&gt; Can we invert the client/server directions in any of these handshakes?
&gt; (I imagine we can't, if the server declares public key material.)
&gt; 
&gt; Do vanguards every require 5 hops?
&gt; Does this proposal mean that we have to limit the number of client intro
&gt; extends on the same circuit?
&gt; Should we increase the number of RELAY_EARLY cells sent on legacy circuits
&gt; to hide these larger handshake sizes?
&gt; 
&gt; T
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171201175630</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-12-01 17:56:30-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

Hi teor,

&gt; Seems like an important proposal, if there is a good argument that a
&gt; particular amount of data is "safe". I think your research may help
&gt; with this.

Yes, I will try to prove it on the research so I would like to keep the 
proposal open until the research is finished.

&gt; If everybody chooses different amounts of data, that makes them easier to
&gt; identify.

This reason is why it is not recommended to change the default value, 
same as for the MaxCircuitDirtiness parameter, so I will specify it on 
the proposal.

&gt; Onion services also have similar behaviour, but we should check the
&gt; details.
&gt; 
&gt; The proposal doesn't specify how KeepAliveIsolateSOCKSAuth and onion
&gt; services work with MaxCircuitSizeDirtiness and
&gt; MaxCircuitSizeDirtinessByPort. We need to specify what happens, so the
&gt; Tor Browser team knows if it needs to change its torrc. And it would
&gt; help us decide what to set as the default for onion services.

Let me think about it. I will update the proposal soon and I will 
specify how KeepAliveIsolateSOCKSAuth and onion services work with this 
new feature.

ffmancera.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171201195417</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-01 19:54:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>


On 2 Dec 2017, at 04:56, Fernando Fernández Mancera &lt;ffernandezmancera@gmail.com&gt; \
wrote:

&gt; &gt; If everybody chooses different amounts of data, that makes them easier to
&gt; &gt; identify.
&gt; 
&gt; This reason is why it is not recommended to change the default value, same as for \
&gt; the MaxCircuitDirtiness parameter, so I will specify it on the proposal.

If a Tor option has a default value, and we don't recommend changing it,
we try to remove that option. So we are unlikely to accept a patch for a
new option unless there is some compelling use case for a group of users
to set it differently.

Otherwise, we would accept code to set a default and keep that default.

Onion services may be a use case for this option, because if too much data
gets sent through a single circuit, it makes it easy to identify the service's
guard. (Of course, this only protects the service if the next circuit uses a
different guard, which is not guaranteed.)

Alternately, Tor Browser may be a use case for this option, if it wants to
manage its circuits itself, regardless of the amount of data they send.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204021414</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-12-04 02:14:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

Fernando Fernández Mancera wrote:
[...]
&gt; Motivation:
&gt; 
&gt; Currently Tor users are reusing a given circuit for ten minutes (by default)
&gt; after it's first used. This time is too long because a malicious Exit relay can
&gt; trace a user's pseudonymous profile, especially if connections from multiple
&gt; protocols are put on the same circuit.
&gt; 

Interesting proposal.

Please see this:
https://lists.torproject.org/pipermail/tor-dev/2014-September/007517.html

And especially this reply:
https://lists.torproject.org/pipermail/tor-dev/2014-September/007518.html

It would be very nice if you could glue these into this proposal as well.

&gt; This time it is established on MaxCircuitDirtiness parameter and by default its
&gt; value is ten minutes.
&gt; 
&gt; I have been thinking in a way to fix this. The first idea that came to my mind
&gt; was to use StreamIsolationByHost and StreamIsolationByPort on it, but I wasn't
&gt; able to sort it out.
&gt; 
&gt; One day, I thought "Why is time so important?" and later on I realized that
&gt; maybe focusing on the amount of bytes running through the circuit could end up
&gt; being a better approach on this problem.
&gt; 

It makes sense, but the hardest thing here is coming with the right
amount of bytes value so we won't end up building on average more
circuits than we were with the 10 minutes time dirtiness configuration.

&gt; Design:
&gt; 
&gt; I propose two options to reduce this problem, both based on taking into account
&gt; the amount of bytes running through a circuit.
&gt; 
&gt; MaxCircuitSizeDirtiness (temporal parameter name) will take an integer field
&gt; that is contained on an interval and represents the maximum amount of bytes
&gt; that can be written/read (we need to discuss about the use of one for both) by
&gt; the circuit. If the circuit exceeds that amount, new streams won't use this
&gt; circuit anymore.
&gt; 
&gt; MaxCircuitSizeDirtinessByPort (temporal parameter name) will take an array of
&gt; integers that are contained on an interval and represents the maximum amount of
&gt; bytes that can be written/read (we need to discuss about the use of one for
&gt; both) by the circuit per port (StreamIsolationByPort). This array is parallel
&gt; to the array of ports from StreamIsolationByPort. If the circuit exceeds that
&gt; amount, new streams won't use this circuit anymore.
&gt; 

I just want to understand something clear so pointing it out, because it
reads "maximum amount of bytes...": the MaxCircuitSizeDirtiness counter
will count bytes read/write on a circuit by all streams attached to that
circuit, and as soon as threshold is reached the circuit will be marked
as dirty, but the circuit will be closed when all streams are idle,
correct? Like

If MaxCircuitSizeDirtiness is 10000 bytes (just for example)
I could download a file of 150000 bytes from a destination host:36455
over the same circuit, via a single stream, and as soon as that stream
is idle, count 150000 &gt; 10000 --&gt; mark circuit dirty, stop attaching new
streams to it? I think you thought of this but want to confirm.

&gt; Regarding default values it would be useful to set up one a bit lower than the
&gt; average amount of bytes per circuit. On MaxCircuitSizeDirtinessByPort after
&gt; discuss it we shouldn't set up a default value because someone can identify the
&gt; port used. About MaxCircuitDirtiness, if the others are set up by default it
&gt; could be bigger, like thirty minutes, so if the user doesn't send/receive a
&gt; significant amount of data the circuit will be changed anyway.
&gt; 
&gt; Security Implications:
&gt; 
&gt; It is believed that the proposed changes will improve the anonymity for end
&gt; users. The end user won't reuse a given circuit if they have sent a
&gt; considerable amount of bytes, thus making more difficult for malicious Exit
&gt; relays to be able to trace a user's pseudonymous profile.
&gt; 
&gt; Obviously this is a probability, of course it's possible that sensitive data
&gt; will leak in a little amount of data but it's more even possible that sensitive
&gt; data will leak in a large amount.
&gt; 
&gt; Specification:
&gt; 
&gt; In order to implement this feature we will need to add some new
&gt; functionalities. We need to parse MaxCircuitSizeDirtiness and
&gt; MaxCircuitSizeDirtinessByPort from the torrc config file. We need to create a
&gt; function or improve one to check the amount of bytes that are running through
&gt; the circuit and if this amount is higher than the established value, consider
&gt; the circuit dirty.
&gt; 
&gt; Compatibility:
&gt; 
&gt; The proposed changes should not create any compatibility issues. New Tor
&gt; clients will be able to take advantage of this without any modification to the
&gt; network.
&gt; 
&gt; Implementation:
&gt; 
&gt; It is proposed that MaxCircuitSizeDirtiness will be enabled by default and also
&gt; increase MaxCircuitDirtiness to thirty minutes. 
&gt; 
&gt; It is proposed that MaxCircuitSizeDirtinessByPort won't be enabled by default
&gt; for port 22, 53, and port 80 as StreamIsolationByPort.
&gt; 
&gt; About TorBrowser or any other Tor application that is able to manage circuits
&gt; by its own because of KeepAliveIsolateSOCKSAuth option being active by default
&gt; shouldn't be affected by this new feature. As the same form that it currently
&gt; ignores MaxCircuitDirtiness parameter.
&gt; 
&gt; Performance and scalability notes: 
&gt; 
&gt; The proposed changes will reduce Tor network stress as users who do not exceed
&gt; the set amount will reduce circuit generation by three (if default
&gt; MaxCircuitDirtinesss value is thirty minutes).
&gt; 
&gt; I want to work on demonstrating that by a research but first it's nice to get the
&gt; idea accepted.
&gt; 

Looking forward to see some preliminary statistics. Please think of this
threat model:

- an attacker discovers the location of an onion service. He hijacks it,
but does not alter the content or the functionality of the service, in
order not to signal the discovery to its users and further deanonymize
as many users as he can.

- he starts serving useless noise on that services so the bytes limit
threshold is reached fast, forcing users to build circuits more often
than the time dirtiness method.

- the attacker also controls some hostile relays that could potentially
be picked in any new created circuit.

Do we increase the success changes for these kind of attackers? make it
harder for them ? Or does the game remain unchanged?

The time dirtiness cannot be gamed by the attacker because it is based
just on user's action (or inaction), but the bytes sent over the circuit
can. That is why it is there in the first place.

If this sounds bad, here are two crazy ideas you could take into
consideration when doing the numbers:
1. Put a hard limit per stream as in how much a single stream can count
to the MaxCircuitSizeDirtiness threshold in terms of %, if that is
exceeded the bytes in excess are simply discounted, so it becomes
impossible for a circuit to be marked dirty "by size" just by being used
by a single stream.
2. Make MaxCircuitSizeDirtiness random, a value between n and m, where m
cannot be greater than n * q, for *each* circuit.
3. Both 1. and 2.?

Either way, thanks for working on this - this area needs some attention
and I am sure we can do better.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204114455</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-12-04 11:44:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

Hi,

&gt; Interesting proposal.
&gt; 
&gt; Please see this:
&gt; https://lists.torproject.org/pipermail/tor-dev/2014-September/007517.html
&gt; 
&gt; And especially this reply:
&gt; https://lists.torproject.org/pipermail/tor-dev/2014-September/007518.html
&gt; 
&gt; It would be very nice if you could glue these into this proposal as well.

It looks interesting so I will try to get it included into the proposal 
in the next update.

&gt; It makes sense, but the hardest thing here is coming with the right
&gt; amount of bytes value so we won't end up building on average more
&gt; circuits than we were with the 10 minutes time dirtiness configuration.

Of course it will be something really hard but my first idea is to use 
an amount of bytes a little low than the average amount in ten minutes.

&gt; I just want to understand something clear so pointing it out, because it
&gt; reads "maximum amount of bytes...": the MaxCircuitSizeDirtiness counter
&gt; will count bytes read/write on a circuit by all streams attached to that
&gt; circuit, and as soon as threshold is reached the circuit will be marked
&gt; as dirty, but the circuit will be closed when all streams are idle,
&gt; correct? Like
&gt; 
&gt; If MaxCircuitSizeDirtiness is 10000 bytes (just for example)
&gt; I could download a file of 150000 bytes from a destination host:36455
&gt; over the same circuit, via a single stream, and as soon as that stream
&gt; is idle, count 150000 &gt; 10000 --&gt; mark circuit dirty, stop attaching new
&gt; streams to it? I think you thought of this but want to confirm.

Yes, the moment the circuit exceeds the amount of bytes established it 
will stop attaching new streams to it. But the attached ones will 
continue sending/receiving data until idle.

&gt; Looking forward to see some preliminary statistics. Please think of this
&gt; threat model:
&gt; 
&gt; - an attacker discovers the location of an onion service. He hijacks it,
&gt; but does not alter the content or the functionality of the service, in
&gt; order not to signal the discovery to its users and further deanonymize
&gt; as many users as he can.
&gt; 
&gt; - he starts serving useless noise on that services so the bytes limit
&gt; threshold is reached fast, forcing users to build circuits more often
&gt; than the time dirtiness method.
&gt; 
&gt; - the attacker also controls some hostile relays that could potentially
&gt; be picked in any new created circuit.
&gt; 
&gt; Do we increase the success changes for these kind of attackers? make it
&gt; harder for them ? Or does the game remain unchanged?
&gt; 
&gt; The time dirtiness cannot be gamed by the attacker because it is based
&gt; just on user's action (or inaction), but the bytes sent over the circuit
&gt; can. That is why it is there in the first place.
&gt; 
&gt; If this sounds bad, here are two crazy ideas you could take into
&gt; consideration when doing the numbers:
&gt; 1. Put a hard limit per stream as in how much a single stream can count
&gt; to the MaxCircuitSizeDirtiness threshold in terms of %, if that is
&gt; exceeded the bytes in excess are simply discounted, so it becomes
&gt; impossible for a circuit to be marked dirty "by size" just by being used
&gt; by a single stream.
&gt; 2. Make MaxCircuitSizeDirtiness random, a value between n and m, where m
&gt; cannot be greater than n * q, for *each* circuit.
&gt; 3. Both 1. and 2.?
&gt; 
&gt; Either way, thanks for working on this - this area needs some attention
&gt; and I am sure we can do better.

I was thinking in the second option but I need more time to make sure 
this is fine.

I will update the proposal in the next weeks, thank you for your advices.

ffmancera.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171212193318</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-12-12 19:33:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

Hi all,

I have updated the proposal 287 taking into account the advice and
comments that you gave me. So please take a look and if you have
something to improve, don't hesitate to let me know.

Thanks everyone for the help. :-)

ffmancera.

-----------------------------------

Filename: 287-reduce-lifetime.txt
Title: Reduce circuit lifetime without overloading the network
Author: Fernando Fernandez Mancera
Created: 30-Nov-2017
Updated: 11-Dec-2017
Status: Open

Motivation:

Currently Tor users are reusing a given circuit for ten minutes (by default)
after it's first used. This time is too long because a malicious Exit relay can
trace a user's pseudonymous profile, especially if connections from multiple
protocols are put on the same circuit.

This time is established on MaxCircuitDirtiness parameter and by default its
value is ten minutes.

I have been thinking in a way to fix this. The first idea that came to my mind
was to use StreamIsolationByHost and StreamIsolationByPort on it, but I wasn't
able to sort it out.

One day, I thought "Why is time so important?" and later on I realized that
maybe focusing on the amount of bytes running through the circuit could end up
being a better approach on this problem.

Design:

I propose two options to reduce this problem, both based on taking into account
the amount of bytes running through a circuit.

MaxCircuitSizeDirtiness (temporal parameter name) will take an integer field
that is contained on an interval and represents the maximum amount of bytes
that can be written/read (we need to discuss about the use of one for both) by
the circuit. If the circuit exceeds that amount, new streams won't use this
circuit anymore.

MaxCircuitSizeDirtinessByPort (temporal parameter name) will take an array of
integers that are contained on an interval and represents the maximum amount of
bytes that can be written/read (we need to discuss about the use of one for
both) by the circuit per port (StreamIsolationByPort). This array is parallel
to the array of ports from StreamIsolationByPort. If the circuit exceeds that
amount, new streams won't use this circuit anymore.

Regarding default values it would be useful to set up one a bit lower than the
average amount of bytes per circuit. On MaxCircuitSizeDirtinessByPort after
discussing it we shouldn't set up a default value because someone can identify
the port used. About MaxCircuitDirtiness, if the others are set up by default
it could be bigger, like thirty minutes, so if the user doesn't send/receive a
significant amount of data the circuit will be changed anyway.

In order to make it more difficult for an attacker to identify user by focusing
on the established amount of bytes, we can introduce a range of
MaxCircuitSizeDirtiness * [0.8, 1.1] per circuit.

Security Implications:

It is believed that the proposed changes will improve the anonymity for end
users. The end user won't reuse a given circuit if they have sent a
considerable amount of bytes, thus making it more difficult for malicious Exit
relays to be able to trace a user's pseudonymous profile.

About the security on Onion services, the proposed changes could improve the
anonymity because if too much data gets sent through a single circuit, it makes
it easy to identify the service's guard. It is not ensured that the guard
changes but it increases the probability.

Obviously this is a probability, of course it's possible that sensitive data
will leak in a little amount of data but it's even more possible that sensitive
data will leak in a large amount.

Specification:

In order to implement this feature we will need to add some new
functionalities. We need to parse MaxCircuitSizeDirtiness and
MaxCircuitSizeDirtinessByPort from the torrc config file. We need to create a
function or improve one to check the amount of bytes that are running through
the circuit and if this amount is higher than the established value, consider
the circuit dirty.

Compatibility:

The proposed changes should not create any compatibility issues. New Tor
clients will be able to take advantage of this without any modification to the
network.

Implementation:

It is proposed that MaxCircuitSizeDirtiness will be enabled by default and also
increase MaxCircuitDirtiness to thirty minutes.

It is proposed that MaxCircuitSizeDirtinessByPort won't be enabled by default
for port 22, 53, and port 80 as StreamIsolationByPort.

How it works with KeepAliveIsolateSOCKSAuth:

  - If KeepAliveIsolateSOCKSAuth option is active, then if on
    (MaxCircuitDirtiness * 0.5) minutes the amount of bytes sent/received
    through the circuit doesn't surpass half of the established amount,
    this amount will be reset.

  - If KeepAliveIsolateSOCKSAuth option isn't active, then
    MaxCircuitSizeDirtiness will work as normal.

Performance and scalability notes:

The proposed changes will reduce Tor network stress as users who do not exceed
the set amount will reduce circuit generation by three (if default
MaxCircuitDirtinesss value is thirty minutes).

I want to work on demonstrate that by a research but first it's nice to get the
idea accepted.

References:

Tor project research ideas [https://research.torproject.org/ideas.html]

Enhancing Tor's Performance using Real-time Traffic Classification
[https://www.cypherpunks.ca/~iang/pubs/difftor-ccs.pdf] (It's not exactly about
that, but they talk about circuit lifetime and the ten minutes problem a few
times. Also it is an interesting paper.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171212223436</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-12 22:34:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>


&gt; On 13 Dec 2017, at 06:33, Fernando Fernández Mancera &lt;ffernandezmancera@gmail.com&gt; wrote:
&gt; 
&gt; Hi all,
&gt; 
&gt; I have updated the proposal 287 taking into account the advice and
&gt; comments that you gave me. So please take a look and if you have
&gt; something to improve, don't hesitate to let me know.
&gt; 
&gt; Thanks everyone for the help. :-)
&gt; 
&gt; ffmancera.
&gt; 
&gt; -----------------------------------
&gt; 
&gt; Filename: 287-reduce-lifetime.txt
&gt; Title: Reduce circuit lifetime without overloading the network
&gt; Author: Fernando Fernandez Mancera
&gt; Created: 30-Nov-2017
&gt; Updated: 11-Dec-2017
&gt; Status: Open
&gt; 
&gt; Motivation:
&gt; 
&gt; Currently Tor users are reusing a given circuit for ten minutes (by default)
&gt; after it's first used. This time is too long because a malicious Exit relay can
&gt; trace a user's pseudonymous profile, especially if connections from multiple
&gt; protocols are put on the same circuit.
&gt; 
&gt; This time is established on MaxCircuitDirtiness parameter and by default its
&gt; value is ten minutes.
&gt; 
&gt; I have been thinking in a way to fix this. The first idea that came to my mind
&gt; was to use StreamIsolationByHost and StreamIsolationByPort on it, but I wasn't
&gt; able to sort it out.
&gt; 
&gt; One day, I thought "Why is time so important?" and later on I realized that
&gt; maybe focusing on the amount of bytes running through the circuit could end up
&gt; being a better approach on this problem.
&gt; 
&gt; Design:
&gt; 
&gt; I propose two options to reduce this problem, both based on taking into account
&gt; the amount of bytes running through a circuit.
&gt; 
&gt; MaxCircuitSizeDirtiness (temporal parameter name) will take an integer field
&gt; that is contained on an interval and represents the maximum amount of bytes
&gt; that can be written/read (we need to discuss about the use of one for both) by
&gt; the circuit. If the circuit exceeds that amount, new streams won't use this
&gt; circuit anymore.
&gt; 
&gt; MaxCircuitSizeDirtinessByPort (temporal parameter name) will take an array of
&gt; integers that are contained on an interval and represents the maximum amount of
&gt; bytes that can be written/read (we need to discuss about the use of one for
&gt; both) by the circuit per port (StreamIsolationByPort). This array is parallel
&gt; to the array of ports from StreamIsolationByPort. If the circuit exceeds that
&gt; amount, new streams won't use this circuit anymore.
&gt; 
&gt; Regarding default values it would be useful to set up one a bit lower than the
&gt; average amount of bytes per circuit. On MaxCircuitSizeDirtinessByPort after
&gt; discussing it we shouldn't set up a default value because someone can identify
&gt; the port used. About MaxCircuitDirtiness, if the others are set up by default
&gt; it could be bigger, like thirty minutes, so if the user doesn't send/receive a
&gt; significant amount of data the circuit will be changed anyway.
&gt; 
&gt; In order to make it more difficult for an attacker to identify user by focusing
&gt; on the established amount of bytes, we can introduce a range of
&gt; MaxCircuitSizeDirtiness * [0.8, 1.1] per circuit.

Is there any reason you picked these values?

Typically, when we randomise something, we make sure the parameter
values is the average.

&gt; Security Implications:
&gt; 
&gt; It is believed that the proposed changes will improve the anonymity for end
&gt; users. The end user won't reuse a given circuit if they have sent a
&gt; considerable amount of bytes, thus making it more difficult for malicious Exit
&gt; relays to be able to trace a user's pseudonymous profile.

Is there any research supporting this?
Is it compelling enough to offset the usability issues?
(See below.)

&gt; About the security on Onion services, the proposed changes could improve the
&gt; anonymity because if too much data gets sent through a single circuit, it makes
&gt; it easy to identify the service's guard. It is not ensured that the guard
&gt; changes but it increases the probability.

This we believe to be true, and we think we've seen attacks using it.
But changing circuits doesn't help those attacks.

Also, are you proposing that services mark circuits dirty?
Because Tor doesn't work like that right now.
Only clients mark circuits dirty.

&gt; Obviously this is a probability, of course it's possible that sensitive data
&gt; will leak in a little amount of data but it's even more possible that sensitive
&gt; data will leak in a large amount.
&gt; 
&gt; Specification:
&gt; 
&gt; In order to implement this feature we will need to add some new
&gt; functionalities. We need to parse MaxCircuitSizeDirtiness and
&gt; MaxCircuitSizeDirtinessByPort from the torrc config file. We need to create a
&gt; function or improve one to check the amount of bytes that are running through
&gt; the circuit and if this amount is higher than the established value, consider
&gt; the circuit dirty.
&gt; 
&gt; Compatibility:
&gt; 
&gt; The proposed changes should not create any compatibility issues. New Tor
&gt; clients will be able to take advantage of this without any modification to the
&gt; network.
&gt; 
&gt; Implementation:
&gt; 
&gt; It is proposed that MaxCircuitSizeDirtiness will be enabled by default and also
&gt; increase MaxCircuitDirtiness to thirty minutes.
&gt; 
&gt; It is proposed that MaxCircuitSizeDirtinessByPort won't be enabled by default
&gt; for port 22, 53, and port 80 as StreamIsolationByPort.
&gt; 
&gt; How it works with KeepAliveIsolateSOCKSAuth:
&gt; 
&gt;  - If KeepAliveIsolateSOCKSAuth option is active, then if on
&gt;    (MaxCircuitDirtiness * 0.5) minutes the amount of bytes sent/received
&gt;    through the circuit doesn't surpass half of the established amount,
&gt;    this amount will be reset.

This will break usability on many websites that depend on requests
coming from the same IP address. This is why Tor Browser manages its
own circuit lifetimes, and this change would break that.

&gt;  - If KeepAliveIsolateSOCKSAuth option isn't active, then
&gt;    MaxCircuitSizeDirtiness will work as normal.
&gt; 
&gt; Performance and scalability notes:
&gt; 
&gt; The proposed changes will reduce Tor network stress as users who do not exceed
&gt; the set amount will reduce circuit generation by three (if default
&gt; MaxCircuitDirtinesss value is thirty minutes).
&gt; 
&gt; I want to work on demonstrate that by a research but first it's nice to get the
&gt; idea accepted.
&gt; 
&gt; References:
&gt; 
&gt; Tor project research ideas [https://research.torproject.org/ideas.html]
&gt; 
&gt; Enhancing Tor's Performance using Real-time Traffic Classification
&gt; [https://www.cypherpunks.ca/~iang/pubs/difftor-ccs.pdf] (It's not exactly about
&gt; that, but they talk about circuit lifetime and the ten minutes problem a few
&gt; times. Also it is an interesting paper.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171212003832</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-12 00:38:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>


&gt; On 12 Dec 2017, at 09:41, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; I'm not sure, but I think
&gt; https://trac.torproject.org/projects/tor/ticket/21377 needed a
&gt; proposal so I tried to write one up.

Thanks Tom!

Proposals are great for new directory authority features, particularly
when we're changing the directory specification.

I've quoted the proposal below with my comments:

&gt; Filename: xxx-expose-bwauth_votes.txt
&gt; Title: Have Directory Authorities expose raw bwauth vote documents
&gt; Author: Tom Ritter
&gt; Created: 11-December-2017
&gt; Status: Open
&gt; 
&gt; 1. Introduction
&gt; 
&gt; Bandwidth Authorities (bwauths) perform scanning of the Tor Network
&gt; and calculate observed speeds for each relay. They produce a 'bwauth
&gt; vote file' that is given to a Directory Authority. The Directory
&gt; Authority uses the speed value from this file in its vote file
&gt; denoting its view of the speed of the relay.
&gt; 
&gt; After collecting all of the votes from other Authorities, a consensus
&gt; is calculated, and the consensus's view of a relay's speed is
&gt; determined by choosing the low-median value [or is it high-median?]

low-median

&gt; of all the authorities' values for each relay.
&gt; 
&gt; Only a single metric from the bwauth vote file is exposed by a 
&gt; Directory Authority's vote, however the original file contains
&gt; considerably more diagnostic information about how the bwauth arrives
&gt; at that measurement for that relay.
&gt; 
&gt; 2. Motivation
&gt; 
&gt; The bwauth vote file contains more information that is exposed in the
&gt; overall vote file. This information is useful to debug anomalies in
&gt; relays' utilization and suspected bugs in the (decrepit) bwauth code.
&gt; 
&gt; Currently, all bwauths expose the raw vote file through various (non-
&gt; standard) means, and that file is downloaded (hourly) by a single person
&gt; (as long as his home internet connection and home server is working)
&gt; and archived (with a small amount of robustness.)  
&gt; 
&gt; It would be preferable to have this exposed in a standard manner.
&gt; Doing so would no longer require bwauths to run HTTP servers to expose
&gt; the file, no longer require them to take additional manual steps to
&gt; provide it, and would enable public consumption by any interested
&gt; parties.  We hope that Collector will begin archiving the files.
&gt; 
&gt; 3. Specification
&gt; 
&gt; An authority SHOULD publish the bwauth vote used to calculate its
&gt; current vote. It should make the bwauth vote file available at the

SHOULD

&gt; same time as its normal vote file.

Since the file is created by an external process, and we never store a
copy of any old files, I suggest that we make it available at the URL at
all times, as "the file that the authority has right now".

(And return a 404 when the file does not exist, is not readable, etc.)

&gt; It should make the file available
&gt; at
&gt;   http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z

We shouldn't use next/ unless we're willing to cache a copy of the file
we actually used to vote. If we do, we should serve it from next/ as
soon as we vote using it, then serve it from current/ as soon as the
consensus is created.

If we don't store a copy of the file, we should use a different URL,
like status-vote/now/bwauth, and recommend that the file is fetched at
hh:50, when the votes are created. This would allow us to implement
current/bwauth and next/bwauth in a future version.

Have you thought about versioning the URL if we have multiple flavours
of bwauth file? We could use bwauth-&lt;FLAVOR&gt; like consensuses.

Also, Tor has new compression options for zstd and lzma.

Given that this is an externally-controlled file, we could stream it
from disk and compress it on the fly with something cheap like gzip
or zstd.

&gt; It MUST NOT attempt to send its bwauth vote file in a HTTP POST to
&gt; other authorities and it SHOULD NOT make bwauth vote files from other
&gt; authorities available.
&gt; 
&gt; 4. Security Implications
&gt; 
&gt; The raw bwauth vote file does not [really: is not believed to] expose
&gt; any sensitive information.  All authorities currently make this
&gt; document public already, an example is at
&gt;   https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile

How large is the file?
Maybe we should pre-compress it, to avoid CPU exhaustion attacks.
If we did this, we could say that it's safe, as long as it is smaller
than the full consensus or full set of descriptors.

&gt; 5. Compatibility
&gt; 
&gt; Exposing the document presents no compatibility concerns.
&gt; 
&gt; The compatibility concern is with applications that want to consume
&gt; the document. The bwauth vote file has no specification, and has been
&gt; extended in ad-hoc ways. Applications that merely wish to archive the
&gt; document (e.g. Collector) won't have a problems. Applications that
&gt; want to parse it may encounter errors if a new (unexpected) field is
&gt; added, or assumptions are made about the text encoding or formatting
&gt; of the document.

Parsers may also encounter issues if we transition to another bwauth
implementation. We could remove fields if this happens.

T

-- 
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171210214554</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-10 21:45:54-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 11 Dec 2017, at 06:33, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; since a single operator now controls more than 10% of the tor network's
&gt; exit capacity

Or rather, do they control more than 10% of the Tor Network's consensus
weight?

Consensus weight is measured from 5 bandwidth scanners in North
America (3) and the Western EU (2), to 5 bandwidth servers in North
America (2), the Western EU (2), South America (0.5), and Asia (0.5).

Bandwidth server locations primarily affect how exits are weighted.

One thing we could to do resolve this weighting issue is to reconfigure
a majority of bandwidth scanners to use a CDN with points of presence
around the world as a bandwidth server. They could keep their existing
bandwidth servers as well.

This would also be a more accurate measurement of actual client
experience, as clients are fairly likely to be accessing a CDN for most
websites. (The majority of Tor traffic is web traffic, and most of it goes to
reasonably popular domains.)

Here's how we think that would affect measured bandwidth, in detail:
https://trac.torproject.org/projects/tor/wiki/doc/BandwidthAuthorityMeasurements#DoesBandwidthAuthorityLocationMatter


The next step towards making this change is to finish the current parallel
bandwidth authority tests, and start testing the Fastly CDN as one of the
set of bandwidth servers:

https://trac.torproject.org/projects/tor/ticket/24506

I also think Micah experimented with fastly when longclaw was a
bandwidth authority.

So any bandwidth authority operator could just add a CDN, and see how
it goes. That would be faster, and minimal risk, because the existing
bandwidth server would still be used as well.

&gt; I wanted to bring this up here (again [1]).

For those not clicking links, this email refers to a suggested scheme where
we automatically limit operators, ASs, and single relays to a bandwidth cap.

How do you define an "operator"?
How many operators would this affect over the past few years?

Using a particular situation to make a change like this, typically makes for
poor design and poor policy. Because people inevitably ask:
Which operator?
And then their opinions about the particular operator get confused with
their opinions about the general idea of limiting operators.

I thought we generally asked operators to keep it to 5%?
Then we ask large operators to support other organisations once they
reach 5%, so everyone can gradually move beyond their current capacity.

I'm not yet convinced we need a hard limit.
I think social means are sufficient for now.

And I think we should focus our efforts on expanding the pool of exits,
and improving bandwidth measurement, rather than limiting operators
who are helping the network. (New automatic limits will likely be seen
as a rejection of someone's contribution, so they should be handled very
carefully.)

If we must do this, let's do it manually, after contacting the operator.

&gt; What do you think about capping single operators (family) to 10% exit
&gt; capacity and 5% for guard operators?

How many operators would this affect over the past few years?

Here be dragons - see above.

&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2016-March/010653.html

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 11 Dec 2017, at 06:33, nusenu \
&lt;&lt;a href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;since a single operator \
now controls more than 10% of the tor network's&lt;/span&gt;&lt;br&gt;&lt;span&gt;exit \
capacity&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Or rather, do they control more than \
10% of the Tor Network's consensus&lt;div&gt;weight?&lt;div&gt;&lt;br&gt;&lt;div&gt;Consensus weight is \
measured from 5 bandwidth scanners in North&lt;/div&gt;&lt;div&gt;America (3) and the Western EU \
(2), to 5 bandwidth servers in North&lt;/div&gt;&lt;div&gt;America (2), the Western EU (2), South \
America (0.5), and Asia (0.5).&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bandwidth server \
locations primarily affect how exits are weighted.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One thing \
we could to do resolve this weighting issue is to reconfigure&lt;/div&gt;&lt;div&gt;a majority of \
bandwidth scanners to use a CDN with points of presence&lt;/div&gt;&lt;div&gt;around the world as \
a bandwidth server. They could keep their existing&lt;/div&gt;&lt;div&gt;bandwidth servers as \
well.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This would also be a more accurate measurement of \
actual client&lt;/div&gt;&lt;div&gt;experience, as clients are fairly likely to be accessing a \
CDN for most&lt;/div&gt;&lt;div&gt;websites. (The majority of Tor traffic is web traffic, and \
most of it goes to&lt;/div&gt;&lt;div&gt;reasonably popular \
domains.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's how we think that would affect measured \
bandwidth, in detail:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/BandwidthAuthorityMeasurements \
#DoesBandwidthAuthorityLocationMatter"&gt;https://trac.torproject.org/projects/tor/wiki/d \
oc/BandwidthAuthorityMeasurements#DoesBandwidthAuthorityLocationMatter&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
next step towards making this change is to finish the current \
parallel&lt;/div&gt;&lt;div&gt;bandwidth authority tests, and start testing the Fastly CDN as one \
of the&lt;/div&gt;&lt;div&gt;set of bandwidth servers:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24506"&gt;https://trac.torproject.org/projects/tor/ticket/24506&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
also think Micah experimented with fastly when longclaw was a&lt;/div&gt;&lt;div&gt;bandwidth \
authority.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So any bandwidth authority operator could just \
add a CDN, and see how&lt;/div&gt;&lt;div&gt;it goes. That would be faster, and minimal risk, \
because the existing&lt;/div&gt;&lt;div&gt;bandwidth server would still be used as \
well.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;I wanted to bring \
this up here (again [1]).&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;For those not \
clicking links, this email refers to a suggested scheme where&lt;div&gt;we automatically \
limit operators, ASs, and single relays to a bandwidth \
cap.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;How do you define an "operator"?&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;How many operators would this affect over the past few \
years?&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Using a particular situation to make a change \
like this, typically makes for&lt;/div&gt;&lt;div&gt;poor design and poor policy. Because people \
inevitably ask:&lt;/div&gt;&lt;div&gt;Which operator?&lt;/div&gt;&lt;div&gt;And then their opinions about the \
particular operator get confused with&lt;/div&gt;&lt;div&gt;their opinions about the general idea \
of limiting operators.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I thought we generally asked \
operators to keep it to 5%?&lt;/div&gt;&lt;div&gt;Then we ask large operators to support other \
organisations once they&lt;/div&gt;&lt;div&gt;reach 5%, so everyone can gradually move beyond \
their current capacity.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm not yet convinced we need a hard \
limit.&lt;/div&gt;&lt;div&gt;I think social means are sufficient for \
now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And I think we should focus our efforts on expanding \
the pool of exits,&lt;/div&gt;&lt;div&gt;and improving bandwidth measurement, rather than \
limiting operators&lt;/div&gt;&lt;div&gt;who are helping the network. (New automatic limits will \
likely be seen&lt;/div&gt;&lt;div&gt;as a rejection of someone's contribution, so they should be \
handled very&lt;/div&gt;&lt;div&gt;carefully.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we must do this, let's \
do it manually, after contacting the operator.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;What do you think about capping single operators (family) to \
10% exit&lt;/span&gt;&lt;br&gt;&lt;span&gt;capacity and 5% for guard \
operators?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;How many operators would this \
affect over the past few years?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Here be dragons - see \
above.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;[1] &lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2016-March/010653.html"&gt;https://l \
ists.torproject.org/pipermail/tor-dev/2016-March/010653.html&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171210222500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-10 22:25:00-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; since a single operator now controls more than 10% of the tor network's
&gt;&gt; exit capacity
&gt; 
&gt; Or rather, do they control more than 10% of the Tor Network's consensus
&gt; weight?

I'm referring to exit probability.

&gt; How do you define an "operator"?

Lets use "family" that is be more clear.

&gt; How many operators would this affect over the past few years?

From the top of my head I know about two
but I didn't parse historic data to be able to give a more precise answer.

&gt; I thought we generally asked operators to keep it to 5%?

Yes I'm aware of the discussion on tor-relays@ where Roger said:

&gt; I think 5% exit share is fine, and 10% is probably a bit too high.
&gt; 
&gt; That means as you grow past 5%, you should work with the other big exit
&gt; relay operator groups 

but operators have no effective means in controlling their own share, if
for example another big operator disappears.


&gt; And I think we should focus our efforts on expanding the pool of exits,
&gt; and improving bandwidth measurement, rather than limiting operators
&gt; who are helping the network. (New automatic limits will likely be seen
&gt; as a rejection of someone's contribution, so they should be handled very
&gt; carefully.)

I see your point.
Also note that there are operators that would actually appreciate such a
limit because they do not want to run more than X% (see tor-relays@).

thanks for your reply,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171210223742</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-10 22:37:42-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>


On 11 Dec 2017, at 09:25, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt;&gt; And I think we should focus our efforts on expanding the pool of exits,
&gt;&gt; and improving bandwidth measurement, rather than limiting operators
&gt;&gt; who are helping the network. (New automatic limits will likely be seen
&gt;&gt; as a rejection of someone's contribution, so they should be handled very
&gt;&gt; carefully.)
&gt; 
&gt; I see your point.
&gt; Also note that there are operators that would actually appreciate such a
&gt; limit because they do not want to run more than X% (see tor-relays@).

Automatic limits are also a denial of service risk for the entire network.

If we implement them poorly, they could cause a cascade effect that
pushes clients onto overloaded relays until they go down.

For that reason alone, I'm not convinced this is a good idea.

(I think we need a better design that separates load-balancing and
security parameters. This is an area that needs further research.)

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171210235650</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2017-12-10 23:56:50-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

teor wrote:
&gt; 
&gt; On 11 Dec 2017, at 09:25, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; And I think we should focus our efforts on expanding the pool of exits,
&gt;&gt;&gt; and improving bandwidth measurement, rather than limiting operators
&gt;&gt;&gt; who are helping the network. (New automatic limits will likely be seen
&gt;&gt;&gt; as a rejection of someone's contribution, so they should be handled very
&gt;&gt;&gt; carefully.)
&gt;&gt;
&gt;&gt; I see your point.
&gt;&gt; Also note that there are operators that would actually appreciate such a
&gt;&gt; limit because they do not want to run more than X% (see tor-relays@).
&gt; 
&gt; Automatic limits are also a denial of service risk for the entire network.
&gt; 
&gt; If we implement them poorly, they could cause a cascade effect that
&gt; pushes clients onto overloaded relays until they go down.
&gt; 
&gt; For that reason alone, I'm not convinced this is a good idea.
&gt; 
&gt; (I think we need a better design that separates load-balancing and
&gt; security parameters. This is an area that needs further research.)
&gt; 

I fully agree with teor here -- this is indeed something not to play
with. Besides teor's perfect valid technical reason, there's also a game
reason that such an implementation will only work on operators or
organizations that correctly configure MyFamily, which are assumed to be
honest until proven guilty, since they configure MyFamily and advertise
all their relays in the first place. Hostile operators or organizations
of course do not and will not configure MyFamily correctly if this would
be implemented to avoid the threshold.

I do understand that some operators are particularly concerned about how
much % they operate, but this can be lowered if too high for example by
setting RelayBandwidthRate, option which is ready and working and
doesn't add extra complications and side effects.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211002917</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-11 00:29:17-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 11 Dec 2017, at 10:56, s7r &lt;s7r@sky-ip.org&gt; wrote:
&gt; 
&gt; I do understand that some operators are particularly concerned about how
&gt; much % they operate, but this can be lowered if too high for example by
&gt; setting RelayBandwidthRate, option which is ready and working and
&gt; doesn't add extra complications and side effects.

If the concern is seeing the traffic of too many clients, then use
MaxAdvertisedBandwidth. That way, fewer clients will choose the relay
in their paths, but the ones that do get the entire bandwidth of the
relay. (And lower latency.)

If the concern is seeing too much Tor network data, then use
RelayBandwidthRate.

(This is also an area that needs more research: is it the volume of
network data that's bad, or the number of clients. I suspect it's the
number of clients.)

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlot0V0ACgkQdA2eOQJS
cqIw0g//a10QvLupHA3wy3jwIPHbaINYkSdeCgediWLd/ycO43E9JM9eKMA9WdMt
bd73GnBoy+NiducEe15b1uy/oGLhPWn6zvVCNjl+qEsfY2z1ep38NtJNMWpiBAxh
cMZJJPT7gV49DfGDjbMvUxeLgs+XqkyW9DyUEmYra/7BIGApcprExupt09Cm+6Ms
U2oEb1lMUWs607IGQMKh3D/shBO9I7kSfyfYQuyHq38bKvaieZyIqloUOEJ/8an4
TIp8S4twJrAARzKF+QmeKfJaDXcR1s9qdAprLgK30ZGsmpwUOo0a/Pvd1EM8wIqR
lObrZ9z+MYNJKpsrlvqT6OlRrt94jz2d3SeJUlpTXWxiUVWH5CbX1cgSe/CB7TRA
t43eiR5Lwg8rpXYQ1x8HsGg1oGrnTSx4MAXYZrFemH0TA3jYsjo35QkfgxRq7GkX
8aSNxp1wP/x0+6R4XZwn81QxQsxBT9w8HzxLZ/U27D8Q90w0jdCN0DmfOQo9LM0W
6q0uudaFmXEvvM0OCR0lhvOI5lb4ffHvlfFD0d5K2G9W+j+8t0d+/pEHQA5ooiS0
OqlCRalmIVT3gd87O9RF+6H7NIwNe3xy/nEcIjGlFm+exdyKOwD8NF9qrCXu8qTL
qCKk2IAftQTSwSHONLcxn0TBa54sL1Jk8cRAUV/xAMnKR7rIUBo=
=L66X
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211202900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-12-11 20:29:00-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; Automatic limits are also a denial of service risk for the entire network.
&gt; 
&gt; If we implement them poorly, they could cause a cascade effect that
&gt; pushes clients onto overloaded relays until they go down.
&gt; 
&gt; For that reason alone, I'm not convinced this is a good idea.

That is indeed a good point. I agree that relative caps would be
dangerous in that regard.

Absolute single relay cw caps do not have that problem and would prevent
insane cw values like &gt;800000.

I'll setup automatic notifications if certain thresholds are reached.

thanks for your feedback,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171130151715</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-11-30 15:17:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, 30 Nov 2017 07:55:49 -0500
Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; Filename: 286-hibernation-api.txt
&gt; Title: Controller APIs for hibernation access on mobile
&gt; Author: Nick Mathewson
&gt; Created: 30-November-2017
&gt; Status: Open

[snip]

Is this a general call for feedback/questions?  If so, what do you have
in mind for Pluggable Transports?

Currently I can count on zero fingers, the number of PTs that honor
hibernation state, or that have provisions for something like a
hibernation state.

I assume that if this was to be solved, the hibernation code would need
to tear down/respawn PTs, or someone needs to design an out of band IPC
mechanism between tor and PTs that can signal hibernation status.

The current approach to this problem involves toggling `DisableNetwork`.
See: https://trac.torproject.org/projects/tor/ticket/13213

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171201105611</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2017-12-01 10:56:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi Nick,

On 30/11/17 12:55, Nick Mathewson wrote:
&gt; 2. Improvements to the hibernation model
&gt; 
&gt;    To present a consistent interface that applications and
&gt;    controllers can use to manage power consumption, we make these
&gt;    enhancements to our hibernation model.
&gt; 
&gt;    First, we add three new hibernation states: "IDLE",
&gt;    "IDLE_UPDATING", "SLEEP", and "SLEEP_UPDATING".
&gt; 
&gt;    "IDLE" is like the current "idle" or "no predicted ports" state:
&gt;    Tor doesn't launch circuits or start any directory activity, but
&gt;    its listeners are still open.  Tor clients can enter the IDLE
&gt;    state on their own when they are LIVE, but haven't gotten any
&gt;    client activity for a while.  Existing connections and circuits
&gt;    are not closed. If the Tor instance receives any new connections,
&gt;    it becomes LIVE.

Does receiving a new connection include receiving a rendezvous cell from
one of the instance's intro points? If not, do we need a new status
message to tell the controller about this, or is there an existing
message we can use?

&gt; 2.2. Onion service operation
&gt; 
&gt;    When a Tor instance that is running an onion service is IDLE, it
&gt;    does the minimum to try to remain responsive on the onion
&gt;    service: It keeps its introduction points open if it can. Once a
&gt;    day, it fetches new directory information and opens new
&gt;    introduction points.

If a client connects to the service, the service will need to build a
circuit to the rendezvous point. Does it fetch up-to-date directory
information before doing so? If so, there's a delay that may let the
client know the service was idle. Is that a problem?

Two other possibilities would be for the service to fetch directory
information every hour in case a client connects, or to build the
circuit using whatever information it has available, which may be up to
a day old. Is that a problem?

&gt; 3.2. Changing the hibernation state
&gt; 
&gt;    We add the following new possible values to the SIGNAL controller
&gt;    command:
&gt;       "SLEEP" -- enter the sleep state, after an appropriate
&gt;          shutdown interval.
&gt; 
&gt;       "IDLE" -- enter the idle state
&gt; 
&gt;       "SLEEPWALK" -- If in sleep or idle, start probing for
&gt;          directory information in the sleep-update or idle-update
&gt;          state respectively.  Remain in that state until we've
&gt;          probed for directory information, or until we're told to
&gt;          IDLE or SLEEP again, or (if we're idle) until we get client
&gt;          activity. Has no effect if not in sleep or idle.
&gt; 
&gt;       "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
&gt;          shutdown:sleep state, enter the live state.  Has no effect
&gt;          in any other state.

How does the controller find out when the Tor instance next needs to
fetch directory information (or post a hidden service descriptor) so it
can send a SLEEPWALK command at the right time? Or should the controller
just send the command periodically, maybe once an hour?

Cheers,
Michael

["0x9FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171201121640</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-01 12:16:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>


&gt; On 1 Dec 2017, at 21:56, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; 
&gt; Hi Nick,
&gt; 
&gt;&gt; On 30/11/17 12:55, Nick Mathewson wrote:
&gt;&gt; 2. Improvements to the hibernation model
&gt;&gt; 
&gt;&gt;   To present a consistent interface that applications and
&gt;&gt;   controllers can use to manage power consumption, we make these
&gt;&gt;   enhancements to our hibernation model.
&gt;&gt; 
&gt;&gt;   First, we add three new hibernation states: "IDLE",
&gt;&gt;   "IDLE_UPDATING", "SLEEP", and "SLEEP_UPDATING".
&gt;&gt; 
&gt;&gt;   "IDLE" is like the current "idle" or "no predicted ports" state:
&gt;&gt;   Tor doesn't launch circuits or start any directory activity, but
&gt;&gt;   its listeners are still open.  Tor clients can enter the IDLE
&gt;&gt;   state on their own when they are LIVE, but haven't gotten any
&gt;&gt;   client activity for a while.  Existing connections and circuits
&gt;&gt;   are not closed. If the Tor instance receives any new connections,
&gt;&gt;   it becomes LIVE.
&gt; 
&gt; Does receiving a new connection include receiving a rendezvous cell from
&gt; one of the instance's intro points? If not, do we need a new status
&gt; message to tell the controller about this, or is there an existing
&gt; message we can use?

For services, it should include receiving an INTRODUCE cell.

For clients, it should include application activity on the SOCKSPort
and similar.

Do clients fetch directory information on an application request?
It might have to get microdescs to get the right position on the HSDir
hash ring.
For a client .onion address request, does the client fetch the latest onion
service descriptor before connecting?

&gt;&gt; 2.2. Onion service operation
&gt;&gt; 
&gt;&gt;   When a Tor instance that is running an onion service is IDLE, it
&gt;&gt;   does the minimum to try to remain responsive on the onion
&gt;&gt;   service: It keeps its introduction points open if it can. Once a
&gt;&gt;   day, it fetches new directory information and opens new
&gt;&gt;   introduction points.
&gt; 
&gt; If a client connects to the service, the service will need to build a
&gt; circuit to the rendezvous point. Does it fetch up-to-date directory
&gt; information before doing so?

Interesting question.

It's not required, because the INTRODUCE cell contains all the
rendezvous point details. But I think we should be consistent,
and fetch a consensus and enough microdescs before performing
any client or service activity, just like we do when bootstrapping.
Otherwise, we'll end up with weird bugs.

(Services require microdescs to choose intro points, and to post
their descriptors to the right HSDirs on the hash ring.)

&gt; If so, there's a delay that may let the
&gt; client know the service was idle. Is that a problem?

Mobile clients typically have high latency already.
If enough clients do this, it won't be a problem.

&gt; Two other possibilities would be for the service to fetch directory
&gt; information every hour in case a client connects,

Even if it isn't a CPU drain, fetching info every hour would add to
network usage.

&gt; or to build the
&gt; circuit using whatever information it has available, which may be up to
&gt; a day old. Is that a problem?

It increases the failure rate.

It also makes the client stick out a bit more. We could mitigate this by
allowing all clients to use stale directory information to build circuits.

But I still think it's best to be consistent and get enough directory info.

&gt;&gt; 3.2. Changing the hibernation state
&gt;&gt; 
&gt;&gt;   We add the following new possible values to the SIGNAL controller
&gt;&gt;   command:
&gt;&gt;      "SLEEP" -- enter the sleep state, after an appropriate
&gt;&gt;         shutdown interval.
&gt;&gt; 
&gt;&gt;      "IDLE" -- enter the idle state
&gt;&gt; 
&gt;&gt;      "SLEEPWALK" -- If in sleep or idle, start probing for
&gt;&gt;         directory information in the sleep-update or idle-update
&gt;&gt;         state respectively.  Remain in that state until we've
&gt;&gt;         probed for directory information, or until we're told to
&gt;&gt;         IDLE or SLEEP again, or (if we're idle) until we get client
&gt;&gt;         activity. Has no effect if not in sleep or idle.
&gt;&gt; 
&gt;&gt;      "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
&gt;&gt;         shutdown:sleep state, enter the live state.  Has no effect
&gt;&gt;         in any other state.
&gt; 
&gt; How does the controller find out when the Tor instance next needs to
&gt; fetch directory information (or post a hidden service descriptor) so it
&gt; can send a SLEEPWALK command at the right time? Or should the controller
&gt; just send the command periodically, maybe once an hour?

I'm trying to work out what the use case is here, and why SLEEPWALK
is a good solution,

If the controller sends SLEEPWALK, and Tor has nothing to do, it should
immediately return to IDLE or SLEEP.

If the controller puts the Tor instance in IDLE mode, it doesn't need to
issue a SLEEPWALK command every hour, because Tor will do the
minimum it needs to do to be connected.

If the controller wants to keep the directory information more up to date
(so it can "warm start" with less delay), issuing a SLEEPWALK every
2 hours should be sufficient. (Clients typically have consensuses that
expire in 1.5 - 3 hours.)

The more options that Tor provides, and the more unusual things a
controller tries to do, the more clients will stick out due to delays.
So I don't think SLEEPWALK is a good idea, because it allows every
different controller to pick a different update interval.

So if IDLE doesn't meet your needs, it would help us to know why. If
there's enough demand for it, it may be better to add a "WARM" state,
where Tor checks for directory documents whenever a consensus
expires, and otherwise acts like IDLE.

That might be better than every controller choosing a separate
SLEEPWALK interval. In fact, it would allow us to remove the SLEEPWALK
state in favour of "WARM".

Is there any reason that controllers would want to do a once-off
SLEEPWALK, rather than staying "WARM" under certain conditions?

I can imagine that if we are on battery and wifi, we would want "WARM".
(It's simpler than triggering periodic SLEEPWALKs.)

But if the user launches a Tor-using app, or unlocks the screen, would we
want to issue one SLEEPWALK? Or would we want to stay "WARM" the
entire time the app or screen was being used?

The difference is subtle: it would only become apparent after 1-2 hours of
continuous device use. In the "WARM" state, the consensus would still
be live. If SLEEPWALK was issued once a few hours ago, it wouldn't be.

(The nice thing about SLEEPWALK is that controllers don't have to tell Tor
to IDLE again. Maybe that's enough of a benefit to justify it?)

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171205181239</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2017-12-05 18:12:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 01/12/17 12:16, teor wrote:
&gt; 
&gt;&gt; On 1 Dec 2017, at 21:56, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; On 30/11/17 12:55, Nick Mathewson wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;   When a Tor instance that is running an onion service is IDLE, it
&gt;&gt;&gt;   does the minimum to try to remain responsive on the onion
&gt;&gt;&gt;   service: It keeps its introduction points open if it can. Once a
&gt;&gt;&gt;   day, it fetches new directory information and opens new
&gt;&gt;&gt;   introduction points.
&gt;&gt;
&gt;&gt; If a client connects to the service, the service will need to build a
&gt;&gt; circuit to the rendezvous point. Does it fetch up-to-date directory
&gt;&gt; information before doing so?
&gt; 
&gt; Interesting question.
&gt; 
&gt; It's not required, because the INTRODUCE cell contains all the
&gt; rendezvous point details. But I think we should be consistent,
&gt; and fetch a consensus and enough microdescs before performing
&gt; any client or service activity, just like we do when bootstrapping.
&gt; Otherwise, we'll end up with weird bugs.

Could/should this be done by reusing the existing bootstrapping process,
i.e. by reverting back to an earlier stage in the process and repeating
the rest of the process?

&gt;&gt; If so, there's a delay that may let the
&gt;&gt; client know the service was idle. Is that a problem?
&gt; 
&gt; Mobile clients typically have high latency already.
&gt; If enough clients do this, it won't be a problem.

If the service needs to fetch a consensus and microdescs before it can
respond to a rendezvous cell, the delay could be far longer than the
difference in latency between a mobile phone and a laptop. So my point
is that the client will be able to tell that the service was woken from
idle by the rendezvous cell, which might have implications for the
service's anonymity.

For example, it lets the client know that the service isn't running on
the same device as another service the client recently connected to,
otherwise the device wouldn't have been idle. Maybe that's unavoidable,
or not worth avoiding, but I just wanted to flag the issue.

&gt;&gt;&gt; 3.2. Changing the hibernation state
&gt;&gt;&gt;
&gt;&gt;&gt;   We add the following new possible values to the SIGNAL controller
&gt;&gt;&gt;   command:
&gt;&gt;&gt;      "SLEEP" -- enter the sleep state, after an appropriate
&gt;&gt;&gt;         shutdown interval.
&gt;&gt;&gt;
&gt;&gt;&gt;      "IDLE" -- enter the idle state
&gt;&gt;&gt;
&gt;&gt;&gt;      "SLEEPWALK" -- If in sleep or idle, start probing for
&gt;&gt;&gt;         directory information in the sleep-update or idle-update
&gt;&gt;&gt;         state respectively.  Remain in that state until we've
&gt;&gt;&gt;         probed for directory information, or until we're told to
&gt;&gt;&gt;         IDLE or SLEEP again, or (if we're idle) until we get client
&gt;&gt;&gt;         activity. Has no effect if not in sleep or idle.
&gt;&gt;&gt;
&gt;&gt;&gt;      "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
&gt;&gt;&gt;         shutdown:sleep state, enter the live state.  Has no effect
&gt;&gt;&gt;         in any other state.
&gt;&gt;
&gt;&gt; How does the controller find out when the Tor instance next needs to
&gt;&gt; fetch directory information (or post a hidden service descriptor) so it
&gt;&gt; can send a SLEEPWALK command at the right time? Or should the controller
&gt;&gt; just send the command periodically, maybe once an hour?
&gt; 
&gt; I'm trying to work out what the use case is here, and why SLEEPWALK
&gt; is a good solution,
&gt; 
&gt; If the controller sends SLEEPWALK, and Tor has nothing to do, it should
&gt; immediately return to IDLE or SLEEP.
&gt; 
&gt; If the controller puts the Tor instance in IDLE mode, it doesn't need to
&gt; issue a SLEEPWALK command every hour, because Tor will do the
&gt; minimum it needs to do to be connected.

Maybe I've misunderstood the proposal, but I thought the intent was that
Tor wouldn't fetch anything in IDLE mode, and wouldn't automatically
change from IDLE to IDLE_UPDATING - it would need a SLEEPWALK signal to
tell it to change to IDLE_UPDATING, and then it would automatically
change back to IDLE when it was done.

I'm guessing that although limiting CPU wakeups is outside the scope of
this proposal, the SLEEPWALK mechanism is meant to be compatible with
some future changes where the device will be allowed to go into a sleep
state from which Tor can't wake it, and the controller will use the
platform's alarm API to schedule a SLEEPWALK signal to wake Tor so it
can perform its periodic tasks.

&gt; The more options that Tor provides, and the more unusual things a
&gt; controller tries to do, the more clients will stick out due to delays.
&gt; So I don't think SLEEPWALK is a good idea, because it allows every
&gt; different controller to pick a different update interval.

Rather than the controller picking an interval, would it be better for
Tor to specify (maybe in its response to the IDLE signal) when it next
needs to be woken?

&gt; So if IDLE doesn't meet your needs, it would help us to know why. If
&gt; there's enough demand for it, it may be better to add a "WARM" state,
&gt; where Tor checks for directory documents whenever a consensus
&gt; expires, and otherwise acts like IDLE.

Within the scope of this proposal that sounds like a good solution. But
if we're looking ahead to changes that allow the device to sleep without
shutting down Tor or disabling its network connectivity, then the
controller will need to be responsible for managing sleeps and wakeups,
which fits better with [my guess as to the intent of] the SLEEPWALK
mechanism than a WARM state.

Cheers,
Michael

["0x9FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171205221812</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-05 22:18:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>


&gt; On 6 Dec 2017, at 05:12, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; 
&gt;&gt; On 01/12/17 12:16, teor wrote:
&gt;&gt; 
&gt;&gt;&gt;&gt; On 1 Dec 2017, at 21:56, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; On 30/11/17 12:55, Nick Mathewson wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;  When a Tor instance that is running an onion service is IDLE, it
&gt;&gt;&gt;&gt;  does the minimum to try to remain responsive on the onion
&gt;&gt;&gt;&gt;  service: It keeps its introduction points open if it can. Once a
&gt;&gt;&gt;&gt;  day, it fetches new directory information and opens new
&gt;&gt;&gt;&gt;  introduction points.
&gt;&gt;&gt; 
&gt;&gt;&gt; If a client connects to the service, the service will need to build a
&gt;&gt;&gt; circuit to the rendezvous point. Does it fetch up-to-date directory
&gt;&gt;&gt; information before doing so?
&gt;&gt; 
&gt;&gt; Interesting question.
&gt;&gt; 
&gt;&gt; It's not required, because the INTRODUCE cell contains all the
&gt;&gt; rendezvous point details. But I think we should be consistent,
&gt;&gt; and fetch a consensus and enough microdescs before performing
&gt;&gt; any client or service activity, just like we do when bootstrapping.
&gt;&gt; Otherwise, we'll end up with weird bugs.
&gt; 
&gt; Could/should this be done by reusing the existing bootstrapping process,
&gt; i.e. by reverting back to an earlier stage in the process and repeating
&gt; the rest of the process?

Yes, this is what Tor already does when its clock changes or its directory
documents expire. We'll just have to make sure we don't break it!

&gt;&gt;&gt; If so, there's a delay that may let the
&gt;&gt;&gt; client know the service was idle. Is that a problem?
&gt;&gt; 
&gt;&gt; Mobile clients typically have high latency already.
&gt;&gt; If enough clients do this, it won't be a problem.
&gt; 
&gt; If the service needs to fetch a consensus and microdescs before it can
&gt; respond to a rendezvous cell, the delay could be far longer than the
&gt; difference in latency between a mobile phone and a laptop. So my point
&gt; is that the client will be able to tell that the service was woken from
&gt; idle by the rendezvous cell, which might have implications for the
&gt; service's anonymity.
&gt; 
&gt; For example, it lets the client know that the service isn't running on
&gt; the same device as another service the client recently connected to,
&gt; otherwise the device wouldn't have been idle. Maybe that's unavoidable,
&gt; or not worth avoiding, but I just wanted to flag the issue.

We try to avoid attacks like this.
Or, if we can't, we try to minimise their effect.

But when multiple onion services or clients share a tor instance, they also
share the state of the consensus, directory documents, and guards.

Our best answer is probably: "don't share a tor instance if you want
unlinkable onion services".

Or: "don't IDLE if you want unlinkable onion services".
(Also, never lose your network connection.)

&gt;&gt;&gt;&gt; 3.2. Changing the hibernation state
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;  We add the following new possible values to the SIGNAL controller
&gt;&gt;&gt;&gt;  command:
&gt;&gt;&gt;&gt;     "SLEEP" -- enter the sleep state, after an appropriate
&gt;&gt;&gt;&gt;        shutdown interval.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;     "IDLE" -- enter the idle state
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;     "SLEEPWALK" -- If in sleep or idle, start probing for
&gt;&gt;&gt;&gt;        directory information in the sleep-update or idle-update
&gt;&gt;&gt;&gt;        state respectively.  Remain in that state until we've
&gt;&gt;&gt;&gt;        probed for directory information, or until we're told to
&gt;&gt;&gt;&gt;        IDLE or SLEEP again, or (if we're idle) until we get client
&gt;&gt;&gt;&gt;        activity. Has no effect if not in sleep or idle.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;     "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
&gt;&gt;&gt;&gt;        shutdown:sleep state, enter the live state.  Has no effect
&gt;&gt;&gt;&gt;        in any other state.
&gt;&gt;&gt; 
&gt;&gt;&gt; How does the controller find out when the Tor instance next needs to
&gt;&gt;&gt; fetch directory information (or post a hidden service descriptor) so it
&gt;&gt;&gt; can send a SLEEPWALK command at the right time? Or should the controller
&gt;&gt;&gt; just send the command periodically, maybe once an hour?
&gt;&gt; 
&gt;&gt; I'm trying to work out what the use case is here, and why SLEEPWALK
&gt;&gt; is a good solution,
&gt;&gt; 
&gt;&gt; If the controller sends SLEEPWALK, and Tor has nothing to do, it should
&gt;&gt; immediately return to IDLE or SLEEP.
&gt;&gt; 
&gt;&gt; If the controller puts the Tor instance in IDLE mode, it doesn't need to
&gt;&gt; issue a SLEEPWALK command every hour, because Tor will do the
&gt;&gt; minimum it needs to do to be connected.
&gt; 
&gt; Maybe I've misunderstood the proposal, but I thought the intent was that
&gt; Tor wouldn't fetch anything in IDLE mode, and wouldn't automatically
&gt; change from IDLE to IDLE_UPDATING - it would need a SLEEPWALK signal to
&gt; tell it to change to IDLE_UPDATING, and then it would automatically
&gt; change back to IDLE when it was done.

LIVE fetches directory documents so it always has a live consensus.
IDLE fetches directory documents just often enough to stay online.
SLEEP fetches nothing.

&gt; I'm guessing that although limiting CPU wakeups is outside the scope of
&gt; this proposal, the SLEEPWALK mechanism is meant to be compatible with
&gt; some future changes where the device will be allowed to go into a sleep
&gt; state from which Tor can't wake it, and the controller will use the
&gt; platform's alarm API to schedule a SLEEPWALK signal to wake Tor so it
&gt; can perform its periodic tasks.
&gt; 
&gt;&gt; The more options that Tor provides, and the more unusual things a
&gt;&gt; controller tries to do, the more clients will stick out due to delays.
&gt;&gt; So I don't think SLEEPWALK is a good idea, because it allows every
&gt;&gt; different controller to pick a different update interval.
&gt; 
&gt; Rather than the controller picking an interval, would it be better for
&gt; Tor to specify (maybe in its response to the IDLE signal) when it next
&gt; needs to be woken?

Or, "the latest time it can be woken to have directory documents with
property X", where X is some combination of:
* a live consensus
* a reasonably live consensus
* enough non-expired descriptors to build circuits

&gt;&gt; So if IDLE doesn't meet your needs, it would help us to know why. If
&gt;&gt; there's enough demand for it, it may be better to add a "WARM" state,
&gt;&gt; where Tor checks for directory documents whenever a consensus
&gt;&gt; expires, and otherwise acts like IDLE.
&gt; 
&gt; Within the scope of this proposal that sounds like a good solution. But
&gt; if we're looking ahead to changes that allow the device to sleep without
&gt; shutting down Tor or disabling its network connectivity, then the
&gt; controller will need to be responsible for managing sleeps and wakeups,
&gt; which fits better with [my guess as to the intent of] the SLEEPWALK
&gt; mechanism than a WARM state.

We do need a use case here :-)

And yes, I agree that the controller should be able to manage wakeups.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171206162121</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2017-12-06 16:21:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 05/12/17 22:18, teor wrote:
&gt; 
&gt;&gt; On 6 Dec 2017, at 05:12, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; If the service needs to fetch a consensus and microdescs before it can
&gt;&gt; respond to a rendezvous cell, the delay could be far longer than the
&gt;&gt; difference in latency between a mobile phone and a laptop. So my point
&gt;&gt; is that the client will be able to tell that the service was woken from
&gt;&gt; idle by the rendezvous cell, which might have implications for the
&gt;&gt; service's anonymity.
&gt;&gt;
&gt;&gt; For example, it lets the client know that the service isn't running on
&gt;&gt; the same device as another service the client recently connected to,
&gt;&gt; otherwise the device wouldn't have been idle. Maybe that's unavoidable,
&gt;&gt; or not worth avoiding, but I just wanted to flag the issue.
&gt; 
&gt; We try to avoid attacks like this.
&gt; Or, if we can't, we try to minimise their effect.
&gt; 
&gt; But when multiple onion services or clients share a tor instance, they also
&gt; share the state of the consensus, directory documents, and guards.
&gt; 
&gt; Our best answer is probably: "don't share a tor instance if you want
&gt; unlinkable onion services".
&gt; 
&gt; Or: "don't IDLE if you want unlinkable onion services".
&gt; (Also, never lose your network connection.)

Sounds reasonable. Maybe something to this effect could be added to the
proposal, so app developers know what to expect in terms of linkability?

Could a long delay between receiving a rendezvous cell and responding
cause any other issues? For example, is there a high probability of the
client timing out before the service has fetched enough directory info
to be able to respond? If so, maybe it's worthwhile for the service to
be more proactive about keeping its directory info fresh?

&gt;&gt; Maybe I've misunderstood the proposal, but I thought the intent was that
&gt;&gt; Tor wouldn't fetch anything in IDLE mode, and wouldn't automatically
&gt;&gt; change from IDLE to IDLE_UPDATING - it would need a SLEEPWALK signal to
&gt;&gt; tell it to change to IDLE_UPDATING, and then it would automatically
&gt;&gt; change back to IDLE when it was done.
&gt; 
&gt; LIVE fetches directory documents so it always has a live consensus.
&gt; IDLE fetches directory documents just often enough to stay online.
&gt; SLEEP fetches nothing.

OK, so I guess the use case for SLEEPWALK is telling Tor to fetch a live
consensus and microdescs when it otherwise wouldn't have done - i.e. it
allows the controller to manage the freshness of the directory info?

But I'm really just guessing here. Nick, can you clarify?

&gt;&gt; Rather than the controller picking an interval, would it be better for
&gt;&gt; Tor to specify (maybe in its response to the IDLE signal) when it next
&gt;&gt; needs to be woken?
&gt; 
&gt; Or, "the latest time it can be woken to have directory documents with
&gt; property X", where X is some combination of:
&gt; * a live consensus
&gt; * a reasonably live consensus
&gt; * enough non-expired descriptors to build circuits

Yup, I think that makes sense - it achieves [what I guess is] the
purpose of SLEEPWALK while keeping knowledge about *why* Tor needs to be
woken at that time encapsulated within Tor, which is an improvement.

&gt;&gt;&gt; So if IDLE doesn't meet your needs, it would help us to know why. If
&gt;&gt;&gt; there's enough demand for it, it may be better to add a "WARM" state,
&gt;&gt;&gt; where Tor checks for directory documents whenever a consensus
&gt;&gt;&gt; expires, and otherwise acts like IDLE.
&gt;&gt;
&gt;&gt; Within the scope of this proposal that sounds like a good solution. But
&gt;&gt; if we're looking ahead to changes that allow the device to sleep without
&gt;&gt; shutting down Tor or disabling its network connectivity, then the
&gt;&gt; controller will need to be responsible for managing sleeps and wakeups,
&gt;&gt; which fits better with [my guess as to the intent of] the SLEEPWALK
&gt;&gt; mechanism than a WARM state.
&gt; 
&gt; We do need a use case here :-)
&gt; 
&gt; And yes, I agree that the controller should be able to manage wakeups.

OK, I have two use cases. They go beyond the scope of this proposal
because they're also concerned with CPU wakeups, but I'm not sure we can
really design the controller API without considering CPU wakeups at all.

The first use case is saving power by putting the device to sleep, while
keeping a hidden service available.

"Sleep" on Android is similar to suspend on Linux (for recent Android
kernels it's identical). User-space code is paused and the kernel only
responds to a limited set of interrupts, including network activity and
alarms.

Entering this state without disabling Tor's network connectivity causes
it to panic when the device wakes up - its libevent timers don't fire
during sleep, so it thinks the clock has jumped. Just suppressing that
panic reaction doesn't seem like a good idea. It would be better if we
could warn Tor that the device is about to sleep, so it should stop
building circuits and making connections, and should expect the clock to
jump. This was my original motivation for asking for an "idle mode".

If Tor tells the controller when it needs to be woken then the
controller can schedule an alarm.

The second use case is similar to the first, except the controller has
less flexibility about scheduling alarms because the device is in "doze
mode". This is a new power-saving mode on Android 6 that imposes extra
restrictions beyond normal sleep, such as ignoring wake locks, shutting
off network access and postponing alarms. If the user adds the app to a
whitelist then it can hold wake locks and use the network, but it's
still limited to scheduling alarms once every 15 minutes.

(This is totally braindead, by the way - if you want to do one second of
work every 14 minutes, your only choice is to hold a wake lock that
keeps the device awake the whole time, whereas before the new "power
saving" restrictions you could have scheduled an alarm and let the
device sleep. But such is Android.)

So for this use case, the controller can't wake Tor more than once every
15 minutes. If we're only waking Tor to fetch directory info and publish
HS descriptors, that's probably fine. But other ideas we considered,
like waking Tor once per minute so it can keep behaving more or less
normally, won't work in doze mode.

In both scenarios (sleep and doze), if there's any network activity
before the next alarm, the controller can grab a wake lock to keep the
device awake while Tor handles the network activity. There are two ways
we could achieve that: Tor could inform the controller about the network
activity, or Tor could connect to the network through a localhost proxy
provided by the controller, which would manage the wake locks transparently.

Cheers,
Michael

["0x9FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204073625</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-12-04 07:36:25-0400</timestampReceived><subject>Re: [tor-dev] Start contributing to Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Aruna,

You could have a look at these spec files if you haven't already
https://gitweb.torproject.org/torspec.git/tree/

Regards,
Jaskaran

On Mon, Dec 4, 2017 at 12:23 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
wrote:

&gt; I am new to the community and would like to contribute and help along. I
&gt; did a complete read up on how the Tor browser works, but I would like to
&gt; delve in more and get acquainted with the code base, so that I understand
&gt; and learn a lot in the process.
&gt;
&gt; I already cloned and built the Tor(core) and TorBrowser from source for
&gt; easy understanding and primarily as it would help me to reproduce bugs as I
&gt; work on them.
&gt;
&gt; Any further guidance is appreciated.
&gt;
&gt; Thankyou for spending the time to read this through.
&gt;
&gt; --
&gt; Regards,
&gt; Aruna Maurya,
&gt; CSE,B.tech,
&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi Aruna,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;You could have a look at these spec \
files if you haven't already&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/"&gt;https://gitweb.torproject.org/t \
orspec.git/tree/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Jaskaran&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 12:23 PM, \
Aruna Maurya &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="ltr"&gt;I am new to the community and would \
like to contribute and help along. I did a complete read up on how the Tor browser \
works, but I would like to delve in more and get acquainted with the code base, so \
that I understand and learn a lot in the process.    &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I already \
cloned and built the Tor(core) and TorBrowser from source for easy understanding and \
primarily as it would help me to reproduce bugs as I work on them.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any further guidance is appreciated.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thankyou for spending the time to read this \
through.&lt;/div&gt;&lt;span class="gmail-HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;&lt;div class="gmail-m_-4877592198078670251gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt; \
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204074737</emailId><senderName>Aruna Maurya</senderName><senderEmail>aruna.maurya12@gmail.com</senderEmail><timestampReceived>2017-12-04 07:47:37-0400</timestampReceived><subject>Re: [tor-dev] Start contributing to Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hey!

Thanks for the spec files. But why and what do they exactly do? Are they
somewhat like a documentation of everything?


On Mon, Dec 4, 2017 at 12:54 PM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:

&gt; Hi Aruna,
&gt;
&gt; You could have a look at these spec files if you haven't already
&gt; https://gitweb.torproject.org/torspec.git/tree/
&gt;
&gt; Regards,
&gt; Jaskaran
&gt;
&gt; On Mon, Dec 4, 2017 at 12:23 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt; I am new to the community and would like to contribute and help along. I
&gt;&gt; did a complete read up on how the Tor browser works, but I would like to
&gt;&gt; delve in more and get acquainted with the code base, so that I understand
&gt;&gt; and learn a lot in the process.
&gt;&gt;
&gt;&gt; I already cloned and built the Tor(core) and TorBrowser from source for
&gt;&gt; easy understanding and primarily as it would help me to reproduce bugs as I
&gt;&gt; work on them.
&gt;&gt;
&gt;&gt; Any further guidance is appreciated.
&gt;&gt;
&gt;&gt; Thankyou for spending the time to read this through.
&gt;&gt;
&gt;&gt; --
&gt;&gt; Regards,
&gt;&gt; Aruna Maurya,
&gt;&gt; CSE,B.tech,
&gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;&gt;
&gt;


-- 
Regards,
Aruna Maurya,
CSE,B.tech,
Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&lt;https://medium.com/@arunamaurya&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hey!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the spec files. But why and what do \
they exactly do? Are they somewhat like a documentation of \
everything?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 12:54 PM, Jaskaran Singh &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:jvsg1303@gmail.com" \
target="_blank"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hi Aruna,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;You could \
have a look at these spec files if you haven't already&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Jaskaran&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div&gt;&lt;div class="h5"&gt;On Mon, Dec 4, \
2017 at 12:23 PM, Aruna Maurya &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div&gt;&lt;div \
class="h5"&gt;&lt;div dir="ltr"&gt;I am new to the community and would like to contribute and \
help along. I did a complete read up on how the Tor browser works, but I would like \
to delve in more and get acquainted with the code base, so that I understand and \
learn a lot in the process.    &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I already cloned and built the \
Tor(core) and TorBrowser from source for easy understanding and primarily as it would \
help me to reproduce bugs as I work on them.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any further \
guidance is appreciated.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thankyou for spending the time to \
read this through.&lt;/div&gt;&lt;span class="m_4141839275055034551gmail-HOEnZb"&gt;&lt;font \
color="#888888"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_4141839275055034551gmail-m_-4877592198078670251gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt; \
&lt;br&gt;&lt;/div&gt;&lt;/div&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev \
mailing list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204082832</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-12-04 08:28:32-0400</timestampReceived><subject>Re: [tor-dev] Start contributing to Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Also,  here is the code structure explanation
https://git.torproject.org/user/nickm/torguts.git

On Mon, Dec 4, 2017 at 9:20 AM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt; wrote:

&gt; Yes somewhat. They can provide you an overall idea, but the best
&gt; documentation is the code itself.
&gt;
&gt; On Mon, Dec 4, 2017 at 1:05 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt; Hey!
&gt;&gt;
&gt;&gt; Thanks for the spec files. But why and what do they exactly do? Are they
&gt;&gt; somewhat like a documentation of everything?
&gt;&gt;
&gt;&gt;
&gt;&gt; On Mon, Dec 4, 2017 at 12:54 PM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt;
&gt;&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; Hi Aruna,
&gt;&gt;&gt;
&gt;&gt;&gt; You could have a look at these spec files if you haven't already
&gt;&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/
&gt;&gt;&gt;
&gt;&gt;&gt; Regards,
&gt;&gt;&gt; Jaskaran
&gt;&gt;&gt;
&gt;&gt;&gt; On Mon, Dec 4, 2017 at 12:23 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt;&gt;&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; I am new to the community and would like to contribute and help along.
&gt;&gt;&gt;&gt; I did a complete read up on how the Tor browser works, but I would like to
&gt;&gt;&gt;&gt; delve in more and get acquainted with the code base, so that I understand
&gt;&gt;&gt;&gt; and learn a lot in the process.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; I already cloned and built the Tor(core) and TorBrowser from source for
&gt;&gt;&gt;&gt; easy understanding and primarily as it would help me to reproduce bugs as I
&gt;&gt;&gt;&gt; work on them.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Any further guidance is appreciated.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Thankyou for spending the time to read this through.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; --
&gt;&gt;&gt;&gt; Regards,
&gt;&gt;&gt;&gt; Aruna Maurya,
&gt;&gt;&gt;&gt; CSE,B.tech,
&gt;&gt;&gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt;&gt;&gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; _______________________________________________
&gt;&gt;&gt;&gt; tor-dev mailing list
&gt;&gt;&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; --
&gt;&gt; Regards,
&gt;&gt; Aruna Maurya,
&gt;&gt; CSE,B.tech,
&gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;&gt;
&gt;&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Also,   here is the code structure explanation &lt;a \
href="https://git.torproject.org/user/nickm/torguts.git"&gt;https://git.torproject.org/user/nickm/torguts.git&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 9:20 AM, \
Jaskaran Singh &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:jvsg1303@gmail.com" \
target="_blank"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Yes somewhat. They can provide you an overall \
idea, but the best documentation is the code itself.&lt;br&gt;&lt;/div&gt;&lt;div \
class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 1:05 PM, Aruna Maurya &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hey!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the spec \
files. But why and what do they exactly do? Are they somewhat like a documentation of \
everything?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="m_5305700095247377830HOEnZb"&gt;&lt;div \
class="m_5305700095247377830h5"&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 12:54 PM, Jaskaran Singh &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:jvsg1303@gmail.com" \
target="_blank"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hi Aruna,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;You could \
have a look at these spec files if you haven't already&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Jaskaran&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div&gt;&lt;div \
class="m_5305700095247377830m_3246332994270940741h5"&gt;On Mon, Dec 4, 2017 at 12:23 PM, \
Aruna Maurya &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div&gt;&lt;div \
class="m_5305700095247377830m_3246332994270940741h5"&gt;&lt;div dir="ltr"&gt;I am new to the \
community and would like to contribute and help along. I did a complete read up on \
how the Tor browser works, but I would like to delve in more and get acquainted with \
the code base, so that I understand and learn a lot in the process.    \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I already cloned and built the Tor(core) and TorBrowser from \
source for easy understanding and primarily as it would help me to reproduce bugs as \
I work on them.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any further guidance is appreciated.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thankyou for spending the time to read this \
through.&lt;/div&gt;&lt;span class="m_5305700095247377830m_3246332994270940741m_4141839275055034551gmail-HOEnZb"&gt;&lt;font \
color="#888888"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_5305700095247377830m_3246332994270940741m_4141839275055034551gmail-m_-4877592198078670251gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt; \
&lt;br&gt;&lt;/div&gt;&lt;/div&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev \
mailing list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_5305700095247377830m_3246332994270940741gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204061048</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-04 06:10:48-0400</timestampReceived><subject>Re: [tor-dev] Running Tor with a 15MB memory limit</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 1 Dec 2017, at 15:48, Nathan Freitas &lt;nathan@freitas.net&gt; wrote:
&gt; 
&gt; 
&gt; I am currently supporting the iCepa project, an effort to get Tor to run
&gt; as a Network Extension VPN on iOS.
&gt; 
&gt; https://github.com/iCepa/iCepa
&gt; 
&gt; The good news is that, after a long time, we have the whole thing
&gt; somewhat working. The bad news is that after browsing a few pages
&gt; through Tor, the extension is shutdown due to going over the extremely
&gt; tiny 15MB available heap. More on this at:
&gt; 
&gt; https://forums.developer.apple.com/thread/73148
&gt; https://developer.apple.com/documentation/networkextension
&gt; 
&gt; My question is, does anyone else have experience running Tor within some
&gt; extreme memory limits? Any guidance on configuring torrc for this? Any
&gt; thoughts on build flags or changes that might reduce memory usage?

Do memory-mapped files count towards the limit?

If not, there is a patch on trac that memory-maps most of Tor's RAM:
https://trac.torproject.org/projects/tor/ticket/7176

And a ticket that attempts to make this more efficient:
https://trac.torproject.org/projects/tor/ticket/22704

You may also want to consider lowering MaxMemInQueues, if the issue only
occurs once you have sent some data.

Or you might want to lower the descriptor expiry time (I can't find an
option for this, it may be hard-coded), to stop microdescriptors adding
up over time.

Setting LearnCircuitBuildTimeout 0 will also reduce the number of circuits
you build, at the cost of poor performance if the actual timeout differs
from the default. The other *Timeout options and KeepalivePeriod may also
help here. Also, check out the ConnectionPadding option, which will send
more data to hide the actual client data. It might use more RAM.

There are other options like ConstrainedSockets and ConstrainedSockSize,
but it depends whether kernel network socket buffers count towards the
limits.

It would be useful to know what the majority of RAM is being used for.
Is it the consensus? Microdescriptors? Circuits?

You could probably get away with removing all the non-fast relays from
the consensus and removing their microdescs. But this might make your
client stand out.

&gt; We have already identified that the new compression features available
&gt; in recent versions of Tor consume more memory, and we may have to
&gt; disable those for now, for instance.

They should be disabled automatically if you build without the relevant
libraries.

I'm not sure if there is a way to disable the consensus diff code.
Is it causing increased RAM usage as well?

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlok5ugACgkQdA2eOQJS
cqJG+w/+OjXcN303g9IEs6/OSD2kLxMdQff2soZzcKSQK1aD8ZBosvVX0HYUBuHS
aFleWvmOO4KW+6oxOlij4TD32IF5FJk+uJqlaj9+fVCqdeGDgaQVgjFP1VsJwOQJ
FN9XRI1fo2QCIj9AQQHJS0p+IuwCGnZ/lsyNXEXM/EBeCjZLhZau+GKkuLbRGgsg
RPyP9pWbLjuM8e/VNOtAApF4Z607yBAnYWgm9hwHbe3JZqQkKbExpFQqHzd5ypTI
rZkVghG8TAgzUM5HXHzyFNHVvYRMxVt0tG18U1xToAPidhjj/oTqec/iE7wphvmE
Bjpx0mOYL05CHeJGPKC2IdvmQ0JJDKRlCTKAls6nBrw5nCyQliQ7d1mPD3GOB0Wi
66BD2pWSQyjVrvnqlXo8DWDl1Hjt3c0YpKy12IiTjOG9NEsOuqaSo0cvAZILp14V
sqZtGcDY/UHmRb4uuJe8JyzaftX8EwInKkwigv7ln3Ma9pUTWxL04ZOtn3t3mvcH
Pbx8V+RleE6jI1jNDwqNEqZOy3+VsVPCgB+GDgmmNUb1iUZkTBIWGttcyf03jVkM
Sbx3YGbQ8lCgOCtfzujyLrmJwYsJhsV60FlLeNf8rS12bPWDMadvmgC8KenOFUjK
gLnnnDfWS52YqT2yiOijKB6r4OK3trVk+mokJhGGNTYMF2+4Cwo=
=cKMu
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171204083216</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2017-12-04 08:32:16-0400</timestampReceived><subject>Re: [tor-dev] Start contributing to Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Yes somewhat. They can provide you an overall idea, but the best
documentation is the code itself.

On Mon, Dec 4, 2017 at 1:05 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
wrote:

&gt; Hey!
&gt;
&gt; Thanks for the spec files. But why and what do they exactly do? Are they
&gt; somewhat like a documentation of everything?
&gt;
&gt;
&gt; On Mon, Dec 4, 2017 at 12:54 PM, Jaskaran Singh &lt;jvsg1303@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt; Hi Aruna,
&gt;&gt;
&gt;&gt; You could have a look at these spec files if you haven't already
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/
&gt;&gt;
&gt;&gt; Regards,
&gt;&gt; Jaskaran
&gt;&gt;
&gt;&gt; On Mon, Dec 4, 2017 at 12:23 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt;&gt; wrote:
&gt;&gt;
&gt;&gt;&gt; I am new to the community and would like to contribute and help along. I
&gt;&gt;&gt; did a complete read up on how the Tor browser works, but I would like to
&gt;&gt;&gt; delve in more and get acquainted with the code base, so that I understand
&gt;&gt;&gt; and learn a lot in the process.
&gt;&gt;&gt;
&gt;&gt;&gt; I already cloned and built the Tor(core) and TorBrowser from source for
&gt;&gt;&gt; easy understanding and primarily as it would help me to reproduce bugs as I
&gt;&gt;&gt; work on them.
&gt;&gt;&gt;
&gt;&gt;&gt; Any further guidance is appreciated.
&gt;&gt;&gt;
&gt;&gt;&gt; Thankyou for spending the time to read this through.
&gt;&gt;&gt;
&gt;&gt;&gt; --
&gt;&gt;&gt; Regards,
&gt;&gt;&gt; Aruna Maurya,
&gt;&gt;&gt; CSE,B.tech,
&gt;&gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt;&gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; _______________________________________________
&gt;&gt;&gt; tor-dev mailing list
&gt;&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;
&gt;
&gt;
&gt; --
&gt; Regards,
&gt; Aruna Maurya,
&gt; CSE,B.tech,
&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Yes somewhat. They can provide you an overall idea, but the best \
documentation is the code itself.&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 1:05 PM, Aruna Maurya &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hey!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the spec \
files. But why and what do they exactly do? Are they somewhat like a documentation of \
everything?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Dec 4, 2017 at 12:54 PM, \
Jaskaran Singh &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:jvsg1303@gmail.com" \
target="_blank"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hi Aruna,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;You could \
have a look at these spec files if you haven't already&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;torspec.git/tree/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Jaskaran&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div&gt;&lt;div \
class="m_3246332994270940741h5"&gt;On Mon, Dec 4, 2017 at 12:23 PM, Aruna Maurya &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div&gt;&lt;div \
class="m_3246332994270940741h5"&gt;&lt;div dir="ltr"&gt;I am new to the community and would \
like to contribute and help along. I did a complete read up on how the Tor browser \
works, but I would like to delve in more and get acquainted with the code base, so \
that I understand and learn a lot in the process.    &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I already \
cloned and built the Tor(core) and TorBrowser from source for easy understanding and \
primarily as it would help me to reproduce bugs as I work on them.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any further guidance is appreciated.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thankyou for spending the time to read this \
through.&lt;/div&gt;&lt;span class="m_3246332994270940741m_4141839275055034551gmail-HOEnZb"&gt;&lt;font \
color="#888888"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_3246332994270940741m_4141839275055034551gmail-m_-4877592198078670251gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt; \
&lt;br&gt;&lt;/div&gt;&lt;/div&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt; tor-dev \
mailing list&lt;br&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_3246332994270940741gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171206122105</emailId><senderName>heddha</senderName><senderEmail>heddha@unicorn.university</senderEmail><timestampReceived>2017-12-06 12:21:05-0400</timestampReceived><subject>[tor-dev] Names for your Onions: Onion addresses in SSL certificates</subject><body>

Dear list,

I wrote an addon as a PoC for idea 3 of the blogpost in [0]. The idea
was to extend the Tor Browser by a means of reading out the C/O/S/L
fields of the SSL certificate, and, if a website contains an onion
address in one of those fields, to automatically redirect users to it.

As the web-extensions API doesn't contain a means of reading out
certificate information [1], I implemented it as an add-on. You can find
it here: [2]. 

As stated in the blog post, all fields mentioned above could
theoretically be filled with an onion address. Unfortunately, I found a
large drawback:  A certificate from Letsencrypt doesn't contain the
C/S/O/L fields, as Letsencrypt performs a validation of required fields
only, and the subject field isn't required. All unvalidated fields are
by default not included in the certificate [3]. It is therefore not
possible to include an onion address in the proposed fields using
Letsencrypt; these are only filled when extended validation is performed
(during which the correctness of the entries seems to be validated as
well). Non-organisational suppliers of websites will therefore not be
able to include their onion addresses in their normal certificate, which
will most likely limit the amount of certificates containing onion
addresses to a few larger organisations (if any). 

To make this idea actually usable for a large amount of people, one
would have or to use another field, the content of which is neither
checked nor deleted from a certificate, or introduce a new field =)

Kind regards,

heddha


[0]: https://blog.torproject.org/cooking-onions-names-your-onions

[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=1322748

[2]: https://github.com/heddha/sslOnions

[3]:
https://community.letsencrypt.org/t/maintain-subject-records-country-etc-in-certificate-from-csr/31185


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171206133333</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-12-06 13:33:33-0400</timestampReceived><subject>Re: [tor-dev] Rebooting work on proposal #247 (guard discovery)</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; George Kadianakis:
&gt;&gt; Hello Mike,
&gt;&gt; 
&gt;&gt; I'm finally getting out of the prop224/microdescriptor bug pile, and
&gt;&gt; getting more time to start working on guard stuff like prop247 again.
&gt;&gt; 
&gt;&gt; I'm planning to spend a few days next week to regain knowledge on
&gt;&gt; prop247. I'll check out the notes from the Wilmington hackfest, re-read
&gt;&gt; my old simulator's code, etc.
&gt;

Hey, and thanks for the reply!

&gt; I was not involved in with Prop271, so I am not deeply familiar with it.
&gt; However, it has several things we do not need. In particular, the plan
&gt; for prop247 still is to treat consensus information as the official
&gt; notion of vanguard reachability, so there is no need to try to determine
&gt; censorship, firewall, or local network reachability information. If a
&gt; node is in the consensus, it stays in our vanguard set and does not get
&gt; replaced until it actually leaves the consensus. This is consistent with
&gt; how the consensus is currently used for interior hops, and mitigates
&gt; path bias attacks.
&gt;
&gt; If it is dead-simple to use only the consensus uptime portions of
&gt; prop271 without the reachability code, I could be convinced of that. But
&gt; as it is, the rotation times do not need to be as long as guards, and
&gt; the implementation simplification here is attractive. Plus, nodes that
&gt; fall completely out of the consensus periodically like this are probably
&gt; bad choices anyway..
&gt;
&gt; What do you think?
&gt;  

Sounds plausible.

I'm slightly worried that not tracking transient reachability status
might cause situations where all the L2 guards are temporarily down and
hence brings complete the service/client to complete halt. I'm not sure
how likely this is to happen, and it surely depends on L2 size and L2
node selection parameters.

I have not thought about the engineering aspects of this. I think
bending the prop271 code to do this might be a PITA. But I'm also not
sure if not using the guard layer is gonna be easier either. I imagine
there will be engineering complexities either way here. Will try to
figure this out in the coming weeks.

&gt;&gt; I know you have thought more about prop247 the past months, and it would
&gt;&gt; be great if you could brief me up on any updates that I should know
&gt;&gt; about. Specifically I'm wondering if you have any new insights on how
&gt;&gt; the proposed prop247 changes interact with Tor's guard algorithm (prop271)?
&gt;&gt; 
&gt;&gt; Also any other things I should know about from your work on the
&gt;&gt; performance simulator? Perhaps ideas about performance, topology or path
&gt;&gt; restrictions?
&gt;
&gt; Yes. I have decided to simplify everything as much as possible. I am
&gt; going with a mesh topology for the prop247 performance tests (via
&gt; https://bugs.torproject.org/13837,  https://bugs.torproject.org/23101
&gt; and https://bugs.torproject.org/24487). That is the simplest option to
&gt; implement and test for performance, and intuitively seems to have
&gt; almost as good security properties as the bin version (unless your
&gt; security simulator tells us otherwise).
&gt;

Sounds reasonable!

&gt; I am also aiming for these high-level design goals, most important
&gt; first:
&gt;
&gt; 0. All service-side circuits use 3 hops of vanguards.
&gt; 1. Hidden services should avoid trivially disclosing their third
&gt;    vanguard to a non-network adversary (ie one that is not running nodes
&gt;    but that is watching either HSDESCS or connecting to the service).
&gt;    This means their paths look like this:
&gt;    S - G - L2 - L3 - HSDIR
&gt;    S - G - L2 - L3 - Intro
&gt;    S - G - L2 - L3 - M - Rend
&gt; 2. Clients should avoid revealing their third vanguard hop to services
&gt;    and to nodes that have information about which service they are
&gt;    accessing. This means that their paths look like this:
&gt;    C - G - L2 - L3 - M - HSDIR
&gt;    C - G - L2 - L3 - M - Intro
&gt;    C - G - L2 - L3 - Rend
&gt; 3. Clients use 3 hops of vanguards for all hidden service circuits.
&gt;
&gt; If we do all of these, it will mean that we will have long path lengths
&gt; (8 hop rends), but it also means that it is easy to reason about
&gt; linkability and information disclosure. My thinking is that we should do
&gt; the performance tests with the safest option first (ie: all of these
&gt; goals), and see exactly how bad it is, and then make compromises if it
&gt; turns out to be much worse performance than status quo.
&gt;
&gt; In the event of bad performance, I would alter property #3 before
&gt; messing with property #2, and alter #2 before property #1, but I could
&gt; be talked into a different strategy, or driven to one based on data.
&gt;

Sounds reasonable.

In general, I imagine that this feature is gonna be opt-in initially
which makes me worry less about performance in the beginning.

Also, I'm currently not too afraid of guard discovery attacks for the
client-side, which might mean that we can let the vanguard feature as
optional for much longer time for clients (bringing the hop count to 7).
&gt;
&gt; I have not written up the set of performance experiments I intend to run
&gt; yet, but at a high level I want to measure two things for a few
&gt; different L2 and L3 guard set sizes:
&gt;
&gt; A. How does the average performance compare to existing onionperf data
&gt;    at https://metrics.torproject.org/torperf.html?
&gt; B. What is that variance over time in performance with a fixed entry
&gt;    guard, as the L2 and L3 guards rotate? Is the variance measurably
&gt;    different than what happens on onionperf?
&gt;
&gt; #A here will tell us if our paths are too long and seriously impact
&gt; average performance, meaning we have to revisit goals #0-3.
&gt;
&gt; #B will tell us how much a really bad L2 or L3 set can impact
&gt; performance, and how often that happens. I expect that as we increase L2
&gt; and L3 sizes, variance in performance will go down, until we hit
&gt; diminishing returns. The goal is to find that sweet spot for choosing L2
&gt; and L3 as small as possible for as little variance as possible.
&gt;
&gt; It would be great if your security simulator can tell us which L2 and L3
&gt; values are worth considering, so I can gather more useful (and more
&gt; detailed) performance data with fewer experiments.
&gt;

ACK. Will be working on this.

&gt;
&gt; I think that is it for now. As far as implementation goes, I am doing my
&gt; best to keep
&gt; https://trac.torproject.org/projects/tor/wiki/org/sponsors/SponsorV up
&gt; to date and stick with that timetable.
&gt;
&gt; This means I want to merge all of the torrc options needed for the
&gt; performance tests into 0.3.3 (by mid January), so that hidden
&gt; service operators have the option of using the performance test
&gt; controller to get vanguard behavior if they want. My assumption here is
&gt; that we basically can all agree on the high level approach, and all
&gt; agree it is an improvement over status quo, but we will want the extra
&gt; time to actually make specific parameter choices and decide if we need
&gt; to or want to live with shorter paths for some scenarios..
&gt;

Makes sense.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171206171219</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-06 17:12:19-0400</timestampReceived><subject>Re: [tor-dev] Student project to work on IPv6 support (was: [tor-relays] About relay size)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

How are these student projects working out?
Is there anything we can do to help?

(There is no need to identify the students, unless they want to be named
on a public mailing list.)

&gt; On 19 Oct 2017, at 01:57, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 14 Oct 2017, at 01:06, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt; El 12/10/17 a las 12:22, teor escribió:
&gt;&gt;&gt; 
&gt;&gt;&gt; On 12 Oct 2017, at 09:15, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; …
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt;    With my colleague JC Bach (in CC), we have proposed a last-year student
&gt;&gt;&gt;    project to address IPv6-related issues in Tor for the upcoming semester,
&gt;&gt;&gt;    at IMT Atlantique engineering school. There will be two students working
&gt;&gt;&gt;    on it. It is hard to say now how far we will arrive, especially because
&gt;&gt;&gt;    this is our first approach to Tor entrails.
&gt;&gt;&gt; 
&gt;&gt;&gt;     …
&gt;&gt;&gt; 
&gt;&gt;&gt; This is great! We would like some help with Tor's IPv6 support.
&gt;&gt;&gt; And we are happy to help you and your students.
&gt;&gt;&gt; 
&gt;&gt; …
&gt;&gt; 
&gt;&gt;&gt; How many students?
&gt;&gt; 
&gt;&gt; There will be two.
&gt;&gt; 
&gt;&gt;&gt; How much time?
&gt;&gt; 
&gt;&gt; From now until mid-March. Students will have 135h in their schedules to
&gt;&gt; work on their projects.
&gt;&gt; 
&gt;&gt;&gt; What are your goals for the project?
&gt;&gt; 
&gt;&gt; For now, it's still open, but addressing IPv6 support. We should limit
&gt;&gt; the scope soon, according to open related tickets that could be feasible
&gt;&gt; to work on.
&gt;&gt; 
&gt;&gt;&gt; How much do you expect to get done?
&gt;&gt; 
&gt;&gt; At least, choose a couple of easy-tagged IPv6 tickets, and close them.
&gt;&gt; However, it's difficult to state on this right now.
&gt; 
&gt; 135h is enough to submit a small, one-line change to get used to the tor
&gt; patch process, and then do something more substantial with some testing.

Have the students tried small patches?
How did they go?

&gt; (Snip)

Here's how your students (or you) can find tickets and get help with patches:

&gt;&gt;&gt; Our bug tracker is:
&gt;&gt;&gt; https://trac.torproject.org/
&gt;&gt;&gt; 
&gt;&gt;&gt; We are also in #tor-dev IRC on irc.oftc.net.

It might be worth reminding your students that replies on IRC can take hours.
Some people are disappointed when they don't get an instant reply.

&gt;&gt;&gt; Please ask questions early, and ask often!
&gt;&gt;&gt; We would love to help you help tor.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How are these student \
projects working out?&lt;/div&gt;&lt;div&gt;Is there anything we can do to \
help?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(There is no need to identify the students, unless \
they want to be named&lt;/div&gt;&lt;div&gt;on a public mailing list.)&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;On 19 Oct \
2017, at 01:57, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;On 14 Oct 2017, at 01:06, \
Santiago R.R. &lt;&lt;a \
href="mailto:santiagorr@riseup.net"&gt;santiagorr@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;El 12/10/17 a las 12:22, teor \
escribió:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On 12 Oct \
2017, at 09:15, Santiago R.R. &lt;&lt;a \
href="mailto:santiagorr@riseup.net"&gt;santiagorr@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;…&lt;/span&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   With my colleague JC Bach (in CC), we have proposed a last-year \
student&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   project to address IPv6-related issues in Tor for the upcoming \
semester,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    at \
IMT Atlantique engineering school. There will be two students \
working&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    on \
it. It is hard to say now how far we will arrive, especially \
because&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    this \
is our first approach to Tor entrails.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    \
…&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;This is \
great! We would like some help with Tor's IPv6 \
support.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;And we are happy to \
help you and your students.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;…&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;How many \
students?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;There will be \
two.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;How much \
time?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;From now until mid-March. \
Students will have 135h in their schedules to&lt;/span&gt;&lt;br&gt;&lt;span&gt;work on their \
projects.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;What are your \
goals for the project?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;For now, it's \
still open, but addressing IPv6 support. We should limit&lt;/span&gt;&lt;br&gt;&lt;span&gt;the scope \
soon, according to open related tickets that could be feasible&lt;/span&gt;&lt;br&gt;&lt;span&gt;to \
work on.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;How much do you \
expect to get done?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;At least, choose a \
couple of easy-tagged IPv6 tickets, and close them.&lt;/span&gt;&lt;br&gt;&lt;span&gt;However, it's \
difficult to state on this right \
now.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;135h is enough to submit a \
small, one-line change to get used to the tor&lt;/div&gt;&lt;div&gt;patch process, and then do \
something more substantial with some \
testing.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Have the students tried small \
patches?&lt;/div&gt;&lt;div&gt;How did they go?&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;(Snip)&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Here's how your students (or \
you) can find tickets and get help with patches:&lt;br&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;Our bug tracker \
is:&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/"&gt;https://trac.torproject.org/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We are also \
in #tor-dev IRC on &lt;a \
href="http://irc.oftc.net"&gt;irc.oftc.net&lt;/a&gt;.&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
might be worth reminding your students that replies on IRC can take \
hours.&lt;/div&gt;&lt;div&gt;Some people are disappointed when they don't get an instant \
reply.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Please ask questions early, and ask \
often!&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We would love to help you \
help tor.&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171208163717</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-12-08 16:37:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

Nick Mathewson &lt;nickm@torproject.org&gt; writes:

&gt;    We define a new "GETINFO status/hibernation" to inspect the
&gt;    current hibernation state.  Possible values are:
&gt;      - "live"
&gt;      - "idle:control"
&gt;      - "idle:no-activity"
&gt;      - "sleep:control"
&gt;      - "sleep:accounting"
&gt;      - "idle-update:control"
&gt;      - "sleep-update:control"
&gt;      - "shutdown:exiting"
&gt;      - "shutdown:accounting"
&gt;      - "shutdown:control"

To me this smells like it should be two different things rather than
overloading "one" state to become two and have all users have to parse
colons. e.g. "status/hibernation" and "status/hibernation-reason" or
similar.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171209011739</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-09 01:17:39-0400</timestampReceived><subject>[tor-dev] Nominate/vote for future proposal discussion meetings!</subject><body>

[Attachment #2 (multipart/signed)]


Hello all,

Is there an existing Tor proposal you'd like to discuss?  Please use
the following pad to nominate and vote for proposals for discussion.

https://pad.riseup.net/p/Pxo2fQiiaSWo

We'll be reviving our proposal discussion meetings soon, likely at the
beginning of January once people have returned from their winter
holidays.

After the nominations/votes are taken, I'll start arranging meeting
times.  If you nominate and/or vote for a proposal, I may reach out to
you at some point for your opinions on discussion items, open
questions/concerns, etc. to include for the meeting preparation.

Thanks!

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171211222531</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-11 22:25:31-0400</timestampReceived><subject>Re: [tor-dev] How about capping single operators to max. 10% exit capacity of the network?</subject><body>


&gt; On 12 Dec 2017, at 07:29, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Absolute single relay cw caps do not have that problem and would prevent
&gt; insane cw values like &gt;800000.
&gt; 
&gt; I'll setup automatic notifications if certain thresholds are reached.

If we can come up with a threshold that would apply for the next 5-10 years,
we could add a consensus weight limit to tor authority votes, or to the bwauth
code.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171212184429</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-12 18:44:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

[Attachment #2 (multipart/signed)]


Tom Ritter transcribed 4.8K bytes:
&gt; I'm not sure, but I think
&gt; https://trac.torproject.org/projects/tor/ticket/21377 needed a
&gt; proposal so I tried to write one up.
&gt; 
&gt; -tom

Hi tom, thanks for the proposal!

&gt; Filename: xxx-expose-bwauth_votes.txt
&gt; Title: Have Directory Authorities expose raw bwauth vote documents
&gt; Author: Tom Ritter
&gt; Created: 11-December-2017
&gt; Status: Open

I changed things recently, you'll need a "Ticket:" field if your proposal is
in state {OPEN,ACCEPTED,CLOSED,FINISHED}. [0]

(Although, maybe we shouldn't require "Ticket:" for state OPEN, so as not to
hinder calling it OPEN and discussing it even for those things which don't
yet have tickets?)

&gt; 1. Introduction
&gt; 
&gt; Bandwidth Authorities (bwauths) perform scanning of the Tor Network
&gt; and calculate observed speeds for each relay. They produce a 'bwauth
&gt; vote file' that is given to a Directory Authority. The Directory
&gt; Authority uses the speed value from this file in its vote file
&gt; denoting its view of the speed of the relay.
&gt; 
&gt; After collecting all of the votes from other Authorities, a consensus
&gt; is calculated, and the consensus's view of a relay's speed is
&gt; determined by choosing the low-median value [or is it high-median?]
&gt; of all the authorities' values for each relay.
&gt; 
&gt; Only a single metric from the bwauth vote file is exposed by a 
&gt; Directory Authority's vote, however the original file contains
&gt; considerably more diagnostic information about how the bwauth arrives
&gt; at that measurement for that relay.
&gt; 
&gt; 2. Motivation
&gt; 
&gt; The bwauth vote file contains more information that is exposed in the

/s/that/than/ ???

&gt; overall vote file. This information is useful to debug anomalies in
&gt; relays' utilization and suspected bugs in the (decrepit) bwauth code.
&gt;
&gt; Currently, all bwauths expose the raw vote file through various (non-
&gt; standard) means, and that file is downloaded (hourly) by a single person
&gt; (as long as his home internet connection and home server is working)
&gt; and archived (with a small amount of robustness.)  
&gt; 
&gt; It would be preferable to have this exposed in a standard manner.
&gt; Doing so would no longer require bwauths to run HTTP servers to expose
&gt; the file, no longer require them to take additional manual steps to
&gt; provide it, and would enable public consumption by any interested
&gt; parties.  We hope that Collector will begin archiving the files.
&gt; 
&gt; 3. Specification
&gt; 
&gt; An authority SHOULD publish the bwauth vote used to calculate its
&gt; current vote. It should make the bwauth vote file available at the
&gt; same time as its normal vote file. It should make the file available
&gt; at
&gt;   http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z

If it's "next", how is it possible to expose it at the same time as its vote
which is based upon it?  Maybe we should change the URL to be "current"?

&gt; It MUST NOT attempt to send its bwauth vote file in a HTTP POST to
&gt; other authorities and it SHOULD NOT make bwauth vote files from other
&gt; authorities available.
&gt; 
&gt; 4. Security Implications
&gt; 
&gt; The raw bwauth vote file does not [really: is not believed to] expose
&gt; any sensitive information.  All authorities currently make this
&gt; document public already, an example is at
&gt;   https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile

Maybe we want to think about resource exhaustion attacks if we're making a
standarised interface available to it?  The response after all is going
likely always be much larger than the request.

&gt; 5. Compatibility
&gt; 
&gt; Exposing the document presents no compatibility concerns.
&gt; 
&gt; The compatibility concern is with applications that want to consume
&gt; the document. The bwauth vote file has no specification, and has been
&gt; extended in ad-hoc ways. Applications that merely wish to archive the
&gt; document (e.g. Collector) won't have a problems. Applications that
&gt; want to parse it may encounter errors if a new (unexpected) field is
&gt; added, or assumptions are made about the text encoding or formatting
&gt; of the document. 

A specification for the documents that BWAuths produce would be an extremely
welcome contribution! but probably shouldn't be prerequisite to accepting
and implementing this proposal.

Thanks again for the proposal, tom!

[0]: https://gitweb.torproject.org/torspec.git/commit/?id=8be6722e8d9

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171212235543</emailId><senderName>Fernando_Fernández_Mancera</senderName><senderEmail>ffernandezmancera@gmail.com</senderEmail><timestampReceived>2017-12-12 23:55:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>


On 12/12/2017 11:34 PM, teor wrote:
&gt; Is there any reason you picked these values?

I have chosen those values because if the user sets a value, I think it 
is better for this value to be around lower one from the already 
established. Even so, higher values are included to make it more 
difficult for the attacker to identify.

I've been thinking, it might be better if this value changes every time 
a circuit is marked dirty.

&gt; Is there any research supporting this?
&gt; Is it compelling enough to offset the usability issues?
&gt; (See below.)

I am working on it, so I will try to get it soon as possible.

&gt; This we believe to be true, and we think we've seen attacks using it.
&gt; But changing circuits doesn't help those attacks.

Oh well, I missunderstood you in the last reply I think. I thought if 
the circuit changes more often then is more probably that it uses a 
different guard.

&gt; Also, are you proposing that services mark circuits dirty?
&gt; Because Tor doesn't work like that right now.
&gt; Only clients mark circuits dirty.

No no, I mean clients. I will try to think deeply how it can works with 
Onion services.

&gt;&gt; How it works with KeepAliveIsolateSOCKSAuth:
&gt;&gt;
&gt;&gt;  - If KeepAliveIsolateSOCKSAuth option is active, then if on
&gt;&gt;    (MaxCircuitDirtiness * 0.5) minutes the amount of bytes sent/received
&gt;&gt;    through the circuit doesn't surpass half of the established amount,
&gt;&gt;    this amount will be reset.
&gt; 
&gt; This will break usability on many websites that depend on requests
&gt; coming from the same IP address. This is why Tor Browser manages its
&gt; own circuit lifetimes, and this change would break that.

Well, as above I will try to find a good use for this option combined 
with MaxCircuitSizeDirtiness. So probably I will write back in 
mid-January but if you find one, please let me know.

ffmancera.




_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171213180515</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-12-13 18:05:15-0400</timestampReceived><subject>Re: [tor-dev] Discussion Meeting for Prop#249 "Large CREATE cells"</subject><body>

On Fri, Dec 8, 2017 at 7:29 PM, isis agora lovecruft
&lt;isis@torproject.org&gt; wrote:
&gt;
&gt; Open Questions/Concerns
&gt; ~~~~~~~~~~~~~~~~~~~~~~~

Let me add a few more:

A. How does this interact with our OOM handler?

B. Is it really the right choice to allow no intervening cells between
the EXTEND fragments?  (I say yes, but I'm not sure.)

C. This proposal was written before we had subprotocol versions.  How
many new subprotocol versions, of which types, should we allocate for
this?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171213233707</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-12-13 23:37:07-0400</timestampReceived><subject>[tor-dev] Meeting Summary and Notes (was: Discussion Meeting for Prop#249 "Large CREATE cells")</subject><body>

[Attachment #2 (multipart/signed)]


isis agora lovecruft transcribed 5.3K bytes:
&gt; Hello all,
&gt; 
&gt; What: A proposal discussion meeting for prop#249 "Allow CREATE cells with
&gt;       &gt;505 bytes of handshake data". [0]

Hey,

Meetbot notes are available. [0]  Nick and Tim took summary notes of
discussion items on the pad [1] which I'll be incorporating into a revised
draft of the proposal.

Thanks to everyone who participated!

[0]: http://meetbot.debian.net/tor-meeting/2017/tor-meeting.2017-12-13-22.03.html
[1]: https://pad.riseup.net/p/r.1c4c37baa9251fdfca5a1e1bd5c01f45

-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214142800</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-12-14 14:28:00-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis:
&gt; As discussed in this mailing list and in IRC, I'm posting a subsequent
&gt; version of this proposal. Basic improvements:
&gt; - Uses a new custom HTTP header, instead of Alt-Svc or Location.
&gt; - Does not do auto-redirect; it instead suggests the onion based on
&gt;   antonella's mockup: https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png

I don't see that or any particular idea of informing the user in the
proposal itself, though. I think more about those browser side plans
should be specified in it (probably in section 2). Right now you are
quite specific about the redirection part and its pro and cons but
rather vague on the actual UX improvements (having the header is just
half of what you need).

&gt; 
&gt; 
&gt; ========================================================================
&gt; UX improvement proposal: Onion redirects using Onion-Location HTTP header
&gt; ========================================================================
&gt; 
&gt; 1. Motivation:
&gt; 
&gt;    Lots of high-profile websites have onion addresses these days (e.g. Tor ,

Tor,

&gt;    NYT, blockchain, ProPublica).  All those websites seem confused on what's
&gt;    the right way to inform their users about their onion addresses. Here are
&gt;    some confusion examples:
&gt;      a) torproject.org does not even advertise their onion address to Tor users (!!!)
&gt;      b) blockchain.info throws an ugly ASCII page to Tor users mentioning their onion
&gt;         address and completely wrecking the UX (loses URL params, etc.)
&gt;      c) ProPublica has a "Browse via Tor" section which redirects to the onion site.
&gt; 
&gt;    Ideally there would be a consistent way for websites to inform their users
&gt;    about their onion counterpart. This would provide the following positives:
&gt;      + Tor users would use onions more often. That's important for user
&gt;        education and user perception, and also to partially dispell the darkweb myth.
&gt;      + Website operators wouldn't have to come up with ad-hoc ways to advertise
&gt;        their onion services, which sometimes results in complete breakage of
&gt;        the user experience (particularly with blockchain)
&gt; 
&gt;    This proposal specifies a simple way forward here that's far from perfect,
&gt;    but can still provide benefits and also improve user-education around onions
&gt;    so that in the future we could employ more advanced techniques.
&gt; 
&gt;    Also see Tor ticket #21952 for more discussion on this:
&gt;       https://trac.torproject.org/projects/tor/ticket/21952
&gt; 
&gt; 2. Proposal
&gt; 
&gt;    We introduce a new HTTP header called "Onion-Location" with the exact same
&gt;    restrictions and semantics as the Location HTTP header. Websites can use the
&gt;    Onion-Location HTTP header to specify their onion counterpart, in the same
&gt;    way that they would use the Location header.
&gt; 
&gt;    The Tor Browser intercepts the Onion-Location header (if any) and informs
&gt;    the user of the existense of the onion site, giving them the option to visit

s/existense/existence/

&gt;    it. Tor Browser only does so if the header is served over HTTPS.
&gt; 
&gt;    Browsers that don't support Tor SHOULD ignore the Onion-Location header.
&gt; 
&gt; 3. Improvements

Did you plan to write anything here? I guess there are at least UX
improvements to the ad-hoc things you mentioned at the beginning of the
proposal.

&gt; 4. Drawbacks
&gt; 
&gt; 4.1. No security/performance benefits
&gt; 
&gt;    While we could come up with onion redirection proposals that provide
&gt;    security and performance benefits, this proposal does not actually provide
&gt;    any of those.
&gt; 
&gt;    As a matter of fact, the security remains the same as connecting to normal
&gt;    websites (since we trust its HTTP headers), and the performance gets worse

s/its/their/

&gt;    since we first need to connect to the website, get its headers, and then
&gt;    also connect to the onion.
&gt; 
&gt;    Still _all_ the website approaches mentioned in the "Motivation" section
&gt;    suffer from the above drawbacks, and sysadmins still come up with ad-hoc
&gt;    ways to inform users abou their onions. So this simple proposal will still

s/abou/about/

&gt;    help those websites and also pave the way forward for future auto-redirect
&gt;    techniques.
&gt; 
&gt; 4.2. Defining new HTTP headers is not the best idea
&gt; 
&gt;    This proposal defines a new non-standard HTTP header. This is not great
&gt;    because it makes Tor into a "special" thing that needs to be supported with
&gt;    special headers. However, the fact that it's a new HTTP header that only
&gt;    works for Tor is a positive thing since it means that non-Tor browsers will
&gt;    just ignore it.
&gt; 
&gt;    Furthermore, another drawback is that this HTTP header will increase the
&gt;    bandwidth needlessly if it's also served to non-Tor clients. Hence websites
&gt;    with lots of client traffic are encouraged to use tools that detect Tor
&gt;    users and only serve the header to them (e.g. tordnsel).
&gt; 
&gt; 5. The future
&gt; 
&gt;    As previously discussed, this is just a simple proposal to introduce the
&gt;    redirection concept to people, and also to help some sysadmins who are
&gt;    currently coming up with weird ways to inform people about their
&gt;    onions. It's not the best way to do this, but it's definitely one of the
&gt;    simplest ways.
&gt; 
&gt;    In the future we could implement with more advanced auto-redirect proposals like:

s/with// maybe?

[snip]

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214170611</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-14 17:06:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal 249 updated</subject><body>

[Attachment #2 (multipart/alternative)]


Hi isis,

&gt; On 14 Dec 2017, at 12:46, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; 
&gt; 6.1. New Subprotocols and Subprotocol Versions
&gt; 
&gt;   This proposal introduces, following prop#264, the following new
&gt;   subprotocol numbers and their uses.
&gt; 
&gt; 6.1.1. Relay Subprotocol
&gt; 
&gt;     "Relay 3" -- The OP supports all of "Relay 2", plus support for CREATE2V
&gt;       and CREATED2V cells and their above specification for link-layer
&gt;       authentication specifiers.

We usually specify that the numbers will be allocated when the proposal
is merged. That avoids gaps in the numbering, and weird semantics like
"4 doesn't support 3".

In particular, an upcoming IPv6 proposal will need a new Relay protover,
and it might get merged in 0.3.3.

&gt; 6.1.2. Link Subprotocol
&gt; 
&gt;     "Link 5": The OP supports all of "Link 1-4", plus support for the new
&gt;       EXTEND2 semantics.  Namely, it understands that an EXTEND2 cell whose
&gt;       "hlen" field is greater than 505 will be followed by further "hdata"
&gt;       in fragmented EXTEND2 cells which MUST follow.  It also understands
&gt;       that the following combination of EXTEND2 payload specifiers
&gt;       indicates that the cell is a continuation of the earlier payload
&gt;       portions:
&gt; 
&gt;           nspec = 0;
&gt;           htype = 0xffff;
&gt;           hlen = 0;

Link version 5 is link padding, which was merged in 0.3.2:
https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n571

&gt; 6.1.3. Handshake Subprotocol
&gt; 
&gt;   Additionally, we introduce a new subprotocol, "Handshake" and the
&gt;   following number assignments for previously occuring instances:
&gt; 
&gt;     "Handshake 1" -- The OP supports the TAP handshake.
&gt; 
&gt;     "Handshake 2" -- The OP supports the ntor handshake.
&gt; 
&gt;   We also reserve the following assignments for future use:
&gt; 
&gt;     "Handshake 3" -- The OP supports the "hybrid+null" ntor-like handshake
&gt;       from prop#269.
&gt; 
&gt;     "Handshake 4" -- The OP supports a(n as yet unspecified) post-quantum
&gt;       secure hybrid handshake, that is, the "hybrid+null" handshake from
&gt;       "Handshake 3", except with "null" part replaced with another (as yet
&gt;       unspecified) protocol to be composed with the ntor-like ECDH-based
&gt;       handshake.
&gt; 
&gt;   Further handshakes MUST be specified with "Handshake" subprotocol
&gt;   numbers, and MUST NOT be specified with "Relay" subprotocol numbers.  The
&gt;   "Relay" subprotocol SHALL be used in the future to denote changes to
&gt;   handshake protocol handling of CREATE* and EXTEND* cells, i.e. CREATE,
&gt;   CREATED, CREATE_FAST, CREATED_FAST, CREATE2, CREATED2, CREATE2V,
&gt;   CREATED2V, EXTEND, EXTENDED, EXTEND2, and EXTENDED2.
&gt; 
&gt;   Thus, "Handshake 1" is taken to be synonymous with "Relay 1", and
&gt;   likewise "Handshake 2" is with "Relay 2".

Since this is a new protover field, it's ok to reserve numbers :-)

&gt; 6.2. Subprotocol Recommendations
&gt; 
&gt;   After the subprotocol additions above, we change to recommending the
&gt;   following in the consensus:
&gt; 
&gt;      recommended-client-protocols […] Link=5 Relay=3 Handshake=2
&gt;      recommended-relay-protocols  […] Link=5 Relay=3 Handshake=2

I don't think we will want to jump straight to recommending the highest
protovers.

Is there a reason for this?
Does it lead to warnings on clients or relays?

&gt;      required-client-protocols    […] Link=4-5 Relay=2-3 Handshake=1-2
&gt;      required-relay-protocols     […] Link=3-5 Relay=1-3 Handshake=1-2

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi isis,&lt;br&gt;&lt;div&gt;&lt;br&gt;On 14 Dec 2017, at 12:46, \
isis agora lovecruft &lt;&lt;a \
href="mailto:isis@torproject.org"&gt;isis@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;6.1. New Subprotocols and \
Subprotocol Versions&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   This proposal \
introduces, following prop#264, the following new&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
  subprotocol numbers and their \
uses.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;6.1.1. Relay \
Subprotocol&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;     "Relay 3" -- \
The OP supports all of "Relay 2", plus support for CREATE2V&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      and CREATED2V cells and their above specification \
for link-layer&lt;/span&gt;&lt;br&gt;&lt;span&gt;       authentication \
specifiers.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We usually specify that \
the numbers will be allocated when the proposal&lt;/div&gt;&lt;div&gt;is merged. That avoids gaps \
in the numbering, and weird semantics like&lt;/div&gt;&lt;div&gt;"4 doesn't support \
3".&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In particular, an upcoming IPv6 proposal will need a new \
Relay protover,&lt;/div&gt;&lt;div&gt;and it might get merged in 0.3.3.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;6.1.2. Link Subprotocol&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
    "Link 5": The OP supports all of "Link 1-4", plus support for \
the new&lt;/span&gt;&lt;br&gt;&lt;span&gt;       EXTEND2 semantics. \
 Namely, it understands that an EXTEND2 cell whose&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      "hlen" field is greater than 505 will be followed \
by further "hdata"&lt;/span&gt;&lt;br&gt;&lt;span&gt;       in fragmented \
EXTEND2 cells which MUST follow.  It also understands&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      that the following combination of EXTEND2 payload \
specifiers&lt;/span&gt;&lt;br&gt;&lt;span&gt;       indicates that the \
cell is a continuation of the earlier payload&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      portions:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
          nspec = \
0;&lt;/span&gt;&lt;br&gt;&lt;span&gt;           htype \
= 0xffff;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
          hlen = \
0;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Link version 5 is link padding, \
which was merged in 0.3.2:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n571"&gt;https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n571&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;6.1.3. Handshake Subprotocol&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
  Additionally, we introduce a new subprotocol, "Handshake" and \
the&lt;/span&gt;&lt;br&gt;&lt;span&gt;   following number assignments for previously occuring \
instances:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;     "Handshake 1" -- \
The OP supports the TAP handshake.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
    "Handshake 2" -- The OP supports the ntor \
handshake.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   We also reserve the \
following assignments for future use:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
    "Handshake 3" -- The OP supports the "hybrid+null" ntor-like \
handshake&lt;/span&gt;&lt;br&gt;&lt;span&gt;       from \
prop#269.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;     "Handshake 4" -- \
The OP supports a(n as yet unspecified) post-quantum&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      secure hybrid handshake, that is, the \
"hybrid+null" handshake from&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      "Handshake 3", except with "null" part replaced \
with another (as yet&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      unspecified) protocol to be composed with the \
ntor-like ECDH-based&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
      handshake.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
  Further handshakes MUST be specified with "Handshake" \
subprotocol&lt;/span&gt;&lt;br&gt;&lt;span&gt;   numbers, and MUST NOT be specified with \
"Relay" subprotocol numbers.  The&lt;/span&gt;&lt;br&gt;&lt;span&gt;   "Relay" \
subprotocol SHALL be used in the future to denote changes to&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
  handshake protocol handling of CREATE* and EXTEND* cells, i.e. \
CREATE,&lt;/span&gt;&lt;br&gt;&lt;span&gt;   CREATED, CREATE_FAST, CREATED_FAST, CREATE2, \
CREATED2, CREATE2V,&lt;/span&gt;&lt;br&gt;&lt;span&gt;   CREATED2V, EXTEND, EXTENDED, \
EXTEND2, and EXTENDED2.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   Thus, \
"Handshake 1" is taken to be synonymous with "Relay 1", and&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
  likewise "Handshake 2" is with "Relay \
2".&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Since this is a new protover \
field, it's ok to reserve numbers :-)&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;6.2. Subprotocol \
Recommendations&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;   After the subprotocol \
additions above, we change to recommending the&lt;/span&gt;&lt;br&gt;&lt;span&gt;   following \
in the consensus:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
     recommended-client-protocols […] Link=5 Relay=3 \
Handshake=2&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
     recommended-relay-protocols  […] Link=5 Relay=3 \
Handshake=2&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I don't think we will \
want to jump straight to recommending the \
highest&lt;/div&gt;&lt;div&gt;protovers.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is there a reason for \
this?&lt;/div&gt;&lt;div&gt;Does it lead to warnings on clients or relays?&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;      required-client-protocols \
   […] Link=4-5 Relay=2-3 Handshake=1-2&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
     required-relay-protocols     […] \
Link=3-5 Relay=1-3 Handshake=1-2&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214202124</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-12-14 20:21:24-0400</timestampReceived><subject>Re: [tor-dev] IPv6 and v3 onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 15 Dec (04:31:45), teor wrote:
&gt; On 15 Dec 2017, at 04:04, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; &gt;&gt; On 15 Dec (03:47:25), teor wrote:
&gt; &gt;&gt; 
&gt; &gt;&gt;&gt;&gt; On 15 Dec 2017, at 03:29, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; The place I'm thinking of is the EXTEND in IPv6 and relay self-testing in
&gt; &gt;&gt;&gt; IPv6. This seems a more critical point to build into the network before we can
&gt; &gt;&gt;&gt; start building HS support on top (single onion is different but will have to
&gt; &gt;&gt;&gt; do with HS code in some ways).
&gt; &gt;&gt; 
&gt; &gt;&gt; I'm working on this right now.
&gt; &gt;&gt; It should be ready by mid-January, but it needs a proposal, so maybe it will
&gt; &gt;&gt; end up in 0.3.4 instead.
&gt; &gt; 
&gt; &gt; Ok!
&gt; &gt; 
&gt; &gt; Can you tell me which ticket is that so I don't start poking at it? I think
&gt; &gt; without a nice layer of link specifier IPv6, we can't move forward on much
&gt; &gt; other things?
&gt; 
&gt; Yes, it's important, and it would be great if you could do it.
&gt; 
&gt; Is that this ticket?
&gt; 
&gt; hs: Unify link specifier API/ABI
&gt; https://trac.torproject.org/projects/tor/ticket/22781

Sure! I've already done much work on it but stopped because I wasn't sure
which direction we want to go. I've tried to summarize it in:

https://trac.torproject.org/projects/tor/ticket/22781#comment:6

Any feedback would be very appreciated so I can finalize this for review.

Cheers!
David

-- 
PQgdff5S0a51LrwYmq/+PRgWSz+jjvkgZTCn3plzEkY=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171214235918</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-12-14 23:59:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 288: Privacy-Preserving Statistics with Privcount in Tor (Shamir version)</subject><body>

&gt; &gt; in Prio, servers use a generic secure multi-party computation (MPC) protocol to \
&gt; &gt; compute the circuits. If Tor is going to do that, why not just run a generic MPC \
&gt; &gt; protocol over all of the inputs? Doing so would allow Tor statistics aggregations \
&gt; &gt; to be robust to inputs that are likely "incorrect" given the values of the other \
&gt; &gt; inputs (see "robust statistics" for a wide variety of useful such computations, \
&gt; &gt; including for example median, trimmed mean, least trimmed squares, maximum \
&gt; &gt; likelihood estimation). Applying MPC over all inputs would only require \
&gt; &gt; implementing the "offline" phase of the computation (e.g. producing the \
&gt; &gt; "multiplication triples", which are supplied by the client in Prio). There are \
&gt; &gt; reasonably efficient protocols for doing so, including SDPZ and TinyOT [1].
&gt; 
&gt; If I understand you correctly, you are saying that we can add
&gt; a secure multiparty computation to the Tally Reporters without
&gt; changes on the Data Collectors?

Yes, that is correct. The MPC servers would get the (secret-shared) inputs, and then \
instead of just adding them and publishing the result, they would perform an MPC \
computation on them.

Now, we could in theory improve Data Collectors so that they can obliviously maintain \
statistics that aren't just counts. For example, this would enable us to store a \
maximum of observed values (e.g. most streams per circuit seen over all circuits \
through that exit). How that could be done with adequate efficiency isn't clear to \
me, though (it seems like a research question).

Best,
Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219004238</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-19 00:42:38-0400</timestampReceived><subject>Re: [tor-dev] Help Wanted: Fallback Directory Update</subject><body>

[Attachment #2 (multipart/signed)]


Hi All,

We're going to meet in about 22 hours (2300 UTC Tuesday 19 December)
in #tor-dev to work on this. (That's the network team patch party
time.)

I haven't done much, because I've been busy with work deadlines.

&gt; On 13 Dec 2017, at 12:58, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; Hi All,
&gt; 
&gt; Dominique, pastly, and Hello71 have offered to help out with this.
&gt; (I don't have Hello71's email, I'll ping them on IRC.)
&gt; 
&gt; Let's start by fixing up some of the code, and asking relay operators
&gt; if they want to be on the list.
&gt; 
&gt; &gt; On 11 Dec 2017, at 14:51, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; ...
&gt; &gt; Fallback directory mirrors help clients reach the Tor network.
&gt; &gt; 
&gt; &gt; We need to rebuild the list every so often when their details change.
&gt; &gt; (We have an automated check for 25% failure, and it just triggered.)
&gt; &gt; 
&gt; &gt; ...
&gt; 
&gt; pastly, I drafted an email for step 0, can you check it makes sense?
&gt; (I used to send out way too much info. I'm trying to be brief.)
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors#ATypicalRelease
&gt; 

I am going to send this out today or tomorrow when I get time.

I want to add a note here about the ongoing DoS attacks.
Maybe this means adjusting the uptime requirement.

&gt; &gt; 0. Ask operators to opt-in stable relays as fallback directory mirrors
&gt; &gt; If they are on the whitelist already, they don't need to do anything.
&gt; &gt; Ticket: https://trac.torproject.org/projects/tor/ticket/22527
&gt; &gt; File:   https://gitweb.torproject.org/tor.git/tree/scripts/maint/fallback.whitelist
&gt; &gt; 
&gt; 
&gt; Anyone can do step 1, it's a copy-and-paste job with git and a config file:
&gt; 
&gt; &gt; 1. Update the fallback whitelist with new and changed relay details
&gt; &gt; Tickets: https://trac.torproject.org/projects/tor/ticket/22321
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/22527
&gt; &gt; File:    tor/scripts/maint/fallback.whitelist
&gt; 
&gt; Dominique, do you want to do Step 2?
&gt; It's a one-line patch that would be a good intro to Tor's bug tracker and git.
&gt; Please base it on the "master" branch.

This is done, I have to review it.

&gt; &gt; 2. Update updateFallbackDirs.py to have a CONSENSUS_EXPIRY_TOLERANCE of 0.
&gt; &gt; Ticket: https://trac.torproject.org/projects/tor/ticket/20942
&gt; &gt; File:   tor/scripts/maint/updateFallbackDirs.py
&gt; 
&gt; There are two more optional tasks if someone likes python:
&gt; 
&gt; Mark the fallbacks that have extra-info descriptors, so stem can use them
&gt; https://trac.torproject.org/projects/tor/ticket/22759
&gt; 
&gt; Add fallback nicknames to the file, so stem can use them
&gt; https://trac.torproject.org/projects/tor/ticket/24600
&gt; 
&gt; &gt; 3. Run updateFallbackDirs.py with the new whitelist and \
&gt; &gt; CONSENSUS_EXPIRY_TOLERANCE. You'll need a decent network connection for this.
&gt; &gt; Please attach the script logs to the trac ticket.
&gt; &gt; Command: tor/scripts/maint/updateFallbackDirs.py &gt; src/or/fallback_dirs.inc
&gt; 
&gt; And there's another step here I forgot:
&gt; 
&gt; 3a. Look at the warnings from the script to see which addresses have changed.
&gt; Contact operators to see if the new addresses are permanent.
&gt; Then repeat steps 1 and 3 with the new details.
&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/22321
&gt; 
&gt; &gt; 4. Write a changes file
&gt; &gt; Ticket: https://trac.torproject.org/projects/tor/ticket/22271
&gt; &gt; Draft:
&gt; &gt; 
&gt; &gt; o Minor features (fallback directory list):
&gt; &gt; - Replace the 151 fallbacks originally introduced in Tor 0.3.1.3-alpha in
&gt; &gt; May 2017 (of which ~111 were still functional) with a list of
&gt; &gt; NNN fallbacks (NNN new, NNN unchanged, NNN removed) generated in December
&gt; &gt; 2017. Resolves ticket 22271.
&gt; &gt; 
&gt; &gt; There are some commands that count fallback changes here:
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors#FormattingChangesFiles
&gt; &gt; 
&gt; 
&gt; Once this is done, the list gets backported to 0.2.8 and later.
&gt; But the rest of the changes go into master.
&gt; 
&gt; &gt; 5. Announce the new list on tor-relays@
&gt; 
&gt; Example: https://lists.torproject.org/pipermail/tor-relays/2017-May/012285.html
&gt; 
&gt; &gt; 6. Tell the relay search maintainer that the list has changed

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo4YH4ACgkQdA2eOQJS
cqL6rg/+M0hFzrbKeSNHq9vWLpyxggLTP6q/oGPp4J/sJmJHIp9WJMqfbuJgdyha
IsLIinFaVC93ot1HurwmjqSIEVcX4qRZmdezT3IBRnW2KR4X2IzE0GsI+9F3LU0F
CgjDV6UAMaUEm5zys/L1vybYbbdUnQyYZvQGCNwCdtYY73rLjHkHk+6QGXoZis5p
DY6t+iT/Z+mHyxuOwfhD5pNn3i15TU07L/Sld/bU+RXgwjz1RJUysFDN9mNx9Q39
n5cPJzaOuIrsjF4HwLAfG/ccOdAMVSmK2m+mJQoCxBtEcZTFnJqOLheb096hoe5Z
ViJwXdC4e7QrYicTroD3kUkyw5qQQyUSJF/LO9B00TAPiVumVIrYQ1n2rJCGs4kH
TW62/Mc2P1wW6MtFwCKlQ5Z0nULwn62nPwYi3pUXWlCMBMbvsjut1Wo41XRDiuZD
gTwcFXzvX6rWhEpublSphDnyvkME+UFUDZ2CPclQXbX5xMUo7qabQnHU8bgIrASr
mkWpit2DstWhtk8EKPcYb7EM753eBy0UJyLoOPkQHFimNf/GDhrj6q6AgmF4mJX0
RaLCPTzKaPWQ1avCN0ele9wZguHzoeGBylNMcoTxWAFKMbC/ugOKZ/lHQ9mUlmXz
rcz8IcyPaywEOyVidSSTfPlmMkJ+m9cBUn64Q911glUK5VDc0Co=
=5lee
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171219122100</emailId><senderName>neutron</senderName><senderEmail>neutron@systemli.org</senderEmail><timestampReceived>2017-12-19 12:21:00-0400</timestampReceived><subject>[tor-dev] Tor and (open) SDN</subject><body>


Hello tor developers,

I'm neutron a Tor user and operator of some hidden-services.

During the next year I will write my master thesis about a software
defined network related project. Currently I'm thinking about which
research topic I could choose and Tor came up to my mind.

I'm interested in getting to know what's out there and if there are any
approaches to combine Tor and open SDN*? And what would help to research
in that area to support the tor project?

I already came across: https://shadow.github.io/

I will be around at 34c3 and would love to have a chat about interesting
approaches, projects and ideas.

Thank you for your time :)

cheers neutron


* If I get the SDN terms right, tor is an overlay SDN. I would like to
think in the direction to combine tor with Open SDN.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171219225736</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2017-12-19 22:57:36-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth Authority Progress</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 11/12/17 16:04, Mike Perry wrote:
&gt; https://trac.torproject.org/projects/tor/ticket/2394
&gt; 
&gt; I am not sure what repo they are in, though.
&gt; 

https://gitweb.torproject.org/metrics-tasks.git/tree/task-2394

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171220014550</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-20 01:45:50-0400</timestampReceived><subject>Re: [tor-dev] path selection constraints: /16 subnet rule when using bridges</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 20 Dec 2017, at 10:00, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; does the following also apply if a Tor users chooses to use a bridge?
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;    - We do not choose more than one router in a given /16 subnet
&gt;&gt;&gt; [1]
&gt;&gt;&gt; 
&gt;&gt;&gt; Will tor ensure that the relays are not in the same /16 netblock with the bridge?
&gt;&gt; 
&gt;&gt; Yes, as each node is added to the path, its IPv4 address is checked
&gt;&gt; against the IPv4 /16 netblocks of the existing nodes in the path.
&gt;&gt; This includes relays and bridges.
&gt;&gt; 
&gt;&gt; There is no support for checking IPv6 addresses yet:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/24393
&gt;&gt; But when there is, we will check IPv6 /32s, for those nodes that have IPv6
&gt;&gt; addresses.
&gt; 
&gt; 
&gt; Does it check only against actively used ORPort IPv4 address or all ORPort IPs
&gt; in the bridge descriptor when connecting to the bridge via IPv6?
&gt; 
&gt; example:
&gt; - bridge has an IPv6 and IPv4 1.1.2.2
&gt; - exit has 1.1.2.3
&gt; - tor client connects to the bridge using IPv6
&gt; 
&gt; Will the client use that exit if it connects to the bridge via IPv6?

It only checks IPv4 addresses for the moment, regardless of how it
connects.

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlo5wM4ACgkQdA2eOQJS
cqJYHg//cudruYU8qmw1ReEjbIBmJv+4pSWvQtMU67Z6kvFSwO9XUSsnkRMRWhbF
2wtBErD4XgP7dq7A09EzNw+vpIW/PiPULZAVIcM8e4kCUtp+SvyKV+SbzQ3TOBsz
mim1fosPJuOvMW6FPz7xFUY8DuP6YM8R4pjEe7CBH1kDR0iG6EL13gpiau1Yj9Nc
HUYtil7EgapG/KHiWXX0KI2nj8y0/dJBWSOoMRojcoHdPuAppatLvQ1evk3VfXvq
q9hjTLtfwicDuT3ZdTtLtQV/rxNnDSAYAFjxOa4x8YughgV4zdpEJjJADuCdZCiX
Yag711aD6PdOmwGmVWx1Lg5Nz7FS4ZwEh9Fg7AfM+gsRBJrXIEfL7UcWW4cE5emA
SMsC8YL8t3lTYdxkZnL8RWdDELHboTdybqnX3bw/Yy6znXT5L629EOIKO+oe1rnK
LcHATDAyKKSNdLGx+kt11vjUpCbzypOlWIYevhcOdIMv0nqcrFp9eqm1y9omgemK
xjkWLYWhAUqv4JwQsXttYBa07ZBye6Z9g1G4AZAps9+C8/rYKx616lP13Ox8loHs
ZILteenrVsCKYTPIDizgRbTGoNcyXfgRtucRQMhlaIYGBi2Cq4ASbd1kgIHDSSsY
fDG680JYhfwlVcK6x+Oy9OdCZYbZYmy9KOxB9xlsuS5+Nh5RjL8=
=uHNo
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171220162741</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-12-20 16:27:41-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 5.0-1.9.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

as announced in November Onionoo's protocol has a major version jump to 5.0
Download available at:
     https://dist.torproject.org/onionoo/5.0-1.9.0/

Main protocol change (also summarized in [0]):
Removed the $ from fingerprints in fields "effective_family",
"alleged_family", and "indirect_family".
Details can be found in [1] and [2].

The changes are already deployed on all onionoo.torproject.org instances.

Please direct comments and questions to the metrics-team mailing list [3].

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions_5_0
[1] https://metrics.torproject.org/onionoo.html#details_relay_effective_family
[2] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?id=0bce98a8177c78e1c14d27bb53e9ec359d1547bf
 [3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171221230230</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-21 23:02:30-0400</timestampReceived><subject>[tor-dev] Using bridges in different /16s</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

If bridges users configure at least two bridges in different /16s,
it makes it harder to run some kinds of statistical attacks on the
paths that they build through the Tor network. (For example,
working out that relays in that /16 are never used by the client.)

For context, see this Twitter thread:
https://twitter.com/twbtwb/status/943974051000721408

I think that:
* most of the current default Tor Browser bridges are in at least two
   /16s, except for the single-bridge pluggable transports,
* almost all the 3-bridge sets given out by BridgeDB are in at least
   two /16s.

Should we:
* document this as a recommendation? Where?
* add code to Tor that warns when it isn't true? (Maybe not?)
* make sure all of the Tor Browser bridges are across two or
  three /16s?
* make sure BridgeDB gives out bridge sets in two or three
   /16s?

T



[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi all,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If bridges users \
configure at least two bridges in different /16s,&lt;/div&gt;&lt;div&gt;it makes it harder to run \
some kinds of statistical attacks on the&lt;/div&gt;&lt;div&gt;paths that they build through the \
Tor network. (For example,&lt;/div&gt;&lt;div&gt;working out that relays in that /16 are never \
used by the client.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For context, see this Twitter \
thread:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://twitter.com/twbtwb/status/943974051000721408"&gt;https://twitter.com/twbtwb/status/943974051000721408&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
think that:&lt;/div&gt;&lt;div&gt;* most of the current default Tor Browser bridges are in at \
least two&lt;/div&gt;&lt;div&gt;   /16s, except for the single-bridge pluggable \
transports,&lt;/div&gt;&lt;div&gt;* almost all the 3-bridge sets given out by BridgeDB are in at \
least&lt;/div&gt;&lt;div&gt;   two /16s.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Should \
we:&lt;/div&gt;&lt;div&gt;* document this as a recommendation? Where?&lt;/div&gt;&lt;div&gt;* add code to Tor \
that warns when it isn't true? (Maybe not?)&lt;/div&gt;&lt;div&gt;* make sure all of the Tor \
Browser bridges are across two or&lt;/div&gt;&lt;div&gt;  three /16s?&lt;/div&gt;&lt;div&gt;* make sure \
BridgeDB gives out bridge sets in two or three&lt;/div&gt;&lt;div&gt;  \
 /16s?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171222002304</emailId><senderName>Robin Descamps</senderName><senderEmail>robin.descamps@outlook.com</senderEmail><timestampReceived>2017-12-22 00:23:04-0400</timestampReceived><subject>[tor-dev] Relay diversity master thesis</subject><body>

[Attachment #2 (text/plain)]

Hello,

I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.

I realise this year a master thesis, in the Université catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as well as a poster that presents a summary of the key elements.

May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it.

The master thesis plan: \
https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx The poster: \
https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4

Thanks,
Robin Descamps


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: \
after-white-space;" class=""&gt; Hello,&lt;br class=""&gt;
&lt;br class=""&gt;
I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.&lt;br class=""&gt; &lt;br class=""&gt;
I realise this year a master thesis, in the Université catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as  well as a poster that presents a summary of the key elements.&lt;br class=""&gt;
&lt;br class=""&gt;
May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it. &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;The master thesis plan: &lt;a \
href="https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx" \
class=""&gt;https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;The poster: &lt;a \
href="https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4" \
class=""&gt;https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; Thanks,&lt;br class=""&gt;
Robin Descamps
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171223160722</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-12-23 16:07:22-0400</timestampReceived><subject>Re: [tor-dev] #tor-dev exitmap</subject><body>

Harshavardhan Reddy &lt;coolharsha010@gmail.com&gt; writes:

&gt; How does the Tor Project deal with the malicious exit relays. Do you
&gt; still run exitmap or something better?

If you have any ideas for 'things to scan for' that are not reflected in
exitmap already I'd love to hear them.

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224035112</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-12-24 03:51:12-0400</timestampReceived><subject>Re: [tor-dev] Rust rewrite help</subject><body>

&gt; Recently, I spent some time in China
&gt; and it made me realize the importance of a project like TOR.

Consider speaking of your experience
on the cypherpunks and/or liberation-tech lists,
anonymously if need be. Your contribution
is valued.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224180626</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-12-24 18:06:26-0400</timestampReceived><subject>Re: [tor-dev] trac.tpo issues</subject><body>

On Sun, Dec 24, 2017 at 11:15:00AM +0000, nusenu wrote:
&gt; Hi, 
&gt; in the last few days trac says occasionally "Service Unavailable" and right now trac times out.
&gt; 
&gt; Since we are currently (attempting to) work on a wiki page, this is somewhat 
&gt; blocking our edits.
&gt; 
&gt; Has trac some known issue?
&gt; 
&gt; I'm looking forward to a reachable and stable trac :)

Yes, this isn't just you. We think the issue is that Internet search
engines, etc are crawling it, and some of the questions you can ask to
trac take a lot of computation to answer. So it is constantly being bombed
with complex questions, leading it to be bad at answering every request.

Surely there is some sort of trac plugin to defend against pieces of
this issue, but we haven't yet found one that works well.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171224200733</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-12-24 20:07:33-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

&gt; Could the torproject provide you with a VM to run that service?

Hi nusenu. My point is that I'm providing it because it's convenient
for me since I already run an r2e instance for my personal news feeds.
I'd rather not maintain two r2e cron jobs.

If someone else would care to run it on a tor VM that's fine with me.
Another option would be for tor to provide a VM where I host this
*and* my personal feeds. I'm fine with that, though does feel a bit
funky. :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171227105342</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-12-27 10:53:42-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Dec 2017, at 18:47, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 25 Dec 2017, at 07:26, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; As we are planning to also add a parser to metrics-lib (#24434), would
&gt;&gt; it be possible to get a full description of the format of the file
&gt;&gt; possibly in RFC5234 format so that we can check that the generator and
&gt;&gt; parsers all match up to that specification?
&gt; 
&gt; I have written up a format in the standard torspec style:
&gt; 
&gt; https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt
&gt; 
&gt; It is deliberately under-specified, please let me know if this causes
&gt; any trouble when writing the parser, and I will tighten it up.
&gt; 
&gt; It's not ABNF/RFC5234, it's rather restrictive, and strict ABNF is
&gt; unreadable for case sensitive strings. I am happy to put an ABNF spec in
&gt; an appendix, if someone wants to write one.

We've added separators to each section, and a timestamp field in the header.

The revised spec is here:

https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt

The revised sample file is here:

https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format_version.4.inc

We're tracking the details in this ticket:

https://trac.torproject.org/projects/tor/ticket/24742

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpDe7YACgkQdA2eOQJS
cqKanhAAlUYK6OSHyO1g/nGl7yLbZQPRD3khEyvBwkIVWyOj5IZPU/6OcC/aqbec
15OmdD/UIq8LFoTru0sU/BHLYYjkKuyAln7HrTmllb3chNcTwPUGDVQ6Yn+MxW9S
2Qvl37+OA+X6WHhQ9Yj4qC2NTUOx2sHRs6wSWJ/fUwNNh+qBbxHehqkAqOcABR0A
3VRI7JKSx8+9MyGKjVXuHwBr5uDW1/tLc/zQz69X+sle+gSRw9x8/MsWTjE+6rrw
Kowgq0vq9iLk0g+Z9WwWoWAswYJ+y1oCaW5oo8mCawe27FwsdLUTgUMqGWMJzuCc
qY8AJKlJLiQJdwJOWCxlJ1u9CA2mS7vlDKH7kRtu0gae6P9Pn/R68HrjoLXhu4S7
kzj6zEDXikjiEYlmL9pBRJVUWvwAAaP0STTVnP661AY3gvJoRuXEJBoMid9YTMWK
k9ZivE+7w9Xtj7x0KEn4Y3cxy9qG1GmwFKVIg5qlBAoYAPWiRrsUylWd9ooyoyPs
Zox5mxbDvs6WHWJXCBTUu2zmBaOLyaWn56AE401N501o5+AkK0LJBsc5pc/bHA/j
FuWRpkfrSbVNt8ttT3w0XxMhZrpAMN3JQgY5DDbCY3fetj/lqLiN+bF/6n95t7Ok
s2kl+TXTE+br6z3MRrUyxxMI8Ji0V9QwZd7317kZmePuZb+aJsA=
=sEyx
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231104852</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-12-31 10:48:52-0400</timestampReceived><subject>Re: [tor-dev] Prop-279 for Onion Alternative Name Representations (Re: Error-Correcting Onions with </subject><body>

[Attachment #2 (multipart/signed)]


I commented on the ticket but I'll do it here for completeness sake:

On Sun, 31 Dec 2017 10:12:53 +0000
nullius &lt;nullius@nym.zone&gt; wrote:
&gt; I also proposed changes to permit the UTF-8 characters required for 
&gt; representing names in languages other than American English, and some 
&gt; other technical improvements.  I added status code 5 to support
&gt; plugins which can discern when a name is in a recognized format, but
&gt; is intrinsically invalid e.g. due to checksum failure; and I expanded
&gt; the description of status code 2, for plugins which do not have TLDs
&gt; but do recognize a definite syntax.

This is pointless because internationalized domain names are
standardized around Punycode encoding (Unicode&lt;-&gt;ASCII), and said
standard is supported by applications that support IDN queries.

I am firmly against this change, and I'm not particularly thrilled by
the thought of homograph attacks either.

&gt; Given appropriate prop-279 changes, I won't need to draw a proposal.  
&gt; I'll simply write code!

It's worth keeping in mind that no one to my knowledge has implemented
prop 279 in the tor code itself, though there is (IIRC) a python kludge
that kind of allows development.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171231130406</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-12-31 13:04:06-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/alternative)]


On 31 Dec 2017 12:22, "teor" &lt;teor2345@gmail.com&gt; wrote:


Are you aware that there's already a checksum in v3 onion
service addresses?


No I was not*, that's great!

"The onion address of a hidden service includes its identity public key,

a
   version field and a basic checksum."


It would be great to get the human interface elements to leverage this;
perhaps overall we are premature in trying to solve the presumed HCI issues
of long onions?

- a

*entirely

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 31 Dec 2017 \
12:22, "teor" &lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt; wrote:&lt;br type="attribution"&gt;&lt;blockquote \
class="m_-7530129080197328503quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div \
dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Are you aware that \
there's already a checksum in v3 onion&lt;/div&gt;&lt;div&gt;service \
addresses?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;No I was not*, that's great!&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;&lt;blockquote class="m_-7530129080197328503quote" style="margin:0 0 \
0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div \
dir="auto"&gt;&lt;pre style="padding:0px;margin-top:0px;margin-bottom:0px"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space:normal;background-color:rgba(255,255,255,0)"&gt;"The onion \
address of a hidden service includes its identity public key,&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding:0px;margin-top:0px;margin-bottom:0px"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space:normal;background-color:rgba(255,255,255,0)"&gt;a  version field and \
a basic checksum."&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;It would be great to get the human interface \
elements to leverage this; perhaps overall we are premature in trying to solve the \
presumed HCI issues of long onions?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;- \
a&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;*entirely&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171101035408</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-01 03:54:08-0400</timestampReceived><subject>Re: [tor-dev] Reporting Relay Bandwidth Less Often</subject><body>

[Attachment #2 (multipart/signed)]


Here's an update on this change:

&gt; On 26 Oct 2017, at 08:46, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 26 Oct 2017, at 06:36, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; teor:
&gt;&gt;&gt; We would like to make Tor relays report their bandwidth statistics
&gt;&gt;&gt; every 24 hours, rather than every 4 hours.
&gt;&gt; 
&gt;&gt; How has the new time period been decided on?
&gt;&gt; Is one day the upper bound for some use-case?
&gt;&gt; If longer periods (2, 3 or 7 days...) are safer: why not increase it
&gt;&gt; even more?
&gt; 
&gt; We decided to make the bandwidth statistics interval 24 hours

We will change the bandwidth statistics interval to 24 hours, and
remember and report 5 periods in each extra-info.

(It used to be 4 hours and report 6 periods in each extra-info.)

&gt; because relays already report observed bandwidth every 24 hours
&gt; in their descriptors. (More precisely, they re-post their descriptors
&gt; approximately every 24 hours

We will leave the regular bandwidth reporting in descriptors as it
is.

&gt; or when the bandwidth changes by
&gt; more than 2x

Bandwidth changes could trigger a descriptor re-post every 20 minutes,
we will change this to 3 hours.

We chose 3 hours because it takes about that much time for updated
relay bandwidths to get to most clients:
* 10 minutes to 70 minutes for descriptor upload to be included in a
  consensus
* 0 minutes to 30 minutes for a mirror to have the new consensus
* 0 minutes[1] to 110 minutes for a client to fetch the new consensus

[1] when bootstrapping, clients sometimes fetch directly from
    authorities. Otherwise, this would be 45 minutes.

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n3412

&gt; To increase both these intervals beyond 24 hours, we would have
&gt; to make major changes to the bandwidth authority subsystem as
&gt; well.
&gt; 
&gt; So this is the simplest change that yields a significant improvement
&gt; in client anonymity.

We have deferred any major changes to at least 0.3.3, and opened a new
ticket:

https://trac.torproject.org/projects/tor/ticket/24104

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAln5RWAACgkQdA2eOQJS
cqIxXw//ZIRstLB6qOM+A24hjN5r+gPTIOxInP39kwrqQf2gpKGQ1ac8HwL1XzGa
eYk3aOgW84gSB1d/6XtPe676iDE7prc/rle/pm2JDHjYOQaWoUpvxERm/ah73poA
/wgAAM8cyqYEKXj9baWYsYFpjjRKGtdBxBWHRrHTzDUwdMbs/rgWqDLNlUexd4QZ
yzLnRmYZygyEH0oi4S/V8AvCspaj/ztmUmgypbIGaAi1TL+LmZ+6QCibCNoeZTes
9vv1egUJ5n3w5G63p6D2h/UaC1sutBm8BvMQ3OAP1ntSjWxfLwL+sUgnD8tEmxnk
np1Yp9sIK8vpsRnCRmKRcf3YmaZAOtLWmuWb1Drw+JrpiicZ1ip04gt6O67LN8V9
1Y7CQX9iEii/gWcAFfrTTPGvbgwE/GSvL2B0nqKs6v1+6sq9CAebj9hjqq6Yw6+9
SlRx+Y2ppPJl+84AA9fvxB542rTIWHNK4F0V9SJXPQIKRpeY06gude9h9P7BWCL1
21t9k4jqNCGsb6QHlEhVDQgLnoXagjfzfdsXsQcs9qFayrp+7LX8jy44iq50lxLh
wwBBwfjqCKMyFmXhS5o/FnMrEWcCcYMOEgW935Zf3KTmZKFeOsZ/Jhxt0SPB2VrI
kWToigav2vLD9MriJeXLH0pJj5iVjndZQ8KqKOs2woNsoPhhjCA=
=qJ5r
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171103100044</emailId><senderName>inkylatenoth</senderName><senderEmail>inkylatenoth@protonmail.com</senderEmail><timestampReceived>2017-11-03 10:00:44-0400</timestampReceived><subject>Re: [tor-dev] v3 hidden services: inconsistencies between spec and implementation</subject><body>

On Sat, Oct 28, 2017 at 05:30:51PM +0300, George Kadianakis wrote:
&gt; That's a great post and thanks for catching all these issues and
&gt; innacuracies! We are definitely interested in consistency and fixing the
&gt; spec (and implementation if needed).

No problem! I'm glad you found my post helpful.

&gt; &gt; # rend-spec-v3.txt
&gt; &gt;
&gt; &gt; ## 2.4
&gt; &gt;
&gt; &gt; * after decrypting the `superencrypted' object from a descriptor, the
&gt; &gt;   resulting document does not end with the NL character. This means that
&gt; &gt;   it does not strictly conform to the document meta-format described in
&gt; &gt;   section 1.2 of dir-spec.txt.
&gt; &gt;
&gt; 
&gt; Hmm... This might be worth fixing on the implementation if possible (and
&gt; if it won't break things). Otherwise, let's patch the spec.

I think it should be possible to fix this in the implementation without
breaking anything.

&gt; &gt; # 220-ecc-ids-keys.txt
&gt; &gt;
&gt; &gt; # 2.1
&gt; &gt;
&gt; &gt; * 'The signature is formed by signing the first N-64 bytes of the
&gt; &gt;   certificate prefixed with the string "Tor node signing key certificate
&gt; &gt;   v1".' I found this to be false; the signatures only validate without
&gt; &gt;   the string prefix.
&gt; &gt;
&gt; 
&gt; Ouch... I think we should edit the spec and consider if there are any
&gt; security risks here.

I agree with all of your proposed solutions (spec vs implementation)
except for here, where I would be much more comfortable with an
implementation change. I realize it would be a breaking change, however,
and will understand if you decide to update the spec instead.

&gt; Inkylatenoth, let me know if you are interested in drafting a spec/code
&gt; patch for the issues you found!!! If you are not interested, I can try
&gt; to do them myself at some point in the next weeks (been pretty busy with
&gt; stuff lately).

At the moment I don't have the time to submit patches, sorry. If you
find the time yourself then I'd be pleased to review/test your patches
to confirm that they solve the inconsistencies I found.

&gt; Also, let us know if your independent implementation is a public thing
&gt; we should know about. Seems interesting :)

I'm not implementing the full protocol, but I certainly will do when
it's finished and open-sourced :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171105230558</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-11-05 23:05:58-0400</timestampReceived><subject>[tor-dev] Namecoin resolution for Tor Prop279</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Tor devs,

I've written up some documentation on using Namecoin with Prop279.
This can be used for human-meaningful onion service names, as well as
standard Namecoin A/AAAA/CNAME records.

In theory, this can also be used with arbitrary non-Namecoin naming
systems that speak the DNS protocol, although I haven't attempted to
do so.

Documentation is here: https://www.namecoin.org/docs/tor-resolution/

You can test it with this URL: http://federalistpapers.bit/

Curious what you all think of it -- please feel free to give feedback.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZ/5k5AAoJELPy0WV4bWVwlSEQAIeF5fiZUBsaiCGyxaDAz97b
l4KVyEKAcPOKCvjryKMqGjxHJPfw9uJJY4x0hD4taXYHszfAMBayOs8EkWHd/eFq
3FDAGW2VaS29k9+y+URiIa9gI3H2et+HgwTOxwCk1O/B2l/2TmWWdGnyh8UCr1a1
yibzBRcamaaMyWwDg7gK0ZvN0WPGwCXiFxVC3fT37dKW2Ve9PwvqZEfsZ/i7eVN1
1Vb+o1Q11qe70yx7XQv3KUFpccU1UsIlR/C0hp0ISxAjV5CpMnN8Lu3/E8s0ViFL
Z3PKL/cpbRltaPPdv8U0mMLy3KY+/u4yRtl2lmHejsNnCwA9gBrZ3XY9A81ZX/wD
QKVBvHf7tO1FlbwKnz0Vb4aY2Ls09vRlXKAQ3zEWtXAT9pofH/dadfI3LYKykeAd
+vuDjDOfsGrIVarn0vWqoVwf43P9iDuaDmk0hNDkbBieEcjIOYbuy3xXiMFxMjpF
Na0StOMYsI1xSlyUqq6+MT5MRrGmh7zk5d8/PYAEdQM8mPJ6wOzgN98sEoGfZLE+
s1rbeZdMiJqne18G9ulUCh4DPOTyZ4K36oJoUAtr/JSt5IO9vGIrTElbw3BjYm6T
7bTeawoWoX+Lx+BJW+dDq57J2r91wwFZdHAqlbQhWvUi8IynVOVqsZUJbw+g9ioP
BAzC5zPauEzD2/awtx/5
=0kqw
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171020124400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-20 12:44:00-0400</timestampReceived><subject>[tor-dev] A ContactInfo specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

an earlier version of this has been send to tor-relays [1]
and I got some feedback from irl and relay operators via ML and github
issues.

Now I'd like to hear from the tor developer community.
Please send your feedback until 2017-10-27.

example ContactInfo:
https://atlas.torproject.org/#details/1EBFC733CCD952F7F7616EBBA7BC6B8E6F2F0CBC

Overview
---------

Tor's ContactInfo descriptor field was primarily intended to contain an
email address and PGP key fingerprint but since this field accepts an
arbitrary string it has been used for multiple other other purposes
(website urls, donation information, bitcoin addresses, ...). Making use
of provided information in an automated way is hard since there is no
specification on how this string should look like. This is an
specification to formalize the ContactInfo string.

Motivation (excerpt)
-----------

- collect additional (self-reported) relay metrics (for things like
atlas and https://nusenu.github.io/OrNetStats )
- exmples: How many use tor's Sandbox/OfflineMasterKey/KIST feature?
- This data could provide tor developers with information on how well
tested/how much used new features (like Sandboxes) are before changing
defaults.


The entire document can be found here:
https://github.com/nusenu/ContactInfo-Information-Shareing-Specification

regards,
nusenu



[1]
https://lists.torproject.org/pipermail/tor-relays/2017-October/013274.html



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171021060217</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-21 06:02:17-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>


&gt; On 20 Oct 2017, at 23:44, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; - collect additional (self-reported) relay metrics (for things like
&gt; atlas and https://nusenu.github.io/OrNetStats )
&gt; - exmples: How many use tor's Sandbox/OfflineMasterKey/KIST feature?
&gt; - This data could provide tor developers with information on how well
&gt; tested/how much used new features (like Sandboxes) are before changing
&gt; defaults

In general, unstructured text should remain unstructured text.

Automated statistics would be more reliable for these particular use cases.
If the information is sensitive, it can be collected using a safe aggregation
scheme (PrivCount as described in prop280, or similar).

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171106145907</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-06 14:59:07-0400</timestampReceived><subject>[tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi everyone,

Attached is the proposal draft for the hidden service v3 contro port
specification.

The idea with this proposal is to _only_ extend the current commands and
events to v3. Nothing new is added. We can think of more things to add after
but for now, I wanted a baseline to start with that is only extending what
exists.

Any kind of feedbacks is welcome! :)

Cheers!
David

-- 
Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=

["284-hsv3-control-port.txt" (text/plain)]

Filename: 284-hsv3-control-port.txt
Title: Hidden Service v3 Control Port
Author: David Goulet
Created: 02-November-2017
Status: Open

1. Summary

   This document extends the hidden service control port events and commands
   to version 3 (rend-spec-v3.txt).

   No command nor events are newly added in this document, it only desribes
   how the current commands and events are extended to support v3.

2. Format

   The formatting of this document follows section 2 of control-spec.txt. It
   is split in two sections, the Commands and the Events for hidden service
   version 3.

   We define the alphabet of a Base64 encoded value to be:

      Base64Character = "A"-"Z" / "a"-"z" / "0"-"9" / "+" / "/"

   For a command or event, if nothing is mentionned, the behavior doesn't
   change from the control port specification.

3. Specification:

3.1. Commands

   As specified in the control specification, all commands are
   case-insensitive but the keywords are case-sensitive.

3.1.1. GETINFO

   Hidden service commands are:

     "hs/client/desc/id/&lt;ADDR&gt;"
       The &lt;ADDR&gt; can be a v3 address without the ".onion" part. The rest is
       as is.

     "hs/service/desc/id/&lt;ADDR&gt;"
       The &lt;ADDR&gt; can be a v3 address without the ".onion" part. The rest is
       as is.

     "onions/{current,detached}"
       No change. This command can support v3 hidden service without changes
       returning v3 address(es).

3.1.2. HSFETCH

   The syntax of this command supports both an HSAddress or a versionned
   descriptor ID. However, for descriptor ID, version 3 doesn't have the same
   concept as v2 so, for v3 the descriptor ID is the blinded key of a
   descriptor which is used as an index to query the HSDir:

   The syntax becomes:
     "HSFETCH" SP (HSAddress / "v" Version "-" DescId)
               *[SP "SERVER=" Server] CRLF

     HSAddress = (16*Base32Character / 56*Base32Character)
     Version = "2" / "3"
     DescId = (32*Base32Character / 32*Base64Character)
     Server = LongName

   The "HSAddress" key is extended to accept 56 base32 characters which is the
   format of a version 3 onion address.

   The "DescId" of the form 32*Base64Character is the descriptor blinded key
   used as an index to query the directory. It can only be used with
   "Version=3".

3.1.5. HSPOST

   No change. This command can support v3 hidden service without changes.

3.1.3. ADD_ONION

   For this command to support version 3, new values are added but the syntax
   is unchanged:

     "ADD_ONION" SP KeyType ":" KeyBlob
                 [SP "Flags=" Flag *("," Flag)]
                 1*(SP "Port=" VirtPort ["," Target])
                 *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF

   New "KeyType" value to "ED25519-V3" which identifies the key type to be a
   v3 ed25519 key.

   New "KeyBlob" value to support the new "ED25519-V3", if specified, will
   generate a new ed25519 private key.

   Because client authentication is not yet implemented, the "ClientAuth"
   field is ignored as well as "Flags=BasicAuth".

3.1.4. DEL_ONION

   The syntax of this command is:

     "DEL_ONION" SP ServiceID CRLF

     ServiceID = The Onion Service address without the trailing ".onion"
                 suffix

   The "ServiceID" can simply be a v3 address. Nothing else changes.

3.2. Events

3.2.1. HS_DESC

   For this event to support vesrion 3, one optional field and new
   values are added:

     "650" SP "HS_DESC" SP Action SP HSAddress SP AuthType SP HsDir
           [SP DescriptorID] [SP "REASON=" Reason] [SP "REPLICA=" Replica]
           [SP "HSDIR_INDEX=" HSDirIndex]

     Action =  "REQUESTED" / "UPLOAD" / "RECEIVED" / "UPLOADED" / "IGNORE" /
               "FAILED" / "CREATED"
     HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"
     AuthType = "NO_AUTH" / "BASIC_AUTH" / "STEALTH_AUTH" / "UNKNOWN"
     HsDir = LongName / Fingerprint / "UNKNOWN"
     DescriptorID = 32*Base32Character / 32*Base64Character
     Reason = "BAD_DESC" / "QUERY_REJECTED" / "UPLOAD_REJECTED" / "NOT_FOUND" /
              "UNEXPECTED" / "QUERY_NO_HSDIR"
     Replica = 1*DIGIT
     HSDirIndex = 64*HEXDIG

   The "HSDIR_INDEX=" is an optional field that is only for version 3 which
   contains the computed index of the HsDir the descriptor was uploaded to or
   fetched from.

   The "HSAddress" key is extended to accept 56 base32 characters which is the
   format of a version 3 onion address.

   The "DescriptorID" key is extended to accept 32 base64 characters which is
   the descriptor blinded key used for the index value at the "HsDir".

   Because client authentication is not yet implemented, the "AuthType" field
   is always "NO_AUTH".

3.2.2. HS_DESC_CONTENT

   For this event to support version 3, new values are added but the syntax is
   unchanged:

     "650" "+" "HS_DESC_CONTENT" SP HSAddress SP DescId SP HsDir CRLF
                Descriptor CRLF "." CRLF "650" SP "OK" CRLF

     HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"
     DescId = 32*Base32Character / 32*Base64Character
     HsDir = LongName / "UNKNOWN"
     Descriptor = The text of the descriptor formatted as specified in
                  rend-spec-v3.txt section 2.4 or empty string on failure.

   The "HSAddress" key is extended to accept 56 base32 characters which is the
   format of a version 3 onion address.

   The "DescriptorID" key is extended to accept 32 base64 characters which is
   the descriptor blinded key used for the index value at the "HsDir".

3.2.3 CIRC and CIRC_MINOR

   These circuit events have an optional field named "REND_QUERY" which takes
   an "HSAddress". This field is extended to support v3 address:

      HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"

["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171110085934</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-10 08:59:34-0400</timestampReceived><subject>[tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

can one of the core developers tell me if there exists
a current summary of the design of Tor?

I've started looking into OR for GNUnet and as far as I know
from the papers in the anonbib and one 2013 presentation
slides I've read so far, Tor went through many changes
over the years.
I'm interested in what you use today, where you are
heading (or what you are considering for the future)
and maybe reasons why past designs were changed.

Best regards,
ng0
-- 
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dist.ng0.infotropique.org/dist/keys/
  WWW: https://ng0.infotropique.org

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171110201339</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2017-11-10 20:13:39-0400</timestampReceived><subject>Re: [tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Nov 10, 2017 at 08:59:34AM +0000, ng0 wrote:
&gt; can one of the core developers tell me if there exists
&gt; a current summary of the design of Tor?

I'm not one of the core developers, but I know where the design documents are 
anyway:

https://www.torproject.org/docs/documentation.html.en#DesignDoc

A good start would probably be to read the original design document from 2004 
and after that the two "Eight key design changes" blog posts.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171116125224</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-16 12:52:24-0400</timestampReceived><subject>[tor-dev] UX improvement proposal #2: Encrypted bookmarks for onions</subject><body>

Hello,

here is another onion-related UX improvement proposal. We still don't
have a plan for how to concretely fix the onion naming issue, and we
recently released next gen onions so names just got bigger. Ideally we
should start experimenting with solutions sooner than later (also see
https://blog.torproject.org/cooking-onions-names-your-onions).

I think a local-solution akin to bookmarks makes sense to start with, so
I opened a trac ticket today about encrypted bookmarks on Tor Browser:
  https://trac.torproject.org/projects/tor/ticket/24310

Please let me know if you are aware of firefox addon projects that do
encrypted bookmarks that we could use or start basing our work on.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171101032803</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-01 03:28:03-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>


&gt; On 31 Oct 2017, at 06:57, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt; * I believe now that we should seriously discuss the relevance of channels.
&gt;  Originally, the idea was good that is providing an abstraction layer for the
&gt;  relay to relay handshake and send/process cells related to the protocol. But,
&gt;  as of now, they are half doing it.
&gt; 
&gt;  There is an important cost in code and maintanance of something that is not
&gt;  properly implemented/finished (channel abstraction) and also something that
&gt;  is unused. An abstraction implemented only for one thing is not really useful
&gt;  except maybe to offer an example for others? But we aren't providing a good
&gt;  example right now imo...
&gt; 
&gt;  That being said, we can spend time fixing the channel subsystem, trying to
&gt;  turn it in a nicer interface, fixing all the issues I've described above (and
&gt;  I suspect there might be more) so the cell scheduler can play nicely with
&gt;  channels. Or, we could rip them off eliminating lots of code and reducing our
&gt;  technical debt. I would like us to think about what we want seriously because
&gt;  that channel subsystem is _complicated_ and very few of us fully understands
&gt;  it afaict.

It depends what the goal of the channel layer is.

Do we seriously think we will use another protocol in place of TLS?

Even if we are serious about non-TLS connections, do we want to rip out
this code now, and write something better when we know what we
actually need?

Is the channel layer the right place to hide the differences between
TLS-over-IPv4 and TLS-over-IPv6?
(I don't think it is, but it's worth thinking about how much work it
was to add IPv6 support, and using that as a guide for how much work
it would be to add address/port/keys/etc. for another protocol.)

T

-- 
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171101113150</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-11-01 11:31:50-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

On Wed, Nov 01, 2017 at 02:28:03PM +1100, teor wrote:
&gt; 
&gt; &gt; On 31 Oct 2017, at 06:57, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; 
&gt; &gt; * I believe now that we should seriously discuss the relevance of channels.
&gt; &gt;  Originally, the idea was good that is providing an abstraction layer for the
&gt; &gt;  relay to relay handshake and send/process cells related to the protocol. But,
&gt; &gt;  as of now, they are half doing it.
&gt; &gt; 
&gt; &gt;  There is an important cost in code and maintanance of something that is not
&gt; &gt;  properly implemented/finished (channel abstraction) and also something that
&gt; &gt;  is unused. An abstraction implemented only for one thing is not really useful
&gt; &gt;  except maybe to offer an example for others? But we aren't providing a good
&gt; &gt;  example right now imo...
&gt; &gt; 
&gt; &gt;  That being said, we can spend time fixing the channel subsystem, trying to
&gt; &gt;  turn it in a nicer interface, fixing all the issues I've described above (and
&gt; &gt;  I suspect there might be more) so the cell scheduler can play nicely with
&gt; &gt;  channels. Or, we could rip them off eliminating lots of code and reducing our
&gt; &gt;  technical debt. I would like us to think about what we want seriously because
&gt; &gt;  that channel subsystem is _complicated_ and very few of us fully understands
&gt; &gt;  it afaict.
&gt; 
&gt; It depends what the goal of the channel layer is.
&gt; 
&gt; Do we seriously think we will use another protocol in place of TLS?

The channel layer has certainly been used fruitfully in the past for
experiments with other transports, such as UDP-based ones, QUIC-Tor,
etc.  I would be a little sad to see it disappear completely.
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171101130805</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-01 13:08:05-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


On 01 Nov (14:28:03), teor wrote:
&gt; 
&gt; &gt; On 31 Oct 2017, at 06:57, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; 
&gt; &gt; * I believe now that we should seriously discuss the relevance of channels.
&gt; &gt;  Originally, the idea was good that is providing an abstraction layer for the
&gt; &gt;  relay to relay handshake and send/process cells related to the protocol. But,
&gt; &gt;  as of now, they are half doing it.
&gt; &gt; 
&gt; &gt;  There is an important cost in code and maintanance of something that is not
&gt; &gt;  properly implemented/finished (channel abstraction) and also something that
&gt; &gt;  is unused. An abstraction implemented only for one thing is not really useful
&gt; &gt;  except maybe to offer an example for others? But we aren't providing a good
&gt; &gt;  example right now imo...
&gt; &gt; 
&gt; &gt;  That being said, we can spend time fixing the channel subsystem, trying to
&gt; &gt;  turn it in a nicer interface, fixing all the issues I've described above (and
&gt; &gt;  I suspect there might be more) so the cell scheduler can play nicely with
&gt; &gt;  channels. Or, we could rip them off eliminating lots of code and reducing our
&gt; &gt;  technical debt. I would like us to think about what we want seriously because
&gt; &gt;  that channel subsystem is _complicated_ and very few of us fully understands
&gt; &gt;  it afaict.
&gt; 
&gt; It depends what the goal of the channel layer is.
&gt; 
&gt; Do we seriously think we will use another protocol in place of TLS?
&gt; 
&gt; Even if we are serious about non-TLS connections, do we want to rip out
&gt; this code now, and write something better when we know what we
&gt; actually need?

Right, that is basically a very good question to try to answer. I think it is
totally conceivable to think about researchers willing to experiement there
and go with a Tor without TLS. At that point, channel could be useful but in a
state that actually is a proper abstraction (not the case right now). We would
need work to make it happen.

However, I do *NOT* see Tor moving away from TLS anytime soon. The network and
clients out there are all using that, moving to something else would mean dual
stack protocol, years of ramping up to network maturity (basically ntor vs tap
is a good example I think). But at that point, we'll have to do massive amount
of work in the channel/connection subsystem.

All in all, my answer is that "No, we aren't serious about moving away from
TLS but always possible".

Thus, in the end, this channel subsystem is really about letting researchers
play with it and not helping us developers do our job. There could be a gain
there of fixing it but would be one sided for now imo.

&gt; 
&gt; Is the channel layer the right place to hide the differences between
&gt; TLS-over-IPv4 and TLS-over-IPv6?

That would be the connection layer, handling 1 to 1 socket connection and
talking to the kernel.

SCTP-Tor for instance, would also be at the connection layer. That subsystem
in my opinion would benefit *greatly* for a nice interface but that is huge
amount of work.

Thus, I want to re-iterate that if we care about providing a nice abstraction
for researchers to do a better job, we have a broken one at the channel layer
and none at the connection layer which is actually the one that would be most
useful (QUIC, SCTP, UDP, ...). So even today we do *not* offer anything useful
to researchers imo.

Cheers!
David

&gt; (I don't think it is, but it's worth thinking about how much work it
&gt; was to add IPv6 support, and using that as a guide for how much work
&gt; it would be to add address/port/keys/etc. for another protocol.)
&gt; 
&gt; T
&gt; 
&gt; -- 
&gt; Tim / teor
&gt; 
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
sGwH3ikKXaZjLVTHXKbL8U8r+dQrx5mLsny/C4ZarV4=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171101130936</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-01 13:09:36-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


On 01 Nov (07:31:50), Ian Goldberg wrote:
&gt; On Wed, Nov 01, 2017 at 02:28:03PM +1100, teor wrote:
&gt; &gt; 
&gt; &gt; &gt; On 31 Oct 2017, at 06:57, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; * I believe now that we should seriously discuss the relevance of channels.
&gt; &gt; &gt;  Originally, the idea was good that is providing an abstraction layer for the
&gt; &gt; &gt;  relay to relay handshake and send/process cells related to the protocol. But,
&gt; &gt; &gt;  as of now, they are half doing it.
&gt; &gt; &gt; 
&gt; &gt; &gt;  There is an important cost in code and maintanance of something that is not
&gt; &gt; &gt;  properly implemented/finished (channel abstraction) and also something that
&gt; &gt; &gt;  is unused. An abstraction implemented only for one thing is not really useful
&gt; &gt; &gt;  except maybe to offer an example for others? But we aren't providing a good
&gt; &gt; &gt;  example right now imo...
&gt; &gt; &gt; 
&gt; &gt; &gt;  That being said, we can spend time fixing the channel subsystem, trying to
&gt; &gt; &gt;  turn it in a nicer interface, fixing all the issues I've described above (and
&gt; &gt; &gt;  I suspect there might be more) so the cell scheduler can play nicely with
&gt; &gt; &gt;  channels. Or, we could rip them off eliminating lots of code and reducing our
&gt; &gt; &gt;  technical debt. I would like us to think about what we want seriously because
&gt; &gt; &gt;  that channel subsystem is _complicated_ and very few of us fully understands
&gt; &gt; &gt;  it afaict.
&gt; &gt; 
&gt; &gt; It depends what the goal of the channel layer is.
&gt; &gt; 
&gt; &gt; Do we seriously think we will use another protocol in place of TLS?
&gt; 
&gt; The channel layer has certainly been used fruitfully in the past for
&gt; experiments with other transports, such as UDP-based ones, QUIC-Tor,
&gt; etc.  I would be a little sad to see it disappear completely.

So after Montreal meeting, I got access to QUIC-Tor code. And, as a
misconception of channels, they aren't about "transport" but "protocol".

Thus the QUIC-Tor code didn't even *touch* channels ;). Everything they did
had to be done mostly at the connection layer.

For some reasearch to experiement with channels, it would be basically a
research based on _removing_ TLS between relays. I'm not aware of such a thing
right now but I'm sure someone did poked at it for sure!

Cheers!
David

&gt; -- 
&gt; Ian Goldberg
&gt; Professor and University Research Chair
&gt; Cheriton School of Computer Science
&gt; University of Waterloo
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
UPl9eGJV+i+xjpXGu3Z4MvZvCwpXqUVr4EtQNSNE19w=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171101131828</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-11-01 13:18:28-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

On Wed, Nov 01, 2017 at 09:09:36AM -0400, David Goulet wrote:
&gt; On 01 Nov (07:31:50), Ian Goldberg wrote:
&gt; &gt; On Wed, Nov 01, 2017 at 02:28:03PM +1100, teor wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; On 31 Oct 2017, at 06:57, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; * I believe now that we should seriously discuss the relevance of channels.
&gt; &gt; &gt; &gt;  Originally, the idea was good that is providing an abstraction layer for the
&gt; &gt; &gt; &gt;  relay to relay handshake and send/process cells related to the protocol. But,
&gt; &gt; &gt; &gt;  as of now, they are half doing it.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;  There is an important cost in code and maintanance of something that is not
&gt; &gt; &gt; &gt;  properly implemented/finished (channel abstraction) and also something that
&gt; &gt; &gt; &gt;  is unused. An abstraction implemented only for one thing is not really useful
&gt; &gt; &gt; &gt;  except maybe to offer an example for others? But we aren't providing a good
&gt; &gt; &gt; &gt;  example right now imo...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;  That being said, we can spend time fixing the channel subsystem, trying to
&gt; &gt; &gt; &gt;  turn it in a nicer interface, fixing all the issues I've described above (and
&gt; &gt; &gt; &gt;  I suspect there might be more) so the cell scheduler can play nicely with
&gt; &gt; &gt; &gt;  channels. Or, we could rip them off eliminating lots of code and reducing our
&gt; &gt; &gt; &gt;  technical debt. I would like us to think about what we want seriously because
&gt; &gt; &gt; &gt;  that channel subsystem is _complicated_ and very few of us fully understands
&gt; &gt; &gt; &gt;  it afaict.
&gt; &gt; &gt; 
&gt; &gt; &gt; It depends what the goal of the channel layer is.
&gt; &gt; &gt; 
&gt; &gt; &gt; Do we seriously think we will use another protocol in place of TLS?
&gt; &gt; 
&gt; &gt; The channel layer has certainly been used fruitfully in the past for
&gt; &gt; experiments with other transports, such as UDP-based ones, QUIC-Tor,
&gt; &gt; etc.  I would be a little sad to see it disappear completely.
&gt; 
&gt; So after Montreal meeting, I got access to QUIC-Tor code. And, as a
&gt; misconception of channels, they aren't about "transport" but "protocol".
&gt; 
&gt; Thus the QUIC-Tor code didn't even *touch* channels ;). Everything they did
&gt; had to be done mostly at the connection layer.
&gt; 
&gt; For some reasearch to experiement with channels, it would be basically a
&gt; research based on _removing_ TLS between relays. I'm not aware of such a thing
&gt; right now but I'm sure someone did poked at it for sure!

Ah, bad example I guess.  But some of my work in the past certainly has
used channels for this purpose.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171115162756</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-11-15 16:27:56-0400</timestampReceived><subject>[tor-dev] Detecting multi-homed exit relays (was: Onion auto-redirects using Alt-Svc HTTP header)</subject><body>

On Wed, Nov 15, 2017 at 10:03:39AM -0600, Tom Ritter wrote:
&gt; Detecting exit nodes is error prone, as you point out. Some exit nodes
&gt; have their traffic exit a different address than their listening
&gt; port.[1]

Right.  It's not trivial for tor to figure out what exit relays are
multi-homed -- at least not without actually establishing circuits and
fetching content over each exit relay.

I just finished an exitmap scan and found 17 exit relays that exit from
an IP address that is different from what's listed in the consensus:

193.171.202.146 -&gt; 193.171.202.150 for \
&lt;https://atlas.torproject.org/#details/01A9258A46E97FF8B2CAC7910577862C14F2C524&gt; \
104.223.123.99  -&gt; 104.223.123.98 for \
&lt;https://atlas.torproject.org/#details/D4010FAD096CFB59278015F711776D8CCB2735EC&gt; \
87.118.83.3     -&gt; 87.118.82.3 for \
&lt;https://atlas.torproject.org/#details/A8EA2EBB29B0BA4472F26A04A342967FF06CC104&gt; \
89.31.57.58     -&gt; 89.31.57.5 for \
&lt;https://atlas.torproject.org/#details/7DD29A65C370B86B5BE706EA3B1417745714C8AF&gt; \
37.187.105.104  -&gt; 196.54.55.14 for \
&lt;https://atlas.torproject.org/#details/91824956DFA430C071BF6B94B623DF10931D1D40&gt; \
77.247.181.164  -&gt; 77.247.181.162 for \
&lt;https://atlas.torproject.org/#details/204DFD2A2C6A0DC1FA0EACB495218E0B661704FD&gt; \
198.211.103.26  -&gt; 185.165.169.23 for \
&lt;https://atlas.torproject.org/#details/E56E6976ED9C6B72528ECEDA6C6CEEAC767FA26C&gt; \
52.15.62.13     -&gt; 69.181.127.85 for \
&lt;https://atlas.torproject.org/#details/833B03789A2A98C6B53D792156FEA3D2E1ECE967&gt; \
138.197.4.77    -&gt; 163.172.45.46 for \
&lt;https://atlas.torproject.org/#details/D5D6DBED4BEB90DB089AC1E57EA3A13B9B8AA769&gt; \
52.15.62.13     -&gt; 104.132.0.104 for \
&lt;https://atlas.torproject.org/#details/BF0E33F3897A2109D03DAA2F73AAF8ED25FB6F4D&gt; \
31.185.27.203   -&gt; 31.185.27.201 for \
&lt;https://atlas.torproject.org/#details/5D263037FC175596B3A344132B0B755EB8FB1D1C&gt; \
104.223.123.101 -&gt; 104.223.123.98 for \
&lt;https://atlas.torproject.org/#details/02A627FA195809A3ABE031B7864CCA7A310F1D44&gt; \
77.247.181.166  -&gt; 77.247.181.162 for \
&lt;https://atlas.torproject.org/#details/77131D7E2EC1CA9B8D737502256DA9103599CE51&gt; \
149.56.223.240  -&gt; 149.56.223.241 for \
&lt;https://atlas.torproject.org/#details/B6718125C43ECA2E5011B3C681BB6638617A9686&gt; \
88.190.118.95   -&gt; 94.23.201.80 for \
&lt;https://atlas.torproject.org/#details/8C8F0AA30AD7819F16BBD530586CFE58EBA39948&gt; \
192.241.79.175  -&gt; 192.241.79.178 for \
&lt;https://atlas.torproject.org/#details/DA6CB6C05F4A404184FC3A85FDB83F935C6620DC&gt; \
143.106.60.70   -&gt; 193.15.16.4 for \
&lt;https://atlas.torproject.org/#details/6BF913C31A47E020637121014DB2AFE0877BD31B&gt;

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171117201810</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-11-17 20:18:10-0400</timestampReceived><subject>[tor-dev] Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello everyone,

we, the Tor Metrics Team, have finished writing our roadmap for the 12
months between October 2017 and September 2018:

https://trac.torproject.org/projects/tor/raw-attachment/wiki/org/teams/Me=
tricsTeam/metrics-team-roadmap-2017-11-17.pdf

https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam#Roadm=
apfromOctober2017toSeptember2018

In the process of writing this roadmap we incorporated feedback from
various people in the Tor community, including suggestions made on this
list.

And if something didn't make it on this year's roadmap, we made a note
to reconsider in about a year from now.

In any case, thanks a lot for contributing to this process!

Stay tuned for more Tor Metrics!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025033516</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-25 03:35:16-0400</timestampReceived><subject>[tor-dev] Proposal: Move IPv6 ORPorts to the Microdesc Consensus</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

We would like to move IPv6 ORPorts from microdescriptors to the
microdesc consensus. This makes it easier for IPv6 clients to bootstrap
and choose reachable guards.

The proposal is inlined below, it is also available with the =
corresponding
dir-spec updates in my torspec branch bug23826-23828 on GitHub:

https://github.com/teor2345/torspec.git

The tor code that implements these new consensus methods is in my tor
branch on bug23826-23828 on GitHub:

https://github.com/teor2345/tor.git

The parent ticket for these related changes is #20916. The code changes =
are
being tracked in #23826 and #23828, and the spec changes and proposal in
#23898:

https://trac.torproject.org/projects/tor/ticket/20916

If we've spoken about this, and I've left you out as an author, please =
let
me know!

Here is the proposal text:

Filename: xxx-ipv6-in-micro-consensus.txt
Title: Move IPv6 ORPorts from microdescriptors to the microdesc =
consensus
Author: Tim Wilson-Brown (teor)
Created: 18-Oct-2017
Status: Open
Target: 0.3.3.x

1. Summary

   Moving IPv6 ORPorts from microdescs to the microdesc consensus will =
make
   it easier for IPv6 clients to bootstrap and select reachable guards.

   Since consensus method 14, authorities have voted for IPv6 =
address/port
   pairs (ORPorts) in "a" lines. Unreachable IPv6 ORPorts are dropped =
from the
   full consensus. But for clients that use microdescriptors (the =
default),
   IPv6 ORPorts are placed in microdescriptors. So these clients can =
only tell
   if an IPv6 ORPort is unreachable when a majority of voting =
authorities
   mark the relay as not Running.

   This proposal puts reachable relay IPv6 ORPorts in an "a" line in the
   microdesc consensus. This allows clients to discover unreachable IPv6
   ORPorts, even if a minority of voting authorities set
   AuthDirHasIPv6Connectivity 1.

2. Proposal

   We add two new consensus methods, here represented as M and N (M &lt; =
N), to
   be allocated when this proposal's implementation is merged. These =
consensus
   methods move IPv6 ORPorts from microdescs to the microdesc consensus.

   We use two different methods because this allows us to modify client =
code
   based on each method. Also, if a bug is discovered in one of the =
methods,
   authorities can be patched to stop voting for it, and then we can =
implement
   a fix in a later method.

2.1. Add Reachable IPv6 ORPorts to the Microdesc Consensus

   We specify that microdescriptor consensuses created with methods M or =
later
   contain reachable IPv6 ORPorts.

2.2. Remove IPv6 ORPorts from Microdescriptors

   We specify that microdescriptors created with methods N or later do =
not
   contain any IPv6 ORPorts.

3. Retaining Existing Behaviour

   The following existing behaviour will be retained:

3.1. Authority IPv6 Reachability

   Only authorities configured with AuthDirHasIPv6Connectivity 1 will =
test
   IPv6 ORPort reachability, and vote for IPv6 ORPorts.

   This means that:
   * if no voting authorities set AuthDirHasIPv6Connectivity 1, there =
will be
     no IPv6 ORPorts in the consensus,
   * if a minority of voting authorities set AuthDirHasIPv6Connectivity =
1,
     unreachable IPv6 ORPort lines will be dropped from the consensus, =
but the
     relay will still be listed as Running,
   * if a majority of voting authorities set AuthDirHasIPv6Connectivity =
1,
     relays with unreachable IPv6 ORPorts will be dropped from the =
consensus.

   We will document this behaviour in the tor manual page, see #23870.

3.2. Full Consensus IPv6 ORPorts

   The full consensus will continue to contain reachable IPv6 ORPorts.

3.3. Clients that use Full Descriptors

   Tor clients that use full descriptors already ignore unreachable IPv6
   ORPorts, and have done so since at least 0.2.8.x.

4. Impact and Related Changes

4.1. Directory Authority Configuration

   We will work to get a super-majority (75%) of authorities checking =
relay
   IPv6 reachability, to avoid Running-flag flapping. To do this, =
authorities
   need to get IPv6 connectivity, and set AuthDirHasIPv6Connectivity 1.

4.2. Relays and Bridges

   Tor relays and bridges do not currently use IPv6 ORPorts from the
   consensus.

   We expect that 2/3 of authorities will be voting for consensus method =
N
   before future Tor relay or bridge versions use IPv6 ORPorts from the
   consensus.

4.3. Clients

4.3.1. Legacy Clients

4.3.1.1. IPv6 ORPort Circuits

   Tor clients on versions 0.2.8.x to 0.3.2.x check directory documents =
for
   ORPorts in the following order:
     * descriptors (routerinfo, available if using bridges or full =
descriptors)
     * consensus (routerstatus)
     * microdescriptors (IPv6 ORPorts only)

   Their behaviour will be identical to the current behaviour for =
consensus
   methods M and earlier. When consensus method N is used, they will =
ignore
   unreachable IPv6 ORPorts without any code changes.

4.3.1.2. IPv6 ORPort Bootstrap

   Tor clients on versions 0.2.8.x and 0.2.9.x are currently unable to
   bootstrap over IPv6 only connections when using microdescriptors. =
This
   happens because the microdesc consensus does not contain IPv6 =
ORPorts.

   When consensus method M is used, they will be able to bootstrap over =
IPv6
   only connections using microdescriptors, without any code changes.

4.3.2. Future Clients

4.3.2.1. Ignoring IPv6 ORPorts in Microdescs

   Tor clients on versions 0.3.3.x and later will ignore unreachable =
IPv6
   ORPorts once consensus method M or later is in use. (See #23827.)

4.3.2.2. IPv6 ORPort Bootstrap

   If a bootstrapping IPv6-only client has a consensus made with method =
M or
   later, it should download microdescriptors from one of the IPv6 =
ORPorts in
   that consensus. Previously, IPv6-only clients would use fallback =
directory
   mirrors to download microdescs, because there were no IPv6 ORPorts in =
the
   microdesc consensus. (See #23827.)

4.3.2.3. Ignoring Addresses in Unused Directory Documents

   If a client doesn't use a particular directory document type for a =
node,
   it should ignore any addresses in that document type. (See #23975.)

5. Data Size

   This change removes 2-50 bytes from the microdescriptors of relays =
that
   have an IPv6 ORPort, and adds them to reachable IPv6 relays' =
microdesc
   consensus entries.

   As of October 2017, 600 relays (9%) have IPv6 ORPorts in the full
   consensus. Their "a" lines take up 19 KB, or 33 bytes each on =
average.
   The microdesc consensus is 1981 KB, so this represents about 1% of =
its
   uncompressed size.

   Most tor clients are already running 0.3.1.7, which implements =
consensus
   diffs. We expect that most directory mirrors will also implement =
consensus
   diffs by the time 2/3 of authorities are voting for consensus method =
M.

   So we expect that this change will have a minimal impact, which is =
made
   even smaller by compression and consensus diffs.

6. External Impacts

   We don't expect this change to impact Onionoo and similar projects, =
because
   they typically use the full consensus.

   Metrics doesn't currently graph IPv6 usage in Tor, but would like to =
in
   future.


--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZ8AZ0AAoJEHQNnjkCUnKiV9sP/A8UYOV2ByC3OlVs7Z41gW9O
j8PxjjcJu/WYBOg8h1fMqqXnL/GIusO/YNV4HJv5KbAzGoOY1FxfFZWIoGadauj+
ZPmbUaqG/1oRHqmnBDJt9vFlfbA9gdrB4UhuxFVcq8E20thtX81qKNShkkW9YUIb
gFwGw6XimUqUtrXzVZKgUzESEP/gOQIy+PJEPxQYnBgu5PHC9MZiSAXcUAy60JI7
FDXwVnbId5bWSohAKb4rCZV8Q9BC+nyj5eEz3NxlPwtYQV7BjrJn2YSUmuH1eZHI
7s8AkmqaXMg9maFK78DWwPc3rapPMH/fuDAvI9GnxVJ5b34Pj/PNia125wS5rX2T
sM999DgM+nbRymDjzg6+iCOUkOi7TON8E+nQn24lojNfz/27z+G/ZK/nSVhzziZF
l3vnQ1immUgCIoI3lmz1A28A322Tv9fasDXs9d5zToi/O+XapWh9dqK3hGaKMEoS
/CcJksjC/4z99tQChcKAgS4Ve1KGxvuEMRCpH57JKg/AAy0QCpSe1gzEJ9iz83WK
5FkEHi0t/oEa2fRvcS59XxRaanzuCTIRT2au1OwJglHV+BWuGeAagxyMQ7Wmna70
XFg5TVqL6/kadBq8TvvOg+aq6uxu0CpMuJoxyPbL/DepVcOsEfaXrZpV1IX4zDQd
2jgWW0ZODXHMQjuVRGdb
=epQd
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171123190953</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-11-23 19:09:53-0400</timestampReceived><subject>[tor-dev] rendezvous on non-OR circuit with purpose Acting as rendevous</subject><body>

I just restarted my node, and saw this in the log:

Nov 23 14:07:21.000 [warn] Tried to establish rendezvous on non-OR
circuit with purpose Acting as rendevous (pending)

What does this mean?  I'm a little worried someone out there is playing
games with the protocol...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171124060633</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-11-24 06:06:33-0400</timestampReceived><subject>[tor-dev] Privacy Pass</subject><body>

Hi. Are there any plans to include Privacy Pass addon in Tor Browser by default? Privacy Pass is the result of some great work by Ian and his team at University of Waterloo to spare Tor users the torture of solving infinite captchas from Cloudflare.[0][1]

[0] https://privacypass.github.io/team/
[1] https://blog.cloudflare.com/privacy-pass-the-math/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171124070200</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-11-24 07:02:00-0400</timestampReceived><subject>Re: [tor-dev] Privacy Pass</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


bancfc@openmailbox.org:
&gt; Hi. Are there any plans to include Privacy Pass addon in Tor Browser by default? \
&gt; Privacy Pass is the result of some great work by Ian and his team at University of \
&gt; Waterloo to spare Tor users the torture of solving infinite captchas from \
&gt; Cloudflare.[0][1]

That's not decided yet. We are still reviewing the extension in a Tor
Browser context.

Georg

&gt; [0] https://privacypass.github.io/team/
&gt; [1] https://blog.cloudflare.com/privacy-pass-the-math/
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171124120718</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-11-24 12:07:18-0400</timestampReceived><subject>Re: [tor-dev] Privacy Pass</subject><body>

On Fri, Nov 24, 2017 at 06:06:33AM -0000, bancfc@openmailbox.org wrote:
&gt; Hi. Are there any plans to include Privacy Pass addon in Tor Browser by default? \
&gt; Privacy Pass is the result of some great work by Ian and his team at University of \
&gt; Waterloo to spare Tor users the torture of solving infinite captchas from \
&gt; Cloudflare.[0][1]

To give proper credit, it's not "Ian and his team at uWaterloo"; it's
"the (now mostly former) Cloudflare people plus Ian".
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025161934</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-10-25 16:19:34-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Move IPv6 ORPorts to the Microdesc Consensus</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, Oct 24, 2017 at 11:35 PM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt; Hi all,
&gt;
&gt; We would like to move IPv6 ORPorts from microdescriptors to the
&gt; microdesc consensus. This makes it easier for IPv6 clients to bootstrap
&gt; and choose reachable guards.
&gt;
&gt; The proposal is inlined below, it is also available with the corresponding
&gt; dir-spec updates in my torspec branch bug23826-23828 on GitHub:
&gt;
&gt; https://github.com/teor2345/torspec.git


Hi!  I've taken the changes here
through 138ae7f3180f961314df4630b67162cc12369b91.  The remaining two
changes can apply if/when this proposal has been accepted and merged.

I've added the proposal as number 283.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Oct \
24, 2017 at 11:35 PM, teor &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Hi all,&lt;br&gt; &lt;br&gt;
We would like to move IPv6 ORPorts from microdescriptors to the&lt;br&gt;
microdesc consensus. This makes it easier for IPv6 clients to bootstrap&lt;br&gt;
and choose reachable guards.&lt;br&gt;
&lt;br&gt;
The proposal is inlined below, it is also available with the corresponding&lt;br&gt;
dir-spec updates in my torspec branch bug23826-23828 on GitHub:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://github.com/teor2345/torspec.git" rel="noreferrer" \
target="_blank"&gt;https://github.com/teor2345/&lt;wbr&gt;torspec.git&lt;/a&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi! \
I've taken the changes here through  138ae7f3180f961314df4630b67162cc12369b91.   \
The remaining two changes can apply if/when this proposal has been accepted and \
merged.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've added the proposal as number \
283.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171101202253</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-11-01 20:22:53-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Move IPv6 ORPorts to the Microdesc Consensus</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, Oct 24, 2017 at 11:35 PM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt; Hi all,
&gt;
&gt; We would like to move IPv6 ORPorts from microdescriptors to the
&gt; microdesc consensus. This makes it easier for IPv6 clients to bootstrap
&gt; and choose reachable guards.
&gt;
&gt; The proposal is inlined below, it is also available with the corresponding
&gt; dir-spec updates in my torspec branch bug23826-23828 on GitHub:
&gt;
&gt; https://github.com/teor2345/torspec.git
&gt;
&gt; The tor code that implements these new consensus methods is in my tor
&gt; branch on bug23826-23828 on GitHub:
&gt;
&gt; https://github.com/teor2345/tor.git
&gt;
&gt; The parent ticket for these related changes is #20916. The code changes are
&gt; being tracked in #23826 and #23828, and the spec changes and proposal in
&gt; #23898:
&gt;
&gt; https://trac.torproject.org/projects/tor/ticket/20916
&gt;
&gt; If we've spoken about this, and I've left you out as an author, please let
&gt; me know!
&gt;


Hi, Tim!  I promised you a quick review  here, so here goes.  I have some
questions, but nothing looks like a showstopper here.


&gt; Here is the proposal text:
&gt;
&gt; Filename: xxx-ipv6-in-micro-consensus.txt
&gt; Title: Move IPv6 ORPorts from microdescriptors to the microdesc consensus
&gt; Author: Tim Wilson-Brown (teor)
&gt; Created: 18-Oct-2017
&gt; Status: Open
&gt; Target: 0.3.3.x
&gt;
&gt; 1. Summary
&gt;
&gt;    Moving IPv6 ORPorts from microdescs to the microdesc consensus will make
&gt;    it easier for IPv6 clients to bootstrap and select reachable guards.
&gt;
&gt;    Since consensus method 14, authorities have voted for IPv6 address/port
&gt;    pairs (ORPorts) in "a" lines. Unreachable IPv6 ORPorts are dropped from
&gt; the
&gt;    full consensus. But for clients that use microdescriptors (the default),
&gt;    IPv6 ORPorts are placed in microdescriptors. So these clients can only
&gt; tell
&gt;    if an IPv6 ORPort is unreachable when a majority of voting authorities
&gt;    mark the relay as not Running.
&gt;
&gt;    This proposal puts reachable relay IPv6 ORPorts in an "a" line in the
&gt;    microdesc consensus. This allows clients to discover unreachable IPv6
&gt;    ORPorts, even if a minority of voting authorities set
&gt;    AuthDirHasIPv6Connectivity 1.
&gt;

To me, this motivation makes a little less sense than the bootstrapping
improvements in 4.3 do.  Don't get me wrong: it's cool that we can get IPv6
online-ness detection "for free" on existing clients... but there are other
ways we could IPv6 online-status advertising too (like a status flag, or
conditionally omitting "a" lines from microdescriptors, or something else).

But the bootstrapping considerations discussed in 4.3 below are something
we really _can't_ do without moving the "a" lines into the consensus.  So
to my mind, that's the major reason we should do this.


&gt; 2. Proposal
&gt;
&gt;    We add two new consensus methods, here represented as M and N (M &lt; N),
&gt; to
&gt;    be allocated when this proposal's implementation is merged. These
&gt; consensus
&gt;    methods move IPv6 ORPorts from microdescs to the microdesc consensus.
&gt;
&gt;    We use two different methods because this allows us to modify client
&gt; code
&gt;    based on each method. Also, if a bug is discovered in one of the
&gt; methods,
&gt;    authorities can be patched to stop voting for it, and then we can
&gt; implement
&gt;    a fix in a later method.
&gt;
&gt; 2.1. Add Reachable IPv6 ORPorts to the Microdesc Consensus
&gt;
&gt;    We specify that microdescriptor consensuses created with methods M or
&gt; later
&gt;    contain reachable IPv6 ORPorts.
&gt;
&gt; 2.2. Remove IPv6 ORPorts from Microdescriptors
&gt;
&gt;    We specify that microdescriptors created with methods N or later do not
&gt;    contain any IPv6 ORPorts.
&gt;

Let's say that with method N, we start omitting them.  Let's not say that
we commit to omitting them forever.  Perhaps we will someday have a reason
to put more "a" lines in microdescriptors again.



&gt; 3. Retaining Existing Behaviour
&gt;
&gt;    The following existing behaviour will be retained:
&gt;
&gt; 3.1. Authority IPv6 Reachability
&gt;
&gt;    Only authorities configured with AuthDirHasIPv6Connectivity 1 will test
&gt;    IPv6 ORPort reachability, and vote for IPv6 ORPorts.
&gt;
&gt;    This means that:
&gt;    * if no voting authorities set AuthDirHasIPv6Connectivity 1, there will
&gt; be
&gt;      no IPv6 ORPorts in the consensus,
&gt;    * if a minority of voting authorities set AuthDirHasIPv6Connectivity 1,
&gt;      unreachable IPv6 ORPort lines will be dropped from the consensus, but
&gt; the
&gt;      relay will still be listed as Running,
&gt;    * if a majority of voting authorities set AuthDirHasIPv6Connectivity 1,
&gt;      relays with unreachable IPv6 ORPorts will be dropped from the
&gt; consensus.
&gt;
&gt;    We will document this behaviour in the tor manual page, see #23870.


So, there's an alternative here: we could let the HasIPV6 authorities vote
on a flag to indicate "reachable/unreachable with IPv6," and let all the
authorities vote on the "a" lines.  Then, in the consensus, we could omit
the "a" lines unless  the router has the reachable-with-ipv6 flag; and
include them otherwise.

This way, we wouldn't need to have a majority of IPv6 authorities in order
to have meaningful "a" lines that tell you whether the router is
reachable.  (But of course, the more we had, the more reliable the
information would be.)

This change could be done as part of consensus method M, I think.  Do you
think it's worthwhile?


&gt; 3.2. Full Consensus IPv6 ORPorts
&gt;
&gt;    The full consensus will continue to contain reachable IPv6 ORPorts.
&gt;

By "full" consensus, do you mean "NS" consensus?  I don't think we use
"full" elsewhere.


&gt; 3.3. Clients that use Full Descriptors
&gt;
&gt;    Tor clients that use full descriptors already ignore unreachable IPv6
&gt;    ORPorts, and have done so since at least 0.2.8.x.
&gt;

Wow. I'd forgotten this.  How does this work?


&gt; 4. Impact and Related Changes
&gt;
&gt; 4.1. Directory Authority Configuration
&gt;
&gt;    We will work to get a super-majority (75%) of authorities checking relay
&gt;    IPv6 reachability, to avoid Running-flag flapping. To do this,
&gt; authorities
&gt;    need to get IPv6 connectivity, and set AuthDirHasIPv6Connectivity 1.
&gt;

How far away are we from this today?  How long do the authority operators
think it would take?


&gt; 4.2. Relays and Bridges
&gt;
&gt;    Tor relays and bridges do not currently use IPv6 ORPorts from the
&gt;    consensus.
&gt;
&gt;    We expect that 2/3 of authorities will be voting for consensus method N
&gt;    before future Tor relay or bridge versions use IPv6 ORPorts from the
&gt;    consensus.
&gt;
&gt; 4.3. Clients
&gt;
&gt; 4.3.1. Legacy Clients
&gt;
&gt; 4.3.1.1. IPv6 ORPort Circuits
&gt;
&gt;    Tor clients on versions 0.2.8.x to 0.3.2.x check directory documents for
&gt;    ORPorts in the following order:
&gt;      * descriptors (routerinfo, available if using bridges or full
&gt; descriptors)
&gt;      * consensus (routerstatus)
&gt;      * microdescriptors (IPv6 ORPorts only)
&gt;
&gt;    Their behaviour will be identical to the current behaviour for consensus
&gt;    methods M and earlier. When consensus method N is used, they will ignore
&gt;    unreachable IPv6 ORPorts without any code changes.
&gt;
&gt; 4.3.1.2. IPv6 ORPort Bootstrap
&gt;
&gt;    Tor clients on versions 0.2.8.x and 0.2.9.x are currently unable to
&gt;    bootstrap over IPv6 only connections when using microdescriptors. This
&gt;    happens because the microdesc consensus does not contain IPv6 ORPorts.
&gt;
&gt;    When consensus method M is used, they will be able to bootstrap over
&gt; IPv6
&gt;    only connections using microdescriptors, without any code changes.
&gt;

(How does the behavior of 0.3.0.x and onward differ here?)


&gt; 4.3.2. Future Clients
&gt;
&gt; 4.3.2.1. Ignoring IPv6 ORPorts in Microdescs
&gt;
&gt;    Tor clients on versions 0.3.3.x and later will ignore unreachable IPv6
&gt;    ORPorts once consensus method M or later is in use. (See #23827.)
&gt;
&gt; 4.3.2.2. IPv6 ORPort Bootstrap
&gt;
&gt;    If a bootstrapping IPv6-only client has a consensus made with method M
&gt; or
&gt;    later, it should download microdescriptors from one of the IPv6 ORPorts
&gt; in
&gt;    that consensus. Previously, IPv6-only clients would use fallback
&gt; directory
&gt;    mirrors to download microdescs, because there were no IPv6 ORPorts in
&gt; the
&gt;    microdesc consensus. (See #23827.)
&gt;
&gt; 4.3.2.3. Ignoring Addresses in Unused Directory Documents
&gt;
&gt;    If a client doesn't use a particular directory document type for a node,
&gt;    it should ignore any addresses in that document type. (See #23975.)
&gt;
&gt; 5. Data Size
&gt;
&gt;    This change removes 2-50 bytes from the microdescriptors of relays that
&gt;    have an IPv6 ORPort, and adds them to reachable IPv6 relays' microdesc
&gt;    consensus entries.
&gt;
&gt;    As of October 2017, 600 relays (9%) have IPv6 ORPorts in the full
&gt;    consensus. Their "a" lines take up 19 KB, or 33 bytes each on average.
&gt;    The microdesc consensus is 1981 KB, so this represents about 1% of its
&gt;    uncompressed size.
&gt;
&gt;    Most tor clients are already running 0.3.1.7, which implements consensus
&gt;    diffs. We expect that most directory mirrors will also implement
&gt; consensus
&gt;    diffs by the time 2/3 of authorities are voting for consensus method M.
&gt;
&gt;    So we expect that this change will have a minimal impact, which is made
&gt;    even smaller by compression and consensus diffs.
&gt;

Let's look at a worst-case analysis, though. How would the impact be if
100% of the relays had IPv6 ORPorts?  I'm not very interested in the
uncompressed size; it's the gzip-compressed size that determines the
worst-case impact.


&gt; 6. External Impacts
&gt;
&gt;    We don't expect this change to impact Onionoo and similar projects,
&gt; because
&gt;    they typically use the full consensus.
&gt;
&gt;    Metrics doesn't currently graph IPv6 usage in Tor, but would like to in
&gt;    future.
&gt;
&gt;
&gt; --
&gt; Tim / teor
&gt;
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, Oct \
24, 2017 at 11:35 PM, teor &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi all,&lt;br&gt; &lt;br&gt;
We would like to move IPv6 ORPorts from microdescriptors to the&lt;br&gt;
microdesc consensus. This makes it easier for IPv6 clients to bootstrap&lt;br&gt;
and choose reachable guards.&lt;br&gt;
&lt;br&gt;
The proposal is inlined below, it is also available with the corresponding&lt;br&gt;
dir-spec updates in my torspec branch bug23826-23828 on GitHub:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://github.com/teor2345/torspec.git" rel="noreferrer" \
target="_blank"&gt;https://github.com/teor2345/&lt;wbr&gt;torspec.git&lt;/a&gt;&lt;br&gt; &lt;br&gt;
The tor code that implements these new consensus methods is in my tor&lt;br&gt;
branch on bug23826-23828 on GitHub:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://github.com/teor2345/tor.git" rel="noreferrer" \
target="_blank"&gt;https://github.com/teor2345/&lt;wbr&gt;tor.git&lt;/a&gt;&lt;br&gt; &lt;br&gt;
The parent ticket for these related changes is #20916. The code changes are&lt;br&gt;
being tracked in #23826 and #23828, and the spec changes and proposal in&lt;br&gt;
#23898:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/ticket/20916" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/ticket/20916&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; If we've spoken about this, and I've left you out as an author, please \
let&lt;br&gt; me know!&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi, Tim!   I \
promised you a quick review   here, so here goes.   I have some questions, but \
nothing looks like a showstopper here.&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; Here is the proposal text:&lt;br&gt;
&lt;br&gt;
Filename: xxx-ipv6-in-micro-consensus.&lt;wbr&gt;txt&lt;br&gt;
Title: Move IPv6 ORPorts from microdescriptors to the microdesc consensus&lt;br&gt;
Author: Tim Wilson-Brown (teor)&lt;br&gt;
Created: 18-Oct-2017&lt;br&gt;
Status: Open&lt;br&gt;
Target: 0.3.3.x&lt;br&gt;
&lt;br&gt;
1. Summary&lt;br&gt;
&lt;br&gt;
     Moving IPv6 ORPorts from microdescs to the microdesc consensus will make&lt;br&gt;
     it easier for IPv6 clients to bootstrap and select reachable guards.&lt;br&gt;
&lt;br&gt;
     Since consensus method 14, authorities have voted for IPv6 address/port&lt;br&gt;
     pairs (ORPorts) in "a" lines. Unreachable IPv6 ORPorts are dropped \
                from the&lt;br&gt;
     full consensus. But for clients that use microdescriptors (the default),&lt;br&gt;
     IPv6 ORPorts are placed in microdescriptors. So these clients can only tell&lt;br&gt;
     if an IPv6 ORPort is unreachable when a majority of voting authorities&lt;br&gt;
     mark the relay as not Running.&lt;br&gt;
&lt;br&gt;
     This proposal puts reachable relay IPv6 ORPorts in an "a" line in \
                the&lt;br&gt;
     microdesc consensus. This allows clients to discover unreachable IPv6&lt;br&gt;
     ORPorts, even if a minority of voting authorities set&lt;br&gt;
     AuthDirHasIPv6Connectivity 1.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To me, this \
motivation makes a little less sense than the bootstrapping improvements in 4.3 do.   \
Don't get me wrong: it's cool that we can get IPv6 online-ness detection \
"for free" on existing clients... but there are other ways we could IPv6 \
online-status advertising too (like a status flag, or conditionally omitting \
"a" lines from microdescriptors, or something \
else).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But the bootstrapping considerations discussed in 4.3 \
below are something we really _can't_ do without moving the "a" lines \
into the consensus.   So to my mind, that's the major reason we should do \
this.&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; 2. Proposal&lt;br&gt;
&lt;br&gt;
     We add two new consensus methods, here represented as M and N (M &lt; N), to&lt;br&gt;
     be allocated when this proposal's implementation is merged. These \
                consensus&lt;br&gt;
     methods move IPv6 ORPorts from microdescs to the microdesc consensus.&lt;br&gt;
&lt;br&gt;
     We use two different methods because this allows us to modify client code&lt;br&gt;
     based on each method. Also, if a bug is discovered in one of the methods,&lt;br&gt;
     authorities can be patched to stop voting for it, and then we can implement&lt;br&gt;
     a fix in a later method.&lt;br&gt;
&lt;br&gt;
2.1. Add Reachable IPv6 ORPorts to the Microdesc Consensus&lt;br&gt;
&lt;br&gt;
     We specify that microdescriptor consensuses created with methods M or later&lt;br&gt;
     contain reachable IPv6 ORPorts.&lt;br&gt;
&lt;br&gt;
2.2. Remove IPv6 ORPorts from Microdescriptors&lt;br&gt;
&lt;br&gt;
     We specify that microdescriptors created with methods N or later do not&lt;br&gt;
     contain any IPv6 ORPorts.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's say that \
with method N, we start omitting them.   Let's not say that we commit to omitting \
them forever.   Perhaps we will someday have a reason to put more "a" lines \
in microdescriptors again.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; 3. Retaining Existing Behaviour&lt;br&gt;
&lt;br&gt;
     The following existing behaviour will be retained:&lt;br&gt;
&lt;br&gt;
3.1. Authority IPv6 Reachability&lt;br&gt;
&lt;br&gt;
     Only authorities configured with AuthDirHasIPv6Connectivity 1 will test&lt;br&gt;
     IPv6 ORPort reachability, and vote for IPv6 ORPorts.&lt;br&gt;
&lt;br&gt;
     This means that:&lt;br&gt;
     * if no voting authorities set AuthDirHasIPv6Connectivity 1, there will be&lt;br&gt;
        no IPv6 ORPorts in the consensus,&lt;br&gt;
     * if a minority of voting authorities set AuthDirHasIPv6Connectivity 1,&lt;br&gt;
        unreachable IPv6 ORPort lines will be dropped from the consensus, but the&lt;br&gt;
        relay will still be listed as Running,&lt;br&gt;
     * if a majority of voting authorities set AuthDirHasIPv6Connectivity 1,&lt;br&gt;
        relays with unreachable IPv6 ORPorts will be dropped from the consensus.&lt;br&gt;
&lt;br&gt;
     We will document this behaviour in the tor manual page, see \
#23870.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, there's an alternative here: we could \
let the HasIPV6 authorities vote on a flag to indicate "reachable/unreachable \
with IPv6," and let all the authorities vote on the "a" lines.   Then, \
in the consensus, we could omit the "a" lines unless   the router has the \
reachable-with-ipv6 flag; and include them otherwise.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This \
way, we wouldn't need to have a majority of IPv6 authorities in order to have \
meaningful "a" lines that tell you whether the router is reachable.   (But \
of course, the more we had, the more reliable the information would \
be.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This change could be done as part of consensus method \
M, I think.   Do you think it's worthwhile?&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; 3.2. Full Consensus IPv6 ORPorts&lt;br&gt;
&lt;br&gt;
     The full consensus will continue to contain reachable IPv6 \
ORPorts.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;By "full" consensus, do you \
mean "NS" consensus?   I don't think we use "full" \
elsewhere.&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; 3.3. Clients that use Full \
Descriptors&lt;br&gt; &lt;br&gt;
     Tor clients that use full descriptors already ignore unreachable IPv6&lt;br&gt;
     ORPorts, and have done so since at least \
0.2.8.x.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Wow. I'd forgotten this.   How does \
this work?&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; 4. Impact and Related Changes&lt;br&gt;
&lt;br&gt;
4.1. Directory Authority Configuration&lt;br&gt;
&lt;br&gt;
     We will work to get a super-majority (75%) of authorities checking relay&lt;br&gt;
     IPv6 reachability, to avoid Running-flag flapping. To do this, authorities&lt;br&gt;
     need to get IPv6 connectivity, and set AuthDirHasIPv6Connectivity \
1.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How far away are we from this today?   How \
long do the authority operators think it would take?&lt;/div&gt;&lt;div&gt;  \
&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt; 4.2. Relays and Bridges&lt;br&gt;
&lt;br&gt;
     Tor relays and bridges do not currently use IPv6 ORPorts from the&lt;br&gt;
     consensus.&lt;br&gt;
&lt;br&gt;
     We expect that 2/3 of authorities will be voting for consensus method N&lt;br&gt;
     before future Tor relay or bridge versions use IPv6 ORPorts from the&lt;br&gt;
     consensus.&lt;br&gt;
&lt;br&gt;
4.3. Clients&lt;br&gt;
&lt;br&gt;
4.3.1. Legacy Clients&lt;br&gt;
&lt;br&gt;
4.3.1.1. IPv6 ORPort Circuits&lt;br&gt;
&lt;br&gt;
     Tor clients on versions 0.2.8.x to 0.3.2.x check directory documents for&lt;br&gt;
     ORPorts in the following order:&lt;br&gt;
        * descriptors (routerinfo, available if using bridges or full \
                descriptors)&lt;br&gt;
        * consensus (routerstatus)&lt;br&gt;
        * microdescriptors (IPv6 ORPorts only)&lt;br&gt;
&lt;br&gt;
     Their behaviour will be identical to the current behaviour for consensus&lt;br&gt;
     methods M and earlier. When consensus method N is used, they will ignore&lt;br&gt;
     unreachable IPv6 ORPorts without any code changes.&lt;br&gt;
&lt;br&gt;
4.3.1.2. IPv6 ORPort Bootstrap&lt;br&gt;
&lt;br&gt;
     Tor clients on versions 0.2.8.x and 0.2.9.x are currently unable to&lt;br&gt;
     bootstrap over IPv6 only connections when using microdescriptors. This&lt;br&gt;
     happens because the microdesc consensus does not contain IPv6 ORPorts.&lt;br&gt;
&lt;br&gt;
     When consensus method M is used, they will be able to bootstrap over IPv6&lt;br&gt;
     only connections using microdescriptors, without any code \
changes.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(How does the behavior of 0.3.0.x and \
onward differ here?)&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; 4.3.2. Future \
Clients&lt;br&gt; &lt;br&gt;
4.3.2.1. Ignoring IPv6 ORPorts in Microdescs&lt;br&gt;
&lt;br&gt;
     Tor clients on versions 0.3.3.x and later will ignore unreachable IPv6&lt;br&gt;
     ORPorts once consensus method M or later is in use. (See #23827.)&lt;br&gt;
&lt;br&gt;
4.3.2.2. IPv6 ORPort Bootstrap&lt;br&gt;
&lt;br&gt;
     If a bootstrapping IPv6-only client has a consensus made with method M or&lt;br&gt;
     later, it should download microdescriptors from one of the IPv6 ORPorts in&lt;br&gt;
     that consensus. Previously, IPv6-only clients would use fallback directory&lt;br&gt;
     mirrors to download microdescs, because there were no IPv6 ORPorts in the&lt;br&gt;
     microdesc consensus. (See #23827.)&lt;br&gt;
&lt;br&gt;
4.3.2.3. Ignoring Addresses in Unused Directory Documents&lt;br&gt;
&lt;br&gt;
     If a client doesn't use a particular directory document type for a node,&lt;br&gt;
     it should ignore any addresses in that document type. (See #23975.)&lt;br&gt;
&lt;br&gt;
5. Data Size&lt;br&gt;
&lt;br&gt;
     This change removes 2-50 bytes from the microdescriptors of relays that&lt;br&gt;
     have an IPv6 ORPort, and adds them to reachable IPv6 relays' microdesc&lt;br&gt;
     consensus entries.&lt;br&gt;
&lt;br&gt;
     As of October 2017, 600 relays (9%) have IPv6 ORPorts in the full&lt;br&gt;
     consensus. Their "a" lines take up 19 KB, or 33 bytes each on \
                average.&lt;br&gt;
     The microdesc consensus is 1981 KB, so this represents about 1% of its&lt;br&gt;
     uncompressed size.&lt;br&gt;
&lt;br&gt;
     Most tor clients are already running 0.3.1.7, which implements consensus&lt;br&gt;
     diffs. We expect that most directory mirrors will also implement consensus&lt;br&gt;
     diffs by the time 2/3 of authorities are voting for consensus method M.&lt;br&gt;
&lt;br&gt;
     So we expect that this change will have a minimal impact, which is made&lt;br&gt;
     even smaller by compression and consensus \
diffs.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's look at a worst-case analysis, \
though. How would the impact be if 100% of the relays had IPv6 ORPorts?   I'm not \
very interested in the uncompressed size; it's the gzip-compressed size that \
determines the worst-case impact.&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; 6. External Impacts&lt;br&gt;
&lt;br&gt;
     We don't expect this change to impact Onionoo and similar projects, \
because&lt;br&gt;  they typically use the full consensus.&lt;br&gt;
&lt;br&gt;
     Metrics doesn't currently graph IPv6 usage in Tor, but would like to in&lt;br&gt;
     future.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Tim / teor&lt;br&gt;
&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171117202900</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-11-17 20:29:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; Hello everyone,
&gt; 
&gt; we, the Tor Metrics Team, have finished writing our roadmap for the 12
&gt; months between October 2017 and September 2018:
&gt; 
&gt; https://trac.torproject.org/projects/tor/raw-attachment/wiki/org/teams/MetricsTeam/metrics-team-roadmap-2017-11-17.pdf
&gt;  
&gt; https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam#RoadmapfromOctober2017toSeptember2018
&gt;  
&gt; In the process of writing this roadmap we incorporated feedback from
&gt; various people in the Tor community, including suggestions made on this
&gt; list.
&gt; 
&gt; And if something didn't make it on this year's roadmap, we made a note
&gt; to reconsider in about a year from now.

Hm. There are teams like the Tor Browser people who are doing roadmaps
only from dev meeting to dev meeting, meaning for 6 months. Actually,
that 6 months or dev-meeting to dev-meeting roadmapping is exactly what
Isabela said we (should) do in
https://lists.torproject.org/pipermail/tor-project/2017-November/001564.html:

"""
- Next Tor Meeting is arriving, we do the balance of what we have
finished, what we will carry on and start selecting tasks for the next
roadmap we will be building at the next Tor Meeting.
"""

So I wonder how this fits into your model. I am especially concerned
about stuff that comes up at the next dev meeting that would be a
concern for the metrics team as it seems to me, reading what you wrote
above, that it would not be considered for the roadmap for the current
year but rather would have to wait for the year thereafter.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171117205132</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-11-17 20:51:32-0400</timestampReceived><subject>Re: [tor-dev] Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-11-17 21:29, Georg Koppen wrote:
&gt; Karsten Loesing:
&gt; &gt; Hello everyone,
&gt; &gt; 
&gt; &gt; we, the Tor Metrics Team, have finished writing our roadmap for the 12
&gt; &gt; months between October 2017 and September 2018:
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/raw-attachment/wiki/org/teams/MetricsTeam/metrics-team-roadmap-2017-11-17.pdf
&gt; &gt;  
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam#RoadmapfromOctober2017toSeptember2018
&gt; &gt;  
&gt; &gt; In the process of writing this roadmap we incorporated feedback from
&gt; &gt; various people in the Tor community, including suggestions made on this
&gt; &gt; list.
&gt; &gt; 
&gt; &gt; And if something didn't make it on this year's roadmap, we made a note
&gt; &gt; to reconsider in about a year from now.
&gt; 
&gt; Hm. There are teams like the Tor Browser people who are doing roadmaps
&gt; only from dev meeting to dev meeting, meaning for 6 months. Actually,
&gt; that 6 months or dev-meeting to dev-meeting roadmapping is exactly what
&gt; Isabela said we (should) do in
&gt; https://lists.torproject.org/pipermail/tor-project/2017-November/001564.html:
&gt; 
&gt; """
&gt; - Next Tor Meeting is arriving, we do the balance of what we have
&gt; finished, what we will carry on and start selecting tasks for the next
&gt; roadmap we will be building at the next Tor Meeting.
&gt; """
&gt; 
&gt; So I wonder how this fits into your model. I am especially concerned
&gt; about stuff that comes up at the next dev meeting that would be a
&gt; concern for the metrics team as it seems to me, reading what you wrote
&gt; above, that it would not be considered for the roadmap for the current
&gt; year but rather would have to wait for the year thereafter.

I'm optimistic that we'd be able (and willing!) to make room for such needs.

I just said (or meant to say) that we included some, but not all
suggestions we received over the past few weeks, and that we're going to
reconsider adding the ones we did not include now in next year's roadmap.

Note that we picked 12 months as timeframe, not 6, because that seemed
to make more sense at the time we started writing this roadmap in
September 2017. The idea was to generate input for the fundraising team,
and my understanding was that a 6 month timeframe wouldn't be enough for
that.

Hope this makes sense.

&gt; Georg

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171112195657</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-11-12 19:56:57-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

On Mon, Oct 30, 2017 at 03:57:04PM -0400, David Goulet wrote:
&gt; 2. DESTROY cells handling
&gt; ·
&gt; Within a circuitmux object, there is a "destroy cell queue" on which a DESTROY
&gt; cell is put in for one of the circuit on the cmux. An important thing for tor
&gt; is that when it needs to send a DESTROY, it needs to _stop_ sending any queued
&gt; cell on that circuit, dump them and only send the DESTROY cell.

Careful! I think this might be the opposite of what it needs to do.

If Tor wants to tear down a circuit, in normal circumstances it ought
to finish flushing the currently queued cells first. If it discards
the queued cells and only sends the destroy cell, then we end up with
missing data.

&gt; Second, because of this concept of different queue for the DESTROY cell, tor
&gt; will back and forth between that queue and the normal queue of a circuit.
&gt; Remember, that the destroy queue is *not* per circuit but per circuitmux. This
&gt; is used by the "cmux-&gt;last_cell_was_destroy" which is set to 1 if the last cell
&gt; the cmux handled was a DESTROY or 0 if not.

Yes, this part is definitely a mess.

I think we need to invent and design a better way to handle destroys --
getting the abstraction layer right between the "control" cells and the
"data" cells is definitely a hard problem, especially when both kinds
of cells end up being sent through the same mechanism.

&gt; * I believe now that we should seriously discuss the relevance of channels.
&gt;   Originally, the idea was good that is providing an abstraction layer for the
&gt;   relay to relay handshake and send/process cells related to the protocol. But,
&gt;   as of now, they are half doing it.

I am not opposed to ripping out the channel abstraction.

You make a good case that it was never completed, and now it will be
harder to complete since it's been so long (and the person who designed
and built it won't be completing it). Also, if we are hoping to modularize
the Tor architecture to prepare it for component-by-component transitions
to Rust or some other language, then simplifying first is a good move.

I guess the other option is to keep it limping along and make a plan to
fix it and move to the right abstraction levels. That option would be best
if we have a particular new channel in mind that we want to add -- such
as the switch to udp transport that various research papers have proposed.

At least last I checked though, udp transport implies user-space tcp
which is not a practical thing at our scale.

All of this said though, Nick is the Chief Architect, so I will defer
to his judgment on which approach will get us a great fast stable Tor
in the long term.

&gt; * In the short term, we should get rid of Vanilla scheduler because it
&gt;   complefixies a lot the scheduler code by adding uneeded things to channel_t
&gt;   but also bloated the scheduler interface with pointless function pointers for
&gt;   instance. And in my opinion, it is not helping performance the way it is done
&gt;   right now.

Getting rid of the Vanilla scheduler is fine with me. I imagine the Kist
plan was to leave the Vanilla scheduler in place so there's something
to fall back to in case of bugs or design surprises. It might be wisest
to leave it in during 0.3.2, so Kist can stabilize, and plan to take it
out during 0.3.3 or 0.3.4 if Kist continues looking good.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171112210743</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-12 21:07:43-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>


On 13 Nov 2017, at 06:56, Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt;&gt; On Mon, Oct 30, 2017 at 03:57:04PM -0400, David Goulet wrote:
&gt;&gt; 2. DESTROY cells handling
&gt;&gt;  ·
&gt;&gt; Within a circuitmux object, there is a "destroy cell queue" on which a DESTROY
&gt;&gt; cell is put in for one of the circuit on the cmux. An important thing for tor
&gt;&gt; is that when it needs to send a DESTROY, it needs to _stop_ sending any queued
&gt;&gt; cell on that circuit, dump them and only send the DESTROY cell.
&gt; 
&gt; Careful! I think this might be the opposite of what it needs to do.
&gt; 
&gt; If Tor wants to tear down a circuit, in normal circumstances it ought
&gt; to finish flushing the currently queued cells first. If it discards
&gt; the queued cells and only sends the destroy cell, then we end up with
&gt; missing data.

Sending a DESTROY cell after dropping data still tears down a circuit, but
(depending on the sender's position in the circuit) it tears it down with a digest
error. Which is probably not what we want.

That said, there may be no way to tell if the application-level data is complete
or not, so an error teardown may be appropriate.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171113160612</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-11-13 16:06:12-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Nov (14:56:57), Roger Dingledine wrote:
&gt; On Mon, Oct 30, 2017 at 03:57:04PM -0400, David Goulet wrote:
&gt; &gt; 2. DESTROY cells handling
&gt; &gt;·
&gt; &gt; Within a circuitmux object, there is a "destroy cell queue" on which a DESTROY
&gt; &gt; cell is put in for one of the circuit on the cmux. An important thing for tor
&gt; &gt; is that when it needs to send a DESTROY, it needs to _stop_ sending any queued
&gt; &gt; cell on that circuit, dump them and only send the DESTROY cell.
&gt; 
&gt; Careful! I think this might be the opposite of what it needs to do.
&gt; 
&gt; If Tor wants to tear down a circuit, in normal circumstances it ought
&gt; to finish flushing the currently queued cells first. If it discards
&gt; the queued cells and only sends the destroy cell, then we end up with
&gt; missing data.

This is *exactly* that Tor does right now, it clears the circuit queue
immediately when it is ready to send the DESTROY cell.

You (others) might want to double check that but hints (notice the clear cell
queue):

circuit_about_to_free():
    if (circ-&gt;n_chan) {
		circuit_clear_cell_queue(circ, circ-&gt;n_chan);
		/* Only send destroy if the channel isn't closing anyway */
		if (!CHANNEL_CONDEMNED(circ-&gt;n_chan)) {
			channel_send_destroy(circ-&gt;n_circ_id, circ-&gt;n_chan, reason);
		}

connection_edge_process_relay_cell():
	Look for channel_send_destroy(), you'll notice a clear queue before.

Still bad... ?

&gt; 
&gt; &gt; Second, because of this concept of different queue for the DESTROY cell, tor
&gt; &gt; will back and forth between that queue and the normal queue of a circuit.
&gt; &gt; Remember, that the destroy queue is *not* per circuit but per circuitmux. This
&gt; &gt; is used by the "cmux-&gt;last_cell_was_destroy" which is set to 1 if the last cell
&gt; &gt; the cmux handled was a DESTROY or 0 if not.
&gt; 
&gt; Yes, this part is definitely a mess.
&gt; 
&gt; I think we need to invent and design a better way to handle destroys --
&gt; getting the abstraction layer right between the "control" cells and the
&gt; "data" cells is definitely a hard problem, especially when both kinds
&gt; of cells end up being sent through the same mechanism.

Right. It is also unclear to me how much it will affect tor if we simply put
the DESTROY cell on the circuit queue and let the scheduler take care of it...
I would say we could have some cases where it will take a bit more time than
right now to send the DESTROY.

(Right now, it is sent right away bypassing the scheduler.)

&gt; 
&gt; &gt; * I believe now that we should seriously discuss the relevance of channels.
&gt; &gt;   Originally, the idea was good that is providing an abstraction layer for the
&gt; &gt;   relay to relay handshake and send/process cells related to the protocol. But,
&gt; &gt;   as of now, they are half doing it.
&gt; 
&gt; I am not opposed to ripping out the channel abstraction.
&gt; 
&gt; You make a good case that it was never completed, and now it will be
&gt; harder to complete since it's been so long (and the person who designed
&gt; and built it won't be completing it). Also, if we are hoping to modularize
&gt; the Tor architecture to prepare it for component-by-component transitions
&gt; to Rust or some other language, then simplifying first is a good move.
&gt; 
&gt; I guess the other option is to keep it limping along and make a plan to
&gt; fix it and move to the right abstraction levels. That option would be best
&gt; if we have a particular new channel in mind that we want to add -- such
&gt; as the switch to udp transport that various research papers have proposed.

Right so UDP, see earlier post in the thread with Ian, has nothing to do with
channels :). It has to do with TLS cells.

&gt; 
&gt; At least last I checked though, udp transport implies user-space tcp
&gt; which is not a practical thing at our scale.
&gt; 
&gt; All of this said though, Nick is the Chief Architect, so I will defer
&gt; to his judgment on which approach will get us a great fast stable Tor
&gt; in the long term.
&gt; 
&gt; &gt; * In the short term, we should get rid of Vanilla scheduler because it
&gt; &gt;   complefixies a lot the scheduler code by adding uneeded things to channel_t
&gt; &gt;   but also bloated the scheduler interface with pointless function pointers for
&gt; &gt;   instance. And in my opinion, it is not helping performance the way it is done
&gt; &gt;   right now.
&gt; 
&gt; Getting rid of the Vanilla scheduler is fine with me. I imagine the Kist
&gt; plan was to leave the Vanilla scheduler in place so there's something
&gt; to fall back to in case of bugs or design surprises. It might be wisest
&gt; to leave it in during 0.3.2, so Kist can stabilize, and plan to take it
&gt; out during 0.3.3 or 0.3.4 if Kist continues looking good.

Agree.

Thanks!
David

&gt; 
&gt; --Roger
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
M72MGWsMq9KJ+hYLXg8sXrwfexA4QUqnNwWVOMxVBvM=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171115184954</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-11-15 18:49:54-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/alternative)]


On Mon, Oct 30, 2017 at 3:57 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:

&gt; Hello everyone!
&gt;
&gt; DISCLAIMER: The following is enormous and tries to describe in some level
&gt; of
&gt; details the situation in tor with connection&lt;-&gt;channel&lt;-&gt;scheduler. This
&gt; comes
&gt; after we've merged the KIST scheduler, we've realized many things we'ren't
&gt; what
&gt; they were suppose to be or meant for. In the end, I'm asking questions so
&gt; we
&gt; can move forward with development and fixing things.
&gt;
&gt; Last thing before you start your journey in the depth of Tor, the 3
&gt; subsystems
&gt; I'm going to talk about and how they interact are kind of very complicated
&gt; so
&gt; it is very possible that I might have gotten things wrong or miss some
&gt; details.
&gt; Please, point them out so we can better document, better be informed and
&gt; make
&gt; good decisions. I plan to document as much as I can from this process for
&gt; a new
&gt; file in torguts.git repository.
&gt;
&gt;
Snipping the analysis, and going straight to the conclusions.  I'll leave
one sentence in the analysis because it's such a great summary:



&gt; Many things are problematic currently


They sure are. :)

== Part Four - The Conclusion ==
&gt;
&gt; Through this epic journey, we've discovered some issues as well as design
&gt; problems. Now the question is what should and can do about it?
&gt;
&gt; In a nutshell, there are a couple of questions we should ask our selfves
&gt; and
&gt; try to answer so we can move forward:
&gt;
&gt; * I believe now that we should seriously discuss the relevance of channels.
&gt;   Originally, the idea was good that is providing an abstraction layer for
&gt; the
&gt;   relay to relay handshake and send/process cells related to the protocol.
&gt; But,
&gt;   as of now, they are half doing it.
&gt;
&gt;   There is an important cost in code and maintanance of something that is
&gt; not
&gt;   properly implemented/finished (channel abstraction) and also something
&gt; that
&gt;   is unused. An abstraction implemented only for one thing is not really
&gt; useful
&gt;   except maybe to offer an example for others? But we aren't providing a
&gt; good
&gt;   example right now imo...
&gt;
&gt;   That being said, we can spend time fixing the channel subsystem, trying
&gt; to
&gt;   turn it in a nicer interface, fixing all the issues I've described above
&gt; (and
&gt;   I suspect there might be more) so the cell scheduler can play nicely with
&gt;   channels. Or, we could rip them off eliminating lots of code and
&gt; reducing our
&gt;   technical debt. I would like us to think about what we want seriously
&gt; because
&gt;   that channel subsystem is _complicated_ and very few of us fully
&gt; understands
&gt;   it afaict.
&gt;
&gt;   Which would bring us back to (which is btw basically what we have now
&gt;   considering the channel queues are useless):
&gt;
&gt;     conn inbuf -&gt; circ queue -&gt; conn outbuf
&gt;
&gt;   If we don't want to get rid of channel, the fixes are non trivial. For
&gt;   starter, we have to decide if we want to keep the channel queue or not
&gt; and if
&gt;   yes, we need to almost start from square 1 in terms of testing because we
&gt;   would basically introduce a new layer of queuing cells.
&gt;

So, this is the question I'm least sure about. Please take the following as
tentative.

I think that the two choices ("refactor channels" and "rip out channels")
may be less different than we think. Neither one is going to be trivial to
do, and we shouldn't assume that sticking everything together into one big
type will actually make the code _simpler_.

The way I think about the code right now, "channel" is an interface which
"connection_or" implements, and there is no meaningful barrier between
connection_or and channeltls.  I _do_ like the idea of keeping some kind of
abstraction barrier, though: a "channel" is "whatever we can send and
receive cells from", whereas an "or_connection" has a lot of other baggage
that comes with it.

From my POV, we *should* definitely abolish the channels' queues, and
minimize the amount of logic that channels do on their own. I'm not sure if
we should rip them out entirely, or just simplify them a lot. I don't think
either necessarily simpler or less bug-prone than the other.

Perhaps we should sketch out what the new interface would look like?  Or
maybe do an hour or two worth of exploratory hacking on each approach?

(This reminds me of another change I want someday, which is splitting
edge_connection_t into an "edge_connection" type that implements a "stream"
interface: right now, we have quite a few streams that aren't actually edge
connections, but which use the type anyway.)

* Dealing with the DESTROY cell design issue will require a bit more tricky
&gt;   work I think. We must not starve circuit with a DESTROY cell pending to
&gt; be
&gt;   sent else the other side keeps sending data. But we should also not
&gt; starve
&gt;   all the circuits because if we ever need to send a gazillion DESTROY
&gt; cell in
&gt;   priority, we'll make the relay useless (DoS vector).
&gt;
&gt;   The question is, do we trust our EWMA policy to be wise enough to pick
&gt; the
&gt;   circuit in a reasonable amount of time so we can flush the DESTROY cell
&gt; from
&gt;   the circuit queue? Or we really need to bypass or prioritize somehow that
&gt;   cell in order to send them asap in order to avoid load on the network
&gt; because
&gt;   the other side of the circuit is still sending?
&gt;

So, elsewhere in the thread, folks have been discussing whether a circuit
that's going to send a DESTROY cell should flush its pending cells first.

The answer is sadly, "it depends".

Case 1: Suppose Alice is downloading a webpage.  Suppose we are the middle
relay and we lose our connection to the exit.  It would be nice to keep
flushing the data we have towards Alice -- maybe.  If she can use partial
data.  But any data that Alice sends to us would be lost, so it would be
good if we had some way to tell Alice "stop sending please".

Case 2: Suppose Alice is uploading something to a webserver. Suppose we are
the middle relay and we lose our connection from Alice. In this case,
there's no point in sending any more data towards the webserver before we
send it a DESTROY cell.  (Even if Alice was in the middle of a big upload,
she'll need to repeat any part of it that wasn't ACKed, since she won't
know what was received and what wasn't.)

Case 3: Suppose we hit our OOM killer.  In this case, we had better discard
all the data on the circuit we're killing, or we're vulnerable to "sniper
attacks" again.

So it's clear that sometimes we should dump the data, and sometimes we
shouldn't.  I think this is an independent question from what we're asking
here.  (My own take is that solving case 1 right requires "RELAY_TRUNCATED"
cells, which I believe we don't implement today.)

What we're asking here is: how can we reintegrate DESTROY cells with the
rest of the scheduler logic?

I think that, from a priority POV, DESTROY cells are in a certain sense the
_opposite_ of traffic, and we might actually want to treat them differently
from data cells.  Consider that if we have a choice between DESTROYing a
busy circuit or a quiet one, we will save more bandwidth by destroying the
busy circuit first, so that no more data is sent to us over it.

On the other hand, this doesn't mean that the FIFO structure we have today
is a good idea at all.  It probably makes sense to use the same priority
queue-based scheduler thing that we use everywhere else, but possibly with
a different (inverted??) priority parameter for destroyed circuits.

One more thing to be aware of: the destroy_cell_queue exists in part
because we tear down circuits at the same time that we queue their destroy
cells.  If we changed Tor so that "destroyed" circuits were kept around
somehow until their cells could be sent, then we'd be introducing a new
state to our state machine, to represent circuits that were schedulable but
not actually usable for traffic.  We'd need to be careful to handle that
correctly: this kind of "unusable object that still exists" has caused us
problems before.   (The solution I like best for avoiding this confusion is
to make it so the scheduler can schedule two types of "schedule-able"
things: circuits, and "pending destroy cells".)



&gt; * In the short term, we should get rid of Vanilla scheduler because it
&gt;   complefixies a lot the scheduler code by adding uneeded things to
&gt; channel_t
&gt;   but also bloated the scheduler interface with pointless function
&gt; pointers for
&gt;   instance. And in my opinion, it is not helping performance the way it is
&gt; done
&gt;   right now.
&gt;

I agree with Roger here: it's fine to throw away the vanilla scheduler, but
we should wait until KIST has been running unproblematically in a stable
release for a while.  0.3.4 seems like a good time for this.

-- 
Nick

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Oct \
30, 2017 at 3:57 PM, David Goulet &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:dgoulet@ev0ke.net" target="_blank"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Hello everyone!&lt;br&gt; \
                &lt;br&gt;
DISCLAIMER: The following is enormous and tries to describe in some level of&lt;br&gt;
details the situation in tor with connection&lt;-&gt;channel&lt;-&gt;&lt;wbr&gt;scheduler. \
This comes&lt;br&gt; after we've merged the KIST scheduler, we've realized many \
things we'ren't what&lt;br&gt; they were suppose to be or meant for. In the end, \
I'm asking questions so we&lt;br&gt; can move forward with development and fixing \
things.&lt;br&gt; &lt;br&gt;
Last thing before you start your journey in the depth of Tor, the 3 subsystems&lt;br&gt;
I'm going to talk about and how they interact are kind of very complicated so&lt;br&gt;
it is very possible that I might have gotten things wrong or miss some details.&lt;br&gt;
Please, point them out so we can better document, better be informed and make&lt;br&gt;
good decisions. I plan to document as much as I can from this process for a new&lt;br&gt;
file in torguts.git repository.&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Snipping the \
analysis, and going straight to the conclusions.   I'll leave one sentence in the \
analysis because it's such a great summary:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
solid rgb(204,204,204);padding-left:1ex"&gt; Many things are problematic \
currently&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;They sure are. \
:)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; == Part Four - The \
Conclusion ==&lt;br&gt; &lt;br&gt;
Through this epic journey, we've discovered some issues as well as design&lt;br&gt;
problems. Now the question is what should and can do about it?&lt;br&gt;
&lt;br&gt;
In a nutshell, there are a couple of questions we should ask our selfves and&lt;br&gt;
try to answer so we can move forward:&lt;br&gt;
&lt;br&gt;
* I believe now that we should seriously discuss the relevance of channels.&lt;br&gt;
   Originally, the idea was good that is providing an abstraction layer for the&lt;br&gt;
   relay to relay handshake and send/process cells related to the protocol. But,&lt;br&gt;
   as of now, they are half doing it.&lt;br&gt;
&lt;br&gt;
   There is an important cost in code and maintanance of something that is not&lt;br&gt;
   properly implemented/finished (channel abstraction) and also something that&lt;br&gt;
   is unused. An abstraction implemented only for one thing is not really useful&lt;br&gt;
   except maybe to offer an example for others? But we aren't providing a \
good&lt;br&gt;  example right now imo...&lt;br&gt;
&lt;br&gt;
   That being said, we can spend time fixing the channel subsystem, trying to&lt;br&gt;
   turn it in a nicer interface, fixing all the issues I've described above \
(and&lt;br&gt;  I suspect there might be more) so the cell scheduler can play nicely \
with&lt;br&gt;  channels. Or, we could rip them off eliminating lots of code and reducing \
our&lt;br&gt;  technical debt. I would like us to think about what we want seriously \
because&lt;br&gt;  that channel subsystem is _complicated_ and very few of us fully \
understands&lt;br&gt;  it afaict.&lt;br&gt;
&lt;br&gt;
   Which would bring us back to (which is btw basically what we have now&lt;br&gt;
   considering the channel queues are useless):&lt;br&gt;
&lt;br&gt;
      conn inbuf -&gt; circ queue -&gt; conn outbuf&lt;br&gt;
&lt;br&gt;
   If we don't want to get rid of channel, the fixes are non trivial. For&lt;br&gt;
   starter, we have to decide if we want to keep the channel queue or not and if&lt;br&gt;
   yes, we need to almost start from square 1 in terms of testing because we&lt;br&gt;
   would basically introduce a new layer of queuing \
cells.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, this is the question I'm least \
sure about. Please take the following as tentative.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think \
that the two choices ("refactor channels" and "rip out channels") \
may be less different than we think. Neither one is going to be trivial to do, and we \
shouldn't assume that sticking everything together into one big type will \
actually make the code _simpler_.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The way I think about the \
code right now, "channel" is an interface which "connection_or" \
implements, and there is no meaningful barrier between connection_or and channeltls.  \
I _do_ like the idea of keeping some kind of abstraction barrier, though: a \
"channel" is "whatever we can send and receive cells from", \
whereas an "or_connection" has a lot of other baggage that comes with \
it.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;From my POV, we *should* definitely abolish the \
channels' queues, and   minimize the amount of logic that channels do on their \
own. I'm not sure if we should rip them out entirely, or just simplify them a \
lot. I don't think either necessarily simpler or less bug-prone than the \
other.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Perhaps we should sketch out what the new \
interface would look like?   Or maybe do an hour or two worth of exploratory hacking \
on each approach?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(This reminds me of another change I want \
someday, which is splitting edge_connection_t into an "edge_connection" \
type that implements a "stream" interface: right now, we have quite a few \
streams that aren't actually edge connections, but which use the type anyway.)  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
                0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;
* Dealing with the DESTROY cell design issue will require a bit more tricky&lt;br&gt;
   work I think. We must not starve circuit with a DESTROY cell pending to be&lt;br&gt;
   sent else the other side keeps sending data. But we should also not starve&lt;br&gt;
   all the circuits because if we ever need to send a gazillion DESTROY cell in&lt;br&gt;
   priority, we'll make the relay useless (DoS vector).&lt;br&gt;
&lt;br&gt;
   The question is, do we trust our EWMA policy to be wise enough to pick the&lt;br&gt;
   circuit in a reasonable amount of time so we can flush the DESTROY cell from&lt;br&gt;
   the circuit queue? Or we really need to bypass or prioritize somehow that&lt;br&gt;
   cell in order to send them asap in order to avoid load on the network because&lt;br&gt;
   the other side of the circuit is still \
sending?&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, elsewhere in the thread, folks have \
been discussing whether a circuit that's going to send a DESTROY cell should \
flush its pending cells first.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The answer is sadly, \
"it depends".    &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Case 1: Suppose Alice is \
downloading a webpage.   Suppose we are the middle relay and we lose our connection \
to the exit.   It would be nice to keep flushing the data we have towards Alice -- \
maybe.   If she can use partial data.   But any data that Alice sends to us would be \
lost, so it would be good if we had some way to tell Alice "stop sending \
please".&lt;/div&gt;&lt;div&gt;&lt;br class="gmail-Apple-interchange-newline"&gt;Case 2: Suppose \
Alice is uploading something to a webserver. Suppose we are the middle relay and we \
lose our connection from Alice. In this case, there's no point in sending any \
more data towards the webserver before we send it a DESTROY cell.   (Even if Alice \
was in the middle of a big upload, she'll need to repeat any part of it that \
wasn't ACKed, since she won't know what was received and what \
wasn't.)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Case 3: Suppose we hit our OOM killer.   In \
this case, we had better discard all the data on the circuit we're killing, or \
we're vulnerable to "sniper attacks" again.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So \
it's clear that sometimes we should dump the data, and sometimes we \
shouldn't.   I think this is an independent question from what we're asking \
here.   (My own take is that solving case 1 right requires \
"RELAY_TRUNCATED" cells, which I believe we don't implement \
today.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What we're asking here is: how can we \
reintegrate DESTROY cells with the rest of the scheduler \
logic?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think that, from a priority POV, DESTROY cells are \
in a certain sense the _opposite_ of traffic, and we might actually want to treat \
them differently from data cells.   Consider that if we have a choice between \
DESTROYing a busy circuit or a quiet one, we will save more bandwidth by destroying \
the busy circuit first, so that no more data is sent to us over \
it.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On the other hand, this doesn't mean that the \
FIFO structure we have today is a good idea at all.   It probably makes sense to use \
the same priority queue-based scheduler thing that we use everywhere else, but \
possibly with a different (inverted??) priority parameter for destroyed \
circuits.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One more thing to be aware of: the \
destroy_cell_queue exists in part because we tear down circuits at the same time that \
we queue their destroy cells.   If we changed Tor so that "destroyed" \
circuits were kept around somehow until their cells could be sent, then we'd be \
introducing a new state to our state machine, to represent circuits that were \
schedulable but not actually usable for traffic.   We'd need to be careful to \
handle that correctly: this kind of "unusable object that still exists" has \
caused us problems before.     (The solution I like best for avoiding this confusion \
is to make it so the scheduler can schedule two types of "schedule-able" \
things: circuits, and "pending destroy cells".)  &lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px \
                solid rgb(204,204,204);padding-left:1ex"&gt;
* In the short term, we should get rid of Vanilla scheduler because it&lt;br&gt;
   complefixies a lot the scheduler code by adding uneeded things to channel_t&lt;br&gt;
   but also bloated the scheduler interface with pointless function pointers for&lt;br&gt;
   instance. And in my opinion, it is not helping performance the way it is done&lt;br&gt;
   right now.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;  &lt;/div&gt;&lt;div&gt;I agree with Roger here: it's \
fine to throw away the vanilla scheduler, but we should wait until KIST has been \
running unproblematically in a stable release for a while.   0.3.4 seems like a good \
time for this.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--  &lt;/div&gt;&lt;div&gt;Nick&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171116135659</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-11-16 13:56:59-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


On 15 Nov (13:49:54), Nick Mathewson wrote:
&gt; On Mon, Oct 30, 2017 at 3:57 PM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:

[snip]

&gt; &gt;
&gt; &gt; Through this epic journey, we've discovered some issues as well as design
&gt; &gt; problems. Now the question is what should and can do about it?
&gt; &gt;
&gt; &gt; In a nutshell, there are a couple of questions we should ask our selfves
&gt; &gt; and try to answer so we can move forward:
&gt; &gt;
&gt; &gt; * I believe now that we should seriously discuss the relevance of
&gt; &gt; channels.  Originally, the idea was good that is providing an abstraction
&gt; &gt; layer for the relay to relay handshake and send/process cells related to
&gt; &gt; the protocol.  But, as of now, they are half doing it.
&gt; &gt;
&gt; &gt;   There is an important cost in code and maintanance of something that is
&gt; &gt;   not properly implemented/finished (channel abstraction) and also
&gt; &gt;   something that is unused. An abstraction implemented only for one thing
&gt; &gt;   is not really useful except maybe to offer an example for others? But we
&gt; &gt;   aren't providing a good example right now imo...
&gt; &gt;
&gt; &gt;   That being said, we can spend time fixing the channel subsystem, trying
&gt; &gt;   to turn it in a nicer interface, fixing all the issues I've described
&gt; &gt;   above (and I suspect there might be more) so the cell scheduler can play
&gt; &gt;   nicely with channels. Or, we could rip them off eliminating lots of code
&gt; &gt;   and reducing our technical debt. I would like us to think about what we
&gt; &gt;   want seriously because that channel subsystem is _complicated_ and very
&gt; &gt;   few of us fully understands it afaict.
&gt; &gt;
&gt; &gt;   Which would bring us back to (which is btw basically what we have now
&gt; &gt;   considering the channel queues are useless):
&gt; &gt;
&gt; &gt;     conn inbuf -&gt; circ queue -&gt; conn outbuf
&gt; &gt;
&gt; &gt;   If we don't want to get rid of channel, the fixes are non trivial. For
&gt; &gt;   starter, we have to decide if we want to keep the channel queue or not
&gt; &gt;   and if yes, we need to almost start from square 1 in terms of testing
&gt; &gt;   because we would basically introduce a new layer of queuing cells.
&gt; &gt;
&gt; 
&gt; So, this is the question I'm least sure about. Please take the following as
&gt; tentative.
&gt; 
&gt; I think that the two choices ("refactor channels" and "rip out channels")
&gt; may be less different than we think. Neither one is going to be trivial to
&gt; do, and we shouldn't assume that sticking everything together into one big
&gt; type will actually make the code _simpler_.
&gt; 
&gt; The way I think about the code right now, "channel" is an interface which
&gt; "connection_or" implements, and there is no meaningful barrier between
&gt; connection_or and channeltls.  I _do_ like the idea of keeping some kind of
&gt; abstraction barrier, though: a "channel" is "whatever we can send and
&gt; receive cells from", whereas an "or_connection" has a lot of other baggage
&gt; that comes with it.
&gt; 
&gt; From my POV, we *should* definitely abolish the channels' queues, and
&gt; minimize the amount of logic that channels do on their own. I'm not sure if
&gt; we should rip them out entirely, or just simplify them a lot. I don't think
&gt; either necessarily simpler or less bug-prone than the other.
&gt; 
&gt; Perhaps we should sketch out what the new interface would look like?  Or
&gt; maybe do an hour or two worth of exploratory hacking on each approach?

I tend to agree here with you. I did the exercise already to remove the
channel queues and I ran a relay for weeks on it without any apparent
problems. It removed 1000+ lines and made everything simpler.

So, I do think having the "channel" abstraction is good and both in terms of
future use of channels but also in terms of maintanability.

That being said, I think the next move for me will be to act on removing the
channel queues and try to decouple channeltls and connection_or so we can end
up with a real abstraction. Achieving this will provide us some more
encapsulation between subsystem and thus be able to provide strong guarantees
between them a.k.a between channel and scheduler.

I do think the current channel interface is "ok" for now but as we do this
exercise and refactoring, we'll discover more things which will just improve
the subsystem overall.

&gt; 
&gt; (This reminds me of another change I want someday, which is splitting
&gt; edge_connection_t into an "edge_connection" type that implements a "stream"
&gt; interface: right now, we have quite a few streams that aren't actually edge
&gt; connections, but which use the type anyway.)
&gt; 
&gt; * Dealing with the DESTROY cell design issue will require a bit more tricky
&gt; &gt;   work I think. We must not starve circuit with a DESTROY cell pending to
&gt; &gt;   be sent else the other side keeps sending data. But we should also not
&gt; &gt;   starve all the circuits because if we ever need to send a gazillion
&gt; &gt;   DESTROY cell in priority, we'll make the relay useless (DoS vector).
&gt; &gt;
&gt; &gt;   The question is, do we trust our EWMA policy to be wise enough to pick
&gt; &gt;   the circuit in a reasonable amount of time so we can flush the DESTROY
&gt; &gt;   cell from the circuit queue? Or we really need to bypass or prioritize
&gt; &gt;   somehow that cell in order to send them asap in order to avoid load on
&gt; &gt;   the network because the other side of the circuit is still sending?
&gt; &gt;
&gt; 
&gt; So, elsewhere in the thread, folks have been discussing whether a circuit
&gt; that's going to send a DESTROY cell should flush its pending cells first.
&gt; 
&gt; The answer is sadly, "it depends".
&gt; 
&gt; Case 1: Suppose Alice is downloading a webpage.  Suppose we are the middle
&gt; relay and we lose our connection to the exit.  It would be nice to keep
&gt; flushing the data we have towards Alice -- maybe.  If she can use partial
&gt; data.  But any data that Alice sends to us would be lost, so it would be
&gt; good if we had some way to tell Alice "stop sending please".
&gt; 
&gt; Case 2: Suppose Alice is uploading something to a webserver. Suppose we are
&gt; the middle relay and we lose our connection from Alice. In this case,
&gt; there's no point in sending any more data towards the webserver before we
&gt; send it a DESTROY cell.  (Even if Alice was in the middle of a big upload,
&gt; she'll need to repeat any part of it that wasn't ACKed, since she won't
&gt; know what was received and what wasn't.)
&gt; 
&gt; Case 3: Suppose we hit our OOM killer.  In this case, we had better discard
&gt; all the data on the circuit we're killing, or we're vulnerable to "sniper
&gt; attacks" again.
&gt; 
&gt; So it's clear that sometimes we should dump the data, and sometimes we
&gt; shouldn't.  I think this is an independent question from what we're asking
&gt; here.  (My own take is that solving case 1 right requires "RELAY_TRUNCATED"
&gt; cells, which I believe we don't implement today.)

For the record, right now in tor, whatever (1) or (2), when the middle relay
decides it needs to send a DESTROY, circuit queue are cleared (nothing is
sent) and a DESTROY is sent very fast.

&gt; 
&gt; What we're asking here is: how can we reintegrate DESTROY cells with the
&gt; rest of the scheduler logic?
&gt; 
&gt; I think that, from a priority POV, DESTROY cells are in a certain sense the
&gt; _opposite_ of traffic, and we might actually want to treat them differently
&gt; from data cells.  Consider that if we have a choice between DESTROYing a
&gt; busy circuit or a quiet one, we will save more bandwidth by destroying the
&gt; busy circuit first, so that no more data is sent to us over it.
&gt; 
&gt; On the other hand, this doesn't mean that the FIFO structure we have today
&gt; is a good idea at all.  It probably makes sense to use the same priority
&gt; queue-based scheduler thing that we use everywhere else, but possibly with
&gt; a different (inverted??) priority parameter for destroyed circuits.

(We kind of need the FIFO concept for cells afaict because of the parent
relationship between cells with their digest (à la git). And that is of course
per circuit.)

&gt; 
&gt; One more thing to be aware of: the destroy_cell_queue exists in part
&gt; because we tear down circuits at the same time that we queue their destroy
&gt; cells.  If we changed Tor so that "destroyed" circuits were kept around
&gt; somehow until their cells could be sent, then we'd be introducing a new
&gt; state to our state machine, to represent circuits that were schedulable but
&gt; not actually usable for traffic.  We'd need to be careful to handle that
&gt; correctly: this kind of "unusable object that still exists" has caused us
&gt; problems before.   (The solution I like best for avoiding this confusion is
&gt; to make it so the scheduler can schedule two types of "schedule-able"
&gt; things: circuits, and "pending destroy cells".)

After some thoughts, yes I do think you are right here. For the two reasons
you mentionned:

1. DESTROY cell needs to be considered differently in terms of priority
   depending on the scheduler. KIST for instance, we might think that we want
   to bypass the kernel limit and just dump it asap. But we would also need to
   select the active circuit using a different priority policy (inverted) as
   you suggested to prioritize busy circuit.

2. We can't keep circuit objects alive while we wait for the destroy cell, the
   logic inside tor might become complicated and kind of also opens a way for
   memory DoS if we ever have a DESTROY cell starvation problem in tor.

Then the problem becomes how do those two queues interact with each other
(normal and DESTROY cells). The issue at hands becomes possible starvation.

Right now, Tor does a back and forth between sending a DESTROY cell and a
normal cell (regardless of the circuit, actually never for the same circuit).
The destroy cell queue is a FIFO which is not ideal with what we've discussed
but overtime we'll make sure to avoid starvation because DESTROY cells aren't
picked by priority.

Thus, if the DESTROY queue becomes a priority queue, starvation becomes a
problem. And extra difficulty, the priority in the normal cell queue can't be
compared to the one of the destroy cell queue because the former evolves over
time and the later is frozen in time because the circuit simply doesn't exists
anymore. In other words, we can't consider the two queues' priorities within
the same policy.

One avenue of solution to this is having some sort of "throtlling" or a
"threshold" that the scheduller allows a queue to be emptied so the other
queue doesn't starve. Chances are that the threshold in our cases would be a
maximum number of cells before the destroy cell queue yields its time back to
the normal cell queue which also would need a threshold. And to be efficient
there, good chance that threshold would be adaptative of the load of the
relay.

All in all, this ain't an easy problem so simply switching the DESTROY cell
queue to a priority one will need important changes.

We are getting in the land of proposal so I'll stop for now, do some more
homework in the starvation problem in scheduling (vis-a-vis routing) and write
something up in a proposal so we can go from there. But at least now, we've
come up with some agreement and more data points on how DESTROY cells needs to
be handled in Tor.

&gt; 
&gt; &gt; * In the short term, we should get rid of Vanilla scheduler because it
&gt; &gt;   complefixies a lot the scheduler code by adding uneeded things to
&gt; &gt; channel_t
&gt; &gt;   but also bloated the scheduler interface with pointless function
&gt; &gt; pointers for
&gt; &gt;   instance. And in my opinion, it is not helping performance the way it is
&gt; &gt; done
&gt; &gt;   right now.
&gt; &gt;
&gt; 
&gt; I agree with Roger here: it's fine to throw away the vanilla scheduler, but
&gt; we should wait until KIST has been running unproblematically in a stable
&gt; release for a while.  0.3.4 seems like a good time for this.

Agree.

Thanks!
David

&gt; 
&gt; -- 
&gt; Nick

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
Y7bJ1MNf9h5n1CLO6oGz6GAWskRPqhTOELJMs7AdqGg=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171116140603</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-11-16 14:06:03-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

On Thu, Nov 16, 2017 at 8:56 AM, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt;
&gt; On 15 Nov (13:49:54), Nick Mathewson wrote:

 [...]
&gt;
&gt; &gt; On the other hand, this doesn't mean that the FIFO structure we have today
&gt; &gt; is a good idea at all.  It probably makes sense to use the same priority
&gt; &gt; queue-based scheduler thing that we use everywhere else, but possibly with
&gt; &gt; a different (inverted??) priority parameter for destroyed circuits.
&gt;
&gt; (We kind of need the FIFO concept for cells afaict because of the parent
&gt; relationship between cells with their digest (Ã  la git). And that is of course
&gt; per circuit.)
&gt;

Are you sure?  DESTROY cells aren't relay cells; they don't have relay
crypto done to them, and I think it's okay to re-order them with
respect to other cells.  I don't think they have a digest on them, do
they?

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171110215528</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-10 21:55:28-0400</timestampReceived><subject>Re: [tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Jonathan Marquardt transcribed 2.1K bytes:
&gt; On Fri, Nov 10, 2017 at 08:59:34AM +0000, ng0 wrote:
&gt; &gt; can one of the core developers tell me if there exists
&gt; &gt; a current summary of the design of Tor?
&gt; 
&gt; I'm not one of the core developers, but I know where the design documents are 
&gt; anyway:
&gt; 
&gt; https://www.torproject.org/docs/documentation.html.en#DesignDoc

Oh, obvious location. I have the specs git and the anonbib, so I
thought I had to skip through all of them to get some up to date
idea.

&gt; A good start would probably be to read the original design document from 2004

That's obvious, and goes without stating that I've read at least
this one before asking (and I didn't ask about old designs).

&gt; and after that the two "Eight key design changes" blog posts.

Okay, which year were they written in?

After sending this post I realized my sentence structure
suffered a bit of an early morning post. Maybe this is
a bit more precise (while still keeping it short):

  A summary of the currenty (late 2017) design of Tor,
  a reflection on past designs and why they were
  disregarded/changed,
  and where you are heading at the moment.


I'm used to websites and content you can display in the
webbrowser not being up to date all the time, and my
assumption was that I would have to dig through all
the papers and blog posts, meeting notes and come to
a conclusion on my own - or ask you to get some
insiders view on this.
-- 
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dl.n0.is/dist/keys/
  WWW: https://we.make.ritual.n0.is

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171110215817</emailId><senderName>ng0</senderName><senderEmail>ng0@infotropique.org</senderEmail><timestampReceived>2017-11-10 21:58:17-0400</timestampReceived><subject>Re: [tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

[Attachment #2 (multipart/signed)]


ng0 transcribed 3.2K bytes:
&gt; Hi,
&gt; 
&gt; Jonathan Marquardt transcribed 2.1K bytes:
&gt; &gt; On Fri, Nov 10, 2017 at 08:59:34AM +0000, ng0 wrote:
&gt; &gt; &gt; can one of the core developers tell me if there exists
&gt; &gt; &gt; a current summary of the design of Tor?
&gt; &gt; 
&gt; &gt; I'm not one of the core developers, but I know where the design documents are 
&gt; &gt; anyway:
&gt; &gt; 
&gt; &gt; https://www.torproject.org/docs/documentation.html.en#DesignDoc
&gt; 
&gt; Oh, obvious location. I have the specs git and the anonbib, so I
&gt; thought I had to skip through all of them to get some up to date
&gt; idea.
&gt; 
&gt; &gt; A good start would probably be to read the original design document from 2004
&gt; 
&gt; That's obvious, and goes without stating that I've read at least
&gt; this one before asking (and I didn't ask about old designs).
&gt; 
&gt; &gt; and after that the two "Eight key design changes" blog posts.
&gt; 
&gt; Okay, which year were they written in?

Nevermind the question on the blogposts, I've just read the
DesignDoc anchor.

&gt; After sending this post I realized my sentence structure
&gt; suffered a bit of an early morning post. Maybe this is
&gt; a bit more precise (while still keeping it short):
&gt; 
&gt;   A summary of the currenty (late 2017) design of Tor,
&gt;   a reflection on past designs and why they were
&gt;   disregarded/changed,
&gt;   and where you are heading at the moment.
&gt; 
&gt; 
&gt; I'm used to websites and content you can display in the
&gt; webbrowser not being up to date all the time, and my
&gt; assumption was that I would have to dig through all
&gt; the papers and blog posts, meeting notes and come to
&gt; a conclusion on my own - or ask you to get some
&gt; insiders view on this.
&gt; -- 
&gt; GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
&gt; GnuPG: https://dl.n0.is/dist/keys/
&gt;   WWW: https://we.make.ritual.n0.is



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
GnuPG: A88C8ADD129828D7EAC02E52E22F9BBFEE348588
GnuPG: https://dl.n0.is/dist/keys/
  WWW: https://we.make.ritual.n0.is

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171111023133</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-11-11 02:31:33-0400</timestampReceived><subject>Re: [tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

On Fri, Nov 10, 2017 at 09:55:28PM +0000, ng0 wrote:
&gt; &gt; and after that the two "Eight key design changes" blog posts.

Actually, there's a bonus third of those blog posts. I just added it to
https://www.torproject.org/docs/documentation.html.en#DesignDoc

&gt;   A summary of the currenty (late 2017) design of Tor,

Your best shot there is the specs:
https://spec.torproject.org/
https://gitweb.torproject.org/torspec.git/tree/

&gt;   a reflection on past designs and why they were
&gt;   disregarded/changed,

You might find the proposals useful here:
https://gitweb.torproject.org/torspec.git/tree/proposals

&gt;   and where you are heading at the moment.

And for this one you want a combination of current trac tickets, grouped
by milestone:
https://trac.torproject.org/projects/tor/report/12
and the roadmaps that they're talking about on tor-project:
https://lists.torproject.org/pipermail/tor-project/2017-November/001564.html

&gt; I'm used to websites and content you can display in the
&gt; webbrowser not being up to date all the time, and my
&gt; assumption was that I would have to dig through all
&gt; the papers and blog posts, meeting notes and come to
&gt; a conclusion on my own - or ask you to get some
&gt; insiders view on this.

There is for sure a lot in flux, as usual for moving projects.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171106154426</emailId><senderName>AntiTree</senderName><senderEmail>antitree@gmail.com</senderEmail><timestampReceived>2017-11-06 15:44:26-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/alternative)]


Hey David,

Are there any ways of revoking a service's key and should it be included as
a control port function? For example, in the case that the master key is
kept offline but the host and its descriptor signing key are compromised,
the box could be run for a period of time(?) until the keys expire and need
to be re-signed. That window could be forcefully closed remotely with a
revocation that reports that key as compromised. I don't know how big that
window is so I don't know how big of a risk it ends up being.

@

On Mon, Nov 6, 2017 at 9:59 AM David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:

&gt; Hi everyone,
&gt;
&gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; specification.
&gt;
&gt; The idea with this proposal is to _only_ extend the current commands and
&gt; events to v3. Nothing new is added. We can think of more things to add
&gt; after
&gt; but for now, I wanted a baseline to start with that is only extending what
&gt; exists.
&gt;
&gt; Any kind of feedbacks is welcome! :)
&gt;
&gt; Cheers!
&gt; David
&gt;
&gt; --
&gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hey David,  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Are there any ways of revoking a \
service's key and should it be included as a control port function? For example, \
in the case that the master key is kept offline but the host and its descriptor \
signing key are compromised, the box could be run for a period of time(?) until the \
keys expire and need to be re-signed. That window could be forcefully closed remotely \
with a revocation that reports that key as compromised. I don't know how big that \
window is so I don't know how big of a risk it ends up being.  \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon, \
Nov 6, 2017 at 9:59 AM David Goulet &lt;&lt;a \
href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi everyone,&lt;br&gt; &lt;br&gt;
Attached is the proposal draft for the hidden service v3 contro port&lt;br&gt;
specification.&lt;br&gt;
&lt;br&gt;
The idea with this proposal is to _only_ extend the current commands and&lt;br&gt;
events to v3. Nothing new is added. We can think of more things to add after&lt;br&gt;
but for now, I wanted a baseline to start with that is only extending what&lt;br&gt;
exists.&lt;br&gt;
&lt;br&gt;
Any kind of feedbacks is welcome! :)&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
David&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171106181518</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-11-06 18:15:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

Hi David, great proposal! Sorry I'm juggling too many things right now
to really really review it. Quick skim though looks great. One quick
thought is that the HS_DESC event has an optional positional argument
(DescriptorID). This is fine *but* I'd advise against it since it will
prevent you from ever adding more positional arguments in the future.
Making it a key=value argument instead sidesteps this.


On Mon, Nov 6, 2017 at 6:59 AM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; Hi everyone,
&gt;
&gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; specification.
&gt;
&gt; The idea with this proposal is to _only_ extend the current commands and
&gt; events to v3. Nothing new is added. We can think of more things to add after
&gt; but for now, I wanted a baseline to start with that is only extending what
&gt; exists.
&gt;
&gt; Any kind of feedbacks is welcome! :)
&gt;
&gt; Cheers!
&gt; David
&gt;
&gt; --
&gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171106183532</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-11-06 18:35:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

Hi David,

Overall looks good! A few comments inline:

&gt;      "onions/{current,detached}"
&gt;        No change. This command can support v3 hidden service without changes
&gt;        returning v3 address(es).

Does the control-spec need a note pointing out that you might get some
"longer" (v3) addresses?

&gt; 3.1.3. ADD_ONION
&gt;
&gt;    For this command to support version 3, new values are added but the syntax
&gt;    is unchanged:
&gt;
&gt;      "ADD_ONION" SP KeyType ":" KeyBlob
&gt;                  [SP "Flags=" Flag *("," Flag)]
&gt;                  1*(SP "Port=" VirtPort ["," Target])
&gt;                  *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF
&gt;
&gt;    New "KeyType" value to "ED25519-V3" which identifies the key type to be a
&gt;    v3 ed25519 key.
&gt;
&gt;    New "KeyBlob" value to support the new "ED25519-V3", if specified, will
&gt;    generate a new ed25519 private key.

This might need a couple more details; as-is ADD_ONION can take
"NEW:BEST" (which should now return a v3 service?) or "NEW:ED25519-V3"
for explicitly asking for a V3 key, or "ED25519-V3:&lt;56 base32 chars&gt;"
for adding an already-existing v3 service.

&gt;    Because client authentication is not yet implemented, the "ClientAuth"
&gt;    field is ignored as well as "Flags=BasicAuth".

I think these should generate a 500-level error (if used for a v3
service) instead of being ignored. That is, if you try to use auth with
v3, you get an error.

&gt;    For this event to support vesrion 3, one optional field and new
&gt;    values are added:

I echo Damian's comments on the positional-arg; making it [SP
"DescriptorID=" ] or similar (i.e. an optional kwarg) would mean easier
later extending and also it *should* then "just work" with most
controller libs already at least as far as parsing goes (because
controller libs in general have to accept new, unknown kwargs).


The rest all sounds good to me!

thanks,
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107171048</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-07 17:10:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 06 Nov (10:15:18), Damian Johnson wrote:
&gt; Hi David, great proposal! Sorry I'm juggling too many things right now
&gt; to really really review it. Quick skim though looks great. One quick
&gt; thought is that the HS_DESC event has an optional positional argument
&gt; (DescriptorID). This is fine *but* I'd advise against it since it will
&gt; prevent you from ever adding more positional arguments in the future.
&gt; Making it a key=value argument instead sidesteps this.

What do you propose exactly? I can't really change the "DescriptorID" to a
key=value format. So, you think I should just not extend that field and use a
new "key=value" for it?

Thanks!
David

&gt; 
&gt; 
&gt; On Mon, Nov 6, 2017 at 6:59 AM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; Hi everyone,
&gt; &gt;
&gt; &gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; &gt; specification.
&gt; &gt;
&gt; &gt; The idea with this proposal is to _only_ extend the current commands and
&gt; &gt; events to v3. Nothing new is added. We can think of more things to add after
&gt; &gt; but for now, I wanted a baseline to start with that is only extending what
&gt; &gt; exists.
&gt; &gt;
&gt; &gt; Any kind of feedbacks is welcome! :)
&gt; &gt;
&gt; &gt; Cheers!
&gt; &gt; David
&gt; &gt;
&gt; &gt; --
&gt; &gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171107172015</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-07 17:20:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 06 Nov (22:35:32), meejah wrote:
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt; 
&gt; Hi David,
&gt; 
&gt; Overall looks good! A few comments inline:
&gt; 
&gt; &gt;      "onions/{current,detached}"
&gt; &gt;        No change. This command can support v3 hidden service without changes
&gt; &gt;        returning v3 address(es).
&gt; 
&gt; Does the control-spec need a note pointing out that you might get some
&gt; "longer" (v3) addresses?

Yes, once this proposal is merged to control-spec.txt, it will mention it for
sure what to expect.

&gt; 
&gt; &gt; 3.1.3. ADD_ONION
&gt; &gt;
&gt; &gt;    For this command to support version 3, new values are added but the syntax
&gt; &gt;    is unchanged:
&gt; &gt;
&gt; &gt;      "ADD_ONION" SP KeyType ":" KeyBlob
&gt; &gt;                  [SP "Flags=" Flag *("," Flag)]
&gt; &gt;                  1*(SP "Port=" VirtPort ["," Target])
&gt; &gt;                  *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF
&gt; &gt;
&gt; &gt;    New "KeyType" value to "ED25519-V3" which identifies the key type to be a
&gt; &gt;    v3 ed25519 key.
&gt; &gt;
&gt; &gt;    New "KeyBlob" value to support the new "ED25519-V3", if specified, will
&gt; &gt;    generate a new ed25519 private key.
&gt; 
&gt; This might need a couple more details; as-is ADD_ONION can take
&gt; "NEW:BEST" (which should now return a v3 service?) or "NEW:ED25519-V3"
&gt; for explicitly asking for a V3 key, or "ED25519-V3:&lt;56 base32 chars&gt;"
&gt; for adding an already-existing v3 service.

Oh good point! I failed to notice that "RSA1024:&lt;key&gt;" was even possible.
Actually, it is not specified in the spec but the code expects this:

    "RSA1024:&lt;Base64 Blob&gt;" - Loading a pre-existing RSA1024 key.

Ok fun! I'll add this. Good catch! And control-spec.txt should be updated.

To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:

    "ED25519-V3:&lt;Base64 Blob&gt;"

... which contains the ed25519 private key.

&gt; 
&gt; &gt;    Because client authentication is not yet implemented, the "ClientAuth"
&gt; &gt;    field is ignored as well as "Flags=BasicAuth".
&gt; 
&gt; I think these should generate a 500-level error (if used for a v3
&gt; service) instead of being ignored. That is, if you try to use auth with
&gt; v3, you get an error.

Indeed.

I'm unsure between
    "512 Syntax error in command argument"

    "552 Unrecognized entity"
        [A configuration key, a stream ID, circuit ID, event,
         mentioned in the command did not actually exist.]

But overall yes!

&gt; 
&gt; &gt;    For this event to support vesrion 3, one optional field and new
&gt; &gt;    values are added:
&gt; 
&gt; I echo Damian's comments on the positional-arg; making it [SP
&gt; "DescriptorID=" ] or similar (i.e. an optional kwarg) would mean easier
&gt; later extending and also it *should* then "just work" with most
&gt; controller libs already at least as far as parsing goes (because
&gt; controller libs in general have to accept new, unknown kwargs).

See other thread about this.

Big thanks!
David

&gt; 
&gt; The rest all sounds good to me!
&gt; 
&gt; thanks,
&gt; meejah
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171107172233</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-07 17:22:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 06 Nov (15:44:26), AntiTree wrote:
&gt; Hey David,
&gt; 
&gt; Are there any ways of revoking a service's key and should it be included as
&gt; a control port function? For example, in the case that the master key is
&gt; kept offline but the host and its descriptor signing key are compromised,
&gt; the box could be run for a period of time(?) until the keys expire and need
&gt; to be re-signed. That window could be forcefully closed remotely with a
&gt; revocation that reports that key as compromised. I don't know how big that
&gt; window is so I don't know how big of a risk it ends up being.

To have a revocation system like that, we need some sort of mechanism that
remembers revoked keys at maybe the directory level of as a complete new
entity that keeps a registry of those.

We do not have a way to do that nor a proposal for it :S...

David

&gt; 
&gt; @
&gt; 
&gt; On Mon, Nov 6, 2017 at 9:59 AM David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt; &gt; Hi everyone,
&gt; &gt;
&gt; &gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; &gt; specification.
&gt; &gt;
&gt; &gt; The idea with this proposal is to _only_ extend the current commands and
&gt; &gt; events to v3. Nothing new is added. We can think of more things to add
&gt; &gt; after
&gt; &gt; but for now, I wanted a baseline to start with that is only extending what
&gt; &gt; exists.
&gt; &gt;
&gt; &gt; Any kind of feedbacks is welcome! :)
&gt; &gt;
&gt; &gt; Cheers!
&gt; &gt; David
&gt; &gt;
&gt; &gt; --
&gt; &gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171107174036</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-11-07 17:40:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

&gt; What do you propose exactly?

Hi David. What I mean is that having an optional positional field...

MyEvent Field1 Field2 [Field3] Key1=Value1

... means we cannot ever add more positional fields in the future. For
example...

MyEvent Field1 Field2 [Field3] [Field4] Key1=Value1

... would be ambiguous if the third field is Field3 or Field4 since
they're both optional. We also could not add new mandatory positional
fields...

MyEvent Field1 Field2 Field4 [Field3] Key1=Value1

... because it would be ambiguous if the third field was Field4 with a
new version of tor or Field3 with an old one.

&gt; I can't really change the "DescriptorID" to a
&gt; key=value format. So, you think I should just not extend that field and use a
&gt; new "key=value" for it?

Why not? Does the DescriptorID have equal signs in it? If so then you
could also make this be a mandatory positional field with a filler
value like 'none' if unavailable.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107174743</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-07 17:47:43-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 07 Nov (09:40:36), Damian Johnson wrote:
&gt; &gt; What do you propose exactly?
&gt; 
&gt; Hi David. What I mean is that having an optional positional field...
&gt; 
&gt; MyEvent Field1 Field2 [Field3] Key1=Value1
&gt; 
&gt; ... means we cannot ever add more positional fields in the future. For
&gt; example...
&gt; 
&gt; MyEvent Field1 Field2 [Field3] [Field4] Key1=Value1
&gt; 
&gt; ... would be ambiguous if the third field is Field3 or Field4 since
&gt; they're both optional. We also could not add new mandatory positional
&gt; fields...
&gt; 
&gt; MyEvent Field1 Field2 Field4 [Field3] Key1=Value1
&gt; 
&gt; ... because it would be ambiguous if the third field was Field4 with a
&gt; new version of tor or Field3 with an old one.
&gt; 
&gt; &gt; I can't really change the "DescriptorID" to a
&gt; &gt; key=value format. So, you think I should just not extend that field and use a
&gt; &gt; new "key=value" for it?
&gt; 
&gt; Why not? Does the DescriptorID have equal signs in it? If so then you
&gt; could also make this be a mandatory positional field with a filler
&gt; value like 'none' if unavailable.

Oh! I guess we aren't breaking backward compat. by changing DescriptorID field
because it is optional in the first place so all future version will simply
never use it and only use the new "DescriptorID=&lt;value&gt;" field instead.

Thanks!
David

&gt; 
&gt; Cheers! -Damian
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171107174821</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-11-07 17:48:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; Indeed.
&gt;
&gt; I'm unsure between
&gt;     "512 Syntax error in command argument"
&gt;
&gt;     "552 Unrecognized entity"
&gt;         [A configuration key, a stream ID, circuit ID, event,
&gt;          mentioned in the command did not actually exist.]
&gt;
&gt; But overall yes!

It looks like the previous code would have done a 512 (when ADD_ONION
existed but didn't support authentication yet) so that's probably good
here too.

...but, maybe "513 Unrecognized command argument" would be a good
candidate, too?

...or even a new one for this case (and future cases) of "recognized,
but not yet supported". "560 Not yet implemented" or similar?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107175411</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-11-07 17:54:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt; On 06 Nov (10:15:18), Damian Johnson wrote:

&gt;&gt; Hi David, great proposal! Sorry I'm juggling too many things right
&gt;&gt; now to really really review it. Quick skim though looks great. One
&gt;&gt; quick thought is that the HS_DESC event has an optional positional
&gt;&gt; argument (DescriptorID). This is fine *but* I'd advise against it
&gt;&gt; since it will prevent you from ever adding more positional arguments
&gt;&gt; in the future.  Making it a key=value argument instead sidesteps
&gt;&gt; this.

&gt; What do you propose exactly? I can't really change the "DescriptorID"
&gt; to a key=value format. So, you think I should just not extend that
&gt; field and use a new "key=value" for it?

Ahhh, I see what you mean: DescriptorID is *already* in the spec for
HS_DESC as an (optional) positional argument -- you're just extending it
to accept possibly more characters?

So, yes, just making it "possibly bigger" is fine IMO. In other words,
we've already baked into the spec the thing Damian doesn't want (an
optional positional arg) so there's not really any way out of that.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107175802</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-11-07 17:58:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt;&gt; What do you propose exactly?
&gt;
&gt; Hi David. What I mean is that having an optional positional field...

I think the missing fact here is that there is *already* the
DescriptorID field and it's already optional (in the current
control-spec).

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107194331</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-07 19:43:31-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 07 Nov (12:47:43), David Goulet wrote:
&gt; On 07 Nov (09:40:36), Damian Johnson wrote:
&gt; &gt; &gt; What do you propose exactly?
&gt; &gt; 
&gt; &gt; Hi David. What I mean is that having an optional positional field...
&gt; &gt; 
&gt; &gt; MyEvent Field1 Field2 [Field3] Key1=Value1
&gt; &gt; 
&gt; &gt; ... means we cannot ever add more positional fields in the future. For
&gt; &gt; example...
&gt; &gt; 
&gt; &gt; MyEvent Field1 Field2 [Field3] [Field4] Key1=Value1
&gt; &gt; 
&gt; &gt; ... would be ambiguous if the third field is Field3 or Field4 since
&gt; &gt; they're both optional. We also could not add new mandatory positional
&gt; &gt; fields...
&gt; &gt; 
&gt; &gt; MyEvent Field1 Field2 Field4 [Field3] Key1=Value1
&gt; &gt; 
&gt; &gt; ... because it would be ambiguous if the third field was Field4 with a
&gt; &gt; new version of tor or Field3 with an old one.
&gt; &gt; 
&gt; &gt; &gt; I can't really change the "DescriptorID" to a
&gt; &gt; &gt; key=value format. So, you think I should just not extend that field and use a
&gt; &gt; &gt; new "key=value" for it?
&gt; &gt; 
&gt; &gt; Why not? Does the DescriptorID have equal signs in it? If so then you
&gt; &gt; could also make this be a mandatory positional field with a filler
&gt; &gt; value like 'none' if unavailable.
&gt; 
&gt; Oh! I guess we aren't breaking backward compat. by changing DescriptorID field
&gt; because it is optional in the first place so all future version will simply
&gt; never use it and only use the new "DescriptorID=&lt;value&gt;" field instead.

Not entirely true actually, if we do that, the old Stem won't be able to
pickup the descriptor ID from new Tor... So how do you suggest to proceed with
backward compat? Just a new field like "DESCRIPTOR_ID=" and we leave the
"DescriptorID" in duplicating the information for v2 descriptors? Kinda seems
weird.

David

&gt; 
&gt; Thanks!
&gt; David
&gt; 
&gt; &gt; 
&gt; &gt; Cheers! -Damian
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; -- 
&gt; 1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
1ThD0Y7lJWfAN3qxos27iPGUdHQS5sZ4kMwlov3un5k=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171107195925</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-11-07 19:59:25-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

&gt; Not entirely true actually, if we do that, the old Stem won't be able to
&gt; pickup the descriptor ID from new Tor... So how do you suggest to proceed with
&gt; backward compat? Just a new field like "DESCRIPTOR_ID=" and we leave the
&gt; "DescriptorID" in duplicating the information for v2 descriptors? Kinda seems
&gt; weird.

Hi David. Meejah was right that there seems to be a misunderstanding
here. I only commented about it because the DESCRIPTOR_ID was part of
your proposal. If it's just citing an existing part of the spec then
no worries. :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171109045021</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-11-09 04:50:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

David Goulet &lt;dgoulet@ev0ke.net&gt; writes:

&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt;
&gt;     "ED25519-V3:&lt;Base64 Blob&gt;"
&gt;
&gt; ... which contains the ed25519 private key.

Maybe it's too late, but it would be nice if the hs_ed25519_secret_key
file was encoded in base64 as well (instead of binary) to facilitate
copying them (if, e.g. you're upgrading from an on-disk v3 service to an
ADD_ONION v3 service)

cheers,

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171109091001</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-09 09:10:01-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

On 8 Nov 2017, at 04:20, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:

&gt;&gt;&gt; 3.1.3. ADD_ONION
&gt;&gt;&gt; 
&gt;&gt;&gt;   For this command to support version 3, new values are added but the syntax
&gt;&gt;&gt;   is unchanged:
&gt;&gt;&gt; 
&gt;&gt;&gt;     "ADD_ONION" SP KeyType ":" KeyBlob
&gt;&gt;&gt;                 [SP "Flags=" Flag *("," Flag)]
&gt;&gt;&gt;                 1*(SP "Port=" VirtPort ["," Target])
&gt;&gt;&gt;                 *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF
&gt;&gt;&gt; 
&gt;&gt;&gt;   New "KeyType" value to "ED25519-V3" which identifies the key type to be a
&gt;&gt;&gt;   v3 ed25519 key.
&gt;&gt;&gt; 
&gt;&gt;&gt;   New "KeyBlob" value to support the new "ED25519-V3", if specified, will
&gt;&gt;&gt;   generate a new ed25519 private key.
&gt;&gt; 
&gt;&gt; This might need a couple more details; as-is ADD_ONION can take
&gt;&gt; "NEW:BEST" (which should now return a v3 service?)

When we change the default HiddenServiceVersion to 3, then let's make
BEST return a v3 service. Until then, let's make it v2.

I think it would be a good idea to be consistent like this.

T

&gt;&gt; or "NEW:ED25519-V3"
&gt;&gt; for explicitly asking for a V3 key, or "ED25519-V3:&lt;56 base32 chars&gt;"
&gt;&gt; for adding an already-existing v3 service.
&gt; 
&gt; Oh good point! I failed to notice that "RSA1024:&lt;key&gt;" was even possible.
&gt; Actually, it is not specified in the spec but the code expects this:
&gt; 
&gt;    "RSA1024:&lt;Base64 Blob&gt;" - Loading a pre-existing RSA1024 key.
&gt; 
&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be updated.
&gt; 
&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; 
&gt;    "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; 
&gt; ... which contains the ed25519 private key.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171109092715</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-11-09 09:27:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 7 Nov 2017 12:20:15 -0500
David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; This might need a couple more details; as-is ADD_ONION can take
&gt; &gt; "NEW:BEST" (which should now return a v3 service?) or
&gt; &gt; "NEW:ED25519-V3" for explicitly asking for a V3 key, or
&gt; &gt; "ED25519-V3:&lt;56 base32 chars&gt;" for adding an already-existing v3
&gt; &gt; service.  
&gt; 
&gt; Oh good point! I failed to notice that "RSA1024:&lt;key&gt;" was even
&gt; possible. Actually, it is not specified in the spec but the code
&gt; expects this:
&gt; 
&gt;     "RSA1024:&lt;Base64 Blob&gt;" - Loading a pre-existing RSA1024 key.

Huh?  It *is* specified, both as "intentionally opaque" and as a
detailed explanation of what the code actually expects, like thus:

  (The KeyBlob format is left intentionally opaque, however for
  "RSA1024" keys it is currently the Base64 encoded DER representation
  of a PKCS#1 RSAPrivateKey, with all newlines removed.)

&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt; updated.
&gt; 
&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; 
&gt;     "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; 
&gt; ... which contains the ed25519 private key.

If it were up to me, I'd spec the blob as opaque, and then actually use
something that's sensible and consistent with the torrc and on disk
files for easy interoperability like Base64 of the private key (I
haven't check to see what encoding is used for on disk EdDSA keys, I
assume PEM).

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171109151345</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-11-09 15:13:45-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 09 Nov (09:27:15), Yawning Angel wrote:
&gt; On Tue, 7 Nov 2017 12:20:15 -0500
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; &gt; This might need a couple more details; as-is ADD_ONION can take
&gt; &gt; &gt; "NEW:BEST" (which should now return a v3 service?) or
&gt; &gt; &gt; "NEW:ED25519-V3" for explicitly asking for a V3 key, or
&gt; &gt; &gt; "ED25519-V3:&lt;56 base32 chars&gt;" for adding an already-existing v3
&gt; &gt; &gt; service.  
&gt; &gt; 
&gt; &gt; Oh good point! I failed to notice that "RSA1024:&lt;key&gt;" was even
&gt; &gt; possible. Actually, it is not specified in the spec but the code
&gt; &gt; expects this:
&gt; &gt; 
&gt; &gt;     "RSA1024:&lt;Base64 Blob&gt;" - Loading a pre-existing RSA1024 key.
&gt; 
&gt; Huh?  It *is* specified, both as "intentionally opaque" and as a
&gt; detailed explanation of what the code actually expects, like thus:
&gt; 
&gt;   (The KeyBlob format is left intentionally opaque, however for
&gt;   "RSA1024" keys it is currently the Base64 encoded DER representation
&gt;   of a PKCS#1 RSAPrivateKey, with all newlines removed.)

Oh I didn't spot that far away from the "KeyBlob" :).

&gt; 
&gt; &gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt; &gt; updated.
&gt; &gt; 
&gt; &gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; &gt; 
&gt; &gt;     "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; &gt; 
&gt; &gt; ... which contains the ed25519 private key.
&gt; 
&gt; If it were up to me, I'd spec the blob as opaque, and then actually use
&gt; something that's sensible and consistent with the torrc and on disk
&gt; files for easy interoperability like Base64 of the private key (I
&gt; haven't check to see what encoding is used for on disk EdDSA keys, I
&gt; assume PEM).

Unfortunately not, it is custom to tor I believe with this 32 bytes header:

    "== ed25519v1-secret: type0 ==\0\0\0"

... followed by the private key (64 bytes). See
crypto_write_tagged_contents_to_file().

Not sure we can change that within the 032 freeze. So the approach would be to
Base64 the raw bytes of the key (excluding the header). Using tor HS key file,
it would be something like:

    $ tail -c+33 hs_ed25519_secret_key | base64 -w 0

Considering the current situation with the encoded file on disk of the key, I
think this is kind of the simplest approach?

Cheers!
David

&gt; 
&gt; Regards,
&gt; 
&gt; -- 
&gt; Yawning Angel



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
jwMAzSbdAk2gz6mB7hJP3u/fieOzZS9dPqwPXXmyVoc=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171109161702</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-11-09 16:17:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, 9 Nov 2017 10:13:45 -0500
David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; &gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt; &gt; &gt; updated.
&gt; &gt; &gt; 
&gt; &gt; &gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; &gt; &gt; 
&gt; &gt; &gt;     "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; &gt; &gt; 
&gt; &gt; &gt; ... which contains the ed25519 private key.  
&gt; &gt; 
&gt; &gt; If it were up to me, I'd spec the blob as opaque, and then actually
&gt; &gt; use something that's sensible and consistent with the torrc and on
&gt; &gt; disk files for easy interoperability like Base64 of the private key
&gt; &gt; (I haven't check to see what encoding is used for on disk EdDSA
&gt; &gt; keys, I assume PEM).  
&gt; 
&gt; Unfortunately not, it is custom to tor I believe with this 32 bytes
&gt; header:
&gt; 
&gt;     "== ed25519v1-secret: type0 ==\0\0\0"
&gt; 
&gt; ... followed by the private key (64 bytes). See
&gt; crypto_write_tagged_contents_to_file().
&gt; 
&gt; Not sure we can change that within the 032 freeze. So the approach
&gt; would be to Base64 the raw bytes of the key (excluding the header).
&gt; Using tor HS key file, it would be something like:
&gt; 
&gt;     $ tail -c+33 hs_ed25519_secret_key | base64 -w 0
&gt; 
&gt; Considering the current situation with the encoded file on disk of
&gt; the key, I think this is kind of the simplest approach?

Yeah.  Just the Base64ed private key (excluding that header and things)
seems reasonable.

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171109170655</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-09 17:06:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 10 Nov 2017, at 03:17, Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt; 
&gt; On Thu, 9 Nov 2017 10:13:45 -0500
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt;&gt;&gt;&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt;&gt;&gt;&gt; updated.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;    "ED25519-V3:&lt;Base64 Blob&gt;"
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; ... which contains the ed25519 private key.  
&gt;&gt;&gt; 
&gt;&gt;&gt; If it were up to me, I'd spec the blob as opaque, and then actually
&gt;&gt;&gt; use something that's sensible and consistent with the torrc and on
&gt;&gt;&gt; disk files for easy interoperability like Base64 of the private key
&gt;&gt;&gt; (I haven't check to see what encoding is used for on disk EdDSA
&gt;&gt;&gt; keys, I assume PEM).  
&gt;&gt; 
&gt;&gt; Unfortunately not, it is custom to tor I believe with this 32 bytes
&gt;&gt; header:
&gt;&gt; 
&gt;&gt;    "== ed25519v1-secret: type0 ==\0\0\0"
&gt;&gt; 
&gt;&gt; ... followed by the private key (64 bytes). See
&gt;&gt; crypto_write_tagged_contents_to_file().
&gt;&gt; 
&gt;&gt; Not sure we can change that within the 032 freeze. So the approach
&gt;&gt; would be to Base64 the raw bytes of the key (excluding the header).
&gt;&gt; Using tor HS key file, it would be something like:
&gt;&gt; 
&gt;&gt;    $ tail -c+33 hs_ed25519_secret_key | base64 -w 0
&gt;&gt; 
&gt;&gt; Considering the current situation with the encoded file on disk of
&gt;&gt; the key, I think this is kind of the simplest approach?
&gt; 
&gt; Show Quoted Content
&gt;&gt;&gt;&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt;&gt;&gt;&gt; updated.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;    "ED25519-V3:&lt;Base64 Blob&gt;"
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; ... which contains the ed25519 private key.  
&gt;&gt;&gt; 
&gt;&gt;&gt; If it were up to me, I'd spec the blob as opaque, and then actually
&gt;&gt;&gt; use something that's sensible and consistent with the torrc and on
&gt;&gt;&gt; disk files for easy interoperability like Base64 of the private key
&gt;&gt;&gt; (I haven't check to see what encoding is used for on disk EdDSA
&gt;&gt;&gt; keys, I assume PEM).  
&gt;&gt; 
&gt;&gt; Unfortunately not, it is custom to tor I believe with this 32 bytes
&gt;&gt; header:
&gt;&gt; 
&gt;&gt;    "== ed25519v1-secret: type0 ==\0\0\0"
&gt;&gt; 
&gt;&gt; ... followed by the private key (64 bytes). See
&gt;&gt; crypto_write_tagged_contents_to_file().
&gt;&gt; 
&gt;&gt; Not sure we can change that within the 032 freeze. So the approach
&gt;&gt; would be to Base64 the raw bytes of the key (excluding the header).
&gt;&gt; Using tor HS key file, it would be something like:
&gt;&gt; 
&gt;&gt;    $ tail -c+33 hs_ed25519_secret_key | base64 -w 0
&gt;&gt; 
&gt;&gt; Considering the current situation with the encoded file on disk of
&gt;&gt; the key, I think this is kind of the simplest approach?
&gt; 
&gt; 
&gt; Yeah.  Just the Base64ed private key (excluding that header and things)
&gt; seems reasonable.

Do we accept base64 with padding? Without padding?
(We should accept both - we know how long the key is.)

Do we generate it with or without padding?
(We should follow whatever we do with RSA.)

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 10 Nov 2017, \
at 03:17, Yawning Angel &lt;&lt;a \
href="mailto:yawning@schwanenlied.me"&gt;yawning@schwanenlied.me&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;On Thu, 9 Nov 2017 10:13:45 \
-0500&lt;/span&gt;&lt;br&gt;&lt;span&gt;David Goulet &lt;&lt;span&gt;&lt;a \
href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&lt;/span&gt;&gt; wrote:&lt;/span&gt;&lt;br&gt;&lt;a \
href="#" class="_AppleShowQuotedContentButton"&gt;&lt;div style="height: 80px !important; \
overflow: hidden !important;"&gt;&lt;div preoffsettop="65" \
preoffsetheight="806"&gt;&lt;blockquote type="cite" preoffsettop="65"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Ok fun! I'll add this. Good catch! And \
control-spec.txt should \
be&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="91"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;updated.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="117"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="143"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;To be consistent then we could ask for a &lt;Base64 Blob&gt; as \
well:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="195"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   "ED25519-V3:&lt;Base64 \
Blob&gt;"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="221"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="247"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;... which contains the ed25519 private key. \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="273"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If it were up to me, I'd spec the \
blob as opaque, and then actually&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="325"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;use something that's \
sensible and consistent with the torrc and \
on&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="351"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;disk files for easy interoperability \
like Base64 of the private key&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="377"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;(I haven't check to see \
what encoding is used for on disk \
EdDSA&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="403"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;keys, I assume PEM). \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="429"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="455"&gt;&lt;span&gt;Unfortunately not, it is custom to tor I believe with this \
32 bytes&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="481"&gt;&lt;span&gt;header:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="507"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="533"&gt;&lt;span&gt;    "== ed25519v1-secret: type0 \
==\0\0\0"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="559"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="585"&gt;&lt;span&gt;... followed by the private key (64 bytes). \
See&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="611"&gt;&lt;span&gt;crypto_write_tagged_contents_to_file().&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="637"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="663"&gt;&lt;span&gt;Not sure we can change that within the 032 freeze. So the \
approach&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="689"&gt;&lt;span&gt;would be to Base64 the raw bytes of the key (excluding the \
header).&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="715"&gt;&lt;span&gt;Using tor HS key file, it would be something \
like:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="741"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="767"&gt;&lt;span&gt;    $ tail -c+33 hs_ed25519_secret_key | \
base64 -w 0&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="793"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="819"&gt;&lt;span&gt;Considering the current situation with the encoded file on \
disk of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="845"&gt;&lt;span&gt;the \
key, I think this is kind of the simplest \
approach?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="button"&gt;Show Quoted \
Content&lt;/div&gt;&lt;div style="height: 80px !important; overflow: hidden !important;"&gt;&lt;div \
preoffsettop="65" preoffsetheight="806"&gt;&lt;blockquote type="cite" \
preoffsettop="65"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Ok fun! I'll \
add this. Good catch! And control-spec.txt should \
be&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="91"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;updated.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="117"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="143"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;To be consistent then we could ask for a &lt;Base64 Blob&gt; as \
well:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="195"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   "ED25519-V3:&lt;Base64 \
Blob&gt;"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="221"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="247"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;... which contains the ed25519 private key. \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="273"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If it were up to me, I'd spec the \
blob as opaque, and then actually&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="325"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;use something that's \
sensible and consistent with the torrc and \
on&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="351"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;disk files for easy interoperability \
like Base64 of the private key&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="377"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;(I haven't check to see \
what encoding is used for on disk \
EdDSA&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="403"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;keys, I assume PEM). \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="429"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="455"&gt;&lt;span&gt;Unfortunately not, it is custom to tor I believe with this \
32 bytes&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="481"&gt;&lt;span&gt;header:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="507"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="533"&gt;&lt;span&gt;    "== ed25519v1-secret: type0 \
==\0\0\0"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="559"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="585"&gt;&lt;span&gt;... followed by the private key (64 bytes). \
See&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="611"&gt;&lt;span&gt;crypto_write_tagged_contents_to_file().&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="637"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="663"&gt;&lt;span&gt;Not sure we can change that within the 032 freeze. So the \
approach&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="689"&gt;&lt;span&gt;would be to Base64 the raw bytes of the key (excluding the \
header).&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="715"&gt;&lt;span&gt;Using tor HS key file, it would be something \
like:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="741"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="767"&gt;&lt;span&gt;    $ tail -c+33 hs_ed25519_secret_key | \
base64 -w 0&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="793"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="819"&gt;&lt;span&gt;Considering the current situation with the encoded file on \
disk of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="845"&gt;&lt;span&gt;the \
key, I think this is kind of the simplest \
approach?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div preoffsettop="65" \
preoffsetheight="806" style="display: none;"&gt;&lt;blockquote type="cite" \
preoffsettop="65"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Ok fun! I'll \
add this. Good catch! And control-spec.txt should \
be&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="91"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;updated.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="117"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="143"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;To be consistent then we could ask for a &lt;Base64 Blob&gt; as \
well:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="195"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   "ED25519-V3:&lt;Base64 \
Blob&gt;"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="221"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="247"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;... which contains the ed25519 private key. \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="273"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If it were up to me, I'd spec the \
blob as opaque, and then actually&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="325"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;use something that's \
sensible and consistent with the torrc and \
on&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="351"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;disk files for easy interoperability \
like Base64 of the private key&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="377"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;(I haven't check to see \
what encoding is used for on disk \
EdDSA&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="403"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;keys, I assume PEM). \
 &lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="429"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="455"&gt;&lt;span&gt;Unfortunately not, it is custom to tor I believe with this \
32 bytes&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="481"&gt;&lt;span&gt;header:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="507"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="533"&gt;&lt;span&gt;    "== ed25519v1-secret: type0 \
==\0\0\0"&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="559"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="585"&gt;&lt;span&gt;... followed by the private key (64 bytes). \
See&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="611"&gt;&lt;span&gt;crypto_write_tagged_contents_to_file().&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="637"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="663"&gt;&lt;span&gt;Not sure we can change that within the 032 freeze. So the \
approach&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="689"&gt;&lt;span&gt;would be to Base64 the raw bytes of the key (excluding the \
header).&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="715"&gt;&lt;span&gt;Using tor HS key file, it would be something \
like:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="741"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="767"&gt;&lt;span&gt;    $ tail -c+33 hs_ed25519_secret_key | \
base64 -w 0&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="793"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="819"&gt;&lt;span&gt;Considering the current situation with the encoded file on \
disk of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="845"&gt;&lt;span&gt;the \
key, I think this is kind of the simplest \
approach?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Yeah.  Just the \
Base64ed private key (excluding that header and things)&lt;/span&gt;&lt;br&gt;&lt;span&gt;seems \
reasonable.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Do we accept base64 with padding? \
Without padding?&lt;/div&gt;&lt;div&gt;(We should accept both - we know how long the key \
is.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do we generate it with or without \
padding?&lt;/div&gt;&lt;div&gt;(We should follow whatever we do with \
RSA.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171021082100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-21 08:21:00-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Thank you for the feedback.

teor:
&gt; In general, unstructured text should remain unstructured text.

Relay ops are free to choose from the available options (unstructured
and structured).

&gt; Automated statistics would be more reliable for these particular use cases.
&gt; If the information is sensitive, it can be collected using a safe aggregation
&gt; scheme (PrivCount as described in prop280, or similar).

I agree that it would be desirable to not require manual steps (=error
prone and likely outdated over time) for items that can be automated.

Most fields on the current list can not be automated though.

Do you consider the following torrc _settings_ too sensitive to publish
by relays (without an aggregation scheme)?

- OfflineMasterKey setting (0/1)
- SigningKeyLifetime
- Sandbox (0/1)
- Schedulers


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171021115038</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-21 11:50:38-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>

On 21 Oct 2017, at 19:21, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt;&gt; Automated statistics would be more reliable for these particular use cases.
&gt;&gt; If the information is sensitive, it can be collected using a safe aggregation
&gt;&gt; scheme (PrivCount as described in prop280, or similar).
&gt; 
&gt; I agree that it would be desirable to not require manual steps (=error
&gt; prone and likely outdated over time) for items that can be automated.
&gt; 
&gt; Most fields on the current list can not be automated though.
&gt; 
&gt; Do you consider the following torrc _settings_ too sensitive to publish
&gt; by relays (without an aggregation scheme)?
&gt; 
&gt; - OfflineMasterKey setting (0/1)
&gt; - SigningKeyLifetime
&gt; - Sandbox (0/1)

Yes, these are directly related to relay security, so if they can be linked
to the relay, they should be opt-in.

&gt; - Schedulers

I don't think this is sensitive information.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171109121600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-11-09 12:16:00-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt;&gt; - OfflineMasterKey setting (0/1)
&gt;&gt; - SigningKeyLifetime
&gt;&gt; - Sandbox (0/1)
&gt; Yes, these are directly related to relay security, so if they can be linked
&gt; to the relay, they should be opt-in.

I added your note to Sebastian's ticket about publishing key expiry
information in descriptors. I like Sebastian's idea but I also agree to
your opt-in remark - which means that we will likely not get much data
at all (how many relay operators will opt-in vs. the effort to make that
possible).





-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171106094539</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-06 09:45:39-0400</timestampReceived><subject>Re: [tor-dev] anonbib</subject><body>

On Mon, Nov 6, 2017 at 12:56 AM, ng0 &lt;ng0@infotropique.org&gt; wrote:
&gt; I think videos should be a separate issue, we selfhost them
&gt; already as far as I know but integrating them into git is
&gt; no (good) solution.

Don't think I would propose committing the actual videos / papers
to git... too much bloat... just the bib / meta / hash info and links.
Perhaps the links would point to files on the joint webserver.
Mirrors could clone the git and rsync the files.
Primary video links could be out to youtube.
Secondary sets of links that require clients could go to IPFS
or wherever for both papers and videos, even torrent magnet
infohash, seeding bandwidth could be shared across projects
as well.

&gt; If you don't go for something like Mediagoblin

&gt; exist. Asking CCC for hosting would be another choice, for
&gt; their media they have a good amount of mirrors.

Whatever works.

&gt; Should we
&gt; track down more of them to ask the groups and people
&gt; running them if they want to get involved?

If in the crypto privacy messaging overlay etc etc etc spaces,
it could be beneficial to at least send them a link to this thread.
Since each can freely tag to their own desire / view, and saves
maintenance it could be a hit.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107001251</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-11-07 00:12:51-0400</timestampReceived><subject>[tor-dev] Fwd: Nyx 2.0 Release</subject><body>

Hi tor-dev. Sorry for the cross post but while tor-relays@ is the
perfect spot to announce Nyx, tor-dev@ is the traditional place to
unveil Stem.

I'm pleased to announce Stem 1.6, the accumulation of a full year of
improvements for our controller library...

https://stem.torproject.org/change_log.html#version-1-6

Besides features such as descriptor creation and ed25519 support the
main highlight for this release is performance tuning. Descriptor
parsing is ~25% faster and low-level control socket handling got some
special attention.

Cheers! -Damian

---------- Forwarded message ----------
From: Damian Johnson &lt;atagar@torproject.org&gt;
Date: Mon, Nov 6, 2017 at 3:41 PM
Subject: Nyx 2.0 Release
To: tor-relays@lists.torproject.org


Hi all, after years of being in the works I'm pleased to announce Nyx!
A long overdue modernization of arm.

http://blog.atagar.com/nyx-release-2-0/
https://nyx.torproject.org/

Even more important for our controller space at large, Nyx is coming
hand-in-hand with Stem 1.6. A full year of improvements that include
descriptor creation support, ed25519 certificates, performance tuning,
and much, much more...

https://stem.torproject.org/change_log.html#version-1-6

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171107004208</emailId><senderName>Nathan Kettle</senderName><senderEmail>nathan.kettle93@gmail.com</senderEmail><timestampReceived>2017-11-07 00:42:08-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 82, Issue 8</subject><body>

[Attachment #2 (multipart/alternative)]


unsubscribe

On Tue, Nov 7, 2017 at 11:12 AM, &lt;tor-dev-request@lists.torproject.org&gt;
wrote:

&gt; Send tor-dev mailing list submissions to
&gt;         tor-dev@lists.torproject.org
&gt;
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt;         https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt;         tor-dev-request@lists.torproject.org
&gt;
&gt; You can reach the person managing the list at
&gt;         tor-dev-owner@lists.torproject.org
&gt;
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt;
&gt;
&gt; Today's Topics:
&gt;
&gt;    1. Proposal 284: Hidden Service v3 Control Port (David Goulet)
&gt;    2. Re: Proposal 284: Hidden Service v3 Control Port (AntiTree)
&gt;    3. Re: Proposal 284: Hidden Service v3 Control Port (Damian Johnson)
&gt;    4. Re: Proposal 284: Hidden Service v3 Control Port (meejah)
&gt;    5. Fwd: Nyx 2.0 Release (Damian Johnson)
&gt;
&gt;
&gt; ----------------------------------------------------------------------
&gt;
&gt; Message: 1
&gt; Date: Mon, 6 Nov 2017 09:59:07 -0500
&gt; From: David Goulet &lt;dgoulet@ev0ke.net&gt;
&gt; To: tor-dev &lt;tor-dev@lists.torproject.org&gt;
&gt; Subject: [tor-dev] Proposal 284: Hidden Service v3 Control Port
&gt; Message-ID: &lt;20171106145907.p7dm7dmqpnzlqsmj@raoul&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hi everyone,
&gt;
&gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; specification.
&gt;
&gt; The idea with this proposal is to _only_ extend the current commands and
&gt; events to v3. Nothing new is added. We can think of more things to add
&gt; after
&gt; but for now, I wanted a baseline to start with that is only extending what
&gt; exists.
&gt;
&gt; Any kind of feedbacks is welcome! :)
&gt;
&gt; Cheers!
&gt; David
&gt;
&gt; --
&gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; -------------- next part --------------
&gt; Filename: 284-hsv3-control-port.txt
&gt; Title: Hidden Service v3 Control Port
&gt; Author: David Goulet
&gt; Created: 02-November-2017
&gt; Status: Open
&gt;
&gt; 1. Summary
&gt;
&gt;    This document extends the hidden service control port events and
&gt; commands
&gt;    to version 3 (rend-spec-v3.txt).
&gt;
&gt;    No command nor events are newly added in this document, it only desribes
&gt;    how the current commands and events are extended to support v3.
&gt;
&gt; 2. Format
&gt;
&gt;    The formatting of this document follows section 2 of control-spec.txt.
&gt; It
&gt;    is split in two sections, the Commands and the Events for hidden service
&gt;    version 3.
&gt;
&gt;    We define the alphabet of a Base64 encoded value to be:
&gt;
&gt;       Base64Character = "A"-"Z" / "a"-"z" / "0"-"9" / "+" / "/"
&gt;
&gt;    For a command or event, if nothing is mentionned, the behavior doesn't
&gt;    change from the control port specification.
&gt;
&gt; 3. Specification:
&gt;
&gt; 3.1. Commands
&gt;
&gt;    As specified in the control specification, all commands are
&gt;    case-insensitive but the keywords are case-sensitive.
&gt;
&gt; 3.1.1. GETINFO
&gt;
&gt;    Hidden service commands are:
&gt;
&gt;      "hs/client/desc/id/&lt;ADDR&gt;"
&gt;        The &lt;ADDR&gt; can be a v3 address without the ".onion" part. The rest
&gt; is
&gt;        as is.
&gt;
&gt;      "hs/service/desc/id/&lt;ADDR&gt;"
&gt;        The &lt;ADDR&gt; can be a v3 address without the ".onion" part. The rest
&gt; is
&gt;        as is.
&gt;
&gt;      "onions/{current,detached}"
&gt;        No change. This command can support v3 hidden service without
&gt; changes
&gt;        returning v3 address(es).
&gt;
&gt; 3.1.2. HSFETCH
&gt;
&gt;    The syntax of this command supports both an HSAddress or a versionned
&gt;    descriptor ID. However, for descriptor ID, version 3 doesn't have the
&gt; same
&gt;    concept as v2 so, for v3 the descriptor ID is the blinded key of a
&gt;    descriptor which is used as an index to query the HSDir:
&gt;
&gt;    The syntax becomes:
&gt;      "HSFETCH" SP (HSAddress / "v" Version "-" DescId)
&gt;                *[SP "SERVER=" Server] CRLF
&gt;
&gt;      HSAddress = (16*Base32Character / 56*Base32Character)
&gt;      Version = "2" / "3"
&gt;      DescId = (32*Base32Character / 32*Base64Character)
&gt;      Server = LongName
&gt;
&gt;    The "HSAddress" key is extended to accept 56 base32 characters which is
&gt; the
&gt;    format of a version 3 onion address.
&gt;
&gt;    The "DescId" of the form 32*Base64Character is the descriptor blinded
&gt; key
&gt;    used as an index to query the directory. It can only be used with
&gt;    "Version=3".
&gt;
&gt; 3.1.5. HSPOST
&gt;
&gt;    No change. This command can support v3 hidden service without changes.
&gt;
&gt; 3.1.3. ADD_ONION
&gt;
&gt;    For this command to support version 3, new values are added but the
&gt; syntax
&gt;    is unchanged:
&gt;
&gt;      "ADD_ONION" SP KeyType ":" KeyBlob
&gt;                  [SP "Flags=" Flag *("," Flag)]
&gt;                  1*(SP "Port=" VirtPort ["," Target])
&gt;                  *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF
&gt;
&gt;    New "KeyType" value to "ED25519-V3" which identifies the key type to be
&gt; a
&gt;    v3 ed25519 key.
&gt;
&gt;    New "KeyBlob" value to support the new "ED25519-V3", if specified, will
&gt;    generate a new ed25519 private key.
&gt;
&gt;    Because client authentication is not yet implemented, the "ClientAuth"
&gt;    field is ignored as well as "Flags=BasicAuth".
&gt;
&gt; 3.1.4. DEL_ONION
&gt;
&gt;    The syntax of this command is:
&gt;
&gt;      "DEL_ONION" SP ServiceID CRLF
&gt;
&gt;      ServiceID = The Onion Service address without the trailing ".onion"
&gt;                  suffix
&gt;
&gt;    The "ServiceID" can simply be a v3 address. Nothing else changes.
&gt;
&gt; 3.2. Events
&gt;
&gt; 3.2.1. HS_DESC
&gt;
&gt;    For this event to support vesrion 3, one optional field and new
&gt;    values are added:
&gt;
&gt;      "650" SP "HS_DESC" SP Action SP HSAddress SP AuthType SP HsDir
&gt;            [SP DescriptorID] [SP "REASON=" Reason] [SP "REPLICA=" Replica]
&gt;            [SP "HSDIR_INDEX=" HSDirIndex]
&gt;
&gt;      Action =  "REQUESTED" / "UPLOAD" / "RECEIVED" / "UPLOADED" / "IGNORE"
&gt; /
&gt;                "FAILED" / "CREATED"
&gt;      HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"
&gt;      AuthType = "NO_AUTH" / "BASIC_AUTH" / "STEALTH_AUTH" / "UNKNOWN"
&gt;      HsDir = LongName / Fingerprint / "UNKNOWN"
&gt;      DescriptorID = 32*Base32Character / 32*Base64Character
&gt;      Reason = "BAD_DESC" / "QUERY_REJECTED" / "UPLOAD_REJECTED" /
&gt; "NOT_FOUND" /
&gt;               "UNEXPECTED" / "QUERY_NO_HSDIR"
&gt;      Replica = 1*DIGIT
&gt;      HSDirIndex = 64*HEXDIG
&gt;
&gt;    The "HSDIR_INDEX=" is an optional field that is only for version 3 which
&gt;    contains the computed index of the HsDir the descriptor was uploaded to
&gt; or
&gt;    fetched from.
&gt;
&gt;    The "HSAddress" key is extended to accept 56 base32 characters which is
&gt; the
&gt;    format of a version 3 onion address.
&gt;
&gt;    The "DescriptorID" key is extended to accept 32 base64 characters which
&gt; is
&gt;    the descriptor blinded key used for the index value at the "HsDir".
&gt;
&gt;    Because client authentication is not yet implemented, the "AuthType"
&gt; field
&gt;    is always "NO_AUTH".
&gt;
&gt; 3.2.2. HS_DESC_CONTENT
&gt;
&gt;    For this event to support version 3, new values are added but the
&gt; syntax is
&gt;    unchanged:
&gt;
&gt;      "650" "+" "HS_DESC_CONTENT" SP HSAddress SP DescId SP HsDir CRLF
&gt;                 Descriptor CRLF "." CRLF "650" SP "OK" CRLF
&gt;
&gt;      HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"
&gt;      DescId = 32*Base32Character / 32*Base64Character
&gt;      HsDir = LongName / "UNKNOWN"
&gt;      Descriptor = The text of the descriptor formatted as specified in
&gt;                   rend-spec-v3.txt section 2.4 or empty string on failure.
&gt;
&gt;    The "HSAddress" key is extended to accept 56 base32 characters which is
&gt; the
&gt;    format of a version 3 onion address.
&gt;
&gt;    The "DescriptorID" key is extended to accept 32 base64 characters which
&gt; is
&gt;    the descriptor blinded key used for the index value at the "HsDir".
&gt;
&gt; 3.2.3 CIRC and CIRC_MINOR
&gt;
&gt;    These circuit events have an optional field named "REND_QUERY" which
&gt; takes
&gt;    an "HSAddress". This field is extended to support v3 address:
&gt;
&gt;       HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 455 bytes
&gt; Desc: not available
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/
&gt; 20171106/1234e42b/attachment-0001.sig&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 2
&gt; Date: Mon, 06 Nov 2017 15:44:26 +0000
&gt; From: AntiTree &lt;antitree@gmail.com&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port
&gt; Message-ID:
&gt;         &lt;CAMCPh3z0Dm5_sgSCJx+k9qrzkXiwaA_uHBo6j1K3ktZD_
&gt; HfhUQ@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hey David,
&gt;
&gt; Are there any ways of revoking a service's key and should it be included as
&gt; a control port function? For example, in the case that the master key is
&gt; kept offline but the host and its descriptor signing key are compromised,
&gt; the box could be run for a period of time(?) until the keys expire and need
&gt; to be re-signed. That window could be forcefully closed remotely with a
&gt; revocation that reports that key as compromised. I don't know how big that
&gt; window is so I don't know how big of a risk it ends up being.
&gt;
&gt; @
&gt;
&gt; On Mon, Nov 6, 2017 at 9:59 AM David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt;
&gt; &gt; Hi everyone,
&gt; &gt;
&gt; &gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; &gt; specification.
&gt; &gt;
&gt; &gt; The idea with this proposal is to _only_ extend the current commands and
&gt; &gt; events to v3. Nothing new is added. We can think of more things to add
&gt; &gt; after
&gt; &gt; but for now, I wanted a baseline to start with that is only extending
&gt; what
&gt; &gt; exists.
&gt; &gt;
&gt; &gt; Any kind of feedbacks is welcome! :)
&gt; &gt;
&gt; &gt; Cheers!
&gt; &gt; David
&gt; &gt;
&gt; &gt; --
&gt; &gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL: &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/
&gt; 20171106/e120b0d6/attachment-0001.html&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 3
&gt; Date: Mon, 6 Nov 2017 10:15:18 -0800
&gt; From: Damian Johnson &lt;atagar@torproject.org&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port
&gt; Message-ID:
&gt;         &lt;CAJdkzEM-7SNN8JhN+93_5uFkvJ_vZRLRWCfRv4ATaCUBGYxNPQ@mail.
&gt; gmail.com&gt;
&gt; Content-Type: text/plain; charset="UTF-8"
&gt;
&gt; Hi David, great proposal! Sorry I'm juggling too many things right now
&gt; to really really review it. Quick skim though looks great. One quick
&gt; thought is that the HS_DESC event has an optional positional argument
&gt; (DescriptorID). This is fine *but* I'd advise against it since it will
&gt; prevent you from ever adding more positional arguments in the future.
&gt; Making it a key=value argument instead sidesteps this.
&gt;
&gt;
&gt; On Mon, Nov 6, 2017 at 6:59 AM, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; Hi everyone,
&gt; &gt;
&gt; &gt; Attached is the proposal draft for the hidden service v3 contro port
&gt; &gt; specification.
&gt; &gt;
&gt; &gt; The idea with this proposal is to _only_ extend the current commands and
&gt; &gt; events to v3. Nothing new is added. We can think of more things to add
&gt; after
&gt; &gt; but for now, I wanted a baseline to start with that is only extending
&gt; what
&gt; &gt; exists.
&gt; &gt;
&gt; &gt; Any kind of feedbacks is welcome! :)
&gt; &gt;
&gt; &gt; Cheers!
&gt; &gt; David
&gt; &gt;
&gt; &gt; --
&gt; &gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJFdEcN02dPwo5FQ=
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 4
&gt; Date: Mon, 06 Nov 2017 22:35:32 +0400
&gt; From: meejah &lt;meejah@meejah.ca&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port
&gt; Message-ID: &lt;86h8u7gsqz.fsf@atlantis.meejah.ca&gt;
&gt; Content-Type: text/plain; charset=us-ascii
&gt;
&gt; David Goulet &lt;dgoulet@ev0ke.net&gt; writes:
&gt;
&gt; Hi David,
&gt;
&gt; Overall looks good! A few comments inline:
&gt;
&gt; &gt;      "onions/{current,detached}"
&gt; &gt;        No change. This command can support v3 hidden service without
&gt; changes
&gt; &gt;        returning v3 address(es).
&gt;
&gt; Does the control-spec need a note pointing out that you might get some
&gt; "longer" (v3) addresses?
&gt;
&gt; &gt; 3.1.3. ADD_ONION
&gt; &gt;
&gt; &gt;    For this command to support version 3, new values are added but the
&gt; syntax
&gt; &gt;    is unchanged:
&gt; &gt;
&gt; &gt;      "ADD_ONION" SP KeyType ":" KeyBlob
&gt; &gt;                  [SP "Flags=" Flag *("," Flag)]
&gt; &gt;                  1*(SP "Port=" VirtPort ["," Target])
&gt; &gt;                  *(SP "ClientAuth=" ClientName [":" ClientBlob]) CRLF
&gt; &gt;
&gt; &gt;    New "KeyType" value to "ED25519-V3" which identifies the key type to
&gt; be a
&gt; &gt;    v3 ed25519 key.
&gt; &gt;
&gt; &gt;    New "KeyBlob" value to support the new "ED25519-V3", if specified,
&gt; will
&gt; &gt;    generate a new ed25519 private key.
&gt;
&gt; This might need a couple more details; as-is ADD_ONION can take
&gt; "NEW:BEST" (which should now return a v3 service?) or "NEW:ED25519-V3"
&gt; for explicitly asking for a V3 key, or "ED25519-V3:&lt;56 base32 chars&gt;"
&gt; for adding an already-existing v3 service.
&gt;
&gt; &gt;    Because client authentication is not yet implemented, the "ClientAuth"
&gt; &gt;    field is ignored as well as "Flags=BasicAuth".
&gt;
&gt; I think these should generate a 500-level error (if used for a v3
&gt; service) instead of being ignored. That is, if you try to use auth with
&gt; v3, you get an error.
&gt;
&gt; &gt;    For this event to support vesrion 3, one optional field and new
&gt; &gt;    values are added:
&gt;
&gt; I echo Damian's comments on the positional-arg; making it [SP
&gt; "DescriptorID=" ] or similar (i.e. an optional kwarg) would mean easier
&gt; later extending and also it *should* then "just work" with most
&gt; controller libs already at least as far as parsing goes (because
&gt; controller libs in general have to accept new, unknown kwargs).
&gt;
&gt;
&gt; The rest all sounds good to me!
&gt;
&gt; thanks,
&gt; meejah
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 5
&gt; Date: Mon, 6 Nov 2017 16:12:51 -0800
&gt; From: Damian Johnson &lt;atagar@torproject.org&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] Fwd: Nyx 2.0 Release
&gt; Message-ID:
&gt;         &lt;CAJdkzENPe6hOpoBSmrj5Ax-_wFBBtVuX2aB5KaW7bBjvqMZB1Q@
&gt; mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="UTF-8"
&gt;
&gt; Hi tor-dev. Sorry for the cross post but while tor-relays@ is the
&gt; perfect spot to announce Nyx, tor-dev@ is the traditional place to
&gt; unveil Stem.
&gt;
&gt; I'm pleased to announce Stem 1.6, the accumulation of a full year of
&gt; improvements for our controller library...
&gt;
&gt; https://stem.torproject.org/change_log.html#version-1-6
&gt;
&gt; Besides features such as descriptor creation and ed25519 support the
&gt; main highlight for this release is performance tuning. Descriptor
&gt; parsing is ~25% faster and low-level control socket handling got some
&gt; special attention.
&gt;
&gt; Cheers! -Damian
&gt;
&gt; ---------- Forwarded message ----------
&gt; From: Damian Johnson &lt;atagar@torproject.org&gt;
&gt; Date: Mon, Nov 6, 2017 at 3:41 PM
&gt; Subject: Nyx 2.0 Release
&gt; To: tor-relays@lists.torproject.org
&gt;
&gt;
&gt; Hi all, after years of being in the works I'm pleased to announce Nyx!
&gt; A long overdue modernization of arm.
&gt;
&gt; http://blog.atagar.com/nyx-release-2-0/
&gt; https://nyx.torproject.org/
&gt;
&gt; Even more important for our controller space at large, Nyx is coming
&gt; hand-in-hand with Stem 1.6. A full year of improvements that include
&gt; descriptor creation support, ed25519 certificates, performance tuning,
&gt; and much, much more...
&gt;
&gt; https://stem.torproject.org/change_log.html#version-1-6
&gt;
&gt; Cheers! -Damian
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Subject: Digest Footer
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; End of tor-dev Digest, Vol 82, Issue 8
&gt; **************************************
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;unsubscribe&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Tue, Nov 7, 2017 at 11:12 AM,  &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
                #ccc solid;padding-left:1ex"&gt;Send tor-dev mailing list submissions \
                to&lt;br&gt;
            &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
To subscribe or unsubscribe via the World Wide Web, visit&lt;br&gt;
            &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 or, via email, send a message with subject or body 'help' to&lt;br&gt;
            &lt;a href="mailto:tor-dev-request@lists.torproject.org"&gt;tor-dev-request@lists.&lt;wbr&gt;torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
You can reach the person managing the list at&lt;br&gt;
            &lt;a href="mailto:tor-dev-owner@lists.torproject.org"&gt;tor-dev-owner@lists.&lt;wbr&gt;torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
When replying, please edit your Subject line so it is more specific&lt;br&gt;
than "Re: Contents of tor-dev digest..."&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Today's Topics:&lt;br&gt;
&lt;br&gt;
     1. Proposal 284: Hidden Service v3 Control Port (David Goulet)&lt;br&gt;
     2. Re: Proposal 284: Hidden Service v3 Control Port (AntiTree)&lt;br&gt;
     3. Re: Proposal 284: Hidden Service v3 Control Port (Damian Johnson)&lt;br&gt;
     4. Re: Proposal 284: Hidden Service v3 Control Port (meejah)&lt;br&gt;
     5. Fwd: Nyx 2.0 Release (Damian Johnson)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;----------&lt;br&gt;
&lt;br&gt;
Message: 1&lt;br&gt;
Date: Mon, 6 Nov 2017 09:59:07 -0500&lt;br&gt;
From: David Goulet &lt;&lt;a \
                href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt;&lt;br&gt;
To: tor-dev &lt;&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&gt;&lt;br&gt;
                
Subject: [tor-dev] Proposal 284: Hidden Service v3 Control Port&lt;br&gt;
Message-ID: &lt;20171106145907.&lt;wbr&gt;p7dm7dmqpnzlqsmj@raoul&gt;&lt;br&gt;
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hi everyone,&lt;br&gt;
&lt;br&gt;
Attached is the proposal draft for the hidden service v3 contro port&lt;br&gt;
specification.&lt;br&gt;
&lt;br&gt;
The idea with this proposal is to _only_ extend the current commands and&lt;br&gt;
events to v3. Nothing new is added. We can think of more things to add after&lt;br&gt;
but for now, I wanted a baseline to start with that is only extending what&lt;br&gt;
exists.&lt;br&gt;
&lt;br&gt;
Any kind of feedbacks is welcome! :)&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
David&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Zu3IyL4LcdnKNkQIZqEqaTNUapUEJF&lt;wbr&gt;dEcN02dPwo5FQ=&lt;br&gt;
-------------- next part --------------&lt;br&gt;
Filename: 284-hsv3-control-port.txt&lt;br&gt;
Title: Hidden Service v3 Control Port&lt;br&gt;
Author: David Goulet&lt;br&gt;
Created: 02-November-2017&lt;br&gt;
Status: Open&lt;br&gt;
&lt;br&gt;
1. Summary&lt;br&gt;
&lt;br&gt;
     This document extends the hidden service control port events and commands&lt;br&gt;
     to version 3 (rend-spec-v3.txt).&lt;br&gt;
&lt;br&gt;
     No command nor events are newly added in this document, it only desribes&lt;br&gt;
     how the current commands and events are extended to support v3.&lt;br&gt;
&lt;br&gt;
2. Format&lt;br&gt;
&lt;br&gt;
     The formatting of this document follows section 2 of control-spec.txt. It&lt;br&gt;
     is split in two sections, the Commands and the Events for hidden service&lt;br&gt;
     version 3.&lt;br&gt;
&lt;br&gt;
     We define the alphabet of a Base64 encoded value to be:&lt;br&gt;
&lt;br&gt;
         Base64Character = "A"-"Z" / "a"-"z" \
/ "0"-"9" / "+" / "/"&lt;br&gt; &lt;br&gt;
     For a command or event, if nothing is mentionned, the behavior doesn't&lt;br&gt;
     change from the control port specification.&lt;br&gt;
&lt;br&gt;
3. Specification:&lt;br&gt;
&lt;br&gt;
3.1. Commands&lt;br&gt;
&lt;br&gt;
     As specified in the control specification, all commands are&lt;br&gt;
     case-insensitive but the keywords are case-sensitive.&lt;br&gt;
&lt;br&gt;
3.1.1. GETINFO&lt;br&gt;
&lt;br&gt;
     Hidden service commands are:&lt;br&gt;
&lt;br&gt;
        "hs/client/desc/id/&lt;ADDR&gt;"&lt;br&gt;
           The &lt;ADDR&gt; can be a v3 address without the ".onion" part. \
The rest is&lt;br&gt;  as is.&lt;br&gt;
&lt;br&gt;
        "hs/service/desc/id/&lt;ADDR&gt;"&lt;br&gt;
           The &lt;ADDR&gt; can be a v3 address without the ".onion" part. \
The rest is&lt;br&gt;  as is.&lt;br&gt;
&lt;br&gt;
        "onions/{current,detached}"&lt;br&gt;
           No change. This command can support v3 hidden service without changes&lt;br&gt;
           returning v3 address(es).&lt;br&gt;
&lt;br&gt;
3.1.2. HSFETCH&lt;br&gt;
&lt;br&gt;
     The syntax of this command supports both an HSAddress or a versionned&lt;br&gt;
     descriptor ID. However, for descriptor ID, version 3 doesn't have the \
                same&lt;br&gt;
     concept as v2 so, for v3 the descriptor ID is the blinded key of a&lt;br&gt;
     descriptor which is used as an index to query the HSDir:&lt;br&gt;
&lt;br&gt;
     The syntax becomes:&lt;br&gt;
        "HSFETCH" SP (HSAddress / "v" Version "-" \
                DescId)&lt;br&gt;
                       *[SP "SERVER=" Server] CRLF&lt;br&gt;
&lt;br&gt;
        HSAddress = (16*Base32Character / 56*Base32Character)&lt;br&gt;
        Version = "2" / "3"&lt;br&gt;
        DescId = (32*Base32Character / 32*Base64Character)&lt;br&gt;
        Server = LongName&lt;br&gt;
&lt;br&gt;
     The "HSAddress" key is extended to accept 56 base32 characters which \
is the&lt;br&gt;  format of a version 3 onion address.&lt;br&gt;
&lt;br&gt;
     The "DescId" of the form 32*Base64Character is the descriptor blinded \
key&lt;br&gt;  used as an index to query the directory. It can only be used with&lt;br&gt;
     "Version=3".&lt;br&gt;
&lt;br&gt;
3.1.5. HSPOST&lt;br&gt;
&lt;br&gt;
     No change. This command can support v3 hidden service without changes.&lt;br&gt;
&lt;br&gt;
3.1.3. ADD_ONION&lt;br&gt;
&lt;br&gt;
     For this command to support version 3, new values are added but the syntax&lt;br&gt;
     is unchanged:&lt;br&gt;
&lt;br&gt;
        "ADD_ONION" SP KeyType ":" KeyBlob&lt;br&gt;
                          [SP "Flags=" Flag *("," Flag)]&lt;br&gt;
                          1*(SP "Port=" VirtPort ["," \
                Target])&lt;br&gt;
                          *(SP "ClientAuth=" ClientName [":" \
ClientBlob]) CRLF&lt;br&gt; &lt;br&gt;
     New "KeyType" value to "ED25519-V3" which identifies the key \
type to be a&lt;br&gt;  v3 ed25519 key.&lt;br&gt;
&lt;br&gt;
     New "KeyBlob" value to support the new "ED25519-V3", if \
specified, will&lt;br&gt;  generate a new ed25519 private key.&lt;br&gt;
&lt;br&gt;
     Because client authentication is not yet implemented, the \
"ClientAuth"&lt;br&gt;  field is ignored as well as \
"Flags=BasicAuth".&lt;br&gt; &lt;br&gt;
3.1.4. DEL_ONION&lt;br&gt;
&lt;br&gt;
     The syntax of this command is:&lt;br&gt;
&lt;br&gt;
        "DEL_ONION" SP ServiceID CRLF&lt;br&gt;
&lt;br&gt;
        ServiceID = The Onion Service address without the trailing \
".onion"&lt;br&gt;  suffix&lt;br&gt;
&lt;br&gt;
     The "ServiceID" can simply be a v3 address. Nothing else changes.&lt;br&gt;
&lt;br&gt;
3.2. Events&lt;br&gt;
&lt;br&gt;
3.2.1. HS_DESC&lt;br&gt;
&lt;br&gt;
     For this event to support vesrion 3, one optional field and new&lt;br&gt;
     values are added:&lt;br&gt;
&lt;br&gt;
        "650" SP "HS_DESC" SP Action SP HSAddress SP AuthType SP \
                HsDir&lt;br&gt;
                 [SP DescriptorID] [SP "REASON=" Reason] [SP \
"REPLICA=" Replica]&lt;br&gt;  [SP "HSDIR_INDEX=" HSDirIndex]&lt;br&gt;
&lt;br&gt;
        Action =   "REQUESTED" / "UPLOAD" / "RECEIVED" \
/ "UPLOADED" / "IGNORE" /&lt;br&gt;  "FAILED" / \
                "CREATED"&lt;br&gt;
        HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"&lt;br&gt;
        AuthType = "NO_AUTH" / "BASIC_AUTH" / \
"STEALTH_AUTH" / "UNKNOWN"&lt;br&gt;  HsDir = LongName / Fingerprint / \
"UNKNOWN"&lt;br&gt;  DescriptorID = 32*Base32Character / 32*Base64Character&lt;br&gt;
        Reason = "BAD_DESC" / "QUERY_REJECTED" / \
                "UPLOAD_REJECTED" / "NOT_FOUND" /&lt;br&gt;
                     "UNEXPECTED" / "QUERY_NO_HSDIR"&lt;br&gt;
        Replica = 1*DIGIT&lt;br&gt;
        HSDirIndex = 64*HEXDIG&lt;br&gt;
&lt;br&gt;
     The "HSDIR_INDEX=" is an optional field that is only for version 3 \
                which&lt;br&gt;
     contains the computed index of the HsDir the descriptor was uploaded to or&lt;br&gt;
     fetched from.&lt;br&gt;
&lt;br&gt;
     The "HSAddress" key is extended to accept 56 base32 characters which \
is the&lt;br&gt;  format of a version 3 onion address.&lt;br&gt;
&lt;br&gt;
     The "DescriptorID" key is extended to accept 32 base64 characters \
                which is&lt;br&gt;
     the descriptor blinded key used for the index value at the \
"HsDir".&lt;br&gt; &lt;br&gt;
     Because client authentication is not yet implemented, the "AuthType" \
field&lt;br&gt;  is always "NO_AUTH".&lt;br&gt;
&lt;br&gt;
3.2.2. HS_DESC_CONTENT&lt;br&gt;
&lt;br&gt;
     For this event to support version 3, new values are added but the syntax is&lt;br&gt;
     unchanged:&lt;br&gt;
&lt;br&gt;
        "650" "+" "HS_DESC_CONTENT" SP HSAddress SP \
                DescId SP HsDir CRLF&lt;br&gt;
                        Descriptor CRLF "." CRLF "650" SP \
"OK" CRLF&lt;br&gt; &lt;br&gt;
        HSAddress = 16*Base32Character / 56*Base32Character / "UNKNOWN"&lt;br&gt;
        DescId = 32*Base32Character / 32*Base64Character&lt;br&gt;
        HsDir = LongName / "UNKNOWN"&lt;br&gt;
        Descriptor = The text of the descriptor formatted as specified in&lt;br&gt;
                           rend-spec-v3.txt section 2.4 or empty string on \
failure.&lt;br&gt; &lt;br&gt;
     The "HSAddress" key is extended to accept 56 base32 characters which \
is the&lt;br&gt;  format of a version 3 onion address.&lt;br&gt;
&lt;br&gt;
     The "DescriptorID" key is extended to accept 32 base64 characters \
                which is&lt;br&gt;
     the descriptor blinded key used for the index value at the \
"HsDir".&lt;br&gt; &lt;br&gt;
3.2.3 CIRC and CIRC_MINOR&lt;br&gt;
&lt;br&gt;
     These circuit events have an optional field named "REND_QUERY" which \
                takes&lt;br&gt;
     an "HSAddress". This field is extended to support v3 address:&lt;br&gt;
&lt;br&gt;
         HSAddress = 16*Base32Character / 56*Base32Character / \
                "UNKNOWN"&lt;br&gt;
-------------- next part --------------&lt;br&gt;
A non-text attachment was scrubbed...&lt;br&gt;
Name: signature.asc&lt;br&gt;
Type: application/pgp-signature&lt;br&gt;
Size: 455 bytes&lt;br&gt;
Desc: not available&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20171106/1234e42b/attachment-0001.sig" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/&lt;wbr&gt;pipermail/tor-dev/attachments/&lt;wbr&gt;20171106/1234e42b/attachment-&lt;wbr&gt;0001.sig&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 2&lt;br&gt;
Date: Mon, 06 Nov 2017 15:44:26 +0000&lt;br&gt;
From: AntiTree &lt;&lt;a href="mailto:antitree@gmail.com"&gt;antitree@gmail.com&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
                
Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port&lt;br&gt;
Message-ID:&lt;br&gt;
            &lt;&lt;a href="mailto:CAMCPh3z0Dm5_sgSCJx%2Bk9qrzkXiwaA_uHBo6j1K3ktZD_HfhUQ@ \
mail.gmail.com"&gt;CAMCPh3z0Dm5_sgSCJx+&lt;wbr&gt;k9qrzkXiwaA_uHBo6j1K3ktZD_&lt;wbr&gt;HfhUQ@mail.gmail.com&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hey David,&lt;br&gt;
&lt;br&gt;
Are there any ways of revoking a service's key and should it be included as&lt;br&gt;
a control port function? For example, in the case that the master key is&lt;br&gt;
kept offline but the host and its descriptor signing key are compromised,&lt;br&gt;
the box could be run for a period of time(?) until the keys expire and need&lt;br&gt;
to be re-signed. That window could be forcefully closed remotely with a&lt;br&gt;
revocation that reports that key as compromised. I don't know how big that&lt;br&gt;
window is so I don't know how big of a risk it ends up being.&lt;br&gt;
&lt;br&gt;
@&lt;br&gt;
&lt;br&gt;
On Mon, Nov 6, 2017 at 9:59 AM David Goulet &lt;&lt;a \
href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt; wrote:&lt;br&gt; &lt;br&gt;
&gt; Hi everyone,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Attached is the proposal draft for the hidden service v3 contro port&lt;br&gt;
&gt; specification.&lt;br&gt;
&gt;&lt;br&gt;
&gt; The idea with this proposal is to _only_ extend the current commands and&lt;br&gt;
&gt; events to v3. Nothing new is added. We can think of more things to add&lt;br&gt;
&gt; after&lt;br&gt;
&gt; but for now, I wanted a baseline to start with that is only extending what&lt;br&gt;
&gt; exists.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Any kind of feedbacks is welcome! :)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Cheers!&lt;br&gt;
&gt; David&lt;br&gt;
&gt;&lt;br&gt;
&gt; --&lt;br&gt;
&gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJF&lt;wbr&gt;dEcN02dPwo5FQ=&lt;br&gt;
&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
-------------- next part --------------&lt;br&gt;
An HTML attachment was scrubbed...&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20171106/e120b0d6/attachment-0001.html" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/&lt;wbr&gt;pipermail/tor-dev/attachments/&lt;wbr&gt;20171106/e120b0d6/attachment-&lt;wbr&gt;0001.html&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 3&lt;br&gt;
Date: Mon, 6 Nov 2017 10:15:18 -0800&lt;br&gt;
From: Damian Johnson &lt;&lt;a \
                href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
                
Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port&lt;br&gt;
Message-ID:&lt;br&gt;
            &lt;&lt;a href="mailto:CAJdkzEM-7SNN8JhN%2B93_5uFkvJ_vZRLRWCfRv4ATaCUBGYxNPQ@ \
mail.gmail.com"&gt;CAJdkzEM-7SNN8JhN+93_5uFkvJ_&lt;wbr&gt;vZRLRWCfRv4ATaCUBGYxNPQ@mail.&lt;wbr&gt;gmail.com&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="UTF-8"&lt;br&gt;
&lt;br&gt;
Hi David, great proposal! Sorry I'm juggling too many things right now&lt;br&gt;
to really really review it. Quick skim though looks great. One quick&lt;br&gt;
thought is that the HS_DESC event has an optional positional argument&lt;br&gt;
(DescriptorID). This is fine *but* I'd advise against it since it will&lt;br&gt;
prevent you from ever adding more positional arguments in the future.&lt;br&gt;
Making it a key=value argument instead sidesteps this.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
On Mon, Nov 6, 2017 at 6:59 AM, David Goulet &lt;&lt;a \
href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; Hi \
everyone,&lt;br&gt; &gt;&lt;br&gt;
&gt; Attached is the proposal draft for the hidden service v3 contro port&lt;br&gt;
&gt; specification.&lt;br&gt;
&gt;&lt;br&gt;
&gt; The idea with this proposal is to _only_ extend the current commands and&lt;br&gt;
&gt; events to v3. Nothing new is added. We can think of more things to add after&lt;br&gt;
&gt; but for now, I wanted a baseline to start with that is only extending what&lt;br&gt;
&gt; exists.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Any kind of feedbacks is welcome! :)&lt;br&gt;
&gt;&lt;br&gt;
&gt; Cheers!&lt;br&gt;
&gt; David&lt;br&gt;
&gt;&lt;br&gt;
&gt; --&lt;br&gt;
&gt; Zu3IyL4LcdnKNkQIZqEqaTNUapUEJF&lt;wbr&gt;dEcN02dPwo5FQ=&lt;br&gt;
&gt;&lt;br&gt;
&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 4&lt;br&gt;
Date: Mon, 06 Nov 2017 22:35:32 +0400&lt;br&gt;
From: meejah &lt;&lt;a href="mailto:meejah@meejah.ca"&gt;meejah@meejah.ca&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
                
Subject: Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:86h8u7gsqz.fsf@atlantis.meejah.ca"&gt;86h8u7gsqz.fsf@atlantis.&lt;wbr&gt;meejah.ca&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset=us-ascii&lt;br&gt;
&lt;br&gt;
David Goulet &lt;&lt;a href="mailto:dgoulet@ev0ke.net"&gt;dgoulet@ev0ke.net&lt;/a&gt;&gt; \
writes:&lt;br&gt; &lt;br&gt;
Hi David,&lt;br&gt;
&lt;br&gt;
Overall looks good! A few comments inline:&lt;br&gt;
&lt;br&gt;
&gt;         "onions/{current,detached}"&lt;br&gt;
&gt;            No change. This command can support v3 hidden service without \
changes&lt;br&gt; &gt;            returning v3 address(es).&lt;br&gt;
&lt;br&gt;
Does the control-spec need a note pointing out that you might get some&lt;br&gt;
"longer" (v3) addresses?&lt;br&gt;
&lt;br&gt;
&gt; 3.1.3. ADD_ONION&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For this command to support version 3, new values are added but the \
syntax&lt;br&gt; &gt;      is unchanged:&lt;br&gt;
&gt;&lt;br&gt;
&gt;         "ADD_ONION" SP KeyType ":" KeyBlob&lt;br&gt;
&gt;                           [SP "Flags=" Flag *("," Flag)]&lt;br&gt;
&gt;                           1*(SP "Port=" VirtPort ["," \
Target])&lt;br&gt; &gt;                           *(SP "ClientAuth=" ClientName \
[":" ClientBlob]) CRLF&lt;br&gt; &gt;&lt;br&gt;
&gt;      New "KeyType" value to "ED25519-V3" which identifies \
the key type to be a&lt;br&gt; &gt;      v3 ed25519 key.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      New "KeyBlob" value to support the new "ED25519-V3", if \
specified, will&lt;br&gt; &gt;      generate a new ed25519 private key.&lt;br&gt;
&lt;br&gt;
This might need a couple more details; as-is ADD_ONION can take&lt;br&gt;
"NEW:BEST" (which should now return a v3 service?) or \
"NEW:ED25519-V3"&lt;br&gt; for explicitly asking for a V3 key, or \
"ED25519-V3:&lt;56 base32 chars&gt;"&lt;br&gt; for adding an already-existing v3 \
service.&lt;br&gt; &lt;br&gt;
&gt;      Because client authentication is not yet implemented, the \
"ClientAuth"&lt;br&gt; &gt;      field is ignored as well as \
"Flags=BasicAuth".&lt;br&gt; &lt;br&gt;
I think these should generate a 500-level error (if used for a v3&lt;br&gt;
service) instead of being ignored. That is, if you try to use auth with&lt;br&gt;
v3, you get an error.&lt;br&gt;
&lt;br&gt;
&gt;      For this event to support vesrion 3, one optional field and new&lt;br&gt;
&gt;      values are added:&lt;br&gt;
&lt;br&gt;
I echo Damian's comments on the positional-arg; making it [SP&lt;br&gt;
"DescriptorID=" ] or similar (i.e. an optional kwarg) would mean easier&lt;br&gt;
later extending and also it *should* then "just work" with most&lt;br&gt;
controller libs already at least as far as parsing goes (because&lt;br&gt;
controller libs in general have to accept new, unknown kwargs).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The rest all sounds good to me!&lt;br&gt;
&lt;br&gt;
thanks,&lt;br&gt;
meejah&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 5&lt;br&gt;
Date: Mon, 6 Nov 2017 16:12:51 -0800&lt;br&gt;
From: Damian Johnson &lt;&lt;a \
                href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
                
Subject: [tor-dev] Fwd: Nyx 2.0 Release&lt;br&gt;
Message-ID:&lt;br&gt;
            &lt;&lt;a href="mailto:CAJdkzENPe6hOpoBSmrj5Ax-_wFBBtVuX2aB5KaW7bBjvqMZB1Q@ma \
il.gmail.com"&gt;CAJdkzENPe6hOpoBSmrj5Ax-_&lt;wbr&gt;wFBBtVuX2aB5KaW7bBjvqMZB1Q@&lt;wbr&gt;mail.gmail.com&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="UTF-8"&lt;br&gt;
&lt;br&gt;
Hi tor-dev. Sorry for the cross post but while tor-relays@ is the&lt;br&gt;
perfect spot to announce Nyx, tor-dev@ is the traditional place to&lt;br&gt;
unveil Stem.&lt;br&gt;
&lt;br&gt;
I'm pleased to announce Stem 1.6, the accumulation of a full year of&lt;br&gt;
improvements for our controller library...&lt;br&gt;
&lt;br&gt;
&lt;a href="https://stem.torproject.org/change_log.html#version-1-6" rel="noreferrer" \
target="_blank"&gt;https://stem.torproject.org/&lt;wbr&gt;change_log.html#version-1-6&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; Besides features such as descriptor creation and ed25519 support the&lt;br&gt;
main highlight for this release is performance tuning. Descriptor&lt;br&gt;
parsing is ~25% faster and low-level control socket handling got some&lt;br&gt;
special attention.&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;br&gt;
---------- Forwarded message ----------&lt;br&gt;
From: Damian Johnson &lt;&lt;a \
                href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;br&gt;
Date: Mon, Nov 6, 2017 at 3:41 PM&lt;br&gt;
Subject: Nyx 2.0 Release&lt;br&gt;
To: &lt;a href="mailto:tor-relays@lists.torproject.org"&gt;tor-relays@lists.torproject.&lt;wbr&gt;org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
Hi all, after years of being in the works I'm pleased to announce Nyx!&lt;br&gt;
A long overdue modernization of arm.&lt;br&gt;
&lt;br&gt;
&lt;a href="http://blog.atagar.com/nyx-release-2-0/" rel="noreferrer" \
target="_blank"&gt;http://blog.atagar.com/nyx-&lt;wbr&gt;release-2-0/&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://nyx.torproject.org/" rel="noreferrer" \
target="_blank"&gt;https://nyx.torproject.org/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
Even more important for our controller space at large, Nyx is coming&lt;br&gt;
hand-in-hand with Stem 1.6. A full year of improvements that include&lt;br&gt;
descriptor creation support, ed25519 certificates, performance tuning,&lt;br&gt;
and much, much more...&lt;br&gt;
&lt;br&gt;
&lt;a href="https://stem.torproject.org/change_log.html#version-1-6" rel="noreferrer" \
target="_blank"&gt;https://stem.torproject.org/&lt;wbr&gt;change_log.html#version-1-6&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; Cheers! -Damian&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Subject: Digest Footer&lt;br&gt;
&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
End of tor-dev Digest, Vol 82, Issue 8&lt;br&gt;
******************************&lt;wbr&gt;********&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171109122400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-11-09 12:24:00-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; I added your note to Sebastian's ticket about publishing key expiry
&gt; information in descriptors. I like Sebastian's idea but I also agree to
&gt; your opt-in remark - which means that we will likely not get much data
&gt; at all (how many relay operators will opt-in vs. the effort to make that
&gt; possible).

I should include an URL to Sebastian's ticket:

https://trac.torproject.org/projects/tor/ticket/24194


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171109171401</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-11-09 17:14:01-0400</timestampReceived><subject>Re: [tor-dev] Proposal 284: Hidden Service v3 Control Port</subject><body>

[Attachment #2 (multipart/signed)]


On 10 Nov (04:06:55), teor wrote:
&gt; 
&gt; &gt; On 10 Nov 2017, at 03:17, Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt; &gt; 
&gt; &gt; On Thu, 9 Nov 2017 10:13:45 -0500
&gt; &gt; David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt;&gt;&gt;&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt; &gt;&gt;&gt;&gt; updated.
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt;    "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt; ... which contains the ed25519 private key.  
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; If it were up to me, I'd spec the blob as opaque, and then actually
&gt; &gt;&gt;&gt; use something that's sensible and consistent with the torrc and on
&gt; &gt;&gt;&gt; disk files for easy interoperability like Base64 of the private key
&gt; &gt;&gt;&gt; (I haven't check to see what encoding is used for on disk EdDSA
&gt; &gt;&gt;&gt; keys, I assume PEM).  
&gt; &gt;&gt; 
&gt; &gt;&gt; Unfortunately not, it is custom to tor I believe with this 32 bytes
&gt; &gt;&gt; header:
&gt; &gt;&gt; 
&gt; &gt;&gt;    "== ed25519v1-secret: type0 ==\0\0\0"
&gt; &gt;&gt; 
&gt; &gt;&gt; ... followed by the private key (64 bytes). See
&gt; &gt;&gt; crypto_write_tagged_contents_to_file().
&gt; &gt;&gt; 
&gt; &gt;&gt; Not sure we can change that within the 032 freeze. So the approach
&gt; &gt;&gt; would be to Base64 the raw bytes of the key (excluding the header).
&gt; &gt;&gt; Using tor HS key file, it would be something like:
&gt; &gt;&gt; 
&gt; &gt;&gt;    $ tail -c+33 hs_ed25519_secret_key | base64 -w 0
&gt; &gt;&gt; 
&gt; &gt;&gt; Considering the current situation with the encoded file on disk of
&gt; &gt;&gt; the key, I think this is kind of the simplest approach?
&gt; &gt; 
&gt; &gt; Show Quoted Content
&gt; &gt;&gt;&gt;&gt; Ok fun! I'll add this. Good catch! And control-spec.txt should be
&gt; &gt;&gt;&gt;&gt; updated.
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt; To be consistent then we could ask for a &lt;Base64 Blob&gt; as well:
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt;    "ED25519-V3:&lt;Base64 Blob&gt;"
&gt; &gt;&gt;&gt;&gt; 
&gt; &gt;&gt;&gt;&gt; ... which contains the ed25519 private key.  
&gt; &gt;&gt;&gt; 
&gt; &gt;&gt;&gt; If it were up to me, I'd spec the blob as opaque, and then actually
&gt; &gt;&gt;&gt; use something that's sensible and consistent with the torrc and on
&gt; &gt;&gt;&gt; disk files for easy interoperability like Base64 of the private key
&gt; &gt;&gt;&gt; (I haven't check to see what encoding is used for on disk EdDSA
&gt; &gt;&gt;&gt; keys, I assume PEM).  
&gt; &gt;&gt; 
&gt; &gt;&gt; Unfortunately not, it is custom to tor I believe with this 32 bytes
&gt; &gt;&gt; header:
&gt; &gt;&gt; 
&gt; &gt;&gt;    "== ed25519v1-secret: type0 ==\0\0\0"
&gt; &gt;&gt; 
&gt; &gt;&gt; ... followed by the private key (64 bytes). See
&gt; &gt;&gt; crypto_write_tagged_contents_to_file().
&gt; &gt;&gt; 
&gt; &gt;&gt; Not sure we can change that within the 032 freeze. So the approach
&gt; &gt;&gt; would be to Base64 the raw bytes of the key (excluding the header).
&gt; &gt;&gt; Using tor HS key file, it would be something like:
&gt; &gt;&gt; 
&gt; &gt;&gt;    $ tail -c+33 hs_ed25519_secret_key | base64 -w 0
&gt; &gt;&gt; 
&gt; &gt;&gt; Considering the current situation with the encoded file on disk of
&gt; &gt;&gt; the key, I think this is kind of the simplest approach?
&gt; &gt; 
&gt; &gt; 
&gt; &gt; Yeah.  Just the Base64ed private key (excluding that header and things)
&gt; &gt; seems reasonable.
&gt; 
&gt; Do we accept base64 with padding? Without padding?
&gt; (We should accept both - we know how long the key is.)
&gt; 
&gt; Do we generate it with or without padding?
&gt; (We should follow whatever we do with RSA.)

It follows the tor base64 API so basically padding is added when encoding and
padding or not when decoding is working.

Because we know the size of the keys, tor expects a specific byte size
(padding or not).

This is what the RSA base64 encoding/decoding does.

David

&gt; 
&gt; T

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
jwMAzSbdAk2gz6mB7hJP3u/fieOzZS9dPqwPXXmyVoc=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171111050309</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-11 05:03:09-0400</timestampReceived><subject>Re: [tor-dev] Question on Tor Design (current and maybe past and future)</subject><body>

&gt; https://www.torproject.org/docs/documentation.html.en#DesignDoc
&gt; https://spec.torproject.org/
&gt; https://gitweb.torproject.org/torspec.git/tree/
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals
&gt; https://trac.torproject.org/projects/tor/report/12
&gt; https://lists.torproject.org/pipermail/tor-project/2017-November/001564.html

There was someone in dev / talk maybe ~2 years ago that
wrote up a rather complete overview that got a lot of +1 from
people, think it ended up in pdf format. You could search
back for pdf links and maybe find it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171115131448</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-15 13:14:48-0400</timestampReceived><subject>Re: [tor-dev] Understanding the guard/md issue (#21969)</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hey Tim,
&gt;

OK updates here.

We merged #23895 and #23862 to 032 and master.

#23817 is now in needs_review and hopefully will get in the next 032 alpha.
I think this next alpha should be much better in terms of mds.

Next tickets in terms of importance should probably be #23863 and #24113.
I have questions/feedback in both of them, and I'm ready to move in.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171116141025</emailId><senderName>heddha</senderName><senderEmail>heddha@unicorn.university</senderEmail><timestampReceived>2017-11-16 14:10:25-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal #2: Encrypted bookmarks for onions</subject><body>

Hello George, Hello List,

I'm currently working on a Uni project where we tried to implement 3 of
the solutions suggested in the article you mentioned below. I
implemented the bookmarks idea (2.5). You can find the code here:

https://github.com/heddha/OnionPetnames

I implemented it as a webextension, not as part of the native bookmarks.
The entries can be exported and imported; the exported file is
aes-encrypted with a password; I used the cryptojs-library for that. The
import function has its bugs, as a webextension closes itself
automagically when another window (e.g. to select a file) is opened; I
used a workaround that's very dirty, maybe someone has a better idea?

I'd be very happy if this helped with the problem!

Kind regards,

heddha


On 16/11/17 13:52, George Kadianakis wrote:
&gt; Hello,
&gt;
&gt; here is another onion-related UX improvement proposal. We still don't
&gt; have a plan for how to concretely fix the onion naming issue, and we
&gt; recently released next gen onions so names just got bigger. Ideally we
&gt; should start experimenting with solutions sooner than later (also see
&gt; https://blog.torproject.org/cooking-onions-names-your-onions).
&gt;
&gt; I think a local-solution akin to bookmarks makes sense to start with, s=
o
&gt; I opened a trac ticket today about encrypted bookmarks on Tor Browser:
&gt;   https://trac.torproject.org/projects/tor/ticket/24310
&gt;
&gt; Please let me know if you are aware of firefox addon projects that do
&gt; encrypted bookmarks that we could use or start basing our work on.
&gt;
&gt; Cheers!
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["0x3172FCAF.asc" (application/pgp-keys)]
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171116141041</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2017-11-16 14:10:41-0400</timestampReceived><subject>Re: [tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


On 16 Nov (09:06:03), Nick Mathewson wrote:
&gt; On Thu, Nov 16, 2017 at 8:56 AM, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; &gt;
&gt; &gt; On 15 Nov (13:49:54), Nick Mathewson wrote:
&gt; 
&gt;  [...]
&gt; &gt;
&gt; &gt; &gt; On the other hand, this doesn't mean that the FIFO structure we have today
&gt; &gt; &gt; is a good idea at all.  It probably makes sense to use the same priority
&gt; &gt; &gt; queue-based scheduler thing that we use everywhere else, but possibly with
&gt; &gt; &gt; a different (inverted??) priority parameter for destroyed circuits.
&gt; &gt;
&gt; &gt; (We kind of need the FIFO concept for cells afaict because of the parent
&gt; &gt; relationship between cells with their digest (à la git). And that is of course
&gt; &gt; per circuit.)
&gt; &gt;
&gt; 
&gt; Are you sure?  DESTROY cells aren't relay cells; they don't have relay
&gt; crypto done to them, and I think it's okay to re-order them with
&gt; respect to other cells.  I don't think they have a digest on them, do
&gt; they?

OH sorry I thought you were talking about normal circuit queue here... I
mis-read.

But yes, as I mentionned in this email after, moving to a prio queue for
instance has starvation implication.

Sorry!
David

&gt; 
&gt; peace,
&gt; -- 
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

-- 
G5KCdRxFvQYxoWyaIKqONQDGxWeZWspNjvaPIbpYFtQ=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171117203305</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-17 20:33:05-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt; &gt; 
&gt; &gt; On 16 Nov 2017, at 00:38, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; I think it's important to point out that a Tor client is never
&gt; &gt; &gt; guaranteed to hold a *definitive* consensus.
&gt; &gt; &gt; 
&gt; &gt; That's why I say "(mostly) definitive" in my text - my feeling is that a \
&gt; &gt; locally-held copy of the consensus to be queried is going to be on average of far \
&gt; &gt; higher quality, completeness, and non-stagnancy than something that one tries to \
&gt; &gt; scrape out of Onionoo every 15 minutes.
&gt; 
&gt; Please don't use a consensus or a tor client to check for exits for
&gt; this purpose. It produces significant numbers of false negatives,
&gt; because some exits use other IP addresses for their exit traffic.
&gt; 

I'm actually not a fan of Alec's idea, and I agree with you that there
will be a significant number of false negatives, but it might be worth
pointing out that IIUC false negatives are probably not so damaging in
this use case, because it would result in users getting thrown to the
normal website instead of the onion site, because the website didn't
realize they are Tor users. So not much damage done there.

False positives are a bit more damaging for reachability because it
means that the website would throw normal users to the onion website
which would fail, but that's not so likely (except if exit node
operators surf from their exit node, or if an exit node IP is shared to
other people).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171118230811</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2017-11-18 23:08:11-0400</timestampReceived><subject>Re: [tor-dev] Detecting multi-homed exit relays (was: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

&gt;&gt; Detecting exit nodes is error prone, as you point out. Some exit nodes
&gt;&gt; have their traffic exit a different address than their listening
&gt;&gt; port. Hey does Exonerator handle these?
&gt;
&gt; Right.  It's not trivial for tor to figure out what exit relays are
&gt; multi-homed -- at least not without actually establishing circuits and
&gt; fetching content over each exit relay.
&gt;
&gt; I just finished an exitmap scan and found 17
&gt; exit relays that exit from
&gt; an IP address that is different from what's listed in the consensus:

This mode of operation, regardless of how it happens, is not in
itself a problem, nor cause for alarm. In fact, the nature of these
"exit IP different than ORPort" relays can and often does assist
users in circumventing censorship... a fundamental use case of Tor.
For instance, the arbitrary automated and blind blocking via dumb
blocklists that prevent even such most basic user activity and human
right to knowledge as simply reading websites via Tor. Such blocking
examples can often be found here:
https://trac.torproject.org/projects/tor/wiki/org/doc/ListOfServicesBlockingTor

It's also entirely up to the exit operator to determine if the
third party non contractual / SLA exonerator service is of any
particular use or benefit to them or not... perhaps they have other
notary means, or are immune or not subject to any such legal or
jurisdictional issues, for which it becomes moot.

Similarly, realtime TorDNSEL and the like could be considered
to be censorship enabling tools.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171120120300</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-11-20 12:03:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; On 2017-11-17 21:29, Georg Koppen wrote:
&gt; &gt; Karsten Loesing:
&gt; &gt; &gt; Hello everyone,
&gt; &gt; &gt; 
&gt; &gt; &gt; we, the Tor Metrics Team, have finished writing our roadmap for the 12
&gt; &gt; &gt; months between October 2017 and September 2018:
&gt; &gt; &gt; 
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/raw-attachment/wiki/org/teams/MetricsTeam/metrics-team-roadmap-2017-11-17.pdf
&gt; &gt; &gt;  
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/wiki/org/teams/MetricsTeam#RoadmapfromOctober2017toSeptember2018
&gt; &gt; &gt;  
&gt; &gt; &gt; In the process of writing this roadmap we incorporated feedback from
&gt; &gt; &gt; various people in the Tor community, including suggestions made on this
&gt; &gt; &gt; list.
&gt; &gt; &gt; 
&gt; &gt; &gt; And if something didn't make it on this year's roadmap, we made a note
&gt; &gt; &gt; to reconsider in about a year from now.
&gt; &gt; 
&gt; &gt; Hm. There are teams like the Tor Browser people who are doing roadmaps
&gt; &gt; only from dev meeting to dev meeting, meaning for 6 months. Actually,
&gt; &gt; that 6 months or dev-meeting to dev-meeting roadmapping is exactly what
&gt; &gt; Isabela said we (should) do in
&gt; &gt; https://lists.torproject.org/pipermail/tor-project/2017-November/001564.html:
&gt; &gt; 
&gt; &gt; """
&gt; &gt; - Next Tor Meeting is arriving, we do the balance of what we have
&gt; &gt; finished, what we will carry on and start selecting tasks for the next
&gt; &gt; roadmap we will be building at the next Tor Meeting.
&gt; &gt; """
&gt; &gt; 
&gt; &gt; So I wonder how this fits into your model. I am especially concerned
&gt; &gt; about stuff that comes up at the next dev meeting that would be a
&gt; &gt; concern for the metrics team as it seems to me, reading what you wrote
&gt; &gt; above, that it would not be considered for the roadmap for the current
&gt; &gt; year but rather would have to wait for the year thereafter.
&gt; 
&gt; I'm optimistic that we'd be able (and willing!) to make room for such needs.
&gt; 
&gt; I just said (or meant to say) that we included some, but not all
&gt; suggestions we received over the past few weeks, and that we're going to
&gt; reconsider adding the ones we did not include now in next year's roadmap.
&gt; 
&gt; Note that we picked 12 months as timeframe, not 6, because that seemed
&gt; to make more sense at the time we started writing this roadmap in
&gt; September 2017. The idea was to generate input for the fundraising team,
&gt; and my understanding was that a 6 month timeframe wouldn't be enough for
&gt; that.
&gt; 
&gt; Hope this makes sense.

It does. Thanks for these clarifications.

Georg

&gt; &gt; Georg
&gt; 
&gt; All the best,
&gt; Karsten
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171120132928</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-11-20 13:29:28-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 4.3-1.7.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Onionoo's protocol was extended and has a minor version jump to 4.3.

In addition, this release *prepares* a major *upcoming version* jump 5.0.
Take note of the field "next_major_version_scheduled":"2017-12-17" in documents.

Download available at:
     https://dist.torproject.org/onionoo/4.3-1.7.1/

Protocol changes (also summarized in [0]):
Added support for a new "host_name" parameter to filter by host name and a new 
"unreachable_or_addresses" field with declared but unreachable OR addresses [1].

The changes are already deployed on all onionoo.torproject.org instances.

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions_4_3
[1] https://metrics.torproject.org/onionoo.html#details_relay_unreachable_or_addresses
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171120232239</emailId><senderName>Katherine Li</senderName><senderEmail>katherineli.tor@gmail.com</senderEmail><timestampReceived>2017-11-20 23:22:39-0400</timestampReceived><subject>Re: [tor-dev] GAEuploader now supports Windows</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Tor-Dev Community,

GAE(Google App Engine) uploader now supports Windows, in addition to Mac
and Linux.

GAEuploader automates the process of uploading the meek code to App Engine.
If you already have a Google account, it's pretty easy: the program will
open a browser so you can authenticate and accept the App Engine terms of
service, then upload the code under a domain name you choose. At the end,
GAEuploader prints out a bridge line to paste into Tor Browser. The
difference between this and the old meek-google is that the App Engine code
you upload is just for you, not shared with anyone else.

I would really appreciate user testing on GAEuploader. You can download it
at: https://github.com/katherinelitor/GAEuploader/releases
README: https://github.com/katherinelitor/GAEuploader
Tor wiki page, containing step-by-step screenshots of how to use:
https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader

If you have any questions, feedback or bug reports, please email me at
katherineli.tor@gmail.com. I will respond promptly.

Best,
Katherine Li
On Sun, Jan 22, 2017 at 3:53 PM, Katherine Li &lt;katherineli.tor@gmail.com&gt;
wrote:

&gt; Hello Tor-Dev Community,
&gt;
&gt; GAE(Google App Engine) uploader has just released v1.0-beta. GAEuploader
&gt; enables clients to set up their own private meek-google in one easy step:
&gt; just run it and paste the bridge line into Tor Browser.
&gt;
&gt; Background information: Meek
&gt; &lt;https://trac.torproject.org/projects/tor/wiki/doc/meek#Overview&gt; is
&gt; pluggable transport that uses domain fronting. Meek-google got suspended
&gt; &lt;https://lists.torproject.org/pipermail/tor-talk/2016-June/041699.html&gt;,
&gt; but clients can set up their own Google App Engine app and configure their
&gt; Tor Browser accordingly. However, the process of creating and deploying the
&gt; Google App Engine can be confusing. GAEuploader significantly simplifies
&gt; this process for clients.
&gt;
&gt; I would really appreciate user testing on GAEuploader. You can download it
&gt; at: https://github.com/katherinelitor/GAEuploader/releases
&gt; README: https://github.com/katherinelitor/GAEuploader
&gt; Tor wiki page, containing step-by-step screenshots of how to use:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader
&gt;
&gt; *GAEuploader runs on Mac or Linux, but currently does not support Windows.
&gt; *GAEuploader uses the Google Cloud SDK
&gt; &lt;https://cloud.google.com/sdk/docs/#linux&gt;. If you are interested in how
&gt; GAEuploader works, the README contains the list of commands that were run.
&gt;
&gt; If you have any questions, feedback or bug reports, please email me at
&gt; katherineli.tor@gmail.com. I will respond promptly.
&gt;
&gt; Best,
&gt; Katherine Li
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span style="font-size:12.8px"&gt;Hello  &lt;/span&gt;&lt;span \
class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;Tor&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;-&lt;/span&gt;&lt;span class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;Dev&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  Community,&lt;/span&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;GAE(Google App Engine) uploader now supports Windows, in \
addition to Mac and Linux.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;GAEuploader&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  automates the  &lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;process of uploading the meek code to App Engine. If you \
already have a  &lt;/span&gt;&lt;span style="font-size:12.8px"&gt;Google account, it's pretty \
easy: the program will open a browser so you  &lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;can authenticate and accept the App Engine terms of service, \
then upload  &lt;/span&gt;&lt;span style="font-size:12.8px"&gt;the code under a domain name you \
choose. At the end,  &lt;/span&gt;&lt;span class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;GAEuploader&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  prints  &lt;/span&gt;&lt;span style="font-size:12.8px"&gt;out a bridge \
line to paste into  &lt;/span&gt;&lt;span class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;Tor&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  Browser.  &lt;/span&gt;&lt;span style="font-size:12.8px"&gt;The \
difference between this and the old meek-google is that the App  &lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;Engine code you upload is just for you, not shared with \
anyone else.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="font-size:12.8px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;I would \
really appreciate user testing on  &lt;/span&gt;&lt;span class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;GAEuploader&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;. You can download it at:&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  &lt;/span&gt;&lt;a \
href="https://github.com/katherinelitor/GAEuploader/releases" rel="noreferrer" \
style="font-size:12.8px" target="_blank"&gt;https://github.com/katheri&lt;wbr&gt;nelitor/&lt;span \
class="m_-378593243236077418gmail-il"&gt;GAEuploader&lt;/span&gt;/releases&lt;/a&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span style="font-size:12.8px"&gt;README:  &lt;/span&gt;&lt;a \
href="https://github.com/katherinelitor/GAEuploader" rel="noreferrer" \
style="font-size:12.8px" target="_blank"&gt;https://github.com/kat&lt;wbr&gt;herinelitor/&lt;span \
class="m_-378593243236077418gmail-il"&gt;GAEuploader&lt;/span&gt;&lt;/a&gt;&lt;br \
style="font-size:12.8px"&gt;&lt;span class="m_-378593243236077418gmail-il" \
style="font-size:12.8px;background-color:rgb(255,255,255)"&gt;Tor&lt;/span&gt;&lt;span \
style="font-size:12.8px"&gt;  wiki page, containing step-by-step screenshots of how to \
use:  &lt;/span&gt;&lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader" \
rel="noreferrer" style="font-size:12.8px" \
target="_blank"&gt;https://trac.torproject.o&lt;wbr&gt;rg/projects/&lt;span \
class="m_-378593243236077418gmail-il"&gt;tor&lt;/span&gt;/wiki/doc/GAEup&lt;wbr&gt;loader&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
class="gmail_extra"&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;If you have any questions, feedback or bug reports, please \
email me at  &lt;a href="mailto:katherineli.tor@gmail.com" \
target="_blank"&gt;katherineli.tor@gmail.com&lt;/a&gt;. I will respond promptly.&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Best,&lt;br&gt;Katherine Li&lt;/p&gt;&lt;div class="gmail_quote"&gt;On Sun, \
Jan 22, 2017 at 3:53 PM, Katherine Li &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:katherineli.tor@gmail.com" \
target="_blank"&gt;katherineli.tor@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Hello Tor-Dev Community,&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;GAE(Google App Engine) uploader has just released v1.0-beta. \
GAEuploader enables clients to set up their own private meek-google in one easy step: \
just run it and paste the bridge line into Tor Browser.&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Background information:  &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/meek#Overview" \
target="_blank"&gt;Meek&lt;/a&gt;  is pluggable transport that uses domain fronting.  &lt;a \
href="https://lists.torproject.org/pipermail/tor-talk/2016-June/041699.html" \
target="_blank"&gt;Meek-google got suspended&lt;/a&gt;, but clients can set up their own \
Google App Engine app and configure their Tor Browser accordingly. However, the \
process of creating and deploying the Google App Engine can be confusing. GAEuploader \
significantly simplifies this process for clients.&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;I would really appreciate user testing on GAEuploader. You \
can download it at:&lt;span style="font-size:12.8px"&gt;  &lt;/span&gt;&lt;a \
href="https://github.com/katherinelitor/GAEuploader/releases" rel="noreferrer" \
style="font-size:12.8px" \
target="_blank"&gt;https://github.com/katheri&lt;wbr&gt;nelitor/GAEuploader/releases&lt;/a&gt;&lt;br&gt;README: \
&lt;a href="https://github.com/katherinelitor/GAEuploader" rel="noreferrer" \
style="font-size:12.8px" \
target="_blank"&gt;https://github.com/kat&lt;wbr&gt;herinelitor/GAEuploader&lt;/a&gt;&lt;br&gt;Tor wiki \
page, containing step-by-step screenshots of how to use:  &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/GAEuploader" rel="noreferrer" \
style="font-size:12.8px" \
target="_blank"&gt;https://trac.torproject.o&lt;wbr&gt;rg/projects/tor/wiki/doc/GAEup&lt;wbr&gt;loader&lt;/a&gt;&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;*GAEuploader runs on Mac or Linux, but currently does not \
support Windows.&lt;br&gt;&lt;span style="font-size:12.8px"&gt;*GAEuploader uses the  &lt;/span&gt;&lt;a \
href="https://cloud.google.com/sdk/docs/#linux" style="font-size:12.8px" \
target="_blank"&gt;Google Cloud SDK&lt;/a&gt;&lt;span style="font-size:12.8px"&gt;. If you are \
interested in how GAEuploader works, the README contains the list of commands that \
were run.&lt;/span&gt;&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;If you have any questions, feedback or bug reports, please \
email me at  &lt;a href="mailto:katherineli.tor@gmail.com" \
target="_blank"&gt;katherineli.tor@gmail.com&lt;/a&gt;. I will respond promptly.&lt;/p&gt;&lt;p \
class="m_-378593243236077418gmail-m_-9067021452512720825gmail-m_5175060898888996723gmail-m_6601162309750765095gmail-p1" \
style="font-size:12.8px"&gt;Best,&lt;br&gt;Katherine Li&lt;/p&gt;&lt;/div&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171121133752</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-21 13:37:52-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Move IPv6 ORPorts to the Microdesc Consensus</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 2 Nov 2017, at 07:22, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; &gt; On Tue, Oct 24, 2017 at 11:35 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; Hi all,
&gt; &gt; 
&gt; &gt; We would like to move IPv6 ORPorts from microdescriptors to the
&gt; &gt; microdesc consensus. This makes it easier for IPv6 clients to bootstrap
&gt; &gt; and choose reachable guards.
&gt; &gt; 
&gt; &gt; The proposal is inlined below, it is also available with the corresponding
&gt; &gt; dir-spec updates in my torspec branch bug23826-23828 on GitHub:
&gt; &gt; 
&gt; &gt; https://github.com/teor2345/torspec.git
&gt; &gt; 
&gt; &gt; The tor code that implements these new consensus methods is in my tor
&gt; &gt; branch on bug23826-23828 on GitHub:
&gt; &gt; 
&gt; &gt; https://github.com/teor2345/tor.git
&gt; &gt; 
&gt; &gt; The parent ticket for these related changes is #20916. The code changes are
&gt; &gt; being tracked in #23826 and #23828, and the spec changes and proposal in
&gt; &gt; #23898:
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/20916
&gt; &gt; 
&gt; &gt; If we've spoken about this, and I've left you out as an author, please let
&gt; &gt; me know!

&gt; Hi, Tim!  I promised you a quick review  here, so here goes.  I have some \
&gt; questions, but nothing looks like a showstopper here.

Hi Nick, sorry it's taken me so long to reply - some more urgent tasks came up!

I've revised the proposal in my bug23826-23828-v2 branch on GitHub:
https://github.com/teor2345/torspec/blob/bug23826-23828-v2/proposals/283-ipv6-in-micro-consensus.txt


&gt; &gt; Here is the proposal text:
&gt; &gt; 
&gt; &gt; Filename: xxx-ipv6-in-micro-consensus.txt
&gt; &gt; Title: Move IPv6 ORPorts from microdescriptors to the microdesc consensus
&gt; &gt; Author: Tim Wilson-Brown (teor)
&gt; &gt; Created: 18-Oct-2017
&gt; &gt; Status: Open
&gt; &gt; Target: 0.3.3.x
&gt; &gt; 
&gt; &gt; 1. Summary
&gt; &gt; 
&gt; &gt; Moving IPv6 ORPorts from microdescs to the microdesc consensus will make
&gt; &gt; it easier for IPv6 clients to bootstrap and select reachable guards.
&gt; &gt; 
&gt; &gt; Since consensus method 14, authorities have voted for IPv6 address/port
&gt; &gt; pairs (ORPorts) in "a" lines. Unreachable IPv6 ORPorts are dropped from the
&gt; &gt; full consensus. But for clients that use microdescriptors (the default),
&gt; &gt; IPv6 ORPorts are placed in microdescriptors. So these clients can only tell
&gt; &gt; if an IPv6 ORPort is unreachable when a majority of voting authorities
&gt; &gt; mark the relay as not Running.
&gt; &gt; 
&gt; &gt; This proposal puts reachable relay IPv6 ORPorts in an "a" line in the
&gt; &gt; microdesc consensus. This allows clients to discover unreachable IPv6
&gt; &gt; ORPorts, even if a minority of voting authorities set
&gt; &gt; AuthDirHasIPv6Connectivity 1.
&gt; &gt; 
&gt; To me, this motivation makes a little less sense than the bootstrapping \
&gt; improvements in 4.3 do.

I added the bootstrapping improvements to the summary, and edited the
unreachable bit to make it shorter.

&gt; Don't get me wrong: it's cool that we can get IPv6 online-ness detection "for free" \
&gt; on existing clients... but there are other ways we could IPv6 online-status \
&gt; advertising too (like a status flag,

Yes, like NoEdConsensus.

&gt; or conditionally omitting "a" lines from microdescriptors,

No, we can't do that: microdescriptors are a deterministic transform from
descriptors. They only depend on the consensus method.

&gt; or something else).
&gt; 
&gt; But the bootstrapping considerations discussed in 4.3 below are something we really \
&gt; _can't_ do without moving the "a" lines into the consensus.  So to my mind, that's \
&gt; the major reason we should do this.

Let me know if the new summary makes sense.

&gt; &gt; 2. Proposal
&gt; &gt; 
&gt; &gt; We add two new consensus methods, here represented as M and N (M &lt; N), to
&gt; &gt; be allocated when this proposal's implementation is merged. These consensus
&gt; &gt; methods move IPv6 ORPorts from microdescs to the microdesc consensus.
&gt; &gt; 
&gt; &gt; We use two different methods because this allows us to modify client code
&gt; &gt; based on each method. Also, if a bug is discovered in one of the methods,
&gt; &gt; authorities can be patched to stop voting for it, and then we can implement
&gt; &gt; a fix in a later method.
&gt; &gt; 
&gt; &gt; 2.1. Add Reachable IPv6 ORPorts to the Microdesc Consensus
&gt; &gt; 
&gt; &gt; We specify that microdescriptor consensuses created with methods M or later
&gt; &gt; contain reachable IPv6 ORPorts.
&gt; &gt; 
&gt; &gt; 2.2. Remove IPv6 ORPorts from Microdescriptors
&gt; &gt; 
&gt; &gt; We specify that microdescriptors created with methods N or later do not
&gt; &gt; contain any IPv6 ORPorts.

&gt; Let's say that with method N, we start omitting them.  Let's not say that we commit \
&gt; to omitting them forever.  Perhaps we will someday have a reason to put more "a" \
&gt; lines in microdescriptors again.

Done!

&gt; 
&gt; &gt; 3. Retaining Existing Behaviour
&gt; &gt; 
&gt; &gt; The following existing behaviour will be retained:
&gt; &gt; 
&gt; &gt; 3.1. Authority IPv6 Reachability
&gt; &gt; 
&gt; &gt; Only authorities configured with AuthDirHasIPv6Connectivity 1 will test
&gt; &gt; IPv6 ORPort reachability, and vote for IPv6 ORPorts.
&gt; &gt; 
&gt; &gt; This means that:
&gt; &gt; * if no voting authorities set AuthDirHasIPv6Connectivity 1, there will be
&gt; &gt; no IPv6 ORPorts in the consensus,
&gt; &gt; * if a minority of voting authorities set AuthDirHasIPv6Connectivity 1,
&gt; &gt; unreachable IPv6 ORPort lines will be dropped from the consensus, but the
&gt; &gt; relay will still be listed as Running,
&gt; &gt; * if a majority of voting authorities set AuthDirHasIPv6Connectivity 1,
&gt; &gt; relays with unreachable IPv6 ORPorts will be dropped from the consensus.
&gt; &gt; 
&gt; &gt; We will document this behaviour in the tor manual page, see #23870.

&gt; So, there's an alternative here: we could let the HasIPV6 authorities vote on a \
&gt; flag to indicate "reachable/unreachable with IPv6," and let all the authorities \
&gt; vote on the "a" lines.  Then, in the consensus, we could omit the "a" lines unless  \
&gt; the router has the reachable-with-ipv6 flag; and include them otherwise. 
&gt; This way, we wouldn't need to have a majority of IPv6 authorities in order to have \
&gt; meaningful "a" lines that tell you whether the router is reachable.  (But of \
&gt; course, the more we had, the more reliable the information would be.) 
&gt; This change could be done as part of consensus method M, I think.  Do you think \
&gt; it's worthwhile?

We already have meaningful "a" lines in the full consensus, because authorities only
vote on them when they are configured with AuthDirHasIPv6Connectivity 1 and when they
find the relay reachable. Otherwise, they don't vote on "a" lines.

And then when compute_routerstatus_consensus() tallies the votes, it ignores votes
without "a" lines, and chooses the most popular IPv6 address in the votes for the \
most popular descriptor.

I have updated the proposal and man page patch in #23826 to make this clearer.

Here's another alternative we discarded:

We could remove the IPv6 addresses from relays with unreachable IPv6 ORPorts, but \
keep their IPv4 addresses. I asked the directory authority operators, and their \
feedback was that it's better to mark a relay "not Running" if any of its ORPorts are \
unreachable or misconfigured.

&gt; &gt; 3.2. Full Consensus IPv6 ORPorts
&gt; &gt; 
&gt; &gt; The full consensus will continue to contain reachable IPv6 ORPorts.

&gt; By "full" consensus, do you mean "NS" consensus?  I don't think we use "full" \
&gt; elsewhere.

Oops.

I'll replace "full consensus" with "NS consensus" in the proposal.

&gt; &gt; 3.3. Clients that use Full Descriptors
&gt; &gt; 
&gt; &gt; Tor clients that use full descriptors already ignore unreachable IPv6
&gt; &gt; ORPorts, and have done so since at least 0.2.8.x.

&gt; Wow. I'd forgotten this.  How does this work?

Oh, apparently it doesn't.
(More precisely, it only works for IPv6-enabled authorities, because they have
their own non-consensus opinions about IPv6 addresses.)

I've deleted this section, and made minor edits to the rest of the proposal to
clarify.

&gt; &gt; 4. Impact and Related Changes
&gt; &gt; 
&gt; &gt; 4.1. Directory Authority Configuration
&gt; &gt; 
&gt; &gt; We will work to get a super-majority (75%) of authorities checking relay
&gt; &gt; IPv6 reachability, to avoid Running-flag flapping. To do this, authorities
&gt; &gt; need to get IPv6 connectivity, and set AuthDirHasIPv6Connectivity 1.

&gt; How far away are we from this today?

We have 5/9, and need 7/9, because the remaining 2 authorities will be a minority
in a 5-vote consensus. Realistically, we don't often get below 7, so 6/9 would
be sufficient for most consensuses.

Running-flag flapping is annoying, but it isn't too bad: if relays are only
included for a few consensuses, they won't get much bandwidth.

&gt; How long do the authority operators think it would take?

Good question!

I emailed the dir-auth list about IPv6 about a month ago, and since 23 October,
5/9 authorities have IPv6 available and configured.

For the remainder, you'll need to ask Roger, Micah, Sina, or Alex.
But I think they're moving as fast as they can.

Micah and Roger have had IPv6 before, but they don't have working IPv6 in their
networks at the moment.

Alternately, we could add a 10th authority with IPv6, which would give us 6/10,
which would be sufficient for most consensuses. And 7/10 would be a
super-majority.

&gt; &gt; 4.2. Relays and Bridges
&gt; &gt; 
&gt; &gt; Tor relays and bridges do not currently use IPv6 ORPorts from the
&gt; &gt; consensus.
&gt; &gt; 
&gt; &gt; We expect that 2/3 of authorities will be voting for consensus method N
&gt; &gt; before future Tor relay or bridge versions use IPv6 ORPorts from the
&gt; &gt; consensus.
&gt; &gt; 
&gt; &gt; 4.3. Clients
&gt; &gt; 
&gt; &gt; 4.3.1. Legacy Clients
&gt; &gt; 
&gt; &gt; 4.3.1.1. IPv6 ORPort Circuits
&gt; &gt; 
&gt; &gt; Tor clients on versions 0.2.8.x to 0.3.2.x check directory documents for
&gt; &gt; ORPorts in the following order:
&gt; &gt; * descriptors (routerinfo, available if using bridges or full descriptors)
&gt; &gt; * consensus (routerstatus)
&gt; &gt; * microdescriptors (IPv6 ORPorts only)
&gt; &gt; 
&gt; &gt; Their behaviour will be identical to the current behaviour for consensus
&gt; &gt; methods M and earlier. When consensus method N is used, they will ignore
&gt; &gt; unreachable IPv6 ORPorts without any code changes.
&gt; &gt; 
&gt; &gt; 4.3.1.2. IPv6 ORPort Bootstrap
&gt; &gt; 
&gt; &gt; Tor clients on versions 0.2.8.x and 0.2.9.x are currently unable to
&gt; &gt; bootstrap over IPv6 only connections when using microdescriptors. This
&gt; &gt; happens because the microdesc consensus does not contain IPv6 ORPorts.
&gt; &gt; 
&gt; &gt; When consensus method M is used, they will be able to bootstrap over IPv6
&gt; &gt; only connections using microdescriptors, without any code changes.

&gt; (How does the behavior of 0.3.0.x and onward differ here?)

Added a clarifying sentence:

IPv6-only Tor clients on versions 0.3.0.2-alpha and later use fallback
directory mirrors to fetch their microdescriptors.

&gt; &gt; 4.3.2. Future Clients
&gt; &gt; 
&gt; &gt; 4.3.2.1. Ignoring IPv6 ORPorts in Microdescs
&gt; &gt; 
&gt; &gt; Tor clients on versions 0.3.3.x and later will ignore unreachable IPv6
&gt; &gt; ORPorts once consensus method M or later is in use. (See #23827.)
&gt; &gt; 
&gt; &gt; 4.3.2.2. IPv6 ORPort Bootstrap
&gt; &gt; 
&gt; &gt; If a bootstrapping IPv6-only client has a consensus made with method M or
&gt; &gt; later, it should download microdescriptors from one of the IPv6 ORPorts in
&gt; &gt; that consensus. Previously, IPv6-only clients would use fallback directory
&gt; &gt; mirrors to download microdescs, because there were no IPv6 ORPorts in the
&gt; &gt; microdesc consensus. (See #23827.)
&gt; &gt; 
&gt; &gt; 4.3.2.3. Ignoring Addresses in Unused Directory Documents
&gt; &gt; 
&gt; &gt; If a client doesn't use a particular directory document type for a node,
&gt; &gt; it should ignore any addresses in that document type. (See #23975.)
&gt; &gt; 
&gt; &gt; 5. Data Size
&gt; &gt; 
&gt; &gt; This change removes 2-50 bytes from the microdescriptors of relays that
&gt; &gt; have an IPv6 ORPort, and adds them to reachable IPv6 relays' microdesc
&gt; &gt; consensus entries.
&gt; &gt; 
&gt; &gt; As of October 2017, 600 relays (9%) have IPv6 ORPorts in the full
&gt; &gt; consensus. Their "a" lines take up 19 KB, or 33 bytes each on average.
&gt; &gt; The microdesc consensus is 1981 KB, so this represents about 1% of its
&gt; &gt; uncompressed size.
&gt; &gt; 
&gt; &gt; Most tor clients are already running 0.3.1.7, which implements consensus
&gt; &gt; diffs. We expect that most directory mirrors will also implement consensus
&gt; &gt; diffs by the time 2/3 of authorities are voting for consensus method M.
&gt; &gt; 
&gt; &gt; So we expect that this change will have a minimal impact, which is made
&gt; &gt; even smaller by compression and consensus diffs.

&gt; Let's look at a worst-case analysis, though. How would the impact be if 100% of the \
&gt; relays had IPv6 ORPorts?  I'm not very interested in the uncompressed size; it's \
&gt; the gzip-compressed size that determines the worst-case impact.

In the worst-case, the gzip-compressed size is 2% larger with the current
IPv6 ORPorts, and 14% larger with 100% IPv6 ORPorts.

The zstd-compressed size is 1.4% larger with the current IPv6 ORPorts, and
8% larger with 100% IPv6 ORPorts. But the zstd consensus is actually larger
than the gzip one:

https://trac.torproject.org/projects/tor/ticket/24368

&gt; &gt; 6. External Impacts
&gt; &gt; 
&gt; &gt; We don't expect this change to impact Onionoo and similar projects, because
&gt; &gt; they typically use the full consensus.
&gt; &gt; 
&gt; &gt; Metrics doesn't currently graph IPv6 usage in Tor, but would like to in
&gt; &gt; future.

I've updated this section, and added a "Monitoring" section.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAloULDAACgkQdA2eOQJS
cqKp/hAApKaWF2/d4p/z5pla/LOMwGaxbXp78GCZ0fXwPuEjzPJuqb9eetDtBd0R
D2YD73n3ScTMe+1fMXWibtVNC4IU2zIy2+hk+3O1VSi4spxrqkNqe9hEGbh5nbGX
rjKSBXYK3bWpNBfJ+2O4Xc6+Hh2OaguXq3a+mfn8hcxHe5a4YryCTcDnbBQIy197
xkZtpRp6tQ+WmbX64Lw1ju6pjm2WWGsBi3Lw49dvUCAv2sL7z2R4vrW5ctPYLCH3
aCB67Q8tzoSNo7IvlD8kfrfa7BUawN8wQenZ7Xb4o7BWpbdbSyeHtBE1qVqS50pi
j0eqSEqGe+eSihL1QgEpnUVv+DCzfHbGlbJap2zxSxoQs0wOgkaPRmkPcAy9KX/t
x74L7Wq90DU6t8cv+croOSEFH5cU0AnKsU9Y2lbW/z7e1ny3NwqS+KuYM/j2JMR8
RYGxgcrtYiYLBjoSvObZOs2yzH0NiodQSjKfB6Zk2HT1fKpx1F7QY0CL7Q74O/Dd
rUV/SRQI6gtUpYv0lB8xsvq7FkccR5v/lWa3o/kyPoqp4tdhOtOAw6mefKIh7dls
VCIE+A4YCF4a2+6ktY82O8FthqpI5C3IWL0WxTkyGM/6yRu16wZUDNit1oPIttK1
UMCsh4H1oKV0SYUNX1U6I4JgBbXeyNHePHk0V/T7+SYhcUFy+w8=
=ny/0
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171123191644</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-23 19:16:44-0400</timestampReceived><subject>Re: [tor-dev] rendezvous on non-OR circuit with purpose Acting as rendevous</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Nov 2017, at 06:09, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; 
&gt; I just restarted my node, and saw this in the log:
&gt; 
&gt; Nov 23 14:07:21.000 [warn] Tried to establish rendezvous on non-OR
&gt; circuit with purpose Acting as rendevous (pending)
&gt; 
&gt; What does this mean?  I'm a little worried someone out there is playing
&gt; games with the protocol...

It's certainly possible.

Or there's a bug that causes some clients to double-establish to the
same rend point.

Here's the ticket:

https://trac.torproject.org/projects/tor/ticket/15618

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAloXHpwACgkQdA2eOQJS
cqKbeQ//SVwQOHGnLAM1Epf4Msd+JFHjuZGvJ/VaqOyCscSshXBR2wsnqp7Ti02J
y+B1U/PdzpUd1MgzYaqPar8UOvsoHLQn1d57qqodE0cxVRs80hEdWn6CJ6aucbf/
P+5vy0tTkMGcQ5GLTmBNUdQ7bS7wqYafLl0xka0TggWuBIe8T48jGGfwXFDhKsbs
4cdLn6i6TLFRM4TXuRr6nzEXzDbfOi/WmxYdPD45X0cLcMKBX6VpPxk5XDkhwupO
Ts0Y1vUK9ilnmnBK4T5GRl1T/8Fy1GOmZYrHk7lX5byq+WSLTc/CY6Pws8ee/KMn
v7QbCtAewdXxBJPGODH2Rfy9LmMH8ldmj2XeTXpHtRrgOHZHpJ1xCIqyaVyTYFUJ
2Qylxm1wb2mDuAGs+a9s2Jc/2Ceg50P4qhWeDvb4OX/bJw/xQPRBuJ/DryIkHvE3
u1ma7F/LUxy0UYdQmQOWHzNSWam4XEKn0Fcucg5n0CmneZU/XI1tm83cnq0sWyve
XA+7XIY8B01PNVRoTOOR/dmcBTL4gmUSJHNNthoOw/09hRipC1e9R5o2ph566WZ2
Yq31qDILpQYRBl5OQ/Nlt8WjsL9NQV+T/w9xEC5sZ1RFz0A8Enh+KZVp0+ztEiho
aeah63RYyK5KPAXUM623hEUQJ9XYP/Kn6VTl0/n3BXUTRx24sC8=
=gFiZ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171124210530</emailId><senderName>chelsea komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2017-11-24 21:05:30-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

[Attachment #2 (multipart/alternative)]


It is great that we are identifying places to improve support for Rust
in Tor.

Along this same line of thinking, are there other places in Tor where we
will need to move to supporting UTF-8? For example, should the statefile
be UTF-8 also?

On 11/13/2017 01:51 PM, Nick Mathewson wrote:
&gt; Filename: 285-utf-8.txt
&gt; Title: Directory documents should be standardized as UTF-8
&gt; Author: Nick Mathewson
&gt; Created: 13 November 2017
&gt; Status: Open
&gt;
&gt; 1. Summary and motivation
&gt;
&gt;    People frequently want to include non-ASCII text in their router
&gt;    descriptors.  The Contact line is a favorite place to do this, but i=
n
&gt;    principle the platform line would also be pretty logical.
&gt;
&gt;    Unfortunately, there's no specified way to encode non-ASCII in our
&gt;    directory documents.
&gt;
&gt;    Fortunately, almost everybody who does it, uses UTF-8 anyway.
&gt;
&gt;    As we move towards Rust support in Tor, we gain another motivation
&gt;    for standarding on UTF-8, since Rust's native strings strongly prefe=
r
&gt;    UTF-8.
&gt;
&gt;    So, in this proposal, we describe a migration path to having all
&gt;    directory documents be fully UTF-8.
&gt;
&gt; 2. Proposal
&gt;
&gt;    First, we should have Tor relays reject ContactInfo lines (and any
&gt;    other lines copied directly into router descriptors) that are not
&gt;    UTF-8.
&gt;
&gt;    At the same time, we should have authorities reject any router
&gt;    descriptors or extrainfo documents that are not valid UTF-8.
&gt;    Simultaneously, we can have all Tor instances reject all
&gt;    non-directory-descriptor directory documents that are not UTF-8,
&gt;    since none should exist today.
&gt;
&gt;    Finally, once the authorities have updated, we should have all Tor
&gt;    instances reject all directory documents that are not UTF-8.  (We
&gt;    should not take this step until the authorities have upgraded, or
&gt;    else the behavior of updated and non-updated clients could be
&gt;    distinguished.)
&gt;
&gt; 2.1. Hidden service descriptors' encrypted bodies
&gt;
&gt;    For the encrypted bodies of hidden service descriptors, we cannot
&gt;    reject them at the authority level, and so we need to take a slightl=
y
&gt;    different approach to prevent client fingerprinting attacks.
&gt;
&gt;    First, we should make Tor instances start warning about any hidden
&gt;    service descriptors whose bodies, post-decryption, contain non-utf-8=

&gt;    plaintext.  At the same time, we add a consensus parameter to
&gt;    indicate that hidden service descriptors with non-utf-8 plantexts
&gt;    should be rejected entirely: "reject-encrypted-non-utf-8".  If that
&gt;    parameter is set to 1, then hidden service clients will not only
&gt;    warn, but reject the descriptors.
&gt;
&gt;    Once the vast majority of clients are running versions that support
&gt;    the "reject-encrypted-non-utf-8" parameter, that parameter can be se=
t
&gt;    to 1.
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    It is great that we are identifying places to improve support for
    Rust in Tor. &lt;br&gt;
    &lt;br&gt;
    Along this same line of thinking, are there other places in Tor
    where we will need to move to supporting UTF-8? For example, should
    the statefile be UTF-8 also? &lt;br&gt;
    &lt;br&gt;
    &lt;div class="moz-cite-prefix"&gt;On 11/13/2017 01:51 PM, Nick Mathewson
      wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote
cite="mid:CAKDKvuwwwSqozqdm1+4jMQkE9VgRJPz0jvisuhWBLwXU_JJqUg@mail.gmail.com"
      type="cite"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div&gt;Filename: 285-utf-8.txt&lt;/div&gt;
        &lt;div&gt;Title: Directory documents should be standardized as UTF-8&lt;/div&gt;
        &lt;div&gt;Author: Nick Mathewson&lt;/div&gt;
        &lt;div&gt;Created: 13 November 2017&lt;/div&gt;
        &lt;div&gt;Status: Open&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;1. Summary and motivation&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   People frequently want to include non-ASCII text in
          their router&lt;/div&gt;
        &lt;div&gt;   descriptors.  The Contact line is a favorite place to do
          this, but in&lt;/div&gt;
        &lt;div&gt;   principle the platform line would also be pretty
          logical.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   Unfortunately, there's no specified way to encode
          non-ASCII in our&lt;/div&gt;
        &lt;div&gt;   directory documents.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   Fortunately, almost everybody who does it, uses UTF-8
          anyway.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   As we move towards Rust support in Tor, we gain another
          motivation&lt;/div&gt;
        &lt;div&gt;   for standarding on UTF-8, since Rust's native strings
          strongly prefer&lt;/div&gt;
        &lt;div&gt;   UTF-8.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   So, in this proposal, we describe a migration path to
          having all&lt;/div&gt;
        &lt;div&gt;   directory documents be fully UTF-8.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;2. Proposal&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   First, we should have Tor relays reject ContactInfo
          lines (and any&lt;/div&gt;
        &lt;div&gt;   other lines copied directly into router descriptors)
          that are not&lt;/div&gt;
        &lt;div&gt;   UTF-8.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   At the same time, we should have authorities reject any
          router&lt;/div&gt;
        &lt;div&gt;   descriptors or extrainfo documents that are not valid
          UTF-8.&lt;/div&gt;
        &lt;div&gt;   Simultaneously, we can have all Tor instances reject all&lt;/div&gt;
        &lt;div&gt;   non-directory-descriptor directory documents that are
          not UTF-8,&lt;/div&gt;
        &lt;div&gt;   since none should exist today.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   Finally, once the authorities have updated, we should
          have all Tor&lt;/div&gt;
        &lt;div&gt;   instances reject all directory documents that are not
          UTF-8.  (We&lt;/div&gt;
        &lt;div&gt;   should not take this step until the authorities have
          upgraded, or&lt;/div&gt;
        &lt;div&gt;   else the behavior of updated and non-updated clients
          could be&lt;/div&gt;
        &lt;div&gt;   distinguished.)&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;2.1. Hidden service descriptors' encrypted bodies&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   For the encrypted bodies of hidden service descriptors,
          we cannot&lt;/div&gt;
        &lt;div&gt;   reject them at the authority level, and so we need to
          take a slightly&lt;/div&gt;
        &lt;div&gt;   different approach to prevent client fingerprinting
          attacks.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   First, we should make Tor instances start warning about
          any hidden&lt;/div&gt;
        &lt;div&gt;   service descriptors whose bodies, post-decryption,
          contain non-utf-8&lt;/div&gt;
        &lt;div&gt;   plaintext.  At the same time, we add a consensus
          parameter to&lt;/div&gt;
        &lt;div&gt;   indicate that hidden service descriptors with non-utf-8
          plantexts&lt;/div&gt;
        &lt;div&gt;   should be rejected entirely:
          "reject-encrypted-non-utf-8".  If that&lt;/div&gt;
        &lt;div&gt;   parameter is set to 1, then hidden service clients will
          not only&lt;/div&gt;
        &lt;div&gt;   warn, but reject the descriptors.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;   Once the vast majority of clients are running versions
          that support&lt;/div&gt;
        &lt;div&gt;   the "reject-encrypted-non-utf-8" parameter, that
          parameter can be set&lt;/div&gt;
        &lt;div&gt;   to 1.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171128155738</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-11-28 15:57:38-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 4.4-1.8.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Onionoo's protocol was extended and has a minor version jump to 4.4.
Download available at:
     https://dist.torproject.org/onionoo/4.4-1.8.0/

Main protocol changes (also summarized in [0]):
The version field, which was introduced in 4.1, is now available for brid=
ges, too.
The "recommended_version" parameter is provided as an additional search p=
arameter.
Details can be found in [1a], [1b], and [2].

The changes are already deployed on all onionoo.torproject.org instances =
and the
update included an upgrade of the geoip data used in Onionoo.

Reminder: a major *upcoming version* jump 5.0 lies ahead.
Take note of the field "next_major_version_scheduled":"2017-12-17" in doc=
uments.

Please direct comments and questions to the metrics-team mailing list [3]=
=2E

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions_4_4
[1a] https://metrics.torproject.org/onionoo.html#details_relay_recommende=
d_version
[1b] https://metrics.torproject.org/onionoo.html#details_bridge_recommend=
ed_version
[2] hhttps://metrics.torproject.org/onionoo.html#parameters_search
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team







["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171129120815</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-11-29 12:08:15-0400</timestampReceived><subject>[tor-dev] Rebooting work on proposal #247 (guard discovery)</subject><body>

Hello Mike,

I'm finally getting out of the prop224/microdescriptor bug pile, and
getting more time to start working on guard stuff like prop247 again.

I'm planning to spend a few days next week to regain knowledge on
prop247. I'll check out the notes from the Wilmington hackfest, re-read
my old simulator's code, etc.

I know you have thought more about prop247 the past months, and it would
be great if you could brief me up on any updates that I should know
about. Specifically I'm wondering if you have any new insights on how
the proposed prop247 changes interact with Tor's guard algorithm (prop271)?

Also any other things I should know about from your work on the
performance simulator? Perhaps ideas about performance, topology or path
restrictions?

I'm hoping that such updates might help me boot up faster!

Cheers! :-)


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171129155329</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2017-11-29 15:53:29-0400</timestampReceived><subject>Re: [tor-dev] Privacy Pass</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Nov 24, 2017 at 06:06:33 UTC, bancfc@openmailbox.org wrote:
&gt;Hi. Are there any plans to include Privacy Pass addon in Tor Browser by=20
&gt;default?

https://trac.torproject.org/projects/tor/ticket/24321

&gt;[0] https://privacypass.github.io/team/
&gt;[1] https://blog.cloudflare.com/privacy-pass-the-math/

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171130213524</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-30 21:35:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 286: Controller APIs for hibernation access on mobile</subject><body>

Hi Nick,

Comments inline:

&gt; On 30 Nov 2017, at 23:55, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 286-hibernation-api.txt
&gt; Title: Controller APIs for hibernation access on mobile
&gt; Author: Nick Mathewson
&gt; Created: 30-November-2017
&gt; Status: Open
&gt; 
&gt; 
&gt; 1. Introduction
&gt; 
&gt;   On mobile platforms, battery life is achieved by reducing
&gt;   needless network access and CPU access.  Tor currently provides
&gt;   few ways for controllers and operating systems to tune its
&gt;   behavior.
&gt; 
&gt;   This proposal describes controller APIs for better management of
&gt;   Tor's hibernation mechanisms, and extensions to those mechanisms,
&gt;   for better power management in mobile environments.
&gt; 
&gt; 1.1. Background: hibernation and idling in Tor today
&gt; 
&gt;   We have an existing "hibernation" mechanism that we use to
&gt;   implement "bandwidth accounting" and "slow shutdown" mechanisms:
&gt;   When a Tor instance is close to its bandwidth limit: it stops
&gt;   accepting new connections or circuits, and only processes those
&gt;   it has, until the bandwidth limit is reached.  Once the bandwidth
&gt;   limit is reached, Tor closes all connections and circuits, and
&gt;   all non-controller listeners, until a new accounting limit
&gt;   begins.
&gt; 
&gt;   Tor handles the INT signal on relays similarly: it stops
&gt;   accepting new connections or circuits, and gives the existing
&gt;   ones a short interval in which to shut down.  Then Tor closes all
&gt;   connections and exits the process entirely.
&gt; 
&gt;   Tor's "idle" mechanism is related to hibernation, though its
&gt;   implementation is separate.  When a Tor clients has passed a
&gt;   certain amount of time without any user activity, it declares
&gt;   itself "idle" and stops performing certain background tasks, such
&gt;   as fetching directory information, or building circuits in
&gt;   anticipation of future needs.  (This is tied in the codebase to
&gt;   the "predicted ports" mechanism, but it doesn't have to be.)
&gt; 
&gt; 
&gt; 1.2. Background: power-management signals on mobile platforms
&gt; 
&gt;   (I'm not a mobile developer, so I'm about to wildly oversimplify.
&gt;   Please let me know where I'm wrong.)
&gt; 
&gt;   Mobile platforms achieve long battery life by turning off the
&gt;   parts they don't need.  The most important parts to turn off are
&gt;   the antenna(s) and the screen; the CPU can be run in a slower
&gt;   mode.
&gt; 
&gt;   But it doesn't do much good turning things off when they're
&gt;   unused, if some background app is going to make sure that they're
&gt;   always in use!  So mobile platforms use signals of various kinds
&gt;   to tell applications "okay, shut up now".
&gt; 
&gt;   Some apps need to do online background activities periodically;
&gt;   to help this out, mobile platforms give them a signal "Hey, now
&gt;   is a good time if you want to do that" and "stop now!"
&gt; 
&gt; 
&gt; 1.3. Mostly out-of-scope: limiting CPU wakeups when idle.
&gt; 
&gt;   The changes described here will be of limited use if we do not
&gt;   also alter Tor so that, when it's idle, the CPU is pretty quiet.
&gt;   That isn't the case right now: we have large numbers of callbacks
&gt;   that happen periodically (every second, every minute, etc)
&gt;   whether they need to or not.  We're hoping to limit those, but
&gt;   that's not what this proposal is about.
&gt; 
&gt; 
&gt; 2. Improvements to the hibernation model
&gt; 
&gt;   To present a consistent interface that applications and
&gt;   controllers can use to manage power consumption, we make these
&gt;   enhancements to our hibernation model.
&gt; 
&gt;   First, we add three new hibernation states: "IDLE",
&gt;   "IDLE_UPDATING", "SLEEP", and "SLEEP_UPDATING".

Four new hibernation states

&gt; 
&gt;   "IDLE" is like the current "idle" or "no predicted ports" state:
&gt;   Tor doesn't launch circuits or start any directory activity, but
&gt;   its listeners are still open.  Tor clients can enter the IDLE
&gt;   state on their own when they are LIVE, but haven't gotten any
&gt;   client activity for a while.  Existing connections and circuits
&gt;   are not closed. If the Tor instance receives any new connections,
&gt;   it becomes LIVE.
&gt; 
&gt;   "IDLE_UPDATING" is like IDLE, except that Tor should check for
&gt;   directory updates as appropriate.  If there are any, it should
&gt;   fetch directory information, and then become IDLE again.
&gt; 
&gt;   "SLEEPING" is like the current "dormant state we use for
&gt;   bandwidth exhaustion, but it is controller-initiated: it begins
&gt;   when Tor is told to enter it, and ends when Tor is told to leave
&gt;   it.  Existing connections and circuits are closed; listeners are
&gt;   closed too.
&gt; 
&gt;   "SLEEP_UPDATING" is like SLEEP, except that Tor should check for
&gt;   directory updates as appropriate.  If there are any, it should
&gt;   fetch directory information, and then SLEEP again.
&gt; 
&gt; 
&gt; 2.1. Relay operation
&gt; 
&gt;   Relays and bridges should not automatically become IDLE on their
&gt;   own.
&gt; 
&gt; 
&gt; 2.2. Onion service operation
&gt; 
&gt;   When a Tor instance that is running an onion service is IDLE, it
&gt;   does the minimum to try to remain responsive on the onion
&gt;   service: It keeps its introduction points open if it can. Once a
&gt;   day, it fetches new directory information and opens new
&gt;   introduction points.

… and re-posts its descriptor?

And if an IP goes down, does it pick a new one?

Or if the descriptor expires?
How often does that happen in v2?
I think it happens after 3 hours by default in v3.

&gt; 3. Controller hibernation API
&gt; 
&gt; 3.1. Examining the current hibernation state
&gt; 
&gt;   We define a new "GETINFO status/hibernation" to inspect the
&gt;   current hibernation state.  Possible values are:
&gt;     - "live"
&gt;     - "idle:control"
&gt;     - "idle:no-activity"
&gt;     - "sleep:control"
&gt;     - "sleep:accounting"
&gt;     - "idle-update:control"
&gt;     - "sleep-update:control"
&gt;     - "shutdown:exiting"
&gt;     - "shutdown:accounting"
&gt;     - "shutdown:control"

Why is there no reason for "live"?

&gt;   The first part of each value indicates Tor's current state:
&gt;      "live" -- completely awake
&gt;      "idle" -- waiting to see if anything happens
&gt;      "idle-update" -- waiting to see if anything happens; probing
&gt;         for directory information
&gt;      "sleep" -- completely unresponsive

Missing sleep-update

&gt;      "shutdown" -- unresponsive to new requests; still processing
&gt;         existing requests.
&gt; 
&gt;   The second part of each value indicates the reason that Tor
&gt;   entered this state:
&gt;      "control" -- a controller told us to do this.
&gt;      "no-activity" -- Tor became idle on its own due to not
&gt;         noticing any requests.
&gt;      "accounting" -- the bandwidth system told us to enter this
&gt;         state.
&gt;      "exiting" -- Tor is in this state because it's getting ready
&gt;         to exit.

Missing a reason corresponding to StartIdle

&gt;   We add a STATUS_GENERAL hibernation event as follows:
&gt; 
&gt;      HIBERNATION
&gt;      "STATUS=" (one of the status pairs above.)
&gt; 
&gt;      Indicates that Tor's hibernation status has changed.
&gt; 
&gt;   Note: Controllers MUST accept status values here that they don't
&gt;   recognize.
&gt; 
&gt;   The "GETINFO accounting/hibernating" value and the "STATUS_SERVER
&gt;   HIBERANATION_STATUS" event keep their old meaning.
&gt; 
&gt; 3.2. Changing the hibernation state
&gt; 
&gt;   We add the following new possible values to the SIGNAL controller
&gt;   command:
&gt;      "SLEEP" -- enter the sleep state, after an appropriate
&gt;         shutdown interval.
&gt; 
&gt;      "IDLE" -- enter the idle state
&gt; 
&gt;      "SLEEPWALK" -- If in sleep or idle, start probing for
&gt;         directory information in the sleep-update or idle-update
&gt;         state respectively.  Remain in that state until we've
&gt;         probed for directory information, or until we're told to
&gt;         IDLE or SLEEP again, or (if we're idle) until we get client
&gt;         activity. Has no effect if not in sleep or idle.
&gt; 
&gt;      "WAKEUP" -- If in sleep, sleep-update, idle, idle-update, or
&gt;         shutdown:sleep state, enter the live state.  Has no effect
&gt;         in any other state.
&gt; 
&gt; 3.3. New configuration parameters
&gt; 
&gt;   StartIdle -- Boolean.  If set to 1, Tor begins in IDLE mode.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171130221138</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-11-30 22:11:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 287: Reduce circuit lifetime without overloading the network.</subject><body>

[Attachment #2 (multipart/signed)]


Hi Fernando,

Seems like an important proposal, if there is a good argument that a
particular amount of data is "safe". I think your research may help
with this.

If everybody chooses different amounts of data, that makes them easier to
identify.

&gt; On 1 Dec 2017, at 08:47, Fernando Fernández Mancera &lt;ffernandezmancera@gmail.com&gt; wrote:
&gt; 
&gt; About TorBrowser or any other Tor application that is able to manage circuits
&gt; by its own because of KeepAliveIsolateSOCKSAuth option being active by default
&gt; shouldn't be affected by this new feature. As the same form that it currently
&gt; ignores MaxCircuitDirtiness parameter.

We talked about Tor Browser's default behaviour yesterday on #tor-dev.

KeepAliveIsolateSOCKSAuth doesn't ignore MaxCircuitDirtiness: instead, it
resets the timer each time a stream is attached to a circuit. This means
that circuits stop accepting new streams MaxCircuitDirtiness seconds after
they are *last* used for a new stream. (The default is *first used* for
a new stream.)

Onion services also have similar behaviour, but we should check the
details.

The proposal doesn't specify how KeepAliveIsolateSOCKSAuth and onion
services work with MaxCircuitSizeDirtiness and
MaxCircuitSizeDirtinessByPort. We need to specify what happens, so the
Tor Browser team knows if it needs to change its torrc. And it would
help us decide what to set as the default for onion services.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlogghsACgkQdA2eOQJS
cqJlcQ/+MAZMchkYcXWOrZ7Yn4aUtZNVgGcYLdjfCMtCSScxPE5sVBCCfG+wi8uf
/ou02XcOh3BoebkOineJkTD0UKD7Z42mtkVLKllSuC+iAQaM5IMkPvCsfQ/d0FA3
No/Wu2WOChiHRxf5LI/SXnzA3zd6Q5T8bJ6MtJZd86cm82roRa6YFncBlg7fTsd4
af1P33E2vE5ihFaTnx6wp7SO9fKxnZInrtkrHJ6Cq55j3Ad5DN333bfcK7aN6HFo
CZo9vhCRUvAbQkWt3e6p4MeW581yfuUVJzNISLKX9Tuj4faKcnSobmRBk9YHOCK3
728ExbgfRDYWcoRlFjyBkz+OViSU0nIofzCsWoNTujSzDwzCxQQzGvsIGuYCpR4M
XFRUvKpfRb3s/C/eI3dPzRaWI93+tGvmkgbyYRNcl7BL3mleHzpYQ8tiIM65t1Qu
zsig7iIyEKX8xVt8PE5KGJZh4OxvSqapreWDiW17yr4sVhrKGW3e+PFl/gC5L/PW
V/bZQZbeW8KzGZaJ+KY68kJwblX27//Ngp1mGiey83yKeyO1dW/qsYSsgobpBW4c
S7gNcaOmOz2QX3K514WEIVOZbKR3hMrOO5omhrM7ctWcbEImx7tZyLQMolcRQfeu
0aAz0IKZchUpBreny8jivD/LEnUugTzrW1cLoXvlL5e+6rb9ZVQ=
=J1Lt
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171002063721</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2017-10-02 06:37:21-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Hi,

Am Donnerstag, den 28.09.2017, 11:48 -0400 schrieb Aaron Johnson:
&gt; Hello,
&gt; 
&gt; This appears to be a sketch of Shamir secret sharing, which will be just one tool \
&gt; used in the PrivCount system. For example, it is missing how relays (aka Data \
&gt; Collectors) maintain counters, how aggregators (aka Share Keepers) aggregate \
&gt; counters, and how secret sharing is used among those entities to provide fault \
&gt; tolerance for the aggregation process.
=&gt; Yeap, this stuff is still missing and belongs to this big bunch of TODOs which \
were in the proposal.  I skipped some of this points since I would need some help \
with this. Additionally, I'm not complettely sure which PrivCount specific topics \
have to be the content of this proposal and which topics belong to a rewritten \
280-privcount-in-tor.txt  proposal.


&gt; The grammar and writing style need improvement. They are at a level that makes the \
&gt; proposal hard to understand at times.
=&gt; Thank you for this feedback. My English is not the best. I work on this problem.

&gt; 
&gt; There are many important missing details even in the secret sharing component:
&gt; - How is p determined?
&gt; - How is N determined?
&gt; - Who plays the roles of the SK, SHs, and SR? How do these relate to the parties in \
&gt; PrivCount? 
&gt; Some minor notes I kept before it became clearer that higher-level comments would \
&gt;                 be more useful:
&gt; - Sec. 1: Description of secret sharing is incorrect. Strict subsets of shares in a \
&gt; simple additive secret-sharing scheme do not leak information.
=&gt; I corrected this terrible content mistake! I'm sorry! It's not super pretty ... \
but better like before.

&gt; - Sec. 1: Variable capitalization (e.g. K vs. k, N vs. n) should be consistent.
=&gt; Corrected.

&gt; - Sec. 3.2: I could not understand what notation was being introduced through a, b, \
&gt; c, and d.
=&gt; Oh, is this really so confusing(?). For the moment I didn't change it since I'm \
not sure how I can write it in a better way. =&gt; Still TODO.

&gt; - Sec. 3.2: SUM and PRODUCT variable notation is inconsistent ("i=" missing from \
&gt; PRODUCT).
=&gt; Corrected.

&gt; - Sec. 3.2: "Secret Keeper (SK)" has an unfortunate collision with the acronym for \
&gt; Share Keeper, which is a different role in the PrivCount paper.
=&gt; I will rename the parties since I it can be confusing.

&gt; - Sec. 4, Step 2: The prime need not be random. It can be fixed and public.
&gt; - Sec. 4, Step 3: Specify how the coefficients are determined.
&gt; 
&gt; Best,
&gt; Aaron
&gt; 

Bye and thank you for your feedback,
Carolin

-- 
-----------------------------------------------------------------------
Carolin Zöbelein / Nick: Samdney
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
-----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171010101152</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-10-10 10:11:52-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.4.0, metrics-lib 2.1.1, Onionoo 4.2-1.6.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

three new releases are available:

     https://dist.torproject.org/collector/1.4.0/
     https://dist.torproject.org/onionoo/4.2-1.6.0/
     https://dist.torproject.org/metrics-lib/2.1.1/

These releases publish the build revision of the software running on
a particular Onionoo or Collector instance.  For Onionoo this means an
additional field "build_revision" in documents (cf. protocol changes [0]),
and CollecTor shows ths field in its index.json [1].
All these changes are already deployed on all tp.o instances.

CollecTor now enables sync-ing of OnionPerf measuremnts between instances.
As there were changes to CollecTor's configuration file, all operators of
CollecTor instances should also update collector.properties on their instance.
INSTALL.md gives all details about how to create a new collector.properties
configuration file [2]. 

Other details can be found in the respective change logs [3], [4], [5]. 

Please direct comments and questions to the metrics-team mailing list [6].

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions
[1] https://metrics.torproject.org/collector.html#index-json
[2] https://gitweb.torproject.org/collector.git/tree/INSTALL.md#n103
[3] https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.4.0
[4] https://gitweb.torproject.org/metrics-lib.git/tree/CHANGELOG.md?h=metrics-lib-2.1.1
[5] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.2-1.6.0
[6] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170620180739</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-06-20 18:07:39-0400</timestampReceived><subject>[tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/alternative)]


Attached is the second draft of the Pluggable Transport 2.0 Specification.
If you have feedback on this draft, please send me your comments by July 20.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Attached \
is the second draft of the Pluggable Transport 2.0 Specification. If you have \
feedback on this draft, please send me your comments by July 20.&lt;/span&gt;&lt;/div&gt;


["PluggableTransportSpecificationVersion2Draft2.pdf" (application/pdf)]
[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171013131700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-13 13:17:00-0400</timestampReceived><subject>[tor-dev] non-ASCII handling in tor and onionoo</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I'm trying to find out if non-ASCII characters are allowed in descriptor
data (and what onionoo would do with non-ASCII currently displayed as "?").

According to the spec non-ASCII chars are not allowed:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218

I searched trac because I remembered there were some ASCII related tickets:

https://trac.torproject.org/projects/tor/ticket/1258
closed due to
https://trac.torproject.org/projects/tor/ticket/1720 (which has nothing
to do with non-ASCII)
https://trac.torproject.org/projects/tor/ticket/1270


Is this summary correct?

Currently non-ASCII is not compliant with the spec but your consensus is
that non-ASCII chars should be supported but no one got around to patch
the spec and implementation.


thanks,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171013160536</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-13 16:05:36-0400</timestampReceived><subject>Re: [tor-dev] non-ASCII handling in tor and onionoo</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 13 Oct 2017, at 09:17, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; I'm trying to find out if non-ASCII characters are allowed in descriptor
&gt; data (and what onionoo would do with non-ASCII currently displayed as "?").
&gt; 
&gt; According to the spec non-ASCII chars are not allowed:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218
&gt; 
&gt; I searched trac because I remembered there were some ASCII related tickets:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/1258
&gt; closed due to
&gt; https://trac.torproject.org/projects/tor/ticket/1720 (which has nothing
&gt; to do with non-ASCII)
&gt; https://trac.torproject.org/projects/tor/ticket/1270
&gt; 
&gt; 
&gt; Is this summary correct?
&gt; 
&gt; Currently non-ASCII is not compliant with the spec but your consensus is
&gt; that non-ASCII chars should be supported but no one got around to patch
&gt; the spec and implementation.

Non-ASCII characters are supported in the contact and platform fields.
Some contact fields use non-ASCII for accented characters, and relay
operators want us to continue to support them.

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2011

There is a ticket about requiring ASCII in relay descriptors, which we
should wontfix. There is a ticket about requiring ASCII in extrainfo
descriptors, which we closed because we fixed the underlying
memory disclosure bug.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 13 Oct 2017, at 09:17, nusenu \
&lt;&lt;a href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I'm trying to find out if \
non-ASCII characters are allowed in descriptor&lt;/span&gt;&lt;br&gt;&lt;span&gt;data (and what onionoo \
would do with non-ASCII currently displayed as \
"?").&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;According to the spec non-ASCII chars are not \
allowed:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n218&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I \
searched trac because I remembered there were some ASCII related \
tickets:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1258"&gt;https://trac.torproject.org/projects/tor/ticket/1258&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;closed \
due to&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1720"&gt;https://trac.torproject.org/projects/tor/ticket/1720&lt;/a&gt; \
(which has nothing&lt;/span&gt;&lt;br&gt;&lt;span&gt;to do with non-ASCII)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1270"&gt;https://trac.torproject.or \
g/projects/tor/ticket/1270&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Is \
this summary correct?&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Currently non-ASCII is not \
compliant with the spec but your consensus is&lt;/span&gt;&lt;br&gt;&lt;span&gt;that non-ASCII chars \
should be supported but no one got around to patch&lt;/span&gt;&lt;br&gt;&lt;span&gt;the spec and \
implementation.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Non-ASCII characters are \
supported in the contact and platform fields.&lt;/div&gt;&lt;div&gt;Some contact fields use \
non-ASCII for accented characters, and relay&lt;/div&gt;&lt;div&gt;operators want us to continue \
to support them.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2011"&gt;https://gitwe \
b.torproject.org/torspec.git/tree/dir-spec.txt#n2011&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There \
is a ticket about requiring ASCII in relay descriptors, which we&lt;/div&gt;&lt;div&gt;should \
wontfix. There is a ticket about requiring ASCII in extrainfo&lt;/div&gt;&lt;div&gt;descriptors, \
which we closed because we fixed the underlying&lt;/div&gt;&lt;div&gt;memory disclosure \
bug.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171004002515</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-10-04 00:25:15-0400</timestampReceived><subject>[tor-dev] User perception of onion service discovery</subject><body>

This is the second part of our preliminary analysis of how Tor users
interact with onion services [0].  In this part, we analyse the issue of
onion service discovery.  Onion services are private by default, so it's
the operator's responsibility to disseminate their domain if they want
it to be public.

Question 3.6 in our survey asked:

&gt; How do you discover new onion sites?

The breakdown looks as follows.  Respondents could select multiple
answers, so the percentages are based on the total number of
respondents.

Method                                                       Percentage
-----------------------------------------------------------------------
From social networking sites such as Reddit or Twitter            50.67
I browse the list of onion site search engines such as ahmia.fi   50.50
I randomly encounter them while browsing the web                  47.65
Recommendations from friends and family                           19.46
Other (see below for common themes)                               18.12
I am not interested in learning about new onion sites              4.19

The data shows that social networking sites, search engines, and "random
encounters" are rather popular.  Respondents who selected "Other" mostly
brought up onion service lists and aggregators.

Following up, question 3.7 then asked:

&gt; Are you satisfied with the way you discover new onion sites?

61% selected "Yes" while the remaining 39% selected "No."

Some respondents who selected "Yes" brought up that they have no
interest in learning about new onion services; in part because they
only use Facebook's (or some other) onion service.

Among the respondents who selected "No," there are a bunch of
reoccurring themes, in no particular order:

- The most prominent complaint was about broken links on onion site
  lists.  There is non-trivial churn among onion sites and our
  respondents were frustrated that existing lists are typically not
  curated and contain many dead links.

- Many respondents were not aware of search engines such as ahmia.fi.
  Among those that were, many were not satisfied with both the search
  results and the number of indexed onion sites.  Unsurprisingly,
  a "Google for onion sites" was a frequent wish.

- Several respondents were unhappy with existing aggregators.  In
  addition to broken links, some distrust lists because they
  occasionally contain scam and phishing sites.  The difficulty of
  telling apart two given onion domain names exacerbates this issue.

- Some respondents would like aggregators to be more verbose in their
  description of onion sites.  In particular, these respondents were
  trying to avoid illegal and pornographic content, which is often
  difficult if the description is vague and the onion domain reveals
  nothing about its content.

- Many respondents expressed frustration about the difficulty of finding
  out if site X also provides a corresponding onion service.  A common
  wish was to have site X list its onion service prominently in a footer.
  Ironically, some respondents were surprised that torproject.org has a
  corresponding onion site -- they couldn't find it on the web site.

- Two respondents compared the current state of onion services with the
  web of the 90s:  Few sites existed, they linked to each other only
  sparsely, and search engines were experimental at best.

- Interestingly, some respondents voiced frustration about various
  usability issues, but mentioned in the same sentence that this is an
  inherent trade-off of privacy technology, suggesting that there is
  nothing that can be done about it.

There are two potential solutions that would address some of the above
issues:

- Have next-gen onion services opt-in to a broadcast mechanism that
  automatically propagates them.  Naturally, we would like such a
  mechanism to be censorship-resistant and built in a way that only the
  owner of an onion service is authorised to broadcast their service.

- Websites could use an HTTP header to announce the existence of a
  corresponding onion site.  This issue was discussed in Feb 2017 over
  at tor-onions.  Someone brought up the Alt-Svc header as a potential
  solution [1].  In a subsequent survey question we asked if our
  respondents would appreciate an automatic redirect from a web site to
  its corresponding onion site.  The overall tendency leaned towards
  "Yes," provided that the implementation is sound and users can
  override the redirect.

Again, it's important to take these results with a grain of salt.  Our
data has some survivor bias: Presumably, we mostly heard from people who
are Tor users despite usability issues.  We likely didn't hear from many
people who once experimented with Tor or onion services, decided it's
not usable enough, and gave up.

The above was joint work with my colleagues Marshini Chetty, Annie
Edmundson, Nick Feamster, and Laura M. Roberts.

[0] &lt;https://nymity.ch/onion-services/&gt;
[1] &lt;https://lists.torproject.org/pipermail/tor-onions/2016-February/000045.html&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171017193924</emailId><senderName>Fernando Gabrieli</senderName><senderEmail>fgabrieli@gmail.com</senderEmail><timestampReceived>2017-10-17 19:39:24-0400</timestampReceived><subject>[tor-dev] GET request to a regular website using Tor and nodejs</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all, i want to tunnel a http request from my nodejs app through Tor,
would you point me in the right direction to start implementing this?

thanks in advance

Fernando

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello all, i want to tunnel a http request from my nodejs app through \
Tor, would you point me in the right direction to start implementing this?  \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;thanks in advance&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Fernando&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171014144518</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-10-14 14:45:18-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

On Tue, Oct 03, 2017 at 08:25:15PM -0400, Philipp Winter wrote:
&gt; - Many respondents were not aware of search engines such as ahmia.fi.
&gt;   Among those that were, many were not satisfied with both the search
&gt;   results and the number of indexed onion sites.  Unsurprisingly,
&gt;   a "Google for onion sites" was a frequent wish.

Someone at the Tor dev meeting brought up that Google is indexing
tor2web.org including all the onion sites it knows about.  That
means that we can use Google as a search engine for (a subset of)
onion services by searching for "site:onion.to foo".
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171012131520</emailId><senderName>"Santiago R.R."</senderName><senderEmail>santiagorr@riseup.net</senderEmail><timestampReceived>2017-10-12 13:15:20-0400</timestampReceived><subject>[tor-dev] Student project to work on IPv6 support (was: [tor-relays] About relay size)</subject><body>

(Moving this thread from tor-relay)

El 03/10/17 a las 14:25, teor escribió:
&gt; 
&gt; &gt; On 3 Oct 2017, at 10:57, Roman Mamedov &lt;rm@romanrm.net&gt; wrote:
&gt; &gt; 
&gt; &gt; On Tue, 3 Oct 2017 09:53:46 -0400
&gt; &gt; teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt;&gt;&gt;    For interposing dual-protocoled nodes along the way, how many do there
&gt; &gt;&gt;&gt; have to be for it to become "not too limiting"?
&gt; &gt;&gt; 
&gt; &gt;&gt; This is one of the questions we need researchers to answer.
&gt; &gt; 
&gt; &gt; I can't help but feel you are overcomplicating this.
&gt; &gt; 
&gt; &gt; Clients create a circuit by randomly picking 3 nodes out of the all-nodes
&gt; &gt; pile, right? If all 3 happen to be IPv6-capable, then the circuit can go over
&gt; &gt; IPv6 and all is fine. If some of the 3 happen to be IPv6-only while others are
&gt; &gt; IPv4-only, the whole selection can be thrown away and repeated.
&gt; &gt; 
&gt; &gt; That way IPv6-only relays could get some usage on a totally random basis, with
&gt; &gt; no compromises and no restraining "of the next hop based on the previous one",
&gt; &gt; not hurting anonymity. Clients just need to know which nodes are IPv4-only,
&gt; &gt; IPv6-only or dual-stack, to not attempt unworkable combinations, discarding
&gt; &gt; them instead.
&gt; 
&gt; Discarding unworkable combinations and restraining node choices seem
&gt; equivalent to me, although the relay weights may be different.
&gt; 
&gt; &gt; And as there are more and more dual-stack or IPv6-only relays, the "throw
&gt; &gt; away" step will be needed less and less often.
&gt; 
&gt; If you think this will work and is safe for client anonymity, then the next step
&gt; is to write a tor proposal. Having a concrete design could help with
&gt; analysing the anonymity implications as well.
&gt; 
&gt; I think IPv6-only relays are a lower priority than better IPv6 and dual-stack
&gt; client support, and IPv6-only bridge support  But we could do both in the
&gt; same release.

Hello tor-dev,

With my colleague JC Bach (in CC), we have proposed a last-year student
project to address IPv6-related issues in Tor for the upcoming semester,
at IMT Atlantique engineering school. There will be two students working
on it. It is hard to say now how far we will arrive, especially because
this is our first approach to Tor entrails.

So this message is to say we have good chances to come back here looking
for help :-)

Cheers,

  -- Santiago
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171017170133</emailId><senderName>Shawn Webb</senderName><senderEmail>shawn.webb@hardenedbsd.org</senderEmail><timestampReceived>2017-10-17 17:01:33-0400</timestampReceived><subject>[tor-dev] Call For Testing: Capsicum Integration With Tor</subject><body>

[Attachment #2 (multipart/signed)]


Tor Capsicum Call For Testing (CFT)
===================================

Capsicum is a capabilities framework for FreeBSD and its derivatives.
It's commonly used to implement sandboxing. Tor currently supports
sandboxing only on Linux, via seccomp-filter. This CFT presents initial
Capsicum support for Tor on FreeBSD and HardenedBSD. The work
performed is sponsored by HardenedBSD.

The source for the Capsicum work can be found at
https://github.com/lattera/tor. The branch to use is the
hardening/capsicum branch. We hope that this implementation, or a
future revision of it, will be merged upstream by the Tor Project.

Design and Architecture
-----------------------

When capabilities mode (capmode) is entered (ie, the sandbox is
enabled), the kernel will prevent Tor from accessing the global
namespace. This means that once the sandbox is enabled, Tor will not
be able to open files, create sockets, connect outbound, etc.

Naturally, applications like Tor needs to be able to create sockets
on-demand and at-will. In these situations, it is common to fork a
child process which will perform these "privileged" operations. Only
the parent process will enter capmode. Communication between the
parent and the child is performed via a socketpair descriptor.

Wrappers in the parent process call into the child process to perform
these privileged operations. Thus, open(2) becomes sandbox_open(),
rename(2) becomes sandbox_rename(), and so on. A full list of wrapped
operations will be provided further on.

When the parent process wants to open a file, it will call
sandbox_open. The parent process will tell the child via the
socketpair to open the file and limit its capabilities. On success,
the child will return the limited file descriptor back to the parent.

We prevent race conditions surrounding the limitation of file
descriptors by calling cap_rights_limit(2) on the descriptor in the
child before passing the descriptor back to the parent. By the time the
parent can make use of the descriptor, the descriptor is fully limited
to a minimal set of capabilities.

Tor's existing sandbox abstraction API relies on a filtering-based
approach. We've utilized parts of that API to provide a basic
whitelist. Once capmode is entered, the whitelist turns read-only and
cannot be modified.

Efforts to apply Capsicum in the form of wrappers, such as has been
done in this work and others, require ASLR and W^X to be effective.
Without ASLR, an attacker could simply craft an exploit to return into
the respecive wrapper and bypass any guarantees Capsicum provides.
Additionally, Control Flow Integrity (CFI) from clang/llvm will
provide forward-edge guarantees. SafeStack from clang/llvm will
provide backward-edge guarantees.

Known Issues
------------

Enabling the sandbox while having Tor configured in transparent proxy
mode is currently broken. We are researching what causes the breakage.
Chances are that either Tor is trying to access the global namespace in
transparent proxy mode or one or more file descriptors simply need to
be granted one or more extra capabilities.

Future Work
-----------

We plan to research and fix, if possible, the known regression
regarding transparent proxying.

The read-only nature of the whitelist is only enforced via a logic
operation. We plan to relocate the whitelist into a memory mapping
that will turn read-only upon entering capmode.

The current implementation should be further abstracted in order for
Tor to be able to pick at runtime the appropriate sandbox
implementation. This would be similar to how Tor chooses which ed25519
implementation to use, donna or ref10.

Testing and Reporting Back
--------------------------

1. Install required development tools:

# pkg install libevent autoconf automake autotools libtool gmake \
  git-lite

2. Clone the git repo:

# git clone https://github.com/lattera/tor.git

3. Check out the hardening/capsicum branch:

# cd tor
# git checkout -b hardening/capsicum origin/hardening/capsicum

4. Regenerate autoconf magic:

# ./autogen.sh

5. Run the configure script:

# ./configure [custom arguments to configure as you'd prefer]

6. Build and install:

# gmake -j$(sysctl -n hw.ncpu) &amp;&amp; gmake install

7. Enable the sandbox in the torrc:

# echo "Sandbox 1" &gt;&gt; [path to torrc]

8. Run Tor:

# tor

9. Report results:

Email shawn.webb@hardenedbsd.org, report back any issues you may have.
If your testing succeeds, I'd like to hear about it, too. Please do
not open any tickets regarding this work on the Tor Project's Trac
instance. Contact me directly.

A sample report back would include a sanitized torrc along with a
pass/fail result. A successful result would mean that all features you
rely on work as desired. A failed result would mean that enabling a
feature results in Tor crashing, erroring out, or exhibiting bugs. If
Tor crashes for you, please include a backtrace if possible.

New Sandbox Wrappers
--------------------

These APIs will need to be used regardless of operating system. On
operating systems outside of FreeBSD and HardenedBSD, they are simply
macros that forward to their respective native API call.

* int sandbox_close(int fd): close(2) wrapper
* int sandbox_rename(const char *from, const char *to): rename(2) wrapper
* int sandbox_stat(const char *path, struct stat *sb): stat(2) wrapper
* int sandbox_mkdir(const char *path, mode_t mode): mkdir(2) wrapper
* int sandbox_connect(int sockfd, const struct sockaddr *name, socklen_t namelen): connect(2) wrapper
* int sandbox_socket(int domain, int type, int protocol, cap_rights_t *rights): socket(2) wrapper
* int sandbox_unlink(const char *path): unlink(2) wrapper
* int sandbox_open(const char *path, int flags, mode_t mode, cap_rights_t *rights): open(2) wrapper

-- 
Shawn Webb
Cofounder and Security Engineer
HardenedBSD

GPG Key ID:          0x6A84658F52456EEE
GPG Key Fingerprint: 2ABA B6BD EF6A F486 BE89  3D9E 6A84 658F 5245 6EEE

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171012162246</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-12 16:22:46-0400</timestampReceived><subject>Re: [tor-dev] Student project to work on IPv6 support (was: [tor-relays] About relay size)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 12 Oct 2017, at 09:15, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:
&gt; 
&gt; (Moving this thread from tor-relay)
&gt; 
&gt;&gt; El 03/10/17 a las 14:25, teor escribió:
&gt;&gt; 
&gt;&gt;&gt; On 3 Oct 2017, at 10:57, Roman Mamedov &lt;rm@romanrm.net&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; On Tue, 3 Oct 2017 09:53:46 -0400
&gt;&gt;&gt; teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;&gt;   For interposing dual-protocoled nodes along the way, how many do there
&gt;&gt;&gt;&gt;&gt; have to be for it to become "not too limiting"?
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; This is one of the questions we need researchers to answer.
&gt;&gt;&gt; 
&gt;&gt;&gt; I can't help but feel you are overcomplicating this.
&gt;&gt;&gt; 
&gt;&gt;&gt; Clients create a circuit by randomly picking 3 nodes out of the all-nodes
&gt;&gt;&gt; pile, right? If all 3 happen to be IPv6-capable, then the circuit can go over
&gt;&gt;&gt; IPv6 and all is fine. If some of the 3 happen to be IPv6-only while others are
&gt;&gt;&gt; IPv4-only, the whole selection can be thrown away and repeated.
&gt;&gt;&gt; 
&gt;&gt;&gt; That way IPv6-only relays could get some usage on a totally random basis, with
&gt;&gt;&gt; no compromises and no restraining "of the next hop based on the previous one",
&gt;&gt;&gt; not hurting anonymity. Clients just need to know which nodes are IPv4-only,
&gt;&gt;&gt; IPv6-only or dual-stack, to not attempt unworkable combinations, discarding
&gt;&gt;&gt; them instead.
&gt;&gt; 
&gt;&gt; Discarding unworkable combinations and restraining node choices seem
&gt;&gt; equivalent to me, although the relay weights may be different.
&gt;&gt; 
&gt;&gt;&gt; And as there are more and more dual-stack or IPv6-only relays, the "throw
&gt;&gt;&gt; away" step will be needed less and less often.
&gt;&gt; 
&gt;&gt; If you think this will work and is safe for client anonymity, then the next step
&gt;&gt; is to write a tor proposal. Having a concrete design could help with
&gt;&gt; analysing the anonymity implications as well.
&gt;&gt; 
&gt;&gt; I think IPv6-only relays are a lower priority than better IPv6 and dual-stack
&gt;&gt; client support, and IPv6-only bridge support  But we could do both in the
&gt;&gt; same release.
&gt; 
&gt; Hello tor-dev,
&gt; 
&gt; With my colleague JC Bach (in CC), we have proposed a last-year student
&gt; project to address IPv6-related issues in Tor for the upcoming semester,
&gt; at IMT Atlantique engineering school. There will be two students working
&gt; on it. It is hard to say now how far we will arrive, especially because
&gt; this is our first approach to Tor entrails.
&gt; 
&gt; So this message is to say we have good chances to come back here looking
&gt; for help :-)

Hi Santiago,

This is great! We would like some help with Tor's IPv6 support.
And we are happy to help you and your students.

How many students?
How much time?
What are your goals for the project?
How much do you expect to get done?

We are at a Tor meeting this week.
We are revising Tor's IPv6 roadmap for the next year.
Next week, this page will be updated:
https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/IPv6Hackfest

We want to help people get code accepted into tor.
Here is how we write code:
https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md
https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md

It can help to start by submitting a small change, so you can see how we work.
Then you can make larger changes more easily.
Our bug tracker is:
https://trac.torproject.org/

We are also in #tor-dev IRC on irc.oftc.net.

Please ask questions early, and ask often!
We would love to help you help tor.

Tim (teor)
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 12 Oct 2017, at 09:15, Santiago \
R.R. &lt;&lt;a href="mailto:santiagorr@riseup.net"&gt;santiagorr@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;(Moving this thread from \
tor-relay)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;El 03/10/17 a las 14:25, teor \
escribió:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 3 Oct 2017, at 10:57, Roman Mamedov &lt;&lt;a \
href="mailto:rm@romanrm.net"&gt;rm@romanrm.net&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On Tue, 3 Oct 2017 09:53:46 \
-0400&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;   For interposing dual-protocoled nodes along the way, \
how many do there&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;have to be for it to become "not too \
limiting"?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;This is one of the \
questions we need researchers to \
answer.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I can't help but feel you are \
overcomplicating this.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Clients create a circuit by randomly \
picking 3 nodes out of the all-nodes&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;pile, right? If all 3 happen to be \
IPv6-capable, then the circuit can go \
over&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;IPv6 and all is fine. If some of the 3 happen to be IPv6-only while \
others are&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;IPv4-only, the whole selection can be thrown away and \
repeated.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;That way IPv6-only relays could get some \
usage on a totally random basis, with&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;no compromises and no restraining "of the \
next hop based on the previous one",&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;not hurting anonymity. Clients just need to \
know which nodes are IPv4-only,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;IPv6-only or dual-stack, to not attempt \
unworkable combinations, discarding&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;them \
instead.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Discarding \
unworkable combinations and restraining node choices \
seem&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;equivalent to me, although \
the relay weights may be different.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;And as there are more and more dual-stack or IPv6-only relays, the \
"throw&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;away" step will be needed less and less \
often.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If you think \
this will work and is safe for client anonymity, then the next \
step&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;is to write a tor proposal. \
Having a concrete design could help with&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;analysing the anonymity implications as \
well.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I think \
IPv6-only relays are a lower priority than better IPv6 and \
dual-stack&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;client support, and \
IPv6-only bridge support  But we could do both in \
the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;same \
release.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Hello \
tor-dev,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;With my colleague JC Bach (in CC), we have \
proposed a last-year student&lt;/span&gt;&lt;br&gt;&lt;span&gt;project to address IPv6-related issues \
in Tor for the upcoming semester,&lt;/span&gt;&lt;br&gt;&lt;span&gt;at IMT Atlantique engineering \
school. There will be two students working&lt;/span&gt;&lt;br&gt;&lt;span&gt;on it. It is hard to say \
now how far we will arrive, especially because&lt;/span&gt;&lt;br&gt;&lt;span&gt;this is our first \
approach to Tor entrails.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;So this message is to say \
we have good chances to come back here looking&lt;/span&gt;&lt;br&gt;&lt;span&gt;for help \
:-)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Hi Santiago,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This \
is great! We would like some help with Tor's IPv6 support.&lt;/div&gt;&lt;div&gt;And we are happy \
to help you and your students.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How many \
students?&lt;/div&gt;&lt;div&gt;How much time?&lt;/div&gt;&lt;div&gt;What are your goals for the \
project?&lt;/div&gt;&lt;div&gt;How much do you expect to get done?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
are at a Tor meeting this week.&lt;/div&gt;&lt;div&gt;We are revising Tor's IPv6 roadmap for the \
next year.&lt;/div&gt;&lt;div&gt;Next week, this page will be updated:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/IPv6Hac \
kfest"&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/IPv6Hackfest&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
want to help people get code accepted into tor.&lt;/div&gt;&lt;div&gt;Here is how we write \
code:&lt;/div&gt;&lt;div&gt;&lt;a href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/Gettin \
gStarted.md"&gt;https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md"&gt;https \
://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
can help to start by submitting a small change, so you can see how we \
work.&lt;/div&gt;&lt;div&gt;Then you can make larger changes more easily.&lt;/div&gt;&lt;div&gt;Our bug \
tracker is:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/"&gt;https://trac.torproject.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
are also in #tor-dev IRC on &lt;a \
href="http://irc.oftc.net"&gt;irc.oftc.net&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please ask \
questions early, and ask often!&lt;/div&gt;&lt;div&gt;We would love to help you help \
tor.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tim (teor)&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171018110300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-18 11:03:00-0400</timestampReceived><subject>[tor-dev] metrics: collecting circuit build failures from relays to detect network reachability issu</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

In [1] David describes his preliminary results from scanning a portion
of the tor network to detect connectivity problems (partitions) in the
presumed tor mesh network (where every relay is expected to be able to
reach every other relay).

I believe this information (How far off are we from a complete mesh
network?) is crucial for the anonymity properties of the tor network and
collecting the data to answer that question should be an integral and
continuous part of tor.

Actively scanning the tor network for connectivity issues is resource
intensive. What if we could collect this data without actively scanning
for it?

This could be achieved by collecting reachability information passively
by relays themselves and uploaded via extra-info descriptors.

This data could help reduce the overall scanning effort. So instead of
scanning _all_ relays we can reduce the scanning to relays where some
threshold of relays consistently said that they are hardly reachable.
(to confirm their measurements)

Due to the mutual nature of the information collection, single or a
minor number of lying relays would not be a big issue.

relays could:

- aggregate reachability issues over the past 24 hours (or week?) per
outbound destination relay (which relay failed what percentage of
circuit build attempts)
- if a relay failed more than - some threshold value - check if the
relay in question:
	- had his uptime reset during that timeframe (reachability problem
expected)
	- dropped out of consensus during that timeframe
- only include it in uploaded data if it didn't drop out of consensus
and did not reset his uptime

(using a week instead of a day would help with reducing the amount of
data that we need to process after collecting it)

In addition to that passive collection, relays - when idle/not
overloaded - could actively attempt to create circuits to measure their
reachability to relays for which they did not collect any any passive
data. (maybe limit it to fast and stable destination relays)

To reduce the load on the tor network we could limit the active outbound
connection tests based on relay flags:
- Guard-only relays are more likely to establish outbound connections to
non-exit relays
- middle-only relays (no guard and exit flag) are more likely to
establish connections to exits than to guards
- exits are more likely to get inbound connections from non-guards
(maybe skip active probes from exits since they are a bottleneck already?)

Reachability issues could also be displayed to the relay operator
warning them about the potential problem via log entries. So they could
actively work on debugging problems themselfes.

There is no doubt that this information is also valuable for (powerful)
adversaries (it could help them reduce their effort when they know weak
spots in the network). So you would have to decide what data you collect
an what you would publish (collector.tpo) - even if that means I might
never get to see that interesting data ;)


This is a medium/long term goal, with the usual steps:

- proposal
- implementation
(- deployment
- data collection - the amount of data could be huge
- data analysis)

If there is a consensus that this makes sense and if someone would
actually implement it I would be happy to work/help on a proposal.

This entire idea would be an opt-in torrc setting at the beginning and a
opt-out feature once we are more confident about its implications and
safety.

Please let me know what you think about this idea.

regards,
nusenu


[1]
https://lists.torproject.org/pipermail/tor-project/2017-October/001492.html



related trac tickets:
https://trac.torproject.org/projects/tor/ticket/12131
https://trac.torproject.org/projects/tor/ticket/19068






-- 
https://mastodon.social/@nusenu
twitter: @nusenu_





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171022181408</emailId><senderName>Igor Mitrofanov</senderName><senderEmail>igor.n.mitrofanov@gmail.com</senderEmail><timestampReceived>2017-10-22 18:14:08-0400</timestampReceived><subject>[tor-dev] Do Tor relays rely on ICMP type 11 (time exceeded / timeout in transit)?</subject><body>

Hi,

On my relays I am dropping any traffic that Tor itself does not rely on.
I wonder if I should allow or block incoming and/outgoing ICMP type 11
(time exceeded / timeout in transit)?

My host does receive some ICMP type 11 packets, and does seem to send
some out, but I am not sure if Tor is the source or destination.
Do Tor relays use some 'traceroute'-like mechanism to detect unreachable relays?

"netstat -s:
    ...
    ICMP input histogram:
        ...
        timeout in transit: 1923
    ...
    ICMP output histogram:
        ...
        timeout in transit: 1277
"
I remember seeing outgoing TCP packets with TTL set to 1 - those were
the ones triggering incoming ICMP type 11 packets.

Thanks,
- Igor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171022163859</emailId><senderName>Ankit Rathore</senderName><senderEmail>ankitr.nalkv@gmail.com</senderEmail><timestampReceived>2017-10-22 16:38:59-0400</timestampReceived><subject>[tor-dev] Request for resource requirement</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
I am currently working on a project where I require the resource which was
originally present at this link

https://trac.torproject.org/projects/tor/wiki/sponsors/SponsorD/June2011

The contents of this page are no longer available. It would be really
helpful if someone could help me get the original contents of this page

Thank you

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hello,  &lt;div dir="auto"&gt;I am currently working on a project where I \
require the resource which was originally present at this link  &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/sponsors/SponsorD/June2011"&gt;https: \
//trac.torproject.org/projects/tor/wiki/sponsors/SponsorD/June2011&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;The contents of this page are no longer \
available. It would be really helpful if someone could help me get the original \
contents of this page&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Thank \
you&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025031730</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-25 03:17:30-0400</timestampReceived><subject>[tor-dev] Reporting Relay Bandwidth Less Often</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

We would like to make Tor relays report their bandwidth statistics
every 24 hours, rather than every 4 hours. We believe that this is a
safer interval for clients. It makes it harder to discover the guards of
clients that use a lot of bandwidth, particularly onion services.

Here's how this kind of guard discovery can happen:
* a client repeatedly downloads a large file, or an onion service
  becomes very popular, or is repeatedly asked for a large file
* the traffic statistics for the client's guard increase dramatically
  in the next 4 hours
* an adversary watches the traffic statistics across the whole network,
  and finds the ones with dramatic increases

Increasing the bandwidth statistics interval slows down this attack:
* it requires more bandwidth to produce a 24 hour spike
* each statistics interval is longer, so it takes more time to be sure
  of the guard

One of the impacts of this change is that relay bandwidth graphs are
less detailed. We will encourage relay operators to view detailed
graphs using local tools like Nyx or Munin or similar, because this is
safer for clients.

We are tracking this work in this trac ticket:

https://trac.torproject.org/projects/tor/ticket/23856

Tim

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZ8AJKAAoJEHQNnjkCUnKi93QP/2qVxOgXDBzClXJ2T8U11X3c
pNQ69ITknBlEZ6h7Jz6vyGndIRUKv6zybigdF71l+Sgt2CE/WH42h5y9lB1pDXhK
97sbHyLcCFjuKXmsZ184ecAxcb3+4OLR9gvapob3tNkPKkL3lRIENp8p+xoJbrVs
Ld0FCO7BxsPd+JMTSC3I9PEuT6plhf0+L8MF82D+5WGDorhPx6C7/NR1qn1FnXiU
ouZQ8rxU8OtX0ytANlic6wcPYS4/QNirR6UxCrhuBjGcV9tGEp5IdWfuJqyeVq2c
+IodzdSMnztX0/yKeBGzdLTEMLacFzcN9Cjkt7GrguZBXpks3pjEAVuVfzZeUJlE
5QeEk+vsX9G07hXy7v6ez+b+lssxP81TL9fm+ZcKlzn6fz5Quy5g4n43mBDl2IT4
64RRklH+AaDgD1Ud40yYPDn5rQYppPtqOoVCE8VZ4e0RWPA6uaq5u4/f8Js15ukA
/+eDchtjBzNNQYoOnCBl/MpInVe6P9wKdmdkVPGpY5VDsoUn7Fz8D7W5C30bDicQ
U9YAkwfMRu3FaKat99g/76ui8MYpj5dOMt2GMyZGdM5ZpQWGTtI7jUfN4npmM/C0
Vmo0ruRfsDleSXTpyhEQRTfBeXOSe/lDrcuEhjZ2+uSrLBdPx88Zf27XnXnVPXA6
WBkjH1XUHlUqLnvMqTVH
=cBoj
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025215100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-25 21:51:00-0400</timestampReceived><subject>[tor-dev]  onionoo.tpo stuck at 2017-10-25 04:00?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Karsten,

just wanted to let you know that the delta between
relays_published and current time is unusually high.


https://onionoo.torproject.org/details?limit=0

{"version":"4.2",
"build_revision":"bce585f",
"relays_published":"2017-10-25 04:00:00",

(please let me know if you have automated monitoring/alerting so I know
that these emails are not useful)

thanks,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171028092830</emailId><senderName>inkylatenoth</senderName><senderEmail>inkylatenoth@protonmail.com</senderEmail><timestampReceived>2017-10-28 09:28:30-0400</timestampReceived><subject>[tor-dev] v3 hidden services: inconsistencies between spec and implementation</subject><body>

Whilst implementing v3 hidden services myself I found some
inconsistencies between the specs and the current implementation. I
wanted to share these in case someone from the Tor organization wants to
update the specs and/or the implementation.

# rend-spec-v3.txt

## 2.4

* after decrypting the `superencrypted' object from a descriptor, the
  resulting document does not end with the NL character. This means that
  it does not strictly conform to the document meta-format described in
  section 1.2 of dir-spec.txt.

## A.2

* the blinded key param is defined as H(BLIND_STRING | A | s | B | N).
  In practice I found that I had to add a null byte after BLIND_STRING
  in order to reach the same value as the C implementation:

    param = H(BLIND_STRING | INT_1(\x00) | A | s | B | N)

  In all other cases where a string constant is used like this (e.g.
  computing the nonce N above), I found that the trailing null byte is
  not required.

* when clamping the blinding factor, the second bitwise operation is
  `param[31] &amp;= 127' in the spec but `param[31] &amp;= 63' in the C
  implementation. These are equivalent in practice when followed by the
  third operation (`param[31] |= 64'), but it might be nice to use a
  consistent representation for the benefit of human readers.

# 220-ecc-ids-keys.txt

# 2.1

* 'The signature is formed by signing the first N-64 bytes of the
  certificate prefixed with the string "Tor node signing key certificate
  v1".' I found this to be false; the signatures only validate without
  the string prefix.

## A.1

* I realized that the certificate types here are outdated. The
  signing-key extension is listed as type [04], when in rend-spec-v3.txt
  and the C implementation it is type [08].
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171028141934</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-10-28 14:19:34-0400</timestampReceived><subject>[tor-dev] Understanding the guard/md issue (#21969)</subject><body>

Hey Tim,

just wanted to ask a clarifying question wrt #21969.

First of all there are various forms of #21969 (aka the "missing
descriptors for some of our primary entry guards" issue). Sometimes it
occurs for 10 mins and then goes away, whereas for other people it
disables their service permanently (until restart). I call this the
hardcore case of #21969. It has happened to me and disabled my service
for days, and I've also seen it happen to other people (e.g. dgoulet).

So. We have found various md-related bugs and put them as children of
#21969. Do you think we have found the bugs that can cause the hardcore
case of #21969? That is, is any of these bugs (or a bug combo) capable
of permanently disabling an onion service?

It seems to me that all the bugs identified so far can only cause #21969
to occur for a few hours before it self-heals itself. IIUC, even the
most fundamental bugs like #23862 and #23863 are only temporarily, since
eventually one of the dirguards will fetch the missing mds and give them
to the client. Do you think that's the case?

I'm asking you because I plan to spend some serious time next week on
#21969-related issues, and I'd like to prioritize between bug hunting
and bug fixing. That is, if the root cause of the hardcore case of
#21969 is still out there, I'd like to continue bug hunting until I find
it.

Let me know what you think! Perhaps you have other ideas here of how we
should approach this issue.

Cheers!! :)

PS: Sending this as an email since our timezones are making it kind hard
    to synch up on IRC.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171028215902</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-28 21:59:02-0400</timestampReceived><subject>Re: [tor-dev] Understanding the guard/md issue (#21969)</subject><body>


&gt; On 29 Oct 2017, at 01:19, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Hey Tim,
&gt; 
&gt; just wanted to ask a clarifying question wrt #21969.
&gt; 
&gt; First of all there are various forms of #21969 (aka the "missing
&gt; descriptors for some of our primary entry guards" issue). Sometimes it
&gt; occurs for 10 mins and then goes away, whereas for other people it
&gt; disables their service permanently (until restart). I call this the
&gt; hardcore case of #21969. It has happened to me and disabled my service
&gt; for days, and I've also seen it happen to other people (e.g. dgoulet).
&gt; 
&gt; So. We have found various md-related bugs and put them as children of
&gt; #21969. Do you think we have found the bugs that can cause the hardcore
&gt; case of #21969? That is, is any of these bugs (or a bug combo) capable
&gt; of permanently disabling an onion service?

Yes, this bug is disabling:

#23862, where we don't update guard state unless we have enough
directory info.

When tor gets in a state where it doesn't have enough directory info
due to another bug, this makes sure it will never get out of that state.
Because it will never mark its directory guards as up when it gets a
new consensus, and therefore it will never fetch microdescs, find out
it has enough directory info, and build circuits.

That's why I made sure we fixed it as soon as possible. I'm glad it's in
the latest alpha.

And this (and a few of the other #21969 children) makes it happen:

#23817, where we keep trying directory guards even though they don't
have the microdescriptors we want, on an exponential backoff.

Because it causes tor to only check for new microdescriptors after a
very long time (days or weeks), which means the microdescs can expire
before they are refreshed.

&gt; It seems to me that all the bugs identified so far can only cause #21969
&gt; to occur for a few hours before it self-heals itself. IIUC, even the
&gt; most fundamental bugs like #23862 and #23863 are only temporarily, since
&gt; eventually one of the dirguards will fetch the missing mds and give them
&gt; to the client. Do you think that's the case?

No, the current set of bugs can block microdesc fetches forever.
And even if they do happen eventually, "eventually" on an exponential backoff
is indistinguishable from "forever" over short time frames. (This is by design,
it's part of the definition of an exponential backoff.)

&gt; I'm asking you because I plan to spend some serious time next week on
&gt; #21969-related issues, and I'd like to prioritize between bug hunting
&gt; and bug fixing. That is, if the root cause of the hardcore case of
&gt; #21969 is still out there, I'd like to continue bug hunting until I find
&gt; it.
&gt; 
&gt; Let me know what you think! Perhaps you have other ideas here of how we
&gt; should approach this issue.

Fix #23817 by implementing a failure cache and going to a fallback if all
primary guards fail. I think that would be a solution for #23863 as well.

And if a few fallbacks don't have the guard's microdesc, mark the guard as
down. It's likely it's microdesc is just not on the network for some reason.

Fix #23985, the 10 minute wait when we have less than 15 microdescs,
by changing it to an exponential backoff. Otherwise, if we handle it
specially when it includes our primary guards, clients will leak that their
primary guards are in this small set. (And if we're using an exponential
backoff, the failure cache from #23817 will kick in, so we'll check
fallbacks, then mark the primary guard down.)

After that, I'd put these fixes out in an alpha, and wait and see if the issue
happens again.

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171030113044</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-10-30 11:30:44-0400</timestampReceived><subject>Re: [tor-dev] Understanding the guard/md issue (#21969)</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt;&gt; On 29 Oct 2017, at 01:19, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; Hey Tim,
&gt;&gt; 
&gt;&gt; just wanted to ask a clarifying question wrt #21969.
&gt;&gt; 
&gt;&gt; First of all there are various forms of #21969 (aka the "missing
&gt;&gt; descriptors for some of our primary entry guards" issue). Sometimes it
&gt;&gt; occurs for 10 mins and then goes away, whereas for other people it
&gt;&gt; disables their service permanently (until restart). I call this the
&gt;&gt; hardcore case of #21969. It has happened to me and disabled my service
&gt;&gt; for days, and I've also seen it happen to other people (e.g. dgoulet).
&gt;&gt; 
&gt;&gt; So. We have found various md-related bugs and put them as children of
&gt;&gt; #21969. Do you think we have found the bugs that can cause the hardcore
&gt;&gt; case of #21969? That is, is any of these bugs (or a bug combo) capable
&gt;&gt; of permanently disabling an onion service?
&gt;
&gt; Yes, this bug is disabling:
&gt;

Thanks for the reply, Tim.

&gt; #23862, where we don't update guard state unless we have enough
&gt; directory info.
&gt;
&gt; When tor gets in a state where it doesn't have enough directory info
&gt; due to another bug, this makes sure it will never get out of that state.
&gt; Because it will never mark its directory guards as up when it gets a
&gt; new consensus, and therefore it will never fetch microdescs, find out
&gt; it has enough directory info, and build circuits.
&gt;

Hmm, just want to make sure I get this.

My understanding with #23862 is that Tor would never mark its directory
guards as up like you say, but it _would still_ fetch microdescs using
fallback directories because of the way
directory_pick_generic_dirserver() works. Isn't that the case?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171030123141</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-30 12:31:41-0400</timestampReceived><subject>Re: [tor-dev] Understanding the guard/md issue (#21969)</subject><body>

[Attachment #2 (multipart/alternative)]


-- 
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------

&gt; On 30 Oct 2017, at 22:30, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; teor &lt;teor2345@gmail.com&gt; writes:
&gt; 
&gt;&gt;&gt; On 29 Oct 2017, at 01:19, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; Hey Tim,
&gt;&gt;&gt; 
&gt;&gt;&gt; just wanted to ask a clarifying question wrt #21969.
&gt;&gt;&gt; 
&gt;&gt;&gt; First of all there are various forms of #21969 (aka the "missing
&gt;&gt;&gt; descriptors for some of our primary entry guards" issue). Sometimes it
&gt;&gt;&gt; occurs for 10 mins and then goes away, whereas for other people it
&gt;&gt;&gt; disables their service permanently (until restart). I call this the
&gt;&gt;&gt; hardcore case of #21969. It has happened to me and disabled my service
&gt;&gt;&gt; for days, and I've also seen it happen to other people (e.g. dgoulet).
&gt;&gt;&gt; 
&gt;&gt;&gt; So. We have found various md-related bugs and put them as children of
&gt;&gt;&gt; #21969. Do you think we have found the bugs that can cause the hardcore
&gt;&gt;&gt; case of #21969? That is, is any of these bugs (or a bug combo) capable
&gt;&gt;&gt; of permanently disabling an onion service?
&gt;&gt; 
&gt;&gt; Yes, this bug is disabling:
&gt;&gt; 
&gt; 
&gt; Thanks for the reply, Tim.
&gt; 
&gt;&gt; #23862, where we don't update guard state unless we have enough
&gt;&gt; directory info.
&gt;&gt; 
&gt;&gt; When tor gets in a state where it doesn't have enough directory info
&gt;&gt; due to another bug, this makes sure it will never get out of that state.
&gt;&gt; Because it will never mark its directory guards as up when it gets a
&gt;&gt; new consensus, and therefore it will never fetch microdescs, find out
&gt;&gt; it has enough directory info, and build circuits.
&gt;&gt; 
&gt; 
&gt; Hmm, just want to make sure I get this.
&gt; 
&gt; My understanding with #23862 is that Tor would never mark its directory
&gt; guards as up like you say, but it _would still_ fetch microdescs using
&gt; fallback directories because of the way
&gt; directory_pick_generic_dirserver() works. Isn't that the case?

No, because we're not actually marking those guards as down (#23863),
I think we might be putting them in a partly usable guard state instead.
(Fallbacks are only used when all directory guards or mirrors are down.)

And so we keep trying guards until we backoff for a long time (#23817).

Which means that some of our microdescs start expiring or change in the
consensus. Which triggers #23862, which we fixed in 0.3.2.3-alpha.

And we don't reset the right download state when we get an application
request (#23620). Which makes it hard for tor to recover from this bug.

I might be wrong or missing a few of the details, but those bugs are
enough to cause the issues we're seeing. Hopefully we can find any
remaining bugs when we fix these ones.

This set of bugs is actually better than the alternative, which is clients
trying too fast, and DDoSing relays. If we hadn't implemented exponential
backoff, these retries could have caused either a slow or fast DDoS.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;br&gt;&lt;div id="AppleMailSignature"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;-- &lt;br&gt;Tim / teor&lt;br&gt;&lt;br&gt;PGP \
C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F \
094B&lt;br&gt;ricochet:ekmygaiu4rzgsk6n&lt;br&gt;------------------------------------------------------------------------&lt;/span&gt;&lt;br \
style="font-family: UICTFontTextStyleTallBody; font-size: 17px; \
-webkit-text-size-adjust: auto;"&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 30 Oct 2017, at 22:30, George \
Kadianakis &lt;&lt;a href="mailto:desnacked@riseup.net"&gt;desnacked@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
writes:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 29 Oct 2017, at 01:19, George Kadianakis &lt;&lt;a \
href="mailto:desnacked@riseup.net"&gt;desnacked@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Hey \
Tim,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;just wanted to ask a clarifying question \
wrt #21969.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;First of all there are various forms of \
#21969 (aka the "missing&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;descriptors for some of our primary entry \
guards" issue). Sometimes it&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;occurs for 10 mins and then goes away, \
whereas for other people it&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;disables their service permanently (until \
restart). I call this the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;hardcore case of #21969. It has happened to \
me and disabled my service&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;for days, and I've also seen it happen to \
other people (e.g. dgoulet).&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;So. We have found various md-related bugs \
and put them as children of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;#21969. Do you think we have found the bugs \
that can cause the hardcore&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;case of #21969? That is, is any of these \
bugs (or a bug combo) capable&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;of permanently disabling an onion \
service?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Yes, this bug \
is disabling:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Thanks for the \
reply, Tim.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;#23862, where we \
don't update guard state unless we have enough&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;directory info.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;When tor gets \
in a state where it doesn't have enough directory \
info&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;due to another bug, this \
makes sure it will never get out of that state.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Because it will never mark its directory guards as up when it gets \
a&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;new consensus, and therefore \
it will never fetch microdescs, find out&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;it has enough directory info, and build \
circuits.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Hmm, just want to \
make sure I get this.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;My understanding with #23862 \
is that Tor would never mark its directory&lt;/span&gt;&lt;br&gt;&lt;span&gt;guards as up like you say, \
but it _would still_ fetch microdescs using&lt;/span&gt;&lt;br&gt;&lt;span&gt;fallback directories \
because of the way&lt;/span&gt;&lt;br&gt;&lt;span&gt;directory_pick_generic_dirserver() works. Isn't \
that the case?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;No, because we're not actually \
marking those guards as down (#23863),&lt;/div&gt;&lt;div&gt;I think we might be putting them in \
a partly usable guard state instead.&lt;/div&gt;&lt;div&gt;(Fallbacks are only used when all \
directory guards or mirrors are down.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And so we keep trying \
guards until we backoff for a long time (#23817).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Which \
means that some of our microdescs start expiring or change in \
the&lt;/div&gt;&lt;div&gt;consensus. Which triggers #23862, which we fixed in \
0.3.2.3-alpha.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And we don't reset the right download state \
when we get an application&lt;/div&gt;&lt;div&gt;request (#23620). Which makes it hard for tor to \
recover from this bug.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I might be wrong or missing a few of \
the details, but those bugs are&lt;/div&gt;&lt;div&gt;enough to cause the issues we're seeing. \
Hopefully we can find any&lt;/div&gt;&lt;div&gt;remaining bugs when we fix these \
ones.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This set of bugs is actually better than the \
alternative, which is clients&lt;/div&gt;&lt;div&gt;trying too fast, and DDoSing relays. If we \
hadn't implemented exponential&lt;/div&gt;&lt;div&gt;backoff, these retries could have caused \
either a slow or fast DDoS.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171028143051</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-10-28 14:30:51-0400</timestampReceived><subject>Re: [tor-dev] v3 hidden services: inconsistencies between spec and implementation</subject><body>

inkylatenoth &lt;inkylatenoth@protonmail.com&gt; writes:

&gt; Whilst implementing v3 hidden services myself I found some
&gt; inconsistencies between the specs and the current implementation. I
&gt; wanted to share these in case someone from the Tor organization wants to
&gt; update the specs and/or the implementation.
&gt;

Hello inkylatenoth!

That's a great post and thanks for catching all these issues and
innacuracies! We are definitely interested in consistency and fixing the
spec (and implementation if needed).

&gt; # rend-spec-v3.txt
&gt;
&gt; ## 2.4
&gt;
&gt; * after decrypting the `superencrypted' object from a descriptor, the
&gt;   resulting document does not end with the NL character. This means that
&gt;   it does not strictly conform to the document meta-format described in
&gt;   section 1.2 of dir-spec.txt.
&gt;

Hmm... This might be worth fixing on the implementation if possible (and
if it won't break things). Otherwise, let's patch the spec.

&gt; ## A.2
&gt;
&gt; * the blinded key param is defined as H(BLIND_STRING | A | s | B | N).
&gt;   In practice I found that I had to add a null byte after BLIND_STRING
&gt;   in order to reach the same value as the C implementation:
&gt;
&gt;     param = H(BLIND_STRING | INT_1(\x00) | A | s | B | N)
&gt;
&gt;   In all other cases where a string constant is used like this (e.g.
&gt;   computing the nonce N above), I found that the trailing null byte is
&gt;   not required.
&gt;

Ouch. This might be an artifact of the way strings are implemented in C.

I guess a spec patch might be the right thing to do here, otherwise too
much stuff will break. 

&gt; * when clamping the blinding factor, the second bitwise operation is
&gt;   `param[31] &amp;= 127' in the spec but `param[31] &amp;= 63' in the C
&gt;   implementation. These are equivalent in practice when followed by the
&gt;   third operation (`param[31] |= 64'), but it might be nice to use a
&gt;   consistent representation for the benefit of human readers.
&gt;

Hmm... Yeah there are various ways to do the clamping for ed25519 keys.

I think we should edit the spec to reflect the clamping we do on the code.

&gt; # 220-ecc-ids-keys.txt
&gt;
&gt; # 2.1
&gt;
&gt; * 'The signature is formed by signing the first N-64 bytes of the
&gt;   certificate prefixed with the string "Tor node signing key certificate
&gt;   v1".' I found this to be false; the signatures only validate without
&gt;   the string prefix.
&gt;

Ouch... I think we should edit the spec and consider if there are any
security risks here.

&gt; ## A.1
&gt;
&gt; * I realized that the certificate types here are outdated. The
&gt;   signing-key extension is listed as type [04], when in rend-spec-v3.txt
&gt;   and the C implementation it is type [08].

Let's fix the spec here too...

---

Inkylatenoth, let me know if you are interested in drafting a spec/code
patch for the issues you found!!! If you are not interested, I can try
to do them myself at some point in the next weeks (been pretty busy with
stuff lately).

Also, let us know if your independent implementation is a public thing
we should know about. Seems interesting :)

Thanks again!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171025193600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-25 19:36:00-0400</timestampReceived><subject>Re: [tor-dev] Reporting Relay Bandwidth Less Often</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; We would like to make Tor relays report their bandwidth statistics
&gt; every 24 hours, rather than every 4 hours.

How has the new time period been decided on?
Is one day the upper bound for some use-case?
If longer periods (2, 3 or 7 days...) are safer: why not increase it
even more?


--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171022205528</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-22 20:55:28-0400</timestampReceived><subject>Re: [tor-dev] Do Tor relays rely on ICMP type 11 (time exceeded / timeout in transit)?</subject><body>


&gt; On 23 Oct 2017, at 05:14, Igor Mitrofanov &lt;igor.n.mitrofanov@gmail.com&gt; wrote:
&gt; 
&gt; On my relays I am dropping any traffic that Tor itself does not rely on.
&gt; I wonder if I should allow or block incoming and/outgoing ICMP type 11
&gt; (time exceeded / timeout in transit)?

Try it and see?

&gt; My host does receive some ICMP type 11 packets, and does seem to send
&gt; some out, but I am not sure if Tor is the source or destination.
&gt; Do Tor relays use some 'traceroute'-like mechanism to detect unreachable relays?

Not as far as I am aware.

&gt; "netstat -s:
&gt;    ...
&gt;    ICMP input histogram:
&gt;        ...
&gt;        timeout in transit: 1923
&gt;    ...
&gt;    ICMP output histogram:
&gt;        ...
&gt;        timeout in transit: 1277
&gt; "
&gt; I remember seeing outgoing TCP packets with TTL set to 1 - those were
&gt; the ones triggering incoming ICMP type 11 packets.

Are you running an exit?
Do you have multiple IP addresses?
Using OutboundBindAddressExit can help you to find out if it's tor relaying
traffic, or tor exit traffic from clients that are doing TCP traceroutes.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171018130407</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-10-18 13:04:07-0400</timestampReceived><subject>Re: [tor-dev] metrics: collecting circuit build failures from relays to detect network reachability </subject><body>

Are there plans to implement PeerFlow in Tor?  Connectivity information
like this would be an automatic byproduct.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171013140655</emailId><senderName>"Santiago R.R."</senderName><senderEmail>santiagorr@riseup.net</senderEmail><timestampReceived>2017-10-13 14:06:55-0400</timestampReceived><subject>Re: [tor-dev] Student project to work on IPv6 support (was: [tor-relays] About relay size)</subject><body>

El 12/10/17 a las 12:22, teor escribió:
&gt; 
&gt; On 12 Oct 2017, at 09:15, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:

…

&gt; Hello tor-dev,
&gt; 
&gt; With my colleague JC Bach (in CC), we have proposed a last-year student
&gt; project to address IPv6-related issues in Tor for the upcoming semester,
&gt; at IMT Atlantique engineering school. There will be two students working
&gt; on it. It is hard to say now how far we will arrive, especially because
&gt; this is our first approach to Tor entrails.
&gt; 
&gt; So this message is to say we have good chances to come back here looking
&gt; for help :-)
&gt; 
&gt; 
&gt; Hi Santiago,
&gt; 
&gt; This is great! We would like some help with Tor's IPv6 support.
&gt; And we are happy to help you and your students.
&gt; 

Great, thanks!

&gt; How many students?

There will be two.

&gt; How much time?

From now until mid-March. Students will have 135h in their schedules to
work on their projects.

&gt; What are your goals for the project?

For now, it's still open, but addressing IPv6 support. We should limit
the scope soon, according to open related tickets that could be feasible
to work on.

&gt; How much do you expect to get done?

At least, choose a couple of easy-tagged IPv6 tickets, and close them.
However, it's difficult to state on this right now.

Maybe something from:
https://trac.torproject.org/projects/tor/query?status=accepted&amp;status=assigned&amp;status= \
merge_ready&amp;status=needs_information&amp;status=needs_review&amp;status=needs_revision&amp;status= \
new&amp;status=reopened&amp;keywords=~ipv6+easy&amp;max=20&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner \
&amp;col=priority&amp;col=component&amp;col=severity&amp;col=time&amp;col=changetime&amp;col=reporter&amp;desc=1&amp;order=changetime


&gt; 
&gt; We are at a Tor meeting this week.
&gt; We are revising Tor's IPv6 roadmap for the next year.
&gt; Next week, this page will be updated:
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/
&gt; IPv6Hackfest

Good to know about this!

&gt; 
&gt; We want to help people get code accepted into tor.
&gt; Here is how we write code:
&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md
&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md
&gt; 
&gt; It can help to start by submitting a small change, so you can see how we work.
&gt; Then you can make larger changes more easily.

Understood.

&gt; Our bug tracker is:
&gt; https://trac.torproject.org/
&gt; 
&gt; We are also in #tor-dev IRC on irc.oftc.net.
&gt; 
&gt; Please ask questions early, and ask often!
&gt; We would love to help you help tor.
&gt; 
&gt; Tim (teor)

Cheers,

  -- Santiago
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171014151205</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-10-14 15:12:05-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

[Attachment #2 (multipart/signed)]


That sounds terrabad. Can we finally set fire to tor2web?  It was
never a good idea.


On Sat, Oct 14, 2017 at 10:45:18AM -0400, Philipp Winter wrote:
&gt; On Tue, Oct 03, 2017 at 08:25:15PM -0400, Philipp Winter wrote:
&gt; &gt; - Many respondents were not aware of search engines such as ahmia.fi.
&gt; &gt;   Among those that were, many were not satisfied with both the search
&gt; &gt;   results and the number of indexed onion sites.  Unsurprisingly,
&gt; &gt;   a "Google for onion sites" was a frequent wish.
&gt;=20
&gt; Someone at the Tor dev meeting brought up that Google is indexing
&gt; tor2web.org including all the onion sites it knows about.  That
&gt; means that we can use Google as a search engine for (a subset of)
&gt; onion services by searching for "site:onion.to foo".
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171014165017</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-10-14 16:50:17-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

On Sat, 14 Oct 2017 15:12:05 +0000, dawuud wrote:
&gt; 
&gt; That sounds terrabad. Can we finally set fire to tor2web?  It was
&gt; never a good idea.

Why? There is exactly nothing that would stop google from actually
indexing .onion domains (it knows about), like it now is with
onion.to, even thought that happens a) accidentally and b) requires
there being links to .onion.to instead of to .onion on the clearweb.

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171014184303</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-10-14 18:43:03-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

[Attachment #2 (multipart/signed)]


Plaintext communications intermediaries like tor2web violate the end
to end principle and the principle of least authority. If we as the
Tor community are committed to human rights then it follows we would
abolish terrible things like tor2web or at least frown upon it's use.

I am frowning so hard right now.


Sincerely,

David Stainton

On Sat, Oct 14, 2017 at 06:50:17PM +0200, Andreas Krey wrote:
&gt; On Sat, 14 Oct 2017 15:12:05 +0000, dawuud wrote:
&gt; &gt; 
&gt; &gt; That sounds terrabad. Can we finally set fire to tor2web?  It was
&gt; &gt; never a good idea.
&gt; 
&gt; Why? There is exactly nothing that would stop google from actually
&gt; indexing .onion domains (it knows about), like it now is with
&gt; onion.to, even thought that happens a) accidentally and b) requires
&gt; there being links to .onion.to instead of to .onion on the clearweb.
&gt; 
&gt; - Andreas
&gt; 
&gt; -- 
&gt; "Totally trivial. Famous last words."
&gt; From: Linus Torvalds &lt;torvalds@*.org&gt;
&gt; Date: Fri, 22 Jan 2010 07:29:21 -0800
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171015080814</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-10-15 08:08:14-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

[Attachment #2 (multipart/alternative)]


On 14 October 2017 at 19:43, dawuud &lt;dawuud@riseup.net&gt; wrote:
&gt;
&gt; Plaintext communications intermediaries like tor2web violate the end
&gt; to end principle and the principle of least authority. If we as the
&gt; Tor community are committed to human rights then it follows we would
&gt; abolish terrible things like tor2web or at least frown upon it's use.
&gt;


I would recommend continuing to enable/support Tor2Web, or at least not
moving to make such a solution inoperable.


Dawuud is absolutely right re: violation of E2E* and a bunch of other
criticisms also apply; however I have three observations on this topic:

1) Someone invented Tor2web, therefore someone else is likely to want to
reimplement it; ideas tend to persist in this way

2) (as observed above) Google *do* crawl onion sites via "onion.to", which
is a fun surprise for people who insist that "The Dark Web Is Not Indexed
And Is Therefore Spooky"

3) Making such a move to block Tor2web-like sites might engender false
trust amongst the people who set up Onion sites: "It's Okay, Google Can't
Get At Us"


I would recommend investing more effort in Tor2web/similar, because having
a permeable barrier between IP-Space and OnionSpace appears useful.

At very most I might propose that:

a) OnionSites become aware of the X-Tor2web header which (from legit T2W
instances, at least) permits the OnionSite operator to block or redirect
the user to use a "proper" Onion network connection

b) That TheTorProject consider indexing known Tor2web sites and publish
them, perhaps adding a feature to optionally block them from TorBrowser
access**, thereby to prevent stupid intra-Tor deanonymisation loops

    - a


*although speaking as a geek I believe that re-engineering T2W to support
SSL via SNI-Sniffing would address this, it would be a gross and pointless
hack, complicated still further by certificate issuance, and all reasonable
use cases for which would be better addressed by running a local copy of
Tor.

**the hardcore alternative of blocking them from being accessed by exit
nodes causing a likely-intolerable argument.


-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 14 October 2017 \
at 19:43, dawuud &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:dawuud@riseup.net" \
target="_blank"&gt;dawuud@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; Plaintext communications intermediaries like tor2web violate \
the end&lt;br&gt; to end principle and the principle of least authority. If we as the&lt;br&gt;
Tor community are committed to human rights then it follows we would&lt;br&gt;
abolish terrible things like tor2web or at least frown upon it's \
use.&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would recommend \
continuing to enable/support Tor2Web, or at least not moving to make such a solution \
inoperable.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Dawuud is absolutely right re: \
violation of E2E* and a bunch of other criticisms also apply; however I have three \
observations on this topic:&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;1) Someone invented Tor2web, therefore someone else is likely to \
want to reimplement it; ideas tend to persist in this way&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;2) (as observed above) Google \
*do* crawl onion sites via "&lt;a href="http://onion.to"&gt;onion.to&lt;/a&gt;", which \
is a fun surprise for people who insist that "The Dark Web Is Not Indexed And Is \
Therefore Spooky"&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;3) Making such a move to block Tor2web-like sites might engender \
false trust amongst the people who set up Onion sites: "It's Okay, Google \
Can't Get At Us"&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;I would recommend investing \
more effort in Tor2web/similar, because having a permeable barrier between IP-Space \
and OnionSpace appears useful.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;At very most I might propose that:&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;a) OnionSites become aware of \
the X-Tor2web header which (from legit T2W instances, at least) permits the OnionSite \
operator to block or redirect the user to use a "proper" Onion network \
connection&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;b) That \
TheTorProject consider indexing known Tor2web sites and publish them, perhaps adding \
a feature to optionally block them from TorBrowser access**, thereby to prevent \
stupid intra-Tor deanonymisation loops&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;      - a&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;*although speaking as a geek I \
believe that re-engineering T2W to support SSL via SNI-Sniffing would address this, \
it would be a gross and pointless hack, complicated still further by certificate \
issuance, and all reasonable use cases for which would be better addressed by running \
a local copy of Tor.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;**the hardcore alternative of blocking them from being accessed \
by exit nodes causing a likely-intolerable argument.&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171015120327</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-15 12:03:27-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 15 Oct 2017, at 04:08, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; 
&gt; &gt; On 14 October 2017 at 19:43, dawuud &lt;dawuud@riseup.net&gt; wrote:
&gt; &gt; Plaintext communications intermediaries like tor2web violate the end
&gt; &gt; to end principle and the principle of least authority. If we as the
&gt; &gt; Tor community are committed to human rights then it follows we would
&gt; &gt; abolish terrible things like tor2web or at least frown upon it's use.
&gt; 
&gt; 
&gt; 
&gt; I would recommend continuing to enable/support Tor2Web, or at least not moving to \
&gt; make such a solution inoperable.

v2 onion service Tor2web would be easy for HSDirs to block, due to an
implementation bug. We've chosen not to block it. But we haven't spent
much time on fixing its bugs, either.

As far as I am aware, no-one is writing Tor2web for v3 onion services.

We have open tickets for protecting relays that handle onion service traffic
from knowing both the client and service IP address.

So if anyone does write v3 Tor2web, they will need to write it so it:
* uses a 3-hop path for all descriptors, because otherwise that can be used
   for a selective denial of service;
* uses a 3-hop path to connect to intro and rend when a descriptor has the
  single onion service flag;
* retry using a 3-hop path on failure (internal reachability or actual connection
   failure)

And I'm not sure whether we would merge this feature into core tor, due to the
user security issues that David and others have mentioned.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 15 Oct 2017, at 04:08, Alec \
Muffett &lt;&lt;a href="mailto:alec.muffett@gmail.com"&gt;alec.muffett@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div class="gmail_quote"&gt;On 14 \
October 2017 at 19:43, dawuud &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:dawuud@riseup.net" \
target="_blank"&gt;dawuud@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex" preoffsettop="39"&gt; Plaintext communications intermediaries \
like tor2web violate the end&lt;br&gt; to end principle and the principle of least \
authority. If we as the&lt;br&gt; Tor community are committed to human rights then it \
follows we would&lt;br&gt; abolish terrible things like tor2web or at least frown upon it's \
use.&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would recommend \
continuing to enable/support Tor2Web, or at least not moving to make such a solution \
inoperable.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;v2 onion service Tor2web would be easy \
for HSDirs to block, due to an&lt;/div&gt;&lt;div&gt;implementation bug. We've chosen not to \
block it. But we haven't spent&lt;/div&gt;&lt;div&gt;much time on fixing its bugs, \
either.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As far as I am aware, no-one is writing Tor2web for \
v3 onion services.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We have open tickets for protecting \
relays that handle onion service traffic&lt;/div&gt;&lt;div&gt;from knowing both the client and \
service IP address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;So if anyone does write v3 Tor2web, they will need to write it so \
it:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;* \
uses a 3-hop path for all descriptors, because otherwise &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;that can be \
used&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;  \
 for a selective denial of service;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;* uses a 3-hop path to connect to \
intro and rend when a descriptor has the&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;  single onion service \
flag;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;* \
retry using a 3-hop path on failure (internal reachability or actual \
connection&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;   failure)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And I'm not sure whether \
we would merge this feature into core tor, due to the&lt;/div&gt;&lt;div&gt;user security issues \
that David and others have mentioned.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170620192226</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-06-20 19:22:26-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/alternative)]


Changelog from Draft 1

=E2=97=8F Renamed version flag to ptversion to avoid naming conflict with g=
optlib
=E2=97=8F Modified Go examples to use correct Go syntax
=E2=97=8F Renamed pt module in Go examples to base to avoid naming conflict=
 with
goptlib
=E2=97=8F Reworded introduction
=E2=97=8F Clarified Go examples with more details on how to implement a tra=
nsport
in Go
=E2=97=8F Removed unused Javascript and Python APIs
=E2=97=8F Removed SSH transport example
=E2=97=8F Standardized use of Transports API and Dispatcher IPC language th=
roughout
=E2=97=8F Added length to per-connection parameter encoding

On Tue, Jun 20, 2017 at 2:07 PM, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:

&gt; Attached is the second draft of the Pluggable Transport 2.0 Specification=
.
&gt; If you have feedback on this draft, please send me your comments by July =
20.
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Changelog from Draft 1&lt;br&gt;&lt;br&gt;● Renamed version flag to ptversion to \
avoid naming conflict with goptlib&lt;br&gt;● Modified Go examples to use correct Go \
syntax&lt;br&gt;● Renamed pt module in Go examples to base to avoid naming conflict with \
goptlib&lt;br&gt;● Reworded introduction&lt;br&gt;● Clarified Go examples with more details \
on how to implement a transport in Go&lt;br&gt;● Removed unused Javascript and Python \
APIs&lt;br&gt;● Removed SSH transport example&lt;br&gt;● Standardized use of Transports API \
and Dispatcher IPC language throughout&lt;br&gt;● Added length to per-connection \
parameter encoding&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, \
Jun 20, 2017 at 2:07 PM, Brandon Wiley &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:brandon@blanu.net" target="_blank"&gt;brandon@blanu.net&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Attached \
is the second draft of the Pluggable Transport 2.0 Specification. If you have \
feedback on this draft, please send me your comments by July 20.&lt;/span&gt;&lt;/div&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170620220705</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-06-20 22:07:05-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 20 Jun 2017 14:07:39 -0400
Brandon Wiley &lt;brandon@blanu.net&gt; wrote:

&gt; Attached is the second draft of the Pluggable Transport 2.0
&gt; Specification. If you have feedback on this draft, please send me
&gt; your comments by July 20.

I'll raise this because it bothers me, but maybe the other people who
drafted the original document don't care as much as I do.  I find
the attribution in the acknowledgments section entirely inadequate.  I
explicitly credited all previous authors when I last rewrote the
specification for a reason.

Regards,

--=20
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170620223159</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-06-20 22:31:59-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks for the feedback. I'll fix this in the next draft.

On Jun 20, 2017 6:07 PM, "Yawning Angel" &lt;yawning@schwanenlied.me&gt; wrote:

&gt; On Tue, 20 Jun 2017 14:07:39 -0400
&gt; Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt;
&gt; &gt; Attached is the second draft of the Pluggable Transport 2.0
&gt; &gt; Specification. If you have feedback on this draft, please send me
&gt; &gt; your comments by July 20.
&gt;
&gt; I'll raise this because it bothers me, but maybe the other people who
&gt; drafted the original document don't care as much as I do.  I find
&gt; the attribution in the acknowledgments section entirely inadequate.  I
&gt; explicitly credited all previous authors when I last rewrote the
&gt; specification for a reason.
&gt;
&gt; Regards,
&gt;
&gt; --
&gt; Yawning Angel
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Thanks for the feedback. I'll fix this in the next \
draft.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Jun 20, 2017 \
6:07 PM, "Yawning Angel" &lt;&lt;a \
href="mailto:yawning@schwanenlied.me"&gt;yawning@schwanenlied.me&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Tue, 20 Jun 2017 14:07:39 \
-0400&lt;br&gt; Brandon Wiley &lt;&lt;a \
href="mailto:brandon@blanu.net"&gt;brandon@blanu.net&lt;/a&gt;&gt; wrote:&lt;br&gt; &lt;br&gt;
&gt; Attached is the second draft of the Pluggable Transport 2.0&lt;br&gt;
&gt; Specification. If you have feedback on this draft, please send me&lt;br&gt;
&gt; your comments by July 20.&lt;br&gt;
&lt;br&gt;
I'll raise this because it bothers me, but maybe the other people who&lt;br&gt;
drafted the original document don't care as much as I do.   I find&lt;br&gt;
the attribution in the acknowledgments section entirely inadequate.   I&lt;br&gt;
explicitly credited all previous authors when I last rewrote the&lt;br&gt;
specification for a reason.&lt;br&gt;
&lt;br&gt;
Regards,&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Yawning Angel&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170621031620</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-21 03:16:20-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Jun 2017, at 04:07, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; 
&gt;  If you have feedback on this draft, please send me your comments by July 20.

Thanks for putting this together.
It looks like it's taken a lot of work to do this and the implementation.

I seem to be missing some context:
What is the goal of writing this specification?

I'm going to assume you want to implement parts in tor and parts in Go.

Here is my feedback:

In general, have you searched tor trac for PT protocol bugs, and made
sure this spec doesn't suffer from the same issues?

In general, is there a separate document or proposal that describes
how Tor will implement the relevant interfaces? There doesn't seem
to be much on Tor-specific issues in this spec.

There is one "Tor" note in the spec, maybe it should be in that
separate document? Or maybe there should be more Tor notes in the
spec?

3.1. Pluggable Transport Naming

How are unique names coordinated?

When is a PT a different version of an older transport with the same
name? When does a PT need a new name?

3.2.1. Goals for interface design

Definitions:

The destination address (and many other terms) aren't defined
anywhere. Are they IPv4, IPv6, DNS, or protocol-specific?

If they are not just IPv4 addresses, please give examples with
other address types.

Maybe section 3.3.5.1 defines some of these terms?

3.3.1 Pluggable Transport Configuration Parameters

Optional Addresses:

Since the address is optional, what value is used when it is not
required by the transport?

It looks mandatory in the Go interface, but isn't mandatory in the
environmental variables. Can you please map each environmental
variable to the Go interface?

I ask because we have had some issues in Tor with PT 1.0,
because Tor Browser uses a fake IPv4 address for transports like meek.
This interacts really badly with ReachableAddresses and similar.

Any new Tor code will need to resolve this issue by using non-address
identifiers or a defined placeholder address.

We have also had bugs where tor connects to the actual bridge address
rather than a proxy. So using a placeholder address for all PTs might
be a good idea for security in tor.

Multiple Addresses:

If there are multiple addresses, are these separate instances of the
transport, or can one transport have multiple connections?
Does this differ between the client and the server?

For example, the same bridge can have an IPv4 and IPv6 address.
Or two different bridges can use the same PT.

How is this handled in tor and in Go?
(It's specified that each PT has zero or one addresses, but there
isn't anything explicit about using multiple addresses.)

Banned Addresses:

Tor users often configure ReachableAddresses (or similar) and expect
pluggable transports to respect them. Is there a standard way of
telling a transport which addresses it can't connect to?

Or, alternately, is there a standard way for a transport to tell tor
which addresses it is actually using *before* it connects to it?

Client Addresses:

The client protocol is missing a standard way to configure:
* a local bind address
* a remote server address
* other common PT info

Is this intentional?
If so, do we really want each transport defining its own slightly
different JSON keys for common items like addresses?
Even worse, what if they format addresses inconsistently?

This will be difficult to implement in applications if it is not
standardised.

I suggest we make the server address an environmental variable.

3.3.1.4 Command Line Flags

How is an environmental variable name turned into a command-line flag?
Or are the command-line flags different for each transport?
(Let's not do that, it would be annoying.)

You give examples, but some have typos:
obfs4proxy -state =/var/lib/tor/pt_state/
obfs4proxy - transports obfs3,scramblesuit
Obfs4proxy -options scramblesuit:key=banana;automata:rule=110;automata:depth=3

3.3.2. Pluggable Transport To Parent Process Communication

What is the correct IPv6 address quoting for CMETHOD and SMETHOD?
Please give an example in the text.

"Equal signs and commas MUST be escaped with a backslash."

This is unclear: equals signs and commas in Key and Value?
What about colons or backslashes?
(Otherwise, it is impossible to end a value with a backslash.)
Must Key be an identifier? What's the format?

Why not just use an existing escaping scheme?

"Tor: The ARGS are included in the transport line of the Bridge's extra-info document."

Really? This seems insecure. Do we publish bridge extra-infos anywhere?

3.3.5 UDP Support

The TOC breaks here.

3.3.5.1 Obfuscating Proxy Architecture

This section belongs at the top of the document.

3.3.5.2. Configuring the Transports

There are no details for how this works over UDP: what is the UDP
equivalent to Pluggable PT Client Per-Connection Arguments, and do
TCP implementations have to support that environmental variable as
well?

I suggest we standardise it as an environmental variable and
command-line flag, and make all transports support it.

3.3.5.5. Implementation of the PT Server

Is the text in this section two different sizes?

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZSeUEAAoJEHQNnjkCUnKi4LoP/iLTuRSv2E+uxZCLmccTWLbx
TiACgWFx+ae178lvE50iHQ6DZarY87DaAiulPixMfmEGhUdQ5EY5Z0qsXFMd9zgN
mm9QduBysnoaa6sutgeCRlM/0ACg/SGWBzo8C82ZUSYRpvDhnrtkRP/3Kd4LNjAR
kH+mJMjV+BaIxdJIrJXyZwjQcfvp/eXi/4cjTjTYLywyRoY9RjXSYfygn5vij9As
8vosTm6uV04rVTlwIP4/bA66mkJVjh8dlYaIwjL/WwNBAq2KC6uEQ9OBevQjEjiz
gZyXNlWa5aXwXc+s0pX11kxmcqS31IVNxDru5xRnZJRnks5n4qW++WLkRXkafSmY
wOrdiI4SQAWenEc3gosEEckdbu5TnB7fBJd7j7mBnBLgTl127VulDyfvyFqAfo6Y
k0UpUESTE3jvETFXnCQME6lkKiOk+ddnDF6yXUr2ySnTHxKy3I3UB4NxvsYJ7m2d
O64rwzMg7CQgBeD7vt7rk7hD046i163gZ0A1dA4CNIVlF7jBKagMbIQNRbLHfAua
9nc46QwXZux3WpriSjxf2vfjjYXwEdWRWNO2j4l2bChFdfVmouwo4Cxk54i+Pdw+
PyCJUTB8CgeiLYTISAsRU56c52/QPxFls7ed2VoRSABXb77NtKQa4vkxX9Ja4WHF
y1JkGhUjjb+gcFaMj7lx
=BshF
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170621042735</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-21 04:27:35-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

On Wed, Jun 21, 2017 at 01:16:20PM +1000, teor wrote:
&gt; In general, is there a separate document or proposal that describes
&gt; how Tor will implement the relevant interfaces? There doesn't seem
&gt; to be much on Tor-specific issues in this spec.
&gt; 
&gt; There is one "Tor" note in the spec, maybe it should be in that
&gt; separate document? Or maybe there should be more Tor notes in the
&gt; spec?

As I understand it, one of the goals of the PT 2.0 spec is to make it
easier for projects *other* than Tor to use pluggable transports. The
current spec (the 1.0 spec) basically doesn't work for anyone other than
desktop Tor--this is something we've heard over and over from other
projects that use circumvention, and Brandon is well plugged in to those
conversations. Even closely affiliated projects like Orbot haven't been
able to use pluggable transports strictly according to the spec, because
of the various constraints on mobile platforms.

What various circumvention developers have said they prefer, is a
Go-based API. They would rather link against a library, than do the
whole subprocess-and-stdout thing that the PT 1.0 spec requires. That's
the reason for introducing the new Go stuff in the 2.0 spec. Inside and
outside Tor, a lot of projects have converged on implementing their
circumvention code in Go. The API of the 2.0 spec is based on the
internal architecture of obfs4proxy, which is de facto the main
implementation of most of Tor's pluggable transports.

If I understand correctly, Tor wouldn't have to implement glue code to
interface with the Go API. It could continue spawning subprocesses,
similar to what it does now. The executables it invokes, if they are
written in Go, will likely internally use a PT library that uses the 2.0
spec's API, but Tor wouldn't have to know those details.

PT 1.0 succeeded in being "pluggable" in one sense: it's easy to hotswap
a lot of circumvention technologies within Tor. But it failed in being
"pluggable" in another sense: it's not easy to share common transport
modules beyond Tor (in either direction). It would be great if the new
spec can realize that second sense of pluggability.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170621044218</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-21 04:42:18-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Jun 2017, at 14:27, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; On Wed, Jun 21, 2017 at 01:16:20PM +1000, teor wrote:
&gt;&gt; In general, is there a separate document or proposal that describes
&gt;&gt; how Tor will implement the relevant interfaces? There doesn't seem
&gt;&gt; to be much on Tor-specific issues in this spec.
&gt;&gt; 
&gt;&gt; There is one "Tor" note in the spec, maybe it should be in that
&gt;&gt; separate document? Or maybe there should be more Tor notes in the
&gt;&gt; spec?
&gt; 
&gt; As I understand it, one of the goals of the PT 2.0 spec is to make it
&gt; easier for projects *other* than Tor to use pluggable transports. The
&gt; current spec (the 1.0 spec) basically doesn't work for anyone other than
&gt; desktop Tor-...

There are also edge cases where it works badly even for desktop Tor.

&gt;&gt; On 21 Jun 2017, at 13:16, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; 
&gt;&gt; I ask because we have had some issues in Tor with PT 1.0,
&gt;&gt; because Tor Browser uses a fake IPv4 address for transports like meek.
&gt;&gt; This interacts really badly with ReachableAddresses and similar.
&gt;&gt; 
&gt;&gt; Any new Tor code will need to resolve this issue by using non-address
&gt;&gt; identifiers or a defined placeholder address.
&gt;&gt; 
&gt;&gt; We have also had bugs where tor connects to the actual bridge address
&gt;&gt; rather than a proxy. So using a placeholder address for all PTs might
&gt;&gt; be a good idea for security in tor.

&gt;&gt; Tor users often configure ReachableAddresses (or similar) and expect
&gt;&gt; pluggable transports to respect them. Is there a standard way of
&gt;&gt; telling a transport which addresses it can't connect to?
&gt;&gt; 
&gt;&gt; Or, alternately, is there a standard way for a transport to tell tor
&gt;&gt; which addresses it is actually using *before* it connects to it?

&gt; If I understand correctly, Tor wouldn't have to implement glue code to
&gt; interface with the Go API. It could continue spawning subprocesses,
&gt; similar to what it does now. The executables it invokes, if they are
&gt; written in Go, will likely internally use a PT library that uses the 2.0
&gt; spec's API, but Tor wouldn't have to know those details.

I wasn't talking about interfaces, I was talking about the configs
exchanged via the protocol regardless of interface.

If we want to fix some of these application issues, we need to make sure
the protocol provides the means to do so. Regardless of how tor interfaces
or updates its PT interface.

&gt; PT 1.0 succeeded in being "pluggable" in one sense: it's easy to hotswap
&gt; a lot of circumvention technologies within Tor. But it failed in being
&gt; "pluggable" in another sense: it's not easy to share common transport
&gt; modules beyond Tor (in either direction). It would be great if the new
&gt; spec can realize that second sense of pluggability.

It would be great if this new spec could also fix some of the issues
around transport addresses, regardless of the application using it.

Or, we could rule those issues explicitly out of scope, essentially
pushing them onto each individual transport and application to deal
with in a custom manner. (Or, more likely, to ignore.)

For example:

&gt;&gt; The client protocol is missing a standard way to configure:
&gt;&gt; * a local bind address
&gt;&gt; * a remote server address
&gt;&gt; * other common PT info
&gt;&gt; 
&gt;&gt; Is this intentional?
&gt;&gt; If so, do we really want each transport defining its own slightly
&gt;&gt; different JSON keys for common items like addresses?
&gt;&gt; Even worse, what if they format addresses inconsistently?


T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZSfkqAAoJEHQNnjkCUnKi8i4P/iKo7qXE9/InocXrMakOgSqP
//+JblQhsVdYyemPVod5itTAM7CWtFBDIYJvuDZcwE+Y/ADU21wcdcCw49u5vRHA
j3R4J8BZ3oU4D+VZMOKgRyTfB4GvUosUBJUzM9h7ero89oqSh9nnszNSRWkonXiK
vLAXJ4d476er/S4fXnyzyNa0gVltS1Z5/M8+2XDtYyzwdpF4cmNMKxesgEtb7fvW
MZikveo0i8gjaJHZ38noq9psBbUWWwKPDQPLngnRax3qOKq9F3krABE/vnNZlfAD
kNN9i1E+4ZLBBmIEmpDsaXjeT9SROUO/NRddp7NfQrDDyuh1k4kI6OqWsY/3DFd2
4vOEkW9XUJrGW1+0ep/t76Q+TSQqeMpSqn1NjT88XTCjmzV5ODpSXqFnvX8xFfxs
n/ZBNNWvO0cyIWy0UC8jIkmFARRCsnQH1hhdY/0AwvC0EZA9W/j21MsiIGrWSdcg
71evVEgqSWO8VIeSCQcBYb7HTgLtzcYFn465sYZd1CBayaI7wWTD6RZ4Zxc0R2lo
nnJ94jT4lSvapiht7Dc9U3leDqFljkbptPQzJwjaQM692U4mYtksSjghrHV7myzL
00Bd7BhBdCl9pVeCRFcmLdVc819iDco82gRLmr0ErLNeHUPC5ods5/0+QRcAhSaj
ZcNwGNKLL+NUgLAC2UoM
=q++c
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170621062044</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-06-21 06:20:44-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 20 Jun 2017 21:27:35 -0700
David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; Even closely affiliated projects like Orbot haven't been able to use
&gt; pluggable transports strictly according to the spec, because of the
&gt; various constraints on mobile platforms.

This is basically totally and utterly wrong.

https://gitweb.torproject.org/orbot.git/tree/orbotservice/src/main/java/org/torproject/android/service/TorService.java#n1691


(The extra acrobatics are for programatically generating the config to
 handle the binary's install path being system dependent, which is
 beyond the scope of the PT spec itself.)

Orbot can use normal Pluggable Transports just fine, and has at various
points in time used:

 * obfsproxy (C)
 * obfsclient (C++)
 * obfs4proxy

All basically exactly as specified by the Pluggable Transports spec.
The only problem in this regard has been "Python on Android was a
nightmare" which precluded the deployment of obfsproxy (Python).  This
has little to nothing to do with the Pluggable Transport spec itself.

Perhaps you mean iOS?  In which case, yeah, implementing something
that's based around fork + exec, on an OS that doesn't allow that, is
difficult, go figure (https://github.com/mtigas/iObfs for how it's
done).

&gt; The API of the 2.0 spec is based on the internal architecture of
&gt; obfs4proxy, which is de facto the main implementation of most of
&gt; Tor's pluggable transports.

I don't think that's a good idea, because the API was written by me, for
me, to fit my use-cases (and I'm more and more dissatisfied with Go, to
the point where all my new "for fun" code is going to be in C++ or D).

But if it works for them, great I guess.  I didn't use the API when I
was working on basket2, so this has 0 impact on anything I will be
doing, or anything that I've written.

&gt; But it failed in being "pluggable" in another sense: it's not easy to
&gt; share common transport modules beyond Tor (in either direction). It
&gt; would be great if the new spec can realize that second sense of
&gt; pluggability.

I still don't understand what was so hard about implementing the old
API, on anything but iOS.

The "2.0" spec still doesn't have any provisions for using AF_LOCAL
instead of the loopback interface, go figure.  It's not as if I bring
it up every time this topic comes up or anything right?

Regards,

-- 
Yawning Angel


[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170621130030</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-21 13:00:30-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Jun 2017, at 16:20, Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt; 
&gt; The "2.0" spec still doesn't have any provisions for using AF_LOCAL
&gt; instead of the loopback interface, go figure.  It's not as if I bring
&gt; it up every time this topic comes up or anything right?

Th exact types of addr and port are not specified, so application
could pass:
unix:/var/run/tor/obfsocket
And still remain within the spec.

But to make this usage clear, I suggest we change:
&lt;addr:port&gt;
To:
&lt;addr&gt;[:&lt;port&gt;]
And define addr as either an IPv4, IPv6, hostname, file path, or some
other address understood by the application / proxy.

If we don't want to do that, please at least change it to:
&lt;addr&gt;:&lt;port&gt;

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZSm3uAAoJEHQNnjkCUnKiUm4QAIhwrnmuuGGj05UmP7Chlr9u
Yvkf5/xXiv2S37f39fpK9IRAG+HY+vV4rC6TiB57otXW/i2hsyBqRJmgW82Uq+5a
LVB+W8qM4iTj98VbbA/7Spz0kIZ8xeq+R7E6v5iemcQlxmlTBQJy9gj6M5oJiN05
pBJGVjFZiBFeDQtZTNnTXDEmN2asu6yv4hQyzshxvE8cONqdVxYFqlvDapA2ypLx
8+lmh+TYPInVHaUBZENBdG6S4yBS52JLSqR9cg1+uyStbAYn6wJkR00OI59mTjWi
iRX2L47C0Cu20DSpttb+pLaCaolGZdqWA+FK4Y7dDvktlbonuk2gpJMoGboSDX6Q
CTKCZ2MJ1r2y22w0U0BEgUlugiWqLjj08NQHu+2excUXvj4gBCJv7znx4CovdYwk
Qe31YpPvRufD0rEDFBfvSyGQ4VUo/r+df4EVOhdgCRWKhGAMOV8gMxF3tpsGan2Q
L29cbhivE7aQMnklW4vlFtBf54vIIXhNQcsDIi7S0g9NUtUyTBus5yslQYLpeLWR
9L30QdVxIgsiXib+h+JxczR4bLH4wBWZSEDEyxUgVIojj4WstZwF6UXT7pwCykBr
SzCB3ef9iCAQk/O2ltbSjd/I3ew2B/IrpNYLefwJQ8rutC/C0q3LCF6RWV3qnJIa
ToVUqG67FqewaWMMsOIs
=2ftV
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171010192558</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-10-10 19:25:58-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/alternative)]


Hi teor. Thank you for the detailed feedback on the Pluggable Transport
2.0, Draft 2 proposal.

Your email covers a number of topics, which I will attempt to address. I
have grouped the issues you've raised into some different categories.

1. Issues inherited from the PT 1.0 specification - We tried not to make
many large changes from PT 1.0 in order to preserve as much compatibility
as possible. We would be happy to discuss making additional changes in the
upcoming PT 2.1 specification process.

2. Feature requests to help serve the needs of Tor - Tor folks were
certainly involved in the PT 2.0 specification process. Roger, Nick, and
Yawning attended the meetings. However, I can see that there are some
feature requests from you and Yawning that did not make it into the PT 2.0
specification. We would love to see these discussed as part of the PT 2.1
specification. I have already made a note to include them on the agenda for
the Pluggable Transport Implementers Meeting, which is happening after
TorDev. If you would like to participate in the specification process, that
would be very helpful and ensure that these feature requests make it into
the proposal and are specified in a way that meets your needs for Tor.

3. Requests for clarification - These have generally been incorporated into
the latest draft, PT 2.0 draft 3. I will be sending this out shortly. I
hope that you will find that the new draft addresses many of the areas that
you found unclear in the previous draft.

4. Clarification of issues outside of the scope of the specification
document - I will attempt to answer these below:

How will Tor implement the relevant interfaces?

These is discussed in this Trac issue from the last TorDev:
https://trac.torproject.org/projects/tor/ticket/21816

The code changes to Tor are minimal. The authentication method uses to send
per-connection arguments to transports has been changed in PT 2.0 to use a
custom SOCKS authentication method instead of using the username and
password authentication method. No other changes are required to Tor to use
PT 2.0 transport providers. We have provided a patch to Tor to implement
this functionality in a backwards-incompatible way, so both PT 1.0 and PT
2.0 providers can be used with the patch. We have also implemented a PT
2.0-compatible transport provider, which is available here:
https://github.com/OperatorFoundation/shapeshifter-dispatcher/

Can you please map each environmental variable to the Go interface?

There is not a one-to-one mapping between the environment variables and the
Go interface. There are two parts to the PT implementation. There is the
proxy and there are the transports. The environment variables are for
configuring the proxy, which includes the information necessary to
configure the transports. The Go interface is for using the transports
directly in your code, without a proxy process. Therefore, only a subset of
the information specified for the environment variables is required when
using the Go interface, and so a one-to-one mapping is not possible.

What is the UDP equivalent to PT Client Per-Connection Arguments?

There is no equivalent to PT Client Per-Connection Arguments for UDP. PT
1.0 supported only one proxy mode, SOCKS5. PT 2.0 supports multiple proxy
modes, but only the SOCKS5 proxy mode supports PT Client Per-Connection
Arguments. This is because it is the SOCKS5 protocol that provides the
channel to supply PT Client Per-Connection Arguments (through the custom
authentication method). You may be wondering, how do you use a transport
that requires PT Client Per-Connection Arguments in a proxy mode other than
SOCKS5 (for instance, UDP). You can set them when you start the PT client
using the -options command line flag. Of course, in this scenario, they
will not be "per connection" as they will be the same for every connection.
However, this should work fine with the current PTs. If you truly need
per-connection arguments, then you are limited to SOCKS5.

I hope that I have answered some of your questions. I will be at TorDev all
week, so I would love to discuss some of the finer details with you at your
convenience.

Also, I wanted to clear up one thing that was said later in this thread.
The Go transports API is not based on the obfs4proxy internal API. The very
first draft was based on the obfs4proxy code and everyone agreed that this
was not ideal. The current Go API specified in PT 2.0 draft 3 is based on
the Go net.Conn API. following the general principle set forth in the
specification document to make the transport library look as much as
possible like the native socket implementation for the language.

On Tue, Jun 20, 2017 at 10:16 PM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt;
&gt; &gt; On 21 Jun 2017, at 04:07, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; &gt;
&gt; &gt;  If you have feedback on this draft, please send me your comments by
&gt; July 20.
&gt;
&gt; Thanks for putting this together.
&gt; It looks like it's taken a lot of work to do this and the implementation.
&gt;
&gt; I seem to be missing some context:
&gt; What is the goal of writing this specification?
&gt;
&gt; I'm going to assume you want to implement parts in tor and parts in Go.
&gt;
&gt; Here is my feedback:
&gt;
&gt; In general, have you searched tor trac for PT protocol bugs, and made
&gt; sure this spec doesn't suffer from the same issues?
&gt;
&gt; In general, is there a separate document or proposal that describes
&gt; how Tor will implement the relevant interfaces? There doesn't seem
&gt; to be much on Tor-specific issues in this spec.
&gt;
&gt; There is one "Tor" note in the spec, maybe it should be in that
&gt; separate document? Or maybe there should be more Tor notes in the
&gt; spec?
&gt;
&gt; 3.1. Pluggable Transport Naming
&gt;
&gt; How are unique names coordinated?
&gt;
&gt; When is a PT a different version of an older transport with the same
&gt; name? When does a PT need a new name?
&gt;
&gt; 3.2.1. Goals for interface design
&gt;
&gt; Definitions:
&gt;
&gt; The destination address (and many other terms) aren't defined
&gt; anywhere. Are they IPv4, IPv6, DNS, or protocol-specific?
&gt;
&gt; If they are not just IPv4 addresses, please give examples with
&gt; other address types.
&gt;
&gt; Maybe section 3.3.5.1 defines some of these terms?
&gt;
&gt; 3.3.1 Pluggable Transport Configuration Parameters
&gt;
&gt; Optional Addresses:
&gt;
&gt; Since the address is optional, what value is used when it is not
&gt; required by the transport?
&gt;
&gt; It looks mandatory in the Go interface, but isn't mandatory in the
&gt; environmental variables. Can you please map each environmental
&gt; variable to the Go interface?
&gt;
&gt; I ask because we have had some issues in Tor with PT 1.0,
&gt; because Tor Browser uses a fake IPv4 address for transports like meek.
&gt; This interacts really badly with ReachableAddresses and similar.
&gt;
&gt; Any new Tor code will need to resolve this issue by using non-address
&gt; identifiers or a defined placeholder address.
&gt;
&gt; We have also had bugs where tor connects to the actual bridge address
&gt; rather than a proxy. So using a placeholder address for all PTs might
&gt; be a good idea for security in tor.
&gt;
&gt; Multiple Addresses:
&gt;
&gt; If there are multiple addresses, are these separate instances of the
&gt; transport, or can one transport have multiple connections?
&gt; Does this differ between the client and the server?
&gt;
&gt; For example, the same bridge can have an IPv4 and IPv6 address.
&gt; Or two different bridges can use the same PT.
&gt;
&gt; How is this handled in tor and in Go?
&gt; (It's specified that each PT has zero or one addresses, but there
&gt; isn't anything explicit about using multiple addresses.)
&gt;
&gt; Banned Addresses:
&gt;
&gt; Tor users often configure ReachableAddresses (or similar) and expect
&gt; pluggable transports to respect them. Is there a standard way of
&gt; telling a transport which addresses it can't connect to?
&gt;
&gt; Or, alternately, is there a standard way for a transport to tell tor
&gt; which addresses it is actually using *before* it connects to it?
&gt;
&gt; Client Addresses:
&gt;
&gt; The client protocol is missing a standard way to configure:
&gt; * a local bind address
&gt; * a remote server address
&gt; * other common PT info
&gt;
&gt; Is this intentional?
&gt; If so, do we really want each transport defining its own slightly
&gt; different JSON keys for common items like addresses?
&gt; Even worse, what if they format addresses inconsistently?
&gt;
&gt; This will be difficult to implement in applications if it is not
&gt; standardised.
&gt;
&gt; I suggest we make the server address an environmental variable.
&gt;
&gt; 3.3.1.4 Command Line Flags
&gt;
&gt; How is an environmental variable name turned into a command-line flag?
&gt; Or are the command-line flags different for each transport?
&gt; (Let's not do that, it would be annoying.)
&gt;
&gt; You give examples, but some have typos:
&gt; obfs4proxy -state =/var/lib/tor/pt_state/
&gt; obfs4proxy - transports obfs3,scramblesuit
&gt; Obfs4proxy -options scramblesuit:key=banana;automata:rule=110;automata:
&gt; depth=3
&gt;
&gt; 3.3.2. Pluggable Transport To Parent Process Communication
&gt;
&gt; What is the correct IPv6 address quoting for CMETHOD and SMETHOD?
&gt; Please give an example in the text.
&gt;
&gt; "Equal signs and commas MUST be escaped with a backslash."
&gt;
&gt; This is unclear: equals signs and commas in Key and Value?
&gt; What about colons or backslashes?
&gt; (Otherwise, it is impossible to end a value with a backslash.)
&gt; Must Key be an identifier? What's the format?
&gt;
&gt; Why not just use an existing escaping scheme?
&gt;
&gt; "Tor: The ARGS are included in the transport line of the Bridge's
&gt; extra-info document."
&gt;
&gt; Really? This seems insecure. Do we publish bridge extra-infos anywhere?
&gt;
&gt; 3.3.5 UDP Support
&gt;
&gt; The TOC breaks here.
&gt;
&gt; 3.3.5.1 Obfuscating Proxy Architecture
&gt;
&gt; This section belongs at the top of the document.
&gt;
&gt; 3.3.5.2. Configuring the Transports
&gt;
&gt; There are no details for how this works over UDP: what is the UDP
&gt; equivalent to Pluggable PT Client Per-Connection Arguments, and do
&gt; TCP implementations have to support that environmental variable as
&gt; well?
&gt;
&gt; I suggest we standardise it as an environmental variable and
&gt; command-line flag, and make all transports support it.
&gt;
&gt; 3.3.5.5. Implementation of the PT Server
&gt;
&gt; Is the text in this section two different sizes?
&gt;
&gt; T
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi teor. Thank you for the detailed feedback on the Pluggable \
Transport 2.0, Draft 2 proposal.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Your email covers a \
number of topics, which I will attempt to address. I have grouped the issues \
you've raised into some different categories.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Issues \
inherited from the PT 1.0 specification - We tried not to make many large changes \
from PT 1.0 in order to preserve as much compatibility as possible. We would be happy \
to discuss making additional changes in the upcoming PT 2.1 specification \
process.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Feature requests to help serve the needs of Tor \
- Tor folks were certainly involved in the PT 2.0 specification process. Roger, Nick, \
and Yawning attended the meetings. However, I can see that there are some feature \
requests from you and Yawning that did not make it into the PT 2.0 specification. We \
would love to see these discussed as part of the PT 2.1 specification. I have already \
made a note to include them on the agenda for the Pluggable Transport Implementers \
Meeting, which is happening after TorDev. If you would like to participate in the \
specification process, that would be very helpful and ensure that these feature \
requests make it into the proposal and are specified in a way that meets your needs \
for Tor.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3. Requests for clarification - These have \
generally been incorporated into the latest draft, PT 2.0 draft 3. I will be sending \
this out shortly. I hope that you will find that the new draft addresses many of the \
areas that you found unclear in the previous draft.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4. \
Clarification of issues outside of the scope of the specification document - I will \
attempt to answer these below:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How will Tor implement the \
relevant interfaces?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;These is discussed in this Trac issue \
from the last TorDev: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/21816"&gt;https://trac.torproject.org/projects/tor/ticket/21816&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
code changes to Tor are minimal. The authentication method uses to send \
per-connection arguments to transports has been changed in PT 2.0 to use a custom \
SOCKS authentication method instead of using the username and password authentication \
method. No other changes are required to Tor to use PT 2.0 transport providers. We \
have provided a patch to Tor to implement this functionality in a \
backwards-incompatible way, so both PT 1.0 and PT 2.0 providers can be used with the \
patch. We have also implemented a PT 2.0-compatible transport provider, which is \
available here: &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/OperatorFoundation/shapeshifter-dispatcher/"&gt;https://github.com/OperatorFoundation/shapeshifter-dispatcher/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can \
you please map each environmental variable to the Go \
interface?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There is not a one-to-one mapping between the \
environment variables and the Go interface. There are two parts to the PT \
implementation. There is the proxy and there are the transports. The environment \
variables are for configuring the proxy, which includes the information necessary to \
configure the transports. The Go interface is for using the transports directly in \
your code, without a proxy process. Therefore, only a subset of the information \
specified for the environment variables is required when using the Go interface, and \
so a one-to-one mapping is not possible.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What is the UDP \
equivalent to PT Client Per-Connection Arguments?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There is \
no equivalent to PT Client Per-Connection Arguments for UDP. PT 1.0 supported only \
one proxy mode, SOCKS5. PT 2.0 supports multiple proxy modes, but only the SOCKS5 \
proxy mode supports PT Client Per-Connection Arguments. This is because it is the \
SOCKS5 protocol that provides the channel to supply PT Client Per-Connection \
Arguments (through the custom authentication method). You may be wondering, how do \
you use a transport that requires PT Client Per-Connection Arguments in a proxy mode \
other than SOCKS5 (for instance, UDP). You can set them when you start the PT client \
using the -options command line flag. Of course, in this scenario, they will not be \
"per connection" as they will be the same for every connection. However, \
this should work fine with the current PTs. If you truly need per-connection \
arguments, then you are limited to SOCKS5.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope that I \
have answered some of your questions. I will be at TorDev all week, so I would love \
to discuss some of the finer details with you at your \
convenience.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, I wanted to clear up one thing that was \
said later in this thread. The Go transports API is not based on the obfs4proxy \
internal API. The very first draft was based on the obfs4proxy code and everyone \
agreed that this was not ideal. The current Go API specified in PT 2.0 draft 3 is \
based on the Go net.Conn API. following the general principle set forth in the \
specification document to make the transport library look as much as possible like \
the native socket implementation for the language.&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div \
class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On Tue, Jun 20, 2017 at 10:16 PM, teor \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt;&lt;br&gt; &gt; On 21 Jun 2017, at \
04:07, Brandon Wiley &lt;&lt;a href="mailto:brandon@blanu.net"&gt;brandon@blanu.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt;   If you have feedback on this draft, please send me your comments by July \
20.&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Thanks for putting this together.&lt;br&gt;
It looks like it's taken a lot of work to do this and the implementation.&lt;br&gt;
&lt;br&gt;
I seem to be missing some context:&lt;br&gt;
What is the goal of writing this specification?&lt;br&gt;
&lt;br&gt;
I'm going to assume you want to implement parts in tor and parts in Go.&lt;br&gt;
&lt;br&gt;
Here is my feedback:&lt;br&gt;
&lt;br&gt;
In general, have you searched tor trac for PT protocol bugs, and made&lt;br&gt;
sure this spec doesn't suffer from the same issues?&lt;br&gt;
&lt;br&gt;
In general, is there a separate document or proposal that describes&lt;br&gt;
how Tor will implement the relevant interfaces? There doesn't seem&lt;br&gt;
to be much on Tor-specific issues in this spec.&lt;br&gt;
&lt;br&gt;
There is one "Tor" note in the spec, maybe it should be in that&lt;br&gt;
separate document? Or maybe there should be more Tor notes in the&lt;br&gt;
spec?&lt;br&gt;
&lt;br&gt;
3.1. Pluggable Transport Naming&lt;br&gt;
&lt;br&gt;
How are unique names coordinated?&lt;br&gt;
&lt;br&gt;
When is a PT a different version of an older transport with the same&lt;br&gt;
name? When does a PT need a new name?&lt;br&gt;
&lt;br&gt;
3.2.1. Goals for interface design&lt;br&gt;
&lt;br&gt;
Definitions:&lt;br&gt;
&lt;br&gt;
The destination address (and many other terms) aren't defined&lt;br&gt;
anywhere. Are they IPv4, IPv6, DNS, or protocol-specific?&lt;br&gt;
&lt;br&gt;
If they are not just IPv4 addresses, please give examples with&lt;br&gt;
other address types.&lt;br&gt;
&lt;br&gt;
Maybe section 3.3.5.1 defines some of these terms?&lt;br&gt;
&lt;br&gt;
3.3.1 Pluggable Transport Configuration Parameters&lt;br&gt;
&lt;br&gt;
Optional Addresses:&lt;br&gt;
&lt;br&gt;
Since the address is optional, what value is used when it is not&lt;br&gt;
required by the transport?&lt;br&gt;
&lt;br&gt;
It looks mandatory in the Go interface, but isn't mandatory in the&lt;br&gt;
environmental variables. Can you please map each environmental&lt;br&gt;
variable to the Go interface?&lt;br&gt;
&lt;br&gt;
I ask because we have had some issues in Tor with PT 1.0,&lt;br&gt;
because Tor Browser uses a fake IPv4 address for transports like meek.&lt;br&gt;
This interacts really badly with ReachableAddresses and similar.&lt;br&gt;
&lt;br&gt;
Any new Tor code will need to resolve this issue by using non-address&lt;br&gt;
identifiers or a defined placeholder address.&lt;br&gt;
&lt;br&gt;
We have also had bugs where tor connects to the actual bridge address&lt;br&gt;
rather than a proxy. So using a placeholder address for all PTs might&lt;br&gt;
be a good idea for security in tor.&lt;br&gt;
&lt;br&gt;
Multiple Addresses:&lt;br&gt;
&lt;br&gt;
If there are multiple addresses, are these separate instances of the&lt;br&gt;
transport, or can one transport have multiple connections?&lt;br&gt;
Does this differ between the client and the server?&lt;br&gt;
&lt;br&gt;
For example, the same bridge can have an IPv4 and IPv6 address.&lt;br&gt;
Or two different bridges can use the same PT.&lt;br&gt;
&lt;br&gt;
How is this handled in tor and in Go?&lt;br&gt;
(It's specified that each PT has zero or one addresses, but there&lt;br&gt;
isn't anything explicit about using multiple addresses.)&lt;br&gt;
&lt;br&gt;
Banned Addresses:&lt;br&gt;
&lt;br&gt;
Tor users often configure ReachableAddresses (or similar) and expect&lt;br&gt;
pluggable transports to respect them. Is there a standard way of&lt;br&gt;
telling a transport which addresses it can't connect to?&lt;br&gt;
&lt;br&gt;
Or, alternately, is there a standard way for a transport to tell tor&lt;br&gt;
which addresses it is actually using *before* it connects to it?&lt;br&gt;
&lt;br&gt;
Client Addresses:&lt;br&gt;
&lt;br&gt;
The client protocol is missing a standard way to configure:&lt;br&gt;
* a local bind address&lt;br&gt;
* a remote server address&lt;br&gt;
* other common PT info&lt;br&gt;
&lt;br&gt;
Is this intentional?&lt;br&gt;
If so, do we really want each transport defining its own slightly&lt;br&gt;
different JSON keys for common items like addresses?&lt;br&gt;
Even worse, what if they format addresses inconsistently?&lt;br&gt;
&lt;br&gt;
This will be difficult to implement in applications if it is not&lt;br&gt;
standardised.&lt;br&gt;
&lt;br&gt;
I suggest we make the server address an environmental variable.&lt;br&gt;
&lt;br&gt;
3.3.1.4 Command Line Flags&lt;br&gt;
&lt;br&gt;
How is an environmental variable name turned into a command-line flag?&lt;br&gt;
Or are the command-line flags different for each transport?&lt;br&gt;
(Let's not do that, it would be annoying.)&lt;br&gt;
&lt;br&gt;
You give examples, but some have typos:&lt;br&gt;
obfs4proxy -state =/var/lib/tor/pt_state/&lt;br&gt;
obfs4proxy - transports obfs3,scramblesuit&lt;br&gt;
Obfs4proxy -options scramblesuit:key=banana;&lt;wbr&gt;automata:rule=110;automata:&lt;wbr&gt;depth=3&lt;br&gt;
 &lt;br&gt;
3.3.2. Pluggable Transport To Parent Process Communication&lt;br&gt;
&lt;br&gt;
What is the correct IPv6 address quoting for CMETHOD and SMETHOD?&lt;br&gt;
Please give an example in the text.&lt;br&gt;
&lt;br&gt;
"Equal signs and commas MUST be escaped with a backslash."&lt;br&gt;
&lt;br&gt;
This is unclear: equals signs and commas in Key and Value?&lt;br&gt;
What about colons or backslashes?&lt;br&gt;
(Otherwise, it is impossible to end a value with a backslash.)&lt;br&gt;
Must Key be an identifier? What's the format?&lt;br&gt;
&lt;br&gt;
Why not just use an existing escaping scheme?&lt;br&gt;
&lt;br&gt;
"Tor: The ARGS are included in the transport line of the Bridge's extra-info \
document."&lt;br&gt; &lt;br&gt;
Really? This seems insecure. Do we publish bridge extra-infos anywhere?&lt;br&gt;
&lt;br&gt;
3.3.5 UDP Support&lt;br&gt;
&lt;br&gt;
The TOC breaks here.&lt;br&gt;
&lt;br&gt;
3.3.5.1 Obfuscating Proxy Architecture&lt;br&gt;
&lt;br&gt;
This section belongs at the top of the document.&lt;br&gt;
&lt;br&gt;
3.3.5.2. Configuring the Transports&lt;br&gt;
&lt;br&gt;
There are no details for how this works over UDP: what is the UDP&lt;br&gt;
equivalent to Pluggable PT Client Per-Connection Arguments, and do&lt;br&gt;
TCP implementations have to support that environmental variable as&lt;br&gt;
well?&lt;br&gt;
&lt;br&gt;
I suggest we standardise it as an environmental variable and&lt;br&gt;
command-line flag, and make all transports support it.&lt;br&gt;
&lt;br&gt;
3.3.5.5. Implementation of the PT Server&lt;br&gt;
&lt;br&gt;
Is the text in this section two different sizes?&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
--&lt;br&gt;
Tim Wilson-Brown (teor)&lt;br&gt;
&lt;br&gt;
teor2345 at gmail dot com&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
xmpp: teor at torproject dot org&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171012143834</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-10-12 14:38:34-0400</timestampReceived><subject>[tor-dev] Pluggable Transports 2.0 Specification, Draft 3</subject><body>

[Attachment #2 (multipart/alternative)]


Below is a link to the third draft of the Pluggable Transport 2.0
Specification. If you have feedback on this draft, please send me your
comments by October 31. Thank you!

Changes in this version:

   - Expanded acknowledgements section - thanks Yawning!
   - Removed TransportConn and TransportListener in favor of net.Conn and
   net.Listener
   - Modified SOCKS authentication method to use IANA-assigned designator
   - Added error response codes for per-connection arguments
   - Many typos fixed - thanks David Fifield!
   - Clarified some definitions - thanks teor!


Link:
https://operatorfoundation.org/PluggableTransportSpecification-v2-Draft3.pdf

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Below \
is a link to the third &lt;span class="gmail-m_3638249626185598086gmail-il"&gt;draft&lt;/span&gt; \
of the Pluggable Transport &lt;span \
class="gmail-m_3638249626185598086gmail-il"&gt;2&lt;/span&gt;.0 Specification. If you have \
feedback on this &lt;span class="gmail-m_3638249626185598086gmail-il"&gt;draft&lt;/span&gt;, \
please send me your comments by October 31. Thank you!&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Changes \
in this version:&lt;br&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Expanded \
acknowledgements section - thanks Yawning!&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Removed \
TransportConn and TransportListener in favor of net.Conn and \
net.Listener&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Modified \
SOCKS authentication method to use IANA-assigned designator&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Added \
error response codes for per-connection arguments&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Many \
typos fixed - thanks David Fifield!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Clarified \
some definitions - thanks teor!&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Link: &lt;a \
href="https://operatorfoundation.org/PluggableTransportSpecification-v2-Draft3.pdf"&gt;ht \
tps://operatorfoundation.org/PluggableTransportSpecification-v2-Draft3.pdf&lt;/a&gt;&lt;br&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171010122600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-10 12:26:00-0400</timestampReceived><subject>Re: [tor-dev] Your input on the Tor Metrics Roadmap 2017/18</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; we, the Tor Metrics Team, are currently drafting a roadmap for the work
&gt; we'd like to do on in the upcoming 12 months until September 2018.
&gt; 
&gt; If you believe that you're affected by these plans and want your ideas
&gt; to be included in this roadmap, please read our current draft and send
&gt; your feedback either to this list, to the metrics-team@ mailing list, or
&gt; to iwakeh or irl and/or me directly.
&gt; 
&gt; https://people.torproject.org/~karsten/volatile/metrics-team-roadmap-2017-10-06.pdf

Thanks you for shareing your roadmap - appreciated.

Here are some ideas:

1) metrics.tpo is focused on number of relays. I think it should be more
(additionally) about cw fraction /exit/guard prob. and shares
https://trac.torproject.org/projects/tor/ticket/4943
https://trac.torproject.org/projects/tor/ticket/6856

This is especially useful where a relatively low number of relays make
up a relevant CW fraction (i.e. BSD relays, alpha version relays, ...).
Currently the progress in OS diversity is basically invisible on metrics
platform graphs because it is based on relay count.

2)
tor network wide resilience graphs at family / AS / country level

- Is the tor network becoming more or less resilient / more or less
distributed / more or less centralized?
Is the number of _operators_ (Family) and ASes running n-percent
of exit/guard probability going up or down?

These graphs would show us if fewer operators run more (bad) of the tor
network or vice versa (better).

(I know using family data as an aggregation criteria is non-trivial but
a non-perfect solution could work as well - example:
https://nusenu.github.io/OrNetStats/maincwfamilies)

3)
for operators at relay level I consider bwauth vote graphs very
important / useful:

Atlas graphs about the bwauth measurements on relays level.
Depends on onionoo providing the data, which I filed here:
https://trac.torproject.org/projects/tor/ticket/16843


4)
generic aggregate graphs instead of specific family based graphs:

I've been thinking again about the recently added atlas ticket:

Implement family-level pages showing aggregated graphs
https://trac.torproject.org/projects/tor/ticket/23509

and realized that it would be much more powerful to graph whatever the
the user found with an arbitrary search term.
The problem with that is probably scalability as searches might result
in many hundret results.


regards,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171013202534</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2017-10-13 20:25:34-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 3</subject><body>

[Attachment #2 (multipart/alternative)]


nickm requested that I provide the following information about the PT 2.0
specification draft:

The only section that requires changes to tor is Section 3.3.4, on client
per-connection arguments.

Implementing the requirements from this section are discussed in the
following trac ticket: https://trac.torproject.org/projects/tor/ticket/21816

Here is the entirety of the proposal text that requires changes to tor, for
your convenience:

   1.

   If there are connection settings present, the authentication type 0x09
   (IANA assigned, "JSON Parameter Block") is used, followed by the
   serialized per-connection parameter data. The serialization process for
   the parameters is defined as follows:
   -

      ●  They keys and values are inserted into a map
      -

      ●  This map is serialized JSON to a UTF-8 string.


   -

   ●  The UTF-8 string is converted to a sequence of bytes. (This is trivial
   for a UTF-8 string.)
   -

   ●  The number of bytes is counted.
   -

   ●  The byte count is encoded as a 4-byte sequence in network byte
order (big-endian).

   -

   ●  The encoded count is prepended to the byte sequence.

   The following error codes are defined for the response when connection
   settings are present:


   -

   ●  X'10' - Connection settings size too large
   -

   ●  X'11' - Timeout reading connection settings
   -

   ●  X'12' - Error parsing connection settings
   -

   ●  X'13' - Connection settings have invalid or missing keys or values

   While the byte count is encoded as a 4-byte sequence, which is
capable of expressing
   connection setting sizes up to 4GB, it is not required that the
   implementation support the maximum possible size. If a size larger than
   is supported by the implementation is specified, the X'10' error code can
   be used. Additionally, an implementation-dependent timeout should
   included for receiving the connection settings. If this timeout is
   exceeded, the X'11' error code can be used. Error code X'12' is returned
   if the connection parameters are not properly encoded JSON. Error code
   X'13' is used if the connection settings are not correct for the specific
   transport being used.

   Example

   \x00\x00\x00\x39{"shared-secret": "rahasia", "secrets-file": "/tmp/blob"}




On Thu, Oct 12, 2017 at 2:38 PM, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:

&gt; Below is a link to the third draft of the Pluggable Transport 2.0
&gt; Specification. If you have feedback on this draft, please send me your
&gt; comments by October 31. Thank you!
&gt;
&gt; Changes in this version:
&gt;
&gt;    - Expanded acknowledgements section - thanks Yawning!
&gt;    - Removed TransportConn and TransportListener in favor of net.Conn and
&gt;    net.Listener
&gt;    - Modified SOCKS authentication method to use IANA-assigned designator
&gt;    - Added error response codes for per-connection arguments
&gt;    - Many typos fixed - thanks David Fifield!
&gt;    - Clarified some definitions - thanks teor!
&gt;
&gt;
&gt; Link: https://operatorfoundation.org/PluggableTransportSpecificatio
&gt; n-v2-Draft3.pdf
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;nickm requested that I provide the following information \
about the PT 2.0 specification draft:&lt;br&gt;&lt;br&gt;&lt;/div&gt;The only section that requires \
changes to tor is Section 3.3.4, on client per-connection \
arguments.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Implementing the requirements from this section \
are discussed in the following trac ticket: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/21816"&gt;https://trac.torproject.org/projects/tor/ticket/21816&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Here \
is the entirety of the proposal text that requires changes to tor, for your \
convenience:&lt;br&gt;

	
		
		
	
	
		&lt;div class="gmail-page" title="Page 23"&gt;
			&lt;div class="gmail-section" style="background-color:rgb(255,255,255)"&gt;
				&lt;div class="gmail-layoutArea"&gt;
					&lt;div class="gmail-column"&gt;
						&lt;ol start="0" style="list-style-type:none"&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;If&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;there&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;present,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;authentication&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;type&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;0x09&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;(IANA&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;assigned,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;"JSON Parameter&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Block")&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;used,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;followed&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;by&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;serialized&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;per-connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;parameter&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;data.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;The serialization&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;process&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;for&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;parameters&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;defined&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;as&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;follows: &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;ul style="list-style-type:none"&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
They&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;keys&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;and&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;values&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;inserted&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;into&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;map &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
This&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;map&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;serialized&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;JSON&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;to&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;UTF-8&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;string. &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class="gmail-page" title="Page 24"&gt;
			&lt;div class="gmail-section" style="background-color:rgb(255,255,255)"&gt;
				&lt;div class="gmail-layoutArea"&gt;
					&lt;div class="gmail-column"&gt;
						&lt;ul style="list-style-type:none"&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
The&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;UTF-8&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;string&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;converted&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;to&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;sequence&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;of&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;bytes.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;(This&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;trivial&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;for&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;UTF-8&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;string.) &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
The&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;number&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;of&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;bytes&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;counted. &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
The&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;count&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;encoded&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;as&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;4-byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;sequence&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;in&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;network&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;order&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;(big-endian). &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
The&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;encoded&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;count&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;prepended&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;to&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;sequence. &lt;/span&gt;&lt;/p&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;The&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;following&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;codes&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;defined&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;for&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;response&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;when&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;present: &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;/ul&gt;
						&lt;ul style="list-style-type:none"&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
X'10'&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;-&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;size&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;too&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;large &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
X'11'&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;-&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Timeout&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;reading&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
X'12'&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;-&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;parsing&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings &lt;/span&gt;&lt;/p&gt;
							&lt;/li&gt;&lt;li&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;●   \
X'13'&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;-&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;have&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;invalid&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;or&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;missing&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;keys&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;or&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;values &lt;/span&gt;&lt;/p&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;While&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;count&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;encoded&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;as&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;4-byte&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;sequence,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;which&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;capable&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;of&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;expressing \
connection&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"Gautami""&gt;   \
&lt;/span&gt;&lt;span style="font-size:11pt;font-family:"ArialMT""&gt;setting&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;sizes&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;up&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;to&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;4GB,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;it&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;not&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;required&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;that&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;implementation&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;support&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the maximum&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;possible&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;size.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;If&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;a&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;size&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;larger&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;than&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;supported&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;by&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;implementation&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;specified,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the X'10'&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;code&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;can&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;be&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;used.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Additionally,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;an&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;implementation-dependent&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;timeout&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;should included&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;for&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;receiving&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;If&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;this&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;timeout&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;exceeded,&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;X'11'&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;code can&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;be&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;used.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;code&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;X'12'&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;returned&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;if&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;parameters&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;not&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;properly&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;encoded JSON.&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;Error&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;code&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;X'13'&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;is&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;used&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;if&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;connection&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;settings&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;are&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;not&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;correct&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;for&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;the&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;specific transport&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;being&lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:11pt;font-family:"ArialMT""&gt;used. &lt;/span&gt;&lt;/p&gt;
								&lt;p&gt;&lt;span style="font-size:11pt;font-family:"Arial";font-weight:700"&gt;Example
 &lt;/span&gt;&lt;/p&gt;
								&lt;p&gt;&lt;span style="font-size:10pt;font-family:"CourierNewPSMT""&gt;\x00\x00\x00\x39{"shared-secret":&lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"CourierNewPSMT""&gt;"rahasia",&lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"CourierNewPSMT""&gt;"secrets-file":&lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"Gautami""&gt;   &lt;/span&gt;&lt;span \
style="font-size:10pt;font-family:"CourierNewPSMT""&gt;"/tmp/blob"} \
&lt;/span&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	
&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Thu, Oct 12, 2017 at 2:38 PM, Brandon Wiley &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:brandon@blanu.net" \
target="_blank"&gt;brandon@blanu.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Below \
is a link to the third &lt;span \
class="m_9029100059372026106gmail-m_3638249626185598086gmail-il"&gt;draft&lt;/span&gt; of the \
Pluggable Transport &lt;span \
class="m_9029100059372026106gmail-m_3638249626185598086gmail-il"&gt;2&lt;/span&gt;.0 \
Specification. If you have feedback on this &lt;span \
class="m_9029100059372026106gmail-m_3638249626185598086gmail-il"&gt;draft&lt;/span&gt;, please \
send me your comments by October 31. Thank you!&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Changes \
in this version:&lt;br&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Expanded \
acknowledgements section - thanks Yawning!&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Removed \
TransportConn and TransportListener in favor of net.Conn and \
net.Listener&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Modified \
SOCKS authentication method to use IANA-assigned designator&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Added \
error response codes for per-connection arguments&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Many \
typos fixed - thanks David Fifield!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:normal;letter-s \
pacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal; \
word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"&gt;Clarified \
some definitions - thanks teor!&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Link: &lt;a \
href="https://operatorfoundation.org/PluggableTransportSpecification-v2-Draft3.pdf" \
target="_blank"&gt;https://operatorfoundation.&lt;wbr&gt;org/&lt;wbr&gt;PluggableTransportSpecificatio&lt;wbr&gt;n-v2-Draft3.pdf&lt;/a&gt;&lt;br&gt;&lt;/div&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171014185500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-14 18:55:00-0400</timestampReceived><subject>Re: [tor-dev] non-ASCII handling in tor and onionoo</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


at least onionoo does not provide any non-ASCII data from ContactInfo

example:

https://atlas.torproject.org/#details/B79589355A41880DFF82F5225F2940437CEDE925

https://collector.torproject.org/recent/relay-descriptors/server-descriptors/2017-10-13-00-05-00-server-descriptors



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171015153327</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-10-15 15:33:27-0400</timestampReceived><subject>[tor-dev] No network-team IRC meetings this week</subject><body>

Hi, all!

The usual network-team IRC meeting on Monday, and the usual patch
party on Tuesday, will not happen this week: almost everybody will
traveling from, or recovering from, the meeting in Montreal.

For more information about our regular meetings, please see:
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam

Remember, new contributors and external developers are always welcome!

yrs,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171015160310</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-10-15 16:03:10-0400</timestampReceived><subject>[tor-dev] The Tor git master branch is now 0.3.3.x</subject><body>

Hello!

With the opening of the new 0.3.3.x branch, the git master branch for
tor is now 0.3.3.x.  Feature patches should still be based on master.
If you are writing any bugfix patch that should go into an earlier
version, please base it on the appropriate maint branch.  For example,
if you're fixing a bug in Tor 0.3.2.x, you should base your git branch
on the "maint-0.3.2" branch.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171015171818</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2017-10-15 17:18:18-0400</timestampReceived><subject>Re: [tor-dev] User perception of onion service discovery</subject><body>

[Attachment #2 (multipart/signed)]


I agree with Alec. Don't block the existing tor2web stuff,
that would be very rude. Instead just do not implement any
kind of tor2web for v3 onion services so that tor2web will
gradually fade as we migrate.

&gt; *although speaking as a geek I believe that re-engineering T2W to
&gt; support SSL via SNI-Sniffing would address this, it would be a gross
&gt; and pointless hack, complicated still further by certificate issuance,
&gt; and all reasonable use cases for which would be better addressed by
&gt; running a local copy of Tor.

Ah yeah, Donncha wrote a tool to do that called oniongateway:

https://github.com/DonnchaC/oniongateway

Is that what you mean?

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171017204022</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-17 20:40:22-0400</timestampReceived><subject>Re: [tor-dev] GET request to a regular website using Tor and nodejs</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 17 Oct 2017, at 15:39, Fernando Gabrieli &lt;fgabrieli@gmail.com&gt; wrote:
&gt; 
&gt; Hello all, i want to tunnel a http request from my nodejs app through Tor, would \
&gt; you point me in the right direction to start implementing this?

1. Install tor
2. Configure tor as a SOCKS or HTTP Tunnel proxy using SocksPort or
    HTTPTunnelPort (0.3.2 and later?)
3. Run tor
4. Configure your application to use tor as a proxy through the port you
    configured in step 2
5. Check that the remote site isn't using a CDN that blocks tor, and be
    prepared for response delays and failures

See the latest man page here:
https://github.com/torproject/tor/blob/master/doc/tor.1.txt

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 17 Oct 2017, at 15:39, Fernando \
Gabrieli &lt;&lt;a href="mailto:fgabrieli@gmail.com"&gt;fgabrieli@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;Hello all, i want to \
tunnel a http request from my nodejs app through Tor, would you point me in the right \
direction to start implementing this?&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;1. Install \
tor&lt;/div&gt;&lt;div&gt;2. Configure tor as a &lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;SOCKS or &lt;/span&gt;HTTP Tunnel proxy using &lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;SocksPort or&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;    HTTPTunnelPort (0.3.2 \
and later?)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;3. Run tor&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;4. Configure your application to use tor as a proxy through the port \
you&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;  \
  configured in step 2&lt;/span&gt;&lt;/div&gt;&lt;div&gt;5. Check that the remote site isn't \
using a CDN that blocks tor, and be&lt;/div&gt;&lt;div&gt;    prepared for response \
delays and failures&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;See the latest man page here:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/torproject/tor/blob/master/doc/tor.1.txt"&gt;https://github.com/ \
torproject/tor/blob/master/doc/tor.1.txt&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171018145727</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-18 14:57:27-0400</timestampReceived><subject>Re: [tor-dev] Student project to work on IPv6 support (was: [tor-relays] About relay size)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 14 Oct 2017, at 01:06, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:
&gt; 
&gt;&gt; El 12/10/17 a las 12:22, teor escribió:
&gt;&gt; 
&gt;&gt; On 12 Oct 2017, at 09:15, Santiago R.R. &lt;santiagorr@riseup.net&gt; wrote:
&gt; 
&gt; …
&gt;&gt; 
&gt;&gt; 
&gt;&gt;    With my colleague JC Bach (in CC), we have proposed a last-year student
&gt;&gt;    project to address IPv6-related issues in Tor for the upcoming semester,
&gt;&gt;    at IMT Atlantique engineering school. There will be two students working
&gt;&gt;    on it. It is hard to say now how far we will arrive, especially because
&gt;&gt;    this is our first approach to Tor entrails.
&gt;&gt; 
&gt;&gt;     …
&gt;&gt; 
&gt;&gt; This is great! We would like some help with Tor's IPv6 support.
&gt;&gt; And we are happy to help you and your students.
&gt;&gt; 
&gt; …
&gt; 
&gt;&gt; How many students?
&gt; 
&gt; There will be two.
&gt; 
&gt;&gt; How much time?
&gt; 
&gt; From now until mid-March. Students will have 135h in their schedules to
&gt; work on their projects.
&gt; 
&gt;&gt; What are your goals for the project?
&gt; 
&gt; For now, it's still open, but addressing IPv6 support. We should limit
&gt; the scope soon, according to open related tickets that could be feasible
&gt; to work on.
&gt; 
&gt;&gt; How much do you expect to get done?
&gt; 
&gt; At least, choose a couple of easy-tagged IPv6 tickets, and close them.
&gt; However, it's difficult to state on this right now.

135h is enough to submit a small, one-line change to get used to the tor
patch process, and then do something more substantial with some testing.

Understanding the code, and testing and documenting the fix can take more
time than writing the patch.

Your students could work on getting IPv6 bridges working with private IPv4
addresses. The bridge needs to include a placeholder IPv4 address in its
descriptor, and then the bridge client needs to ignore this address.

Or they could work out why Tor Browser often fails IPv6-only sites like
ipv6.google.com?

We think it's because IPv4 exits don't resolve AAAA addresses. Failed
addresses should've resolved and sent back to the client. And then the
client can use the address to pick its next exit.

We've made some progress on both of these issues, but then ran out of
time.

&gt;&gt; We are at a Tor meeting this week.
&gt;&gt; We are revising Tor's IPv6 roadmap for the next year.
&gt;&gt; Next week, this page will be updated:
&gt;&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/
&gt;&gt; IPv6Hackfest
&gt; 
&gt; Good to know about this!

Sorry, this was the wrong link.

Please use:

https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Montreal/IPv6Hackfest

https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features

(We are still adding features to the matrix.)

&gt;&gt; We want to help people get code accepted into tor.
&gt;&gt; Here is how we write code:
&gt;&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md
&gt;&gt; https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md
&gt;&gt; 
&gt;&gt; It can help to start by submitting a small change, so you can see how we work.
&gt;&gt; Then you can make larger changes more easily.
&gt; 
&gt; Understood.
&gt; 
&gt;&gt; Our bug tracker is:
&gt;&gt; https://trac.torproject.org/
&gt;&gt; 
&gt;&gt; We are also in #tor-dev IRC on irc.oftc.net.
&gt;&gt; 
&gt;&gt; Please ask questions early, and ask often!
&gt;&gt; We would love to help you help tor.

[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 14 Oct 2017, at 01:06, Santiago \
R.R. &lt;&lt;a href="mailto:santiagorr@riseup.net"&gt;santiagorr@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;El 12/10/17 a las 12:22, teor \
escribió:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On 12 Oct \
2017, at 09:15, Santiago R.R. &lt;&lt;a \
href="mailto:santiagorr@riseup.net"&gt;santiagorr@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;…&lt;/span&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   With my colleague JC Bach (in CC), we have proposed a last-year \
student&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   project to address IPv6-related issues in Tor for the upcoming \
semester,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    at \
IMT Atlantique engineering school. There will be two students \
working&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    on \
it. It is hard to say now how far we will arrive, especially \
because&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    this \
is our first approach to Tor entrails.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;    \
…&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;This is \
great! We would like some help with Tor's IPv6 \
support.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;And we are happy to \
help you and your students.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;…&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;How many \
students?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;There will be \
two.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;How much \
time?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;From now until mid-March. \
Students will have 135h in their schedules to&lt;/span&gt;&lt;br&gt;&lt;span&gt;work on their \
projects.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;What are your \
goals for the project?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;For now, it's \
still open, but addressing IPv6 support. We should limit&lt;/span&gt;&lt;br&gt;&lt;span&gt;the scope \
soon, according to open related tickets that could be feasible&lt;/span&gt;&lt;br&gt;&lt;span&gt;to \
work on.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;How much do you \
expect to get done?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;At least, choose a \
couple of easy-tagged IPv6 tickets, and close them.&lt;/span&gt;&lt;br&gt;&lt;span&gt;However, it's \
difficult to state on this right \
now.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;135h is enough to submit a \
small, one-line change to get used to the tor&lt;/div&gt;&lt;div&gt;patch process, and then do \
something more substantial with some testing.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Understanding \
the code, and testing and documenting the fix can take more&lt;/div&gt;&lt;div&gt;time than \
writing the patch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Your students could work on getting IPv6 \
bridges working with private IPv4&lt;/div&gt;&lt;div&gt;addresses. The bridge needs to include a \
placeholder IPv4 address in its&lt;/div&gt;&lt;div&gt;descriptor, and then the bridge client \
needs to ignore this address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Or they could work out why Tor \
Browser often fails IPv6-only sites like&lt;/div&gt;&lt;div&gt;&lt;a \
href="http://ipv6.google.com"&gt;ipv6.google.com&lt;/a&gt;?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We think \
it's because IPv4 exits don't resolve AAAA addresses. Failed&lt;/div&gt;&lt;div&gt;addresses \
should've resolved and sent back to the client. And then the&lt;/div&gt;&lt;div&gt;client can use \
the address to pick its next exit.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We've made some progress \
on both of these issues, but then ran out of&lt;/div&gt;&lt;div&gt;time.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We are at a Tor meeting this \
week.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We are revising Tor's IPv6 \
roadmap for the next year.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Next \
week, this page will be updated:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/"&gt;https \
://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;IPv6Hackfest&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Good to \
know about this!&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sorry, this was the \
wrong link.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please use:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Montreal/"&gt;https: \
//trac.torproject.org/projects/tor/wiki/org/meetings/2017Montreal/&lt;/a&gt;&lt;/span&gt;&lt;/font&gt;&lt;span \
style="background-color: rgba(255, 255, 255, \
0);"&gt;IPv6Hackfest&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features"&gt;htt \
ps://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6Features&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(We \
are still adding features to the matrix.)&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;We want to help people get code accepted into \
tor.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Here is how we write \
code:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md"&gt;https: \
//gitweb.torproject.org/tor.git/tree/doc/HACKING/GettingStarted.md&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md"&gt;https \
://gitweb.torproject.org/tor.git/tree/doc/HACKING/CodingStandards.md&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It can help \
to start by submitting a small change, so you can see how we \
work.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Then you can make larger \
changes more easily.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Understood.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Our bug tracker is:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/"&gt;https://trac.torproject.org/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We are also \
in #tor-dev IRC on &lt;a \
href="http://irc.oftc.net"&gt;irc.oftc.net&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Please ask \
questions early, and ask often!&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;We would love to help you help tor.&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171018173141</emailId><senderName>Shawn Webb</senderName><senderEmail>shawn.webb@hardenedbsd.org</senderEmail><timestampReceived>2017-10-18 17:31:41-0400</timestampReceived><subject>Re: [tor-dev] Call For Testing: Capsicum Integration With Tor</subject><body>

[Attachment #2 (multipart/signed)]


Hey All,

This is a brief update.

On Tue, Oct 17, 2017 at 05:01:33PM +0000, Shawn Webb wrote:
&gt; Known Issues
&gt; ------------
&gt; 
&gt; Enabling the sandbox while having Tor configured in transparent proxy
&gt; mode is currently broken. We are researching what causes the breakage.
&gt; Chances are that either Tor is trying to access the global namespace in
&gt; transparent proxy mode or one or more file descriptors simply need to
&gt; be granted one or more extra capabilities.

In discussions with a FreeBSD developer, the whitelist methodology for
filesystem access that Tor uses and that I adopted isn't as strong as it
could be. An attacker could potentially get around the whitelist scheme
as currently implemented.

Instead, the code will be rewritten to pre-open expected directories
when Tor starts up, and utilize openat(2) to open file descriptors. We
can utilize the existing whitelisting API to perform that work, since
the whitelisting API is called prior to entering capmode.

We will keep the sandbox_open abstraction, since that will do the work
of matching up with directory descriptor matches the requested path.

&gt; 
&gt; Future Work
&gt; -----------
&gt; 
&gt; The read-only nature of the whitelist is only enforced via a logic
&gt; operation. We plan to relocate the whitelist into a memory mapping
&gt; that will turn read-only upon entering capmode.

This is nullified by the statement above.

&gt; 
&gt; The current implementation should be further abstracted in order for
&gt; Tor to be able to pick at runtime the appropriate sandbox
&gt; implementation. This would be similar to how Tor chooses which ed25519
&gt; implementation to use, donna or ref10.

This is mostly done. The FreeBSD/Capsicum side is done. However, the
Linux/seccomp-filter side needs to be integrated.

Thanks,

-- 
Shawn Webb
Cofounder and Security Engineer
HardenedBSD

GPG Key ID:          0x6A84658F52456EEE
GPG Key Fingerprint: 2ABA B6BD EF6A F486 BE89  3D9E 6A84 658F 5245 6EEE

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171019224852</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-19 22:48:52-0400</timestampReceived><subject>Re: [tor-dev] metrics: collecting circuit build failures from relays to detect network reachability </subject><body>


&gt; On 19 Oct 2017, at 00:04, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; 
&gt; Are there plans to implement PeerFlow in Tor?

As far as I am aware, we are planning on:
* stabilising the current system
* working out how to test changes
* specifying what a good bandwidth allocation system has to do
* incrementally replacing old scanners with suitable alternatives

I'd expect that dawuud's bwscanner, isis' bridge bandwidth scanner,
and PeerFlow are all contenders. But I'm not aware of any follow-up
research or implementation on PeerFlow.

&gt; Connectivity information
&gt; like this would be an automatic byproduct.

Connectivity information is an automatic byproduct of the current
bandwidth scanners (TorFlow), and any future replacements.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171021120200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-10-21 12:02:00-0400</timestampReceived><subject>Re: [tor-dev] A ContactInfo specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt;&gt; Do you consider the following torrc _settings_ too sensitive to publish
&gt;&gt; by relays (without an aggregation scheme)?
&gt;&gt;
&gt;&gt; - OfflineMasterKey setting (0/1)
&gt;&gt; - SigningKeyLifetime
&gt;&gt; - Sandbox (0/1)
&gt; Yes, these are directly related to relay security, so if they can be linked
&gt; to the relay, they should be opt-in.


All fields are opt-in and can be linked to the relay if they are
published, but if there are concerns about publishing+collecting that
information I can remove these fields.
-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171023013618</emailId><senderName>Igor Mitrofanov</senderName><senderEmail>igor.n.mitrofanov@gmail.com</senderEmail><timestampReceived>2017-10-23 01:36:18-0400</timestampReceived><subject>Re: [tor-dev] Do Tor relays rely on ICMP type 11 (time exceeded / timeout in transit)?</subject><body>

I have figured it out. Tor is fine.

TTL=1 mentioned in incoming ICMP 11 messages is just the destination
host's perspective, not what the relay originally sent out. I have
traceroute'd to some hosts the relay was trying to connect to, and
there are indeed infinite routing loops (misconfigured networks) over
there, so TTL gets decremented to 1 and the ICMP error is delivered,
as it should.

I am going to allow both ICMP type 11 and type 3 then. (Need to figure
out what to do with incoming fragmented packets, but that's another
story altogether, perhaps for tor-relays@)

Thanks!


On Sun, Oct 22, 2017 at 1:55 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 23 Oct 2017, at 05:14, Igor Mitrofanov &lt;igor.n.mitrofanov@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; On my relays I am dropping any traffic that Tor itself does not rely on.
&gt;&gt; I wonder if I should allow or block incoming and/outgoing ICMP type 11
&gt;&gt; (time exceeded / timeout in transit)?
&gt;
&gt; Try it and see?
&gt;
&gt;&gt; My host does receive some ICMP type 11 packets, and does seem to send
&gt;&gt; some out, but I am not sure if Tor is the source or destination.
&gt;&gt; Do Tor relays use some 'traceroute'-like mechanism to detect unreachable relays?
&gt;
&gt; Not as far as I am aware.
&gt;
&gt;&gt; "netstat -s:
&gt;&gt;    ...
&gt;&gt;    ICMP input histogram:
&gt;&gt;        ...
&gt;&gt;        timeout in transit: 1923
&gt;&gt;    ...
&gt;&gt;    ICMP output histogram:
&gt;&gt;        ...
&gt;&gt;        timeout in transit: 1277
&gt;&gt; "
&gt;&gt; I remember seeing outgoing TCP packets with TTL set to 1 - those were
&gt;&gt; the ones triggering incoming ICMP type 11 packets.
&gt;
&gt; Are you running an exit?
&gt; Do you have multiple IP addresses?
&gt; Using OutboundBindAddressExit can help you to find out if it's tor relaying
&gt; traffic, or tor exit traffic from clients that are doing TCP traceroutes.
&gt;
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171024024356</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2017-10-24 02:43:56-0400</timestampReceived><subject>Re: [tor-dev] Request for resource requirement</subject><body>

On Sun, Oct 22, 2017 at 09:56:59PM +0530, Ankit Rathore wrote:
&gt; Hello,
&gt; I am currently working on a project where I require the resource which was
&gt; originally present at this link
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/sponsors/SponsorD/June2011
&gt; 
&gt; The contents of this page are no longer available. It would be really
&gt; helpful if someone could help me get the original contents of this page

I'm not sure it was ever available. Wayback Machine doesn't have a successful
capture of SponsorD from Oct 2011 [0], and it doesn't have a capture of the
actual page you're requesting [1].

Did you find the June2011 link from this blog post [2] or somewhere else?

The closest information I've found from that time is this roadmap [3] list,
but there are only SponsorD deliverables for Sep 2010, nothing for June 2011.

Maybe someone else knows what phobos actually wanted to link.

[0] https://web.archive.org/web/20111026095355/https://trac.torproject.org/projects/tor/wiki/sponsors
 [1] https://web.archive.org/web/20141005101319/https://trac.torproject.org/projects/tor/wiki/sponsors/SponsorD/June2011
 [2] https://blog.torproject.org/august-2010-progress-report
[3] https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor?version=11
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171025211748</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-25 21:17:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Move IPv6 ORPorts to the Microdesc Consensus</subject><body>


&gt; On 25 Oct 2017, at 14:35, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;   This change removes 2-50 bytes from the microdescriptors of relays that
&gt;   have an IPv6 ORPort, and adds them to reachable IPv6 relays' microdesc
&gt;   consensus entries.

For the record, the byte figures here is wrong, it should read "7-50 bytes"
or "9-50 bytes".

Examples of each address are:
7-50 bytes (if [::] is declared by a relay, an unreachable address that will
never be in the consensus)
8-50 bytes (if [x::] is declared by a relay, in a future IPv6 address allocation)

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171025214646</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-25 21:46:46-0400</timestampReceived><subject>Re: [tor-dev] Reporting Relay Bandwidth Less Often</subject><body>


&gt; On 26 Oct 2017, at 06:36, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; teor:
&gt;&gt; We would like to make Tor relays report their bandwidth statistics
&gt;&gt; every 24 hours, rather than every 4 hours.
&gt; 
&gt; How has the new time period been decided on?
&gt; Is one day the upper bound for some use-case?
&gt; If longer periods (2, 3 or 7 days...) are safer: why not increase it
&gt; even more?

We decided to make the bandwidth statistics interval 24 hours
because relays already report observed bandwidth every 24 hours
in their descriptors. (More precisely, they re-post their descriptors
approximately every 24 hours, or when the bandwidth changes by
more than 2x, or when any of the rest of the config changes.)

To increase both these intervals beyond 24 hours, we would have
to make major changes to the bandwidth authority subsystem as
well.

So this is the simplest change that yields a significant improvement
in client anonymity.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171026070248</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-10-26 07:02:48-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-10-25 04:00?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-10-25 23:51, nusenu wrote:
&gt; Hi Karsten,

Hi nusenu,

&gt; just wanted to let you know that the delta between
&gt; relays_published and current time is unusually high.
&gt; 
&gt; 
&gt; https://onionoo.torproject.org/details?limit=0
&gt; 
&gt; {"version":"4.2",
&gt; "build_revision":"bce585f",
&gt; "relays_published":"2017-10-25 04:00:00",

Yes, the issue is known, but we were busy yesterday fixing CollecTor and
making sure we're not losing data (we're not!). Fixing Onionoo is going
to happen today.

&gt; (please let me know if you have automated monitoring/alerting so I know
&gt; that these emails are not useful)

We do have monitoring in place, but that monitoring didn't spot the
issue with one of the frontends being broken. Please keep sending emails
if you notice any problems.

&gt; thanks,
&gt; nusenu

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171027093433</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-10-27 09:34:33-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.4.1, Onionoo 4.2-1.6.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

three new releases are available:

     https://dist.torproject.org/collector/1.4.1/
     https://dist.torproject.org/onionoo/4.2-1.6.1/

These releases enable CollecTor and Onionoo to handle unusually
structured (but valid) descriptors (cf. change-logs [0], [1]).

For Onionoo this prevented updates, which are running again now
as all instances use the new version now.  So, all clients like
Atlas receive fresh data again.
The CollecTor fix was deployed first on all tp.o instances and no data
was lost.

Thanks to all who waited patiently for Atlas to receive new data!
And, to all who kindly reported the problems they noticed!

Please direct comments and questions to the metrics-team mailing list [3].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.4.1
[1] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.2-1.6.1
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20171028212749</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-10-28 21:27:49-0400</timestampReceived><subject>Re: [tor-dev] v3 hidden services: inconsistencies between spec and implementation</subject><body>

On 29 Oct 2017, at 01:30, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:

&gt;&gt; # 220-ecc-ids-keys.txt

Is this the latest version of the ECC ID specification?
Usually, our proposals are integrated into the main spec documents
after they are implemented.

&gt;&gt; # 2.1
&gt;&gt; 
&gt;&gt; * 'The signature is formed by signing the first N-64 bytes of the
&gt;&gt;  certificate prefixed with the string "Tor node signing key certificate
&gt;&gt;  v1".' I found this to be false; the signatures only validate without
&gt;&gt;  the string prefix.
&gt;&gt; 
&gt; 
&gt; Ouch... I think we should edit the spec and consider if there are any
&gt; security risks here.

One security risk is that signatures on these certificates are re-usable
in other contexts. For example, if two different parts of the Tor code
believe signed certificates without prefixes, an adversary can take a
certificate signed for one of them, and pass it to the other.

&gt;&gt; ## A.1
&gt;&gt; 
&gt;&gt; * I realized that the certificate types here are outdated. The
&gt;&gt;  signing-key extension is listed as type [04], when in rend-spec-v3.txt
&gt;&gt;  and the C implementation it is type [08].
&gt; 
&gt; Let's fix the spec here too...

This should definitely be integrated into one of the main specs.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171029234100</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2017-10-29 23:41:00-0400</timestampReceived><subject>[tor-dev] Fwd: Fennec now builds with clang instead of gcc</subject><body>

For those working on Tor Browser for Android...

----- Original message -----
From: Nathan Froyd &lt;nfroyd@mozilla.com&gt;
To: "dev-platform" &lt;dev-platform@lists.mozilla.org&gt;,
mobile-firefox-dev@mozilla.org
Subject: Fennec now builds with clang instead of gcc
Date: Sun, 29 Oct 2017 19:15:50 -0400

Hi all,

Bug 1163171 has been merged to mozilla-central, moving our Android
builds over to using clang instead of GCC.  Google has indicated that
the next major NDK release will render GCC unsupported (no bugfixes
will be provided), and that it will be removed entirely in the near
future.  Switching to clang now makes future NDK upgrades easier,
provides for better integration with the Android development tools,
and brings improvements in performance/code size/standards support.

For non-Android platforms, the good news here is that compiling Fennec
with clang was the last major blocker for turning on C++14 support.
Using clang on Android also opens up the possibility of running our
static analyses on Android.

If you run into issues, please file bugs blocking bug 1163171.

Thanks,
-Nathan
_______________________________________________
mobile-firefox-dev mailing list
mobile-firefox-dev@mozilla.org
https://mail.mozilla.org/listinfo/mobile-firefox-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171030123445</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-10-30 12:34:45-0400</timestampReceived><subject>Re: [tor-dev] Understanding the guard/md issue (#21969)</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt;&gt; On 29 Oct 2017, at 01:19, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; &lt;snip&gt;
&gt;&gt; 
&gt;&gt; Let me know what you think! Perhaps you have other ideas here of how we
&gt;&gt; should approach this issue.
&gt;
&gt; Fix #23817 by implementing a failure cache and going to a fallback if all
&gt; primary guards fail. I think that would be a solution for #23863 as well.
&gt;
&gt; And if a few fallbacks don't have the guard's microdesc, mark the guard as
&gt; down. It's likely it's microdesc is just not on the network for some reason.
&gt;

Hey Tim!

Please see
https://trac.torproject.org/projects/tor/ticket/23817#comment:6 for an
implementation plan of the failure cache concept. If it makes sense to
you, I will try to implement it this week.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20171030195704</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-10-30 19:57:04-0400</timestampReceived><subject>[tor-dev] Connection, Channel and Scheduler - An Intense Trek</subject><body>

[Attachment #2 (multipart/signed)]


Hello everyone!

DISCLAIMER: The following is enormous and tries to describe in some level of
details the situation in tor with connection&lt;-&gt;channel&lt;-&gt;scheduler. This comes
after we've merged the KIST scheduler, we've realized many things we'ren't what
they were suppose to be or meant for. In the end, I'm asking questions so we
can move forward with development and fixing things.

Last thing before you start your journey in the depth of Tor, the 3 subsystems
I'm going to talk about and how they interact are kind of very complicated so
it is very possible that I might have gotten things wrong or miss some details.
Please, point them out so we can better document, better be informed and make
good decisions. I plan to document as much as I can from this process for a new
file in torguts.git repository.

This is part of the work from ticket #23993.

Enjoy!

== Part One - The Distant Past ==

Once upon a time, Tor had 0.2.3 years old. It was before the "big change" and
it was using connections and circuits in a simplistic but yet clever way. I'll
briefly describe here how it worked out and why we wanted to change it.

Roughly, once a cell comes in, it is put in the inbound buffer called "inbuf"
of a connection_t and it is processed. Then, if it needs to be relayed that is
sent along the circuit it came on, it is put in that circuit queue. Each
connection_t had a priority queue of "active circuits" using the EWMA policy to
prioritize. The first circuit was to be flushed of a certain amount of cells
onto the connection_t outbound buffer or "outbuf" where libevent main loop
takes over to actually write the bytes on the network from the outbuf. Then,
the circuit pqueue is updated and we would move on. The following is a high
level diagram of a relayed cell:

      +--------------+    +-----------+    +----------------+
      |connection_t A|    | circuit_t |    | connection_t  B|
      |  (inbuf)     |---&gt;|  (pqueue) |---&gt;|   (outbuf)     |---&gt; Network
      +--------------+    +-----------+    +----------------+

That had at least one big problem. Not considering the entire set of circuits
could make one connection (with some circuits on it) bloat the network link of
the relay. It would actually be worst than that if it had bandwidth limitation,
you want to pick the connection that has the highest priority for the circuit
on it to flush

All in all, tor needed to move to a logic where _all_ circuits are considered
using the EWMA policy, flushing the cell(s) of that picked circuit on the
connection outbuf so it is prioritized on the network.

Then in 0.2.4, everything changed!

== Part Two - The Big Change ==

Two new abstractions were added to Tor 0.2.4 (#6465), channel and circuitmux
(short for circuit multiplexer or multiplexing, history is unclear ;). Up until
this day, this is what tor is using.

The channel_t object was intended to provide a "transport" abstraction layer
for relay to relay connection which is reprensented by a connection_t object.
Each channel has a circuitmux_t object that encapsulates the queuing logic and
selection policy of circuits of a channel. In other words, the circuits that
goes through that connection are listed in that object so we can do cell
prioritization.

To summarize, this roughly looks like this now:

  +------------+
  |connection_t|
  +------------+
         |
         v 1
    +---------+
    |channel_t|
    +---------+
         |
         v 0..n
    +---------+
    |circuit_t|
    +---------+

Channels are suppose to work as a protocol abstraction on that connection. The
original intent of this was to be able to implement more easily different
protocl like for instance helping researchers to experiment with other things
more easily. Decoupling TLS from connection_t and putting them in a subclass of
channel_t and thus was born channel_tls_t. It implements the channel_t
interface and is in theory designed to handle TLS layer of relay to relay
connection (handshake, cells, etc). So far, tor only has that channel class.

Now that we had this layer and a way to multiplex circuits on a single
connection through the use of channel, we needed one last piece, a way to
prioritize cells on the network considering all circuits. Along came the "cell
scheduler" (scheduler.c) in Tor 0.2.6 and now called the Vanilla scheduler.

In a nutshell, libevent main loop calls the scheduler at a constant rate and
the subsystem will consider all channels between each other comparing circuits
priority using the EWMA policy (an interface was created to implement more
policies but I won't get into that in this email).

So now, tor finally had a good infrastructure to prioritize cells on the
network by looking at all circuits at once. TCP connections would be
established between relays, the channel layer would be handling the TLS
business and the scheduler would be flushing cells on the network by
considering all circuits on all channels. It is a really nice modularized
design and would make tor improve in performance.

But, that's not entirely the reality of things right now.

== Part Three - The Thruth ==

In 2014, a paper came out titled: Never Been KIST: Tor's Congestion Management
Blossoms with Kernel-Informed Socket Transport
(http://www.robgjansen.com/publications/kist-sec2014.pdf). An improved way for
tor to scheduled data transmission properly by asking the kernel information
about the state of the TCP buffers so tor could flush data on the network
without bloating the local link.

Then in 2016 up to now, Matthew Traudt implemented KIST in tor which required
an important refactoring of the scheduler subsystem in order to make it work
with different multiple scheduling type. It is today the Scheduler option in
torrc. And all 0.3.2 tor uses KIST by default. Many things were discovered
during that piece of work by Matt. For instance, this very important #20459 bug
for which we were badly comparing cmux policy thus ultimately prioritizing
wrongly our circuits.

But fundemental issues in the design of channels and the scheduler were found
for which I'll list some here and will ultimately lead me to Part Four of this
email about our next steps moving forward.

1. Channels implemented cell queues that weren't really queues.

If you look at the channel_t object, you'll notice "incoming_queue" and
"outgoing_queue" which basically allow the transition of a cell from a
connection_t inbuf to the circuit queue and then to the connection_t oubuf. It
looks like this for a relayed cell:

    conn inbuf -&gt; chan in_queue -&gt; circ queue -&gt; chan out_queue -&gt; conn outbuf

The idea behind this is to quickly empty the conncetion inbuf to an
intermediary object (channel) leaving the kernel inbound TCP queue as much room
as we can. In other words, offloading the kernel buffer to user space since we
need to run some processing on that data and there was no need to leave that
data on the kernel buffer during that time.

Then from the channel, a cell would be put on the circuit queue and in turn
would be process by the scheduler. The scheduler would select a circuit (EWMA
policy), flush cells from its queue onto the channel outgoing queue and then it
would be flushed to the connection outbuf which is taken care of by libevent to
write on the socket (to the network).

One could argue here that in terms of design we have too many queues but that
would be true if the channel queues were actually acting like queues. It turns
out that the incoming and outgoing queues of a channel are always empty
(#23709) and this is due to the fact that the code queues a cell then processes
it immediately meaning either put it on the circuit queue or connection outbuf.

Each cell is memcpy() over the a channel queue and then processed right away
just to be copied again into the circuit queue or outbuf. This has a
performance cost over time as a relay sees thousands of cells a second. But
also it makes the channel subsystem much more complicated in terms of code with
trying to handle those queues every part of the way in and out of the channel
subsystem. But the worst part is that the scheduler subsystem assumed some
decisions based on the outgoing queue size. And when it is always 0, issue
arise like #23676.

2. DESTROY cells handling

Within a circuitmux object, there is a "destroy cell queue" on which a DESTROY
cell is put in for one of the circuit on the cmux. An important thing for tor
is that when it needs to send a DESTROY, it needs to _stop_ sending any queued
cell on that circuit, dump them and only send the DESTROY cell.

Many things are problematic currently. For starter, sending a DESTROY cell
bypasses the scheduler (#23712). Tor will immediately try to flush the cell on
the network *if* the channel doesn't have queued *writes* which means if the
connection outbuf is empty. If not, once it is sufficiently drained, the
channel will be scheduled in and the DESTROY cell finally sent. I've observed
this process going from 0.5 seconds up to 10 seconds on a normal relay if the
outbuf has data on it.

Second, because of this concept of different queue for the DESTROY cell, tor
will back and forth between that queue and the normal queue of a circuit.
Remember, that the destroy queue is *not* per circuit but per circuitmux. This
is used by the "cmux-&gt;last_cell_was_destroy" which is set to 1 if the last cell
the cmux handled was a DESTROY or 0 if not.

This has a side effect. Before sending a DESTROY cell, the circuit queue is
cleared out without changing the circuit EWMA priority, in order to make sure
we don't send cells from that point on. However, because we back and forth, the
EWMA policy will pick the right channel based on the overall state of the
circuits (see scheduler_compare_channels()) on it but will not prioritize the
circuit with the DESTROY cell on using that policy. Furthermore, the destroy
cell queue is a FIFO so if 10 DESTROY cells were queued bu th 10th one is
actually on the circuit with the highest priority, we won't process it until
those 9 previous who came in before are flushed.

3. Connection and Channel decoupling is kind of a lie

The connection_t object is bound to be a TCP connection except for DNSPort
which will be a UDP. That object also has a "TLS connection state" (tor_tls_t)
and a channel_tls_t object (chan).

First, it turns out that the connection subsystem will establish the TLS
session and not the channel tls layer. When opening a circuit, it looks like
this:
  channel_connect_for_circuit()
   |- channel_connect()
     |- channel_tls_connect()
       |- connection_or_connect()
         |- connection_tls_start_handshake()

Second, when processing a cell from the connection inbuf in
connection_or_process_cells_from_inbuf(), we'll directly call
channel_tls_handle_cell(). The channel_tls_t layer handles PADDING, VERSIONS,
CERTS, AUTH_CHALLENGE, AUTHENTICATE and NETINFO cells. The other cell types
will be queued on the corresponding circuit queue.

Third, once the TLS session has been established, a VERSIONS cell can be sent
which is done by the connection subsystem with connection_or_send_versions().
But it is bypassing the channel_tls_t layer that processes them and should
write them using channel_tls_write_cell_method(). Futhermore, the channel_tls_t
layer is using the connection layer to send those cells using
connection_or_send_certs_cell() and cie.

My point here is that the channel abstraction is kind of violated in many ways
by either directly calling the TLS channel layer or not using it to send
specific cells that are for the TLS handshake. And also, the TLS state is baked
in the connection subsystem. This means that anyone wanting to implement a new
channel will need to do a major refactoring first which unfortunately leaves
this abstraction kind of pointless. And do not make the mistake to label the
channel subsystem as a "transport layer", it is at best a protocol layer,
connection_t handles transport, not channels.

4. Vanilla scheduler is not really a scheduler.

It turns out that the Vanilla scheduler is not really scheduling things but
rather shoving as much as it could onto the connection outbuf. This ain't ideal
because tor is selecting circuit based on a policy (EWMA) and when the circuit
is selected, we would push on the connection outbuf by either writing as much
as we can on the outbuf or stop at 1000 cells (see MAX_FLUSH_CELLS) which is
512 * 1000 bytes == 0.5MB. One can argue, is it too little to only write 0.5MB
per scheduler tick or actually too much?

So imagine tor flushed 1000 cells everytime it picks a circuit and then moves
on to the next circuit. I'm not sure this is playing well with a relay with
bandwidth limitation for instance. If you have 100 circuits, and 100KB to
spend, you might not want to spend it all on one single circuit?

Also, because this scheduler runs as often as possible, only one channel was
considered everytime. Matt's experiment showed that in practice which means
that a scheduler that is only considering one channel doesn't make good
priority decision because there is none in the first place.

Finally, when trying to bloat the outbuf as much as possible, and for that I'm
not sure how libevent operates, but it leaves the decision of when and what to
flush on the network to the process that handles outbuf. In other words, the
scheduler doesn't actually control when the data is written to the socket so
the scheduling decision aren't necessarly followed through on the transport
layer. This is something the scheduler and connection subsystem should be
thightly connected.

== Part Four - The Conclusion ==

Through this epic journey, we've discovered some issues as well as design
problems. Now the question is what should and can do about it?

In a nutshell, there are a couple of questions we should ask our selfves and
try to answer so we can move forward:

* I believe now that we should seriously discuss the relevance of channels.
  Originally, the idea was good that is providing an abstraction layer for the
  relay to relay handshake and send/process cells related to the protocol. But,
  as of now, they are half doing it.

  There is an important cost in code and maintanance of something that is not
  properly implemented/finished (channel abstraction) and also something that
  is unused. An abstraction implemented only for one thing is not really useful
  except maybe to offer an example for others? But we aren't providing a good
  example right now imo...

  That being said, we can spend time fixing the channel subsystem, trying to
  turn it in a nicer interface, fixing all the issues I've described above (and
  I suspect there might be more) so the cell scheduler can play nicely with
  channels. Or, we could rip them off eliminating lots of code and reducing our
  technical debt. I would like us to think about what we want seriously because
  that channel subsystem is _complicated_ and very few of us fully understands
  it afaict.

  Which would bring us back to (which is btw basically what we have now
  considering the channel queues are useless):

    conn inbuf -&gt; circ queue -&gt; conn outbuf

  If we don't want to get rid of channel, the fixes are non trivial. For
  starter, we have to decide if we want to keep the channel queue or not and if
  yes, we need to almost start from square 1 in terms of testing because we
  would basically introduce a new layer of queuing cells.

* Dealing with the DESTROY cell design issue will require a bit more tricky
  work I think. We must not starve circuit with a DESTROY cell pending to be
  sent else the other side keeps sending data. But we should also not starve
  all the circuits because if we ever need to send a gazillion DESTROY cell in
  priority, we'll make the relay useless (DoS vector).

  The question is, do we trust our EWMA policy to be wise enough to pick the
  circuit in a reasonable amount of time so we can flush the DESTROY cell from
  the circuit queue? Or we really need to bypass or prioritize somehow that
  cell in order to send them asap in order to avoid load on the network because
  the other side of the circuit is still sending?

* In the short term, we should get rid of Vanilla scheduler because it
  complefixies a lot the scheduler code by adding uneeded things to channel_t
  but also bloated the scheduler interface with pointless function pointers for
  instance. And in my opinion, it is not helping performance the way it is done
  right now.

Cheers!
David

-- 
tU3F3BDoF3rwk9y3O+UAixfuPnil7VNkwl0LGe2cdpA=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170908130900</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-09-08 13:09:00-0400</timestampReceived><subject>Re: [tor-dev] Help us build Tails 3.2~alpha1 build reproducibly</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


anonym:
&gt;     git checkout 3.2~alpha1

Oops! That should be:

    git checkout 3.2-alpha1

In other words, the  "~" (tilde) should be a "-" (dash).

Sorry for the inconvenience!
Cheers!


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170908135900</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-09-08 13:59:00-0400</timestampReceived><subject>Re: [tor-dev] [Tails-dev] Help us build Tails 3.2~alpha1 build reproducibly</subject><body>

anonym:
&gt; ### ... and the checksums differ (i.e. reproduction failed).
&gt; [...]
&gt; sudo apt -o APT::Install-Suggests="true" \
&gt; -o APT::Install-Recommends="true" \
&gt; install diffoscope -t stretch-backports

It was reported to us that the above command pulls in ~3500 dependencies (~3.5 GB \
packages, 14 GB disk usage) on a minimal Debian Stretch, including a full GNOME \
desktop environment. Whoops! You will get 80% less dependencies (but still all the \
needed ones!) with this command:

    sudo apt -o APT::Install-Recommends="true" \
             install diffoscope/stretch-backports

Sorry for the inconvenience (again)!
Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170908170800</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2017-09-08 17:08:00-0400</timestampReceived><subject>[tor-dev] Let's build Tails 3.2~alpha2 instead! [Was: Help us build Tails 3.2~alpha1 build reproduci</subject><body>

Hi (yet) again,

It turns out there's a serious problem with Tails 3.2~alpha1 so it actually depends \
on *when* you build it -- the longer you wait, the more it will diverge from the \
"canonical" 3.2 that was built yesterday (in short: I forgot to freeze which APT repo \
snapshot to use when building, so Debian package upgrades will be installed during \
the build as they become available). We are terribly sorry about this if it wasted \
your time! :/

Please try to build 3.2~alpha2 instead! Below you find the adjusted instructions (the \
fixes of the two other "erratas" I sent earlier today are applied already):

# How?

For your convenience all instructions needed to attempt to reproduce
Tails 3.2~alpha2 are included hereafter. However all commands are
adapted for Debian Stretch (and Buster/Sid), so your results may vary if
you run another Linux distribution. Our full build instructions [4]
might help if you are having problems.

## Setup the build environment

Building Tails requires the KVM virtual machine hypervisor to be
available, a minimum of 1 GiB of free RAM and a maximum of 20 GB of
free storage.

### Install dependencies

    sudo apt-get install \
        git \
        rake \
        libvirt-daemon-system \
        dnsmasq-base \
        ebtables \
        qemu-system-x86 \
        qemu-utils \
        vagrant \
        vagrant-libvirt \
        vmdebootstrap &amp;&amp; \
    sudo systemctl restart libvirtd

### If building as a non-root user

(Skip this section if you intend to build Tails as the root user!)

Make sure that the user that is supposed to initiate the build is part
of the relevant groups:

    for group in kvm libvirt libvirt-qemu; do sudo adduser $user $group; done

Then run `newgrp` (or just reboot) to apply the new group memberships
to the session.

## Build Tails 3.2~alpha2

    git clone https://git-tails.immerda.ch/tails
    cd tails
    git checkout 3.2-alpha2
    git submodule update --init
    rake build

# Send us feedback!

No matter how your build attempt turned out we are interested in you
sending us feedback. For that we'll first need some information of the
system you used -- please run these commands in the exact same
terminal session that you ran `rake build` in (e.g. run them right
after `rake build`)!

    sudo apt install apt-show-versions || :
    (
      for f in /etc/issue /proc/cpuinfo
      do
        echo "--- File: ${f} ---"
        cat "${f}"
        echo
      done
      for c in free locale env 'uname -a' '/usr/sbin/libvirtd --version' \
                'qemu-system-x86_64 --version' 'vagrant --version'
      do
        echo "--- Command: ${c} ---"
        eval "${c}"
        echo
      done
      if which apt-show-versions &gt;/dev/null
      then
        echo '--- APT package versions ---'
        apt-show-versions qemu:amd64 linux-image-amd64:amd64 vagrant \
                          libvirt0:amd64
      fi
    ) | bzip2 &gt; system-info.txt.bz2

Please have a look at the generated file with

    bzless system-info.txt.bz2

to make sure it doesn't contain any sensitive information you do not
want to leak in case you send this file to us or make it public!

Next, please follow the instructions below that match your situation!

## If the build failed.

Please open a ticket on our bug tracker [5] with "Category" set to
"Build system" and `system-info.txt.bz2` attached (note that this makes
this file public).

## If the build succeeded ...

Please compute the SHA-512 checksum of the resulting ISO image:

    sha512sum tails-amd64-3.2~alpha2.iso

and compare it to:

    9b4e9e7ee7b2ab6a3fb959d4e4a2db346ae322f9db5409be4d5460156fa1101c23d834a1886c0ce6bef2ed6fe378a7e76f03394c7f651cc4c9a44ba608dda0bc \
tails-amd64-3.2~alpha2.iso

Bonus points if you verify the signed (with: [8]) message containing
the checksum below (note that manually inserted line-wraps marked with
"`\`"). If you run Tails, the verification is very easy! :) [9]

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

    $ sha512sum tails-amd64-3.2~alpha2.iso
    9b4e9e7ee7b2ab6a3fb959d4e4a2db346ae322f9db5409be4d546015 \
    6fa1101c23d834a1886c0ce6bef2ed6fe378a7e76f03394c7f651cc4 \
    c9a44ba608dda0bc  tails-amd64-3.2~alpha2.iso

-----BEGIN PGP SIGNATURE-----

iQJDBAEBCgAtFiEEuiwiL0SsAO2YmTiTmP7GvHUqPbYFAlmyxPUPHHRhaWxzQGJv
dW0ub3JnAAoJEJj+xrx1Kj22qs0P/jD5CMqRmBJUQlGcdLL+x00XOzUx2FZ2OleK
fZGeIFRlawfMlB3e7cDwOVUt3mzThDt1SggKLBqL2WGOEASZY86GETV0LIogjh9W
W6ocAfc+6l4pdYcZPypsZ5ogw6xYJkdmby1CJDxrQ4n2DB/aLH+tR4um4iA7To/c
9Euj5rBV507UHV0ot2SCFs01WWJx64rGMrfPP9OBCpkPNkfluyzIkCE8TyRaGxZw
z1iC5kXjtw1S6CV/mxp0+nD8XKpDDojB/ErG0RaZTC6rFA9X4tMes3LsaFSMXhU2
F70LhMpnONqnjI7sLTwu+Fdg/T3vDBjvepGIxSagVSOiZ0EPs87yqH33qKgidJSr
1/z6CPj/R1p+9aw0cic7kIVOGwXYEYi9waCu2E6JHe/tYw2V5g7D4ZopapjNwRJZ
szaO3iDKJ4RPCD7gwBDqinzJ7jzedVfORnJz1WshtYE0zGFsBUw/Z3RZMhKROKEI
UnxUpQeubIyOwt5MjJJSWHFS90VPaiKxH5pKVWcE/DwkeqY2RDlyxKar8TbWO3fu
ZjqOwY9yKDUtIIpjMqjHbL7uj7viYVlQ2X9w1RaxeFuEckYnf45IoW4DiITXEi7N
s2sOdUOESAU6jhQpC1+mw/zkX9oZG6aEhDQWS2FWjN2+zPnzRhNfe2trZs47KH/y
w+Ux7s9a
=771j
-----END PGP SIGNATURE-----

### ... and the checksums match (i.e. reproduction succeeded).

Congrats for successfully reproducing Tails 3.2~alpha2! Please send an email
to tails-dev at boum.org (public) or tails at boum.org (private) with the
subject "Reproduction of Tails 3.2~alpha2 successful" and attach
`system-info.txt.bz2` to it.

### ... and the checksums differ (i.e. reproduction failed).

Now you are in a great position to help Tails improve its
reproducibility! Please install
`diffoscope` [7] version 83 or higher. If you
run Debian Stretch, that is:

    echo 'deb http://ftp.debian.org/debian stretch-backports main' \
      | sudo tee /etc/apt/sources.list.d/stretch-backports.list &amp;&amp; \
    sudo apt update &amp;&amp; \
    sudo apt -o APT::Install-Recommends="true" \
             install diffoscope/stretch-backports

Then download the official Tails 3.2~alpha2 ISO image [6] and compare it
to yours:

    diffoscope \
        --text diffoscope.txt \
        --html diffoscope.html \
        --max-report-size 262144000 \
        --max-diff-block-lines 10000 \
        --max-diff-input-lines 10000000 \
            path/to/official/tails-amd64-3.2~alpha2.iso \
            path/to/your/tails-amd64-3.2~alpha2.iso &amp;&amp; \
    bzip2 diffoscope.*

Please send an email to tails-dev at boum.org (public) or tails at boum.org
(private) with the subject "Reproduction of Tails 3.2~alpha2 failed" and
attach `system-info.txt.bz2` to it. We also want you attach one (the
smallest!) of `diffoscope.txt.bz2` and `diffoscope.html.bz2` to the email,
but if they are "big" (say &gt;100 KiB) then please don't bomb our mail
inboxes! Instead upload the file to some web-based file-sharing
service (we recommend RiseUp [10]) and include the link(s) in the email.

Thank you very much for your interest and help!

Cheers!
The Tails project

[1] https://mailman.boum.org/pipermail/tails-dev/2017-August/011591.html
[2] https://labs.riseup.net/code/issues/13624
    https://mailman.boum.org/pipermail/tails-dev/2017-March/011297.html
[3] https://tails.boum.org/support/#talk
[4] https://tails.boum.org/contribute/build
[5] https://labs.riseup.net/code/projects/tails/issues/new
[6] http://dl.amnesia.boum.org/tails/alpha/tails-amd64-3.2~alpha2/
    https://mirrors.wikimedia.org/tails/alpha/tails-amd64-3.2~alpha2/
    https://mirrors.kernel.org/tails/alpha/tails-amd64-3.2~alpha2/
[7] https://diffoscope.org/
[8] https://tails.boum.org/tails-signing.key
[9] https://tails.boum.org/doc/encryption_and_privacy/gpgapplet/decrypt_verify/
[10] https://share.riseup.net/

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170912141407</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-09-12 14:14:07-0400</timestampReceived><subject>[tor-dev] Proposal 282: Remove "Named" and "Unnamed" handling from consensus voting</subject><body>

Filename: 282-remove-named-from-consensus.txt
Title: Remove "Named" and "Unnamed" handling from consensus voting
Author: Nick Mathewson
Created: 12-Sep-2017
Status: Open
Target: 0.3.3.x

1. Summary

   Authorities no longer vote for the "Named" and "Unnamed" flags, and we
   have begun to remove the client code that supports them. (See proposal
   235). The next logical step is to remove the special handling from these
   flags from the consensus voting algorithm.  We specify this here.

2. Proposal

   We add a new consensus method, here represented as M, to be allocated
   when this proposal's implementation is merged.

   We specify that the Named and Unnamed flags are only handled
   specially when the negotiated consensus method is earlier than M.  If
   the negotiated method is M or later, then the Named and Unnamed
   flags are handled as if any they were any other consensus flags.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170913021146</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-09-13 02:11:46-0400</timestampReceived><subject>Re: [tor-dev] Proposal 280: Privacy-Preseving Statistics with Privcount in Tor</subject><body>

[Attachment #2 (multipart/signed)]


Hi Karsten and metrics,

&gt; On 13 Sep 2017, at 04:27, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt; 
&gt; Hi Tim,
&gt; 
&gt; unfortunately, nobody from the metrics team can attend today's proposal
&gt; 280 discussion in a few hours.

We turned on meetbot!

The meeting action items are:

	• write a k-of-n secret sharing spec
	• revise prop280 to use k-of-n secret sharing
	• update the proposal to deal with post-submission shared-random-based relay \
subset selection  • increase the noise added in the spec for each subset of relays \
that produces a result  • specify how to estimate sensitivity and expected values \
for each counter, and how to turn that into a set of sigmas  • specify how to \
safely change the set of counters that is collected (or the noise on those counters) \
as new tor versions that support new counters are added to the network (and old \
versions leave)  • specify the privacy budget parameter that we need to turn into \
consensus parameters  • specify how to maintain privacy guarantees when the set of \
statistics changes, probably by reducing accuracy

Here is a log of the meeting:
http://meetbot.debian.net/tor-dev/2017/tor-dev.2017-09-13-00.16.html

&gt; That's why we decided to provide some written feedback here.
&gt; 
&gt; We didn't find anything problematic in the proposal from the view of Tor
&gt; metrics.
&gt; 
&gt; This is due to the narrow scope covering only the communication protocol
&gt; between tally servers and relays, as we understand it.
&gt; 
&gt; All topics related to deriving counts, calculating final results, and
&gt; anything else that could affect currently running metrics code are
&gt; explicitly excluded or not mentioned.

We mentioned a few of these topics in the meeting.

In particular, we talked about splitting relays into multiple subsets for
fault-tolerance. This would give us one result per counter per subset.

We'd appreciate your feedback on these parts of the meeting.

&gt; If we misunderstood the scope and there is actually a part that covers
&gt; current or future metrics code, please let us know, and we'll check that
&gt; again.

We plan to write these specs separately.
We will also make updates to the current prop280 spec.

&gt; Thanks for working on privacy-preserving statistics in Tor!

Looking forward to working with you on this.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZuJPiAAoJEHQNnjkCUnKiz3oP+wZEyrDc+c7RhKEBnDG3ETHs
2Msd3jEBWKOzrPR1sekO5F1FyKMb1Z7EXCu5ozUoihjBQZnc6f6lrMTS9ZwYi6kM
jRSzd4xva3TGXC4MjKoPm9MQh58EtLl7hHMPyyYPBXMuobFvoUU/STxwcO1Kt5eG
ZwunKKapnXlJbsAfegyzMt3vboTSGG2l5tF/IhdI61M9+Yh8CJRI4GY6dK/6O+05
DLv/jmR0DZ7p9q+ISi6QLDBX+CXaP1fuztnSvbxK9nsH3Wb0PMunnNoJvGgULxKO
KBlYc/BDDamHO4UKEs09Qb+XyRKFSjnlA/sTumR//4t1+oPO7xAG3b+HEigCsmQ7
Ia5hxtehwZalXGE23NKvlgR67DaO/1+uV1/82JEDNrxGUqyM1n0sK/IV1EdqaWaI
wnEBQLKScG4Blc7Z9n++PTePD1iIltVQJOb/qVLW6VYGSPpSLDUMgNiSZTNwmt73
Zc53e+GKLUO7FLb4oExGG25uWq0iprP05/zE9ODGYYeGqmPzPc0KSGEyOVb4rDXV
Md6wpzv0fp2mMGRmDrKoV8bKl+5cSa6SEyyR9qwEEVB2APj8GEemceDC/aGwGnvx
HuBh2CAn+fcgoyu9SRicziTN1nvzA85rqPiHme6/seFVgRyMornRZHg2e/Wh3S8+
IUMLnXmgJQSaLGwiaZas
=JnbA
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170915143600</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-09-15 14:36:00-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.3.0, metrics-lib 2.1.0, Onionoo 4.1-1.5.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

three new releases are available:

     https://dist.torproject.org/collector/1.3.0/
     https://dist.torproject.org/metrics-lib/2.1.0/
     https://dist.torproject.org/onionoo/4.1-1.5.0/

These releases upgrade all projects to use Java 8.
A few issues and improvements come along and can be found in the
change-logs [0], [1], [2]. 

Please direct comments and questions to the metrics-team mailing list [3].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.3.0
[1] https://gitweb.torproject.org/metrics-lib.git/tree/CHANGELOG.md?h=metrics-lib-2.1.0
[2] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.1-1.5.0
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170917235839</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-09-17 23:58:39-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

On Sun, Sep 17, 2017 at 07:32:13PM -0400, Roger Dingledine wrote:
&gt; On Wed, Aug 09, 2017 at 11:36:27PM -0400, Roger Dingledine wrote:
&gt; &gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt; &gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt; &gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt; &gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt; &gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt; &gt; all show a big increase in sent bytes starting at the end of July.
&gt; &gt; 
&gt; &gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt; &gt; in the last two weeks.
&gt; &gt; 
&gt; &gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt; &gt; going back to the old rate.
&gt; &gt; 
&gt; &gt; I would assume it's outgoing directory stuff, since that's most of what
&gt; &gt; dir auths do.
&gt; &gt; 
&gt; &gt; Any guesses?
&gt; 
&gt; Well, whatever it was, it settled out -- back to normal -- once August
&gt; ended.
&gt; 
&gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31

The start and end of the doubling of dirauth bandwidth coincide with a
temporary doubling or tripling of reported users from the Netherlands:

https://people.torproject.org/~dcf/metrics-country.html?start=2017-07-01&amp;end=2017-09-30&amp;country=nl

There is a somewhat similar pattern in the Seychelles, Lithuania, and
Romania, all of which had unexplained increases at the same time as the
Netherlands.

https://lists.torproject.org/pipermail/metrics-team/2017-August/000428.html
https://people.torproject.org/~dcf/metrics-country.html?start=2017-07-01&amp;end=2017-09-30&amp;country=sc
https://people.torproject.org/~dcf/metrics-country.html?start=2017-07-01&amp;end=2017-09-30&amp;country=lt
https://people.torproject.org/~dcf/metrics-country.html?start=2017-07-01&amp;end=2017-09-30&amp;country=ro
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170918070344</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-09-18 07:03:44-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


On Sun, 17 Sep 2017 21:04:28 -0400
Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; I think the first step here is to instrument relays to figure out what
&gt; fraction of their cryptography is relay cell cryptography: this could
&gt; tells us what slowdown we should expect.  (It _should_ be about a
&gt; third of our current cell crypto load, but surprises have certainly
&gt; been known to happen!)

I'd also argue that instrumenting an high traffic client is important
(if only so that there aren't unpleasant surprises later in the form of
the clients hosting spacebookgopheri.onion or whatever exploding).

There was some discussion about obtaining profiler output for this
particular case, but AFAIK nothing really happened[0].

&gt; The current performance we have is much faster than 13 cpb -- we're at
&gt; approximately one AES, plus one third of a SHA1.  (The "one third" is
&gt; because only clients and exits do the SHA1 step.)

I wonder how many of the relays have support for hardware assisted
SHA.  (nb: I don't have access to ARMv8, Ryzen or a sufficiently new
Intel system, so I don't know how good the implementations are)

Regards,

--=20
Yawning Angel

[0]: And depending on the sort of traffic the HS is serving, this
may/will be dominated by public key cryptography...

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170918173000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-09-18 17:30:00-0400</timestampReceived><subject>Re: [tor-dev] Auto-senescence and/or CW penalty for a less outdated tor network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; 1) Auto-senescence
&gt;&gt; -------------------
&gt; 
&gt; I think automatic timed shutdown can be unhelpful or dangerous:

Yes it reduces the number of options once such a feature would be
implemented and deployed.

&gt; * what if we need it earlier due to a severe bug or mandatory feature?

This should not be an issue since that auto-shutdown only mandates an
upper limit but does not stop you from removing a relay before that
limit has been reached.

&gt; * what if it isn't needed, and the relay version is fine?

Yes this can be an issue, but if you say "every relay that runs versions
past its eol date" [1] is "not fine" then the auto-shutdown date can be
specified with a very high likelihood to a date that is past the eol
date because you have an estimate of how long you plan to support it (3y
for LTS).

I'm less concerned about auto-shutdown for tor clients since most tor
users might be using TBB with auto updates and it would help you having
to do things like prop266.

[1]
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases

&gt;&gt; 2) consensus weight penalty for outdated relays
&gt;&gt; -----------------------------------------------
&gt; 
&gt; I can't see much point in this: if the relays are insecure, they
&gt; should be eliminated. If not, they should be used.

I'm happy with "insecure -&gt; should be removed".
With "outdated" I meant "not running a recommended version" I'm not sure
if that is the same as 'insecure'.

A CW penalty would be a strong incentive for relay operators to keep
their relays up to date (to a recommended version).
This would likely reduce the number of relays running not-recommended
versions because currently the incentive is inverted (never
restart/update your tor instance - uptime!).
..but it would also affect testers running master.


&gt;&gt; 3) update tor dir auth code to reject old tor releases (not include them
&gt;&gt; in consensus)
&gt;&gt; -------------------------------------------------------------------------

&gt; In the past, we've excluded relay versions when they don't have a
&gt; required feature. 

Does this step (excluding specific versions) require a code change or a
dir auth configuration change? (like it does for changing recommended
versions list)
If it does: Maybe it could be turned into a configurable option for dir
auths like recommended version.

(3) will not stop old relays from contacting dir auths.


&gt; We have a ticket to make a plan to kill off old client versions:
&gt; https://trac.torproject.org/projects/tor/ticket/15940
&gt; But there's no equivalent ticket for relay versions.



-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170919195109</emailId><senderName>flipchan</senderName><senderEmail>flipchan@riseup.net</senderEmail><timestampReceived>2017-09-19 19:51:09-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 80, Issue 10</subject><body>

[Attachment #2 (multipart/alternative)]


I emailed someone that runned an out of date version of tor yesterday and maybe it's \
more efficient to have an auto mailer to remind ppl to update

On September 19, 2017 2:00:09 PM GMT+02:00, tor-dev-request@lists.torproject.org \
wrote:
&gt; Send tor-dev mailing list submissions to
&gt; 	tor-dev@lists.torproject.org
&gt; 
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt; 	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt; 	tor-dev-request@lists.torproject.org
&gt; 
&gt; You can reach the person managing the list at
&gt; 	tor-dev-owner@lists.torproject.org
&gt; 
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt; 
&gt; 
&gt; Today's Topics:
&gt; 
&gt; 1. Re: Auto-senescence and/or CW penalty for a less outdated tor
&gt; network? (nusenu)
&gt; 
&gt; 
&gt; ----------------------------------------------------------------------
&gt; 
&gt; Message: 1
&gt; Date: Mon, 18 Sep 2017 17:30:00 +0000
&gt; From: nusenu &lt;nusenu-lists@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Auto-senescence and/or CW penalty for a less
&gt; 	outdated tor network?
&gt; Message-ID: &lt;6aaa7727-7013-2ff8-3eb1-ac9b752b5981@riseup.net&gt;
&gt; Content-Type: text/plain; charset="windows-1252"
&gt; 
&gt; &gt; &gt; 1) Auto-senescence
&gt; &gt; &gt; -------------------
&gt; &gt; 
&gt; &gt; I think automatic timed shutdown can be unhelpful or dangerous:
&gt; 
&gt; Yes it reduces the number of options once such a feature would be
&gt; implemented and deployed.
&gt; 
&gt; &gt; * what if we need it earlier due to a severe bug or mandatory
&gt; feature?
&gt; 
&gt; This should not be an issue since that auto-shutdown only mandates an
&gt; upper limit but does not stop you from removing a relay before that
&gt; limit has been reached.
&gt; 
&gt; &gt; * what if it isn't needed, and the relay version is fine?
&gt; 
&gt; Yes this can be an issue, but if you say "every relay that runs
&gt; versions
&gt; past its eol date" [1] is "not fine" then the auto-shutdown date can be
&gt; specified with a very high likelihood to a date that is past the eol
&gt; date because you have an estimate of how long you plan to support it
&gt; (3y
&gt; for LTS).
&gt; 
&gt; I'm less concerned about auto-shutdown for tor clients since most tor
&gt; users might be using TBB with auto updates and it would help you having
&gt; to do things like prop266.
&gt; 
&gt; [1]
&gt; https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases
&gt; 
&gt; &gt; &gt; 2) consensus weight penalty for outdated relays
&gt; &gt; &gt; -----------------------------------------------
&gt; &gt; 
&gt; &gt; I can't see much point in this: if the relays are insecure, they
&gt; &gt; should be eliminated. If not, they should be used.
&gt; 
&gt; I'm happy with "insecure -&gt; should be removed".
&gt; With "outdated" I meant "not running a recommended version" I'm not
&gt; sure
&gt; if that is the same as 'insecure'.
&gt; 
&gt; A CW penalty would be a strong incentive for relay operators to keep
&gt; their relays up to date (to a recommended version).
&gt; This would likely reduce the number of relays running not-recommended
&gt; versions because currently the incentive is inverted (never
&gt; restart/update your tor instance - uptime!).
&gt; ..but it would also affect testers running master.
&gt; 
&gt; 
&gt; &gt; &gt; 3) update tor dir auth code to reject old tor releases (not include
&gt; them
&gt; &gt; &gt; in consensus)
&gt; &gt; &gt; 
&gt; -------------------------------------------------------------------------
&gt; 
&gt; &gt; In the past, we've excluded relay versions when they don't have a
&gt; &gt; required feature. 
&gt; 
&gt; Does this step (excluding specific versions) require a code change or a
&gt; dir auth configuration change? (like it does for changing recommended
&gt; versions list)
&gt; If it does: Maybe it could be turned into a configurable option for dir
&gt; auths like recommended version.
&gt; 
&gt; (3) will not stop old relays from contacting dir auths.
&gt; 
&gt; 
&gt; &gt; We have a ticket to make a plan to kill off old client versions:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/15940
&gt; &gt; But there's no equivalent ticket for relay versions.
&gt; 
&gt; 
&gt; 
&gt; -- 
&gt; https://mastodon.social/@nusenu
&gt; https://twitter.com/nusenu_
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 801 bytes
&gt; Desc: OpenPGP digital signature
&gt; URL:
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20170918/62770e33/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Subject: Digest Footer
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; End of tor-dev Digest, Vol 80, Issue 10
&gt; ***************************************

-- 
Take Care Sincerely flipchan layerprox dev


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;I emailed someone that runned an out of date version of tor \
yesterday and maybe it's more efficient to have an auto mailer to remind ppl to \
update&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On September 19, 2017 2:00:09 PM GMT+02:00, \
tor-dev-request@lists.torproject.org wrote:&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); \
padding-left: 1ex;"&gt; &lt;pre class="k9mail"&gt;Send tor-dev mailing list submissions to&lt;br \
/&gt; tor-dev@lists.torproject.org&lt;br /&gt;&lt;br /&gt;To subscribe or unsubscribe via the World \
Wide Web, visit&lt;br /&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
/&gt;or, via email, send a message with subject or body 'help' to&lt;br /&gt; \
tor-dev-request@lists.torproject.org&lt;br /&gt;&lt;br /&gt;You can reach the person managing the \
list at&lt;br /&gt; tor-dev-owner@lists.torproject.org&lt;br /&gt;&lt;br /&gt;When replying, please \
edit your Subject line so it is more specific&lt;br /&gt;than "Re: Contents of tor-dev \
digest..."&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Today's Topics:&lt;br /&gt;&lt;br /&gt;   1. Re: Auto-senescence \
and/or CW penalty for a less outdated tor&lt;br /&gt;      network? (nusenu)&lt;br /&gt;&lt;br /&gt;&lt;br \
/&gt;&lt;hr /&gt;&lt;br /&gt;&lt;br /&gt;Message: 1&lt;br /&gt;Date: Mon, 18 Sep 2017 17:30:00 +0000&lt;br /&gt;From: \
nusenu &lt;nusenu-lists@riseup.net&gt;&lt;br /&gt;To: tor-dev@lists.torproject.org&lt;br \
/&gt;Subject: Re: [tor-dev] Auto-senescence and/or CW penalty for a less&lt;br /&gt; outdated \
tor network?&lt;br /&gt;Message-ID: \
&lt;6aaa7727-7013-2ff8-3eb1-ac9b752b5981@riseup.net&gt;&lt;br /&gt;Content-Type: \
text/plain; charset="windows-1252"&lt;br /&gt;&lt;br /&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; \
padding-left: 1ex;"&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; \
border-left: 1px solid #ad7fa8; padding-left: 1ex;"&gt; 1) Auto-senescence&lt;br /&gt; \
-------------------&lt;br /&gt;&lt;/blockquote&gt; &lt;br /&gt; I think automatic timed shutdown can be \
unhelpful or dangerous:&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Yes it reduces the number of options \
once such a feature would be&lt;br /&gt;implemented and deployed.&lt;br /&gt;&lt;br /&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; \
padding-left: 1ex;"&gt; * what if we need it earlier due to a severe bug or mandatory \
feature?&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;This should not be an issue since that auto-shutdown \
only mandates an&lt;br /&gt;upper limit but does not stop you from removing a relay before \
that&lt;br /&gt;limit has been reached.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: \
1ex;"&gt; * what if it isn't needed, and the relay version is fine?&lt;br \
/&gt;&lt;/blockquote&gt;&lt;br /&gt;Yes this can be an issue, but if you say "every relay that \
runs versions&lt;br /&gt;past its eol date" [1] is "not fine" then the \
auto-shutdown date can be&lt;br /&gt;specified with a very high likelihood to a date that \
is past the eol&lt;br /&gt;date because you have an estimate of how long you plan to \
support it (3y&lt;br /&gt;for LTS).&lt;br /&gt;&lt;br /&gt;I'm less concerned about auto-shutdown for \
tor clients since most tor&lt;br /&gt;users might be using TBB with auto updates and it \
would help you having&lt;br /&gt;to do things like prop266.&lt;br /&gt;&lt;br /&gt;[1]&lt;br /&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorRelea \
ses"&gt;https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; \
border-left: 1px solid #729fcf; padding-left: 1ex;"&gt;&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: \
1ex;"&gt; 2) consensus weight penalty for outdated relays&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;&lt;/blockquote&gt; \
&lt;br /&gt; I can't see much point in this: if the relays are insecure, they&lt;br /&gt; should \
be eliminated. If not, they should be used.&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;I'm happy with \
"insecure -&gt; should be removed".&lt;br /&gt;With "outdated" I meant \
"not running a recommended version" I'm not sure&lt;br /&gt;if that is the same \
as 'insecure'.&lt;br /&gt;&lt;br /&gt;A CW penalty would be a strong incentive for relay \
operators to keep&lt;br /&gt;their relays up to date (to a recommended version).&lt;br /&gt;This \
would likely reduce the number of relays running not-recommended&lt;br /&gt;versions \
because currently the incentive is inverted (never&lt;br /&gt;restart/update your tor \
instance - uptime!).&lt;br /&gt;..but it would also affect testers running master.&lt;br /&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; \
border-left: 1px solid #729fcf; padding-left: 1ex;"&gt;&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: \
1ex;"&gt; 3) update tor dir auth code to reject old tor releases (not include them&lt;br /&gt; \
in consensus)&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; \
padding-left: 1ex;"&gt; In the past, we've excluded relay versions when they don't have \
a&lt;br /&gt; required feature. &lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Does this step (excluding specific \
versions) require a code change or a&lt;br /&gt;dir auth configuration change? (like it \
does for changing recommended&lt;br /&gt;versions list)&lt;br /&gt;If it does: Maybe it could be \
turned into a configurable option for dir&lt;br /&gt;auths like recommended version.&lt;br \
/&gt;&lt;br /&gt;(3) will not stop old relays from contacting dir auths.&lt;br /&gt;&lt;br /&gt;&lt;br \
/&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px \
solid #729fcf; padding-left: 1ex;"&gt; We have a ticket to make a plan to kill off old \
client versions:&lt;br /&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/15940"&gt;https://trac.torproject.org/projects/tor/ticket/15940&lt;/a&gt;&lt;br \
/&gt; But there's no equivalent ticket for relay versions.&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br \
                /&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;
-- &lt;br&gt;
Take Care Sincerely flipchan layerprox dev&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170920104256</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-09-20 10:42:56-0400</timestampReceived><subject>Re: [tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt;&gt; On 20 Sep 2017, at 00:44, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; Legacy RENDEZVOUS1 cells are bigger than the prop224 ones. The prop224
&gt;&gt; spec suggests we pad the new cells so that they look similar in size to
&gt;&gt; the legacy ones.
&gt;&gt; 
&gt;&gt; ...
&gt;&gt; 
&gt;&gt; The suggestion is to pad the prop224 cells to 168 bytes using random data.
&gt;&gt; 
&gt;&gt; Would that work? My main question is whether the g^y part of the legacy
&gt;&gt; cell has any distinguishers that could distinguish it from random data.
&gt;&gt; It's encoded using OpenSSL's BN_bn2bin() and it's a 1024 bit DH public
&gt;&gt; key. Are there any algebraic or openssl structure distinguishers we
&gt;&gt; should be worrying about, or is random data sufficient to mask it out?
&gt;
&gt; What's the threat model here?
&gt;
&gt; I ask because regardless of whether the RENDEZVOUS1 cell plaintext is
&gt; distinguishable between v2 and v3, the rend point can distinguish v2 and
&gt; v3 using this one neat trick:
&gt; * if the service extends using TAP, the protocol is v2
&gt; * if the service extends using ntor, the protocol is v3
&gt;

Thanks for the discussion and research, Ian and teor! 

I summarized the findings here: https://trac.torproject.org/projects/tor/ticket/23420#comment:5

Not sure what's the right approach here.

Perhaps I'm fine with doing nothing at this point, and figuring this out
in the future if v4 ever comes.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170810033627</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-08-10 03:36:27-0400</timestampReceived><subject>[tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
all show a big increase in sent bytes starting at the end of July.

It isn't growth in Tor users, since those have stayed relatively flat
in the last two weeks.

And the new rate seems to be the new normal -- it's showing no signs of
going back to the old rate.

I would assume it's outgoing directory stuff, since that's most of what
dir auths do.

Any guesses?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170819041116</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-08-19 04:11:16-0400</timestampReceived><subject>[tor-dev] PQ crypto updates</subject><body>

If I understand correctly, DJB describes how NTRU-Prime is more robust against \
certain attack classes that Ring-LWE is more prone to:

https://twitter.com/hashbreaker/status/880086983057526784

***

About two months later DJB releases a streamlined version of NTRU-Prime that is \
faster, safer and uses less resources than the latest version of New Hope while (wait \
for it...) completely eliminating decryption failures !:

https://twitter.com/hashbreaker/status/898048057849380864
https://twitter.com/hashbreaker/status/898048506681860096
https://twitter.com/hashbreaker/status/898048760009420801
https://twitter.com/hashbreaker/status/898391210456489984


***

Boom headshot! AEZ is dead in the water post quantum:

Paper name: Quantum Key-Recovery on full AEZ

https://eprint.iacr.org/2017/767.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170819065529</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-08-19 06:55:29-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, 19 Aug 2017 04:11:16 -0000
bancfc@openmailbox.org wrote:
&gt; Boom headshot! AEZ is dead in the water post quantum:
&gt; 
&gt; Paper name: Quantum Key-Recovery on full AEZ
&gt; 
&gt; https://eprint.iacr.org/2017/767.pdf

...  I'm not seeing your point.  Even prior to that paper, AEZ wasn't
thought to be quantum resistant in anyway shape or form, and providing
quantum resistance wasn't part of the design goals of the primitive, or
really why it was being considered at one point for use in Tor.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820163217</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-08-20 16:32:17-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

&gt; Date: Sat, 19 Aug 2017 06:55:29 +0000
&gt; From: Yawning Angel &lt;yawning@schwanenlied.me&gt;
&gt; 
&gt; On Sat, 19 Aug 2017 04:11:16 -0000
&gt; bancfc@openmailbox.org wrote:
&gt; &gt; Boom headshot! AEZ is dead in the water post quantum:
&gt; &gt; 
&gt; &gt; Paper name: Quantum Key-Recovery on full AEZ
&gt; &gt; 
&gt; &gt; https://eprint.iacr.org/2017/767.pdf
&gt; 
&gt; ...  I'm not seeing your point.  Even prior to that paper, AEZ wasn't
&gt; thought to be quantum resistant in anyway shape or form, and providing
&gt; quantum resistance wasn't part of the design goals of the primitive, or
&gt; really why it was being considered at one point for use in Tor.

I would expect AEZ to have essentially the same post-quantum security
as, e.g., AES or any other symmetric crypto -- square root speedup by
Grover.

However, this paper is not about the conventional notion of
post-quantum security -- what is the cost, to an adversary with large
a quantum computer, of breaking ordinary users of the cryptosystem? --
but a radically different notion of security for users who
inexplicably choose evaluate AEZ in a quantum superposition of inputs
and reveal that superposition to an adversary.

It is not surprising that when users abuse their crypto primitives in
an astoundingly bizarre way, to reveal quantum superpositions of
outputs, the original security claims of the classical crypto
primitives go flying out the window!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170820194532</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-08-20 19:45:32-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


On Sun, 20 Aug 2017 16:32:17 +0000
Taylor R Campbell &lt;campbell+tor-dev@mumble.net&gt; wrote:
&gt; &gt; ...  I'm not seeing your point.  Even prior to that paper, AEZ
&gt; &gt; wasn't thought to be quantum resistant in anyway shape or form, and
&gt; &gt; providing quantum resistance wasn't part of the design goals of the
&gt; &gt; primitive, or really why it was being considered at one point for
&gt; &gt; use in Tor.  
&gt; 
&gt; I would expect AEZ to have essentially the same post-quantum security
&gt; as, e.g., AES or any other symmetric crypto -- square root speedup by
&gt; Grover.

Yes and?

My point was that quantum speedups that existed prior to the
paper alone, were sufficient to render the primitive insecure in a
post quantum setting.

Something that's broken being more broken is non-interesting, in
particular when the impetus for even considering the something (as is
the case for AEZ and Tor), had nothing to do with PQ cryptography in the
first place.

&gt; However, this paper is not about the conventional notion of
&gt; post-quantum security -- what is the cost, to an adversary with large
&gt; a quantum computer, of breaking ordinary users of the cryptosystem? --
&gt; but a radically different notion of security for users who
&gt; inexplicably choose evaluate AEZ in a quantum superposition of inputs
&gt; and reveal that superposition to an adversary.

Believe it or not, I did read the paper.

&gt; It is not surprising that when users abuse their crypto primitives in
&gt; an astoundingly bizarre way, to reveal quantum superpositions of
&gt; outputs, the original security claims of the classical crypto
&gt; primitives go flying out the window!

I'm having trouble parsing that, perhaps my English is failing me.

Ultimately none of this matters because Prop. 261 is dead in the
water.  Assuming people want the new cell crypto to be both fragile and
to resist tagging attacks, Farfalle may be a better choice, assuming
there's a Keccak-p parameterization such that it gives adequate
performance.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170917104800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-09-17 10:48:00-0400</timestampReceived><subject>[tor-dev] Auto-senescence and/or CW penalty for a less outdated tor network?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

tl;dr: ideas to reduce the cw fraction that outdated relays make up of
the tor network

This email can be somewhat summarized by these three polls:
https://twitter.com/nusenu_/status/909356846900801536
https://twitter.com/nusenu_/status/909359701908971520
https://twitter.com/nusenu_/status/909361044988071936

This email was sparked by a recent thread on twitter.

As of 2017-09-16 more than 27% CW fraction of the tor network (&gt;2500
relays) run a version of tor that is not recommended by tor's directory
authorities [2].
More than 8% CW fraction (&gt;1100 relays) even run tor branches that
reached end-of-life and are no longer maintained.

So if we agree that 27% CW fraction is to much, we could aim at reducing
that fraction within the tor network. Here are a few ideas.

1) Auto-senescence
-------------------

Alfie John suggested [1]:
 &gt; automatic shutdown after its version is too old

as used in zcash (the tor snap from Chad Miller does auto-shutdown
already today), Moritz replied:

&gt; Tor already has this mechanism in the form of recommended/required versions in consensus

I looked into that [3] but this is about tor _protocols_ (not versions)
and is probably better suitable for avoiding compatibility issues within
the tor network as multiple protocols coexist but you can not use that
to remove specific tor versions because many versions share the same
protocol set [4].

[1] https://twitter.com/alfiedotwtf/status/906310842672603136
[2] https://consensus-health.torproject.org/#recommendedversions
[3]
https://gitweb.torproject.org/torspec.git/tree/proposals/264-subprotocol-versions.txt#n133
[4] https://gist.github.com/nusenu/1302a04b26dac8e2ef838117f5f3fd2b

So back to Alfie's suggestion. If tor should shutdown when 'too old' we
have to know what 'too old' is.

To come up with a timespan for 'too old' I looked into 61 currently used
tor versions that are no longer recommended by dirauths.
I measured the time between release date (as mentioned in the changelog)
and the last consensus where the given version was listed as a
recommended relay tor version [5], but these graphs show the
"recommended" lifespan of releases before the new support policy [6]
with shorter release cycles for "regular" releases has been introduced.

[5] https://twitter.com/nusenu_/status/909355193434853376
[6]
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases

So instead of of using this historical data we could simply follow the
support policy.

regular release:
Auto-shutdown 18 months (=9+grace period) after the branch became stable.

LTS relase:
Auto-shutdown 4 years (=3+grace period) after the branch became stable.

Dates would be hardcoded and do not require relays to contact dirauths.
So old relays will not but any load on dir auths and fallbackdirs
everytime they start.

Lets simulate these timespans for tor 0.2.4 and 0.2.5 (and lets assume
they are LTS releases)

- tor 0.2.4 relays - if they had such a logic - would shutdown on
2017-12-11 (eol date was 2017-08-01)
- tor 0.2.5 relays whould shutdown on 2018-10-24 (eol date is 2018-05-01)
(not mentioning 0.2.6/7 here)
- tor 0.2.9 relays would shutdown on 2020-12-19 (eol date is 2020-01-01)

You could add a torrc option to allow operators (and package
maintainers) to opt-out of auto-shutdown.


There is no doubt that any mechanism to disable old relays
_automatically_ and by _default_ would shrink the tor network (compared
to not having that), so having a good answer for
"What is an acceptable CW fraction for outdated tor versions on the
network?"
would be important, but since the reasons for removing versions from the
recommended list are very different the recommended datapoint might not
be enough.


2) consensus weight penalty for outdated relays
-----------------------------------------------

Instead of (or additionally to) telling relays to not upload descriptors
(complete removal) you could _automatically_
reduce/cap their consensus weight on the dirauth side if they run
- unsupported branches (harsher penalty)
- run not-recommended tor releases over a long time (less harsh penalty)

(The distinction between unsupported branches and not-recommended is
currently not available as consensus information.)

This approach makes the recommended version list a more critical
consensus item and as you know this is not always managed ideally:
- new releases not added to the list in a timely manner -&gt; operators
upgrading timely get warnings
- old releases not removed timely or before deb.torproject.org provided
new releases


3) update tor dir auth code to reject old tor releases (not include them
in consensus)
-------------------------------------------------------------------------

As soon as a tor directory operator updates to a new release the dirauth
would no longer vote for specific tor versions (I guess this is the
current mostly manual approach).

Another important aspect is the practical reality in current package
repositories, but I simply assume they will follow LTS releases and are
fine with the 4 years (3+grace period) lifespan.

regards,
nusenu




-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170919144446</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-09-19 14:44:46-0400</timestampReceived><subject>[tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

Hello Ian, (and other cryptographers on the list)

here is a quick question which you might be able to answer super fast:

Legacy RENDEZVOUS1 cells are bigger than the prop224 ones. The prop224
spec suggests we pad the new cells so that they look similar in size to
the legacy ones.

Here is how the legacy ones look like:

       RC       Rendezvous cookie  [20 octets]
       g^y      Diffie-Hellman     [128 octets]
       KH       Handshake digest   [20 octets]

Here is how the prop224 ones look like:

       RENDEZVOUS_COOKIE          [20 bytes]
       HANDSHAKE_INFO             [64 bytes]

The suggestion is to pad the prop224 cells to 168 bytes using random data.

Would that work? My main question is whether the g^y part of the legacy
cell has any distinguishers that could distinguish it from random data.
It's encoded using OpenSSL's BN_bn2bin() and it's a 1024 bit DH public
key. Are there any algebraic or openssl structure distinguishers we
should be worrying about, or is random data sufficient to mask it out?

Thanks!!! :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170920001354</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-09-20 00:13:54-0400</timestampReceived><subject>Re: [tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

Resending from a subscribed address.

On Tue, Sep 19, 2017 at 05:44:46PM +0300, George Kadianakis wrote:
&gt; Hello Ian, (and other cryptographers on the list)
&gt; 
&gt; here is a quick question which you might be able to answer super fast:
&gt; 
&gt; Legacy RENDEZVOUS1 cells are bigger than the prop224 ones. The prop224
&gt; spec suggests we pad the new cells so that they look similar in size to
&gt; the legacy ones.
&gt; 
&gt; Here is how the legacy ones look like:
&gt; 
&gt;        RC       Rendezvous cookie  [20 octets]
&gt;        g^y      Diffie-Hellman     [128 octets]
&gt;        KH       Handshake digest   [20 octets]
&gt; 
&gt; Here is how the prop224 ones look like:
&gt; 
&gt;        RENDEZVOUS_COOKIE          [20 bytes]
&gt;        HANDSHAKE_INFO             [64 bytes]
&gt; 
&gt; The suggestion is to pad the prop224 cells to 168 bytes using random data.
&gt; 
&gt; Would that work? My main question is whether the g^y part of the legacy
&gt; cell has any distinguishers that could distinguish it from random data.
&gt; It's encoded using OpenSSL's BN_bn2bin() and it's a 1024 bit DH public
&gt; key. Are there any algebraic or openssl structure distinguishers we
&gt; should be worrying about, or is random data sufficient to mask it out?
&gt; 
&gt; Thanks!!! :)

Is your goal that someone who sees the *plaintext* of that cell won't be
able to tell if it's a legacy RENDEZVOUS1 cell or a new one?  If so,
life is a bit complicated, since the g^y field will always be in the
prime-order subgroup.  (Note: I'm not actually 100% sure Tor uses a
generator of the prime-order subgroup for g in this part of the spec.
But it should have, and so hopefully did.)

If HANDSHAKE_INFO || PADDING_64 (the latter being the first 64 bytes of
the padding) is _not_ in the prime-order subgroup, the observer will be
sure it's a prop224 cell.  If it _is_, the observer can't tell.

If that's undesirable, you could always insist that PADDING_64 be chosen
such that HANDSHAKE_INFO || PADDING_64 _is_ in the prime-order subgroup.
Raise it to the power of the prime order q to check; if the result is
1, you're good.  You'll need to try on average (p-1)/q random values of
PADDING_64 before you get a good one.  (NOTE: *NOT* CONSTANT TIME.)  If
p = 2q+1, that's just 2, so not *terrible*, but 2 1024-bit modexps might
still be annoying.  If for some reason p is a DSA modululus or something
bizarre like that, life is much more annoying.  (I hope it's not.)  This
is all assuming p is of the form 2^1024 - (some number at most say
2^960), so that HANDSHAKE_INFO || PADDING_64 won't be larger than p
itself, which would be another problem.

To be sure, what are the g and p values used in this particular
Diffie-Hellman?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170922170036</emailId><senderName>Patrick Durusau</senderName><senderEmail>patrick@durusau.net</senderEmail><timestampReceived>2017-09-22 17:00:36-0400</timestampReceived><subject>[tor-dev] Does "ar: `u' modifier ignored since `D' is the default (see `U')" warning qualify as a bu</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

Running Ubuntu 16.04, using:
https://gitweb.torproject.org/tor.git/tag/?h=tor-0.3.2.1-alpha

Following:
https://lists.torproject.org/pipermail/tor-project/2017-September/001449.html
and I get this warning 17 times from make:

ar: `u' modifier ignored since `D' is the default (see `U')

I traced this back to line 187 in Makefile.in

ARFLAGS = cru

Correcting to:

ARFLAGS = cr

src compiles sans the warnings.

Is that a bug meriting a ticket?

My primary strength is documentation and making mistakes in following
it. ;-)

Hope everyone is looking forward to a great weekend!

Patrick

-- 
Patrick Durusau
patrick@durusau.net
Technical Advisory Board, OASIS (TAB)
Editor, OpenDocument Format TC (OASIS), Project Editor ISO/IEC 26300
Co-Editor, ISO/IEC 13250-1, 13250-5 (Topic Maps)

Another Word For It (blog): http://tm.durusau.net
Homepage: http://www.durusau.net
Twitter: patrickDurusau 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170927202644</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-09-27 20:26:44-0400</timestampReceived><subject>[tor-dev] User perception of the prop224 domain format</subject><body>

We recently ran a survey on the usability of Tor and onion services [0].
I had a closer look at how our respondents perceive the prop224 domain
format and wanted to share some early insights.  The original survey
question was:

&gt; The Tor Project is currently working on the next generation of onion
&gt; services.  The new onion domain format will consist of 52 characters,
&gt; for example:
&gt; a1uik0w1gmfq3i5ievxdm9ceu27e88g6o7pe0rffdw9jmntwkdsd.onion
&gt; Do you expect this to change your browsing habits?

591 users answered this question.  95 (16%) selected that prop224
domains will change their habits while the remaining 496 (84%) selected
that their habits won't be affected.

Respondents who believe that their habits will change (16%) gave the
following reasons:

- Several users memorise a number of onion domains -- most prominently
  Facebook's onion domain and self-hosted domains.  They write that
  memorising domains will no longer be possible, and they will look into
  bookmarking tools.  Several users voiced concern about the
  confidentiality of their bookmarks, so they are looking into ways to
  encrypt them.

- Similarly but less commonly, users voice concerns that communicating,
  typing, and writing down prop224 domains will no longer be feasible.

- A small number of users write that it will be harder to recognise
  onion domains.  Alarmingly, one user mentioned that the lack of a
  discernible prefix will make it hard to recognise genuine domains,
  suggesting that they rely on an onion domain's easy-to-spoof vanity
  prefix.

- A user suggested to add spaces to prop224 domains to "make the address
  more visually appealing."

Respondents who believe that their habits will *not* change (84%) gave
the following reasons:

- The majority of this crowd never bothered to memorise onion domains
  and uses bookmarks.  A bunch of users store domains in text files and
  an even smaller bunch uses search engines to rediscover domains.  In
  general, most people in this category treat onion domains as an opaque
  identifier.

- Some users write that the additional inconvenience is likely worth the
  extra security and anonymity.

- Some users mention Reddit as their primary way of discovering onion
  domains.

Judging by the above, I believe that the new domain format is among the
minor usability issues surrounding onion services.  In fact, an
easy-to-remember domain format ranks last among the six criteria whose
importance we asked users about.  On a five-point Likert scale ranging
from "not at all important" to "very important," we got the following
results:

- 77% think that quality of content is at least somewhat important.
- 70% think that a search engine (like Google) for onion services is at
  least somewhat important.
- 66% think that diversity of content is at least somewhat important.
- 62% think that page load time is at least somewhat important.
- 43% think that having an onion service version of popular services
  such as Facebook is at least somewhat important.
- 26% think that an easy-to-remember domain format is at least somewhat
  important.

However, our survey data is likely biased towards a particularly young
and educated crowd that's presumably less bothered by technological
hurdles, which may be why they can afford to care more about content.

[0] &lt;https://blog.torproject.org/take-part-study-help-improve-onion-services&gt;

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170927203118</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-09-27 20:31:18-0400</timestampReceived><subject>Re: [tor-dev] User perception of the prop224 domain format</subject><body>

[Attachment #2 (multipart/alternative)]


Interesting.

Do we have a consensus on the length of the "run them in parallel" /
cutover period from old-to-new?

I would be inclined to keep older addresses around for up to 3 years before
trying to kill them entirely, because of such tor-adoption-curve concerns.

NB: this would still be massively faster than the IPv4 -&gt; IPv6 transition.
 :-)

    - alec

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;Interesting.   \
&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;Do we have a \
consensus on the length of the "run them in parallel" / cutover period from \
old-to-new?&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;I would \
be inclined to keep older addresses around for up to 3 years before trying to kill \
them entirely, because of such tor-adoption-curve concerns.&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;NB: this would still be \
massively faster than the IPv4 -&gt; IPv6 transition.   :-)&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;      - alec&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170927212504</emailId><senderName>Ben Laurie</senderName><senderEmail>ben@links.org</senderEmail><timestampReceived>2017-09-27 21:25:04-0400</timestampReceived><subject>Re: [tor-dev] User perception of the prop224 domain format</subject><body>

On 27 September 2017 at 21:26, Philipp Winter &lt;phw@nymity.ch&gt; wrote:
&gt; However, our survey data is likely biased towards a particularly young
&gt; and educated crowd that's presumably less bothered by technological
&gt; hurdles, which may be why they can afford to care more about content.

Your survey is obviously massively biased towards users of Tor. It
would be really interesting to know what non-users think.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170925072613</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2017-09-25 07:26:13-0400</timestampReceived><subject>[tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Hi (PrivCount) folks!

I just finished the first draft of the k,n-secret-sharing thing for PrivCount. :)

Sorry that it need some time, but I'm sadly a bit slowly with reading and writing.

You can find it here at github:

https://github.com/Samdney/28X-k-of-n-secret-sharing

and also below in this email.

You will see a lot of "=&gt; TODO". This belongs of course not to the specification ;).
There are still a lot of open details and questions left (or stuff which still have 
to be written, I think) and hence it is time for some help from you, now.

I looked a bit around how a specification has to look like,
before I started to write it, but this was more confusing like helpful, hehe.

I'm a completely newbie with writing this kind of documents, 
hence I'm pretty nervous for your feedback :)

Bye,
Carolin

==========
Draft v1
==========
Filename: 28X-k-of-n-secret-sharing.txt
Title: k-of-n Secret Sharing
Author: Carolin Zöbelein
Created: XX-Sept-2017
Status: Draft

0. Motivation

	The implementation of schemes for collecting statistic data within a high
	sensitive network like Tor for preserving anonymity, is a hard challenge. 
	Over the years the Tor network has grown but its usage and operation is not 
	well-understood and already existing ways [1] leads to some open issues
	[maybe add also a reference here].

	For doing this better like the current state of the art, we discuss to 
	switch to PrivCount [2][3], a system for measuring the Tor network created
	with a high attention on user privacy.

	PrivCount consists of a system of Data Collectors (DC) which forward their
	blinded measure counter results to a number of, so-called, Tally Reporters
	(TR) which are only together be able to reconstruct the original data.

	In the context of the implementation of the mentioned system, we decided to
	use a secret sharing algorithm for forwarding the blinded counter values. 
	This gives us the chance of reconstructing the data also with a particular 
	minimum amount of secret share holders and hence a failure handling 
	possibility of Tally Reporters.

	=&gt; TODO: References [maybe add also a reference here]

1. Introduction

	Assume, we have a given secret s which we want to share with a particular
	number N of participants who are only together be able to reconstruct it.
	To realize this, we can split our secret in n parts s_i. Our secret will be 
	then the sum over all s_i. This is the simplest secret sharing scheme at all.
	Since it needs all participants for the reconstruction, it is called a (N,N) 
	treshold secret sharing algorithm.

	But we also see that it has weaknesses. With every leaked share s_i, an 
	adversary can reduce the number of possible soulutions for our secret very
	easily. This leads to the group of more efficient secret sharing algorithms.
	
	In [4], Adi Shamir introduced a (K,N) secret sharing scheme which is named 
	after him and offers more security. Additionally, on the contrary to our 
	scheme above, we only need a minimum amount of k out of n participants to 
	reconstruct the secret. Our specification will be	based on this scheme.

3. Overview and preliminaries

	In this section, we make some preparations for the protocol specification
	itself.

	3.1. Scope

		In this document we describe the protocol specification for a Shamir 
		Secret Sharing scheme on a finite field of size p &gt; s and p &gt; N, with p 
		be prime number.

		The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

	3.2. Notation

		We will use for public, non-secret, values UPPER CASE and for private, 
		secret, values lower case.

		We write: "a", type: b, c, d
			"a"			gives the name of the parameter.
			type:	b	be the type of the parameter a.
			c 			be the amount of this parameters.
			d				be the mathematical definition set for a.

		Mathematical assignments:

			Let "a := b" be the assignment of the value of b to the variable a.

			Let "a mod b" be the modulus calculation of a with respect to b.

			Let "a != b" be that a is unequal to b.
			
			In our document "natural numbers" are defined as the set of all
			integers greater than zero.

			g[X] describes a polynomial with respect to X.

			SUM(a_i) gives the sum over a_i for all known i.

			SUM(i=a,b,c_i) gives the sum over all c_i for all a &lt;= i &lt;= b.

			PRODUCT(a,b,c_i) gives the product over all c_i for all a &lt;= i &lt;= b.

		The secret sharing protocol has three participating parties which we will
		call as follows:

			Secret Keeper (SK) knows the secret, does the initial setup and 
			determines the secret shares.
		
			Share Holders (SH) receive the secret shares from the SK.
		
			Secret Reconstructor (SR) takes a particular number of secret shares 
			from the SHs and reconstruct the secret.

4. Protocol outline			

	We give a raw protocol overview.

		0.	Preparation: The parties negotiate an appropriate handshake and
				communication way for forwarding the secret shares between SK to 
				the SHs and between the SHs to SR.
				[This is not part of that specifiation]
			
				=&gt; TODO: Do we need a more detailed definition of "appropriate"?

		1.	The SK knows the secret s. Additionally, given are the amount N of 
				participating SHs and the threshold K for the minimum number of 
				necessary shares for the reconstruction. 
				[see sec. 5.1.]

		2.	The SK generate a random prime number p, with p &gt; s AND p &gt; N.
				[see sec. 5.3.]

		3.	The SK determines the secret polynomial coefficients a_j, 
				1 &lt;= j &lt;= K-1. With this, the secret keeping polynomial is given by
				g[X] := s + SUM(a_j*X^j).
				[see sec. 5.4.]

		4.	The SK determines the secret shares parts x_i, 1 &lt;= i &lt;= N.
				[see sec. 5.5.]

		5.	The SK computes the secret shares parts y_i := g[x_i].
				[see sec. 5.5.]

		6.	The SK forward the secret shares to the SHs. Each SH_i MUST receive 
				exactly one secret share pair (x_i,y_i).
				[see sec. 5.6.]
	
		7.	The SR receives K secret share pairs (x_h,y_h) from the SHs and p from
				the SK, 1 &lt;= h &lt;= K.
				[see sec. 5.7]
		
		8.	The SR compute the Lagrange basis polynomials l_h[X].
				[see sec. 5.8.]

		9. 	The SR reconstruct the original polynomial with 
				g[x] = SUM(h=1, K, y_h*l_h[X] mod p).
				[see sec. 5.8.]

		10.	The SR computes the secret s = g[0].
				[see sec. 5.8.]	
	
5. Specification

	Now we will give more details to the raw outline above.
	
	5.1. Given constants

		"s", type: int, exactly one, integer
			The given secret.

		"N", type: int, exactly one, natural number
			The number of participating SHs.
			It MUST to be N &gt;= N_min.

			=&gt; TODO: Which value should N_min has? Default: N_min = 2?

		"K", type: int, exactly one, natural number
			The threshold of the minimum number of necessary shares for the
			reconstruction.
			It MUST to be K &lt;= N.

			=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
				I think so.
				
	5.2. Parties

		Secret Keeper (SK)
			It MUST exists exactly one SK.

		Share Holders (SH)
			It MUST exists exactly N SHs.

		Secret Reconstructor (SR)
			It SHOULD exists exactly one SR.

			[=&gt; TODO: SHOULD since one is necessary but more could be used for
				checking the result. But I would prefere MUST.]
		
		=&gt; TODO: Which additional information do we need to know/to give about the 
			parties?
		
	5.3. Prime number

		Since we are using a secret sharing scheme on a finite field, we need a
		random prime number.

		"p", type: int, exactly one, prime number
			It MUST to be p &gt; s AND p &gt; N AND it MUST to be the secret s element of 
			Z/pZ.

		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
			is it given to whom?

		=&gt; TODO: Do we need to write anything about the necessary "random" 
			characteristic? The "quality" of the randomly generation of the number?

		=&gt; TODO: Minimum size of p? Which value should p has, at least, caused by
			security reasons?

		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
			I think so.

	5.4. The secret keeping polynomial

		"a_j", type: int, K-1 values, Z/pZ
		"g[X]", type: polynomial with order K-1, exactly one, (Z/pZ)[X]

		The SK determines the final secret keeping polynomial, which is given by
		
			g[X] := s + SUM(a_j*X^j) 

		and hence our secret for g[0] = s. Its random coefficients are a_j, 
		1 &lt;= j &lt;= K-1 which MUST be element of Z/pZ.
		
		=&gt; TODO: Which constraints exists for this a_j values? Size? Relative,
			pairwise, distance a_j - a_m between for all a_j,a_m with j != m?
			Is this relevant? References for this?

		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
			I think so.

	5.5. The secret shares

		"x_i", type: int, N values, Z/pZ
		"y_i", type: int, N values, Z/pZ
		"(x_i,y_i)", type: (int,int), N value pairs, Z/pZ -&gt; Z/pZ

		The SK determines the random secret shares parts x_i, i &lt;= N which MUST be 
		element of Z/pZ and MUST be pairwise different from zero.

		With this x_i, SK computes the secret shares parts y_i := g[x_i] and hence
		the finally secret share pairs (x_i,y_i).

		=&gt; TODO: How should this x_i be generated? Distribution?
			E.g. the smallest, non negative, representatives? 

		=&gt; TODO: Which constraints exists for this x_i values? Size? Relative,
			pairwise, distance x_i - x_m between for all x_i,x_m with i != m?
			Is this relevant? References for this?

		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
			I think so.

	5.6. Sending secret shares from SK to SHs
	
		The SK sends the secret share pairs to the SHs. Each SH_i MUST
		receive exactly one secret share pair (x_i,y_i).

		=&gt; TODO: How exactly has to look the data which has to be send and which
			size has it (bits/bytes) to be?

		=&gt; TODO: Which data has also to be send apart from (x_i,y_i)?

		=&gt; TODO: How should looks like a possible answer of the SHs for the SK to
			confirm the receipt? [Is this necessary, at all? I think so.]

		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
			is it given to whom?

		=&gt; TODO: I need a helping hand for this specification section :)

	5.7. SR receives secret shares from the SHs

		The SR MUST receive K secret share pairs from the SHs and p from the SK. 
		The SR MUST receive exactly one secret share pair (x_,y_h), 1 &lt;= h &lt;= k, 
		from each SH_h

		=&gt; TODO: How exactly has to look the data which has to be send as response
			to the SHs? What, which additionally data, has to be send? And which 
			size has it (bits/bytes) to be?
		
		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
			is it given to whom?

		=&gt; TODO: From where comes the information about N and K? (and p?)

		=&gt; TODO: Where has to be decided, from which K out of N SHs has this
			(x_h,y_h) to come from? And how (randomly)? And in which way has this 
			to be comunicated to the given parties? !!!

		=&gt; TODO: I need a helping hand for this specification section :)

	5.8. Reconstruction
	
		"l_h[x]", type: polynomial with order K-1, K, (Z/pZ)[X]

		The SR compute the Lagrange basis polynomials l_h[x] with the secret share 
		pairs (x_h,y_h), 1 &lt;= h &lt;= K, which it received from the SHs. The SR MUST 
		receive exactly K pairs from exactly K SHs. I MUST be exactly one secret 
		share pair from each, of this K, SH.

		The Lagrange basis polynomials are given by 
			
			l_h[X]:= PRODUCT(1 &lt;= m &lt;= K AND m != h, (X - x_m)/(x_h - x_m))
		
		with 1 &lt;= j &lt;= K. This leads to our original secret keeping polynomial

			g[X] := SUM(h=1, K, y_h*l_h[x] mod p)

		and the given secret by s = g[0].

		=&gt; TODO: From which K out of N SHs come this secret shares?
	
		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
			I think so.

6. Security discussion
	=&gt; TODO: Write important points about the security aspects of this scheme. :)

7. References
	[1]	https://www.cypherpunks.ca/~iang/pubs/privex-ccs14.pdf
	[maybe add also a reference here]
	[2] http://www.robgjansen.com/publications/privcount-ccs2016.pdf
	[3] https://github.com/privcount/privcount
	[4]	Shamir A., "How to share a secret", Communications of the ACM. 22, 1979, 
			S. 612–613.

	=&gt; TODO: References
	=&gt; TODO: Correct references for regular citation
	=&gt; TODO: Add missing references

A. Lemma
=&gt; TODO: Still to write. The Lemma (why this Shamir thing works :) proof
==========
TODO: RESEARCH AND EXTENSION OF SPECIFICATION!!!
=&gt; TODO: Investigate more some very interesting papers! :)
=&gt; TODO: Multi-Secret Sharing Schemes!!!

TODO: MISC:
=&gt; TODO: Notation stuff checking
=&gt; TODO: Check my English for language mistakes :)
=&gt; TODO: I used: scheme, algorithm, protocol, ... what is the best word in what
	context?
==========

-- 
-----------------------------------------------------------------------
Carolin Zöbelein / Nick: Samdney
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
-----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170927055307</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-09-27 05:53:07-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Sep 2017, at 17:26, Carolin Zöbelein &lt;contact@carolin-zoebelein.de&gt; wrote:
&gt; 
&gt; Hi (PrivCount) folks!
&gt; 
&gt; I just finished the first draft of the k,n-secret-sharing thing for PrivCount. :)
&gt; 
&gt; Sorry that it need some time, but I'm sadly a bit slowly with reading and writing.
&gt; 
&gt; You can find it here at github:
&gt; 
&gt; https://github.com/Samdney/28X-k-of-n-secret-sharing
&gt; 
&gt; and also below in this email.
&gt; 
&gt; You will see a lot of "=&gt; TODO". This belongs of course not to the specification ;).
&gt; There are still a lot of open details and questions left (or stuff which still have
&gt; to be written, I think) and hence it is time for some help from you, now.
&gt; 
&gt; I looked a bit around how a specification has to look like,
&gt; before I started to write it, but this was more confusing like helpful, hehe.
&gt; 
&gt; I'm a completely newbie with writing this kind of documents,
&gt; hence I'm pretty nervous for your feedback :)

Hi,

This looks like a great overview of the Shamir secret-sharing protocol.

We talked about instantiating it with unsigned 64-bit integers on IRC.
It would be easier for me to understand it (and for someone to code it).

This would also help us define an interchange format, or modify the
prop 280 interchange format to support secret sharing.

For hints about how this works, look at proposal 280, which also uses
unsigned 64 bit integers.

Tim

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZyzzDAAoJEHQNnjkCUnKixXQP/iF0afmEYhsLdf4KyuL/KfyF
MfXj2DCGVyclY6nh3GFutgsx/j1Wa3bgpKgbexMsMWyxNbeGDMnQDlhIONgAmm/5
iFmUQCsTn+M6jxIAtmqo8IXgV1+j8B/FQ3vFT7iaIUN0i/IPNjm6PJ0waQVGyDpb
slE1knTYKdv05eOz/2LoXb3D1K9Z/BgR+QC+VjdFIqmx/5SNpA/4DU53QA94h/gu
QDStOavhjpZrcVdFlyVGnfL9cLsNQbCls3G9WxujCZfHExi38ElyLB0CKRX31N+R
p4B7LcpJTDhCrf4YCPqpdzU2YtdU7FEnMzHI0zRWXb0pmEP8j7irMxu7e+sQEiml
dGBSC+sXyyLJWKuU2dwLjk+j89u9/KBGQiIDVhIguYBmEglVmoySB6CgBjtAJEOr
D2lzzC2hzDAcHzv8SW9XuO0rYEEJkkCiEGJIqA2Baw7WyFSayRSwY0+8g6vH/cpW
j5SA89yWsAF7gHRFbTFI9rVIPMM8QcaLXCc6JpolNZNfuADqJvCuzcL+cwZRaqw9
632QpXylJ6MYkL1QFmTqEgCQoDWUZuXjM7w3Y6khxDfQyKzW27I0y85xd3ED2eFd
9ctgthonaNmbnJ1fJI9KRNptFVLjCi/NqmOdyKjIjVBZ5ursA+kC7NQy1gN7KMaq
8iSiY0TlMAuTxnqBWyUR
=b+gP
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170927122636</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-09-27 12:26:36-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Thanks for the writeup!  Some notes inline.

On Mon, Sep 25, 2017 at 09:26:13AM +0200, Carolin Zöbelein wrote:
&gt; 1. Introduction
&gt; 
&gt; 	Assume, we have a given secret s which we want to share with a particular
&gt; 	number N of participants who are only together be able to reconstruct it.
&gt; 	To realize this, we can split our secret in n parts s_i. Our secret will be 
&gt; 	then the sum over all s_i. This is the simplest secret sharing scheme at all.
&gt; 	Since it needs all participants for the reconstruction, it is called a (N,N) 
&gt; 	treshold secret sharing algorithm.
&gt; 
&gt; 	But we also see that it has weaknesses. With every leaked share s_i, an 
&gt; 	adversary can reduce the number of possible soulutions for our secret very
&gt; 	easily. This leads to the group of more efficient secret sharing algorithms.

This is not true.  Even if N-1 of the shares are exposed, *zero
information* about the secret is leaked!

&gt; 	In [4], Adi Shamir introduced a (K,N) secret sharing scheme which is named 
&gt; 	after him and offers more security.

Shamir secret sharing is not more secure than the above additive secret
sharing.  But it is more flexible, as you allude to below.

&gt;       Additionally, on the contrary to our 
&gt; 	scheme above, we only need a minimum amount of k out of n participants to 
&gt; 	reconstruct the secret. Our specification will be	based on this scheme.
&gt; 
&gt; 3. Overview and preliminaries
&gt; 
&gt; 	In this section, we make some preparations for the protocol specification
&gt; 	itself.
&gt; 
&gt; 	3.1. Scope
&gt; 
&gt; 		In this document we describe the protocol specification for a Shamir 
&gt; 		Secret Sharing scheme on a finite field of size p &gt; s and p &gt; N, with p 
&gt; 		be prime number.

If your secrets are large (more than one machine word), this isn't
actually the best way to do it.  But teor's followup message suggested
using 64-bit p, which would be fine.  (p = 2^63-25, for example.)

&gt; 		The secret sharing protocol has three participating parties which we will
&gt; 		call as follows:
&gt; 
&gt; 			Secret Keeper (SK) knows the secret, does the initial setup and 
&gt; 			determines the secret shares.

The SK is typically called the "Dealer".

&gt; 		2.	The SK generate a random prime number p, with p &gt; s AND p &gt; N.
&gt; 				[see sec. 5.3.]

(See notes in 5.3 below, and similarly for the other points in this
section.)

&gt; 5. Specification
&gt; 
&gt; 	Now we will give more details to the raw outline above.
&gt; 	
&gt; 	5.1. Given constants
&gt; 
&gt; 		"s", type: int, exactly one, integer
&gt; 			The given secret.

As you say below, s is an element of Z/pZ, not precisely an integer.

&gt; 		"N", type: int, exactly one, natural number
&gt; 			The number of participating SHs.
&gt; 			It MUST to be N &gt;= N_min.
&gt; 
&gt; 			=&gt; TODO: Which value should N_min has? Default: N_min = 2?
&gt; 
&gt; 		"K", type: int, exactly one, natural number
&gt; 			The threshold of the minimum number of necessary shares for the
&gt; 			reconstruction.
&gt; 			It MUST to be K &lt;= N.
&gt; 
&gt; 			=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 				I think so.

Not sure what you mean by this last bit.

&gt; 	5.3. Prime number
&gt; 
&gt; 		Since we are using a secret sharing scheme on a finite field, we need a
&gt; 		random prime number.

There is no reason for p to be random.  It is totally fine to just fix
it large enough to be larger than both s and N, as you have written.

&gt; 		"p", type: int, exactly one, prime number
&gt; 			It MUST to be p &gt; s AND p &gt; N AND it MUST to be the secret s element of 
&gt; 			Z/pZ.
&gt; 
&gt; 		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
&gt; 			is it given to whom?
&gt; 
&gt; 		=&gt; TODO: Do we need to write anything about the necessary "random" 
&gt; 			characteristic? The "quality" of the randomly generation of the number?
&gt; 
&gt; 		=&gt; TODO: Minimum size of p? Which value should p has, at least, caused by
&gt; 			security reasons?
&gt; 
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.
&gt; 
&gt; 	5.4. The secret keeping polynomial
&gt; 
&gt; 		"a_j", type: int, K-1 values, Z/pZ
&gt; 		"g[X]", type: polynomial with order K-1, exactly one, (Z/pZ)[X]
&gt; 
&gt; 		The SK determines the final secret keeping polynomial, which is given by
&gt; 		
&gt; 			g[X] := s + SUM(a_j*X^j) 
&gt; 
&gt; 		and hence our secret for g[0] = s. Its random coefficients are a_j, 
&gt; 		1 &lt;= j &lt;= K-1 which MUST be element of Z/pZ.
&gt; 		
&gt; 		=&gt; TODO: Which constraints exists for this a_j values? Size? Relative,
&gt; 			pairwise, distance a_j - a_m between for all a_j,a_m with j != m?
&gt; 			Is this relevant? References for this?

No, the a_j values must each be uniformly random elements of Z/pZ.
There must be no enforced relationships among them.

&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.

Not more than "uniformly random elements of Z/pZ".

&gt; 	5.5. The secret shares
&gt; 
&gt; 		"x_i", type: int, N values, Z/pZ
&gt; 		"y_i", type: int, N values, Z/pZ
&gt; 		"(x_i,y_i)", type: (int,int), N value pairs, Z/pZ -&gt; Z/pZ
&gt; 
&gt; 		The SK determines the random secret shares parts x_i, i &lt;= N which MUST be 
&gt; 		element of Z/pZ and MUST be pairwise different from zero.

Not sure what "pairwise different from zero" means.  They should be
pairwise different (no two the same) and all non-zero; is that what you
meant?

&gt; 		With this x_i, SK computes the secret shares parts y_i := g[x_i] and hence
&gt; 		the finally secret share pairs (x_i,y_i).
&gt; 
&gt; 		=&gt; TODO: How should this x_i be generated? Distribution?
&gt; 			E.g. the smallest, non negative, representatives? 

x_i = i is totally fine (for i = 1, ..., N).

&gt; 		=&gt; TODO: Which constraints exists for this x_i values? Size? Relative,
&gt; 			pairwise, distance x_i - x_m between for all x_i,x_m with i != m?
&gt; 			Is this relevant? References for this?
&gt; 
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.

As above.

&gt; 	5.7. SR receives secret shares from the SHs
&gt; 
&gt; 		The SR MUST receive K secret share pairs from the SHs and p from the SK. 
&gt; 		The SR MUST receive exactly one secret share pair (x_,y_h), 1 &lt;= h &lt;= k, 
&gt; 		from each SH_h

x_h above instead of x_, presumably?

&gt; 		=&gt; TODO: How exactly has to look the data which has to be send as response
&gt; 			to the SHs? What, which additionally data, has to be send? And which 
&gt; 			size has it (bits/bytes) to be?
&gt; 		
&gt; 		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
&gt; 			is it given to whom?
&gt; 
&gt; 		=&gt; TODO: From where comes the information about N and K? (and p?)
&gt; 
&gt; 		=&gt; TODO: Where has to be decided, from which K out of N SHs has this
&gt; 			(x_h,y_h) to come from? And how (randomly)? And in which way has this 
&gt; 			to be comunicated to the given parties? !!!

It's actually fine to receive *more* than K shares, and it in fact can
help you pick out SHs that give you incorrect values, through error or
malice.

&gt; 	5.8. Reconstruction
&gt; 	
&gt; 		"l_h[x]", type: polynomial with order K-1, K, (Z/pZ)[X]
&gt; 
&gt; 		The SR compute the Lagrange basis polynomials l_h[x] with the secret share 
&gt; 		pairs (x_h,y_h), 1 &lt;= h &lt;= K, which it received from the SHs. The SR MUST 
&gt; 		receive exactly K pairs from exactly K SHs. I MUST be exactly one secret 
&gt; 		share pair from each, of this K, SH.

What is "I" here?

&gt; 		The Lagrange basis polynomials are given by 
&gt; 			
&gt; 			l_h[X]:= PRODUCT(1 &lt;= m &lt;= K AND m != h, (X - x_m)/(x_h - x_m))
&gt; 		
&gt; 		with 1 &lt;= j &lt;= K. This leads to our original secret keeping polynomial
&gt; 
&gt; 			g[X] := SUM(h=1, K, y_h*l_h[x] mod p)
&gt; 
&gt; 		and the given secret by s = g[0].

You don't actually have to reconstruct the whole polynomial.  It's
easier to just compute g[0] directly by plugging X=0 into the definition
of l_h[X] above, to yield:

        l_h[0] := PRODUCT(1 &lt;= m &lt;= K AND m != h, x_m / (x_m - x_h))
        g[0] := SUM(h=1, K, y_h * l_h[0])

This step will also of course change if you want to handle more than K
shares or incorrect shares.

&gt; 		=&gt; TODO: From which K out of N SHs come this secret shares?
&gt; 	
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170928032039</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2017-09-28 03:20:39-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Hi,

&gt; Hi,
&gt; 
&gt; This looks like a great overview of the Shamir secret-sharing
&gt; protocol.
&gt; 
&gt; We talked about instantiating it with unsigned 64-bit integers on
&gt; IRC.
&gt; It would be easier for me to understand it (and for someone to code
&gt; it).
&gt; 
&gt; This would also help us define an interchange format, or modify the
&gt; prop 280 interchange format to support secret sharing.
&gt; 
&gt; For hints about how this works, look at proposal 280, which also uses
&gt; unsigned 64 bit integers.
&gt; 
&gt; Tim

I will work on this and the long list of still open TODOs in the
proposal, the next days. Hence please have a look at

https://github.com/Samdney/28X-k-of-n-secret-sharing

for changes, from time to time.

I will be around at irc, too ;).

Btw, should I also create a ticket for this proposal for important
topic discussions?

Bye,
Carolin

-- 
-----------------------------------------------------------------------
Carolin Zöbelein / Nick: Samdney
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
-----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170928154836</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2017-09-28 15:48:36-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Hello,

This appears to be a sketch of Shamir secret sharing, which will be just one tool \
used in the PrivCount system. For example, it is missing how relays (aka Data \
Collectors) maintain counters, how aggregators (aka Share Keepers) aggregate \
counters, and how secret sharing is used among those entities to provide fault \
tolerance for the aggregation process.

The grammar and writing style need improvement. They are at a level that makes the \
proposal hard to understand at times.

There are many important missing details even in the secret sharing component:
  - How is p determined?
  - How is N determined?
  - Who plays the roles of the SK, SHs, and SR? How do these relate to the parties in \
PrivCount?

Some minor notes I kept before it became clearer that higher-level comments would be \
                more useful:
- Sec. 1: Description of secret sharing is incorrect. Strict subsets of shares in a \
                simple additive secret-sharing scheme do not leak information.
- Sec. 1: Variable capitalization (e.g. K vs. k, N vs. n) should be consistent.
- Sec. 3.2: I could not understand what notation was being introduced through a, b, \
                c, and d.
- Sec. 3.2: SUM and PRODUCT variable notation is inconsistent ("i=" missing from \
                PRODUCT).
- Sec. 3.2: "Secret Keeper (SK)" has an unfortunate collision with the acronym for \
                Share Keeper, which is a different role in the PrivCount paper.
- Sec. 4, Step 2: The prime need not be random. It can be fixed and public.
- Sec. 4, Step 3: Specify how the coefficients are determined.

Best,
Aaron

&gt; On Sep 27, 2017, at 11:20 PM, Carolin Zöbelein &lt;contact@carolin-zoebelein.de&gt; \
&gt; wrote: 
&gt; Hi,
&gt; 
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; This looks like a great overview of the Shamir secret-sharing
&gt; &gt; protocol.
&gt; &gt; 
&gt; &gt; We talked about instantiating it with unsigned 64-bit integers on
&gt; &gt; IRC.
&gt; &gt; It would be easier for me to understand it (and for someone to code
&gt; &gt; it).
&gt; &gt; 
&gt; &gt; This would also help us define an interchange format, or modify the
&gt; &gt; prop 280 interchange format to support secret sharing.
&gt; &gt; 
&gt; &gt; For hints about how this works, look at proposal 280, which also uses
&gt; &gt; unsigned 64 bit integers.
&gt; &gt; 
&gt; &gt; Tim
&gt; 
&gt; I will work on this and the long list of still open TODOs in the
&gt; proposal, the next days. Hence please have a look at
&gt; 
&gt; https://github.com/Samdney/28X-k-of-n-secret-sharing
&gt; 
&gt; for changes, from time to time.
&gt; 
&gt; I will be around at irc, too ;).
&gt; 
&gt; Btw, should I also create a ticket for this proposal for important
&gt; topic discussions?
&gt; 
&gt; Bye,
&gt; Carolin
&gt; 
&gt; -- 
&gt; -----------------------------------------------------------------------
&gt; Carolin Zöbelein / Nick: Samdney
&gt; PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
&gt; -----------------------------------------------------------------------
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170928183554</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-09-28 18:35:54-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

My earlier mail in this thread bounced for Reasons.  Here it is again.

   - Ian

Thanks for the writeup!  Some notes inline.

On Mon, Sep 25, 2017 at 09:26:13AM +0200, Carolin Zöbelein wrote:
&gt; 1. Introduction
&gt; 
&gt; 	Assume, we have a given secret s which we want to share with a particular
&gt; 	number N of participants who are only together be able to reconstruct it.
&gt; 	To realize this, we can split our secret in n parts s_i. Our secret will be 
&gt; 	then the sum over all s_i. This is the simplest secret sharing scheme at all.
&gt; 	Since it needs all participants for the reconstruction, it is called a (N,N) 
&gt; 	treshold secret sharing algorithm.
&gt; 
&gt; 	But we also see that it has weaknesses. With every leaked share s_i, an 
&gt; 	adversary can reduce the number of possible soulutions for our secret very
&gt; 	easily. This leads to the group of more efficient secret sharing algorithms.

This is not true.  Even if N-1 of the shares are exposed, *zero
information* about the secret is leaked!

&gt; 	In [4], Adi Shamir introduced a (K,N) secret sharing scheme which is named 
&gt; 	after him and offers more security.

Shamir secret sharing is not more secure than the above additive secret
sharing.  But it is more flexible, as you allude to below.

&gt;       Additionally, on the contrary to our 
&gt; 	scheme above, we only need a minimum amount of k out of n participants to 
&gt; 	reconstruct the secret. Our specification will be	based on this scheme.
&gt; 
&gt; 3. Overview and preliminaries
&gt; 
&gt; 	In this section, we make some preparations for the protocol specification
&gt; 	itself.
&gt; 
&gt; 	3.1. Scope
&gt; 
&gt; 		In this document we describe the protocol specification for a Shamir 
&gt; 		Secret Sharing scheme on a finite field of size p &gt; s and p &gt; N, with p 
&gt; 		be prime number.

If your secrets are large (more than one machine word), this isn't
actually the best way to do it.  But teor's followup message suggested
using 64-bit p, which would be fine.  (p = 2^63-25, for example.)

&gt; 		The secret sharing protocol has three participating parties which we will
&gt; 		call as follows:
&gt; 
&gt; 			Secret Keeper (SK) knows the secret, does the initial setup and 
&gt; 			determines the secret shares.

The SK is typically called the "Dealer".

&gt; 		2.	The SK generate a random prime number p, with p &gt; s AND p &gt; N.
&gt; 				[see sec. 5.3.]

(See notes in 5.3 below, and similarly for the other points in this
section.)

&gt; 5. Specification
&gt; 
&gt; 	Now we will give more details to the raw outline above.
&gt; 	
&gt; 	5.1. Given constants
&gt; 
&gt; 		"s", type: int, exactly one, integer
&gt; 			The given secret.

As you say below, s is an element of Z/pZ, not precisely an integer.

&gt; 		"N", type: int, exactly one, natural number
&gt; 			The number of participating SHs.
&gt; 			It MUST to be N &gt;= N_min.
&gt; 
&gt; 			=&gt; TODO: Which value should N_min has? Default: N_min = 2?
&gt; 
&gt; 		"K", type: int, exactly one, natural number
&gt; 			The threshold of the minimum number of necessary shares for the
&gt; 			reconstruction.
&gt; 			It MUST to be K &lt;= N.
&gt; 
&gt; 			=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 				I think so.

Not sure what you mean by this last bit.

&gt; 	5.3. Prime number
&gt; 
&gt; 		Since we are using a secret sharing scheme on a finite field, we need a
&gt; 		random prime number.

There is no reason for p to be random.  It is totally fine to just fix
it large enough to be larger than both s and N, as you have written.

&gt; 		"p", type: int, exactly one, prime number
&gt; 			It MUST to be p &gt; s AND p &gt; N AND it MUST to be the secret s element of 
&gt; 			Z/pZ.
&gt; 
&gt; 		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
&gt; 			is it given to whom?
&gt; 
&gt; 		=&gt; TODO: Do we need to write anything about the necessary "random" 
&gt; 			characteristic? The "quality" of the randomly generation of the number?
&gt; 
&gt; 		=&gt; TODO: Minimum size of p? Which value should p has, at least, caused by
&gt; 			security reasons?
&gt; 
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.
&gt; 
&gt; 	5.4. The secret keeping polynomial
&gt; 
&gt; 		"a_j", type: int, K-1 values, Z/pZ
&gt; 		"g[X]", type: polynomial with order K-1, exactly one, (Z/pZ)[X]
&gt; 
&gt; 		The SK determines the final secret keeping polynomial, which is given by
&gt; 		
&gt; 			g[X] := s + SUM(a_j*X^j) 
&gt; 
&gt; 		and hence our secret for g[0] = s. Its random coefficients are a_j, 
&gt; 		1 &lt;= j &lt;= K-1 which MUST be element of Z/pZ.
&gt; 		
&gt; 		=&gt; TODO: Which constraints exists for this a_j values? Size? Relative,
&gt; 			pairwise, distance a_j - a_m between for all a_j,a_m with j != m?
&gt; 			Is this relevant? References for this?

No, the a_j values must each be uniformly random elements of Z/pZ.
There must be no enforced relationships among them.

&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.

Not more than "uniformly random elements of Z/pZ".

&gt; 	5.5. The secret shares
&gt; 
&gt; 		"x_i", type: int, N values, Z/pZ
&gt; 		"y_i", type: int, N values, Z/pZ
&gt; 		"(x_i,y_i)", type: (int,int), N value pairs, Z/pZ -&gt; Z/pZ
&gt; 
&gt; 		The SK determines the random secret shares parts x_i, i &lt;= N which MUST be 
&gt; 		element of Z/pZ and MUST be pairwise different from zero.

Not sure what "pairwise different from zero" means.  They should be
pairwise different (no two the same) and all non-zero; is that what you
meant?

&gt; 		With this x_i, SK computes the secret shares parts y_i := g[x_i] and hence
&gt; 		the finally secret share pairs (x_i,y_i).
&gt; 
&gt; 		=&gt; TODO: How should this x_i be generated? Distribution?
&gt; 			E.g. the smallest, non negative, representatives? 

x_i = i is totally fine (for i = 1, ..., N).

&gt; 		=&gt; TODO: Which constraints exists for this x_i values? Size? Relative,
&gt; 			pairwise, distance x_i - x_m between for all x_i,x_m with i != m?
&gt; 			Is this relevant? References for this?
&gt; 
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.

As above.

&gt; 	5.7. SR receives secret shares from the SHs
&gt; 
&gt; 		The SR MUST receive K secret share pairs from the SHs and p from the SK. 
&gt; 		The SR MUST receive exactly one secret share pair (x_,y_h), 1 &lt;= h &lt;= k, 
&gt; 		from each SH_h

x_h above instead of x_, presumably?

&gt; 		=&gt; TODO: How exactly has to look the data which has to be send as response
&gt; 			to the SHs? What, which additionally data, has to be send? And which 
&gt; 			size has it (bits/bytes) to be?
&gt; 		
&gt; 		=&gt; TODO: I'm not sure how exactly p should be handled. When and from where,
&gt; 			is it given to whom?
&gt; 
&gt; 		=&gt; TODO: From where comes the information about N and K? (and p?)
&gt; 
&gt; 		=&gt; TODO: Where has to be decided, from which K out of N SHs has this
&gt; 			(x_h,y_h) to come from? And how (randomly)? And in which way has this 
&gt; 			to be comunicated to the given parties? !!!

It's actually fine to receive *more* than K shares, and it in fact can
help you pick out SHs that give you incorrect values, through error or
malice.

&gt; 	5.8. Reconstruction
&gt; 	
&gt; 		"l_h[x]", type: polynomial with order K-1, K, (Z/pZ)[X]
&gt; 
&gt; 		The SR compute the Lagrange basis polynomials l_h[x] with the secret share 
&gt; 		pairs (x_h,y_h), 1 &lt;= h &lt;= K, which it received from the SHs. The SR MUST 
&gt; 		receive exactly K pairs from exactly K SHs. I MUST be exactly one secret 
&gt; 		share pair from each, of this K, SH.

What is "I" here?

&gt; 		The Lagrange basis polynomials are given by 
&gt; 			
&gt; 			l_h[X]:= PRODUCT(1 &lt;= m &lt;= K AND m != h, (X - x_m)/(x_h - x_m))
&gt; 		
&gt; 		with 1 &lt;= j &lt;= K. This leads to our original secret keeping polynomial
&gt; 
&gt; 			g[X] := SUM(h=1, K, y_h*l_h[x] mod p)
&gt; 
&gt; 		and the given secret by s = g[0].

You don't actually have to reconstruct the whole polynomial.  It's
easier to just compute g[0] directly by plugging X=0 into the definition
of l_h[X] above, to yield:

        l_h[0] := PRODUCT(1 &lt;= m &lt;= K AND m != h, x_m / (x_m - x_h))
        g[0] := SUM(h=1, K, y_h * l_h[0])

This step will also of course change if you want to handle more than K
shares or incorrect shares.

&gt; 		=&gt; TODO: From which K out of N SHs come this secret shares?
&gt; 	
&gt; 		=&gt; TODO: Are more (size) information necessary? E.g. amount of bits/bytes?
&gt; 			I think so.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170927214642</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2017-09-27 21:46:42-0400</timestampReceived><subject>Re: [tor-dev] User perception of the prop224 domain format</subject><body>

On Wed, Sep 27, 2017 at 10:25:04PM +0100, Ben Laurie wrote:
&gt; On 27 September 2017 at 21:26, Philipp Winter &lt;phw@nymity.ch&gt; wrote:
&gt; &gt; However, our survey data is likely biased towards a particularly young
&gt; &gt; and educated crowd that's presumably less bothered by technological
&gt; &gt; hurdles, which may be why they can afford to care more about content.
&gt; 
&gt; Your survey is obviously massively biased towards users of Tor.

It's *only* Tor users, to be precise.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170920002941</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-09-20 00:29:41-0400</timestampReceived><subject>Re: [tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

On Tue, Sep 19, 2017 at 8:13 PM, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:
&gt; Resending from a subscribed address.
&gt;
&gt; On Tue, Sep 19, 2017 at 05:44:46PM +0300, George Kadianakis wrote:
&gt;&gt; Hello Ian, (and other cryptographers on the list)
&gt;&gt;
&gt;&gt; here is a quick question which you might be able to answer super fast:
&gt;&gt;
&gt;&gt; Legacy RENDEZVOUS1 cells are bigger than the prop224 ones. The prop224
&gt;&gt; spec suggests we pad the new cells so that they look similar in size to
&gt;&gt; the legacy ones.
&gt;&gt;
&gt;&gt; Here is how the legacy ones look like:
&gt;&gt;
&gt;&gt;        RC       Rendezvous cookie  [20 octets]
&gt;&gt;        g^y      Diffie-Hellman     [128 octets]
&gt;&gt;        KH       Handshake digest   [20 octets]
&gt;&gt;
&gt;&gt; Here is how the prop224 ones look like:
&gt;&gt;
&gt;&gt;        RENDEZVOUS_COOKIE          [20 bytes]
&gt;&gt;        HANDSHAKE_INFO             [64 bytes]
&gt;&gt;
&gt;&gt; The suggestion is to pad the prop224 cells to 168 bytes using random data.
&gt;&gt;
&gt;&gt; Would that work? My main question is whether the g^y part of the legacy
&gt;&gt; cell has any distinguishers that could distinguish it from random data.
&gt;&gt; It's encoded using OpenSSL's BN_bn2bin() and it's a 1024 bit DH public
&gt;&gt; key. Are there any algebraic or openssl structure distinguishers we
&gt;&gt; should be worrying about, or is random data sufficient to mask it out?
&gt;&gt;
&gt;&gt; Thanks!!! :)
&gt;
&gt; Is your goal that someone who sees the *plaintext* of that cell won't be
&gt; able to tell if it's a legacy RENDEZVOUS1 cell or a new one?  If so,
&gt; life is a bit complicated, since the g^y field will always be in the
&gt; prime-order subgroup.  (Note: I'm not actually 100% sure Tor uses a
&gt; generator of the prime-order subgroup for g in this part of the spec.
&gt; But it should have, and so hopefully did.)
&gt;
&gt; If HANDSHAKE_INFO || PADDING_64 (the latter being the first 64 bytes of
&gt; the padding) is _not_ in the prime-order subgroup, the observer will be
&gt; sure it's a prop224 cell.  If it _is_, the observer can't tell.
&gt;
&gt; If that's undesirable, you could always insist that PADDING_64 be chosen
&gt; such that HANDSHAKE_INFO || PADDING_64 _is_ in the prime-order subgroup.
&gt; Raise it to the power of the prime order q to check; if the result is
&gt; 1, you're good.  You'll need to try on average (p-1)/q random values of
&gt; PADDING_64 before you get a good one.  (NOTE: *NOT* CONSTANT TIME.)  If
&gt; p = 2q+1, that's just 2, so not *terrible*, but 2 1024-bit modexps might
&gt; still be annoying.  If for some reason p is a DSA modululus or something
&gt; bizarre like that, life is much more annoying.  (I hope it's not.)  This
&gt; is all assuming p is of the form 2^1024 - (some number at most say
&gt; 2^960), so that HANDSHAKE_INFO || PADDING_64 won't be larger than p
&gt; itself, which would be another problem.
&gt;
&gt; To be sure, what are the g and p values used in this particular
&gt; Diffie-Hellman?

This is the old, old, old group:

   For Diffie-Hellman, unless otherwise specified, we use a generator
   (g) of 2.  For the modulus (p), we use the 1024-bit safe prime from
   rfc2409 section 6.2 whose hex representation is:

     "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08"
     "8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B"
     "302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9"
     "A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6"
     "49286651ECE65381FFFFFFFFFFFFFFFF"
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170920005712</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-09-20 00:57:12-0400</timestampReceived><subject>Re: [tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

On Tue, Sep 19, 2017 at 08:29:41PM -0400, Nick Mathewson wrote:
&gt; &gt; Is your goal that someone who sees the *plaintext* of that cell won't be
&gt; &gt; able to tell if it's a legacy RENDEZVOUS1 cell or a new one?  If so,
&gt; &gt; life is a bit complicated, since the g^y field will always be in the
&gt; &gt; prime-order subgroup.  (Note: I'm not actually 100% sure Tor uses a
&gt; &gt; generator of the prime-order subgroup for g in this part of the spec.
&gt; &gt; But it should have, and so hopefully did.)
&gt; &gt;
&gt; &gt; If HANDSHAKE_INFO || PADDING_64 (the latter being the first 64 bytes of
&gt; &gt; the padding) is _not_ in the prime-order subgroup, the observer will be
&gt; &gt; sure it's a prop224 cell.  If it _is_, the observer can't tell.
&gt; &gt;
&gt; &gt; If that's undesirable, you could always insist that PADDING_64 be chosen
&gt; &gt; such that HANDSHAKE_INFO || PADDING_64 _is_ in the prime-order subgroup.
&gt; &gt; Raise it to the power of the prime order q to check; if the result is
&gt; &gt; 1, you're good.  You'll need to try on average (p-1)/q random values of
&gt; &gt; PADDING_64 before you get a good one.  (NOTE: *NOT* CONSTANT TIME.)  If
&gt; &gt; p = 2q+1, that's just 2, so not *terrible*, but 2 1024-bit modexps might
&gt; &gt; still be annoying.  If for some reason p is a DSA modululus or something
&gt; &gt; bizarre like that, life is much more annoying.  (I hope it's not.)  This
&gt; &gt; is all assuming p is of the form 2^1024 - (some number at most say
&gt; &gt; 2^960), so that HANDSHAKE_INFO || PADDING_64 won't be larger than p
&gt; &gt; itself, which would be another problem.
&gt; &gt;
&gt; &gt; To be sure, what are the g and p values used in this particular
&gt; &gt; Diffie-Hellman?
&gt; 
&gt; This is the old, old, old group:
&gt; 
&gt;    For Diffie-Hellman, unless otherwise specified, we use a generator
&gt;    (g) of 2.  For the modulus (p), we use the 1024-bit safe prime from
&gt;    rfc2409 section 6.2 whose hex representation is:
&gt; 
&gt;      "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08"
&gt;      "8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B"
&gt;      "302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9"
&gt;      "A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6"
&gt;      "49286651ECE65381FFFFFFFFFFFFFFFF"

I confirm that both things I supposed about the group above are true: g
generates the prime-order subgroup, and p is near to 2^1024.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170920042103</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-09-20 04:21:03-0400</timestampReceived><subject>Re: [tor-dev] Padding prop224 REND1 cells to blend them with legacy cells</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 20 Sep 2017, at 00:44, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Legacy RENDEZVOUS1 cells are bigger than the prop224 ones. The prop224
&gt; spec suggests we pad the new cells so that they look similar in size to
&gt; the legacy ones.
&gt; 
&gt; ...
&gt; 
&gt; The suggestion is to pad the prop224 cells to 168 bytes using random data.
&gt; 
&gt; Would that work? My main question is whether the g^y part of the legacy
&gt; cell has any distinguishers that could distinguish it from random data.
&gt; It's encoded using OpenSSL's BN_bn2bin() and it's a 1024 bit DH public
&gt; key. Are there any algebraic or openssl structure distinguishers we
&gt; should be worrying about, or is random data sufficient to mask it out?

What's the threat model here?

I ask because regardless of whether the RENDEZVOUS1 cell plaintext is
distinguishable between v2 and v3, the rend point can distinguish v2 and
v3 using this one neat trick:
* if the service extends using TAP, the protocol is v2
* if the service extends using ntor, the protocol is v3

v2 and v3 are also distinguishable in these cases:
* intro points, using the client extend
* Tor2web and single onion services, except that they connect directly,
  then do a TAP or ntor handshake.

That said, if you want to make v3 and future (v4+) rend protocols
indistinguishable, then it might be a good idea to pad the entire cell
with random bytes. That allows future protocols to add fields safely, as
long as they are encrypted in a way that is indistinguishable from
random.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZweyvAAoJEHQNnjkCUnKifoUP/iVele4UvO5Vl+UJNh/mzJ/L
NbLlTtyNju/T/aPUqjcfJljx0KCexjNKTThzBDAlAcW7rHlT/PNW65uGpK8ZTwXb
vvOpEbxNiOCIQqdCEZKgnXjKUkPTacGocku9cWBn1dbVTaf3PJwEUnkVKUvFZWkd
cQElMJodsgb81zb/IrLuZQLxy7lvRnlgm56rfWRqg7sm+RDxCpEWV8udgRlPnDQO
MPSlbxwq1tqTX0zwXYsa2fQfM2pRfwzFB1j9TDaB7lHdq6vJsAybVtJlBpjYzsQ5
cXeUdtht0xsyVyd+gbuXhC0A3c98It6153wNCKhbtQ+FhxnAVyvpb/yyzGLmDgPr
TvCQRb+bIwPt8HdLNTxY1NGqL3d4nuQkDvMkIONEieGvZhNoek4pdbuK6/M4ABhq
C0/+0UoD4MKjJPiUukK69qMGXjaX4Yc5vQCf9eoKbqIkSJgZ+oXFk0hyW3CHLygT
L/R0WGxgQc0+t/qqwlqIN6M725+4mw80PG2/8IRwP1wYsJZS9NblLq4kQ0kl3oEI
NTMUoUjvOlIWS7VTdvC9L42DHP2/lxaPEDwZceMbGhXnDgzOwAlKrXemTOmJyiwv
xde/VLrzs5M7SpUDYxULXp9/GeGGF6wMNy9pS1LM5AdGp3j3JiCvdsPYwbRFKgyw
QtLkdEnpkJ8yvkk7L99T
=AzmV
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170918022511</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-09-18 02:25:11-0400</timestampReceived><subject>Re: [tor-dev] Auto-senescence and/or CW penalty for a less outdated tor network?</subject><body>

[Attachment #2 (multipart/signed)]


Hi nusenu,

This looks like it needs a proposal: I think we might have some
similar proposals already.

&gt; On 17 Sep 2017, at 20:48, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; 1) Auto-senescence
&gt; -------------------

I think automatic timed shutdown can be unhelpful or dangerous:
* what if we need it earlier due to a severe bug or mandatory feature?
* what if it isn't needed, and the relay version is fine?

&gt; 2) consensus weight penalty for outdated relays
&gt; -----------------------------------------------

I can't see much point in this: if the relays are insecure, they
should be eliminated. If not, they should be used.

&gt; 3) update tor dir auth code to reject old tor releases (not include them
&gt; in consensus)
&gt; -------------------------------------------------------------------------
&gt; 
&gt; As soon as a tor directory operator updates to a new release the dirauth
&gt; would no longer vote for specific tor versions (I guess this is the
&gt; current mostly manual approach).
&gt; 
&gt; Another important aspect is the practical reality in current package
&gt; repositories, but I simply assume they will follow LTS releases and are
&gt; fine with the 4 years (3+grace period) lifespan.

In the past, we've excluded relay versions when they don't have a
required feature. For example:

0.2.4.8-alpha is the first version that supports ntor onion keys, so
earlier versions and relays without ntor onion keys are excluded

0.2.4.18-rc doesn't believe enough current directory authorities, so
it is excluded (we may have to re-do the minimum version when we get a
9th directory authority, or if authorities change)

0.2.9.0-alpha to 0.2.9.5-alpha deliver expired consensuses to clients,
so they are excluded

In the future, when we require network-wide features, we will exclude
versions that don't support this feature. And similarly with a number
of newer protocol features.

I can't think of any other bugs or features that have this significant
an impact. But if they are, we can use this manual process.

We have a ticket to make a plan to kill off old client versions:
https://trac.torproject.org/projects/tor/ticket/15940
But there's no equivalent ticket for relay versions.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZvy6HAAoJEHQNnjkCUnKiTGIP/jhfVOy3DCYQh7ZQTxc36NGt
2HKfariLCDugqyBQd2bImye9cQQZBLeM3Kj9qRo7DzLXpFk6d6v+FgqFH8rvJpMr
97bes7vAx6NaO90SEkCa1VjFz/SjlPwB0jBQerKKCkKksUXNWlSua7ZvWBnWDlcr
ynuwoMe8NkE21omIbTg6KZTsInsPpALoGU4KWaI6uxawstRoR/DKRV6xwBoNmiG9
5tYbs0JTR0ifDee8I1ZgKnJAkrPKjQl8QaBjGMzWRK3pC4KtB0WLc08Pi6QVmDWV
Q7xlgyrvSEP+boXDVpJEzfhjjJEbUjT3Q0jzXJmP1WreczUVWZgWEaxPe31s23vk
hDYe6ET/QWditqKMHms54zgmyost7xacLd0kcs3LUU7RXyFq2dpCPihyjEZvHtSr
y2OaVyAtZZJoMqB4Z4JWVvlgdpB7Di9kdxiuaCgaGBM4lqK9z15IjGNrm4GFY62O
vTVxQDPjSwB6bQRyedXOh8FL0bVJ/ebGX8GjDIijFlGmC+/9fZeLERKca8NGP/7Y
VsqvUN9Fzi/v9bEpLwFqZEAqICaG9/2G8cjcvLTTrTZ2Fgq98cUqDmgkxqqy5kpW
Nt0+q6SqPkkpA4dqeD8rB0Swuj7bUQQc8MuEVUJeoS4guMYm+7LscWqRsxpErb5l
bs7/9wjqxfa19vIRZiXe
=obcX
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170822184706</emailId><senderName>Peter Schwabe</senderName><senderEmail>peter@cryptojedi.org</senderEmail><timestampReceived>2017-08-22 18:47:06-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:

Hi Yawning, hi all,

&gt; Ultimately none of this matters because Prop. 261 is dead in the
&gt; water.  Assuming people want the new cell crypto to be both fragile and
&gt; to resist tagging attacks, Farfalle may be a better choice, assuming
&gt; there's a Keccak-p parameterization such that it gives adequate
&gt; performance.

At what number of cycles/block on what architecture(s) would you call
the performance "adequate"?

Cheers,

Peter

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170902081608</emailId><senderName>Peter Schwabe</senderName><senderEmail>peter@cryptojedi.org</senderEmail><timestampReceived>2017-09-02 08:16:08-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:


Hi Yawning, hi all,

&gt; Note, I'm not hating on Farfalle, I need to look at it more, and the
&gt; last time I gave serious thought to this question in a Tor context was
&gt; back around the time Prop 261 was being drafted.
&gt; 
&gt; The answer to this from my point of view is "not slow to the point
&gt; where the network falls over", which I'll admit is extremely handwavy,
&gt; but truth be told, I have no idea what fraction of the relays are on
&gt; what micro architectures these days.
&gt; 
&gt; Looking at the Farfalle and Kangaroo 12 papers, Kravette may be ok with
&gt; AVX2 assuming I'm extrapolating correctly.  But, while it's probably
&gt; reasonable to assume that all the fast existing relays have AES-NI, I
&gt; do not know what fraction of those predate AVX2.

You should end up with something like 13 cycles per byte for Farfalle
with the Keccak permutation on Skylake. Would there be some way to test what
effects this has on overall performance without harming any users?

If this is *clearly* too slow, then it might be interesting to try the
Farfalle construction with different permutations to see how far you can
push performance.

Cheers,

Peter

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170918010428</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-09-18 01:04:28-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

On Sat, Sep 2, 2017 at 4:16 AM, Peter Schwabe &lt;peter@cryptojedi.org&gt; wrote:
&gt; Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt;
&gt;
&gt; Hi Yawning, hi all,
&gt;
&gt;&gt; Note, I'm not hating on Farfalle, I need to look at it more, and the
&gt;&gt; last time I gave serious thought to this question in a Tor context was
&gt;&gt; back around the time Prop 261 was being drafted.
&gt;&gt;
&gt;&gt; The answer to this from my point of view is "not slow to the point
&gt;&gt; where the network falls over", which I'll admit is extremely handwavy,
&gt;&gt; but truth be told, I have no idea what fraction of the relays are on
&gt;&gt; what micro architectures these days.
&gt;&gt;
&gt;&gt; Looking at the Farfalle and Kangaroo 12 papers, Kravette may be ok with
&gt;&gt; AVX2 assuming I'm extrapolating correctly.  But, while it's probably
&gt;&gt; reasonable to assume that all the fast existing relays have AES-NI, I
&gt;&gt; do not know what fraction of those predate AVX2.
&gt;
&gt; You should end up with something like 13 cycles per byte for Farfalle
&gt; with the Keccak permutation on Skylake. Would there be some way to test what
&gt; effects this has on overall performance without harming any users?
&gt;
&gt; If this is *clearly* too slow, then it might be interesting to try the
&gt; Farfalle construction with different permutations to see how far you can
&gt; push performance.

I think the first step here is to instrument relays to figure out what
fraction of their cryptography is relay cell cryptography: this could
tells us what slowdown we should expect.  (It _should_ be about a
third of our current cell crypto load, but surprises have certainly
been known to happen!)

The current performance we have is much faster than 13 cpb -- we're at
approximately one AES, plus one third of a SHA1.  (The "one third" is
because only clients and exits do the SHA1 step.)

It would be hard to experiment to see whether some slowdown would be
acceptable: the problem is that the major increase in load would be at
the relay side -- and it's hard to tell the impact of putting more
load on relays on the actual network without actually doing it.

Yawning is right that doing multithreaded cell crypto is important
here too: there are unused cores at the moment.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170821035616</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-21 03:56:16-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Aug 2017, at 13:36, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt; all show a big increase in sent bytes starting at the end of July.
&gt; 
&gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt; in the last two weeks.
&gt; 
&gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt; going back to the old rate.
&gt; 
&gt; I would assume it's outgoing directory stuff, since that's most of what
&gt; dir auths do.
&gt; 
&gt; Any guesses?

In July, Tor 0.3.0 became the most common relay version in the network,
growing at quite a rapid rate:

https://metrics.torproject.org/versions.html

There doesn't seem to be any corresponding Tor Browser release in that
timeframe:

3 July: https://blog.torproject.org/blog/tor-browser-702-released
8 August: https://blog.torproject.org/blog/tor-browser-704-released

(Our estimates suggest that half the load on directory authorities is
from relays, and half is from clients.)

I wonder if the new guard selection algorithm, or some other relay
change, is causing relays to download more descriptors from more
directory authorities?

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZmlngAAoJEHQNnjkCUnKiqXEQAJ6kuMnxYbZrsQxuwNR3xZqM
gqBXMgGAKTI/pKLr7c/HATDMJvHYUXbuP2wc3BtCWeW0Bj4NaiNoOG2LJ+NRg1W2
RwnCiMDD99VMR+hgRKYfShyx7LB3UJMFG+qb+jtsoDqhxf/bsEXMIeFSTjgCffOf
FXhhioITW0dCBtc3tRoMlHcAxJ7KzGTmOMU09zN8gKye71cDZ4IBOJuEskVYGMPx
lJRuOxa791wF00KG7aZ4xxWVqfl1enAYQRWZyQIniNAYC9Pbfjc4MZtRtCZnSzB+
zl2976GI+jV1DP8jISkjOlB9mIrUG6EljwjpU5senH/ddvSv9pCP6RSeI52mZ5VY
xJTKzNN5uvrfaQgWT0R3xfEgvKosM77VoqnuHIeil4kWnm2yB6BEcWI8a373nNHC
GUc8VKnYOBEL2e4x26H1nBMLopdWIXekluONfEoSPNfj1sBqlzy+fdTq5VSqml26
iPx5s0JrJ5qHCIEr1Lex4PBgNzVOcVWPABF7u9daPPhljtTfwukBhBYxx/vBckKp
0YiJUXnUFWbKMM+VISMSWmvzg6nSBiF0lJ+sFl5I7kWh8IzgIHB18klYVRcVTuPY
m8/VeVO+Znvp7PUOgs5UoyuXkh9KbtaTCgPntzX8QxlUwrAv4spbXlPGBvIg45aF
9lHVDd+dHssoLmAwxtZA
=c8uj
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170821040529</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-08-21 04:05:29-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

On Mon, Aug 21, 2017 at 01:56:16PM +1000, teor wrote:
&gt; 
&gt; &gt; On 10 Aug 2017, at 13:36, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; &gt; 
&gt; &gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt; &gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt; &gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt; &gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt; &gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt; &gt; all show a big increase in sent bytes starting at the end of July.
&gt; &gt; 
&gt; &gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt; &gt; in the last two weeks.
&gt; &gt; 
&gt; &gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt; &gt; going back to the old rate.
&gt; &gt; 
&gt; &gt; I would assume it's outgoing directory stuff, since that's most of what
&gt; &gt; dir auths do.
&gt; &gt; 
&gt; &gt; Any guesses?
&gt; 
&gt; In July, Tor 0.3.0 became the most common relay version in the network,
&gt; growing at quite a rapid rate:
&gt; 
&gt; https://metrics.torproject.org/versions.html
&gt; 
&gt; There doesn't seem to be any corresponding Tor Browser release in that
&gt; timeframe:
&gt; 
&gt; 3 July: https://blog.torproject.org/blog/tor-browser-702-released
&gt; 8 August: https://blog.torproject.org/blog/tor-browser-704-released

2 July is when deb.torproject.org switched to 0.3.0.

nusenu noted it here:
https://twitter.com/nusenu_/status/884128686764687361

I added a line already to
https://trac.torproject.org/projects/tor/wiki/doc/MetricsTimeline
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170821043638</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-21 04:36:38-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Aug 2017, at 14:05, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; On Mon, Aug 21, 2017 at 01:56:16PM +1000, teor wrote:
&gt;&gt; 
&gt;&gt;&gt; On 10 Aug 2017, at 13:36, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt;&gt;&gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt;&gt;&gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt;&gt;&gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt;&gt;&gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt;&gt;&gt; all show a big increase in sent bytes starting at the end of July.
&gt;&gt;&gt; 
&gt;&gt;&gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt;&gt;&gt; in the last two weeks.
&gt;&gt;&gt; 
&gt;&gt;&gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt;&gt;&gt; going back to the old rate.
&gt;&gt;&gt; 
&gt;&gt;&gt; I would assume it's outgoing directory stuff, since that's most of what
&gt;&gt;&gt; dir auths do.
&gt;&gt;&gt; 
&gt;&gt;&gt; Any guesses?
&gt;&gt; 
&gt;&gt; In July, Tor 0.3.0 became the most common relay version in the network,
&gt;&gt; growing at quite a rapid rate:
&gt;&gt; 
&gt;&gt; https://metrics.torproject.org/versions.html
&gt;&gt; 
&gt;&gt; There doesn't seem to be any corresponding Tor Browser release in that
&gt;&gt; timeframe:
&gt;&gt; 
&gt;&gt; 3 July: https://blog.torproject.org/blog/tor-browser-702-released
&gt;&gt; 8 August: https://blog.torproject.org/blog/tor-browser-704-released
&gt; 
&gt; 2 July is when deb.torproject.org switched to 0.3.0.

We merged a fallback directory mirror change to 0.2.8 and later in
mid-May, but I think that's too far back. (The actual releases were
up to a month later.)

https://trac.torproject.org/projects/tor/ticket/21564

If we want to reduce the load on authorities, we can backport this
change, which makes clients try fallbacks before authorities:

https://trac.torproject.org/projects/tor/ticket/17750

It's been in master (0.3.2) for almost 2 months now.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZmmNWAAoJEHQNnjkCUnKiqKAP/RmYBKTiW/Zq7Bbb8yfB1x4/
bbtZonHFbjh93Wz4dUieeX+gTPRyUQjFAXQxgxbTRc8mveEGCycHWL8BfUVD+Ni9
h/Yk0f6+5fiybVptYnikCaA4gGOxML8emfxmKw6Q9qv1ddbvTdjHUoudvFRcBjvY
pibFIGi8p5oUUiE5uYOwXV6TpfqQNe4GFIhTnW1hopdzkw26nJFN+CkVCps0Ze1/
ffTe8hS8qVlgZxjQXegzhXkxkyvnSxWr7sJUtUXW/NYvlpdhfq77uOn3hqTZC251
9/kHa98v7DEI2+wtPloSVLXc786R96eYTLEJXyS16HHRslBn+lazFSbL3nVGYLt5
i3927cfFKAPW/8PKQ4buxAYhKG0W3n4xOTRSCFtopxkKnRBt6EID/vnKi9JwyDQU
RAMbLmzr+JTHowbPZaeTIxZAnlf/4u4ouTIqAXWvVA1LvFrcQ6kmOWjF8jMKhfed
uvp3R8NhPSSIilZrtjD2IBTBMahLeB5diF/9+0PQkAlinXB+wmoL/TftMjRo0lsb
vJ5aBDLy6NgO6KW8gmbNFZyKxlsj9fBNogdczwZRs+6QPl54A+xKiPocJSKvwJ9S
s+SAkvwygaimQBT5kgihAbrYBEJhvytRr1JB1VfLsy1suA+BUGXI/LFWRv2M213r
3shPdfwwQn/SFVa8p08o
=MfiQ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170917233213</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-09-17 23:32:13-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

On Wed, Aug 09, 2017 at 11:36:27PM -0400, Roger Dingledine wrote:
&gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt; all show a big increase in sent bytes starting at the end of July.
&gt; 
&gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt; in the last two weeks.
&gt; 
&gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt; going back to the old rate.
&gt; 
&gt; I would assume it's outgoing directory stuff, since that's most of what
&gt; dir auths do.
&gt; 
&gt; Any guesses?

Well, whatever it was, it settled out -- back to normal -- once August
ended.

https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170921122254</emailId><senderName></senderName><senderEmail>vmon</senderEmail><timestampReceived>2017-09-21 12:22:54-0400</timestampReceived><subject>[tor-dev] Anybody from Tor wants to participate at the pluggable transport meeting?</subject><body>

Hello Tor people,

Dlshad (dothman@internews.org) from Internews has reached out to me
to see if anybody from Tor is interested to participate in the next PT
community meeting happening in Boston just after Tor-dev meeting. My
understanding is that they'll book your ticket and arrange the
accommodation for you.

"I wanted to reach out to you and see if someone from Tor can join the
Pluggable Transports community meeting which is going to be in Boston
October 16-18. In this meeting, the community will discuss and go
through the current draft of PT Spec
https://www.pluggabletransports.info/spec/ and then release it. The rest
of the meeting will be focusing on PT implementation."

Cheers,
vmon
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170925190303</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-09-25 19:03:03-0400</timestampReceived><subject>Re: [tor-dev] Does "ar: `u' modifier ignored since `D' is the default (see `U')" warning qualify as </subject><body>

[Attachment #2 (multipart/signed)]


Patrick Durusau transcribed 3.2K bytes:
&gt; Hello,
&gt; 
&gt; Running Ubuntu 16.04, using:
&gt; https://gitweb.torproject.org/tor.git/tag/?h=tor-0.3.2.1-alpha
&gt; 
&gt; Following:
&gt; https://lists.torproject.org/pipermail/tor-project/2017-September/001449.html
&gt; and I get this warning 17 times from make:
&gt; 
&gt; ar: `u' modifier ignored since `D' is the default (see `U')
&gt; 
&gt; I traced this back to line 187 in Makefile.in
&gt; 
&gt; ARFLAGS = cru
&gt; 
&gt; Correcting to:
&gt; 
&gt; ARFLAGS = cr
&gt; 
&gt; src compiles sans the warnings.
&gt; 
&gt; Is that a bug meriting a ticket?
&gt; 
&gt; My primary strength is documentation and making mistakes in following
&gt; it. ;-)
&gt; 
&gt; Hope everyone is looking forward to a great weekend!
&gt; 
&gt; Patrick

Hi Patrick,

Do you know if the `D` flag is enabled by default on platforms other than
Ubuntu?  (I would worry that removing `u` on platforms which don't have `D`
enabled by default could break our reproducible builds.)

Please feel free to open a ticket if you're so inclined.

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170926161428</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-09-26 16:14:28-0400</timestampReceived><subject>[tor-dev] Tor 0.3.1 -&gt; 0.3.2 coverage update</subject><body>

So, here's some good news about unit test coverage (as measured by
'make check') in 0.3.2:

Our (line) test coverage rate is up, from 52.88% to 54.72%.

But here is some bad news:

The number of uncovered lines has still increased (from 30860 to
31608), even though covered lines have increased more rapidly.

If you're interested in tracking down where we need coverage, I have
used our "cov-diff" tool to generate a cleaned diff from the old
coverage to the new coverage.  You can download it (it's big!) from
   https://people.torproject.org/~nickm/volatile/coverage-diff.xz

The format is: it is a diff between normalized gcov output files. To
find new or modified un-covered lines, look for lines that begin with
the regex
/^\+ *\#/
("starts with a plus, then some spaces, then a #").

Any lines like this are good candidates for additional testing IMO.

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170927221246</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-09-27 22:12:46-0400</timestampReceived><subject>Re: [tor-dev] User perception of the prop224 domain format</subject><body>

[Attachment #2 (multipart/alternative)]


On 27 September 2017 at 22:25, Ben Laurie &lt;ben@links.org&gt; wrote:

&gt; Your survey is obviously massively biased towards users of Tor. It
&gt; would be really interesting to know what non-users think.


 Yes and no; I can totally see that from a user-experience perspective, it
would be exciting research to rock up to someone and say:

    "Here's a really long URL, how does it make you feel?"

…and (at least) in this matter, Prop224 Onion addresses are subjectively
less intimidating than:

    https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/foo.html

…even though both of them are representations of Layer-3/similar
machine-readable addresses*

*However*, there is such a thing as "inviting people to beat you up in such
a way as to draw media criticism without plausible likelihood for
constructive input", and I feel that this would be onesuch.

Experiential evidence:

1) the number of people who've told me in-past that Email addresses are
unusably unmemorable, except somehow 30..40 years later we are still using
them, and have developed coping strategies, eg: address books.

2) the number of people who've told me in-past that IPv4 addresses are
unusably unmemorable, except for 8.8.8.8 and 192.168.1.1 which somehow are
enough for people to bootstrap access to the rest of the internet, and use
various coping strategies (eg: DNS, bookmarks)

3) the number of people who've told me in-past that Old-Style Onion
addresses are unusably unmemorable, until (as mentioned above) Facebook and
a few other good ones got mined, and people started taking Onion networking
mildly seriously as a means of more-secure enterprise communication… Oh,
and bookmarks as a coping strategy.

4) phone numbers. unusably unmemorable. coping strategies: in-phone address
books + address-book synchronisation. etc etc etc.


So: can we do better with Onion UX? Certainly.

Should we research improvements to user experience? Absolutely.

Should Tor invite opinionated people to come piss all over its equivalent
of https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/foo.html? Probably
not. Just my opinion. I don't feel it would benefit anyone except (a)
haters, and (b) academics who research only "what doesn't work" because
researching "what /does/ work" is beyond the scope of their funding.

     -a

* explanatory thread:
https://twitter.com/AlecMuffett/status/802161730591793152

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 27 September 2017 \
at 22:25, Ben Laurie &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:ben@links.org" \
target="_blank"&gt;ben@links.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Your survey is obviously massively biased towards \
users of Tor. It&lt;br&gt; would be really interesting to know what non-users \
think.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Yes and no; I can totally see that from a \
user-experience perspective, it would be exciting research to rock up to someone and \
say:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      "Here's a really long URL, how does it \
make you feel?"&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;…and (at least) in this matter, \
Prop224 Onion addresses are subjectively less intimidating \
than:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      \
https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/foo.html&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;…even \
though both of them are representations of Layer-3/similar machine-readable \
addresses*&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;However&lt;/i&gt;, there is such a thing as \
"inviting people to beat you up in such a way as to draw media criticism without \
plausible likelihood for constructive input", and I feel that this would be \
onesuch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Experiential evidence:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) \
the number of people who've told me in-past that Email addresses are unusably \
unmemorable, except somehow 30..40 years later we are still using them, and have \
developed coping strategies, eg: address books.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2) the \
number of people who've told me in-past that IPv4 addresses are unusably \
unmemorable, except for 8.8.8.8 and 192.168.1.1 which somehow are enough for people \
to bootstrap access to the rest of the internet, and use various coping strategies \
(eg: DNS, bookmarks)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3) the number of people who've told \
me in-past that Old-Style Onion addresses are unusably unmemorable, until (as \
mentioned above) Facebook and a few other good ones got mined, and people started \
taking Onion networking mildly seriously as a means of more-secure enterprise \
communication… Oh, and bookmarks as a coping strategy.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4) \
phone numbers. unusably unmemorable. coping strategies: in-phone address books + \
address-book synchronisation. etc etc \
etc.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So: can we do better with Onion UX? \
Certainly.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Should we research improvements to user \
experience? Absolutely.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Should Tor invite opinionated people \
to come piss all over its equivalent of \
https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/foo.html? Probably not. Just my \
opinion. I don't feel it would benefit anyone except (a) haters, and (b) \
academics who research only "what doesn't work" because researching \
"what /does/ work" is beyond the scope of their \
funding.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;        -a&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* explanatory \
thread: &lt;a href="https://twitter.com/AlecMuffett/status/802161730591793152"&gt;https://twitter.com/AlecMuffett/status/802161730591793152&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170929003916</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2017-09-29 00:39:16-0400</timestampReceived><subject>Re: [tor-dev] PrivCount - Draft of secret-sharing specification</subject><body>

Hi,

thank you for your feedback!

I have to say this....

Am Donnerstag, den 28.09.2017, 14:35 -0400 schrieb Ian Goldberg:
&gt; My earlier mail in this thread bounced for Reasons.  Here it is again.
&gt; 
&gt;    - Ian
&gt; 
&gt; Thanks for the writeup!  Some notes inline.
&gt; 
&gt; On Mon, Sep 25, 2017 at 09:26:13AM +0200, Carolin Zöbelein wrote:
&gt; &gt; 1. Introduction
&gt; &gt; 
&gt; &gt; 	Assume, we have a given secret s which we want to share with a particular
&gt; &gt; 	number N of participants who are only together be able to reconstruct it.
&gt; &gt; 	To realize this, we can split our secret in n parts s_i. Our secret will be 
&gt; &gt; 	then the sum over all s_i. This is the simplest secret sharing scheme at all.
&gt; &gt; 	Since it needs all participants for the reconstruction, it is called a (N,N) 
&gt; &gt; 	treshold secret sharing algorithm.
&gt; &gt; 
&gt; &gt; 	But we also see that it has weaknesses. With every leaked share s_i, an 
&gt; &gt; 	adversary can reduce the number of possible soulutions for our secret very
&gt; &gt; 	easily. This leads to the group of more efficient secret sharing algorithms.
&gt; 
&gt; This is not true.  Even if N-1 of the shares are exposed, *zero
&gt; information* about the secret is leaked!
&gt; 

... is of course, very big trash which I wrote in the proposal.

Why did I write this? I don't know. I think I had Gaussian elimination
in my mind which is absolute nonsense if you only have one equation, of
course! *argh*

Sometimes, by brain does strange things ;)

I have some comments to the other things you pointed out. I will follow
up with some emails, tomorrow.

Bye and thank you for your help!
Carolin 
-- 
-----------------------------------------------------------------------
Carolin Zöbelein / Nick: Samdney
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
-----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170807175037</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-08-07 17:50:37-0400</timestampReceived><subject>Re: [tor-dev] Proposal 280: Privacy-Preseving Statistics with Privcount in Tor</subject><body>

[reposting this message with permission.  It is a reply that I sent to
Aaron, where I quoted an email from him about this proposal. Tim and
Aaron had additional responses, which I'll let them quote here or not
as they think best.]


On Sat, Aug 5, 2017 at 1:38 PM, Aaron Johnson
&lt;aaron.m.johnson@nrl.navy.mil&gt; wrote:
 [...]
&gt; - There are a couple of documents in PrivCount that are missing: the deployment \
&gt; document and the configuration document. These set up things like the \
&gt; identities/public keys of the parties, the planned time of the measurements, the \
&gt; statistics to be computed, the noise levels to use. They were required to be agreed \
&gt; on by all parties. These values must be agreed upon by all parties (in some cases, \
&gt; such as disagreement about noise, the security/privacy guarantees could otherwise \
&gt; fail). How do you plan to replace these?

So, I hadn't planned to remove these documents, so much as to leave
them out of scope for this proposal.  Right now, in the code, there's
no actual way to configure any of these things.

Thinking aloud:

I think we should engineer that piece by piece.  We already have the
consensus directory system as a way to communicate information that
needs to be securely updated, and where everybody needs to update at
once, so I'd like to reuse that to the extent that it's appropriate.

For some parts of it, I think we can use versions and named sets.  For
other parts, we want to be flexible, so that we can rotate keys
frequently, react to tally reporters going offline, and so on.  There
may need to be more than one distribution mechanism for this metainfo.

These decisions will also be application-dependent: I've been thinking
mainly of "always-on" applications, like network metrics, performance
measurement, anomaly-detection [*], and so on.  But I am probably
under-engineering for
"time-limited" applications like short-term research experiments.

&gt; - I believe that instead of dealing with Tally Reporter (TR) failures using \
&gt; multiple subsets, you could instead simply use (t,n) secret sharing, which would \
&gt; survive any t-1 failures (but also allow any subset of size t to determine the \
&gt; individual DC counts). The DC would create one blinding value B and then use Shamir \
&gt; secret sharing to send a share of B to each TR. To aggregate, each TR would first \
&gt; add together its shares, which would yield a share of the sum of the blinding \
&gt; values from all DCs. Then the TRs could simply reconstruct that sum publicly, \
&gt; which, when subtracted from the public, blinded, noisy, counts would reveal the \
&gt; final noisy sum. This would be more efficient than having each TR publish multiple \
&gt; potential inputs to different subsets of TRs.

So, I might have misunderstood the purpose here : I thought that the
instances were to handle misbehaving DCs as well as malfunctioning
TRs.


&gt; - Storing at the DC the blinded values encrypted to the TRs seems to violate \
&gt; forward privacy in that if during the measurement the adversary compromises a DC \
&gt; and then later (even after the final release) compromises the key of a TR, the \
&gt; adversary could determine the state of the DC's counter at the time of compromise. \
&gt; The also applies to the optimization in Sec. 6 where the blinding values where a \
&gt; shared secret is hashed to produce the blinding values.

Well, the adversary would need to compromise the key of _every_ TR in
at least one instance, or they couldn't recover the actual counters.

I guess we could, as in the original design (IIUC), send the encrypted
blinding values (or public DH key in sec 6) immediately from the DC
when it generates them, and then throw them away client-side.  Now the
adversary would need to break into all the TRs while they were holding
these encrypted blinding values.

Or, almost equivalently, I think we could make the TR public
encryption keys only get used for one round. That's good practice in
general, and it's a direction I generally like.

And of course, DCs should use a forward-secure TLS for talking to the
TRs, so that an eavesdropper doesn't learn anything.


[*] One anomaly detection mechanism I've been thinking of is to look
at different "protocol-warn" log messages.  These log messages
indicate that some third party is not complying with the protocol.
They're usually logged at info, since there's nothing an operator can
do about them, but it would be good for us to get notification if some
of them spike all of a sudden.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170808002509</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-08-08 00:25:09-0400</timestampReceived><subject>[tor-dev] =?utf-8?b?WDI1NTE5IOKGkOKGkiBFZDI1NTE5IGtleSBjb252ZXJz?= =?utf-8?q?ions_and_specs_=5Bwas=3</subject><body>

[Attachment #2 (multipart/signed)]


jnz@riseup.net transcribed 2.0K bytes:
&gt; Hey Isis,
&gt; 
&gt; I have a few crypto questions for you. The bonus question is purely out
&gt; of interest (I searched for the answer, but didn't get a
&gt; good/understandable answer, if you are busy don't worry about it).

Hey Jake!

I'm CCing the conversation to tor-dev, since these are all really good
questions.  (Also you found another problem in our specs!)

&gt; Q1. What does the bit argument in the the ntor-onion-key-crosscert field
&gt; do? 
&gt; 
&gt; The following is an example ntor-onion-key-crosscert field. The bit
&gt; argument is the "1" following ntor-onion-key-crosscert keyword.
&gt; 
&gt; &gt; ntor-onion-key-crosscert 1
&gt; &gt; -----BEGIN ED25519 CERT-----
&gt; &gt; AQoABl2EAdjttTuvK9jQzdyi+Mh46ky1Jk9+Hw+FJ6eos5zUxcBDAJF+TGU6oZij
&gt; &gt; DOToeg+/lIaEkv0RwIrl5aJta/jf2EdTgHRfCsMOLEWMfqjOA6pmkwc3jnWvWNms
&gt; &gt; 7NVBzUcMWgA=
&gt; &gt; -----END ED25519 CERT-----
&gt; 
&gt; Q2. The following sentence is the bit argument's documentation from the
&gt; dir-spec. Could you possibly explain to me what this means? What is a
&gt; public key's "sign"?
&gt; 
&gt; &gt; Bit must be "0" or "1".  It indicates the sign of the ed25519 public key \
&gt; &gt; corresponding to the ntor onion key.
&gt; 
&gt; The following paragraph is also in the dir-spec, I know that it is
&gt; relevant, but I don't understand what it means.
&gt; 
&gt; &gt; C. Converting a curve25519 public key to an ed25519 public key
&gt; &gt; 
&gt; &gt; Given a curve25519 x-coordinate (u), we can get the y coordinate
&gt; &gt; of the ed25519 key using
&gt; &gt; 
&gt; &gt; y = (u-1)/(u+1)
&gt; &gt; 
&gt; &gt; and then we can apply the usual ed25519 point decompression
&gt; &gt; algorithm to find the x coordinate of the ed25519 point to check
&gt; &gt; signatures with.
&gt; &gt; 
&gt; &gt; Note that we need the sign of the X coordinate to do this
&gt; &gt; operation; otherwise, we'll have two possible X coordinates that
&gt; &gt; might have correspond to the key.  Therefore, we need the 'sign'
&gt; &gt; of the X coordinate, as used by the ed25519 key expansion
&gt; &gt; algorithm.
&gt; &gt; 
&gt; &gt; To get the sign, the easiest way is to take the same private key,
&gt; &gt; feed it to the ed25519 public key generation algorithm, and see
&gt; &gt; what the sign is.
&gt; 
&gt; BONUS. What is the difference between a curve25519 public key and an
&gt; ed25519 public key? Why would you want to convert back and forth between
&gt; the two?

Okay, this is going to be a long answer.  Let me know if parts don't make
sense.

So, as you noted, dir-spec.txt says [0]:

&gt; Bit must be "0" or "1".  It indicates the sign of the ed25519
&gt; public key corresponding to the ntor onion key.
&gt; 
&gt; To compute the ed25519 public key corresponding to a
&gt; curve25519 key, see appendix C.

There are a few different representations of the curve over the Galois field
GF(2 ������� - 19) called curve25519.  The (arguably) most useful is the twisted
Edwards form of the curve (see our Rust documentation [1] for further
details on point forms and more literature) defined for affine points
P = (x,y) by the equation

    -x �+y � = 1 + dx �y �                             (1)

where

    d = - 121665/121666

This is due to the fact that efficient, complete formulae (meaning that the
same formulae, e.g. for point addition, can be used for all points, so you
don't have messy if/then statements to deal with exceptional points) exist
for Edwards curves.  (Recently, complete formulae for Weierstrass curves and
other prime-order curves have also been described. [2]  However, they are
still slightly less-efficient for most tasks.)

There's a useful technique called a Montgomery ladder, which is an approach
to constant-time (if implemented in a sane manner) point multiplication
(i.e. computing nP by taking the point P and adding it to itself n times).
This is particularly useful for elliptic curve Diffie-Hellman (ECDH)
implementations, but it requires first converting a point from a certain
representation (a.k.a. within a specific spatial coordinate system), usually
"extended homogeneous twisted Edwards coordinates" (see Hi��il's thesis [3],
which is the explanation of all the different forms and group laws), into
the affine point Q = (u,v) as it would lie on the Montgomery form of the
curve:

    bv � = u � + au � + u                              (2)    

where

    a = 486662
    b = 1

The conversion is rather straighforward, as you can see from mine and Henry
de Valence's code [4], but there's a problem in that the compressed form
(i.e. "give me the serialised version that is just an array of 32 bytes") of
points on the Montgomery curve are just the u-coordinate.  You can use this
u-coordinate to recover the v-coordinate, [5] and then use both u and v to
recover the original Edwards x-coordinate, [6] but there's two possible
x-coordinates, one positive and one negative.

So, if you want to be able to use a key for both purposes, then, when using
Montgomery form (e.g. an X25519 key a.k.a. a "curve25519 key") then you have
to also pass around the sign of x.  It's kind of icky.

In this case, the "ntor-onion-key-crosscert" is an Ed25519 signature (so the
public key is a point in twisted Edwards form) of the relay's public master
identity key, computed using the "ntor-onion-key" (which is an X25519 key,
so a point in Montgomery form).  The verifier knows the "ntor-onion-key",
but needs to know the sign of x in order to be able to convert it into the
Edwards-form public key to check this signature.

Following through the code tor is using, it appears that if "Bit" is "0",
then x will be positive.  If "Bit" is "1" then x will be negative.  Tor's
behaviour w.r.t. the sign bit (using either curve25519-donna [7] or ref10
[8]) appears to be identical to other implementations, namely Open
Whispersystems' code [9] and curve25519-dalek. [10]

It appears it isn't specified anywhere what the "Bit" is supposed to mean in
terms of parsing the ntor-onion-cert into an Ed25519 key though. :(  I made
an attempt at specifying it better. [11]

As for the question of why one would want to convert back and forth between
the two��� normally, you wouldn't want to do this.  There's nothing concretely
horribly wrong or insecure about it, but there are plenty of more
theoretical concerns regarding any type of key reuse for different
protocols, primarily because it removes any sense of domain separation, such
that an attack on one protocol might be assisted by or contribute to
attacking the other.  With separate keys for separate purposes, you can
breathe a lot easier knowing that if, e.g. your ECDH keys were compromised,
that your signing key (being a totally different key) is (probably)
unaffected.  The only time where is does make sense to share a key between
two protocols is what Nick's design for the cross-certifications,
i.e.:

a) Prove that you control the private part of an encryption key by
   converting it to a signing key, then signing the public master identity
   key, and
b) Authenticate the signature by using the master identity key to sign the
   entire document (including the other signature).

&gt; Thanks for all the help, I hope that you are having a nice day and...
&gt; Happy Hacking.
&gt; 
&gt; - Jake

No worries!  Thanks for the excellent questions and catching more bugs in
our specs!

[0]: https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt?id=ce09d266#n536
[1]: https://docs.rs/curve25519-dalek/0.10.0/curve25519_dalek/curve/index.html
[2]: https://ellipticnews.wordpress.com/2016/05/30/complete-group-laws-for-prime-order-elliptic-curves-a-step-towards-safer-implementations-of-standard-curves/
 [3]: https://github.com/isislovecruft/library--/blob/master/cryptography%20%26%20math \
ematics/elliptic%20curve%20cryptography/Elliptic%20Curves%2C%20Group%20Law%2C%20and%20Efficient%20Computation%20(2010)%20[thesis]%20-%20Hi%C5%9Fil.pdf
 [4]: https://github.com/isislovecruft/curve25519-dalek/blob/f2883028d/src/curve.rs#L175
 [5]: https://github.com/isislovecruft/curve25519-dalek/blob/f2883028d/src/curve.rs#L235
 [6]: https://github.com/isislovecruft/curve25519-dalek/blob/f2883028d/src/curve.rs#L270
 [7]: https://gitweb.torproject.org/tor.git/tree/src/ext/ed25519/donna/ed25519_tor.c?id=2032b9b1#n324
 [8]: https://gitweb.torproject.org/tor.git/tree/src/ext/ed25519/ref10/keyconv.c?id=2032b9b1b1#n6
 [9]: https://github.com/WhisperSystems/curve25519-java/blob/master/android/jni/ed25519/additions/ge_montx_to_p3.c#L35
 [10]: https://github.com/isislovecruft/curve25519-dalek/blob/f2883028d/src/curve.rs#L253
 [11]: https://gitweb.torproject.org/torspec.git/commit/?id=2395f34affbe97c19d7bb9e3e288bc20d2249edd


Best,
-- 
 ������ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170808003602</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-08-08 00:36:02-0400</timestampReceived><subject>[tor-dev] Various Tor keys, their formats, and usages [was: Bridge Bandwidth Scanner Internship]</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello!

The following was my attempt last week to summarise all of our various keys
in server descriptors, how they are formatted, and what they are used for,
in the hopes that this is useful in alleviating possible future confusions
for others.

Let me know (and, more importantly! let Jake know since he's writing a Rust
parser for bridge descriptors as part of the Bridge Bandwidth Scanner
project) if I got anything wrong. :)

----- Forwarded message from isis agora lovecruft &lt;isis@torproject.org&gt; -----

&gt; From: isis agora lovecruft &lt;isis@torproject.org&gt;
&gt; Subject: Re: Bridge Bandwidth Scanner Internship
&gt; Date: Thu, 27 Jul 2017 19:52:47 +0000
&gt; Message-ID: &lt;20170727195247.GI24882@patternsinthevoid.net&gt;
&gt; To: jnz@riseup.net
&gt; Reply-To: isis@torproject.org
&gt; Delivered-To: &lt;isis+torproject@patternsinthevoid.net&gt;
&gt; 
&gt; jnz@riseup.net transcribed 1.4K bytes:
&gt; &gt; Hey Isis,
&gt; &gt; 
&gt; &gt; I have started the sanitization spec and the parser. A lot of the stuff
&gt; &gt; I had to learn for the two overlaps, so I am working on them
&gt; &gt; simultaneously. Conceptually, I understand the sanitization process, but
&gt; &gt; I am a little bit confused about what some of the fields are in the
&gt; &gt; descriptors.
&gt; &gt; 
&gt; &gt; Q1. What exactly is the difference between "master-key", "identity-key",
&gt; &gt; and "signing-key"?
&gt; &gt; 
&gt; &gt; After reading through the descriptor spec, cert spec, and other docs, I
&gt; &gt; am pretty confused on what each of the above means.I'm using the Nom
&gt; &gt; crate for the parser, I've never used it before but so far I'm really
&gt; &gt; liking it. Have you ever used it?
&gt; 
&gt; This is specified (not all that well, imho) in dir-spec.txt… it's really
&gt; confusing.
&gt; 
&gt; For versions of tor new enough to have prop#220 and prop#228 (&gt;0.2.7.2-alpha):
&gt; 
&gt;  - "identity-ed25519" is a certificate containing a base64-encoded ed25519
&gt;    key. The bridge uses this to authenticate to clients.
&gt; 
&gt;  - "master-key-ed25519" is the ed25519 key which is in the
&gt;    "identity-ed25519" certificate.
&gt; 
&gt;  - "onion-key" is an RSA-1024 key, encoded as a PKCS#1 RSAPublicKey
&gt;    structure, encoded in base64, and wrapped in "-----BEGIN RSA PUBLIC
&gt;    KEY-----" and "-----END RSA PUBLIC KEY-----".  This key is used to
&gt;    encrypt CREATE cells to in the older TAP handshake protocol. (TAP is
&gt;    almost entirely unused on the network, last I checked.  We'll likely be
&gt;    removing "onion-key"s in the next year or so, after we EOL some old tor
&gt;    versions.)
&gt; 
&gt;  - "ntor-onion-key" is a public curve25519 key, base64-encoded. This is used
&gt;    in the newer NTor handshake protocol, which replaced TAP. It is still
&gt;    quite common to see routers which have both an "onion-key" and an
&gt;    "ntor-onion-key".
&gt; 
&gt;  - "signing-key" is the same type and format as "onion-key" above, but it's
&gt;    used as a long-term identity key, for authenticating the bridge to
&gt;    clients. (Similar to "identity-ed25519" just with RSA signatures.)
&gt; 
&gt;  - "router-sig-ed255519" is a only present iff "identity-ed25519" is
&gt;    present, and it's an ed25519 signature of a SHA-256 digest of the
&gt;    "entire" descriptor (Minus the "@purpose bridge" header since the Bridge
&gt;    Authority is the one who adds that. So from "router " on the first line
&gt;    up to and including the first space after "router-sig-ed25519".)  This
&gt;    "entire" descriptor is first prefixed with the string "Tor router
&gt;    descriptor signature v1" before hashing and signing.  After the signature
&gt;    is produced, it is encoded in base64 and the trailing "="s are removed.
&gt; 
&gt;  - "router-signature" contains a signature of the PKCS#1-padded SHA-1 digest
&gt;     of the "entire" server descriptor, taken from the beginning of the
&gt;     "router" line (skipping "@purpose bridge" again), through (and
&gt;     including) the newline after the "router-signature" line.  The signature
&gt;     is made with the router's "signing-key" (a.k.a. identity key).
&gt; 
&gt; For older tor versions (without prop220 and/or prop228):
&gt; 
&gt;  - They will have "onion-key", "ntor-onion-key", "signing-key", and
&gt;    "router-signature", as above.
&gt; 
&gt; I've attached a tarball of today's descriptors for this bridge from the
&gt; public/default bridges in Tor Browser:
&gt; 
&gt; https://atlas.torproject.org/#details/FEC8FB380DABA9D3C80790B634E4540BF5D09CCA
&gt; 
&gt; Let me know if you want some more examples!  I only grabbed one because they
&gt; are pretty annoying to pull out of the giant, unordered, undeduplicated
&gt; files the BridgeAuth produces (at least without writing a full parser).
&gt; 
&gt; Also lmk if you have more questions, the entangled ball of crypto junk we
&gt; shove into descriptors is pretty confusing.

[…snip…]

----- End forwarded message -----

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["2017-07-27-ndnop3-descriptors.tar.xz" (application/x-xz)]
["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170808092626</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-08-08 09:26:26-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 4.0-1.3.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Another release of Onionoo is available:

     https://dist.torproject.org/onionoo/4.0-1.3.0/

This release is a maintenance release:
* It adapts to use the improvements of metrics-lib 2.0.0 and
* Debian Stretch dependencies and
* steps up to Jetty9.

(See the changelog [0] and git repo for details.)

Please direct comments and questions to the metrics-team mailing list [1].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.0-1.3.0
[1] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZiYO/AAoJEPeEx9Sa/gviYUQP/jTj8Tp5AtHacrW1zu9GqUry
SlOSmwx0EgldVZDc96RD2rz0sef5OR0WBA/kQz8QUL3m6LpjdCmsOz9HyOZNtpqO
gEY9RWEm0dfXLMai2BZVApp52X45MwRh+LBP/PTI/Sl5RJ4drmaDr+DZGHAzPJUz
uXV9f45LNy/fZgtrR+Cjkr3pr+sb5IB/uGdjJYYC4hXXIhFHe6eRW0mqLGkjl733
sy5Z02ldTKntjeBfu+iVDgtObrYrDkDvbJYyQHPHwPLiVqtKiGZixeK8ojjPimIz
5O/GHH/2m00Jst+u4uyIeUQiUexzv/uMRLKYi0lPshbId1icGpAhs2VHy0pI7CXJ
vr6rXkFv07tw86F36kOg2Vvy1/8oy0JEbZPA8hpl1F5tELp5Go0tf8Eq3PahMKh9
DfjOatQdj/BCi6G3dvtCiKyWnwd3chF1Gaqe1GmrAuDnrGGtbAWWv0ofStMOO+7X
2aI4y5Q2QTT7v9UJjks/rw4GOhEq+vlQHUFTVc4vSBm6bxSrowRyIy0/jUzeGs7A
XT0CnTWyO5xtuNhGYsZPSx7fENGko1tPOnzjxurHCYcZNM7oBIJKwn2yol+xpEwr
2DE5lyp/8bmb4Ya6/m3li34ku++Y7peXQ3wVagB5aPq1oROZ5ttabi9gA+xPRCqk
keSUDKXP9PBz+EtGvMoQ
=ELXu
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170809140100</emailId><senderName>u</senderName><senderEmail>u@451f.org</senderEmail><timestampReceived>2017-08-09 14:01:00-0400</timestampReceived><subject>[tor-dev] Help us build Tails reproducibly</subject><body>

[Attachment #2 (multipart/signed)]


Dear Tails and Tor contributors,
dear Reproducible Builds community,

As you might know, Tails [1] has received the Mozilla Open Source
Software award (MOSS) to make Tails ISO images build reproducibly.
Since this project has started, less than a year ago, we've made huge
progress and we've finally seen some ISO images build reproducibly on
the build environments of our core developers as well as on our
isobuilder machines. (See our previous reports [2]).

However, there are still some remaining issues which we'd like to know
more about in order to fix them. That's why we are asking for your
help: Please try and build the Tails 3.1 ISO image and report your
findings back to us. You will find all instructions for doing so
hereafter. Please don't hesitate to contact us if you get stuck at some
point in the process, for example by connecting to our chatroom [3].
You can also send us email to tails-dev@boum.org (public) or
tails@boum.org (private).

# How?

For your convenience all instructions needed to attempt to reproduce
Tails 3.1 are included hereafter. However all commands are
adapted for Debian Stretch (and Buster/Sid), so your results may vary if
you run another Linux distribution. Our full build instructions [4]
might help if you are having problems.

## Setup the build environment

Building Tails requires the KVM virtual machine hypervisor to be
available, a minimum of 1 GiB of free RAM and a maximum of 20 GB of
free storage.

### Install dependencies

    sudo apt-get install \
        git \
        rake \
        libvirt-daemon-system \
        dnsmasq-base \
        ebtables \
        qemu-system-x86 \
        qemu-utils \
        vagrant \
        vagrant-libvirt \
        vmdebootstrap &amp;&amp; \
    sudo systemctl restart libvirtd

### If building as a non-root user

(Skip this section if you intend to build Tails as the root user!)

Make sure that the user that is supposed to initiate the build is part
of the relevant groups:

    for group in kvm libvirt libvirt-qemu; do sudo adduser $user $group;
done

Then run `newgrp` (or just reboot) to apply the new group memberships
to the session.

## Build Tails 3.1

    git clone https://git-tails.immerda.ch/tails
    cd tails
    git checkout 3.1
    git submodule update --init
    rake build

# Send us feedback!

No matter how your build attempt turned out we are interested in you
sending us feedback. For that we'll first need some information of the
system you used -- please run these commands in the exact same
terminal session that you ran `rake build` in (e.g. run them right
after `rake build`)!

    sudo apt install apt-show-versions || :
    (
      for f in /etc/issue /proc/cpuinfo
      do
        echo "--- File: ${f} ---"
        cat "${f}"
        echo
      done
      for c in free locale env 'uname -a' '/usr/sbin/libvirtd --version' \
                'qemu-system-x86_64 --version' 'vagrant --version'
      do
        echo "--- Command: ${c} ---"
        eval "${c}"
        echo
      done
      if which apt-show-versions &gt;/dev/null
      then
        echo '--- APT package versions ---'
        apt-show-versions qemu:amd64 linux-image-amd64:amd64 vagrant \
                          libvirt0:amd64
      fi
    ) | bzip2 &gt; system-info.txt.bz2

Please have a look at the generated file with

    bzless system-info.txt.bz2

to make sure it doesn't contain any sensitive information you do not
want to leak in case you send this file to us or make it public!

Next, please follow the instructions below that match your situation!

## If the build failed.

Please open a ticket on our bug tracker [5] with "Category" set to
"Build system" and `system-info.txt.bz2` attached (note that this makes
this file public).

## If the build succeeded ...

Please compute the SHA-512 checksum of the resulting ISO image:

    sha512sum tails-amd64-3.1.iso

and compare it to:

843427fa13446c4b7134a10d3269b693317bbb898759e9d4e5dd8a25583372bed767e575974f5ca0229f1b44a99d4c7b64872c3dc433c0caf8965961cac9fb30


### Use the SHA256sum from our signed upgrade files instead

This is optional, but if you want to use an authenticated checksum,
you can find the sha256 checksum in our upgrade files:
https://tails.boum.org/upgrade/v1/Tails/3.0.1/amd64/stable/upgrades.yml
.. which are signed by the Tails signing key [7]:
https://tails.boum.org/upgrade/v1/Tails/3.0.1/amd64/stable/upgrades.yml.pgp

The SHA256 checksum should be:
0ef1c7d880308ee9f98c255b2658b75445cc84622eae2944a342dcc50cea71c7

### ... and the checksums match (i.e. reproduction succeeded).

Congrats for successfully reproducing Tails 3.1! Please send an email
to tails-dev@boum.org (public) or tails@boum.org (private) with the
subject "Reproduction of Tails 3.1 successful" and attach
`system-info.txt.bz2` to it.

### ... and the checksums differ (i.e. reproduction failed).

Now you are in a great position to help Tails improve its
reproducibility! Please install
`diffoscope` [8] version 83 or higher. If you
run Debian Stretch, that is:

    echo 'deb http://ftp.debian.org/debian stretch-backports main' \
      | sudo tee /etc/apt/sources.list.d/stretch-backports.list &amp;&amp; \
    sudo apt update &amp;&amp; \
    sudo apt -o APT::Install-Suggests="true" \
             -o APT::Install-Recommends="true" \
             install diffoscope

Then download the official Tails 3.1 ISO image [6] and compare it to yours:

    diffoscope \
        --text diffoscope.txt \
        --html diffoscope.html \
        --max-report-size 262144000 \
        --max-diff-block-lines 10000 \
        --max-diff-input-lines 10000000 \
            path/to/official/tails-amd64-3.1.iso \
            path/to/your/tails-amd64-3.1.iso &amp;&amp; \
    bzip2 diffoscope.*

Please send an email to tails-dev@boum.org (public) or tails@boum.org
(private) with the subject "Reproduction of Tails 3.1 failed" and
attach `system-info.txt.bz2` to it. We also want you attach one (the
smallest!) of diffoscope.txt.bz2 and diffoscope.html.bz2 to the email,
but if they are "big" (say &gt;100 KiB) then please don't bomb our mail
inboxes! Instead upload the file to some web-based file-sharing
service (we'd recommend RiseUp [9]) and include the link(s) in the email.

Thank you very much for your interest and help!

Cheers!
The Tails project

[1] http://tails.boum.org
[2] https://tails.boum.org/news/report_2017_06/,
https://tails.boum.org/news/report_2017_05/,
https://mailman.boum.org/pipermail/tails-dev/2017-March/011297.html
[3] https://tails.boum.org/support/#talk
[4] https://tails.boum.org/contribute/build
[5] https://labs.riseup.net/code/projects/tails/issues/new
[6]
http://dl.amnesia.boum.org/tails/stable/tails-amd64-3.1/tails-amd64-3.1.iso
[7] https://tails.boum.org/news/signing_key_transition/
[8] https://diffoscope.org/
[9] https://share.riseup.net/


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170812190235</emailId><senderName>John kongtcheu</senderName><senderEmail>johnkongtcheu@gmail.com</senderEmail><timestampReceived>2017-08-12 19:02:35-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 79, Issue 4</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Tor developers,

I am interested in becoming an open source contributor for Tor, but I don't
know where to start some guidance would be appreciated.

Thank you,

On Sat, Aug 12, 2017 at 8:00 AM, &lt;tor-dev-request@lists.torproject.org&gt;
wrote:

&gt; Send tor-dev mailing list submissions to
&gt;         tor-dev@lists.torproject.org
&gt;
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt;         https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt;         tor-dev-request@lists.torproject.org
&gt;
&gt; You can reach the person managing the list at
&gt;         tor-dev-owner@lists.torproject.org
&gt;
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt;
&gt;
&gt; Today's Topics:
&gt;
&gt;    1. Proposal 281: downloading microdescriptors in bulk
&gt;       (Nick Mathewson)
&gt;
&gt;
&gt; ----------------------------------------------------------------------
&gt;
&gt; Message: 1
&gt; Date: Fri, 11 Aug 2017 13:36:00 -0400
&gt; From: Nick Mathewson &lt;nickm@torproject.org&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] Proposal 281: downloading microdescriptors in bulk
&gt; Message-ID:
&gt;         &lt;CAKDKvux=eJBh_JsEeiqnhbEbcgRVeMRrbm2G7itZ8kX
&gt; y4+M26A@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="UTF-8"
&gt;
&gt; Filename: 281-bulk-md-download.txt
&gt; Title: Downloading microdescriptors in bulk
&gt; Author: Nick Mathewson
&gt; Created: 11-Aug-2017
&gt; Status: Draft
&gt;
&gt; 1. Introduction
&gt;
&gt;   This proposal describes a ways to download more microdescriptors
&gt;   at a time, using fewer bytes.
&gt;
&gt;   Right now, to download N microdescriptors, the client must send
&gt;   about 44*N bytes in its HTTP request.  Because clients can request
&gt;   microdescriptors in any combination, the directory caches cannot
&gt;   pre-compress responses to these requests, and need to use less
&gt;   space-efficient on-the-fly compression algorithms.
&gt;
&gt;   Under this proposal, clients simply say "Send me the
&gt;   microdescriptors I need", given what I know.
&gt;
&gt; 2. Combined microdescriptor downloads
&gt;
&gt; 2.1. By diff
&gt;
&gt;   If a client has a consensus with base64 sha3-256 digest X, and it
&gt;   previously had a consensus with base64 sha3-256 digests Y then
&gt;   it may request all the microdescriptors listed in X but not Y,
&gt;   by asking for the resource:
&gt;       /tor/micro/diff/X/Y
&gt;
&gt;   Clients SHOULD only ask for this resource compressed.
&gt;
&gt;   Caches MUST NOT answer this request unless they recognize the
&gt;   consensus with digest X, and digest Y.
&gt;   digest Y.  If answering, caches MUST reply with all of the
&gt;   microdescriptors that the cache holds that were listed by
&gt;   consensus X, and MUST omit all the microdescriptors that were
&gt;   omitted listed in consensus Y.
&gt;
&gt; 2.2. By consensus:
&gt;
&gt;   If a client has fewer than NMNM% of the microdescriptors listed in a
&gt;   consensus X, it should fetch the resource
&gt;       /tor/micro/full/X
&gt;
&gt;   Clients SHOULD only ask for this resource compressed.
&gt;
&gt;   Caches MUST NOT answer this request unless they recognize the
&gt;   consensus with digest X. They should send all the microdescriptors
&gt;   they have that are listed in that consensus.
&gt;
&gt; 2.3. When to make these requests
&gt;
&gt;   Clients should decide to use this format in preference to the
&gt;   old download-by-digest format if the consensus X lists their
&gt;   preferred directory cache as using a new DirCache subprotocol
&gt;   version. (See 5 below.)
&gt;
&gt; 3. Performance analysis
&gt;
&gt;   This is a back-of-the-envelope analysis using a month's worth of
&gt;   consensus documents, and a randomly chosen sample of
&gt;   microdescriptors.
&gt;
&gt;
&gt;   On average, about 0.5% of the microdescriptors change between any
&gt;   two consensuses.  Call it 50.  That means 50*43 bytes == 2150
&gt;   bytes to request the microdescriptors.  It means ~24530 bytes of
&gt;   microdescriptors downloaded, compressed to ~13687 bytes by zstd.
&gt;
&gt;   With this proposal, we're down to 86 bytes for the request, and we
&gt;   can precompute the compressed output, making it save to use lzma2,
&gt;   getting a compressed result more like 13362.
&gt;
&gt;   It appears that this change would save about 15% for incremental
&gt;   microdescriptor downloads, most of that coming from the reduction
&gt;   in request size.
&gt;
&gt;   For complete downloads, a complete set of microdescriptors is about
&gt;   7700 microdesciptors long.  That makes the total number of bytes
&gt;   for the requests 7700*43 == 331100 bytes.  The response, if
&gt;   compressed with lzma instead of zstd, would fall from 1659682 to
&gt;   1587804 bytes, for a total savings of 20%.
&gt;
&gt;
&gt; 5. Compatibility
&gt;
&gt;    Caches supporting this download protocol need to advertise
&gt;    support of a new DirCache subprotocol version.
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Subject: Digest Footer
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; End of tor-dev Digest, Vol 79, Issue 4
&gt; **************************************
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello Tor developers,  &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am interested in becoming \
an open source contributor for Tor, but I don't know where to start some guidance \
would be appreciated.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you,&lt;/div&gt;&lt;img width="1" \
height="1" src="http://s.bl-1.com/y2TQJ1S.gif"&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Aug 12, 2017 at 8:00 AM,  \
&lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
                #ccc solid;padding-left:1ex"&gt;Send tor-dev mailing list submissions \
                to&lt;br&gt;
            &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
To subscribe or unsubscribe via the World Wide Web, visit&lt;br&gt;
            &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 or, via email, send a message with subject or body 'help' to&lt;br&gt;
            &lt;a href="mailto:tor-dev-request@lists.torproject.org"&gt;tor-dev-request@lists.&lt;wbr&gt;torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
You can reach the person managing the list at&lt;br&gt;
            &lt;a href="mailto:tor-dev-owner@lists.torproject.org"&gt;tor-dev-owner@lists.&lt;wbr&gt;torproject.org&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
When replying, please edit your Subject line so it is more specific&lt;br&gt;
than "Re: Contents of tor-dev digest..."&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Today's Topics:&lt;br&gt;
&lt;br&gt;
     1. Proposal 281: downloading microdescriptors in bulk&lt;br&gt;
         (Nick Mathewson)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;----------&lt;br&gt;
&lt;br&gt;
Message: 1&lt;br&gt;
Date: Fri, 11 Aug 2017 13:36:00 -0400&lt;br&gt;
From: Nick Mathewson &lt;&lt;a \
                href="mailto:nickm@torproject.org"&gt;nickm@torproject.org&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
                
Subject: [tor-dev] Proposal 281: downloading microdescriptors in bulk&lt;br&gt;
Message-ID:&lt;br&gt;
            &lt;CAKDKvux=&lt;a \
href="mailto:eJBh_JsEeiqnhbEbcgRVeMRrbm2G7itZ8kXy4%2BM26A@mail.gmail.com"&gt;eJBh_&lt;wbr&gt;JsEeiqnhbEbcgRVeMRrbm2G7itZ8kX&lt;wbr&gt;y4+M26A@mail.gmail.com&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="UTF-8"&lt;br&gt;
&lt;br&gt;
Filename: 281-bulk-md-download.txt&lt;br&gt;
Title: Downloading microdescriptors in bulk&lt;br&gt;
Author: Nick Mathewson&lt;br&gt;
Created: 11-Aug-2017&lt;br&gt;
Status: Draft&lt;br&gt;
&lt;br&gt;
1. Introduction&lt;br&gt;
&lt;br&gt;
   This proposal describes a ways to download more microdescriptors&lt;br&gt;
   at a time, using fewer bytes.&lt;br&gt;
&lt;br&gt;
   Right now, to download N microdescriptors, the client must send&lt;br&gt;
   about 44*N bytes in its HTTP request.   Because clients can request&lt;br&gt;
   microdescriptors in any combination, the directory caches cannot&lt;br&gt;
   pre-compress responses to these requests, and need to use less&lt;br&gt;
   space-efficient on-the-fly compression algorithms.&lt;br&gt;
&lt;br&gt;
   Under this proposal, clients simply say "Send me the&lt;br&gt;
   microdescriptors I need", given what I know.&lt;br&gt;
&lt;br&gt;
2. Combined microdescriptor downloads&lt;br&gt;
&lt;br&gt;
2.1. By diff&lt;br&gt;
&lt;br&gt;
   If a client has a consensus with base64 sha3-256 digest X, and it&lt;br&gt;
   previously had a consensus with base64 sha3-256 digests Y then&lt;br&gt;
   it may request all the microdescriptors listed in X but not Y,&lt;br&gt;
   by asking for the resource:&lt;br&gt;
         /tor/micro/diff/X/Y&lt;br&gt;
&lt;br&gt;
   Clients SHOULD only ask for this resource compressed.&lt;br&gt;
&lt;br&gt;
   Caches MUST NOT answer this request unless they recognize the&lt;br&gt;
   consensus with digest X, and digest Y.&lt;br&gt;
   digest Y.   If answering, caches MUST reply with all of the&lt;br&gt;
   microdescriptors that the cache holds that were listed by&lt;br&gt;
   consensus X, and MUST omit all the microdescriptors that were&lt;br&gt;
   omitted listed in consensus Y.&lt;br&gt;
&lt;br&gt;
2.2. By consensus:&lt;br&gt;
&lt;br&gt;
   If a client has fewer than NMNM% of the microdescriptors listed in a&lt;br&gt;
   consensus X, it should fetch the resource&lt;br&gt;
         /tor/micro/full/X&lt;br&gt;
&lt;br&gt;
   Clients SHOULD only ask for this resource compressed.&lt;br&gt;
&lt;br&gt;
   Caches MUST NOT answer this request unless they recognize the&lt;br&gt;
   consensus with digest X. They should send all the microdescriptors&lt;br&gt;
   they have that are listed in that consensus.&lt;br&gt;
&lt;br&gt;
2.3. When to make these requests&lt;br&gt;
&lt;br&gt;
   Clients should decide to use this format in preference to the&lt;br&gt;
   old download-by-digest format if the consensus X lists their&lt;br&gt;
   preferred directory cache as using a new DirCache subprotocol&lt;br&gt;
   version. (See 5 below.)&lt;br&gt;
&lt;br&gt;
3. Performance analysis&lt;br&gt;
&lt;br&gt;
   This is a back-of-the-envelope analysis using a month's worth of&lt;br&gt;
   consensus documents, and a randomly chosen sample of&lt;br&gt;
   microdescriptors.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
   On average, about 0.5% of the microdescriptors change between any&lt;br&gt;
   two consensuses.   Call it 50.   That means 50*43 bytes == 2150&lt;br&gt;
   bytes to request the microdescriptors.   It means ~24530 bytes of&lt;br&gt;
   microdescriptors downloaded, compressed to ~13687 bytes by zstd.&lt;br&gt;
&lt;br&gt;
   With this proposal, we're down to 86 bytes for the request, and we&lt;br&gt;
   can precompute the compressed output, making it save to use lzma2,&lt;br&gt;
   getting a compressed result more like 13362.&lt;br&gt;
&lt;br&gt;
   It appears that this change would save about 15% for incremental&lt;br&gt;
   microdescriptor downloads, most of that coming from the reduction&lt;br&gt;
   in request size.&lt;br&gt;
&lt;br&gt;
   For complete downloads, a complete set of microdescriptors is about&lt;br&gt;
   7700 microdesciptors long.   That makes the total number of bytes&lt;br&gt;
   for the requests 7700*43 == 331100 bytes.   The response, if&lt;br&gt;
   compressed with lzma instead of zstd, would fall from 1659682 to&lt;br&gt;
   1587804 bytes, for a total savings of 20%.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
5. Compatibility&lt;br&gt;
&lt;br&gt;
     Caches supporting this download protocol need to advertise&lt;br&gt;
     support of a new DirCache subprotocol version.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Subject: Digest Footer&lt;br&gt;
&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
End of tor-dev Digest, Vol 79, Issue 4&lt;br&gt;
******************************&lt;wbr&gt;********&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170814133038</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-08-14 13:30:38-0400</timestampReceived><subject>[tor-dev] Getting started coding on Tor [Re:  tor-dev Digest, Vol 79, Issue 4]</subject><body>

[Attachment #2 (multipart/alternative)]


On Sat, Aug 12, 2017 at 3:02 PM, John kongtcheu &lt;johnkongtcheu@gmail.com&gt;
wrote:

&gt; Hello Tor developers,
&gt;
&gt; I am interested in becoming an open source contributor for Tor, but I
&gt; don't know where to start some guidance would be appreciated.
&gt;
&gt; Thank you,
&gt;

Hi!  We have some introductory material over here, including a list of
subprojects and what they're implemented in:

  https://www.torproject.org/getinvolved/volunteer

If you're interested in Tor itself, have a look at the
doc/HACKING/GettingStarted.md file in the Tor git repository.  It's got a
bunch of other useful links.

cheers,
-- 
Nick

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Aug \
12, 2017 at 3:02 PM, John kongtcheu &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:johnkongtcheu@gmail.com" \
target="_blank"&gt;johnkongtcheu@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="ltr"&gt;Hello Tor developers,  \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am interested in becoming an open source contributor for Tor, \
but I don't know where to start some guidance would be \
appreciated.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank \
you,&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi!   We have some introductory \
material over here, including a list of subprojects and what they're implemented \
in:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   &lt;a \
href="https://www.torproject.org/getinvolved/volunteer"&gt;https://www.torproject.org/getinvolved/volunteer&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
you're interested in Tor itself, have a look at the doc/HACKING/GettingStarted.md \
file in the Tor git repository.   It's got a bunch of other useful \
links.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;cheers,&lt;/div&gt;&lt;div&gt;--  \
&lt;/div&gt;&lt;div&gt;Nick&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170814171831</emailId><senderName>Ryan Carboni</senderName><senderEmail>ryacko@gmail.com</senderEmail><timestampReceived>2017-08-14 17:18:31-0400</timestampReceived><subject>Re: [tor-dev] Doesn't hidden services break RFC 3986?</subject><body>

[Attachment #2 (multipart/alternative)]


Also: just because it's HTTP/S running over a different network stack,
doesn't make it a new scheme.

Just because your dinner arrives on a different plate doesn't mean the
recipe has changed. :-)

---

https://bugzilla.mozilla.org/show_bug.cgi?id=1228457

Tor is a strange sort of sacred cow

highly revered

leaks much methane

But RFC 7686  literally bent over backwards to rewrite multiple standards
because Tor was long existing. ".onion" shouldn't be resolved or sent over
the internet.
Sure, IP multicast had to be implemented, but its relevance to people not
replacing analog technologies isn't particularly great, and those are
corporations who make billions combined per year.

But uh yes. Only the plate changed. But internet standards are very clear
on plate specifications. Or rather, "authority" lookup. The dinnerware
request protocol is pretty clear on this, with other protocols providing
for saran-wrap or foil-wrap encapsulation, with their own provisions for
exterior labeling.

(or if there was a new way to link to torrent hashes, do you think it
should be "torrent://hash/" or "hash.torrent"?)

Although, if you guys really want to risk your government funding, I
suggest $10,000 bug bounties out of a fund sized large enough to hire a
single programmer (assuming there's a risk that you'll have more than a
dozen severe bugs). To make things more difficult for the NSA, make it
clear that there is no requirement for a cyber arms seller to stay bought
by one person. Or propagate a meme that a cyber arms seller could sell the
idea of an exploit to another cyber arms seller to write a new exploit for
the same bug. Force folks like zerodium to pay twice.


or uh "Make the enemy live up to its own book of rules."

But who is your enemy?

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Also: just because it's HTTP/S running over a different network \
stack,&lt;br&gt;doesn't make it a new scheme.&lt;br&gt;&lt;br&gt;Just because your dinner arrives \
on a different plate doesn't mean the&lt;br&gt;recipe has changed. \
:-)&lt;br&gt;&lt;br&gt;&lt;div&gt;---&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://bugzilla.mozilla.org/show_bug.cgi?id=1228457"&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1228457&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor \
is a strange sort of sacred cow&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;highly \
revered&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;leaks much methane&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But RFC  \
&lt;span style="color:rgb(0,0,0);font-size:13.3333px"&gt;7686  &lt;/span&gt;&lt;span \
style="color:rgb(0,0,0);font-size:13.3333px"&gt;  literally bent over backwards to \
rewri&lt;/span&gt;te multiple standards because Tor was long existing. ".onion" \
shouldn't be resolved or sent over the internet.&lt;br&gt;Sure, IP multicast had to be \
implemented, but its relevance to people not replacing analog technologies isn't \
particularly great, and those are corporations who make billions combined per \
year.&lt;br&gt;&lt;br&gt;But uh yes. Only the plate changed. But internet standards are very \
clear on plate specifications. Or rather, "authority" lookup. The \
dinnerware request protocol is pretty clear on this, with other protocols providing \
for saran-wrap or foil-wrap encapsulation, with their own provisions for exterior \
labeling.&lt;br&gt;&lt;br&gt;(or if there was a new way to link to torrent hashes, do you think \
it should be "torrent://hash/" or \
"hash.torrent"?)&lt;br&gt;&lt;br&gt;Although, if you guys really want to risk your \
government funding, I suggest $10,000 bug bounties out of a fund sized large enough \
to hire a single programmer (assuming there's a risk that you'll have more \
than a dozen severe bugs). To make things more difficult for the NSA, make it clear \
that there is no requirement for a cyber arms seller to stay bought by one person. Or \
propagate a meme that a cyber arms seller could sell the idea of an exploit to \
another cyber arms seller to write a new exploit for the same bug. Force folks like \
zerodium to pay twice.&lt;br&gt;&lt;br&gt;&lt;br&gt;or uh "Make the enemy live up to its own book \
of rules."&lt;span \
style="color:rgb(0,0,0);font-size:13.3333px"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But \
who is your enemy?&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170818135709</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-08-18 13:57:09-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.2.1</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256


Hi there!

A bugfix release for CollecTor is available:

     https://dist.torproject.org/collector/1.2.1/

The bug fixed by this release affects CollecTors sanitizing bridge
descriptors and was discovered due to the recent bridge authority outage.

Please direct comments and questions to the metrics-team mailing list [2].
And, of course, bug reports [3] or feature requests [4] can be filed in trac.

Cheers,
iwakeh


[1] https://gitweb.torproject.org/collector.git/plain/CHANGELOG.md?id=collector-1.2.1
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
[3] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=defect
[4] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=enhancement
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZlvIvAAoJEPeEx9Sa/gviAEUP/iSAAW5uaQNpMKtNze9x87M/
jluCBRzvIN61xyxjib7Caswz5uBdUew2qYM1+fswBr7odng5sFlUuP6/oJZJBqr5
/C/68WYeYncXUj1vKi5mNjktJ7CJQE29anqG8EYtbVAKIqiQJmot/Hb8JI/V+RFU
1HueB78zPXbJBb8A0NBDvvhO5tFcTeQKEMKqZngkv4eojuhQu8pgT9Y5YGxMsSU9
al/kzpJIG78MnuKHZBjkSc8vn9YivZnxIyLgl8zaxKT5SOx11U3T8PN2rV5gJs3o
qzstD75S71g7K9w4RZqg2bljp2xM4z0ui9lgfWWAKkodhm0aGZZFs9CIZeVhtN/s
FiOVm+ZTJfpiudEqF9amv1uZxW9d5KQzpKKEjGKGOa9kk2idWZieLFbj2NLjDtv1
GJxYgW+pxliJYH/sQqSjJ4icxcQD75k4+Z725ENd8vVBVGDS7jqmjDr9tUKbctad
ftD4Fjeg0CE8CTOneY2tTJ6w8dpbiPxXP1otzGltDGpOX0D1cMCSXtNX10/n4GRv
ndnat57JBTLwKnRQ3SL/eDTXCwRpXzT66bUbWAhNeY6tl5aGni7/vItn4Hd9qf8v
zp8T2X0tp2+02FYnidITPIxLmLfCcDh3b87qIFC+3DStD/GOuUVz0P/i/sfuCN6A
onSYAUgAIqx7Uced2auo
=9wXW
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170819173307</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-08-19 17:33:07-0400</timestampReceived><subject>Re: [tor-dev] Feature Request: please consider ship default, Tor bridges</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


Roger:
&gt; On Thu, Aug 17, 2017 at 07:57:53PM +0000, iry wrote:
&gt;&gt; Btw, Collateral Freedom seems to be one of the most effective 
&gt;&gt; ways to circumvent Internet censorship in China. Circumvention 
&gt;&gt; tools that depend on Collateral Freedom usually works fine, 
&gt;&gt; including meek, lantern, psiphon3 etc. Therefore, I see a lot of
&gt;&gt;  potential work which may benefit the Internet freedom in China.
&gt;&gt;  For example: 1. package meek into Debian 2. host (part of the) 
&gt;&gt; BridgeDB mirror on Github or AWS 3. #22402: 
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/22402
&gt; Some hopefully useful thoughts along these lines:
&gt; 

Hi Roger! Thank you for sharing your insights!

&gt; A) Most places around the world that need bridges these days need 
&gt; pluggable transport bridges, not just vanilla bridges. So if we 
&gt; want to bundle bridge addresses, we should bundle PT bridge 
&gt; addresses.
&gt; 

I agree! This also makes me think about a small potential improvement
on the design of BridgeDB web. When users click the big "Just give me
some bridge" on https://bridges.torproject.org/options , they will be
provided with vanilla bridges instead of obfs4 bridges.

However, those users who choose not to use "Advanced Options" are most
likely to be inexperienced and have no idea on what obfd4, PT etc are.
Therefore, is it a good idea to provide obfs4 bridges, rather than
vanilla ones, in "Just give me some bridge" for better usability and
higher success rate?

&gt; B) ...and that means we need to make sure that those PTs are well 
&gt; packaged in Debian too, since the Tor deb by itself would not be 
&gt; able to use them.
&gt; 

Agreed. I can help to report a bug against obfs4proxy on Debian BTS
when the idea is mature.

&gt; C) I wonder if we could use the new %include torrc directive in 
&gt; this situation: https://bugs.torproject.org/1922


I don't have a say on the final decision, but this is also what I am
thinking about:&gt; 3. "Bridge" + plain text which is ready to be
appended to a torrc file
&gt; or to be one of the torrc files in /etc/torrc.d/ (or whatever 
&gt; torrc.d path Debain decides to use)

&gt; That is, when you apt-get install obfs4proxy, is that the right 
&gt; time to populate /etc/torrc.d/obfs4-bridges with some (probably 
&gt; commented out to start) lines that let you use those bridges if
&gt; you want?

How about not commenting out the bridge info as the switch? Instead,
user who would like to use bridge can comment out or add the following
two lines in /etc/tor/torrc:
#UseBridges 1
#ClientTransportPlugin obfs4 exec /usr/bin/obfs4proxy

I have being considering /etc/torrc.d/ as a place to store all the
available settings and considering /etc/tor/torrc as a panel that let
user decide what they would like to enable and disable. But I am not
sure if this is a good way to think about the relationship between
/etc/tor/torrc and /etc/torrc.d/

One thing I am concerned about is, when applying the method above, how
can user choose different PTs in the future? For example, when meek in
packaged into Debian, the meek package will probably also have a
/etc/torrc.d/meek-bridges file. Can we just choose to use obfs4 or
meek in /etc/tor/torrc by switching between the following two lines?

#ClientTransportPlugin obfs4 exec /usr/bin/obfs4proxy
#ClientTransportPlugin meek exec  /usr/bin/meek-client

(I can test with that, but people who is familiar with the mechanism
behind it can probably answer that.)


Best,
iry
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZmHZUAAoJEKFLTbxtzdU8Y2gP+wfDoSOTprVqe4rByzHVhUup
LXvy4WnfHeUq03t+H8W5QwJCPdsFssFZae/EsfUU5Q490GqhAFryi8rHmOHluSGl
FmX9SIxQXT3RV7iEFN7w4qKqYHLEKrRTklWOLrDauHZe3eJEUyn49VCROtBat88Y
bdnrav4D443fFD/ugk8C3K5u4oNEWgtaq9natsLkPFbXpNcB06gd/S23Vj4VsOP0
+FUmIHmtzzMk0iTAVjGrW8X/z6/lyqk6Nj/lvwfNhdIJ5gbk5F848sl71VBeK3of
Q7rdCjglZ3/tPRfrE+d40cfQWmOpw7doozC7LKdDbxCtx/LJ0WFq2PvwmO+uUFOG
3QMAV0w58JWsUsLW80ifcx7T+0O7QeAMASqWqKva7d1Y2PgqNCJfDJDHOX/KuEy3
TUi8o5WkIUUtyPaMwnYXW9VkaEKIHBXxfjYBwg0llfGU9HKJmTj+yCrMMHB2t0m0
OlZUFx9E7U11mhWzGM64sICHuob8VjwsLgLPMJc1+ocDobo0HrJr1ZtWmMZScp60
SpK35EwU8jKZJTSXtI/SKtDdHGhGmxm4NvLy26TWSqHbEzlcelK+yqkifnLHr3tb
we61NdV2ZA7XCrp+o3Q7NprMjRGtaP1aze2bQTjJfkLDdrShkZFw3/hYk75cRpvk
tkf7Tl4oLtoa5lnNhB/S
=sP5G
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170821044840</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-21 04:48:40-0400</timestampReceived><subject>Re: [tor-dev] Becoming an Open Source Contributor</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 13 Aug 2017, at 05:02, John kongtcheu &lt;johnkongtcheu@gmail.com&gt; wrote:
&gt; 
&gt; Hello Tor developers,
&gt; 
&gt; I am interested in becoming an open source contributor for Tor, but I don't know \
&gt; where to start some guidance would be appreciated.

Hi John,

A list of (some of) Tor's open source projects is here:
https://www.torproject.org/getinvolved/volunteer.html.en

Have a look through, pick one you like, and follow the instructions
there. Please feel free to write back if you have more questions.

And welcome!

Tim

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZmmYoAAoJEHQNnjkCUnKifloQAL7VZiIzkT3z1C79Sxfqv8D3
sK4Oty+iluVtrSupdvKhILS+LeN6tqoqf2qzLqyfZuVXIKKn/ohoOWHLGSCI99sz
z3oahKuB32TtfJDsPK4P4QlP7XDQ5M98TdAzlATAeQqLO4956boKMPO7nYV5Mm5c
D5OVW41aAGMPF0Q8ECGKBt6/a4OvaJ46pEQJkWYZ68qRvdDsvQAq5ashALCT7Kg5
oKJ6ZjLrIYv2+X3ryO2ROqR5SwY6c/hYfoLV2TPT0W4ul65UoEudpvOSPjIXT5r9
NWRg0PZ+DVkjWadVra5DsMQR7cpp1ZJ/v++imEkqt5pllHPe+TtL+aNHT1J+NEoi
kLIR50r4jHybddmSZVc4wNhvG2HudPK6RTvWYfMj3J2UjxkZj08grlJx8ziobwyu
oz7caRpwmSb/rsfq7LcL/lHER0WsKyOnulmV/rtO6Xuax+QUmqcsNTmEghOmPxY6
zItXfxklfUsmBpIldXUzH22XiM9kVfV3u/b6DmbNLan+/u2Fr7sAn37nhDeydrIe
jZFQv3wyU/fBijQVZMk48e1X2es4OzeiVP8kqhfyVuPcpznTIDgxqSyCvwF/mtRz
5xKccXIk+ksulthJmHfTv3KFeS3KxJd/w++ts9qlB2F3APc84p2JOwbjdS4nOK8k
uBZWTGxKypO3PBAAZmD0
=We8U
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170823163433</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-08-23 16:34:33-0400</timestampReceived><subject>Re: [tor-dev] PQ crypto updates</subject><body>

[Attachment #2 (multipart/signed)]


On Tue, 22 Aug 2017 20:47:06 +0200
Peter Schwabe &lt;peter@cryptojedi.org&gt; wrote:
&gt; Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt; 
&gt; Hi Yawning, hi all,
&gt; 
&gt; &gt; Ultimately none of this matters because Prop. 261 is dead in the
&gt; &gt; water.  Assuming people want the new cell crypto to be both fragile
&gt; &gt; and to resist tagging attacks, Farfalle may be a better choice,
&gt; &gt; assuming there's a Keccak-p parameterization such that it gives
&gt; &gt; adequate performance.  
&gt; 
&gt; At what number of cycles/block on what architecture(s) would you call
&gt; the performance "adequate"?

Note, I'm not hating on Farfalle, I need to look at it more, and the
last time I gave serious thought to this question in a Tor context was
back around the time Prop 261 was being drafted.

The answer to this from my point of view is "not slow to the point
where the network falls over", which I'll admit is extremely handwavy,
but truth be told, I have no idea what fraction of the relays are on
what micro architectures these days.

Looking at the Farfalle and Kangaroo 12 papers, Kravette may be ok with
AVX2 assuming I'm extrapolating correctly.  But, while it's probably
reasonable to assume that all the fast existing relays have AES-NI, I
do not know what fraction of those predate AVX2.

Part of me thinks that focusing on raw primitive performance is a bit
silly (even though I'm the one that brought it up), because just about
anything will likely deliver adequate performance if the cell crypto
used more than one core[0].

Sorry I don't have anything more concrete. :(

Regards,

-- 
Yawning Angel

[0]: And another part of me kind of wants to say "eat the overhead of a
MAC per hop and use AES-GCM-SIV or something".

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170824015134</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2017-08-24 01:51:34-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

On Wed, Aug 23, 2017 at 9:36 PM, KL Liew &lt;hexasoft@gmail.com&gt; wrote:
&gt;
&gt;&gt; It is possible that this address is used by North Korea, they don't have
&gt;&gt; a massive IP allocation and I would expect that perhaps there are some
&gt;&gt; tunnels, but I can't figure out where MaxMind have got this idea from.
&gt;
&gt; We aware of a small number of IP ranges tunneling to North Korea through
&gt; some specific ISP. However, this IP address is registered by a VPN provider
&gt; which also registered ranges in many other countries. We have no evidence
&gt; that this VPN provider has a server located in those countries reported for
&gt; their VPN service.

Allow me to jump in here and mention that I have done some work on
auditing the locations of VPN servers via active probes (very briefly:
pingtimes to hosts in known locations give upper bounds on the
distances to those hosts), and I suspect I know which VPN provider you
are referring to and their claims are indeed ... let's say
questionable. I'm not yet at liberty to share any more details of my
results, but you may find the software at
https://github.com/zackw/active-geolocator/ of interest.

Applying the same techniques to Tor is something I would be interested
in helping with, though not a personal priority.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170824152402</emailId><senderName>Robin Tarsiger</senderName><senderEmail>rtt@dasyatidae.com</senderEmail><timestampReceived>2017-08-24 15:24:02-0400</timestampReceived><subject>Re: [tor-dev] Draft patchset for PT2.0 support (ticket #21816)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor wrote:
&gt; There are several issues in the PT 2.0 draft 2 specification.
&gt; 
&gt; Some of them are minor typos or inconsistencies. Others are major
&gt; design issues that we might want to leave until a later spec&gt;
&gt; But then more issues were raised in this thread:
&gt; 
&gt; https://lists.torproject.org/pipermail/tor-dev/2017-July/012374.html

Is that the last message in the thread? I think I saw it a month ago,
but I've reread what I saw of it with comments from you, David Fifield,
and Yawning Angel. From what I can tell, there isn't a major impact on
the specific changes I've made; if deeper changes need to happen to
the PT2.0 spec, then they may require additional changes in Tor, but
those seem separable code-wise. The main thing I was given to implement
was the JSON Parameter Block handling in the SOCKS flow.

&gt; And I wasn't able to get response from Brandon on them.

I'm not sure exactly what's going on there, but I'll make a note to
ask him about the state of this today. Thanks for pointing it out.

-RTT


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170824201843</emailId><senderName>Ryan Carboni</senderName><senderEmail>ryacko@gmail.com</senderEmail><timestampReceived>2017-08-24 20:18:43-0400</timestampReceived><subject>[tor-dev] Some Tor Devs could get higher pay as PR than as programmers</subject><body>

[Attachment #2 (multipart/alternative)]


Whenever I read something, with an open mind, but say, in a sandboxed
environment (don't run your memes on root), I get impressed by arguments
which convince me of things which are not true.

Take for instance the following article:
https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confirmation-attack
It is a self-contradictory argument, we detected these bad relays when they
arrived, allowed them for 6 months.

Now, what was the available prophylactic measures at the time? Alleged
family greylisting wasn't available at the time, but certainly an attempt
could be made to contact (presumably) a few owners of the tor relays.
Although it turned out to be only one owner. I mean, people depend their
lives on Tor.

Can all discretionary decisions of this type be made public?


Now there's also the Tor's unlike racists we value free speech. I cannot
explain it, but if one replaced racists with Islamists, somehow the
argument is weaker. I can't fully explain it, even though I've heard more
about beheadings and defenestrations as opposed to... whatever racists do
nowadays (shitpost?). It truly is a clever argument that strengthens and
preserves Tor's brand identity among target demographic groups.


How did Freud invent psychoanalysis? What are you doing during the idle
cycles of your brain? One does not need a fancy degree to be an amateur at
anything, or do you folks not call yourselves hackers?

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Whenever I read something, with an open mind, but say, in a sandboxed \
environment (don't run your memes on root), I get impressed by arguments which \
convince me of things which are not true.  &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Take for instance the \
following article:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confi \
rmation-attack"&gt;https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confirmation-attack&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
is a self-contradictory argument, we detected these bad relays when they arrived, \
allowed them for 6 months.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Now, what was the available \
prophylactic measures at the time? Alleged family greylisting wasn't available at \
the time, but certainly an attempt could be made to contact (presumably) a few owners \
of the tor relays. Although it turned out to be only one owner. I mean, people depend \
their lives on Tor.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can all discretionary decisions of this \
type be made public?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Now there's also the \
Tor's unlike racists we value free speech. I cannot explain it, but if one \
replaced racists with Islamists, somehow the argument is weaker. I can't fully \
explain it, even though I've heard more about beheadings and defenestrations as \
opposed to... whatever racists do nowadays (shitpost?). It truly is a clever argument \
that strengthens and preserves Tor's brand identity among target demographic \
groups.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How did Freud invent psychoanalysis? \
What are you doing during the idle cycles of your brain? One does not need a fancy \
degree to be an amateur at anything, or do you folks not call yourselves \
hackers?&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170824213027</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-08-24 21:30:27-0400</timestampReceived><subject>[tor-dev] No. [was: Some Tor Devs could get higher pay as PR than as programmers]</subject><body>

[Attachment #2 (multipart/signed)]


Ryan Carboni transcribed 3.9K bytes:
&gt; Whenever I read something, with an open mind, but say, in a sandboxed
&gt; environment (don't run your memes on root), I get impressed by arguments
&gt; which convince me of things which are not true.
&gt; 
&gt; Take for instance the following article:
&gt; https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confirmation-attack
&gt; It is a self-contradictory argument, we detected these bad relays when they
&gt; arrived, allowed them for 6 months.
&gt; 
&gt; Now, what was the available prophylactic measures at the time? Alleged
&gt; family greylisting wasn't available at the time, but certainly an attempt
&gt; could be made to contact (presumably) a few owners of the tor relays.
&gt; Although it turned out to be only one owner. I mean, people depend their
&gt; lives on Tor.
&gt; 
&gt; Can all discretionary decisions of this type be made public?
&gt; 
&gt; 
&gt; Now there's also the Tor's unlike racists we value free speech. I cannot
&gt; explain it, but if one replaced racists with Islamists, somehow the
&gt; argument is weaker. I can't fully explain it, even though I've heard more
&gt; about beheadings and defenestrations as opposed to... whatever racists do
&gt; nowadays (shitpost?). It truly is a clever argument that strengthens and
&gt; preserves Tor's brand identity among target demographic groups.

Hello.

Islamophobia will not be tolerated on this list.  Full.  Stop.

This is a list for Tor development.  I don't see any code in your rambling,
asinine, bigoted, word-salad post, nor do I see any discussion of current bugs,
potential features, community outreach, contributor resources, or anything
else which could reasonably be construed as development.

As for "whatever racists do nowadays": white supremacists in the United
States recently murdered an anti-racist protester named Heather Heyer.  Your
comments are not only extremely off-topic, but given the current political
context, extremely Bad Takes.

Please keep your future posts to this list on-topic and productive.

&gt; How did Freud invent psychoanalysis? What are you doing during the idle
&gt; cycles of your brain? One does not need a fancy degree to be an amateur at
&gt; anything, or do you folks not call yourselves hackers?

I'd say "Best" but you could only be better,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170814000620</emailId><senderName>Ryan Carboni</senderName><senderEmail>ryacko@gmail.com</senderEmail><timestampReceived>2017-08-14 00:06:20-0400</timestampReceived><subject>[tor-dev] Doesn't hidden services break RFC 3986?</subject><body>

[Attachment #2 (multipart/alternative)]


https://tools.ietf.org/html/rfc3986#section-3
By placing the scheme within the authority as a tld while using the same
authority as the HTTP specification, this probably breaks RFC 3986 and
maybe others.

I might be a bit late in saying this.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;a href="https://tools.ietf.org/html/rfc3986#section-3"&gt;https://tools.ietf.org/html/rfc3986#section-3&lt;/a&gt;&lt;br&gt;&lt;div&gt;By \
placing the scheme within the authority as a tld while using the same authority as \
the HTTP specification, this probably breaks RFC 3986 and maybe \
others.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I might be a bit late in saying this.&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170817171944</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-08-17 17:19:44-0400</timestampReceived><subject>[tor-dev] Feature Request: please consider ship default Tor bridges</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello Tor people!

A set of Tor bridges are shipped with Tor browser bundle[0], helping
users in Tor-censored area to connection to the Tor network. Since
system Tor users may also face the censorship problem, shall we
ship some Tor bridges along with the tor package?

The request is firstly reported[0] to Debian BTS and I got the
following reply by Peter:

&gt; If upstream starts shipping bridges with their Tor releases, that
&gt; would naturally result in the Tor package shipping bridges as
&gt; well.
&gt; 
&gt; I do not know whether that's a good idea or not, but I don't think 
&gt; deviating from upstream would be particularly worthwhile.

The following is some related information which may help the future
discussion:

The possible formats to hold those bridges can be:
1. JSON which is also the way tor-connection-wizard used so far[1];
2. plain text which is the same formatt given by the BridgeDB[2] by Tor
Project;
3. "Bridge" + plain text which is ready to be appended to a torrc file
or to be one of the torrc files in /etc/torrc.d/ (or whatever torrc.d
path Debain decides to use)

The default bridge shipped with tor package should be exactly the same
bridges contained in bridge_prefs.js[0] shipped with the latest stable
TBB. This is because:
1. The servers hosting default bridges are set up for huge amount of
traffic;
2. The servers hosting default bridges are probably audited by TPO for
better security;
3. Using a different set of bridges will distinguish the
anon-connection-wizard bridge users from the TBB bridge users, which
compromises their anonymity.

What do you think?

Looking forward to hearing your insights!

Best,
iry

[0]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=872456
[1]:
https://gitweb.torproject.org/builders/tor-browser-bundle.git/tree/Bundl
e-Data/PTConfigs/bridge_prefs.js?h=7.5a3-linux
[2]:
https://github.com/irykoon/anon-connection-wizard/blob/master/usr/share/
anon-connection-wizard/bridges_default
[3]: https://bridges.torproject.org/options

Best,
iry
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZldAaAAoJEKFLTbxtzdU8QHEP/0DyAtD95JOKEkDulsyuuVfx
uYT+5WGaRSFntqRq91RcNkHLHDy61JtLXhr5VIcz/tYIIe3TVZhI9idqbPgJMZc+
xxS/4r5qhkkcJ5X99xo7Jerz/0Y/4CKboREAkSstz15RL3FNLF6mwFZgWsiZ4rMa
SkruE8qchz1KIUuWKZyx3HioloZgIHQkvqQ6fE4asGIs8gnaKeofpSwRGq85/Vcq
T8D0WTqCFweLFaYzCWMtO7bVKXrfqC8rGLesLPJhxZbl0MJ3H/5TdvbPHn6VwRH0
AZCT5q7A+0fC/+HHwsn9SFhMo0TaIOtZBonOH58X3OEamKrmJOwqESvCPqILtMC3
pU2PtoOSDQEd684b2hxoR+0uRMOew+CJ+U7lzyh7yYU9x3jv//9CsFGcKcD+FoFG
zrkDPJ75uzYGJjHZUFpnk8opwVy49TghYiVvjwm9/PXXQVvEiCGNEt7W1wTHX3Ja
DygMsGN8GXg6AqWRESg4NcI8N/4U2EUEt+Li45u0qsTJ/uYmfamsC/WoacfjznaD
JQVKjJQlhuk7F3qUPuxtxaGCLopLJd/uAUyYaI/HPrFeR3uIawSzCW9prTkk/E7n
wAop3mErdp6JYnTacUb4pcYINIQf1c7FymbngrAmJzljxH4apZpBPugitAYvtJ2X
2OBJpUV0CtEJH3poicdq
=oct9
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170816033836</emailId><senderName>KL Liew</senderName><senderEmail>hexasoft@gmail.com</senderEmail><timestampReceived>2017-08-16 03:38:36-0400</timestampReceived><subject>[tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/alternative)]


All,

My name is Kim, the founder of IP2Location, a geolocation service provider
since 2002.

It looks like Tor is looking to review other providers for GeoIP service
while I was reading one of a meeting minute for a meeting back in March
2017.

https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/Metricsin5Years

We are very interested in contributing to Tor and work on this matter. Tor
can host and integrate IP2Location LITE (http://lite.ip2location.com) into
their application. IP2Location has programming libraries in most languages.
We can also work with developers if there is any technical issues.

In term of accuracy, you can find the latest research paper published by
TUM. IP2Location has good accuracy as reported in Table V.

Title       : HLOC: Hints-Based Geolocation Leveraging Multiple Measurement
Frameworks
Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg Carle
from Technical University of Munich (TUM)
PDF Access  : https://arxiv.org/pdf/1706.09331.pdf

Let me know if there is any questions.


- Kim

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;All,&lt;br&gt;&lt;br&gt;My name is Kim, the founder of IP2Location, a \
geolocation service provider since 2002.&lt;br&gt;&lt;br&gt;It looks like Tor is looking to \
review other providers for GeoIP service while I was reading one of a meeting minute \
for a meeting back in March 2017. &lt;br&gt;&lt;br&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/M \
etricsin5Years"&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/Metricsin5Years&lt;/a&gt;&lt;br&gt;&lt;br&gt;We \
are very interested in contributing to Tor and work on this matter. Tor can host and \
integrate IP2Location LITE (&lt;a \
href="http://lite.ip2location.com"&gt;http://lite.ip2location.com&lt;/a&gt;) into their \
application. IP2Location has programming libraries in most languages. We can also \
work with developers if there is any technical issues.&lt;br&gt;&lt;br&gt;In term of accuracy, \
you can find the latest research paper published by TUM. IP2Location has good \
accuracy as reported in Table V.&lt;br&gt;&lt;br&gt;Title             : HLOC: Hints-Based \
Geolocation Leveraging Multiple Measurement Frameworks&lt;br&gt;Authors         : Quirin \
Scheitle, Oliver Gasser, Patrick Sattler, Georg Carle from Technical University of \
Munich (TUM)&lt;br&gt;PDF Access   : &lt;a \
href="https://arxiv.org/pdf/1706.09331.pdf"&gt;https://arxiv.org/pdf/1706.09331.pdf&lt;/a&gt;&lt;br&gt;&lt;br&gt;Let \
me know if there is any questions.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;- Kim&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820214843</emailId><senderName>Robin Tarsiger</senderName><senderEmail>rtt@dasyatidae.com</senderEmail><timestampReceived>2017-08-20 21:48:43-0400</timestampReceived><subject>[tor-dev] Draft patchset for PT2.0 support (ticket #21816)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Good day, tor-dev;

As some of you know, I've been working on a patchset for Tor to allow
it to participate in Pluggable Transports 2.0 configuration, primarily
the new JSON Parameter Block SOCKS method (at least that's what I've
been calling it in the absence of a more official name), almost but
not quite as described in section 3.3.4 of PT2 draft 2 [1]---i.e.,
basically #21816 [2].

[1] https://www.pluggabletransports.info/assets/PTSpecV2Draft2.pdf
[2] https://trac.torproject.org/projects/tor/ticket/21816

I'm attaching a draft patchset which adds this functionality, with the
intent of getting feedback and making remaining cleanups or other
modifications necessary to get it merged into Tor. I have successfully
completed circuits through an obfs4 bridge using both obfs4proxy (PT1)
and a version of shapeshifter-dispatcher (PT2) using a patched Tor. I've
tried to follow the local style, but the preferred implementation
strategies aren't always clear, and of course I'd appreciate any reports
of other problems.

A forked Git repository is also available on Bitbucket [5][6], which
will be updated as I make remaining changes.

[5] https://bitbucket.org/DasyatidPrime/tor-rtt2017-21816.git (Git)
[6] https://bitbucket.org/DasyatidPrime/tor-rtt2017-21816/src (Web)

More implementation details are below if you're interested in this;
thanks for your attention. I'll try to be around on IRC more during
the week, so feel free to ping me there as well.

-RTT

=2E.. Details:

Not visible above, related to the target functionality:

  - I'm assuming the SOCKS method includes a response with an
    analogous structure to RFC 1929; PT2 draft 2 doesn't specify
    one. I've cleared this with blanu, and that's intended for the
    next draft of the PT2 specification.

  - Similarly, the length prefix is in fact big-endian; the example in
    PT2 draft 2 is wrong, though the text is correct.

  - We're looking into getting an IANA assignment for the method
    number. Technically this probably meets the requirements for the
    private use block, but I feel like interop might be easier later
    on, and it could simplify code paths in places to have a registered
    number (mainly if it's possible to decouple the method negotiation
    from the configuration-version plumbing). I believe this is still
    in limbo.

  - For the PT2 side, I've been testing against my branch of
    shapeshifter-dispatcher [3] compiled with my branch of
    shapeshifter-ipc [4] since there were some breaking changes to
    Shapeshifter upstream which were otherwise preventing it from
    interoperating with Tor. I'm planning to help merge fixes into
    Shapeshifter upstream as I can; it's my current understanding that
    there aren't any other PT2 managed transport implementations to
    test against.

[3]
https://github.com/OperatorFoundation/shapeshifter-dispatcher/tree/rtt201=
7
[4] https://github.com/OperatorFoundation/shapeshifter-ipc/tree/rtt2017

Issues on my radar currently (comments appreciated):

  - We probably want unit tests for the (limited) JSON encoding
    functions, and for the factored-out RFC 1929 encoding functions.
    Anything else that looks feasibly testable here?

  - It's not clear to me whether negotiating a PT2 configuration
    version still allows PT1-style RFC 1929 parameter encoding so that
    managed transports can support the new configuration version and
    the new SOCKS method separately. I've assumed it might be
    possible, so far, but that's not being tested against anything.

  - I currently restrict parameters to ASCII to avoid either writing
    a JSON encoder that can spit out invalid JSON or writing a JSON
    encoder that has to validate incoming UTF-8. The impression I've
    gotten is that this is probably okay, but if there are counter-
    examples, I can put in UTF-8 passthrough.

  - The commit sequence isn't the cleanest. How high a priority is it
    to reorder/combine patch hunks to make a cleaner one?

  - We still need a 'changes' file. (What would be an appropriate
    heading for this? Is this a minor feature, for instance?)

A few other questions:

  - Is there an effective way of doing automated testing of the SOCKS
    state machine currently in Tor? I didn't see anything obvious in
    the test directory. This seems like the most fragile part,
    especially since both the original and modified versions are not
    very explicit in their state machine nature and are split between
    multiple files.

  - Can there ever be more than one managed_proxy_t to a transport
    name? More generally, is there a relational diagram of the main
    Tor data structures somewhere? A lot of the way the plumbing for
    state and configuration information is set up feels kind of
    fragile.


["0001-PT2.0-Add-JSON-encoding-functions-for-new-arg-blocks.patch" (text/x-patch)]

From 56234341be9dcd72768c1f84e130a76d456a9dc5 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:27:49 -0500
Subject: [PATCH 01/12] PT2.0: Add JSON encoding functions for new arg blocks

These will be needed for the new SOCKS authentication format that
supports larger argument blocks.  We avoid taking Interesting Unicode
Processing dependencies by restricting the arguments to printable
ASCII, since this is likely the de facto situation in the current
SOCKS argument encoding anyway.
---
 src/or/transports.c | 120 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 src/or/transports.h |   3 ++
 2 files changed, 122 insertions(+), 1 deletion(-)

diff --git a/src/or/transports.c b/src/or/transports.c
index 31849a8d1..18a1d9836 100644
--- a/src/or/transports.c
+++ b/src/or/transports.c
@@ -1697,6 +1697,125 @@ pt_get_socks_args_for_proxy_addrport(const tor_addr_t *addr, uint16_t port)
   return pt_stringify_socks_args(socks_args);
 }
 
+/** Helper: convert the key-value pair in &lt;b&gt;arg&lt;/b&gt; into a member
+ *  suitable for being part of a JSON object.  In other words, the
+ *  string &lt;code&gt;k=v&lt;/code&gt; becomes &lt;code&gt;"k":"v"&lt;/code&gt;, escaping any
+ *  characters in &lt;code&gt;k&lt;/code&gt; or &lt;code&gt;v&lt;/code&gt; which require it
+ *  according to the JSON specification.  A trailing comma is not
+ *  included.  Return a newly allocated string with the member, or
+ *  NULL if unsupported characters are detected in &lt;b&gt;arg&lt;/b&gt;.
+ *
+ *  Currently, &lt;b&gt;arg&lt;/b&gt; must be an ASCII string.
+ **/
+static char *
+json_member_for_socks_arg(const char *arg)
+{
+  /* An ASCII key or value character results in at most two characters
+     when escaped.  There are five overhead characters.  (The actual
+     bound is slightly lower, but this is easier to understand.) */
+  size_t out_max_chars = strlen(arg) * 2 + 5;
+  char *out_buf = tor_malloc(out_max_chars + 1);
+  /* Invariant: writable(out, out_end - out + 1) &amp;&amp; out_buf &lt;= out &amp;&amp;
+     out &lt;= out_end. */
+  char *out = out_buf, *out_end = &amp;out_buf[out_max_chars];
+  /* Invariant: readable(in, 1) &amp;&amp; arg &lt;= in &amp;&amp; in &lt;= arg_end,
+     where arg_end = strchr(arg, '\0'). */
+  const char *in = arg;
+  int saw_equals = 0;
+
+  *(out++) = '"';
+
+  for (char ch = *in; ch != '\0'; ch = *(++in)) {
+    if (ch == '=' &amp;&amp; !saw_equals) {
+      /* Add delimiter between key and value, at most once per call. */
+      tor_assert(3 &lt;= out_end - out);
+      *(out++) = '"';
+      *(out++) = ':';
+      *(out++) = '"';
+      saw_equals = 1;
+    } else if (ch == '"' || *in == '\\') {
+      /* Add escaped character. */
+      tor_assert(2 &lt;= out_end - out);
+      *(out++) = '\\';
+      *(out++) = *in;
+    } else if (0x20 &lt;= ch &amp;&amp; ch &lt;= 0x7e) {
+      /* Add character raw. */
+      tor_assert(1 &lt;= out_end - out);
+      *(out++) = *in;
+    } else {
+      /* Non-ASCII characters are not supported in this function. */
+      goto fail;
+    }
+  }
+
+  *(out++) = '"';
+  *out = '\0';
+  tor_assert(out &lt;= out_end);
+
+  /* We don't bother to realloc here because it's not necessary for
+     the function contract, invites an extra arithmetic error, and the
+     wasted memory will currently always be freed shortly in
+     pt_jsonify_socks_args anyway. */
+  return out_buf;
+
+ fail:
+  tor_free(out_buf);
+  return NULL;
+}
+
+/** Encode the SOCKS arguments in &lt;b&gt;socks_args&lt;/b&gt; as a JSON object
+ *  according to the PT2 specification.  Return a string containing
+ *  the JSON object, or NULL if the arguments could not be encoded.
+ *  The string is allocated on the heap and it's the responsibility of
+ *  the caller to free it after use. */
+char *
+pt_jsonify_socks_args(const smartlist_t *socks_args)
+{
+  smartlist_t *sl_members = NULL;
+  char *joined_members = NULL;
+  char *result_json = NULL;
+
+  tor_assert(socks_args);
+  tor_assert(smartlist_len(socks_args) &gt; 0);
+
+  sl_members = smartlist_new();
+
+  SMARTLIST_FOREACH_BEGIN(socks_args, const char *, s) {
+    char *member = json_member_for_socks_arg(s);
+    if (!member)
+      goto done;
+
+    smartlist_add(sl_members, member);
+  } SMARTLIST_FOREACH_END(s);
+
+  joined_members = smartlist_join_strings(sl_members, ",", 0, NULL);
+  tor_asprintf(&amp;result_json, "{%s}", joined_members);
+  tor_free(joined_members);
+
+done:
+  SMARTLIST_FOREACH(sl_members, char *, s, tor_free(s));
+  smartlist_free(sl_members);
+
+  return result_json;
+}
+
+/** Return a JSON string of an object of arguments that we should pass
+ *  to the pluggable transports proxy in &lt;b&gt;addr&lt;/b&gt;:&lt;b&gt;port&lt;/b&gt;,
+ *  according to the PT2 specification.  The string is allocated on
+ *  the heap and it's the responsibility of the caller to free it
+ *  after use. */
+char *
+pt_get_json_object_for_proxy_addrport(const tor_addr_t *addr, uint16_t port)
+{
+  const smartlist_t *socks_args = NULL;
+
+  socks_args = get_socks_args_by_bridge_addrport(addr, port);
+  if (!socks_args)
+    return NULL;
+
+  return pt_jsonify_socks_args(socks_args);
+}
+
 /** The tor config was read.
  *  Destroy all managed proxies that were marked by a previous call to
  *  prepare_proxy_list_for_config_read() and are not used by the new
@@ -1740,4 +1859,3 @@ pt_free_all(void)
     managed_proxy_list=NULL;
   }
 }
-
diff --git a/src/or/transports.h b/src/or/transports.h
index 44a9626e5..c90ff34dd 100644
--- a/src/or/transports.h
+++ b/src/or/transports.h
@@ -61,9 +61,12 @@ void sweep_proxy_list(void);
 
 smartlist_t *get_transport_proxy_ports(void);
 char *pt_stringify_socks_args(const smartlist_t *socks_args);
+char *pt_jsonify_socks_args(const smartlist_t *socks_args);
 
 char *pt_get_socks_args_for_proxy_addrport(const tor_addr_t *addr,
                                             uint16_t port);
+char *pt_get_json_object_for_proxy_addrport(const tor_addr_t *addr,
+                                            uint16_t port);
 
 #ifdef PT_PRIVATE
 /** State of the managed proxy configuration protocol. */
-- 
2.14.0



["0002-PT2.0-Add-WANT_AUTH_METHOD_PT2-flows-to-SOCKS-handli.patch" (text/x-patch)]

From 7c5ab060db1b60c6e9729a6da6bfb2f4090aa950 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:28:04 -0500
Subject: [PATCH 02/12] PT2.0: Add WANT_AUTH_METHOD_PT2 flows to SOCKS handling

The new proxy state, PROXY_SOCKS5_WANT_AUTH_METHOD_PT2, implies that
we've requested either PT2 JSON parameter-block pseudo-authentication
_or_ RFC1929 username/password authentication repurposed for parameter
purposes.  It also causes a proxy connection to be aborted if
parameters existed that could not be transmitted.

This also pulls out some of the RFC1929 encoding that was previously
in connection_read_proxy_handshake into two new functions,
encode_rfc1929_spill and encode_rfc1929_separate, mostly since
encode_rfc1929_spill now has to potentially happen in two places.

In theory, we should be able to omit one of these places, but this is
being kept defensively for now in case there are broken PT1
implementations which do not correctly implement SOCKS5 subnegotiation
handling. (In this case, a separate configuration flag would still
have to be added later, but it would trigger the current code path.)
---
 src/or/buffers.c    |  42 ++++++++-
 src/or/connection.c | 255 +++++++++++++++++++++++++++++++++++++++++++++-------
 src/or/connection.h |   4 +
 src/or/or.h         |  12 ++-
 4 files changed, 279 insertions(+), 34 deletions(-)

diff --git a/src/or/buffers.c b/src/or/buffers.c
index bd84103c3..f2f6f5ab5 100644
--- a/src/or/buffers.c
+++ b/src/or/buffers.c
@@ -1878,8 +1878,12 @@ parse_socks(const char *data, size_t datalen, socks_request_t *req,
  * &lt;b&gt;reason&lt;/b&gt; is set to a descriptive message (free() when finished
  * with it).
  *
- * As a special case, 2 is returned when user/pass is required
- * during SOCKS5 handshake and user/pass is configured.
+ * Two other return values signal entry into subnegotiations:
+ *
+ * &lt;ul&gt;
+ * &lt;li&gt;2: RFC1929 username/password authentication is needed.&lt;/li&gt;
+ * &lt;li&gt;3: PT2 parameter-block pseudo-authentication is needed.&lt;/li&gt;
+ * &lt;/ul&gt;
  */
 int
 fetch_from_buf_socks_client(buf_t *buf, int state, char **reason)
@@ -1960,6 +1964,39 @@ parse_socks_client(const uint8_t *data, size_t datalen,
                            "authentication methods");
       return -1;
 
+    case PROXY_SOCKS5_WANT_AUTH_METHOD_PT2:
+      /* We have PT parameters. Return 2 if we can proceed with PT1-style
+       * user/pass authentication, or 3 for PT2-style parameter-block. */
+      switch (data[1]) {
+        case 0x00:
+          /* If the server (which is a PT client) returns "no
+           * authentication", this could actually be quite bad if we
+           * have parameters, but that's handled in
+           * connection_read_proxy_handshake. */
+          log_info(LD_NET, "SOCKS 5 client: server refuses PT parameters.");
+          *drain_out = -1;
+          return 1;
+
+        case 0x02:
+          log_info(LD_NET, "SOCKS 5 client: using username/password "
+                           "pseudo-authentication for PT parameters.");
+          *drain_out = -1;
+          return 2;
+
+          /* TODO: symbolic constants for SOCKS5 auth method numbers */
+        case 0x80:
+          log_info(LD_NET, "SOCKS 5 client: using PT2 pseudo-"
+                           "authentication for PT parameters.");
+          *drain_out = -1;
+          return 3;
+
+        /* fall through */
+      }
+
+      *reason = tor_strdup("server doesn't support any of our available "
+                           "PT parameter passing methods");
+      return -1;
+
     case PROXY_SOCKS5_WANT_AUTH_RFC1929_OK:
       /* handle server reply to rfc1929 authentication */
       if (data[1] != 0x00) {
@@ -2211,4 +2248,3 @@ assert_buf_ok(buf_t *buf)
     tor_assert(buf-&gt;datalen == total);
   }
 }
-
diff --git a/src/or/connection.c b/src/or/connection.c
index 5c65e886c..f59079b86 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2357,6 +2357,81 @@ connection_fetch_from_buf_socks_client(connection_t *conn,
   return fetch_from_buf_socks_client(conn-&gt;inbuf, state, reason);
 }
 
+/** Encode into &lt;b&gt;buf&lt;/b&gt; an RFC1929 authentication record in wire format
+ *  representing the pluggable transport args in &lt;b&gt;args&lt;/b&gt;, spilling them
+ *  from the username to the password field as needed.  &lt;b&gt;buf&lt;/b&gt; must have
+ *  space for at least &lt;code&gt;MAX_RFC1929_ENCODED_SIZE&lt;/code&gt; bytes.  Return the
+ *  number of bytes encoded, or -1 for error.  If &lt;b&gt;args&lt;/b&gt; is between 1 and
+ *  &lt;code&gt;MAX_SOCKS5_AUTH_SIZE_TOTAL&lt;/code&gt; characters, always succeds. */
+static ssize_t
+encode_rfc1929_spill(unsigned char *buf, const char *args)
+{
+  /* Invariant: buf &lt;= out &amp;&amp; out &lt;= &amp;buf[MAX_RFC1929_ENCODED_SIZE] */
+  unsigned char *out = buf;
+  /* Invariant: args &lt;= in &amp;&amp; in &lt;= strchr(args, '\0') */
+  const char *in = args;
+  size_t usize = 0, psize = 0;
+  tor_assert(*args != '\0');
+
+  *(out++) = 1; /* negotiation version */
+
+  while (usize &lt; MAX_SOCKS5_AUTH_FIELD_SIZE &amp;&amp; *in != '\0')
+    out[1 + (usize++)] = *(in++);
+  if (usize == 0)
+    return -1;
+  out[0] = usize;
+  out += 1 + usize;
+
+  if (*in == '\0') {
+    /* no chars left for password */
+    out[0] = 1;
+    out[1] = '\0';
+    out += 2;
+  } else {
+    while (psize &lt; MAX_SOCKS5_AUTH_FIELD_SIZE &amp;&amp; *in != '\0')
+      out[1 + (psize++)] = *(in++);
+    out[0] = psize;
+    out += 1 + psize;
+  }
+
+  /* If there's any chars left, we didn't have enough room. */
+  if (*in != '\0')
+    return -1;
+
+  tor_assert(out &lt;= &amp;buf[MAX_RFC1929_ENCODED_SIZE]);
+  return out - buf;
+}
+
+/** Encode into &lt;b&gt;buf&lt;/b&gt; an RFC1929 authentication record in wire format with
+ *  the username &lt;b&gt;user&lt;/b&gt; and the password &lt;b&gt;pass&lt;/b&gt;.  &lt;b&gt;buf&lt;/b&gt; must
+ *  have space for at least &lt;code&gt;MAX_RFC1929_ENCODED_SIZE&lt;/code&gt; bytes.
+ *  Return the number of bytes encoded, or -1 for error.  If &lt;b&gt;user&lt;/b&gt; and
+ *  &lt;b&gt;pass&lt;/b&gt; are each between 1 and &lt;code&gt;MAX_SOCKS5_AUTH_FIELD_SIZE&lt;/code&gt;
+ *  characters, always succeeds. */
+static ssize_t
+encode_rfc1929_separate(unsigned char *buf, const char *user,
+                        const char *pass)
+{
+  /* Invariant: buf &lt;= out &amp;&amp; out &lt;= &amp;buf[MAX_RFC1929_ENCODED_SIZE] */
+  unsigned char *out = buf;
+  size_t usize = strlen(user), psize = strlen(pass);
+  if (!(0 &lt; usize &amp;&amp; usize &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE))
+    return -1;
+  if (!(0 &lt; psize &amp;&amp; psize &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE))
+    return -1;
+
+  *(out++) = 1;
+  *(out++) = usize;
+  memcpy(out, user, usize);
+  out += usize;
+  *(out++) = psize;
+  memcpy(out, pass, psize);
+  out += psize;
+
+  tor_assert(out &lt;= &amp;buf[MAX_RFC1929_ENCODED_SIZE]);
+  return out - buf;
+}
+
 /** Call this from connection_*_process_inbuf() to advance the proxy
  * handshake.
  *
@@ -2409,12 +2484,13 @@ connection_read_proxy_handshake(connection_t *conn)
 
       /* send auth if needed, otherwise do connect */
       if (ret == 1) {
+        /* TODO: this doesn't check whether we had pending PT parameters like
+           the next case does. Should it? */
         connection_send_socks5_connect(conn);
         ret = 0;
       } else if (ret == 2) {
-        unsigned char buf[1024];
-        size_t reqsize, usize, psize;
-        const char *user, *pass;
+        unsigned char buf[MAX_RFC1929_ENCODED_SIZE];
+        ssize_t reqsize;
         char *socks_args_string = NULL;
 
         if (get_proxy_type() == PROXY_PLUGGABLE) {
@@ -2428,25 +2504,44 @@ connection_read_proxy_handshake(connection_t *conn)
 
           log_debug(LD_NET, "SOCKS5 arguments: %s", socks_args_string);
           tor_assert(strlen(socks_args_string) &gt; 0);
-          tor_assert(strlen(socks_args_string) &lt;= MAX_SOCKS5_AUTH_SIZE_TOTAL);
+          if (strlen(socks_args_string) &gt; MAX_SOCKS5_AUTH_SIZE_TOTAL) {
+            log_warn(LD_NET, "PT args too long for RFC1929 encoding: %d &gt; %d",
+                     (int)strlen(socks_args_string),
+                     (int)MAX_SOCKS5_AUTH_SIZE_TOTAL);
+            tor_free(socks_args_string);
+            ret = -1;
+            break;
+          }
 
-          if (strlen(socks_args_string) &gt; MAX_SOCKS5_AUTH_FIELD_SIZE) {
-            user = socks_args_string;
-            usize = MAX_SOCKS5_AUTH_FIELD_SIZE;
-            pass = socks_args_string + MAX_SOCKS5_AUTH_FIELD_SIZE;
-            psize = strlen(socks_args_string) - MAX_SOCKS5_AUTH_FIELD_SIZE;
-          } else {
-            user = socks_args_string;
-            usize = strlen(socks_args_string);
-            pass = "\0";
-            psize = 1;
+          reqsize = encode_rfc1929_spill(buf, socks_args_string);
+          if (reqsize &lt; 0) {
+            /* This shouldn't happen because we already satisfied the
+             * precondition above. */
+            log_err(LD_BUG, "Could not encode PT parameters despite precheck!");
+            tor_fragile_assert();
+            tor_free(socks_args_string);
+            ret = -1;
+            break;
           }
         } else if (get_options()-&gt;Socks5ProxyUsername) {
-          user = get_options()-&gt;Socks5ProxyUsername;
-          pass = get_options()-&gt;Socks5ProxyPassword;
+          const char *user = get_options()-&gt;Socks5ProxyUsername;
+          const char *pass = get_options()-&gt;Socks5ProxyPassword;
           tor_assert(user &amp;&amp; pass);
-          usize = strlen(user);
-          psize = strlen(pass);
+          /* Username and password lengths should have been checked during
+             torrc parsing. */
+          tor_assert(strlen(user) &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE);
+          tor_assert(strlen(pass) &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE);
+
+          reqsize = encode_rfc1929_separate(buf, user, pass);
+          if (reqsize &lt; 0) {
+            /* This shouldn't happen because we already satisfied the
+             * precondition above. */
+            log_err(LD_BUG, "Could not encode SOCKS authentication "
+                            "despite precheck!");
+            tor_fragile_assert();
+            ret = -1;
+            break;
+          }
         } else {
           log_err(LD_BUG, "We entered %s for no reason!", __func__);
           tor_fragile_assert();
@@ -2454,23 +2549,124 @@ connection_read_proxy_handshake(connection_t *conn)
           break;
         }
 
-        /* Username and password lengths should have been checked
-           above and during torrc parsing. */
-        tor_assert(usize &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE &amp;&amp;
-                   psize &lt;= MAX_SOCKS5_AUTH_FIELD_SIZE);
-        reqsize = 3 + usize + psize;
+        if (socks_args_string)
+          tor_free(socks_args_string);
+
+        connection_write_to_buf((char *)buf, reqsize, conn);
+
+        conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_RFC1929_OK;
+        ret = 0;
+      }
+      break;
 
-        buf[0] = 1; /* negotiation version */
-        buf[1] = usize;
-        memcpy(buf + 2, user, usize);
-        buf[2 + usize] = psize;
-        memcpy(buf + 3 + usize, pass, psize);
+    case PROXY_SOCKS5_WANT_AUTH_METHOD_PT2:
+      ret = connection_fetch_from_buf_socks_client(conn,
+                                                   conn-&gt;proxy_state,
+                                                   &amp;reason);
 
-        if (socks_args_string)
+      if (get_proxy_type() != PROXY_PLUGGABLE) {
+        /* We should never have set the connection to this proxy state
+         * if we're not using a PT proxy. */
+        log_err(LD_BUG, "In PT-oriented proxy state, but proxy is not PT!");
+        tor_fragile_assert();
+        ret = -1;
+        break;
+      }
+
+      if (ret == 1) {
+        /* Server requested no (pseudo-)authentication. */
+        if (get_socks_args_by_bridge_addrport(&amp;conn-&gt;addr, conn-&gt;port)) {
+          /* If we have PT parameters and no place to put them, this is
+           * actually quite bad, unlike if this were 'real' authentication
+           * where we could just take the open connection.  We don't want to
+           * accidentally establish a PT connection without the right
+           * parameters, so abort the connection.
+           *
+           * Note that we can't do this unconditionally, because the PT 2.0
+           * spec says parameterless PTs are allowed to signal no
+           * authentication at the SOCKS5 layer.
+           */
+          log_warn(LD_NET, "We have PT parameters but server refused them.");
+          ret = -1;
+          break;
+        } else {
+          connection_send_socks5_connect(conn);
+          ret = 0;
+        }
+      } else if (ret == 2) {
+        /* Server requested RFC1929 username/password authentication. */
+        unsigned char buf[MAX_RFC1929_ENCODED_SIZE];
+        ssize_t reqsize;
+        char *socks_args_string = NULL;
+
+        socks_args_string =
+          pt_get_socks_args_for_proxy_addrport(&amp;conn-&gt;addr, conn-&gt;port);
+        if (!socks_args_string) {
+          log_warn(LD_NET, "Could not create SOCKS args string.");
+          ret = -1;
+          break;
+        }
+
+        log_debug(LD_NET, "SOCKS5 arguments: %s", socks_args_string);
+        tor_assert(strlen(socks_args_string) &gt; 0);
+        if (strlen(socks_args_string) &gt; MAX_SOCKS5_AUTH_SIZE_TOTAL) {
+          log_warn(LD_NET, "PT args too long for RFC1929 encoding: %d &gt; %d",
+                   (int)strlen(socks_args_string),
+                   (int)MAX_SOCKS5_AUTH_SIZE_TOTAL);
+          tor_free(socks_args_string);
+          ret = -1;
+          break;
+        }
+
+        reqsize = encode_rfc1929_spill(buf, socks_args_string);
+        if (reqsize &lt; 0) {
+          /* This shouldn't happen because we already satisfied the
+           * precondition above. */
+          log_err(LD_BUG, "Could not encode PT parameters despite precheck!");
+          tor_fragile_assert();
           tor_free(socks_args_string);
+          ret = -1;
+          break;
+        }
 
         connection_write_to_buf((char *)buf, reqsize, conn);
+        tor_free(socks_args_string);
+
+        conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_RFC1929_OK;
+        ret = 0;
+      } else if (ret == 3) {
+        /* Server requested PT2 parameter-block pseudo-authentication. */
+        char *json_string = NULL;
+        unsigned char size_buf[4];
+        size_t json_size;
+
+        json_string =
+          pt_get_json_object_for_proxy_addrport(&amp;conn-&gt;addr, conn-&gt;port);
+        if (!json_string) {
+          log_warn(LD_NET, "Could not create PT2 JSON args string.");
+          ret = -1;
+          break;
+        }
+
+        log_debug(LD_NET, "PT2-JSON arguments: %s", json_string);
+        json_size = strlen(json_string);
+        if (json_size &gt; UINT32_MAX) {
+          tor_free(json_string);
+          log_warn(LD_NET, "PT2 JSON args string must be less than 4 GiB");
+          ret = -1;
+          break;
+        }
+
+        size_buf[0] = (unsigned char)(json_size &gt;&gt; 24);
+        size_buf[1] = (unsigned char)(json_size &gt;&gt; 16);
+        size_buf[2] = (unsigned char)(json_size &gt;&gt; 8);
+        size_buf[3] = (unsigned char)json_size;
 
+        connection_write_to_buf((char *)size_buf, 4, conn);
+        connection_write_to_buf(json_string, json_size, conn);
+        tor_free(json_string);
+
+        /* TODO: rename this to something like *_SIMPLE_OK */
         conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_RFC1929_OK;
         ret = 0;
       }
@@ -5196,4 +5392,3 @@ clock_skew_warning(const connection_t *conn, long apparent_skew, int trusted,
                                  apparent_skew, ext_source);
   tor_free(ext_source);
 }
-
diff --git a/src/or/connection.h b/src/or/connection.h
index 36e45aef3..4f2ea5f75 100644
--- a/src/or/connection.h
+++ b/src/or/connection.h
@@ -103,6 +103,10 @@ int connection_connect_unix(connection_t *conn, const char *socket_path,
     username and password fields. */
 #define MAX_SOCKS5_AUTH_SIZE_TOTAL 2*MAX_SOCKS5_AUTH_FIELD_SIZE
 
+/** Total maximum size of SOCKS5 RFC1929 authentication record
+    as sent on the wire. */
+#define MAX_RFC1929_ENCODED_SIZE ((2*MAX_SOCKS5_AUTH_FIELD_SIZE) + 3)
+
 int connection_proxy_connect(connection_t *conn, int type);
 int connection_read_proxy_handshake(connection_t *conn);
 void log_failed_proxy_connection(connection_t *conn);
diff --git a/src/or/or.h b/src/or/or.h
index ff11c7279..949c17167 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -254,7 +254,11 @@ typedef enum {
    any authentication . */
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_NONE 4
 /* We use a SOCKS5 proxy and we try to negotiate with
-   Username/Password authentication . */
+   Username/Password authentication.  This can be either true
+   authentication or PT1 parameter-passing pseudo-authentication, but
+   in the latter case we will usually allow PT2 parameter blocks as
+   well and will be in the PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 state
+   instead. */
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 5
 /* We use a SOCKS5 proxy and we just sent our credentials. */
 #define PROXY_SOCKS5_WANT_AUTH_RFC1929_OK 6
@@ -262,6 +266,12 @@ typedef enum {
 #define PROXY_SOCKS5_WANT_CONNECT_OK 7
 /* We use a proxy and we CONNECTed successfully!. */
 #define PROXY_CONNECTED 8
+/* We use a SOCKS5 proxy and we try to negotiate with PT2
+   parameter-block pseudo-authentication and/or PT1 Username/Password
+   pseudo-authentication.  In the strange event that we are only
+   willing to provide PT1, we will wind up in
+   PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 instead. */
+#define PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 9
 
 /** True iff &lt;b&gt;x&lt;/b&gt; is an edge connection. */
 #define CONN_IS_EDGE(x) \
-- 
2.14.0



["0003-PT2.0-Update-connection_proxy_state_to_string-for-ne.patch" (text/x-patch)]

From 88f5b2a9497e98183c666423ca703184cc8262b1 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:28:06 -0500
Subject: [PATCH 03/12] PT2.0: Update connection_proxy_state_to_string for new
 constant

---
 src/or/connection.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/or/connection.c b/src/or/connection.c
index f59079b86..853c9d60c 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2058,6 +2058,7 @@ connection_proxy_state_to_string(int state)
     "PROXY_SOCKS5_WANT_AUTH_RFC1929_OK",
     "PROXY_SOCKS5_WANT_CONNECT_OK",
     "PROXY_CONNECTED",
+    "PROXY_SOCKS5_WANT_AUTH_METHOD_PT2",
   };
 
   if (state &lt; PROXY_NONE || state &gt; PROXY_CONNECTED)
-- 
2.14.0



["0004-PT2.0-Add-note-of-limit-of-proxy_state-bitfield-near.patch" (text/x-patch)]

From 39ff3f4e8ec5760ff9e274ec021e22ad27fc0cb6 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:28:07 -0500
Subject: [PATCH 04/12] PT2.0: Add note of limit of proxy_state bitfield near
 its constants

---
 src/or/or.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/or/or.h b/src/or/or.h
index 949c17167..c660908f0 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -273,6 +273,10 @@ typedef enum {
    PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 instead. */
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 9
 
+#define PROXY_STATE_MAX_ 9
+/* !!!! If there is ever a proxy state over 15, we must grow the
+ * proxy_state field in connection_t. */
+
 /** True iff &lt;b&gt;x&lt;/b&gt; is an edge connection. */
 #define CONN_IS_EDGE(x) \
   ((x)-&gt;type == CONN_TYPE_EXIT || (x)-&gt;type == CONN_TYPE_AP)
-- 
2.14.0



["0005-PT2.0-Change-bridge-parameter-length-check-from-erro.patch" (text/x-patch)]

From d7c389009cb1335d32b4f0f487bdc34280a78f3e Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:28:08 -0500
Subject: [PATCH 05/12] PT2.0: Change bridge parameter length check from error
 to warning

We don't have a good way of getting the PT version in there (and
probably never will at that stage of execution?) so just always
warn, with a reworded message mentioning that only PT2 proxies
can handle long parameter blocks.
---
 src/or/config.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/or/config.c b/src/or/config.c
index 9b6bf40eb..3f0bfb56d 100644
--- a/src/or/config.c
+++ b/src/or/config.c
@@ -5485,10 +5485,11 @@ validate_transport_socks_arguments(const smartlist_t *args)
   tor_free(socks_string);
 
   if (socks_string_len &gt; MAX_SOCKS5_AUTH_SIZE_TOTAL) {
-    log_warn(LD_CONFIG, "SOCKS arguments can't be more than %u bytes (%lu).",
+    log_warn(LD_CONFIG,
+             "PT1 SOCKS arguments can't be more than %u bytes (%lu).  "
+             "This transport must implement PT2 for these parameters",
              MAX_SOCKS5_AUTH_SIZE_TOTAL,
              (unsigned long) socks_string_len);
-    return -1;
   }
 
   return 0;
-- 
2.14.0



["0006-PT2.0-Adjust-outgoing-SOCKS-auth-negotiation-for-PT.patch" (text/x-patch)]

From dfa86cadfe846b26e8f838b17cad0cc5a6da2593 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:28:09 -0500
Subject: [PATCH 06/12] PT2.0: Adjust outgoing SOCKS auth negotiation for PT

This adds the PT2 JSON method when there are PT parameters to
negotiate. (Though possibly it should only do that if we have a
known PT2 on the other side, per #21816 comment 3.) It also
switches to the correct state to activate handling for it: this
is the part that makes the PROXY_SOCKS5_WANT_AUTH_METHOD_PT2
state live.
---
 src/or/connection.c | 27 ++++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)

diff --git a/src/or/connection.c b/src/or/connection.c
index 853c9d60c..798b2968f 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2215,23 +2215,36 @@ connection_proxy_connect(connection_t *conn, int type)
     }
 
     case PROXY_SOCKS5: {
-      unsigned char buf[4]; /* fields: vers, num methods, method list */
+      unsigned char buf[16]; /* fields: vers, num methods, method list */
 
       /* Send a SOCKS5 greeting (connect request must wait) */
 
       buf[0] = 5; /* version */
+      /* buf[1] will be the count of auth methods, and buf[2...] will
+         be the identifying numbers of the auth methods. */
 
       /* We have to use SOCKS5 authentication, if we have a
          Socks5ProxyUsername or if we want to pass arguments to our
          pluggable transport proxy: */
-      if ((options-&gt;Socks5ProxyUsername) ||
-          (get_proxy_type() == PROXY_PLUGGABLE &amp;&amp;
-           (get_socks_args_by_bridge_addrport(&amp;conn-&gt;addr, conn-&gt;port)))) {
-      /* number of auth methods */
+      if (options-&gt;Socks5ProxyUsername) {
         buf[1] = 2;
-        buf[2] = 0x00; /* no authentication */
-        buf[3] = 0x02; /* rfc1929 Username/Passwd auth */
+        buf[2] = 0x00; /* none - credentials weren't needed */
+        buf[3] = 0x02; /* RFC1929 - use username/password */
+
         conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929;
+      } else if (get_proxy_type() == PROXY_PLUGGABLE) {
+        if (get_socks_args_by_bridge_addrport(&amp;conn-&gt;addr, conn-&gt;port)) {
+          /* Only negotiate methods that have nonempty parameters. */
+          buf[1] = 2;
+          buf[2] = 0x02; /* RFC1929 - params in username/password */
+          buf[3] = 0x80; /* PT2 JSON - params as JSON object */
+        } else {
+          /* Only negotiate parameterless method. */
+          buf[1] = 1;
+          buf[2] = 0x00; /* none - parameterless */
+        }
+
+        conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_PT2;
       } else {
         buf[1] = 1;
         buf[2] = 0x00; /* no authentication */
-- 
2.14.0



["0007-PT2.0-Remove-failing-test-for-huge-bridge-lines.patch" (text/x-patch)]

From 6a740b2ba00a1a35ad3c36292f1f307d2c2fa7d6 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Mon, 24 Jul 2017 20:43:48 -0500
Subject: [PATCH 07/12] PT2.0: Remove failing test for huge bridge lines

The point of the JSON parameter block support is to allow these to
succeed in PT2 mode, of course, so making sure they fail at the
config stage is contradictory.
---
 src/test/test_config.c | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/src/test/test_config.c b/src/test/test_config.c
index 6b875a0a0..9c0c1289d 100644
--- a/src/test/test_config.c
+++ b/src/test/test_config.c
@@ -501,17 +501,6 @@ test_config_parse_bridge_line(void *arg)
                        "4352e58420e68f5e40bf7c74faddccd9d1349413 what");
   /* no addrport */
   bad_bridge_line_test("asdw");
-  /* huge k=v value that can't fit in SOCKS fields */
-  bad_bridge_line_test(
-           "obfs2 2.2.2.2:1231 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
-           "aa=b");
 }
 
 static void
-- 
2.14.0



["0008-PT2.0-Add-version-2-to-configuration-negotiation.patch" (text/x-patch)]

From d3d89d525ab22819da08f768fd67037b7b6eb780 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Thu, 3 Aug 2017 11:19:47 -0500
Subject: [PATCH 08/12] PT2.0: Add version 2 to configuration negotiation

This still hardcodes both "1" and "2" as acceptable versions in
two places, but there are comments to keep them in sync. If we
ever need more than this, we should probably switch to using a
table, but that still seems far off.
---
 src/or/transports.c | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/src/or/transports.c b/src/or/transports.c
index 18a1d9836..4b72d341f 100644
--- a/src/or/transports.c
+++ b/src/or/transports.c
@@ -125,9 +125,9 @@ static void parse_method_error(const char *line, int is_server_method);
 #define PROTO_PROXY_DONE "PROXY DONE"
 #define PROTO_PROXY_ERROR "PROXY-ERROR"
 
-/** The first and only supported - at the moment - configuration
-    protocol version. */
+/** Currently supported configuration protocol versions. */
 #define PROTO_VERSION_ONE 1
+#define PROTO_VERSION_TWO 2
 
 /** A list of pluggable transports found in torrc. */
 static smartlist_t *transport_list = NULL;
@@ -995,13 +995,21 @@ parse_version(const char *line, managed_proxy_t *mp)
     return -1;
   }
 
-  if (strcmp("1", line+strlen(PROTO_NEG_SUCCESS)+1)) { /* hardcoded temp */
+  const char *version = line+strlen(PROTO_NEG_SUCCESS)+1;
+
+  /* Keep this in sync with the exported value of TOR_PT_MANAGED_TRANSPORT_VER
+     below, and with the log_warn call. If we get any more configuration
+     versions than this, this should probably be moved to a constant table. */
+  if (!strcmp("1", version)) {
+    mp-&gt;conf_protocol = PROTO_VERSION_ONE;
+  } else if (!strcmp("2", version)) {
+    mp-&gt;conf_protocol = PROTO_VERSION_TWO;
+  } else {
     log_warn(LD_CONFIG, "Managed proxy tried to negotiate on version '%s'. "
-             "We only support version '1'", line+strlen(PROTO_NEG_SUCCESS)+1);
+             "But we only support versions '1' and '2'", version);
     return -1;
   }
 
-  mp-&gt;conf_protocol = PROTO_VERSION_ONE; /* temp. till more versions appear */
   return 0;
 }
 
@@ -1321,7 +1329,8 @@ create_managed_proxy_environment(const managed_proxy_t *mp)
     tor_free(state_tmp);
   }
 
-  smartlist_add_strdup(envs, "TOR_PT_MANAGED_TRANSPORT_VER=1");
+  /* Keep this in sync with the string-switch in parse_version above. */
+  smartlist_add_strdup(envs, "TOR_PT_MANAGED_TRANSPORT_VER=1,2");
 
   {
     char *transports_to_launch =
-- 
2.14.0



["0009-PT2.0-Fail-if-we-have-PT-parameters-and-can-t-send-t.patch" (text/x-patch)]

From 844fc3d69359537df14e4ec7560a3c8d01638201 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Sun, 20 Aug 2017 07:39:44 -0500
Subject: [PATCH 09/12] PT2.0: Fail if we have PT parameters and can't send
 them

This should be safer than proceeding blindly.
---
 src/or/connection.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/src/or/connection.c b/src/or/connection.c
index 798b2968f..b8fb96e16 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2498,10 +2498,15 @@ connection_read_proxy_handshake(connection_t *conn)
 
       /* send auth if needed, otherwise do connect */
       if (ret == 1) {
-        /* TODO: this doesn't check whether we had pending PT parameters like
-           the next case does. Should it? */
-        connection_send_socks5_connect(conn);
-        ret = 0;
+        if (get_proxy_type() == PROXY_PLUGGABLE
+            &amp;&amp; get_socks_args_by_bridge_addrport(&amp;conn-&gt;addr, conn-&gt;port)) {
+          log_warn(LD_NET, "We have PT parameters but server refused them.");
+          ret = -1;
+          break;
+        } else {
+          connection_send_socks5_connect(conn);
+          ret = 0;
+        }
       } else if (ret == 2) {
         unsigned char buf[MAX_RFC1929_ENCODED_SIZE];
         ssize_t reqsize;
-- 
2.14.0



["0010-PT2.0-Add-test-for-conf-proto-2-before-negotiating-m.patch" (text/x-patch)]

From 77c423a525d4b650d0368c6244f6075be6075548 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Sun, 20 Aug 2017 10:08:32 -0500
Subject: [PATCH 10/12] PT2.0: Add test for conf proto 2 before negotiating
 method 0x80

Since this method number is in the private use block, we need to
know that the other SOCKS 5 endpoint has already agreed to
interpret it as PT2 JSON Parameter Block pseudo-authentication
rather than something else.

Thus, we add a mechanism for testing transport feature flags from
places that aren't transport.c. (The original mechanism mentioned in
ticket #21816 implied exposing the managed_proxy_t structure, which
seemed a bit much.)
---
 src/or/connection.c | 36 +++++++++++++++++++++++++++++++-----
 src/or/or.h         | 12 +++++-------
 src/or/transports.c | 37 +++++++++++++++++++++++++++++++++++++
 src/or/transports.h |  7 +++++++
 4 files changed, 80 insertions(+), 12 deletions(-)

diff --git a/src/or/connection.c b/src/or/connection.c
index b8fb96e16..8248b5d1e 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2088,6 +2088,22 @@ get_proxy_type(void)
     return PROXY_NONE;
 }
 
+/** Given the &lt;b&gt;addr&lt;/b&gt; and &lt;b&gt;port&lt;/b&gt; of a bridge, return 1 if that
+ *  bridge uses a pluggable transport for which SOCKS 5 connections
+ *  should use PT2 JSON Parameter Block pseudo-authentication. Otherwise,
+ *  return 0. */
+static int
+pt_socks5_auth_is_pt2(const tor_addr_t *addr, uint16_t port)
+{
+  const char *transport_name =
+    find_transport_name_by_bridge_addrport(addr, port);
+  if (!transport_name)
+    return 0;
+
+  return !!pt_test_features_by_transport_name(transport_name,
+                                              PT_FEATURE_SOCKS5_PT2_AUTH);
+}
+
 /* One byte for the version, one for the command, two for the
    port, and four for the addr... and, one more for the
    username NUL: */
@@ -2235,19 +2251,29 @@ connection_proxy_connect(connection_t *conn, int type)
       } else if (get_proxy_type() == PROXY_PLUGGABLE) {
         if (get_socks_args_by_bridge_addrport(&amp;conn-&gt;addr, conn-&gt;port)) {
           /* Only negotiate methods that have nonempty parameters. */
-          buf[1] = 2;
-          buf[2] = 0x02; /* RFC1929 - params in username/password */
-          buf[3] = 0x80; /* PT2 JSON - params as JSON object */
+          if (pt_socks5_auth_is_pt2(&amp;conn-&gt;addr, conn-&gt;port)) {
+            buf[1] = 2;
+            buf[2] = 0x80; /* PT2 JSON - params as JSON object */
+            buf[3] = 0x02; /* RFC1929 - params in username/password */
+
+            conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_PT2;
+          } else {
+            buf[1] = 1;
+            buf[2] = 0x02; /* RFC1929 - params in username/password */
+
+            conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929;
+          }
         } else {
           /* Only negotiate parameterless method. */
           buf[1] = 1;
           buf[2] = 0x00; /* none - parameterless */
-        }
 
-        conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_PT2;
+          conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_NONE;
+        }
       } else {
         buf[1] = 1;
         buf[2] = 0x00; /* no authentication */
+
         conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_NONE;
       }
 
diff --git a/src/or/or.h b/src/or/or.h
index c660908f0..4b61de222 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -255,10 +255,9 @@ typedef enum {
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_NONE 4
 /* We use a SOCKS5 proxy and we try to negotiate with
    Username/Password authentication.  This can be either true
-   authentication or PT1 parameter-passing pseudo-authentication, but
-   in the latter case we will usually allow PT2 parameter blocks as
-   well and will be in the PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 state
-   instead. */
+   authentication or PT1 parameter-passing pseudo-authentication.  If
+   we are allowing PT2 JSON parameter blocks as well, we will be in
+   PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 instead. */
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 5
 /* We use a SOCKS5 proxy and we just sent our credentials. */
 #define PROXY_SOCKS5_WANT_AUTH_RFC1929_OK 6
@@ -268,9 +267,8 @@ typedef enum {
 #define PROXY_CONNECTED 8
 /* We use a SOCKS5 proxy and we try to negotiate with PT2
    parameter-block pseudo-authentication and/or PT1 Username/Password
-   pseudo-authentication.  In the strange event that we are only
-   willing to provide PT1, we will wind up in
-   PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 instead. */
+   pseudo-authentication.  If we are only willing to provide PT1, we
+   will wind up in PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 instead. */
 #define PROXY_SOCKS5_WANT_AUTH_METHOD_PT2 9
 
 #define PROXY_STATE_MAX_ 9
diff --git a/src/or/transports.c b/src/or/transports.c
index 4b72d341f..7f630e3cf 100644
--- a/src/or/transports.c
+++ b/src/or/transports.c
@@ -424,6 +424,43 @@ get_managed_proxy_by_argv_and_type(char **proxy_argv, int is_server)
   return NULL;
 }
 
+/** Return a managed proxy which has launched the transport
+ *  &lt;b&gt;transport_name&lt;/b&gt;. If no such managed proxy exists, return
+ *  NULL. */
+static managed_proxy_t *
+get_managed_proxy_by_transport_name(const char *transport_name)
+{
+  if (!managed_proxy_list)
+    return NULL;
+
+  SMARTLIST_FOREACH_BEGIN(managed_proxy_list, managed_proxy_t *, mp) {
+    if (smartlist_contains_string(mp-&gt;transports, transport_name))
+      return mp;
+  } SMARTLIST_FOREACH_END(mp);
+
+  return NULL;
+}
+
+/** Return a bitmask which, for each bit in &lt;b&gt;features&lt;/b&gt;, has the
+ *  corresponding bit set if and only if that feature is applicable to
+ *  the transport &lt;b&gt;transport_name&lt;/b&gt;. Valid features are defined as
+ *  PT_FEATURE constants in transports.h.
+ */
+unsigned
+pt_test_features_by_transport_name(const char *transport_name,
+                                   unsigned features)
+{
+  managed_proxy_t *mp = get_managed_proxy_by_transport_name(transport_name);
+  unsigned result = 0;
+
+  if (features &amp; PT_FEATURE_SOCKS5_PT2_AUTH) {
+    if (mp != NULL &amp;&amp; mp-&gt;conf_protocol &gt;= 2)
+      result |= PT_FEATURE_SOCKS5_PT2_AUTH;
+  }
+
+  return result;
+}
+
 /** Add &lt;b&gt;transport&lt;/b&gt; to managed proxy &lt;b&gt;mp&lt;/b&gt;. */
 static void
 add_transport_to_proxy(const char *transport, managed_proxy_t *mp)
diff --git a/src/or/transports.h b/src/or/transports.h
index c90ff34dd..f55f8361d 100644
--- a/src/or/transports.h
+++ b/src/or/transports.h
@@ -68,6 +68,13 @@ char *pt_get_socks_args_for_proxy_addrport(const tor_addr_t *addr,
 char *pt_get_json_object_for_proxy_addrport(const tor_addr_t *addr,
                                             uint16_t port);
 
+/** SOCKS5 connections via this transport name should use PT2
+ *  JSON Parameter Block pseudo-authentication */
+#define PT_FEATURE_SOCKS5_PT2_AUTH (1u&lt;&lt;0)
+
+unsigned pt_test_features_by_transport_name(const char *transport_name,
+                                            unsigned features);
+
 #ifdef PT_PRIVATE
 /** State of the managed proxy configuration protocol. */
 enum pt_proto_state {
-- 
2.14.0



["0011-PT2.0-Use-symbolic-constants-for-SOCKS-methods.patch" (text/x-patch)]

From e0a4fdda55e272ff04de42a31fe63ff5a669eaed Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Sun, 20 Aug 2017 10:49:43 -0500
Subject: [PATCH 11/12] PT2.0: Use symbolic constants for SOCKS methods

There were already some present in or.h, so add the PT2 one to that
set and change the outbound SOCKS method negotiations to use them
instead of hex literals.
---
 src/or/buffers.c    | 13 ++++++-------
 src/or/connection.c | 14 +++++++-------
 src/or/or.h         |  1 +
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/or/buffers.c b/src/or/buffers.c
index f2f6f5ab5..9b1d0ebb0 100644
--- a/src/or/buffers.c
+++ b/src/or/buffers.c
@@ -1934,7 +1934,7 @@ parse_socks_client(const uint8_t *data, size_t datalen,
 
     case PROXY_SOCKS5_WANT_AUTH_METHOD_NONE:
       /* we don't have any credentials */
-      if (data[1] != 0x00) {
+      if (data[1] != SOCKS_NO_AUTH) {
         *reason = tor_strdup("server doesn't support any of our "
                              "available authentication methods");
         return -1;
@@ -1948,12 +1948,12 @@ parse_socks_client(const uint8_t *data, size_t datalen,
       /* we have a username and password. return 1 if we can proceed without
        * providing authentication, or 2 otherwise. */
       switch (data[1]) {
-        case 0x00:
+        case SOCKS_NO_AUTH:
           log_info(LD_NET, "SOCKS 5 client: we have auth details but server "
                             "doesn't require authentication.");
           *drain_out = -1;
           return 1;
-        case 0x02:
+        case SOCKS_USER_PASS:
           log_info(LD_NET, "SOCKS 5 client: need authentication.");
           *drain_out = -1;
           return 2;
@@ -1968,7 +1968,7 @@ parse_socks_client(const uint8_t *data, size_t datalen,
       /* We have PT parameters. Return 2 if we can proceed with PT1-style
        * user/pass authentication, or 3 for PT2-style parameter-block. */
       switch (data[1]) {
-        case 0x00:
+        case SOCKS_NO_AUTH:
           /* If the server (which is a PT client) returns "no
            * authentication", this could actually be quite bad if we
            * have parameters, but that's handled in
@@ -1977,14 +1977,13 @@ parse_socks_client(const uint8_t *data, size_t datalen,
           *drain_out = -1;
           return 1;
 
-        case 0x02:
+        case SOCKS_USER_PASS:
           log_info(LD_NET, "SOCKS 5 client: using username/password "
                            "pseudo-authentication for PT parameters.");
           *drain_out = -1;
           return 2;
 
-          /* TODO: symbolic constants for SOCKS5 auth method numbers */
-        case 0x80:
+        case SOCKS_PRIVATE_PT2_JSON:
           log_info(LD_NET, "SOCKS 5 client: using PT2 pseudo-"
                            "authentication for PT parameters.");
           *drain_out = -1;
diff --git a/src/or/connection.c b/src/or/connection.c
index 8248b5d1e..cb9addf9b 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2244,8 +2244,8 @@ connection_proxy_connect(connection_t *conn, int type)
          pluggable transport proxy: */
       if (options-&gt;Socks5ProxyUsername) {
         buf[1] = 2;
-        buf[2] = 0x00; /* none - credentials weren't needed */
-        buf[3] = 0x02; /* RFC1929 - use username/password */
+        buf[2] = SOCKS_NO_AUTH;
+        buf[3] = SOCKS_USER_PASS;
 
         conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929;
       } else if (get_proxy_type() == PROXY_PLUGGABLE) {
@@ -2253,26 +2253,26 @@ connection_proxy_connect(connection_t *conn, int type)
           /* Only negotiate methods that have nonempty parameters. */
           if (pt_socks5_auth_is_pt2(&amp;conn-&gt;addr, conn-&gt;port)) {
             buf[1] = 2;
-            buf[2] = 0x80; /* PT2 JSON - params as JSON object */
-            buf[3] = 0x02; /* RFC1929 - params in username/password */
+            buf[2] = SOCKS_PRIVATE_PT2_JSON;
+            buf[3] = SOCKS_USER_PASS;
 
             conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_PT2;
           } else {
             buf[1] = 1;
-            buf[2] = 0x02; /* RFC1929 - params in username/password */
+            buf[2] = SOCKS_USER_PASS;
 
             conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929;
           }
         } else {
           /* Only negotiate parameterless method. */
           buf[1] = 1;
-          buf[2] = 0x00; /* none - parameterless */
+          buf[2] = SOCKS_NO_AUTH;
 
           conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_NONE;
         }
       } else {
         buf[1] = 1;
-        buf[2] = 0x00; /* no authentication */
+        buf[2] = SOCKS_NO_AUTH;
 
         conn-&gt;proxy_state = PROXY_SOCKS5_WANT_AUTH_METHOD_NONE;
       }
diff --git a/src/or/or.h b/src/or/or.h
index 4b61de222..2c26c33f9 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -4696,6 +4696,7 @@ static inline void or_state_mark_dirty(or_state_t *state, time_t when)
 #define MAX_SOCKS_ADDR_LEN 256
 #define SOCKS_NO_AUTH 0x00
 #define SOCKS_USER_PASS 0x02
+#define SOCKS_PRIVATE_PT2_JSON 0x80
 
 /** Please open a TCP connection to this addr:port. */
 #define SOCKS_COMMAND_CONNECT       0x01
-- 
2.14.0



["0012-PT2.0-Fix-whitespace.patch" (text/x-patch)]

From 887352263569f9bec34befd261b5714f6f30be17 Mon Sep 17 00:00:00 2001
From: Robin Tarsiger &lt;rtt@dasyatidae.com&gt;
Date: Sun, 20 Aug 2017 15:06:46 -0500
Subject: [PATCH 12/12] PT2.0: Fix whitespace

---
 src/or/buffers.c    | 1 +
 src/or/connection.c | 4 +++-
 src/or/transports.c | 3 ++-
 3 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/or/buffers.c b/src/or/buffers.c
index 9b1d0ebb0..690fdf8e2 100644
--- a/src/or/buffers.c
+++ b/src/or/buffers.c
@@ -2247,3 +2247,4 @@ assert_buf_ok(buf_t *buf)
     tor_assert(buf-&gt;datalen == total);
   }
 }
+
diff --git a/src/or/connection.c b/src/or/connection.c
index cb9addf9b..93cec1f3b 100644
--- a/src/or/connection.c
+++ b/src/or/connection.c
@@ -2562,7 +2562,8 @@ connection_read_proxy_handshake(connection_t *conn)
           if (reqsize &lt; 0) {
             /* This shouldn't happen because we already satisfied the
              * precondition above. */
-            log_err(LD_BUG, "Could not encode PT parameters despite precheck!");
+            log_err(LD_BUG,
+                    "Could not encode PT parameters despite precheck!");
             tor_fragile_assert();
             tor_free(socks_args_string);
             ret = -1;
@@ -5437,3 +5438,4 @@ clock_skew_warning(const connection_t *conn, long apparent_skew, int trusted,
                                  apparent_skew, ext_source);
   tor_free(ext_source);
 }
+
diff --git a/src/or/transports.c b/src/or/transports.c
index 7f630e3cf..ac6ceefca 100644
--- a/src/or/transports.c
+++ b/src/or/transports.c
@@ -1838,7 +1838,7 @@ pt_jsonify_socks_args(const smartlist_t *socks_args)
   tor_asprintf(&amp;result_json, "{%s}", joined_members);
   tor_free(joined_members);
 
-done:
+ done:
   SMARTLIST_FOREACH(sl_members, char *, s, tor_free(s));
   smartlist_free(sl_members);
 
@@ -1905,3 +1905,4 @@ pt_free_all(void)
     managed_proxy_list=NULL;
   }
 }
+
-- 
2.14.0



["signature.asc" (application/pgp-signature)]
[Attachment #22 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170811173600</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-08-11 17:36:00-0400</timestampReceived><subject>[tor-dev] Proposal 281: downloading microdescriptors in bulk</subject><body>

Filename: 281-bulk-md-download.txt
Title: Downloading microdescriptors in bulk
Author: Nick Mathewson
Created: 11-Aug-2017
Status: Draft

1. Introduction

  This proposal describes a ways to download more microdescriptors
  at a time, using fewer bytes.

  Right now, to download N microdescriptors, the client must send
  about 44*N bytes in its HTTP request.  Because clients can request
  microdescriptors in any combination, the directory caches cannot
  pre-compress responses to these requests, and need to use less
  space-efficient on-the-fly compression algorithms.

  Under this proposal, clients simply say "Send me the
  microdescriptors I need", given what I know.

2. Combined microdescriptor downloads

2.1. By diff

  If a client has a consensus with base64 sha3-256 digest X, and it
  previously had a consensus with base64 sha3-256 digests Y then
  it may request all the microdescriptors listed in X but not Y,
  by asking for the resource:
      /tor/micro/diff/X/Y

  Clients SHOULD only ask for this resource compressed.

  Caches MUST NOT answer this request unless they recognize the
  consensus with digest X, and digest Y.
  digest Y.  If answering, caches MUST reply with all of the
  microdescriptors that the cache holds that were listed by
  consensus X, and MUST omit all the microdescriptors that were
  omitted listed in consensus Y.

2.2. By consensus:

  If a client has fewer than NMNM% of the microdescriptors listed in a
  consensus X, it should fetch the resource
      /tor/micro/full/X

  Clients SHOULD only ask for this resource compressed.

  Caches MUST NOT answer this request unless they recognize the
  consensus with digest X. They should send all the microdescriptors
  they have that are listed in that consensus.

2.3. When to make these requests

  Clients should decide to use this format in preference to the
  old download-by-digest format if the consensus X lists their
  preferred directory cache as using a new DirCache subprotocol
  version. (See 5 below.)

3. Performance analysis

  This is a back-of-the-envelope analysis using a month's worth of
  consensus documents, and a randomly chosen sample of
  microdescriptors.


  On average, about 0.5% of the microdescriptors change between any
  two consensuses.  Call it 50.  That means 50*43 bytes == 2150
  bytes to request the microdescriptors.  It means ~24530 bytes of
  microdescriptors downloaded, compressed to ~13687 bytes by zstd.

  With this proposal, we're down to 86 bytes for the request, and we
  can precompute the compressed output, making it save to use lzma2,
  getting a compressed result more like 13362.

  It appears that this change would save about 15% for incremental
  microdescriptor downloads, most of that coming from the reduction
  in request size.

  For complete downloads, a complete set of microdescriptors is about
  7700 microdesciptors long.  That makes the total number of bytes
  for the requests 7700*43 == 331100 bytes.  The response, if
  compressed with lzma instead of zstd, would fall from 1659682 to
  1587804 bytes, for a total savings of 20%.


5. Compatibility

   Caches supporting this download protocol need to advertise
   support of a new DirCache subprotocol version.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170821044240</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-21 04:42:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal 281: downloading microdescriptors in bulk</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 12 Aug 2017, at 03:36, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Filename: 281-bulk-md-download.txt
&gt; Title: Downloading microdescriptors in bulk
&gt; Author: Nick Mathewson
&gt; Created: 11-Aug-2017
&gt; Status: Draft
&gt; 
&gt; 1. Introduction
&gt; 
&gt;  This proposal describes a ways to download more microdescriptors
&gt;  at a time, using fewer bytes.
&gt; 
&gt;  Right now, to download N microdescriptors, the client must send
&gt;  about 44*N bytes in its HTTP request.  Because clients can request
&gt;  microdescriptors in any combination, the directory caches cannot
&gt;  pre-compress responses to these requests, and need to use less
&gt;  space-efficient on-the-fly compression algorithms.
&gt; 
&gt;  Under this proposal, clients simply say "Send me the
&gt;  microdescriptors I need", given what I know.
&gt; 
&gt; 2. Combined microdescriptor downloads
&gt; 
&gt; 2.1. By diff
&gt; 
&gt;  If a client has a consensus with base64 sha3-256 digest X, and it
&gt;  previously had a consensus with base64 sha3-256 digests Y then
&gt;  it may request all the microdescriptors listed in X but not Y,
&gt;  by asking for the resource:
&gt;      /tor/micro/diff/X/Y
&gt; 
&gt;  Clients SHOULD only ask for this resource compressed.
&gt; 
&gt;  Caches MUST NOT answer this request unless they recognize the
&gt;  consensus with digest X, and digest Y.
&gt;  digest Y.

Extra "digest Y.  "

&gt;  If answering, caches MUST reply with all of the
&gt;  microdescriptors that the cache holds that were listed by
&gt;  consensus X, and MUST omit all the microdescriptors that were
&gt;  omitted listed in consensus Y.

What happens if the consensus versions are different?
In particular, what happens if the microdesc algorithms are different
in these consensus versions?

(What should happen is that the diff is larger than normal, because
most microdesc hashes have changed. We should have a test for this.)

&gt; 2.2. By consensus:
&gt; 
&gt;  If a client has fewer than NMNM% of the microdescriptors listed in a
&gt;  consensus X, it should fetch the resource
&gt;      /tor/micro/full/X
&gt; 
&gt;  Clients SHOULD only ask for this resource compressed.
&gt; 
&gt;  Caches MUST NOT answer this request unless they recognize the
&gt;  consensus with digest X. They should send all the microdescriptors
&gt;  they have that are listed in that consensus.
&gt; 
&gt; 2.3. When to make these requests
&gt; 
&gt;  Clients should decide to use this format in preference to the
&gt;  old download-by-digest format if the consensus X lists their
&gt;  preferred directory cache as using a new DirCache subprotocol
&gt;  version. (See 5 below.)

Don't clients have 3 preferred directory caches?

What about fallback directory mirrors?

We don't care about diff/X/Y - there is no previous consensus.
But knowing when a fallback supports full/X could be handy.
Or do we deliberately want to use the legacy protocol to
bootstrap, so a single cache can't lie to us?

What about bridge clients?
Can they find out from the bridge descriptor?

&gt; 3. Performance analysis
&gt; 
&gt;  This is a back-of-the-envelope analysis using a month's worth of
&gt;  consensus documents, and a randomly chosen sample of
&gt;  microdescriptors.
&gt; 
&gt; 
&gt;  On average, about 0.5% of the microdescriptors change between any
&gt;  two consensuses.  Call it 50.  That means 50*43 bytes == 2150
&gt;  bytes to request the microdescriptors.  It means ~24530 bytes of
&gt;  microdescriptors downloaded, compressed to ~13687 bytes by zstd.
&gt; 
&gt;  With this proposal, we're down to 86 bytes for the request, and we
&gt;  can precompute the compressed output, making it save to use lzma2,
&gt;  getting a compressed result more like 13362.
&gt; 
&gt;  It appears that this change would save about 15% for incremental
&gt;  microdescriptor downloads, most of that coming from the reduction
&gt;  in request size.
&gt; 
&gt;  For complete downloads, a complete set of microdescriptors is about
&gt;  7700 microdesciptors long.  That makes the total number of bytes
&gt;  for the requests 7700*43 == 331100 bytes.  The response, if
&gt;  compressed with lzma instead of zstd, would fall from 1659682 to
&gt;  1587804 bytes, for a total savings of 20%.
&gt; 
&gt; 
&gt; 5. Compatibility
&gt; 
&gt;   Caches supporting this download protocol need to advertise
&gt;   support of a new DirCache subprotocol version.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZmmTAAAoJEHQNnjkCUnKi6H4P/1pXDR5b10UGdr5EFvVfWr7k
Od4SkSsVqT2ycpV8X57o+dVuqo3RnBckNGmtpkslVPsIL3WjqpYg9nv5U+WR+hQx
Wj/DVZL8zlK4xH8jTm2n5tW4g4DZ8TwEGdFxJHF5ZLYfjZvhbB8Rv3VcjjRgQ6+t
jaY1qp+WDaz8At8qBQRK1UzVObyvC/nVy8dd+xqY0Wf41dNCjjifMQl/FKnc6kRb
JdZF3GwuSK5umn9zCTmQjHZesGCzsFP7t1Ery0vwSGuBEIdzBIJud7WlUUd1m/eG
ukPsx7wGfc4YiMMZ0xvGeXHaRT2aXUGbunrPfJmWvqWs8h94RkuOZrUK3l/ObfPj
CFOEujTF2SM1o1Bv+a5vp2tvuYd5VpHgrJpw8gJIKtLpTLCywrNFMmlwb3mAidgk
/Ida1PTGg8cOxS2tvvudGnjsm1W2fwZblbOva6KKNZx7oN3UQyPLYc8wFKixGkNC
xdRu2n9Cx/MRlRpUKk2nBvukqbtVXPlnECZSkDUJ5l0D5GaZjZx90Uu3xlSUi+rH
PktHB/mCde9oe4UfIUhK6hlAHsb1BmN0CsCd7Vp9SErii78DteR0v6sNvMEoWLOR
oXIGgVHn8btjW7bMF40/abdHUj+Syt2MBH8gF01KTH2teBkkdcW8b2EJUMhPdx3W
NlmvPNA+FCRsKMepPXKh
=C81j
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820230501</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-08-20 23:05:01-0400</timestampReceived><subject>Re: [tor-dev] Draft patchset for PT2.0 support (ticket #21816)</subject><body>

On Sun, Aug 20, 2017 at 5:48 PM, Robin Tarsiger &lt;rtt@dasyatidae.com&gt; wrote:
&gt; Good day, tor-dev;
&gt;
&gt; As some of you know, I've been working on a patchset for Tor to allow
&gt; it to participate in Pluggable Transports 2.0 configuration, primarily
&gt; the new JSON Parameter Block SOCKS method (at least that's what I've
&gt; been calling it in the absence of a more official name), almost but
&gt; not quite as described in section 3.3.4 of PT2 draft 2 [1]---i.e.,
&gt; basically #21816 [2].
&gt;
&gt; [1] https://www.pluggabletransports.info/assets/PTSpecV2Draft2.pdf
&gt; [2] https://trac.torproject.org/projects/tor/ticket/21816
&gt;
&gt; I'm attaching a draft patchset which adds this functionality, with the
&gt; intent of getting feedback and making remaining cleanups or other
&gt; modifications necessary to get it merged into Tor. I have successfully
&gt; completed circuits through an obfs4 bridge using both obfs4proxy (PT1)
&gt; and a version of shapeshifter-dispatcher (PT2) using a patched Tor. I've
&gt; tried to follow the local style, but the preferred implementation
&gt; strategies aren't always clear, and of course I'd appreciate any reports
&gt; of other problems.
&gt;
&gt; A forked Git repository is also available on Bitbucket [5][6], which
&gt; will be updated as I make remaining changes.
&gt;
&gt; [5] https://bitbucket.org/DasyatidPrime/tor-rtt2017-21816.git (Git)
&gt; [6] https://bitbucket.org/DasyatidPrime/tor-rtt2017-21816/src (Web)
&gt;
&gt; More implementation details are below if you're interested in this;
&gt; thanks for your attention. I'll try to be around on IRC more during
&gt; the week, so feel free to ping me there as well.
&gt;

Hi, Robin!

Looks like interesting work.  Can you add links to this stuff on
ticket #21816, so it can get reviewed  We usually don't use the
mailing list to track patches for review, since things can tend to get
lost.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170823005933</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-23 00:59:33-0400</timestampReceived><subject>Re: [tor-dev] Draft patchset for PT2.0 support (ticket #21816)</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Aug 2017, at 09:05, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; On Sun, Aug 20, 2017 at 5:48 PM, Robin Tarsiger &lt;rtt@dasyatidae.com&gt; wrote:
&gt;&gt; Good day, tor-dev;
&gt;&gt; 
&gt;&gt; As some of you know, I've been working on a patchset for Tor to allow
&gt;&gt; it to participate in Pluggable Transports 2.0 configuration, primarily
&gt;&gt; the new JSON Parameter Block SOCKS method (at least that's what I've
&gt;&gt; been calling it in the absence of a more official name), almost but
&gt;&gt; not quite as described in section 3.3.4 of PT2 draft 2 [1]---i.e.,
&gt;&gt; basically #21816 [2].
&gt;&gt; 
&gt;&gt; [1] https://www.pluggabletransports.info/assets/PTSpecV2Draft2.pdf
&gt;&gt; [2] https://trac.torproject.org/projects/tor/ticket/21816

There are several issues in the PT 2.0 draft 2 specification.

Some of them are minor typos or inconsistencies. Others are major
design issues that we might want to leave until a later spec.

The last response from Brandon on this was:

&gt; On 21 Jun 2017, at 08:31, Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; 
&gt; Thanks for the feedback. I'll fix this in the next draft.


But then more issues were raised in this thread:

https://lists.torproject.org/pipermail/tor-dev/2017-July/012374.html

And I wasn't able to get response from Brandon on them.

Please read the thread, so you are aware of the issues, even if the
spec hasn't been updated. (And even if we decide not to fix them right
now.)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZnNN1AAoJEHQNnjkCUnKiKG4QAK59xN0sKbS1z2WqFBB78jUl
49npuVy9LpTwv+TxgTo2OXd4aQZCzi51gapowoYu1cf090A4WohhLyLH5Xa+0E6v
R2plHwhWggKoR/gxfPbm3/rNwkMtbCLFjCvjITglbEMvR1HCYowy45xgfbXCF6XO
vlDV4pMM/BE638vT5eAmrE/phrPaXIN8+zgYMBN7mMxZIoNvWsoP6FVrk5+OX1mK
eRkqGcVcgBLwkUneiGMlvsIaT0oBrQAh0P9WCarmKvZ414RQdbRj5L1zqedWVyx/
lztm+Mc0DJcvWUlqWkDsX5N8NtQoaPuSdEqTcGv0AKUy7V9Tcdzfi2Pl2obbfX+f
Z6cKKDaLy79UshR0zLXRthnYSEeIUoomUr6F5CWnpcpmlJoS148ecGVbCMjeL3Ad
CHHfbcuT4CWhU/0fqCPFX8rHRIVi6VIXDkArKm0+jS/Z6lKXR0F1oKkAx0EcID8V
3qTLG1mPTxR/ZbL1I/5yKgAvgjaLCiNsT2yps0IIH6jlPCLwEWUmcJcMJefB5w+H
oyX8YiBhICpw2xinNnP7+g41teMHmc62cQ42GTQZczoax4V9ezUTQCuCihdOgfZd
kXKlANWodz1NwN4zh7yqeLj3aOMucapHW3GxqMasvyyGEdWKTDMpK0d1vPXA3YzV
lSOwiEKDLsCKsHBcxQVZ
=k0Ek
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170816191959</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-08-16 19:19:59-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-08-16 05:38, KL Liew wrote:
&gt; All,

Hi Kim,

&gt; My name is Kim, the founder of IP2Location, a geolocation service
&gt; provider since 2002.
&gt; 
&gt; It looks like Tor is looking to review other providers for GeoIP service
&gt; while I was reading one of a meeting minute for a meeting back in March
&gt; 2017.
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/Metricsin5Years
&gt; 
&gt; We are very interested in contributing to Tor and work on this matter.
&gt; Tor can host and integrate IP2Location LITE
&gt; (http://lite.ip2location.com) into their application. IP2Location has
&gt; programming libraries in most languages. We can also work with
&gt; developers if there is any technical issues.
&gt; 
&gt; In term of accuracy, you can find the latest research paper published by
&gt; TUM. IP2Location has good accuracy as reported in Table V.
&gt; 
&gt; Title       : HLOC: Hints-Based Geolocation Leveraging Multiple
&gt; Measurement Frameworks
&gt; Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg
&gt; Carle from Technical University of Munich (TUM)
&gt; PDF Access  : https://arxiv.org/pdf/1706.09331.pdf
&gt; 
&gt; Let me know if there is any questions.

Thanks for reaching out to us!

It's indeed on our list to evaluate other geolocation databases and
possibly switch over. I'll bring this topic up at tomorrow's metrics
team meeting to discuss possible next steps for such an evaluation. I'll
get back to you here to share the results.

One question, though, that just came to mind: Are there archives
available for past IP2Location LITE databases, or do you provide just
the latest version? Having archives, possibly even back to 2002, would
be pretty useful for Tor Metrics. (I didn't look around as much on your
homepage, so please apologize if this question is already answered there.)

&gt; - Kim

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820200220</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-08-20 20:02:20-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-08-16 21:19, Karsten Loesing wrote:
&gt; On 2017-08-16 05:38, KL Liew wrote:
&gt;&gt; All,
&gt; 
&gt; Hi Kim,
&gt; 
&gt;&gt; My name is Kim, the founder of IP2Location, a geolocation service
&gt;&gt; provider since 2002.
&gt;&gt;
&gt;&gt; It looks like Tor is looking to review other providers for GeoIP service
&gt;&gt; while I was reading one of a meeting minute for a meeting back in March
&gt;&gt; 2017.
&gt;&gt;
&gt;&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/Metricsin5Years
&gt;&gt;
&gt;&gt; We are very interested in contributing to Tor and work on this matter.
&gt;&gt; Tor can host and integrate IP2Location LITE
&gt;&gt; (http://lite.ip2location.com) into their application. IP2Location has
&gt;&gt; programming libraries in most languages. We can also work with
&gt;&gt; developers if there is any technical issues.
&gt;&gt;
&gt;&gt; In term of accuracy, you can find the latest research paper published by
&gt;&gt; TUM. IP2Location has good accuracy as reported in Table V.
&gt;&gt;
&gt;&gt; Title       : HLOC: Hints-Based Geolocation Leveraging Multiple
&gt;&gt; Measurement Frameworks
&gt;&gt; Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg
&gt;&gt; Carle from Technical University of Munich (TUM)
&gt;&gt; PDF Access  : https://arxiv.org/pdf/1706.09331.pdf
&gt;&gt;
&gt;&gt; Let me know if there is any questions.
&gt; 
&gt; Thanks for reaching out to us!
&gt; 
&gt; It's indeed on our list to evaluate other geolocation databases and
&gt; possibly switch over. I'll bring this topic up at tomorrow's metrics
&gt; team meeting to discuss possible next steps for such an evaluation. I'll
&gt; get back to you here to share the results.

So, we discussed this at our team meeting on Thursday and decided to
further evaluate switching to IP2Location.

That would be a non-trivial project, because we're using geolocation
data in at least two places: 1. shipped with the core Tor program and 2.
deployed on Tor Metrics services like Onionoo. And at least the former
requires close coordination with Tor's network team.

In any case we'll want to be sure whether this switch is the right move
before starting such a project. The paper is a good start, but we might
want to run more evaluations ourselves. For example, we could involve
relay operators by asking them which resolved location is closer to
reality. But even this evaluation requires writing some code, which puts
it on a long list of things we'd like to do.

All in all, we (Tor's metrics team) are considering it! But it'll be on
the order of weeks or maybe months before we can move this forward.

&gt; One question, though, that just came to mind: Are there archives
&gt; available for past IP2Location LITE databases, or do you provide just
&gt; the latest version? Having archives, possibly even back to 2002, would
&gt; be pretty useful for Tor Metrics. (I didn't look around as much on your
&gt; homepage, so please apologize if this question is already answered there.)

You replied off-list:

&gt; We do not have archive for the IP2Location LITE. We just started this free database a few years back.

Okay. Maybe we could do something with archive.org in that case. It's
not that we do have a complete history for MaxMind's files, except that
we could probably create our own history from Tor's Git repository which
contains files based on MaxMind's files.

All the best,
Karsten


&gt; 
&gt;&gt; - Kim
&gt; 
&gt; All the best,
&gt; Karsten
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820212952</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-08-20 21:29:52-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

On Sun, Aug 20, 2017 at 10:02:20PM +0200, Karsten Loesing wrote:
&gt; Okay. Maybe we could do something with archive.org in that case. It's
&gt; not that we do have a complete history for MaxMind's files, except that
&gt; we could probably create our own history from Tor's Git repository which
&gt; contains files based on MaxMind's files.

I have a script that walks through the history of tor's git geoip files.

["scrape-geoip.py" (text/x-python)]

#!/usr/bin/env python

import datetime
import getopt
import os.path
import socket
import subprocess
import sys

# Counts the size of per-country geoip allocations in the tor source code.
#
# Usage: ./scrape-geoip.py ~/src/tor &gt; tor-geoip.csv
#
# ~/src/tor (or whatever the path is) must be a tor source repo; i.e. a clone of
# https://git.torproject.org/tor.git.

def usage(f=sys.stdout):
    print &gt;&gt; f, """\
Usage: %s /path/to/tor
""" % sys.argv[0]

def history(dirname, filename):
    proc = subprocess.Popen(["git", "log", "--reverse", "--date=short", "--pretty=%H %ad", filename],
        cwd=dirname, stdout=subprocess.PIPE)
    return proc.stdout

def git_show(dirname, filename, commithash):
    proc = subprocess.Popen(["git", "show", commithash+":"+filename],
        cwd=dirname, stdout=subprocess.PIPE)
    return proc.stdout

def parse_geoip(f):
    ccs = {}
    for line in f:
        if line.startswith("#"):
            continue
        parts = line.strip().split(",")
        start = int(parts[0])
        end = int(parts[1])
        cc = parts[2].lower()
        ccs.setdefault(cc, 0)
        ccs[cc] += end - start + 1
    return ccs

def ipv6_to_int(ipstr):
    return long("0x" + socket.inet_pton(socket.AF_INET6, ipstr).encode("hex"), 16)

def parse_geoip6(f):
    ccs = {}
    for line in f:
        if line.startswith("#"):
            continue
        parts = line.strip().split(",")
        start = ipv6_to_int(parts[0])
        end = ipv6_to_int(parts[1])
        cc = parts[2].lower()
        ccs.setdefault(cc, 0)
        ccs[cc] += end - start + 1
    return ccs


opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["help"])
for o, a in opts:
    if o == "-h" or o == "--help":
        usage()
        sys.exit()

try:
    TOR_PATH, = args
except ValueError:
    usage(sys.stderr)
    sys.exit(1)

print "date,ipv,country,count"

for line in history(TOR_PATH, "src/config/geoip"):
    parts = line.strip().split()
    commithash = parts[0]
    date = datetime.datetime.strptime(parts[1], "%Y-%m-%d")

    try:
        ccs = parse_geoip(git_show(TOR_PATH, "src/config/geoip", commithash))
    except Exception, e:
        print &gt;&gt; sys.stderr, "Skipping %s %s: %s" % ("src/config/geoip", commithash, e)
        continue
    for cc, count in sorted(ccs.items()):
        print ",".join([date.strftime("%Y-%m-%d"), "4", cc, str(count)])

for line in history(TOR_PATH, "src/config/geoip6"):
    parts = line.strip().split()
    commithash = parts[0]
    date = datetime.datetime.strptime(parts[1], "%Y-%m-%d")

    try:
        ccs = parse_geoip6(git_show(TOR_PATH, "src/config/geoip6", commithash))
    except Exception, e:
        print &gt;&gt; sys.stderr, "Skipping %s %s: %s" % ("src/config/geoip6", commithash, e)
        continue
    for cc, count in sorted(ccs.items()):
        print ",".join([date.strftime("%Y-%m-%d"), "6", cc, str(count)])

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170820225155</emailId><senderName>KL Liew</senderName><senderEmail>hexasoft@gmail.com</senderEmail><timestampReceived>2017-08-20 22:51:55-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;&gt; All in all, we (Tor's metrics team) are considering it! But it'll be on
&gt;&gt; the order of weeks or maybe months before we can move this forward.

No problem. Just let me know if any helps needed.

On Mon, Aug 21, 2017 at 4:02 AM, Karsten Loesing &lt;karsten@torproject.org&gt;
wrote:

&gt; On 2017-08-16 21:19, Karsten Loesing wrote:
&gt; &gt; On 2017-08-16 05:38, KL Liew wrote:
&gt; &gt;&gt; All,
&gt; &gt;
&gt; &gt; Hi Kim,
&gt; &gt;
&gt; &gt;&gt; My name is Kim, the founder of IP2Location, a geolocation service
&gt; &gt;&gt; provider since 2002.
&gt; &gt;&gt;
&gt; &gt;&gt; It looks like Tor is looking to review other providers for GeoIP service
&gt; &gt;&gt; while I was reading one of a meeting minute for a meeting back in March
&gt; &gt;&gt; 2017.
&gt; &gt;&gt;
&gt; &gt;&gt; https://trac.torproject.org/projects/tor/wiki/org/
&gt; meetings/2017Amsterdam/Notes/Metricsin5Years
&gt; &gt;&gt;
&gt; &gt;&gt; We are very interested in contributing to Tor and work on this matter.
&gt; &gt;&gt; Tor can host and integrate IP2Location LITE
&gt; &gt;&gt; (http://lite.ip2location.com) into their application. IP2Location has
&gt; &gt;&gt; programming libraries in most languages. We can also work with
&gt; &gt;&gt; developers if there is any technical issues.
&gt; &gt;&gt;
&gt; &gt;&gt; In term of accuracy, you can find the latest research paper published by
&gt; &gt;&gt; TUM. IP2Location has good accuracy as reported in Table V.
&gt; &gt;&gt;
&gt; &gt;&gt; Title       : HLOC: Hints-Based Geolocation Leveraging Multiple
&gt; &gt;&gt; Measurement Frameworks
&gt; &gt;&gt; Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg
&gt; &gt;&gt; Carle from Technical University of Munich (TUM)
&gt; &gt;&gt; PDF Access  : https://arxiv.org/pdf/1706.09331.pdf
&gt; &gt;&gt;
&gt; &gt;&gt; Let me know if there is any questions.
&gt; &gt;
&gt; &gt; Thanks for reaching out to us!
&gt; &gt;
&gt; &gt; It's indeed on our list to evaluate other geolocation databases and
&gt; &gt; possibly switch over. I'll bring this topic up at tomorrow's metrics
&gt; &gt; team meeting to discuss possible next steps for such an evaluation. I'll
&gt; &gt; get back to you here to share the results.
&gt;
&gt; So, we discussed this at our team meeting on Thursday and decided to
&gt; further evaluate switching to IP2Location.
&gt;
&gt; That would be a non-trivial project, because we're using geolocation
&gt; data in at least two places: 1. shipped with the core Tor program and 2.
&gt; deployed on Tor Metrics services like Onionoo. And at least the former
&gt; requires close coordination with Tor's network team.
&gt;
&gt; In any case we'll want to be sure whether this switch is the right move
&gt; before starting such a project. The paper is a good start, but we might
&gt; want to run more evaluations ourselves. For example, we could involve
&gt; relay operators by asking them which resolved location is closer to
&gt; reality. But even this evaluation requires writing some code, which puts
&gt; it on a long list of things we'd like to do.
&gt;
&gt; All in all, we (Tor's metrics team) are considering it! But it'll be on
&gt; the order of weeks or maybe months before we can move this forward.
&gt;
&gt; &gt; One question, though, that just came to mind: Are there archives
&gt; &gt; available for past IP2Location LITE databases, or do you provide just
&gt; &gt; the latest version? Having archives, possibly even back to 2002, would
&gt; &gt; be pretty useful for Tor Metrics. (I didn't look around as much on your
&gt; &gt; homepage, so please apologize if this question is already answered
&gt; there.)
&gt;
&gt; You replied off-list:
&gt;
&gt; &gt; We do not have archive for the IP2Location LITE. We just started this
&gt; free database a few years back.
&gt;
&gt; Okay. Maybe we could do something with archive.org in that case. It's
&gt; not that we do have a complete history for MaxMind's files, except that
&gt; we could probably create our own history from Tor's Git repository which
&gt; contains files based on MaxMind's files.
&gt;
&gt; All the best,
&gt; Karsten
&gt;
&gt;
&gt; &gt;
&gt; &gt;&gt; - Kim
&gt; &gt;
&gt; &gt; All the best,
&gt; &gt; Karsten
&gt; &gt;
&gt;
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&gt;&gt; All in all, we (Tor's metrics team) are considering \
it! But it'll be on&lt;br&gt; &gt;&gt; the order of weeks or maybe months before we can \
move this forward.&lt;br&gt;&lt;br&gt;&lt;/div&gt;No problem. Just let me know if any helps \
needed.&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Aug \
21, 2017 at 4:02 AM, Karsten Loesing &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:karsten@torproject.org" \
target="_blank"&gt;karsten@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;On 2017-08-16 21:19, \
Karsten Loesing wrote:&lt;br&gt; &gt; On 2017-08-16 05:38, KL Liew wrote:&lt;br&gt;
&gt;&gt; All,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Hi Kim,&lt;br&gt;
&gt;&lt;br&gt;
&gt;&gt; My name is Kim, the founder of IP2Location, a geolocation service&lt;br&gt;
&gt;&gt; provider since 2002.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; It looks like Tor is looking to review other providers for GeoIP service&lt;br&gt;
&gt;&gt; while I was reading one of a meeting minute for a meeting back in March&lt;br&gt;
&gt;&gt; 2017.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; &lt;a href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/Metricsin5Years" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/wiki/org/&lt;wbr&gt;meetings/2017Amsterdam/Notes/&lt;wbr&gt;Metricsin5Years&lt;/a&gt;&lt;br&gt;
 &gt;&gt;&lt;br&gt;
&gt;&gt; We are very interested in contributing to Tor and work on this matter.&lt;br&gt;
&gt;&gt; Tor can host and integrate IP2Location LITE&lt;br&gt;
&gt;&gt; (&lt;a href="http://lite.ip2location.com" rel="noreferrer" \
target="_blank"&gt;http://lite.ip2location.com&lt;/a&gt;) into their application. IP2Location \
has&lt;br&gt; &gt;&gt; programming libraries in most languages. We can also work with&lt;br&gt;
&gt;&gt; developers if there is any technical issues.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; In term of accuracy, you can find the latest research paper published by&lt;br&gt;
&gt;&gt; TUM. IP2Location has good accuracy as reported in Table V.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Title           : HLOC: Hints-Based Geolocation Leveraging Multiple&lt;br&gt;
&gt;&gt; Measurement Frameworks&lt;br&gt;
&gt;&gt; Authors        : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg&lt;br&gt;
&gt;&gt; Carle from Technical University of Munich (TUM)&lt;br&gt;
&gt;&gt; PDF Access   : &lt;a href="https://arxiv.org/pdf/1706.09331.pdf" \
rel="noreferrer" target="_blank"&gt;https://arxiv.org/pdf/1706.&lt;wbr&gt;09331.pdf&lt;/a&gt;&lt;br&gt; \
&gt;&gt;&lt;br&gt; &gt;&gt; Let me know if there is any questions.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Thanks for reaching out to us!&lt;br&gt;
&gt;&lt;br&gt;
&gt; It's indeed on our list to evaluate other geolocation databases and&lt;br&gt;
&gt; possibly switch over. I'll bring this topic up at tomorrow's metrics&lt;br&gt;
&gt; team meeting to discuss possible next steps for such an evaluation. I'll&lt;br&gt;
&gt; get back to you here to share the results.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;So, we discussed this at our team meeting on Thursday and decided to&lt;br&gt;
further evaluate switching to IP2Location.&lt;br&gt;
&lt;br&gt;
That would be a non-trivial project, because we're using geolocation&lt;br&gt;
data in at least two places: 1. shipped with the core Tor program and 2.&lt;br&gt;
deployed on Tor Metrics services like Onionoo. And at least the former&lt;br&gt;
requires close coordination with Tor's network team.&lt;br&gt;
&lt;br&gt;
In any case we'll want to be sure whether this switch is the right move&lt;br&gt;
before starting such a project. The paper is a good start, but we might&lt;br&gt;
want to run more evaluations ourselves. For example, we could involve&lt;br&gt;
relay operators by asking them which resolved location is closer to&lt;br&gt;
reality. But even this evaluation requires writing some code, which puts&lt;br&gt;
it on a long list of things we'd like to do.&lt;br&gt;
&lt;br&gt;
All in all, we (Tor's metrics team) are considering it! But it'll be on&lt;br&gt;
the order of weeks or maybe months before we can move this forward.&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; One question, though, that just came to mind: Are there archives&lt;br&gt;
&gt; available for past IP2Location LITE databases, or do you provide just&lt;br&gt;
&gt; the latest version? Having archives, possibly even back to 2002, would&lt;br&gt;
&gt; be pretty useful for Tor Metrics. (I didn't look around as much on your&lt;br&gt;
&gt; homepage, so please apologize if this question is already answered there.)&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;You replied off-list:&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; We do not have archive for the IP2Location LITE. We just started this free \
database a few years back.&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Okay. Maybe we could do something with &lt;a href="http://archive.org" \
rel="noreferrer" target="_blank"&gt;archive.org&lt;/a&gt; in that case. It's&lt;br&gt; not that \
we do have a complete history for MaxMind's files, except that&lt;br&gt; we could \
probably create our own history from Tor's Git repository which&lt;br&gt; contains \
files based on MaxMind's files.&lt;br&gt; &lt;br&gt;
All the best,&lt;br&gt;
Karsten&lt;br&gt;
&lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&lt;br&gt;
&lt;br&gt;
&gt;&lt;br&gt;
&gt;&gt; - Kim&lt;br&gt;
&gt;&lt;br&gt;
&gt; All the best,&lt;br&gt;
&gt; Karsten&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170823005131</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-23 00:51:31-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/signed)]


Hi Kim,


&gt; On 16 Aug 2017, at 13:38, KL Liew &lt;hexasoft@gmail.com&gt; wrote:
&gt; 
&gt; In term of accuracy, you can find the latest research paper published by TUM. \
&gt; IP2Location has good accuracy as reported in Table V. 
&gt; Title       : HLOC: Hints-Based Geolocation Leveraging Multiple Measurement \
&gt; Frameworks Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg \
&gt; Carle from Technical University of Munich (TUM) PDF Access  : \
&gt; https://arxiv.org/pdf/1706.09331.pdf

Are there any accuracy comparisons between MaxMind and IP2Location?

We have noticed that GeoIP providers often focus on location accuracy for
residential customers. But we use our GeoIP databases to locate both Tor
clients (mainly residential) and Tor relays (mainly data centre).

How is your accuracy for data centres?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZnNGTAAoJEHQNnjkCUnKiYBMP/RcAG5d2YNELqD9DC36pYcZK
syPDBYRj/N3Kqdl/KQNgHiCwzlaadjNM0GA9EQYT0FZAnhhZuU1oado3gH5yryL0
TVPpqZ86BN3M0WuR4dh5AqulYeyIpV/t5VSfvG2Rkrrmwm0BKKMQSZpnI3pCbWtO
356vXwRQmkvO7hioaSLqheLgoDYUxJYnwRRDY7ihz5lFP7TLQ51IRKBBtIxrAoTU
LDl6gcoDJTtWK2MfkXrjUTWzXB8fZ5YqYALlihyUCe1G46+2+gynB5Jvgw0urmDH
7H7hJj5QGBbLD3RK7PE6aGwN3SGvhBg112UraZrOna7HEqrttXtIbVsoWM42rT6W
U/dz71wD8hC1t1wVdYhY3mN/fsd9vpVRNmCWJLjrBLCNGW+TZdlr9GD06gQvl07Q
i3TzcxIgU3qRvXqZTNBOnVwFJ8OosEdkvQCu+gfvShkWKi4NSrLo99YnnwCSc3i0
jIQcIrA2nT6WN7ky3D1/8oWBnmhVwa3o94HDZhwGIgOBLEqaZZ1lv3wIsLLfOaZj
x/IQvPT66RX7yDmlYrCc9HMSjoMe5KRhNX6/LWXvD3otJFKteeWwzrb0KuaNn4va
NWzU8RwUZYNWVmVBiJqZs0TXVIpAz/uRqAuIDADUlk/+efE9sqovWBu2UH32xUzx
5qqtmQKzU1CxxIjmRmOK
=HqOo
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170823024548</emailId><senderName>KL Liew</senderName><senderEmail>hexasoft@gmail.com</senderEmail><timestampReceived>2017-08-23 02:45:48-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tim,

&gt; Are there any accuracy comparisons between MaxMind and IP2Location?
&gt;
&gt; We have noticed that GeoIP providers often focus on location accuracy for
&gt; residential customers. But we use our GeoIP databases to locate both Tor
&gt; clients (mainly residential) and Tor relays (mainly data centre).
&gt;
&gt; How is your accuracy for data centres?

I don't aware of any research papers targeting data center only.
IP2Location should be highly accurate because we are using network routing
information to determine physical location instead of registrant address.

For example, IP2Location is reporting 185.56.163.144 as in France after
reviewing the network routing information as below. However, if you search
the same IP address in other geolocation providers, you might see it as
reported as North Korea, a country with limited Internet access.

Tracing route to 185.56.163.144 over a maximum of 30 hops

  1     1 ms   &lt;10 ms     1 ms  192.168.1.1
  2     *        *        *     Request timed out.
  3     5 ms     4 ms     3 ms  10.233.65.32
  4   178 ms   179 ms   179 ms  10.55.200.67
  5   270 ms   267 ms   273 ms  ams-ix2.eu.iptransit.com [80.249.211.47]
  6   283 ms   285 ms   283 ms  xe-4-3-1.r2.ams.iptransit.com
[204.26.60.115]
  7   283 ms   284 ms   283 ms  te2-4.r3.ams.sara.nl.iptransit.com
[204.26.60.6]
  8   282 ms   279 ms   281 ms  te1-2.r2.lux.iptransit.com [204.26.60.9]
  9   285 ms   284 ms   284 ms  204.26.60.123
 10   288 ms   287 ms   287 ms  185.56.163.144


 - Kim

On Wed, Aug 23, 2017 at 8:51 AM, teor &lt;teor2345@gmail.com&gt; wrote:

&gt; Hi Kim,
&gt;
&gt;
&gt; &gt; On 16 Aug 2017, at 13:38, KL Liew &lt;hexasoft@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; In term of accuracy, you can find the latest research paper published by
&gt; TUM. IP2Location has good accuracy as reported in Table V.
&gt; &gt;
&gt; &gt; Title       : HLOC: Hints-Based Geolocation Leveraging Multiple
&gt; Measurement Frameworks
&gt; &gt; Authors     : Quirin Scheitle, Oliver Gasser, Patrick Sattler, Georg
&gt; Carle from Technical University of Munich (TUM)
&gt; &gt; PDF Access  : https://arxiv.org/pdf/1706.09331.pdf
&gt;
&gt; Are there any accuracy comparisons between MaxMind and IP2Location?
&gt;
&gt; We have noticed that GeoIP providers often focus on location accuracy for
&gt; residential customers. But we use our GeoIP databases to locate both Tor
&gt; clients (mainly residential) and Tor relays (mainly data centre).
&gt;
&gt; How is your accuracy for data centres?
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi Tim,&lt;br&gt;&lt;br&gt;&gt; Are there any accuracy comparisons between MaxMind \
and IP2Location?&lt;br&gt;&gt; &lt;br&gt;&gt; We have noticed that GeoIP providers often focus on \
location accuracy for&lt;br&gt;&gt; residential customers. But we use our GeoIP databases \
to locate both Tor&lt;br&gt;&gt; clients (mainly residential) and Tor relays (mainly data \
centre).&lt;br&gt;&gt; &lt;br&gt;&gt; How is your accuracy for data centres?&lt;br&gt;&lt;br&gt;I don't \
aware of any research papers targeting data center only. IP2Location should be highly \
accurate because we are using network routing information to determine physical \
location instead of registrant address.&lt;br&gt;&lt;br&gt;For example, IP2Location is reporting \
185.56.163.144 as in France after reviewing the network routing information as below. \
However, if you search the same IP address in other geolocation providers, you might \
see it as reported as North Korea, a country with limited Internet \
access.&lt;br&gt;&lt;br&gt;Tracing route to 185.56.163.144 over a maximum of 30 hops&lt;br&gt;&lt;br&gt;   1  \
1 ms     &lt;10 ms         1 ms   192.168.1.1&lt;br&gt;   2         *               *       \
*         Request timed out.&lt;br&gt;   3         5 ms         4 ms         3 ms   \
10.233.65.32&lt;br&gt;   4     178 ms     179 ms     179 ms   10.55.200.67&lt;br&gt;   5     270 \
ms     267 ms     273 ms   &lt;a \
href="http://ams-ix2.eu.iptransit.com"&gt;ams-ix2.eu.iptransit.com&lt;/a&gt; \
[80.249.211.47]&lt;br&gt;   6     283 ms     285 ms     283 ms   &lt;a \
href="http://xe-4-3-1.r2.ams.iptransit.com"&gt;xe-4-3-1.r2.ams.iptransit.com&lt;/a&gt; \
[204.26.60.115]&lt;br&gt;   7     283 ms     284 ms     283 ms   &lt;a \
href="http://te2-4.r3.ams.sara.nl.iptransit.com"&gt;te2-4.r3.ams.sara.nl.iptransit.com&lt;/a&gt; \
[204.26.60.6]&lt;br&gt;   8     282 ms     279 ms     281 ms   &lt;a \
href="http://te1-2.r2.lux.iptransit.com"&gt;te1-2.r2.lux.iptransit.com&lt;/a&gt; \
[204.26.60.9]&lt;br&gt;   9     285 ms     284 ms     284 ms   204.26.60.123&lt;br&gt;  10     \
288 ms     287 ms     287 ms   185.56.163.144&lt;br&gt;  &lt;br&gt;  &lt;br&gt;  - Kim&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Wed, Aug 23, 2017 at 8:51 AM, \
teor &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:teor2345@gmail.com" \
target="_blank"&gt;teor2345@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi Kim,&lt;br&gt; &lt;span class=""&gt;&lt;br&gt;
&lt;br&gt;
&gt; On 16 Aug 2017, at 13:38, KL Liew &lt;&lt;a \
href="mailto:hexasoft@gmail.com"&gt;hexasoft@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; In term of accuracy, you can find the latest research paper published by TUM. \
IP2Location has good accuracy as reported in Table V.&lt;br&gt; &gt;&lt;br&gt;
&gt; Title           : HLOC: Hints-Based Geolocation Leveraging Multiple Measurement \
Frameworks&lt;br&gt; &gt; Authors        : Quirin Scheitle, Oliver Gasser, Patrick Sattler, \
Georg Carle from Technical University of Munich (TUM)&lt;br&gt; &gt; PDF Access   : &lt;a \
href="https://arxiv.org/pdf/1706.09331.pdf" rel="noreferrer" \
target="_blank"&gt;https://arxiv.org/pdf/1706.&lt;wbr&gt;09331.pdf&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Are there any accuracy comparisons between MaxMind and IP2Location?&lt;br&gt;
&lt;br&gt;
We have noticed that GeoIP providers often focus on location accuracy for&lt;br&gt;
residential customers. But we use our GeoIP databases to locate both Tor&lt;br&gt;
clients (mainly residential) and Tor relays (mainly data centre).&lt;br&gt;
&lt;br&gt;
How is your accuracy for data centres?&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
Tim Wilson-Brown (teor)&lt;br&gt;
&lt;br&gt;
teor2345 at gmail dot com&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;
xmpp: teor at torproject dot org&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;------------&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170823195005</emailId><senderName>"Iain R. Learmonth"</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2017-08-23 19:50:05-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 23/08/17 03:45, KL Liew wrote:
&gt;&gt; How is your accuracy for data centres?
&gt; 
&gt; I don't aware of any research papers targeting data center only.
&gt; IP2Location should be highly accurate because we are using network
&gt; routing information to determine physical location instead of registrant
&gt; address.
&gt; 
&gt; For example, IP2Location is reporting 185.56.163.144 as in France after
&gt; reviewing the network routing information as below. However, if you
&gt; search the same IP address in other geolocation providers, you might see
&gt; it as reported as North Korea, a country with limited Internet access.

It is possible that this address is used by North Korea, they don't have
a massive IP allocation and I would expect that perhaps there are some
tunnels, but I can't figure out where MaxMind have got this idea from.

I think GeoIP is actually a far more difficult problem when it's not
typical residential customers. Satellite customers, for instance, may
use IP blocks that are spread across multiple countries.

I would expect that cloud providers and larger datacenter providers are
using tunnels of sorts between their datacenters. Tunnels kill any
visibility into the real routing path.

When attempting to perform GeoIP for routers, the problem is compounded
as you don't know who really owns the router based on IP addresses
alone, routers having multiple IP addresses, etc.

With the influx of new TLDs and TLDs being chosen for vanity purposes,
they are also not a useful indicator.

I fear its the smaller providers, the more Tor-friendly providers, that
are missing or inaccurately represented in the databases.

When it comes to measuring the accuracy of databases for datacenters, I
wonder if there could be some means for relay operators to self-report a
location and then we can compare this with different databases.

Is there a safe way for relay operators to prove that they control a
relay and self-report the location of the relay without us having to
have an extra field in relay descriptors or overload the contact field?
Some sort of out-of-band means?

Thanks,
Iain.




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170824013604</emailId><senderName>KL Liew</senderName><senderEmail>hexasoft@gmail.com</senderEmail><timestampReceived>2017-08-24 01:36:04-0400</timestampReceived><subject>Re: [tor-dev] Tor and IP2Location LITE</subject><body>

[Attachment #2 (multipart/alternative)]


Please find my comments below.

&gt; It is possible that this address is used by North Korea, they don't have
&gt; a massive IP allocation and I would expect that perhaps there are some
&gt; tunnels, but I can't figure out where MaxMind have got this idea from.

We aware of a small number of IP ranges tunneling to North Korea through
some specific ISP. However, this IP address is registered by a VPN provider
which also registered ranges in many other countries. We have no evidence
that this VPN provider has a server located in those countries reported for
their VPN service.

&gt; I think GeoIP is actually a far more difficult problem when it's not
&gt; typical residential customers. Satellite customers, for instance, may
&gt; use IP blocks that are spread across multiple countries.
&gt;
&gt; I would expect that cloud providers and larger datacenter providers are
&gt; using tunnels of sorts between their datacenters. Tunnels kill any
&gt; visibility into the real routing path.

The large cloud providers such as AWS and Azure publishes their data center
and IP addresses range to public. Data centers usually avoiding tunnels due
to performance and cost-effectiveness. We do see rare cases required
tunnels such as DDoS protection.

&gt; When it comes to measuring the accuracy of databases for datacenters, I
&gt; wonder if there could be some means for relay operators to self-report a
&gt; location and then we can compare this with different databases.

If this is possible, then it is a good way to perform benchmarking.
However, we need to make sure the relay operator is giving the right
information.


- Kim


On Thu, Aug 24, 2017 at 3:50 AM, Iain R. Learmonth &lt;irl@torproject.org&gt;
wrote:

&gt; Hi,
&gt;
&gt; On 23/08/17 03:45, KL Liew wrote:
&gt; &gt;&gt; How is your accuracy for data centres?
&gt; &gt;
&gt; &gt; I don't aware of any research papers targeting data center only.
&gt; &gt; IP2Location should be highly accurate because we are using network
&gt; &gt; routing information to determine physical location instead of registrant
&gt; &gt; address.
&gt; &gt;
&gt; &gt; For example, IP2Location is reporting 185.56.163.144 as in France after
&gt; &gt; reviewing the network routing information as below. However, if you
&gt; &gt; search the same IP address in other geolocation providers, you might see
&gt; &gt; it as reported as North Korea, a country with limited Internet access.
&gt;
&gt; It is possible that this address is used by North Korea, they don't have
&gt; a massive IP allocation and I would expect that perhaps there are some
&gt; tunnels, but I can't figure out where MaxMind have got this idea from.
&gt;
&gt; I think GeoIP is actually a far more difficult problem when it's not
&gt; typical residential customers. Satellite customers, for instance, may
&gt; use IP blocks that are spread across multiple countries.
&gt;
&gt; I would expect that cloud providers and larger datacenter providers are
&gt; using tunnels of sorts between their datacenters. Tunnels kill any
&gt; visibility into the real routing path.
&gt;
&gt; When attempting to perform GeoIP for routers, the problem is compounded
&gt; as you don't know who really owns the router based on IP addresses
&gt; alone, routers having multiple IP addresses, etc.
&gt;
&gt; With the influx of new TLDs and TLDs being chosen for vanity purposes,
&gt; they are also not a useful indicator.
&gt;
&gt; I fear its the smaller providers, the more Tor-friendly providers, that
&gt; are missing or inaccurately represented in the databases.
&gt;
&gt; When it comes to measuring the accuracy of databases for datacenters, I
&gt; wonder if there could be some means for relay operators to self-report a
&gt; location and then we can compare this with different databases.
&gt;
&gt; Is there a safe way for relay operators to prove that they control a
&gt; relay and self-report the location of the relay without us having to
&gt; have an extra field in relay descriptors or overload the contact field?
&gt; Some sort of out-of-band means?
&gt;
&gt; Thanks,
&gt; Iain.
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;Please find my \
comments below.&lt;br&gt;&lt;br&gt;&gt; It is possible that this address is used by North Korea, \
they don't have&lt;br&gt;&gt; a massive IP allocation and I would expect that perhaps \
there are some&lt;br&gt;&gt; tunnels, but I can't figure out where MaxMind have got \
this idea from.&lt;br&gt;&lt;br&gt;We aware of a small number of IP ranges tunneling to North \
Korea through some specific ISP. However, this IP address is registered by a VPN \
provider which also registered ranges in many other countries. We have no evidence \
that this VPN provider has a server located in those countries reported for their VPN \
service.&lt;br&gt;&lt;br&gt;&gt; I think GeoIP is actually a far more difficult problem when \
it's not&lt;br&gt;&gt; typical residential customers. Satellite customers, for \
instance, may&lt;br&gt;&gt; use IP blocks that are spread across multiple \
countries.&lt;br&gt;&gt; &lt;br&gt;&gt; I would expect that cloud providers and larger datacenter \
providers are&lt;br&gt;&gt; using tunnels of sorts between their datacenters. Tunnels kill \
any&lt;br&gt;&gt; visibility into the real routing path.&lt;br&gt;&lt;br&gt;The large cloud providers \
such as AWS and Azure publishes their data center and IP addresses range to public. \
Data centers usually avoiding tunnels due to performance and cost-effectiveness. We \
do see rare cases required tunnels such as DDoS protection.&lt;br&gt;&lt;br&gt;&gt; When it comes \
to measuring the accuracy of databases for datacenters, I&lt;br&gt;&gt; wonder if there \
could be some means for relay operators to self-report a&lt;br&gt;&gt; location and then we \
can compare this with different databases.&lt;br&gt;&lt;br&gt;If this is possible, then it is a \
good way to perform benchmarking. However, we need to make sure the relay operator is \
giving the right information.&lt;br&gt;&lt;br&gt;&lt;br&gt;- Kim&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;div \
class="gmail_extra"&gt;&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;&lt;div \
class="gmail_quote"&gt;&lt;span style="font-family:monospace,monospace"&gt;On Thu, Aug 24, \
2017 at 3:50 AM, Iain R. Learmonth &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:irl@torproject.org" target="_blank"&gt;irl@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;/span&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;span \
style="font-family:monospace,monospace"&gt;Hi,&lt;br&gt;&lt;/span&gt; &lt;span \
style="font-family:monospace,monospace"&gt;&lt;span class=""&gt;&lt;br&gt; On 23/08/17 03:45, KL \
Liew wrote:&lt;br&gt; &gt;&gt; How is your accuracy for data centres?&lt;br&gt;
&gt;&lt;br&gt;
&gt; I don't aware of any research papers targeting data center only.&lt;br&gt;
&gt; IP2Location should be highly accurate because we are using network&lt;br&gt;
&gt; routing information to determine physical location instead of registrant&lt;br&gt;
&gt; address.&lt;br&gt;
&gt;&lt;br&gt;
&gt; For example, IP2Location is reporting &lt;a href="tel:185.56.163.144" \
value="+18556163144"&gt;185.56.163.144&lt;/a&gt; as in France after&lt;br&gt; &gt; reviewing the \
network routing information as below. However, if you&lt;br&gt; &gt; search the same IP \
address in other geolocation providers, you might see&lt;br&gt; &gt; it as reported as \
North Korea, a country with limited Internet access.&lt;br&gt; &lt;br&gt;
&lt;/span&gt;It is possible that this address is used by North Korea, they don't \
have&lt;br&gt; a massive IP allocation and I would expect that perhaps there are some&lt;br&gt;
tunnels, but I can't figure out where MaxMind have got this idea from.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
I think GeoIP is actually a far more difficult problem when it's not&lt;br&gt;
typical residential customers. Satellite customers, for instance, may&lt;br&gt;
use IP blocks that are spread across multiple countries.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
I would expect that cloud providers and larger datacenter providers are&lt;br&gt;
using tunnels of sorts between their datacenters. Tunnels kill any&lt;br&gt;
visibility into the real routing path.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
When attempting to perform GeoIP for routers, the problem is compounded&lt;br&gt;
as you don't know who really owns the router based on IP addresses&lt;br&gt;
alone, routers having multiple IP addresses, etc.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
With the influx of new TLDs and TLDs being chosen for vanity purposes,&lt;br&gt;
they are also not a useful indicator.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
I fear its the smaller providers, the more Tor-friendly providers, that&lt;br&gt;
are missing or inaccurately represented in the databases.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
When it comes to measuring the accuracy of databases for datacenters, I&lt;br&gt;
wonder if there could be some means for relay operators to self-report a&lt;br&gt;
location and then we can compare this with different databases.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
Is there a safe way for relay operators to prove that they control a&lt;br&gt;
relay and self-report the location of the relay without us having to&lt;br&gt;
have an extra field in relay descriptors or overload the contact field?&lt;br&gt;
Some sort of out-of-band means?&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;
Thanks,&lt;br&gt;
Iain.&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;
&lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;______________________________&lt;/span&gt;&lt;wbr&gt;&lt;span \
style="font-family:monospace,monospace"&gt;_________________&lt;br&gt; tor-dev mailing \
list&lt;br&gt;&lt;/span&gt; &lt;span style="font-family:monospace,monospace"&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/span&gt;
 &lt;span style="font-family:monospace,monospace"&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;&lt;/span&gt;
 &lt;span style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span \
style="font-family:monospace,monospace"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170817180829</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-08-17 18:08:29-0400</timestampReceived><subject>Re: [tor-dev] Feature Request: please consider ship default Tor bridges</subject><body>

On Thu, Aug 17, 2017 at 05:19:44PM +0000, iry wrote:
&gt; A set of Tor bridges are shipped with Tor browser bundle[0], helping
&gt; users in Tor-censored area to connection to the Tor network. Since
&gt; system Tor users may also face the censorship problem, shall we
&gt; ship some Tor bridges along with the tor package?
&gt; 
&gt; The request is firstly reported[0] to Debian BTS and I got the
&gt; following reply by Peter:
&gt; 
&gt; &gt; If upstream starts shipping bridges with their Tor releases, that
&gt; &gt; would naturally result in the Tor package shipping bridges as
&gt; &gt; well.
&gt; &gt; 
&gt; &gt; I do not know whether that's a good idea or not, but I don't think 
&gt; &gt; deviating from upstream would be particularly worthwhile.

To get an idea of how frequently the list of default bridges has
changed, see the tbb-bridges keyword in the bug tracker:
https://trac.torproject.org/projects/tor/query?keywords=~tbb-bridges&amp;col=time&amp;col=id&amp;col=summary&amp;col=keywords&amp;col=status&amp;desc=1&amp;order=time


&gt; The default bridge shipped with tor package should be exactly the same
&gt; bridges contained in bridge_prefs.js[0] shipped with the latest stable
&gt; TBB. This is because:
&gt; 1. The servers hosting default bridges are set up for huge amount of
&gt; traffic;
&gt; 2. The servers hosting default bridges are probably audited by TPO for
&gt; better security;
&gt; 3. Using a different set of bridges will distinguish the
&gt; anon-connection-wizard bridge users from the TBB bridge users, which
&gt; compromises their anonymity.

There is an argument for using a different set of default bridges: when
one of the Tor Browser ones gets blocked, it won't affect the Debian
ones. For example, for a while, Orbot had some additional bridges that
Tor Browser did not have. When the firewall of China blocked the Tor
Browser bridges, the Orbot ones continued working for another nine
months (until they got blocked for a different reason). We know that at
least China and Kazakhstan pay attention to the default Tor Browser
bridges (and China blocks them as soon as they enter the source code,
even before a release).

So having a few bridges that are not shared with Tor Browser has that
advantage, at least. Of course, it's basically security by obscurity,
because a censor that can discover the Tor Browser bridges can (in
theory) also discover some other static list of bridges. But in practice
it will take censors time to build automation to read from a new list,
default bridges are security by obscurity anyway, though surprisingly
effective for that.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170817195753</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-08-17 19:57:53-0400</timestampReceived><subject>Re: [tor-dev] Feature Request: please consider ship default Tor bridges</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



David Fifield:
&gt; On Thu, Aug 17, 2017 at 05:19:44PM +0000, iry wrote:
&gt;&gt; A set of Tor bridges are shipped with Tor browser bundle[0], 
&gt;&gt; helping users in Tor-censored area to connection to the Tor 
&gt;&gt; network. Since system Tor users may also face the censorship 
&gt;&gt; problem, shall we ship some Tor bridges along with the tor 
&gt;&gt; package?
&gt;&gt; 
&gt;&gt; The request is firstly reported[0] to Debian BTS and I got the 
&gt;&gt; following reply by Peter:
&gt;&gt; 
&gt;&gt;&gt; If upstream starts shipping bridges with their Tor releases, 
&gt;&gt;&gt; that would naturally result in the Tor package shipping
&gt;&gt;&gt; bridges as well.
&gt;&gt;&gt; 
&gt;&gt;&gt; I do not know whether that's a good idea or not, but I don't 
&gt;&gt;&gt; think deviating from upstream would be particularly 
&gt;&gt;&gt; worthwhile.
&gt; 
&gt; To get an idea of how frequently the list of default bridges has 
&gt; changed, see the tbb-bridges keyword in the bug tracker: 
&gt; https://trac.torproject.org/projects/tor/query?keywords=~tbb-bridges&amp;c
ol=time&amp;col=id&amp;col=summary&amp;col=keywords&amp;col=status&amp;desc=1&amp;order=time
&gt;
&gt;
&gt; 
Thank you very much for informing us the way to check default bridges'
update frequency.

The frequency is generally once per month while sometime three times a
month.

This RSS feed may be helpful to immediately inform us the new changes:

https://trac.torproject.org/projects/tor/query?keywords=~tbb-bridges&amp;for
mat=rss&amp;col=id&amp;col=summary&amp;col=keywords&amp;col=status&amp;col=time&amp;desc=1&amp;order
=time

&gt;&gt; The default bridge shipped with tor package should be exactly
&gt;&gt; the same bridges contained in bridge_prefs.js[0] shipped with
&gt;&gt; the latest stable TBB. This is because: 1. The servers hosting 
&gt;&gt; default bridges are set up for huge amount of traffic; 2. The 
&gt;&gt; servers hosting default bridges are probably audited by TPO for 
&gt;&gt; better security; 3. Using a different set of bridges will 
&gt;&gt; distinguish the anon-connection-wizard bridge users from the TBB 
&gt;&gt; bridge users, which compromises their anonymity.
&gt; 
&gt; There is an argument for using a different set of default bridges: 
&gt; when one of the Tor Browser ones gets blocked, it won't affect the 
&gt; Debian ones. For example, for a while, Orbot had some additional 
&gt; bridges that Tor Browser did not have. When the firewall of China 
&gt; blocked the Tor Browser bridges, the Orbot ones continued working 
&gt; for another nine months (until they got blocked for a different 
&gt; reason). We know that at least China and Kazakhstan pay attention 
&gt; to the default Tor Browser bridges (and China blocks them as soon 
&gt; as they enter the source code, even before a release).

&gt; So having a few bridges that are not shared with Tor Browser has 
&gt; that advantage, at least.

Thank you for offering me the interesting information. I did not
realize this advantage before.

The advantages 1 and 2 which I mentioned above will still be valid as
long as the bridges are TPO proved. Therefore, it sounds to be a good
idea to have some unique bridges shipped with Debian Tor (if including
Tor bridges is a good idea).

&gt; Of course, it's basically security by obscurity, because a censor 
&gt; that can discover the Tor Browser bridges can (in theory) also 
&gt; discover some other static list of bridges. But in practice it
&gt; will take censors time to build automation to read from a new list,
&gt;  default bridges are security by obscurity anyway, though 
&gt; surprisingly effective for that.

That is true. Using security by obscurity strategy in censorship
circumvention is more like a resource competition. When the adversary
is a country like China, we may not be confident to win in long term.

Btw, Collateral Freedom seems to be one of the most effective ways to
circumvent Internet censorship in China. Circumvention tools that
depend on Collateral Freedom usually works fine, including meek,
lantern, psiphon3 etc. Therefore, I see a lot of potential work which
may benefit the Internet freedom in China. For example:
1. package meek into Debian
2. host (part of the) BridgeDB mirror on Github or AWS
3. #22402: https://trac.torproject.org/projects/tor/ticket/22402
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZlfU8AAoJEKFLTbxtzdU8OOoQAIv+tJcNTi6hUExD2H/e8Wh6
YICR3OwSIp6v1kYD6aXWW+sL5OQzBe4K8pJsSD6IQzukfswytGd4BuTqYj2oiZSz
kBKWas9CdHF2nC3MThCL65ImSzPgg+z1hOsy1f7ur0yFh0tj7yCKaXQFQqCMOO5+
lGxMYJfjF22zIHg9j3Q/IgrMNojBOLKtFD9KLNOURA1WMJGnVzrTx4lEyw9WaKBI
A/eK1ZZWpRIiEYVyvvItU+/a54ax1Pirt2G4bZVKMnmiZ4evhjU8MuTOFPYRq/YI
bUe6G4YJvNgqVxj0RmSTxaJHfX2KHOUEZQMR4uhmWMVTch0093rQBk1ICJy89tyz
PWZmOzyp2H8QVSPxFPR5+5xzeinLDR5FsUc3Q9XeD1MiIlSk5W+EKGfQzVHpawGq
lfo8kBN+iExTx4KErJPLreqv3iol9XUQgN/kD4SjDaHlM/YXt34NpOHfdafFdqDj
yAwvAeGL5gSwDiV//Mie7fB493dcssaR70kl02hM51LuNywf0mzt0iYA9pyCv9Zo
vzDskzAYElIKoWQBIkt15R22uC0bG6VW/BaeHS2SXRqIDLEsaq/f46E+D/IP+8o5
kMU/M3JygjvtyM+iKbnEOvxRBVfCLL0c0rO57TOdGd5Ijmrlqcpf+jQf4oZrsA0L
nAlzDy2Y0GYB7eAHyx+b
=9G6w
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170819071126</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-08-19 07:11:26-0400</timestampReceived><subject>Re: [tor-dev] Feature Request: please consider ship default Tor bridges</subject><body>

On Thu, Aug 17, 2017 at 07:57:53PM +0000, iry wrote:
&gt; Btw, Collateral Freedom seems to be one of the most effective ways to
&gt; circumvent Internet censorship in China. Circumvention tools that
&gt; depend on Collateral Freedom usually works fine, including meek,
&gt; lantern, psiphon3 etc. Therefore, I see a lot of potential work which
&gt; may benefit the Internet freedom in China. For example:
&gt; 1. package meek into Debian
&gt; 2. host (part of the) BridgeDB mirror on Github or AWS
&gt; 3. #22402: https://trac.torproject.org/projects/tor/ticket/22402

Some hopefully useful thoughts along these lines:

A) Most places around the world that need bridges these days need
pluggable transport bridges, not just vanilla bridges. So if we want to
bundle bridge addresses, we should bundle PT bridge addresses.

B) ...and that means we need to make sure that those PTs are well packaged
in Debian too, since the Tor deb by itself would not be able to use them.

C) I wonder if we could use the new %include torrc directive in this
situation:
https://bugs.torproject.org/1922
That is, when you apt-get install obfs4proxy, is that the right time to
populate /etc/torrc.d/obfs4-bridges with some (probably commented out
to start) lines that let you use those bridges if you want?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170814075338</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2017-08-14 07:53:38-0400</timestampReceived><subject>Re: [tor-dev] Doesn't hidden services break RFC 3986?</subject><body>

On Sun, 13 Aug 2017 17:06:20 +0000, Ryan Carboni wrote:
&gt; https://tools.ietf.org/html/rfc3986#section-3
&gt; By placing the scheme within the authority as a tld while using the same
&gt; authority as the HTTP specification, this probably breaks RFC 3986 and
&gt; maybe others.

RFC7686 deals with that.

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170814075637</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2017-08-14 07:56:37-0400</timestampReceived><subject>Re: [tor-dev] Doesn't hidden services break RFC 3986?</subject><body>

[Attachment #2 (multipart/alternative)]


Also: just because it's HTTP/S running over a different network stack,
doesn't make it a new scheme.

Just because your dinner arrives on a different plate doesn't mean the
recipe has changed. :-)

On 14 Aug 2017 8:53 am, "Andreas Krey" &lt;a.krey@gmx.de&gt; wrote:

&gt; On Sun, 13 Aug 2017 17:06:20 +0000, Ryan Carboni wrote:
&gt; &gt; https://tools.ietf.org/html/rfc3986#section-3
&gt; &gt; By placing the scheme within the authority as a tld while using the same
&gt; &gt; authority as the HTTP specification, this probably breaks RFC 3986 and
&gt; &gt; maybe others.
&gt;
&gt; RFC7686 deals with that.
&gt;
&gt; Andreas
&gt;
&gt; --
&gt; "Totally trivial. Famous last words."
&gt; From: Linus Torvalds &lt;torvalds@*.org&gt;
&gt; Date: Fri, 22 Jan 2010 07:29:21 -0800
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Also: just because it's HTTP/S running over a different network \
stack, doesn't make it a new scheme.&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;Just because your dinner arrives on a different plate doesn't mean the \
recipe has changed. :-)&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On 14 Aug 2017 8:53 am, "Andreas Krey" &lt;&lt;a \
href="mailto:a.krey@gmx.de"&gt;a.krey@gmx.de&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Sun, 13 Aug 2017 17:06:20 +0000, \
Ryan Carboni wrote:&lt;br&gt; &gt; &lt;a href="https://tools.ietf.org/html/rfc3986#section-3" \
rel="noreferrer" target="_blank"&gt;https://tools.ietf.org/html/&lt;wbr&gt;rfc3986#section-3&lt;/a&gt;&lt;br&gt;
 &gt; By placing the scheme within the authority as a tld while using the same&lt;br&gt;
&gt; authority as the HTTP specification, this probably breaks RFC 3986 and&lt;br&gt;
&gt; maybe others.&lt;br&gt;
&lt;br&gt;
RFC7686 deals with that.&lt;br&gt;
&lt;br&gt;
Andreas&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
"Totally trivial. Famous last words."&lt;br&gt;
From: Linus Torvalds &lt;torvalds@*.org&gt;&lt;br&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170825015107</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-08-25 01:51:07-0400</timestampReceived><subject>Re: [tor-dev] Dir auths using 2x bandwidth in last week</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Aug 2017, at 14:36, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 21 Aug 2017, at 14:05, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt;&gt; 
&gt;&gt; On Mon, Aug 21, 2017 at 01:56:16PM +1000, teor wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; On 10 Aug 2017, at 13:36, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; https://atlas.torproject.org/#details/9695DFC35FFEB861329B9F1AB04C46397020CE31
&gt;&gt;&gt;&gt; https://atlas.torproject.org/#details/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281
&gt;&gt;&gt;&gt; https://atlas.torproject.org/#details/BD6A829255CB08E66FBE7D3748363586E46B3810
&gt;&gt;&gt;&gt; https://atlas.torproject.org/#details/74A910646BCEEFBCD2E874FC1DC997430F968145
&gt;&gt;&gt;&gt; https://atlas.torproject.org/#details/7EA6EAD6FD83083C538F44038BBFA077587DD755
&gt;&gt;&gt;&gt; all show a big increase in sent bytes starting at the end of July.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; It isn't growth in Tor users, since those have stayed relatively flat
&gt;&gt;&gt;&gt; in the last two weeks.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; And the new rate seems to be the new normal -- it's showing no signs of
&gt;&gt;&gt;&gt; going back to the old rate.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; I would assume it's outgoing directory stuff, since that's most of what
&gt;&gt;&gt;&gt; dir auths do.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; Any guesses?

In July, we went from 1% of fallback directory mirrors being down, to about
10% of fallback directory mirrors being down.

See "Fallback Directories Running, Past 90 Days" on:
https://consensus-health.torproject.org/graphs.html
(Needs JS, SVG)

This means that 10% of client requests go straight to directory
authorities. For the other 90%, the first fallback and first directory
authority request happen simultaneously, and the authority often wins
(and gets to supply the client's first consensus).

Deploying #17750 in 0.3.2 (or backporting it to earlier releases)
will fix both these issues:

&gt; If we want to reduce the load on authorities, we can backport this
&gt; change, which makes clients try fallbacks before authorities:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/17750
&gt; 
&gt; It's been in master (0.3.2) for almost 2 months now.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZn4KLAAoJEHQNnjkCUnKiKi8QAMeV/zQsi6e3v4zz2bDtCqht
JfyeR5r5A3WFeopmM4azSS2fKQviOF8FvoYycHPoqSrKMgvWWGSk7mnx6dJkLI53
HfMhTtA/Gwff2KEWtBi3M4/zzl3Zr0zfREb87t4OdMnj0EIkv7VJ09aVfgiAZJ6G
DnqoLayrY6PnvLCal39HNtEhIjajMtPkGH0wKubkcge1PA4kv+RBg6/mALMNdgu5
4dp9o8ReKC77lNU2GY5v7VBPM0BDXoicE9kioOEOu2Aa2vdgN/ZnDLzMqGCLhIsM
MACS4QnbkNhgByQ9jA59AKGhn0NjA5qLvs4ZOU9O1RBkxTheIEKnfnM9vUlwOSTD
IuI8ARvKCq/qNsd7rshXNqF0QydgzW7dx0iUeioo4RIsKJwlR2S/IFFph6YSe/9j
rTdIZqtqKvzOEU9IlsjEGMiRsI4dB8Li1ZaRYSMEBCndRfbAauVtmxR32gudKbCC
2XbWMH3t4CcLAzeR/W/Gd4+HH1RisYLvScNuaUXp0n1FxspS7Ib/jDAG+Mj0vPwX
0yypvty8mm4gqAIiHcDWOc+LPnMjz1OVvQaBS9VEU1/JfYRyKbGurH7g2545Ej5D
FGYHXsCzUKTpTxHTXjlyOQa6QbOnt7V2EbRkFLTQCQL5vfQVaYhEDHzLnUsaNcP6
493H/UE33Yv39lIsIG/g
=/rtc
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170828153221</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-08-28 15:32:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal 281: downloading microdescriptors in bulk</subject><body>

On Mon, Aug 21, 2017 at 12:42 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 12 Aug 2017, at 03:36, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
 [...]
&gt;&gt;  Caches MUST NOT answer this request unless they recognize the
&gt;&gt;  consensus with digest X, and digest Y.
&gt;&gt;  digest Y.
&gt;
&gt; Extra "digest Y.  "

Fixed, thanks!

&gt;&gt;  If answering, caches MUST reply with all of the
&gt;&gt;  microdescriptors that the cache holds that were listed by
&gt;&gt;  consensus X, and MUST omit all the microdescriptors that were
&gt;&gt;  omitted listed in consensus Y.
&gt;
&gt; What happens if the consensus versions are different?
&gt; In particular, what happens if the microdesc algorithms are different
&gt; in these consensus versions?
&gt;
&gt; (What should happen is that the diff is larger than normal, because
&gt; most microdesc hashes have changed. We should have a test for this.)

Right.  I've tried to clarify.  Now it says "(For the purposes of this proposal,
  microdescriptors are "the same" if they are textually identical
  and have the same digest.)"


 [...]
&gt;&gt; 2.3. When to make these requests
&gt;&gt;
&gt;&gt;  Clients should decide to use this format in preference to the
&gt;&gt;  old download-by-digest format if the consensus X lists their
&gt;&gt;  preferred directory cache as using a new DirCache subprotocol
&gt;&gt;  version. (See 5 below.)
&gt;
&gt; Don't clients have 3 preferred directory caches?

Edited to say additionally:

  When a client has some preferred directory caches that support
  this subprotocol and some that do not, it chooses one at random,
  and uses these requests if that one supports this subprotocol.

&gt; What about fallback directory mirrors?
&gt;
&gt; We don't care about diff/X/Y - there is no previous consensus.
&gt; But knowing when a fallback supports full/X could be handy.
&gt; Or do we deliberately want to use the legacy protocol to
&gt; bootstrap, so a single cache can't lie to us?

When using fallback mirrors, the client downloads the consensus before
downloading microdescriptors.  Having downloaded the consensus, it
should know whether the cache supports this protocol.

&gt; What about bridge clients?
&gt; Can they find out from the bridge descriptor?

Yup; the subprotocol information is listed there too.


Thanks for the review!
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170828153915</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-08-28 15:39:15-0400</timestampReceived><subject>[tor-dev] Meeting on IRC to discuss prop280 privcount stuff (Sep 12, 8pm EDT)</subject><body>

Hello!

On #tor-dev at 8pm EDT on Tuesday Sep 12 (== 00:00 Sep 13 in UTC, I
think), we'll have an IRC meeting to talk about proposal 280, and
integrating privcount into Tor.  If you're interested, please feel
free to drop by!

The current draft of the proposal is at
https://gitweb.torproject.org/torspec.git/tree/proposals/280-privcount-in-tor.txt

best wisehes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170831150904</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-08-31 15:09:04-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 4.1-1.4.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Onionoo's protocol was extended and has a minor version jump to 4.1,
therefore a new release is available:

     https://dist.torproject.org/onionoo/4.1-1.4.1/

Protocol changes (also summarized in [0]):
* removal of (unused) beta fields in bridge client objects
* addition of a new search filter parameter by Tor version, see [1] and [2]
  for example calls.

There were also some internal improvements, which can be found in the changelog [3a].

You might have noticed an increment in the middle and minor application version.
This is due to a fix for the new filter, which was discovered after creating the
4.1-1.4.0 release, but could be applied before announcing 4.1-1.4.0 (cf.[3b]).

Please direct comments and questions to the metrics-team mailing list [4].

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions
[1] https://onionoo.torproject.org/details?search=version:0.2.4&amp;limit=10
[2] https://onionoo.torproject.org/details?search=version:0.3&amp;limit=10
[3a] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.1-1.4.0
[3b] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-4.1-1.4.1
[4] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170703012658</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-07-03 01:26:58-0400</timestampReceived><subject>Re: [tor-dev] Default parsing order of config files in Debain tor package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Daniel!

Thank you so much for your immediate, detailed and informative answer.
I really like the example you offered as it clearly illustrates the
parsing order.

Your answer is very helpful for me to decide where I should place the
%include line and Tor config files. I really appreciate your help.

Best,
iry

Daniel:
&gt; The precedence for tor options is the following (1 overrides 2,
&gt; etc...):
&gt; 
&gt; 1. Command line options. 2. Configuration file options (your
&gt; /etc/torrc). 3. Defaults file options (your
&gt; /usr/share/tor/tor-service-defaults-torrc).
&gt; 
&gt; In the same file, options that appear later override earlier
&gt; options.
&gt; 
&gt; Currently, there is no torrc.d directory created when you install
&gt; the tor package. However, you can use a %include in the
&gt; configuration file or in the defaults file. When you insert a
&gt; %include in a file, it works as if all the options for the included
&gt; file or folder were written on the line of the %include. If you're
&gt; including a folder, the files will be processed in lexicographic
&gt; order and files starting with a dot will be ignored.
&gt; 
&gt; Here is an example:
&gt; 
&gt; tor-service-defaults-torrc: SomeOption 0 %include /etc/tor/torrc.d/
&gt; # SomeOption is now 2 SomeOption 3 # SomeOption is now 3
&gt; 
&gt; /etc/tor/torrc.d/01_one: SomeOption 1
&gt; 
&gt; /etc/tor/torrc.d/02_two: SomeOption 2
&gt; 
&gt; 
&gt; With this configuration, the value for some option is 3. But we can
&gt; have a torrc with %include too:
&gt; 
&gt; /etc/torrc: SomeOption 4 # SomeOption is now 4 %include
&gt; /etc/tor/foo.torrc # SomeOption is now 5 SomeOption 6 # SomeOption
&gt; is now 6
&gt; 
&gt; /etc/tor/foo.torrc: SomeOption 5
&gt; 
&gt; With both these files, the value for SomeOption is 6.
&gt; 
&gt; There are also different types of options and some can take
&gt; multiple values. For more information see the section "Mid-level
&gt; semantics" on this file:
&gt; https://gitweb.torproject.org/tor.git/tree/doc/torrc_format.txt
&gt; 
&gt; Best regards, Daniel
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZWZ1gAAoJEKFLTbxtzdU84gAQAKVu8UcbYHXIaZ+sUkiENUeW
lSBnvOHeRcIBAOe1LfClgkAFiVWhHwfG2ll7cGDTiMxn7IuDlv+sUFtwpqRVFgYH
kOxJiVS1kORQJ8t8DuXh3rQZTUTKOkhCCepb8maHeCSED0yUGSXs+wzpFMAyKJk+
2B73YR/hQd2XgpZx9LcpfkdznTXF/jpOPZthZWFAkwm1yNAlvwAmfXgADV4lQy5K
RRCwYmAgdSS9OLrDMj0G1lVnvsr7qUgfePzLpp1FBkMf/E8nhL6NBCK+jJc+BA+R
3YKn5pKtJ5/KaAwutQ5nlI3+mdVoDnJI0wWGHxL6ZJPwfCMANqkrbRa8/Wq0i7ZB
u1sG9aWJzTXPaI/OZQ8VE5bvh9mLSfwo0RpzYv8CVsFgu2VnMPk5EW13d33+Dzjz
5GVcA0s0V1AA7uZ/NGUrcUZ/jO+z5Argre7RxkCnAgjItKb2vJK5hGnj7gVQO0il
bcx+e47MyLVNoi7tOaoJmOusEEMQB1wMG6S1Pc+o/apqW6p2VEUKrTh+DSp72+LX
zDPOxAleJjbntXZkGrDO0nay21y1LWYL2bOHpWomjd03f9v6br/n9oofNX6pN7Xn
B9FIOa0PxzCT2BwcROnEDEB9mCHDbIRSEvuwpbbdz3StRW3pLzU1Q2e6WO+eF7dH
OpDeWlO5/Z6IJKV4eesz
=9riT
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170705191943</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-07-05 19:19:43-0400</timestampReceived><subject>[tor-dev] Fuzzing tor_inet_pton(): A fuzzing example</subject><body>

So, there was a bug report of an assertion failure in
tor_inet_pton(), and I wanted to track it down.  Here's my
reconstruction of my process, in case it helps anybody else
write fuzzing code.

First, I wrote a new fuzzing target in src/test/fuzz/fuzz_pton.c:

======
#include "orconfig.h"
#include "or.h"

#include "fuzzing.h"

int
fuzz_init(void)
{
  return 0;
}
int
fuzz_cleanup(void)
{
  return 0;
}

int
fuzz_main(const uint8_t *stdin_buf, size_t data_size)
{
  struct in_addr *in = tor_malloc(sizeof(*in));
  struct in6_addr *in6 = tor_malloc(sizeof(*in6));
  char *cp = tor_memdup_nulterm(stdin_buf, data_size);
  int in_ok = tor_inet_pton(AF_INET, cp, in);
  int in6_ok = tor_inet_pton(AF_INET6, cp, in6);
  tor_free(cp);
  tor_free(in);
  tor_free(in6);
  log_info(LD_GENERAL, "%d %d", in_ok, in6_ok);
  return 0;
}
======
Notes:

  * The init and cleanup functions don't have anything to do above, but
    the test harness in fuzzing_common.c expects to find them.
  * This fuzzer tries to parse each address twice: first as an IPv4
    address, then as an IPv6 address.
  * The fuzzer puts its outputs into heap-allocated RAM to improve the
    odds that any bugs will get caught by asan, though this shouldn't
    really be necessary.
  * Because tor_inet_pton() takes a nul-terminated string, this fuzzer
    nul-term inates its input.  You shouldn't do that unless you're
    fuzing a function that requires nul-terminated inputs.


Next, I edited the script in scripts/codegen/fuzzing_include_am.py to
add "pton" to the "FUZZERS" list at the top of the file, and I re-ran
the script and used its output to replace src/test/fuzz/include.am, so
that our build system can know about the new fuzzer.

I knew I would need a corpus of pton examples, so I started one in
fuzzing-corpora (fuzzing-corpora is a separate repository).  I made a
new "pton" directory there, and filled it with 4 or 5 examples of things
that looked like they might be addresses.  I chose:

   127.0.0.1
   1.2.3.4
   ::1
   80f0:9999:ffff::3

Each example went into its own file, without a terminating newline.

I tried the fuzzing corpora examples out with the fuzzing program,
to make sure that I got the expected results

$ ./src/test/fuzz/fuzz-pton --info &lt; ../tor-fuzz-corpora/pton/b
Jul 05 15:00:56.371 [info] fuzz_main(): 1 0



===== AFL

Then I re-built Tor for use with AFL:
   ./configure CC=afl-gcc --enable-fragile-hardening
   make clean
   AFL_HARDEN=1 make fuzzers

To fuzz it, I started by telling afl-fuzz to run with no memory limit,
writing results to pton-output, taking inputs from the corpus:

  afl-fuzz  -i ../tor-fuzz-corpora/pton -o ./pton-output/ -m none \
      -- ./src/test/fuzz/fuzz-pton

AFL wound up complaining about some kernel settings, so I had to do this
as root.  YMMV.  AFL told me to do this:

   echo core &gt;/proc/sys/kernel/core_pattern
   cd /sys/devices/system/cpu
   echo performance | tee cpu*/cpufreq/scaling_governor

Then AFL started running!

I watched the "total paths" value climb.  That's how many different
distinct paths through the code that the fuzzer was able to find.  I
didn't see any "uniq crashes" or "uniq hangs" values, so I knew the
fuzzer hadn't found anything.



===== Libfuzzer

After that had run for a day, I stopped it and tried again with libfuzzer:

     ./configure --enable-libfuzzer CC=/home/nickm/build/llvm-build/bin/clang
     make clean
     make fuzzers

Obviously, you'll need to point CC to your own clang here.  I wasn't
able to use the system clang because libfuzzer needs features I didn't
have.

Then I made a new file for the libfuzzer results, and ran libfuzzer
using the original corpus and the output from AFL:
   mkdir pton-output-libfuzzer
   ./src/test/fuzz/lf-fuzz-pton pton-output-libfuzzer/ \
        ./pton-output/queue/ ../tor-fuzz-corpora/pton/

And libfuzzer began giving results.  Every "NEW" line was a new path;
every "pulse" line meant that time had passed but no new paths were
found.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170713125314</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-07-13 12:53:14-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.2.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256


Hi there!

a new CollecTor version is available:

     https://dist.torproject.org/collector/1.2.0/

The main new features are 
the switch from Torperf to Onionperf (see [0] for background) and
the upgrade to metrics-lib-2.0.0.

For more see the change log [1].

In addition, CollecTor's web-pages are now part of Tor Metrics web-site:

    https://metrics.torproject.org/collector.html.

Please update any bookmarks and report any wrong links to the old page.
All data is also still available directly at collector.torproject.org.

Please direct comments and questions to the metrics-team mailing list [2].
And, of course, bug reports [3] or feature requests [4] can be filed in trac.

Cheers,
iwakeh

[0] https://metrics.torproject.org/stats.html#torperf-1.1
[1] https://gitweb.torproject.org/collector.git/plain/CHANGELOG.md?id=collector-1.2.0
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
[3] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=defect
[4] https://trac.torproject.org/projects/tor/newticket?component=Metrics/CollecTor&amp;type=enhancement
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZZ200AAoJEPeEx9Sa/gvi7oEQAK1KGYwtjbPf81dPjOLg3aXo
9yPDylFT6h6yQ2xSadfr895prrvvNs34w+gmCtVv/SoTt9M/NfBS+Sj6vj6BEVOO
E6e9gLty64sZYV8dlvGksa1RcGbMIpFRqLKk38agqF4h5074Wg2f1fk+KdzXuQ4G
Q70Upp8YtOFaEf0dyIc6a2VUIPtv3qoRuj5bQNOHuPyO40l8nGh4qm7kYYVjB7t/
lRS3byJl2JTplmX8+9ttJlmwyjCi7K14xUMJ/tZ8TjV7YRTIUAVlSTSzxz7AKxXw
NwtyPNIAQi6d1QI7HT1fWOHwqvWC1RXLelnS5poQ89LmQWHF5ONDED62q4Oxsc9j
JkivmhxW0akp9ijck8K2G581sO3TNZBnNVp1eOL3Ymg+G55HGog+DYM9X1hm2geB
olUkl3PvIIYPVot2s8E/gslOi3QMAYhkoGO0+kHoy4TkWveclXgFJi/o+QKKzora
W2cIuM1hO5qLlQ6sNEHBW6fMLcmgvDJNVAR/+CWUYz1QhesL92hCGpukAvTkYsKv
jwMFAiXBLxbSkzxDrAI37Ah5/QZRU+Eu17UkyNQb5QGnRoI8t58pJjoY2+POSBZ+
TtvezXD//xq0Wpy+Erpj/OxOfpPItTrH7LF1IrmpGZ3JW+KaZJzItve7VvEG8NVR
9FWp8aT1usWmHA2EvWfg
=EDHj
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170720044558</emailId><senderName>Yixin Sun</senderName><senderEmail>yixins@cs.princeton.edu</senderEmail><timestampReceived>2017-07-20 04:45:58-0400</timestampReceived><subject>Re: [tor-dev] Thoughts on the Counter-RAPTOR paper</subject><body>

Hi Roger,

Thanks for the comments! And apologies for the insane delay.. Please see below. In \
summary, we're working on making the BGP monitoring data publicly available - (1) \
providing the data for people to use, and (2) providing our analytics on the data as \
a reference. Webpage is currently hosted here: \
http://raptor.princeton.edu/bgp-tor.html (we're currently solving some hosting space \
issue, will be constantly updating the page once we get more space)

1a. Challenges of the system (in terms of false positives, the need of a routing \
expert, etc.)

There are multiple phases that we want to achieve with the system: (1) first phase is \
simply making the BGP data available on the Tor network, which will open up the \
research area to the community on how to make best use of these data; (2) second, we \
offer our detection heuristics (as presented in the paper) as a resource on anomaly \
detection, and the historical alerts data will be publicly available online; (3) \
finally, we want to make it into a real alert system - that people can subscribe and \
receive alerts in real time. We agree that this will be challenging since we do not \
want to overwhelm users with a large amount of alerts. 

-&gt; Lower the alert rate and analyze alerts
The best thing is always to ask the network operators that are involved in the alerts \
- they know the best whether they're truly under attack, or if it's due to some \
internal configurations or agreements, which may not be public information. Many \
previous monitoring systems (cite here) involved this kind of "input" from network \
operators themselves. However, Tor relay operators are not equal to network operators \
- from our interactions with some relay operators, we learned that many purchased \
services from ISPs and thus do not have control over the AS/IP space of the relays. \
In this case, it may be hard to get accurate input from relay operators since their \
knowledge is limited regarding the network configurations of their providers. Thus, \
we think for the relay operators who actually also operate the network themselves, \
it'll be the best to get input from them (e.g., they can specify "rules" a priori to \
reduce false positives, and the "rules" can also help automate analysis on alerts); \
for others with limited information about the network they're on, then we'll have to \
resort to human expert to analyze the routing data. In terms of identifying such an \
expert, we don't really have a good answer. But the good thing is that the Tor \
network is at a relatively manageable size (in terms of number of ASes, etc.) \
compared to the rest of the Internet. Also, we can potentially have different levels \
of alerts too to make sure people pay enough attention to the highly suspicious ones \
while not entirely missing out the mildly suspicious ones. In terms of how to \
determine the "level", we have some thoughts such as incorporating more history data \
as well as inferred business relationships, but these need to be verified with more \
data analysis. 

-&gt; More data on the false positive rates
The paper presented data up to May 2016. We will be constantly updating this webpage \
with more data since then. (http://raptor.princeton.edu/bgp-tor.html)

1b. How does your live-BGP-feed-anomaly-detector compare (either in design, or in \
closeness to actually being usable ;) to the one Micah Sherr was working on from \
their PETS 2016 paper?

The PETS 2016 paper adopts a data-plane approach which requires some active \
traceroute measurements, while we use a control-plane approach that's passive. We \
think the two approaches can be a good complement to each other.

1c. Your paper suggests that an alert from a potential hijack attempt could make \
clients abandon the guard for a while, to keep clients safe from hijack attempts. \
What about second-order effects of such a design, where the attacker's *goal* is to \
get clients to abandon a guard, so they add some sketchy routes somewhere to trigger \
an alert? Specifically, how much easier is it to add sketchy routes that make it look \
like somebody is attempting an attack, compared to actually succeeding at hijacking \
traffic?

To "add sketchy routes", the attackers need to make some routing announcement, and \
the announcement will affect certain parts of the Internet (big or small). (Note, not \
all announcements will necessarily have an effect, for example, less-specific \
announcements usually won't be used, so our system doesn't focus on the less-specific \
ones.)

The next question is - what's the goal of the attackers? Forcing the clients to \
choose a new guard or actually deanonymizing the clients? Could be either. Say, an \
attacker simply announces the prefix covering the guard relay - this will blackhole \
all the traffic going to the guard, so the connections between clients and the guard \
will be terminated at some point, and the clients will have to choose a new guard. So \
the goal of the attacks here could just be making the guard unusable (as opposed to \
deanonymization, which requires more sophisticated attacks and more work from the \
attackers). And this could really be happening without being noticed, especially if \
the attack announcement only affects a small part of the Internet and lasts for a \
short amount of time. For deanonymization, the attack needs to last longer (from \
Raptor paper, at least 5 minutes for a decent accuracy rate). Thus, our current main \
goal is simply forcing the attackers to launch attack in a public viewable way as \
opposed to stealthy (like in the hijack example), and thus increase routing \
transparency in the Tor network. The next goal will be to couple the alert system \
with client behavior - and yes, this can be tricky, and we currently don't have a \
good answer for this. 

Yixin

----- Original Message -----
From: "Roger Dingledine" &lt;arma@mit.edu&gt;
To: "mittal prateek" &lt;mittal.prateek@gmail.com&gt;, "Yixin Sun" \
                &lt;yixins@CS.Princeton.EDU&gt;, tor-dev@lists.torproject.org
Sent: Monday, April 17, 2017 3:04:33 PM
Subject: Thoughts on the Counter-RAPTOR paper

Hi Prateek, Yixin, (and please involve your other authors as you like),

(I'm including tor-dev here too so other Tor people can follow along,
and maybe even get involved in the research or the discussion.)

I looked through "Counter-RAPTOR: Safeguarding Tor Against Active
Routing Attacks":
https://arxiv.org/abs/1704.00843

For the tl;dr for others here, the paper: a) comes up with metrics for
how to measure resilience of Tor relays to BGP hijacking attacks, and
then does the measurements; b) describes a way that clients can choose
their guards to be less vulnerable to BGP hijacks, while also considering
performance and anonymity loss when guard choice is influenced by client
location; and c) builds a monitoring system that takes live BGP feeds
and looks for routing table anomalies that could be hijack attempts.

Here are some hopefully useful thoughts:

-----------------------------------------------------------------------

0) Since I opted to write these thoughts in public, I should put a
little note here in case any journalists run across it and wonder. Yay
research! We love research on Tor -- in fact, research like this is the
reason Tor is so strong. For many more details about our perspective on
Tor research papers, see
https://blog.torproject.org/blog/tor-heart-pets-and-privacy-research-community

-----------------------------------------------------------------------

1a) The "live BGP feed anomaly detection" part sounds really interesting,
since in theory we could start using it really soon now. Have you
continued to run it since you wrote the paper? Have you done any more
recent analysis on its false positive rate since then?

I guess one of the real challenges here is that since most of the alerts
are false positives, we really need a routing expert to be able to look
at each alert and assess whether we should be worried about it. How hard
is it to locate such an expert? Is there even such a thing as an expert
in all routing tables, or do we need expertise in "what that part of
the network is supposed to look like", which doesn't easily scale to
the whole Internet?

Or maybe said another way, how much headway can we make on automating
the analysis, to make the frequency of alerts manageable?

I ask because it's really easy to write a tool that sends a bunch of
warnings, and if some of them are false positives, or heck even if
they're not but we don't know how to assess how bad they really are,
then all we've done is make yet another automated emailer. (We've made
a set of these already, to e.g. notice when relays change their identity
key a lot:
https://gitweb.torproject.org/doctor.git/tree/
but often nobody can figure out whether such an anomaly is really an
attack or what, so it's a constant struggle to keep the volume low enough
that people don't just ignore the mails.)

The big picture question is: what steps remain from what you have now
to something that we can actually use?

1b) How does your live-BGP-feed-anomaly-detector compare (either in
design, or in closeness to actually being usable ;) to the one Micah
Sherr was working on from their PETS 2016 paper?
https://security.cs.georgetown.edu/~msherr/reviewed_abstracts.html#tor-dataplane-defenses


1c) Your paper suggests that an alert from a potential hijack attempt
could make clients abandon the guard for a while, to keep clients safe
from hijack attempts. What about second-order effects of such a design,
where the attacker's *goal* is to get clients to abandon a guard, so they
add some sketchy routes somewhere to trigger an alert? Specifically,
how much easier is it to add sketchy routes that make it look like
somebody is attempting an attack, compared to actually succeeding at
hijacking traffic?

I guess a related question (sorry for my BGP naivete) is: if we're worried
about false positives in the alerts, how much authentication and/or
attribution is there for sketchy routing table entries in general? Can
some jerk drive up our false positive rate, by adding scary entries
here and there, in a way that's sustainable? Or heck, can some jerk DDoS
parts of the Internet in a way that induces routing table changes that
we think look sketchy? These are not reasons to not take the first steps
in the arms race, but it's good to know what the later steps might be.

-----------------------------------------------------------------------

2a) Re changing guard selection, you should check out proposal 271,
which resulted in the new guard-spec.txt as of Tor 0.3.0.x:
https://gitweb.torproject.org/torspec.git/tree/guard-spec.txt
I don't fully understand it yet (so many things!), but I bet any future
guard selection change proposal should be relative to this design.

2b) Your guard selection algorithm makes the assumption that relays with
the Guard flag are the only ones worth choosing from, and then describes
a way to choose from among them with different weightings. But you could
take a step back, and decide that resilience to BGP hijack should be one
of the factors for whether a relay gets the Guard flag in the first place.

It sounded from your analysis like some ASes, like OVH, are simply
bad news for (nearly) all Tor clients. Your proposed guard selection
strategy reduced, but did not eliminate, the chances that clients would
get screwed by picking one of these OVH relays. And the tradeoff was
that by only reducing the chances, you left the performance changes not
as extreme as you might have otherwise.

How much of the scariness of a relay is a function of the location of
the particular client who is considering using it, and how much is a
function of the average (expected) locations of clients? That is, can we
identify relays that are likely to be bad news for many different clients,
and downplay their weights (or withhold the Guard flag) for everybody?

The advantage of making the same decision for all clients is that you
can get rid of the "what does guard choice tell you about the client"
anonymity question, which is a big win if the rest of the effects aren't
too bad.

Which leads me to the next topic:

-----------------------------------------------------------------------

3) I think you're right that when analyzing a new path selection strategy,
there are three big things to investigate:

a) Does the new behavior adequately accomplish the goal that made you want
a new path selection strategy (in this case resilience to BGP attacks)?

b) What does the new behavior do to anonymity, both in terms of the global
effect (e.g. by flattening the selection weights or by concentrating
traffic in fewer relays or on fewer networks) and on the individual
epistemic side (e.g. by leaking information about the user because of
behavior that is a function of sensitive user details)?

c) What are the expected changes to performance, and are there particular
scenarios (like high load or low load) that have higher or lower impact?

I confess that I don't really buy your analysis for 'b' or 'c' in this
paper. Average change in entropy doesn't tell me whether particular user
populations are especially impacted, and a tiny Shadow simulation with
one particular network load and client behavior doesn't tell me whether
things will or won't get much worse under other network loads or other
client behavior.

I can't really fault this paper though, because the structure of an
academic research paper means you can only do so much in one paper, and
you did a bunch of other interesting things instead. We, the Tor research
community, really need better tools for reasoning about the interaction
between anonymity and performance.

In fact, there sure have been a lot of Tor path selection papers over
the past decade which each invent their own ad hoc analysis approach
for showing that their proposed change doesn't impact anonymity or
performance "too much". Is it time for a Systemization of Knowledge
paper on this area -- with the goal of coming up with best practices
that future papers can use to provide more convincing analysis?

--Roger
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170720115406</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-20 11:54:06-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

[Attachment #2 (multipart/signed)]


Hi Brandon,

There's a bunch of feedback in this thread.

Some of it involves relatively minor spec updates or clarifications.
Other parts involve solving complex issues, and might belong in
another spec (or a future version of the PT spec).

Can you let us know which feedback will make it into PT 2.0?

Thanks

Tim

&gt; On 21 Jun 2017, at 23:00, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 21 Jun 2017, at 16:20, Yawning Angel &lt;yawning@schwanenlied.me&gt; wrote:
&gt;&gt; 
&gt;&gt; The "2.0" spec still doesn't have any provisions for using AF_LOCAL
&gt;&gt; instead of the loopback interface, go figure.  It's not as if I bring
&gt;&gt; it up every time this topic comes up or anything right?
&gt; 
&gt; Th exact types of addr and port are not specified, so application
&gt; could pass:
&gt; unix:/var/run/tor/obfsocket
&gt; And still remain within the spec.
&gt; 
&gt; But to make this usage clear, I suggest we change:
&gt; &lt;addr:port&gt;
&gt; To:
&gt; &lt;addr&gt;[:&lt;port&gt;]
&gt; And define addr as either an IPv4, IPv6, hostname, file path, or some
&gt; other address understood by the application / proxy.
&gt; 
&gt; If we don't want to do that, please at least change it to:
&gt; &lt;addr&gt;:&lt;port&gt;

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZcJneAAoJEHQNnjkCUnKiHqQP+wSCeyiZcK12+9SMDdH8mknS
DJ9Jo2EejIcbhGXkh3/eMjln6Xp+w5eMRwBemhWnU15TeEigDIWauytL5/3Wg6RZ
Aza8S5rW0CiIdLbodEMQVGDjaEpSYIceMgbtEp4N/CGB3O3SaBLQnNFynL3Mar2P
HodR6qvyIE/+3xQ7IMw2PsF4Gogf5+8836BfQJAbRoQTpxnzvOXDDN369BLvN9Wj
TKDwlxplyIig3w+/omvBf4m8xL/2xCYY8TdIx5ZybcDMsxgzXRndp9M6pxiu5qE3
4LaYodxTmapIj5DbOfPH8nvQ31wtO69gXVNivZqjQJWoJP3o2I4YmOx9b2pzfqyc
8koWm7aG0XmCWHiPRHZTH/m+nOhaSwrgrxxbFsk1KAVlpvFwFZbl2Z+xnWcnZ+vs
EWXU4AgsIb/s8nL74bmn0h7wwis6cMk/G4l5WySJXJPejg0EYgILsdfaeEgIEKyN
HWAJguNL3Q4lzCCYs3DqLA93NMtiNJ4Ez9n1H3Bl0dDru9vIwwysnM1OSRne6jru
9wPwbM8WTV8IlCVuFbqpGNJjAf/8LwWH+u7IiQR23uxyLk+3cfXJH96N4JR69qhd
ohMKUm4xOmT+nvtmaKzMvcOyHe/QHhvf9QlIaDQDm9x9QMI02bbGp7BYbq3JkGGx
E5x69CF8j9ldIAAd6VTa
=M2Kg
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170724130719</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-24 13:07:19-0400</timestampReceived><subject>Re: [tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

This thread ended up covering a lot of details of Tor crypto.
And there are a lot of details! (I'm sorry this email is so long.)

I focused on the circuit digest hash, but I wanted to talk about circuit
crypto in general.

So I'm going to focus my reply on how upgrading circuit crypto has worked in
the past, using the example of TAP and ntor. And then we can think about how
we want it to work in future.

Tor was originally created with TAP as the circuit crypto protocol.
But it wasn't very good. So we added ntor circuit crypto to Tor.

From 0.2.4 in 2013 [0], clients used the ntor onion keys in relay descriptors,
after checking a consensus parameter. Then in 0.2.9 (3 years later) [0], we
required ntor for all relay descriptors and most client circuits.

We wanted to make all client circuits use ntor, but some parts of some hidden
service circuits were stuck with TAP (or similar):
* client to intro point circuits
* service to rendezvous point circuits, and
* client to hidden service "circuits".

This happened because the hidden service protocol only uses the relay details
from hidden service descriptors, INTRODUCE cells, and RENDEZVOUS cells, and
the protocol only had TAP onion keys (or similar).

(Clients can't use the ntor keys from the consensus, because there's no
guarantee that the client and service have the same consensus. And they can't
optionally use ntor from the consensus, because that can leaks the consensus
they have.)

We think it is ok for the final hop on some circuits to use TAP, because the
other hops use ntor. (We are more concerned about Tor2web and single onion
services, which use single-hop circuits. But there's still an outer TLS layer.)

We will finally stop using TAP when we stop using v2 hidden services. This could
happen when we stop supporting 0.2.9 or 0.3.3-ish around 2020 [0] (7 years later).
So it took a lot of time to upgrade circuit crypto, because if we had to create a
new hidden service protocol to do it.

Now we've seen how hard it was to get rid of TAP, let's talk future upgrades:

&gt; On 24 Jul 2017, at 00:00, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt; First of all, afaict, the hashing choice is not relevant to IP/RP/HSDir at
&gt; all. The IP only routes cells between two circuits based on the authentication
&gt; key it sees in the INTRODUCE1 cell that the client gets from the descriptor.
&gt; The RP routes cells based on a cookie and the HSDir stores descriptor based on
&gt; the blinded key it sees in the descriptor. If tomorrow we had to change to
&gt; SHA9000, they wouldn't care.

But the circuit crypto depends on the onion key in the hidden service descriptor
and cells (see above), so we can't just change it tomorrow. Do we want to hard
code a particular version of circuit crypto in the hidden service protocol?

(TAP for v2, ntor for v3)

Maybe this is ok, if the underlying hidden service crypto is still secure.

&gt; That being said, switching the hash algorithm is a problem between the client
&gt; and service.
&gt; 
&gt; The HS protocol version (prop224 introcuces v3) is bound to some crypto
&gt; choices. It is not designed to be extensible in terms of crypto primitives.
&gt; All of those are hardcoded and are part of the protocol: ed25519/curve25519
&gt; keys, AES-256 is stream encryption, SHAKE-256 our KDF and SHA3 for our hash
&gt; function.

The v3 client to service crypto seems like an OK choice to me.
(But I am not a cryptographer.)

But we still need to think about the ntor circuit crypto we're using in the
other parts of the protocol.

&gt; Negotiating cipher suites is a trap for all sorts of really bad issues (SSL is
&gt; the prime example). So then we have versionning, different version uses
&gt; different things (basically HS v2 and v3). And I think it is what you are
&gt; proposing.

The first time we upgraded circuit crypto, it took us 7 years to phase it out,
because we hard-coded it in the hidden service protocol. Are we ok with it
taking this long next time we upgrade circuit crypto?

If we want circuit crypto upgrades to be faster, are we ok with adding complexity
to the hidden service protocol? Are we ok with the risk of downgrade attacks?

If my original proposal is a bad idea, I'm happy to drop it.
But let's decide that knowing what happened last time.

&gt; Let's imagine a world where next year SHA3 is broken and thus replaced by SHA4
&gt; which means that we need to make changes to the HS protocol. In a nutshell,
&gt; we'll need to release a tor client and service that can use SHA4 in the HS
&gt; protocol.

Since we support LTS releases for 3 years, it would take us at least 3.5 years
to phase out old crypto protocols from the hidden service protocol. Or, we would
have to add a major new feature to a LTS release. Or we would have to kill off
some LTS features early.

The alternative is adding complex version negotiation to LTS releases in
advance, and *hoping* it supports the upgrades we want to make to the crypto.
That doesn't seem great, either.

&gt; I guess the question you are asking here is: can we do that without bumping
&gt; the HS protocol to v4? (Because bumping to v4, we hardcode SHA4 and job done).
&gt; And remember, the version of the service is in the onion address so the client
&gt; either know how to speak to it or doesn't.

I don't mind: a version bump is ok, but it takes time.

&gt; Now back to trying to switch to SHA4 within the v3 protocol. We either put a
&gt; field in the INTRO cell (for instance an EXTENSION) saying "oh I can speak
&gt; SHA3 and SHA4". But then you end up with the problem of "which one the client
&gt; uses in the INTRO cell?". We don't have protocol version negotiation so either
&gt; the client sends all possibilities (huge cell) or try SHA3 and if fails,
&gt; re-try with SHA4. Or client picks SHA4, tries the service and service can
&gt; speak it or not. This is kind of crummy, all sorts of reachability issues,
&gt; more load on the network and user will get hella confused on why there are
&gt; failures all of the sudden for this service it was happilly connecting to
&gt; before.

Yes, this is very complicated. Maybe we shouldn't allow crypto upgrades in v3
hidden services.

&gt; Second option, the service adds a hint somewhere in the descriptor saying "My
&gt; hash algorithm is SHA4". I strongly think the service should NOT provide a
&gt; choice because of the downgrade attack. And we must have a consensus param
&gt; that provides the minimum required (as you proposed) so malicious service
&gt; advertising SHA3 (that is broken in our example here) will get rejected by
&gt; legit clients.

But it looks like we've left room for some crypto upgrades in the v3 protocol.

v3 hidden service descriptors have "desc-auth-type", "create2-formats", and
ONION_KEY_TYPE fields. [1] [2] [3]

They also have "legacy-key", "legacy-key-cert", and AUTH_KEY_TYPE to allow the
use of old intro points. [4] [5]

So do we want crypto upgrades, or not?

(We also have extensible link specifiers and other extension fields. I think
this is ok, because it means we can add new kinds of addresses and other
non-crypto features.)

&gt; What this approach gives us here versus bumping the protocol version to v4?
&gt; The only thing I can see is for the service to be able to keep its onion
&gt; address intact which is kind of a big useful thing :P.
&gt; 
&gt; However, we end up with the problem of partition ... where some clients will
&gt; reach the service that has upgraded and some will fail until they upgrade.
&gt; Consensus param can help here that is we have a param that tells the service
&gt; what hash algorithm it must use.

So an alternative proposal is this:

Let's hard-code all the v3 hidden service protocol crypto, and remove (or
hard-code) the following fields:
* "desc-auth-type"
* "create2-formats"
* ONION_KEY_TYPE

That way we don't support version upgrades.
But maybe we make writing v4 hidden services easier by changing a few constants.

I'm not sure what to do about:
* "legacy-key"
* "legacy-key-cert"
* AUTH_KEY_TYPE

So do we want crypto upgrades on intro points, or not?
If so, how will we eventually phase them out, and prevent downgrade attacks?
(Do we need to phase them out?)

[0]: https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases
[1]: https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1041
[2]: https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1175
[3]: https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1573
[4]: https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1249
[5]: https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1349
     https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1476
     https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n1675

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZdfEHAAoJEHQNnjkCUnKim/cQAII0ze2+3cdS4wBB9G4dU9fL
6slIDZjNE/HxqUg5CMFMSojC9qLyoLDdTcGTtEjXf3+Zja/Arz091GvuZnv5PioN
2/74ypqPVvGYxrOpiz1evRjvyGEQjgnfMzRnuVn66XIfVpT738537kKEIS+IPf3Q
/Y3ljcFPZUaOHD+rYJ5nwtR/lHxqEFviulfGvU74xKK5xSrRJ9sGgPZHNKckuhSx
LxXfFs3M26y3nftoxhpMuUDRa60fLp3E7AYsZfFpy/2gc7gPbzlJf2vonfV/fqwE
fV204ahQIzvjhmsXDT7lF8SHk0Q81xB/2vMfCVBZpr/HpH5P9Ht3Gkib7JI0bzU9
0z1/Mfx5WIaJhWTvSAznysNOYKJh7KzZKqmmkKx5DT9R4flHT8k0lJg8MNvYAjnU
6WqDZV3V7WaQX8Eu0qOqBzbM1IAWA16YQvq/yPmwMTUVETW7n0RvghGnvbY+e3m9
98AjsPaNIOaMISAeM7kQy6BnGKnYMwnJft9hvdV9Hgg3n7G4Y9IPMRu0Dh1sAdd3
0QSxGbBdw+a+M5wqnBCJYzHi0Sc0IdTSb2M5f5qKEL8HMpy7CEJcKKC380+6mWbd
CAA2Pan5Z1dMsgc+aiY82QCL32DEl+T3zO4DWkw//jSMDNrAYoBPUW+zGy5adGxD
t4SN9ysWK9yap1KMKzvj
=LMie
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170725070014</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-25 07:00:14-0400</timestampReceived><subject>Re: [tor-dev] Need help on my new work related to TOR Project</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 25 Jul 2017, at 15:36, Nima Azizzadeh &lt;n.azizzadeh@gmail.com&gt; wrote:
&gt; 
&gt; Hello
&gt; My name is Nima Azizzadeh and I'm a second year of mastering Cyber Security major \
&gt; at University of Tehran, Iran. I am extremely interested in pursuing independent \
&gt; research. An extensive research experience will greatly help me consolidate my \
&gt; future career choice. 
&gt; Recently I'm interested in tor project vulnerabilities and I looked at some papers \
&gt; about it. This paper "The Effect of DNS on Tor's Anonymity, NDSS, February 2017" \
&gt; attracted a great deal of my attention. A lot of research has gone into improving \
&gt; the Tor network, but its use of DNS has received little attention. In this research \
&gt; project, they set out to learn how DNS can harm the anonymity of Tor users, and how \
&gt; adversaries can leverage the DNS protocol to deanonymize users. They studied (i) \
&gt; how exposed the DNS protocol is compared to web traffic, (ii) how Tor exit relays \
&gt; are configured to use DNS, (iii) how existing website fingerprinting attacks can be \
&gt; enhanced with DNS, and (iv) how effective these enhanced website fingerprinting \
&gt; attacks are at Internet-scale. 
&gt; Also, I found another project that I think can defend against these attacks to some \
&gt; degree. The project is T-DNS (Connection-Oriented DNS to Improve Privacy and \
&gt; Security - DNS over TCP and TLS). It combines TCP to smoothly support large \
&gt; payloads and mitigate spoofing and amplification for DoS. T-DNS uses \
&gt; transport-layer security (TLS) to provide privacy from users to their DNS resolvers \
&gt; and optionally to authoritative servers. 
&gt; I want to integrate T-DNS server proxy and client proxy with Tor project source \
&gt; code to add some security feature to Tor project. I also implement T-DNS server \
&gt; proxy and client proxy I just need to add this feature in Tor source code. \
&gt; Something like creating a built-in standalone T-DNS client proxy and server proxy \
&gt; in Tor relays, and encourage people to use them with Tor Exits (and other DNS \
&gt; clients and servers). 
&gt; As you have a lot of exprience on Tor project, I would be happy if you could help \
&gt; me on this or give me some suggestion to clarify the way for me. I look forward to \
&gt; hearing from you!

Hi Nima,

We would love to make Tor's DNS more secure.

Tor Exits use DNS from a lot of different providers.
The Tor network can't rely on just a few T-DNS servers.
That would make them a single point of failure.

So I think we need to fix the DNS protocol and upgrade
most DNS servers to make this work.

Or, we could create a standalone T-DNS client proxy and
server proxy, and encourage people to use them with Tor Exits
(and other DNS clients and servers). That would be a great
way to upgrade gradually.

Tim

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZdux/AAoJEHQNnjkCUnKiKWAQAJfAHy8D1bx3NZv2iXbAglyu
acrS+hoL1/inwDgW6tLKWIEEKDYZ8ffjyG/ibbMHRdEiKgDFXYXBjV0DBrVfY+zY
on+xCeY/b0pFn582HjyOvyENPcoBBhZLguMndeFk7owCIQcKQz5o1YnlwDeSOhDe
3CHDGDM4EU1O5DLziczMRq+9RLdP8Y9cyBkonoOSzP/+rk9zmBXRvf8GzYYLrMTo
68ITvCHZkEg6Z/xt6F3VGWc4hMEXswuxmnVcUd3UhcWo9n8oeYRyJNb4eCvWh2f/
eYzJY3a3D2teNIBau3tESSEesLJ6gykTeaqdw6xjljp2OcBouUb16hGSTcGTb1pc
krAFd16+eTXTrx3sTnAbnU1sKSqEuQGB9fqSxsNcaMvUEmlupcHunMMRpKZHWV2W
IhCmRLblybbcrlvgeB39/SwSoq01wqQJzBh42lPo4WYSBM1MV3m+H59+br8TrkX9
/WhcUg11JQOxZLYFS7/86yme9Xa3nczCJcHcbMFGgkwC/Z1q0oyYeDfwVTxZTwKt
64LRoSQFMEZvRHoELGBWbOcMKeiktZdW30H+8MUjTr4fRuVfutViCc2s+NSmnU7s
WWyTc88NTsLecpABzaqxCY782kueAqEsL42+VEQNCIebUnuTcolwIDT8QeSoGtlJ
AV8semhLk8ZnJuAhBNaD
=5pDQ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170601154308</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-06-01 15:43:08-0400</timestampReceived><subject>Re: [tor-dev] Safe post-quantum RSA?  So says DJB and others</subject><body>

&gt; Date: Thu, 1 Jun 2017 14:03:46 +0000
&gt; From: Hugo Maxwell Connery &lt;hmco@env.dtu.dk&gt;
&gt; 
&gt; Interesting (and surprising):
&gt; 
&gt; https://eprint.iacr.org/2017/351.pdf

This joke paper is an elaborate exercise in burying the lede.

   Abstract: This paper proposes RSA parameters for which (1) key
   generation, encryption, decryption, signing, and verification are
   feasible on today's computers while (2) all known attacks are
   infeasible, even assuming highly scalable quantum computers.

   [...]

   Concrete parameters and initial implementation (buried on p. 12):
   This section looks at performance in more detail, and in particular
   reports successful generation of a 1-terabyte post-quantum RSA key
   built from 4096-bit primes.

The authors don't actually report successful cryptography operations
with such a key -- only successful generation of the key, after four
days.  The largest key they report a successful public-key operation
with was 256 GB; the largest for a private-key operation, 32 GB.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170605161756</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-06-05 16:17:56-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

&gt; You asked your bridge for its server descriptor and it gave it to you.
&gt; 
&gt; Did you try:
&gt; print controller.get_extrainfo_descriptors("8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE")
&gt;  
&gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.DescriptorDownloader.get_extrainfo_descriptors
&gt; 

Hi teor, minor correction: you link to the DescriptorDownloader's method
but cite it as being part of Controller. This is why David didn't find it
later. The Controller can fetch some descriptor types. For instance...

https://stem.torproject.org/api/control.html#stem.control.Controller.get_server_descriptor
 https://stem.torproject.org/tutorials/mirror_mirror_on_the_wall.html#can-i-get-descriptors-from-the-tor-process


However, the Controller doesn't provide extrainfo descriptors. This is
for a couple reasons...

1. The control protocol only allows it to be retrieved by the descriptor
   digest rather than relay fingerprint, which is a pita...

   https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n562

2. This isn't what you want anyway. Fetching decriptors from the tor
   process only gets you the cached descriptors which isn't what folks
   generally want. So you're right that the DescriptorDownloader is
   the way to go.

&gt; I don't know how to find a server that caches *all* bridge extra infos.
&gt; Maybe you should try running these queries against the bridge authority?

Bridge descriptors are not public like normal descriptors. To work of
course the tor client can retrieve it if you know the bridge address
but beyond that I think the only thing available is the sanitized
descriptors from CollecTor...

https://collector.torproject.org/recent/bridge-descriptors/

&gt; I think the documentation at:
&gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query
&gt; is out of date: as far as I know, newer stem versions try fallback
&gt; directories rather than authorities.

Unfortunately it doesn't. I had to revert that because they lack
extrainfo docs...

https://gitweb.torproject.org/stem.git/commit/?id=758f632

&gt; Thanks again for your suggestions. Passing endpoints= doesn't seem to do
&gt; anything.
&gt; &gt; &gt; &gt; import stem.descriptor.remote
&gt; &gt; &gt; &gt; BIFROEST = ("37.218.247.217", 80)
&gt; &gt; &gt; &gt; print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4", \
&gt; &gt; &gt; &gt; endpoints=(BIFROEST,)))
&gt; []

For what it's worth stem has authority information so this can also be
done with...

&gt; &gt; &gt; import stem.descriptor.remote
&gt; &gt; &gt; bifroest = stem.descriptor.remote.get_authorities()['Bifroest']
&gt; &gt; &gt; print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4", \
&gt; &gt; &gt; endpoints=((bifroest.address, bifroest.dir_port),)))

&gt; It also doesn't work when trying the fingerprint of another default
&gt; bridge, or of one I just got from bridge.torproject.org.

Alas, this is getting into areas I'm not too familiar with. To prevent
enumaration
I'm sure bridges are handled specially.

&gt; Atagar might be able to help with the stem side of things.

Happy to help if there's any other stem questions.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170607120331</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-06-07 12:03:31-0400</timestampReceived><subject>Re: [tor-dev] [release] metrics-lib/DescripTor 1.8.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 07.06.17 12:31, Alan S wrote:
&gt; Remove me from this list!! I get emails from here and I never signed up!

There's a link at the bottom of each message that you can use to
unsubscribe.


&gt; On Jun 7, 2017 4:28 AM, "iwakeh" &lt;iwakeh@torproject.org&gt; wrote:
&gt; 
&gt; Hi there!
&gt; 
&gt; The first June release of metrics-lib/DescripTor is available:
&gt; 
&gt;      https://dist.torproject.org/descriptor/1.8.0/
&gt; 
&gt; The theme of this release is to prepare more efficient descriptor
&gt; processing and some of the non-backwards compatible changes to come
&gt; in version 2.0.0.
&gt; 
&gt; Main changes:
&gt; Raw descriptor contents are now stored with less overhead in-memory;
&gt; parsing methods were streamlined and the class structure of the
&gt; implementation is improved.
&gt; Of course, all bugs surfacing during this work were removed,
&gt; for details see [1].
&gt; 
&gt; Please direct comments and questions to the metrics-team mailing list [2].
&gt; 
&gt; Cheers,
&gt; iwakeh
&gt; 
&gt; [1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=
&gt; 086b046057867de7a2606f77793ef23e8a8fb268
&gt; [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
&gt; 
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170721140233</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-21 14:02:33-0400</timestampReceived><subject>[tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

At the moment, Tor uses SHA1 for the running digests of circuit cell
payloads.

Some of the prop224 code seems to use SHA256 for the digests for
client to service rendezvous circuits. But that's not in the spec yet
(see #22995 at [0]).

How and when do we plan to move away from using SHA1 in Tor circuits?

For non-onion service circuits, this would mean:
* implementing support for SHA256 [1] circuit digests
* adding a Relay protocol version 3
* teaching clients to use SHA256 digests with relays with Relay
  protocol &gt;= 3

For onion service circuits, it's more complicated, because the
following circuit types can't use relay versions from the consensus:
* client to intro
* service to rend
* client to service
(Using relay versions from the consensus leaks which consensus clients
and services have, which reduces the anonymity set.)

Here are the upgrade mechanisms in prop224 at the moment, for both
circuit protocol versions and any necessary handshake material:

client to intro:
* the protocol version could be in a proto line to each intro point,
  but this isn't implemented yet
* the handshake data can be in the link-specifiers (I think?)

service to rend
* the protocol version could be in the EXT_FIELD in the INTRODUCE
  cell, but this isn't implemented yet
* the handshake data can be in the link-specifiers (I think?)

client to service:
* the protocol version is in the create2-formats in the descriptor
* the handshake data is in HANDSHAKE_INFO in the RENDEZVOUS cells
* SHA256 digests are implemented, but not documented in prop224 [0]

I suggest we make the following changes to prop224 to make this happen:

Protocol version information:
* add the relevant relay protocol versions to the intro point section
  of the descriptor
* put the relevant relay protocol versions in an EXT_FIELD in the
  INTRODUCE cell
* check create2-formats contains all the version info we will need to
  change the client to service circuit protocol version

Downgrade resistance:
* teach clients and services to use the highest common protocol between
  client/service and relay, excluding protocols that are below the
  minimum required protocol versions
* work out how we will tell clients to no longer accept an old
  create2-formats line from a service

[0]: https://trac.torproject.org/projects/tor/ticket/22995
[1]: By SHA256, I mean "a good secure hash at the time"

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZcgl5AAoJEHQNnjkCUnKiaL0P/RHHgZr9AEwws5q5FKdlAqwT
3M4JEl/RXAebfbfXwdmviYofzDAriAcAh/+lcOG2+hhGtJXrubWtnYyV25LPYXAH
NwZojDJ3bMWqkDaWUQIm8uiQ4gG8HKdQzKRwaNzqC9xvPq2em3LpjC/mcbWp3ebD
x/onFd4sD3XZYe3HoxGBPH2kaL9PcyTEp6vRbZURuyDz6Lbq2OLjcXnlqZXQaGdS
+Pjq5JPD5AuMX7fG5lSdB4rciM0DMpP7dArfxbpheR+4rZVaZb8K6Tl71h7SHxl/
Z0AQcIDmcsT6GyJx2jQ+rKjIm6XTbXAsz/joyyyY8/4M+XQah/PMW3ign3Et+a0F
5krUuRa46o6uot0Il0nYAaVB4OamdjCO7pSOgk9F7iSHU/OsQwEwNyf2t6Br3TRK
0Y5827OuNNu/6KBTg/zH0hIxBblMuylB04bxDsjL2x+pGEWMlF7yN5RHUcCVFxCg
igHG7+DtsRjWnH4yQrEDNoFehmC8FTaqVJnTXr9H1dyCKc3RWCc2T+VYGFWuITWI
axTv+Zzjnrmp1KucplgeWvTwOZMsxuBzq1f17w39tl8hdNYZwaAX7fzL8NX7ueQZ
gOuNARi9KAmDtsLpHag8pYjiyyK4LLntS48I49r/EvoUGgeirtNqLiyBFUGytlmx
4sKaDSn2lOHGXwa5xaLe
=eiB3
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170725054818</emailId><senderName>Nima Azizzadeh</senderName><senderEmail>n.azizzadeh@gmail.com</senderEmail><timestampReceived>2017-07-25 05:48:18-0400</timestampReceived><subject>[tor-dev] Need help on my new work related to TOR Project</subject><body>

[Attachment #2 (multipart/alternative)]


Hello
My name is Nima Azizzadeh and I'm a second year of mastering Cyber Security
major at University of Tehran, Iran. I am extremely interested in pursuing
independent research. An extensive research experience will greatly help me
consolidate my future career choice.

Recently I'm interested in tor project vulnerabilities and I looked at some
papers about it. This paper "The Effect of DNS on Tor's Anonymity, NDSS,
February 2017" attracted a great deal of my attention. A lot of research
has gone into improving the Tor network, but its use of DNS has received
little attention. In this research project, they set out to learn how DNS
can harm the anonymity of Tor users, and how adversaries can leverage the
DNS protocol to deanonymize users. They studied (i) how exposed the DNS
protocol is compared to web traffic, (ii) how Tor exit relays are
configured to use DNS, (iii) how existing website fingerprinting attacks
can be enhanced with DNS, and (iv) how effective these enhanced website
fingerprinting attacks are at Internet-scale.

Also, I found another project that I think can defend against these attacks
to some degree. The project is T-DNS (Connection-Oriented DNS to Improve
Privacy and Security - DNS over TCP and TLS). It combines TCP to smoothly
support large payloads and mitigate spoofing and amplification for DoS.
T-DNS uses transport-layer security (TLS) to provide privacy from users to
their DNS resolvers and optionally to authoritative servers.

I want to integrate T-DNS server proxy and client proxy with Tor project
source code to add some security feature to Tor project. I also implement
T-DNS server proxy and client proxy I just need to add this feature in Tor
source code. Something like creating a built-in standalone T-DNS client
proxy and server proxy in Tor relays, and encourage people to use them with
Tor Exits (and other DNS clients and servers).

As you have a lot of exprience on Tor project, I would be happy if you
could help me on this or give me some suggestion to clarify the way for me.
I look forward to hearing from you!

Best Regards,
Nima Azizzadeh

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt; My name is Nima Azizzadeh and I'm a second year of mastering \
Cyber  Security major at University of Tehran, Iran. I am extremely interested 
in pursuing independent research. An extensive research experience will 
greatly help me consolidate my future career choice.&lt;br&gt;
&lt;br&gt;
Recently I'm interested in tor project vulnerabilities and I looked at some \
papers about it. This paper &lt;span \
class="m_-8647648438611243785gmail-m_-8242794009231925618m_-3815099965130621794gmail-il"&gt;"The&lt;/span&gt; \
&lt;span class="m_-8647648438611243785gmail-m_-8242794009231925618m_-3815099965130621794gmail-il"&gt;Effect&lt;/span&gt; \
of &lt;span class="m_-8647648438611243785gmail-m_-8242794009231925618m_-3815099965130621794gmail-il"&gt;DNS&lt;/span&gt;
  on Tor's Anonymity, NDSS, February 2017" attracted a great deal of my 
attention. A lot of research has gone into improving the Tor network, 
but its use of DNS has received little attention. In this research 
project, they set out to learn how DNS can harm the anonymity of Tor 
users, and how adversaries can leverage the DNS protocol to deanonymize 
users. They studied (i) how exposed the DNS protocol is compared to web 
traffic, (ii) how Tor exit relays are configured to use DNS, (iii) how 
existing website fingerprinting attacks can be enhanced with DNS, and 
(iv) how effective these enhanced website fingerprinting attacks are at 
Internet-scale. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Also, I found another project that I 
think can defend against these attacks to some degree. The project is 
T-DNS (Connection-Oriented DNS to Improve Privacy and Security - DNS 
over TCP and TLS). It combines TCP to smoothly support large payloads 
and mitigate spoofing and amplification for DoS. T-DNS uses 
transport-layer security (TLS) to provide privacy from users to their 
DNS resolvers and optionally to authoritative servers. &lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;I
 want to integrate T-DNS server proxy and client proxy with Tor project 
source code to add some security feature to Tor project. I also 
implement T-DNS server proxy and client proxy I just need to add this 
feature in Tor source code. Something like creating a built-in standalone T-DNS \
client proxy and server proxy in Tor relays, and encourage people to use them with \
Tor Exits (and other DNS clients and servers).&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt; As you \
have a lot of exprience on Tor project, I would be happy if you  could help me on \
this or give me some suggestion to clarify the way for  me. I look forward to hearing \
from you!&lt;br&gt; &lt;br&gt;
Best Regards,&lt;br&gt;Nima Azizzadeh&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170601222054</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-01 22:20:54-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

On Wed, May 24, 2017 at 09:31:45PM -0700, David Fifield wrote:
&gt; On Sat, May 06, 2017 at 09:25:11AM -0700, David Fifield wrote:
&gt; &gt; Okay, thanks. It still doesn't fully make sense to me, because while
&gt; &gt; some of the default bridges are in Atlas, not all of them are (for
&gt; &gt; example the two from https://bugs.torproject.org/21917). I don't think
&gt; &gt; it's possible that they haven't gotten *any* client traffic.
&gt; &gt; 
&gt; &gt; I wonder if it has something to do with the tor version number?
&gt; 
&gt; I checked all the other default bridges and all of them but 2 are
&gt; publishing statistics:
&gt; C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4  cymrubridge31
&gt; 0BAC39417268B96B9F514E7F63FA6FBA1A788955  cymrubridge33
&gt; I will contact the operators and ask them to try setting
&gt; "AssumeReachable 1".

The operator of these bridges set "AssumeReachable 1" and the bridges
still are not publishing statistics ("No Tor relays or bridges matched
your query :("):
https://atlas.torproject.org/#details/C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4
https://atlas.torproject.org/#details/0BAC39417268B96B9F514E7F63FA6FBA1A788955

According to the operator, the bridges are running version 0.2.9.10, so
my hypothesis about it having something to do with old version numbers
is wrong.

Roger suspects that the reason the bridges haven't reported any
statistics is because they haven't received any connections. That
possibility seems unlikely to me, because they are default bridges
shipping in Tor Browser, and additionally I have an hourly test running
that makes an obfs4 connection and builds a circuit.

I tried downloading one of the bridge's bridge-extra-info descriptors
(which would contain information about how many connections it has had),
but I can't quite make it work. Using this torrc file:
	UseMicroDescriptors 0
	DownloadExtraInfo 1
	FetchUselessDescriptors 1
	ClientTransportPlugin obfs4 exec /usr/bin/obfs4proxy
	ControlPort 9051
	CookieAuthentication 1
	UseBridges 1
	Bridge obfs4 38.229.1.78:80 C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4 \
cert=Hmyfd2ev46gGY7NoVxA9ngrPF2zCZtzskRTzoWXbxNkzeVnGFPWmrTtILRyqCTjHR+s9dg \
iat-mode=1 And this Stem script:
	from stem.control import Controller
	with Controller.from_port(port = 9051) as controller:
	    controller.authenticate()
	    print controller.get_server_descriptor("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
 I can get the bridge-server-descriptor, but not the bridge-extra-info.
Here are some lines from bridge-server-descriptor:
	platform Tor 0.2.9.10 on Linux
	proto Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3 HSRend=1-2 Link=1-4 LinkAuth=1 \
Microdesc=1-2 Relay=1-2  published 2017-06-01 21:19:10
	fingerprint C8CB DB24 64FC 9804 A695 3143 7BCF 2BE3 1FDD 2EE4
	uptime 613949
	bandwidth 1073741824 1073741824 5628404
	extra-info-digest 8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE \
398ZHFBxUpTRfLxv+pSMY3BGMUYlzogXMG40dhjPgnA

(Furthermore, with the torrc shown above, tor doesn't save *any*
extra-info descriptors, despite the presence of "DownloadExtraInfo 1"
and "FetchUselessDescriptors 1". The datadir contains cached-certs,
cached-consensus, and cached-descriptors, but no cached-extrainfo. Only
after I change "UseBridges 1" to "UseBridges 0" does the
cached-extrainfo file appear--but then of course it doesn't contain any
information on bridges.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605043700</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-05 04:37:00-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 2 Jun 2017, at 08:20, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; On Wed, May 24, 2017 at 09:31:45PM -0700, David Fifield wrote:
&gt; &gt; On Sat, May 06, 2017 at 09:25:11AM -0700, David Fifield wrote:
&gt; &gt; &gt; Okay, thanks. It still doesn't fully make sense to me, because while
&gt; &gt; &gt; some of the default bridges are in Atlas, not all of them are (for
&gt; &gt; &gt; example the two from https://bugs.torproject.org/21917). I don't think
&gt; &gt; &gt; it's possible that they haven't gotten *any* client traffic.
&gt; &gt; &gt; 
&gt; &gt; &gt; I wonder if it has something to do with the tor version number?
&gt; &gt; 
&gt; &gt; I checked all the other default bridges and all of them but 2 are
&gt; &gt; publishing statistics:
&gt; &gt; C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4  cymrubridge31
&gt; &gt; 0BAC39417268B96B9F514E7F63FA6FBA1A788955  cymrubridge33
&gt; &gt; I will contact the operators and ask them to try setting
&gt; &gt; "AssumeReachable 1".
&gt; 
&gt; The operator of these bridges set "AssumeReachable 1" and the bridges
&gt; still are not publishing statistics ("No Tor relays or bridges matched
&gt; your query :("):
&gt; https://atlas.torproject.org/#details/C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4
&gt; https://atlas.torproject.org/#details/0BAC39417268B96B9F514E7F63FA6FBA1A788955
&gt; 
&gt; According to the operator, the bridges are running version 0.2.9.10, so
&gt; my hypothesis about it having something to do with old version numbers
&gt; is wrong.
&gt; 
&gt; ...
&gt; 
&gt; I tried downloading one of the bridge's bridge-extra-info descriptors
&gt; (which would contain information about how many connections it has had),
&gt; but I can't quite make it work. Using this torrc file:
&gt; ...
&gt; 	DownloadExtraInfo 1
&gt; 	FetchUselessDescriptors 1

These options only make tor clients fetch relay extra info descriptors.

But that's not really clear in the man page:
https://www.torproject.org/docs/tor-manual.html.en

I logged this bug so we clarify that:
https://trac.torproject.org/projects/tor/ticket/22491

&gt; ...
&gt; And this Stem script:
&gt; 	from stem.control import Controller
&gt; 	with Controller.from_port(port = 9051) as controller:
&gt; 	    controller.authenticate()
&gt; 	    print controller.get_server_descriptor("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
&gt; 
...
&gt; I can get the bridge-server-descriptor, but not the bridge-extra-info.
&gt; Here are some lines from bridge-server-descriptor:
&gt; 	platform Tor 0.2.9.10 on Linux
&gt; 	proto Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3 HSRend=1-2 Link=1-4 \
&gt; LinkAuth=1 Microdesc=1-2 Relay=1-2  published 2017-06-01 21:19:10
&gt; 	fingerprint C8CB DB24 64FC 9804 A695 3143 7BCF 2BE3 1FDD 2EE4
&gt; 	uptime 613949
&gt; 	bandwidth 1073741824 1073741824 5628404
&gt; 	extra-info-digest 8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE \
&gt; 398ZHFBxUpTRfLxv+pSMY3BGMUYlzogXMG40dhjPgnA

You asked your bridge for its server descriptor and it gave it to you.

Did you try:
             print controller.get_extrainfo_descriptors("8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE")


https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.DescriptorDownloader.get_extrainfo_descriptors


Since your bridge knows its own extra info descriptor, it should serve it to you.

I don't know how to find a server that caches *all* bridge extra infos.
Maybe you should try running these queries against the bridge authority?

(How does OnionOO do it?)

&gt; (Furthermore, with the torrc shown above, tor doesn't save *any*
&gt; extra-info descriptors, despite the presence of "DownloadExtraInfo 1"
&gt; and "FetchUselessDescriptors 1".

This is because your bridge is your directory guard.

If you want to fetch relay extra infos through your bridge, you need to
configure it to download and serve relay extra infos. I'm not sure how to do
that (maybe DirCache 1?), so I opened this ticket:
https://trac.torproject.org/projects/tor/ticket/22492

&gt; The datadir contains cached-certs,
&gt; cached-consensus, and cached-descriptors, but no cached-extrainfo. Only
&gt; after I change "UseBridges 1" to "UseBridges 0" does the
&gt; cached-extrainfo file appear--but then of course it doesn't contain any
&gt; information on bridges.)

That's because your client selects a directory mirror that caches extra
infos for relays.

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZNN/sAAoJEHQNnjkCUnKi/E8QAKInrrlDsesc8ABTCco3+CB/
uE7MbgrRjDzL1tc+6oghXFSfmWmIQJoIc0hvxofLwcTf8j/zE7OXvTh2XmS4XqyM
LpkPkzeXNPnBNy+QN0+WeQ0yut5NMkxawlzILOQpAxPHJ/19p/9nnQiE6DmAecxE
YLWt3lwJGp5ixp7To3svJ6UFCTWR/yk8T5BfvmszppD/3XBW1kKNcMLNnEfRmLSM
znKbnaLSWDD0Vx7tmbwZvT5Ri9M2Qw/KHiy3P8GUnLrNkf5+aE+W7iSNzG1hK6T6
L+BSZqKs97Au+r8Wp7LYdx2dS+N6KalbwL0cPh+ku+f1Cktzc8Nj1rZHDP+Xj6Dk
5vonzFFppx1zGUTXBdslYTCX7JuY+sH2C8+wjw4cnsB7w/S4rvdoXZqMvfPAssZ4
waoa0DrKvsUlhZgtyRUQDAmQiNLUQxsaBdkyyIX5Fw7tndrPDmaWvRshZjXCRbuE
rr58lWCjEbrxUABXOPsIPHmEi7vECn0K2Wz0o3exujIyfgjmtCdaSgjIlKFlFhB/
xysHXmm3MSD/oCnQOGMQZPekfYr/3xfig2SB31Ma2s7hkX/OTHbAoOSwlrCHxO2D
Osz+9MRhvhYxDKM0IIb+phoiGR0qsgPqqSfPqF1PqnkvjB3J+32O829K64i2YIvj
Lhfq6OkuOkMokZuwERNh
=e9LK
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170607083112</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-06-07 08:31:12-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib/DescripTor 1.8.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

The first June release of metrics-lib/DescripTor is available:

     https://dist.torproject.org/descriptor/1.8.0/

The theme of this release is to prepare more efficient descriptor
processing and some of the non-backwards compatible changes to come
in version 2.0.0.

Main changes:
Raw descriptor contents are now stored with less overhead in-memory;
parsing methods were streamlined and the class structure of the 
implementation is improved.
Of course, all bugs surfacing during this work were removed,
for details see [1].

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=086b046057867de7a2606f77793ef23e8a8fb268
 [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZN7m+AAoJEPeEx9Sa/gviTmYP/Amnhqp0YaH42mdqFxLjMTFx
D03g6cRqcG/qUEp1r9cakk4RMFpL5RQB1KH1VdBpq/Ffatt+wQ1m2Wxw6a6ikh67
TaZ5rU88r19Od/jE09zq67j8slBpUEsYJAzzH6GgJ8g/OpEGkbo7XNjFlLywyKSY
EkyLLR7fvei20MDtWCndhvkgj2CMVs5FHfBZAhC5ApBZD1fv6hRCzOitM1awoxs/
+/nIcd9U+m2dAUClCMFZHf+elW1rR1nq96oEIqLRRSaXaJWTl8+UauzTv088crK+
+4y/8/Mwt0UrnmAltkk1i/6q4baL3c2IcmL0NnZht8aGgZim4ukc9lih6Mk+EJME
USaoGIxKKZd49vmfcbL2MNgNPRFZN/8wymLOqSabqEMIeh9Mdljt3nZbMboCQ+jQ
1W0vN8l2dGYhA3DNNmEyRvf78zjYFZeYqAw6TQ2NroKVsUBvBwddTGM4wn3Z47Qo
CxdICiPIyI56vAI9n8HX4DIH6UAjRure7o600G+Tc8u4WJKGf5Fa7izPHN5z+yVH
u36hesVWABfU/IlKDsbTTa8FnHFyeW0O4sk7W8mhj1ntqVk1TtvdAmOyN3ICtURw
vE3jtHzYn3r95nRRNIGy93+J9+bcClyNKfsi9rQ7WK7YANK55dICQIN1ZNszXMMz
ftSnzHLpnJA7ffC+2xBC
=KmDm
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170610074133</emailId><senderName>Pushkar Pathak</senderName><senderEmail>pushkarpathak21@gmail.com</senderEmail><timestampReceived>2017-06-10 07:41:33-0400</timestampReceived><subject>[tor-dev] [GSoC17] Ahmia status update #1</subject><body>

[Attachment #2 (multipart/alternative)]


Hi everyone,

This is the first status update of my work an ahmia.fi.

I spent the first week of 'coding period' working on a couple of things.

## Automating blacklisting of onions containing child abuse content.
     I implemented an automation process which runs once a week and crawls
onions having child abuse content from uncensored wiki and bans it from the
search results [1].

## I have been working on the Add page to save added onions on a database
and update the elasticsearch servers on a daily basis [2].


During the next two weeks I plan to complete the work left on Add page and
replace Polipo with Torsocks5 proxy in ahmia-crawler.

That's it for this week,
Have a nice day.

Pushkar Pathak

[1] https://github.com/ahmia/ahmia-index/pull/3
[2] https://github.com/mdhash/ahmia-site

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi everyone,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This is the first status update of my \
work an &lt;a href="http://ahmia.fi"&gt;ahmia.fi&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I spent the \
first week of 'coding period' working on a couple of \
things.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;## Automating blacklisting of onions containing \
child abuse content.&lt;/div&gt;&lt;div&gt;        I implemented an automation process which runs \
once a week and crawls onions having child abuse content from uncensored wiki and \
bans it from the search results [1].&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;## I have been working \
on the Add page to save added onions on a database and update the elasticsearch \
servers on a daily basis [2].&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;During the next \
two weeks I plan to complete the work left on Add page and replace Polipo with \
Torsocks5 proxy in ahmia-crawler.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's it for this \
week,&lt;/div&gt;&lt;div&gt;Have a nice day.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Pushkar \
Pathak&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1]  &lt;a \
href="https://github.com/ahmia/ahmia-index/pull/3"&gt;https://github.com/ahmia/ahmia-index/pull/3&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] \
&lt;a href="https://github.com/mdhash/ahmia-site"&gt;https://github.com/mdhash/ahmia-site&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170608153640</emailId><senderName>Jude Nelson</senderName><senderEmail>jude@blockstack.com</senderEmail><timestampReceived>2017-06-08 15:36:40-0400</timestampReceived><subject>[tor-dev] .onion name resolution with Blockstack</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I have written a PoC for using Blockstack names to resolve hidden
services.  Blockstack is a portable decentralized naming system that
currently runs on top of the Bitcoin blockchain.  Similar to systems like
Namecoin, each Blockstack node retains a 100% replica of all name state,
including mappings between globally-unique human-readable Blockstack names
and the .onion addresses they resolve to.

The code and tutorial is hosted here: https://github.com/
jcnelson/blockstack-tor.

It works by using the Python stem package to rewrite the target address of
a stream from a Blockstack name to a .onion address (similar to how Jesse
Victors' OnioNS system works).  We plan to add support to the stdin/stdout
protocol in Prop279 as well.

Best,
Jude Nelson
-- 

*JUDE NELSON*   *ENGINEERING PARTNER  @BlockstackLabs*

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have written a PoC for using Blockstack \
names to resolve hidden services.   Blockstack is a portable decentralized naming \
system that currently runs on top of the Bitcoin blockchain.   Similar to systems \
like Namecoin, each Blockstack node retains a 100% replica of all name state, \
including mappings between globally-unique human-readable Blockstack names and the \
.onion addresses they resolve to.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The code and tutorial is \
hosted here:  &lt;a href="https://github.com/jcnelson/blockstack-tor" \
target="_blank"&gt;https://github.com/&lt;wbr&gt;jcnelson/blockstack-&lt;span \
class="gmail-il"&gt;tor&lt;/span&gt;&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It works by using the \
Python stem package to rewrite the target address of a stream from a Blockstack name \
to a .onion address (similar to how Jesse Victors' OnioNS system works).   We \
plan to add support to the stdin/stdout protocol in Prop279 as \
well.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:12.8px"&gt;Jude \
Nelson&lt;/span&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;p \
style="color:rgb(136,136,136);font-size:small;margin:0px"&gt;&lt;font color="#999999" \
face="arial, helvetica, sans-serif" size="1"&gt;&lt;b&gt;JUDE NELSON&lt;/b&gt;&lt;/font&gt;&lt;font size="1" \
face="arial, helvetica, sans-serif"&gt;&lt;font color="#999999"&gt;     &lt;/font&gt;&lt;i \
style="color:rgb(153,153,153)"&gt;ENGINEERING PARTNER   \
@BlockstackLabs&lt;/i&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170612220300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2017-06-12 22:03:00-0400</timestampReceived><subject>[tor-dev] onionoo.tpo stuck at 2017-06-12 12:00?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

just wanted to let you know that the delta between

relays_published and current time is unusually high.


https://onionoo.torproject.org/details?limit=0

{"version":"4.0",
"relays_published":"2017-06-12 12:00:00",






-- 
https://mastodon.social/@nusenu
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170615174959</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-06-15 17:49:59-0400</timestampReceived><subject>[tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

[Attachment #2 (multipart/signed)]


Hello all!

I have made a brief post on our blog to announce an exciting intership
opportunity we have available!

https://blog.torproject.org/blog/summer-2017-internship-create-bridge-bandwidth-scanner

Best,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170616180853</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-06-16 18:08:53-0400</timestampReceived><subject>[tor-dev] Are we planning to use the "package" mechanism?</subject><body>

With proposal 227 in 0.2.6.3-alpha, we added a way for authorities to
vote on e.g. the latest versions of the torbrowser package.

It appears we aren't actually using that, though.  Are we planning to
use it in the future?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170616181557</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-06-16 18:15:57-0400</timestampReceived><subject>Re: [tor-dev] Are we planning to use the "package" mechanism?</subject><body>

On Fri, Jun 16, 2017 at 02:08:53PM -0400, Nick Mathewson wrote:
&gt; With proposal 227 in 0.2.6.3-alpha, we added a way for authorities to
&gt; vote on e.g. the latest versions of the torbrowser package.
&gt; 
&gt; It appears we aren't actually using that, though.  Are we planning to
&gt; use it in the future?

Last I checked, the authority operators were uncomfortable with the
slippery slope of "everybody who has some sort of package sends us their
filename and checksums", because then every Tor client and relay fetches
that text every hour forever, and we could imagine that blob of text
growing out of hand.

That said, having the directory authorities vote about a checksum
of a file, and that file contains all the things, and somebody else
coordinates what goes in that file, how to handle name spaces in it,
etc, sounds like it could be totally doable.

That said, from the directory authority perspective, we would want to
automate the process of voting about that file -- not have the authority
operators manually check the file and change the sha256 every time
somebody updates it.

For example, we could wget the file and then put the checksum into our
votes, thus giving some sort of primitive perspective-access-network
style robustness.

I don't know what this approach would do to the security assumptions
from that proposal though.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170619114800</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2017-06-19 11:48:00-0400</timestampReceived><subject>Re: [tor-dev] Are we planning to use the "package" mechanism?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Nick Mathewson:
&gt; With proposal 227 in 0.2.6.3-alpha, we added a way for authorities to
&gt; vote on e.g. the latest versions of the torbrowser package.
&gt;=20
&gt; It appears we aren't actually using that, though.  Are we planning to
&gt; use it in the future?

It might be a candidate for update hardening, e.g. in the Tor Browser
case. Note, though, that there are a bunch of issues with the Tor
Browser side of the proposal
(https://trac.torproject.org/projects/tor/ticket/14676#comment:1). We'd
need to solve those first before starting any implementation. I guess
this could be a nice item for a funding proposal if we think that's the
way to do the update hardening.

Georg



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170615210754</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-15 21:07:54-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 16 Jun 2017, at 03:49, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; 
&gt; Hello all!
&gt; 
&gt; I have made a brief post on our blog to announce an exciting intership
&gt; opportunity we have available!
&gt; 
&gt; https://blog.torproject.org/blog/summer-2017-internship-create-bridge-bandwidth-scanner

stem also does circuit construction via the control port, so the
intern can avoid doing anything twisted... if they want.

There's even TorCtl, but it's old and unmaintained.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZQvcqAAoJEHQNnjkCUnKiolkP/3NBhZNxh0/vuJSAvHKiU7Y3
XVY6RUMSq9DdEgMbYuq6PrHn+f4pXVQR/DzlpZ5X8k24v51/6622xqyTFCjc1VSE
OT363Us5Fwp0lsXGxc2Wl/aHlvvNPZdWFMg8Pj3S62WFQMG8q4KYsSTM1og6D7Uk
NxumMUce3mELmVJskGsWYTfdZJY17Gvh8i0+OLdvIPst9oBCFtGFIV3vYhPUDVi/
5NBxSumYsCOHE+7bjVvavTR6EfkKzjd/J5CLu6Fc2tUlwGSLGb1TKEu4B/k6kORc
0QWX++ky6MKKiEP2KYlZJyQN3K/n994bCRDzqcTfVh+P0/DpT3DU+ybY7/eisF5z
/ltmzRw5CRakxqwrj0mjxpTGwsQXmoCj7d51Fj+vXfAtG0qRv6KxmFcWvmu7UCoR
AwAzhiU39HlCcUQM2859PEY+yX9oUWxe+7FXsFOHZRoy3KRi27eLbe1RJ9zBYfYj
gyuQu/O2Zy5LNDCymTQtbRL5rnrEKEmB4VjxMa1dX1S4b3Y1cjUDITixTgI4HOer
Ur0B/lU4cEiPDFMqzkn05yGmP6PQ3/CbemOtYW9gg4ZCw/WvdWR+J0U0DaeVxegz
dCkAicOm2OZSsZ765ImpH80MQOzKwWxKz+wo41McxaMoZ2hrikIwWTpa7Gha2QXf
X/AlSrUCNrv9BFpY5Pd3
=xTuI
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170615213512</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-06-15 21:35:12-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

Hi Isis. For what it's worth if it turns out to be based on Stem I'd
be delighted to help mentor and/or do code reviews.

Also, I agree with Tim. The present wording makes it sound like
txtorcon is the only game in town when it comes to custom circuit
construction. Lots of options, and even if they don't do it in python
it's not hard. :)


On Thu, Jun 15, 2017 at 2:07 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;&gt; On 16 Jun 2017, at 03:49, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hello all!
&gt;&gt;
&gt;&gt; I have made a brief post on our blog to announce an exciting intership
&gt;&gt; opportunity we have available!
&gt;&gt;
&gt;&gt; https://blog.torproject.org/blog/summer-2017-internship-create-bridge-bandwidth-scanner
&gt;
&gt; stem also does circuit construction via the control port, so the
&gt; intern can avoid doing anything twisted... if they want.
&gt;
&gt; There's even TorCtl, but it's old and unmaintained.
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170623024906</emailId><senderName></senderName><senderEmail>f55jwk4f</senderEmail><timestampReceived>2017-06-23 02:49:06-0400</timestampReceived><subject>[tor-dev] When to exit 0 on error</subject><body>

[Attachment #2 (multipart/signed)]


I noticed tor sometimes exits 0 on error, specifically in
monitor_owning_controller_process in src/or/control.c:

  if (owning_controller_process_monitor == NULL) {
    log_err(LD_BUG, "Couldn't create process-termination monitor for "
            "owning controller: %s.  Exiting.",
            msg);
    owning_controller_process_spec = NULL;
    tor_cleanup();
    exit(0);
  }

and in try_locking in main.c:

        r = try_locking(options, 0);
        if (r&lt;0) {
          log_err(LD_GENERAL, "No, it's still there.  Exiting.");
          exit(0);
        }

When to exit 0 on error?

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170624113823</emailId><senderName>heddha</senderName><senderEmail>heddha@unicorn.university</senderEmail><timestampReceived>2017-06-24 11:38:23-0400</timestampReceived><subject>[tor-dev]  Names for your onions</subject><body>

Good day everyone!

A friend and I are looking into implementing a few of the ideas listed
in [0] as part of a university project. We saw quite a lot of discussion
on idea 1, but we're mainly interested in working on ideas 2.5 and 3,
and additionally either 2.1 or 4. Has there been discussion and work on
these yet? Where can we find it? Is there anything else that you can
tell us that we should know?

Thank you very much for your time!

Kind regards,

heddha



[0]: https://blog.torproject.org/blog/cooking-onions-names-your-onions


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170618221406</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-06-18 22:14:06-0400</timestampReceived><subject>[tor-dev] Problems on torrc.d-style configuration directories</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello everyone!

I met some troubles when testing the new torrc.d-style configuration
directories feature
(https://trac.torproject.org/projects/tor/ticket/1922). Could anyone
share some ideas on the problem, please? I will be really appreciated.
The following is what I did:

1. add the following line to /etc/apt/sources.list.d/torproject.list:
deb http://deb.torproject.org/torproject.org tor-nightly-master-jessie
main
2. update Tor to nightly version: sudo apt-get update
3. tor --version: Tor version 0.3.1.3-alpha-dev
(git-a73d0fe9a87df762+b433dff).
4. sudo mkdir /etc/tor/services-available
5. sudo cp anon-connection-wizard.torrc /etc/tor/services-available/
6. sudo mkdir /etc/tor/services-enable
7. sudo ln -s /etc/tor/services-available/anon-connection-wizard.torrc
/etc/tor/services-enable/anon-connection-wizard.torrc
8. reload tor
9. since bridges are used in the anon-connection-wizard.torrc, when we
use arm to check the connections, tor should connect to one of the
bridges, if torrc.d style configuration worked. However, it didn't work.

I also tried to remove the /etc/tor/torrc, and tor could not find a
torrc file anymore.

The latest related discussion on the ticket is as follows:
&gt; Weasel and I (aka Hans) sketched out how we would use it in the 
&gt; Debian package, closely following the Apache pattern but with 
&gt; naming that is more appropriate in Tor:
&gt; 
&gt; /etc/tor/torrc:: %include /etc/tor/services-enabled/*.torrc 
&gt; %include /etc/tor/instances-enabled/*.torrc
&gt; 
&gt; These dirs are present for the actual snippet files: 
&gt; /etc/tor/services-available /etc/tor/instances-available
&gt; 
&gt; These dirs include relative symlinks to *-available: 
&gt; /etc/tor/services-enabled /etc/tor/instances-enabled
&gt; 
&gt; For example: /etc/tor/services-enabled/sparkleshare.torrc --&gt; 
&gt; ../services-available/sparkleshare.torrc
&gt; 
&gt; The sparkleshare package would include:
&gt; 
&gt; /etc/tor/services-available/sparkleshare.torrc
&gt; 
&gt; The davical package would include:
&gt; 
&gt; /etc/tor/services-available/davical.torrc

So I assumed it still worked.

Could anyone please help me point out what I have done wrong? Or could
anyone please point me to some docs about the new feature? I can see
the source code of core Tor and write some docs on this, if this will
be helpful, btw :)

I really appreciate your help!
Thank you!

Best,
iry
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZRvsbAAoJEKFLTbxtzdU86OkP/REdnsdcJJHoGyTdyXYoqJ6n
NgW3cKlEGjCZF5bxIQ+lIG6q85j3EfflPDov97VrVyCE8xr6TFG0dDs/sE4rPE/h
GjYhBzM1WC5o55vyvdehTh80wl3/hSj/LehCJLOpBKAjoxuzeDHtyrkd3LG22y8i
mi93wgfxBuEbqvstDVipWfJt/5JbBLtXS/QainQqFwwFHRxJpIZcSgvWR5UAXAyS
IQLW7m91lwl9W/irQvhM8d4nnk0ciTGMPKoyEt3FWHs9jP9ewKvIvWlxJVYZEefW
LlLHMVzbyqWZWnkLkCBNyBfZZ0Rk16YFrUuMkTUH83LO/kBSlWFOj3idN5gYwda/
aanJhtopLH1u1nP10TqF6c4e6Bu6tfCOUh8sdOp8s7iB7MJHvaPU3lJM1vDk55u1
+fSxcDOm7NuN7xrJ3elUKS+oeOU8Ah4h43L/9lJgrIZ6zdIdI1f0E4QXlIWbKIbf
dkQJrG760R/6jG6JMnbiOFPwoFelLna1hX6USpbnVEfhh33n3t/t5EpK5kH/q2m9
/lCkMcBpa5XXVquGaeCCQ+2X4wQ31wlhka12GADtVkq3SohOnfKzRauJYN8OcHZH
eNZlDMbO8j3y9IHEdM+mhT8a7XnnZokFINSjmjnOnAQdk8A8QjB5V/TIZQB1uJwd
1uUyayVwl9SQHy3P6yuH
=SLHC
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170621014039</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-21 01:40:39-0400</timestampReceived><subject>[tor-dev] prop224: Time Period Overlaps and Blinded Keys</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

The time period overlap section 2.2.4 in prop224 is under-specified:
=
https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.=
txt#n821

1. During the overlap period, does the service use the new blinded key
for the new period, and the old blinded key for the old period?

I think the answer is yes, but this requires some deduction to work
out.

2. If the overlap period starts when a service sees the first consensus
with a new SRV, does the service stop using that SRV and blinded key:
* at the end of the period?
  (that is, exactly 36 hours after the earliest the overlap period
   could possibly have started.)
* exactly 36 hours after the SRV was first seen?
  (that is, exactly 36 hours after the service started the overlap
   period. For example, if the service fetched the consensus 2 hours
   after it was created, it would end 2 hours after the end of the
   period.)
* when the first reveal consensus is received with that SRV as the
  previous SRV? (or some similar consensus-driven event)

Does every service on a tor instance start the overlap at the same
time?

=
https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.=
txt#n768

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZSc6YAAoJEHQNnjkCUnKiamwP/35bSn4w+diHpnUjqbDOEaoE
L4vypDT128O6t08q/5wTyU479lneDq9/+eQFGo8TS7CFKzUzbTsizZzzcYvK0bn7
toUvb9HHxwdFehnoBt5C5SIKaz5XWbIhuBpCXE8rhyJxhNHUpYOuv3+EJjMc9q5r
hP1irSP+P0TjyCnrPLYq0OwwuXPIVOZGH+EF6J3Nrr6fhEL0FBtOuG/3NjY/8gFG
owIvcvXfnFFprbZOWqPu6LskvoCQlO8hDNMqBgOn9qu6vpnmtuLk++yAGvnmceab
VZdGzI2TsyEv7mxAFV4O/miJ3XFQ1CQ+8w/GQ+bNN34h8W0C/e2e6s8Iol1R+QoV
4W2/AIpC7I7Anz38G0b1Ax/1gzjO3o02Zd1WhMpFGn/OmhzR8kOWOh7rZbV88Ms0
SLZUGt5xwHDtRfhL5VbCHl0YFWFv8dltTuBSGL8gdY+y1kkQAgOzu53OJmhV75AV
EbzCIdVvfQPpv5FDj/S5Qg8KQXOFj7YNB8b8am4RKTFQ7kIj0wp/j3jNVDWIzM0k
EV5/LO7uiSDNwwBjEF83s/I9Rk+mwsKQg0IMBqGsYH3742nQrIUTWKL+aesLkVG2
kNWwPq1mocpcWzCL3Ngtxi8abTc4wGrmEOV3I4Zf1g6S4pb9cIr9fR5wIahHOxV3
8EK89PhpLBrQKcHO30Vm
=Np/A
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170623140028</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-06-23 14:00:28-0400</timestampReceived><subject>Re: [tor-dev] prop224: Time Period Overlaps and Blinded Keys</subject><body>

[Attachment #2 (multipart/signed)]


On 21 Jun (11:40:39), teor wrote:
&gt; Hi,

Hello teor!

Sorry for the delay!

&gt; 
&gt; The time period overlap section 2.2.4 in prop224 is under-specified:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n821
&gt; 
&gt; 1. During the overlap period, does the service use the new blinded key
&gt; for the new period, and the old blinded key for the old period?
&gt; 
&gt; I think the answer is yes, but this requires some deduction to work
&gt; out.

The service will use _both_ blinded keys thus the "current" one and the "next"
one. This overlap period makes the service create two descriptors with two
different set of keys and intro points.

&gt; 
&gt; 2. If the overlap period starts when a service sees the first consensus
&gt; with a new SRV, does the service stop using that SRV and blinded key:

The way the SRV value is used with hidden service is as follow. Once a
consensus arrives at the tor client, "routerstatus_t" object are created for
each "node_t". It is at that point that we pre-compute the HSDir index using
the SRV values in the consensus. Every node_t object has a "hsdir_index"
object containing the value of the position on the hashring for the current
*and* next period. We do that in order to avoid lots of computation everytime
the service wants to upload descriptors.

So, if a consensus comes in with *no* SRV, every hsdir_index is set to the
position using the disaster value (deterministic). And the service will start
uploading there. This can have a bad effect on reachability for client with
different consensus *but* HSDir keeps the descriptor for a "descriptor
lifetime" which is 3 hours right now by default so there is a window where
client will use the SRV from a older consensus and still be able to reach the
service.

All in all, no SRV in the consensus is pretty bad for reachability. We could
try to be more resilient service side with also uploading descriptors to
previous SRV hsdir index but I'm relunctant to do that (at least needs more
thought) since I would prefer the service to *trust* and *follow* the latest
consensus instead of using any old or expired consensus values.

&gt; * at the end of the period?
&gt;   (that is, exactly 36 hours after the earliest the overlap period
&gt;    could possibly have started.)
&gt; * exactly 36 hours after the SRV was first seen?
&gt;   (that is, exactly 36 hours after the service started the overlap
&gt;    period. For example, if the service fetched the consensus 2 hours
&gt;    after it was created, it would end 2 hours after the end of the
&gt;    period.)
&gt; * when the first reveal consensus is received with that SRV as the
&gt;   previous SRV? (or some similar consensus-driven event)
&gt; 
&gt; Does every service on a tor instance start the overlap at the same
&gt; time?

Yes. Overlap period is between 00:00 and 12:00 UTC. This is the if condition
being used:

  if (valid_after_tm.tm_hour &gt; 0 &amp;&amp; valid_after_tm.tm_hour &lt; 12) { ...

I just realized though that there is a side effect here. Entering the overlap
period means that our next descriptor becomes our current descriptor and then
we create a new next descriptor because we are in overlap.

Which has this collateral damage of having _all_ hidden service at once
closing the intro points of the current descriptor which is being discarded
after 36 hours of operation. Not entirely sure that is a good idea to do such
a thing at 00:00 every day :P... Keeping that in mind.

I hope this answers your question!

Cheers!
David

&gt; 
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n768
&gt; 
&gt; T
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt; 



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
/mmuJnfgl5BpUcW2QnKLPvo7NTw8BgfpNjOtJ9EM/2U=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170623144223</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2017-06-23 14:42:23-0400</timestampReceived><subject>Re: [tor-dev] prop224: Time Period Overlaps and Blinded Keys</subject><body>

On Fri, Jun 23, 2017 at 10:00:28AM -0400, David Goulet wrote:
&gt; Yes. Overlap period is between 00:00 and 12:00 UTC. This is the if condition
&gt; being used:
&gt; 
&gt;   if (valid_after_tm.tm_hour &gt; 0 &amp;&amp; valid_after_tm.tm_hour &lt; 12) { ...

Shouldn't that be

    if (valid_after_tm.tm_hour &gt;= 0 &amp;&amp; valid_after_tm.tm_hour &lt; 12) { ...

if you want the clause to become true at 00:00, not at 01:00?

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170618223153</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-18 22:31:53-0400</timestampReceived><subject>Re: [tor-dev] Problems on torrc.d-style configuration directories</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 19 Jun 2017, at 08:14, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hello everyone!
&gt; 
&gt; I met some troubles when testing the new torrc.d-style configuration
&gt; directories feature
&gt; (https://trac.torproject.org/projects/tor/ticket/1922). Could anyone
&gt; share some ideas on the problem, please? I will be really appreciated.
&gt; The following is what I did:
&gt; ...
&gt; tor should connect to one of the
&gt; bridges, if torrc.d style configuration worked. However, it didn't work.
&gt; 
&gt; I also tried to remove the /etc/tor/torrc, and tor could not find a
&gt; torrc file anymore.

Is there an %include directive in either /etc/tor/torrc or wherever
your distribution keeps the defaults torrc?

&gt; The latest related discussion on the ticket is as follows:
&gt; &gt; Weasel and I (aka Hans) sketched out how we would use it in the
&gt; &gt; Debian package
&gt; ...
&gt; So I assumed it still worked.

I'm not sure this feature has been implemented in the Debian torrc
files yet. Some distributions don't change their configs based on
alpha features: alpha features sometimes change.

Others are just busy, and take time to update.

&gt; Could anyone please help me point out what I have done wrong?

You probably need a %include directive in /etc/tor/torrc.
If you get this working, please submit a patch to the Debian bug tracker.

&gt; Or could
&gt; anyone please point me to some docs about the new feature?

https://gitweb.torproject.org/tor.git/diff/doc/tor.1.txt?id=ba3a5f82f11388237a3ba4995ddf0b6ffaaf492a

&gt; I can see
&gt; the source code of core Tor and write some docs on this, if this will
&gt; be helpful, btw :)

https://gitweb.torproject.org/tor.git/commit/?id=ba3a5f82f11388237a3ba4995ddf0b6ffaaf492a

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZRv9ZAAoJEHQNnjkCUnKiJOgP/i4BURgg4WYgE8cJJTpJG3CQ
GVl1lxz6Ta9EDCj/6rTLrUkr+QTUYjS+5XpjM+f7MAbCanVtMgidzz1y5UyVGbM0
z8plmYElwpZ5OWluSD5wZ86ngFl/VQvxq1on4rP5iSsMZxzkrNyp4YdFwkwalvm9
rBSzEknRI83vuTwB5NRoy7oikBG1fd9b25K7dQIyrGvdX/G8+/C9G6GGcduiNIn1
5c2HsdtNieigQWqOflXQ+2ws2iRtEd8dsM9sNAHsr4Z7JuDutRZaQDSCKwtOCNBf
4M9bTJDdmGfy6DX5RRXHpw2SO6lqQwkQ5It+64apOFdOQPihYbyOG3NGsYFIzpw/
oPxIOrQy5NR6cJQ/B2kkr9oFFjjAN8elS9nPGm3Ak+z/N5+/vyEAADL5vW0kTSLW
Q5sZIOrAAlpIQyzcW2xAyDoG9CrvhYqk1sFNFc+RGVty4EBjaVbZ0Ga0SWSJuVAb
/qhQHSUBXRtgybT5mRh2uLCHXiCHyWcn9m6MIMYNkzbw9H5eKVZYb+hgJ71i8zzg
thyfJYodVXKUytLG0Rg8O7rqb4zilGWJK3s5LY6uMnNg4MgVTua09P0wFg000hbq
T1VXGsuybWzQbfg2BPs/OOto6FX/5dwe2dx3IZ158O0OiTAXSJrv1+3zAPW1Q3Gs
0xh5qtx0wPq8diwfVE+9
=8WiU
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170622222149</emailId><senderName>Daniel Pinto</senderName><senderEmail>danielpinto52@gmail.com</senderEmail><timestampReceived>2017-06-22 22:21:49-0400</timestampReceived><subject>Re: [tor-dev] Problems on torrc.d-style configuration directories</subject><body>

Hi iry,

The ticket for this feature is very old and contains some outdated
information. The comment you quoted will not work as it is written
because the %include functionality does not support wildcards. However,
you can achieve the same result by adding the following line on your torrc:

%include /etc/tor/services-enabled/

This will include all the files on /etc/tor/services-enabled/.

You can find a short description of this feature on the tor man page,
under the section "The configuration file format":

Configuration options can be imported from files or folders using the
%include option with the value being a path. If the path is a file, the
options from the file will be parsed as if they were written where the
%include option is. If the path is a folder, all files on that folder
will be parsed following lexical order. Files starting with a dot are
ignored. Files on subfolders are ignored. The %include option can be
used recursively.

Best regards,
-- 
Daniel Pinto
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170627020814</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2017-06-27 02:08:14-0400</timestampReceived><subject>Re: [tor-dev] Problems on torrc.d-style configuration directories</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi teor and Daniel!

Thank you so much for your reply! Your instructions are really helpful
to me.

teor:
&gt; You probably need a %include directive in /etc/tor/torrc.

I tried to add %include directive in /etc/tor/torrc and
/usr/share/tor/tor-service-defaults-torrc separately. And both of them
worked well :)

teor:
&gt; If you get this working, please submit a patch to the Debian bug
&gt; tracker.

No problem! But please forgive my ignorance, could you please explain
a little bit more to me that why I should report it to Debian BTS,
instead of tpo? In other words, what is the relationship between
packages.debian.org and deb.torproject.org?

According to cypherpunks[0]:
&gt; The first released tor version with this feature is 0.3.1.1-alpha. 
&gt; As usual there will be alpha packages on deb.torproject.org
&gt; 
&gt; If you want this feature _now_ you can use the nightly builds: ​
&gt; https://deb.torproject.org/torproject.org/dists/tor-nightly-master-str
etch

However,
&gt; 
the highest tor version in Debian BTS right now is
3.0.8-1.[1], which means the feature has not been included into Debian?

My current thought is deb.torproject.org is the upstream of
packages.debian.org in terms of tor package. So a change made in
deb.torproject.org will be adopted by packages.debian.org after a while.


The following is my testing environment which may be helpful to the
problem:

I tested the torrc.d feature in both Debian 8 and Whonix13(based on
Debian8). Instead of downloading from packages.debian.org, I download
tor from:
&gt; deb http://deb.torproject.org/torproject.org jessie main deb-src
&gt; http://deb.torproject.org/torproject.org jessie main deb
&gt; http://deb.torproject.org/torproject.org tor-nightly-master-jessie 
&gt; main

The Tor version I tested was:
&gt; Tor version 0.3.1.3-alpha-dev (git-a73d0fe9a87df762+b433dff)


Again, thank you very much, teor and Daniel! I really appreciate your
help!

Best,
iry


[0]: https://trac.torproject.org/projects/tor/ticket/1922
[1]: https://packages.debian.org/source/experimental/tor
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZUb3/AAoJEKFLTbxtzdU8jQsP/2B29N3WpkypE7DQ1A2wtjd9
MP3Blz9lbJH8LQJw+juaHhzslokCXwpGJSl7OfyqhRL44VkXnTllfd88HacW5luM
PqZ4OeljB2UYrpDM7TypjdA+RXmSLTKNCmFifCESQPcmsu97qxlcvkgtF69fJ8eX
p/22PEOjsqnows37rYp0AZiLa7x9I1dZdjzD6tHfKNVylM5AuuyOExAZKlx90rlW
lL1nCJEuw/d6HBtVWWBgYDjeAMg5G0TpO2gU1j/A7kEzgZxWID6q/r1TvpDp1pi3
aJhjmyeZn2rVwdGPFX03pp7DWJetbYA5CuhGFucjPtkdXDCh2guuSsivcM6obpiA
EmI4QtedGGhy2Xp1ufLAHP89TuuSU1n9VaioHSpLlGkQA9v2PRjW4ChBVJwP6mVt
9XGhY7TgEQMVZWL/brCNI6aeCf8rfaBSHtMwAR6xQ6ofvYAjl7X1BpNOSx4s73B/
CWnGxvMNDPuu1scxkOF0y3M68p+xgT0UuHTx4JjUTQtESFTqtdua5JxLyzE2qGyz
pwzFjFzwoPBav5TPY7MB8WN79GImZFUiELA6vOL4CLaXEMCepsXYDhdP/3JLkD0e
GQfliduoa2KGUijKrzy+ZVrKwBjF63ylbKGrxJHnX1SB8OftYbdlIQRvhzwHwaOL
uSfnWGIg3Fo0fKs1/F/Q
=L3H9
-----END PGP SIGNATURE-----

["0x6DCDD53C.asc" (application/pgp-keys)]
["0x6DCDD53C.asc.sig" (application/pgp-signature)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170627024242</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-27 02:42:42-0400</timestampReceived><subject>Re: [tor-dev] Problems on torrc.d-style configuration directories</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 27 Jun 2017, at 12:08, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; ...
&gt; 
&gt; teor:
&gt; &gt; If you get this working, please submit a patch to the Debian bug
&gt; &gt; tracker.
&gt; 
&gt; No problem! But please forgive my ignorance, could you please explain
&gt; a little bit more to me that why I should report it to Debian BTS,
&gt; instead of tpo? In other words, what is the relationship between
&gt; packages.debian.org and deb.torproject.org?
&gt; 
&gt; According to cypherpunks[0]:
&gt; &gt; The first released tor version with this feature is 0.3.1.1-alpha.
&gt; &gt; As usual there will be alpha packages on deb.torproject.org
&gt; &gt;
&gt; &gt; If you want this feature _now_ you can use the nightly builds: ​
&gt; &gt; https://deb.torproject.org/torproject.org/dists/tor-nightly-master-str
&gt; etch
&gt; 
&gt; However,
&gt; &gt;
&gt; the highest tor version in Debian BTS right now is
&gt; 3.0.8-1.[1], which means the feature has not been included into Debian?
&gt; 
&gt; My current thought is deb.torproject.org is the upstream of
&gt; packages.debian.org in terms of tor package. So a change made in
&gt; deb.torproject.org will be adopted by packages.debian.org after a while.

My understanding is that:
* git.torproject.org is the upstream for a lot of different packagers,
* bugs in git.torproject.org are reported on trac.torproject.org
  (there is no debian packages component on the tor trac)

* for debian packages, deb.torproject.org is the upstream of
  packages.debian.org,
* bugs for debian packages are reported on the debian bug tracker

Debian was just in a distribution release freeze, so I'm not sure when
they will update their version. But I'm sure they would appreciate a
patch when they do upgrade.

&gt; ...
&gt; The Tor version I tested was:
&gt; &gt; Tor version 0.3.1.3-alpha-dev (git-a73d0fe9a87df762+b433dff)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZUcYiAAoJEHQNnjkCUnKiIlEP/RyF5/+eHA2lYsE+uYhb668Z
/dGZH61bW9V+nqQuh3mM3S6rBmJ5/l8ctlNbn3fIQmWQK+0tLv2a3kqHvBh5bUsA
ogkeNwjn2pZ9+lMtcy7160a5e79O4oFTeLEcrfAAt4DtTxGQddx8Ra1Hohz+QXbp
FDVFcXq9ODnuuNQZYVhdKWUtlOMQlKBCvoJiBKViIDqf9EG1x6TaILDfJ3UNdJLp
oyaS7ePC2JHgKn2v6Kr9k++4QTkFbxkQpOFhWbrfJABA9Gl/w3tb5Z1HlhaGOMoC
np4ULi668UjFQTnz5qvp2PY3ZhKesM1EwIW4j+TDd7XLXYbn+1tiZ6z/Yp6npk8U
RuSPwyU/3X25mP8uPkQjAq3DJ+k8RNBZ5ZQq02CmqtXygKYdhhKgI2x29b6YWX77
EEv1TgCo/lYtKZ0yxlX48nagVbTwWaHB3UuaUs/ZCc1rcLUlyV97L6p7XXXFGHpP
WQIiHXd9y915wjyRHoQ3+LaV7QAi2v1f5riNUreEvT31iQSfcZ1ISX2aUjQXXfHl
gBS5hc95QAXlAkqFcATVIX+oZ91RDuaUi9PIrZ5xWe6uXHK7UbostjaEe7YH7ymJ
iKeSAJZbuNFsOdWGh0SHrwykbqeDi2VC1IhpVTLDOOJKznU8wnoL8yiRCVpjQcIL
7a3/agVf6+Qw+T1ib8JU
=4iJ9
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170625014108</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2017-06-25 01:41:08-0400</timestampReceived><subject>Re: [tor-dev] Names for your onions</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

heddha:
&gt; A friend and I are looking into implementing a few of the ideas
&gt; listed in [0] as part of a university project. We saw quite a lot
&gt; of discussion on idea 1, but we're mainly interested in working on
&gt; ideas 2.5 and 3, and additionally either 2.1 or 4. Has there been
&gt; discussion and work on these yet? Where can we find it? Is there
&gt; anything else that you can tell us that we should know?

Hi heddha!

I recently made a proof-of-concept implementation of Idea 4 ("Embed
onion addresses in DNS/DNSSEC records").  Some information about my
implementation is at the following links:

https://www.namecoin.org/2017/06/21/tor-prop279.html

https://www.namecoin.org/2017/06/22/tor-prop279-release.html

https://www.namecoin.org/download/betas/#dns-prop279

https://github.com/namecoin/dns-prop279

Admittedly the documentation is pretty weak at the moment (and it
hasn't gotten much testing), but maybe you'll find it interesting.
Feel free to play around with the code and/or ask questions and/or
submit bug reports/patches.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZTxSUAAoJELPy0WV4bWVw6lcP/3X0H2nnir9Q8xRFJqFUelcL
a63UiF3SS1DLD6X6sIKHJQXO1NrXH6dgE/v6t2TcS/aqyTXKD5qAmyXNqqzehjPt
RemkQkhDzc2TVOAA9aM+Po46ePLp/yELGeCkZ5NHAkmRCyT+rOxC75aoWkjaVjwv
51n+iOYf1Cq/yK1eDtw3WqvS0DxeNpRWk5MMRhru5oGam8ZRZ5lpgbhXWpFAHwX1
nIDi8XnCepc+zVMLIfBqAzELK0pz37sITTPHTaoxRLzd3ACHOm5U1NDzjLN7yIz/
f/cMAyUXROq7CfcxFX7tEaUS4YaBEUVbbnhiTV+cxiQTJyO+5aZeD+3SvDj6r6UY
fVwZHRSO3+QtkK6k2a33y/PaMZySLjB9t6T6UKpbOJyoPeswFjUmlR7G8NdzDeTp
kR6Oq8BkMkxIEgsnfH6ce+js5MzqiiD776Tgn/1+1yOzthEIiL67MHgWC7I8XbVF
BYJ/9NiqyR1gE/OmwzygoA1ImkkaagAt2lAD8o6Ai1DTFxVesQLh4mkQmkMKRPur
bNY3/wmoYBXx5rn8wPRyMvEsNvNN4fqxVCEr2AgumgPyvuzoXl20MpK8Ns9iq2Us
ztJ7YykHdnjgNG9SiM6xOIvYAqTs6NRSUlP8H4X4pBJUMrH4WZ4+JANSavIipn/b
zdfC8pknAU2b4y6wQqk4
=64U6
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170625084251</emailId><senderName>heddha</senderName><senderEmail>heddha@unicorn.university</senderEmail><timestampReceived>2017-06-25 08:42:51-0400</timestampReceived><subject>Re: [tor-dev] Names for your onions</subject><body>

This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)
[Attachment #2 (multipart/encrypted)]
This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)
[Attachment #4 (application/pgp-encrypted)]
["encrypted.asc" (application/octet-stream)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170623132936</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-06-23 13:29:36-0400</timestampReceived><subject>Re: [tor-dev] When to exit 0 on error</subject><body>

On Thu, Jun 22, 2017 at 10:49 PM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt; I noticed tor sometimes exits 0 on error, specifically in
&gt; monitor_owning_controller_process in src/or/control.c:
&gt;
&gt;   if (owning_controller_process_monitor == NULL) {
&gt;     log_err(LD_BUG, "Couldn't create process-termination monitor for "
&gt;             "owning controller: %s.  Exiting.",
&gt;             msg);
&gt;     owning_controller_process_spec = NULL;
&gt;     tor_cleanup();
&gt;     exit(0);
&gt;   }
&gt;
&gt; and in try_locking in main.c:
&gt;
&gt;         r = try_locking(options, 0);
&gt;         if (r&lt;0) {
&gt;           log_err(LD_GENERAL, "No, it's still there.  Exiting.");
&gt;           exit(0);
&gt;         }
&gt;
&gt; When to exit 0 on error?

When the error is unrecoverable, and continuing would be worse then exiting.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170623142932</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2017-06-23 14:29:32-0400</timestampReceived><subject>Re: [tor-dev] When to exit 0 on error</subject><body>

On Fri, Jun 23, 2017 at 9:29 AM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; On Thu, Jun 22, 2017 at 10:49 PM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt;&gt; I noticed tor sometimes exits 0 on error
&gt;&gt; [...]
&gt;&gt; When to exit 0 on error?
&gt;
&gt; When the error is unrecoverable, and continuing would be worse then exiting.

I don't think the question was "when is it appropriate to _exit_ on
error?"  I think it was "when is it appropriate to exit _0_ (i.e.
apparently successfully) on error?"

My expectation would be that exit(0) on fatal error is presumptively a
minor bug, it should be exit(1), and if there is some compelling
reason to exit successfully in a particular error case, there ought to
be a comment explaining that reason.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170624043850</emailId><senderName></senderName><senderEmail>f55jwk4f</senderEmail><timestampReceived>2017-06-24 04:38:50-0400</timestampReceived><subject>Re: [tor-dev] When to exit 0 on error</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Jun 23, 2017 at 10:29:32AM -0400, Zack Weinberg wrote:
&gt; On Fri, Jun 23, 2017 at 9:29 AM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; &gt; On Thu, Jun 22, 2017 at 10:49 PM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt; &gt;&gt; I noticed tor sometimes exits 0 on error
&gt; &gt;&gt; [...]
&gt; &gt;&gt; When to exit 0 on error?
&gt; &gt;
&gt; &gt; When the error is unrecoverable, and continuing would be worse then exiting.
&gt;
&gt; I don't think the question was "when is it appropriate to _exit_ on
&gt; error?"  I think it was "when is it appropriate to exit _0_ (i.e.
&gt; apparently successfully) on error?"
&gt;
&gt; My expectation would be that exit(0) on fatal error is presumptively a
&gt; minor bug, it should be exit(1), and if there is some compelling
&gt; reason to exit successfully in a particular error case, there ought to
&gt; be a comment explaining that reason.
&gt;
&gt; zw

Yes.  I mean why to exit success instead of failure.  But I don't know
if those cases are typos, because there are 2 such cases, and a typo
like that can be easily spotted in a review.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170624204049</emailId><senderName>Zack Weinberg</senderName><senderEmail>zackw@panix.com</senderEmail><timestampReceived>2017-06-24 20:40:49-0400</timestampReceived><subject>Re: [tor-dev] When to exit 0 on error</subject><body>

On Sat, Jun 24, 2017 at 12:38 AM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt; On Fri, Jun 23, 2017 at 10:29:32AM -0400, Zack Weinberg wrote:
&gt;&gt;
&gt;&gt; My expectation would be that exit(0) on fatal error is presumptively a
&gt;&gt; minor bug, it should be exit(1), and if there is some compelling
&gt;&gt; reason to exit successfully in a particular error case, there ought to
&gt;&gt; be a comment explaining that reason.
&gt;
&gt; Yes.  I mean why to exit success instead of failure.  But I don't know
&gt; if those cases are typos, because there are 2 such cases, and a typo
&gt; like that can be easily spotted in a review.

Yes, but a typo like that can also be easily *missed* in a review; you
read what ought to be there instead of what is.

zw
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170615215421</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-06-15 21:54:21-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>


&gt; Also, I agree with Tim. The present wording makes it sound like
&gt; txtorcon is the only game in town when it comes to custom circuit
&gt; construction.

I looked at the "to russia with love" examples, but I don't see how you
map particular streams to circuits?

The last example on the page it seems like you're just "really hoping"
that the next stream to open is the one you want to map onto the new
circuit, or am I missing something? That is, what if you had 2 custom
circuits and 2 streams to open? Or what if some other client used your
Tor at that moment to make a connetion?

To plug the newest txtorcon API (the "Tor" object): this provides really
simple support for both "raw" TCP connections and specifically Web
connections (via Twisted's built-in Agent or treq, the "requests-like
API for Twisted") routed over Tor (on custom circuits or
otherwise). This all uses the source-ports of the streams to determine
which ones to map to which circuits. So, you can safely have thousands
of custom streams in-flight on any number of different custom circuits
(and play nicely with other clients using the same tor instance).

For example, "use any Tor circuit and make a Web request":

   https://github.com/meejah/txtorcon/blob/master/examples/web_client_treq.py#L23

vs. "build a custom circuit and make a request over that":

   https://github.com/meejah/txtorcon/blob/master/examples/web_client_custom_circuit.py#L35

Cheers,

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170615230803</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2017-06-15 23:08:03-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

[Attachment #2 (multipart/signed)]


Damian Johnson transcribed 2.0K bytes:
&gt; On Thu, Jun 15, 2017 at 2:07 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt;&gt; On 16 Jun 2017, at 03:49, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; &gt;&gt;
&gt; &gt;&gt; Hello all!
&gt; &gt;&gt;
&gt; &gt;&gt; I have made a brief post on our blog to announce an exciting intership
&gt; &gt;&gt; opportunity we have available!
&gt; &gt;&gt;
&gt; &gt;&gt; https://blog.torproject.org/blog/summer-2017-internship-create-bridge-bandwidth-scanner
&gt; &gt;
&gt; &gt; stem also does circuit construction via the control port, so the
&gt; &gt; intern can avoid doing anything twisted... if they want.
&gt; &gt;
&gt; &gt; There's even TorCtl, but it's old and unmaintained.
&gt;
&gt; Hi Isis. For what it's worth if it turns out to be based on Stem I'd
&gt; be delighted to help mentor and/or do code reviews.
&gt; 
&gt; Also, I agree with Tim. The present wording makes it sound like
&gt; txtorcon is the only game in town when it comes to custom circuit
&gt; construction. Lots of options, and even if they don't do it in python
&gt; it's not hard. :)

Hey Damian!

Sorry, in my nearsightedness, having only ever had used Stem for parsing, I
had not realised that enough of the control protocol was implemented in Stem
to do this without using txtorcon!  Please feel free to reword the posting (or
suggest a change) that you think would more accurately reflect this.

Also, I would be delighted to co-mentor with you (and also meejah, if the
intern decides to go the txtorcon route), that sounds great!

Best,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170615230927</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-06-15 23:09:27-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

&gt; The last example on the page it seems like you're just "really hoping"
&gt; that the next stream to open is the one you want to map onto the new
&gt; circuit, or am I missing something?

Hi meejah. Yup, you're right. To keep things simple it's just
attaching the next stream. If you were using your tor client for other
things too this wouldn't be a safe assumption and the caller would
need additional checks that it's the stream they want.

Python's builtin connection modules really suck, hence our need for
SocksiPy or PycURL. Maybe python3's asyncio (the builtin which seems
intended to replace twisted) has better options. I certainly wouldn't
be surprised if what Twisted provides is better than the builtins we
had on python 2.7.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170615232109</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2017-06-15 23:21:09-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

&gt; Hey Damian!
&gt; 
&gt; Sorry, in my nearsightedness, having only ever had used Stem for parsing, I
&gt; had not realised that enough of the control protocol was implemented in Stem
&gt; to do this without using txtorcon!  Please feel free to reword the posting (or
&gt; suggest a change) that you think would more accurately reflect this.

No problem in the least. :P

For what it's worth Stem is a complete implementation of the control
and directory specification. That is to say, everything in there
*should* be supported (I keep an eye on all spec commits to ensure we
continue to match everything tor has). If Stem's missing something
then that's a bug I'd love to know about.

Blog post looks great. I'd probably only suggest a couple small tweaks...

* s/also outsourceable in Python to txtorcon/also outsourceable in
Python to txtorcon or stem
* Drop the paragraph after it since it doesn't seem to add much.

It's probably not worth including in the blog post but for what it's
worth the following list all the controller and descriptor parser libs
I'm aware of...

https://stem.torproject.org/faq.html#are-there-any-other-controller-libraries
https://stem.torproject.org/tutorials/mirror_mirror_on_the_wall.html#are-there-any-other-parsing-libraries


&gt; Also, I would be delighted to co-mentor with you (and also meejah, if the
&gt; intern decides to go the txtorcon route), that sounds great!

Great!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170613065408</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-06-13 06:54:08-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-06-12 12:00?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-06-13 00:03, nusenu wrote:
&gt; Hi,
&gt; 
&gt; just wanted to let you know that the delta between
&gt; 
&gt; relays_published and current time is unusually high.
&gt; 
&gt; 
&gt; https://onionoo.torproject.org/details?limit=0
&gt; 
&gt; {"version":"4.0",
&gt; "relays_published":"2017-06-12 12:00:00",

Right, I noticed the same yesterday afternoon and kicked the hourly
updater, which apparently didn't work.  I just kicked it again.  If that
doesn't work, I'll look more closely.  Thanks for the report!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170611183110</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-06-11 18:31:10-0400</timestampReceived><subject>Re: [tor-dev] .onion name resolution with Blockstack</subject><body>

Jude Nelson &lt;jude@blockstack.com&gt; writes:

&gt; We plan to add support to the stdin/stdout protocol in Prop279 as
&gt; well.

Neat!

In case you missed it, you could test this implementation with
https://github.com/meejah/torns -- which functions similarly to the Stem
/ OnionNS thing but speaks to the actual plugins uning the Prop279
protocol over stdin/out.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170607103126</emailId><senderName>Alan S</senderName><senderEmail>agshuman@gmail.com</senderEmail><timestampReceived>2017-06-07 10:31:26-0400</timestampReceived><subject>Re: [tor-dev] [release] metrics-lib/DescripTor 1.8.0</subject><body>

[Attachment #2 (multipart/alternative)]


Remove me from this list!! I get emails from here and I never signed up!

On Jun 7, 2017 4:28 AM, "iwakeh" &lt;iwakeh@torproject.org&gt; wrote:

&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA256
&gt;
&gt; Hi there!
&gt;
&gt; The first June release of metrics-lib/DescripTor is available:
&gt;
&gt;      https://dist.torproject.org/descriptor/1.8.0/
&gt;
&gt; The theme of this release is to prepare more efficient descriptor
&gt; processing and some of the non-backwards compatible changes to come
&gt; in version 2.0.0.
&gt;
&gt; Main changes:
&gt; Raw descriptor contents are now stored with less overhead in-memory;
&gt; parsing methods were streamlined and the class structure of the
&gt; implementation is improved.
&gt; Of course, all bugs surfacing during this work were removed,
&gt; for details see [1].
&gt;
&gt; Please direct comments and questions to the metrics-team mailing list [2].
&gt;
&gt; Cheers,
&gt; iwakeh
&gt;
&gt; [1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=
&gt; 086b046057867de7a2606f77793ef23e8a8fb268
&gt; [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team
&gt;
&gt; -----BEGIN PGP SIGNATURE-----
&gt; Version: GnuPG v2
&gt;
&gt; iQIcBAEBCAAGBQJZN7m+AAoJEPeEx9Sa/gviTmYP/Amnhqp0YaH42mdqFxLjMTFx
&gt; D03g6cRqcG/qUEp1r9cakk4RMFpL5RQB1KH1VdBpq/Ffatt+wQ1m2Wxw6a6ikh67
&gt; TaZ5rU88r19Od/jE09zq67j8slBpUEsYJAzzH6GgJ8g/OpEGkbo7XNjFlLywyKSY
&gt; EkyLLR7fvei20MDtWCndhvkgj2CMVs5FHfBZAhC5ApBZD1fv6hRCzOitM1awoxs/
&gt; +/nIcd9U+m2dAUClCMFZHf+elW1rR1nq96oEIqLRRSaXaJWTl8+UauzTv088crK+
&gt; +4y/8/Mwt0UrnmAltkk1i/6q4baL3c2IcmL0NnZht8aGgZim4ukc9lih6Mk+EJME
&gt; USaoGIxKKZd49vmfcbL2MNgNPRFZN/8wymLOqSabqEMIeh9Mdljt3nZbMboCQ+jQ
&gt; 1W0vN8l2dGYhA3DNNmEyRvf78zjYFZeYqAw6TQ2NroKVsUBvBwddTGM4wn3Z47Qo
&gt; CxdICiPIyI56vAI9n8HX4DIH6UAjRure7o600G+Tc8u4WJKGf5Fa7izPHN5z+yVH
&gt; u36hesVWABfU/IlKDsbTTa8FnHFyeW0O4sk7W8mhj1ntqVk1TtvdAmOyN3ICtURw
&gt; vE3jtHzYn3r95nRRNIGy93+J9+bcClyNKfsi9rQ7WK7YANK55dICQIN1ZNszXMMz
&gt; ftSnzHLpnJA7ffC+2xBC
&gt; =KmDm
&gt; -----END PGP SIGNATURE-----
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Remove me from this list!! I get emails from here and I never signed \
up!&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Jun 7, 2017 4:28 \
AM, "iwakeh" &lt;&lt;a \
href="mailto:iwakeh@torproject.org"&gt;iwakeh@torproject.org&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;-----BEGIN PGP SIGNED \
                MESSAGE-----&lt;br&gt;
Hash: SHA256&lt;br&gt;
&lt;br&gt;
Hi there!&lt;br&gt;
&lt;br&gt;
The first June release of metrics-lib/DescripTor is available:&lt;br&gt;
&lt;br&gt;
        &lt;a href="https://dist.torproject.org/descriptor/1.8.0/" rel="noreferrer" \
target="_blank"&gt;https://dist.torproject.org/&lt;wbr&gt;descriptor/1.8.0/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
The theme of this release is to prepare more efficient descriptor&lt;br&gt;
processing and some of the non-backwards compatible changes to come&lt;br&gt;
in version 2.0.0.&lt;br&gt;
&lt;br&gt;
Main changes:&lt;br&gt;
Raw descriptor contents are now stored with less overhead in-memory;&lt;br&gt;
parsing methods were streamlined and the class structure of the&lt;br&gt;
implementation is improved.&lt;br&gt;
Of course, all bugs surfacing during this work were removed,&lt;br&gt;
for details see [1].&lt;br&gt;
&lt;br&gt;
Please direct comments and questions to the metrics-team mailing list [2].&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
iwakeh&lt;br&gt;
&lt;br&gt;
[1] &lt;a href="https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=086b046057867de7a2606f77793ef23e8a8fb268" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;metrics-lib.git/pl \
ain/&lt;wbr&gt;CHANGELOG.md?id=&lt;wbr&gt;086b046057867de7a2606f77793ef2&lt;wbr&gt;3e8a8fb268&lt;/a&gt;&lt;br&gt; \
[2] &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/&lt;wbr&gt;metrics-team&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
-----BEGIN PGP SIGNATURE-----&lt;br&gt;
Version: GnuPG v2&lt;br&gt;
&lt;br&gt;
iQIcBAEBCAAGBQJZN7m+&lt;wbr&gt;AAoJEPeEx9Sa/gviTmYP/&lt;wbr&gt;Amnhqp0YaH42mdqFxLjMTFx&lt;br&gt;
D03g6cRqcG/&lt;wbr&gt;qUEp1r9cakk4RMFpL5RQB1KH1VdBpq&lt;wbr&gt;/Ffatt+wQ1m2Wxw6a6ikh67&lt;br&gt;
TaZ5rU88r19Od/&lt;wbr&gt;jE09zq67j8slBpUEsYJAzzH6GgJ8g/&lt;wbr&gt;OpEGkbo7XNjFlLywyKSY&lt;br&gt;
EkyLLR7fvei20MDtWCndhvkgj2CMVs&lt;wbr&gt;5FHfBZAhC5ApBZD1fv6hRCzOitM1aw&lt;wbr&gt;oxs/&lt;br&gt;
+/nIcd9U+m2dAUClCMFZHf+&lt;wbr&gt;elW1rR1nq96oEIqLRRSaXaJWTl8+&lt;wbr&gt;UauzTv088crK+&lt;br&gt;
+4y/8/Mwt0UrnmAltkk1i/&lt;wbr&gt;6q4baL3c2IcmL0NnZht8aGgZim4ukc&lt;wbr&gt;9lih6Mk+EJME&lt;br&gt;
USaoGIxKKZd49vmfcbL2MNgNPRFZN/&lt;wbr&gt;8wymLOqSabqEMIeh9Mdljt3nZbMboC&lt;wbr&gt;Q+jQ&lt;br&gt;
1W0vN8l2dGYhA3DNNmEyRvf78zjYFZ&lt;wbr&gt;eYqAw6TQ2NroKVsUBvBwddTGM4wn3Z&lt;wbr&gt;47Qo&lt;br&gt;
CxdICiPIyI56vAI9n8HX4DIH6UAjRu&lt;wbr&gt;re7o600G+&lt;wbr&gt;Tc8u4WJKGf5Fa7izPHN5z+yVH&lt;br&gt;
u36hesVWABfU/&lt;wbr&gt;IlKDsbTTa8FnHFyeW0O4sk7W8mhj1n&lt;wbr&gt;tqVk1TtvdAmOyN3ICtURw&lt;br&gt;
vE3jtHzYn3r95nRRNIGy93+J9+&lt;wbr&gt;bcClyNKfsi9rQ7WK7YANK55dICQIN1&lt;wbr&gt;ZNszXMMz&lt;br&gt;
ftSnzHLpnJA7ffC+2xBC&lt;br&gt;
=KmDm&lt;br&gt;
-----END PGP SIGNATURE-----&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605050647</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-05 05:06:47-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

Thanks for your informative reply.

On Mon, Jun 05, 2017 at 02:37:00PM +1000, teor wrote:
&gt; 
&gt; &gt; On 2 Jun 2017, at 08:20, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; 
&gt; &gt; ...
&gt; &gt; And this Stem script:
&gt; &gt; 	from stem.control import Controller
&gt; &gt; 	with Controller.from_port(port = 9051) as controller:
&gt; &gt; 	    controller.authenticate()
&gt; &gt; 	    print controller.get_server_descriptor("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
&gt; &gt; 
&gt; ...
&gt; &gt; I can get the bridge-server-descriptor, but not the bridge-extra-info.
&gt; &gt; Here are some lines from bridge-server-descriptor:
&gt; &gt; 	platform Tor 0.2.9.10 on Linux
&gt; &gt; 	proto Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3 HSRend=1-2 Link=1-4 \
&gt; &gt; LinkAuth=1 Microdesc=1-2 Relay=1-2  published 2017-06-01 21:19:10
&gt; &gt; 	fingerprint C8CB DB24 64FC 9804 A695 3143 7BCF 2BE3 1FDD 2EE4
&gt; &gt; 	uptime 613949
&gt; &gt; 	bandwidth 1073741824 1073741824 5628404
&gt; &gt; 	extra-info-digest 8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE \
&gt; &gt; 398ZHFBxUpTRfLxv+pSMY3BGMUYlzogXMG40dhjPgnA
&gt; 
&gt; You asked your bridge for its server descriptor and it gave it to you.
&gt; 
&gt; Did you try:
&gt; print controller.get_extrainfo_descriptors("8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE")
&gt;  
&gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.DescriptorDownloader.get_extrainfo_descriptors
&gt;  
&gt; Since your bridge knows its own extra info descriptor, it should serve it to you.
&gt; 
&gt; I don't know how to find a server that caches *all* bridge extra infos.
&gt; Maybe you should try running these queries against the bridge authority?

get_extrainfo_descriptors doesn't work as a method of
stem.control.Controller:
	AttributeError: 'Controller' object has no attribute 'get_extrainfo_descriptors'

Calling get_extrainfo_descriptors from stem.descriptor.remote returns an
empty list. (499D92E08769BFC0B7941C74031335B9EC9E9BAE is the new
extra-info-digest I got from running just now.)
	import stem.descriptor.remote
	print list(stem.descriptor.remote.get_authorities())
	print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4"))
  print list(stem.descriptor.remote.get_extrainfo_descriptors("499D92E08769BFC0B7941C74031335B9EC9E9BAE"))
 This is the output. Bifroest is in the get_authorities list, so I assume
it's querying the bridge authority somewhere in there.
	['maatuska', 'tor26', 'Bifroest', 'longclaw', 'dizum', 'gabelmoo', 'moria1', \
'dannenberg', 'Faravahar']  []
	[]

&gt; (How does OnionOO do it?)

I thought that Onionoo was getting extrainfos from Collector. I assumed
that was the reason why Onionoo doesn't work for the two bridges in
question, because they aren't in Collector.

&gt; &gt; (Furthermore, with the torrc shown above, tor doesn't save *any*
&gt; &gt; extra-info descriptors, despite the presence of "DownloadExtraInfo 1"
&gt; &gt; and "FetchUselessDescriptors 1".
&gt; 
&gt; This is because your bridge is your directory guard.
&gt; 
&gt; If you want to fetch relay extra infos through your bridge, you need to
&gt; configure it to download and serve relay extra infos. I'm not sure how to do
&gt; that (maybe DirCache 1?), so I opened this ticket:
&gt; https://trac.torproject.org/projects/tor/ticket/22492

I'm not really interested in fetching extrainfos through the bridge. I
was only trying to do that for the bridge itself, in order to see how
much traffic the bridge is getting. I thought if Stem couldn't do it, I
might be able to pull the answer out of tor's state directory. Actually
I suspected that the bridge would not cache extrainfos for other
bridges, but I thought it might at least return its own extrainfo.

What I'm trying to understand is why these two bridges are behaving
differently than other default bridges, even though as far as I know
they are configured the same way (obfs4 is the only open port, ORport is
firewalled shut). I'm concerned that we are undercounting the number of
obfs4 users while these bridges are not reporting statistics.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605051508</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-05 05:15:08-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 5 Jun 2017, at 15:06, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; &gt; You asked your bridge for its server descriptor and it gave it to you.
&gt; &gt; 
&gt; &gt; Did you try:
&gt; &gt; print controller.get_extrainfo_descriptors("8B5F0BD647B3C4AF2C57F148FF6A1FB8B695B0AE")
&gt; &gt;  
&gt; &gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.DescriptorDownloader.get_extrainfo_descriptors
&gt; &gt;  
&gt; &gt; Since your bridge knows its own extra info descriptor, it should serve it to you.
&gt; &gt; 
&gt; &gt; I don't know how to find a server that caches *all* bridge extra infos.
&gt; &gt; Maybe you should try running these queries against the bridge authority?
&gt; 
&gt; get_extrainfo_descriptors doesn't work as a method of
&gt; stem.control.Controller:
&gt; 	AttributeError: 'Controller' object has no attribute 'get_extrainfo_descriptors'
&gt; 
&gt; Calling get_extrainfo_descriptors from stem.descriptor.remote returns an
&gt; empty list. (499D92E08769BFC0B7941C74031335B9EC9E9BAE is the new
&gt; extra-info-digest I got from running just now.)
&gt; 	import stem.descriptor.remote
&gt; 	print list(stem.descriptor.remote.get_authorities())
&gt; 	print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4"))
&gt;   print list(stem.descriptor.remote.get_extrainfo_descriptors("499D92E08769BFC0B7941C74031335B9EC9E9BAE"))
&gt;  This is the output. Bifroest is in the get_authorities list, so I assume
&gt; it's querying the bridge authority somewhere in there.
&gt; 	['maatuska', 'tor26', 'Bifroest', 'longclaw', 'dizum', 'gabelmoo', 'moria1', \
&gt; 'dannenberg', 'Faravahar']  []
&gt; 	[]

I think the documentation at:
https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query
is out of date: as far as I know, newer stem versions try fallback
directories rather than authorities.

Even if that's not the case, stem will choose a random authority for
you, which will (8/9 times) tell you that it knows nothing about any
bridge extra infos. (I don't think authorities cache bridge extra
infos.)

Try passing Bifroest's address and DirPort to the endpoints= argument to
get_extrainfo_descriptors():
https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query

T
--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZNOjcAAoJEHQNnjkCUnKiFfgP/3Uypp6JzOkgeLXKfJJTWb+S
slJl4dHPi2QaMkrMpogQ3QjPYT6BunuZEbQFjiusFPc0VMgcFKG1lISA2dAQ51Y4
si8oDVttytoXvf4510xHjt+HBV31GiYCB3uOxHRDb6mlk6Wsc44RL7e4+/l4bXUD
ThOtKl3e9LS5nDVTH20oZ+q4FfhAHgBGfrQidOz6hxOvGRK1Uan+W61sHS0jnsn7
oFne/fGZ1e9WoWQLkakbffpuim8/TFdeLTTcyMZ82UX4Hyip6QLx0/FXT1sI/Pn4
TJrxo0fH4I+s61h+sy9UiwGoE59PW17evgwz6kCRHpLDQtgYg0J6xem24t3xBcsx
wF5/QRIBNc5ZdmLi3NKPdoYW2/qbyAR15Aytc3CgpZi+5GPsk3jVlqQUVdWxeW4C
PwqamRsQ7SYb1mKG/xQB9Yjd1WYz1fbSwIstxUYOEV8fjvZxglmhIud5pp82HiWQ
kR09YFCGw0gw4HXEOG59IOPFQnS+52rVvXuwAWe1p7UQvWxCjky2Bite1cyPup7N
YhuQ1PZ2OGoibkkULtGfOv97W/M3xdMPqdHRJOHbrOJpT27AJdYttuTlRmiKNZm+
HbxrWRE7vAOmUrmmdZpKm9k8mgiA3jC5kEw75NEnC9/O4EWtR4dOZZJtU9Aw+whd
pqE80jbOR04hE2ZTRKsg
=L5Gg
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605055303</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-05 05:53:03-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

On Mon, Jun 05, 2017 at 03:15:08PM +1000, teor wrote:
&gt; 
&gt; &gt; On 5 Jun 2017, at 15:06, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Calling get_extrainfo_descriptors from stem.descriptor.remote returns an
&gt; &gt; empty list. (499D92E08769BFC0B7941C74031335B9EC9E9BAE is the new
&gt; &gt; extra-info-digest I got from running just now.)
&gt; &gt; 	import stem.descriptor.remote
&gt; &gt; 	print list(stem.descriptor.remote.get_authorities())
&gt; &gt; 	print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4"))
&gt; &gt;   print list(stem.descriptor.remote.get_extrainfo_descriptors("499D92E08769BFC0B7941C74031335B9EC9E9BAE"))
&gt; &gt;  This is the output. Bifroest is in the get_authorities list, so I assume
&gt; &gt; it's querying the bridge authority somewhere in there.
&gt; &gt; 	['maatuska', 'tor26', 'Bifroest', 'longclaw', 'dizum', 'gabelmoo', 'moria1', \
&gt; &gt; 'dannenberg', 'Faravahar']  []
&gt; &gt; 	[]
&gt; 
&gt; I think the documentation at:
&gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query
&gt; is out of date: as far as I know, newer stem versions try fallback
&gt; directories rather than authorities.
&gt; 
&gt; Even if that's not the case, stem will choose a random authority for
&gt; you, which will (8/9 times) tell you that it knows nothing about any
&gt; bridge extra infos. (I don't think authorities cache bridge extra
&gt; infos.)
&gt; 
&gt; Try passing Bifroest's address and DirPort to the endpoints= argument to
&gt; get_extrainfo_descriptors():
&gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query

Thanks again for your suggestions. Passing endpoints= doesn't seem to do
anything.
	&gt;&gt;&gt; import stem.descriptor.remote
	&gt;&gt;&gt; BIFROEST = ("37.218.247.217", 80)
	&gt;&gt;&gt; print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4", \
endpoints=(BIFROEST,)))  []
It also doesn't work when trying the fingerprint of another default
bridge, or of one I just got from bridge.torproject.org.
	&gt;&gt;&gt; print list(stem.descriptor.remote.get_server_descriptors("A09D536DD1752D542E1FBB3C9CE4449D51298239", \
endpoints=(BIFROEST,)))  []
	&gt;&gt;&gt; print list(stem.descriptor.remote.get_server_descriptors("924E408BAE68C6C47A06BCDF6A44A53930708092", \
endpoints=(BIFROEST,)))  []
I get the same output with and without the endpoints= argument, and
whether or not I provide the SHA-1 hash of the fingerprint.

Strangely, this call seems to just hang:
	&gt;&gt;&gt; print list(stem.descriptor.remote.get_extrainfo_descriptors("499D92E08769BFC0B7941C74031335B9EC9E9BAE", \
endpoints=(BIFROEST,)))


I tried some other things in Stem but none of them worked.
	&gt;&gt;&gt; from stem.control import Controller
	&gt;&gt;&gt; with Controller.from_port(port = 9051) as controller:
	&gt;&gt;&gt;     controller.authenticate()
	&gt;&gt;&gt;     print controller.get_server_descriptor("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
  router cymrubridge31 38.229.1.78 443 0 0...
	&gt;&gt;&gt;     print controller.get_info("desc/id/C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
  router cymrubridge31 38.229.1.78 443 0 0...
	&gt;&gt;&gt;     print controller.get_info("extra-info/digest/499D92E08769BFC0B7941C74031335B9EC9E9BAE")
  stem.InvalidArguments: GETINFO request contained unrecognized keywords: \
extra-info/digest/499D92E08769BFC0B7941C74031335B9EC9E9BAE

	&gt;&gt;&gt; import stem.connection
	&gt;&gt;&gt; import stem.socket
	&gt;&gt;&gt; control_socket = stem.socket.ControlPort(port = 9051)
	&gt;&gt;&gt; stem.connection.authenticate(control_socket)
	&gt;&gt;&gt; control_socket.send("GETINFO desc/id/C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4")
	&gt;&gt;&gt; print control_socket.recv()
	desc/id/C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4=
	router cymrubridge31 38.229.1.78 443 0 0...
	OK
	&gt;&gt;&gt; control_socket.send("GETINFO \
extra-info/digest/499D92E08769BFC0B7941C74031335B9EC9E9BAE")  &gt;&gt;&gt; print \
control_socket.recv()  Unrecognized key \
"extra-info/digest/499D92E08769BFC0B7941C74031335B9EC9E9BAE" \
_______________________________________________ tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605135104</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-05 13:51:04-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 5 Jun 2017, at 15:53, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; On Mon, Jun 05, 2017 at 03:15:08PM +1000, teor wrote:
&gt; &gt; 
&gt; &gt; &gt; On 5 Jun 2017, at 15:06, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; Calling get_extrainfo_descriptors from stem.descriptor.remote returns an
&gt; &gt; &gt; empty list. (499D92E08769BFC0B7941C74031335B9EC9E9BAE is the new
&gt; &gt; &gt; extra-info-digest I got from running just now.)
&gt; &gt; &gt; 	import stem.descriptor.remote
&gt; &gt; &gt; 	print list(stem.descriptor.remote.get_authorities())
&gt; &gt; &gt; 	print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4"))
&gt; &gt; &gt;   print list(stem.descriptor.remote.get_extrainfo_descriptors("499D92E08769BFC0B7941C74031335B9EC9E9BAE"))
&gt; &gt; &gt;  This is the output. Bifroest is in the get_authorities list, so I assume
&gt; &gt; &gt; it's querying the bridge authority somewhere in there.
&gt; &gt; &gt; 	['maatuska', 'tor26', 'Bifroest', 'longclaw', 'dizum', 'gabelmoo', 'moria1', \
&gt; &gt; &gt; 'dannenberg', 'Faravahar']  []
&gt; &gt; &gt; 	[]
&gt; &gt; 
&gt; &gt; I think the documentation at:
&gt; &gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query
&gt; &gt;  is out of date: as far as I know, newer stem versions try fallback
&gt; &gt; directories rather than authorities.
&gt; &gt; 
&gt; &gt; Even if that's not the case, stem will choose a random authority for
&gt; &gt; you, which will (8/9 times) tell you that it knows nothing about any
&gt; &gt; bridge extra infos. (I don't think authorities cache bridge extra
&gt; &gt; infos.)
&gt; &gt; 
&gt; &gt; Try passing Bifroest's address and DirPort to the endpoints= argument to
&gt; &gt; get_extrainfo_descriptors():
&gt; &gt; https://stem.torproject.org/api/descriptor/remote.html#stem.descriptor.remote.Query
&gt; &gt; 
&gt; 
&gt; Thanks again for your suggestions. Passing endpoints= doesn't seem to do
&gt; anything.
&gt; 	&gt;&gt;&gt; import stem.descriptor.remote
&gt; 	&gt;&gt;&gt; BIFROEST = ("37.218.247.217", 80)
&gt; 	&gt;&gt;&gt; print list(stem.descriptor.remote.get_server_descriptors("C8CBDB2464FC9804A69531437BCF2BE31FDD2EE4", \
&gt; endpoints=(BIFROEST,)))  []
&gt; It also doesn't work when trying the fingerprint of another default
&gt; bridge, or of one I just got from bridge.torproject.org.
&gt; ...

At this point, you are deep in the internals of stem, the control spec,
the dir spec, and their various implementations in Tor.

Atagar might be able to help with the stem side of things.
I'd encourage you to open a ticket for the bridges that aren't
reporting, and we'll try to reproduce and diagnose.

Can you get logs (and torrcs) from those bridges to confirm whether
they think they are producing extra info descriptors?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZNWHIAAoJEHQNnjkCUnKiY3cP/Rs0xU8hbaYl7yIKyjGte9qh
LDoKjliwCQESRUJ0MskbSJX80RBlTeHK2+5fxqTwaetto/Qej5/976Y8ryv6E1Y8
IVloRF1Yq3MDLG2SuWvoWbtg66cTrbMM9+0NeE/6x1J6cxTwhYkrmkcquPv/oyNx
EZ9zFfsTtO53uRHZ5KaGEiWlwRraJ9rZLemWxugNrny6seH041aLYLoRtz/0eMD1
tlWDBnbkNr+N60JQgsjDBYsbXuGO9msbtJrmD6XEOJfB3LJuBJ7iUK4Wn/Ofd2m/
QpXg+BFKn7ZQHTtj6PsapjarTvbs8iNtAHj29HybDyW5+4rC/5S9BoshC2aEoZ6X
i3nl96/NypPIT4TWXdwiB1efCgu2C04GSAzQ5O1EXPXF/PzB1DQWnPQMXirU2E4X
uNcc8naDS+9lEzdxw4sf9spnEtt8wXozorJGUZyQBlNWhq0gWp5QMmOiaeQ0XojK
197HmPpV+rxH7axYzz+ZFPBpf7AAtLE5Kfiu2G2KQyYLsJb4nJbT4JegkDwHXwvu
gmQ11hMhB3SN7rrkoD74u0u8tiHMZmZFrhK+TiiDeccXbBZ8jaCK4ONFlH++pGWp
qFyAi3s9zfqLiZd5aUmhbHqQt2wE4TpDgQ2MTwPFRFzYUITq7JEahb+DQS+Mk3NP
aB4qZKu58FutNvMBnukv
=z63Z
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170605160132</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-05 16:01:32-0400</timestampReceived><subject>Re: [tor-dev] Default bridges that are not publishing statistics</subject><body>

On Mon, Jun 05, 2017 at 11:51:04PM +1000, teor wrote:
&gt; 
&gt; Can you get logs (and torrcs) from those bridges to confirm whether
&gt; they think they are producing extra info descriptors?

I've asked the operator but not gotten a reply yet.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170721140709</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-07-21 14:07:09-0400</timestampReceived><subject>Re: [tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

[Attachment #2 (multipart/signed)]


On 22 Jul (00:02:33), teor wrote:
&gt; Hi all,
&gt; 
&gt; At the moment, Tor uses SHA1 for the running digests of circuit cell
&gt; payloads.
&gt; 
&gt; Some of the prop224 code seems to use SHA256 for the digests for
&gt; client to service rendezvous circuits. But that's not in the spec yet
&gt; (see #22995 at [0]).

That is not accurate. It uses SHA3, notice DIGEST_SHA3_256 in
circuit_init_cpath_crypto():

  if (is_hs_v3) {
    digest_len = DIGEST256_LEN;
    cipher_key_len = CIPHER256_KEY_LEN;
    cpath-&gt;f_digest = crypto_digest256_new(DIGEST_SHA3_256);
    cpath-&gt;b_digest = crypto_digest256_new(DIGEST_SHA3_256);
  }  ...

David

-- 
ra+gAnU3Bd7UeQsMz6zHOjb1xegY80RNpptbYbrMq4Q=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170723020825</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-07-23 02:08:25-0400</timestampReceived><subject>Re: [tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 22 Jul 2017, at 00:07, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; 
&gt; On 22 Jul (00:02:33), teor wrote:
&gt;&gt; Hi all,
&gt;&gt; 
&gt;&gt; At the moment, Tor uses SHA1 for the running digests of circuit cell
&gt;&gt; payloads.
&gt;&gt; 
&gt;&gt; Some of the prop224 code seems to use SHA256 for the digests for
&gt;&gt; client to service rendezvous circuits. But that's not in the spec yet
&gt;&gt; (see #22995 at [0]).
&gt; 
&gt; That is not accurate. It uses SHA3, notice DIGEST_SHA3_256 in
&gt; circuit_init_cpath_crypto():
&gt; 
&gt;  if (is_hs_v3) {
&gt;    digest_len = DIGEST256_LEN;
&gt;    cipher_key_len = CIPHER256_KEY_LEN;
&gt;    cpath-&gt;f_digest = crypto_digest256_new(DIGEST_SHA3_256);
&gt;    cpath-&gt;b_digest = crypto_digest256_new(DIGEST_SHA3_256);
&gt;  }  ...

Oops, missed the "3".

We still need to think about how we migrate hashes, because all hashes
break eventually:
https://valerieaurora.org/hash.html

And I am concerned that we might be hard-coding either SHA1 or SHA3-256
in the v3 hidden service protocol.

The following handshakes depend on version information in the HSv3 protocol:
* client to intro,
* service to rend, and
* client to service.
They can't use version information from the consensus.

I've opened a ticket for this:

https://trac.torproject.org/projects/tor/ticket/23010

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZdAUZAAoJEHQNnjkCUnKixMQQAIQPR7yaiJT60zXoBnXQV2zi
UR6Y03WysRUWqaRQHe3+UF/hbw5IQOXqrNnjxkWq+4qZ2l7AUbYbal+APIJg242e
e5UMmUojPWidOrq8TyBip77xH19TcHRF50dn6+NyAWcgthtgsqxMIxM6+vLvelHZ
bugG9DWgt7fGj3EeNXaYSwH0jSgdrPoV6C+x6YtF/zVHqTsxi9H5qHEiFmZlMgkN
Z0jH2gMy9jnBStJJXgT7y1PCwDSwO1+Q9LiNbQw4JDiOo3L/MRjh/8bv7IHcn4ly
PRvL7YTxYVcMbVb+h9vdgg2D3BP3FKRCG3PW+MK408ss+PO9MLK25n3/OmnDEQ5u
MD2q7sCkaa93kh+JB/g2ycPXAgoV7utUoisywi042atHADtULLbsc3YMDqi8M1gc
1iP3enivyY339eiuxXZf0OHyd67MSBrS7sdL931o5UxUvU1bjct9ukCfbY/72Mi2
TW7CPRqcF9yZb3RVMbLr+frrxampuKJuTOpw+4Cq4Pc3VVV5745zWeWnXw7G8JOe
0JNUQSRFF8UwDxya/3xGARfehO8+bMM+y8uGEixIceickLlNjebu7ngUGX5nhUbp
6pfWIYzCw3vcxJKR0RMz2qc1i1YDLq3c+0WFN2QOiQJBYjOqMv8hKS9ZZ24s7KzG
AdjYqmwcWt1T7jAx3Txe
=z1Ps
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170723052939</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2017-07-23 05:29:39-0400</timestampReceived><subject>Re: [tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

&gt; Date: Sun, 23 Jul 2017 12:08:25 +1000
&gt; From: teor &lt;teor2345@gmail.com&gt;
&gt; 
&gt; We still need to think about how we migrate hashes, because all hashes
&gt; break eventually:
&gt; https://valerieaurora.org/hash.html

As a counterpoint, here is an updated history of collision *and* preimage
attacks, and some commentary on them:

https://z.cash/technology/history-of-hash-function-attacks.html

No hash functions widely accepted as preimage-resistant have ever had
their preimage resistance broken, with the lone exception of Snefru.
(Wikipedia claims a preimage attack on MD5 with complexity 2^123.4,
but if you follow the reference, you'll see that's the time estimate;
the memory estimate is 2^45, raising the area*time product well above
the advertised security level.)

No hash functions widely accepted as collision-resistant have had
their collision resistance broken since Panama: not Whirlpool, not
SHA-2, not SHA-3, none of the SHA-3 finalists, not BLAKE2.  This is
not to say it won't happen, but the extrapolation in
&lt;https://valerieaurora.org/hash.html&gt; does not seem as well supported
by the (admittedly quite heuristic) evidence as the page suggests.

I don't know how hash functions are used in every case in Tor.
Probably not all uses rely on collision resistance at all; perhaps
some that do can be adapted to rely instead only on target collision
resistance, which even MD5 is still conjectured to exhibit.

&gt; And I am concerned that we might be hard-coding either SHA1 or SHA3-256
&gt; in the v3 hidden service protocol.

Maybe so, but are you hard-coding it in the v4 hidden serice protocol?

There's a serious complexity cost in implementing fine-grained
algorithm agility: a combinatorial explosion of possible compositions
and a wider attack surface for decisions by autonomous agents (or,
worse, by inexpert users not competent to make crypto decisions).

I'm not saying don't make it easy to swap out SHA-3 if the time comes,
just cautioning against wiring complexity into the protocol to have
all the agents involved automatically make decisions on the fly about
algorithm choices, without a clear benefit that can't be had in some
simpler way.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170723140031</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@ev0ke.net</senderEmail><timestampReceived>2017-07-23 14:00:31-0400</timestampReceived><subject>Re: [tor-dev] prop224: Deprecating SHA1 circuit digests</subject><body>

[Attachment #2 (multipart/signed)]


On 23 Jul (12:08:25), teor wrote:
&gt; 
&gt; &gt; On 22 Jul 2017, at 00:07, David Goulet &lt;dgoulet@ev0ke.net&gt; wrote:
&gt; &gt; 
&gt; &gt; On 22 Jul (00:02:33), teor wrote:
&gt; &gt;&gt; Hi all,
&gt; &gt;&gt; 
&gt; &gt;&gt; At the moment, Tor uses SHA1 for the running digests of circuit cell
&gt; &gt;&gt; payloads.
&gt; &gt;&gt; 
&gt; &gt;&gt; Some of the prop224 code seems to use SHA256 for the digests for
&gt; &gt;&gt; client to service rendezvous circuits. But that's not in the spec yet
&gt; &gt;&gt; (see #22995 at [0]).
&gt; &gt; 
&gt; &gt; That is not accurate. It uses SHA3, notice DIGEST_SHA3_256 in
&gt; &gt; circuit_init_cpath_crypto():
&gt; &gt; 
&gt; &gt;  if (is_hs_v3) {
&gt; &gt;    digest_len = DIGEST256_LEN;
&gt; &gt;    cipher_key_len = CIPHER256_KEY_LEN;
&gt; &gt;    cpath-&gt;f_digest = crypto_digest256_new(DIGEST_SHA3_256);
&gt; &gt;    cpath-&gt;b_digest = crypto_digest256_new(DIGEST_SHA3_256);
&gt; &gt;  }  ...
&gt; 
&gt; Oops, missed the "3".
&gt; 
&gt; We still need to think about how we migrate hashes, because all hashes
&gt; break eventually:
&gt; https://valerieaurora.org/hash.html
&gt; 
&gt; And I am concerned that we might be hard-coding either SHA1 or SHA3-256
&gt; in the v3 hidden service protocol.
&gt; 
&gt; The following handshakes depend on version information in the HSv3 protocol:
&gt; * client to intro,
&gt; * service to rend, and
&gt; * client to service.
&gt; They can't use version information from the consensus.
&gt; 
&gt; I've opened a ticket for this:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/23010

I want to discuss couple of things about this ticket here (discussion on trac
are really unpleasant...).

First of all, afaict, the hashing choice is not relevant to IP/RP/HSDir at
all. The IP only routes cells between two circuits based on the authentication
key it sees in the INTRODUCE1 cell that the client gets from the descriptor.
The RP routes cells based on a cookie and the HSDir stores descriptor based on
the blinded key it sees in the descriptor. If tomorrow we had to change to
SHA9000, they wouldn't care.

That being said, switching the hash algorithm is a problem between the client
and service.

The HS protocol version (prop224 introcuces v3) is bound to some crypto
choices. It is not designed to be extensible in terms of crypto primitives.
All of those are hardcoded and are part of the protocol: ed25519/curve25519
keys, AES-256 is stream encryption, SHAKE-256 our KDF and SHA3 for our hash
function.

Negotiating cipher suites is a trap for all sorts of really bad issues (SSL is
the prime example). So then we have versionning, different version uses
different things (basically HS v2 and v3). And I think it is what you are
proposing.

Let's imagine a world where next year SHA3 is broken and thus replaced by SHA4
which means that we need to make changes to the HS protocol. In a nutshell,
we'll need to release a tor client and service that can use SHA4 in the HS
protocol.

I guess the question you are asking here is: can we do that without bumping
the HS protocol to v4? (Because bumping to v4, we hardcode SHA4 and job done).
And remember, the version of the service is in the onion address so the client
either know how to speak to it or doesn't.

Now back to trying to switch to SHA4 within the v3 protocol. We either put a
field in the INTRO cell (for instance an EXTENSION) saying "oh I can speak
SHA3 and SHA4". But then you end up with the problem of "which one the client
uses in the INTRO cell?". We don't have protocol version negotiation so either
the client sends all possibilities (huge cell) or try SHA3 and if fails,
re-try with SHA4. Or client picks SHA4, tries the service and service can
speak it or not. This is kind of crummy, all sorts of reachability issues,
more load on the network and user will get hella confused on why there are
failures all of the sudden for this service it was happilly connecting to
before.

Second option, the service adds a hint somewhere in the descriptor saying "My
hash algorithm is SHA4". I strongly think the service should NOT provide a
choice because of the downgrade attack. And we must have a consensus param
that provides the minimum required (as you proposed) so malicious service
advertising SHA3 (that is broken in our example here) will get rejected by
legit clients.

What this approach gives us here versus bumping the protocol version to v4?
The only thing I can see is for the service to be able to keep its onion
address intact which is kind of a big useful thing :P.

However, we end up with the problem of partition ... where some clients will
reach the service that has upgraded and some will fail until they upgrade.
Consensus param can help here that is we have a param that tells the service
what hash algorithm it must use.

It's not an easy problem to be honest, seems most solutions will bring
problems.

To be honest, the version in the address allows a very simple and easy
transition because 1) the service can run a v3 and v4 in parallel with two
addresses and can decide when to cut off the broken v3. It is actually a good
way to transition if you ask me, you put a page on the v3 saying "hey, upgrade
Tor and use this v4 address", 2) the client doesn't even touches the network
if it can't speak v4 and 3) we avoid the version negotiation problem between
client and service. But of course, downside is a new address.

Complexifying the protocol for something that can be fixed with a bump of the
hidden service version protocol is something that I'm not comfortable with
*unless* it provides an important plus value for the users in terms of
security or/and usability.

Cheers!
David.

&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
gWHGWRozhr9DOkdWsxQmZqjzjtgDHfRbX0Qa8n7Bo6c=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170609185024</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2017-06-09 18:50:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal 247 (Hidden Service Vanguards) Overhaul</subject><body>

Hi folks,

Like I did for prop#271, I've done some fixes to prop#247 when
I did my recent reread. Here were the easy fixes:
https://lists.torproject.org/pipermail/tor-commits/2017-June/123303.html

And below are the parts that I shouldn't just unilaterally fix without
the authors of the proposal being involved somehow. :)

On Sun, Sep 13, 2015 at 04:07:30PM -0700, Mike Perry wrote:
&gt;   With this new path selection, we force the adversary to perform a
&gt;   Sybil attack and two compromise attacks before succeeding. This is
&gt;   an improvement over the current state where the Sybil attack is
&gt;   trivial to pull off, and only a single compromise attack is required.
&gt; 
&gt;   With this new path selection, an attacker is forced to do a one or
&gt;   more node compromise attacks before learning the guard node of a hidden
&gt;   service. This increases the uncertainty of the attacker, since
&gt;   compromise attacks are costly and potentially detectable, so an
&gt;   attacker will have to think twice before beginning a chain of node
&gt;   compromise attacks that he might not be able to complete.

These look like duplicate paragraphs? We should pick the one we
like more, or merge them or something.

&gt;   3. As soon as the adversary is confident they have won the Sybil attack,
&gt;      an even more aggressive circuit building attack will allow them to
&gt;      determine the next node very fast (an hour or less).

Won the Sybil attack against what? There is a lot of "won the Sybil
attack" in this proposal, but I worry that each time it means against
different nodes or different hops and that's not specified. We should
try to be clear what exactly the attacker is attacking each time we
talk about an attack.

&gt;   From the table in Section 3.2.1, it can be seen that this means that the
&gt;   Sybil attack will complete with near-certainty (99%) in 29*12 hours
&gt;   (14.5 days) for the 1% adversary, 3 days for the 5% adversary, and
&gt;   1.5 days for the 10% adversary.

Sybil attack to achieve what?

&gt; 4.1. Mitigating fingerprinting of new HS circuits
&gt; 
&gt;   By pinning the middle nodes of rendezvous circuits, we make it
&gt;   easier for all hops of the circuit to detect that they are part of a
&gt;   special hidden service circuit with varying degrees of certainty.
&gt; 
&gt;   The Guard node is able to recognize a Vanguard client with a high
&gt;   degree of certainty because it will observe a client IP creating the
&gt;   overwhelming majority of its circuits to just a few middle nodes in
&gt;   any given 10-18 day time period.
&gt;
&gt;   The middle nodes will be able to tell with a variable certainty that
&gt;   depends on both its traffic volume and upon the popularity of the
&gt;   service, because they will see a large number of circuits that tend to
&gt;   pick the same Guard and Exit.

And if any of the "exits" have an exit policy of reject *:*, that's a
great hint too.

&gt;   This same reasoning is also an argument for increasing the number of
&gt;   second-level guards beyond just two

Maybe you already did that, since it says 'four' above?

&gt; 4.3. Denial of service

And, woah, your 4.3 is "Denial of service", and the 4.3 in git is "Long
term information leaks", so my final bug report here is that the last
sent version of this proposal (sent by Mike on 13 Sept) differs from
the one in git (!).

I guess we should figure out how they differ, since people are going
to arrive on Monday having read different versions of them.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170610131844</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-06-10 13:18:44-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib/DescripTor 1.8.1 minor bugfix</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

A minor bugfix release of metrics-lib/DescripTor is available:

     https://dist.torproject.org/descriptor/1.8.1/

This release fixes a regression in parsing microdescriptors and
version 1 directories introduced in 1.8.0.
The problem only affects CollecTor, which builds on metrics-lib, in so
far that the named descriptors were not recognized and caused plenty of
log messages, but were stored correctly anyway.

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=e0e5d87aacd9f70c23262b7ee10e3e51ec0ae577
 [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZO/GvAAoJEPeEx9Sa/gviNI0P/1X7wXJesXsFTz0c6BCo6TSQ
UcpB0+vYozCJWOc7QznsS+R4zUqLwucSKLMXyBQ8wV5IaDwx0pEvCTkNt85Qbx1b
E+SgWGuWpv/dZOcyyOukw1DUq2Flo+OGAN/NL+Rbe3rzm1QciZIHUiyLWCrBYLnK
e91/Am3IchGI7UPvVe3xviB70F1g2Ewh2bZ5ePepPUfKhtbymNqsSn6fQ6PKwHjk
nSWoYRG8fGpLqQ/8K/ClgLes5C7oT+cvwLuPmPxi+iVXTpZypohDr6SfJBgYxmNJ
7KEcGtQ1LV974vS9F8qBHGKoRDIT6l7LatlB+4j/zAzWz6AJ7POfSnqU7A6+6Od8
trzCRweJVq+MpyIM0ly4K2e3CONRSibyyShrfXXDOcniWamiWPllsVMomiE1bkCB
6RwScQyh0Mkp4l9pA6I9Hn8msaWMjudph7Bv7ZbtqB1sTEvHZTTcZL9XEa7pPwX9
L8RNidaY2AykYe8iWttAB+rrXqWfbyHLTRhANgQPw3XSNlKSHapJQYk2nNyVrP5A
T+ohBUSj6lwxNP4zMEDXRcwCYBXqz/PTLirz1ocSMJfAUYWnO6qI9QAOLYxbWExh
6tTOAYhMrKHrqlPdWJPLS+M9Czp8IWM7TYOCotgV/bqbsRIRDzn9wEtDxkVv7c94
9Yi+WrraHC9iVjpqX5wY
=5lKs
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170611055126</emailId><senderName>Pushkar Pathak</senderName><senderEmail>pushkarpathak21@gmail.com</senderEmail><timestampReceived>2017-06-11 05:51:26-0400</timestampReceived><subject>[tor-dev] [GSoC17] Ahmia status update #1</subject><body>

[Attachment #2 (multipart/alternative)]


Hi everyone,

This is the first status update of my work an ahmia.fi.

I spent the first week of 'coding period' working on a couple of things.

## Automating blacklisting of onions containing child abuse content.
     I implemented an automation process which runs once a week and crawls
onions having child abuse content from uncensored wiki and bans it from the
search results [1].

## I have been working on the Add page to save added onions on a database
and update the elasticsearch servers on a daily basis [2].


During the next two weeks I plan to complete the work left on Add page and
replace Polipo with Torsocks5 proxy in ahmia-crawler.

That's it for this week,
Have a nice day.

Pushkar Pathak

[1] https://github.com/ahmia/ahmia-index/pull/3
[2] https://github.com/mdhash/ahmia-site

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span style="font-size:12.800000190734863px"&gt;Hi everyone,&lt;/span&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;This is the first status update of my work an  \
&lt;a href="http://ahmia.fi/" target="_blank"&gt;ahmia.fi&lt;/a&gt;.&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;I spent the first week of 'coding \
period' working on a couple of things.&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;## Automating blacklisting of onions \
containing child abuse content.&lt;/div&gt;&lt;div style="font-size:12.800000190734863px"&gt;     \
I implemented an automation process which runs once a week and crawls onions having \
child abuse content from uncensored wiki and bans it from the search results \
[1].&lt;/div&gt;&lt;div style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;## I have been working on the Add page to save \
added onions on a database and update the elasticsearch servers on a daily basis \
[2].&lt;/div&gt;&lt;div style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;During the next two weeks I plan to complete \
the work left on Add page and replace Polipo with Torsocks5 proxy in \
ahmia-crawler.&lt;/div&gt;&lt;div style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;That's it for this week,&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;Have a nice day.&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;Pushkar Pathak&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;[1]  &lt;a \
href="https://github.com/ahmia/ahmia-index/pull/3" \
target="_blank"&gt;https://github.com/ahmia/&lt;wbr&gt;ahmia-index/pull/3&lt;/a&gt;&lt;/div&gt;&lt;div \
style="font-size:12.800000190734863px"&gt;[2]  &lt;a \
href="https://github.com/mdhash/ahmia-site" \
target="_blank"&gt;https://github.com/mdhash/&lt;wbr&gt;ahmia-site&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170611201024</emailId><senderName>Jude Nelson</senderName><senderEmail>jude@blockstack.com</senderEmail><timestampReceived>2017-06-11 20:10:24-0400</timestampReceived><subject>Re: [tor-dev] .onion name resolution with Blockstack</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; In case you missed it, you could test this implementation with
&gt; https://github.com/meejah/torns -- which functions similarly to the Stem
&gt; / OnionNS thing but speaks to the actual plugins uning the Prop279
&gt; protocol over stdin/out.

I saw that :)  We'll be using that as the reference test harness.

Best,
Jude

On Sun, Jun 11, 2017 at 2:31 PM, meejah &lt;meejah@meejah.ca&gt; wrote:

&gt; Jude Nelson &lt;jude@blockstack.com&gt; writes:
&gt;
&gt; &gt; We plan to add support to the stdin/stdout protocol in Prop279 as
&gt; &gt; well.
&gt;
&gt; Neat!
&gt;
&gt; In case you missed it, you could test this implementation with
&gt; https://github.com/meejah/torns -- which functions similarly to the Stem
&gt; / OnionNS thing but speaks to the actual plugins uning the Prop279
&gt; protocol over stdin/out.
&gt;
&gt; --
&gt; meejah
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;



-- 

*JUDE NELSON*   *ENGINEERING PARTNER  @BlockstackLabs*

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&gt; In case you missed it, you could test this implementation \
with&lt;div&gt;&gt; &lt;a href="https://github.com/meejah/torns"&gt;https://github.com/meejah/torns&lt;/a&gt; \
-- which functions similarly to the Stem&lt;/div&gt;&lt;div&gt;&gt; / OnionNS thing but speaks to \
the actual plugins uning the Prop279&lt;/div&gt;&lt;div&gt;&gt; protocol over stdin/out.&lt;br&gt;&lt;br&gt;I \
saw that :)   We'll be using that as the reference test \
harness.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Jude&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sun, Jun 11, 2017 at 2:31 PM, \
meejah &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:meejah@meejah.ca" \
target="_blank"&gt;meejah@meejah.ca&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;Jude Nelson &lt;&lt;a \
href="mailto:jude@blockstack.com"&gt;jude@blockstack.com&lt;/a&gt;&gt; writes:&lt;br&gt; &lt;br&gt;
&gt; We plan to add support to the stdin/stdout protocol in Prop279 as&lt;br&gt;
&gt; well.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Neat!&lt;br&gt;
&lt;br&gt;
In case you missed it, you could test this implementation with&lt;br&gt;
&lt;a href="https://github.com/meejah/torns" rel="noreferrer" \
target="_blank"&gt;https://github.com/meejah/&lt;wbr&gt;torns&lt;/a&gt; -- which functions similarly \
to the Stem&lt;br&gt; / OnionNS thing but speaks to the actual plugins uning the \
Prop279&lt;br&gt; protocol over stdin/out.&lt;br&gt;
&lt;span class="HOEnZb"&gt;&lt;font color="#888888"&gt;&lt;br&gt;
--&lt;br&gt;
meejah&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;p \
style="color:rgb(136,136,136);font-size:small;margin:0px"&gt;&lt;font color="#999999" \
face="arial, helvetica, sans-serif" size="1"&gt;&lt;b&gt;JUDE NELSON&lt;/b&gt;&lt;/font&gt;&lt;font size="1" \
face="arial, helvetica, sans-serif"&gt;&lt;font color="#999999"&gt;     &lt;/font&gt;&lt;i \
style="color:rgb(153,153,153)"&gt;ENGINEERING PARTNER   \
@BlockstackLabs&lt;/i&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170612054154</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-12 05:41:54-0400</timestampReceived><subject>[tor-dev] The limits of timing obfuscation in obfs4</subject><body>

Web page with graphics: https://people.torproject.org/~dcf/obfs4-timing/

I was experimenting with ways to better obfuscate the timing signature
of Tor-in-obfs4, while staying compatible with the obfs4 specification.
I tried to make a constant bitrate mode that sends 500 bytes every
100 ms, in which the size and timing of obfs4 packets is independent of
the TLS packets underneath. It turns out that obfs4 mostly makes this
possible, with one exception: a gap in the client traffic while the
client waits for the server's handshake response, during which time the
client cannot send anything because it doesn't yet know the shared key.

Currently, the implementation of obfs4 sends data only when the
underlying process (i.e., tor) has something to send. When tor is quiet,
obfs4 is quiet; and when tor wants to send a packet, obfs4 sends a
packet without delay. obfs4 does add a random amount of padding to its
packets, which slightly alters the packet size signature but not the
timing signature. Even the modes that add short interpacket delays
(iat-mode=1 and iat-mode=2) only really have an effect on bulk
upload/download—they don't have much of an effect on the initial
handshake. See the first three rows of the attached graphic—the timing
of the first dozen or so packets hardly varies across the three modes.

This design, where obfs4 only sends packets when driven by tor, is an
implementation choice and isn't inherent in the protocol. obfs4's
framing structure [spec §5] allows for frames that contain only padding:
	+------------+----------+--------+--------------+------------+------------+
	|  2 bytes   | 16 bytes | 1 byte |   2 bytes    | (optional) | (optional) |
	| Frame len. |   Tag    |  Type  | Payload len. |  Payload   |  Padding   |
	+------------+----------+--------+--------------+------------+------------+
	 \_ Obfs.  _/ \___________ NaCl secretbox (Poly1305/XSalsa20) ___________/
obfs4 could send padding frames (at whatever size and rate) during the
times when tor is quiet. The current implementation, in pseudocode,
works like this (transports/obfs4/obfs4.go obfs4Conn.Write):
	on recv(data) from tor:
		send(frame(data))
If it instead worked like this, then obfs4 could choose its own packet
scheduling, independent of tor's:
	on recv(data) from tor:
		enqueue data on send_buffer

	func give_me_a_frame(): # never blocks
		if send_buffer is not empty:
			dequeue data from send buffer
			return frame(data)
		else:
			return frame(padding)

	in a separate thread:
		buf = []
		while true:
			while length(buf) &lt; 500:
				buf = buf + give_me_a_frame()
			chunk = buf[:500]
			buf = buf[500:]
			send(chunk)
			sleep(100 ms)
The key idea is that give_me_a_frame never blocks: if it doesn't have
any application data immediately available, it returns a padding frame
instead. The independent sending thread calls give_me_a_frame as often
as necessary and obeys its own schedule. Note also that the boundaries
of chunks sent by the sending thread are independent of frame
boundaries. Yawning points me to this code in basket2 that uses the same
idea of independently sending padding according to a schedule:
https://git.schwanenlied.me/yawning/basket2/src/72f203e133c90a26f68f0cd33b0ce90ec6a6b76c/padding_tamaraw.go


I attach a proof-of-concept patch for obfs4proxy that makes it operate
in a constant bitrate mode. You can see its timing signature in the
fourth row of the attached graphic. With this proof of concept, I'm not
trying to claim that a constant bitrate is good for performance or for
censorship resistance. It's just an example of shaping obfs4's traffic
pattern in a way that is independent of the underlying stream. The fifth
row of the graphic shows a more complicated sine wave pattern—it could
be anything.

You will however notice an oddity in the fourth and fifth rows of the
graphic, a gap in the stream of client packets. This is what I alluded
to in the first paragraph, where after the client has sent its client
handshake but before it has received the server handshake, the client
doesn't yet know the shared key. Because every frame sent after the
handshake needs to begin with a tag that depends on the shared key, the
client cannot send anything, not even padding, until it receives the
server's reponse. During this time, the give_me_a_frame function has no
choice but to block.

	k = ephemeral key
	p = random amount of padding
	m = MAC signifying end of padding
	a = authentication tag
	d = data frames
The obfs4 client handshake looks like this [spec §4]:
	k | p | m
The server doesn't reply until it has verified the client's MAC, which
proves that the client knows the bridge's out-of-band secret (this is
how obfs4 resists active probing). The server handshake reply is
similar, with the addition of an authentication tag:
	k | a | p | m	(different values than in the client handshake)
This means that no matter how you schedule packet sending, the traffic
will always have this form, with a ...... gap where the client is
waiting for the server's handshake to come back:
	client  kpppppm......ddddddddddddddddddddddddddd
	server  .......kapppmddddddddddddddddddddddddddd

There isn't a way to completely remove the client gap in obfs4 and still
follow the protocol. A future protocol could perhaps remove it (I say
perhaps because I haven't thought about the crypto implications) by
changing the client's handshake to have a second round of padding, which
it could send while waiting for the server to reply:
	k | p | m1 | p | m2

[spec] https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt?id=obfs4proxy-0.0.7



["obfs4proxy-cbr.patch" (text/x-diff)]

From 3699bbda1633b17eb5fae9ced6158df42fe1384b Mon Sep 17 00:00:00 2001
From: David Fifield &lt;david@bamsoftware.com&gt;
Date: Sat, 10 Jun 2017 17:26:13 -0700
Subject: [PATCH] Queue writes through an independent write scheduler.

Send padding packets where there is no application data waiting.

The one place this doesn't work is in the client, after sending the
client handshake and before receiving the Y' and AUTH portions of the
server reply. During this time the client doesn't yet know the session
key and so cannot send anything. This version waits even longer, until
the entire server handshake has been received (including P_S, M_S, and
MAC_S).

This is set up to do sends in a fixed size of 500 bytes at a fixed rate
of 10 sends per second. As a hack, this rounds the client handshake size
to a multiple of 500 bytes, so that it doesn't stall waiting for the
final full chunk to be available to send.
---
 transports/obfs4/handshake_ntor.go |   8 ++-
 transports/obfs4/obfs4.go          | 122 ++++++++++++++++++++++++++++++++-----
 2 files changed, 114 insertions(+), 16 deletions(-)

diff --git a/transports/obfs4/handshake_ntor.go b/transports/obfs4/handshake_ntor.go
index ee1bca8..fb5935a 100644
--- a/transports/obfs4/handshake_ntor.go
+++ b/transports/obfs4/handshake_ntor.go
@@ -127,7 +127,13 @@ func newClientHandshake(nodeID *ntor.NodeID, serverIdentity \
*ntor.PublicKey, ses  hs.keypair = sessionKey
 	hs.nodeID = nodeID
 	hs.serverIdentity = serverIdentity
-	hs.padLen = csrand.IntRange(clientMinPadLength, clientMaxPadLength)
+	padLen := csrand.IntRange(clientMinPadLength, clientMaxPadLength)
+	// Hack: round total handshake size to a multiple of 500 for CBR mode.
+	padLen = padLen - (padLen + clientMinHandshakeLength) % 500
+	if padLen &lt; 0 {
+		padLen += 500
+	}
+	hs.padLen = padLen
 	hs.mac = hmac.New(sha256.New, append(hs.serverIdentity.Bytes()[:], \
hs.nodeID.Bytes()[:]...))  
 	return hs
diff --git a/transports/obfs4/obfs4.go b/transports/obfs4/obfs4.go
index 304097e..7210210 100644
--- a/transports/obfs4/obfs4.go
+++ b/transports/obfs4/obfs4.go
@@ -34,6 +34,7 @@ import (
 	"crypto/sha256"
 	"flag"
 	"fmt"
+	"io"
 	"math/rand"
 	"net"
 	"strconv"
@@ -265,7 +266,13 @@ func (sf *obfs4ServerFactory) WrapConn(conn net.Conn) (net.Conn, \
error) {  iatDist = probdist.New(sf.iatSeed, 0, maxIATDelay, biasedDist)
 	}
 
-	c := &amp;obfs4Conn{conn, true, lenDist, iatDist, sf.iatMode, bytes.NewBuffer(nil), \
bytes.NewBuffer(nil), make([]byte, consumeReadSize), nil, nil} +	c := \
&amp;obfs4Conn{conn, true, lenDist, iatDist, sf.iatMode, bytes.NewBuffer(nil), \
bytes.NewBuffer(nil), make([]byte, consumeReadSize), make(chan []byte), nil, nil, \
make(chan bool)} +
+	ws := newWriteScheduler(c)
+	go func() {
+		ws.run()
+		c.Close()
+	}()
 
 	startTime := time.Now()
 
@@ -290,8 +297,11 @@ type obfs4Conn struct {
 	receiveDecodedBuffer *bytes.Buffer
 	readBuffer           []byte
 
-	encoder *framing.Encoder
-	decoder *framing.Decoder
+	writeQueue chan []byte
+
+	encoder         *framing.Encoder
+	decoder         *framing.Decoder
+	codersReadyChan chan bool
 }
 
 func newObfs4ClientConn(conn net.Conn, args *obfs4ClientArgs) (c *obfs4Conn, err \
error) { @@ -312,7 +322,13 @@ func newObfs4ClientConn(conn net.Conn, args \
*obfs4ClientArgs) (c *obfs4Conn, err  }
 
 	// Allocate the client structure.
-	c = &amp;obfs4Conn{conn, false, lenDist, iatDist, args.iatMode, bytes.NewBuffer(nil), \
bytes.NewBuffer(nil), make([]byte, consumeReadSize), nil, nil} +	c = &amp;obfs4Conn{conn, \
false, lenDist, iatDist, args.iatMode, bytes.NewBuffer(nil), bytes.NewBuffer(nil), \
make([]byte, consumeReadSize), make(chan []byte), nil, nil, make(chan bool)} +
+	ws := newWriteScheduler(c)
+	go func() {
+		ws.run()
+		c.Close()
+	}()
 
 	// Start the handshake timeout.
 	deadline := time.Now().Add(clientHandshakeTimeout)
@@ -343,9 +359,7 @@ func (conn *obfs4Conn) clientHandshake(nodeID *ntor.NodeID, \
peerIdentityKey *nto  if err != nil {
 		return err
 	}
-	if _, err = conn.Conn.Write(blob); err != nil {
-		return err
-	}
+	conn.writeQueue &lt;- blob
 
 	// Consume the server handshake.
 	var hsBuf [maxHandshakeLength]byte
@@ -370,6 +384,8 @@ func (conn *obfs4Conn) clientHandshake(nodeID *ntor.NodeID, \
peerIdentityKey *nto  okm := ntor.Kdf(seed, framing.KeyLength*2)
 		conn.encoder = framing.NewEncoder(okm[:framing.KeyLength])
 		conn.decoder = framing.NewDecoder(okm[framing.KeyLength:])
+		// Signal to the gimmeData function that our encoder is ready.
+		close(conn.codersReadyChan)
 
 		return nil
 	}
@@ -440,9 +456,11 @@ func (conn *obfs4Conn) serverHandshake(sf *obfs4ServerFactory, \
sessionKey *ntor.  if err := conn.makePacket(&amp;frameBuf, packetTypePrngSeed, \
sf.lenSeed.Bytes()[:], 0); err != nil {  return err
 	}
-	if _, err = conn.Conn.Write(frameBuf.Bytes()); err != nil {
-		return err
-	}
+	conn.writeQueue &lt;- frameBuf.Bytes()
+
+	// Signal to the gimmeData function that our encoder is ready.
+	// Need to do this *after* writing the handshake to the writeQueue.
+	close(conn.codersReadyChan)
 
 	return nil
 }
@@ -557,14 +575,13 @@ func (conn *obfs4Conn) Write(b []byte) (n int, err error) {
 			iatDelta := time.Duration(conn.iatDist.Sample() * 100)
 
 			// Write then sleep.
-			_, err = conn.Conn.Write(iatFrame[:iatWrLen])
-			if err != nil {
-				return 0, err
-			}
+			tmpBuf := make([]byte, iatWrLen)
+			copy(tmpBuf, iatFrame[:iatWrLen])
+			conn.writeQueue &lt;- tmpBuf
 			time.Sleep(iatDelta * time.Microsecond)
 		}
 	} else {
-		_, err = conn.Conn.Write(frameBuf.Bytes())
+		conn.writeQueue &lt;- frameBuf.Bytes()
 	}
 
 	return
@@ -637,6 +654,81 @@ func (conn *obfs4Conn) padBurst(burst *bytes.Buffer, toPadTo \
int) (err error) {  return
 }
 
+func (conn *obfs4Conn) gimmeData() ([]byte, error) {
+	// Poll the writeQueue.
+	select {
+	case chunk := &lt;-conn.writeQueue:
+		return chunk, nil
+	default:
+	}
+	// Otherwise wait until the session key is ready. Keep checking the
+	// writeQueue in case something come in meanwhile.
+	select {
+	case chunk := &lt;-conn.writeQueue:
+		return chunk, nil
+	case &lt;-conn.codersReadyChan:
+	}
+	// No actual data to send, but we have a session key, so send a padding
+	// frame. The exact size doesn't matter much.
+	var frameBuf bytes.Buffer
+	err := conn.makePacket(&amp;frameBuf, packetTypePayload, nil, 1024)
+	if err != nil {
+		return nil, err
+	}
+	return frameBuf.Bytes(), nil
+}
+
+type writeScheduler struct {
+	obfs4 *obfs4Conn
+	buf   bytes.Buffer
+}
+
+func newWriteScheduler(obfs4 *obfs4Conn) *writeScheduler {
+	var ws writeScheduler
+	ws.obfs4 = obfs4
+	return &amp;ws
+}
+
+func (ws *writeScheduler) Read(b []byte) (n int, err error) {
+	for {
+		if ws.buf.Len() &gt; 0 {
+			return ws.buf.Read(b)
+		}
+		ws.buf.Reset()
+		data, err := ws.obfs4.gimmeData()
+		if err != nil {
+			return 0, err
+		}
+		ws.buf.Write(data)
+	}
+}
+
+func (ws *writeScheduler) run() error {
+	var buf [500]byte
+	sched := time.Now()
+	for {
+		n, err := io.ReadFull(ws, buf[:])
+		_, err2 := ws.obfs4.Conn.Write(buf[:n])
+		if err2 != nil {
+			return err2
+		}
+		if err == io.EOF || err == io.ErrUnexpectedEOF {
+			break
+		} else if err != nil {
+			return err
+		}
+
+		now := time.Now()
+		sched = sched.Add(100 * time.Millisecond)
+		if sched.Before(now) {
+			sched = now
+		} else {
+			time.Sleep(sched.Sub(now))
+		}
+	}
+	return nil
+}
+
 func init() {
 	flag.BoolVar(&amp;biasedDist, biasCmdArg, false, "Enable obfs4 using ScrambleSuit style \
table generation")  }
-- 
2.11.0


["obfs4-timing.png" (image/png)]
[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170613154527</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2017-06-13 15:45:27-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2017-06-12 12:00?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2017-06-13 08:54, Karsten Loesing wrote:
&gt; On 2017-06-13 00:03, nusenu wrote:
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; just wanted to let you know that the delta between
&gt;&gt;
&gt;&gt; relays_published and current time is unusually high.
&gt;&gt;
&gt;&gt;
&gt;&gt; https://onionoo.torproject.org/details?limit=0
&gt;&gt;
&gt;&gt; {"version":"4.0",
&gt;&gt; "relays_published":"2017-06-12 12:00:00",
&gt; 
&gt; Right, I noticed the same yesterday afternoon and kicked the hourly
&gt; updater, which apparently didn't work.  I just kicked it again.  If that
&gt; doesn't work, I'll look more closely.  Thanks for the report!

I think I found the issue:

https://trac.torproject.org/projects/tor/ticket/22594

The update is still running, but I think Onionoo will be back with
recent data within the next hour, possibly sooner.

All the best,
Karsten


&gt; 
&gt; All the best,
&gt; Karsten
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170616022051</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2017-06-16 02:20:51-0400</timestampReceived><subject>Re: [tor-dev] Summer 2017 Internship to Create a Bridge Bandwidth Scanner</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; Maybe python3's asyncio (the builtin which seems intended to replace
&gt; twisted) has better options. I certainly wouldn't be surprised if what
&gt; Twisted provides is better than the builtins we had on python 2.7.

I don't think asyncio is "intended" to replace Twisted (even if it took
a lot of inspiration from it). Twisted will be around for a while yet --
and supports Python3, including the "async def" and "await" syntax
sugar. Hawkowl did a talk on this topic last year:

   https://ep2016.europython.eu/conference/talks/the-report-of-twisteds-death

There's no built-in SOCKS5 support in Twisted proper, but there's
txsocksx which is very good (although it lacks Python3 support). Because
of the latter, txtorcon now has its own "sans-io" style SOCKS5
implementation (with the custom Tor opcodes as well) which supports
Python3 as well as of course Python2 and PyPy.

So, you can do async DNS (at least A and PTR lookups) via tor + txtorcon
nicely:

   https://github.com/meejah/txtorcon/blob/master/examples/dns_lookups.py

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170616154646</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-06-16 15:46:46-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib/DescripTor 1.8.2 minor bugfix</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Oh, well, another bugfix release of metrics-lib/DescripTor is available:

     https://dist.torproject.org/descriptor/1.8.2/

This release fixes a problem introduced in 1.8.0; more detail can be
found in the changelog [1].  The error didn't lead to data loss as it
was discovered timely.

Affected instances of Onionoo and CollecTor (in the realm of torproject.org)
are being updated at the moment.

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=0917016f6b2ac6e383fa6862a3a530b4dcf777bc
 [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZQ/1kAAoJEPeEx9Sa/gviPtYP+QGo4cIdMo9ev8W7E/2SRdC7
gcfEOUZE1RCapm6IkFHboslgb5saEFE952wAhFomWunC9df1TByKTLVPiJsVmOf+
Q7WbQh0zZF1W9BkgwIFGCGLhfm2kuLFwXeNHEJ2h73+aKlOvvKv1Lz13e+VCfzLK
jWqsygqVBE3rPloJOOF8CBWWIL0OOzLbWWcp1sUouFUVX1kDpXZZoZ8BsOD3pPH4
oyqyhNbbRwqvGqvt/38RDra80QK2vUtwxi6rxYTildWFRF0l/VLqJEjhgzZBE4z+
kZkc6elnd8Y7F2rlKQY6sHQbDDRbAzcnIsanBkBM8+TzAQVV9crRnoCsuewk93bg
K4p2VDqwc9p6ehotnSJ74dCV0ValNSkqRZyawrJi9xViDS6i3yaaswbMog4lzmh/
sMKjMwLYVD3GiV0uIOlz/okyuJBi1DCbV6LgQF5DkFvlhX7eqPQXXSLYeDkYtLcJ
+8PZ0fXg3uJjja1I8yrAaaoyh0VRtWGkl0xNMLCY9vLSA6uazWMsk36kME8iODt+
hmvQ2Nml6DylrumhORaOI8jb2Ezy5ME4OkCRbGxTrKCYJ0DN64LGZsumoKOxKqfl
m1L4gqIw1UDwL0vGE330rk+ndIoRRKr5F9/I5f0pAClHG4D63UUXNGFniIfb2SLy
erda0PO7N8KJ7zKOn/nq
=zB9B
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170618145631</emailId><senderName></senderName><senderEmail>bancfc</senderEmail><timestampReceived>2017-06-18 14:56:31-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?Extending_Tor_stats_to_cover_anon_OSs=3F?=</subject><body>

@TPO devs

Since you do a great job safely collecting useful stats on the network, 
would you be open to adding a self-identifying anonOS distro option to 
the protocol? Would this be OK or is it mission creep? On the flip side 
it would be much more accurate than anything we can do to estimate 
active user base.

Some ideas:

*The distro name options could either be hard-coded values (for example 
TAILS, Whonix...) or a custom one chosen by downstream maintainers.

*Distro maintainers would enable it for Tor clients via torrc.d
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170618221909</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2017-06-18 22:19:09-0400</timestampReceived><subject>Re: [tor-dev] Extending Tor stats to cover anon OSs?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 19 Jun 2017, at 00:56, bancfc@openmailbox.org wrote:
&gt; 
&gt; @TPO devs
&gt; 
&gt; Since you do a great job safely collecting useful stats on the network, would you \
&gt; be open to adding a self-identifying anonOS distro option to the protocol? Would \
&gt; this be OK or is it mission creep? On the flip side it would be much more accurate \
&gt; than anything we can do to estimate active user base. 
&gt; Some ideas:
&gt; 
&gt; *The distro name options could either be hard-coded values (for example TAILS, \
&gt; Whonix...) or a custom one chosen by downstream maintainers. 
&gt; *Distro maintainers would enable it for Tor clients

I'm sorry, but tor clients do not currently report any statistics.
Only tor relays report statistics.

We also get a limited set of OS/language statistics from Tor Browser
downloads and update pings.

But there is no protocol for tor clients to report statistics.

Any client protocol would need to have the following properties:
1. avoid client tracking, and
2. secure aggregation of counts for each type of client, so counts could
   not be linked to individual guards.

I'm not sure either of these things are possible in tor at this time.
They would require very specialised protocols.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJZRvxdAAoJEHQNnjkCUnKioDQP/jd1+ZaiDbkPSlMks9Ashy8g
uypH/I0HhbZUjxVZ2qKNS/UMzTJ6SPUdGiwRpq07L+3PAu/kLRkaGvinqVa+VJBb
J2FjvuiGnpSjznOjEd/Yn6Mg5a1BYJuP0d8yKT1M1FHo9F1C7XvsLcwf7n9AH966
Yb673Q5kojff1EF/yqerYZ7sSxnDu4jY+miTl7m43QrzCjQHyYEM9HxeYq2yRkHO
Rwnob7/xR0OFIJpR8yq3/C0mbMW7VnMvhadbtJQLJs1VDJqBsCCqq7POqYFcJlbb
rDwyQvwImoWgVs4CS8OToQoTcjVB9w1fvmIdtVH5OeFnDcMKQpWlP0qYH4nfPkj0
zVEWj5Lb+TSwI1UWV9ZkTwAbkMaM+ElzD1XognAPeInMmZClGt3OzjUcxwZkHS3i
nIEsbIvipCiGLvicWr4DCgPyLZO7mjlxGDhulMP8F87JC9qUExs5NpAP41yH0ziV
ky4QSqKeI8IATpLrG47ijH+R8mxOgr/1oA+kVNOpDaFmjnK//F1rnbzHdagwGtHk
5I0g8A2qxJZYOTZnnV2YoKAE/9D/7o072i35z32MMP50eZ8+u7xWSaEwQVdUVxFc
Rvr9SFprKc5rvWdfFIwLQ41FQ+kzcum+vxEYoC6DRaWZquCMemuXG3JQlhmYY/Zj
U1BE6amSevwFiqF9G5+I
=8O3W
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170619152153</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2017-06-19 15:21:53-0400</timestampReceived><subject>Re: [tor-dev] Are we planning to use the "package" mechanism?</subject><body>

On 16 June 2017 at 13:15, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Fri, Jun 16, 2017 at 02:08:53PM -0400, Nick Mathewson wrote:
&gt;&gt; With proposal 227 in 0.2.6.3-alpha, we added a way for authorities to
&gt;&gt; vote on e.g. the latest versions of the torbrowser package.
&gt;&gt;
&gt;&gt; It appears we aren't actually using that, though.  Are we planning to
&gt;&gt; use it in the future?
&gt;
&gt; Last I checked, the authority operators were uncomfortable with the
&gt; slippery slope of "everybody who has some sort of package sends us their
&gt; filename and checksums", because then every Tor client and relay fetches
&gt; that text every hour forever, and we could imagine that blob of text
&gt; growing out of hand.
&gt;
&gt; That said, having the directory authorities vote about a checksum
&gt; of a file, and that file contains all the things, and somebody else
&gt; coordinates what goes in that file, how to handle name spaces in it,
&gt; etc, sounds like it could be totally doable.
&gt;
&gt; That said, from the directory authority perspective, we would want to
&gt; automate the process of voting about that file -- not have the authority
&gt; operators manually check the file and change the sha256 every time
&gt; somebody updates it.
&gt;
&gt; For example, we could wget the file and then put the checksum into our
&gt; votes, thus giving some sort of primitive perspective-access-network
&gt; style robustness.
&gt;
&gt; I don't know what this approach would do to the security assumptions
&gt; from that proposal though.

This sounds like the right approach is a transparency log - the
authorities include a single hash; and it's the responsibility of all
interested packagers to put their submissions in the log...

-tom

On 16 June 2017 at 13:15, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; On Fri, Jun 16, 2017 at 02:08:53PM -0400, Nick Mathewson wrote:
&gt;&gt; With proposal 227 in 0.2.6.3-alpha, we added a way for authorities to
&gt;&gt; vote on e.g. the latest versions of the torbrowser package.
&gt;&gt;
&gt;&gt; It appears we aren't actually using that, though.  Are we planning to
&gt;&gt; use it in the future?
&gt;
&gt; Last I checked, the authority operators were uncomfortable with the
&gt; slippery slope of "everybody who has some sort of package sends us their
&gt; filename and checksums", because then every Tor client and relay fetches
&gt; that text every hour forever, and we could imagine that blob of text
&gt; growing out of hand.
&gt;
&gt; That said, having the directory authorities vote about a checksum
&gt; of a file, and that file contains all the things, and somebody else
&gt; coordinates what goes in that file, how to handle name spaces in it,
&gt; etc, sounds like it could be totally doable.
&gt;
&gt; That said, from the directory authority perspective, we would want to
&gt; automate the process of voting about that file -- not have the authority
&gt; operators manually check the file and change the sha256 every time
&gt; somebody updates it.
&gt;
&gt; For example, we could wget the file and then put the checksum into our
&gt; votes, thus giving some sort of primitive perspective-access-network
&gt; style robustness.
&gt;
&gt; I don't know what this approach would do to the security assumptions
&gt; from that proposal though.
&gt;
&gt; --Roger
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170619162519</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2017-06-19 16:25:19-0400</timestampReceived><subject>[tor-dev] Tor master branch is now 0.3.2.x</subject><body>

Hi! Quick heads-up: development on the 0.3.1.x series is now  in the
maint-0.3.1 branch.  The master branch is now for the 0.3.2.x series.
So if you're fixing a bug in 0.3.1, base your patch on maint-0.3.1 (or
some appropriate earlier maint-x branch) ... and use master for new
features.

Confused? See doc/HACKING/CodingStandards.md for info on how we use git.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170621135848</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-06-21 13:58:48-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib 1.9.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

Another planned release of metrics-lib is available:

     https://dist.torproject.org/descriptor/1.9.0/

The last release preparing the non-backwards compatible changes
to come in version 2.0.0.

The top three changes:
* Simplify DescriptorReader by returning Descriptor instances
  rather than DescriptorFile instances containing Descriptors,
  and add a File reference to Descriptor.
* Introduce a new UnparseableDescriptor to be returned by
  DescriptorParser and DescriptorReader if a descriptor cannot be
  parsed.
* Let DescriptorParser return an Iterable instead of a List, which
  prepares parsing large descriptor files descriptor by descriptor.

For more details see the changelog [1].

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md?id=descriptor-1.9.0
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZSnx7AAoJEPeEx9Sa/gviQ80QAK9m1muFju1dFqdPM6k6R76z
O5XyYWUndNcWQhvZ8wYNM1UjAWalhRnuPBVBFp1wkBtywOnH7YWAerXwtK8s/t2s
3QSmR9eMPSjmDKD07QzRxaiwSmW276qUFvkRt71EGTCI0Cz4PF5RnBCuhUxbjtQa
c38k6v2l7ZfYpfMPLhuPgtuLZCFDIOXAp48q1xCReHAltsOEskOh8zUarDF9+Ivr
BD0o8Wc4GSEl7rQcVTEz+iaheYWJOV5C02oMSBPltdCxP7ug0y+OiNlucRe29OeG
7dUfDF1PrufCQY1Bs1Q5/ny07xpW5ARG07goalcRz2KhJCUkj/fVUAK+kOqN+s2t
NrzVSgkMLyp7NEEKwZ/ZdEZQ/hv14ksLA0L3P8ru1pvGSa/RPV+LFwu4AzAvfWHJ
m3JNcfJwM0CpWZPtQFjSYlseYh9Ogr9VAFENV4F+8YwgCUGnX02BSFV+B0T0AVw4
okwzY4W8jjaSjBDkp+lNE+0VEq3We5vSXKJTaHXV4Eic9kXxNEs7jqsbY2DsA0gp
4/JNSziXCmTCchajEKUDFUyBGhrbQ153klff8kyC/OkZ8Z6mben8Y8isSgC9Qydc
li1anXWlXMklf6wj0cGQCP4Ovi07rUcMrx/6gTngyIQ5xOmGTUHbE3y0T1w+VTw0
G+MpWFQxiGWnVoZG20vj
=NFWS
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170621151228</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2017-06-21 15:12:28-0400</timestampReceived><subject>Re: [tor-dev] Pluggable Transports 2.0 Specification, Draft 2</subject><body>

On Wed, Jun 21, 2017 at 06:20:44AM +0000, Yawning Angel wrote:
&gt; On Tue, 20 Jun 2017 21:27:35 -0700
&gt; David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; &gt; Even closely affiliated projects like Orbot haven't been able to use
&gt; &gt; pluggable transports strictly according to the spec, because of the
&gt; &gt; various constraints on mobile platforms.
&gt; 
&gt; This is basically totally and utterly wrong.

I'm sorry. I guess this bit of folk knowledge I had picked up was wrong.
I thought it was somehow more complicated. I may have been confusing
Android and iOS issues.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170625000322</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2017-06-25 00:03:22-0400</timestampReceived><subject>Re: [tor-dev] When to exit 0 on error</subject><body>

On Sat, Jun 24, 2017 at 12:38 AM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt; On Fri, Jun 23, 2017 at 10:29:32AM -0400, Zack Weinberg wrote:
&gt;&gt; On Fri, Jun 23, 2017 at 9:29 AM, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;&gt; &gt; On Thu, Jun 22, 2017 at 10:49 PM,  &lt;f55jwk4f@vfemail.net&gt; wrote:
&gt;&gt; &gt;&gt; I noticed tor sometimes exits 0 on error
&gt;&gt; &gt;&gt; [...]
&gt;&gt; &gt;&gt; When to exit 0 on error?
&gt;&gt; &gt;
&gt;&gt; &gt; When the error is unrecoverable, and continuing would be worse then exiting.
&gt;&gt;
&gt;&gt; I don't think the question was "when is it appropriate to _exit_ on
&gt;&gt; error?"  I think it was "when is it appropriate to exit _0_ (i.e.
&gt;&gt; apparently successfully) on error?"
&gt;&gt;
&gt;&gt; My expectation would be that exit(0) on fatal error is presumptively a
&gt;&gt; minor bug, it should be exit(1), and if there is some compelling
&gt;&gt; reason to exit successfully in a particular error case, there ought to
&gt;&gt; be a comment explaining that reason.
&gt;&gt;
&gt;&gt; zw
&gt;
&gt; Yes.  I mean why to exit success instead of failure.  But I don't know
&gt; if those cases are typos, because there are 2 such cases, and a typo
&gt; like that can be easily spotted in a review.
&gt;

Ah, you're right. Those should be exit(1).

I've opened https://trac.torproject.org/projects/tor/ticket/22720 in
case anybody wants to fix this. This would be a good task for anybody
who's new to the Tor code: see doc/HACKING/GettingStarted.md for
information on getting started and writing patches.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170625143422</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2017-06-25 14:34:22-0400</timestampReceived><subject>Re: [tor-dev] Names for your onions</subject><body>

[Attachment #2 (multipart/signed)]


On Sun, 25 Jun 2017 10:42:51 +0200
heddha &lt;heddha@unicorn.university&gt; wrote:
&gt; -----BEGIN PGP MESSAGE-----
&gt; 
&gt; hQIMA+0TUowTVIVZAQ//aBI9TzgVTB3R7DIMVB1JL7TzSMOanIjSJkNfDNKI15kC
&gt; 4sX6k0hJdBgIcELuqc9qmUYR0AfkZ+aJz1bPLETrv1IMCa/cB8ymDZreINJhk7BI
&gt; Qk6UM3PcutB7neTH3FR7DkVtSi23AOfOmlf0kNTSRZuMMB4gZO3KfZXGRWq1+FJ3
&gt; [snip]

Why are you sending PGP encrypted e-mail to a public mailing list.

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20170627094401</emailId><senderName>Daniel Pinto</senderName><senderEmail>danielpinto52@gmail.com</senderEmail><timestampReceived>2017-06-27 09:44:01-0400</timestampReceived><subject>Re: [tor-dev] Problems on torrc.d-style configuration directories</subject><body>

I've already created #22391
(https://trac.torproject.org/projects/tor/ticket/22391) to add torrc.d
to the deb package.

I've used /etc/torrc.d instead of the services structure mentioned on
#1922 but feel free to change that.


2017-06-27 3:42 GMT+01:00 teor &lt;teor2345@gmail.com&gt;:
&gt;
&gt;&gt; On 27 Jun 2017, at 12:08, iry &lt;iry@riseup.net&gt; wrote:
&gt;&gt;
&gt;&gt; ...
&gt;&gt;
&gt;&gt; teor:
&gt;&gt; &gt; If you get this working, please submit a patch to the Debian bug
&gt;&gt; &gt; tracker.
&gt;&gt;
&gt;&gt; No problem! But please forgive my ignorance, could you please explain
&gt;&gt; a little bit more to me that why I should report it to Debian BTS,
&gt;&gt; instead of tpo? In other words, what is the relationship between
&gt;&gt; packages.debian.org and deb.torproject.org?
&gt;&gt;
&gt;&gt; According to cypherpunks[0]:
&gt;&gt; &gt; The first released tor version with this feature is 0.3.1.1-alpha.
&gt;&gt; &gt; As usual there will be alpha packages on deb.torproject.org
&gt;&gt; &gt;
&gt;&gt; &gt; If you want this feature _now_ you can use the nightly builds:
&gt;&gt; &gt; https://deb.torproject.org/torproject.org/dists/tor-nightly-master-str
&gt;&gt; etch
&gt;&gt;
&gt;&gt; However,
&gt;&gt; &gt;
&gt;&gt; the highest tor version in Debian BTS right now is
&gt;&gt; 3.0.8-1.[1], which means the feature has not been included into Debian?
&gt;&gt;
&gt;&gt; My current thought is deb.torproject.org is the upstream of
&gt;&gt; packages.debian.org in terms of tor package. So a change made in
&gt;&gt; deb.torproject.org will be adopted by packages.debian.org after a while.
&gt;
&gt; My understanding is that:
&gt; * git.torproject.org is the upstream for a lot of different packagers,
&gt; * bugs in git.torproject.org are reported on trac.torproject.org
&gt;   (there is no debian packages component on the tor trac)
&gt;
&gt; * for debian packages, deb.torproject.org is the upstream of
&gt;   packages.debian.org,
&gt; * bugs for debian packages are reported on the debian bug tracker
&gt;
&gt; Debian was just in a distribution release freeze, so I'm not sure when
&gt; they will update their version. But I'm sure they would appreciate a
&gt; patch when they do upgrade.
&gt;
&gt;&gt; ...
&gt;&gt; The Tor version I tested was:
&gt;&gt; &gt; Tor version 0.3.1.3-alpha-dev (git-a73d0fe9a87df762+b433dff)
&gt;
&gt; T
&gt;
&gt; --
&gt; Tim Wilson-Brown (teor)
&gt;
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; xmpp: teor at torproject dot org
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170627141808</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2017-06-27 14:18:08-0400</timestampReceived><subject>Re: [tor-dev] prop224: Time Period Overlaps and Blinded Keys</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt; Hi,
&gt;
&gt; The time period overlap section 2.2.4 in prop224 is under-specified:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt#n821
&gt;
&gt; 1. During the overlap period, does the service use the new blinded key
&gt; for the new period, and the old blinded key for the old period?
&gt;
&gt; I think the answer is yes, but this requires some deduction to work
&gt; out.
&gt;
&gt; 2. If the overlap period starts when a service sees the first consensus
&gt; with a new SRV, does the service stop using that SRV and blinded key:
&gt; * at the end of the period?
&gt;   (that is, exactly 36 hours after the earliest the overlap period
&gt;    could possibly have started.)
&gt; * exactly 36 hours after the SRV was first seen?
&gt;   (that is, exactly 36 hours after the service started the overlap
&gt;    period. For example, if the service fetched the consensus 2 hours
&gt;    after it was created, it would end 2 hours after the end of the
&gt;    period.)
&gt; * when the first reveal consensus is received with that SRV as the
&gt;   previous SRV? (or some similar consensus-driven event)
&gt;
&gt; Does every service on a tor instance start the overlap at the same
&gt; time?
&gt;

Hey teor,

thanks for the good questions!

Your questions made us rethink the overlap logic, and check the code to
see whether it conforms with the spec. Apparently the code logic is
quite different from the spec. I opened two tickets to track progress in
this area:

#22736: Update spec wrt overlap behavior of HSes
#22735: HS desc overlap period func uses absolute times instead of slots
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170628233818</emailId><senderName>Taylor Yu</senderName><senderEmail>catalyst@torproject.org</senderEmail><timestampReceived>2017-06-28 23:38:18-0400</timestampReceived><subject>[tor-dev] moving toward requiring regression tests for bug fixes</subject><body>

Hi all,

I've opened a Trac ticket at
https://trac.torproject.org/projects/tor/ticket/22745 about possibly
requiring all bug fixes to have associated regression tests.  This is
aimed at Core Tor (starting with 0.3.2.x) but other Tor-related software
might want to consider a policy like this as well.

Ideally all bug fixes will have automated regression tests so we can
promptly recognize when they've regressed and fix them.  I realize that
some of our code may be too complex for an automated regression test to
be feasible, so we would have a procedure for exceptions from this
requirement.  (This would become part of the patch review process.)

Please comment on the ticket if you have opinions about this idea.  (Or
respond in email if your reply wouldn't work well in the form of a
ticket comment.)

Thanks!
-Taylor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20170629153344</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2017-06-29 15:33:44-0400</timestampReceived><subject>[tor-dev] [release] metrics-lib 2.0.0</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi there!

As planned in May [0] the next a major release of Tor Metrics Library
is available:

     https://dist.torproject.org/metrics-lib/2.0.0/

This time we have a special blog post about this release and Tor Metrics Library [1].

Please direct comments and questions to the metrics-team mailing list [2], or comment
on the blog post.

Cheers,
iwakeh

[0] https://lists.torproject.org/pipermail/tor-dev/2017-May/012261.html
[1] https://blog.torproject.org/blog/tor-descriptors-la-carte-tor-metrics-library-2
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJZVR3LAAoJEPeEx9Sa/gvi/UkP/0X0mB7fkjfnbQDHOBrrzJdL
CIM1pxubdoTvfr3I9Gy/3EYBP2ps/eqEa1bPP6WB0eg/BnLkEhuRtu4mFd35oEDB
67XPGfBwv7ICww4/9NXBQ37aNeBpwuQ6yZopoymY6Pis/RYiO1NG89GWCIMeq2I8
w4rDf2ElMAjYY2Vw0lLlKxL+v1eja2ChuaYpXhJvqxZV7qQsmvi9oOtQ5YYHNJyW
+c5c0ajbO8LtC6Bd40XNjVBV3ayhp9iwbKFKbsvnkrlHHUvdMwRwk6CeE8iiK0FG
YVObe6hljLR9IQjfaRYBf4moMg/rZdacJtu2rqBR9MubL/i7//+r0wgxk3za/rok
kzNaoO9iz13FGBE/4Rum9CsN/8gAJuOn73JyeApB6HohXlAQfIwUtmpVcg/EaWXb
flyJDRrxUIWilwuOTfyunpu/BEuR3bSawYorvLasna2hIPG14DtVrHzNCY3TlxFz
2GJn0vegDGJI9QpgTW8J2VCGQCPXcFqvIKfl0IM3p6lJWw8VuE4K6XchlebHgJaH
qzYwYvfgtGD5GbpdssBOFocYPwOP0jQqgkEiZPMpkdl9U27o7DmHrnd9E54NCDYw
cOAfu9s1OpGjgiQuwli0UoZHVoZtDIghmZMOC1hUzmlz5W/be7GgThRGix9ZMfXF
BSAGkbAy1AlwN1kGEJMx
=i4rq
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email></emails>